
WT1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091d4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae4  080092e0  080092e0  0000a2e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009dc4  08009dc4  0000b0bc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009dc4  08009dc4  0000adc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009dcc  08009dcc  0000b0bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009dcc  08009dcc  0000adcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009dd0  08009dd0  0000add0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000bc  20000000  08009dd4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ac  200000bc  08009e90  0000b0bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000568  08009e90  0000b568  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b0bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000136ad  00000000  00000000  0000b0e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003aaa  00000000  00000000  0001e792  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f8  00000000  00000000  00022240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dc6  00000000  00000000  00023438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a57b  00000000  00000000  000241fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018718  00000000  00000000  0003e779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e9be  00000000  00000000  00056e91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e584f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005324  00000000  00000000  000e5894  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000eabb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000bc 	.word	0x200000bc
 8000128:	00000000 	.word	0x00000000
 800012c:	080092c8 	.word	0x080092c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000c0 	.word	0x200000c0
 8000148:	080092c8 	.word	0x080092c8

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <__aeabi_frsub>:
 8000170:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000174:	e002      	b.n	800017c <__addsf3>
 8000176:	bf00      	nop

08000178 <__aeabi_fsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800017c <__addsf3>:
 800017c:	0042      	lsls	r2, r0, #1
 800017e:	bf1f      	itttt	ne
 8000180:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000184:	ea92 0f03 	teqne	r2, r3
 8000188:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800018c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000190:	d06a      	beq.n	8000268 <__addsf3+0xec>
 8000192:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000196:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019a:	bfc1      	itttt	gt
 800019c:	18d2      	addgt	r2, r2, r3
 800019e:	4041      	eorgt	r1, r0
 80001a0:	4048      	eorgt	r0, r1
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	2b19      	cmp	r3, #25
 80001aa:	bf88      	it	hi
 80001ac:	4770      	bxhi	lr
 80001ae:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80001b2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001b6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4240      	negne	r0, r0
 80001be:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001c6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4249      	negne	r1, r1
 80001ce:	ea92 0f03 	teq	r2, r3
 80001d2:	d03f      	beq.n	8000254 <__addsf3+0xd8>
 80001d4:	f1a2 0201 	sub.w	r2, r2, #1
 80001d8:	fa41 fc03 	asr.w	ip, r1, r3
 80001dc:	eb10 000c 	adds.w	r0, r0, ip
 80001e0:	f1c3 0320 	rsb	r3, r3, #32
 80001e4:	fa01 f103 	lsl.w	r1, r1, r3
 80001e8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001ec:	d502      	bpl.n	80001f4 <__addsf3+0x78>
 80001ee:	4249      	negs	r1, r1
 80001f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001f8:	d313      	bcc.n	8000222 <__addsf3+0xa6>
 80001fa:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001fe:	d306      	bcc.n	800020e <__addsf3+0x92>
 8000200:	0840      	lsrs	r0, r0, #1
 8000202:	ea4f 0131 	mov.w	r1, r1, rrx
 8000206:	f102 0201 	add.w	r2, r2, #1
 800020a:	2afe      	cmp	r2, #254	@ 0xfe
 800020c:	d251      	bcs.n	80002b2 <__addsf3+0x136>
 800020e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000212:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000216:	bf08      	it	eq
 8000218:	f020 0001 	biceq.w	r0, r0, #1
 800021c:	ea40 0003 	orr.w	r0, r0, r3
 8000220:	4770      	bx	lr
 8000222:	0049      	lsls	r1, r1, #1
 8000224:	eb40 0000 	adc.w	r0, r0, r0
 8000228:	3a01      	subs	r2, #1
 800022a:	bf28      	it	cs
 800022c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000230:	d2ed      	bcs.n	800020e <__addsf3+0x92>
 8000232:	fab0 fc80 	clz	ip, r0
 8000236:	f1ac 0c08 	sub.w	ip, ip, #8
 800023a:	ebb2 020c 	subs.w	r2, r2, ip
 800023e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000242:	bfaa      	itet	ge
 8000244:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000248:	4252      	neglt	r2, r2
 800024a:	4318      	orrge	r0, r3
 800024c:	bfbc      	itt	lt
 800024e:	40d0      	lsrlt	r0, r2
 8000250:	4318      	orrlt	r0, r3
 8000252:	4770      	bx	lr
 8000254:	f092 0f00 	teq	r2, #0
 8000258:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800025c:	bf06      	itte	eq
 800025e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000262:	3201      	addeq	r2, #1
 8000264:	3b01      	subne	r3, #1
 8000266:	e7b5      	b.n	80001d4 <__addsf3+0x58>
 8000268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800026c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000270:	bf18      	it	ne
 8000272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000276:	d021      	beq.n	80002bc <__addsf3+0x140>
 8000278:	ea92 0f03 	teq	r2, r3
 800027c:	d004      	beq.n	8000288 <__addsf3+0x10c>
 800027e:	f092 0f00 	teq	r2, #0
 8000282:	bf08      	it	eq
 8000284:	4608      	moveq	r0, r1
 8000286:	4770      	bx	lr
 8000288:	ea90 0f01 	teq	r0, r1
 800028c:	bf1c      	itt	ne
 800028e:	2000      	movne	r0, #0
 8000290:	4770      	bxne	lr
 8000292:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000296:	d104      	bne.n	80002a2 <__addsf3+0x126>
 8000298:	0040      	lsls	r0, r0, #1
 800029a:	bf28      	it	cs
 800029c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80002a0:	4770      	bx	lr
 80002a2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80002a6:	bf3c      	itt	cc
 80002a8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80002ac:	4770      	bxcc	lr
 80002ae:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80002b2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ba:	4770      	bx	lr
 80002bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c0:	bf16      	itet	ne
 80002c2:	4608      	movne	r0, r1
 80002c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002c8:	4601      	movne	r1, r0
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	bf06      	itte	eq
 80002ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d2:	ea90 0f01 	teqeq	r0, r1
 80002d6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002da:	4770      	bx	lr

080002dc <__aeabi_ui2f>:
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	e004      	b.n	80002ec <__aeabi_i2f+0x8>
 80002e2:	bf00      	nop

080002e4 <__aeabi_i2f>:
 80002e4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002e8:	bf48      	it	mi
 80002ea:	4240      	negmi	r0, r0
 80002ec:	ea5f 0c00 	movs.w	ip, r0
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002f8:	4601      	mov	r1, r0
 80002fa:	f04f 0000 	mov.w	r0, #0
 80002fe:	e01c      	b.n	800033a <__aeabi_l2f+0x2a>

08000300 <__aeabi_ul2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	e00a      	b.n	8000324 <__aeabi_l2f+0x14>
 800030e:	bf00      	nop

08000310 <__aeabi_l2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800031c:	d502      	bpl.n	8000324 <__aeabi_l2f+0x14>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	ea5f 0c01 	movs.w	ip, r1
 8000328:	bf02      	ittt	eq
 800032a:	4684      	moveq	ip, r0
 800032c:	4601      	moveq	r1, r0
 800032e:	2000      	moveq	r0, #0
 8000330:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000334:	bf08      	it	eq
 8000336:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800033a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800033e:	fabc f28c 	clz	r2, ip
 8000342:	3a08      	subs	r2, #8
 8000344:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000348:	db10      	blt.n	800036c <__aeabi_l2f+0x5c>
 800034a:	fa01 fc02 	lsl.w	ip, r1, r2
 800034e:	4463      	add	r3, ip
 8000350:	fa00 fc02 	lsl.w	ip, r0, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800035c:	fa20 f202 	lsr.w	r2, r0, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	f020 0001 	biceq.w	r0, r0, #1
 800036a:	4770      	bx	lr
 800036c:	f102 0220 	add.w	r2, r2, #32
 8000370:	fa01 fc02 	lsl.w	ip, r1, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800037c:	fa21 f202 	lsr.w	r2, r1, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038a:	4770      	bx	lr

0800038c <__aeabi_fmul>:
 800038c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000390:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000394:	bf1e      	ittt	ne
 8000396:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039a:	ea92 0f0c 	teqne	r2, ip
 800039e:	ea93 0f0c 	teqne	r3, ip
 80003a2:	d06f      	beq.n	8000484 <__aeabi_fmul+0xf8>
 80003a4:	441a      	add	r2, r3
 80003a6:	ea80 0c01 	eor.w	ip, r0, r1
 80003aa:	0240      	lsls	r0, r0, #9
 80003ac:	bf18      	it	ne
 80003ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b2:	d01e      	beq.n	80003f2 <__aeabi_fmul+0x66>
 80003b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c0:	fba0 3101 	umull	r3, r1, r0, r1
 80003c4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003c8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003cc:	bf3e      	ittt	cc
 80003ce:	0049      	lslcc	r1, r1, #1
 80003d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d4:	005b      	lslcc	r3, r3, #1
 80003d6:	ea40 0001 	orr.w	r0, r0, r1
 80003da:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003de:	2afd      	cmp	r2, #253	@ 0xfd
 80003e0:	d81d      	bhi.n	800041e <__aeabi_fmul+0x92>
 80003e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ea:	bf08      	it	eq
 80003ec:	f020 0001 	biceq.w	r0, r0, #1
 80003f0:	4770      	bx	lr
 80003f2:	f090 0f00 	teq	r0, #0
 80003f6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003fa:	bf08      	it	eq
 80003fc:	0249      	lsleq	r1, r1, #9
 80003fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000402:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000406:	3a7f      	subs	r2, #127	@ 0x7f
 8000408:	bfc2      	ittt	gt
 800040a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800040e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000412:	4770      	bxgt	lr
 8000414:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	3a01      	subs	r2, #1
 800041e:	dc5d      	bgt.n	80004dc <__aeabi_fmul+0x150>
 8000420:	f112 0f19 	cmn.w	r2, #25
 8000424:	bfdc      	itt	le
 8000426:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800042a:	4770      	bxle	lr
 800042c:	f1c2 0200 	rsb	r2, r2, #0
 8000430:	0041      	lsls	r1, r0, #1
 8000432:	fa21 f102 	lsr.w	r1, r1, r2
 8000436:	f1c2 0220 	rsb	r2, r2, #32
 800043a:	fa00 fc02 	lsl.w	ip, r0, r2
 800043e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000442:	f140 0000 	adc.w	r0, r0, #0
 8000446:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044a:	bf08      	it	eq
 800044c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000450:	4770      	bx	lr
 8000452:	f092 0f00 	teq	r2, #0
 8000456:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800045a:	bf02      	ittt	eq
 800045c:	0040      	lsleq	r0, r0, #1
 800045e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000462:	3a01      	subeq	r2, #1
 8000464:	d0f9      	beq.n	800045a <__aeabi_fmul+0xce>
 8000466:	ea40 000c 	orr.w	r0, r0, ip
 800046a:	f093 0f00 	teq	r3, #0
 800046e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0049      	lsleq	r1, r1, #1
 8000476:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800047a:	3b01      	subeq	r3, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xe6>
 800047e:	ea41 010c 	orr.w	r1, r1, ip
 8000482:	e78f      	b.n	80003a4 <__aeabi_fmul+0x18>
 8000484:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000488:	ea92 0f0c 	teq	r2, ip
 800048c:	bf18      	it	ne
 800048e:	ea93 0f0c 	teqne	r3, ip
 8000492:	d00a      	beq.n	80004aa <__aeabi_fmul+0x11e>
 8000494:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000498:	bf18      	it	ne
 800049a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800049e:	d1d8      	bne.n	8000452 <__aeabi_fmul+0xc6>
 80004a0:	ea80 0001 	eor.w	r0, r0, r1
 80004a4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004a8:	4770      	bx	lr
 80004aa:	f090 0f00 	teq	r0, #0
 80004ae:	bf17      	itett	ne
 80004b0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004b4:	4608      	moveq	r0, r1
 80004b6:	f091 0f00 	teqne	r1, #0
 80004ba:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004be:	d014      	beq.n	80004ea <__aeabi_fmul+0x15e>
 80004c0:	ea92 0f0c 	teq	r2, ip
 80004c4:	d101      	bne.n	80004ca <__aeabi_fmul+0x13e>
 80004c6:	0242      	lsls	r2, r0, #9
 80004c8:	d10f      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004ca:	ea93 0f0c 	teq	r3, ip
 80004ce:	d103      	bne.n	80004d8 <__aeabi_fmul+0x14c>
 80004d0:	024b      	lsls	r3, r1, #9
 80004d2:	bf18      	it	ne
 80004d4:	4608      	movne	r0, r1
 80004d6:	d108      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004d8:	ea80 0001 	eor.w	r0, r0, r1
 80004dc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004e0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004e8:	4770      	bx	lr
 80004ea:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ee:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_fdiv>:
 80004f4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004fc:	bf1e      	ittt	ne
 80004fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000502:	ea92 0f0c 	teqne	r2, ip
 8000506:	ea93 0f0c 	teqne	r3, ip
 800050a:	d069      	beq.n	80005e0 <__aeabi_fdiv+0xec>
 800050c:	eba2 0203 	sub.w	r2, r2, r3
 8000510:	ea80 0c01 	eor.w	ip, r0, r1
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051a:	d037      	beq.n	800058c <__aeabi_fdiv+0x98>
 800051c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000520:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000524:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000528:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800052c:	428b      	cmp	r3, r1
 800052e:	bf38      	it	cc
 8000530:	005b      	lslcc	r3, r3, #1
 8000532:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000536:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800053a:	428b      	cmp	r3, r1
 800053c:	bf24      	itt	cs
 800053e:	1a5b      	subcs	r3, r3, r1
 8000540:	ea40 000c 	orrcs.w	r0, r0, ip
 8000544:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000548:	bf24      	itt	cs
 800054a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800054e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000552:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000556:	bf24      	itt	cs
 8000558:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800055c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000560:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000564:	bf24      	itt	cs
 8000566:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	bf18      	it	ne
 8000572:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000576:	d1e0      	bne.n	800053a <__aeabi_fdiv+0x46>
 8000578:	2afd      	cmp	r2, #253	@ 0xfd
 800057a:	f63f af50 	bhi.w	800041e <__aeabi_fmul+0x92>
 800057e:	428b      	cmp	r3, r1
 8000580:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000590:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000594:	327f      	adds	r2, #127	@ 0x7f
 8000596:	bfc2      	ittt	gt
 8000598:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800059c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a0:	4770      	bxgt	lr
 80005a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	3a01      	subs	r2, #1
 80005ac:	e737      	b.n	800041e <__aeabi_fmul+0x92>
 80005ae:	f092 0f00 	teq	r2, #0
 80005b2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005b6:	bf02      	ittt	eq
 80005b8:	0040      	lsleq	r0, r0, #1
 80005ba:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005be:	3a01      	subeq	r2, #1
 80005c0:	d0f9      	beq.n	80005b6 <__aeabi_fdiv+0xc2>
 80005c2:	ea40 000c 	orr.w	r0, r0, ip
 80005c6:	f093 0f00 	teq	r3, #0
 80005ca:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0049      	lsleq	r1, r1, #1
 80005d2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005d6:	3b01      	subeq	r3, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xda>
 80005da:	ea41 010c 	orr.w	r1, r1, ip
 80005de:	e795      	b.n	800050c <__aeabi_fdiv+0x18>
 80005e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e4:	ea92 0f0c 	teq	r2, ip
 80005e8:	d108      	bne.n	80005fc <__aeabi_fdiv+0x108>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	f47f af7d 	bne.w	80004ea <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	f47f af70 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e776      	b.n	80004ea <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	d104      	bne.n	800060c <__aeabi_fdiv+0x118>
 8000602:	024b      	lsls	r3, r1, #9
 8000604:	f43f af4c 	beq.w	80004a0 <__aeabi_fmul+0x114>
 8000608:	4608      	mov	r0, r1
 800060a:	e76e      	b.n	80004ea <__aeabi_fmul+0x15e>
 800060c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000610:	bf18      	it	ne
 8000612:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000616:	d1ca      	bne.n	80005ae <__aeabi_fdiv+0xba>
 8000618:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800061c:	f47f af5c 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 8000620:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000624:	f47f af3c 	bne.w	80004a0 <__aeabi_fmul+0x114>
 8000628:	e75f      	b.n	80004ea <__aeabi_fmul+0x15e>
 800062a:	bf00      	nop

0800062c <__gesf2>:
 800062c:	f04f 3cff 	mov.w	ip, #4294967295
 8000630:	e006      	b.n	8000640 <__cmpsf2+0x4>
 8000632:	bf00      	nop

08000634 <__lesf2>:
 8000634:	f04f 0c01 	mov.w	ip, #1
 8000638:	e002      	b.n	8000640 <__cmpsf2+0x4>
 800063a:	bf00      	nop

0800063c <__cmpsf2>:
 800063c:	f04f 0c01 	mov.w	ip, #1
 8000640:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000644:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000648:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800064c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000650:	bf18      	it	ne
 8000652:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000656:	d011      	beq.n	800067c <__cmpsf2+0x40>
 8000658:	b001      	add	sp, #4
 800065a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800065e:	bf18      	it	ne
 8000660:	ea90 0f01 	teqne	r0, r1
 8000664:	bf58      	it	pl
 8000666:	ebb2 0003 	subspl.w	r0, r2, r3
 800066a:	bf88      	it	hi
 800066c:	17c8      	asrhi	r0, r1, #31
 800066e:	bf38      	it	cc
 8000670:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000674:	bf18      	it	ne
 8000676:	f040 0001 	orrne.w	r0, r0, #1
 800067a:	4770      	bx	lr
 800067c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000680:	d102      	bne.n	8000688 <__cmpsf2+0x4c>
 8000682:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000686:	d105      	bne.n	8000694 <__cmpsf2+0x58>
 8000688:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800068c:	d1e4      	bne.n	8000658 <__cmpsf2+0x1c>
 800068e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000692:	d0e1      	beq.n	8000658 <__cmpsf2+0x1c>
 8000694:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <__aeabi_cfrcmple>:
 800069c:	4684      	mov	ip, r0
 800069e:	4608      	mov	r0, r1
 80006a0:	4661      	mov	r1, ip
 80006a2:	e7ff      	b.n	80006a4 <__aeabi_cfcmpeq>

080006a4 <__aeabi_cfcmpeq>:
 80006a4:	b50f      	push	{r0, r1, r2, r3, lr}
 80006a6:	f7ff ffc9 	bl	800063c <__cmpsf2>
 80006aa:	2800      	cmp	r0, #0
 80006ac:	bf48      	it	mi
 80006ae:	f110 0f00 	cmnmi.w	r0, #0
 80006b2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006b4 <__aeabi_fcmpeq>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff fff4 	bl	80006a4 <__aeabi_cfcmpeq>
 80006bc:	bf0c      	ite	eq
 80006be:	2001      	moveq	r0, #1
 80006c0:	2000      	movne	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmplt>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffea 	bl	80006a4 <__aeabi_cfcmpeq>
 80006d0:	bf34      	ite	cc
 80006d2:	2001      	movcc	r0, #1
 80006d4:	2000      	movcs	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmple>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffe0 	bl	80006a4 <__aeabi_cfcmpeq>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpge>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffd2 	bl	800069c <__aeabi_cfrcmple>
 80006f8:	bf94      	ite	ls
 80006fa:	2001      	movls	r0, #1
 80006fc:	2000      	movhi	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_fcmpgt>:
 8000704:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000708:	f7ff ffc8 	bl	800069c <__aeabi_cfrcmple>
 800070c:	bf34      	ite	cc
 800070e:	2001      	movcc	r0, #1
 8000710:	2000      	movcs	r0, #0
 8000712:	f85d fb08 	ldr.w	pc, [sp], #8
 8000716:	bf00      	nop

08000718 <__aeabi_uldivmod>:
 8000718:	b953      	cbnz	r3, 8000730 <__aeabi_uldivmod+0x18>
 800071a:	b94a      	cbnz	r2, 8000730 <__aeabi_uldivmod+0x18>
 800071c:	2900      	cmp	r1, #0
 800071e:	bf08      	it	eq
 8000720:	2800      	cmpeq	r0, #0
 8000722:	bf1c      	itt	ne
 8000724:	f04f 31ff 	movne.w	r1, #4294967295
 8000728:	f04f 30ff 	movne.w	r0, #4294967295
 800072c:	f000 b98c 	b.w	8000a48 <__aeabi_idiv0>
 8000730:	f1ad 0c08 	sub.w	ip, sp, #8
 8000734:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000738:	f000 f806 	bl	8000748 <__udivmoddi4>
 800073c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000740:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000744:	b004      	add	sp, #16
 8000746:	4770      	bx	lr

08000748 <__udivmoddi4>:
 8000748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800074c:	9d08      	ldr	r5, [sp, #32]
 800074e:	468e      	mov	lr, r1
 8000750:	4604      	mov	r4, r0
 8000752:	4688      	mov	r8, r1
 8000754:	2b00      	cmp	r3, #0
 8000756:	d14a      	bne.n	80007ee <__udivmoddi4+0xa6>
 8000758:	428a      	cmp	r2, r1
 800075a:	4617      	mov	r7, r2
 800075c:	d962      	bls.n	8000824 <__udivmoddi4+0xdc>
 800075e:	fab2 f682 	clz	r6, r2
 8000762:	b14e      	cbz	r6, 8000778 <__udivmoddi4+0x30>
 8000764:	f1c6 0320 	rsb	r3, r6, #32
 8000768:	fa01 f806 	lsl.w	r8, r1, r6
 800076c:	fa20 f303 	lsr.w	r3, r0, r3
 8000770:	40b7      	lsls	r7, r6
 8000772:	ea43 0808 	orr.w	r8, r3, r8
 8000776:	40b4      	lsls	r4, r6
 8000778:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800077c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000780:	fa1f fc87 	uxth.w	ip, r7
 8000784:	fb0e 8811 	mls	r8, lr, r1, r8
 8000788:	fb01 f20c 	mul.w	r2, r1, ip
 800078c:	0c23      	lsrs	r3, r4, #16
 800078e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000792:	429a      	cmp	r2, r3
 8000794:	d909      	bls.n	80007aa <__udivmoddi4+0x62>
 8000796:	18fb      	adds	r3, r7, r3
 8000798:	f101 30ff 	add.w	r0, r1, #4294967295
 800079c:	f080 80eb 	bcs.w	8000976 <__udivmoddi4+0x22e>
 80007a0:	429a      	cmp	r2, r3
 80007a2:	f240 80e8 	bls.w	8000976 <__udivmoddi4+0x22e>
 80007a6:	3902      	subs	r1, #2
 80007a8:	443b      	add	r3, r7
 80007aa:	1a9a      	subs	r2, r3, r2
 80007ac:	fbb2 f0fe 	udiv	r0, r2, lr
 80007b0:	fb0e 2210 	mls	r2, lr, r0, r2
 80007b4:	fb00 fc0c 	mul.w	ip, r0, ip
 80007b8:	b2a3      	uxth	r3, r4
 80007ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80007be:	459c      	cmp	ip, r3
 80007c0:	d909      	bls.n	80007d6 <__udivmoddi4+0x8e>
 80007c2:	18fb      	adds	r3, r7, r3
 80007c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80007c8:	f080 80d7 	bcs.w	800097a <__udivmoddi4+0x232>
 80007cc:	459c      	cmp	ip, r3
 80007ce:	f240 80d4 	bls.w	800097a <__udivmoddi4+0x232>
 80007d2:	443b      	add	r3, r7
 80007d4:	3802      	subs	r0, #2
 80007d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80007da:	2100      	movs	r1, #0
 80007dc:	eba3 030c 	sub.w	r3, r3, ip
 80007e0:	b11d      	cbz	r5, 80007ea <__udivmoddi4+0xa2>
 80007e2:	2200      	movs	r2, #0
 80007e4:	40f3      	lsrs	r3, r6
 80007e6:	e9c5 3200 	strd	r3, r2, [r5]
 80007ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ee:	428b      	cmp	r3, r1
 80007f0:	d905      	bls.n	80007fe <__udivmoddi4+0xb6>
 80007f2:	b10d      	cbz	r5, 80007f8 <__udivmoddi4+0xb0>
 80007f4:	e9c5 0100 	strd	r0, r1, [r5]
 80007f8:	2100      	movs	r1, #0
 80007fa:	4608      	mov	r0, r1
 80007fc:	e7f5      	b.n	80007ea <__udivmoddi4+0xa2>
 80007fe:	fab3 f183 	clz	r1, r3
 8000802:	2900      	cmp	r1, #0
 8000804:	d146      	bne.n	8000894 <__udivmoddi4+0x14c>
 8000806:	4573      	cmp	r3, lr
 8000808:	d302      	bcc.n	8000810 <__udivmoddi4+0xc8>
 800080a:	4282      	cmp	r2, r0
 800080c:	f200 8108 	bhi.w	8000a20 <__udivmoddi4+0x2d8>
 8000810:	1a84      	subs	r4, r0, r2
 8000812:	eb6e 0203 	sbc.w	r2, lr, r3
 8000816:	2001      	movs	r0, #1
 8000818:	4690      	mov	r8, r2
 800081a:	2d00      	cmp	r5, #0
 800081c:	d0e5      	beq.n	80007ea <__udivmoddi4+0xa2>
 800081e:	e9c5 4800 	strd	r4, r8, [r5]
 8000822:	e7e2      	b.n	80007ea <__udivmoddi4+0xa2>
 8000824:	2a00      	cmp	r2, #0
 8000826:	f000 8091 	beq.w	800094c <__udivmoddi4+0x204>
 800082a:	fab2 f682 	clz	r6, r2
 800082e:	2e00      	cmp	r6, #0
 8000830:	f040 80a5 	bne.w	800097e <__udivmoddi4+0x236>
 8000834:	1a8a      	subs	r2, r1, r2
 8000836:	2101      	movs	r1, #1
 8000838:	0c03      	lsrs	r3, r0, #16
 800083a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800083e:	b280      	uxth	r0, r0
 8000840:	b2bc      	uxth	r4, r7
 8000842:	fbb2 fcfe 	udiv	ip, r2, lr
 8000846:	fb0e 221c 	mls	r2, lr, ip, r2
 800084a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800084e:	fb04 f20c 	mul.w	r2, r4, ip
 8000852:	429a      	cmp	r2, r3
 8000854:	d907      	bls.n	8000866 <__udivmoddi4+0x11e>
 8000856:	18fb      	adds	r3, r7, r3
 8000858:	f10c 38ff 	add.w	r8, ip, #4294967295
 800085c:	d202      	bcs.n	8000864 <__udivmoddi4+0x11c>
 800085e:	429a      	cmp	r2, r3
 8000860:	f200 80e3 	bhi.w	8000a2a <__udivmoddi4+0x2e2>
 8000864:	46c4      	mov	ip, r8
 8000866:	1a9b      	subs	r3, r3, r2
 8000868:	fbb3 f2fe 	udiv	r2, r3, lr
 800086c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000870:	fb02 f404 	mul.w	r4, r2, r4
 8000874:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000878:	429c      	cmp	r4, r3
 800087a:	d907      	bls.n	800088c <__udivmoddi4+0x144>
 800087c:	18fb      	adds	r3, r7, r3
 800087e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000882:	d202      	bcs.n	800088a <__udivmoddi4+0x142>
 8000884:	429c      	cmp	r4, r3
 8000886:	f200 80cd 	bhi.w	8000a24 <__udivmoddi4+0x2dc>
 800088a:	4602      	mov	r2, r0
 800088c:	1b1b      	subs	r3, r3, r4
 800088e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000892:	e7a5      	b.n	80007e0 <__udivmoddi4+0x98>
 8000894:	f1c1 0620 	rsb	r6, r1, #32
 8000898:	408b      	lsls	r3, r1
 800089a:	fa22 f706 	lsr.w	r7, r2, r6
 800089e:	431f      	orrs	r7, r3
 80008a0:	fa2e fa06 	lsr.w	sl, lr, r6
 80008a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80008a8:	fbba f8f9 	udiv	r8, sl, r9
 80008ac:	fa0e fe01 	lsl.w	lr, lr, r1
 80008b0:	fa20 f306 	lsr.w	r3, r0, r6
 80008b4:	fb09 aa18 	mls	sl, r9, r8, sl
 80008b8:	fa1f fc87 	uxth.w	ip, r7
 80008bc:	ea43 030e 	orr.w	r3, r3, lr
 80008c0:	fa00 fe01 	lsl.w	lr, r0, r1
 80008c4:	fb08 f00c 	mul.w	r0, r8, ip
 80008c8:	0c1c      	lsrs	r4, r3, #16
 80008ca:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80008ce:	42a0      	cmp	r0, r4
 80008d0:	fa02 f201 	lsl.w	r2, r2, r1
 80008d4:	d90a      	bls.n	80008ec <__udivmoddi4+0x1a4>
 80008d6:	193c      	adds	r4, r7, r4
 80008d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80008dc:	f080 809e 	bcs.w	8000a1c <__udivmoddi4+0x2d4>
 80008e0:	42a0      	cmp	r0, r4
 80008e2:	f240 809b 	bls.w	8000a1c <__udivmoddi4+0x2d4>
 80008e6:	f1a8 0802 	sub.w	r8, r8, #2
 80008ea:	443c      	add	r4, r7
 80008ec:	1a24      	subs	r4, r4, r0
 80008ee:	b298      	uxth	r0, r3
 80008f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80008f4:	fb09 4413 	mls	r4, r9, r3, r4
 80008f8:	fb03 fc0c 	mul.w	ip, r3, ip
 80008fc:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000900:	45a4      	cmp	ip, r4
 8000902:	d909      	bls.n	8000918 <__udivmoddi4+0x1d0>
 8000904:	193c      	adds	r4, r7, r4
 8000906:	f103 30ff 	add.w	r0, r3, #4294967295
 800090a:	f080 8085 	bcs.w	8000a18 <__udivmoddi4+0x2d0>
 800090e:	45a4      	cmp	ip, r4
 8000910:	f240 8082 	bls.w	8000a18 <__udivmoddi4+0x2d0>
 8000914:	3b02      	subs	r3, #2
 8000916:	443c      	add	r4, r7
 8000918:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800091c:	eba4 040c 	sub.w	r4, r4, ip
 8000920:	fba0 8c02 	umull	r8, ip, r0, r2
 8000924:	4564      	cmp	r4, ip
 8000926:	4643      	mov	r3, r8
 8000928:	46e1      	mov	r9, ip
 800092a:	d364      	bcc.n	80009f6 <__udivmoddi4+0x2ae>
 800092c:	d061      	beq.n	80009f2 <__udivmoddi4+0x2aa>
 800092e:	b15d      	cbz	r5, 8000948 <__udivmoddi4+0x200>
 8000930:	ebbe 0203 	subs.w	r2, lr, r3
 8000934:	eb64 0409 	sbc.w	r4, r4, r9
 8000938:	fa04 f606 	lsl.w	r6, r4, r6
 800093c:	fa22 f301 	lsr.w	r3, r2, r1
 8000940:	431e      	orrs	r6, r3
 8000942:	40cc      	lsrs	r4, r1
 8000944:	e9c5 6400 	strd	r6, r4, [r5]
 8000948:	2100      	movs	r1, #0
 800094a:	e74e      	b.n	80007ea <__udivmoddi4+0xa2>
 800094c:	fbb1 fcf2 	udiv	ip, r1, r2
 8000950:	0c01      	lsrs	r1, r0, #16
 8000952:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000956:	b280      	uxth	r0, r0
 8000958:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800095c:	463b      	mov	r3, r7
 800095e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000962:	4638      	mov	r0, r7
 8000964:	463c      	mov	r4, r7
 8000966:	46b8      	mov	r8, r7
 8000968:	46be      	mov	lr, r7
 800096a:	2620      	movs	r6, #32
 800096c:	eba2 0208 	sub.w	r2, r2, r8
 8000970:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000974:	e765      	b.n	8000842 <__udivmoddi4+0xfa>
 8000976:	4601      	mov	r1, r0
 8000978:	e717      	b.n	80007aa <__udivmoddi4+0x62>
 800097a:	4610      	mov	r0, r2
 800097c:	e72b      	b.n	80007d6 <__udivmoddi4+0x8e>
 800097e:	f1c6 0120 	rsb	r1, r6, #32
 8000982:	fa2e fc01 	lsr.w	ip, lr, r1
 8000986:	40b7      	lsls	r7, r6
 8000988:	fa0e fe06 	lsl.w	lr, lr, r6
 800098c:	fa20 f101 	lsr.w	r1, r0, r1
 8000990:	ea41 010e 	orr.w	r1, r1, lr
 8000994:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000998:	fbbc f8fe 	udiv	r8, ip, lr
 800099c:	b2bc      	uxth	r4, r7
 800099e:	fb0e cc18 	mls	ip, lr, r8, ip
 80009a2:	fb08 f904 	mul.w	r9, r8, r4
 80009a6:	0c0a      	lsrs	r2, r1, #16
 80009a8:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80009ac:	40b0      	lsls	r0, r6
 80009ae:	4591      	cmp	r9, r2
 80009b0:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80009b4:	b280      	uxth	r0, r0
 80009b6:	d93e      	bls.n	8000a36 <__udivmoddi4+0x2ee>
 80009b8:	18ba      	adds	r2, r7, r2
 80009ba:	f108 3cff 	add.w	ip, r8, #4294967295
 80009be:	d201      	bcs.n	80009c4 <__udivmoddi4+0x27c>
 80009c0:	4591      	cmp	r9, r2
 80009c2:	d81f      	bhi.n	8000a04 <__udivmoddi4+0x2bc>
 80009c4:	eba2 0209 	sub.w	r2, r2, r9
 80009c8:	fbb2 f9fe 	udiv	r9, r2, lr
 80009cc:	fb09 f804 	mul.w	r8, r9, r4
 80009d0:	fb0e 2a19 	mls	sl, lr, r9, r2
 80009d4:	b28a      	uxth	r2, r1
 80009d6:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 80009da:	4542      	cmp	r2, r8
 80009dc:	d229      	bcs.n	8000a32 <__udivmoddi4+0x2ea>
 80009de:	18ba      	adds	r2, r7, r2
 80009e0:	f109 31ff 	add.w	r1, r9, #4294967295
 80009e4:	d2c2      	bcs.n	800096c <__udivmoddi4+0x224>
 80009e6:	4542      	cmp	r2, r8
 80009e8:	d2c0      	bcs.n	800096c <__udivmoddi4+0x224>
 80009ea:	f1a9 0102 	sub.w	r1, r9, #2
 80009ee:	443a      	add	r2, r7
 80009f0:	e7bc      	b.n	800096c <__udivmoddi4+0x224>
 80009f2:	45c6      	cmp	lr, r8
 80009f4:	d29b      	bcs.n	800092e <__udivmoddi4+0x1e6>
 80009f6:	ebb8 0302 	subs.w	r3, r8, r2
 80009fa:	eb6c 0c07 	sbc.w	ip, ip, r7
 80009fe:	3801      	subs	r0, #1
 8000a00:	46e1      	mov	r9, ip
 8000a02:	e794      	b.n	800092e <__udivmoddi4+0x1e6>
 8000a04:	eba7 0909 	sub.w	r9, r7, r9
 8000a08:	444a      	add	r2, r9
 8000a0a:	fbb2 f9fe 	udiv	r9, r2, lr
 8000a0e:	f1a8 0c02 	sub.w	ip, r8, #2
 8000a12:	fb09 f804 	mul.w	r8, r9, r4
 8000a16:	e7db      	b.n	80009d0 <__udivmoddi4+0x288>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	e77d      	b.n	8000918 <__udivmoddi4+0x1d0>
 8000a1c:	46d0      	mov	r8, sl
 8000a1e:	e765      	b.n	80008ec <__udivmoddi4+0x1a4>
 8000a20:	4608      	mov	r0, r1
 8000a22:	e6fa      	b.n	800081a <__udivmoddi4+0xd2>
 8000a24:	443b      	add	r3, r7
 8000a26:	3a02      	subs	r2, #2
 8000a28:	e730      	b.n	800088c <__udivmoddi4+0x144>
 8000a2a:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a2e:	443b      	add	r3, r7
 8000a30:	e719      	b.n	8000866 <__udivmoddi4+0x11e>
 8000a32:	4649      	mov	r1, r9
 8000a34:	e79a      	b.n	800096c <__udivmoddi4+0x224>
 8000a36:	eba2 0209 	sub.w	r2, r2, r9
 8000a3a:	fbb2 f9fe 	udiv	r9, r2, lr
 8000a3e:	46c4      	mov	ip, r8
 8000a40:	fb09 f804 	mul.w	r8, r9, r4
 8000a44:	e7c4      	b.n	80009d0 <__udivmoddi4+0x288>
 8000a46:	bf00      	nop

08000a48 <__aeabi_idiv0>:
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <ADC_Init>:
/**
  * @brief Initializes the ADC hardware
  * @param hadc: Pointer to ADC handle
  */
void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
    // Calibration
    if (HAL_ADCEx_Calibration_Start(hadc) != HAL_OK)
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	f003 ffd9 	bl	8004a0c <HAL_ADCEx_Calibration_Start>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <ADC_Init+0x18>
    {
        Error_Handler();
 8000a60:	f001 fa56 	bl	8001f10 <Error_Handler>
    }
}
 8000a64:	bf00      	nop
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <ADC_ReadAllChannels>:
  * @brief Reads all ADC channels and transmits UART messages if thresholds are met.
  * @param hadc: Pointer to ADC handle
  * @param data: Pointer to ADC_Data struct to store results
  */
void ADC_ReadAllChannels(ADC_HandleTypeDef* hadc, ADC_Data* data)
{
 8000a6c:	b590      	push	{r4, r7, lr}
 8000a6e:	b08b      	sub	sp, #44	@ 0x2c
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	6039      	str	r1, [r7, #0]
    ADC_ChannelConfTypeDef sConfig = {0};
 8000a76:	f107 030c 	add.w	r3, r7, #12
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
    sConfig.Rank = 1;
 8000a82:	2301      	movs	r3, #1
 8000a84:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000a86:	2306      	movs	r3, #6
 8000a88:	617b      	str	r3, [r7, #20]

    // Define the voltage threshold for UART transmission
    const float UART_TRANSMIT_THRESHOLD = 3.0f; // Proper 3V or above
 8000a8a:	4b88      	ldr	r3, [pc, #544]	@ (8000cac <ADC_ReadAllChannels+0x240>)
 8000a8c:	623b      	str	r3, [r7, #32]
    const float DRY_RUN_THRESHOLD = .0f; // Threshold for dry run detection
 8000a8e:	f04f 0300 	mov.w	r3, #0
 8000a92:	61fb      	str	r3, [r7, #28]
    const float GROUND_THRESHOLD = 0.1f; // Threshold to consider as ground (0V)
 8000a94:	4b86      	ldr	r3, [pc, #536]	@ (8000cb0 <ADC_ReadAllChannels+0x244>)
 8000a96:	61bb      	str	r3, [r7, #24]

    for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++)
 8000a98:	2300      	movs	r3, #0
 8000a9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000a9e:	e0fb      	b.n	8000c98 <ADC_ReadAllChannels+0x22c>
    {
        // Configure channel
        sConfig.Channel = adcChannels[i];
 8000aa0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000aa4:	4a83      	ldr	r2, [pc, #524]	@ (8000cb4 <ADC_ReadAllChannels+0x248>)
 8000aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aaa:	60fb      	str	r3, [r7, #12]
        HAL_ADC_ConfigChannel(hadc, &sConfig);
 8000aac:	f107 030c 	add.w	r3, r7, #12
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f003 fe16 	bl	80046e4 <HAL_ADC_ConfigChannel>

        // Start conversion
        HAL_ADC_Start(hadc);
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f003 fc53 	bl	8004364 <HAL_ADC_Start>
        if (HAL_ADC_PollForConversion(hadc, 10) == HAL_OK)
 8000abe:	210a      	movs	r1, #10
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f003 fcfd 	bl	80044c0 <HAL_ADC_PollForConversion>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	f040 80c9 	bne.w	8000c60 <ADC_ReadAllChannels+0x1f4>
        {
            data->rawValues[i] = HAL_ADC_GetValue(hadc);
 8000ace:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f003 fdfa 	bl	80046cc <HAL_ADC_GetValue>
 8000ad8:	4602      	mov	r2, r0
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
            data->voltages[i] = (data->rawValues[i] * 3.3f) / 4095.0f;
 8000ae0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fbf6 	bl	80002dc <__aeabi_ui2f>
 8000af0:	4603      	mov	r3, r0
 8000af2:	4971      	ldr	r1, [pc, #452]	@ (8000cb8 <ADC_ReadAllChannels+0x24c>)
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff fc49 	bl	800038c <__aeabi_fmul>
 8000afa:	4603      	mov	r3, r0
 8000afc:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 8000b00:	496e      	ldr	r1, [pc, #440]	@ (8000cbc <ADC_ReadAllChannels+0x250>)
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff fcf6 	bl	80004f4 <__aeabi_fdiv>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	1da2      	adds	r2, r4, #6
 8000b10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            data->maxReached[i] = (data->voltages[i] >= 3.2f) ? 1 : 0; // Original 3.2V threshold for maxReached flag
 8000b14:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	3206      	adds	r2, #6
 8000b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b20:	2201      	movs	r2, #1
 8000b22:	4614      	mov	r4, r2
 8000b24:	4966      	ldr	r1, [pc, #408]	@ (8000cc0 <ADC_ReadAllChannels+0x254>)
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff fde2 	bl	80006f0 <__aeabi_fcmpge>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d101      	bne.n	8000b36 <ADC_ReadAllChannels+0xca>
 8000b32:	2300      	movs	r3, #0
 8000b34:	461c      	mov	r4, r3
 8000b36:	b2e2      	uxtb	r2, r4
 8000b38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000b3c:	4611      	mov	r1, r2
 8000b3e:	683a      	ldr	r2, [r7, #0]
 8000b40:	4413      	add	r3, r2
 8000b42:	460a      	mov	r2, r1
 8000b44:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

            // Check if the voltage is close to ground
            if (data->voltages[i] < GROUND_THRESHOLD)
 8000b48:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	3206      	adds	r2, #6
 8000b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b54:	4619      	mov	r1, r3
 8000b56:	69b8      	ldr	r0, [r7, #24]
 8000b58:	f7ff fdd4 	bl	8000704 <__aeabi_fcmpgt>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d00d      	beq.n	8000b7e <ADC_ReadAllChannels+0x112>
            {
                data->rawValues[i] = 0; // Set raw value to 0
 8000b62:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	2100      	movs	r1, #0
 8000b6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                data->voltages[i] = 0.0f; // Set voltage to 0.0V
 8000b6e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	3206      	adds	r2, #6
 8000b76:	f04f 0100 	mov.w	r1, #0
 8000b7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            }

            // Check voltage for UART transmission
            if (data->voltages[i] >= UART_TRANSMIT_THRESHOLD)
 8000b7e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	3206      	adds	r2, #6
 8000b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	6a38      	ldr	r0, [r7, #32]
 8000b8e:	f7ff fda5 	bl	80006dc <__aeabi_fcmple>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d04d      	beq.n	8000c34 <ADC_ReadAllChannels+0x1c8>
            {
                switch (i)
 8000b98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000b9c:	2b04      	cmp	r3, #4
 8000b9e:	d875      	bhi.n	8000c8c <ADC_ReadAllChannels+0x220>
 8000ba0:	a201      	add	r2, pc, #4	@ (adr r2, 8000ba8 <ADC_ReadAllChannels+0x13c>)
 8000ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ba6:	bf00      	nop
 8000ba8:	08000bbd 	.word	0x08000bbd
 8000bac:	08000bd5 	.word	0x08000bd5
 8000bb0:	08000bed 	.word	0x08000bed
 8000bb4:	08000c05 	.word	0x08000c05
 8000bb8:	08000c1d 	.word	0x08000c1d
                {
                    case 0: // IN0
                        sprintf(dataPacketTx, "@10W#"); // Use sprintf to format the string
 8000bbc:	4941      	ldr	r1, [pc, #260]	@ (8000cc4 <ADC_ReadAllChannels+0x258>)
 8000bbe:	4842      	ldr	r0, [pc, #264]	@ (8000cc8 <ADC_ReadAllChannels+0x25c>)
 8000bc0:	f007 fa82 	bl	80080c8 <siprintf>
                        UART_TransmitString(&huart1, dataPacketTx);
 8000bc4:	4940      	ldr	r1, [pc, #256]	@ (8000cc8 <ADC_ReadAllChannels+0x25c>)
 8000bc6:	4841      	ldr	r0, [pc, #260]	@ (8000ccc <ADC_ReadAllChannels+0x260>)
 8000bc8:	f003 f9f2 	bl	8003fb0 <UART_TransmitString>
                        motorStatus = 1; // Motor is on
 8000bcc:	4b40      	ldr	r3, [pc, #256]	@ (8000cd0 <ADC_ReadAllChannels+0x264>)
 8000bce:	2201      	movs	r2, #1
 8000bd0:	701a      	strb	r2, [r3, #0]
                        break;
 8000bd2:	e05c      	b.n	8000c8e <ADC_ReadAllChannels+0x222>
                    case 1: // IN1
                        sprintf(dataPacketTx, "@30W#");
 8000bd4:	493f      	ldr	r1, [pc, #252]	@ (8000cd4 <ADC_ReadAllChannels+0x268>)
 8000bd6:	483c      	ldr	r0, [pc, #240]	@ (8000cc8 <ADC_ReadAllChannels+0x25c>)
 8000bd8:	f007 fa76 	bl	80080c8 <siprintf>
                        UART_TransmitString(&huart1, dataPacketTx);
 8000bdc:	493a      	ldr	r1, [pc, #232]	@ (8000cc8 <ADC_ReadAllChannels+0x25c>)
 8000bde:	483b      	ldr	r0, [pc, #236]	@ (8000ccc <ADC_ReadAllChannels+0x260>)
 8000be0:	f003 f9e6 	bl	8003fb0 <UART_TransmitString>
                        motorStatus = 1; // Motor is on
 8000be4:	4b3a      	ldr	r3, [pc, #232]	@ (8000cd0 <ADC_ReadAllChannels+0x264>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	701a      	strb	r2, [r3, #0]
                        break;
 8000bea:	e050      	b.n	8000c8e <ADC_ReadAllChannels+0x222>
                    case 2: // IN2
                        sprintf(dataPacketTx, "@70W#");
 8000bec:	493a      	ldr	r1, [pc, #232]	@ (8000cd8 <ADC_ReadAllChannels+0x26c>)
 8000bee:	4836      	ldr	r0, [pc, #216]	@ (8000cc8 <ADC_ReadAllChannels+0x25c>)
 8000bf0:	f007 fa6a 	bl	80080c8 <siprintf>
                        UART_TransmitString(&huart1, dataPacketTx);
 8000bf4:	4934      	ldr	r1, [pc, #208]	@ (8000cc8 <ADC_ReadAllChannels+0x25c>)
 8000bf6:	4835      	ldr	r0, [pc, #212]	@ (8000ccc <ADC_ReadAllChannels+0x260>)
 8000bf8:	f003 f9da 	bl	8003fb0 <UART_TransmitString>
                        motorStatus = 1; // Motor is on
 8000bfc:	4b34      	ldr	r3, [pc, #208]	@ (8000cd0 <ADC_ReadAllChannels+0x264>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	701a      	strb	r2, [r3, #0]
                        break;
 8000c02:	e044      	b.n	8000c8e <ADC_ReadAllChannels+0x222>
                    case 3: // IN3
                        sprintf(dataPacketTx, "@1:W#");
 8000c04:	4935      	ldr	r1, [pc, #212]	@ (8000cdc <ADC_ReadAllChannels+0x270>)
 8000c06:	4830      	ldr	r0, [pc, #192]	@ (8000cc8 <ADC_ReadAllChannels+0x25c>)
 8000c08:	f007 fa5e 	bl	80080c8 <siprintf>
                        UART_TransmitString(&huart1, dataPacketTx);
 8000c0c:	492e      	ldr	r1, [pc, #184]	@ (8000cc8 <ADC_ReadAllChannels+0x25c>)
 8000c0e:	482f      	ldr	r0, [pc, #188]	@ (8000ccc <ADC_ReadAllChannels+0x260>)
 8000c10:	f003 f9ce 	bl	8003fb0 <UART_TransmitString>
                        motorStatus = 1; // Motor is on
 8000c14:	4b2e      	ldr	r3, [pc, #184]	@ (8000cd0 <ADC_ReadAllChannels+0x264>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	701a      	strb	r2, [r3, #0]
                        break;
 8000c1a:	e038      	b.n	8000c8e <ADC_ReadAllChannels+0x222>
                    case 4: // IN4
                        sprintf(dataPacketTx, "@DRY#");
 8000c1c:	4930      	ldr	r1, [pc, #192]	@ (8000ce0 <ADC_ReadAllChannels+0x274>)
 8000c1e:	482a      	ldr	r0, [pc, #168]	@ (8000cc8 <ADC_ReadAllChannels+0x25c>)
 8000c20:	f007 fa52 	bl	80080c8 <siprintf>
                        UART_TransmitString(&huart1, dataPacketTx);
 8000c24:	4928      	ldr	r1, [pc, #160]	@ (8000cc8 <ADC_ReadAllChannels+0x25c>)
 8000c26:	4829      	ldr	r0, [pc, #164]	@ (8000ccc <ADC_ReadAllChannels+0x260>)
 8000c28:	f003 f9c2 	bl	8003fb0 <UART_TransmitString>
                        motorStatus = 1; // Set motor status to on for dry run
 8000c2c:	4b28      	ldr	r3, [pc, #160]	@ (8000cd0 <ADC_ReadAllChannels+0x264>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	701a      	strb	r2, [r3, #0]
                        break;
 8000c32:	e02c      	b.n	8000c8e <ADC_ReadAllChannels+0x222>
                    // Cases for IN5 are not specified for UART transmission
                    default:
                        break;
                }
            }
            else if (data->voltages[i] < DRY_RUN_THRESHOLD && motorStatus == 1)
 8000c34:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	3206      	adds	r2, #6
 8000c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c40:	4619      	mov	r1, r3
 8000c42:	69f8      	ldr	r0, [r7, #28]
 8000c44:	f7ff fd5e 	bl	8000704 <__aeabi_fcmpgt>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d01f      	beq.n	8000c8e <ADC_ReadAllChannels+0x222>
 8000c4e:	4b20      	ldr	r3, [pc, #128]	@ (8000cd0 <ADC_ReadAllChannels+0x264>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d11a      	bne.n	8000c8e <ADC_ReadAllChannels+0x222>
            {
                // If the voltage is below the dry run threshold and the motor is on
                // This part was commented out in the original, keeping it commented for consistency
                // sprintf(dataPacketTx, "@MT0#");
                // UART_TransmitString(&huart1, dataPacketTx);
                motorStatus = 0; // Set motor status to off
 8000c58:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd0 <ADC_ReadAllChannels+0x264>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	701a      	strb	r2, [r3, #0]
 8000c5e:	e016      	b.n	8000c8e <ADC_ReadAllChannels+0x222>
        }
        else
        {
            // Handle ADC conversion timeout or error if necessary
            // For simplicity, we'll just set values to 0 on error
            data->rawValues[i] = 0;
 8000c60:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	2100      	movs	r1, #0
 8000c68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            data->voltages[i] = 0.0f;
 8000c6c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	3206      	adds	r2, #6
 8000c74:	f04f 0100 	mov.w	r1, #0
 8000c78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            data->maxReached[i] = 0;
 8000c7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000c80:	683a      	ldr	r2, [r7, #0]
 8000c82:	4413      	add	r3, r2
 8000c84:	2200      	movs	r2, #0
 8000c86:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8000c8a:	e000      	b.n	8000c8e <ADC_ReadAllChannels+0x222>
                        break;
 8000c8c:	bf00      	nop
    for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++)
 8000c8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000c92:	3301      	adds	r3, #1
 8000c94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000c98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000c9c:	2b05      	cmp	r3, #5
 8000c9e:	f67f aeff 	bls.w	8000aa0 <ADC_ReadAllChannels+0x34>
        }
    }
}
 8000ca2:	bf00      	nop
 8000ca4:	bf00      	nop
 8000ca6:	372c      	adds	r7, #44	@ 0x2c
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd90      	pop	{r4, r7, pc}
 8000cac:	40400000 	.word	0x40400000
 8000cb0:	3dcccccd 	.word	0x3dcccccd
 8000cb4:	08009c18 	.word	0x08009c18
 8000cb8:	40533333 	.word	0x40533333
 8000cbc:	457ff000 	.word	0x457ff000
 8000cc0:	404ccccd 	.word	0x404ccccd
 8000cc4:	080092e0 	.word	0x080092e0
 8000cc8:	200000d8 	.word	0x200000d8
 8000ccc:	20000250 	.word	0x20000250
 8000cd0:	20000310 	.word	0x20000310
 8000cd4:	080092e8 	.word	0x080092e8
 8000cd8:	080092f0 	.word	0x080092f0
 8000cdc:	080092f8 	.word	0x080092f8
 8000ce0:	08009300 	.word	0x08009300

08000ce4 <map_nibble_ctrl>:
   Build a PCF8574 byte from a 4-bit data nibble and RS/EN flags according to LCD_PINMAP.
*/

static inline uint8_t map_nibble_ctrl(uint8_t nibble /*D7..D4 or D4..D7 per map*/,
                                      uint8_t rs, uint8_t en, uint8_t bl_on)
{
 8000ce4:	b490      	push	{r4, r7}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4604      	mov	r4, r0
 8000cec:	4608      	mov	r0, r1
 8000cee:	4611      	mov	r1, r2
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4623      	mov	r3, r4
 8000cf4:	71fb      	strb	r3, [r7, #7]
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71bb      	strb	r3, [r7, #6]
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	717b      	strb	r3, [r7, #5]
 8000cfe:	4613      	mov	r3, r2
 8000d00:	713b      	strb	r3, [r7, #4]
#if (LCD_PINMAP == LCD_PINMAP_A)
    /* Map A: D7..D4 -> P7..P4, EN=P2, RW=P1(0), RS=P0, BL=P3
       Byte: [D7 D6 D5 D4 BL EN RW RS] */
    uint8_t b = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	73fb      	strb	r3, [r7, #15]
    b |= (nibble & 0xF0);           // D7..D4 already in high nibble
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	f023 030f 	bic.w	r3, r3, #15
 8000d0e:	b25a      	sxtb	r2, r3
 8000d10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	b25b      	sxtb	r3, r3
 8000d18:	73fb      	strb	r3, [r7, #15]
    b |= (bl_on ? 0x08 : 0x00);     // BL=P3
 8000d1a:	793b      	ldrb	r3, [r7, #4]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <map_nibble_ctrl+0x40>
 8000d20:	2208      	movs	r2, #8
 8000d22:	e000      	b.n	8000d26 <map_nibble_ctrl+0x42>
 8000d24:	2200      	movs	r2, #0
 8000d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	b25b      	sxtb	r3, r3
 8000d2e:	73fb      	strb	r3, [r7, #15]
    b |= (en ? 0x04 : 0x00);        // EN=P2
 8000d30:	797b      	ldrb	r3, [r7, #5]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <map_nibble_ctrl+0x56>
 8000d36:	2204      	movs	r2, #4
 8000d38:	e000      	b.n	8000d3c <map_nibble_ctrl+0x58>
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	b25b      	sxtb	r3, r3
 8000d44:	73fb      	strb	r3, [r7, #15]
    b |= 0x00;                      // RW=P1 forced 0 (write)
    b |= (rs ? 0x01 : 0x00);        // RS=P0
 8000d46:	79bb      	ldrb	r3, [r7, #6]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	bf14      	ite	ne
 8000d4c:	2301      	movne	r3, #1
 8000d4e:	2300      	moveq	r3, #0
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	b25a      	sxtb	r2, r3
 8000d54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	b25b      	sxtb	r3, r3
 8000d5c:	73fb      	strb	r3, [r7, #15]
    return b;
 8000d5e:	7bfb      	ldrb	r3, [r7, #15]
    b |= (bl_on ? 0x80 : 0x00);           // BL=P7
    return b;
#else
# error "Unsupported LCD_PINMAP selection"
#endif
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3710      	adds	r7, #16
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc90      	pop	{r4, r7}
 8000d68:	4770      	bx	lr
	...

08000d6c <expander_write>:

static void expander_write(uint8_t data)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af02      	add	r7, sp, #8
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Master_Transmit(&hi2c2, SLAVE_ADDRESS_LCD, &data, 1, 100);
 8000d76:	1dfa      	adds	r2, r7, #7
 8000d78:	2364      	movs	r3, #100	@ 0x64
 8000d7a:	9300      	str	r3, [sp, #0]
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	214e      	movs	r1, #78	@ 0x4e
 8000d80:	4803      	ldr	r0, [pc, #12]	@ (8000d90 <expander_write+0x24>)
 8000d82:	f004 facd 	bl	8005320 <HAL_I2C_Master_Transmit>
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000190 	.word	0x20000190

08000d94 <pulse_enable>:

static void pulse_enable(uint8_t data)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
#if (LCD_PINMAP == LCD_PINMAP_A)
    expander_write(data | 0x04);  // EN=1
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	f043 0304 	orr.w	r3, r3, #4
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff ffe0 	bl	8000d6c <expander_write>
    HAL_Delay(1);
 8000dac:	2001      	movs	r0, #1
 8000dae:	f003 f9dd 	bl	800416c <HAL_Delay>
    expander_write(data & ~0x04); // EN=0
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	f023 0304 	bic.w	r3, r3, #4
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff ffd6 	bl	8000d6c <expander_write>
#elif (LCD_PINMAP == LCD_PINMAP_B)
    expander_write(data | 0x10);  // EN=1
    HAL_Delay(1);
    expander_write(data & ~0x10); // EN=0
#endif
    HAL_Delay(1);
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	f003 f9d3 	bl	800416c <HAL_Delay>
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <write4bits>:

static void write4bits(uint8_t nibble /*D7..D4 in high nibble*/, uint8_t rs, uint8_t bl_on)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b084      	sub	sp, #16
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	71fb      	strb	r3, [r7, #7]
 8000dd8:	460b      	mov	r3, r1
 8000dda:	71bb      	strb	r3, [r7, #6]
 8000ddc:	4613      	mov	r3, r2
 8000dde:	717b      	strb	r3, [r7, #5]
    uint8_t x = map_nibble_ctrl(nibble, rs, 1 /*en edge*/, bl_on);
 8000de0:	797b      	ldrb	r3, [r7, #5]
 8000de2:	79b9      	ldrb	r1, [r7, #6]
 8000de4:	79f8      	ldrb	r0, [r7, #7]
 8000de6:	2201      	movs	r2, #1
 8000de8:	f7ff ff7c 	bl	8000ce4 <map_nibble_ctrl>
 8000dec:	4603      	mov	r3, r0
 8000dee:	73fb      	strb	r3, [r7, #15]
    expander_write(x);
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff ffba 	bl	8000d6c <expander_write>
    pulse_enable(x);
 8000df8:	7bfb      	ldrb	r3, [r7, #15]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff ffca 	bl	8000d94 <pulse_enable>
}
 8000e00:	bf00      	nop
 8000e02:	3710      	adds	r7, #16
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <lcd_backlight_on>:

/* -------- Public API -------- */

void lcd_backlight_on(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
#if (LCD_PINMAP == LCD_PINMAP_A)
    uint8_t b = 0x08; // BL=1, others 0
 8000e0e:	2308      	movs	r3, #8
 8000e10:	71fb      	strb	r3, [r7, #7]
#elif (LCD_PINMAP == LCD_PINMAP_B)
    uint8_t b = 0x80; // BL=1, others 0
#endif
    expander_write(b);
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff ffa9 	bl	8000d6c <expander_write>
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <lcd_backlight_off>:

void lcd_backlight_off(void)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b082      	sub	sp, #8
 8000e26:	af00      	add	r7, sp, #0
    uint8_t b = 0x00;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	71fb      	strb	r3, [r7, #7]
    expander_write(b);
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff ff9c 	bl	8000d6c <expander_write>
}
 8000e34:	bf00      	nop
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <lcd_send_cmd>:

void lcd_send_cmd(uint8_t cmd)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
    /* high then low nibble, RS=0 */
    write4bits(cmd & 0xF0, 0, 1);
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	f023 030f 	bic.w	r3, r3, #15
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	2201      	movs	r2, #1
 8000e50:	2100      	movs	r1, #0
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff ffbb 	bl	8000dce <write4bits>
    write4bits((cmd << 4) & 0xF0, 0, 1);
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	011b      	lsls	r3, r3, #4
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	2201      	movs	r2, #1
 8000e60:	2100      	movs	r1, #0
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff ffb3 	bl	8000dce <write4bits>
}
 8000e68:	bf00      	nop
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <lcd_send_data>:

void lcd_send_data(uint8_t data)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	71fb      	strb	r3, [r7, #7]
    /* high then low nibble, RS=1 */
    write4bits(data & 0xF0, 1, 1);
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	f023 030f 	bic.w	r3, r3, #15
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	2201      	movs	r2, #1
 8000e84:	2101      	movs	r1, #1
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff ffa1 	bl	8000dce <write4bits>
    write4bits((data << 4) & 0xF0, 1, 1);
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	011b      	lsls	r3, r3, #4
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	2201      	movs	r2, #1
 8000e94:	2101      	movs	r1, #1
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff ff99 	bl	8000dce <write4bits>
}
 8000e9c:	bf00      	nop
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <lcd_clear>:

void lcd_clear(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
    lcd_send_cmd(0x01);
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	f7ff ffc7 	bl	8000e3c <lcd_send_cmd>
    HAL_Delay(2);
 8000eae:	2002      	movs	r0, #2
 8000eb0:	f003 f95c 	bl	800416c <HAL_Delay>
    lcd_send_cmd(0x80);
 8000eb4:	2080      	movs	r0, #128	@ 0x80
 8000eb6:	f7ff ffc1 	bl	8000e3c <lcd_send_cmd>
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <lcd_put_cur>:

void lcd_put_cur(uint8_t row, uint8_t col)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	460a      	mov	r2, r1
 8000eca:	71fb      	strb	r3, [r7, #7]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	71bb      	strb	r3, [r7, #6]
    static const uint8_t row_offsets[] = {0x00, 0x40};
    if (row > 1) row = 1;
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d901      	bls.n	8000eda <lcd_put_cur+0x1a>
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	71fb      	strb	r3, [r7, #7]
    lcd_send_cmd(0x80 | (row_offsets[row] + col));
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	4a08      	ldr	r2, [pc, #32]	@ (8000f00 <lcd_put_cur+0x40>)
 8000ede:	5cd2      	ldrb	r2, [r2, r3]
 8000ee0:	79bb      	ldrb	r3, [r7, #6]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	b25b      	sxtb	r3, r3
 8000ee8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000eec:	b25b      	sxtb	r3, r3
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff ffa3 	bl	8000e3c <lcd_send_cmd>
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	08009c30 	.word	0x08009c30

08000f04 <lcd_send_string>:

void lcd_send_string(char *str)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
    while (*str) lcd_send_data((uint8_t)*str++);
 8000f0c:	e006      	b.n	8000f1c <lcd_send_string+0x18>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	1c5a      	adds	r2, r3, #1
 8000f12:	607a      	str	r2, [r7, #4]
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff ffaa 	bl	8000e70 <lcd_send_data>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d1f4      	bne.n	8000f0e <lcd_send_string+0xa>
}
 8000f24:	bf00      	nop
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <lcd_init>:

void lcd_init(void)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	af00      	add	r7, sp, #0
    HAL_Delay(50);
 8000f32:	2032      	movs	r0, #50	@ 0x32
 8000f34:	f003 f91a 	bl	800416c <HAL_Delay>
    lcd_backlight_on();
 8000f38:	f7ff ff66 	bl	8000e08 <lcd_backlight_on>

    /* Force 8-bit mode (send only high-nibble pattern) */
    write4bits(0x30, 0, 1); HAL_Delay(5);
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	2100      	movs	r1, #0
 8000f40:	2030      	movs	r0, #48	@ 0x30
 8000f42:	f7ff ff44 	bl	8000dce <write4bits>
 8000f46:	2005      	movs	r0, #5
 8000f48:	f003 f910 	bl	800416c <HAL_Delay>
    write4bits(0x30, 0, 1); HAL_Delay(1);
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	2100      	movs	r1, #0
 8000f50:	2030      	movs	r0, #48	@ 0x30
 8000f52:	f7ff ff3c 	bl	8000dce <write4bits>
 8000f56:	2001      	movs	r0, #1
 8000f58:	f003 f908 	bl	800416c <HAL_Delay>
    write4bits(0x30, 0, 1); HAL_Delay(1);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	2100      	movs	r1, #0
 8000f60:	2030      	movs	r0, #48	@ 0x30
 8000f62:	f7ff ff34 	bl	8000dce <write4bits>
 8000f66:	2001      	movs	r0, #1
 8000f68:	f003 f900 	bl	800416c <HAL_Delay>

    /* Switch to 4-bit mode */
    write4bits(0x20, 0, 1); HAL_Delay(1);
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	2100      	movs	r1, #0
 8000f70:	2020      	movs	r0, #32
 8000f72:	f7ff ff2c 	bl	8000dce <write4bits>
 8000f76:	2001      	movs	r0, #1
 8000f78:	f003 f8f8 	bl	800416c <HAL_Delay>

    /* Function set: 4-bit, 2 lines, 5x8 */
    lcd_send_cmd(0x28); HAL_Delay(1);
 8000f7c:	2028      	movs	r0, #40	@ 0x28
 8000f7e:	f7ff ff5d 	bl	8000e3c <lcd_send_cmd>
 8000f82:	2001      	movs	r0, #1
 8000f84:	f003 f8f2 	bl	800416c <HAL_Delay>
    /* Display off */
    lcd_send_cmd(0x08); HAL_Delay(1);
 8000f88:	2008      	movs	r0, #8
 8000f8a:	f7ff ff57 	bl	8000e3c <lcd_send_cmd>
 8000f8e:	2001      	movs	r0, #1
 8000f90:	f003 f8ec 	bl	800416c <HAL_Delay>
    /* Clear */
    lcd_clear();        HAL_Delay(2);
 8000f94:	f7ff ff86 	bl	8000ea4 <lcd_clear>
 8000f98:	2002      	movs	r0, #2
 8000f9a:	f003 f8e7 	bl	800416c <HAL_Delay>
    /* Entry mode: increment, no shift */
    lcd_send_cmd(0x06); HAL_Delay(1);
 8000f9e:	2006      	movs	r0, #6
 8000fa0:	f7ff ff4c 	bl	8000e3c <lcd_send_cmd>
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	f003 f8e1 	bl	800416c <HAL_Delay>
    /* Display on, cursor off, blink off */
    lcd_send_cmd(0x0C); HAL_Delay(1);
 8000faa:	200c      	movs	r0, #12
 8000fac:	f7ff ff46 	bl	8000e3c <lcd_send_cmd>
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	f003 f8db 	bl	800416c <HAL_Delay>
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <lcd_self_test>:

void lcd_self_test(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
    lcd_backlight_on();
 8000fc0:	f7ff ff22 	bl	8000e08 <lcd_backlight_on>
    HAL_Delay(150);
 8000fc4:	2096      	movs	r0, #150	@ 0x96
 8000fc6:	f003 f8d1 	bl	800416c <HAL_Delay>
    lcd_backlight_off();
 8000fca:	f7ff ff2a 	bl	8000e22 <lcd_backlight_off>
    HAL_Delay(150);
 8000fce:	2096      	movs	r0, #150	@ 0x96
 8000fd0:	f003 f8cc 	bl	800416c <HAL_Delay>
    lcd_backlight_on();
 8000fd4:	f7ff ff18 	bl	8000e08 <lcd_backlight_on>

    lcd_init();
 8000fd8:	f7ff ffa9 	bl	8000f2e <lcd_init>
    lcd_clear();
 8000fdc:	f7ff ff62 	bl	8000ea4 <lcd_clear>
    lcd_put_cur(0, 0);
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	f7ff ff6c 	bl	8000ec0 <lcd_put_cur>
    lcd_send_string("LCD FOUND");
 8000fe8:	4805      	ldr	r0, [pc, #20]	@ (8001000 <lcd_self_test+0x44>)
 8000fea:	f7ff ff8b 	bl	8000f04 <lcd_send_string>
    lcd_put_cur(1, 0);
 8000fee:	2100      	movs	r1, #0
 8000ff0:	2001      	movs	r0, #1
 8000ff2:	f7ff ff65 	bl	8000ec0 <lcd_put_cur>
    lcd_send_string("I2C OK");
 8000ff6:	4803      	ldr	r0, [pc, #12]	@ (8001004 <lcd_self_test+0x48>)
 8000ff8:	f7ff ff84 	bl	8000f04 <lcd_send_string>
}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	08009308 	.word	0x08009308
 8001004:	08009314 	.word	0x08009314

08001008 <now_ms>:

static LedIntent s_intent[LED_COLOR_COUNT];
static uint8_t   s_activeBlink[LED_COLOR_COUNT];
static uint32_t  s_nextToggleAt[LED_COLOR_COUNT];

static inline uint32_t now_ms(void) { return HAL_GetTick(); }
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
 800100c:	f003 f8a4 	bl	8004158 <HAL_GetTick>
 8001010:	4603      	mov	r3, r0
 8001012:	4618      	mov	r0, r3
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <led_write>:

static void led_write(LedColor c, GPIO_PinState st) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	460a      	mov	r2, r1
 8001022:	71fb      	strb	r3, [r7, #7]
 8001024:	4613      	mov	r3, r2
 8001026:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(LED_PORTS[c], LED_PINS[c], st);
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	4a07      	ldr	r2, [pc, #28]	@ (8001048 <led_write+0x30>)
 800102c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	4a06      	ldr	r2, [pc, #24]	@ (800104c <led_write+0x34>)
 8001034:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001038:	79ba      	ldrb	r2, [r7, #6]
 800103a:	4619      	mov	r1, r3
 800103c:	f004 f813 	bl	8005066 <HAL_GPIO_WritePin>
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000000 	.word	0x20000000
 800104c:	20000010 	.word	0x20000010

08001050 <led_on>:
static void led_on(LedColor c)  { led_write(c, GPIO_PIN_SET); }
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	71fb      	strb	r3, [r7, #7]
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	2101      	movs	r1, #1
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff ffda 	bl	8001018 <led_write>
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <led_off>:
static void led_off(LedColor c) { led_write(c, GPIO_PIN_RESET); }
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff ffcc 	bl	8001018 <led_write>
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <LED_Task>:
    }
}

/* call this every loop (or from a 10–20ms tick) */
void LED_Task(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
    uint32_t t = now_ms();
 800108e:	f7ff ffbb 	bl	8001008 <now_ms>
 8001092:	6038      	str	r0, [r7, #0]

    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 8001094:	2300      	movs	r3, #0
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	e064      	b.n	8001164 <LED_Task+0xdc>
        switch (s_intent[i].mode) {
 800109a:	4a36      	ldr	r2, [pc, #216]	@ (8001174 <LED_Task+0xec>)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d002      	beq.n	80010ac <LED_Task+0x24>
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d00b      	beq.n	80010c2 <LED_Task+0x3a>
 80010aa:	e015      	b.n	80010d8 <LED_Task+0x50>
        case LED_MODE_OFF:
            s_activeBlink[i] = 0;
 80010ac:	4a32      	ldr	r2, [pc, #200]	@ (8001178 <LED_Task+0xf0>)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4413      	add	r3, r2
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]
            led_off((LedColor)i);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff ffd6 	bl	800106c <led_off>
            break;
 80010c0:	e04d      	b.n	800115e <LED_Task+0xd6>

        case LED_MODE_STEADY:
            s_activeBlink[i] = 1;
 80010c2:	4a2d      	ldr	r2, [pc, #180]	@ (8001178 <LED_Task+0xf0>)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4413      	add	r3, r2
 80010c8:	2201      	movs	r2, #1
 80010ca:	701a      	strb	r2, [r3, #0]
            led_on((LedColor)i);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ffbd 	bl	8001050 <led_on>
            break;
 80010d6:	e042      	b.n	800115e <LED_Task+0xd6>

        case LED_MODE_BLINK:
        default:
            if (s_intent[i].period_ms == 0) s_intent[i].period_ms = 500;
 80010d8:	4a26      	ldr	r2, [pc, #152]	@ (8001174 <LED_Task+0xec>)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	4413      	add	r3, r2
 80010e0:	885b      	ldrh	r3, [r3, #2]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d106      	bne.n	80010f4 <LED_Task+0x6c>
 80010e6:	4a23      	ldr	r2, [pc, #140]	@ (8001174 <LED_Task+0xec>)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	4413      	add	r3, r2
 80010ee:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80010f2:	805a      	strh	r2, [r3, #2]
            if ((int32_t)(s_nextToggleAt[i] - t) <= 0) {
 80010f4:	4a21      	ldr	r2, [pc, #132]	@ (800117c <LED_Task+0xf4>)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	2b00      	cmp	r3, #0
 8001102:	dc2b      	bgt.n	800115c <LED_Task+0xd4>
                s_activeBlink[i] = !s_activeBlink[i];
 8001104:	4a1c      	ldr	r2, [pc, #112]	@ (8001178 <LED_Task+0xf0>)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4413      	add	r3, r2
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	bf0c      	ite	eq
 8001110:	2301      	moveq	r3, #1
 8001112:	2300      	movne	r3, #0
 8001114:	b2db      	uxtb	r3, r3
 8001116:	4619      	mov	r1, r3
 8001118:	4a17      	ldr	r2, [pc, #92]	@ (8001178 <LED_Task+0xf0>)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4413      	add	r3, r2
 800111e:	460a      	mov	r2, r1
 8001120:	701a      	strb	r2, [r3, #0]
                if (s_activeBlink[i]) led_on((LedColor)i);
 8001122:	4a15      	ldr	r2, [pc, #84]	@ (8001178 <LED_Task+0xf0>)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4413      	add	r3, r2
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d005      	beq.n	800113a <LED_Task+0xb2>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	b2db      	uxtb	r3, r3
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff ff8c 	bl	8001050 <led_on>
 8001138:	e004      	b.n	8001144 <LED_Task+0xbc>
                else                  led_off((LedColor)i);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff ff94 	bl	800106c <led_off>
                s_nextToggleAt[i] = t + s_intent[i].period_ms;
 8001144:	4a0b      	ldr	r2, [pc, #44]	@ (8001174 <LED_Task+0xec>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	4413      	add	r3, r2
 800114c:	885b      	ldrh	r3, [r3, #2]
 800114e:	461a      	mov	r2, r3
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	441a      	add	r2, r3
 8001154:	4909      	ldr	r1, [pc, #36]	@ (800117c <LED_Task+0xf4>)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            }
            break;
 800115c:	bf00      	nop
    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3301      	adds	r3, #1
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2b03      	cmp	r3, #3
 8001168:	dd97      	ble.n	800109a <LED_Task+0x12>
        }
    }
}
 800116a:	bf00      	nop
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	200000e4 	.word	0x200000e4
 8001178:	200000f4 	.word	0x200000f4
 800117c:	200000f8 	.word	0x200000f8

08001180 <LED_ClearAllIntents>:

void LED_ClearAllIntents(void)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 8001186:	2300      	movs	r3, #0
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	e00d      	b.n	80011a8 <LED_ClearAllIntents+0x28>
        s_intent[i].mode = LED_MODE_OFF;
 800118c:	4a0b      	ldr	r2, [pc, #44]	@ (80011bc <LED_ClearAllIntents+0x3c>)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2100      	movs	r1, #0
 8001192:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
        s_intent[i].period_ms = 0;
 8001196:	4a09      	ldr	r2, [pc, #36]	@ (80011bc <LED_ClearAllIntents+0x3c>)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	4413      	add	r3, r2
 800119e:	2200      	movs	r2, #0
 80011a0:	805a      	strh	r2, [r3, #2]
    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	3301      	adds	r3, #1
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b03      	cmp	r3, #3
 80011ac:	ddee      	ble.n	800118c <LED_ClearAllIntents+0xc>
    }
}
 80011ae:	bf00      	nop
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	200000e4 	.word	0x200000e4

080011c0 <LED_SetIntent>:

void LED_SetIntent(LedColor color, LedMode mode, uint16_t period_ms)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
 80011ca:	460b      	mov	r3, r1
 80011cc:	71bb      	strb	r3, [r7, #6]
 80011ce:	4613      	mov	r3, r2
 80011d0:	80bb      	strh	r3, [r7, #4]
    if ((int)color < 0 || color >= LED_COLOR_COUNT) return;
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	2b03      	cmp	r3, #3
 80011d6:	d80b      	bhi.n	80011f0 <LED_SetIntent+0x30>
    s_intent[color].mode = mode;
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	4908      	ldr	r1, [pc, #32]	@ (80011fc <LED_SetIntent+0x3c>)
 80011dc:	79ba      	ldrb	r2, [r7, #6]
 80011de:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
    s_intent[color].period_ms = period_ms;
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	4a05      	ldr	r2, [pc, #20]	@ (80011fc <LED_SetIntent+0x3c>)
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	4413      	add	r3, r2
 80011ea:	88ba      	ldrh	r2, [r7, #4]
 80011ec:	805a      	strh	r2, [r3, #2]
 80011ee:	e000      	b.n	80011f2 <LED_SetIntent+0x32>
    if ((int)color < 0 || color >= LED_COLOR_COUNT) return;
 80011f0:	bf00      	nop
}
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bc80      	pop	{r7}
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	200000e4 	.word	0x200000e4

08001200 <LED_ApplyIntents>:

/* current implementation uses intents directly in LED_Task() */
void LED_ApplyIntents(void) { /* no-op, reserved for future resolve rules */ }
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr

0800120c <LoRa_WriteReg>:


//uint8_t rxBuffer[256]; // Buffer for received data

/* --- low-level SPI helpers --- */
void LoRa_WriteReg(uint8_t addr, uint8_t data) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	460a      	mov	r2, r1
 8001216:	71fb      	strb	r3, [r7, #7]
 8001218:	4613      	mov	r3, r2
 800121a:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2] = { (uint8_t)(addr | 0x80), data };
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001222:	b2db      	uxtb	r3, r3
 8001224:	733b      	strb	r3, [r7, #12]
 8001226:	79bb      	ldrb	r3, [r7, #6]
 8001228:	737b      	strb	r3, [r7, #13]
    NSS_LOW();
 800122a:	2200      	movs	r2, #0
 800122c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001230:	480a      	ldr	r0, [pc, #40]	@ (800125c <LoRa_WriteReg+0x50>)
 8001232:	f003 ff18 	bl	8005066 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, buf, 2, HAL_MAX_DELAY);
 8001236:	f107 010c 	add.w	r1, r7, #12
 800123a:	f04f 33ff 	mov.w	r3, #4294967295
 800123e:	2202      	movs	r2, #2
 8001240:	4807      	ldr	r0, [pc, #28]	@ (8001260 <LoRa_WriteReg+0x54>)
 8001242:	f005 feec 	bl	800701e <HAL_SPI_Transmit>
    NSS_HIGH();
 8001246:	2201      	movs	r2, #1
 8001248:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800124c:	4803      	ldr	r0, [pc, #12]	@ (800125c <LoRa_WriteReg+0x50>)
 800124e:	f003 ff0a 	bl	8005066 <HAL_GPIO_WritePin>
}
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40010800 	.word	0x40010800
 8001260:	200001f8 	.word	0x200001f8

08001264 <LoRa_ReadReg>:

uint8_t LoRa_ReadReg(uint8_t addr) {
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
    uint8_t tx = addr & 0x7F;
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001274:	b2db      	uxtb	r3, r3
 8001276:	73fb      	strb	r3, [r7, #15]
    uint8_t rx = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	73bb      	strb	r3, [r7, #14]
    NSS_LOW();
 800127c:	2200      	movs	r2, #0
 800127e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001282:	480f      	ldr	r0, [pc, #60]	@ (80012c0 <LoRa_ReadReg+0x5c>)
 8001284:	f003 feef 	bl	8005066 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &tx, 1, HAL_MAX_DELAY);
 8001288:	f107 010f 	add.w	r1, r7, #15
 800128c:	f04f 33ff 	mov.w	r3, #4294967295
 8001290:	2201      	movs	r2, #1
 8001292:	480c      	ldr	r0, [pc, #48]	@ (80012c4 <LoRa_ReadReg+0x60>)
 8001294:	f005 fec3 	bl	800701e <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, &rx, 1, HAL_MAX_DELAY);
 8001298:	f107 010e 	add.w	r1, r7, #14
 800129c:	f04f 33ff 	mov.w	r3, #4294967295
 80012a0:	2201      	movs	r2, #1
 80012a2:	4808      	ldr	r0, [pc, #32]	@ (80012c4 <LoRa_ReadReg+0x60>)
 80012a4:	f005 ffff 	bl	80072a6 <HAL_SPI_Receive>
    NSS_HIGH();
 80012a8:	2201      	movs	r2, #1
 80012aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012ae:	4804      	ldr	r0, [pc, #16]	@ (80012c0 <LoRa_ReadReg+0x5c>)
 80012b0:	f003 fed9 	bl	8005066 <HAL_GPIO_WritePin>
    return rx;
 80012b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40010800 	.word	0x40010800
 80012c4:	200001f8 	.word	0x200001f8

080012c8 <LoRa_WriteBuffer>:

void LoRa_WriteBuffer(uint8_t addr, const uint8_t *buffer, uint8_t size) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	6039      	str	r1, [r7, #0]
 80012d2:	71fb      	strb	r3, [r7, #7]
 80012d4:	4613      	mov	r3, r2
 80012d6:	71bb      	strb	r3, [r7, #6]
    uint8_t a = addr | 0x80;
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	73fb      	strb	r3, [r7, #15]
    NSS_LOW();
 80012e2:	2200      	movs	r2, #0
 80012e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012e8:	480e      	ldr	r0, [pc, #56]	@ (8001324 <LoRa_WriteBuffer+0x5c>)
 80012ea:	f003 febc 	bl	8005066 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &a, 1, HAL_MAX_DELAY);
 80012ee:	f107 010f 	add.w	r1, r7, #15
 80012f2:	f04f 33ff 	mov.w	r3, #4294967295
 80012f6:	2201      	movs	r2, #1
 80012f8:	480b      	ldr	r0, [pc, #44]	@ (8001328 <LoRa_WriteBuffer+0x60>)
 80012fa:	f005 fe90 	bl	800701e <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)buffer, size, HAL_MAX_DELAY);
 80012fe:	79bb      	ldrb	r3, [r7, #6]
 8001300:	b29a      	uxth	r2, r3
 8001302:	f04f 33ff 	mov.w	r3, #4294967295
 8001306:	6839      	ldr	r1, [r7, #0]
 8001308:	4807      	ldr	r0, [pc, #28]	@ (8001328 <LoRa_WriteBuffer+0x60>)
 800130a:	f005 fe88 	bl	800701e <HAL_SPI_Transmit>
    NSS_HIGH();
 800130e:	2201      	movs	r2, #1
 8001310:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001314:	4803      	ldr	r0, [pc, #12]	@ (8001324 <LoRa_WriteBuffer+0x5c>)
 8001316:	f003 fea6 	bl	8005066 <HAL_GPIO_WritePin>
}
 800131a:	bf00      	nop
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40010800 	.word	0x40010800
 8001328:	200001f8 	.word	0x200001f8

0800132c <LoRa_ReadBuffer>:

void LoRa_ReadBuffer(uint8_t addr, uint8_t *buffer, uint8_t size) {
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	6039      	str	r1, [r7, #0]
 8001336:	71fb      	strb	r3, [r7, #7]
 8001338:	4613      	mov	r3, r2
 800133a:	71bb      	strb	r3, [r7, #6]
    uint8_t a = addr & 0x7F;
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001342:	b2db      	uxtb	r3, r3
 8001344:	73fb      	strb	r3, [r7, #15]
    NSS_LOW();
 8001346:	2200      	movs	r2, #0
 8001348:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800134c:	480e      	ldr	r0, [pc, #56]	@ (8001388 <LoRa_ReadBuffer+0x5c>)
 800134e:	f003 fe8a 	bl	8005066 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &a, 1, HAL_MAX_DELAY);
 8001352:	f107 010f 	add.w	r1, r7, #15
 8001356:	f04f 33ff 	mov.w	r3, #4294967295
 800135a:	2201      	movs	r2, #1
 800135c:	480b      	ldr	r0, [pc, #44]	@ (800138c <LoRa_ReadBuffer+0x60>)
 800135e:	f005 fe5e 	bl	800701e <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, buffer, size, HAL_MAX_DELAY);
 8001362:	79bb      	ldrb	r3, [r7, #6]
 8001364:	b29a      	uxth	r2, r3
 8001366:	f04f 33ff 	mov.w	r3, #4294967295
 800136a:	6839      	ldr	r1, [r7, #0]
 800136c:	4807      	ldr	r0, [pc, #28]	@ (800138c <LoRa_ReadBuffer+0x60>)
 800136e:	f005 ff9a 	bl	80072a6 <HAL_SPI_Receive>
    NSS_HIGH();
 8001372:	2201      	movs	r2, #1
 8001374:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001378:	4803      	ldr	r0, [pc, #12]	@ (8001388 <LoRa_ReadBuffer+0x5c>)
 800137a:	f003 fe74 	bl	8005066 <HAL_GPIO_WritePin>
}
 800137e:	bf00      	nop
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40010800 	.word	0x40010800
 800138c:	200001f8 	.word	0x200001f8

08001390 <LoRa_Reset>:

/* --- reset --- */
void LoRa_Reset(void) {
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LORA_RESET_PORT, LORA_RESET_PIN, GPIO_PIN_RESET);
 8001394:	2200      	movs	r2, #0
 8001396:	2140      	movs	r1, #64	@ 0x40
 8001398:	4807      	ldr	r0, [pc, #28]	@ (80013b8 <LoRa_Reset+0x28>)
 800139a:	f003 fe64 	bl	8005066 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 800139e:	2002      	movs	r0, #2
 80013a0:	f002 fee4 	bl	800416c <HAL_Delay>
    HAL_GPIO_WritePin(LORA_RESET_PORT, LORA_RESET_PIN, GPIO_PIN_SET);
 80013a4:	2201      	movs	r2, #1
 80013a6:	2140      	movs	r1, #64	@ 0x40
 80013a8:	4803      	ldr	r0, [pc, #12]	@ (80013b8 <LoRa_Reset+0x28>)
 80013aa:	f003 fe5c 	bl	8005066 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80013ae:	200a      	movs	r0, #10
 80013b0:	f002 fedc 	bl	800416c <HAL_Delay>
}
 80013b4:	bf00      	nop
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40010c00 	.word	0x40010c00

080013bc <LoRa_SetFrequency>:

/* --- set frequency (Hz) --- */
void LoRa_SetFrequency(uint32_t freqHz) {
 80013bc:	b5b0      	push	{r4, r5, r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
    /* FRF = freq * 2^19 / 32e6 */
    uint64_t frf = ((uint64_t)freqHz << 19) / 32000000ULL;
 80013c4:	6879      	ldr	r1, [r7, #4]
 80013c6:	2000      	movs	r0, #0
 80013c8:	460a      	mov	r2, r1
 80013ca:	4603      	mov	r3, r0
 80013cc:	0b55      	lsrs	r5, r2, #13
 80013ce:	04d4      	lsls	r4, r2, #19
 80013d0:	4a18      	ldr	r2, [pc, #96]	@ (8001434 <LoRa_SetFrequency+0x78>)
 80013d2:	f04f 0300 	mov.w	r3, #0
 80013d6:	4620      	mov	r0, r4
 80013d8:	4629      	mov	r1, r5
 80013da:	f7ff f99d 	bl	8000718 <__aeabi_uldivmod>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	e9c7 2302 	strd	r2, r3, [r7, #8]
    LoRa_WriteReg(0x06, (uint8_t)(frf >> 16));
 80013e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013ea:	f04f 0200 	mov.w	r2, #0
 80013ee:	f04f 0300 	mov.w	r3, #0
 80013f2:	0c02      	lsrs	r2, r0, #16
 80013f4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80013f8:	0c0b      	lsrs	r3, r1, #16
 80013fa:	b2d3      	uxtb	r3, r2
 80013fc:	4619      	mov	r1, r3
 80013fe:	2006      	movs	r0, #6
 8001400:	f7ff ff04 	bl	800120c <LoRa_WriteReg>
    LoRa_WriteReg(0x07, (uint8_t)(frf >> 8));
 8001404:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001408:	f04f 0200 	mov.w	r2, #0
 800140c:	f04f 0300 	mov.w	r3, #0
 8001410:	0a02      	lsrs	r2, r0, #8
 8001412:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001416:	0a0b      	lsrs	r3, r1, #8
 8001418:	b2d3      	uxtb	r3, r2
 800141a:	4619      	mov	r1, r3
 800141c:	2007      	movs	r0, #7
 800141e:	f7ff fef5 	bl	800120c <LoRa_WriteReg>
    LoRa_WriteReg(0x08, (uint8_t)(frf >> 0));
 8001422:	7a3b      	ldrb	r3, [r7, #8]
 8001424:	4619      	mov	r1, r3
 8001426:	2008      	movs	r0, #8
 8001428:	f7ff fef0 	bl	800120c <LoRa_WriteReg>
}
 800142c:	bf00      	nop
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bdb0      	pop	{r4, r5, r7, pc}
 8001434:	01e84800 	.word	0x01e84800

08001438 <LoRa_Init>:

/* --- init with settings that match Arduino LoRa defaults --- */
void LoRa_Init(void) {
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
    LoRa_Reset();
 800143c:	f7ff ffa8 	bl	8001390 <LoRa_Reset>

    /* Sleep, then LoRa sleep mode */
    LoRa_WriteReg(0x01, 0x00);
 8001440:	2100      	movs	r1, #0
 8001442:	2001      	movs	r0, #1
 8001444:	f7ff fee2 	bl	800120c <LoRa_WriteReg>
    HAL_Delay(5);
 8001448:	2005      	movs	r0, #5
 800144a:	f002 fe8f 	bl	800416c <HAL_Delay>
    LoRa_WriteReg(0x01, 0x80);
 800144e:	2180      	movs	r1, #128	@ 0x80
 8001450:	2001      	movs	r0, #1
 8001452:	f7ff fedb 	bl	800120c <LoRa_WriteReg>
    HAL_Delay(5);
 8001456:	2005      	movs	r0, #5
 8001458:	f002 fe88 	bl	800416c <HAL_Delay>

    /* Frequency (433 MHz) */
    LoRa_SetFrequency(LORA_FREQUENCY);
 800145c:	4818      	ldr	r0, [pc, #96]	@ (80014c0 <LoRa_Init+0x88>)
 800145e:	f7ff ffad 	bl	80013bc <LoRa_SetFrequency>

    /* PA config: PA_BOOST, max power (common for SX1278 Ra-02) */
    LoRa_WriteReg(0x09, 0x8F); // PA_BOOST, max power
 8001462:	218f      	movs	r1, #143	@ 0x8f
 8001464:	2009      	movs	r0, #9
 8001466:	f7ff fed1 	bl	800120c <LoRa_WriteReg>

    /* Enable high-power PA if module supports it (optional) */
    LoRa_WriteReg(0x4D, 0x87); // RegPaDac (only on SX1276/78 family)
 800146a:	2187      	movs	r1, #135	@ 0x87
 800146c:	204d      	movs	r0, #77	@ 0x4d
 800146e:	f7ff fecd 	bl	800120c <LoRa_WriteReg>

    /* LNA */
    LoRa_WriteReg(0x0C, 0x23);
 8001472:	2123      	movs	r1, #35	@ 0x23
 8001474:	200c      	movs	r0, #12
 8001476:	f7ff fec9 	bl	800120c <LoRa_WriteReg>
    /* Modem config:
       RegModemConfig1 = 0x72 -> BW=125kHz, CR=4/5, Explicit header
       RegModemConfig2 = 0x74 -> SF7, CRC ON (Arduino default)
       RegModemConfig3 = 0x04 -> LowDataRateOptimize off, AGC Auto On
    */
    LoRa_WriteReg(0x1D, 0x72);
 800147a:	2172      	movs	r1, #114	@ 0x72
 800147c:	201d      	movs	r0, #29
 800147e:	f7ff fec5 	bl	800120c <LoRa_WriteReg>
    LoRa_WriteReg(0x1E, 0x74);
 8001482:	2174      	movs	r1, #116	@ 0x74
 8001484:	201e      	movs	r0, #30
 8001486:	f7ff fec1 	bl	800120c <LoRa_WriteReg>
    LoRa_WriteReg(0x26, 0x04);
 800148a:	2104      	movs	r1, #4
 800148c:	2026      	movs	r0, #38	@ 0x26
 800148e:	f7ff febd 	bl	800120c <LoRa_WriteReg>

    /* Preamble = 8 */
    LoRa_WriteReg(0x20, 0x00);
 8001492:	2100      	movs	r1, #0
 8001494:	2020      	movs	r0, #32
 8001496:	f7ff feb9 	bl	800120c <LoRa_WriteReg>
    LoRa_WriteReg(0x21, 0x08);
 800149a:	2108      	movs	r1, #8
 800149c:	2021      	movs	r0, #33	@ 0x21
 800149e:	f7ff feb5 	bl	800120c <LoRa_WriteReg>

    /* SyncWord = 0x22 (matches LoRa.setSyncWord(0x22) on Arduino) */
    LoRa_WriteReg(0x39, 0x22);
 80014a2:	2122      	movs	r1, #34	@ 0x22
 80014a4:	2039      	movs	r0, #57	@ 0x39
 80014a6:	f7ff feb1 	bl	800120c <LoRa_WriteReg>

    /* Map DIO0 = RxDone/TxDone as normal (we'll poll IRQs) */
    LoRa_WriteReg(0x40, 0x00);
 80014aa:	2100      	movs	r1, #0
 80014ac:	2040      	movs	r0, #64	@ 0x40
 80014ae:	f7ff fead 	bl	800120c <LoRa_WriteReg>

    /* Clear IRQs */
    LoRa_WriteReg(0x12, 0xFF);
 80014b2:	21ff      	movs	r1, #255	@ 0xff
 80014b4:	2012      	movs	r0, #18
 80014b6:	f7ff fea9 	bl	800120c <LoRa_WriteReg>
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	19cf0e40 	.word	0x19cf0e40

080014c4 <LoRa_SetStandby>:

/**
  * @brief Sets the LoRa module to Standby mode.
  */
void LoRa_SetStandby(void) {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
    LoRa_WriteReg(0x01, 0x81); // Standby mode
 80014c8:	2181      	movs	r1, #129	@ 0x81
 80014ca:	2001      	movs	r0, #1
 80014cc:	f7ff fe9e 	bl	800120c <LoRa_WriteReg>
    HAL_Delay(2);
 80014d0:	2002      	movs	r0, #2
 80014d2:	f002 fe4b 	bl	800416c <HAL_Delay>
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}

080014da <LoRa_SetRxContinuous>:

/**
  * @brief Sets the LoRa module to Continuous Receive mode.
  */
void LoRa_SetRxContinuous(void) {
 80014da:	b580      	push	{r7, lr}
 80014dc:	af00      	add	r7, sp, #0
    LoRa_WriteReg(0x01, 0x85); // Continuous RX mode
 80014de:	2185      	movs	r1, #133	@ 0x85
 80014e0:	2001      	movs	r0, #1
 80014e2:	f7ff fe93 	bl	800120c <LoRa_WriteReg>
    HAL_Delay(2);
 80014e6:	2002      	movs	r0, #2
 80014e8:	f002 fe40 	bl	800416c <HAL_Delay>
}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <LoRa_SetTx>:

/**
  * @brief Sets the LoRa module to Transmit mode.
  */
void LoRa_SetTx(void) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
    LoRa_WriteReg(0x01, 0x83); // TX mode
 80014f4:	2183      	movs	r1, #131	@ 0x83
 80014f6:	2001      	movs	r0, #1
 80014f8:	f7ff fe88 	bl	800120c <LoRa_WriteReg>
    HAL_Delay(2);
 80014fc:	2002      	movs	r0, #2
 80014fe:	f002 fe35 	bl	800416c <HAL_Delay>
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}

08001506 <LoRa_SendPacket>:

/* --- send packet, poll TxDone, return to RX --- */
void LoRa_SendPacket(const uint8_t *buffer, uint8_t size) {
 8001506:	b580      	push	{r7, lr}
 8001508:	b084      	sub	sp, #16
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
 800150e:	460b      	mov	r3, r1
 8001510:	70fb      	strb	r3, [r7, #3]
    LoRa_SetStandby(); // Go to Standby before TX
 8001512:	f7ff ffd7 	bl	80014c4 <LoRa_SetStandby>

    /* Reset FIFO pointers */
    LoRa_WriteReg(0x0E, 0x00);
 8001516:	2100      	movs	r1, #0
 8001518:	200e      	movs	r0, #14
 800151a:	f7ff fe77 	bl	800120c <LoRa_WriteReg>
    LoRa_WriteReg(0x0D, 0x00);
 800151e:	2100      	movs	r1, #0
 8001520:	200d      	movs	r0, #13
 8001522:	f7ff fe73 	bl	800120c <LoRa_WriteReg>

    /* Write payload */
    LoRa_WriteBuffer(0x00, buffer, size);
 8001526:	78fb      	ldrb	r3, [r7, #3]
 8001528:	461a      	mov	r2, r3
 800152a:	6879      	ldr	r1, [r7, #4]
 800152c:	2000      	movs	r0, #0
 800152e:	f7ff fecb 	bl	80012c8 <LoRa_WriteBuffer>
    LoRa_WriteReg(0x22, size);
 8001532:	78fb      	ldrb	r3, [r7, #3]
 8001534:	4619      	mov	r1, r3
 8001536:	2022      	movs	r0, #34	@ 0x22
 8001538:	f7ff fe68 	bl	800120c <LoRa_WriteReg>

    /* Clear IRQs */
    LoRa_WriteReg(0x12, 0xFF);
 800153c:	21ff      	movs	r1, #255	@ 0xff
 800153e:	2012      	movs	r0, #18
 8001540:	f7ff fe64 	bl	800120c <LoRa_WriteReg>

    LoRa_SetTx(); // Enter TX
 8001544:	f7ff ffd4 	bl	80014f0 <LoRa_SetTx>

    /* Wait for TxDone */
    uint32_t t0 = HAL_GetTick();
 8001548:	f002 fe06 	bl	8004158 <HAL_GetTick>
 800154c:	60f8      	str	r0, [r7, #12]
    while ((LoRa_ReadReg(0x12) & 0x08) == 0) {
 800154e:	e00a      	b.n	8001566 <LoRa_SendPacket+0x60>
        if ((HAL_GetTick() - t0) > LORA_TIMEOUT) break; // timeout
 8001550:	f002 fe02 	bl	8004158 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800155e:	d80b      	bhi.n	8001578 <LoRa_SendPacket+0x72>
        HAL_Delay(1);
 8001560:	2001      	movs	r0, #1
 8001562:	f002 fe03 	bl	800416c <HAL_Delay>
    while ((LoRa_ReadReg(0x12) & 0x08) == 0) {
 8001566:	2012      	movs	r0, #18
 8001568:	f7ff fe7c 	bl	8001264 <LoRa_ReadReg>
 800156c:	4603      	mov	r3, r0
 800156e:	f003 0308 	and.w	r3, r3, #8
 8001572:	2b00      	cmp	r3, #0
 8001574:	d0ec      	beq.n	8001550 <LoRa_SendPacket+0x4a>
 8001576:	e000      	b.n	800157a <LoRa_SendPacket+0x74>
        if ((HAL_GetTick() - t0) > LORA_TIMEOUT) break; // timeout
 8001578:	bf00      	nop
    }

    /* Clear TxDone (if set) */
    LoRa_WriteReg(0x12, 0x08);
 800157a:	2108      	movs	r1, #8
 800157c:	2012      	movs	r0, #18
 800157e:	f7ff fe45 	bl	800120c <LoRa_WriteReg>

    LoRa_SetRxContinuous(); // Back to RX after TX
 8001582:	f7ff ffaa 	bl	80014da <LoRa_SetRxContinuous>
}
 8001586:	bf00      	nop
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <LoRa_ReceivePacket>:

/* --- receive helper: returns length or 0 --- */
uint8_t LoRa_ReceivePacket(uint8_t *buffer) {
 800158e:	b580      	push	{r7, lr}
 8001590:	b084      	sub	sp, #16
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
    uint8_t irq = LoRa_ReadReg(0x12);
 8001596:	2012      	movs	r0, #18
 8001598:	f7ff fe64 	bl	8001264 <LoRa_ReadReg>
 800159c:	4603      	mov	r3, r0
 800159e:	73fb      	strb	r3, [r7, #15]
    if (irq & 0x40) { // RxDone
 80015a0:	7bfb      	ldrb	r3, [r7, #15]
 80015a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d025      	beq.n	80015f6 <LoRa_ReceivePacket+0x68>
        /* If CRC error bit (0x20) is set, ignore */
        if (irq & 0x20) {
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
 80015ac:	f003 0320 	and.w	r3, r3, #32
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d005      	beq.n	80015c0 <LoRa_ReceivePacket+0x32>
            /* CRC error */
            LoRa_WriteReg(0x12, 0xFF);
 80015b4:	21ff      	movs	r1, #255	@ 0xff
 80015b6:	2012      	movs	r0, #18
 80015b8:	f7ff fe28 	bl	800120c <LoRa_WriteReg>
            return 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	e01b      	b.n	80015f8 <LoRa_ReceivePacket+0x6a>
        }
        uint8_t nb = LoRa_ReadReg(0x13);   // RegRxNbBytes
 80015c0:	2013      	movs	r0, #19
 80015c2:	f7ff fe4f 	bl	8001264 <LoRa_ReadReg>
 80015c6:	4603      	mov	r3, r0
 80015c8:	73bb      	strb	r3, [r7, #14]
        uint8_t addr = LoRa_ReadReg(0x10); // RegFifoRxCurrentAddr
 80015ca:	2010      	movs	r0, #16
 80015cc:	f7ff fe4a 	bl	8001264 <LoRa_ReadReg>
 80015d0:	4603      	mov	r3, r0
 80015d2:	737b      	strb	r3, [r7, #13]
        LoRa_WriteReg(0x0D, addr);
 80015d4:	7b7b      	ldrb	r3, [r7, #13]
 80015d6:	4619      	mov	r1, r3
 80015d8:	200d      	movs	r0, #13
 80015da:	f7ff fe17 	bl	800120c <LoRa_WriteReg>
        LoRa_ReadBuffer(0x00, buffer, nb);
 80015de:	7bbb      	ldrb	r3, [r7, #14]
 80015e0:	461a      	mov	r2, r3
 80015e2:	6879      	ldr	r1, [r7, #4]
 80015e4:	2000      	movs	r0, #0
 80015e6:	f7ff fea1 	bl	800132c <LoRa_ReadBuffer>
        LoRa_WriteReg(0x12, 0xFF); // clear IRQs
 80015ea:	21ff      	movs	r1, #255	@ 0xff
 80015ec:	2012      	movs	r0, #18
 80015ee:	f7ff fe0d 	bl	800120c <LoRa_WriteReg>
        return nb;
 80015f2:	7bbb      	ldrb	r3, [r7, #14]
 80015f4:	e000      	b.n	80015f8 <LoRa_ReceivePacket+0x6a>
    }
    return 0;
 80015f6:	2300      	movs	r3, #0
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <LoRa_Task>:

/* --- LoRa Task --- */
void LoRa_Task(void) {
 8001600:	b580      	push	{r7, lr}
 8001602:	b098      	sub	sp, #96	@ 0x60
 8001604:	af00      	add	r7, sp, #0
    // Set the initial mode
    if (loraMode == LORA_MODE_RECEIVER || loraMode == LORA_MODE_TRANCEIVER) {
 8001606:	4bb0      	ldr	r3, [pc, #704]	@ (80018c8 <LoRa_Task+0x2c8>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b02      	cmp	r3, #2
 800160c:	d003      	beq.n	8001616 <LoRa_Task+0x16>
 800160e:	4bae      	ldr	r3, [pc, #696]	@ (80018c8 <LoRa_Task+0x2c8>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b03      	cmp	r3, #3
 8001614:	d105      	bne.n	8001622 <LoRa_Task+0x22>
        LoRa_SetRxContinuous(); // Start in RX mode if receiver or transceiver
 8001616:	f7ff ff60 	bl	80014da <LoRa_SetRxContinuous>
        Debug_Print("LoRa set to RX Continuous mode.\r\n");
 800161a:	48ac      	ldr	r0, [pc, #688]	@ (80018cc <LoRa_Task+0x2cc>)
 800161c:	f000 f9f4 	bl	8001a08 <Debug_Print>
    if (loraMode == LORA_MODE_RECEIVER || loraMode == LORA_MODE_TRANCEIVER) {
 8001620:	e004      	b.n	800162c <LoRa_Task+0x2c>
    } else {
        LoRa_SetStandby(); // Otherwise, start in Standby
 8001622:	f7ff ff4f 	bl	80014c4 <LoRa_SetStandby>
        Debug_Print("LoRa set to Standby mode.\r\n");
 8001626:	48aa      	ldr	r0, [pc, #680]	@ (80018d0 <LoRa_Task+0x2d0>)
 8001628:	f000 f9ee 	bl	8001a08 <Debug_Print>
    }

    // === Verify LoRa chip ===
    uint8_t version = LoRa_ReadReg(0x42);  // SX1278 RegVersion
 800162c:	2042      	movs	r0, #66	@ 0x42
 800162e:	f7ff fe19 	bl	8001264 <LoRa_ReadReg>
 8001632:	4603      	mov	r3, r0
 8001634:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    if (version != 0x12) {
 8001638:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800163c:	2b12      	cmp	r3, #18
 800163e:	d012      	beq.n	8001666 <LoRa_Task+0x66>
        z = 1;
 8001640:	4ba4      	ldr	r3, [pc, #656]	@ (80018d4 <LoRa_Task+0x2d4>)
 8001642:	2201      	movs	r2, #1
 8001644:	701a      	strb	r2, [r3, #0]
        char errMsg[LORA_BUFFER_SIZE];
        sprintf(errMsg, "LoRa not found! RegVersion=0x%02X\r\n", version);
 8001646:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 800164a:	463b      	mov	r3, r7
 800164c:	49a2      	ldr	r1, [pc, #648]	@ (80018d8 <LoRa_Task+0x2d8>)
 800164e:	4618      	mov	r0, r3
 8001650:	f006 fd3a 	bl	80080c8 <siprintf>
        Debug_Print(errMsg);
 8001654:	463b      	mov	r3, r7
 8001656:	4618      	mov	r0, r3
 8001658:	f000 f9d6 	bl	8001a08 <Debug_Print>
        HAL_Delay(2000);
 800165c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001660:	f002 fd84 	bl	800416c <HAL_Delay>
 8001664:	e188      	b.n	8001978 <LoRa_Task+0x378>
        return; // retry until chip responds
    }

    switch (loraMode) {
 8001666:	4b98      	ldr	r3, [pc, #608]	@ (80018c8 <LoRa_Task+0x2c8>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b03      	cmp	r3, #3
 800166c:	f000 80c1 	beq.w	80017f2 <LoRa_Task+0x1f2>
 8001670:	2b03      	cmp	r3, #3
 8001672:	f300 8179 	bgt.w	8001968 <LoRa_Task+0x368>
 8001676:	2b01      	cmp	r3, #1
 8001678:	d002      	beq.n	8001680 <LoRa_Task+0x80>
 800167a:	2b02      	cmp	r3, #2
 800167c:	d01a      	beq.n	80016b4 <LoRa_Task+0xb4>
 800167e:	e173      	b.n	8001968 <LoRa_Task+0x368>
        case LORA_MODE_TRANSMITTER:
            // Transmitter logic
            Debug_Print("LoRa Mode: Transmitter\r\n");
 8001680:	4896      	ldr	r0, [pc, #600]	@ (80018dc <LoRa_Task+0x2dc>)
 8001682:	f000 f9c1 	bl	8001a08 <Debug_Print>
            uint8_t tx_msg[] = "HELLO_TX";
 8001686:	4a96      	ldr	r2, [pc, #600]	@ (80018e0 <LoRa_Task+0x2e0>)
 8001688:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800168c:	ca07      	ldmia	r2, {r0, r1, r2}
 800168e:	c303      	stmia	r3!, {r0, r1}
 8001690:	701a      	strb	r2, [r3, #0]
            z = 5;
 8001692:	4b90      	ldr	r3, [pc, #576]	@ (80018d4 <LoRa_Task+0x2d4>)
 8001694:	2205      	movs	r2, #5
 8001696:	701a      	strb	r2, [r3, #0]
            LoRa_SendPacket(tx_msg, sizeof(tx_msg) - 1);
 8001698:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800169c:	2108      	movs	r1, #8
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff ff31 	bl	8001506 <LoRa_SendPacket>
            Debug_Print("Sent: HELLO_TX\r\n");
 80016a4:	488f      	ldr	r0, [pc, #572]	@ (80018e4 <LoRa_Task+0x2e4>)
 80016a6:	f000 f9af 	bl	8001a08 <Debug_Print>
            HAL_Delay(2000); // Send every 2 seconds
 80016aa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80016ae:	f002 fd5d 	bl	800416c <HAL_Delay>
            break;
 80016b2:	e161      	b.n	8001978 <LoRa_Task+0x378>

        case LORA_MODE_RECEIVER:
            Debug_Print("LoRa Mode: Receiver\r\n");
 80016b4:	488c      	ldr	r0, [pc, #560]	@ (80018e8 <LoRa_Task+0x2e8>)
 80016b6:	f000 f9a7 	bl	8001a08 <Debug_Print>
            connectionStatus = 0; // Reset connection status
 80016ba:	4b8c      	ldr	r3, [pc, #560]	@ (80018ec <LoRa_Task+0x2ec>)
 80016bc:	2200      	movs	r2, #0
 80016be:	701a      	strb	r2, [r3, #0]

            // Step 1: Wait for "PING" from transmitter
            for (int i = 0; i < 40; i++) {   // ~1s timeout (40 x 25ms)
 80016c0:	2300      	movs	r3, #0
 80016c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80016c4:	e038      	b.n	8001738 <LoRa_Task+0x138>
                uint8_t len = LoRa_ReceivePacket(rxBuffer);
 80016c6:	488a      	ldr	r0, [pc, #552]	@ (80018f0 <LoRa_Task+0x2f0>)
 80016c8:	f7ff ff61 	bl	800158e <LoRa_ReceivePacket>
 80016cc:	4603      	mov	r3, r0
 80016ce:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
                if (len > 0) {
 80016d2:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d028      	beq.n	800172c <LoRa_Task+0x12c>
                    rxBuffer[len] = '\0'; // null terminate
 80016da:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80016de:	4a84      	ldr	r2, [pc, #528]	@ (80018f0 <LoRa_Task+0x2f0>)
 80016e0:	2100      	movs	r1, #0
 80016e2:	54d1      	strb	r1, [r2, r3]
                    char dbg_rx[LORA_BUFFER_SIZE];
                    sprintf(dbg_rx, "Received: %s\r\n", rxBuffer);
 80016e4:	463b      	mov	r3, r7
 80016e6:	4a82      	ldr	r2, [pc, #520]	@ (80018f0 <LoRa_Task+0x2f0>)
 80016e8:	4982      	ldr	r1, [pc, #520]	@ (80018f4 <LoRa_Task+0x2f4>)
 80016ea:	4618      	mov	r0, r3
 80016ec:	f006 fcec 	bl	80080c8 <siprintf>
                    Debug_Print(dbg_rx);
 80016f0:	463b      	mov	r3, r7
 80016f2:	4618      	mov	r0, r3
 80016f4:	f000 f988 	bl	8001a08 <Debug_Print>

                    if (strncmp((char*)rxBuffer, LORA_PING_MSG, strlen(LORA_PING_MSG)) == 0) {
 80016f8:	2204      	movs	r2, #4
 80016fa:	497f      	ldr	r1, [pc, #508]	@ (80018f8 <LoRa_Task+0x2f8>)
 80016fc:	487c      	ldr	r0, [pc, #496]	@ (80018f0 <LoRa_Task+0x2f0>)
 80016fe:	f006 fd3b 	bl	8008178 <strncmp>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d111      	bne.n	800172c <LoRa_Task+0x12c>
                        // Step 2: Reply with "ACK"
                        uint8_t ack_msg[] = LORA_ACK_MSG;
 8001708:	4b7c      	ldr	r3, [pc, #496]	@ (80018fc <LoRa_Task+0x2fc>)
 800170a:	63bb      	str	r3, [r7, #56]	@ 0x38
                        LoRa_SendPacket(ack_msg, sizeof(ack_msg) - 1);
 800170c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001710:	2103      	movs	r1, #3
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff fef7 	bl	8001506 <LoRa_SendPacket>
                        Debug_Print("Sent: ACK\r\n");
 8001718:	4879      	ldr	r0, [pc, #484]	@ (8001900 <LoRa_Task+0x300>)
 800171a:	f000 f975 	bl	8001a08 <Debug_Print>

                        connectionStatus = 1;
 800171e:	4b73      	ldr	r3, [pc, #460]	@ (80018ec <LoRa_Task+0x2ec>)
 8001720:	2201      	movs	r2, #1
 8001722:	701a      	strb	r2, [r3, #0]
                        z = 6; // connection established
 8001724:	4b6b      	ldr	r3, [pc, #428]	@ (80018d4 <LoRa_Task+0x2d4>)
 8001726:	2206      	movs	r2, #6
 8001728:	701a      	strb	r2, [r3, #0]
                        break;
 800172a:	e008      	b.n	800173e <LoRa_Task+0x13e>
                    }
                }
                HAL_Delay(25);
 800172c:	2019      	movs	r0, #25
 800172e:	f002 fd1d 	bl	800416c <HAL_Delay>
            for (int i = 0; i < 40; i++) {   // ~1s timeout (40 x 25ms)
 8001732:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001734:	3301      	adds	r3, #1
 8001736:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001738:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800173a:	2b27      	cmp	r3, #39	@ 0x27
 800173c:	ddc3      	ble.n	80016c6 <LoRa_Task+0xc6>
            }

            // Step 3: Handle failed connection
            if (!connectionStatus) {
 800173e:	4b6b      	ldr	r3, [pc, #428]	@ (80018ec <LoRa_Task+0x2ec>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d10a      	bne.n	800175c <LoRa_Task+0x15c>
                Debug_Print("Connection failed. No PING received.\r\n");
 8001746:	486f      	ldr	r0, [pc, #444]	@ (8001904 <LoRa_Task+0x304>)
 8001748:	f000 f95e 	bl	8001a08 <Debug_Print>
                z = 7;
 800174c:	4b61      	ldr	r3, [pc, #388]	@ (80018d4 <LoRa_Task+0x2d4>)
 800174e:	2207      	movs	r2, #7
 8001750:	701a      	strb	r2, [r3, #0]
                HAL_Delay(1000); // retry delay
 8001752:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001756:	f002 fd09 	bl	800416c <HAL_Delay>
 800175a:	e046      	b.n	80017ea <LoRa_Task+0x1ea>
            } else {
                // Step 4: Wait for HELLO after PING->ACK
                Debug_Print("Waiting for HELLO...\r\n");
 800175c:	486a      	ldr	r0, [pc, #424]	@ (8001908 <LoRa_Task+0x308>)
 800175e:	f000 f953 	bl	8001a08 <Debug_Print>
                connectionStatus = 0; // reset until HELLO is confirmed
 8001762:	4b62      	ldr	r3, [pc, #392]	@ (80018ec <LoRa_Task+0x2ec>)
 8001764:	2200      	movs	r2, #0
 8001766:	701a      	strb	r2, [r3, #0]

                for (int j = 0; j < 40; j++) {   // ~1s timeout for HELLO
 8001768:	2300      	movs	r3, #0
 800176a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800176c:	e030      	b.n	80017d0 <LoRa_Task+0x1d0>
                    uint8_t rx_len = LoRa_ReceivePacket(rxBuffer);
 800176e:	4860      	ldr	r0, [pc, #384]	@ (80018f0 <LoRa_Task+0x2f0>)
 8001770:	f7ff ff0d 	bl	800158e <LoRa_ReceivePacket>
 8001774:	4603      	mov	r3, r0
 8001776:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                    if (rx_len > 0) {
 800177a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800177e:	2b00      	cmp	r3, #0
 8001780:	d020      	beq.n	80017c4 <LoRa_Task+0x1c4>
                        rxBuffer[rx_len] = '\0';
 8001782:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001786:	4a5a      	ldr	r2, [pc, #360]	@ (80018f0 <LoRa_Task+0x2f0>)
 8001788:	2100      	movs	r1, #0
 800178a:	54d1      	strb	r1, [r2, r3]
                        char dbg_rx2[LORA_BUFFER_SIZE];
                        sprintf(dbg_rx2, "Data Received: %s\r\n", rxBuffer);
 800178c:	463b      	mov	r3, r7
 800178e:	4a58      	ldr	r2, [pc, #352]	@ (80018f0 <LoRa_Task+0x2f0>)
 8001790:	495e      	ldr	r1, [pc, #376]	@ (800190c <LoRa_Task+0x30c>)
 8001792:	4618      	mov	r0, r3
 8001794:	f006 fc98 	bl	80080c8 <siprintf>
                        Debug_Print(dbg_rx2);
 8001798:	463b      	mov	r3, r7
 800179a:	4618      	mov	r0, r3
 800179c:	f000 f934 	bl	8001a08 <Debug_Print>

                        if (strncmp((char*)rxBuffer, LORA_HELLO_MSG, strlen(LORA_HELLO_MSG)) == 0) {
 80017a0:	2205      	movs	r2, #5
 80017a2:	495b      	ldr	r1, [pc, #364]	@ (8001910 <LoRa_Task+0x310>)
 80017a4:	4852      	ldr	r0, [pc, #328]	@ (80018f0 <LoRa_Task+0x2f0>)
 80017a6:	f006 fce7 	bl	8008178 <strncmp>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d109      	bne.n	80017c4 <LoRa_Task+0x1c4>
                            Debug_Print("HELLO received -> Final Connection Established\r\n");
 80017b0:	4858      	ldr	r0, [pc, #352]	@ (8001914 <LoRa_Task+0x314>)
 80017b2:	f000 f929 	bl	8001a08 <Debug_Print>
                            connectionStatus = 1;
 80017b6:	4b4d      	ldr	r3, [pc, #308]	@ (80018ec <LoRa_Task+0x2ec>)
 80017b8:	2201      	movs	r2, #1
 80017ba:	701a      	strb	r2, [r3, #0]
                            z = 8; // Final established state
 80017bc:	4b45      	ldr	r3, [pc, #276]	@ (80018d4 <LoRa_Task+0x2d4>)
 80017be:	2208      	movs	r2, #8
 80017c0:	701a      	strb	r2, [r3, #0]
 80017c2:	e008      	b.n	80017d6 <LoRa_Task+0x1d6>
                            break;
                        }
                    }
                    HAL_Delay(25);
 80017c4:	2019      	movs	r0, #25
 80017c6:	f002 fcd1 	bl	800416c <HAL_Delay>
                for (int j = 0; j < 40; j++) {   // ~1s timeout for HELLO
 80017ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80017cc:	3301      	adds	r3, #1
 80017ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 80017d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80017d2:	2b27      	cmp	r3, #39	@ 0x27
 80017d4:	ddcb      	ble.n	800176e <LoRa_Task+0x16e>
                }

                if (!connectionStatus) {
 80017d6:	4b45      	ldr	r3, [pc, #276]	@ (80018ec <LoRa_Task+0x2ec>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d105      	bne.n	80017ea <LoRa_Task+0x1ea>
                    Debug_Print("HELLO not received after ACK.\r\n");
 80017de:	484e      	ldr	r0, [pc, #312]	@ (8001918 <LoRa_Task+0x318>)
 80017e0:	f000 f912 	bl	8001a08 <Debug_Print>
                    z = 9; // special error state for HELLO timeout
 80017e4:	4b3b      	ldr	r3, [pc, #236]	@ (80018d4 <LoRa_Task+0x2d4>)
 80017e6:	2209      	movs	r2, #9
 80017e8:	701a      	strb	r2, [r3, #0]
                }
            }

            HAL_Delay(100);
 80017ea:	2064      	movs	r0, #100	@ 0x64
 80017ec:	f002 fcbe 	bl	800416c <HAL_Delay>
            break;
 80017f0:	e0c2      	b.n	8001978 <LoRa_Task+0x378>

        case LORA_MODE_TRANCEIVER:
            // Transceiver logic (send and receive)
            Debug_Print("LoRa Mode: Transceiver\r\n");
 80017f2:	484a      	ldr	r0, [pc, #296]	@ (800191c <LoRa_Task+0x31c>)
 80017f4:	f000 f908 	bl	8001a08 <Debug_Print>

            // Try to receive first
            uint8_t rx_len_tr = LoRa_ReceivePacket(rxBuffer);
 80017f8:	483d      	ldr	r0, [pc, #244]	@ (80018f0 <LoRa_Task+0x2f0>)
 80017fa:	f7ff fec8 	bl	800158e <LoRa_ReceivePacket>
 80017fe:	4603      	mov	r3, r0
 8001800:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
            if (rx_len_tr > 0) {
 8001804:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8001808:	2b00      	cmp	r3, #0
 800180a:	d021      	beq.n	8001850 <LoRa_Task+0x250>
                rxBuffer[rx_len_tr] = '\0'; // null terminate
 800180c:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8001810:	4a37      	ldr	r2, [pc, #220]	@ (80018f0 <LoRa_Task+0x2f0>)
 8001812:	2100      	movs	r1, #0
 8001814:	54d1      	strb	r1, [r2, r3]
                char dbg_rx_tr[LORA_BUFFER_SIZE];
                sprintf(dbg_rx_tr, "Received: %s\r\n", rxBuffer);
 8001816:	463b      	mov	r3, r7
 8001818:	4a35      	ldr	r2, [pc, #212]	@ (80018f0 <LoRa_Task+0x2f0>)
 800181a:	4936      	ldr	r1, [pc, #216]	@ (80018f4 <LoRa_Task+0x2f4>)
 800181c:	4618      	mov	r0, r3
 800181e:	f006 fc53 	bl	80080c8 <siprintf>
                Debug_Print(dbg_rx_tr);
 8001822:	463b      	mov	r3, r7
 8001824:	4618      	mov	r0, r3
 8001826:	f000 f8ef 	bl	8001a08 <Debug_Print>

                // If "PING" is received, send "ACK"
                if (strncmp((char*)rxBuffer, LORA_PING_MSG, strlen(LORA_PING_MSG)) == 0) {
 800182a:	2204      	movs	r2, #4
 800182c:	4932      	ldr	r1, [pc, #200]	@ (80018f8 <LoRa_Task+0x2f8>)
 800182e:	4830      	ldr	r0, [pc, #192]	@ (80018f0 <LoRa_Task+0x2f0>)
 8001830:	f006 fca2 	bl	8008178 <strncmp>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d10a      	bne.n	8001850 <LoRa_Task+0x250>
                    uint8_t ack_msg[] = LORA_ACK_MSG;
 800183a:	4b30      	ldr	r3, [pc, #192]	@ (80018fc <LoRa_Task+0x2fc>)
 800183c:	637b      	str	r3, [r7, #52]	@ 0x34
                    LoRa_SendPacket(ack_msg, sizeof(ack_msg) - 1);
 800183e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001842:	2103      	movs	r1, #3
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fe5e 	bl	8001506 <LoRa_SendPacket>
                    Debug_Print("Sent: ACK\r\n");
 800184a:	482d      	ldr	r0, [pc, #180]	@ (8001900 <LoRa_Task+0x300>)
 800184c:	f000 f8dc 	bl	8001a08 <Debug_Print>
                }
            }

            // Then send a PING
            uint8_t tx_msg_tr[] = LORA_PING_MSG;
 8001850:	4b33      	ldr	r3, [pc, #204]	@ (8001920 <LoRa_Task+0x320>)
 8001852:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001854:	2300      	movs	r3, #0
 8001856:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
            LoRa_SendPacket(tx_msg_tr, sizeof(tx_msg_tr) - 1);
 800185a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800185e:	2104      	movs	r1, #4
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff fe50 	bl	8001506 <LoRa_SendPacket>
            Debug_Print("Sent: PING\r\n");
 8001866:	482f      	ldr	r0, [pc, #188]	@ (8001924 <LoRa_Task+0x324>)
 8001868:	f000 f8ce 	bl	8001a08 <Debug_Print>

            // Wait for ACK (max 500 ms)
            connectionStatus = 0;
 800186c:	4b1f      	ldr	r3, [pc, #124]	@ (80018ec <LoRa_Task+0x2ec>)
 800186e:	2200      	movs	r2, #0
 8001870:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < 20; i++) {   // 20 x 25ms = 500ms
 8001872:	2300      	movs	r3, #0
 8001874:	657b      	str	r3, [r7, #84]	@ 0x54
 8001876:	e061      	b.n	800193c <LoRa_Task+0x33c>
                uint8_t len = LoRa_ReceivePacket(rxBuffer);
 8001878:	481d      	ldr	r0, [pc, #116]	@ (80018f0 <LoRa_Task+0x2f0>)
 800187a:	f7ff fe88 	bl	800158e <LoRa_ReceivePacket>
 800187e:	4603      	mov	r3, r0
 8001880:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
                if (len > 0) {
 8001884:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8001888:	2b00      	cmp	r3, #0
 800188a:	d051      	beq.n	8001930 <LoRa_Task+0x330>
                    rxBuffer[len] = '\0'; // null terminate
 800188c:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8001890:	4a17      	ldr	r2, [pc, #92]	@ (80018f0 <LoRa_Task+0x2f0>)
 8001892:	2100      	movs	r1, #0
 8001894:	54d1      	strb	r1, [r2, r3]
                    char dbg_ack[LORA_BUFFER_SIZE];
                    sprintf(dbg_ack, "Received ACK check: %s\r\n", rxBuffer);
 8001896:	463b      	mov	r3, r7
 8001898:	4a15      	ldr	r2, [pc, #84]	@ (80018f0 <LoRa_Task+0x2f0>)
 800189a:	4923      	ldr	r1, [pc, #140]	@ (8001928 <LoRa_Task+0x328>)
 800189c:	4618      	mov	r0, r3
 800189e:	f006 fc13 	bl	80080c8 <siprintf>
                    Debug_Print(dbg_ack);
 80018a2:	463b      	mov	r3, r7
 80018a4:	4618      	mov	r0, r3
 80018a6:	f000 f8af 	bl	8001a08 <Debug_Print>

                    if (strncmp((char*)rxBuffer, LORA_ACK_MSG, strlen(LORA_ACK_MSG)) == 0) {
 80018aa:	2203      	movs	r2, #3
 80018ac:	491f      	ldr	r1, [pc, #124]	@ (800192c <LoRa_Task+0x32c>)
 80018ae:	4810      	ldr	r0, [pc, #64]	@ (80018f0 <LoRa_Task+0x2f0>)
 80018b0:	f006 fc62 	bl	8008178 <strncmp>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d13a      	bne.n	8001930 <LoRa_Task+0x330>
                        connectionStatus = 1;
 80018ba:	4b0c      	ldr	r3, [pc, #48]	@ (80018ec <LoRa_Task+0x2ec>)
 80018bc:	2201      	movs	r2, #1
 80018be:	701a      	strb	r2, [r3, #0]
                        z = 3;
 80018c0:	4b04      	ldr	r3, [pc, #16]	@ (80018d4 <LoRa_Task+0x2d4>)
 80018c2:	2203      	movs	r2, #3
 80018c4:	701a      	strb	r2, [r3, #0]
 80018c6:	e03c      	b.n	8001942 <LoRa_Task+0x342>
 80018c8:	20000018 	.word	0x20000018
 80018cc:	0800931c 	.word	0x0800931c
 80018d0:	08009340 	.word	0x08009340
 80018d4:	20000128 	.word	0x20000128
 80018d8:	0800935c 	.word	0x0800935c
 80018dc:	08009380 	.word	0x08009380
 80018e0:	08009528 	.word	0x08009528
 80018e4:	0800939c 	.word	0x0800939c
 80018e8:	080093b0 	.word	0x080093b0
 80018ec:	20000129 	.word	0x20000129
 80018f0:	20000108 	.word	0x20000108
 80018f4:	080093c8 	.word	0x080093c8
 80018f8:	080093d8 	.word	0x080093d8
 80018fc:	004b4341 	.word	0x004b4341
 8001900:	080093e0 	.word	0x080093e0
 8001904:	080093ec 	.word	0x080093ec
 8001908:	08009414 	.word	0x08009414
 800190c:	0800942c 	.word	0x0800942c
 8001910:	08009440 	.word	0x08009440
 8001914:	08009448 	.word	0x08009448
 8001918:	0800947c 	.word	0x0800947c
 800191c:	0800949c 	.word	0x0800949c
 8001920:	474e4950 	.word	0x474e4950
 8001924:	080094b8 	.word	0x080094b8
 8001928:	080094c8 	.word	0x080094c8
 800192c:	080094e4 	.word	0x080094e4
                        break;
                    }
                }
                HAL_Delay(25);
 8001930:	2019      	movs	r0, #25
 8001932:	f002 fc1b 	bl	800416c <HAL_Delay>
            for (int i = 0; i < 20; i++) {   // 20 x 25ms = 500ms
 8001936:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001938:	3301      	adds	r3, #1
 800193a:	657b      	str	r3, [r7, #84]	@ 0x54
 800193c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800193e:	2b13      	cmp	r3, #19
 8001940:	dd9a      	ble.n	8001878 <LoRa_Task+0x278>
            }

            if (!connectionStatus) {
 8001942:	4b0f      	ldr	r3, [pc, #60]	@ (8001980 <LoRa_Task+0x380>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d106      	bne.n	8001958 <LoRa_Task+0x358>
                Debug_Print("Connection: LOST\r\n");
 800194a:	480e      	ldr	r0, [pc, #56]	@ (8001984 <LoRa_Task+0x384>)
 800194c:	f000 f85c 	bl	8001a08 <Debug_Print>
                z = 4;
 8001950:	4b0d      	ldr	r3, [pc, #52]	@ (8001988 <LoRa_Task+0x388>)
 8001952:	2204      	movs	r2, #4
 8001954:	701a      	strb	r2, [r3, #0]
 8001956:	e002      	b.n	800195e <LoRa_Task+0x35e>
            } else {
                Debug_Print("Connection: OK\r\n");
 8001958:	480c      	ldr	r0, [pc, #48]	@ (800198c <LoRa_Task+0x38c>)
 800195a:	f000 f855 	bl	8001a08 <Debug_Print>
            }

            HAL_Delay(1000); // Delay before next cycle in transceiver mode
 800195e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001962:	f002 fc03 	bl	800416c <HAL_Delay>
            break;
 8001966:	e007      	b.n	8001978 <LoRa_Task+0x378>

        default:
            Debug_Print("Invalid LoRa Mode!\r\n");
 8001968:	4809      	ldr	r0, [pc, #36]	@ (8001990 <LoRa_Task+0x390>)
 800196a:	f000 f84d 	bl	8001a08 <Debug_Print>
            HAL_Delay(1000);
 800196e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001972:	f002 fbfb 	bl	800416c <HAL_Delay>
            break;
 8001976:	bf00      	nop
    }
}
 8001978:	3760      	adds	r7, #96	@ 0x60
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000129 	.word	0x20000129
 8001984:	080094e8 	.word	0x080094e8
 8001988:	20000128 	.word	0x20000128
 800198c:	080094fc 	.word	0x080094fc
 8001990:	08009510 	.word	0x08009510

08001994 <I2C_Scan>:
static void MX_RTC_Init(void);
static void MX_SPI1_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_I2C2_Init(void);
/* USER CODE BEGIN PFP */
void I2C_Scan(void) {
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
	 if (HAL_I2C_IsDeviceReady(&hi2c2, SLAVE_ADDRESS_LCD, 2, 10) == HAL_OK) {
 8001998:	230a      	movs	r3, #10
 800199a:	2202      	movs	r2, #2
 800199c:	214e      	movs	r1, #78	@ 0x4e
 800199e:	4813      	ldr	r0, [pc, #76]	@ (80019ec <I2C_Scan+0x58>)
 80019a0:	f004 f830 	bl	8005a04 <HAL_I2C_IsDeviceReady>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d115      	bne.n	80019d6 <I2C_Scan+0x42>
	        Debug_Print("✅ LCD ACK at configured address.\r\n");
 80019aa:	4811      	ldr	r0, [pc, #68]	@ (80019f0 <I2C_Scan+0x5c>)
 80019ac:	f000 f82c 	bl	8001a08 <Debug_Print>
	        lcd_init();
 80019b0:	f7ff fabd 	bl	8000f2e <lcd_init>
	        lcd_clear();
 80019b4:	f7ff fa76 	bl	8000ea4 <lcd_clear>
	        lcd_put_cur(0, 0);
 80019b8:	2100      	movs	r1, #0
 80019ba:	2000      	movs	r0, #0
 80019bc:	f7ff fa80 	bl	8000ec0 <lcd_put_cur>
	        lcd_send_string("LCD FOUND");
 80019c0:	480c      	ldr	r0, [pc, #48]	@ (80019f4 <I2C_Scan+0x60>)
 80019c2:	f7ff fa9f 	bl	8000f04 <lcd_send_string>
	        lcd_put_cur(1, 0);
 80019c6:	2100      	movs	r1, #0
 80019c8:	2001      	movs	r0, #1
 80019ca:	f7ff fa79 	bl	8000ec0 <lcd_put_cur>
	        lcd_send_string("I2C OK");
 80019ce:	480a      	ldr	r0, [pc, #40]	@ (80019f8 <I2C_Scan+0x64>)
 80019d0:	f7ff fa98 	bl	8000f04 <lcd_send_string>
	    } else {
	        Debug_Print("❌ LCD not responding at configured address.\r\n");
	        Debug_Print("   Tip: Many boards use 0x27 or 0x3F (8-bit: 0x4E/0x7E).\r\n");
	        Debug_Print("   Update SLAVE_ADDRESS_LCD in lcd_i2c.h if needed.\r\n");
	    }
}
 80019d4:	e008      	b.n	80019e8 <I2C_Scan+0x54>
	        Debug_Print("❌ LCD not responding at configured address.\r\n");
 80019d6:	4809      	ldr	r0, [pc, #36]	@ (80019fc <I2C_Scan+0x68>)
 80019d8:	f000 f816 	bl	8001a08 <Debug_Print>
	        Debug_Print("   Tip: Many boards use 0x27 or 0x3F (8-bit: 0x4E/0x7E).\r\n");
 80019dc:	4808      	ldr	r0, [pc, #32]	@ (8001a00 <I2C_Scan+0x6c>)
 80019de:	f000 f813 	bl	8001a08 <Debug_Print>
	        Debug_Print("   Update SLAVE_ADDRESS_LCD in lcd_i2c.h if needed.\r\n");
 80019e2:	4808      	ldr	r0, [pc, #32]	@ (8001a04 <I2C_Scan+0x70>)
 80019e4:	f000 f810 	bl	8001a08 <Debug_Print>
}
 80019e8:	bf00      	nop
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	20000190 	.word	0x20000190
 80019f0:	08009534 	.word	0x08009534
 80019f4:	0800955c 	.word	0x0800955c
 80019f8:	08009568 	.word	0x08009568
 80019fc:	08009570 	.word	0x08009570
 8001a00:	080095a0 	.word	0x080095a0
 8001a04:	080095dc 	.word	0x080095dc

08001a08 <Debug_Print>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Debug_Print(char *msg) {
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
    // Use the new UART_TransmitString function
    UART_TransmitString(&huart1, msg);
 8001a10:	6879      	ldr	r1, [r7, #4]
 8001a12:	4803      	ldr	r0, [pc, #12]	@ (8001a20 <Debug_Print+0x18>)
 8001a14:	f002 facc 	bl	8003fb0 <UART_TransmitString>
}
 8001a18:	bf00      	nop
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20000250 	.word	0x20000250

08001a24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b0a4      	sub	sp, #144	@ 0x90
 8001a28:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a2a:	f002 fb3d 	bl	80040a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a2e:	f000 f8b5 	bl	8001b9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a32:	f000 f9d9 	bl	8001de8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001a36:	f000 f90b 	bl	8001c50 <MX_ADC1_Init>
//  MX_RTC_Init();
  MX_SPI1_Init();
 8001a3a:	f000 f975 	bl	8001d28 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001a3e:	f000 f9a9 	bl	8001d94 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8001a42:	f000 f943 	bl	8001ccc <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8001a46:	f7ff fa72 	bl	8000f2e <lcd_init>
  ADC_Init(&hadc1);
 8001a4a:	484a      	ldr	r0, [pc, #296]	@ (8001b74 <main+0x150>)
 8001a4c:	f7fe fffe 	bl	8000a4c <ADC_Init>
  LoRa_Init(); // Initialize LoRa module
 8001a50:	f7ff fcf2 	bl	8001438 <LoRa_Init>
  I2C_Scan();
 8001a54:	f7ff ff9e 	bl	8001994 <I2C_Scan>
  Screen_Init();
 8001a58:	f001 fa76 	bl	8002f48 <Screen_Init>
  UART_Init(); // Initialize UART reception (starts the first IT)
 8001a5c:	f002 fa8a 	bl	8003f74 <UART_Init>
  Switches_Init();
 8001a60:	f002 f976 	bl	8003d50 <Switches_Init>

  Debug_Print("System Initialized\r\n");
 8001a64:	4844      	ldr	r0, [pc, #272]	@ (8001b78 <main+0x154>)
 8001a66:	f7ff ffcf 	bl	8001a08 <Debug_Print>
  uint8_t modem = LoRa_ReadReg(0x1D);
 8001a6a:	201d      	movs	r0, #29
 8001a6c:	f7ff fbfa 	bl	8001264 <LoRa_ReadReg>
 8001a70:	4603      	mov	r3, r0
 8001a72:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
  uint8_t modem2 = LoRa_ReadReg(0x1E);
 8001a76:	201e      	movs	r0, #30
 8001a78:	f7ff fbf4 	bl	8001264 <LoRa_ReadReg>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a


  sprintf(dbg, "ModemCfg1=0x%02X, ModemCfg2=0x%02X\r\n", modem, modem2);
 8001a82:	f897 208b 	ldrb.w	r2, [r7, #139]	@ 0x8b
 8001a86:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8001a8a:	493c      	ldr	r1, [pc, #240]	@ (8001b7c <main+0x158>)
 8001a8c:	483c      	ldr	r0, [pc, #240]	@ (8001b80 <main+0x15c>)
 8001a8e:	f006 fb1b 	bl	80080c8 <siprintf>
  Debug_Print(dbg);
 8001a92:	483b      	ldr	r0, [pc, #236]	@ (8001b80 <main+0x15c>)
 8001a94:	f7ff ffb8 	bl	8001a08 <Debug_Print>
  if (HAL_I2C_IsDeviceReady(&hi2c2, DS3231_ADDRESS, 2, 100) != HAL_OK) {
 8001a98:	2364      	movs	r3, #100	@ 0x64
 8001a9a:	2202      	movs	r2, #2
 8001a9c:	21d0      	movs	r1, #208	@ 0xd0
 8001a9e:	4839      	ldr	r0, [pc, #228]	@ (8001b84 <main+0x160>)
 8001aa0:	f003 ffb0 	bl	8005a04 <HAL_I2C_IsDeviceReady>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d003      	beq.n	8001ab2 <main+0x8e>
      Debug_Print("❌ DS3231 not responding!\r\n");
 8001aaa:	4837      	ldr	r0, [pc, #220]	@ (8001b88 <main+0x164>)
 8001aac:	f7ff ffac 	bl	8001a08 <Debug_Print>
 8001ab0:	e002      	b.n	8001ab8 <main+0x94>
  } else {
      Debug_Print("✅ DS3231 detected!\r\n");
 8001ab2:	4836      	ldr	r0, [pc, #216]	@ (8001b8c <main+0x168>)
 8001ab4:	f7ff ffa8 	bl	8001a08 <Debug_Print>
  }
  // DELETE this whole block in main.c (right after peripheral init)
  if (packetReady) {
 8001ab8:	4b35      	ldr	r3, [pc, #212]	@ (8001b90 <main+0x16c>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d00a      	beq.n	8001ad8 <main+0xb4>
      char buffer[128];
      if (UART_GetReceivedPacket(buffer, sizeof(buffer))) {
 8001ac2:	1d3b      	adds	r3, r7, #4
 8001ac4:	2180      	movs	r1, #128	@ 0x80
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f002 fa86 	bl	8003fd8 <UART_GetReceivedPacket>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d002      	beq.n	8001ad8 <main+0xb4>
    	  ModelHandle_ProcessUartCommand(receivedUartPacket);
 8001ad2:	4830      	ldr	r0, [pc, #192]	@ (8001b94 <main+0x170>)
 8001ad4:	f000 fd16 	bl	8002504 <ModelHandle_ProcessUartCommand>

      }
  }

         // Process all active modes
         ModelHandle_Process();
 8001ad8:	f000 fea4 	bl	8002824 <ModelHandle_Process>

  /* Infinite loop */
//  /* USER CODE BEGIN WHILE */
         while (1)
         {
        	 lcd_self_test();
 8001adc:	f7ff fa6e 	bl	8000fbc <lcd_self_test>

             /* --- Periodic data acquisition --- */
             ADC_ReadAllChannels(&hadc1, &adcData);   // update voltages
 8001ae0:	492d      	ldr	r1, [pc, #180]	@ (8001b98 <main+0x174>)
 8001ae2:	4824      	ldr	r0, [pc, #144]	@ (8001b74 <main+0x150>)
 8001ae4:	f7fe ffc2 	bl	8000a6c <ADC_ReadAllChannels>
             Get_Time();                              // update RTC
 8001ae8:	f000 ff1a 	bl	8002920 <Get_Time>
             LoRa_Task();                             // maintain LoRa stack
 8001aec:	f7ff fd88 	bl	8001600 <LoRa_Task>

             /* --- UI handling (switches + LCD) --- */
             Screen_HandleSwitches();                 // debounced switches → UI
 8001af0:	f001 ff3c 	bl	800396c <Screen_HandleSwitches>
             Screen_Update();                         // auto-cycle dashboard, smoother cursor
 8001af4:	f001 fdfe 	bl	80036f4 <Screen_Update>

             /* --- UART command handling --- */
             if (UART_GetReceivedPacket(receivedUartPacket, sizeof(receivedUartPacket))) {
 8001af8:	2140      	movs	r1, #64	@ 0x40
 8001afa:	4826      	ldr	r0, [pc, #152]	@ (8001b94 <main+0x170>)
 8001afc:	f002 fa6c 	bl	8003fd8 <UART_GetReceivedPacket>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d02a      	beq.n	8001b5c <main+0x138>
                 char *p = receivedUartPacket;
 8001b06:	4b23      	ldr	r3, [pc, #140]	@ (8001b94 <main+0x170>)
 8001b08:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                 size_t n = strlen(receivedUartPacket);
 8001b0c:	4821      	ldr	r0, [pc, #132]	@ (8001b94 <main+0x170>)
 8001b0e:	f7fe fb27 	bl	8000160 <strlen>
 8001b12:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
                 if (n >= 2 && p[0] == '@' && p[n-1] == '#') {
 8001b16:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d91a      	bls.n	8001b54 <main+0x130>
 8001b1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b40      	cmp	r3, #64	@ 0x40
 8001b26:	d115      	bne.n	8001b54 <main+0x130>
 8001b28:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001b32:	4413      	add	r3, r2
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	2b23      	cmp	r3, #35	@ 0x23
 8001b38:	d10c      	bne.n	8001b54 <main+0x130>
                     p[n-1] = '\0';  // strip end marker
 8001b3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001b44:	4413      	add	r3, r2
 8001b46:	2200      	movs	r2, #0
 8001b48:	701a      	strb	r2, [r3, #0]
                     p++;            // strip start marker
 8001b4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b4e:	3301      	adds	r3, #1
 8001b50:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                 }
                 ModelHandle_ProcessUartCommand(p);   // parse + update model
 8001b54:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8001b58:	f000 fcd4 	bl	8002504 <ModelHandle_ProcessUartCommand>
             }

             /* --- Business logic: model → hardware --- */
             ModelHandle_Process();   // compute intents for motor, relays, LEDs, timers
 8001b5c:	f000 fe62 	bl	8002824 <ModelHandle_Process>
             Relay_All(false);        // Example: you can still drive relays individually in model
 8001b60:	2000      	movs	r0, #0
 8001b62:	f000 fead 	bl	80028c0 <Relay_All>
             LED_Task();              // blink patterns / status LEDs
 8001b66:	f7ff fa8f 	bl	8001088 <LED_Task>

             /* --- Cooperative delay for smoothness --- */
             HAL_Delay(10);           // ~100Hz loop rate (good for UI responsiveness)
 8001b6a:	200a      	movs	r0, #10
 8001b6c:	f002 fafe 	bl	800416c <HAL_Delay>
         {
 8001b70:	e7b4      	b.n	8001adc <main+0xb8>
 8001b72:	bf00      	nop
 8001b74:	20000160 	.word	0x20000160
 8001b78:	080096d4 	.word	0x080096d4
 8001b7c:	0800966c 	.word	0x0800966c
 8001b80:	2000012c 	.word	0x2000012c
 8001b84:	20000190 	.word	0x20000190
 8001b88:	080096ec 	.word	0x080096ec
 8001b8c:	0800970c 	.word	0x0800970c
 8001b90:	200000e2 	.word	0x200000e2
 8001b94:	200002d0 	.word	0x200002d0
 8001b98:	20000298 	.word	0x20000298

08001b9c <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */


void SystemClock_Config(void) {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b094      	sub	sp, #80	@ 0x50
 8001ba0:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ba2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ba6:	2228      	movs	r2, #40	@ 0x28
 8001ba8:	2100      	movs	r1, #0
 8001baa:	4618      	mov	r0, r3
 8001bac:	f006 fadc 	bl	8008168 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bb0:	f107 0314 	add.w	r3, r7, #20
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	60da      	str	r2, [r3, #12]
 8001bbe:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bc0:	1d3b      	adds	r3, r7, #4
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	605a      	str	r2, [r3, #4]
 8001bc8:	609a      	str	r2, [r3, #8]
 8001bca:	60da      	str	r2, [r3, #12]

    // Use HSI (8 MHz internal) with PLL
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bd4:	2310      	movs	r3, #16
 8001bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2; // HSI/2 = 4 MHz
 8001bdc:	2300      	movs	r3, #0
 8001bde:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;             // 4*16 = 64 MHz
 8001be0:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8001be4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) { Error_Handler(); }
 8001be6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bea:	4618      	mov	r0, r3
 8001bec:	f004 fbe4 	bl	80063b8 <HAL_RCC_OscConfig>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <SystemClock_Config+0x5e>
 8001bf6:	f000 f98b 	bl	8001f10 <Error_Handler>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001bfa:	230f      	movs	r3, #15
 8001bfc:	617b      	str	r3, [r7, #20]
                                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK; // Updated line
 8001bfe:	2302      	movs	r3, #2
 8001c00:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c02:	2300      	movs	r3, #0
 8001c04:	61fb      	str	r3, [r7, #28]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c0a:	623b      	str	r3, [r7, #32]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) { Error_Handler(); }
 8001c10:	f107 0314 	add.w	r3, r7, #20
 8001c14:	2102      	movs	r1, #2
 8001c16:	4618      	mov	r0, r3
 8001c18:	f004 fe50 	bl	80068bc <HAL_RCC_ClockConfig>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <SystemClock_Config+0x8a>
 8001c22:	f000 f975 	bl	8001f10 <Error_Handler>

    // Use LSI (internal ~40 kHz) for RTC, and HSI/6 for ADC
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC | RCC_PERIPHCLK_ADC;
 8001c26:	2303      	movs	r3, #3
 8001c28:	607b      	str	r3, [r7, #4]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001c2a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c2e:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001c30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c34:	60fb      	str	r3, [r7, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) { Error_Handler(); }
 8001c36:	1d3b      	adds	r3, r7, #4
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f004 ffcd 	bl	8006bd8 <HAL_RCCEx_PeriphCLKConfig>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <SystemClock_Config+0xac>
 8001c44:	f000 f964 	bl	8001f10 <Error_Handler>
}
 8001c48:	bf00      	nop
 8001c4a:	3750      	adds	r7, #80	@ 0x50
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c56:	1d3b      	adds	r3, r7, #4
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001c60:	4b18      	ldr	r3, [pc, #96]	@ (8001cc4 <MX_ADC1_Init+0x74>)
 8001c62:	4a19      	ldr	r2, [pc, #100]	@ (8001cc8 <MX_ADC1_Init+0x78>)
 8001c64:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c66:	4b17      	ldr	r3, [pc, #92]	@ (8001cc4 <MX_ADC1_Init+0x74>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c6c:	4b15      	ldr	r3, [pc, #84]	@ (8001cc4 <MX_ADC1_Init+0x74>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c72:	4b14      	ldr	r3, [pc, #80]	@ (8001cc4 <MX_ADC1_Init+0x74>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c78:	4b12      	ldr	r3, [pc, #72]	@ (8001cc4 <MX_ADC1_Init+0x74>)
 8001c7a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001c7e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c80:	4b10      	ldr	r3, [pc, #64]	@ (8001cc4 <MX_ADC1_Init+0x74>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001c86:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc4 <MX_ADC1_Init+0x74>)
 8001c88:	2201      	movs	r2, #1
 8001c8a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c8c:	480d      	ldr	r0, [pc, #52]	@ (8001cc4 <MX_ADC1_Init+0x74>)
 8001c8e:	f002 fa91 	bl	80041b4 <HAL_ADC_Init>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001c98:	f000 f93a 	bl	8001f10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ca8:	1d3b      	adds	r3, r7, #4
 8001caa:	4619      	mov	r1, r3
 8001cac:	4805      	ldr	r0, [pc, #20]	@ (8001cc4 <MX_ADC1_Init+0x74>)
 8001cae:	f002 fd19 	bl	80046e4 <HAL_ADC_ConfigChannel>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001cb8:	f000 f92a 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001cbc:	bf00      	nop
 8001cbe:	3710      	adds	r7, #16
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20000160 	.word	0x20000160
 8001cc8:	40012400 	.word	0x40012400

08001ccc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001cd0:	4b12      	ldr	r3, [pc, #72]	@ (8001d1c <MX_I2C2_Init+0x50>)
 8001cd2:	4a13      	ldr	r2, [pc, #76]	@ (8001d20 <MX_I2C2_Init+0x54>)
 8001cd4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001cd6:	4b11      	ldr	r3, [pc, #68]	@ (8001d1c <MX_I2C2_Init+0x50>)
 8001cd8:	4a12      	ldr	r2, [pc, #72]	@ (8001d24 <MX_I2C2_Init+0x58>)
 8001cda:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8001d1c <MX_I2C2_Init+0x50>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8001d1c <MX_I2C2_Init+0x50>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8001d1c <MX_I2C2_Init+0x50>)
 8001cea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001cee:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8001d1c <MX_I2C2_Init+0x50>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001cf6:	4b09      	ldr	r3, [pc, #36]	@ (8001d1c <MX_I2C2_Init+0x50>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cfc:	4b07      	ldr	r3, [pc, #28]	@ (8001d1c <MX_I2C2_Init+0x50>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d02:	4b06      	ldr	r3, [pc, #24]	@ (8001d1c <MX_I2C2_Init+0x50>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001d08:	4804      	ldr	r0, [pc, #16]	@ (8001d1c <MX_I2C2_Init+0x50>)
 8001d0a:	f003 f9c5 	bl	8005098 <HAL_I2C_Init>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001d14:	f000 f8fc 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001d18:	bf00      	nop
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20000190 	.word	0x20000190
 8001d20:	40005800 	.word	0x40005800
 8001d24:	000186a0 	.word	0x000186a0

08001d28 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001d2c:	4b17      	ldr	r3, [pc, #92]	@ (8001d8c <MX_SPI1_Init+0x64>)
 8001d2e:	4a18      	ldr	r2, [pc, #96]	@ (8001d90 <MX_SPI1_Init+0x68>)
 8001d30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d32:	4b16      	ldr	r3, [pc, #88]	@ (8001d8c <MX_SPI1_Init+0x64>)
 8001d34:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001d38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d3a:	4b14      	ldr	r3, [pc, #80]	@ (8001d8c <MX_SPI1_Init+0x64>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d40:	4b12      	ldr	r3, [pc, #72]	@ (8001d8c <MX_SPI1_Init+0x64>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d46:	4b11      	ldr	r3, [pc, #68]	@ (8001d8c <MX_SPI1_Init+0x64>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d8c <MX_SPI1_Init+0x64>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d52:	4b0e      	ldr	r3, [pc, #56]	@ (8001d8c <MX_SPI1_Init+0x64>)
 8001d54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d58:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d8c <MX_SPI1_Init+0x64>)
 8001d5c:	2218      	movs	r2, #24
 8001d5e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d60:	4b0a      	ldr	r3, [pc, #40]	@ (8001d8c <MX_SPI1_Init+0x64>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d66:	4b09      	ldr	r3, [pc, #36]	@ (8001d8c <MX_SPI1_Init+0x64>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d6c:	4b07      	ldr	r3, [pc, #28]	@ (8001d8c <MX_SPI1_Init+0x64>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d72:	4b06      	ldr	r3, [pc, #24]	@ (8001d8c <MX_SPI1_Init+0x64>)
 8001d74:	220a      	movs	r2, #10
 8001d76:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d78:	4804      	ldr	r0, [pc, #16]	@ (8001d8c <MX_SPI1_Init+0x64>)
 8001d7a:	f005 f8cc 	bl	8006f16 <HAL_SPI_Init>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d84:	f000 f8c4 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d88:	bf00      	nop
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	200001f8 	.word	0x200001f8
 8001d90:	40013000 	.word	0x40013000

08001d94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d98:	4b11      	ldr	r3, [pc, #68]	@ (8001de0 <MX_USART1_UART_Init+0x4c>)
 8001d9a:	4a12      	ldr	r2, [pc, #72]	@ (8001de4 <MX_USART1_UART_Init+0x50>)
 8001d9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d9e:	4b10      	ldr	r3, [pc, #64]	@ (8001de0 <MX_USART1_UART_Init+0x4c>)
 8001da0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001da4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001da6:	4b0e      	ldr	r3, [pc, #56]	@ (8001de0 <MX_USART1_UART_Init+0x4c>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001dac:	4b0c      	ldr	r3, [pc, #48]	@ (8001de0 <MX_USART1_UART_Init+0x4c>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001db2:	4b0b      	ldr	r3, [pc, #44]	@ (8001de0 <MX_USART1_UART_Init+0x4c>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001db8:	4b09      	ldr	r3, [pc, #36]	@ (8001de0 <MX_USART1_UART_Init+0x4c>)
 8001dba:	220c      	movs	r2, #12
 8001dbc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dbe:	4b08      	ldr	r3, [pc, #32]	@ (8001de0 <MX_USART1_UART_Init+0x4c>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dc4:	4b06      	ldr	r3, [pc, #24]	@ (8001de0 <MX_USART1_UART_Init+0x4c>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001dca:	4805      	ldr	r0, [pc, #20]	@ (8001de0 <MX_USART1_UART_Init+0x4c>)
 8001dcc:	f005 fe39 	bl	8007a42 <HAL_UART_Init>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001dd6:	f000 f89b 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000250 	.word	0x20000250
 8001de4:	40013800 	.word	0x40013800

08001de8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b088      	sub	sp, #32
 8001dec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dee:	f107 0310 	add.w	r3, r7, #16
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	605a      	str	r2, [r3, #4]
 8001df8:	609a      	str	r2, [r3, #8]
 8001dfa:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dfc:	4b40      	ldr	r3, [pc, #256]	@ (8001f00 <MX_GPIO_Init+0x118>)
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	4a3f      	ldr	r2, [pc, #252]	@ (8001f00 <MX_GPIO_Init+0x118>)
 8001e02:	f043 0310 	orr.w	r3, r3, #16
 8001e06:	6193      	str	r3, [r2, #24]
 8001e08:	4b3d      	ldr	r3, [pc, #244]	@ (8001f00 <MX_GPIO_Init+0x118>)
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	f003 0310 	and.w	r3, r3, #16
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e14:	4b3a      	ldr	r3, [pc, #232]	@ (8001f00 <MX_GPIO_Init+0x118>)
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	4a39      	ldr	r2, [pc, #228]	@ (8001f00 <MX_GPIO_Init+0x118>)
 8001e1a:	f043 0320 	orr.w	r3, r3, #32
 8001e1e:	6193      	str	r3, [r2, #24]
 8001e20:	4b37      	ldr	r3, [pc, #220]	@ (8001f00 <MX_GPIO_Init+0x118>)
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	f003 0320 	and.w	r3, r3, #32
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2c:	4b34      	ldr	r3, [pc, #208]	@ (8001f00 <MX_GPIO_Init+0x118>)
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	4a33      	ldr	r2, [pc, #204]	@ (8001f00 <MX_GPIO_Init+0x118>)
 8001e32:	f043 0304 	orr.w	r3, r3, #4
 8001e36:	6193      	str	r3, [r2, #24]
 8001e38:	4b31      	ldr	r3, [pc, #196]	@ (8001f00 <MX_GPIO_Init+0x118>)
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	607b      	str	r3, [r7, #4]
 8001e42:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e44:	4b2e      	ldr	r3, [pc, #184]	@ (8001f00 <MX_GPIO_Init+0x118>)
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	4a2d      	ldr	r2, [pc, #180]	@ (8001f00 <MX_GPIO_Init+0x118>)
 8001e4a:	f043 0308 	orr.w	r3, r3, #8
 8001e4e:	6193      	str	r3, [r2, #24]
 8001e50:	4b2b      	ldr	r3, [pc, #172]	@ (8001f00 <MX_GPIO_Init+0x118>)
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	f003 0308 	and.w	r3, r3, #8
 8001e58:	603b      	str	r3, [r7, #0]
 8001e5a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Relay1_Pin|Relay2_Pin|Relay3_Pin|LORA_STATUS_Pin
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f240 3147 	movw	r1, #839	@ 0x347
 8001e62:	4828      	ldr	r0, [pc, #160]	@ (8001f04 <MX_GPIO_Init+0x11c>)
 8001e64:	f003 f8ff 	bl	8005066 <HAL_GPIO_WritePin>
                          |LED4_Pin|LED5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LORA_SELECT_Pin, GPIO_PIN_RESET);
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f44f 4119 	mov.w	r1, #39168	@ 0x9900
 8001e6e:	4826      	ldr	r0, [pc, #152]	@ (8001f08 <MX_GPIO_Init+0x120>)
 8001e70:	f003 f8f9 	bl	8005066 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : AC_voltage_Pin AC_current_Pin */
  GPIO_InitStruct.Pin = AC_voltage_Pin|AC_current_Pin;
 8001e74:	23c0      	movs	r3, #192	@ 0xc0
 8001e76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e7c:	f107 0310 	add.w	r3, r7, #16
 8001e80:	4619      	mov	r1, r3
 8001e82:	4821      	ldr	r0, [pc, #132]	@ (8001f08 <MX_GPIO_Init+0x120>)
 8001e84:	f002 ff54 	bl	8004d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : Relay1_Pin Relay2_Pin Relay3_Pin LORA_STATUS_Pin
                           LED4_Pin LED5_Pin */
  GPIO_InitStruct.Pin = Relay1_Pin|Relay2_Pin|Relay3_Pin|LORA_STATUS_Pin
 8001e88:	f240 3347 	movw	r3, #839	@ 0x347
 8001e8c:	613b      	str	r3, [r7, #16]
                          |LED4_Pin|LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e92:	2300      	movs	r3, #0
 8001e94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e96:	2302      	movs	r3, #2
 8001e98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e9a:	f107 0310 	add.w	r3, r7, #16
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4818      	ldr	r0, [pc, #96]	@ (8001f04 <MX_GPIO_Init+0x11c>)
 8001ea2:	f002 ff45 	bl	8004d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWITCH1_Pin SWITCH2_Pin SWITCH3_Pin SWITCH4_Pin */
  GPIO_InitStruct.Pin = SWITCH1_Pin|SWITCH2_Pin|SWITCH3_Pin|SWITCH4_Pin;
 8001ea6:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001eaa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001eac:	4b17      	ldr	r3, [pc, #92]	@ (8001f0c <MX_GPIO_Init+0x124>)
 8001eae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb4:	f107 0310 	add.w	r3, r7, #16
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4812      	ldr	r0, [pc, #72]	@ (8001f04 <MX_GPIO_Init+0x11c>)
 8001ebc:	f002 ff38 	bl	8004d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LORA_SELECT_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LORA_SELECT_Pin;
 8001ec0:	f44f 4319 	mov.w	r3, #39168	@ 0x9900
 8001ec4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed2:	f107 0310 	add.w	r3, r7, #16
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	480b      	ldr	r0, [pc, #44]	@ (8001f08 <MX_GPIO_Init+0x120>)
 8001eda:	f002 ff29 	bl	8004d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_DATA_Pin */
  GPIO_InitStruct.Pin = RF_DATA_Pin;
 8001ede:	2380      	movs	r3, #128	@ 0x80
 8001ee0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RF_DATA_GPIO_Port, &GPIO_InitStruct);
 8001eea:	f107 0310 	add.w	r3, r7, #16
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4804      	ldr	r0, [pc, #16]	@ (8001f04 <MX_GPIO_Init+0x11c>)
 8001ef2:	f002 ff1d 	bl	8004d30 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001ef6:	bf00      	nop
 8001ef8:	3720      	adds	r7, #32
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40021000 	.word	0x40021000
 8001f04:	40010c00 	.word	0x40010c00
 8001f08:	40010800 	.word	0x40010800
 8001f0c:	10310000 	.word	0x10310000

08001f10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f14:	b672      	cpsid	i
}
 8001f16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f18:	bf00      	nop
 8001f1a:	e7fd      	b.n	8001f18 <Error_Handler+0x8>

08001f1c <now_ms>:
static const uint32_t MAX_CONT_RUN_MS = 2UL * 60UL * 60UL * 1000UL; // 2h
static bool           maxRunTimerArmed = false;
static uint32_t       maxRunStartTick  = 0;

/* ===== Utilities ===== */
static inline uint32_t now_ms(void) { return HAL_GetTick(); }
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	f002 f91a 	bl	8004158 <HAL_GetTick>
 8001f24:	4603      	mov	r3, r0
 8001f26:	4618      	mov	r0, r3
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <ModelHandle_TimeToSeconds>:

uint32_t ModelHandle_TimeToSeconds(uint8_t hh, uint8_t mm) {
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	4603      	mov	r3, r0
 8001f32:	460a      	mov	r2, r1
 8001f34:	71fb      	strb	r3, [r7, #7]
 8001f36:	4613      	mov	r3, r2
 8001f38:	71bb      	strb	r3, [r7, #6]
    return ((uint32_t)hh * 3600UL) + ((uint32_t)mm * 60UL);
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8001f40:	fb02 f103 	mul.w	r1, r2, r3
 8001f44:	79ba      	ldrb	r2, [r7, #6]
 8001f46:	4613      	mov	r3, r2
 8001f48:	011b      	lsls	r3, r3, #4
 8001f4a:	1a9b      	subs	r3, r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	440b      	add	r3, r1
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr
	...

08001f5c <ModelHandle_SecondsToTime>:

void ModelHandle_SecondsToTime(uint32_t sec, uint8_t* hh, uint8_t* mm) {
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
    sec %= 24UL * 3600UL;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	4a16      	ldr	r2, [pc, #88]	@ (8001fc4 <ModelHandle_SecondsToTime+0x68>)
 8001f6c:	fba2 1203 	umull	r1, r2, r2, r3
 8001f70:	0c12      	lsrs	r2, r2, #16
 8001f72:	4915      	ldr	r1, [pc, #84]	@ (8001fc8 <ModelHandle_SecondsToTime+0x6c>)
 8001f74:	fb01 f202 	mul.w	r2, r1, r2
 8001f78:	1a9b      	subs	r3, r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]
    if (hh) *hh = (uint8_t)(sec / 3600UL);
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d007      	beq.n	8001f92 <ModelHandle_SecondsToTime+0x36>
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	4a11      	ldr	r2, [pc, #68]	@ (8001fcc <ModelHandle_SecondsToTime+0x70>)
 8001f86:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8a:	0adb      	lsrs	r3, r3, #11
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	701a      	strb	r2, [r3, #0]
    if (mm) *mm = (uint8_t)((sec % 3600UL) / 60UL);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d010      	beq.n	8001fba <ModelHandle_SecondsToTime+0x5e>
 8001f98:	68fa      	ldr	r2, [r7, #12]
 8001f9a:	4b0c      	ldr	r3, [pc, #48]	@ (8001fcc <ModelHandle_SecondsToTime+0x70>)
 8001f9c:	fba3 1302 	umull	r1, r3, r3, r2
 8001fa0:	0adb      	lsrs	r3, r3, #11
 8001fa2:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8001fa6:	fb01 f303 	mul.w	r3, r1, r3
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	4a08      	ldr	r2, [pc, #32]	@ (8001fd0 <ModelHandle_SecondsToTime+0x74>)
 8001fae:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb2:	095b      	lsrs	r3, r3, #5
 8001fb4:	b2da      	uxtb	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	701a      	strb	r2, [r3, #0]
}
 8001fba:	bf00      	nop
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr
 8001fc4:	c22e4507 	.word	0xc22e4507
 8001fc8:	00015180 	.word	0x00015180
 8001fcc:	91a2b3c5 	.word	0x91a2b3c5
 8001fd0:	88888889 	.word	0x88888889

08001fd4 <motor_apply>:

/* ===== Motor ===== */
static void motor_apply(bool on)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	71fb      	strb	r3, [r7, #7]
    Relay_Set(1, on);
 8001fde:	79fb      	ldrb	r3, [r7, #7]
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	2001      	movs	r0, #1
 8001fe4:	f000 fc3e 	bl	8002864 <Relay_Set>
    motorStatus = on ? 1U : 0U;
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <motor_apply+0x1e>
 8001fee:	2201      	movs	r2, #1
 8001ff0:	e000      	b.n	8001ff4 <motor_apply+0x20>
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	4b0d      	ldr	r3, [pc, #52]	@ (800202c <motor_apply+0x58>)
 8001ff6:	701a      	strb	r2, [r3, #0]

    if (on) {
 8001ff8:	79fb      	ldrb	r3, [r7, #7]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00f      	beq.n	800201e <motor_apply+0x4a>
        if (!maxRunTimerArmed) {
 8001ffe:	4b0c      	ldr	r3, [pc, #48]	@ (8002030 <motor_apply+0x5c>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	f083 0301 	eor.w	r3, r3, #1
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b00      	cmp	r3, #0
 800200a:	d00b      	beq.n	8002024 <motor_apply+0x50>
            maxRunTimerArmed = true;
 800200c:	4b08      	ldr	r3, [pc, #32]	@ (8002030 <motor_apply+0x5c>)
 800200e:	2201      	movs	r2, #1
 8002010:	701a      	strb	r2, [r3, #0]
            maxRunStartTick  = now_ms();
 8002012:	f7ff ff83 	bl	8001f1c <now_ms>
 8002016:	4603      	mov	r3, r0
 8002018:	4a06      	ldr	r2, [pc, #24]	@ (8002034 <motor_apply+0x60>)
 800201a:	6013      	str	r3, [r2, #0]
        }
    } else {
        maxRunTimerArmed = false;
    }
}
 800201c:	e002      	b.n	8002024 <motor_apply+0x50>
        maxRunTimerArmed = false;
 800201e:	4b04      	ldr	r3, [pc, #16]	@ (8002030 <motor_apply+0x5c>)
 8002020:	2200      	movs	r2, #0
 8002022:	701a      	strb	r2, [r3, #0]
}
 8002024:	bf00      	nop
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	20000310 	.word	0x20000310
 8002030:	2000035c 	.word	0x2000035c
 8002034:	20000360 	.word	0x20000360

08002038 <countdown_start>:

/* ===== Countdown ===== */
static void countdown_start(bool onMode, uint32_t seconds)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	6039      	str	r1, [r7, #0]
 8002042:	71fb      	strb	r3, [r7, #7]
    if (seconds == 0) { countdownActive = false; return; }
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d103      	bne.n	8002052 <countdown_start+0x1a>
 800204a:	4b12      	ldr	r3, [pc, #72]	@ (8002094 <countdown_start+0x5c>)
 800204c:	2200      	movs	r2, #0
 800204e:	701a      	strb	r2, [r3, #0]
 8002050:	e01d      	b.n	800208e <countdown_start+0x56>
    countdownMode     = onMode;
 8002052:	4a11      	ldr	r2, [pc, #68]	@ (8002098 <countdown_start+0x60>)
 8002054:	79fb      	ldrb	r3, [r7, #7]
 8002056:	7013      	strb	r3, [r2, #0]
    countdownDuration = seconds;
 8002058:	4a10      	ldr	r2, [pc, #64]	@ (800209c <countdown_start+0x64>)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	6013      	str	r3, [r2, #0]
    countdownActive   = true;
 800205e:	4b0d      	ldr	r3, [pc, #52]	@ (8002094 <countdown_start+0x5c>)
 8002060:	2201      	movs	r2, #1
 8002062:	701a      	strb	r2, [r3, #0]
    countdownDeadline = now_ms() + (seconds * 1000UL);
 8002064:	f7ff ff5a 	bl	8001f1c <now_ms>
 8002068:	4602      	mov	r2, r0
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002070:	fb01 f303 	mul.w	r3, r1, r3
 8002074:	4413      	add	r3, r2
 8002076:	4a0a      	ldr	r2, [pc, #40]	@ (80020a0 <countdown_start+0x68>)
 8002078:	6013      	str	r3, [r2, #0]

    if (onMode) motor_apply(true);
 800207a:	79fb      	ldrb	r3, [r7, #7]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d003      	beq.n	8002088 <countdown_start+0x50>
 8002080:	2001      	movs	r0, #1
 8002082:	f7ff ffa7 	bl	8001fd4 <motor_apply>
 8002086:	e002      	b.n	800208e <countdown_start+0x56>
    else        motor_apply(false);
 8002088:	2000      	movs	r0, #0
 800208a:	f7ff ffa3 	bl	8001fd4 <motor_apply>
}
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	20000311 	.word	0x20000311
 8002098:	20000019 	.word	0x20000019
 800209c:	20000314 	.word	0x20000314
 80020a0:	20000318 	.word	0x20000318

080020a4 <countdown_tick>:

static void countdown_tick(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
    if (!countdownActive) return;
 80020aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002118 <countdown_tick+0x74>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	f083 0301 	eor.w	r3, r3, #1
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d12a      	bne.n	8002110 <countdown_tick+0x6c>

    uint32_t tnow = now_ms();
 80020ba:	f7ff ff2f 	bl	8001f1c <now_ms>
 80020be:	6078      	str	r0, [r7, #4]
    if ((int32_t)(countdownDeadline - tnow) <= 0) {
 80020c0:	4b16      	ldr	r3, [pc, #88]	@ (800211c <countdown_tick+0x78>)
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	dc12      	bgt.n	80020f2 <countdown_tick+0x4e>
        if (countdownMode) motor_apply(false);
 80020cc:	4b14      	ldr	r3, [pc, #80]	@ (8002120 <countdown_tick+0x7c>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <countdown_tick+0x3a>
 80020d6:	2000      	movs	r0, #0
 80020d8:	f7ff ff7c 	bl	8001fd4 <motor_apply>
 80020dc:	e002      	b.n	80020e4 <countdown_tick+0x40>
        else               motor_apply(true);
 80020de:	2001      	movs	r0, #1
 80020e0:	f7ff ff78 	bl	8001fd4 <motor_apply>
        countdownActive   = false;
 80020e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002118 <countdown_tick+0x74>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	701a      	strb	r2, [r3, #0]
        countdownDuration = 0;
 80020ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002124 <countdown_tick+0x80>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
        return;
 80020f0:	e00f      	b.n	8002112 <countdown_tick+0x6e>
    }

    uint32_t remaining_ms = countdownDeadline - tnow;
 80020f2:	4b0a      	ldr	r3, [pc, #40]	@ (800211c <countdown_tick+0x78>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	603b      	str	r3, [r7, #0]
    countdownDuration = (remaining_ms + 999) / 1000;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 8002102:	4a09      	ldr	r2, [pc, #36]	@ (8002128 <countdown_tick+0x84>)
 8002104:	fba2 2303 	umull	r2, r3, r2, r3
 8002108:	099b      	lsrs	r3, r3, #6
 800210a:	4a06      	ldr	r2, [pc, #24]	@ (8002124 <countdown_tick+0x80>)
 800210c:	6013      	str	r3, [r2, #0]
 800210e:	e000      	b.n	8002112 <countdown_tick+0x6e>
    if (!countdownActive) return;
 8002110:	bf00      	nop
}
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	20000311 	.word	0x20000311
 800211c:	20000318 	.word	0x20000318
 8002120:	20000019 	.word	0x20000019
 8002124:	20000314 	.word	0x20000314
 8002128:	10624dd3 	.word	0x10624dd3

0800212c <twist_tick>:
/* ===== Twist ===== */
static bool     twist_on_phase = false;
static uint32_t twist_phase_deadline = 0;

static void twist_tick(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
    if (!twistSettings.twistActive) return;
 8002132:	4b22      	ldr	r3, [pc, #136]	@ (80021bc <twist_tick+0x90>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	f083 0301 	eor.w	r3, r3, #1
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	d137      	bne.n	80021b0 <twist_tick+0x84>

    uint32_t tnow = now_ms();
 8002140:	f7ff feec 	bl	8001f1c <now_ms>
 8002144:	6078      	str	r0, [r7, #4]
    if ((int32_t)(twist_phase_deadline - tnow) > 0) return;
 8002146:	4b1e      	ldr	r3, [pc, #120]	@ (80021c0 <twist_tick+0x94>)
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	dc30      	bgt.n	80021b4 <twist_tick+0x88>

    twist_on_phase = !twist_on_phase;
 8002152:	4b1c      	ldr	r3, [pc, #112]	@ (80021c4 <twist_tick+0x98>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	bf14      	ite	ne
 800215a:	2301      	movne	r3, #1
 800215c:	2300      	moveq	r3, #0
 800215e:	b2db      	uxtb	r3, r3
 8002160:	f083 0301 	eor.w	r3, r3, #1
 8002164:	b2db      	uxtb	r3, r3
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	b2da      	uxtb	r2, r3
 800216c:	4b15      	ldr	r3, [pc, #84]	@ (80021c4 <twist_tick+0x98>)
 800216e:	701a      	strb	r2, [r3, #0]
    if (twist_on_phase) {
 8002170:	4b14      	ldr	r3, [pc, #80]	@ (80021c4 <twist_tick+0x98>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00d      	beq.n	8002194 <twist_tick+0x68>
        motor_apply(true);
 8002178:	2001      	movs	r0, #1
 800217a:	f7ff ff2b 	bl	8001fd4 <motor_apply>
        twist_phase_deadline = tnow + (twistSettings.onDurationSeconds * 1000UL);
 800217e:	4b0f      	ldr	r3, [pc, #60]	@ (80021bc <twist_tick+0x90>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002186:	fb03 f202 	mul.w	r2, r3, r2
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4413      	add	r3, r2
 800218e:	4a0c      	ldr	r2, [pc, #48]	@ (80021c0 <twist_tick+0x94>)
 8002190:	6013      	str	r3, [r2, #0]
 8002192:	e010      	b.n	80021b6 <twist_tick+0x8a>
    } else {
        motor_apply(false);
 8002194:	2000      	movs	r0, #0
 8002196:	f7ff ff1d 	bl	8001fd4 <motor_apply>
        twist_phase_deadline = tnow + (twistSettings.offDurationSeconds * 1000UL);
 800219a:	4b08      	ldr	r3, [pc, #32]	@ (80021bc <twist_tick+0x90>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80021a2:	fb03 f202 	mul.w	r2, r3, r2
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4413      	add	r3, r2
 80021aa:	4a05      	ldr	r2, [pc, #20]	@ (80021c0 <twist_tick+0x94>)
 80021ac:	6013      	str	r3, [r2, #0]
 80021ae:	e002      	b.n	80021b6 <twist_tick+0x8a>
    if (!twistSettings.twistActive) return;
 80021b0:	bf00      	nop
 80021b2:	e000      	b.n	80021b6 <twist_tick+0x8a>
    if ((int32_t)(twist_phase_deadline - tnow) > 0) return;
 80021b4:	bf00      	nop
    }
}
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20000028 	.word	0x20000028
 80021c0:	20000368 	.word	0x20000368
 80021c4:	20000364 	.word	0x20000364

080021c8 <search_tick>:
/* ===== Search ===== */
static bool     search_in_test = false;
static uint32_t search_phase_deadline = 0;

static void search_tick(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
    if (!searchSettings.searchActive) return;
 80021ce:	4b1f      	ldr	r3, [pc, #124]	@ (800224c <search_tick+0x84>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	f083 0301 	eor.w	r3, r3, #1
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d131      	bne.n	8002240 <search_tick+0x78>

    uint32_t tnow = now_ms();
 80021dc:	f7ff fe9e 	bl	8001f1c <now_ms>
 80021e0:	6078      	str	r0, [r7, #4]
    if ((int32_t)(search_phase_deadline - tnow) > 0) return;
 80021e2:	4b1b      	ldr	r3, [pc, #108]	@ (8002250 <search_tick+0x88>)
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	dc2a      	bgt.n	8002244 <search_tick+0x7c>

    if (!search_in_test) {
 80021ee:	4b19      	ldr	r3, [pc, #100]	@ (8002254 <search_tick+0x8c>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	f083 0301 	eor.w	r3, r3, #1
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d010      	beq.n	800221e <search_tick+0x56>
        search_in_test = true;
 80021fc:	4b15      	ldr	r3, [pc, #84]	@ (8002254 <search_tick+0x8c>)
 80021fe:	2201      	movs	r2, #1
 8002200:	701a      	strb	r2, [r3, #0]
        motor_apply(true);
 8002202:	2001      	movs	r0, #1
 8002204:	f7ff fee6 	bl	8001fd4 <motor_apply>
        search_phase_deadline = tnow + (searchSettings.dryRunTimeSeconds * 1000UL);
 8002208:	4b10      	ldr	r3, [pc, #64]	@ (800224c <search_tick+0x84>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002210:	fb03 f202 	mul.w	r2, r3, r2
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4413      	add	r3, r2
 8002218:	4a0d      	ldr	r2, [pc, #52]	@ (8002250 <search_tick+0x88>)
 800221a:	6013      	str	r3, [r2, #0]
 800221c:	e013      	b.n	8002246 <search_tick+0x7e>
    } else {
        motor_apply(false);
 800221e:	2000      	movs	r0, #0
 8002220:	f7ff fed8 	bl	8001fd4 <motor_apply>
        search_in_test = false;
 8002224:	4b0b      	ldr	r3, [pc, #44]	@ (8002254 <search_tick+0x8c>)
 8002226:	2200      	movs	r2, #0
 8002228:	701a      	strb	r2, [r3, #0]
        search_phase_deadline = tnow + (searchSettings.testingGapSeconds * 1000UL);
 800222a:	4b08      	ldr	r3, [pc, #32]	@ (800224c <search_tick+0x84>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002232:	fb03 f202 	mul.w	r2, r3, r2
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4413      	add	r3, r2
 800223a:	4a05      	ldr	r2, [pc, #20]	@ (8002250 <search_tick+0x88>)
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	e002      	b.n	8002246 <search_tick+0x7e>
    if (!searchSettings.searchActive) return;
 8002240:	bf00      	nop
 8002242:	e000      	b.n	8002246 <search_tick+0x7e>
    if ((int32_t)(search_phase_deadline - tnow) > 0) return;
 8002244:	bf00      	nop
    }
}
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	2000001c 	.word	0x2000001c
 8002250:	20000370 	.word	0x20000370
 8002254:	2000036c 	.word	0x2000036c

08002258 <seconds_since_midnight>:

/* ===== Timer (daily window) ===== */
static uint32_t seconds_since_midnight(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
    /* TODO: replace with RTC if available */
    uint32_t ms = now_ms() % (24UL*3600UL*1000UL);
 800225e:	f7ff fe5d 	bl	8001f1c <now_ms>
 8002262:	4603      	mov	r3, r0
 8002264:	4a08      	ldr	r2, [pc, #32]	@ (8002288 <seconds_since_midnight+0x30>)
 8002266:	fba2 1203 	umull	r1, r2, r2, r3
 800226a:	0e12      	lsrs	r2, r2, #24
 800226c:	4907      	ldr	r1, [pc, #28]	@ (800228c <seconds_since_midnight+0x34>)
 800226e:	fb01 f202 	mul.w	r2, r1, r2
 8002272:	1a9b      	subs	r3, r3, r2
 8002274:	607b      	str	r3, [r7, #4]
    return ms / 1000UL;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a05      	ldr	r2, [pc, #20]	@ (8002290 <seconds_since_midnight+0x38>)
 800227a:	fba2 2303 	umull	r2, r3, r2, r3
 800227e:	099b      	lsrs	r3, r3, #6
}
 8002280:	4618      	mov	r0, r3
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	31b5d43b 	.word	0x31b5d43b
 800228c:	05265c00 	.word	0x05265c00
 8002290:	10624dd3 	.word	0x10624dd3

08002294 <timer_tick>:

static void timer_tick(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
    uint32_t nowS = seconds_since_midnight();
 800229a:	f7ff ffdd 	bl	8002258 <seconds_since_midnight>
 800229e:	6078      	str	r0, [r7, #4]

    for (int i = 0; i < 5; i++) {
 80022a0:	2300      	movs	r3, #0
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	e045      	b.n	8002332 <timer_tick+0x9e>
        TimerSlot* s = &timerSlots[i];
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	4613      	mov	r3, r2
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	4413      	add	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4a24      	ldr	r2, [pc, #144]	@ (8002344 <timer_tick+0xb0>)
 80022b2:	4413      	add	r3, r2
 80022b4:	603b      	str	r3, [r7, #0]
        if (!s->active) continue;
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	7a1b      	ldrb	r3, [r3, #8]
 80022ba:	f083 0301 	eor.w	r3, r3, #1
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d132      	bne.n	800232a <timer_tick+0x96>

        bool inWindow;
        if (s->onTimeSeconds <= s->offTimeSeconds) {
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d812      	bhi.n	80022f6 <timer_tick+0x62>
            inWindow = (nowS >= s->onTimeSeconds) && (nowS < s->offTimeSeconds);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d306      	bcc.n	80022e8 <timer_tick+0x54>
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d201      	bcs.n	80022e8 <timer_tick+0x54>
 80022e4:	2301      	movs	r3, #1
 80022e6:	e000      	b.n	80022ea <timer_tick+0x56>
 80022e8:	2300      	movs	r3, #0
 80022ea:	72fb      	strb	r3, [r7, #11]
 80022ec:	7afb      	ldrb	r3, [r7, #11]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	72fb      	strb	r3, [r7, #11]
 80022f4:	e011      	b.n	800231a <timer_tick+0x86>
        } else {
            inWindow = (nowS >= s->onTimeSeconds) || (nowS < s->offTimeSeconds);
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d204      	bcs.n	800230a <timer_tick+0x76>
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	429a      	cmp	r2, r3
 8002308:	d201      	bcs.n	800230e <timer_tick+0x7a>
 800230a:	2301      	movs	r3, #1
 800230c:	e000      	b.n	8002310 <timer_tick+0x7c>
 800230e:	2300      	movs	r3, #0
 8002310:	72fb      	strb	r3, [r7, #11]
 8002312:	7afb      	ldrb	r3, [r7, #11]
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	72fb      	strb	r3, [r7, #11]
        }

        if (i == 0) {
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d105      	bne.n	800232c <timer_tick+0x98>
            motor_apply(inWindow);
 8002320:	7afb      	ldrb	r3, [r7, #11]
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff fe56 	bl	8001fd4 <motor_apply>
 8002328:	e000      	b.n	800232c <timer_tick+0x98>
        if (!s->active) continue;
 800232a:	bf00      	nop
    for (int i = 0; i < 5; i++) {
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	3301      	adds	r3, #1
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2b04      	cmp	r3, #4
 8002336:	ddb6      	ble.n	80022a6 <timer_tick+0x12>
        }
    }
}
 8002338:	bf00      	nop
 800233a:	bf00      	nop
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	2000031c 	.word	0x2000031c

08002348 <protections_tick>:

/* ===== Protections ===== */
static void protections_tick(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
    if (senseDryRun && motorStatus == 1U) {
 800234c:	4b1c      	ldr	r3, [pc, #112]	@ (80023c0 <protections_tick+0x78>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d007      	beq.n	8002366 <protections_tick+0x1e>
 8002356:	4b1b      	ldr	r3, [pc, #108]	@ (80023c4 <protections_tick+0x7c>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b01      	cmp	r3, #1
 800235e:	d102      	bne.n	8002366 <protections_tick+0x1e>
        motor_apply(false);
 8002360:	2000      	movs	r0, #0
 8002362:	f7ff fe37 	bl	8001fd4 <motor_apply>
    }

    if (senseOverLoad && motorStatus == 1U) {
 8002366:	4b18      	ldr	r3, [pc, #96]	@ (80023c8 <protections_tick+0x80>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	b2db      	uxtb	r3, r3
 800236c:	2b00      	cmp	r3, #0
 800236e:	d007      	beq.n	8002380 <protections_tick+0x38>
 8002370:	4b14      	ldr	r3, [pc, #80]	@ (80023c4 <protections_tick+0x7c>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b01      	cmp	r3, #1
 8002378:	d102      	bne.n	8002380 <protections_tick+0x38>
        motor_apply(false);
 800237a:	2000      	movs	r0, #0
 800237c:	f7ff fe2a 	bl	8001fd4 <motor_apply>
    }

    if (senseOverUnderVolt) {
 8002380:	4b12      	ldr	r3, [pc, #72]	@ (80023cc <protections_tick+0x84>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d002      	beq.n	8002390 <protections_tick+0x48>
        motor_apply(false);
 800238a:	2000      	movs	r0, #0
 800238c:	f7ff fe22 	bl	8001fd4 <motor_apply>
    }

    if (maxRunTimerArmed && (now_ms() - maxRunStartTick) >= MAX_CONT_RUN_MS) {
 8002390:	4b0f      	ldr	r3, [pc, #60]	@ (80023d0 <protections_tick+0x88>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d011      	beq.n	80023bc <protections_tick+0x74>
 8002398:	f7ff fdc0 	bl	8001f1c <now_ms>
 800239c:	4602      	mov	r2, r0
 800239e:	4b0d      	ldr	r3, [pc, #52]	@ (80023d4 <protections_tick+0x8c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	4a0c      	ldr	r2, [pc, #48]	@ (80023d8 <protections_tick+0x90>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d308      	bcc.n	80023bc <protections_tick+0x74>
        motor_apply(false);
 80023aa:	2000      	movs	r0, #0
 80023ac:	f7ff fe12 	bl	8001fd4 <motor_apply>
        senseMaxRunReached = true;
 80023b0:	4b0a      	ldr	r3, [pc, #40]	@ (80023dc <protections_tick+0x94>)
 80023b2:	2201      	movs	r2, #1
 80023b4:	701a      	strb	r2, [r3, #0]
        maxRunTimerArmed = false;
 80023b6:	4b06      	ldr	r3, [pc, #24]	@ (80023d0 <protections_tick+0x88>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	701a      	strb	r2, [r3, #0]
    }
}
 80023bc:	bf00      	nop
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	20000358 	.word	0x20000358
 80023c4:	20000310 	.word	0x20000310
 80023c8:	20000359 	.word	0x20000359
 80023cc:	2000035a 	.word	0x2000035a
 80023d0:	2000035c 	.word	0x2000035c
 80023d4:	20000360 	.word	0x20000360
 80023d8:	006ddd00 	.word	0x006ddd00
 80023dc:	2000035b 	.word	0x2000035b

080023e0 <leds_from_model>:

/* ===== LED synthesis ===== */
static void leds_from_model(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
    LED_ClearAllIntents();
 80023e4:	f7fe fecc 	bl	8001180 <LED_ClearAllIntents>

    if (motorStatus == 1U) {
 80023e8:	4b24      	ldr	r3, [pc, #144]	@ (800247c <leds_from_model+0x9c>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d104      	bne.n	80023fc <leds_from_model+0x1c>
        LED_SetIntent(LED_COLOR_GREEN, LED_MODE_STEADY, 0);
 80023f2:	2200      	movs	r2, #0
 80023f4:	2101      	movs	r1, #1
 80023f6:	2000      	movs	r0, #0
 80023f8:	f7fe fee2 	bl	80011c0 <LED_SetIntent>
    }
    if (countdownActive && countdownMode) {
 80023fc:	4b20      	ldr	r3, [pc, #128]	@ (8002480 <leds_from_model+0xa0>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00a      	beq.n	800241c <leds_from_model+0x3c>
 8002406:	4b1f      	ldr	r3, [pc, #124]	@ (8002484 <leds_from_model+0xa4>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	b2db      	uxtb	r3, r3
 800240c:	2b00      	cmp	r3, #0
 800240e:	d005      	beq.n	800241c <leds_from_model+0x3c>
        LED_SetIntent(LED_COLOR_GREEN, LED_MODE_BLINK, 500);
 8002410:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002414:	2102      	movs	r1, #2
 8002416:	2000      	movs	r0, #0
 8002418:	f7fe fed2 	bl	80011c0 <LED_SetIntent>
    }
    if (senseDryRun) {
 800241c:	4b1a      	ldr	r3, [pc, #104]	@ (8002488 <leds_from_model+0xa8>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d004      	beq.n	8002430 <leds_from_model+0x50>
        LED_SetIntent(LED_COLOR_RED, LED_MODE_STEADY, 0);
 8002426:	2200      	movs	r2, #0
 8002428:	2101      	movs	r1, #1
 800242a:	2001      	movs	r0, #1
 800242c:	f7fe fec8 	bl	80011c0 <LED_SetIntent>
    }
    if (senseMaxRunReached) {
 8002430:	4b16      	ldr	r3, [pc, #88]	@ (800248c <leds_from_model+0xac>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d005      	beq.n	8002446 <leds_from_model+0x66>
        LED_SetIntent(LED_COLOR_RED, LED_MODE_BLINK, 400);
 800243a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800243e:	2102      	movs	r1, #2
 8002440:	2001      	movs	r0, #1
 8002442:	f7fe febd 	bl	80011c0 <LED_SetIntent>
    }
    if (senseOverLoad) {
 8002446:	4b12      	ldr	r3, [pc, #72]	@ (8002490 <leds_from_model+0xb0>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b00      	cmp	r3, #0
 800244e:	d005      	beq.n	800245c <leds_from_model+0x7c>
        LED_SetIntent(LED_COLOR_BLUE, LED_MODE_BLINK, 350);
 8002450:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8002454:	2102      	movs	r1, #2
 8002456:	2002      	movs	r0, #2
 8002458:	f7fe feb2 	bl	80011c0 <LED_SetIntent>
    }
    if (senseOverUnderVolt) {
 800245c:	4b0d      	ldr	r3, [pc, #52]	@ (8002494 <leds_from_model+0xb4>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d005      	beq.n	8002472 <leds_from_model+0x92>
        LED_SetIntent(LED_COLOR_PURPLE, LED_MODE_BLINK, 350);
 8002466:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800246a:	2102      	movs	r1, #2
 800246c:	2003      	movs	r0, #3
 800246e:	f7fe fea7 	bl	80011c0 <LED_SetIntent>
    }

    LED_ApplyIntents();
 8002472:	f7fe fec5 	bl	8001200 <LED_ApplyIntents>
}
 8002476:	bf00      	nop
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	20000310 	.word	0x20000310
 8002480:	20000311 	.word	0x20000311
 8002484:	20000019 	.word	0x20000019
 8002488:	20000358 	.word	0x20000358
 800248c:	2000035b 	.word	0x2000035b
 8002490:	20000359 	.word	0x20000359
 8002494:	2000035a 	.word	0x2000035a

08002498 <parse_mm_ss>:

/* ===== Helpers ===== */
static int parse_mm_ss(const char* p, uint8_t* mm, uint8_t* ss)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
    int m, s;
    if (sscanf(p, "%d:%d", &m, &s) == 2) {
 80024a4:	f107 0310 	add.w	r3, r7, #16
 80024a8:	f107 0214 	add.w	r2, r7, #20
 80024ac:	4914      	ldr	r1, [pc, #80]	@ (8002500 <parse_mm_ss+0x68>)
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f005 fe2c 	bl	800810c <siscanf>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d11d      	bne.n	80024f6 <parse_mm_ss+0x5e>
        if (m < 0) { m = 0; } if (m > 59) { m = 59; }
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	da01      	bge.n	80024c4 <parse_mm_ss+0x2c>
 80024c0:	2300      	movs	r3, #0
 80024c2:	617b      	str	r3, [r7, #20]
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	2b3b      	cmp	r3, #59	@ 0x3b
 80024c8:	dd01      	ble.n	80024ce <parse_mm_ss+0x36>
 80024ca:	233b      	movs	r3, #59	@ 0x3b
 80024cc:	617b      	str	r3, [r7, #20]
        if (s < 0) { s = 0; } if (s > 59) { s = 59; }
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	da01      	bge.n	80024d8 <parse_mm_ss+0x40>
 80024d4:	2300      	movs	r3, #0
 80024d6:	613b      	str	r3, [r7, #16]
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	2b3b      	cmp	r3, #59	@ 0x3b
 80024dc:	dd01      	ble.n	80024e2 <parse_mm_ss+0x4a>
 80024de:	233b      	movs	r3, #59	@ 0x3b
 80024e0:	613b      	str	r3, [r7, #16]
        *mm = (uint8_t)m; *ss = (uint8_t)s;
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	701a      	strb	r2, [r3, #0]
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	701a      	strb	r2, [r3, #0]
        return 1;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e000      	b.n	80024f8 <parse_mm_ss+0x60>
    }
    return 0;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3718      	adds	r7, #24
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	08009724 	.word	0x08009724

08002504 <ModelHandle_ProcessUartCommand>:

/* ===== Command parser (from LCD/UI or serial) ===== */
void ModelHandle_ProcessUartCommand(const char* cmd)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b08a      	sub	sp, #40	@ 0x28
 8002508:	af02      	add	r7, sp, #8
 800250a:	6078      	str	r0, [r7, #4]
    if (!cmd || !*cmd) return;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 815f 	beq.w	80027d2 <ModelHandle_ProcessUartCommand+0x2ce>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 815a 	beq.w	80027d2 <ModelHandle_ProcessUartCommand+0x2ce>

    if (strcmp(cmd, "MOTOR_ON") == 0) {
 800251e:	49af      	ldr	r1, [pc, #700]	@ (80027dc <ModelHandle_ProcessUartCommand+0x2d8>)
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f7fd fe13 	bl	800014c <strcmp>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d103      	bne.n	8002534 <ModelHandle_ProcessUartCommand+0x30>
        motor_apply(true);
 800252c:	2001      	movs	r0, #1
 800252e:	f7ff fd51 	bl	8001fd4 <motor_apply>
 8002532:	e14f      	b.n	80027d4 <ModelHandle_ProcessUartCommand+0x2d0>
    }
    else if (strcmp(cmd, "MOTOR_OFF") == 0) {
 8002534:	49aa      	ldr	r1, [pc, #680]	@ (80027e0 <ModelHandle_ProcessUartCommand+0x2dc>)
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7fd fe08 	bl	800014c <strcmp>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d103      	bne.n	800254a <ModelHandle_ProcessUartCommand+0x46>
        motor_apply(false);
 8002542:	2000      	movs	r0, #0
 8002544:	f7ff fd46 	bl	8001fd4 <motor_apply>
 8002548:	e144      	b.n	80027d4 <ModelHandle_ProcessUartCommand+0x2d0>
    }
    else if (strncmp(cmd, "COUNTDOWN_ON:", 13) == 0) {
 800254a:	220d      	movs	r2, #13
 800254c:	49a5      	ldr	r1, [pc, #660]	@ (80027e4 <ModelHandle_ProcessUartCommand+0x2e0>)
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f005 fe12 	bl	8008178 <strncmp>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d11b      	bne.n	8002592 <ModelHandle_ProcessUartCommand+0x8e>
        int minutes = atoi(cmd + 13);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	330d      	adds	r3, #13
 800255e:	4618      	mov	r0, r3
 8002560:	f005 fcf2 	bl	8007f48 <atoi>
 8002564:	61f8      	str	r0, [r7, #28]
        if (minutes < 0) minutes = 0;
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	2b00      	cmp	r3, #0
 800256a:	da01      	bge.n	8002570 <ModelHandle_ProcessUartCommand+0x6c>
 800256c:	2300      	movs	r3, #0
 800256e:	61fb      	str	r3, [r7, #28]
        if (minutes > 600) minutes = 600;
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8002576:	dd02      	ble.n	800257e <ModelHandle_ProcessUartCommand+0x7a>
 8002578:	f44f 7316 	mov.w	r3, #600	@ 0x258
 800257c:	61fb      	str	r3, [r7, #28]
        countdown_start(true, (uint32_t)minutes * 60UL);
 800257e:	69fa      	ldr	r2, [r7, #28]
 8002580:	4613      	mov	r3, r2
 8002582:	011b      	lsls	r3, r3, #4
 8002584:	1a9b      	subs	r3, r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	4619      	mov	r1, r3
 800258a:	2001      	movs	r0, #1
 800258c:	f7ff fd54 	bl	8002038 <countdown_start>
 8002590:	e120      	b.n	80027d4 <ModelHandle_ProcessUartCommand+0x2d0>
    }
    else if (strncmp(cmd, "COUNTDOWN_OFF:", 14) == 0) {
 8002592:	220e      	movs	r2, #14
 8002594:	4994      	ldr	r1, [pc, #592]	@ (80027e8 <ModelHandle_ProcessUartCommand+0x2e4>)
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f005 fdee 	bl	8008178 <strncmp>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d11b      	bne.n	80025da <ModelHandle_ProcessUartCommand+0xd6>
        int minutes = atoi(cmd + 14);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	330e      	adds	r3, #14
 80025a6:	4618      	mov	r0, r3
 80025a8:	f005 fcce 	bl	8007f48 <atoi>
 80025ac:	61b8      	str	r0, [r7, #24]
        if (minutes < 0) minutes = 0;
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	da01      	bge.n	80025b8 <ModelHandle_ProcessUartCommand+0xb4>
 80025b4:	2300      	movs	r3, #0
 80025b6:	61bb      	str	r3, [r7, #24]
        if (minutes > 600) minutes = 600;
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 80025be:	dd02      	ble.n	80025c6 <ModelHandle_ProcessUartCommand+0xc2>
 80025c0:	f44f 7316 	mov.w	r3, #600	@ 0x258
 80025c4:	61bb      	str	r3, [r7, #24]
        countdown_start(false, (uint32_t)minutes * 60UL);
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4613      	mov	r3, r2
 80025ca:	011b      	lsls	r3, r3, #4
 80025cc:	1a9b      	subs	r3, r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4619      	mov	r1, r3
 80025d2:	2000      	movs	r0, #0
 80025d4:	f7ff fd30 	bl	8002038 <countdown_start>
 80025d8:	e0fc      	b.n	80027d4 <ModelHandle_ProcessUartCommand+0x2d0>
    }
    else if (strncmp(cmd, "TIMER_SET:1:", 12) == 0) {
 80025da:	220c      	movs	r2, #12
 80025dc:	4983      	ldr	r1, [pc, #524]	@ (80027ec <ModelHandle_ProcessUartCommand+0x2e8>)
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f005 fdca 	bl	8008178 <strncmp>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d136      	bne.n	8002658 <ModelHandle_ProcessUartCommand+0x154>
        uint8_t onH=0,onM=0,offH=0,offM=0;
 80025ea:	2300      	movs	r3, #0
 80025ec:	74fb      	strb	r3, [r7, #19]
 80025ee:	2300      	movs	r3, #0
 80025f0:	74bb      	strb	r3, [r7, #18]
 80025f2:	2300      	movs	r3, #0
 80025f4:	747b      	strb	r3, [r7, #17]
 80025f6:	2300      	movs	r3, #0
 80025f8:	743b      	strb	r3, [r7, #16]
        const char* p = cmd + 12;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	330c      	adds	r3, #12
 80025fe:	617b      	str	r3, [r7, #20]
        if (sscanf(p, "%hhu:%hhu:%hhu:%hhu", &onH,&onM,&offH,&offM) == 4) {
 8002600:	f107 0112 	add.w	r1, r7, #18
 8002604:	f107 0213 	add.w	r2, r7, #19
 8002608:	f107 0310 	add.w	r3, r7, #16
 800260c:	9301      	str	r3, [sp, #4]
 800260e:	f107 0311 	add.w	r3, r7, #17
 8002612:	9300      	str	r3, [sp, #0]
 8002614:	460b      	mov	r3, r1
 8002616:	4976      	ldr	r1, [pc, #472]	@ (80027f0 <ModelHandle_ProcessUartCommand+0x2ec>)
 8002618:	6978      	ldr	r0, [r7, #20]
 800261a:	f005 fd77 	bl	800810c <siscanf>
 800261e:	4603      	mov	r3, r0
 8002620:	2b04      	cmp	r3, #4
 8002622:	f040 80d7 	bne.w	80027d4 <ModelHandle_ProcessUartCommand+0x2d0>
            timerSlots[0].onTimeSeconds  = ModelHandle_TimeToSeconds(onH,onM);
 8002626:	7cfb      	ldrb	r3, [r7, #19]
 8002628:	7cba      	ldrb	r2, [r7, #18]
 800262a:	4611      	mov	r1, r2
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff fc7c 	bl	8001f2a <ModelHandle_TimeToSeconds>
 8002632:	4603      	mov	r3, r0
 8002634:	4a6f      	ldr	r2, [pc, #444]	@ (80027f4 <ModelHandle_ProcessUartCommand+0x2f0>)
 8002636:	6013      	str	r3, [r2, #0]
            timerSlots[0].offTimeSeconds = ModelHandle_TimeToSeconds(offH,offM);
 8002638:	7c7b      	ldrb	r3, [r7, #17]
 800263a:	7c3a      	ldrb	r2, [r7, #16]
 800263c:	4611      	mov	r1, r2
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff fc73 	bl	8001f2a <ModelHandle_TimeToSeconds>
 8002644:	4603      	mov	r3, r0
 8002646:	4a6b      	ldr	r2, [pc, #428]	@ (80027f4 <ModelHandle_ProcessUartCommand+0x2f0>)
 8002648:	6053      	str	r3, [r2, #4]
            timerSlots[0].active = true;
 800264a:	4b6a      	ldr	r3, [pc, #424]	@ (80027f4 <ModelHandle_ProcessUartCommand+0x2f0>)
 800264c:	2201      	movs	r2, #1
 800264e:	721a      	strb	r2, [r3, #8]
            timerSlots[0].executedToday = false;
 8002650:	4b68      	ldr	r3, [pc, #416]	@ (80027f4 <ModelHandle_ProcessUartCommand+0x2f0>)
 8002652:	2200      	movs	r2, #0
 8002654:	725a      	strb	r2, [r3, #9]
 8002656:	e0bd      	b.n	80027d4 <ModelHandle_ProcessUartCommand+0x2d0>
        }
    }
    else if (strncmp(cmd, "SEARCH_GAP:", 11) == 0) {
 8002658:	220b      	movs	r2, #11
 800265a:	4967      	ldr	r1, [pc, #412]	@ (80027f8 <ModelHandle_ProcessUartCommand+0x2f4>)
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f005 fd8b 	bl	8008178 <strncmp>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d11b      	bne.n	80026a0 <ModelHandle_ProcessUartCommand+0x19c>
        uint8_t mm, ss;
        if (parse_mm_ss(cmd + 11, &mm, &ss)) {
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	330b      	adds	r3, #11
 800266c:	f107 020e 	add.w	r2, r7, #14
 8002670:	f107 010f 	add.w	r1, r7, #15
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff ff0f 	bl	8002498 <parse_mm_ss>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 80a9 	beq.w	80027d4 <ModelHandle_ProcessUartCommand+0x2d0>
            searchSettings.testingGapSeconds = (uint32_t)mm*60UL + (uint32_t)ss;
 8002682:	7bfb      	ldrb	r3, [r7, #15]
 8002684:	461a      	mov	r2, r3
 8002686:	4613      	mov	r3, r2
 8002688:	011b      	lsls	r3, r3, #4
 800268a:	1a9b      	subs	r3, r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	461a      	mov	r2, r3
 8002690:	7bbb      	ldrb	r3, [r7, #14]
 8002692:	4413      	add	r3, r2
 8002694:	4a59      	ldr	r2, [pc, #356]	@ (80027fc <ModelHandle_ProcessUartCommand+0x2f8>)
 8002696:	6053      	str	r3, [r2, #4]
            searchSettings.searchActive = true;
 8002698:	4b58      	ldr	r3, [pc, #352]	@ (80027fc <ModelHandle_ProcessUartCommand+0x2f8>)
 800269a:	2201      	movs	r2, #1
 800269c:	701a      	strb	r2, [r3, #0]
 800269e:	e099      	b.n	80027d4 <ModelHandle_ProcessUartCommand+0x2d0>
        }
    }
    else if (strncmp(cmd, "SEARCH_DRYRUN:", 14) == 0) {
 80026a0:	220e      	movs	r2, #14
 80026a2:	4957      	ldr	r1, [pc, #348]	@ (8002800 <ModelHandle_ProcessUartCommand+0x2fc>)
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f005 fd67 	bl	8008178 <strncmp>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d11b      	bne.n	80026e8 <ModelHandle_ProcessUartCommand+0x1e4>
        uint8_t mm, ss;
        if (parse_mm_ss(cmd + 14, &mm, &ss)) {
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	330e      	adds	r3, #14
 80026b4:	f107 020c 	add.w	r2, r7, #12
 80026b8:	f107 010d 	add.w	r1, r7, #13
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff feeb 	bl	8002498 <parse_mm_ss>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 8085 	beq.w	80027d4 <ModelHandle_ProcessUartCommand+0x2d0>
            searchSettings.dryRunTimeSeconds = (uint32_t)mm*60UL + (uint32_t)ss;
 80026ca:	7b7b      	ldrb	r3, [r7, #13]
 80026cc:	461a      	mov	r2, r3
 80026ce:	4613      	mov	r3, r2
 80026d0:	011b      	lsls	r3, r3, #4
 80026d2:	1a9b      	subs	r3, r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	461a      	mov	r2, r3
 80026d8:	7b3b      	ldrb	r3, [r7, #12]
 80026da:	4413      	add	r3, r2
 80026dc:	4a47      	ldr	r2, [pc, #284]	@ (80027fc <ModelHandle_ProcessUartCommand+0x2f8>)
 80026de:	6093      	str	r3, [r2, #8]
            searchSettings.searchActive = true;
 80026e0:	4b46      	ldr	r3, [pc, #280]	@ (80027fc <ModelHandle_ProcessUartCommand+0x2f8>)
 80026e2:	2201      	movs	r2, #1
 80026e4:	701a      	strb	r2, [r3, #0]
 80026e6:	e075      	b.n	80027d4 <ModelHandle_ProcessUartCommand+0x2d0>
        }
    }
    else if (strncmp(cmd, "TWIST_ONDUR:", 12) == 0) {
 80026e8:	220c      	movs	r2, #12
 80026ea:	4946      	ldr	r1, [pc, #280]	@ (8002804 <ModelHandle_ProcessUartCommand+0x300>)
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f005 fd43 	bl	8008178 <strncmp>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d122      	bne.n	800273e <ModelHandle_ProcessUartCommand+0x23a>
        uint8_t mm, ss;
        if (parse_mm_ss(cmd + 12, &mm, &ss)) {
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	330c      	adds	r3, #12
 80026fc:	f107 020a 	add.w	r2, r7, #10
 8002700:	f107 010b 	add.w	r1, r7, #11
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff fec7 	bl	8002498 <parse_mm_ss>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d061      	beq.n	80027d4 <ModelHandle_ProcessUartCommand+0x2d0>
            twistSettings.onDurationSeconds = (uint32_t)mm*60UL + (uint32_t)ss;
 8002710:	7afb      	ldrb	r3, [r7, #11]
 8002712:	461a      	mov	r2, r3
 8002714:	4613      	mov	r3, r2
 8002716:	011b      	lsls	r3, r3, #4
 8002718:	1a9b      	subs	r3, r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	461a      	mov	r2, r3
 800271e:	7abb      	ldrb	r3, [r7, #10]
 8002720:	4413      	add	r3, r2
 8002722:	4a39      	ldr	r2, [pc, #228]	@ (8002808 <ModelHandle_ProcessUartCommand+0x304>)
 8002724:	6053      	str	r3, [r2, #4]
            twistSettings.twistActive = true;
 8002726:	4b38      	ldr	r3, [pc, #224]	@ (8002808 <ModelHandle_ProcessUartCommand+0x304>)
 8002728:	2201      	movs	r2, #1
 800272a:	701a      	strb	r2, [r3, #0]
            twist_on_phase = false;
 800272c:	4b37      	ldr	r3, [pc, #220]	@ (800280c <ModelHandle_ProcessUartCommand+0x308>)
 800272e:	2200      	movs	r2, #0
 8002730:	701a      	strb	r2, [r3, #0]
            twist_phase_deadline = now_ms();
 8002732:	f7ff fbf3 	bl	8001f1c <now_ms>
 8002736:	4603      	mov	r3, r0
 8002738:	4a35      	ldr	r2, [pc, #212]	@ (8002810 <ModelHandle_ProcessUartCommand+0x30c>)
 800273a:	6013      	str	r3, [r2, #0]
 800273c:	e04a      	b.n	80027d4 <ModelHandle_ProcessUartCommand+0x2d0>
        }
    }
    else if (strncmp(cmd, "TWIST_OFFDUR:", 13) == 0) {
 800273e:	220d      	movs	r2, #13
 8002740:	4934      	ldr	r1, [pc, #208]	@ (8002814 <ModelHandle_ProcessUartCommand+0x310>)
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f005 fd18 	bl	8008178 <strncmp>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d122      	bne.n	8002794 <ModelHandle_ProcessUartCommand+0x290>
        uint8_t mm, ss;
        if (parse_mm_ss(cmd + 13, &mm, &ss)) {
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	330d      	adds	r3, #13
 8002752:	f107 0208 	add.w	r2, r7, #8
 8002756:	f107 0109 	add.w	r1, r7, #9
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff fe9c 	bl	8002498 <parse_mm_ss>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d036      	beq.n	80027d4 <ModelHandle_ProcessUartCommand+0x2d0>
            twistSettings.offDurationSeconds = (uint32_t)mm*60UL + (uint32_t)ss;
 8002766:	7a7b      	ldrb	r3, [r7, #9]
 8002768:	461a      	mov	r2, r3
 800276a:	4613      	mov	r3, r2
 800276c:	011b      	lsls	r3, r3, #4
 800276e:	1a9b      	subs	r3, r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	461a      	mov	r2, r3
 8002774:	7a3b      	ldrb	r3, [r7, #8]
 8002776:	4413      	add	r3, r2
 8002778:	4a23      	ldr	r2, [pc, #140]	@ (8002808 <ModelHandle_ProcessUartCommand+0x304>)
 800277a:	6093      	str	r3, [r2, #8]
            twistSettings.twistActive = true;
 800277c:	4b22      	ldr	r3, [pc, #136]	@ (8002808 <ModelHandle_ProcessUartCommand+0x304>)
 800277e:	2201      	movs	r2, #1
 8002780:	701a      	strb	r2, [r3, #0]
            twist_on_phase = false;
 8002782:	4b22      	ldr	r3, [pc, #136]	@ (800280c <ModelHandle_ProcessUartCommand+0x308>)
 8002784:	2200      	movs	r2, #0
 8002786:	701a      	strb	r2, [r3, #0]
            twist_phase_deadline = now_ms();
 8002788:	f7ff fbc8 	bl	8001f1c <now_ms>
 800278c:	4603      	mov	r3, r0
 800278e:	4a20      	ldr	r2, [pc, #128]	@ (8002810 <ModelHandle_ProcessUartCommand+0x30c>)
 8002790:	6013      	str	r3, [r2, #0]
 8002792:	e01f      	b.n	80027d4 <ModelHandle_ProcessUartCommand+0x2d0>
        }
    }
    else if (strcmp(cmd, "TWIST_OFF") == 0) {
 8002794:	4920      	ldr	r1, [pc, #128]	@ (8002818 <ModelHandle_ProcessUartCommand+0x314>)
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7fd fcd8 	bl	800014c <strcmp>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d106      	bne.n	80027b0 <ModelHandle_ProcessUartCommand+0x2ac>
        twistSettings.twistActive = false;
 80027a2:	4b19      	ldr	r3, [pc, #100]	@ (8002808 <ModelHandle_ProcessUartCommand+0x304>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	701a      	strb	r2, [r3, #0]
        motor_apply(false);
 80027a8:	2000      	movs	r0, #0
 80027aa:	f7ff fc13 	bl	8001fd4 <motor_apply>
 80027ae:	e011      	b.n	80027d4 <ModelHandle_ProcessUartCommand+0x2d0>
    }
    else if (strcmp(cmd, "SEARCH_OFF") == 0) {
 80027b0:	491a      	ldr	r1, [pc, #104]	@ (800281c <ModelHandle_ProcessUartCommand+0x318>)
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f7fd fcca 	bl	800014c <strcmp>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10a      	bne.n	80027d4 <ModelHandle_ProcessUartCommand+0x2d0>
        searchSettings.searchActive = false;
 80027be:	4b0f      	ldr	r3, [pc, #60]	@ (80027fc <ModelHandle_ProcessUartCommand+0x2f8>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	701a      	strb	r2, [r3, #0]
        search_in_test = false;
 80027c4:	4b16      	ldr	r3, [pc, #88]	@ (8002820 <ModelHandle_ProcessUartCommand+0x31c>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	701a      	strb	r2, [r3, #0]
        motor_apply(false);
 80027ca:	2000      	movs	r0, #0
 80027cc:	f7ff fc02 	bl	8001fd4 <motor_apply>
 80027d0:	e000      	b.n	80027d4 <ModelHandle_ProcessUartCommand+0x2d0>
    if (!cmd || !*cmd) return;
 80027d2:	bf00      	nop
    }
}
 80027d4:	3720      	adds	r7, #32
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	0800972c 	.word	0x0800972c
 80027e0:	08009738 	.word	0x08009738
 80027e4:	08009744 	.word	0x08009744
 80027e8:	08009754 	.word	0x08009754
 80027ec:	08009764 	.word	0x08009764
 80027f0:	08009774 	.word	0x08009774
 80027f4:	2000031c 	.word	0x2000031c
 80027f8:	08009788 	.word	0x08009788
 80027fc:	2000001c 	.word	0x2000001c
 8002800:	08009794 	.word	0x08009794
 8002804:	080097a4 	.word	0x080097a4
 8002808:	20000028 	.word	0x20000028
 800280c:	20000364 	.word	0x20000364
 8002810:	20000368 	.word	0x20000368
 8002814:	080097b4 	.word	0x080097b4
 8002818:	080097c4 	.word	0x080097c4
 800281c:	080097d0 	.word	0x080097d0
 8002820:	2000036c 	.word	0x2000036c

08002824 <ModelHandle_Process>:
void ModelHandle_SetOverUnderVolt(bool on) { senseOverUnderVolt = on; }
void ModelHandle_ClearMaxRunFlag(void)     { senseMaxRunReached = false; }

/* ===== Main tick ===== */
void ModelHandle_Process(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
    countdown_tick();
 8002828:	f7ff fc3c 	bl	80020a4 <countdown_tick>
    twist_tick();
 800282c:	f7ff fc7e 	bl	800212c <twist_tick>
    search_tick();
 8002830:	f7ff fcca 	bl	80021c8 <search_tick>
    timer_tick();
 8002834:	f7ff fd2e 	bl	8002294 <timer_tick>
    protections_tick();
 8002838:	f7ff fd86 	bl	8002348 <protections_tick>
    leds_from_model();
 800283c:	f7ff fdd0 	bl	80023e0 <leds_from_model>
}
 8002840:	bf00      	nop
 8002842:	bd80      	pop	{r7, pc}

08002844 <Motor_GetStatus>:

/* ===== UI helper ===== */
bool Motor_GetStatus(void) { return (motorStatus == 1U); }
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
 8002848:	4b05      	ldr	r3, [pc, #20]	@ (8002860 <Motor_GetStatus+0x1c>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b01      	cmp	r3, #1
 8002850:	bf0c      	ite	eq
 8002852:	2301      	moveq	r3, #1
 8002854:	2300      	movne	r3, #0
 8002856:	b2db      	uxtb	r3, r3
 8002858:	4618      	mov	r0, r3
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr
 8002860:	20000310 	.word	0x20000310

08002864 <Relay_Set>:
    /* Ensure off on start (change if your relay is active-low) */
    HAL_GPIO_WritePin(Relay1_GPIO_Port, Relay1_Pin|Relay2_Pin|Relay3_Pin, GPIO_PIN_RESET);
}

void Relay_Set(uint8_t relay_no, bool on)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	4603      	mov	r3, r0
 800286c:	460a      	mov	r2, r1
 800286e:	71fb      	strb	r3, [r7, #7]
 8002870:	4613      	mov	r3, r2
 8002872:	71bb      	strb	r3, [r7, #6]
    switch (relay_no) {
 8002874:	79fb      	ldrb	r3, [r7, #7]
 8002876:	2b03      	cmp	r3, #3
 8002878:	d014      	beq.n	80028a4 <Relay_Set+0x40>
 800287a:	2b03      	cmp	r3, #3
 800287c:	dc19      	bgt.n	80028b2 <Relay_Set+0x4e>
 800287e:	2b01      	cmp	r3, #1
 8002880:	d002      	beq.n	8002888 <Relay_Set+0x24>
 8002882:	2b02      	cmp	r3, #2
 8002884:	d007      	beq.n	8002896 <Relay_Set+0x32>
        case 1: HAL_GPIO_WritePin(Relay1_GPIO_Port, Relay1_Pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET); break;
        case 2: HAL_GPIO_WritePin(Relay2_GPIO_Port, Relay2_Pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET); break;
        case 3: HAL_GPIO_WritePin(Relay3_GPIO_Port, Relay3_Pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET); break;
        default: break;
 8002886:	e014      	b.n	80028b2 <Relay_Set+0x4e>
        case 1: HAL_GPIO_WritePin(Relay1_GPIO_Port, Relay1_Pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET); break;
 8002888:	79bb      	ldrb	r3, [r7, #6]
 800288a:	461a      	mov	r2, r3
 800288c:	2101      	movs	r1, #1
 800288e:	480b      	ldr	r0, [pc, #44]	@ (80028bc <Relay_Set+0x58>)
 8002890:	f002 fbe9 	bl	8005066 <HAL_GPIO_WritePin>
 8002894:	e00e      	b.n	80028b4 <Relay_Set+0x50>
        case 2: HAL_GPIO_WritePin(Relay2_GPIO_Port, Relay2_Pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET); break;
 8002896:	79bb      	ldrb	r3, [r7, #6]
 8002898:	461a      	mov	r2, r3
 800289a:	2102      	movs	r1, #2
 800289c:	4807      	ldr	r0, [pc, #28]	@ (80028bc <Relay_Set+0x58>)
 800289e:	f002 fbe2 	bl	8005066 <HAL_GPIO_WritePin>
 80028a2:	e007      	b.n	80028b4 <Relay_Set+0x50>
        case 3: HAL_GPIO_WritePin(Relay3_GPIO_Port, Relay3_Pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET); break;
 80028a4:	79bb      	ldrb	r3, [r7, #6]
 80028a6:	461a      	mov	r2, r3
 80028a8:	2104      	movs	r1, #4
 80028aa:	4804      	ldr	r0, [pc, #16]	@ (80028bc <Relay_Set+0x58>)
 80028ac:	f002 fbdb 	bl	8005066 <HAL_GPIO_WritePin>
 80028b0:	e000      	b.n	80028b4 <Relay_Set+0x50>
        default: break;
 80028b2:	bf00      	nop
    }
}
 80028b4:	bf00      	nop
 80028b6:	3708      	adds	r7, #8
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40010c00 	.word	0x40010c00

080028c0 <Relay_All>:
    }
    return (s == GPIO_PIN_SET);
}

void Relay_All(bool on)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	4603      	mov	r3, r0
 80028c8:	71fb      	strb	r3, [r7, #7]
    Relay_Set(1, on);
 80028ca:	79fb      	ldrb	r3, [r7, #7]
 80028cc:	4619      	mov	r1, r3
 80028ce:	2001      	movs	r0, #1
 80028d0:	f7ff ffc8 	bl	8002864 <Relay_Set>
    Relay_Set(2, on);
 80028d4:	79fb      	ldrb	r3, [r7, #7]
 80028d6:	4619      	mov	r1, r3
 80028d8:	2002      	movs	r0, #2
 80028da:	f7ff ffc3 	bl	8002864 <Relay_Set>
    Relay_Set(3, on);
 80028de:	79fb      	ldrb	r3, [r7, #7]
 80028e0:	4619      	mov	r1, r3
 80028e2:	2003      	movs	r0, #3
 80028e4:	f7ff ffbe 	bl	8002864 <Relay_Set>
}
 80028e8:	bf00      	nop
 80028ea:	3708      	adds	r7, #8
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <bcdToDec>:

uint8_t decToBcd(int val) {
    return (uint8_t)((val / 10 * 16) + (val % 10));
}

int bcdToDec(uint8_t val) {
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	4603      	mov	r3, r0
 80028f8:	71fb      	strb	r3, [r7, #7]
    return (int)((val / 16 * 10) + (val % 16));
 80028fa:	79fb      	ldrb	r3, [r7, #7]
 80028fc:	091b      	lsrs	r3, r3, #4
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	461a      	mov	r2, r3
 8002902:	4613      	mov	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	461a      	mov	r2, r3
 800290c:	79fb      	ldrb	r3, [r7, #7]
 800290e:	f003 030f 	and.w	r3, r3, #15
 8002912:	4413      	add	r3, r2
}
 8002914:	4618      	mov	r0, r3
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	bc80      	pop	{r7}
 800291c:	4770      	bx	lr
	...

08002920 <Get_Time>:
        sprintf(err, "RTC Set Error: %lu\r\n", HAL_I2C_GetError(&hi2c2));
        Debug_Print(err);
    }
}

void Get_Time(void) {
 8002920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002922:	b0a5      	sub	sp, #148	@ 0x94
 8002924:	af06      	add	r7, sp, #24
    uint8_t get_time[7];

    if (HAL_I2C_Mem_Read(&hi2c2, DS3231_ADDRESS, 0x00,
 8002926:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800292a:	9302      	str	r3, [sp, #8]
 800292c:	2307      	movs	r3, #7
 800292e:	9301      	str	r3, [sp, #4]
 8002930:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	2301      	movs	r3, #1
 8002938:	2200      	movs	r2, #0
 800293a:	21d0      	movs	r1, #208	@ 0xd0
 800293c:	4849      	ldr	r0, [pc, #292]	@ (8002a64 <Get_Time+0x144>)
 800293e:	f002 fded 	bl	800551c <HAL_I2C_Mem_Read>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d028      	beq.n	800299a <Get_Time+0x7a>
                         I2C_MEMADD_SIZE_8BIT, get_time, 7, 1000) != HAL_OK) {
        char err[50];
        sprintf(err, "RTC Read Error: %lu\r\n", HAL_I2C_GetError(&hi2c2));
 8002948:	4846      	ldr	r0, [pc, #280]	@ (8002a64 <Get_Time+0x144>)
 800294a:	f003 f989 	bl	8005c60 <HAL_I2C_GetError>
 800294e:	4602      	mov	r2, r0
 8002950:	463b      	mov	r3, r7
 8002952:	4945      	ldr	r1, [pc, #276]	@ (8002a68 <Get_Time+0x148>)
 8002954:	4618      	mov	r0, r3
 8002956:	f005 fbb7 	bl	80080c8 <siprintf>
        Debug_Print(err);
 800295a:	463b      	mov	r3, r7
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff f853 	bl	8001a08 <Debug_Print>

        time.seconds = time.minutes = time.hour =
        time.dayofweek = time.dayofmonth =
        time.month = time.year = 0xFF;
 8002962:	4b42      	ldr	r3, [pc, #264]	@ (8002a6c <Get_Time+0x14c>)
 8002964:	22ff      	movs	r2, #255	@ 0xff
 8002966:	719a      	strb	r2, [r3, #6]
 8002968:	4b40      	ldr	r3, [pc, #256]	@ (8002a6c <Get_Time+0x14c>)
 800296a:	799a      	ldrb	r2, [r3, #6]
 800296c:	4b3f      	ldr	r3, [pc, #252]	@ (8002a6c <Get_Time+0x14c>)
 800296e:	715a      	strb	r2, [r3, #5]
 8002970:	4b3e      	ldr	r3, [pc, #248]	@ (8002a6c <Get_Time+0x14c>)
 8002972:	795a      	ldrb	r2, [r3, #5]
        time.dayofweek = time.dayofmonth =
 8002974:	4b3d      	ldr	r3, [pc, #244]	@ (8002a6c <Get_Time+0x14c>)
 8002976:	711a      	strb	r2, [r3, #4]
 8002978:	4b3c      	ldr	r3, [pc, #240]	@ (8002a6c <Get_Time+0x14c>)
 800297a:	791a      	ldrb	r2, [r3, #4]
 800297c:	4b3b      	ldr	r3, [pc, #236]	@ (8002a6c <Get_Time+0x14c>)
 800297e:	70da      	strb	r2, [r3, #3]
 8002980:	4b3a      	ldr	r3, [pc, #232]	@ (8002a6c <Get_Time+0x14c>)
 8002982:	78da      	ldrb	r2, [r3, #3]
        time.seconds = time.minutes = time.hour =
 8002984:	4b39      	ldr	r3, [pc, #228]	@ (8002a6c <Get_Time+0x14c>)
 8002986:	709a      	strb	r2, [r3, #2]
 8002988:	4b38      	ldr	r3, [pc, #224]	@ (8002a6c <Get_Time+0x14c>)
 800298a:	789a      	ldrb	r2, [r3, #2]
 800298c:	4b37      	ldr	r3, [pc, #220]	@ (8002a6c <Get_Time+0x14c>)
 800298e:	705a      	strb	r2, [r3, #1]
 8002990:	4b36      	ldr	r3, [pc, #216]	@ (8002a6c <Get_Time+0x14c>)
 8002992:	785a      	ldrb	r2, [r3, #1]
 8002994:	4b35      	ldr	r3, [pc, #212]	@ (8002a6c <Get_Time+0x14c>)
 8002996:	701a      	strb	r2, [r3, #0]
 8002998:	e061      	b.n	8002a5e <Get_Time+0x13e>
        return;
    }

    char dbg[60];
    sprintf(dbg, "Raw RTC Data: %02X %02X %02X %02X %02X %02X %02X\r\n",
            get_time[0], get_time[1], get_time[2],
 800299a:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
    sprintf(dbg, "Raw RTC Data: %02X %02X %02X %02X %02X %02X %02X\r\n",
 800299e:	461e      	mov	r6, r3
            get_time[0], get_time[1], get_time[2],
 80029a0:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
    sprintf(dbg, "Raw RTC Data: %02X %02X %02X %02X %02X %02X %02X\r\n",
 80029a4:	469c      	mov	ip, r3
            get_time[0], get_time[1], get_time[2],
 80029a6:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
            get_time[3], get_time[4], get_time[5], get_time[6]);
 80029aa:	f897 2073 	ldrb.w	r2, [r7, #115]	@ 0x73
 80029ae:	f897 1074 	ldrb.w	r1, [r7, #116]	@ 0x74
 80029b2:	f897 0075 	ldrb.w	r0, [r7, #117]	@ 0x75
    sprintf(dbg, "Raw RTC Data: %02X %02X %02X %02X %02X %02X %02X\r\n",
 80029b6:	4604      	mov	r4, r0
            get_time[3], get_time[4], get_time[5], get_time[6]);
 80029b8:	f897 0076 	ldrb.w	r0, [r7, #118]	@ 0x76
    sprintf(dbg, "Raw RTC Data: %02X %02X %02X %02X %02X %02X %02X\r\n",
 80029bc:	4605      	mov	r5, r0
 80029be:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80029c2:	9504      	str	r5, [sp, #16]
 80029c4:	9403      	str	r4, [sp, #12]
 80029c6:	9102      	str	r1, [sp, #8]
 80029c8:	9201      	str	r2, [sp, #4]
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	4663      	mov	r3, ip
 80029ce:	4632      	mov	r2, r6
 80029d0:	4927      	ldr	r1, [pc, #156]	@ (8002a70 <Get_Time+0x150>)
 80029d2:	f005 fb79 	bl	80080c8 <siprintf>
    Debug_Print(dbg);
 80029d6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff f814 	bl	8001a08 <Debug_Print>

    time.seconds    = bcdToDec(get_time[0]);
 80029e0:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff ff83 	bl	80028f0 <bcdToDec>
 80029ea:	4603      	mov	r3, r0
 80029ec:	b2da      	uxtb	r2, r3
 80029ee:	4b1f      	ldr	r3, [pc, #124]	@ (8002a6c <Get_Time+0x14c>)
 80029f0:	701a      	strb	r2, [r3, #0]
    time.minutes    = bcdToDec(get_time[1]);
 80029f2:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff ff7a 	bl	80028f0 <bcdToDec>
 80029fc:	4603      	mov	r3, r0
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	4b1a      	ldr	r3, [pc, #104]	@ (8002a6c <Get_Time+0x14c>)
 8002a02:	705a      	strb	r2, [r3, #1]
    time.hour       = bcdToDec(get_time[2]);
 8002a04:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff ff71 	bl	80028f0 <bcdToDec>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	b2da      	uxtb	r2, r3
 8002a12:	4b16      	ldr	r3, [pc, #88]	@ (8002a6c <Get_Time+0x14c>)
 8002a14:	709a      	strb	r2, [r3, #2]
    time.dayofweek  = bcdToDec(get_time[3]);
 8002a16:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff ff68 	bl	80028f0 <bcdToDec>
 8002a20:	4603      	mov	r3, r0
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	4b11      	ldr	r3, [pc, #68]	@ (8002a6c <Get_Time+0x14c>)
 8002a26:	70da      	strb	r2, [r3, #3]
    time.dayofmonth = bcdToDec(get_time[4]);
 8002a28:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff ff5f 	bl	80028f0 <bcdToDec>
 8002a32:	4603      	mov	r3, r0
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	4b0d      	ldr	r3, [pc, #52]	@ (8002a6c <Get_Time+0x14c>)
 8002a38:	711a      	strb	r2, [r3, #4]
    time.month      = bcdToDec(get_time[5]);
 8002a3a:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7ff ff56 	bl	80028f0 <bcdToDec>
 8002a44:	4603      	mov	r3, r0
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	4b08      	ldr	r3, [pc, #32]	@ (8002a6c <Get_Time+0x14c>)
 8002a4a:	715a      	strb	r2, [r3, #5]
    time.year       = bcdToDec(get_time[6]);
 8002a4c:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff ff4d 	bl	80028f0 <bcdToDec>
 8002a56:	4603      	mov	r3, r0
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	4b04      	ldr	r3, [pc, #16]	@ (8002a6c <Get_Time+0x14c>)
 8002a5c:	719a      	strb	r2, [r3, #6]
}
 8002a5e:	377c      	adds	r7, #124	@ 0x7c
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a64:	20000190 	.word	0x20000190
 8002a68:	08009800 	.word	0x08009800
 8002a6c:	20000374 	.word	0x20000374
 8002a70:	08009818 	.word	0x08009818

08002a74 <lcd_line0>:
    "Back to Dash"
};
#define MENU_COUNT (sizeof(menu_items)/sizeof(menu_items[0]))

/* ================= Helpers ================= */
static void lcd_line0(const char* s){ lcd_put_cur(0,0); lcd_send_string(s); }
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	2000      	movs	r0, #0
 8002a80:	f7fe fa1e 	bl	8000ec0 <lcd_put_cur>
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f7fe fa3d 	bl	8000f04 <lcd_send_string>
 8002a8a:	bf00      	nop
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <lcd_line1>:
static void lcd_line1(const char* s){ lcd_put_cur(1,0); lcd_send_string(s); }
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b082      	sub	sp, #8
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	2001      	movs	r0, #1
 8002a9e:	f7fe fa0f 	bl	8000ec0 <lcd_put_cur>
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f7fe fa2e 	bl	8000f04 <lcd_send_string>
 8002aa8:	bf00      	nop
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <lcd_line0_full>:

static void lcd_line0_full(const char* s) {
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b088      	sub	sp, #32
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
    char ln[21];
    snprintf(ln, sizeof(ln), "%-20s", s); // pad with spaces
 8002ab8:	f107 0008 	add.w	r0, r7, #8
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a08      	ldr	r2, [pc, #32]	@ (8002ae0 <lcd_line0_full+0x30>)
 8002ac0:	2115      	movs	r1, #21
 8002ac2:	f005 facb 	bl	800805c <sniprintf>
    lcd_put_cur(0,0);
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	2000      	movs	r0, #0
 8002aca:	f7fe f9f9 	bl	8000ec0 <lcd_put_cur>
    lcd_send_string(ln);
 8002ace:	f107 0308 	add.w	r3, r7, #8
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7fe fa16 	bl	8000f04 <lcd_send_string>
}
 8002ad8:	bf00      	nop
 8002ada:	3720      	adds	r7, #32
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	0800993c 	.word	0x0800993c

08002ae4 <lcd_line1_full>:
static void lcd_line1_full(const char* s) {
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b088      	sub	sp, #32
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
    char ln[21];
    snprintf(ln, sizeof(ln), "%-20s", s);
 8002aec:	f107 0008 	add.w	r0, r7, #8
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4a08      	ldr	r2, [pc, #32]	@ (8002b14 <lcd_line1_full+0x30>)
 8002af4:	2115      	movs	r1, #21
 8002af6:	f005 fab1 	bl	800805c <sniprintf>
    lcd_put_cur(1,0);
 8002afa:	2100      	movs	r1, #0
 8002afc:	2001      	movs	r0, #1
 8002afe:	f7fe f9df 	bl	8000ec0 <lcd_put_cur>
    lcd_send_string(ln);
 8002b02:	f107 0308 	add.w	r3, r7, #8
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7fe f9fc 	bl	8000f04 <lcd_send_string>
}
 8002b0c:	bf00      	nop
 8002b0e:	3720      	adds	r7, #32
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	0800993c 	.word	0x0800993c

08002b18 <goto_dash_cycle>:
static void goto_dash_cycle(void) {
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
    if (ui < UI_DASH_WATER || ui > UI_DASH_TWIST) ui = UI_DASH_WATER;
 8002b1c:	4b07      	ldr	r3, [pc, #28]	@ (8002b3c <goto_dash_cycle+0x24>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d003      	beq.n	8002b2c <goto_dash_cycle+0x14>
 8002b24:	4b05      	ldr	r3, [pc, #20]	@ (8002b3c <goto_dash_cycle+0x24>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	2b04      	cmp	r3, #4
 8002b2a:	d902      	bls.n	8002b32 <goto_dash_cycle+0x1a>
 8002b2c:	4b03      	ldr	r3, [pc, #12]	@ (8002b3c <goto_dash_cycle+0x24>)
 8002b2e:	2201      	movs	r2, #1
 8002b30:	701a      	strb	r2, [r3, #0]
}
 8002b32:	bf00      	nop
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bc80      	pop	{r7}
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	20000380 	.word	0x20000380

08002b40 <show_welcome>:

static void show_welcome(void){
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
    lcd_clear();
 8002b44:	f7fe f9ae 	bl	8000ea4 <lcd_clear>
    lcd_line0("Welcome to");
 8002b48:	4803      	ldr	r0, [pc, #12]	@ (8002b58 <show_welcome+0x18>)
 8002b4a:	f7ff ff93 	bl	8002a74 <lcd_line0>
    lcd_line1("HELONIX");
 8002b4e:	4803      	ldr	r0, [pc, #12]	@ (8002b5c <show_welcome+0x1c>)
 8002b50:	f7ff ff9f 	bl	8002a92 <lcd_line1>
}
 8002b54:	bf00      	nop
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	08009944 	.word	0x08009944
 8002b5c:	08009950 	.word	0x08009950

08002b60 <show_dash_water>:

static void show_dash_water(void){
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
    lcd_clear();
 8002b64:	f7fe f99e 	bl	8000ea4 <lcd_clear>
    // headline
//    snprintf(buf, sizeof(buf), "Water V0: %.2fV", adcData.voltages[0]);
    lcd_line0(buf);
 8002b68:	4817      	ldr	r0, [pc, #92]	@ (8002bc8 <show_dash_water+0x68>)
 8002b6a:	f7ff ff83 	bl	8002a74 <lcd_line0>

    // simple status from your earlier logic
    if      (adcData.voltages[0] > 2.5f)  lcd_line1("Status: Full");
 8002b6e:	4b17      	ldr	r3, [pc, #92]	@ (8002bcc <show_dash_water+0x6c>)
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	4917      	ldr	r1, [pc, #92]	@ (8002bd0 <show_dash_water+0x70>)
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7fd fdc5 	bl	8000704 <__aeabi_fcmpgt>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d003      	beq.n	8002b88 <show_dash_water+0x28>
 8002b80:	4814      	ldr	r0, [pc, #80]	@ (8002bd4 <show_dash_water+0x74>)
 8002b82:	f7ff ff86 	bl	8002a92 <lcd_line1>
    else if (adcData.voltages[0] > 1.0f)  lcd_line1("Status: Half");
    else if (adcData.voltages[0] > 0.1f)  lcd_line1("Status: Low");
    else                                  lcd_line1("Status: Empty");
}
 8002b86:	e01d      	b.n	8002bc4 <show_dash_water+0x64>
    else if (adcData.voltages[0] > 1.0f)  lcd_line1("Status: Half");
 8002b88:	4b10      	ldr	r3, [pc, #64]	@ (8002bcc <show_dash_water+0x6c>)
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7fd fdb7 	bl	8000704 <__aeabi_fcmpgt>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d003      	beq.n	8002ba4 <show_dash_water+0x44>
 8002b9c:	480e      	ldr	r0, [pc, #56]	@ (8002bd8 <show_dash_water+0x78>)
 8002b9e:	f7ff ff78 	bl	8002a92 <lcd_line1>
}
 8002ba2:	e00f      	b.n	8002bc4 <show_dash_water+0x64>
    else if (adcData.voltages[0] > 0.1f)  lcd_line1("Status: Low");
 8002ba4:	4b09      	ldr	r3, [pc, #36]	@ (8002bcc <show_dash_water+0x6c>)
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	490c      	ldr	r1, [pc, #48]	@ (8002bdc <show_dash_water+0x7c>)
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7fd fdaa 	bl	8000704 <__aeabi_fcmpgt>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <show_dash_water+0x5e>
 8002bb6:	480a      	ldr	r0, [pc, #40]	@ (8002be0 <show_dash_water+0x80>)
 8002bb8:	f7ff ff6b 	bl	8002a92 <lcd_line1>
}
 8002bbc:	e002      	b.n	8002bc4 <show_dash_water+0x64>
    else                                  lcd_line1("Status: Empty");
 8002bbe:	4809      	ldr	r0, [pc, #36]	@ (8002be4 <show_dash_water+0x84>)
 8002bc0:	f7ff ff67 	bl	8002a92 <lcd_line1>
}
 8002bc4:	bf00      	nop
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	20000384 	.word	0x20000384
 8002bcc:	20000298 	.word	0x20000298
 8002bd0:	40200000 	.word	0x40200000
 8002bd4:	08009958 	.word	0x08009958
 8002bd8:	08009968 	.word	0x08009968
 8002bdc:	3dcccccd 	.word	0x3dcccccd
 8002be0:	08009978 	.word	0x08009978
 8002be4:	08009984 	.word	0x08009984

08002be8 <show_dash_mode>:

static void show_dash_mode(void){
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af02      	add	r7, sp, #8
    lcd_clear();
 8002bee:	f7fe f959 	bl	8000ea4 <lcd_clear>
    snprintf(buf, sizeof(buf), "Motor:%s Cnt:%s",
             Motor_GetStatus() ? "ON":"OFF",
 8002bf2:	f7ff fe27 	bl	8002844 <Motor_GetStatus>
 8002bf6:	4603      	mov	r3, r0
    snprintf(buf, sizeof(buf), "Motor:%s Cnt:%s",
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <show_dash_mode+0x18>
 8002bfc:	4a13      	ldr	r2, [pc, #76]	@ (8002c4c <show_dash_mode+0x64>)
 8002bfe:	e000      	b.n	8002c02 <show_dash_mode+0x1a>
 8002c00:	4a13      	ldr	r2, [pc, #76]	@ (8002c50 <show_dash_mode+0x68>)
             countdownActive ? (countdownMode?"ON":"OFF") : "NA");
 8002c02:	4b14      	ldr	r3, [pc, #80]	@ (8002c54 <show_dash_mode+0x6c>)
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	b2db      	uxtb	r3, r3
    snprintf(buf, sizeof(buf), "Motor:%s Cnt:%s",
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d008      	beq.n	8002c1e <show_dash_mode+0x36>
             countdownActive ? (countdownMode?"ON":"OFF") : "NA");
 8002c0c:	4b12      	ldr	r3, [pc, #72]	@ (8002c58 <show_dash_mode+0x70>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <show_dash_mode+0x32>
 8002c16:	4b0d      	ldr	r3, [pc, #52]	@ (8002c4c <show_dash_mode+0x64>)
 8002c18:	e002      	b.n	8002c20 <show_dash_mode+0x38>
 8002c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c50 <show_dash_mode+0x68>)
 8002c1c:	e000      	b.n	8002c20 <show_dash_mode+0x38>
    snprintf(buf, sizeof(buf), "Motor:%s Cnt:%s",
 8002c1e:	4b0f      	ldr	r3, [pc, #60]	@ (8002c5c <show_dash_mode+0x74>)
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	4613      	mov	r3, r2
 8002c24:	4a0e      	ldr	r2, [pc, #56]	@ (8002c60 <show_dash_mode+0x78>)
 8002c26:	2115      	movs	r1, #21
 8002c28:	480e      	ldr	r0, [pc, #56]	@ (8002c64 <show_dash_mode+0x7c>)
 8002c2a:	f005 fa17 	bl	800805c <sniprintf>
    lcd_line0(buf);
 8002c2e:	480d      	ldr	r0, [pc, #52]	@ (8002c64 <show_dash_mode+0x7c>)
 8002c30:	f7ff ff20 	bl	8002a74 <lcd_line0>

    snprintf(buf, sizeof(buf), "Menu: Press SEL");
 8002c34:	4a0c      	ldr	r2, [pc, #48]	@ (8002c68 <show_dash_mode+0x80>)
 8002c36:	2115      	movs	r1, #21
 8002c38:	480a      	ldr	r0, [pc, #40]	@ (8002c64 <show_dash_mode+0x7c>)
 8002c3a:	f005 fa0f 	bl	800805c <sniprintf>
    lcd_line1(buf);
 8002c3e:	4809      	ldr	r0, [pc, #36]	@ (8002c64 <show_dash_mode+0x7c>)
 8002c40:	f7ff ff27 	bl	8002a92 <lcd_line1>
}
 8002c44:	bf00      	nop
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	08009994 	.word	0x08009994
 8002c50:	08009998 	.word	0x08009998
 8002c54:	20000311 	.word	0x20000311
 8002c58:	20000019 	.word	0x20000019
 8002c5c:	0800999c 	.word	0x0800999c
 8002c60:	080099a0 	.word	0x080099a0
 8002c64:	20000384 	.word	0x20000384
 8002c68:	080099b0 	.word	0x080099b0

08002c6c <show_dash_search>:

static void show_dash_search(void){
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af02      	add	r7, sp, #8
    lcd_clear();
 8002c72:	f7fe f917 	bl	8000ea4 <lcd_clear>
    lcd_line0("Search Mode");
 8002c76:	480e      	ldr	r0, [pc, #56]	@ (8002cb0 <show_dash_search+0x44>)
 8002c78:	f7ff fefc 	bl	8002a74 <lcd_line0>
    if (searchSettings.searchActive) {
 8002c7c:	4b0d      	ldr	r3, [pc, #52]	@ (8002cb4 <show_dash_search+0x48>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00f      	beq.n	8002ca4 <show_dash_search+0x38>
        snprintf(buf, sizeof(buf), "Gap:%ds Dry:%ds",
                 (int)searchSettings.testingGapSeconds,
 8002c84:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb4 <show_dash_search+0x48>)
 8002c86:	685b      	ldr	r3, [r3, #4]
        snprintf(buf, sizeof(buf), "Gap:%ds Dry:%ds",
 8002c88:	461a      	mov	r2, r3
                 (int)searchSettings.dryRunTimeSeconds);
 8002c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb4 <show_dash_search+0x48>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
        snprintf(buf, sizeof(buf), "Gap:%ds Dry:%ds",
 8002c8e:	9300      	str	r3, [sp, #0]
 8002c90:	4613      	mov	r3, r2
 8002c92:	4a09      	ldr	r2, [pc, #36]	@ (8002cb8 <show_dash_search+0x4c>)
 8002c94:	2115      	movs	r1, #21
 8002c96:	4809      	ldr	r0, [pc, #36]	@ (8002cbc <show_dash_search+0x50>)
 8002c98:	f005 f9e0 	bl	800805c <sniprintf>
        lcd_line1(buf);
 8002c9c:	4807      	ldr	r0, [pc, #28]	@ (8002cbc <show_dash_search+0x50>)
 8002c9e:	f7ff fef8 	bl	8002a92 <lcd_line1>
    } else {
        lcd_line1("Inactive");
    }
}
 8002ca2:	e002      	b.n	8002caa <show_dash_search+0x3e>
        lcd_line1("Inactive");
 8002ca4:	4806      	ldr	r0, [pc, #24]	@ (8002cc0 <show_dash_search+0x54>)
 8002ca6:	f7ff fef4 	bl	8002a92 <lcd_line1>
}
 8002caa:	bf00      	nop
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	080099c0 	.word	0x080099c0
 8002cb4:	2000001c 	.word	0x2000001c
 8002cb8:	080099cc 	.word	0x080099cc
 8002cbc:	20000384 	.word	0x20000384
 8002cc0:	080099dc 	.word	0x080099dc

08002cc4 <show_dash_twist>:

static void show_dash_twist(void){
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af02      	add	r7, sp, #8
    lcd_clear();
 8002cca:	f7fe f8eb 	bl	8000ea4 <lcd_clear>
    lcd_line0("Twist Mode");
 8002cce:	480e      	ldr	r0, [pc, #56]	@ (8002d08 <show_dash_twist+0x44>)
 8002cd0:	f7ff fed0 	bl	8002a74 <lcd_line0>
    if (twistSettings.twistActive) {
 8002cd4:	4b0d      	ldr	r3, [pc, #52]	@ (8002d0c <show_dash_twist+0x48>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00f      	beq.n	8002cfc <show_dash_twist+0x38>
        snprintf(buf, sizeof(buf), "ON:%ds OFF:%ds",
                 (int)twistSettings.onDurationSeconds,
 8002cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8002d0c <show_dash_twist+0x48>)
 8002cde:	685b      	ldr	r3, [r3, #4]
        snprintf(buf, sizeof(buf), "ON:%ds OFF:%ds",
 8002ce0:	461a      	mov	r2, r3
                 (int)twistSettings.offDurationSeconds);
 8002ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8002d0c <show_dash_twist+0x48>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
        snprintf(buf, sizeof(buf), "ON:%ds OFF:%ds",
 8002ce6:	9300      	str	r3, [sp, #0]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	4a09      	ldr	r2, [pc, #36]	@ (8002d10 <show_dash_twist+0x4c>)
 8002cec:	2115      	movs	r1, #21
 8002cee:	4809      	ldr	r0, [pc, #36]	@ (8002d14 <show_dash_twist+0x50>)
 8002cf0:	f005 f9b4 	bl	800805c <sniprintf>
        lcd_line1(buf);
 8002cf4:	4807      	ldr	r0, [pc, #28]	@ (8002d14 <show_dash_twist+0x50>)
 8002cf6:	f7ff fecc 	bl	8002a92 <lcd_line1>
    } else {
        lcd_line1("Inactive");
    }
}
 8002cfa:	e002      	b.n	8002d02 <show_dash_twist+0x3e>
        lcd_line1("Inactive");
 8002cfc:	4806      	ldr	r0, [pc, #24]	@ (8002d18 <show_dash_twist+0x54>)
 8002cfe:	f7ff fec8 	bl	8002a92 <lcd_line1>
}
 8002d02:	bf00      	nop
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	080099e8 	.word	0x080099e8
 8002d0c:	20000028 	.word	0x20000028
 8002d10:	080099f4 	.word	0x080099f4
 8002d14:	20000384 	.word	0x20000384
 8002d18:	080099dc 	.word	0x080099dc

08002d1c <show_menu>:

static void show_menu(void){
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af02      	add	r7, sp, #8
    char cursor = cursorVisible ? '>' : ' ';   // blink effect
 8002d22:	4b11      	ldr	r3, [pc, #68]	@ (8002d68 <show_menu+0x4c>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <show_menu+0x12>
 8002d2a:	233e      	movs	r3, #62	@ 0x3e
 8002d2c:	e000      	b.n	8002d30 <show_menu+0x14>
 8002d2e:	2320      	movs	r3, #32
 8002d30:	71fb      	strb	r3, [r7, #7]
    snprintf(buf, sizeof(buf), "%c%s", cursor, menu_items[menu_idx]);
 8002d32:	79fa      	ldrb	r2, [r7, #7]
 8002d34:	4b0d      	ldr	r3, [pc, #52]	@ (8002d6c <show_menu+0x50>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d70 <show_menu+0x54>)
 8002d3c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	4613      	mov	r3, r2
 8002d44:	4a0b      	ldr	r2, [pc, #44]	@ (8002d74 <show_menu+0x58>)
 8002d46:	2115      	movs	r1, #21
 8002d48:	480b      	ldr	r0, [pc, #44]	@ (8002d78 <show_menu+0x5c>)
 8002d4a:	f005 f987 	bl	800805c <sniprintf>
    buf[20]='\0';
 8002d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d78 <show_menu+0x5c>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	751a      	strb	r2, [r3, #20]
    lcd_line0_full(buf);
 8002d54:	4808      	ldr	r0, [pc, #32]	@ (8002d78 <show_menu+0x5c>)
 8002d56:	f7ff feab 	bl	8002ab0 <lcd_line0_full>
    lcd_line1_full("UP/DN:Move  SEL:OK");
 8002d5a:	4808      	ldr	r0, [pc, #32]	@ (8002d7c <show_menu+0x60>)
 8002d5c:	f7ff fec2 	bl	8002ae4 <lcd_line1_full>
}
 8002d60:	bf00      	nop
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	20000035 	.word	0x20000035
 8002d6c:	2000039c 	.word	0x2000039c
 8002d70:	20000038 	.word	0x20000038
 8002d74:	08009a04 	.word	0x08009a04
 8002d78:	20000384 	.word	0x20000384
 8002d7c:	08009a0c 	.word	0x08009a0c

08002d80 <show_edit_mm>:


/* generic editor screens */
static void show_edit_mm(const char* title, uint8_t mm){
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	460b      	mov	r3, r1
 8002d8a:	70fb      	strb	r3, [r7, #3]
    lcd_clear();
 8002d8c:	f7fe f88a 	bl	8000ea4 <lcd_clear>
    lcd_line0(title);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f7ff fe6f 	bl	8002a74 <lcd_line0>
    snprintf(buf, sizeof(buf), "Value: %02u", mm);
 8002d96:	78fb      	ldrb	r3, [r7, #3]
 8002d98:	4a05      	ldr	r2, [pc, #20]	@ (8002db0 <show_edit_mm+0x30>)
 8002d9a:	2115      	movs	r1, #21
 8002d9c:	4805      	ldr	r0, [pc, #20]	@ (8002db4 <show_edit_mm+0x34>)
 8002d9e:	f005 f95d 	bl	800805c <sniprintf>
    lcd_line1(buf);
 8002da2:	4804      	ldr	r0, [pc, #16]	@ (8002db4 <show_edit_mm+0x34>)
 8002da4:	f7ff fe75 	bl	8002a92 <lcd_line1>
}
 8002da8:	bf00      	nop
 8002daa:	3708      	adds	r7, #8
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	08009a20 	.word	0x08009a20
 8002db4:	20000384 	.word	0x20000384

08002db8 <show_edit_ms>:

static void show_edit_ms(const char* title, uint8_t mm, uint8_t ss){
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af02      	add	r7, sp, #8
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	70fb      	strb	r3, [r7, #3]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	70bb      	strb	r3, [r7, #2]
    lcd_clear();
 8002dc8:	f7fe f86c 	bl	8000ea4 <lcd_clear>
    lcd_line0(title);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f7ff fe51 	bl	8002a74 <lcd_line0>
    snprintf(buf, sizeof(buf), "%02u:%02u  UP/DN  SEL:OK", mm, ss);
 8002dd2:	78fa      	ldrb	r2, [r7, #3]
 8002dd4:	78bb      	ldrb	r3, [r7, #2]
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	4a06      	ldr	r2, [pc, #24]	@ (8002df4 <show_edit_ms+0x3c>)
 8002ddc:	2115      	movs	r1, #21
 8002dde:	4806      	ldr	r0, [pc, #24]	@ (8002df8 <show_edit_ms+0x40>)
 8002de0:	f005 f93c 	bl	800805c <sniprintf>
    lcd_line1(buf);
 8002de4:	4804      	ldr	r0, [pc, #16]	@ (8002df8 <show_edit_ms+0x40>)
 8002de6:	f7ff fe54 	bl	8002a92 <lcd_line1>
}
 8002dea:	bf00      	nop
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	08009a2c 	.word	0x08009a2c
 8002df8:	20000384 	.word	0x20000384

08002dfc <show_edit_hhmm>:

static void show_edit_hhmm(const char* title, uint8_t hh, uint8_t mm){
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af02      	add	r7, sp, #8
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	460b      	mov	r3, r1
 8002e06:	70fb      	strb	r3, [r7, #3]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	70bb      	strb	r3, [r7, #2]
    lcd_clear();
 8002e0c:	f7fe f84a 	bl	8000ea4 <lcd_clear>
    lcd_line0(title);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f7ff fe2f 	bl	8002a74 <lcd_line0>
    snprintf(buf, sizeof(buf), "%02u:%02u  UP/DN  SEL:Next", hh, mm);
 8002e16:	78fa      	ldrb	r2, [r7, #3]
 8002e18:	78bb      	ldrb	r3, [r7, #2]
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	4a06      	ldr	r2, [pc, #24]	@ (8002e38 <show_edit_hhmm+0x3c>)
 8002e20:	2115      	movs	r1, #21
 8002e22:	4806      	ldr	r0, [pc, #24]	@ (8002e3c <show_edit_hhmm+0x40>)
 8002e24:	f005 f91a 	bl	800805c <sniprintf>
    lcd_line1(buf);
 8002e28:	4804      	ldr	r0, [pc, #16]	@ (8002e3c <show_edit_hhmm+0x40>)
 8002e2a:	f7ff fe32 	bl	8002a92 <lcd_line1>
}
 8002e2e:	bf00      	nop
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	08009a48 	.word	0x08009a48
 8002e3c:	20000384 	.word	0x20000384

08002e40 <apply_menu_action>:

static void apply_menu_action(void){
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
    switch(menu_idx){
 8002e44:	4b35      	ldr	r3, [pc, #212]	@ (8002f1c <apply_menu_action+0xdc>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	2b09      	cmp	r3, #9
 8002e4a:	d865      	bhi.n	8002f18 <apply_menu_action+0xd8>
 8002e4c:	a201      	add	r2, pc, #4	@ (adr r2, 8002e54 <apply_menu_action+0x14>)
 8002e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e52:	bf00      	nop
 8002e54:	08002e7d 	.word	0x08002e7d
 8002e58:	08002e85 	.word	0x08002e85
 8002e5c:	08002e8d 	.word	0x08002e8d
 8002e60:	08002e9b 	.word	0x08002e9b
 8002e64:	08002eaf 	.word	0x08002eaf
 8002e68:	08002ec3 	.word	0x08002ec3
 8002e6c:	08002ed7 	.word	0x08002ed7
 8002e70:	08002eeb 	.word	0x08002eeb
 8002e74:	08002eff 	.word	0x08002eff
 8002e78:	08002f13 	.word	0x08002f13
        case 0: ui = UI_CONFIRM_MANUAL_ON;  break;
 8002e7c:	4b28      	ldr	r3, [pc, #160]	@ (8002f20 <apply_menu_action+0xe0>)
 8002e7e:	2213      	movs	r2, #19
 8002e80:	701a      	strb	r2, [r3, #0]
 8002e82:	e049      	b.n	8002f18 <apply_menu_action+0xd8>
        case 1: ui = UI_CONFIRM_MANUAL_OFF; break;
 8002e84:	4b26      	ldr	r3, [pc, #152]	@ (8002f20 <apply_menu_action+0xe0>)
 8002e86:	2214      	movs	r2, #20
 8002e88:	701a      	strb	r2, [r3, #0]
 8002e8a:	e045      	b.n	8002f18 <apply_menu_action+0xd8>
        case 2: temp_m = 10; ui = UI_EDIT_COUNTDOWN_MIN; break;
 8002e8c:	4b25      	ldr	r3, [pc, #148]	@ (8002f24 <apply_menu_action+0xe4>)
 8002e8e:	220a      	movs	r2, #10
 8002e90:	701a      	strb	r2, [r3, #0]
 8002e92:	4b23      	ldr	r3, [pc, #140]	@ (8002f20 <apply_menu_action+0xe0>)
 8002e94:	2206      	movs	r2, #6
 8002e96:	701a      	strb	r2, [r3, #0]
 8002e98:	e03e      	b.n	8002f18 <apply_menu_action+0xd8>
        case 3: /* Timer1 ON hh:mm */
            temp_h = 6; temp_m = 0; ui = UI_EDIT_TIMER1_ON_H; break;
 8002e9a:	4b23      	ldr	r3, [pc, #140]	@ (8002f28 <apply_menu_action+0xe8>)
 8002e9c:	2206      	movs	r2, #6
 8002e9e:	701a      	strb	r2, [r3, #0]
 8002ea0:	4b20      	ldr	r3, [pc, #128]	@ (8002f24 <apply_menu_action+0xe4>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	701a      	strb	r2, [r3, #0]
 8002ea6:	4b1e      	ldr	r3, [pc, #120]	@ (8002f20 <apply_menu_action+0xe0>)
 8002ea8:	2207      	movs	r2, #7
 8002eaa:	701a      	strb	r2, [r3, #0]
 8002eac:	e034      	b.n	8002f18 <apply_menu_action+0xd8>
        case 4: /* Timer1 OFF hh:mm */
            temp_h = 7; temp_m = 0; ui = UI_EDIT_TIMER1_OFF_H; break;
 8002eae:	4b1e      	ldr	r3, [pc, #120]	@ (8002f28 <apply_menu_action+0xe8>)
 8002eb0:	2207      	movs	r2, #7
 8002eb2:	701a      	strb	r2, [r3, #0]
 8002eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8002f24 <apply_menu_action+0xe4>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	701a      	strb	r2, [r3, #0]
 8002eba:	4b19      	ldr	r3, [pc, #100]	@ (8002f20 <apply_menu_action+0xe0>)
 8002ebc:	2209      	movs	r2, #9
 8002ebe:	701a      	strb	r2, [r3, #0]
 8002ec0:	e02a      	b.n	8002f18 <apply_menu_action+0xd8>
        case 5: /* Search gap mm:ss */
            temp_m = 0; temp_s = 30; ui = UI_EDIT_SEARCH_GAP_M; break;
 8002ec2:	4b18      	ldr	r3, [pc, #96]	@ (8002f24 <apply_menu_action+0xe4>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	701a      	strb	r2, [r3, #0]
 8002ec8:	4b18      	ldr	r3, [pc, #96]	@ (8002f2c <apply_menu_action+0xec>)
 8002eca:	221e      	movs	r2, #30
 8002ecc:	701a      	strb	r2, [r3, #0]
 8002ece:	4b14      	ldr	r3, [pc, #80]	@ (8002f20 <apply_menu_action+0xe0>)
 8002ed0:	220b      	movs	r2, #11
 8002ed2:	701a      	strb	r2, [r3, #0]
 8002ed4:	e020      	b.n	8002f18 <apply_menu_action+0xd8>
        case 6: /* Search dry run mm:ss */
            temp_m = 0; temp_s = 10; ui = UI_EDIT_SEARCH_DRY_M; break;
 8002ed6:	4b13      	ldr	r3, [pc, #76]	@ (8002f24 <apply_menu_action+0xe4>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	701a      	strb	r2, [r3, #0]
 8002edc:	4b13      	ldr	r3, [pc, #76]	@ (8002f2c <apply_menu_action+0xec>)
 8002ede:	220a      	movs	r2, #10
 8002ee0:	701a      	strb	r2, [r3, #0]
 8002ee2:	4b0f      	ldr	r3, [pc, #60]	@ (8002f20 <apply_menu_action+0xe0>)
 8002ee4:	220d      	movs	r2, #13
 8002ee6:	701a      	strb	r2, [r3, #0]
 8002ee8:	e016      	b.n	8002f18 <apply_menu_action+0xd8>
        case 7: /* Twist ON mm:ss */
            temp_m = 0; temp_s = 20; ui = UI_EDIT_TWIST_ON_M; break;
 8002eea:	4b0e      	ldr	r3, [pc, #56]	@ (8002f24 <apply_menu_action+0xe4>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	701a      	strb	r2, [r3, #0]
 8002ef0:	4b0e      	ldr	r3, [pc, #56]	@ (8002f2c <apply_menu_action+0xec>)
 8002ef2:	2214      	movs	r2, #20
 8002ef4:	701a      	strb	r2, [r3, #0]
 8002ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8002f20 <apply_menu_action+0xe0>)
 8002ef8:	220f      	movs	r2, #15
 8002efa:	701a      	strb	r2, [r3, #0]
 8002efc:	e00c      	b.n	8002f18 <apply_menu_action+0xd8>
        case 8: /* Twist OFF mm:ss */
            temp_m = 0; temp_s = 40; ui = UI_EDIT_TWIST_OFF_M; break;
 8002efe:	4b09      	ldr	r3, [pc, #36]	@ (8002f24 <apply_menu_action+0xe4>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	701a      	strb	r2, [r3, #0]
 8002f04:	4b09      	ldr	r3, [pc, #36]	@ (8002f2c <apply_menu_action+0xec>)
 8002f06:	2228      	movs	r2, #40	@ 0x28
 8002f08:	701a      	strb	r2, [r3, #0]
 8002f0a:	4b05      	ldr	r3, [pc, #20]	@ (8002f20 <apply_menu_action+0xe0>)
 8002f0c:	2211      	movs	r2, #17
 8002f0e:	701a      	strb	r2, [r3, #0]
 8002f10:	e002      	b.n	8002f18 <apply_menu_action+0xd8>
        case 9: goto_dash_cycle(); break;
 8002f12:	f7ff fe01 	bl	8002b18 <goto_dash_cycle>
 8002f16:	bf00      	nop
    }
}
 8002f18:	bf00      	nop
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	2000039c 	.word	0x2000039c
 8002f20:	20000380 	.word	0x20000380
 8002f24:	2000039a 	.word	0x2000039a
 8002f28:	20000399 	.word	0x20000399
 8002f2c:	2000039b 	.word	0x2000039b

08002f30 <send_cmd>:

/* send commands into your existing model handlers */
static void send_cmd(const char* cmd){
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
    ModelHandle_ProcessUartCommand(cmd);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f7ff fae3 	bl	8002504 <ModelHandle_ProcessUartCommand>
}
 8002f3e:	bf00      	nop
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
	...

08002f48 <Screen_Init>:

/* ================= Public API ================= */

void Screen_Init(void){
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
    lcd_init();
 8002f4c:	f7fd ffef 	bl	8000f2e <lcd_init>
    lastLcdUpdateTime = HAL_GetTick();
 8002f50:	f001 f902 	bl	8004158 <HAL_GetTick>
 8002f54:	4603      	mov	r3, r0
 8002f56:	4a03      	ldr	r2, [pc, #12]	@ (8002f64 <Screen_Init+0x1c>)
 8002f58:	6013      	str	r3, [r2, #0]
    ui = UI_WELCOME;
 8002f5a:	4b03      	ldr	r3, [pc, #12]	@ (8002f68 <Screen_Init+0x20>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	701a      	strb	r2, [r3, #0]
}
 8002f60:	bf00      	nop
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	2000037c 	.word	0x2000037c
 8002f68:	20000380 	.word	0x20000380

08002f6c <Screen_ResetToHome>:

void Screen_ResetToHome(void){
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
    ui = UI_WELCOME;
 8002f70:	4b04      	ldr	r3, [pc, #16]	@ (8002f84 <Screen_ResetToHome+0x18>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	701a      	strb	r2, [r3, #0]
    lastLcdUpdateTime = HAL_GetTick();
 8002f76:	f001 f8ef 	bl	8004158 <HAL_GetTick>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	4a02      	ldr	r2, [pc, #8]	@ (8002f88 <Screen_ResetToHome+0x1c>)
 8002f7e:	6013      	str	r3, [r2, #0]
}
 8002f80:	bf00      	nop
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	20000380 	.word	0x20000380
 8002f88:	2000037c 	.word	0x2000037c

08002f8c <Screen_HandleButton>:

void Screen_HandleButton(UiButton b){
 8002f8c:	b590      	push	{r4, r7, lr}
 8002f8e:	b097      	sub	sp, #92	@ 0x5c
 8002f90:	af04      	add	r7, sp, #16
 8002f92:	4603      	mov	r3, r0
 8002f94:	71fb      	strb	r3, [r7, #7]
    if (b == BTN_RESET){
 8002f96:	79fb      	ldrb	r3, [r7, #7]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d102      	bne.n	8002fa2 <Screen_HandleButton+0x16>
        Screen_ResetToHome();
 8002f9c:	f7ff ffe6 	bl	8002f6c <Screen_ResetToHome>
        return;
 8002fa0:	e398      	b.n	80036d4 <Screen_HandleButton+0x748>
    }

    switch (ui)
 8002fa2:	4b9d      	ldr	r3, [pc, #628]	@ (8003218 <Screen_HandleButton+0x28c>)
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	2b14      	cmp	r3, #20
 8002fa8:	f200 8371 	bhi.w	800368e <Screen_HandleButton+0x702>
 8002fac:	a201      	add	r2, pc, #4	@ (adr r2, 8002fb4 <Screen_HandleButton+0x28>)
 8002fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb2:	bf00      	nop
 8002fb4:	08003009 	.word	0x08003009
 8002fb8:	08003019 	.word	0x08003019
 8002fbc:	08003019 	.word	0x08003019
 8002fc0:	08003019 	.word	0x08003019
 8002fc4:	08003019 	.word	0x08003019
 8002fc8:	08003031 	.word	0x08003031
 8002fcc:	080030d3 	.word	0x080030d3
 8002fd0:	0800313d 	.word	0x0800313d
 8002fd4:	0800318f 	.word	0x0800318f
 8002fd8:	08003245 	.word	0x08003245
 8002fdc:	08003297 	.word	0x08003297
 8002fe0:	0800335d 	.word	0x0800335d
 8002fe4:	080033af 	.word	0x080033af
 8002fe8:	08003423 	.word	0x08003423
 8002fec:	08003475 	.word	0x08003475
 8002ff0:	08003507 	.word	0x08003507
 8002ff4:	08003559 	.word	0x08003559
 8002ff8:	080035cd 	.word	0x080035cd
 8002ffc:	0800361d 	.word	0x0800361d
 8003000:	08003087 	.word	0x08003087
 8003004:	080030ad 	.word	0x080030ad
    {
    case UI_WELCOME:
        if (b == BTN_SELECT) ui = UI_DASH_WATER;
 8003008:	79fb      	ldrb	r3, [r7, #7]
 800300a:	2b02      	cmp	r3, #2
 800300c:	f040 8341 	bne.w	8003692 <Screen_HandleButton+0x706>
 8003010:	4b81      	ldr	r3, [pc, #516]	@ (8003218 <Screen_HandleButton+0x28c>)
 8003012:	2201      	movs	r2, #1
 8003014:	701a      	strb	r2, [r3, #0]
        break;
 8003016:	e33c      	b.n	8003692 <Screen_HandleButton+0x706>
    /* ===== Dashboard pages (auto-cycle) ===== */
    case UI_DASH_WATER:
    case UI_DASH_MODE:
    case UI_DASH_SEARCH:
    case UI_DASH_TWIST:
        if (b == BTN_SELECT) { ui = UI_MENU; }
 8003018:	79fb      	ldrb	r3, [r7, #7]
 800301a:	2b02      	cmp	r3, #2
 800301c:	d102      	bne.n	8003024 <Screen_HandleButton+0x98>
 800301e:	4b7e      	ldr	r3, [pc, #504]	@ (8003218 <Screen_HandleButton+0x28c>)
 8003020:	2205      	movs	r2, #5
 8003022:	701a      	strb	r2, [r3, #0]
        lastLcdUpdateTime = HAL_GetTick(); // reset cycle timer
 8003024:	f001 f898 	bl	8004158 <HAL_GetTick>
 8003028:	4603      	mov	r3, r0
 800302a:	4a7c      	ldr	r2, [pc, #496]	@ (800321c <Screen_HandleButton+0x290>)
 800302c:	6013      	str	r3, [r2, #0]
        break;
 800302e:	e351      	b.n	80036d4 <Screen_HandleButton+0x748>

    /* ===== Menu navigation ===== */
    case UI_MENU:
        if (b == BTN_UP)   { if (menu_idx==0) menu_idx=MENU_COUNT-1; else menu_idx--; }
 8003030:	79fb      	ldrb	r3, [r7, #7]
 8003032:	2b03      	cmp	r3, #3
 8003034:	d10d      	bne.n	8003052 <Screen_HandleButton+0xc6>
 8003036:	4b7a      	ldr	r3, [pc, #488]	@ (8003220 <Screen_HandleButton+0x294>)
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d103      	bne.n	8003046 <Screen_HandleButton+0xba>
 800303e:	4b78      	ldr	r3, [pc, #480]	@ (8003220 <Screen_HandleButton+0x294>)
 8003040:	2209      	movs	r2, #9
 8003042:	701a      	strb	r2, [r3, #0]
 8003044:	e005      	b.n	8003052 <Screen_HandleButton+0xc6>
 8003046:	4b76      	ldr	r3, [pc, #472]	@ (8003220 <Screen_HandleButton+0x294>)
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	3b01      	subs	r3, #1
 800304c:	b2da      	uxtb	r2, r3
 800304e:	4b74      	ldr	r3, [pc, #464]	@ (8003220 <Screen_HandleButton+0x294>)
 8003050:	701a      	strb	r2, [r3, #0]
        if (b == BTN_DOWN) { menu_idx=(menu_idx+1)%MENU_COUNT; }
 8003052:	79fb      	ldrb	r3, [r7, #7]
 8003054:	2b04      	cmp	r3, #4
 8003056:	d10f      	bne.n	8003078 <Screen_HandleButton+0xec>
 8003058:	4b71      	ldr	r3, [pc, #452]	@ (8003220 <Screen_HandleButton+0x294>)
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	3301      	adds	r3, #1
 800305e:	4619      	mov	r1, r3
 8003060:	4b70      	ldr	r3, [pc, #448]	@ (8003224 <Screen_HandleButton+0x298>)
 8003062:	fba3 2301 	umull	r2, r3, r3, r1
 8003066:	08da      	lsrs	r2, r3, #3
 8003068:	4613      	mov	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	4413      	add	r3, r2
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	1aca      	subs	r2, r1, r3
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	4b6a      	ldr	r3, [pc, #424]	@ (8003220 <Screen_HandleButton+0x294>)
 8003076:	701a      	strb	r2, [r3, #0]
        if (b == BTN_SELECT){ apply_menu_action(); }
 8003078:	79fb      	ldrb	r3, [r7, #7]
 800307a:	2b02      	cmp	r3, #2
 800307c:	f040 830b 	bne.w	8003696 <Screen_HandleButton+0x70a>
 8003080:	f7ff fede 	bl	8002e40 <apply_menu_action>
        break;
 8003084:	e307      	b.n	8003696 <Screen_HandleButton+0x70a>

    /* ===== Edits & confirms ===== */
    case UI_CONFIRM_MANUAL_ON:
        if (b == BTN_SELECT){ send_cmd("MOTOR_ON"); goto_dash_cycle(); }
 8003086:	79fb      	ldrb	r3, [r7, #7]
 8003088:	2b02      	cmp	r3, #2
 800308a:	d104      	bne.n	8003096 <Screen_HandleButton+0x10a>
 800308c:	4866      	ldr	r0, [pc, #408]	@ (8003228 <Screen_HandleButton+0x29c>)
 800308e:	f7ff ff4f 	bl	8002f30 <send_cmd>
 8003092:	f7ff fd41 	bl	8002b18 <goto_dash_cycle>
        if (b == BTN_DOWN || b == BTN_UP){ ui = UI_MENU; }
 8003096:	79fb      	ldrb	r3, [r7, #7]
 8003098:	2b04      	cmp	r3, #4
 800309a:	d003      	beq.n	80030a4 <Screen_HandleButton+0x118>
 800309c:	79fb      	ldrb	r3, [r7, #7]
 800309e:	2b03      	cmp	r3, #3
 80030a0:	f040 82fb 	bne.w	800369a <Screen_HandleButton+0x70e>
 80030a4:	4b5c      	ldr	r3, [pc, #368]	@ (8003218 <Screen_HandleButton+0x28c>)
 80030a6:	2205      	movs	r2, #5
 80030a8:	701a      	strb	r2, [r3, #0]
        break;
 80030aa:	e2f6      	b.n	800369a <Screen_HandleButton+0x70e>

    case UI_CONFIRM_MANUAL_OFF:
        if (b == BTN_SELECT){ send_cmd("MOTOR_OFF"); goto_dash_cycle(); }
 80030ac:	79fb      	ldrb	r3, [r7, #7]
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d104      	bne.n	80030bc <Screen_HandleButton+0x130>
 80030b2:	485e      	ldr	r0, [pc, #376]	@ (800322c <Screen_HandleButton+0x2a0>)
 80030b4:	f7ff ff3c 	bl	8002f30 <send_cmd>
 80030b8:	f7ff fd2e 	bl	8002b18 <goto_dash_cycle>
        if (b == BTN_DOWN || b == BTN_UP){ ui = UI_MENU; }
 80030bc:	79fb      	ldrb	r3, [r7, #7]
 80030be:	2b04      	cmp	r3, #4
 80030c0:	d003      	beq.n	80030ca <Screen_HandleButton+0x13e>
 80030c2:	79fb      	ldrb	r3, [r7, #7]
 80030c4:	2b03      	cmp	r3, #3
 80030c6:	f040 82ea 	bne.w	800369e <Screen_HandleButton+0x712>
 80030ca:	4b53      	ldr	r3, [pc, #332]	@ (8003218 <Screen_HandleButton+0x28c>)
 80030cc:	2205      	movs	r2, #5
 80030ce:	701a      	strb	r2, [r3, #0]
        break;
 80030d0:	e2e5      	b.n	800369e <Screen_HandleButton+0x712>

    case UI_EDIT_COUNTDOWN_MIN:
        if (b == BTN_UP)   { if (++temp_m > 59) temp_m = 0; }
 80030d2:	79fb      	ldrb	r3, [r7, #7]
 80030d4:	2b03      	cmp	r3, #3
 80030d6:	d10c      	bne.n	80030f2 <Screen_HandleButton+0x166>
 80030d8:	4b55      	ldr	r3, [pc, #340]	@ (8003230 <Screen_HandleButton+0x2a4>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	3301      	adds	r3, #1
 80030de:	b2da      	uxtb	r2, r3
 80030e0:	4b53      	ldr	r3, [pc, #332]	@ (8003230 <Screen_HandleButton+0x2a4>)
 80030e2:	701a      	strb	r2, [r3, #0]
 80030e4:	4b52      	ldr	r3, [pc, #328]	@ (8003230 <Screen_HandleButton+0x2a4>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b3b      	cmp	r3, #59	@ 0x3b
 80030ea:	d902      	bls.n	80030f2 <Screen_HandleButton+0x166>
 80030ec:	4b50      	ldr	r3, [pc, #320]	@ (8003230 <Screen_HandleButton+0x2a4>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	701a      	strb	r2, [r3, #0]
        if (b == BTN_DOWN) { if (temp_m==0) temp_m = 59; else temp_m--; }
 80030f2:	79fb      	ldrb	r3, [r7, #7]
 80030f4:	2b04      	cmp	r3, #4
 80030f6:	d10d      	bne.n	8003114 <Screen_HandleButton+0x188>
 80030f8:	4b4d      	ldr	r3, [pc, #308]	@ (8003230 <Screen_HandleButton+0x2a4>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d103      	bne.n	8003108 <Screen_HandleButton+0x17c>
 8003100:	4b4b      	ldr	r3, [pc, #300]	@ (8003230 <Screen_HandleButton+0x2a4>)
 8003102:	223b      	movs	r2, #59	@ 0x3b
 8003104:	701a      	strb	r2, [r3, #0]
 8003106:	e005      	b.n	8003114 <Screen_HandleButton+0x188>
 8003108:	4b49      	ldr	r3, [pc, #292]	@ (8003230 <Screen_HandleButton+0x2a4>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	3b01      	subs	r3, #1
 800310e:	b2da      	uxtb	r2, r3
 8003110:	4b47      	ldr	r3, [pc, #284]	@ (8003230 <Screen_HandleButton+0x2a4>)
 8003112:	701a      	strb	r2, [r3, #0]
        if (b == BTN_SELECT){
 8003114:	79fb      	ldrb	r3, [r7, #7]
 8003116:	2b02      	cmp	r3, #2
 8003118:	f040 82c3 	bne.w	80036a2 <Screen_HandleButton+0x716>
            char cmd[32];
            snprintf(cmd,sizeof(cmd),"COUNTDOWN_ON:%u", temp_m);
 800311c:	4b44      	ldr	r3, [pc, #272]	@ (8003230 <Screen_HandleButton+0x2a4>)
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	f107 000c 	add.w	r0, r7, #12
 8003124:	4a43      	ldr	r2, [pc, #268]	@ (8003234 <Screen_HandleButton+0x2a8>)
 8003126:	2120      	movs	r1, #32
 8003128:	f004 ff98 	bl	800805c <sniprintf>
            send_cmd(cmd);
 800312c:	f107 030c 	add.w	r3, r7, #12
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff fefd 	bl	8002f30 <send_cmd>
            goto_dash_cycle();
 8003136:	f7ff fcef 	bl	8002b18 <goto_dash_cycle>
        }
        break;
 800313a:	e2b2      	b.n	80036a2 <Screen_HandleButton+0x716>

    case UI_EDIT_TIMER1_ON_H:
        if (b == BTN_UP)   { if (++temp_h > 23) temp_h = 0; }
 800313c:	79fb      	ldrb	r3, [r7, #7]
 800313e:	2b03      	cmp	r3, #3
 8003140:	d10c      	bne.n	800315c <Screen_HandleButton+0x1d0>
 8003142:	4b3d      	ldr	r3, [pc, #244]	@ (8003238 <Screen_HandleButton+0x2ac>)
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	3301      	adds	r3, #1
 8003148:	b2da      	uxtb	r2, r3
 800314a:	4b3b      	ldr	r3, [pc, #236]	@ (8003238 <Screen_HandleButton+0x2ac>)
 800314c:	701a      	strb	r2, [r3, #0]
 800314e:	4b3a      	ldr	r3, [pc, #232]	@ (8003238 <Screen_HandleButton+0x2ac>)
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	2b17      	cmp	r3, #23
 8003154:	d902      	bls.n	800315c <Screen_HandleButton+0x1d0>
 8003156:	4b38      	ldr	r3, [pc, #224]	@ (8003238 <Screen_HandleButton+0x2ac>)
 8003158:	2200      	movs	r2, #0
 800315a:	701a      	strb	r2, [r3, #0]
        if (b == BTN_DOWN) { if (temp_h==0) temp_h = 23; else temp_h--; }
 800315c:	79fb      	ldrb	r3, [r7, #7]
 800315e:	2b04      	cmp	r3, #4
 8003160:	d10d      	bne.n	800317e <Screen_HandleButton+0x1f2>
 8003162:	4b35      	ldr	r3, [pc, #212]	@ (8003238 <Screen_HandleButton+0x2ac>)
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d103      	bne.n	8003172 <Screen_HandleButton+0x1e6>
 800316a:	4b33      	ldr	r3, [pc, #204]	@ (8003238 <Screen_HandleButton+0x2ac>)
 800316c:	2217      	movs	r2, #23
 800316e:	701a      	strb	r2, [r3, #0]
 8003170:	e005      	b.n	800317e <Screen_HandleButton+0x1f2>
 8003172:	4b31      	ldr	r3, [pc, #196]	@ (8003238 <Screen_HandleButton+0x2ac>)
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	3b01      	subs	r3, #1
 8003178:	b2da      	uxtb	r2, r3
 800317a:	4b2f      	ldr	r3, [pc, #188]	@ (8003238 <Screen_HandleButton+0x2ac>)
 800317c:	701a      	strb	r2, [r3, #0]
        if (b == BTN_SELECT){ ui = UI_EDIT_TIMER1_ON_M; }
 800317e:	79fb      	ldrb	r3, [r7, #7]
 8003180:	2b02      	cmp	r3, #2
 8003182:	f040 8290 	bne.w	80036a6 <Screen_HandleButton+0x71a>
 8003186:	4b24      	ldr	r3, [pc, #144]	@ (8003218 <Screen_HandleButton+0x28c>)
 8003188:	2208      	movs	r2, #8
 800318a:	701a      	strb	r2, [r3, #0]
        break;
 800318c:	e28b      	b.n	80036a6 <Screen_HandleButton+0x71a>
    case UI_EDIT_TIMER1_ON_M:
        if (b == BTN_UP)   { if (++temp_m > 59) temp_m = 0; }
 800318e:	79fb      	ldrb	r3, [r7, #7]
 8003190:	2b03      	cmp	r3, #3
 8003192:	d10c      	bne.n	80031ae <Screen_HandleButton+0x222>
 8003194:	4b26      	ldr	r3, [pc, #152]	@ (8003230 <Screen_HandleButton+0x2a4>)
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	3301      	adds	r3, #1
 800319a:	b2da      	uxtb	r2, r3
 800319c:	4b24      	ldr	r3, [pc, #144]	@ (8003230 <Screen_HandleButton+0x2a4>)
 800319e:	701a      	strb	r2, [r3, #0]
 80031a0:	4b23      	ldr	r3, [pc, #140]	@ (8003230 <Screen_HandleButton+0x2a4>)
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	2b3b      	cmp	r3, #59	@ 0x3b
 80031a6:	d902      	bls.n	80031ae <Screen_HandleButton+0x222>
 80031a8:	4b21      	ldr	r3, [pc, #132]	@ (8003230 <Screen_HandleButton+0x2a4>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	701a      	strb	r2, [r3, #0]
        if (b == BTN_DOWN) { if (temp_m==0) temp_m = 59; else temp_m--; }
 80031ae:	79fb      	ldrb	r3, [r7, #7]
 80031b0:	2b04      	cmp	r3, #4
 80031b2:	d10d      	bne.n	80031d0 <Screen_HandleButton+0x244>
 80031b4:	4b1e      	ldr	r3, [pc, #120]	@ (8003230 <Screen_HandleButton+0x2a4>)
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d103      	bne.n	80031c4 <Screen_HandleButton+0x238>
 80031bc:	4b1c      	ldr	r3, [pc, #112]	@ (8003230 <Screen_HandleButton+0x2a4>)
 80031be:	223b      	movs	r2, #59	@ 0x3b
 80031c0:	701a      	strb	r2, [r3, #0]
 80031c2:	e005      	b.n	80031d0 <Screen_HandleButton+0x244>
 80031c4:	4b1a      	ldr	r3, [pc, #104]	@ (8003230 <Screen_HandleButton+0x2a4>)
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	3b01      	subs	r3, #1
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	4b18      	ldr	r3, [pc, #96]	@ (8003230 <Screen_HandleButton+0x2a4>)
 80031ce:	701a      	strb	r2, [r3, #0]
        if (b == BTN_SELECT){
 80031d0:	79fb      	ldrb	r3, [r7, #7]
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	f040 8269 	bne.w	80036aa <Screen_HandleButton+0x71e>
            char onStr[6]; snprintf(onStr,sizeof(onStr),"%02u:%02u",temp_h,temp_m);
 80031d8:	4b17      	ldr	r3, [pc, #92]	@ (8003238 <Screen_HandleButton+0x2ac>)
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	461a      	mov	r2, r3
 80031de:	4b14      	ldr	r3, [pc, #80]	@ (8003230 <Screen_HandleButton+0x2a4>)
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	4613      	mov	r3, r2
 80031ea:	4a14      	ldr	r2, [pc, #80]	@ (800323c <Screen_HandleButton+0x2b0>)
 80031ec:	2106      	movs	r1, #6
 80031ee:	f004 ff35 	bl	800805c <sniprintf>
            // jump to OFF editor next
            ui = UI_EDIT_TIMER1_OFF_H;
 80031f2:	4b09      	ldr	r3, [pc, #36]	@ (8003218 <Screen_HandleButton+0x28c>)
 80031f4:	2209      	movs	r2, #9
 80031f6:	701a      	strb	r2, [r3, #0]
            // stash in temp_h/temp_m again when we arrive there
            // keep onStr in mind via static? Simpler: store to timerSlots on final confirm
            // Here: save into slot as partial (seconds)
            timerSlots[0].onTimeSeconds = ModelHandle_TimeToSeconds(temp_h, temp_m);
 80031f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003238 <Screen_HandleButton+0x2ac>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	4a0c      	ldr	r2, [pc, #48]	@ (8003230 <Screen_HandleButton+0x2a4>)
 80031fe:	7812      	ldrb	r2, [r2, #0]
 8003200:	4611      	mov	r1, r2
 8003202:	4618      	mov	r0, r3
 8003204:	f7fe fe91 	bl	8001f2a <ModelHandle_TimeToSeconds>
 8003208:	4603      	mov	r3, r0
 800320a:	4a0d      	ldr	r2, [pc, #52]	@ (8003240 <Screen_HandleButton+0x2b4>)
 800320c:	6013      	str	r3, [r2, #0]
            timerSlots[0].active = true;
 800320e:	4b0c      	ldr	r3, [pc, #48]	@ (8003240 <Screen_HandleButton+0x2b4>)
 8003210:	2201      	movs	r2, #1
 8003212:	721a      	strb	r2, [r3, #8]
        }
        break;
 8003214:	e249      	b.n	80036aa <Screen_HandleButton+0x71e>
 8003216:	bf00      	nop
 8003218:	20000380 	.word	0x20000380
 800321c:	2000037c 	.word	0x2000037c
 8003220:	2000039c 	.word	0x2000039c
 8003224:	cccccccd 	.word	0xcccccccd
 8003228:	08009a64 	.word	0x08009a64
 800322c:	08009a70 	.word	0x08009a70
 8003230:	2000039a 	.word	0x2000039a
 8003234:	08009a7c 	.word	0x08009a7c
 8003238:	20000399 	.word	0x20000399
 800323c:	08009a8c 	.word	0x08009a8c
 8003240:	2000031c 	.word	0x2000031c

    case UI_EDIT_TIMER1_OFF_H:
        if (b == BTN_UP)   { if (++temp_h > 23) temp_h = 0; }
 8003244:	79fb      	ldrb	r3, [r7, #7]
 8003246:	2b03      	cmp	r3, #3
 8003248:	d10c      	bne.n	8003264 <Screen_HandleButton+0x2d8>
 800324a:	4b98      	ldr	r3, [pc, #608]	@ (80034ac <Screen_HandleButton+0x520>)
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	3301      	adds	r3, #1
 8003250:	b2da      	uxtb	r2, r3
 8003252:	4b96      	ldr	r3, [pc, #600]	@ (80034ac <Screen_HandleButton+0x520>)
 8003254:	701a      	strb	r2, [r3, #0]
 8003256:	4b95      	ldr	r3, [pc, #596]	@ (80034ac <Screen_HandleButton+0x520>)
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	2b17      	cmp	r3, #23
 800325c:	d902      	bls.n	8003264 <Screen_HandleButton+0x2d8>
 800325e:	4b93      	ldr	r3, [pc, #588]	@ (80034ac <Screen_HandleButton+0x520>)
 8003260:	2200      	movs	r2, #0
 8003262:	701a      	strb	r2, [r3, #0]
        if (b == BTN_DOWN) { if (temp_h==0) temp_h = 23; else temp_h--; }
 8003264:	79fb      	ldrb	r3, [r7, #7]
 8003266:	2b04      	cmp	r3, #4
 8003268:	d10d      	bne.n	8003286 <Screen_HandleButton+0x2fa>
 800326a:	4b90      	ldr	r3, [pc, #576]	@ (80034ac <Screen_HandleButton+0x520>)
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d103      	bne.n	800327a <Screen_HandleButton+0x2ee>
 8003272:	4b8e      	ldr	r3, [pc, #568]	@ (80034ac <Screen_HandleButton+0x520>)
 8003274:	2217      	movs	r2, #23
 8003276:	701a      	strb	r2, [r3, #0]
 8003278:	e005      	b.n	8003286 <Screen_HandleButton+0x2fa>
 800327a:	4b8c      	ldr	r3, [pc, #560]	@ (80034ac <Screen_HandleButton+0x520>)
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	3b01      	subs	r3, #1
 8003280:	b2da      	uxtb	r2, r3
 8003282:	4b8a      	ldr	r3, [pc, #552]	@ (80034ac <Screen_HandleButton+0x520>)
 8003284:	701a      	strb	r2, [r3, #0]
        if (b == BTN_SELECT){ ui = UI_EDIT_TIMER1_OFF_M; }
 8003286:	79fb      	ldrb	r3, [r7, #7]
 8003288:	2b02      	cmp	r3, #2
 800328a:	f040 8210 	bne.w	80036ae <Screen_HandleButton+0x722>
 800328e:	4b88      	ldr	r3, [pc, #544]	@ (80034b0 <Screen_HandleButton+0x524>)
 8003290:	220a      	movs	r2, #10
 8003292:	701a      	strb	r2, [r3, #0]
        break;
 8003294:	e20b      	b.n	80036ae <Screen_HandleButton+0x722>
    case UI_EDIT_TIMER1_OFF_M:
        if (b == BTN_UP)   { if (++temp_m > 59) temp_m = 0; }
 8003296:	79fb      	ldrb	r3, [r7, #7]
 8003298:	2b03      	cmp	r3, #3
 800329a:	d10c      	bne.n	80032b6 <Screen_HandleButton+0x32a>
 800329c:	4b85      	ldr	r3, [pc, #532]	@ (80034b4 <Screen_HandleButton+0x528>)
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	3301      	adds	r3, #1
 80032a2:	b2da      	uxtb	r2, r3
 80032a4:	4b83      	ldr	r3, [pc, #524]	@ (80034b4 <Screen_HandleButton+0x528>)
 80032a6:	701a      	strb	r2, [r3, #0]
 80032a8:	4b82      	ldr	r3, [pc, #520]	@ (80034b4 <Screen_HandleButton+0x528>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	2b3b      	cmp	r3, #59	@ 0x3b
 80032ae:	d902      	bls.n	80032b6 <Screen_HandleButton+0x32a>
 80032b0:	4b80      	ldr	r3, [pc, #512]	@ (80034b4 <Screen_HandleButton+0x528>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	701a      	strb	r2, [r3, #0]
        if (b == BTN_DOWN) { if (temp_m==0) temp_m = 59; else temp_m--; }
 80032b6:	79fb      	ldrb	r3, [r7, #7]
 80032b8:	2b04      	cmp	r3, #4
 80032ba:	d10d      	bne.n	80032d8 <Screen_HandleButton+0x34c>
 80032bc:	4b7d      	ldr	r3, [pc, #500]	@ (80034b4 <Screen_HandleButton+0x528>)
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d103      	bne.n	80032cc <Screen_HandleButton+0x340>
 80032c4:	4b7b      	ldr	r3, [pc, #492]	@ (80034b4 <Screen_HandleButton+0x528>)
 80032c6:	223b      	movs	r2, #59	@ 0x3b
 80032c8:	701a      	strb	r2, [r3, #0]
 80032ca:	e005      	b.n	80032d8 <Screen_HandleButton+0x34c>
 80032cc:	4b79      	ldr	r3, [pc, #484]	@ (80034b4 <Screen_HandleButton+0x528>)
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	3b01      	subs	r3, #1
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	4b77      	ldr	r3, [pc, #476]	@ (80034b4 <Screen_HandleButton+0x528>)
 80032d6:	701a      	strb	r2, [r3, #0]
        if (b == BTN_SELECT){
 80032d8:	79fb      	ldrb	r3, [r7, #7]
 80032da:	2b02      	cmp	r3, #2
 80032dc:	f040 81e9 	bne.w	80036b2 <Screen_HandleButton+0x726>
            timerSlots[0].offTimeSeconds = ModelHandle_TimeToSeconds(temp_h, temp_m);
 80032e0:	4b72      	ldr	r3, [pc, #456]	@ (80034ac <Screen_HandleButton+0x520>)
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	4a73      	ldr	r2, [pc, #460]	@ (80034b4 <Screen_HandleButton+0x528>)
 80032e6:	7812      	ldrb	r2, [r2, #0]
 80032e8:	4611      	mov	r1, r2
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7fe fe1d 	bl	8001f2a <ModelHandle_TimeToSeconds>
 80032f0:	4603      	mov	r3, r0
 80032f2:	4a71      	ldr	r2, [pc, #452]	@ (80034b8 <Screen_HandleButton+0x52c>)
 80032f4:	6053      	str	r3, [r2, #4]
            timerSlots[0].executedToday = false;
 80032f6:	4b70      	ldr	r3, [pc, #448]	@ (80034b8 <Screen_HandleButton+0x52c>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	725a      	strb	r2, [r3, #9]
            timerSlots[0].active = true;
 80032fc:	4b6e      	ldr	r3, [pc, #440]	@ (80034b8 <Screen_HandleButton+0x52c>)
 80032fe:	2201      	movs	r2, #1
 8003300:	721a      	strb	r2, [r3, #8]

            char cmd[48];
            // use the model’s parser-friendly command
            // TIMER_SET:<slot>:HH:MM:HH:MM
            uint8_t onH,onM,offH,offM;
            ModelHandle_SecondsToTime(timerSlots[0].onTimeSeconds,&onH,&onM);
 8003302:	4b6d      	ldr	r3, [pc, #436]	@ (80034b8 <Screen_HandleButton+0x52c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f107 023e 	add.w	r2, r7, #62	@ 0x3e
 800330a:	f107 013f 	add.w	r1, r7, #63	@ 0x3f
 800330e:	4618      	mov	r0, r3
 8003310:	f7fe fe24 	bl	8001f5c <ModelHandle_SecondsToTime>
            ModelHandle_SecondsToTime(timerSlots[0].offTimeSeconds,&offH,&offM);
 8003314:	4b68      	ldr	r3, [pc, #416]	@ (80034b8 <Screen_HandleButton+0x52c>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800331c:	f107 013d 	add.w	r1, r7, #61	@ 0x3d
 8003320:	4618      	mov	r0, r3
 8003322:	f7fe fe1b 	bl	8001f5c <ModelHandle_SecondsToTime>
            snprintf(cmd,sizeof(cmd),"TIMER_SET:1:%02u:%02u:%02u:%02u",onH,onM,offH,offM);
 8003326:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800332a:	461c      	mov	r4, r3
 800332c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8003330:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003334:	f897 103c 	ldrb.w	r1, [r7, #60]	@ 0x3c
 8003338:	f107 000c 	add.w	r0, r7, #12
 800333c:	9102      	str	r1, [sp, #8]
 800333e:	9201      	str	r2, [sp, #4]
 8003340:	9300      	str	r3, [sp, #0]
 8003342:	4623      	mov	r3, r4
 8003344:	4a5d      	ldr	r2, [pc, #372]	@ (80034bc <Screen_HandleButton+0x530>)
 8003346:	2130      	movs	r1, #48	@ 0x30
 8003348:	f004 fe88 	bl	800805c <sniprintf>
            send_cmd(cmd);
 800334c:	f107 030c 	add.w	r3, r7, #12
 8003350:	4618      	mov	r0, r3
 8003352:	f7ff fded 	bl	8002f30 <send_cmd>
            goto_dash_cycle();
 8003356:	f7ff fbdf 	bl	8002b18 <goto_dash_cycle>
        }
        break;
 800335a:	e1aa      	b.n	80036b2 <Screen_HandleButton+0x726>

    case UI_EDIT_SEARCH_GAP_M:
        if (b == BTN_UP)   { if (++temp_m > 59) temp_m = 0; }
 800335c:	79fb      	ldrb	r3, [r7, #7]
 800335e:	2b03      	cmp	r3, #3
 8003360:	d10c      	bne.n	800337c <Screen_HandleButton+0x3f0>
 8003362:	4b54      	ldr	r3, [pc, #336]	@ (80034b4 <Screen_HandleButton+0x528>)
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	3301      	adds	r3, #1
 8003368:	b2da      	uxtb	r2, r3
 800336a:	4b52      	ldr	r3, [pc, #328]	@ (80034b4 <Screen_HandleButton+0x528>)
 800336c:	701a      	strb	r2, [r3, #0]
 800336e:	4b51      	ldr	r3, [pc, #324]	@ (80034b4 <Screen_HandleButton+0x528>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	2b3b      	cmp	r3, #59	@ 0x3b
 8003374:	d902      	bls.n	800337c <Screen_HandleButton+0x3f0>
 8003376:	4b4f      	ldr	r3, [pc, #316]	@ (80034b4 <Screen_HandleButton+0x528>)
 8003378:	2200      	movs	r2, #0
 800337a:	701a      	strb	r2, [r3, #0]
        if (b == BTN_DOWN) { if (temp_m==0) temp_m = 59; else temp_m--; }
 800337c:	79fb      	ldrb	r3, [r7, #7]
 800337e:	2b04      	cmp	r3, #4
 8003380:	d10d      	bne.n	800339e <Screen_HandleButton+0x412>
 8003382:	4b4c      	ldr	r3, [pc, #304]	@ (80034b4 <Screen_HandleButton+0x528>)
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d103      	bne.n	8003392 <Screen_HandleButton+0x406>
 800338a:	4b4a      	ldr	r3, [pc, #296]	@ (80034b4 <Screen_HandleButton+0x528>)
 800338c:	223b      	movs	r2, #59	@ 0x3b
 800338e:	701a      	strb	r2, [r3, #0]
 8003390:	e005      	b.n	800339e <Screen_HandleButton+0x412>
 8003392:	4b48      	ldr	r3, [pc, #288]	@ (80034b4 <Screen_HandleButton+0x528>)
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	3b01      	subs	r3, #1
 8003398:	b2da      	uxtb	r2, r3
 800339a:	4b46      	ldr	r3, [pc, #280]	@ (80034b4 <Screen_HandleButton+0x528>)
 800339c:	701a      	strb	r2, [r3, #0]
        if (b == BTN_SELECT){ ui = UI_EDIT_SEARCH_GAP_S; }
 800339e:	79fb      	ldrb	r3, [r7, #7]
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	f040 8188 	bne.w	80036b6 <Screen_HandleButton+0x72a>
 80033a6:	4b42      	ldr	r3, [pc, #264]	@ (80034b0 <Screen_HandleButton+0x524>)
 80033a8:	220c      	movs	r2, #12
 80033aa:	701a      	strb	r2, [r3, #0]
        break;
 80033ac:	e183      	b.n	80036b6 <Screen_HandleButton+0x72a>
    case UI_EDIT_SEARCH_GAP_S:
        if (b == BTN_UP)   { if (++temp_s > 59) temp_s = 0; }
 80033ae:	79fb      	ldrb	r3, [r7, #7]
 80033b0:	2b03      	cmp	r3, #3
 80033b2:	d10c      	bne.n	80033ce <Screen_HandleButton+0x442>
 80033b4:	4b42      	ldr	r3, [pc, #264]	@ (80034c0 <Screen_HandleButton+0x534>)
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	3301      	adds	r3, #1
 80033ba:	b2da      	uxtb	r2, r3
 80033bc:	4b40      	ldr	r3, [pc, #256]	@ (80034c0 <Screen_HandleButton+0x534>)
 80033be:	701a      	strb	r2, [r3, #0]
 80033c0:	4b3f      	ldr	r3, [pc, #252]	@ (80034c0 <Screen_HandleButton+0x534>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	2b3b      	cmp	r3, #59	@ 0x3b
 80033c6:	d902      	bls.n	80033ce <Screen_HandleButton+0x442>
 80033c8:	4b3d      	ldr	r3, [pc, #244]	@ (80034c0 <Screen_HandleButton+0x534>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	701a      	strb	r2, [r3, #0]
        if (b == BTN_DOWN) { if (temp_s==0) temp_s = 59; else temp_s--; }
 80033ce:	79fb      	ldrb	r3, [r7, #7]
 80033d0:	2b04      	cmp	r3, #4
 80033d2:	d10d      	bne.n	80033f0 <Screen_HandleButton+0x464>
 80033d4:	4b3a      	ldr	r3, [pc, #232]	@ (80034c0 <Screen_HandleButton+0x534>)
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d103      	bne.n	80033e4 <Screen_HandleButton+0x458>
 80033dc:	4b38      	ldr	r3, [pc, #224]	@ (80034c0 <Screen_HandleButton+0x534>)
 80033de:	223b      	movs	r2, #59	@ 0x3b
 80033e0:	701a      	strb	r2, [r3, #0]
 80033e2:	e005      	b.n	80033f0 <Screen_HandleButton+0x464>
 80033e4:	4b36      	ldr	r3, [pc, #216]	@ (80034c0 <Screen_HandleButton+0x534>)
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	3b01      	subs	r3, #1
 80033ea:	b2da      	uxtb	r2, r3
 80033ec:	4b34      	ldr	r3, [pc, #208]	@ (80034c0 <Screen_HandleButton+0x534>)
 80033ee:	701a      	strb	r2, [r3, #0]
        if (b == BTN_SELECT){
 80033f0:	79fb      	ldrb	r3, [r7, #7]
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	f040 8161 	bne.w	80036ba <Screen_HandleButton+0x72e>
            char cmd[32];
            snprintf(cmd,sizeof(cmd),"SEARCH_GAP:%02u:%02u", temp_m, temp_s);
 80033f8:	4b2e      	ldr	r3, [pc, #184]	@ (80034b4 <Screen_HandleButton+0x528>)
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	461a      	mov	r2, r3
 80033fe:	4b30      	ldr	r3, [pc, #192]	@ (80034c0 <Screen_HandleButton+0x534>)
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	f107 000c 	add.w	r0, r7, #12
 8003406:	9300      	str	r3, [sp, #0]
 8003408:	4613      	mov	r3, r2
 800340a:	4a2e      	ldr	r2, [pc, #184]	@ (80034c4 <Screen_HandleButton+0x538>)
 800340c:	2120      	movs	r1, #32
 800340e:	f004 fe25 	bl	800805c <sniprintf>
            send_cmd(cmd);
 8003412:	f107 030c 	add.w	r3, r7, #12
 8003416:	4618      	mov	r0, r3
 8003418:	f7ff fd8a 	bl	8002f30 <send_cmd>
            goto_dash_cycle();
 800341c:	f7ff fb7c 	bl	8002b18 <goto_dash_cycle>
        }
        break;
 8003420:	e14b      	b.n	80036ba <Screen_HandleButton+0x72e>

    case UI_EDIT_SEARCH_DRY_M:
        if (b == BTN_UP)   { if (++temp_m > 59) temp_m = 0; }
 8003422:	79fb      	ldrb	r3, [r7, #7]
 8003424:	2b03      	cmp	r3, #3
 8003426:	d10c      	bne.n	8003442 <Screen_HandleButton+0x4b6>
 8003428:	4b22      	ldr	r3, [pc, #136]	@ (80034b4 <Screen_HandleButton+0x528>)
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	3301      	adds	r3, #1
 800342e:	b2da      	uxtb	r2, r3
 8003430:	4b20      	ldr	r3, [pc, #128]	@ (80034b4 <Screen_HandleButton+0x528>)
 8003432:	701a      	strb	r2, [r3, #0]
 8003434:	4b1f      	ldr	r3, [pc, #124]	@ (80034b4 <Screen_HandleButton+0x528>)
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	2b3b      	cmp	r3, #59	@ 0x3b
 800343a:	d902      	bls.n	8003442 <Screen_HandleButton+0x4b6>
 800343c:	4b1d      	ldr	r3, [pc, #116]	@ (80034b4 <Screen_HandleButton+0x528>)
 800343e:	2200      	movs	r2, #0
 8003440:	701a      	strb	r2, [r3, #0]
        if (b == BTN_DOWN) { if (temp_m==0) temp_m = 59; else temp_m--; }
 8003442:	79fb      	ldrb	r3, [r7, #7]
 8003444:	2b04      	cmp	r3, #4
 8003446:	d10d      	bne.n	8003464 <Screen_HandleButton+0x4d8>
 8003448:	4b1a      	ldr	r3, [pc, #104]	@ (80034b4 <Screen_HandleButton+0x528>)
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d103      	bne.n	8003458 <Screen_HandleButton+0x4cc>
 8003450:	4b18      	ldr	r3, [pc, #96]	@ (80034b4 <Screen_HandleButton+0x528>)
 8003452:	223b      	movs	r2, #59	@ 0x3b
 8003454:	701a      	strb	r2, [r3, #0]
 8003456:	e005      	b.n	8003464 <Screen_HandleButton+0x4d8>
 8003458:	4b16      	ldr	r3, [pc, #88]	@ (80034b4 <Screen_HandleButton+0x528>)
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	3b01      	subs	r3, #1
 800345e:	b2da      	uxtb	r2, r3
 8003460:	4b14      	ldr	r3, [pc, #80]	@ (80034b4 <Screen_HandleButton+0x528>)
 8003462:	701a      	strb	r2, [r3, #0]
        if (b == BTN_SELECT){ ui = UI_EDIT_SEARCH_DRY_S; }
 8003464:	79fb      	ldrb	r3, [r7, #7]
 8003466:	2b02      	cmp	r3, #2
 8003468:	f040 8129 	bne.w	80036be <Screen_HandleButton+0x732>
 800346c:	4b10      	ldr	r3, [pc, #64]	@ (80034b0 <Screen_HandleButton+0x524>)
 800346e:	220e      	movs	r2, #14
 8003470:	701a      	strb	r2, [r3, #0]
        break;
 8003472:	e124      	b.n	80036be <Screen_HandleButton+0x732>
    case UI_EDIT_SEARCH_DRY_S:
        if (b == BTN_UP)   { if (++temp_s > 59) temp_s = 0; }
 8003474:	79fb      	ldrb	r3, [r7, #7]
 8003476:	2b03      	cmp	r3, #3
 8003478:	d10c      	bne.n	8003494 <Screen_HandleButton+0x508>
 800347a:	4b11      	ldr	r3, [pc, #68]	@ (80034c0 <Screen_HandleButton+0x534>)
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	3301      	adds	r3, #1
 8003480:	b2da      	uxtb	r2, r3
 8003482:	4b0f      	ldr	r3, [pc, #60]	@ (80034c0 <Screen_HandleButton+0x534>)
 8003484:	701a      	strb	r2, [r3, #0]
 8003486:	4b0e      	ldr	r3, [pc, #56]	@ (80034c0 <Screen_HandleButton+0x534>)
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	2b3b      	cmp	r3, #59	@ 0x3b
 800348c:	d902      	bls.n	8003494 <Screen_HandleButton+0x508>
 800348e:	4b0c      	ldr	r3, [pc, #48]	@ (80034c0 <Screen_HandleButton+0x534>)
 8003490:	2200      	movs	r2, #0
 8003492:	701a      	strb	r2, [r3, #0]
        if (b == BTN_DOWN) { if (temp_s==0) temp_s = 59; else temp_s--; }
 8003494:	79fb      	ldrb	r3, [r7, #7]
 8003496:	2b04      	cmp	r3, #4
 8003498:	d11c      	bne.n	80034d4 <Screen_HandleButton+0x548>
 800349a:	4b09      	ldr	r3, [pc, #36]	@ (80034c0 <Screen_HandleButton+0x534>)
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d112      	bne.n	80034c8 <Screen_HandleButton+0x53c>
 80034a2:	4b07      	ldr	r3, [pc, #28]	@ (80034c0 <Screen_HandleButton+0x534>)
 80034a4:	223b      	movs	r2, #59	@ 0x3b
 80034a6:	701a      	strb	r2, [r3, #0]
 80034a8:	e014      	b.n	80034d4 <Screen_HandleButton+0x548>
 80034aa:	bf00      	nop
 80034ac:	20000399 	.word	0x20000399
 80034b0:	20000380 	.word	0x20000380
 80034b4:	2000039a 	.word	0x2000039a
 80034b8:	2000031c 	.word	0x2000031c
 80034bc:	08009a98 	.word	0x08009a98
 80034c0:	2000039b 	.word	0x2000039b
 80034c4:	08009ab8 	.word	0x08009ab8
 80034c8:	4b84      	ldr	r3, [pc, #528]	@ (80036dc <Screen_HandleButton+0x750>)
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	3b01      	subs	r3, #1
 80034ce:	b2da      	uxtb	r2, r3
 80034d0:	4b82      	ldr	r3, [pc, #520]	@ (80036dc <Screen_HandleButton+0x750>)
 80034d2:	701a      	strb	r2, [r3, #0]
        if (b == BTN_SELECT){
 80034d4:	79fb      	ldrb	r3, [r7, #7]
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	f040 80f3 	bne.w	80036c2 <Screen_HandleButton+0x736>
            char cmd[32];
            snprintf(cmd,sizeof(cmd),"SEARCH_DRYRUN:%02u:%02u", temp_m, temp_s);
 80034dc:	4b80      	ldr	r3, [pc, #512]	@ (80036e0 <Screen_HandleButton+0x754>)
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	461a      	mov	r2, r3
 80034e2:	4b7e      	ldr	r3, [pc, #504]	@ (80036dc <Screen_HandleButton+0x750>)
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	f107 000c 	add.w	r0, r7, #12
 80034ea:	9300      	str	r3, [sp, #0]
 80034ec:	4613      	mov	r3, r2
 80034ee:	4a7d      	ldr	r2, [pc, #500]	@ (80036e4 <Screen_HandleButton+0x758>)
 80034f0:	2120      	movs	r1, #32
 80034f2:	f004 fdb3 	bl	800805c <sniprintf>
            send_cmd(cmd);
 80034f6:	f107 030c 	add.w	r3, r7, #12
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7ff fd18 	bl	8002f30 <send_cmd>
            goto_dash_cycle();
 8003500:	f7ff fb0a 	bl	8002b18 <goto_dash_cycle>
        }
        break;
 8003504:	e0dd      	b.n	80036c2 <Screen_HandleButton+0x736>

    case UI_EDIT_TWIST_ON_M:
        if (b == BTN_UP)   { if (++temp_m > 59) temp_m = 0; }
 8003506:	79fb      	ldrb	r3, [r7, #7]
 8003508:	2b03      	cmp	r3, #3
 800350a:	d10c      	bne.n	8003526 <Screen_HandleButton+0x59a>
 800350c:	4b74      	ldr	r3, [pc, #464]	@ (80036e0 <Screen_HandleButton+0x754>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	3301      	adds	r3, #1
 8003512:	b2da      	uxtb	r2, r3
 8003514:	4b72      	ldr	r3, [pc, #456]	@ (80036e0 <Screen_HandleButton+0x754>)
 8003516:	701a      	strb	r2, [r3, #0]
 8003518:	4b71      	ldr	r3, [pc, #452]	@ (80036e0 <Screen_HandleButton+0x754>)
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	2b3b      	cmp	r3, #59	@ 0x3b
 800351e:	d902      	bls.n	8003526 <Screen_HandleButton+0x59a>
 8003520:	4b6f      	ldr	r3, [pc, #444]	@ (80036e0 <Screen_HandleButton+0x754>)
 8003522:	2200      	movs	r2, #0
 8003524:	701a      	strb	r2, [r3, #0]
        if (b == BTN_DOWN) { if (temp_m==0) temp_m = 59; else temp_m--; }
 8003526:	79fb      	ldrb	r3, [r7, #7]
 8003528:	2b04      	cmp	r3, #4
 800352a:	d10d      	bne.n	8003548 <Screen_HandleButton+0x5bc>
 800352c:	4b6c      	ldr	r3, [pc, #432]	@ (80036e0 <Screen_HandleButton+0x754>)
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d103      	bne.n	800353c <Screen_HandleButton+0x5b0>
 8003534:	4b6a      	ldr	r3, [pc, #424]	@ (80036e0 <Screen_HandleButton+0x754>)
 8003536:	223b      	movs	r2, #59	@ 0x3b
 8003538:	701a      	strb	r2, [r3, #0]
 800353a:	e005      	b.n	8003548 <Screen_HandleButton+0x5bc>
 800353c:	4b68      	ldr	r3, [pc, #416]	@ (80036e0 <Screen_HandleButton+0x754>)
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	3b01      	subs	r3, #1
 8003542:	b2da      	uxtb	r2, r3
 8003544:	4b66      	ldr	r3, [pc, #408]	@ (80036e0 <Screen_HandleButton+0x754>)
 8003546:	701a      	strb	r2, [r3, #0]
        if (b == BTN_SELECT){ ui = UI_EDIT_TWIST_ON_S; }
 8003548:	79fb      	ldrb	r3, [r7, #7]
 800354a:	2b02      	cmp	r3, #2
 800354c:	f040 80bb 	bne.w	80036c6 <Screen_HandleButton+0x73a>
 8003550:	4b65      	ldr	r3, [pc, #404]	@ (80036e8 <Screen_HandleButton+0x75c>)
 8003552:	2210      	movs	r2, #16
 8003554:	701a      	strb	r2, [r3, #0]
        break;
 8003556:	e0b6      	b.n	80036c6 <Screen_HandleButton+0x73a>
    case UI_EDIT_TWIST_ON_S:
        if (b == BTN_UP)   { if (++temp_s > 59) temp_s = 0; }
 8003558:	79fb      	ldrb	r3, [r7, #7]
 800355a:	2b03      	cmp	r3, #3
 800355c:	d10c      	bne.n	8003578 <Screen_HandleButton+0x5ec>
 800355e:	4b5f      	ldr	r3, [pc, #380]	@ (80036dc <Screen_HandleButton+0x750>)
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	3301      	adds	r3, #1
 8003564:	b2da      	uxtb	r2, r3
 8003566:	4b5d      	ldr	r3, [pc, #372]	@ (80036dc <Screen_HandleButton+0x750>)
 8003568:	701a      	strb	r2, [r3, #0]
 800356a:	4b5c      	ldr	r3, [pc, #368]	@ (80036dc <Screen_HandleButton+0x750>)
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	2b3b      	cmp	r3, #59	@ 0x3b
 8003570:	d902      	bls.n	8003578 <Screen_HandleButton+0x5ec>
 8003572:	4b5a      	ldr	r3, [pc, #360]	@ (80036dc <Screen_HandleButton+0x750>)
 8003574:	2200      	movs	r2, #0
 8003576:	701a      	strb	r2, [r3, #0]
        if (b == BTN_DOWN) { if (temp_s==0) temp_s = 59; else temp_s--; }
 8003578:	79fb      	ldrb	r3, [r7, #7]
 800357a:	2b04      	cmp	r3, #4
 800357c:	d10d      	bne.n	800359a <Screen_HandleButton+0x60e>
 800357e:	4b57      	ldr	r3, [pc, #348]	@ (80036dc <Screen_HandleButton+0x750>)
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d103      	bne.n	800358e <Screen_HandleButton+0x602>
 8003586:	4b55      	ldr	r3, [pc, #340]	@ (80036dc <Screen_HandleButton+0x750>)
 8003588:	223b      	movs	r2, #59	@ 0x3b
 800358a:	701a      	strb	r2, [r3, #0]
 800358c:	e005      	b.n	800359a <Screen_HandleButton+0x60e>
 800358e:	4b53      	ldr	r3, [pc, #332]	@ (80036dc <Screen_HandleButton+0x750>)
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	3b01      	subs	r3, #1
 8003594:	b2da      	uxtb	r2, r3
 8003596:	4b51      	ldr	r3, [pc, #324]	@ (80036dc <Screen_HandleButton+0x750>)
 8003598:	701a      	strb	r2, [r3, #0]
        if (b == BTN_SELECT){
 800359a:	79fb      	ldrb	r3, [r7, #7]
 800359c:	2b02      	cmp	r3, #2
 800359e:	f040 8094 	bne.w	80036ca <Screen_HandleButton+0x73e>
            char cmd[32];
            snprintf(cmd,sizeof(cmd),"TWIST_ONDUR:%02u:%02u", temp_m, temp_s);
 80035a2:	4b4f      	ldr	r3, [pc, #316]	@ (80036e0 <Screen_HandleButton+0x754>)
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	461a      	mov	r2, r3
 80035a8:	4b4c      	ldr	r3, [pc, #304]	@ (80036dc <Screen_HandleButton+0x750>)
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	f107 000c 	add.w	r0, r7, #12
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	4613      	mov	r3, r2
 80035b4:	4a4d      	ldr	r2, [pc, #308]	@ (80036ec <Screen_HandleButton+0x760>)
 80035b6:	2120      	movs	r1, #32
 80035b8:	f004 fd50 	bl	800805c <sniprintf>
            send_cmd(cmd);
 80035bc:	f107 030c 	add.w	r3, r7, #12
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7ff fcb5 	bl	8002f30 <send_cmd>
            goto_dash_cycle();
 80035c6:	f7ff faa7 	bl	8002b18 <goto_dash_cycle>
        }
        break;
 80035ca:	e07e      	b.n	80036ca <Screen_HandleButton+0x73e>

    case UI_EDIT_TWIST_OFF_M:
        if (b == BTN_UP)   { if (++temp_m > 59) temp_m = 0; }
 80035cc:	79fb      	ldrb	r3, [r7, #7]
 80035ce:	2b03      	cmp	r3, #3
 80035d0:	d10c      	bne.n	80035ec <Screen_HandleButton+0x660>
 80035d2:	4b43      	ldr	r3, [pc, #268]	@ (80036e0 <Screen_HandleButton+0x754>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	3301      	adds	r3, #1
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	4b41      	ldr	r3, [pc, #260]	@ (80036e0 <Screen_HandleButton+0x754>)
 80035dc:	701a      	strb	r2, [r3, #0]
 80035de:	4b40      	ldr	r3, [pc, #256]	@ (80036e0 <Screen_HandleButton+0x754>)
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	2b3b      	cmp	r3, #59	@ 0x3b
 80035e4:	d902      	bls.n	80035ec <Screen_HandleButton+0x660>
 80035e6:	4b3e      	ldr	r3, [pc, #248]	@ (80036e0 <Screen_HandleButton+0x754>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	701a      	strb	r2, [r3, #0]
        if (b == BTN_DOWN) { if (temp_m==0) temp_m = 59; else temp_m--; }
 80035ec:	79fb      	ldrb	r3, [r7, #7]
 80035ee:	2b04      	cmp	r3, #4
 80035f0:	d10d      	bne.n	800360e <Screen_HandleButton+0x682>
 80035f2:	4b3b      	ldr	r3, [pc, #236]	@ (80036e0 <Screen_HandleButton+0x754>)
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d103      	bne.n	8003602 <Screen_HandleButton+0x676>
 80035fa:	4b39      	ldr	r3, [pc, #228]	@ (80036e0 <Screen_HandleButton+0x754>)
 80035fc:	223b      	movs	r2, #59	@ 0x3b
 80035fe:	701a      	strb	r2, [r3, #0]
 8003600:	e005      	b.n	800360e <Screen_HandleButton+0x682>
 8003602:	4b37      	ldr	r3, [pc, #220]	@ (80036e0 <Screen_HandleButton+0x754>)
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	3b01      	subs	r3, #1
 8003608:	b2da      	uxtb	r2, r3
 800360a:	4b35      	ldr	r3, [pc, #212]	@ (80036e0 <Screen_HandleButton+0x754>)
 800360c:	701a      	strb	r2, [r3, #0]
        if (b == BTN_SELECT){ ui = UI_EDIT_TWIST_OFF_S; }
 800360e:	79fb      	ldrb	r3, [r7, #7]
 8003610:	2b02      	cmp	r3, #2
 8003612:	d15c      	bne.n	80036ce <Screen_HandleButton+0x742>
 8003614:	4b34      	ldr	r3, [pc, #208]	@ (80036e8 <Screen_HandleButton+0x75c>)
 8003616:	2212      	movs	r2, #18
 8003618:	701a      	strb	r2, [r3, #0]
        break;
 800361a:	e058      	b.n	80036ce <Screen_HandleButton+0x742>
    case UI_EDIT_TWIST_OFF_S:
        if (b == BTN_UP)   { if (++temp_s > 59) temp_s = 0; }
 800361c:	79fb      	ldrb	r3, [r7, #7]
 800361e:	2b03      	cmp	r3, #3
 8003620:	d10c      	bne.n	800363c <Screen_HandleButton+0x6b0>
 8003622:	4b2e      	ldr	r3, [pc, #184]	@ (80036dc <Screen_HandleButton+0x750>)
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	3301      	adds	r3, #1
 8003628:	b2da      	uxtb	r2, r3
 800362a:	4b2c      	ldr	r3, [pc, #176]	@ (80036dc <Screen_HandleButton+0x750>)
 800362c:	701a      	strb	r2, [r3, #0]
 800362e:	4b2b      	ldr	r3, [pc, #172]	@ (80036dc <Screen_HandleButton+0x750>)
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	2b3b      	cmp	r3, #59	@ 0x3b
 8003634:	d902      	bls.n	800363c <Screen_HandleButton+0x6b0>
 8003636:	4b29      	ldr	r3, [pc, #164]	@ (80036dc <Screen_HandleButton+0x750>)
 8003638:	2200      	movs	r2, #0
 800363a:	701a      	strb	r2, [r3, #0]
        if (b == BTN_DOWN) { if (temp_s==0) temp_s = 59; else temp_s--; }
 800363c:	79fb      	ldrb	r3, [r7, #7]
 800363e:	2b04      	cmp	r3, #4
 8003640:	d10d      	bne.n	800365e <Screen_HandleButton+0x6d2>
 8003642:	4b26      	ldr	r3, [pc, #152]	@ (80036dc <Screen_HandleButton+0x750>)
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d103      	bne.n	8003652 <Screen_HandleButton+0x6c6>
 800364a:	4b24      	ldr	r3, [pc, #144]	@ (80036dc <Screen_HandleButton+0x750>)
 800364c:	223b      	movs	r2, #59	@ 0x3b
 800364e:	701a      	strb	r2, [r3, #0]
 8003650:	e005      	b.n	800365e <Screen_HandleButton+0x6d2>
 8003652:	4b22      	ldr	r3, [pc, #136]	@ (80036dc <Screen_HandleButton+0x750>)
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	3b01      	subs	r3, #1
 8003658:	b2da      	uxtb	r2, r3
 800365a:	4b20      	ldr	r3, [pc, #128]	@ (80036dc <Screen_HandleButton+0x750>)
 800365c:	701a      	strb	r2, [r3, #0]
        if (b == BTN_SELECT){
 800365e:	79fb      	ldrb	r3, [r7, #7]
 8003660:	2b02      	cmp	r3, #2
 8003662:	d136      	bne.n	80036d2 <Screen_HandleButton+0x746>
            char cmd[32];
            snprintf(cmd,sizeof(cmd),"TWIST_OFFDUR:%02u:%02u", temp_m, temp_s);
 8003664:	4b1e      	ldr	r3, [pc, #120]	@ (80036e0 <Screen_HandleButton+0x754>)
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	461a      	mov	r2, r3
 800366a:	4b1c      	ldr	r3, [pc, #112]	@ (80036dc <Screen_HandleButton+0x750>)
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	f107 000c 	add.w	r0, r7, #12
 8003672:	9300      	str	r3, [sp, #0]
 8003674:	4613      	mov	r3, r2
 8003676:	4a1e      	ldr	r2, [pc, #120]	@ (80036f0 <Screen_HandleButton+0x764>)
 8003678:	2120      	movs	r1, #32
 800367a:	f004 fcef 	bl	800805c <sniprintf>
            send_cmd(cmd);
 800367e:	f107 030c 	add.w	r3, r7, #12
 8003682:	4618      	mov	r0, r3
 8003684:	f7ff fc54 	bl	8002f30 <send_cmd>
            goto_dash_cycle();
 8003688:	f7ff fa46 	bl	8002b18 <goto_dash_cycle>
        }
        break;
 800368c:	e021      	b.n	80036d2 <Screen_HandleButton+0x746>

    default: break;
 800368e:	bf00      	nop
 8003690:	e020      	b.n	80036d4 <Screen_HandleButton+0x748>
        break;
 8003692:	bf00      	nop
 8003694:	e01e      	b.n	80036d4 <Screen_HandleButton+0x748>
        break;
 8003696:	bf00      	nop
 8003698:	e01c      	b.n	80036d4 <Screen_HandleButton+0x748>
        break;
 800369a:	bf00      	nop
 800369c:	e01a      	b.n	80036d4 <Screen_HandleButton+0x748>
        break;
 800369e:	bf00      	nop
 80036a0:	e018      	b.n	80036d4 <Screen_HandleButton+0x748>
        break;
 80036a2:	bf00      	nop
 80036a4:	e016      	b.n	80036d4 <Screen_HandleButton+0x748>
        break;
 80036a6:	bf00      	nop
 80036a8:	e014      	b.n	80036d4 <Screen_HandleButton+0x748>
        break;
 80036aa:	bf00      	nop
 80036ac:	e012      	b.n	80036d4 <Screen_HandleButton+0x748>
        break;
 80036ae:	bf00      	nop
 80036b0:	e010      	b.n	80036d4 <Screen_HandleButton+0x748>
        break;
 80036b2:	bf00      	nop
 80036b4:	e00e      	b.n	80036d4 <Screen_HandleButton+0x748>
        break;
 80036b6:	bf00      	nop
 80036b8:	e00c      	b.n	80036d4 <Screen_HandleButton+0x748>
        break;
 80036ba:	bf00      	nop
 80036bc:	e00a      	b.n	80036d4 <Screen_HandleButton+0x748>
        break;
 80036be:	bf00      	nop
 80036c0:	e008      	b.n	80036d4 <Screen_HandleButton+0x748>
        break;
 80036c2:	bf00      	nop
 80036c4:	e006      	b.n	80036d4 <Screen_HandleButton+0x748>
        break;
 80036c6:	bf00      	nop
 80036c8:	e004      	b.n	80036d4 <Screen_HandleButton+0x748>
        break;
 80036ca:	bf00      	nop
 80036cc:	e002      	b.n	80036d4 <Screen_HandleButton+0x748>
        break;
 80036ce:	bf00      	nop
 80036d0:	e000      	b.n	80036d4 <Screen_HandleButton+0x748>
        break;
 80036d2:	bf00      	nop
    }
}
 80036d4:	374c      	adds	r7, #76	@ 0x4c
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd90      	pop	{r4, r7, pc}
 80036da:	bf00      	nop
 80036dc:	2000039b 	.word	0x2000039b
 80036e0:	2000039a 	.word	0x2000039a
 80036e4:	08009ad0 	.word	0x08009ad0
 80036e8:	20000380 	.word	0x20000380
 80036ec:	08009ae8 	.word	0x08009ae8
 80036f0:	08009b00 	.word	0x08009b00

080036f4 <Screen_Update>:

void Screen_Update(void){
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
    uint32_t now = HAL_GetTick();
 80036fa:	f000 fd2d 	bl	8004158 <HAL_GetTick>
 80036fe:	6078      	str	r0, [r7, #4]

    /* auto-advance dashboard pages */
    if (ui == UI_WELCOME){
 8003700:	4b84      	ldr	r3, [pc, #528]	@ (8003914 <Screen_Update+0x220>)
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d110      	bne.n	800372a <Screen_Update+0x36>
        if (now - lastLcdUpdateTime < WELCOME_MS){
 8003708:	4b83      	ldr	r3, [pc, #524]	@ (8003918 <Screen_Update+0x224>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003714:	4293      	cmp	r3, r2
 8003716:	d202      	bcs.n	800371e <Screen_Update+0x2a>
            show_welcome();
 8003718:	f7ff fa12 	bl	8002b40 <show_welcome>
            return;
 800371c:	e0f7      	b.n	800390e <Screen_Update+0x21a>
        }
        ui = UI_DASH_WATER;
 800371e:	4b7d      	ldr	r3, [pc, #500]	@ (8003914 <Screen_Update+0x220>)
 8003720:	2201      	movs	r2, #1
 8003722:	701a      	strb	r2, [r3, #0]
        lastLcdUpdateTime = now;
 8003724:	4a7c      	ldr	r2, [pc, #496]	@ (8003918 <Screen_Update+0x224>)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6013      	str	r3, [r2, #0]
    }

    /* periodic page refresh / cycle */
    if (ui >= UI_DASH_WATER && ui <= UI_DASH_TWIST){
 800372a:	4b7a      	ldr	r3, [pc, #488]	@ (8003914 <Screen_Update+0x220>)
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d01b      	beq.n	800376a <Screen_Update+0x76>
 8003732:	4b78      	ldr	r3, [pc, #480]	@ (8003914 <Screen_Update+0x220>)
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	2b04      	cmp	r3, #4
 8003738:	d817      	bhi.n	800376a <Screen_Update+0x76>
        if (now - lastLcdUpdateTime >= PAGE_MS){
 800373a:	4b77      	ldr	r3, [pc, #476]	@ (8003918 <Screen_Update+0x224>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8003746:	4293      	cmp	r3, r2
 8003748:	d30f      	bcc.n	800376a <Screen_Update+0x76>
            ui = (UiState)(ui + 1);
 800374a:	4b72      	ldr	r3, [pc, #456]	@ (8003914 <Screen_Update+0x220>)
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	3301      	adds	r3, #1
 8003750:	b2da      	uxtb	r2, r3
 8003752:	4b70      	ldr	r3, [pc, #448]	@ (8003914 <Screen_Update+0x220>)
 8003754:	701a      	strb	r2, [r3, #0]
            if (ui > UI_DASH_TWIST) ui = UI_DASH_WATER;
 8003756:	4b6f      	ldr	r3, [pc, #444]	@ (8003914 <Screen_Update+0x220>)
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	2b04      	cmp	r3, #4
 800375c:	d902      	bls.n	8003764 <Screen_Update+0x70>
 800375e:	4b6d      	ldr	r3, [pc, #436]	@ (8003914 <Screen_Update+0x220>)
 8003760:	2201      	movs	r2, #1
 8003762:	701a      	strb	r2, [r3, #0]
            lastLcdUpdateTime = now;
 8003764:	4a6c      	ldr	r2, [pc, #432]	@ (8003918 <Screen_Update+0x224>)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6013      	str	r3, [r2, #0]
        }
    }
    // Clear only when UI page changes
    if (ui != last_ui) {
 800376a:	4b6a      	ldr	r3, [pc, #424]	@ (8003914 <Screen_Update+0x220>)
 800376c:	781a      	ldrb	r2, [r3, #0]
 800376e:	4b6b      	ldr	r3, [pc, #428]	@ (800391c <Screen_Update+0x228>)
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	429a      	cmp	r2, r3
 8003774:	d005      	beq.n	8003782 <Screen_Update+0x8e>
        lcd_clear();
 8003776:	f7fd fb95 	bl	8000ea4 <lcd_clear>
        last_ui = ui;
 800377a:	4b66      	ldr	r3, [pc, #408]	@ (8003914 <Screen_Update+0x220>)
 800377c:	781a      	ldrb	r2, [r3, #0]
 800377e:	4b67      	ldr	r3, [pc, #412]	@ (800391c <Screen_Update+0x228>)
 8003780:	701a      	strb	r2, [r3, #0]
    }

    /* render current state */
    switch(ui){
 8003782:	4b64      	ldr	r3, [pc, #400]	@ (8003914 <Screen_Update+0x220>)
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	3b01      	subs	r3, #1
 8003788:	2b13      	cmp	r3, #19
 800378a:	f200 80bf 	bhi.w	800390c <Screen_Update+0x218>
 800378e:	a201      	add	r2, pc, #4	@ (adr r2, 8003794 <Screen_Update+0xa0>)
 8003790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003794:	080037e5 	.word	0x080037e5
 8003798:	080037eb 	.word	0x080037eb
 800379c:	080037f1 	.word	0x080037f1
 80037a0:	080037f7 	.word	0x080037f7
 80037a4:	080037fd 	.word	0x080037fd
 80037a8:	08003827 	.word	0x08003827
 80037ac:	08003835 	.word	0x08003835
 80037b0:	08003847 	.word	0x08003847
 80037b4:	08003859 	.word	0x08003859
 80037b8:	0800386b 	.word	0x0800386b
 80037bc:	0800387d 	.word	0x0800387d
 80037c0:	0800388f 	.word	0x0800388f
 80037c4:	080038a1 	.word	0x080038a1
 80037c8:	080038b3 	.word	0x080038b3
 80037cc:	080038c5 	.word	0x080038c5
 80037d0:	080038d7 	.word	0x080038d7
 80037d4:	080038e9 	.word	0x080038e9
 80037d8:	080038fb 	.word	0x080038fb
 80037dc:	08003803 	.word	0x08003803
 80037e0:	08003815 	.word	0x08003815
        case UI_DASH_WATER:  show_dash_water();  break;
 80037e4:	f7ff f9bc 	bl	8002b60 <show_dash_water>
 80037e8:	e091      	b.n	800390e <Screen_Update+0x21a>
        case UI_DASH_MODE:   show_dash_mode();   break;
 80037ea:	f7ff f9fd 	bl	8002be8 <show_dash_mode>
 80037ee:	e08e      	b.n	800390e <Screen_Update+0x21a>
        case UI_DASH_SEARCH: show_dash_search(); break;
 80037f0:	f7ff fa3c 	bl	8002c6c <show_dash_search>
 80037f4:	e08b      	b.n	800390e <Screen_Update+0x21a>
        case UI_DASH_TWIST:  show_dash_twist();  break;
 80037f6:	f7ff fa65 	bl	8002cc4 <show_dash_twist>
 80037fa:	e088      	b.n	800390e <Screen_Update+0x21a>
        case UI_MENU:        show_menu();        break;
 80037fc:	f7ff fa8e 	bl	8002d1c <show_menu>
 8003800:	e085      	b.n	800390e <Screen_Update+0x21a>

        case UI_CONFIRM_MANUAL_ON:
            lcd_clear(); lcd_line0("Manual -> ON");
 8003802:	f7fd fb4f 	bl	8000ea4 <lcd_clear>
 8003806:	4846      	ldr	r0, [pc, #280]	@ (8003920 <Screen_Update+0x22c>)
 8003808:	f7ff f934 	bl	8002a74 <lcd_line0>
            lcd_line1("SEL:OK  UP/DN:Back");
 800380c:	4845      	ldr	r0, [pc, #276]	@ (8003924 <Screen_Update+0x230>)
 800380e:	f7ff f940 	bl	8002a92 <lcd_line1>
            break;
 8003812:	e07c      	b.n	800390e <Screen_Update+0x21a>
        case UI_CONFIRM_MANUAL_OFF:
            lcd_clear(); lcd_line0("Manual -> OFF");
 8003814:	f7fd fb46 	bl	8000ea4 <lcd_clear>
 8003818:	4843      	ldr	r0, [pc, #268]	@ (8003928 <Screen_Update+0x234>)
 800381a:	f7ff f92b 	bl	8002a74 <lcd_line0>
            lcd_line1("SEL:OK  UP/DN:Back");
 800381e:	4841      	ldr	r0, [pc, #260]	@ (8003924 <Screen_Update+0x230>)
 8003820:	f7ff f937 	bl	8002a92 <lcd_line1>
            break;
 8003824:	e073      	b.n	800390e <Screen_Update+0x21a>

        case UI_EDIT_COUNTDOWN_MIN:
            show_edit_mm("Countdown (min)", temp_m);
 8003826:	4b41      	ldr	r3, [pc, #260]	@ (800392c <Screen_Update+0x238>)
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	4619      	mov	r1, r3
 800382c:	4840      	ldr	r0, [pc, #256]	@ (8003930 <Screen_Update+0x23c>)
 800382e:	f7ff faa7 	bl	8002d80 <show_edit_mm>
            break;
 8003832:	e06c      	b.n	800390e <Screen_Update+0x21a>

        case UI_EDIT_TIMER1_ON_H:
            show_edit_hhmm("Timer1 ON  HH", temp_h, temp_m);
 8003834:	4b3f      	ldr	r3, [pc, #252]	@ (8003934 <Screen_Update+0x240>)
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	4a3c      	ldr	r2, [pc, #240]	@ (800392c <Screen_Update+0x238>)
 800383a:	7812      	ldrb	r2, [r2, #0]
 800383c:	4619      	mov	r1, r3
 800383e:	483e      	ldr	r0, [pc, #248]	@ (8003938 <Screen_Update+0x244>)
 8003840:	f7ff fadc 	bl	8002dfc <show_edit_hhmm>
            break;
 8003844:	e063      	b.n	800390e <Screen_Update+0x21a>
        case UI_EDIT_TIMER1_ON_M:
            show_edit_hhmm("Timer1 ON  MM", temp_h, temp_m);
 8003846:	4b3b      	ldr	r3, [pc, #236]	@ (8003934 <Screen_Update+0x240>)
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	4a38      	ldr	r2, [pc, #224]	@ (800392c <Screen_Update+0x238>)
 800384c:	7812      	ldrb	r2, [r2, #0]
 800384e:	4619      	mov	r1, r3
 8003850:	483a      	ldr	r0, [pc, #232]	@ (800393c <Screen_Update+0x248>)
 8003852:	f7ff fad3 	bl	8002dfc <show_edit_hhmm>
            break;
 8003856:	e05a      	b.n	800390e <Screen_Update+0x21a>
        case UI_EDIT_TIMER1_OFF_H:
            show_edit_hhmm("Timer1 OFF HH", temp_h, temp_m);
 8003858:	4b36      	ldr	r3, [pc, #216]	@ (8003934 <Screen_Update+0x240>)
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	4a33      	ldr	r2, [pc, #204]	@ (800392c <Screen_Update+0x238>)
 800385e:	7812      	ldrb	r2, [r2, #0]
 8003860:	4619      	mov	r1, r3
 8003862:	4837      	ldr	r0, [pc, #220]	@ (8003940 <Screen_Update+0x24c>)
 8003864:	f7ff faca 	bl	8002dfc <show_edit_hhmm>
            break;
 8003868:	e051      	b.n	800390e <Screen_Update+0x21a>
        case UI_EDIT_TIMER1_OFF_M:
            show_edit_hhmm("Timer1 OFF MM", temp_h, temp_m);
 800386a:	4b32      	ldr	r3, [pc, #200]	@ (8003934 <Screen_Update+0x240>)
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	4a2f      	ldr	r2, [pc, #188]	@ (800392c <Screen_Update+0x238>)
 8003870:	7812      	ldrb	r2, [r2, #0]
 8003872:	4619      	mov	r1, r3
 8003874:	4833      	ldr	r0, [pc, #204]	@ (8003944 <Screen_Update+0x250>)
 8003876:	f7ff fac1 	bl	8002dfc <show_edit_hhmm>
            break;
 800387a:	e048      	b.n	800390e <Screen_Update+0x21a>

        case UI_EDIT_SEARCH_GAP_M:
            show_edit_ms("Search Gap  MM", temp_m, temp_s);
 800387c:	4b2b      	ldr	r3, [pc, #172]	@ (800392c <Screen_Update+0x238>)
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	4a31      	ldr	r2, [pc, #196]	@ (8003948 <Screen_Update+0x254>)
 8003882:	7812      	ldrb	r2, [r2, #0]
 8003884:	4619      	mov	r1, r3
 8003886:	4831      	ldr	r0, [pc, #196]	@ (800394c <Screen_Update+0x258>)
 8003888:	f7ff fa96 	bl	8002db8 <show_edit_ms>
            break;
 800388c:	e03f      	b.n	800390e <Screen_Update+0x21a>
        case UI_EDIT_SEARCH_GAP_S:
            show_edit_ms("Search Gap  SS", temp_m, temp_s);
 800388e:	4b27      	ldr	r3, [pc, #156]	@ (800392c <Screen_Update+0x238>)
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	4a2d      	ldr	r2, [pc, #180]	@ (8003948 <Screen_Update+0x254>)
 8003894:	7812      	ldrb	r2, [r2, #0]
 8003896:	4619      	mov	r1, r3
 8003898:	482d      	ldr	r0, [pc, #180]	@ (8003950 <Screen_Update+0x25c>)
 800389a:	f7ff fa8d 	bl	8002db8 <show_edit_ms>
            break;
 800389e:	e036      	b.n	800390e <Screen_Update+0x21a>

        case UI_EDIT_SEARCH_DRY_M:
            show_edit_ms("Dry Run     MM", temp_m, temp_s);
 80038a0:	4b22      	ldr	r3, [pc, #136]	@ (800392c <Screen_Update+0x238>)
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	4a28      	ldr	r2, [pc, #160]	@ (8003948 <Screen_Update+0x254>)
 80038a6:	7812      	ldrb	r2, [r2, #0]
 80038a8:	4619      	mov	r1, r3
 80038aa:	482a      	ldr	r0, [pc, #168]	@ (8003954 <Screen_Update+0x260>)
 80038ac:	f7ff fa84 	bl	8002db8 <show_edit_ms>
            break;
 80038b0:	e02d      	b.n	800390e <Screen_Update+0x21a>
        case UI_EDIT_SEARCH_DRY_S:
            show_edit_ms("Dry Run     SS", temp_m, temp_s);
 80038b2:	4b1e      	ldr	r3, [pc, #120]	@ (800392c <Screen_Update+0x238>)
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	4a24      	ldr	r2, [pc, #144]	@ (8003948 <Screen_Update+0x254>)
 80038b8:	7812      	ldrb	r2, [r2, #0]
 80038ba:	4619      	mov	r1, r3
 80038bc:	4826      	ldr	r0, [pc, #152]	@ (8003958 <Screen_Update+0x264>)
 80038be:	f7ff fa7b 	bl	8002db8 <show_edit_ms>
            break;
 80038c2:	e024      	b.n	800390e <Screen_Update+0x21a>

        case UI_EDIT_TWIST_ON_M:
            show_edit_ms("Twist ON    MM", temp_m, temp_s);
 80038c4:	4b19      	ldr	r3, [pc, #100]	@ (800392c <Screen_Update+0x238>)
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	4a1f      	ldr	r2, [pc, #124]	@ (8003948 <Screen_Update+0x254>)
 80038ca:	7812      	ldrb	r2, [r2, #0]
 80038cc:	4619      	mov	r1, r3
 80038ce:	4823      	ldr	r0, [pc, #140]	@ (800395c <Screen_Update+0x268>)
 80038d0:	f7ff fa72 	bl	8002db8 <show_edit_ms>
            break;
 80038d4:	e01b      	b.n	800390e <Screen_Update+0x21a>
        case UI_EDIT_TWIST_ON_S:
            show_edit_ms("Twist ON    SS", temp_m, temp_s);
 80038d6:	4b15      	ldr	r3, [pc, #84]	@ (800392c <Screen_Update+0x238>)
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	4a1b      	ldr	r2, [pc, #108]	@ (8003948 <Screen_Update+0x254>)
 80038dc:	7812      	ldrb	r2, [r2, #0]
 80038de:	4619      	mov	r1, r3
 80038e0:	481f      	ldr	r0, [pc, #124]	@ (8003960 <Screen_Update+0x26c>)
 80038e2:	f7ff fa69 	bl	8002db8 <show_edit_ms>
            break;
 80038e6:	e012      	b.n	800390e <Screen_Update+0x21a>

        case UI_EDIT_TWIST_OFF_M:
            show_edit_ms("Twist OFF   MM", temp_m, temp_s);
 80038e8:	4b10      	ldr	r3, [pc, #64]	@ (800392c <Screen_Update+0x238>)
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	4a16      	ldr	r2, [pc, #88]	@ (8003948 <Screen_Update+0x254>)
 80038ee:	7812      	ldrb	r2, [r2, #0]
 80038f0:	4619      	mov	r1, r3
 80038f2:	481c      	ldr	r0, [pc, #112]	@ (8003964 <Screen_Update+0x270>)
 80038f4:	f7ff fa60 	bl	8002db8 <show_edit_ms>
            break;
 80038f8:	e009      	b.n	800390e <Screen_Update+0x21a>
        case UI_EDIT_TWIST_OFF_S:
            show_edit_ms("Twist OFF   SS", temp_m, temp_s);
 80038fa:	4b0c      	ldr	r3, [pc, #48]	@ (800392c <Screen_Update+0x238>)
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	4a12      	ldr	r2, [pc, #72]	@ (8003948 <Screen_Update+0x254>)
 8003900:	7812      	ldrb	r2, [r2, #0]
 8003902:	4619      	mov	r1, r3
 8003904:	4818      	ldr	r0, [pc, #96]	@ (8003968 <Screen_Update+0x274>)
 8003906:	f7ff fa57 	bl	8002db8 <show_edit_ms>
            break;
 800390a:	e000      	b.n	800390e <Screen_Update+0x21a>

        default: break;
 800390c:	bf00      	nop
    }
}
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	20000380 	.word	0x20000380
 8003918:	2000037c 	.word	0x2000037c
 800391c:	20000034 	.word	0x20000034
 8003920:	08009b18 	.word	0x08009b18
 8003924:	08009b28 	.word	0x08009b28
 8003928:	08009b3c 	.word	0x08009b3c
 800392c:	2000039a 	.word	0x2000039a
 8003930:	080098c8 	.word	0x080098c8
 8003934:	20000399 	.word	0x20000399
 8003938:	08009b4c 	.word	0x08009b4c
 800393c:	08009b5c 	.word	0x08009b5c
 8003940:	08009b6c 	.word	0x08009b6c
 8003944:	08009b7c 	.word	0x08009b7c
 8003948:	2000039b 	.word	0x2000039b
 800394c:	08009b8c 	.word	0x08009b8c
 8003950:	08009b9c 	.word	0x08009b9c
 8003954:	08009bac 	.word	0x08009bac
 8003958:	08009bbc 	.word	0x08009bbc
 800395c:	08009bcc 	.word	0x08009bcc
 8003960:	08009bdc 	.word	0x08009bdc
 8003964:	08009bec 	.word	0x08009bec
 8003968:	08009bfc 	.word	0x08009bfc

0800396c <Screen_HandleSwitches>:

/* ===== Convenience mapping (from main) ===== */
void Screen_HandleSwitches(void){
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
    if (Switch_WasPressed(1)) Screen_HandleButton(BTN_RESET);
 8003970:	2001      	movs	r0, #1
 8003972:	f000 fa95 	bl	8003ea0 <Switch_WasPressed>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d002      	beq.n	8003982 <Screen_HandleSwitches+0x16>
 800397c:	2001      	movs	r0, #1
 800397e:	f7ff fb05 	bl	8002f8c <Screen_HandleButton>
    if (Switch_WasPressed(2)) Screen_HandleButton(BTN_SELECT);
 8003982:	2002      	movs	r0, #2
 8003984:	f000 fa8c 	bl	8003ea0 <Switch_WasPressed>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d002      	beq.n	8003994 <Screen_HandleSwitches+0x28>
 800398e:	2002      	movs	r0, #2
 8003990:	f7ff fafc 	bl	8002f8c <Screen_HandleButton>
    if (Switch_WasPressed(3)) Screen_HandleButton(BTN_UP);
 8003994:	2003      	movs	r0, #3
 8003996:	f000 fa83 	bl	8003ea0 <Switch_WasPressed>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d002      	beq.n	80039a6 <Screen_HandleSwitches+0x3a>
 80039a0:	2003      	movs	r0, #3
 80039a2:	f7ff faf3 	bl	8002f8c <Screen_HandleButton>
    if (Switch_WasPressed(4)) Screen_HandleButton(BTN_DOWN);
 80039a6:	2004      	movs	r0, #4
 80039a8:	f000 fa7a 	bl	8003ea0 <Switch_WasPressed>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d002      	beq.n	80039b8 <Screen_HandleSwitches+0x4c>
 80039b2:	2004      	movs	r0, #4
 80039b4:	f7ff faea 	bl	8002f8c <Screen_HandleButton>
}
 80039b8:	bf00      	nop
 80039ba:	bd80      	pop	{r7, pc}

080039bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80039c2:	4b15      	ldr	r3, [pc, #84]	@ (8003a18 <HAL_MspInit+0x5c>)
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	4a14      	ldr	r2, [pc, #80]	@ (8003a18 <HAL_MspInit+0x5c>)
 80039c8:	f043 0301 	orr.w	r3, r3, #1
 80039cc:	6193      	str	r3, [r2, #24]
 80039ce:	4b12      	ldr	r3, [pc, #72]	@ (8003a18 <HAL_MspInit+0x5c>)
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	60bb      	str	r3, [r7, #8]
 80039d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80039da:	4b0f      	ldr	r3, [pc, #60]	@ (8003a18 <HAL_MspInit+0x5c>)
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	4a0e      	ldr	r2, [pc, #56]	@ (8003a18 <HAL_MspInit+0x5c>)
 80039e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039e4:	61d3      	str	r3, [r2, #28]
 80039e6:	4b0c      	ldr	r3, [pc, #48]	@ (8003a18 <HAL_MspInit+0x5c>)
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039ee:	607b      	str	r3, [r7, #4]
 80039f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80039f2:	4b0a      	ldr	r3, [pc, #40]	@ (8003a1c <HAL_MspInit+0x60>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	60fb      	str	r3, [r7, #12]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80039fe:	60fb      	str	r3, [r7, #12]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003a06:	60fb      	str	r3, [r7, #12]
 8003a08:	4a04      	ldr	r2, [pc, #16]	@ (8003a1c <HAL_MspInit+0x60>)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a0e:	bf00      	nop
 8003a10:	3714      	adds	r7, #20
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bc80      	pop	{r7}
 8003a16:	4770      	bx	lr
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	40010000 	.word	0x40010000

08003a20 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b088      	sub	sp, #32
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a28:	f107 0310 	add.w	r3, r7, #16
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	601a      	str	r2, [r3, #0]
 8003a30:	605a      	str	r2, [r3, #4]
 8003a32:	609a      	str	r2, [r3, #8]
 8003a34:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a14      	ldr	r2, [pc, #80]	@ (8003a8c <HAL_ADC_MspInit+0x6c>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d121      	bne.n	8003a84 <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003a40:	4b13      	ldr	r3, [pc, #76]	@ (8003a90 <HAL_ADC_MspInit+0x70>)
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	4a12      	ldr	r2, [pc, #72]	@ (8003a90 <HAL_ADC_MspInit+0x70>)
 8003a46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a4a:	6193      	str	r3, [r2, #24]
 8003a4c:	4b10      	ldr	r3, [pc, #64]	@ (8003a90 <HAL_ADC_MspInit+0x70>)
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a54:	60fb      	str	r3, [r7, #12]
 8003a56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a58:	4b0d      	ldr	r3, [pc, #52]	@ (8003a90 <HAL_ADC_MspInit+0x70>)
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	4a0c      	ldr	r2, [pc, #48]	@ (8003a90 <HAL_ADC_MspInit+0x70>)
 8003a5e:	f043 0304 	orr.w	r3, r3, #4
 8003a62:	6193      	str	r3, [r2, #24]
 8003a64:	4b0a      	ldr	r3, [pc, #40]	@ (8003a90 <HAL_ADC_MspInit+0x70>)
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	60bb      	str	r3, [r7, #8]
 8003a6e:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003a70:	233f      	movs	r3, #63	@ 0x3f
 8003a72:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a74:	2303      	movs	r3, #3
 8003a76:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a78:	f107 0310 	add.w	r3, r7, #16
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	4805      	ldr	r0, [pc, #20]	@ (8003a94 <HAL_ADC_MspInit+0x74>)
 8003a80:	f001 f956 	bl	8004d30 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003a84:	bf00      	nop
 8003a86:	3720      	adds	r7, #32
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	40012400 	.word	0x40012400
 8003a90:	40021000 	.word	0x40021000
 8003a94:	40010800 	.word	0x40010800

08003a98 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b088      	sub	sp, #32
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aa0:	f107 0310 	add.w	r3, r7, #16
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	601a      	str	r2, [r3, #0]
 8003aa8:	605a      	str	r2, [r3, #4]
 8003aaa:	609a      	str	r2, [r3, #8]
 8003aac:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a16      	ldr	r2, [pc, #88]	@ (8003b0c <HAL_I2C_MspInit+0x74>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d124      	bne.n	8003b02 <HAL_I2C_MspInit+0x6a>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ab8:	4b15      	ldr	r3, [pc, #84]	@ (8003b10 <HAL_I2C_MspInit+0x78>)
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	4a14      	ldr	r2, [pc, #80]	@ (8003b10 <HAL_I2C_MspInit+0x78>)
 8003abe:	f043 0308 	orr.w	r3, r3, #8
 8003ac2:	6193      	str	r3, [r2, #24]
 8003ac4:	4b12      	ldr	r3, [pc, #72]	@ (8003b10 <HAL_I2C_MspInit+0x78>)
 8003ac6:	699b      	ldr	r3, [r3, #24]
 8003ac8:	f003 0308 	and.w	r3, r3, #8
 8003acc:	60fb      	str	r3, [r7, #12]
 8003ace:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003ad0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003ad4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ad6:	2312      	movs	r3, #18
 8003ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ada:	2303      	movs	r3, #3
 8003adc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ade:	f107 0310 	add.w	r3, r7, #16
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	480b      	ldr	r0, [pc, #44]	@ (8003b14 <HAL_I2C_MspInit+0x7c>)
 8003ae6:	f001 f923 	bl	8004d30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003aea:	4b09      	ldr	r3, [pc, #36]	@ (8003b10 <HAL_I2C_MspInit+0x78>)
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	4a08      	ldr	r2, [pc, #32]	@ (8003b10 <HAL_I2C_MspInit+0x78>)
 8003af0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003af4:	61d3      	str	r3, [r2, #28]
 8003af6:	4b06      	ldr	r3, [pc, #24]	@ (8003b10 <HAL_I2C_MspInit+0x78>)
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003afe:	60bb      	str	r3, [r7, #8]
 8003b00:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8003b02:	bf00      	nop
 8003b04:	3720      	adds	r7, #32
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	40005800 	.word	0x40005800
 8003b10:	40021000 	.word	0x40021000
 8003b14:	40010c00 	.word	0x40010c00

08003b18 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b08a      	sub	sp, #40	@ 0x28
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b20:	f107 0314 	add.w	r3, r7, #20
 8003b24:	2200      	movs	r2, #0
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	605a      	str	r2, [r3, #4]
 8003b2a:	609a      	str	r2, [r3, #8]
 8003b2c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a22      	ldr	r2, [pc, #136]	@ (8003bbc <HAL_SPI_MspInit+0xa4>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d13d      	bne.n	8003bb4 <HAL_SPI_MspInit+0x9c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003b38:	4b21      	ldr	r3, [pc, #132]	@ (8003bc0 <HAL_SPI_MspInit+0xa8>)
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	4a20      	ldr	r2, [pc, #128]	@ (8003bc0 <HAL_SPI_MspInit+0xa8>)
 8003b3e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003b42:	6193      	str	r3, [r2, #24]
 8003b44:	4b1e      	ldr	r3, [pc, #120]	@ (8003bc0 <HAL_SPI_MspInit+0xa8>)
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b4c:	613b      	str	r3, [r7, #16]
 8003b4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b50:	4b1b      	ldr	r3, [pc, #108]	@ (8003bc0 <HAL_SPI_MspInit+0xa8>)
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	4a1a      	ldr	r2, [pc, #104]	@ (8003bc0 <HAL_SPI_MspInit+0xa8>)
 8003b56:	f043 0308 	orr.w	r3, r3, #8
 8003b5a:	6193      	str	r3, [r2, #24]
 8003b5c:	4b18      	ldr	r3, [pc, #96]	@ (8003bc0 <HAL_SPI_MspInit+0xa8>)
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	f003 0308 	and.w	r3, r3, #8
 8003b64:	60fb      	str	r3, [r7, #12]
 8003b66:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8003b68:	2328      	movs	r3, #40	@ 0x28
 8003b6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b70:	2303      	movs	r3, #3
 8003b72:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b74:	f107 0314 	add.w	r3, r7, #20
 8003b78:	4619      	mov	r1, r3
 8003b7a:	4812      	ldr	r0, [pc, #72]	@ (8003bc4 <HAL_SPI_MspInit+0xac>)
 8003b7c:	f001 f8d8 	bl	8004d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003b80:	2310      	movs	r3, #16
 8003b82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b84:	2300      	movs	r3, #0
 8003b86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b8c:	f107 0314 	add.w	r3, r7, #20
 8003b90:	4619      	mov	r1, r3
 8003b92:	480c      	ldr	r0, [pc, #48]	@ (8003bc4 <HAL_SPI_MspInit+0xac>)
 8003b94:	f001 f8cc 	bl	8004d30 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8003b98:	4b0b      	ldr	r3, [pc, #44]	@ (8003bc8 <HAL_SPI_MspInit+0xb0>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba0:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8003ba4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba8:	f043 0301 	orr.w	r3, r3, #1
 8003bac:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bae:	4a06      	ldr	r2, [pc, #24]	@ (8003bc8 <HAL_SPI_MspInit+0xb0>)
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb2:	6053      	str	r3, [r2, #4]

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003bb4:	bf00      	nop
 8003bb6:	3728      	adds	r7, #40	@ 0x28
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	40013000 	.word	0x40013000
 8003bc0:	40021000 	.word	0x40021000
 8003bc4:	40010c00 	.word	0x40010c00
 8003bc8:	40010000 	.word	0x40010000

08003bcc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b088      	sub	sp, #32
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bd4:	f107 0310 	add.w	r3, r7, #16
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]
 8003bdc:	605a      	str	r2, [r3, #4]
 8003bde:	609a      	str	r2, [r3, #8]
 8003be0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a1c      	ldr	r2, [pc, #112]	@ (8003c58 <HAL_UART_MspInit+0x8c>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d131      	bne.n	8003c50 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003bec:	4b1b      	ldr	r3, [pc, #108]	@ (8003c5c <HAL_UART_MspInit+0x90>)
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	4a1a      	ldr	r2, [pc, #104]	@ (8003c5c <HAL_UART_MspInit+0x90>)
 8003bf2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003bf6:	6193      	str	r3, [r2, #24]
 8003bf8:	4b18      	ldr	r3, [pc, #96]	@ (8003c5c <HAL_UART_MspInit+0x90>)
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c00:	60fb      	str	r3, [r7, #12]
 8003c02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c04:	4b15      	ldr	r3, [pc, #84]	@ (8003c5c <HAL_UART_MspInit+0x90>)
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	4a14      	ldr	r2, [pc, #80]	@ (8003c5c <HAL_UART_MspInit+0x90>)
 8003c0a:	f043 0304 	orr.w	r3, r3, #4
 8003c0e:	6193      	str	r3, [r2, #24]
 8003c10:	4b12      	ldr	r3, [pc, #72]	@ (8003c5c <HAL_UART_MspInit+0x90>)
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	f003 0304 	and.w	r3, r3, #4
 8003c18:	60bb      	str	r3, [r7, #8]
 8003c1a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003c1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003c20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c22:	2302      	movs	r3, #2
 8003c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c26:	2303      	movs	r3, #3
 8003c28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c2a:	f107 0310 	add.w	r3, r7, #16
 8003c2e:	4619      	mov	r1, r3
 8003c30:	480b      	ldr	r0, [pc, #44]	@ (8003c60 <HAL_UART_MspInit+0x94>)
 8003c32:	f001 f87d 	bl	8004d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003c36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c40:	2300      	movs	r3, #0
 8003c42:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c44:	f107 0310 	add.w	r3, r7, #16
 8003c48:	4619      	mov	r1, r3
 8003c4a:	4805      	ldr	r0, [pc, #20]	@ (8003c60 <HAL_UART_MspInit+0x94>)
 8003c4c:	f001 f870 	bl	8004d30 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8003c50:	bf00      	nop
 8003c52:	3720      	adds	r7, #32
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	40013800 	.word	0x40013800
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	40010800 	.word	0x40010800

08003c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c64:	b480      	push	{r7}
 8003c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003c68:	bf00      	nop
 8003c6a:	e7fd      	b.n	8003c68 <NMI_Handler+0x4>

08003c6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c70:	bf00      	nop
 8003c72:	e7fd      	b.n	8003c70 <HardFault_Handler+0x4>

08003c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c74:	b480      	push	{r7}
 8003c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c78:	bf00      	nop
 8003c7a:	e7fd      	b.n	8003c78 <MemManage_Handler+0x4>

08003c7c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c80:	bf00      	nop
 8003c82:	e7fd      	b.n	8003c80 <BusFault_Handler+0x4>

08003c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c88:	bf00      	nop
 8003c8a:	e7fd      	b.n	8003c88 <UsageFault_Handler+0x4>

08003c8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c90:	bf00      	nop
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bc80      	pop	{r7}
 8003c96:	4770      	bx	lr

08003c98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c9c:	bf00      	nop
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bc80      	pop	{r7}
 8003ca2:	4770      	bx	lr

08003ca4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ca8:	bf00      	nop
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bc80      	pop	{r7}
 8003cae:	4770      	bx	lr

08003cb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003cb4:	f000 fa3e 	bl	8004134 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003cb8:	bf00      	nop
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003cc0:	4802      	ldr	r0, [pc, #8]	@ (8003ccc <RTC_Alarm_IRQHandler+0x10>)
 8003cc2:	f003 f8f5 	bl	8006eb0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8003cc6:	bf00      	nop
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	200001e4 	.word	0x200001e4

08003cd0 <now_ms>:
static GPIO_PinState last_raw[SWITCH_COUNT];       // last sampled raw pin

static uint32_t      press_start_ms[SWITCH_COUNT]; // for long press
static bool          long_fired[SWITCH_COUNT];

static inline uint32_t now_ms(void) { return HAL_GetTick(); }
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	f000 fa40 	bl	8004158 <HAL_GetTick>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	4618      	mov	r0, r3
 8003cdc:	bd80      	pop	{r7, pc}
	...

08003ce0 <read_raw>:

/* --- Internal: map switch index -> GPIO --- */
static GPIO_PinState read_raw(uint8_t idx)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	71fb      	strb	r3, [r7, #7]
    switch (idx) {
 8003cea:	79fb      	ldrb	r3, [r7, #7]
 8003cec:	2b03      	cmp	r3, #3
 8003cee:	d827      	bhi.n	8003d40 <read_raw+0x60>
 8003cf0:	a201      	add	r2, pc, #4	@ (adr r2, 8003cf8 <read_raw+0x18>)
 8003cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf6:	bf00      	nop
 8003cf8:	08003d09 	.word	0x08003d09
 8003cfc:	08003d17 	.word	0x08003d17
 8003d00:	08003d25 	.word	0x08003d25
 8003d04:	08003d33 	.word	0x08003d33
        case 0: return HAL_GPIO_ReadPin(SWITCH1_GPIO_Port, SWITCH1_Pin);
 8003d08:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003d0c:	480f      	ldr	r0, [pc, #60]	@ (8003d4c <read_raw+0x6c>)
 8003d0e:	f001 f993 	bl	8005038 <HAL_GPIO_ReadPin>
 8003d12:	4603      	mov	r3, r0
 8003d14:	e015      	b.n	8003d42 <read_raw+0x62>
        case 1: return HAL_GPIO_ReadPin(SWITCH2_GPIO_Port, SWITCH2_Pin);
 8003d16:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003d1a:	480c      	ldr	r0, [pc, #48]	@ (8003d4c <read_raw+0x6c>)
 8003d1c:	f001 f98c 	bl	8005038 <HAL_GPIO_ReadPin>
 8003d20:	4603      	mov	r3, r0
 8003d22:	e00e      	b.n	8003d42 <read_raw+0x62>
        case 2: return HAL_GPIO_ReadPin(SWITCH3_GPIO_Port, SWITCH3_Pin);
 8003d24:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003d28:	4808      	ldr	r0, [pc, #32]	@ (8003d4c <read_raw+0x6c>)
 8003d2a:	f001 f985 	bl	8005038 <HAL_GPIO_ReadPin>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	e007      	b.n	8003d42 <read_raw+0x62>
        case 3: return HAL_GPIO_ReadPin(SWITCH4_GPIO_Port, SWITCH4_Pin);
 8003d32:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003d36:	4805      	ldr	r0, [pc, #20]	@ (8003d4c <read_raw+0x6c>)
 8003d38:	f001 f97e 	bl	8005038 <HAL_GPIO_ReadPin>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	e000      	b.n	8003d42 <read_raw+0x62>
        default: return GPIO_PIN_SET; // not pressed
 8003d40:	2301      	movs	r3, #1
    }
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	40010c00 	.word	0x40010c00

08003d50 <Switches_Init>:

/* --- Init all switches as input pullup --- */
void Switches_Init(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d56:	1d3b      	adds	r3, r7, #4
 8003d58:	2200      	movs	r2, #0
 8003d5a:	601a      	str	r2, [r3, #0]
 8003d5c:	605a      	str	r2, [r3, #4]
 8003d5e:	609a      	str	r2, [r3, #8]
 8003d60:	60da      	str	r2, [r3, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d62:	4b20      	ldr	r3, [pc, #128]	@ (8003de4 <Switches_Init+0x94>)
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	4a1f      	ldr	r2, [pc, #124]	@ (8003de4 <Switches_Init+0x94>)
 8003d68:	f043 0308 	orr.w	r3, r3, #8
 8003d6c:	6193      	str	r3, [r2, #24]
 8003d6e:	4b1d      	ldr	r3, [pc, #116]	@ (8003de4 <Switches_Init+0x94>)
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	f003 0308 	and.w	r3, r3, #8
 8003d76:	603b      	str	r3, [r7, #0]
 8003d78:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pin  = SWITCH1_Pin|SWITCH2_Pin|SWITCH3_Pin|SWITCH4_Pin;
 8003d82:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8003d86:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(SWITCH1_GPIO_Port, &GPIO_InitStruct);
 8003d88:	1d3b      	adds	r3, r7, #4
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	4816      	ldr	r0, [pc, #88]	@ (8003de8 <Switches_Init+0x98>)
 8003d8e:	f000 ffcf 	bl	8004d30 <HAL_GPIO_Init>

    for (int i = 0; i < SWITCH_COUNT; ++i) {
 8003d92:	2300      	movs	r3, #0
 8003d94:	617b      	str	r3, [r7, #20]
 8003d96:	e01d      	b.n	8003dd4 <Switches_Init+0x84>
        stable_state[i]   = GPIO_PIN_SET;  // released
 8003d98:	4a14      	ldr	r2, [pc, #80]	@ (8003dec <Switches_Init+0x9c>)
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	2201      	movs	r2, #1
 8003da0:	701a      	strb	r2, [r3, #0]
        last_raw[i]       = GPIO_PIN_SET;
 8003da2:	4a13      	ldr	r2, [pc, #76]	@ (8003df0 <Switches_Init+0xa0>)
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	4413      	add	r3, r2
 8003da8:	2201      	movs	r2, #1
 8003daa:	701a      	strb	r2, [r3, #0]
        last_change[i]    = now_ms();
 8003dac:	f7ff ff90 	bl	8003cd0 <now_ms>
 8003db0:	4602      	mov	r2, r0
 8003db2:	4910      	ldr	r1, [pc, #64]	@ (8003df4 <Switches_Init+0xa4>)
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        press_start_ms[i] = 0;
 8003dba:	4a0f      	ldr	r2, [pc, #60]	@ (8003df8 <Switches_Init+0xa8>)
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        long_fired[i]     = false;
 8003dc4:	4a0d      	ldr	r2, [pc, #52]	@ (8003dfc <Switches_Init+0xac>)
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	4413      	add	r3, r2
 8003dca:	2200      	movs	r2, #0
 8003dcc:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < SWITCH_COUNT; ++i) {
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	617b      	str	r3, [r7, #20]
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	2b03      	cmp	r3, #3
 8003dd8:	ddde      	ble.n	8003d98 <Switches_Init+0x48>
    }
}
 8003dda:	bf00      	nop
 8003ddc:	bf00      	nop
 8003dde:	3718      	adds	r7, #24
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	40021000 	.word	0x40021000
 8003de8:	40010c00 	.word	0x40010c00
 8003dec:	200003a0 	.word	0x200003a0
 8003df0:	200003b4 	.word	0x200003b4
 8003df4:	200003a4 	.word	0x200003a4
 8003df8:	200003b8 	.word	0x200003b8
 8003dfc:	200003c8 	.word	0x200003c8

08003e00 <update_state>:

void Switches_SetLongPressMs(uint16_t ms) { s_longPressMs = ms; }

/* --- Update debounce state machine --- */
static void update_state(uint8_t idx)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	4603      	mov	r3, r0
 8003e08:	71fb      	strb	r3, [r7, #7]
    GPIO_PinState raw = read_raw(idx);
 8003e0a:	79fb      	ldrb	r3, [r7, #7]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7ff ff67 	bl	8003ce0 <read_raw>
 8003e12:	4603      	mov	r3, r0
 8003e14:	73fb      	strb	r3, [r7, #15]
    uint32_t t = now_ms();
 8003e16:	f7ff ff5b 	bl	8003cd0 <now_ms>
 8003e1a:	60b8      	str	r0, [r7, #8]

    if (raw != last_raw[idx]) {
 8003e1c:	79fb      	ldrb	r3, [r7, #7]
 8003e1e:	4a0f      	ldr	r2, [pc, #60]	@ (8003e5c <update_state+0x5c>)
 8003e20:	5cd3      	ldrb	r3, [r2, r3]
 8003e22:	7bfa      	ldrb	r2, [r7, #15]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d008      	beq.n	8003e3a <update_state+0x3a>
        last_raw[idx] = raw;
 8003e28:	79fb      	ldrb	r3, [r7, #7]
 8003e2a:	490c      	ldr	r1, [pc, #48]	@ (8003e5c <update_state+0x5c>)
 8003e2c:	7bfa      	ldrb	r2, [r7, #15]
 8003e2e:	54ca      	strb	r2, [r1, r3]
        last_change[idx] = t;   // mark change time
 8003e30:	79fb      	ldrb	r3, [r7, #7]
 8003e32:	490b      	ldr	r1, [pc, #44]	@ (8003e60 <update_state+0x60>)
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }

    if ((t - last_change[idx]) >= DEBOUNCE_MS) {
 8003e3a:	79fb      	ldrb	r3, [r7, #7]
 8003e3c:	4a08      	ldr	r2, [pc, #32]	@ (8003e60 <update_state+0x60>)
 8003e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b13      	cmp	r3, #19
 8003e48:	d903      	bls.n	8003e52 <update_state+0x52>
        stable_state[idx] = raw; // accept new stable state
 8003e4a:	79fb      	ldrb	r3, [r7, #7]
 8003e4c:	4905      	ldr	r1, [pc, #20]	@ (8003e64 <update_state+0x64>)
 8003e4e:	7bfa      	ldrb	r2, [r7, #15]
 8003e50:	54ca      	strb	r2, [r1, r3]
    }
}
 8003e52:	bf00      	nop
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	200003b4 	.word	0x200003b4
 8003e60:	200003a4 	.word	0x200003a4
 8003e64:	200003a0 	.word	0x200003a0

08003e68 <Switch_IsPressed>:

/* --- Current debounced level (true = pressed) --- */
bool Switch_IsPressed(uint8_t idx)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	4603      	mov	r3, r0
 8003e70:	71fb      	strb	r3, [r7, #7]
    if (idx >= SWITCH_COUNT) return false;
 8003e72:	79fb      	ldrb	r3, [r7, #7]
 8003e74:	2b03      	cmp	r3, #3
 8003e76:	d901      	bls.n	8003e7c <Switch_IsPressed+0x14>
 8003e78:	2300      	movs	r3, #0
 8003e7a:	e00b      	b.n	8003e94 <Switch_IsPressed+0x2c>
    update_state(idx);
 8003e7c:	79fb      	ldrb	r3, [r7, #7]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7ff ffbe 	bl	8003e00 <update_state>
    return (stable_state[idx] == GPIO_PIN_RESET);
 8003e84:	79fb      	ldrb	r3, [r7, #7]
 8003e86:	4a05      	ldr	r2, [pc, #20]	@ (8003e9c <Switch_IsPressed+0x34>)
 8003e88:	5cd3      	ldrb	r3, [r2, r3]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	bf0c      	ite	eq
 8003e8e:	2301      	moveq	r3, #1
 8003e90:	2300      	movne	r3, #0
 8003e92:	b2db      	uxtb	r3, r3
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3708      	adds	r7, #8
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	200003a0 	.word	0x200003a0

08003ea0 <Switch_WasPressed>:

/* --- One-shot on press edge --- */
bool Switch_WasPressed(uint8_t idx)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	71fb      	strb	r3, [r7, #7]
    static bool prev_state[SWITCH_COUNT] = {0};
    if (idx >= SWITCH_COUNT) return false;
 8003eaa:	79fb      	ldrb	r3, [r7, #7]
 8003eac:	2b03      	cmp	r3, #3
 8003eae:	d901      	bls.n	8003eb4 <Switch_WasPressed+0x14>
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	e01d      	b.n	8003ef0 <Switch_WasPressed+0x50>

    bool pressed = Switch_IsPressed(idx);
 8003eb4:	79fb      	ldrb	r3, [r7, #7]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7ff ffd6 	bl	8003e68 <Switch_IsPressed>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	73fb      	strb	r3, [r7, #15]
    bool fired = (!prev_state[idx] && pressed);  // edge detect
 8003ec0:	79fb      	ldrb	r3, [r7, #7]
 8003ec2:	4a0d      	ldr	r2, [pc, #52]	@ (8003ef8 <Switch_WasPressed+0x58>)
 8003ec4:	5cd3      	ldrb	r3, [r2, r3]
 8003ec6:	f083 0301 	eor.w	r3, r3, #1
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d004      	beq.n	8003eda <Switch_WasPressed+0x3a>
 8003ed0:	7bfb      	ldrb	r3, [r7, #15]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <Switch_WasPressed+0x3a>
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e000      	b.n	8003edc <Switch_WasPressed+0x3c>
 8003eda:	2300      	movs	r3, #0
 8003edc:	73bb      	strb	r3, [r7, #14]
 8003ede:	7bbb      	ldrb	r3, [r7, #14]
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	73bb      	strb	r3, [r7, #14]
    prev_state[idx] = pressed;
 8003ee6:	79fb      	ldrb	r3, [r7, #7]
 8003ee8:	4903      	ldr	r1, [pc, #12]	@ (8003ef8 <Switch_WasPressed+0x58>)
 8003eea:	7bfa      	ldrb	r2, [r7, #15]
 8003eec:	54ca      	strb	r2, [r1, r3]
    return fired;
 8003eee:	7bbb      	ldrb	r3, [r7, #14]
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	200003cc 	.word	0x200003cc

08003efc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f04:	4a14      	ldr	r2, [pc, #80]	@ (8003f58 <_sbrk+0x5c>)
 8003f06:	4b15      	ldr	r3, [pc, #84]	@ (8003f5c <_sbrk+0x60>)
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f10:	4b13      	ldr	r3, [pc, #76]	@ (8003f60 <_sbrk+0x64>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d102      	bne.n	8003f1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f18:	4b11      	ldr	r3, [pc, #68]	@ (8003f60 <_sbrk+0x64>)
 8003f1a:	4a12      	ldr	r2, [pc, #72]	@ (8003f64 <_sbrk+0x68>)
 8003f1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f1e:	4b10      	ldr	r3, [pc, #64]	@ (8003f60 <_sbrk+0x64>)
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4413      	add	r3, r2
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d207      	bcs.n	8003f3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f2c:	f004 f94a 	bl	80081c4 <__errno>
 8003f30:	4603      	mov	r3, r0
 8003f32:	220c      	movs	r2, #12
 8003f34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f36:	f04f 33ff 	mov.w	r3, #4294967295
 8003f3a:	e009      	b.n	8003f50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f3c:	4b08      	ldr	r3, [pc, #32]	@ (8003f60 <_sbrk+0x64>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f42:	4b07      	ldr	r3, [pc, #28]	@ (8003f60 <_sbrk+0x64>)
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4413      	add	r3, r2
 8003f4a:	4a05      	ldr	r2, [pc, #20]	@ (8003f60 <_sbrk+0x64>)
 8003f4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3718      	adds	r7, #24
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	20005000 	.word	0x20005000
 8003f5c:	00000400 	.word	0x00000400
 8003f60:	200003d0 	.word	0x200003d0
 8003f64:	20000568 	.word	0x20000568

08003f68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f6c:	bf00      	nop
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bc80      	pop	{r7}
 8003f72:	4770      	bx	lr

08003f74 <UART_Init>:

/**
  * @brief Initialize UART reception (interrupt mode, one byte at a time).
  */
void UART_Init(void)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	af00      	add	r7, sp, #0
    // Clear the buffer and reset index
    memset(rxBuffer, 0, sizeof(rxBuffer));
 8003f78:	2240      	movs	r2, #64	@ 0x40
 8003f7a:	2100      	movs	r1, #0
 8003f7c:	4807      	ldr	r0, [pc, #28]	@ (8003f9c <UART_Init+0x28>)
 8003f7e:	f004 f8f3 	bl	8008168 <memset>
    rxIndex = 0;
 8003f82:	4b07      	ldr	r3, [pc, #28]	@ (8003fa0 <UART_Init+0x2c>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	801a      	strh	r2, [r3, #0]
    packetReady = false;
 8003f88:	4b06      	ldr	r3, [pc, #24]	@ (8003fa4 <UART_Init+0x30>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	701a      	strb	r2, [r3, #0]

    // Start UART reception (non-blocking)
    HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 8003f8e:	2201      	movs	r2, #1
 8003f90:	4905      	ldr	r1, [pc, #20]	@ (8003fa8 <UART_Init+0x34>)
 8003f92:	4806      	ldr	r0, [pc, #24]	@ (8003fac <UART_Init+0x38>)
 8003f94:	f003 fe30 	bl	8007bf8 <HAL_UART_Receive_IT>
}
 8003f98:	bf00      	nop
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	200003d8 	.word	0x200003d8
 8003fa0:	20000418 	.word	0x20000418
 8003fa4:	2000041a 	.word	0x2000041a
 8003fa8:	200003d4 	.word	0x200003d4
 8003fac:	20000250 	.word	0x20000250

08003fb0 <UART_TransmitString>:

/**
  * @brief Transmit a null-terminated string.
  */
void UART_TransmitString(UART_HandleTypeDef *huart, const char *str)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8003fba:	6838      	ldr	r0, [r7, #0]
 8003fbc:	f7fc f8d0 	bl	8000160 <strlen>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8003fc8:	6839      	ldr	r1, [r7, #0]
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f003 fd89 	bl	8007ae2 <HAL_UART_Transmit>
}
 8003fd0:	bf00      	nop
 8003fd2:	3708      	adds	r7, #8
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <UART_GetReceivedPacket>:
        HAL_UART_Receive_IT(&huart1, &rxByte, 1);
    }
}

bool UART_GetReceivedPacket(char *buffer, size_t buffer_size)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
    if (packetReady)
 8003fe2:	4b1b      	ldr	r3, [pc, #108]	@ (8004050 <UART_GetReceivedPacket+0x78>)
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d02c      	beq.n	8004044 <UART_GetReceivedPacket+0x6c>
    {
        // Ensure destination buffer is large enough
        size_t len = strlen(rxBuffer);
 8003fea:	481a      	ldr	r0, [pc, #104]	@ (8004054 <UART_GetReceivedPacket+0x7c>)
 8003fec:	f7fc f8b8 	bl	8000160 <strlen>
 8003ff0:	60f8      	str	r0, [r7, #12]
        if (len < buffer_size)
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d219      	bcs.n	800402e <UART_GetReceivedPacket+0x56>
        {
            strncpy(buffer, rxBuffer, buffer_size - 1);
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	461a      	mov	r2, r3
 8004000:	4914      	ldr	r1, [pc, #80]	@ (8004054 <UART_GetReceivedPacket+0x7c>)
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f004 f8ca 	bl	800819c <strncpy>
            buffer[buffer_size - 1] = '\0'; // Ensure null-termination
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	3b01      	subs	r3, #1
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	4413      	add	r3, r2
 8004010:	2200      	movs	r2, #0
 8004012:	701a      	strb	r2, [r3, #0]

            // Reset internal buffer for next packet
            memset(rxBuffer, 0, sizeof(rxBuffer));
 8004014:	2240      	movs	r2, #64	@ 0x40
 8004016:	2100      	movs	r1, #0
 8004018:	480e      	ldr	r0, [pc, #56]	@ (8004054 <UART_GetReceivedPacket+0x7c>)
 800401a:	f004 f8a5 	bl	8008168 <memset>
            rxIndex = 0;
 800401e:	4b0e      	ldr	r3, [pc, #56]	@ (8004058 <UART_GetReceivedPacket+0x80>)
 8004020:	2200      	movs	r2, #0
 8004022:	801a      	strh	r2, [r3, #0]
            packetReady = false;
 8004024:	4b0a      	ldr	r3, [pc, #40]	@ (8004050 <UART_GetReceivedPacket+0x78>)
 8004026:	2200      	movs	r2, #0
 8004028:	701a      	strb	r2, [r3, #0]
            return true;
 800402a:	2301      	movs	r3, #1
 800402c:	e00b      	b.n	8004046 <UART_GetReceivedPacket+0x6e>
        }
        else
        {
            // Destination buffer too small, discard internal packet
            memset(rxBuffer, 0, sizeof(rxBuffer));
 800402e:	2240      	movs	r2, #64	@ 0x40
 8004030:	2100      	movs	r1, #0
 8004032:	4808      	ldr	r0, [pc, #32]	@ (8004054 <UART_GetReceivedPacket+0x7c>)
 8004034:	f004 f898 	bl	8008168 <memset>
            rxIndex = 0;
 8004038:	4b07      	ldr	r3, [pc, #28]	@ (8004058 <UART_GetReceivedPacket+0x80>)
 800403a:	2200      	movs	r2, #0
 800403c:	801a      	strh	r2, [r3, #0]
            packetReady = false;
 800403e:	4b04      	ldr	r3, [pc, #16]	@ (8004050 <UART_GetReceivedPacket+0x78>)
 8004040:	2200      	movs	r2, #0
 8004042:	701a      	strb	r2, [r3, #0]
            // Optionally, log an error
        }
    }
    return false; // Ensure to return false if no packet is ready
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	2000041a 	.word	0x2000041a
 8004054:	200003d8 	.word	0x200003d8
 8004058:	20000418 	.word	0x20000418

0800405c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800405c:	f7ff ff84 	bl	8003f68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004060:	480b      	ldr	r0, [pc, #44]	@ (8004090 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004062:	490c      	ldr	r1, [pc, #48]	@ (8004094 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004064:	4a0c      	ldr	r2, [pc, #48]	@ (8004098 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004066:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004068:	e002      	b.n	8004070 <LoopCopyDataInit>

0800406a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800406a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800406c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800406e:	3304      	adds	r3, #4

08004070 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004070:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004072:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004074:	d3f9      	bcc.n	800406a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004076:	4a09      	ldr	r2, [pc, #36]	@ (800409c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004078:	4c09      	ldr	r4, [pc, #36]	@ (80040a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800407a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800407c:	e001      	b.n	8004082 <LoopFillZerobss>

0800407e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800407e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004080:	3204      	adds	r2, #4

08004082 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004082:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004084:	d3fb      	bcc.n	800407e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004086:	f004 f8a3 	bl	80081d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800408a:	f7fd fccb 	bl	8001a24 <main>
  bx lr
 800408e:	4770      	bx	lr
  ldr r0, =_sdata
 8004090:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004094:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8004098:	08009dd4 	.word	0x08009dd4
  ldr r2, =_sbss
 800409c:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 80040a0:	20000568 	.word	0x20000568

080040a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80040a4:	e7fe      	b.n	80040a4 <ADC1_2_IRQHandler>
	...

080040a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040ac:	4b08      	ldr	r3, [pc, #32]	@ (80040d0 <HAL_Init+0x28>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a07      	ldr	r2, [pc, #28]	@ (80040d0 <HAL_Init+0x28>)
 80040b2:	f043 0310 	orr.w	r3, r3, #16
 80040b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040b8:	2003      	movs	r0, #3
 80040ba:	f000 fe05 	bl	8004cc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80040be:	2000      	movs	r0, #0
 80040c0:	f000 f808 	bl	80040d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80040c4:	f7ff fc7a 	bl	80039bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	40022000 	.word	0x40022000

080040d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80040dc:	4b12      	ldr	r3, [pc, #72]	@ (8004128 <HAL_InitTick+0x54>)
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	4b12      	ldr	r3, [pc, #72]	@ (800412c <HAL_InitTick+0x58>)
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	4619      	mov	r1, r3
 80040e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80040ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80040ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f2:	4618      	mov	r0, r3
 80040f4:	f000 fe0f 	bl	8004d16 <HAL_SYSTICK_Config>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e00e      	b.n	8004120 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2b0f      	cmp	r3, #15
 8004106:	d80a      	bhi.n	800411e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004108:	2200      	movs	r2, #0
 800410a:	6879      	ldr	r1, [r7, #4]
 800410c:	f04f 30ff 	mov.w	r0, #4294967295
 8004110:	f000 fde5 	bl	8004cde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004114:	4a06      	ldr	r2, [pc, #24]	@ (8004130 <HAL_InitTick+0x5c>)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800411a:	2300      	movs	r3, #0
 800411c:	e000      	b.n	8004120 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
}
 8004120:	4618      	mov	r0, r3
 8004122:	3708      	adds	r7, #8
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	20000060 	.word	0x20000060
 800412c:	20000068 	.word	0x20000068
 8004130:	20000064 	.word	0x20000064

08004134 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004138:	4b05      	ldr	r3, [pc, #20]	@ (8004150 <HAL_IncTick+0x1c>)
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	461a      	mov	r2, r3
 800413e:	4b05      	ldr	r3, [pc, #20]	@ (8004154 <HAL_IncTick+0x20>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4413      	add	r3, r2
 8004144:	4a03      	ldr	r2, [pc, #12]	@ (8004154 <HAL_IncTick+0x20>)
 8004146:	6013      	str	r3, [r2, #0]
}
 8004148:	bf00      	nop
 800414a:	46bd      	mov	sp, r7
 800414c:	bc80      	pop	{r7}
 800414e:	4770      	bx	lr
 8004150:	20000068 	.word	0x20000068
 8004154:	2000041c 	.word	0x2000041c

08004158 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004158:	b480      	push	{r7}
 800415a:	af00      	add	r7, sp, #0
  return uwTick;
 800415c:	4b02      	ldr	r3, [pc, #8]	@ (8004168 <HAL_GetTick+0x10>)
 800415e:	681b      	ldr	r3, [r3, #0]
}
 8004160:	4618      	mov	r0, r3
 8004162:	46bd      	mov	sp, r7
 8004164:	bc80      	pop	{r7}
 8004166:	4770      	bx	lr
 8004168:	2000041c 	.word	0x2000041c

0800416c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004174:	f7ff fff0 	bl	8004158 <HAL_GetTick>
 8004178:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004184:	d005      	beq.n	8004192 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004186:	4b0a      	ldr	r3, [pc, #40]	@ (80041b0 <HAL_Delay+0x44>)
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	461a      	mov	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	4413      	add	r3, r2
 8004190:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004192:	bf00      	nop
 8004194:	f7ff ffe0 	bl	8004158 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d8f7      	bhi.n	8004194 <HAL_Delay+0x28>
  {
  }
}
 80041a4:	bf00      	nop
 80041a6:	bf00      	nop
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	20000068 	.word	0x20000068

080041b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041bc:	2300      	movs	r3, #0
 80041be:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80041c0:	2300      	movs	r3, #0
 80041c2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80041c4:	2300      	movs	r3, #0
 80041c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80041c8:	2300      	movs	r3, #0
 80041ca:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e0be      	b.n	8004354 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d109      	bne.n	80041f8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f7ff fc14 	bl	8003a20 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 fbc5 	bl	8004988 <ADC_ConversionStop_Disable>
 80041fe:	4603      	mov	r3, r0
 8004200:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004206:	f003 0310 	and.w	r3, r3, #16
 800420a:	2b00      	cmp	r3, #0
 800420c:	f040 8099 	bne.w	8004342 <HAL_ADC_Init+0x18e>
 8004210:	7dfb      	ldrb	r3, [r7, #23]
 8004212:	2b00      	cmp	r3, #0
 8004214:	f040 8095 	bne.w	8004342 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800421c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004220:	f023 0302 	bic.w	r3, r3, #2
 8004224:	f043 0202 	orr.w	r2, r3, #2
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004234:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	7b1b      	ldrb	r3, [r3, #12]
 800423a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800423c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800423e:	68ba      	ldr	r2, [r7, #8]
 8004240:	4313      	orrs	r3, r2
 8004242:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800424c:	d003      	beq.n	8004256 <HAL_ADC_Init+0xa2>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d102      	bne.n	800425c <HAL_ADC_Init+0xa8>
 8004256:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800425a:	e000      	b.n	800425e <HAL_ADC_Init+0xaa>
 800425c:	2300      	movs	r3, #0
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	4313      	orrs	r3, r2
 8004262:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	7d1b      	ldrb	r3, [r3, #20]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d119      	bne.n	80042a0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	7b1b      	ldrb	r3, [r3, #12]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d109      	bne.n	8004288 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	3b01      	subs	r3, #1
 800427a:	035a      	lsls	r2, r3, #13
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	4313      	orrs	r3, r2
 8004280:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004284:	613b      	str	r3, [r7, #16]
 8004286:	e00b      	b.n	80042a0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800428c:	f043 0220 	orr.w	r2, r3, #32
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004298:	f043 0201 	orr.w	r2, r3, #1
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	430a      	orrs	r2, r1
 80042b2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689a      	ldr	r2, [r3, #8]
 80042ba:	4b28      	ldr	r3, [pc, #160]	@ (800435c <HAL_ADC_Init+0x1a8>)
 80042bc:	4013      	ands	r3, r2
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	6812      	ldr	r2, [r2, #0]
 80042c2:	68b9      	ldr	r1, [r7, #8]
 80042c4:	430b      	orrs	r3, r1
 80042c6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042d0:	d003      	beq.n	80042da <HAL_ADC_Init+0x126>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d104      	bne.n	80042e4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	3b01      	subs	r3, #1
 80042e0:	051b      	lsls	r3, r3, #20
 80042e2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ea:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	430a      	orrs	r2, r1
 80042f6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689a      	ldr	r2, [r3, #8]
 80042fe:	4b18      	ldr	r3, [pc, #96]	@ (8004360 <HAL_ADC_Init+0x1ac>)
 8004300:	4013      	ands	r3, r2
 8004302:	68ba      	ldr	r2, [r7, #8]
 8004304:	429a      	cmp	r2, r3
 8004306:	d10b      	bne.n	8004320 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004312:	f023 0303 	bic.w	r3, r3, #3
 8004316:	f043 0201 	orr.w	r2, r3, #1
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800431e:	e018      	b.n	8004352 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004324:	f023 0312 	bic.w	r3, r3, #18
 8004328:	f043 0210 	orr.w	r2, r3, #16
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004334:	f043 0201 	orr.w	r2, r3, #1
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004340:	e007      	b.n	8004352 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004346:	f043 0210 	orr.w	r2, r3, #16
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004352:	7dfb      	ldrb	r3, [r7, #23]
}
 8004354:	4618      	mov	r0, r3
 8004356:	3718      	adds	r7, #24
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}
 800435c:	ffe1f7fd 	.word	0xffe1f7fd
 8004360:	ff1f0efe 	.word	0xff1f0efe

08004364 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800436c:	2300      	movs	r3, #0
 800436e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004376:	2b01      	cmp	r3, #1
 8004378:	d101      	bne.n	800437e <HAL_ADC_Start+0x1a>
 800437a:	2302      	movs	r3, #2
 800437c:	e098      	b.n	80044b0 <HAL_ADC_Start+0x14c>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 faa4 	bl	80048d4 <ADC_Enable>
 800438c:	4603      	mov	r3, r0
 800438e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8004390:	7bfb      	ldrb	r3, [r7, #15]
 8004392:	2b00      	cmp	r3, #0
 8004394:	f040 8087 	bne.w	80044a6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800439c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043a0:	f023 0301 	bic.w	r3, r3, #1
 80043a4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a41      	ldr	r2, [pc, #260]	@ (80044b8 <HAL_ADC_Start+0x154>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d105      	bne.n	80043c2 <HAL_ADC_Start+0x5e>
 80043b6:	4b41      	ldr	r3, [pc, #260]	@ (80044bc <HAL_ADC_Start+0x158>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d115      	bne.n	80043ee <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043c6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d026      	beq.n	800442a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80043e4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80043ec:	e01d      	b.n	800442a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043f2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a2f      	ldr	r2, [pc, #188]	@ (80044bc <HAL_ADC_Start+0x158>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d004      	beq.n	800440e <HAL_ADC_Start+0xaa>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a2b      	ldr	r2, [pc, #172]	@ (80044b8 <HAL_ADC_Start+0x154>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d10d      	bne.n	800442a <HAL_ADC_Start+0xc6>
 800440e:	4b2b      	ldr	r3, [pc, #172]	@ (80044bc <HAL_ADC_Start+0x158>)
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004416:	2b00      	cmp	r3, #0
 8004418:	d007      	beq.n	800442a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800441e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004422:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800442e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d006      	beq.n	8004444 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800443a:	f023 0206 	bic.w	r2, r3, #6
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004442:	e002      	b.n	800444a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f06f 0202 	mvn.w	r2, #2
 800445a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8004466:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800446a:	d113      	bne.n	8004494 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004470:	4a11      	ldr	r2, [pc, #68]	@ (80044b8 <HAL_ADC_Start+0x154>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d105      	bne.n	8004482 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004476:	4b11      	ldr	r3, [pc, #68]	@ (80044bc <HAL_ADC_Start+0x158>)
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800447e:	2b00      	cmp	r3, #0
 8004480:	d108      	bne.n	8004494 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8004490:	609a      	str	r2, [r3, #8]
 8004492:	e00c      	b.n	80044ae <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689a      	ldr	r2, [r3, #8]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80044a2:	609a      	str	r2, [r3, #8]
 80044a4:	e003      	b.n	80044ae <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80044ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	40012800 	.word	0x40012800
 80044bc:	40012400 	.word	0x40012400

080044c0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80044c0:	b590      	push	{r4, r7, lr}
 80044c2:	b087      	sub	sp, #28
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80044ca:	2300      	movs	r3, #0
 80044cc:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80044ce:	2300      	movs	r3, #0
 80044d0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80044d2:	2300      	movs	r3, #0
 80044d4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80044d6:	f7ff fe3f 	bl	8004158 <HAL_GetTick>
 80044da:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00b      	beq.n	8004502 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ee:	f043 0220 	orr.w	r2, r3, #32
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e0d3      	b.n	80046aa <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800450c:	2b00      	cmp	r3, #0
 800450e:	d131      	bne.n	8004574 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004516:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800451a:	2b00      	cmp	r3, #0
 800451c:	d12a      	bne.n	8004574 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800451e:	e021      	b.n	8004564 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004526:	d01d      	beq.n	8004564 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d007      	beq.n	800453e <HAL_ADC_PollForConversion+0x7e>
 800452e:	f7ff fe13 	bl	8004158 <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	429a      	cmp	r2, r3
 800453c:	d212      	bcs.n	8004564 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d10b      	bne.n	8004564 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004550:	f043 0204 	orr.w	r2, r3, #4
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e0a2      	b.n	80046aa <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d0d6      	beq.n	8004520 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004572:	e070      	b.n	8004656 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8004574:	4b4f      	ldr	r3, [pc, #316]	@ (80046b4 <HAL_ADC_PollForConversion+0x1f4>)
 8004576:	681c      	ldr	r4, [r3, #0]
 8004578:	2002      	movs	r0, #2
 800457a:	f002 fbe3 	bl	8006d44 <HAL_RCCEx_GetPeriphCLKFreq>
 800457e:	4603      	mov	r3, r0
 8004580:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	6919      	ldr	r1, [r3, #16]
 800458a:	4b4b      	ldr	r3, [pc, #300]	@ (80046b8 <HAL_ADC_PollForConversion+0x1f8>)
 800458c:	400b      	ands	r3, r1
 800458e:	2b00      	cmp	r3, #0
 8004590:	d118      	bne.n	80045c4 <HAL_ADC_PollForConversion+0x104>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68d9      	ldr	r1, [r3, #12]
 8004598:	4b48      	ldr	r3, [pc, #288]	@ (80046bc <HAL_ADC_PollForConversion+0x1fc>)
 800459a:	400b      	ands	r3, r1
 800459c:	2b00      	cmp	r3, #0
 800459e:	d111      	bne.n	80045c4 <HAL_ADC_PollForConversion+0x104>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6919      	ldr	r1, [r3, #16]
 80045a6:	4b46      	ldr	r3, [pc, #280]	@ (80046c0 <HAL_ADC_PollForConversion+0x200>)
 80045a8:	400b      	ands	r3, r1
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d108      	bne.n	80045c0 <HAL_ADC_PollForConversion+0x100>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68d9      	ldr	r1, [r3, #12]
 80045b4:	4b43      	ldr	r3, [pc, #268]	@ (80046c4 <HAL_ADC_PollForConversion+0x204>)
 80045b6:	400b      	ands	r3, r1
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d101      	bne.n	80045c0 <HAL_ADC_PollForConversion+0x100>
 80045bc:	2314      	movs	r3, #20
 80045be:	e020      	b.n	8004602 <HAL_ADC_PollForConversion+0x142>
 80045c0:	2329      	movs	r3, #41	@ 0x29
 80045c2:	e01e      	b.n	8004602 <HAL_ADC_PollForConversion+0x142>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6919      	ldr	r1, [r3, #16]
 80045ca:	4b3d      	ldr	r3, [pc, #244]	@ (80046c0 <HAL_ADC_PollForConversion+0x200>)
 80045cc:	400b      	ands	r3, r1
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d106      	bne.n	80045e0 <HAL_ADC_PollForConversion+0x120>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68d9      	ldr	r1, [r3, #12]
 80045d8:	4b3a      	ldr	r3, [pc, #232]	@ (80046c4 <HAL_ADC_PollForConversion+0x204>)
 80045da:	400b      	ands	r3, r1
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00d      	beq.n	80045fc <HAL_ADC_PollForConversion+0x13c>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	6919      	ldr	r1, [r3, #16]
 80045e6:	4b38      	ldr	r3, [pc, #224]	@ (80046c8 <HAL_ADC_PollForConversion+0x208>)
 80045e8:	400b      	ands	r3, r1
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d108      	bne.n	8004600 <HAL_ADC_PollForConversion+0x140>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68d9      	ldr	r1, [r3, #12]
 80045f4:	4b34      	ldr	r3, [pc, #208]	@ (80046c8 <HAL_ADC_PollForConversion+0x208>)
 80045f6:	400b      	ands	r3, r1
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d101      	bne.n	8004600 <HAL_ADC_PollForConversion+0x140>
 80045fc:	2354      	movs	r3, #84	@ 0x54
 80045fe:	e000      	b.n	8004602 <HAL_ADC_PollForConversion+0x142>
 8004600:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8004602:	fb02 f303 	mul.w	r3, r2, r3
 8004606:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004608:	e021      	b.n	800464e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004610:	d01a      	beq.n	8004648 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d007      	beq.n	8004628 <HAL_ADC_PollForConversion+0x168>
 8004618:	f7ff fd9e 	bl	8004158 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	683a      	ldr	r2, [r7, #0]
 8004624:	429a      	cmp	r2, r3
 8004626:	d20f      	bcs.n	8004648 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	429a      	cmp	r2, r3
 800462e:	d90b      	bls.n	8004648 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004634:	f043 0204 	orr.w	r2, r3, #4
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e030      	b.n	80046aa <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	3301      	adds	r3, #1
 800464c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	429a      	cmp	r2, r3
 8004654:	d8d9      	bhi.n	800460a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f06f 0212 	mvn.w	r2, #18
 800465e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004664:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8004676:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800467a:	d115      	bne.n	80046a8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004680:	2b00      	cmp	r3, #0
 8004682:	d111      	bne.n	80046a8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004688:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004694:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d105      	bne.n	80046a8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046a0:	f043 0201 	orr.w	r2, r3, #1
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	371c      	adds	r7, #28
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd90      	pop	{r4, r7, pc}
 80046b2:	bf00      	nop
 80046b4:	20000060 	.word	0x20000060
 80046b8:	24924924 	.word	0x24924924
 80046bc:	00924924 	.word	0x00924924
 80046c0:	12492492 	.word	0x12492492
 80046c4:	00492492 	.word	0x00492492
 80046c8:	00249249 	.word	0x00249249

080046cc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80046da:	4618      	mov	r0, r3
 80046dc:	370c      	adds	r7, #12
 80046de:	46bd      	mov	sp, r7
 80046e0:	bc80      	pop	{r7}
 80046e2:	4770      	bx	lr

080046e4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046ee:	2300      	movs	r3, #0
 80046f0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80046f2:	2300      	movs	r3, #0
 80046f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d101      	bne.n	8004704 <HAL_ADC_ConfigChannel+0x20>
 8004700:	2302      	movs	r3, #2
 8004702:	e0dc      	b.n	80048be <HAL_ADC_ConfigChannel+0x1da>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	2b06      	cmp	r3, #6
 8004712:	d81c      	bhi.n	800474e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	685a      	ldr	r2, [r3, #4]
 800471e:	4613      	mov	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	4413      	add	r3, r2
 8004724:	3b05      	subs	r3, #5
 8004726:	221f      	movs	r2, #31
 8004728:	fa02 f303 	lsl.w	r3, r2, r3
 800472c:	43db      	mvns	r3, r3
 800472e:	4019      	ands	r1, r3
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	6818      	ldr	r0, [r3, #0]
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	4613      	mov	r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4413      	add	r3, r2
 800473e:	3b05      	subs	r3, #5
 8004740:	fa00 f203 	lsl.w	r2, r0, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	430a      	orrs	r2, r1
 800474a:	635a      	str	r2, [r3, #52]	@ 0x34
 800474c:	e03c      	b.n	80047c8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	2b0c      	cmp	r3, #12
 8004754:	d81c      	bhi.n	8004790 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685a      	ldr	r2, [r3, #4]
 8004760:	4613      	mov	r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	4413      	add	r3, r2
 8004766:	3b23      	subs	r3, #35	@ 0x23
 8004768:	221f      	movs	r2, #31
 800476a:	fa02 f303 	lsl.w	r3, r2, r3
 800476e:	43db      	mvns	r3, r3
 8004770:	4019      	ands	r1, r3
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	6818      	ldr	r0, [r3, #0]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	685a      	ldr	r2, [r3, #4]
 800477a:	4613      	mov	r3, r2
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	4413      	add	r3, r2
 8004780:	3b23      	subs	r3, #35	@ 0x23
 8004782:	fa00 f203 	lsl.w	r2, r0, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	430a      	orrs	r2, r1
 800478c:	631a      	str	r2, [r3, #48]	@ 0x30
 800478e:	e01b      	b.n	80047c8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	685a      	ldr	r2, [r3, #4]
 800479a:	4613      	mov	r3, r2
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	4413      	add	r3, r2
 80047a0:	3b41      	subs	r3, #65	@ 0x41
 80047a2:	221f      	movs	r2, #31
 80047a4:	fa02 f303 	lsl.w	r3, r2, r3
 80047a8:	43db      	mvns	r3, r3
 80047aa:	4019      	ands	r1, r3
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	6818      	ldr	r0, [r3, #0]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685a      	ldr	r2, [r3, #4]
 80047b4:	4613      	mov	r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	4413      	add	r3, r2
 80047ba:	3b41      	subs	r3, #65	@ 0x41
 80047bc:	fa00 f203 	lsl.w	r2, r0, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	430a      	orrs	r2, r1
 80047c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2b09      	cmp	r3, #9
 80047ce:	d91c      	bls.n	800480a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68d9      	ldr	r1, [r3, #12]
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	4613      	mov	r3, r2
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	4413      	add	r3, r2
 80047e0:	3b1e      	subs	r3, #30
 80047e2:	2207      	movs	r2, #7
 80047e4:	fa02 f303 	lsl.w	r3, r2, r3
 80047e8:	43db      	mvns	r3, r3
 80047ea:	4019      	ands	r1, r3
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	6898      	ldr	r0, [r3, #8]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	4613      	mov	r3, r2
 80047f6:	005b      	lsls	r3, r3, #1
 80047f8:	4413      	add	r3, r2
 80047fa:	3b1e      	subs	r3, #30
 80047fc:	fa00 f203 	lsl.w	r2, r0, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	430a      	orrs	r2, r1
 8004806:	60da      	str	r2, [r3, #12]
 8004808:	e019      	b.n	800483e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	6919      	ldr	r1, [r3, #16]
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	4613      	mov	r3, r2
 8004816:	005b      	lsls	r3, r3, #1
 8004818:	4413      	add	r3, r2
 800481a:	2207      	movs	r2, #7
 800481c:	fa02 f303 	lsl.w	r3, r2, r3
 8004820:	43db      	mvns	r3, r3
 8004822:	4019      	ands	r1, r3
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	6898      	ldr	r0, [r3, #8]
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	4613      	mov	r3, r2
 800482e:	005b      	lsls	r3, r3, #1
 8004830:	4413      	add	r3, r2
 8004832:	fa00 f203 	lsl.w	r2, r0, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	430a      	orrs	r2, r1
 800483c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2b10      	cmp	r3, #16
 8004844:	d003      	beq.n	800484e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800484a:	2b11      	cmp	r3, #17
 800484c:	d132      	bne.n	80048b4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a1d      	ldr	r2, [pc, #116]	@ (80048c8 <HAL_ADC_ConfigChannel+0x1e4>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d125      	bne.n	80048a4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d126      	bne.n	80048b4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	689a      	ldr	r2, [r3, #8]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8004874:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2b10      	cmp	r3, #16
 800487c:	d11a      	bne.n	80048b4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800487e:	4b13      	ldr	r3, [pc, #76]	@ (80048cc <HAL_ADC_ConfigChannel+0x1e8>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a13      	ldr	r2, [pc, #76]	@ (80048d0 <HAL_ADC_ConfigChannel+0x1ec>)
 8004884:	fba2 2303 	umull	r2, r3, r2, r3
 8004888:	0c9a      	lsrs	r2, r3, #18
 800488a:	4613      	mov	r3, r2
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	4413      	add	r3, r2
 8004890:	005b      	lsls	r3, r3, #1
 8004892:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004894:	e002      	b.n	800489c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	3b01      	subs	r3, #1
 800489a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1f9      	bne.n	8004896 <HAL_ADC_ConfigChannel+0x1b2>
 80048a2:	e007      	b.n	80048b4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a8:	f043 0220 	orr.w	r2, r3, #32
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80048bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3714      	adds	r7, #20
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bc80      	pop	{r7}
 80048c6:	4770      	bx	lr
 80048c8:	40012400 	.word	0x40012400
 80048cc:	20000060 	.word	0x20000060
 80048d0:	431bde83 	.word	0x431bde83

080048d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048dc:	2300      	movs	r3, #0
 80048de:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80048e0:	2300      	movs	r3, #0
 80048e2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d040      	beq.n	8004974 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	689a      	ldr	r2, [r3, #8]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f042 0201 	orr.w	r2, r2, #1
 8004900:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004902:	4b1f      	ldr	r3, [pc, #124]	@ (8004980 <ADC_Enable+0xac>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a1f      	ldr	r2, [pc, #124]	@ (8004984 <ADC_Enable+0xb0>)
 8004908:	fba2 2303 	umull	r2, r3, r2, r3
 800490c:	0c9b      	lsrs	r3, r3, #18
 800490e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004910:	e002      	b.n	8004918 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	3b01      	subs	r3, #1
 8004916:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1f9      	bne.n	8004912 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800491e:	f7ff fc1b 	bl	8004158 <HAL_GetTick>
 8004922:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004924:	e01f      	b.n	8004966 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004926:	f7ff fc17 	bl	8004158 <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	2b02      	cmp	r3, #2
 8004932:	d918      	bls.n	8004966 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b01      	cmp	r3, #1
 8004940:	d011      	beq.n	8004966 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004946:	f043 0210 	orr.w	r2, r3, #16
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004952:	f043 0201 	orr.w	r2, r3, #1
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e007      	b.n	8004976 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f003 0301 	and.w	r3, r3, #1
 8004970:	2b01      	cmp	r3, #1
 8004972:	d1d8      	bne.n	8004926 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	20000060 	.word	0x20000060
 8004984:	431bde83 	.word	0x431bde83

08004988 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004990:	2300      	movs	r3, #0
 8004992:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d12e      	bne.n	8004a00 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	689a      	ldr	r2, [r3, #8]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f022 0201 	bic.w	r2, r2, #1
 80049b0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80049b2:	f7ff fbd1 	bl	8004158 <HAL_GetTick>
 80049b6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80049b8:	e01b      	b.n	80049f2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80049ba:	f7ff fbcd 	bl	8004158 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d914      	bls.n	80049f2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d10d      	bne.n	80049f2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049da:	f043 0210 	orr.w	r2, r3, #16
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e6:	f043 0201 	orr.w	r2, r3, #1
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e007      	b.n	8004a02 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f003 0301 	and.w	r3, r3, #1
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d0dc      	beq.n	80049ba <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3710      	adds	r7, #16
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
	...

08004a0c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8004a0c:	b590      	push	{r4, r7, lr}
 8004a0e:	b087      	sub	sp, #28
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a14:	2300      	movs	r3, #0
 8004a16:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d101      	bne.n	8004a2a <HAL_ADCEx_Calibration_Start+0x1e>
 8004a26:	2302      	movs	r3, #2
 8004a28:	e097      	b.n	8004b5a <HAL_ADCEx_Calibration_Start+0x14e>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f7ff ffa8 	bl	8004988 <ADC_ConversionStop_Disable>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f7ff ff49 	bl	80048d4 <ADC_Enable>
 8004a42:	4603      	mov	r3, r0
 8004a44:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8004a46:	7dfb      	ldrb	r3, [r7, #23]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	f040 8081 	bne.w	8004b50 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a52:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004a56:	f023 0302 	bic.w	r3, r3, #2
 8004a5a:	f043 0202 	orr.w	r2, r3, #2
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8004a62:	4b40      	ldr	r3, [pc, #256]	@ (8004b64 <HAL_ADCEx_Calibration_Start+0x158>)
 8004a64:	681c      	ldr	r4, [r3, #0]
 8004a66:	2002      	movs	r0, #2
 8004a68:	f002 f96c 	bl	8006d44 <HAL_RCCEx_GetPeriphCLKFreq>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8004a72:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8004a74:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8004a76:	e002      	b.n	8004a7e <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d1f9      	bne.n	8004a78 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	689a      	ldr	r2, [r3, #8]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f042 0208 	orr.w	r2, r2, #8
 8004a92:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8004a94:	f7ff fb60 	bl	8004158 <HAL_GetTick>
 8004a98:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004a9a:	e01b      	b.n	8004ad4 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004a9c:	f7ff fb5c 	bl	8004158 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b0a      	cmp	r3, #10
 8004aa8:	d914      	bls.n	8004ad4 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f003 0308 	and.w	r3, r3, #8
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00d      	beq.n	8004ad4 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004abc:	f023 0312 	bic.w	r3, r3, #18
 8004ac0:	f043 0210 	orr.w	r2, r3, #16
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e042      	b.n	8004b5a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f003 0308 	and.w	r3, r3, #8
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1dc      	bne.n	8004a9c <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	689a      	ldr	r2, [r3, #8]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f042 0204 	orr.w	r2, r2, #4
 8004af0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8004af2:	f7ff fb31 	bl	8004158 <HAL_GetTick>
 8004af6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004af8:	e01b      	b.n	8004b32 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004afa:	f7ff fb2d 	bl	8004158 <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	2b0a      	cmp	r3, #10
 8004b06:	d914      	bls.n	8004b32 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f003 0304 	and.w	r3, r3, #4
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00d      	beq.n	8004b32 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b1a:	f023 0312 	bic.w	r3, r3, #18
 8004b1e:	f043 0210 	orr.w	r2, r3, #16
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e013      	b.n	8004b5a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f003 0304 	and.w	r3, r3, #4
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1dc      	bne.n	8004afa <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b44:	f023 0303 	bic.w	r3, r3, #3
 8004b48:	f043 0201 	orr.w	r2, r3, #1
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004b58:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	371c      	adds	r7, #28
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd90      	pop	{r4, r7, pc}
 8004b62:	bf00      	nop
 8004b64:	20000060 	.word	0x20000060

08004b68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f003 0307 	and.w	r3, r3, #7
 8004b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b78:	4b0c      	ldr	r3, [pc, #48]	@ (8004bac <__NVIC_SetPriorityGrouping+0x44>)
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b7e:	68ba      	ldr	r2, [r7, #8]
 8004b80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b84:	4013      	ands	r3, r2
 8004b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004b94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b9a:	4a04      	ldr	r2, [pc, #16]	@ (8004bac <__NVIC_SetPriorityGrouping+0x44>)
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	60d3      	str	r3, [r2, #12]
}
 8004ba0:	bf00      	nop
 8004ba2:	3714      	adds	r7, #20
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bc80      	pop	{r7}
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	e000ed00 	.word	0xe000ed00

08004bb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bb4:	4b04      	ldr	r3, [pc, #16]	@ (8004bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	0a1b      	lsrs	r3, r3, #8
 8004bba:	f003 0307 	and.w	r3, r3, #7
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bc80      	pop	{r7}
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	e000ed00 	.word	0xe000ed00

08004bcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	6039      	str	r1, [r7, #0]
 8004bd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	db0a      	blt.n	8004bf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	b2da      	uxtb	r2, r3
 8004be4:	490c      	ldr	r1, [pc, #48]	@ (8004c18 <__NVIC_SetPriority+0x4c>)
 8004be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bea:	0112      	lsls	r2, r2, #4
 8004bec:	b2d2      	uxtb	r2, r2
 8004bee:	440b      	add	r3, r1
 8004bf0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004bf4:	e00a      	b.n	8004c0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	b2da      	uxtb	r2, r3
 8004bfa:	4908      	ldr	r1, [pc, #32]	@ (8004c1c <__NVIC_SetPriority+0x50>)
 8004bfc:	79fb      	ldrb	r3, [r7, #7]
 8004bfe:	f003 030f 	and.w	r3, r3, #15
 8004c02:	3b04      	subs	r3, #4
 8004c04:	0112      	lsls	r2, r2, #4
 8004c06:	b2d2      	uxtb	r2, r2
 8004c08:	440b      	add	r3, r1
 8004c0a:	761a      	strb	r2, [r3, #24]
}
 8004c0c:	bf00      	nop
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bc80      	pop	{r7}
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	e000e100 	.word	0xe000e100
 8004c1c:	e000ed00 	.word	0xe000ed00

08004c20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b089      	sub	sp, #36	@ 0x24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f003 0307 	and.w	r3, r3, #7
 8004c32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	f1c3 0307 	rsb	r3, r3, #7
 8004c3a:	2b04      	cmp	r3, #4
 8004c3c:	bf28      	it	cs
 8004c3e:	2304      	movcs	r3, #4
 8004c40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	3304      	adds	r3, #4
 8004c46:	2b06      	cmp	r3, #6
 8004c48:	d902      	bls.n	8004c50 <NVIC_EncodePriority+0x30>
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	3b03      	subs	r3, #3
 8004c4e:	e000      	b.n	8004c52 <NVIC_EncodePriority+0x32>
 8004c50:	2300      	movs	r3, #0
 8004c52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c54:	f04f 32ff 	mov.w	r2, #4294967295
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5e:	43da      	mvns	r2, r3
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	401a      	ands	r2, r3
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c68:	f04f 31ff 	mov.w	r1, #4294967295
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c72:	43d9      	mvns	r1, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c78:	4313      	orrs	r3, r2
         );
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3724      	adds	r7, #36	@ 0x24
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bc80      	pop	{r7}
 8004c82:	4770      	bx	lr

08004c84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c94:	d301      	bcc.n	8004c9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c96:	2301      	movs	r3, #1
 8004c98:	e00f      	b.n	8004cba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8004cc4 <SysTick_Config+0x40>)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ca2:	210f      	movs	r1, #15
 8004ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ca8:	f7ff ff90 	bl	8004bcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cac:	4b05      	ldr	r3, [pc, #20]	@ (8004cc4 <SysTick_Config+0x40>)
 8004cae:	2200      	movs	r2, #0
 8004cb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cb2:	4b04      	ldr	r3, [pc, #16]	@ (8004cc4 <SysTick_Config+0x40>)
 8004cb4:	2207      	movs	r2, #7
 8004cb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3708      	adds	r7, #8
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	e000e010 	.word	0xe000e010

08004cc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f7ff ff49 	bl	8004b68 <__NVIC_SetPriorityGrouping>
}
 8004cd6:	bf00      	nop
 8004cd8:	3708      	adds	r7, #8
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b086      	sub	sp, #24
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	60b9      	str	r1, [r7, #8]
 8004ce8:	607a      	str	r2, [r7, #4]
 8004cea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004cec:	2300      	movs	r3, #0
 8004cee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004cf0:	f7ff ff5e 	bl	8004bb0 <__NVIC_GetPriorityGrouping>
 8004cf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	68b9      	ldr	r1, [r7, #8]
 8004cfa:	6978      	ldr	r0, [r7, #20]
 8004cfc:	f7ff ff90 	bl	8004c20 <NVIC_EncodePriority>
 8004d00:	4602      	mov	r2, r0
 8004d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d06:	4611      	mov	r1, r2
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f7ff ff5f 	bl	8004bcc <__NVIC_SetPriority>
}
 8004d0e:	bf00      	nop
 8004d10:	3718      	adds	r7, #24
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}

08004d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b082      	sub	sp, #8
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f7ff ffb0 	bl	8004c84 <SysTick_Config>
 8004d24:	4603      	mov	r3, r0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3708      	adds	r7, #8
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
	...

08004d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b08b      	sub	sp, #44	@ 0x2c
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d42:	e169      	b.n	8005018 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004d44:	2201      	movs	r2, #1
 8004d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d48:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	69fa      	ldr	r2, [r7, #28]
 8004d54:	4013      	ands	r3, r2
 8004d56:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	f040 8158 	bne.w	8005012 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	4a9a      	ldr	r2, [pc, #616]	@ (8004fd0 <HAL_GPIO_Init+0x2a0>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d05e      	beq.n	8004e2a <HAL_GPIO_Init+0xfa>
 8004d6c:	4a98      	ldr	r2, [pc, #608]	@ (8004fd0 <HAL_GPIO_Init+0x2a0>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d875      	bhi.n	8004e5e <HAL_GPIO_Init+0x12e>
 8004d72:	4a98      	ldr	r2, [pc, #608]	@ (8004fd4 <HAL_GPIO_Init+0x2a4>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d058      	beq.n	8004e2a <HAL_GPIO_Init+0xfa>
 8004d78:	4a96      	ldr	r2, [pc, #600]	@ (8004fd4 <HAL_GPIO_Init+0x2a4>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d86f      	bhi.n	8004e5e <HAL_GPIO_Init+0x12e>
 8004d7e:	4a96      	ldr	r2, [pc, #600]	@ (8004fd8 <HAL_GPIO_Init+0x2a8>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d052      	beq.n	8004e2a <HAL_GPIO_Init+0xfa>
 8004d84:	4a94      	ldr	r2, [pc, #592]	@ (8004fd8 <HAL_GPIO_Init+0x2a8>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d869      	bhi.n	8004e5e <HAL_GPIO_Init+0x12e>
 8004d8a:	4a94      	ldr	r2, [pc, #592]	@ (8004fdc <HAL_GPIO_Init+0x2ac>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d04c      	beq.n	8004e2a <HAL_GPIO_Init+0xfa>
 8004d90:	4a92      	ldr	r2, [pc, #584]	@ (8004fdc <HAL_GPIO_Init+0x2ac>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d863      	bhi.n	8004e5e <HAL_GPIO_Init+0x12e>
 8004d96:	4a92      	ldr	r2, [pc, #584]	@ (8004fe0 <HAL_GPIO_Init+0x2b0>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d046      	beq.n	8004e2a <HAL_GPIO_Init+0xfa>
 8004d9c:	4a90      	ldr	r2, [pc, #576]	@ (8004fe0 <HAL_GPIO_Init+0x2b0>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d85d      	bhi.n	8004e5e <HAL_GPIO_Init+0x12e>
 8004da2:	2b12      	cmp	r3, #18
 8004da4:	d82a      	bhi.n	8004dfc <HAL_GPIO_Init+0xcc>
 8004da6:	2b12      	cmp	r3, #18
 8004da8:	d859      	bhi.n	8004e5e <HAL_GPIO_Init+0x12e>
 8004daa:	a201      	add	r2, pc, #4	@ (adr r2, 8004db0 <HAL_GPIO_Init+0x80>)
 8004dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db0:	08004e2b 	.word	0x08004e2b
 8004db4:	08004e05 	.word	0x08004e05
 8004db8:	08004e17 	.word	0x08004e17
 8004dbc:	08004e59 	.word	0x08004e59
 8004dc0:	08004e5f 	.word	0x08004e5f
 8004dc4:	08004e5f 	.word	0x08004e5f
 8004dc8:	08004e5f 	.word	0x08004e5f
 8004dcc:	08004e5f 	.word	0x08004e5f
 8004dd0:	08004e5f 	.word	0x08004e5f
 8004dd4:	08004e5f 	.word	0x08004e5f
 8004dd8:	08004e5f 	.word	0x08004e5f
 8004ddc:	08004e5f 	.word	0x08004e5f
 8004de0:	08004e5f 	.word	0x08004e5f
 8004de4:	08004e5f 	.word	0x08004e5f
 8004de8:	08004e5f 	.word	0x08004e5f
 8004dec:	08004e5f 	.word	0x08004e5f
 8004df0:	08004e5f 	.word	0x08004e5f
 8004df4:	08004e0d 	.word	0x08004e0d
 8004df8:	08004e21 	.word	0x08004e21
 8004dfc:	4a79      	ldr	r2, [pc, #484]	@ (8004fe4 <HAL_GPIO_Init+0x2b4>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d013      	beq.n	8004e2a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004e02:	e02c      	b.n	8004e5e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	623b      	str	r3, [r7, #32]
          break;
 8004e0a:	e029      	b.n	8004e60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	3304      	adds	r3, #4
 8004e12:	623b      	str	r3, [r7, #32]
          break;
 8004e14:	e024      	b.n	8004e60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	3308      	adds	r3, #8
 8004e1c:	623b      	str	r3, [r7, #32]
          break;
 8004e1e:	e01f      	b.n	8004e60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	330c      	adds	r3, #12
 8004e26:	623b      	str	r3, [r7, #32]
          break;
 8004e28:	e01a      	b.n	8004e60 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d102      	bne.n	8004e38 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004e32:	2304      	movs	r3, #4
 8004e34:	623b      	str	r3, [r7, #32]
          break;
 8004e36:	e013      	b.n	8004e60 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d105      	bne.n	8004e4c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004e40:	2308      	movs	r3, #8
 8004e42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	69fa      	ldr	r2, [r7, #28]
 8004e48:	611a      	str	r2, [r3, #16]
          break;
 8004e4a:	e009      	b.n	8004e60 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004e4c:	2308      	movs	r3, #8
 8004e4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	69fa      	ldr	r2, [r7, #28]
 8004e54:	615a      	str	r2, [r3, #20]
          break;
 8004e56:	e003      	b.n	8004e60 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	623b      	str	r3, [r7, #32]
          break;
 8004e5c:	e000      	b.n	8004e60 <HAL_GPIO_Init+0x130>
          break;
 8004e5e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	2bff      	cmp	r3, #255	@ 0xff
 8004e64:	d801      	bhi.n	8004e6a <HAL_GPIO_Init+0x13a>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	e001      	b.n	8004e6e <HAL_GPIO_Init+0x13e>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	3304      	adds	r3, #4
 8004e6e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	2bff      	cmp	r3, #255	@ 0xff
 8004e74:	d802      	bhi.n	8004e7c <HAL_GPIO_Init+0x14c>
 8004e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	e002      	b.n	8004e82 <HAL_GPIO_Init+0x152>
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e7e:	3b08      	subs	r3, #8
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	210f      	movs	r1, #15
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e90:	43db      	mvns	r3, r3
 8004e92:	401a      	ands	r2, r3
 8004e94:	6a39      	ldr	r1, [r7, #32]
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	fa01 f303 	lsl.w	r3, r1, r3
 8004e9c:	431a      	orrs	r2, r3
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f000 80b1 	beq.w	8005012 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004eb0:	4b4d      	ldr	r3, [pc, #308]	@ (8004fe8 <HAL_GPIO_Init+0x2b8>)
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	4a4c      	ldr	r2, [pc, #304]	@ (8004fe8 <HAL_GPIO_Init+0x2b8>)
 8004eb6:	f043 0301 	orr.w	r3, r3, #1
 8004eba:	6193      	str	r3, [r2, #24]
 8004ebc:	4b4a      	ldr	r3, [pc, #296]	@ (8004fe8 <HAL_GPIO_Init+0x2b8>)
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	f003 0301 	and.w	r3, r3, #1
 8004ec4:	60bb      	str	r3, [r7, #8]
 8004ec6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004ec8:	4a48      	ldr	r2, [pc, #288]	@ (8004fec <HAL_GPIO_Init+0x2bc>)
 8004eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ecc:	089b      	lsrs	r3, r3, #2
 8004ece:	3302      	adds	r3, #2
 8004ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ed4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed8:	f003 0303 	and.w	r3, r3, #3
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	220f      	movs	r2, #15
 8004ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee4:	43db      	mvns	r3, r3
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	4013      	ands	r3, r2
 8004eea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a40      	ldr	r2, [pc, #256]	@ (8004ff0 <HAL_GPIO_Init+0x2c0>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d013      	beq.n	8004f1c <HAL_GPIO_Init+0x1ec>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a3f      	ldr	r2, [pc, #252]	@ (8004ff4 <HAL_GPIO_Init+0x2c4>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d00d      	beq.n	8004f18 <HAL_GPIO_Init+0x1e8>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a3e      	ldr	r2, [pc, #248]	@ (8004ff8 <HAL_GPIO_Init+0x2c8>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d007      	beq.n	8004f14 <HAL_GPIO_Init+0x1e4>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a3d      	ldr	r2, [pc, #244]	@ (8004ffc <HAL_GPIO_Init+0x2cc>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d101      	bne.n	8004f10 <HAL_GPIO_Init+0x1e0>
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e006      	b.n	8004f1e <HAL_GPIO_Init+0x1ee>
 8004f10:	2304      	movs	r3, #4
 8004f12:	e004      	b.n	8004f1e <HAL_GPIO_Init+0x1ee>
 8004f14:	2302      	movs	r3, #2
 8004f16:	e002      	b.n	8004f1e <HAL_GPIO_Init+0x1ee>
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e000      	b.n	8004f1e <HAL_GPIO_Init+0x1ee>
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f20:	f002 0203 	and.w	r2, r2, #3
 8004f24:	0092      	lsls	r2, r2, #2
 8004f26:	4093      	lsls	r3, r2
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004f2e:	492f      	ldr	r1, [pc, #188]	@ (8004fec <HAL_GPIO_Init+0x2bc>)
 8004f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f32:	089b      	lsrs	r3, r3, #2
 8004f34:	3302      	adds	r3, #2
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d006      	beq.n	8004f56 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004f48:	4b2d      	ldr	r3, [pc, #180]	@ (8005000 <HAL_GPIO_Init+0x2d0>)
 8004f4a:	689a      	ldr	r2, [r3, #8]
 8004f4c:	492c      	ldr	r1, [pc, #176]	@ (8005000 <HAL_GPIO_Init+0x2d0>)
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	608b      	str	r3, [r1, #8]
 8004f54:	e006      	b.n	8004f64 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004f56:	4b2a      	ldr	r3, [pc, #168]	@ (8005000 <HAL_GPIO_Init+0x2d0>)
 8004f58:	689a      	ldr	r2, [r3, #8]
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	43db      	mvns	r3, r3
 8004f5e:	4928      	ldr	r1, [pc, #160]	@ (8005000 <HAL_GPIO_Init+0x2d0>)
 8004f60:	4013      	ands	r3, r2
 8004f62:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d006      	beq.n	8004f7e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004f70:	4b23      	ldr	r3, [pc, #140]	@ (8005000 <HAL_GPIO_Init+0x2d0>)
 8004f72:	68da      	ldr	r2, [r3, #12]
 8004f74:	4922      	ldr	r1, [pc, #136]	@ (8005000 <HAL_GPIO_Init+0x2d0>)
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	60cb      	str	r3, [r1, #12]
 8004f7c:	e006      	b.n	8004f8c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004f7e:	4b20      	ldr	r3, [pc, #128]	@ (8005000 <HAL_GPIO_Init+0x2d0>)
 8004f80:	68da      	ldr	r2, [r3, #12]
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	43db      	mvns	r3, r3
 8004f86:	491e      	ldr	r1, [pc, #120]	@ (8005000 <HAL_GPIO_Init+0x2d0>)
 8004f88:	4013      	ands	r3, r2
 8004f8a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d006      	beq.n	8004fa6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004f98:	4b19      	ldr	r3, [pc, #100]	@ (8005000 <HAL_GPIO_Init+0x2d0>)
 8004f9a:	685a      	ldr	r2, [r3, #4]
 8004f9c:	4918      	ldr	r1, [pc, #96]	@ (8005000 <HAL_GPIO_Init+0x2d0>)
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	604b      	str	r3, [r1, #4]
 8004fa4:	e006      	b.n	8004fb4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004fa6:	4b16      	ldr	r3, [pc, #88]	@ (8005000 <HAL_GPIO_Init+0x2d0>)
 8004fa8:	685a      	ldr	r2, [r3, #4]
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	43db      	mvns	r3, r3
 8004fae:	4914      	ldr	r1, [pc, #80]	@ (8005000 <HAL_GPIO_Init+0x2d0>)
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d021      	beq.n	8005004 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004fc0:	4b0f      	ldr	r3, [pc, #60]	@ (8005000 <HAL_GPIO_Init+0x2d0>)
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	490e      	ldr	r1, [pc, #56]	@ (8005000 <HAL_GPIO_Init+0x2d0>)
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	600b      	str	r3, [r1, #0]
 8004fcc:	e021      	b.n	8005012 <HAL_GPIO_Init+0x2e2>
 8004fce:	bf00      	nop
 8004fd0:	10320000 	.word	0x10320000
 8004fd4:	10310000 	.word	0x10310000
 8004fd8:	10220000 	.word	0x10220000
 8004fdc:	10210000 	.word	0x10210000
 8004fe0:	10120000 	.word	0x10120000
 8004fe4:	10110000 	.word	0x10110000
 8004fe8:	40021000 	.word	0x40021000
 8004fec:	40010000 	.word	0x40010000
 8004ff0:	40010800 	.word	0x40010800
 8004ff4:	40010c00 	.word	0x40010c00
 8004ff8:	40011000 	.word	0x40011000
 8004ffc:	40011400 	.word	0x40011400
 8005000:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005004:	4b0b      	ldr	r3, [pc, #44]	@ (8005034 <HAL_GPIO_Init+0x304>)
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	43db      	mvns	r3, r3
 800500c:	4909      	ldr	r1, [pc, #36]	@ (8005034 <HAL_GPIO_Init+0x304>)
 800500e:	4013      	ands	r3, r2
 8005010:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8005012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005014:	3301      	adds	r3, #1
 8005016:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800501e:	fa22 f303 	lsr.w	r3, r2, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	f47f ae8e 	bne.w	8004d44 <HAL_GPIO_Init+0x14>
  }
}
 8005028:	bf00      	nop
 800502a:	bf00      	nop
 800502c:	372c      	adds	r7, #44	@ 0x2c
 800502e:	46bd      	mov	sp, r7
 8005030:	bc80      	pop	{r7}
 8005032:	4770      	bx	lr
 8005034:	40010400 	.word	0x40010400

08005038 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	460b      	mov	r3, r1
 8005042:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	689a      	ldr	r2, [r3, #8]
 8005048:	887b      	ldrh	r3, [r7, #2]
 800504a:	4013      	ands	r3, r2
 800504c:	2b00      	cmp	r3, #0
 800504e:	d002      	beq.n	8005056 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005050:	2301      	movs	r3, #1
 8005052:	73fb      	strb	r3, [r7, #15]
 8005054:	e001      	b.n	800505a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005056:	2300      	movs	r3, #0
 8005058:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800505a:	7bfb      	ldrb	r3, [r7, #15]
}
 800505c:	4618      	mov	r0, r3
 800505e:	3714      	adds	r7, #20
 8005060:	46bd      	mov	sp, r7
 8005062:	bc80      	pop	{r7}
 8005064:	4770      	bx	lr

08005066 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005066:	b480      	push	{r7}
 8005068:	b083      	sub	sp, #12
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
 800506e:	460b      	mov	r3, r1
 8005070:	807b      	strh	r3, [r7, #2]
 8005072:	4613      	mov	r3, r2
 8005074:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005076:	787b      	ldrb	r3, [r7, #1]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d003      	beq.n	8005084 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800507c:	887a      	ldrh	r2, [r7, #2]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005082:	e003      	b.n	800508c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005084:	887b      	ldrh	r3, [r7, #2]
 8005086:	041a      	lsls	r2, r3, #16
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	611a      	str	r2, [r3, #16]
}
 800508c:	bf00      	nop
 800508e:	370c      	adds	r7, #12
 8005090:	46bd      	mov	sp, r7
 8005092:	bc80      	pop	{r7}
 8005094:	4770      	bx	lr
	...

08005098 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d101      	bne.n	80050aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e12b      	b.n	8005302 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d106      	bne.n	80050c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f7fe fcea 	bl	8003a98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2224      	movs	r2, #36	@ 0x24
 80050c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f022 0201 	bic.w	r2, r2, #1
 80050da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80050ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80050fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80050fc:	f001 fd26 	bl	8006b4c <HAL_RCC_GetPCLK1Freq>
 8005100:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	4a81      	ldr	r2, [pc, #516]	@ (800530c <HAL_I2C_Init+0x274>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d807      	bhi.n	800511c <HAL_I2C_Init+0x84>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	4a80      	ldr	r2, [pc, #512]	@ (8005310 <HAL_I2C_Init+0x278>)
 8005110:	4293      	cmp	r3, r2
 8005112:	bf94      	ite	ls
 8005114:	2301      	movls	r3, #1
 8005116:	2300      	movhi	r3, #0
 8005118:	b2db      	uxtb	r3, r3
 800511a:	e006      	b.n	800512a <HAL_I2C_Init+0x92>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	4a7d      	ldr	r2, [pc, #500]	@ (8005314 <HAL_I2C_Init+0x27c>)
 8005120:	4293      	cmp	r3, r2
 8005122:	bf94      	ite	ls
 8005124:	2301      	movls	r3, #1
 8005126:	2300      	movhi	r3, #0
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d001      	beq.n	8005132 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e0e7      	b.n	8005302 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	4a78      	ldr	r2, [pc, #480]	@ (8005318 <HAL_I2C_Init+0x280>)
 8005136:	fba2 2303 	umull	r2, r3, r2, r3
 800513a:	0c9b      	lsrs	r3, r3, #18
 800513c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	430a      	orrs	r2, r1
 8005150:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	6a1b      	ldr	r3, [r3, #32]
 8005158:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	4a6a      	ldr	r2, [pc, #424]	@ (800530c <HAL_I2C_Init+0x274>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d802      	bhi.n	800516c <HAL_I2C_Init+0xd4>
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	3301      	adds	r3, #1
 800516a:	e009      	b.n	8005180 <HAL_I2C_Init+0xe8>
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005172:	fb02 f303 	mul.w	r3, r2, r3
 8005176:	4a69      	ldr	r2, [pc, #420]	@ (800531c <HAL_I2C_Init+0x284>)
 8005178:	fba2 2303 	umull	r2, r3, r2, r3
 800517c:	099b      	lsrs	r3, r3, #6
 800517e:	3301      	adds	r3, #1
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	6812      	ldr	r2, [r2, #0]
 8005184:	430b      	orrs	r3, r1
 8005186:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	69db      	ldr	r3, [r3, #28]
 800518e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005192:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	495c      	ldr	r1, [pc, #368]	@ (800530c <HAL_I2C_Init+0x274>)
 800519c:	428b      	cmp	r3, r1
 800519e:	d819      	bhi.n	80051d4 <HAL_I2C_Init+0x13c>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	1e59      	subs	r1, r3, #1
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	005b      	lsls	r3, r3, #1
 80051aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80051ae:	1c59      	adds	r1, r3, #1
 80051b0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80051b4:	400b      	ands	r3, r1
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00a      	beq.n	80051d0 <HAL_I2C_Init+0x138>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	1e59      	subs	r1, r3, #1
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	005b      	lsls	r3, r3, #1
 80051c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80051c8:	3301      	adds	r3, #1
 80051ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051ce:	e051      	b.n	8005274 <HAL_I2C_Init+0x1dc>
 80051d0:	2304      	movs	r3, #4
 80051d2:	e04f      	b.n	8005274 <HAL_I2C_Init+0x1dc>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d111      	bne.n	8005200 <HAL_I2C_Init+0x168>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	1e58      	subs	r0, r3, #1
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6859      	ldr	r1, [r3, #4]
 80051e4:	460b      	mov	r3, r1
 80051e6:	005b      	lsls	r3, r3, #1
 80051e8:	440b      	add	r3, r1
 80051ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80051ee:	3301      	adds	r3, #1
 80051f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	bf0c      	ite	eq
 80051f8:	2301      	moveq	r3, #1
 80051fa:	2300      	movne	r3, #0
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	e012      	b.n	8005226 <HAL_I2C_Init+0x18e>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	1e58      	subs	r0, r3, #1
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6859      	ldr	r1, [r3, #4]
 8005208:	460b      	mov	r3, r1
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	440b      	add	r3, r1
 800520e:	0099      	lsls	r1, r3, #2
 8005210:	440b      	add	r3, r1
 8005212:	fbb0 f3f3 	udiv	r3, r0, r3
 8005216:	3301      	adds	r3, #1
 8005218:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800521c:	2b00      	cmp	r3, #0
 800521e:	bf0c      	ite	eq
 8005220:	2301      	moveq	r3, #1
 8005222:	2300      	movne	r3, #0
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b00      	cmp	r3, #0
 8005228:	d001      	beq.n	800522e <HAL_I2C_Init+0x196>
 800522a:	2301      	movs	r3, #1
 800522c:	e022      	b.n	8005274 <HAL_I2C_Init+0x1dc>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10e      	bne.n	8005254 <HAL_I2C_Init+0x1bc>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	1e58      	subs	r0, r3, #1
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6859      	ldr	r1, [r3, #4]
 800523e:	460b      	mov	r3, r1
 8005240:	005b      	lsls	r3, r3, #1
 8005242:	440b      	add	r3, r1
 8005244:	fbb0 f3f3 	udiv	r3, r0, r3
 8005248:	3301      	adds	r3, #1
 800524a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800524e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005252:	e00f      	b.n	8005274 <HAL_I2C_Init+0x1dc>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	1e58      	subs	r0, r3, #1
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6859      	ldr	r1, [r3, #4]
 800525c:	460b      	mov	r3, r1
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	440b      	add	r3, r1
 8005262:	0099      	lsls	r1, r3, #2
 8005264:	440b      	add	r3, r1
 8005266:	fbb0 f3f3 	udiv	r3, r0, r3
 800526a:	3301      	adds	r3, #1
 800526c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005270:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005274:	6879      	ldr	r1, [r7, #4]
 8005276:	6809      	ldr	r1, [r1, #0]
 8005278:	4313      	orrs	r3, r2
 800527a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	69da      	ldr	r2, [r3, #28]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a1b      	ldr	r3, [r3, #32]
 800528e:	431a      	orrs	r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	430a      	orrs	r2, r1
 8005296:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80052a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	6911      	ldr	r1, [r2, #16]
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	68d2      	ldr	r2, [r2, #12]
 80052ae:	4311      	orrs	r1, r2
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	6812      	ldr	r2, [r2, #0]
 80052b4:	430b      	orrs	r3, r1
 80052b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	695a      	ldr	r2, [r3, #20]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	431a      	orrs	r2, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	430a      	orrs	r2, r1
 80052d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f042 0201 	orr.w	r2, r2, #1
 80052e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2220      	movs	r2, #32
 80052ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3710      	adds	r7, #16
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	000186a0 	.word	0x000186a0
 8005310:	001e847f 	.word	0x001e847f
 8005314:	003d08ff 	.word	0x003d08ff
 8005318:	431bde83 	.word	0x431bde83
 800531c:	10624dd3 	.word	0x10624dd3

08005320 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b088      	sub	sp, #32
 8005324:	af02      	add	r7, sp, #8
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	607a      	str	r2, [r7, #4]
 800532a:	461a      	mov	r2, r3
 800532c:	460b      	mov	r3, r1
 800532e:	817b      	strh	r3, [r7, #10]
 8005330:	4613      	mov	r3, r2
 8005332:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005334:	f7fe ff10 	bl	8004158 <HAL_GetTick>
 8005338:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b20      	cmp	r3, #32
 8005344:	f040 80e0 	bne.w	8005508 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	9300      	str	r3, [sp, #0]
 800534c:	2319      	movs	r3, #25
 800534e:	2201      	movs	r2, #1
 8005350:	4970      	ldr	r1, [pc, #448]	@ (8005514 <HAL_I2C_Master_Transmit+0x1f4>)
 8005352:	68f8      	ldr	r0, [r7, #12]
 8005354:	f000 fdfa 	bl	8005f4c <I2C_WaitOnFlagUntilTimeout>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d001      	beq.n	8005362 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800535e:	2302      	movs	r3, #2
 8005360:	e0d3      	b.n	800550a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005368:	2b01      	cmp	r3, #1
 800536a:	d101      	bne.n	8005370 <HAL_I2C_Master_Transmit+0x50>
 800536c:	2302      	movs	r3, #2
 800536e:	e0cc      	b.n	800550a <HAL_I2C_Master_Transmit+0x1ea>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0301 	and.w	r3, r3, #1
 8005382:	2b01      	cmp	r3, #1
 8005384:	d007      	beq.n	8005396 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f042 0201 	orr.w	r2, r2, #1
 8005394:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80053a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2221      	movs	r2, #33	@ 0x21
 80053aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2210      	movs	r2, #16
 80053b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	893a      	ldrh	r2, [r7, #8]
 80053c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	4a50      	ldr	r2, [pc, #320]	@ (8005518 <HAL_I2C_Master_Transmit+0x1f8>)
 80053d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80053d8:	8979      	ldrh	r1, [r7, #10]
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	6a3a      	ldr	r2, [r7, #32]
 80053de:	68f8      	ldr	r0, [r7, #12]
 80053e0:	f000 fc4a 	bl	8005c78 <I2C_MasterRequestWrite>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d001      	beq.n	80053ee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e08d      	b.n	800550a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053ee:	2300      	movs	r3, #0
 80053f0:	613b      	str	r3, [r7, #16]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	695b      	ldr	r3, [r3, #20]
 80053f8:	613b      	str	r3, [r7, #16]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	699b      	ldr	r3, [r3, #24]
 8005400:	613b      	str	r3, [r7, #16]
 8005402:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005404:	e066      	b.n	80054d4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005406:	697a      	ldr	r2, [r7, #20]
 8005408:	6a39      	ldr	r1, [r7, #32]
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f000 feb8 	bl	8006180 <I2C_WaitOnTXEFlagUntilTimeout>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00d      	beq.n	8005432 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800541a:	2b04      	cmp	r3, #4
 800541c:	d107      	bne.n	800542e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800542c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e06b      	b.n	800550a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005436:	781a      	ldrb	r2, [r3, #0]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005442:	1c5a      	adds	r2, r3, #1
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800544c:	b29b      	uxth	r3, r3
 800544e:	3b01      	subs	r3, #1
 8005450:	b29a      	uxth	r2, r3
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800545a:	3b01      	subs	r3, #1
 800545c:	b29a      	uxth	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	695b      	ldr	r3, [r3, #20]
 8005468:	f003 0304 	and.w	r3, r3, #4
 800546c:	2b04      	cmp	r3, #4
 800546e:	d11b      	bne.n	80054a8 <HAL_I2C_Master_Transmit+0x188>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005474:	2b00      	cmp	r3, #0
 8005476:	d017      	beq.n	80054a8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800547c:	781a      	ldrb	r2, [r3, #0]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005488:	1c5a      	adds	r2, r3, #1
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005492:	b29b      	uxth	r3, r3
 8005494:	3b01      	subs	r3, #1
 8005496:	b29a      	uxth	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054a0:	3b01      	subs	r3, #1
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054a8:	697a      	ldr	r2, [r7, #20]
 80054aa:	6a39      	ldr	r1, [r7, #32]
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	f000 feaf 	bl	8006210 <I2C_WaitOnBTFFlagUntilTimeout>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00d      	beq.n	80054d4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054bc:	2b04      	cmp	r3, #4
 80054be:	d107      	bne.n	80054d0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054ce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e01a      	b.n	800550a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d194      	bne.n	8005406 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2220      	movs	r2, #32
 80054f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005504:	2300      	movs	r3, #0
 8005506:	e000      	b.n	800550a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005508:	2302      	movs	r3, #2
  }
}
 800550a:	4618      	mov	r0, r3
 800550c:	3718      	adds	r7, #24
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	00100002 	.word	0x00100002
 8005518:	ffff0000 	.word	0xffff0000

0800551c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b08c      	sub	sp, #48	@ 0x30
 8005520:	af02      	add	r7, sp, #8
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	4608      	mov	r0, r1
 8005526:	4611      	mov	r1, r2
 8005528:	461a      	mov	r2, r3
 800552a:	4603      	mov	r3, r0
 800552c:	817b      	strh	r3, [r7, #10]
 800552e:	460b      	mov	r3, r1
 8005530:	813b      	strh	r3, [r7, #8]
 8005532:	4613      	mov	r3, r2
 8005534:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005536:	2300      	movs	r3, #0
 8005538:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800553a:	f7fe fe0d 	bl	8004158 <HAL_GetTick>
 800553e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005546:	b2db      	uxtb	r3, r3
 8005548:	2b20      	cmp	r3, #32
 800554a:	f040 8250 	bne.w	80059ee <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800554e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005550:	9300      	str	r3, [sp, #0]
 8005552:	2319      	movs	r3, #25
 8005554:	2201      	movs	r2, #1
 8005556:	4982      	ldr	r1, [pc, #520]	@ (8005760 <HAL_I2C_Mem_Read+0x244>)
 8005558:	68f8      	ldr	r0, [r7, #12]
 800555a:	f000 fcf7 	bl	8005f4c <I2C_WaitOnFlagUntilTimeout>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d001      	beq.n	8005568 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8005564:	2302      	movs	r3, #2
 8005566:	e243      	b.n	80059f0 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800556e:	2b01      	cmp	r3, #1
 8005570:	d101      	bne.n	8005576 <HAL_I2C_Mem_Read+0x5a>
 8005572:	2302      	movs	r3, #2
 8005574:	e23c      	b.n	80059f0 <HAL_I2C_Mem_Read+0x4d4>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2201      	movs	r2, #1
 800557a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	2b01      	cmp	r3, #1
 800558a:	d007      	beq.n	800559c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f042 0201 	orr.w	r2, r2, #1
 800559a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80055aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2222      	movs	r2, #34	@ 0x22
 80055b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2240      	movs	r2, #64	@ 0x40
 80055b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80055cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	4a62      	ldr	r2, [pc, #392]	@ (8005764 <HAL_I2C_Mem_Read+0x248>)
 80055dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80055de:	88f8      	ldrh	r0, [r7, #6]
 80055e0:	893a      	ldrh	r2, [r7, #8]
 80055e2:	8979      	ldrh	r1, [r7, #10]
 80055e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e6:	9301      	str	r3, [sp, #4]
 80055e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ea:	9300      	str	r3, [sp, #0]
 80055ec:	4603      	mov	r3, r0
 80055ee:	68f8      	ldr	r0, [r7, #12]
 80055f0:	f000 fbc4 	bl	8005d7c <I2C_RequestMemoryRead>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d001      	beq.n	80055fe <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e1f8      	b.n	80059f0 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005602:	2b00      	cmp	r3, #0
 8005604:	d113      	bne.n	800562e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005606:	2300      	movs	r3, #0
 8005608:	61fb      	str	r3, [r7, #28]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	695b      	ldr	r3, [r3, #20]
 8005610:	61fb      	str	r3, [r7, #28]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	61fb      	str	r3, [r7, #28]
 800561a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800562a:	601a      	str	r2, [r3, #0]
 800562c:	e1cc      	b.n	80059c8 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005632:	2b01      	cmp	r3, #1
 8005634:	d11e      	bne.n	8005674 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005644:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005646:	b672      	cpsid	i
}
 8005648:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800564a:	2300      	movs	r3, #0
 800564c:	61bb      	str	r3, [r7, #24]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	695b      	ldr	r3, [r3, #20]
 8005654:	61bb      	str	r3, [r7, #24]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	61bb      	str	r3, [r7, #24]
 800565e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800566e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005670:	b662      	cpsie	i
}
 8005672:	e035      	b.n	80056e0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005678:	2b02      	cmp	r3, #2
 800567a:	d11e      	bne.n	80056ba <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800568a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800568c:	b672      	cpsid	i
}
 800568e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005690:	2300      	movs	r3, #0
 8005692:	617b      	str	r3, [r7, #20]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	617b      	str	r3, [r7, #20]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	617b      	str	r3, [r7, #20]
 80056a4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80056b6:	b662      	cpsie	i
}
 80056b8:	e012      	b.n	80056e0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80056c8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056ca:	2300      	movs	r3, #0
 80056cc:	613b      	str	r3, [r7, #16]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	695b      	ldr	r3, [r3, #20]
 80056d4:	613b      	str	r3, [r7, #16]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	613b      	str	r3, [r7, #16]
 80056de:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80056e0:	e172      	b.n	80059c8 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056e6:	2b03      	cmp	r3, #3
 80056e8:	f200 811f 	bhi.w	800592a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d123      	bne.n	800573c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056f6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f000 fdd1 	bl	80062a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d001      	beq.n	8005708 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e173      	b.n	80059f0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	691a      	ldr	r2, [r3, #16]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005712:	b2d2      	uxtb	r2, r2
 8005714:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800571a:	1c5a      	adds	r2, r3, #1
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005724:	3b01      	subs	r3, #1
 8005726:	b29a      	uxth	r2, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005730:	b29b      	uxth	r3, r3
 8005732:	3b01      	subs	r3, #1
 8005734:	b29a      	uxth	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800573a:	e145      	b.n	80059c8 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005740:	2b02      	cmp	r3, #2
 8005742:	d152      	bne.n	80057ea <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005746:	9300      	str	r3, [sp, #0]
 8005748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800574a:	2200      	movs	r2, #0
 800574c:	4906      	ldr	r1, [pc, #24]	@ (8005768 <HAL_I2C_Mem_Read+0x24c>)
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f000 fbfc 	bl	8005f4c <I2C_WaitOnFlagUntilTimeout>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d008      	beq.n	800576c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e148      	b.n	80059f0 <HAL_I2C_Mem_Read+0x4d4>
 800575e:	bf00      	nop
 8005760:	00100002 	.word	0x00100002
 8005764:	ffff0000 	.word	0xffff0000
 8005768:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800576c:	b672      	cpsid	i
}
 800576e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800577e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	691a      	ldr	r2, [r3, #16]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800578a:	b2d2      	uxtb	r2, r2
 800578c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005792:	1c5a      	adds	r2, r3, #1
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800579c:	3b01      	subs	r3, #1
 800579e:	b29a      	uxth	r2, r3
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	3b01      	subs	r3, #1
 80057ac:	b29a      	uxth	r2, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80057b2:	b662      	cpsie	i
}
 80057b4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	691a      	ldr	r2, [r3, #16]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c0:	b2d2      	uxtb	r2, r2
 80057c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c8:	1c5a      	adds	r2, r3, #1
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057d2:	3b01      	subs	r3, #1
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057de:	b29b      	uxth	r3, r3
 80057e0:	3b01      	subs	r3, #1
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80057e8:	e0ee      	b.n	80059c8 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80057ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ec:	9300      	str	r3, [sp, #0]
 80057ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057f0:	2200      	movs	r2, #0
 80057f2:	4981      	ldr	r1, [pc, #516]	@ (80059f8 <HAL_I2C_Mem_Read+0x4dc>)
 80057f4:	68f8      	ldr	r0, [r7, #12]
 80057f6:	f000 fba9 	bl	8005f4c <I2C_WaitOnFlagUntilTimeout>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d001      	beq.n	8005804 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e0f5      	b.n	80059f0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005812:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005814:	b672      	cpsid	i
}
 8005816:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	691a      	ldr	r2, [r3, #16]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005822:	b2d2      	uxtb	r2, r2
 8005824:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800582a:	1c5a      	adds	r2, r3, #1
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005834:	3b01      	subs	r3, #1
 8005836:	b29a      	uxth	r2, r3
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005840:	b29b      	uxth	r3, r3
 8005842:	3b01      	subs	r3, #1
 8005844:	b29a      	uxth	r2, r3
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800584a:	4b6c      	ldr	r3, [pc, #432]	@ (80059fc <HAL_I2C_Mem_Read+0x4e0>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	08db      	lsrs	r3, r3, #3
 8005850:	4a6b      	ldr	r2, [pc, #428]	@ (8005a00 <HAL_I2C_Mem_Read+0x4e4>)
 8005852:	fba2 2303 	umull	r2, r3, r2, r3
 8005856:	0a1a      	lsrs	r2, r3, #8
 8005858:	4613      	mov	r3, r2
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	4413      	add	r3, r2
 800585e:	00da      	lsls	r2, r3, #3
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005864:	6a3b      	ldr	r3, [r7, #32]
 8005866:	3b01      	subs	r3, #1
 8005868:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800586a:	6a3b      	ldr	r3, [r7, #32]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d118      	bne.n	80058a2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2220      	movs	r2, #32
 800587a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800588a:	f043 0220 	orr.w	r2, r3, #32
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005892:	b662      	cpsie	i
}
 8005894:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e0a6      	b.n	80059f0 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	695b      	ldr	r3, [r3, #20]
 80058a8:	f003 0304 	and.w	r3, r3, #4
 80058ac:	2b04      	cmp	r3, #4
 80058ae:	d1d9      	bne.n	8005864 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	691a      	ldr	r2, [r3, #16]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ca:	b2d2      	uxtb	r2, r2
 80058cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d2:	1c5a      	adds	r2, r3, #1
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058dc:	3b01      	subs	r3, #1
 80058de:	b29a      	uxth	r2, r3
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	3b01      	subs	r3, #1
 80058ec:	b29a      	uxth	r2, r3
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80058f2:	b662      	cpsie	i
}
 80058f4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	691a      	ldr	r2, [r3, #16]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005900:	b2d2      	uxtb	r2, r2
 8005902:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005908:	1c5a      	adds	r2, r3, #1
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005912:	3b01      	subs	r3, #1
 8005914:	b29a      	uxth	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800591e:	b29b      	uxth	r3, r3
 8005920:	3b01      	subs	r3, #1
 8005922:	b29a      	uxth	r2, r3
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005928:	e04e      	b.n	80059c8 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800592a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800592c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f000 fcb6 	bl	80062a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d001      	beq.n	800593e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e058      	b.n	80059f0 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	691a      	ldr	r2, [r3, #16]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005948:	b2d2      	uxtb	r2, r2
 800594a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005950:	1c5a      	adds	r2, r3, #1
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800595a:	3b01      	subs	r3, #1
 800595c:	b29a      	uxth	r2, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005966:	b29b      	uxth	r3, r3
 8005968:	3b01      	subs	r3, #1
 800596a:	b29a      	uxth	r2, r3
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	f003 0304 	and.w	r3, r3, #4
 800597a:	2b04      	cmp	r3, #4
 800597c:	d124      	bne.n	80059c8 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005982:	2b03      	cmp	r3, #3
 8005984:	d107      	bne.n	8005996 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005994:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	691a      	ldr	r2, [r3, #16]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a0:	b2d2      	uxtb	r2, r2
 80059a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a8:	1c5a      	adds	r2, r3, #1
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059b2:	3b01      	subs	r3, #1
 80059b4:	b29a      	uxth	r2, r3
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059be:	b29b      	uxth	r3, r3
 80059c0:	3b01      	subs	r3, #1
 80059c2:	b29a      	uxth	r2, r3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	f47f ae88 	bne.w	80056e2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2220      	movs	r2, #32
 80059d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80059ea:	2300      	movs	r3, #0
 80059ec:	e000      	b.n	80059f0 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80059ee:	2302      	movs	r3, #2
  }
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3728      	adds	r7, #40	@ 0x28
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	00010004 	.word	0x00010004
 80059fc:	20000060 	.word	0x20000060
 8005a00:	14f8b589 	.word	0x14f8b589

08005a04 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b08a      	sub	sp, #40	@ 0x28
 8005a08:	af02      	add	r7, sp, #8
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	607a      	str	r2, [r7, #4]
 8005a0e:	603b      	str	r3, [r7, #0]
 8005a10:	460b      	mov	r3, r1
 8005a12:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005a14:	f7fe fba0 	bl	8004158 <HAL_GetTick>
 8005a18:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	2b20      	cmp	r3, #32
 8005a28:	f040 8111 	bne.w	8005c4e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	9300      	str	r3, [sp, #0]
 8005a30:	2319      	movs	r3, #25
 8005a32:	2201      	movs	r2, #1
 8005a34:	4988      	ldr	r1, [pc, #544]	@ (8005c58 <HAL_I2C_IsDeviceReady+0x254>)
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f000 fa88 	bl	8005f4c <I2C_WaitOnFlagUntilTimeout>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d001      	beq.n	8005a46 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005a42:	2302      	movs	r3, #2
 8005a44:	e104      	b.n	8005c50 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d101      	bne.n	8005a54 <HAL_I2C_IsDeviceReady+0x50>
 8005a50:	2302      	movs	r3, #2
 8005a52:	e0fd      	b.n	8005c50 <HAL_I2C_IsDeviceReady+0x24c>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d007      	beq.n	8005a7a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f042 0201 	orr.w	r2, r2, #1
 8005a78:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a88:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2224      	movs	r2, #36	@ 0x24
 8005a8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	4a70      	ldr	r2, [pc, #448]	@ (8005c5c <HAL_I2C_IsDeviceReady+0x258>)
 8005a9c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005aac:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	9300      	str	r3, [sp, #0]
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005aba:	68f8      	ldr	r0, [r7, #12]
 8005abc:	f000 fa46 	bl	8005f4c <I2C_WaitOnFlagUntilTimeout>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00d      	beq.n	8005ae2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ad0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ad4:	d103      	bne.n	8005ade <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005adc:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e0b6      	b.n	8005c50 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005ae2:	897b      	ldrh	r3, [r7, #10]
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005af0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005af2:	f7fe fb31 	bl	8004158 <HAL_GetTick>
 8005af6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	695b      	ldr	r3, [r3, #20]
 8005afe:	f003 0302 	and.w	r3, r3, #2
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	bf0c      	ite	eq
 8005b06:	2301      	moveq	r3, #1
 8005b08:	2300      	movne	r3, #0
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	695b      	ldr	r3, [r3, #20]
 8005b14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b1c:	bf0c      	ite	eq
 8005b1e:	2301      	moveq	r3, #1
 8005b20:	2300      	movne	r3, #0
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005b26:	e025      	b.n	8005b74 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005b28:	f7fe fb16 	bl	8004158 <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	683a      	ldr	r2, [r7, #0]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d302      	bcc.n	8005b3e <HAL_I2C_IsDeviceReady+0x13a>
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d103      	bne.n	8005b46 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	22a0      	movs	r2, #160	@ 0xa0
 8005b42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	695b      	ldr	r3, [r3, #20]
 8005b4c:	f003 0302 	and.w	r3, r3, #2
 8005b50:	2b02      	cmp	r3, #2
 8005b52:	bf0c      	ite	eq
 8005b54:	2301      	moveq	r3, #1
 8005b56:	2300      	movne	r3, #0
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b6a:	bf0c      	ite	eq
 8005b6c:	2301      	moveq	r3, #1
 8005b6e:	2300      	movne	r3, #0
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	2ba0      	cmp	r3, #160	@ 0xa0
 8005b7e:	d005      	beq.n	8005b8c <HAL_I2C_IsDeviceReady+0x188>
 8005b80:	7dfb      	ldrb	r3, [r7, #23]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d102      	bne.n	8005b8c <HAL_I2C_IsDeviceReady+0x188>
 8005b86:	7dbb      	ldrb	r3, [r7, #22]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d0cd      	beq.n	8005b28 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2220      	movs	r2, #32
 8005b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	f003 0302 	and.w	r3, r3, #2
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d129      	bne.n	8005bf6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bb0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	613b      	str	r3, [r7, #16]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	695b      	ldr	r3, [r3, #20]
 8005bbc:	613b      	str	r3, [r7, #16]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	699b      	ldr	r3, [r3, #24]
 8005bc4:	613b      	str	r3, [r7, #16]
 8005bc6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	9300      	str	r3, [sp, #0]
 8005bcc:	2319      	movs	r3, #25
 8005bce:	2201      	movs	r2, #1
 8005bd0:	4921      	ldr	r1, [pc, #132]	@ (8005c58 <HAL_I2C_IsDeviceReady+0x254>)
 8005bd2:	68f8      	ldr	r0, [r7, #12]
 8005bd4:	f000 f9ba 	bl	8005f4c <I2C_WaitOnFlagUntilTimeout>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d001      	beq.n	8005be2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e036      	b.n	8005c50 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2220      	movs	r2, #32
 8005be6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	e02c      	b.n	8005c50 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c04:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005c0e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	9300      	str	r3, [sp, #0]
 8005c14:	2319      	movs	r3, #25
 8005c16:	2201      	movs	r2, #1
 8005c18:	490f      	ldr	r1, [pc, #60]	@ (8005c58 <HAL_I2C_IsDeviceReady+0x254>)
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f000 f996 	bl	8005f4c <I2C_WaitOnFlagUntilTimeout>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d001      	beq.n	8005c2a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e012      	b.n	8005c50 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005c30:	69ba      	ldr	r2, [r7, #24]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	f4ff af32 	bcc.w	8005a9e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2220      	movs	r2, #32
 8005c3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e000      	b.n	8005c50 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005c4e:	2302      	movs	r3, #2
  }
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3720      	adds	r7, #32
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	00100002 	.word	0x00100002
 8005c5c:	ffff0000 	.word	0xffff0000

08005c60 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bc80      	pop	{r7}
 8005c74:	4770      	bx	lr
	...

08005c78 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b088      	sub	sp, #32
 8005c7c:	af02      	add	r7, sp, #8
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	607a      	str	r2, [r7, #4]
 8005c82:	603b      	str	r3, [r7, #0]
 8005c84:	460b      	mov	r3, r1
 8005c86:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c8c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	2b08      	cmp	r3, #8
 8005c92:	d006      	beq.n	8005ca2 <I2C_MasterRequestWrite+0x2a>
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d003      	beq.n	8005ca2 <I2C_MasterRequestWrite+0x2a>
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005ca0:	d108      	bne.n	8005cb4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005cb0:	601a      	str	r2, [r3, #0]
 8005cb2:	e00b      	b.n	8005ccc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cb8:	2b12      	cmp	r3, #18
 8005cba:	d107      	bne.n	8005ccc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005cca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	9300      	str	r3, [sp, #0]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	f000 f937 	bl	8005f4c <I2C_WaitOnFlagUntilTimeout>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00d      	beq.n	8005d00 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cf2:	d103      	bne.n	8005cfc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cfa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005cfc:	2303      	movs	r3, #3
 8005cfe:	e035      	b.n	8005d6c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d08:	d108      	bne.n	8005d1c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d0a:	897b      	ldrh	r3, [r7, #10]
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	461a      	mov	r2, r3
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005d18:	611a      	str	r2, [r3, #16]
 8005d1a:	e01b      	b.n	8005d54 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005d1c:	897b      	ldrh	r3, [r7, #10]
 8005d1e:	11db      	asrs	r3, r3, #7
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	f003 0306 	and.w	r3, r3, #6
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	f063 030f 	orn	r3, r3, #15
 8005d2c:	b2da      	uxtb	r2, r3
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	490e      	ldr	r1, [pc, #56]	@ (8005d74 <I2C_MasterRequestWrite+0xfc>)
 8005d3a:	68f8      	ldr	r0, [r7, #12]
 8005d3c:	f000 f980 	bl	8006040 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d001      	beq.n	8005d4a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e010      	b.n	8005d6c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005d4a:	897b      	ldrh	r3, [r7, #10]
 8005d4c:	b2da      	uxtb	r2, r3
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	4907      	ldr	r1, [pc, #28]	@ (8005d78 <I2C_MasterRequestWrite+0x100>)
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f000 f970 	bl	8006040 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d001      	beq.n	8005d6a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e000      	b.n	8005d6c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3718      	adds	r7, #24
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	00010008 	.word	0x00010008
 8005d78:	00010002 	.word	0x00010002

08005d7c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b088      	sub	sp, #32
 8005d80:	af02      	add	r7, sp, #8
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	4608      	mov	r0, r1
 8005d86:	4611      	mov	r1, r2
 8005d88:	461a      	mov	r2, r3
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	817b      	strh	r3, [r7, #10]
 8005d8e:	460b      	mov	r3, r1
 8005d90:	813b      	strh	r3, [r7, #8]
 8005d92:	4613      	mov	r3, r2
 8005d94:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005da4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005db4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db8:	9300      	str	r3, [sp, #0]
 8005dba:	6a3b      	ldr	r3, [r7, #32]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	f000 f8c2 	bl	8005f4c <I2C_WaitOnFlagUntilTimeout>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00d      	beq.n	8005dea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ddc:	d103      	bne.n	8005de6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005de4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e0aa      	b.n	8005f40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005dea:	897b      	ldrh	r3, [r7, #10]
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	461a      	mov	r2, r3
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005df8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dfc:	6a3a      	ldr	r2, [r7, #32]
 8005dfe:	4952      	ldr	r1, [pc, #328]	@ (8005f48 <I2C_RequestMemoryRead+0x1cc>)
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f000 f91d 	bl	8006040 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d001      	beq.n	8005e10 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e097      	b.n	8005f40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e10:	2300      	movs	r3, #0
 8005e12:	617b      	str	r3, [r7, #20]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	695b      	ldr	r3, [r3, #20]
 8005e1a:	617b      	str	r3, [r7, #20]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	699b      	ldr	r3, [r3, #24]
 8005e22:	617b      	str	r3, [r7, #20]
 8005e24:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e28:	6a39      	ldr	r1, [r7, #32]
 8005e2a:	68f8      	ldr	r0, [r7, #12]
 8005e2c:	f000 f9a8 	bl	8006180 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00d      	beq.n	8005e52 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e3a:	2b04      	cmp	r3, #4
 8005e3c:	d107      	bne.n	8005e4e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e076      	b.n	8005f40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e52:	88fb      	ldrh	r3, [r7, #6]
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d105      	bne.n	8005e64 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e58:	893b      	ldrh	r3, [r7, #8]
 8005e5a:	b2da      	uxtb	r2, r3
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	611a      	str	r2, [r3, #16]
 8005e62:	e021      	b.n	8005ea8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005e64:	893b      	ldrh	r3, [r7, #8]
 8005e66:	0a1b      	lsrs	r3, r3, #8
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	b2da      	uxtb	r2, r3
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e74:	6a39      	ldr	r1, [r7, #32]
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	f000 f982 	bl	8006180 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00d      	beq.n	8005e9e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e86:	2b04      	cmp	r3, #4
 8005e88:	d107      	bne.n	8005e9a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e98:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e050      	b.n	8005f40 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e9e:	893b      	ldrh	r3, [r7, #8]
 8005ea0:	b2da      	uxtb	r2, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ea8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005eaa:	6a39      	ldr	r1, [r7, #32]
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	f000 f967 	bl	8006180 <I2C_WaitOnTXEFlagUntilTimeout>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00d      	beq.n	8005ed4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ebc:	2b04      	cmp	r3, #4
 8005ebe:	d107      	bne.n	8005ed0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ece:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e035      	b.n	8005f40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005ee2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee6:	9300      	str	r3, [sp, #0]
 8005ee8:	6a3b      	ldr	r3, [r7, #32]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005ef0:	68f8      	ldr	r0, [r7, #12]
 8005ef2:	f000 f82b 	bl	8005f4c <I2C_WaitOnFlagUntilTimeout>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d00d      	beq.n	8005f18 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f0a:	d103      	bne.n	8005f14 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f12:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e013      	b.n	8005f40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005f18:	897b      	ldrh	r3, [r7, #10]
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	f043 0301 	orr.w	r3, r3, #1
 8005f20:	b2da      	uxtb	r2, r3
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f2a:	6a3a      	ldr	r2, [r7, #32]
 8005f2c:	4906      	ldr	r1, [pc, #24]	@ (8005f48 <I2C_RequestMemoryRead+0x1cc>)
 8005f2e:	68f8      	ldr	r0, [r7, #12]
 8005f30:	f000 f886 	bl	8006040 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d001      	beq.n	8005f3e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e000      	b.n	8005f40 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3718      	adds	r7, #24
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	00010002 	.word	0x00010002

08005f4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	603b      	str	r3, [r7, #0]
 8005f58:	4613      	mov	r3, r2
 8005f5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f5c:	e048      	b.n	8005ff0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f64:	d044      	beq.n	8005ff0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f66:	f7fe f8f7 	bl	8004158 <HAL_GetTick>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	683a      	ldr	r2, [r7, #0]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d302      	bcc.n	8005f7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d139      	bne.n	8005ff0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	0c1b      	lsrs	r3, r3, #16
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d10d      	bne.n	8005fa2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	695b      	ldr	r3, [r3, #20]
 8005f8c:	43da      	mvns	r2, r3
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	4013      	ands	r3, r2
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	bf0c      	ite	eq
 8005f98:	2301      	moveq	r3, #1
 8005f9a:	2300      	movne	r3, #0
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	e00c      	b.n	8005fbc <I2C_WaitOnFlagUntilTimeout+0x70>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	699b      	ldr	r3, [r3, #24]
 8005fa8:	43da      	mvns	r2, r3
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	4013      	ands	r3, r2
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	bf0c      	ite	eq
 8005fb4:	2301      	moveq	r3, #1
 8005fb6:	2300      	movne	r3, #0
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	461a      	mov	r2, r3
 8005fbc:	79fb      	ldrb	r3, [r7, #7]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d116      	bne.n	8005ff0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2220      	movs	r2, #32
 8005fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fdc:	f043 0220 	orr.w	r2, r3, #32
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	e023      	b.n	8006038 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	0c1b      	lsrs	r3, r3, #16
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d10d      	bne.n	8006016 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	695b      	ldr	r3, [r3, #20]
 8006000:	43da      	mvns	r2, r3
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	4013      	ands	r3, r2
 8006006:	b29b      	uxth	r3, r3
 8006008:	2b00      	cmp	r3, #0
 800600a:	bf0c      	ite	eq
 800600c:	2301      	moveq	r3, #1
 800600e:	2300      	movne	r3, #0
 8006010:	b2db      	uxtb	r3, r3
 8006012:	461a      	mov	r2, r3
 8006014:	e00c      	b.n	8006030 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	699b      	ldr	r3, [r3, #24]
 800601c:	43da      	mvns	r2, r3
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	4013      	ands	r3, r2
 8006022:	b29b      	uxth	r3, r3
 8006024:	2b00      	cmp	r3, #0
 8006026:	bf0c      	ite	eq
 8006028:	2301      	moveq	r3, #1
 800602a:	2300      	movne	r3, #0
 800602c:	b2db      	uxtb	r3, r3
 800602e:	461a      	mov	r2, r3
 8006030:	79fb      	ldrb	r3, [r7, #7]
 8006032:	429a      	cmp	r2, r3
 8006034:	d093      	beq.n	8005f5e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006036:	2300      	movs	r3, #0
}
 8006038:	4618      	mov	r0, r3
 800603a:	3710      	adds	r7, #16
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	607a      	str	r2, [r7, #4]
 800604c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800604e:	e071      	b.n	8006134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	695b      	ldr	r3, [r3, #20]
 8006056:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800605a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800605e:	d123      	bne.n	80060a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800606e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006078:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2220      	movs	r2, #32
 8006084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2200      	movs	r2, #0
 800608c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006094:	f043 0204 	orr.w	r2, r3, #4
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e067      	b.n	8006178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ae:	d041      	beq.n	8006134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060b0:	f7fe f852 	bl	8004158 <HAL_GetTick>
 80060b4:	4602      	mov	r2, r0
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d302      	bcc.n	80060c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d136      	bne.n	8006134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	0c1b      	lsrs	r3, r3, #16
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d10c      	bne.n	80060ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	43da      	mvns	r2, r3
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	4013      	ands	r3, r2
 80060dc:	b29b      	uxth	r3, r3
 80060de:	2b00      	cmp	r3, #0
 80060e0:	bf14      	ite	ne
 80060e2:	2301      	movne	r3, #1
 80060e4:	2300      	moveq	r3, #0
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	e00b      	b.n	8006102 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	699b      	ldr	r3, [r3, #24]
 80060f0:	43da      	mvns	r2, r3
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	4013      	ands	r3, r2
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	bf14      	ite	ne
 80060fc:	2301      	movne	r3, #1
 80060fe:	2300      	moveq	r3, #0
 8006100:	b2db      	uxtb	r3, r3
 8006102:	2b00      	cmp	r3, #0
 8006104:	d016      	beq.n	8006134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2200      	movs	r2, #0
 800610a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2220      	movs	r2, #32
 8006110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006120:	f043 0220 	orr.w	r2, r3, #32
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2200      	movs	r2, #0
 800612c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e021      	b.n	8006178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	0c1b      	lsrs	r3, r3, #16
 8006138:	b2db      	uxtb	r3, r3
 800613a:	2b01      	cmp	r3, #1
 800613c:	d10c      	bne.n	8006158 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	695b      	ldr	r3, [r3, #20]
 8006144:	43da      	mvns	r2, r3
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	4013      	ands	r3, r2
 800614a:	b29b      	uxth	r3, r3
 800614c:	2b00      	cmp	r3, #0
 800614e:	bf14      	ite	ne
 8006150:	2301      	movne	r3, #1
 8006152:	2300      	moveq	r3, #0
 8006154:	b2db      	uxtb	r3, r3
 8006156:	e00b      	b.n	8006170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	43da      	mvns	r2, r3
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	4013      	ands	r3, r2
 8006164:	b29b      	uxth	r3, r3
 8006166:	2b00      	cmp	r3, #0
 8006168:	bf14      	ite	ne
 800616a:	2301      	movne	r3, #1
 800616c:	2300      	moveq	r3, #0
 800616e:	b2db      	uxtb	r3, r3
 8006170:	2b00      	cmp	r3, #0
 8006172:	f47f af6d 	bne.w	8006050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006176:	2300      	movs	r3, #0
}
 8006178:	4618      	mov	r0, r3
 800617a:	3710      	adds	r7, #16
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800618c:	e034      	b.n	80061f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	f000 f8e3 	bl	800635a <I2C_IsAcknowledgeFailed>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d001      	beq.n	800619e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e034      	b.n	8006208 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a4:	d028      	beq.n	80061f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061a6:	f7fd ffd7 	bl	8004158 <HAL_GetTick>
 80061aa:	4602      	mov	r2, r0
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	68ba      	ldr	r2, [r7, #8]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d302      	bcc.n	80061bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d11d      	bne.n	80061f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	695b      	ldr	r3, [r3, #20]
 80061c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061c6:	2b80      	cmp	r3, #128	@ 0x80
 80061c8:	d016      	beq.n	80061f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2220      	movs	r2, #32
 80061d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061e4:	f043 0220 	orr.w	r2, r3, #32
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e007      	b.n	8006208 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	695b      	ldr	r3, [r3, #20]
 80061fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006202:	2b80      	cmp	r3, #128	@ 0x80
 8006204:	d1c3      	bne.n	800618e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006206:	2300      	movs	r3, #0
}
 8006208:	4618      	mov	r0, r3
 800620a:	3710      	adds	r7, #16
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800621c:	e034      	b.n	8006288 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800621e:	68f8      	ldr	r0, [r7, #12]
 8006220:	f000 f89b 	bl	800635a <I2C_IsAcknowledgeFailed>
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d001      	beq.n	800622e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e034      	b.n	8006298 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006234:	d028      	beq.n	8006288 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006236:	f7fd ff8f 	bl	8004158 <HAL_GetTick>
 800623a:	4602      	mov	r2, r0
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	68ba      	ldr	r2, [r7, #8]
 8006242:	429a      	cmp	r2, r3
 8006244:	d302      	bcc.n	800624c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d11d      	bne.n	8006288 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	695b      	ldr	r3, [r3, #20]
 8006252:	f003 0304 	and.w	r3, r3, #4
 8006256:	2b04      	cmp	r3, #4
 8006258:	d016      	beq.n	8006288 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2220      	movs	r2, #32
 8006264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006274:	f043 0220 	orr.w	r2, r3, #32
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	e007      	b.n	8006298 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	695b      	ldr	r3, [r3, #20]
 800628e:	f003 0304 	and.w	r3, r3, #4
 8006292:	2b04      	cmp	r3, #4
 8006294:	d1c3      	bne.n	800621e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	3710      	adds	r7, #16
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80062ac:	e049      	b.n	8006342 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	695b      	ldr	r3, [r3, #20]
 80062b4:	f003 0310 	and.w	r3, r3, #16
 80062b8:	2b10      	cmp	r3, #16
 80062ba:	d119      	bne.n	80062f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f06f 0210 	mvn.w	r2, #16
 80062c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2200      	movs	r2, #0
 80062ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2220      	movs	r2, #32
 80062d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e030      	b.n	8006352 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062f0:	f7fd ff32 	bl	8004158 <HAL_GetTick>
 80062f4:	4602      	mov	r2, r0
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	68ba      	ldr	r2, [r7, #8]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d302      	bcc.n	8006306 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d11d      	bne.n	8006342 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	695b      	ldr	r3, [r3, #20]
 800630c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006310:	2b40      	cmp	r3, #64	@ 0x40
 8006312:	d016      	beq.n	8006342 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2200      	movs	r2, #0
 8006318:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2220      	movs	r2, #32
 800631e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800632e:	f043 0220 	orr.w	r2, r3, #32
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2200      	movs	r2, #0
 800633a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e007      	b.n	8006352 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	695b      	ldr	r3, [r3, #20]
 8006348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800634c:	2b40      	cmp	r3, #64	@ 0x40
 800634e:	d1ae      	bne.n	80062ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}

0800635a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800635a:	b480      	push	{r7}
 800635c:	b083      	sub	sp, #12
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	695b      	ldr	r3, [r3, #20]
 8006368:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800636c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006370:	d11b      	bne.n	80063aa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800637a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2220      	movs	r2, #32
 8006386:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006396:	f043 0204 	orr.w	r2, r3, #4
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e000      	b.n	80063ac <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bc80      	pop	{r7}
 80063b4:	4770      	bx	lr
	...

080063b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b086      	sub	sp, #24
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d101      	bne.n	80063ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e272      	b.n	80068b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	f000 8087 	beq.w	80064e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80063d8:	4b92      	ldr	r3, [pc, #584]	@ (8006624 <HAL_RCC_OscConfig+0x26c>)
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	f003 030c 	and.w	r3, r3, #12
 80063e0:	2b04      	cmp	r3, #4
 80063e2:	d00c      	beq.n	80063fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80063e4:	4b8f      	ldr	r3, [pc, #572]	@ (8006624 <HAL_RCC_OscConfig+0x26c>)
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	f003 030c 	and.w	r3, r3, #12
 80063ec:	2b08      	cmp	r3, #8
 80063ee:	d112      	bne.n	8006416 <HAL_RCC_OscConfig+0x5e>
 80063f0:	4b8c      	ldr	r3, [pc, #560]	@ (8006624 <HAL_RCC_OscConfig+0x26c>)
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80063f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063fc:	d10b      	bne.n	8006416 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063fe:	4b89      	ldr	r3, [pc, #548]	@ (8006624 <HAL_RCC_OscConfig+0x26c>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006406:	2b00      	cmp	r3, #0
 8006408:	d06c      	beq.n	80064e4 <HAL_RCC_OscConfig+0x12c>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d168      	bne.n	80064e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e24c      	b.n	80068b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800641e:	d106      	bne.n	800642e <HAL_RCC_OscConfig+0x76>
 8006420:	4b80      	ldr	r3, [pc, #512]	@ (8006624 <HAL_RCC_OscConfig+0x26c>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a7f      	ldr	r2, [pc, #508]	@ (8006624 <HAL_RCC_OscConfig+0x26c>)
 8006426:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800642a:	6013      	str	r3, [r2, #0]
 800642c:	e02e      	b.n	800648c <HAL_RCC_OscConfig+0xd4>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d10c      	bne.n	8006450 <HAL_RCC_OscConfig+0x98>
 8006436:	4b7b      	ldr	r3, [pc, #492]	@ (8006624 <HAL_RCC_OscConfig+0x26c>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a7a      	ldr	r2, [pc, #488]	@ (8006624 <HAL_RCC_OscConfig+0x26c>)
 800643c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006440:	6013      	str	r3, [r2, #0]
 8006442:	4b78      	ldr	r3, [pc, #480]	@ (8006624 <HAL_RCC_OscConfig+0x26c>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a77      	ldr	r2, [pc, #476]	@ (8006624 <HAL_RCC_OscConfig+0x26c>)
 8006448:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800644c:	6013      	str	r3, [r2, #0]
 800644e:	e01d      	b.n	800648c <HAL_RCC_OscConfig+0xd4>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006458:	d10c      	bne.n	8006474 <HAL_RCC_OscConfig+0xbc>
 800645a:	4b72      	ldr	r3, [pc, #456]	@ (8006624 <HAL_RCC_OscConfig+0x26c>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a71      	ldr	r2, [pc, #452]	@ (8006624 <HAL_RCC_OscConfig+0x26c>)
 8006460:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006464:	6013      	str	r3, [r2, #0]
 8006466:	4b6f      	ldr	r3, [pc, #444]	@ (8006624 <HAL_RCC_OscConfig+0x26c>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a6e      	ldr	r2, [pc, #440]	@ (8006624 <HAL_RCC_OscConfig+0x26c>)
 800646c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006470:	6013      	str	r3, [r2, #0]
 8006472:	e00b      	b.n	800648c <HAL_RCC_OscConfig+0xd4>
 8006474:	4b6b      	ldr	r3, [pc, #428]	@ (8006624 <HAL_RCC_OscConfig+0x26c>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a6a      	ldr	r2, [pc, #424]	@ (8006624 <HAL_RCC_OscConfig+0x26c>)
 800647a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800647e:	6013      	str	r3, [r2, #0]
 8006480:	4b68      	ldr	r3, [pc, #416]	@ (8006624 <HAL_RCC_OscConfig+0x26c>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a67      	ldr	r2, [pc, #412]	@ (8006624 <HAL_RCC_OscConfig+0x26c>)
 8006486:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800648a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d013      	beq.n	80064bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006494:	f7fd fe60 	bl	8004158 <HAL_GetTick>
 8006498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800649a:	e008      	b.n	80064ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800649c:	f7fd fe5c 	bl	8004158 <HAL_GetTick>
 80064a0:	4602      	mov	r2, r0
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	2b64      	cmp	r3, #100	@ 0x64
 80064a8:	d901      	bls.n	80064ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80064aa:	2303      	movs	r3, #3
 80064ac:	e200      	b.n	80068b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064ae:	4b5d      	ldr	r3, [pc, #372]	@ (8006624 <HAL_RCC_OscConfig+0x26c>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d0f0      	beq.n	800649c <HAL_RCC_OscConfig+0xe4>
 80064ba:	e014      	b.n	80064e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064bc:	f7fd fe4c 	bl	8004158 <HAL_GetTick>
 80064c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064c2:	e008      	b.n	80064d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064c4:	f7fd fe48 	bl	8004158 <HAL_GetTick>
 80064c8:	4602      	mov	r2, r0
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	2b64      	cmp	r3, #100	@ 0x64
 80064d0:	d901      	bls.n	80064d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	e1ec      	b.n	80068b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064d6:	4b53      	ldr	r3, [pc, #332]	@ (8006624 <HAL_RCC_OscConfig+0x26c>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1f0      	bne.n	80064c4 <HAL_RCC_OscConfig+0x10c>
 80064e2:	e000      	b.n	80064e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0302 	and.w	r3, r3, #2
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d063      	beq.n	80065ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80064f2:	4b4c      	ldr	r3, [pc, #304]	@ (8006624 <HAL_RCC_OscConfig+0x26c>)
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	f003 030c 	and.w	r3, r3, #12
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00b      	beq.n	8006516 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80064fe:	4b49      	ldr	r3, [pc, #292]	@ (8006624 <HAL_RCC_OscConfig+0x26c>)
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	f003 030c 	and.w	r3, r3, #12
 8006506:	2b08      	cmp	r3, #8
 8006508:	d11c      	bne.n	8006544 <HAL_RCC_OscConfig+0x18c>
 800650a:	4b46      	ldr	r3, [pc, #280]	@ (8006624 <HAL_RCC_OscConfig+0x26c>)
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006512:	2b00      	cmp	r3, #0
 8006514:	d116      	bne.n	8006544 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006516:	4b43      	ldr	r3, [pc, #268]	@ (8006624 <HAL_RCC_OscConfig+0x26c>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 0302 	and.w	r3, r3, #2
 800651e:	2b00      	cmp	r3, #0
 8006520:	d005      	beq.n	800652e <HAL_RCC_OscConfig+0x176>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	2b01      	cmp	r3, #1
 8006528:	d001      	beq.n	800652e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e1c0      	b.n	80068b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800652e:	4b3d      	ldr	r3, [pc, #244]	@ (8006624 <HAL_RCC_OscConfig+0x26c>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	695b      	ldr	r3, [r3, #20]
 800653a:	00db      	lsls	r3, r3, #3
 800653c:	4939      	ldr	r1, [pc, #228]	@ (8006624 <HAL_RCC_OscConfig+0x26c>)
 800653e:	4313      	orrs	r3, r2
 8006540:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006542:	e03a      	b.n	80065ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d020      	beq.n	800658e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800654c:	4b36      	ldr	r3, [pc, #216]	@ (8006628 <HAL_RCC_OscConfig+0x270>)
 800654e:	2201      	movs	r2, #1
 8006550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006552:	f7fd fe01 	bl	8004158 <HAL_GetTick>
 8006556:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006558:	e008      	b.n	800656c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800655a:	f7fd fdfd 	bl	8004158 <HAL_GetTick>
 800655e:	4602      	mov	r2, r0
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	1ad3      	subs	r3, r2, r3
 8006564:	2b02      	cmp	r3, #2
 8006566:	d901      	bls.n	800656c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006568:	2303      	movs	r3, #3
 800656a:	e1a1      	b.n	80068b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800656c:	4b2d      	ldr	r3, [pc, #180]	@ (8006624 <HAL_RCC_OscConfig+0x26c>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 0302 	and.w	r3, r3, #2
 8006574:	2b00      	cmp	r3, #0
 8006576:	d0f0      	beq.n	800655a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006578:	4b2a      	ldr	r3, [pc, #168]	@ (8006624 <HAL_RCC_OscConfig+0x26c>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	695b      	ldr	r3, [r3, #20]
 8006584:	00db      	lsls	r3, r3, #3
 8006586:	4927      	ldr	r1, [pc, #156]	@ (8006624 <HAL_RCC_OscConfig+0x26c>)
 8006588:	4313      	orrs	r3, r2
 800658a:	600b      	str	r3, [r1, #0]
 800658c:	e015      	b.n	80065ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800658e:	4b26      	ldr	r3, [pc, #152]	@ (8006628 <HAL_RCC_OscConfig+0x270>)
 8006590:	2200      	movs	r2, #0
 8006592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006594:	f7fd fde0 	bl	8004158 <HAL_GetTick>
 8006598:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800659a:	e008      	b.n	80065ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800659c:	f7fd fddc 	bl	8004158 <HAL_GetTick>
 80065a0:	4602      	mov	r2, r0
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d901      	bls.n	80065ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e180      	b.n	80068b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065ae:	4b1d      	ldr	r3, [pc, #116]	@ (8006624 <HAL_RCC_OscConfig+0x26c>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 0302 	and.w	r3, r3, #2
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d1f0      	bne.n	800659c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0308 	and.w	r3, r3, #8
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d03a      	beq.n	800663c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	699b      	ldr	r3, [r3, #24]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d019      	beq.n	8006602 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065ce:	4b17      	ldr	r3, [pc, #92]	@ (800662c <HAL_RCC_OscConfig+0x274>)
 80065d0:	2201      	movs	r2, #1
 80065d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065d4:	f7fd fdc0 	bl	8004158 <HAL_GetTick>
 80065d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065da:	e008      	b.n	80065ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065dc:	f7fd fdbc 	bl	8004158 <HAL_GetTick>
 80065e0:	4602      	mov	r2, r0
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	1ad3      	subs	r3, r2, r3
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	d901      	bls.n	80065ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e160      	b.n	80068b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006624 <HAL_RCC_OscConfig+0x26c>)
 80065f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065f2:	f003 0302 	and.w	r3, r3, #2
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d0f0      	beq.n	80065dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80065fa:	2001      	movs	r0, #1
 80065fc:	f000 face 	bl	8006b9c <RCC_Delay>
 8006600:	e01c      	b.n	800663c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006602:	4b0a      	ldr	r3, [pc, #40]	@ (800662c <HAL_RCC_OscConfig+0x274>)
 8006604:	2200      	movs	r2, #0
 8006606:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006608:	f7fd fda6 	bl	8004158 <HAL_GetTick>
 800660c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800660e:	e00f      	b.n	8006630 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006610:	f7fd fda2 	bl	8004158 <HAL_GetTick>
 8006614:	4602      	mov	r2, r0
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	2b02      	cmp	r3, #2
 800661c:	d908      	bls.n	8006630 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	e146      	b.n	80068b0 <HAL_RCC_OscConfig+0x4f8>
 8006622:	bf00      	nop
 8006624:	40021000 	.word	0x40021000
 8006628:	42420000 	.word	0x42420000
 800662c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006630:	4b92      	ldr	r3, [pc, #584]	@ (800687c <HAL_RCC_OscConfig+0x4c4>)
 8006632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006634:	f003 0302 	and.w	r3, r3, #2
 8006638:	2b00      	cmp	r3, #0
 800663a:	d1e9      	bne.n	8006610 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 0304 	and.w	r3, r3, #4
 8006644:	2b00      	cmp	r3, #0
 8006646:	f000 80a6 	beq.w	8006796 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800664a:	2300      	movs	r3, #0
 800664c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800664e:	4b8b      	ldr	r3, [pc, #556]	@ (800687c <HAL_RCC_OscConfig+0x4c4>)
 8006650:	69db      	ldr	r3, [r3, #28]
 8006652:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006656:	2b00      	cmp	r3, #0
 8006658:	d10d      	bne.n	8006676 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800665a:	4b88      	ldr	r3, [pc, #544]	@ (800687c <HAL_RCC_OscConfig+0x4c4>)
 800665c:	69db      	ldr	r3, [r3, #28]
 800665e:	4a87      	ldr	r2, [pc, #540]	@ (800687c <HAL_RCC_OscConfig+0x4c4>)
 8006660:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006664:	61d3      	str	r3, [r2, #28]
 8006666:	4b85      	ldr	r3, [pc, #532]	@ (800687c <HAL_RCC_OscConfig+0x4c4>)
 8006668:	69db      	ldr	r3, [r3, #28]
 800666a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800666e:	60bb      	str	r3, [r7, #8]
 8006670:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006672:	2301      	movs	r3, #1
 8006674:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006676:	4b82      	ldr	r3, [pc, #520]	@ (8006880 <HAL_RCC_OscConfig+0x4c8>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800667e:	2b00      	cmp	r3, #0
 8006680:	d118      	bne.n	80066b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006682:	4b7f      	ldr	r3, [pc, #508]	@ (8006880 <HAL_RCC_OscConfig+0x4c8>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a7e      	ldr	r2, [pc, #504]	@ (8006880 <HAL_RCC_OscConfig+0x4c8>)
 8006688:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800668c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800668e:	f7fd fd63 	bl	8004158 <HAL_GetTick>
 8006692:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006694:	e008      	b.n	80066a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006696:	f7fd fd5f 	bl	8004158 <HAL_GetTick>
 800669a:	4602      	mov	r2, r0
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	2b64      	cmp	r3, #100	@ 0x64
 80066a2:	d901      	bls.n	80066a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80066a4:	2303      	movs	r3, #3
 80066a6:	e103      	b.n	80068b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066a8:	4b75      	ldr	r3, [pc, #468]	@ (8006880 <HAL_RCC_OscConfig+0x4c8>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d0f0      	beq.n	8006696 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d106      	bne.n	80066ca <HAL_RCC_OscConfig+0x312>
 80066bc:	4b6f      	ldr	r3, [pc, #444]	@ (800687c <HAL_RCC_OscConfig+0x4c4>)
 80066be:	6a1b      	ldr	r3, [r3, #32]
 80066c0:	4a6e      	ldr	r2, [pc, #440]	@ (800687c <HAL_RCC_OscConfig+0x4c4>)
 80066c2:	f043 0301 	orr.w	r3, r3, #1
 80066c6:	6213      	str	r3, [r2, #32]
 80066c8:	e02d      	b.n	8006726 <HAL_RCC_OscConfig+0x36e>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d10c      	bne.n	80066ec <HAL_RCC_OscConfig+0x334>
 80066d2:	4b6a      	ldr	r3, [pc, #424]	@ (800687c <HAL_RCC_OscConfig+0x4c4>)
 80066d4:	6a1b      	ldr	r3, [r3, #32]
 80066d6:	4a69      	ldr	r2, [pc, #420]	@ (800687c <HAL_RCC_OscConfig+0x4c4>)
 80066d8:	f023 0301 	bic.w	r3, r3, #1
 80066dc:	6213      	str	r3, [r2, #32]
 80066de:	4b67      	ldr	r3, [pc, #412]	@ (800687c <HAL_RCC_OscConfig+0x4c4>)
 80066e0:	6a1b      	ldr	r3, [r3, #32]
 80066e2:	4a66      	ldr	r2, [pc, #408]	@ (800687c <HAL_RCC_OscConfig+0x4c4>)
 80066e4:	f023 0304 	bic.w	r3, r3, #4
 80066e8:	6213      	str	r3, [r2, #32]
 80066ea:	e01c      	b.n	8006726 <HAL_RCC_OscConfig+0x36e>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	2b05      	cmp	r3, #5
 80066f2:	d10c      	bne.n	800670e <HAL_RCC_OscConfig+0x356>
 80066f4:	4b61      	ldr	r3, [pc, #388]	@ (800687c <HAL_RCC_OscConfig+0x4c4>)
 80066f6:	6a1b      	ldr	r3, [r3, #32]
 80066f8:	4a60      	ldr	r2, [pc, #384]	@ (800687c <HAL_RCC_OscConfig+0x4c4>)
 80066fa:	f043 0304 	orr.w	r3, r3, #4
 80066fe:	6213      	str	r3, [r2, #32]
 8006700:	4b5e      	ldr	r3, [pc, #376]	@ (800687c <HAL_RCC_OscConfig+0x4c4>)
 8006702:	6a1b      	ldr	r3, [r3, #32]
 8006704:	4a5d      	ldr	r2, [pc, #372]	@ (800687c <HAL_RCC_OscConfig+0x4c4>)
 8006706:	f043 0301 	orr.w	r3, r3, #1
 800670a:	6213      	str	r3, [r2, #32]
 800670c:	e00b      	b.n	8006726 <HAL_RCC_OscConfig+0x36e>
 800670e:	4b5b      	ldr	r3, [pc, #364]	@ (800687c <HAL_RCC_OscConfig+0x4c4>)
 8006710:	6a1b      	ldr	r3, [r3, #32]
 8006712:	4a5a      	ldr	r2, [pc, #360]	@ (800687c <HAL_RCC_OscConfig+0x4c4>)
 8006714:	f023 0301 	bic.w	r3, r3, #1
 8006718:	6213      	str	r3, [r2, #32]
 800671a:	4b58      	ldr	r3, [pc, #352]	@ (800687c <HAL_RCC_OscConfig+0x4c4>)
 800671c:	6a1b      	ldr	r3, [r3, #32]
 800671e:	4a57      	ldr	r2, [pc, #348]	@ (800687c <HAL_RCC_OscConfig+0x4c4>)
 8006720:	f023 0304 	bic.w	r3, r3, #4
 8006724:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d015      	beq.n	800675a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800672e:	f7fd fd13 	bl	8004158 <HAL_GetTick>
 8006732:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006734:	e00a      	b.n	800674c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006736:	f7fd fd0f 	bl	8004158 <HAL_GetTick>
 800673a:	4602      	mov	r2, r0
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	1ad3      	subs	r3, r2, r3
 8006740:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006744:	4293      	cmp	r3, r2
 8006746:	d901      	bls.n	800674c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006748:	2303      	movs	r3, #3
 800674a:	e0b1      	b.n	80068b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800674c:	4b4b      	ldr	r3, [pc, #300]	@ (800687c <HAL_RCC_OscConfig+0x4c4>)
 800674e:	6a1b      	ldr	r3, [r3, #32]
 8006750:	f003 0302 	and.w	r3, r3, #2
 8006754:	2b00      	cmp	r3, #0
 8006756:	d0ee      	beq.n	8006736 <HAL_RCC_OscConfig+0x37e>
 8006758:	e014      	b.n	8006784 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800675a:	f7fd fcfd 	bl	8004158 <HAL_GetTick>
 800675e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006760:	e00a      	b.n	8006778 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006762:	f7fd fcf9 	bl	8004158 <HAL_GetTick>
 8006766:	4602      	mov	r2, r0
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	1ad3      	subs	r3, r2, r3
 800676c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006770:	4293      	cmp	r3, r2
 8006772:	d901      	bls.n	8006778 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006774:	2303      	movs	r3, #3
 8006776:	e09b      	b.n	80068b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006778:	4b40      	ldr	r3, [pc, #256]	@ (800687c <HAL_RCC_OscConfig+0x4c4>)
 800677a:	6a1b      	ldr	r3, [r3, #32]
 800677c:	f003 0302 	and.w	r3, r3, #2
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1ee      	bne.n	8006762 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006784:	7dfb      	ldrb	r3, [r7, #23]
 8006786:	2b01      	cmp	r3, #1
 8006788:	d105      	bne.n	8006796 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800678a:	4b3c      	ldr	r3, [pc, #240]	@ (800687c <HAL_RCC_OscConfig+0x4c4>)
 800678c:	69db      	ldr	r3, [r3, #28]
 800678e:	4a3b      	ldr	r2, [pc, #236]	@ (800687c <HAL_RCC_OscConfig+0x4c4>)
 8006790:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006794:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	69db      	ldr	r3, [r3, #28]
 800679a:	2b00      	cmp	r3, #0
 800679c:	f000 8087 	beq.w	80068ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80067a0:	4b36      	ldr	r3, [pc, #216]	@ (800687c <HAL_RCC_OscConfig+0x4c4>)
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	f003 030c 	and.w	r3, r3, #12
 80067a8:	2b08      	cmp	r3, #8
 80067aa:	d061      	beq.n	8006870 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	69db      	ldr	r3, [r3, #28]
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d146      	bne.n	8006842 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067b4:	4b33      	ldr	r3, [pc, #204]	@ (8006884 <HAL_RCC_OscConfig+0x4cc>)
 80067b6:	2200      	movs	r2, #0
 80067b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067ba:	f7fd fccd 	bl	8004158 <HAL_GetTick>
 80067be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067c0:	e008      	b.n	80067d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067c2:	f7fd fcc9 	bl	8004158 <HAL_GetTick>
 80067c6:	4602      	mov	r2, r0
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	d901      	bls.n	80067d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80067d0:	2303      	movs	r3, #3
 80067d2:	e06d      	b.n	80068b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067d4:	4b29      	ldr	r3, [pc, #164]	@ (800687c <HAL_RCC_OscConfig+0x4c4>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d1f0      	bne.n	80067c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a1b      	ldr	r3, [r3, #32]
 80067e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067e8:	d108      	bne.n	80067fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80067ea:	4b24      	ldr	r3, [pc, #144]	@ (800687c <HAL_RCC_OscConfig+0x4c4>)
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	4921      	ldr	r1, [pc, #132]	@ (800687c <HAL_RCC_OscConfig+0x4c4>)
 80067f8:	4313      	orrs	r3, r2
 80067fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80067fc:	4b1f      	ldr	r3, [pc, #124]	@ (800687c <HAL_RCC_OscConfig+0x4c4>)
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6a19      	ldr	r1, [r3, #32]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800680c:	430b      	orrs	r3, r1
 800680e:	491b      	ldr	r1, [pc, #108]	@ (800687c <HAL_RCC_OscConfig+0x4c4>)
 8006810:	4313      	orrs	r3, r2
 8006812:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006814:	4b1b      	ldr	r3, [pc, #108]	@ (8006884 <HAL_RCC_OscConfig+0x4cc>)
 8006816:	2201      	movs	r2, #1
 8006818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800681a:	f7fd fc9d 	bl	8004158 <HAL_GetTick>
 800681e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006820:	e008      	b.n	8006834 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006822:	f7fd fc99 	bl	8004158 <HAL_GetTick>
 8006826:	4602      	mov	r2, r0
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	2b02      	cmp	r3, #2
 800682e:	d901      	bls.n	8006834 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006830:	2303      	movs	r3, #3
 8006832:	e03d      	b.n	80068b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006834:	4b11      	ldr	r3, [pc, #68]	@ (800687c <HAL_RCC_OscConfig+0x4c4>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800683c:	2b00      	cmp	r3, #0
 800683e:	d0f0      	beq.n	8006822 <HAL_RCC_OscConfig+0x46a>
 8006840:	e035      	b.n	80068ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006842:	4b10      	ldr	r3, [pc, #64]	@ (8006884 <HAL_RCC_OscConfig+0x4cc>)
 8006844:	2200      	movs	r2, #0
 8006846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006848:	f7fd fc86 	bl	8004158 <HAL_GetTick>
 800684c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800684e:	e008      	b.n	8006862 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006850:	f7fd fc82 	bl	8004158 <HAL_GetTick>
 8006854:	4602      	mov	r2, r0
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	2b02      	cmp	r3, #2
 800685c:	d901      	bls.n	8006862 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800685e:	2303      	movs	r3, #3
 8006860:	e026      	b.n	80068b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006862:	4b06      	ldr	r3, [pc, #24]	@ (800687c <HAL_RCC_OscConfig+0x4c4>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1f0      	bne.n	8006850 <HAL_RCC_OscConfig+0x498>
 800686e:	e01e      	b.n	80068ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	69db      	ldr	r3, [r3, #28]
 8006874:	2b01      	cmp	r3, #1
 8006876:	d107      	bne.n	8006888 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e019      	b.n	80068b0 <HAL_RCC_OscConfig+0x4f8>
 800687c:	40021000 	.word	0x40021000
 8006880:	40007000 	.word	0x40007000
 8006884:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006888:	4b0b      	ldr	r3, [pc, #44]	@ (80068b8 <HAL_RCC_OscConfig+0x500>)
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6a1b      	ldr	r3, [r3, #32]
 8006898:	429a      	cmp	r2, r3
 800689a:	d106      	bne.n	80068aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d001      	beq.n	80068ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e000      	b.n	80068b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80068ae:	2300      	movs	r3, #0
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3718      	adds	r7, #24
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}
 80068b8:	40021000 	.word	0x40021000

080068bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d101      	bne.n	80068d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	e0d0      	b.n	8006a72 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80068d0:	4b6a      	ldr	r3, [pc, #424]	@ (8006a7c <HAL_RCC_ClockConfig+0x1c0>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 0307 	and.w	r3, r3, #7
 80068d8:	683a      	ldr	r2, [r7, #0]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d910      	bls.n	8006900 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068de:	4b67      	ldr	r3, [pc, #412]	@ (8006a7c <HAL_RCC_ClockConfig+0x1c0>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f023 0207 	bic.w	r2, r3, #7
 80068e6:	4965      	ldr	r1, [pc, #404]	@ (8006a7c <HAL_RCC_ClockConfig+0x1c0>)
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068ee:	4b63      	ldr	r3, [pc, #396]	@ (8006a7c <HAL_RCC_ClockConfig+0x1c0>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 0307 	and.w	r3, r3, #7
 80068f6:	683a      	ldr	r2, [r7, #0]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d001      	beq.n	8006900 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e0b8      	b.n	8006a72 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f003 0302 	and.w	r3, r3, #2
 8006908:	2b00      	cmp	r3, #0
 800690a:	d020      	beq.n	800694e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 0304 	and.w	r3, r3, #4
 8006914:	2b00      	cmp	r3, #0
 8006916:	d005      	beq.n	8006924 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006918:	4b59      	ldr	r3, [pc, #356]	@ (8006a80 <HAL_RCC_ClockConfig+0x1c4>)
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	4a58      	ldr	r2, [pc, #352]	@ (8006a80 <HAL_RCC_ClockConfig+0x1c4>)
 800691e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006922:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 0308 	and.w	r3, r3, #8
 800692c:	2b00      	cmp	r3, #0
 800692e:	d005      	beq.n	800693c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006930:	4b53      	ldr	r3, [pc, #332]	@ (8006a80 <HAL_RCC_ClockConfig+0x1c4>)
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	4a52      	ldr	r2, [pc, #328]	@ (8006a80 <HAL_RCC_ClockConfig+0x1c4>)
 8006936:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800693a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800693c:	4b50      	ldr	r3, [pc, #320]	@ (8006a80 <HAL_RCC_ClockConfig+0x1c4>)
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	494d      	ldr	r1, [pc, #308]	@ (8006a80 <HAL_RCC_ClockConfig+0x1c4>)
 800694a:	4313      	orrs	r3, r2
 800694c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 0301 	and.w	r3, r3, #1
 8006956:	2b00      	cmp	r3, #0
 8006958:	d040      	beq.n	80069dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	2b01      	cmp	r3, #1
 8006960:	d107      	bne.n	8006972 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006962:	4b47      	ldr	r3, [pc, #284]	@ (8006a80 <HAL_RCC_ClockConfig+0x1c4>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800696a:	2b00      	cmp	r3, #0
 800696c:	d115      	bne.n	800699a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e07f      	b.n	8006a72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	2b02      	cmp	r3, #2
 8006978:	d107      	bne.n	800698a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800697a:	4b41      	ldr	r3, [pc, #260]	@ (8006a80 <HAL_RCC_ClockConfig+0x1c4>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006982:	2b00      	cmp	r3, #0
 8006984:	d109      	bne.n	800699a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	e073      	b.n	8006a72 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800698a:	4b3d      	ldr	r3, [pc, #244]	@ (8006a80 <HAL_RCC_ClockConfig+0x1c4>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 0302 	and.w	r3, r3, #2
 8006992:	2b00      	cmp	r3, #0
 8006994:	d101      	bne.n	800699a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	e06b      	b.n	8006a72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800699a:	4b39      	ldr	r3, [pc, #228]	@ (8006a80 <HAL_RCC_ClockConfig+0x1c4>)
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	f023 0203 	bic.w	r2, r3, #3
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	4936      	ldr	r1, [pc, #216]	@ (8006a80 <HAL_RCC_ClockConfig+0x1c4>)
 80069a8:	4313      	orrs	r3, r2
 80069aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80069ac:	f7fd fbd4 	bl	8004158 <HAL_GetTick>
 80069b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069b2:	e00a      	b.n	80069ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069b4:	f7fd fbd0 	bl	8004158 <HAL_GetTick>
 80069b8:	4602      	mov	r2, r0
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	1ad3      	subs	r3, r2, r3
 80069be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d901      	bls.n	80069ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80069c6:	2303      	movs	r3, #3
 80069c8:	e053      	b.n	8006a72 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069ca:	4b2d      	ldr	r3, [pc, #180]	@ (8006a80 <HAL_RCC_ClockConfig+0x1c4>)
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	f003 020c 	and.w	r2, r3, #12
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	429a      	cmp	r2, r3
 80069da:	d1eb      	bne.n	80069b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80069dc:	4b27      	ldr	r3, [pc, #156]	@ (8006a7c <HAL_RCC_ClockConfig+0x1c0>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 0307 	and.w	r3, r3, #7
 80069e4:	683a      	ldr	r2, [r7, #0]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d210      	bcs.n	8006a0c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069ea:	4b24      	ldr	r3, [pc, #144]	@ (8006a7c <HAL_RCC_ClockConfig+0x1c0>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f023 0207 	bic.w	r2, r3, #7
 80069f2:	4922      	ldr	r1, [pc, #136]	@ (8006a7c <HAL_RCC_ClockConfig+0x1c0>)
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069fa:	4b20      	ldr	r3, [pc, #128]	@ (8006a7c <HAL_RCC_ClockConfig+0x1c0>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 0307 	and.w	r3, r3, #7
 8006a02:	683a      	ldr	r2, [r7, #0]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d001      	beq.n	8006a0c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e032      	b.n	8006a72 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 0304 	and.w	r3, r3, #4
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d008      	beq.n	8006a2a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a18:	4b19      	ldr	r3, [pc, #100]	@ (8006a80 <HAL_RCC_ClockConfig+0x1c4>)
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	4916      	ldr	r1, [pc, #88]	@ (8006a80 <HAL_RCC_ClockConfig+0x1c4>)
 8006a26:	4313      	orrs	r3, r2
 8006a28:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 0308 	and.w	r3, r3, #8
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d009      	beq.n	8006a4a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006a36:	4b12      	ldr	r3, [pc, #72]	@ (8006a80 <HAL_RCC_ClockConfig+0x1c4>)
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	00db      	lsls	r3, r3, #3
 8006a44:	490e      	ldr	r1, [pc, #56]	@ (8006a80 <HAL_RCC_ClockConfig+0x1c4>)
 8006a46:	4313      	orrs	r3, r2
 8006a48:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006a4a:	f000 f821 	bl	8006a90 <HAL_RCC_GetSysClockFreq>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	4b0b      	ldr	r3, [pc, #44]	@ (8006a80 <HAL_RCC_ClockConfig+0x1c4>)
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	091b      	lsrs	r3, r3, #4
 8006a56:	f003 030f 	and.w	r3, r3, #15
 8006a5a:	490a      	ldr	r1, [pc, #40]	@ (8006a84 <HAL_RCC_ClockConfig+0x1c8>)
 8006a5c:	5ccb      	ldrb	r3, [r1, r3]
 8006a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a62:	4a09      	ldr	r2, [pc, #36]	@ (8006a88 <HAL_RCC_ClockConfig+0x1cc>)
 8006a64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006a66:	4b09      	ldr	r3, [pc, #36]	@ (8006a8c <HAL_RCC_ClockConfig+0x1d0>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f7fd fb32 	bl	80040d4 <HAL_InitTick>

  return HAL_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	40022000 	.word	0x40022000
 8006a80:	40021000 	.word	0x40021000
 8006a84:	08009c34 	.word	0x08009c34
 8006a88:	20000060 	.word	0x20000060
 8006a8c:	20000064 	.word	0x20000064

08006a90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b087      	sub	sp, #28
 8006a94:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006a96:	2300      	movs	r3, #0
 8006a98:	60fb      	str	r3, [r7, #12]
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	60bb      	str	r3, [r7, #8]
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	617b      	str	r3, [r7, #20]
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006aaa:	4b1e      	ldr	r3, [pc, #120]	@ (8006b24 <HAL_RCC_GetSysClockFreq+0x94>)
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f003 030c 	and.w	r3, r3, #12
 8006ab6:	2b04      	cmp	r3, #4
 8006ab8:	d002      	beq.n	8006ac0 <HAL_RCC_GetSysClockFreq+0x30>
 8006aba:	2b08      	cmp	r3, #8
 8006abc:	d003      	beq.n	8006ac6 <HAL_RCC_GetSysClockFreq+0x36>
 8006abe:	e027      	b.n	8006b10 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006ac0:	4b19      	ldr	r3, [pc, #100]	@ (8006b28 <HAL_RCC_GetSysClockFreq+0x98>)
 8006ac2:	613b      	str	r3, [r7, #16]
      break;
 8006ac4:	e027      	b.n	8006b16 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	0c9b      	lsrs	r3, r3, #18
 8006aca:	f003 030f 	and.w	r3, r3, #15
 8006ace:	4a17      	ldr	r2, [pc, #92]	@ (8006b2c <HAL_RCC_GetSysClockFreq+0x9c>)
 8006ad0:	5cd3      	ldrb	r3, [r2, r3]
 8006ad2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d010      	beq.n	8006b00 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006ade:	4b11      	ldr	r3, [pc, #68]	@ (8006b24 <HAL_RCC_GetSysClockFreq+0x94>)
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	0c5b      	lsrs	r3, r3, #17
 8006ae4:	f003 0301 	and.w	r3, r3, #1
 8006ae8:	4a11      	ldr	r2, [pc, #68]	@ (8006b30 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006aea:	5cd3      	ldrb	r3, [r2, r3]
 8006aec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a0d      	ldr	r2, [pc, #52]	@ (8006b28 <HAL_RCC_GetSysClockFreq+0x98>)
 8006af2:	fb03 f202 	mul.w	r2, r3, r2
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006afc:	617b      	str	r3, [r7, #20]
 8006afe:	e004      	b.n	8006b0a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4a0c      	ldr	r2, [pc, #48]	@ (8006b34 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006b04:	fb02 f303 	mul.w	r3, r2, r3
 8006b08:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	613b      	str	r3, [r7, #16]
      break;
 8006b0e:	e002      	b.n	8006b16 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006b10:	4b05      	ldr	r3, [pc, #20]	@ (8006b28 <HAL_RCC_GetSysClockFreq+0x98>)
 8006b12:	613b      	str	r3, [r7, #16]
      break;
 8006b14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b16:	693b      	ldr	r3, [r7, #16]
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	371c      	adds	r7, #28
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bc80      	pop	{r7}
 8006b20:	4770      	bx	lr
 8006b22:	bf00      	nop
 8006b24:	40021000 	.word	0x40021000
 8006b28:	007a1200 	.word	0x007a1200
 8006b2c:	08009c4c 	.word	0x08009c4c
 8006b30:	08009c5c 	.word	0x08009c5c
 8006b34:	003d0900 	.word	0x003d0900

08006b38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b3c:	4b02      	ldr	r3, [pc, #8]	@ (8006b48 <HAL_RCC_GetHCLKFreq+0x10>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bc80      	pop	{r7}
 8006b46:	4770      	bx	lr
 8006b48:	20000060 	.word	0x20000060

08006b4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006b50:	f7ff fff2 	bl	8006b38 <HAL_RCC_GetHCLKFreq>
 8006b54:	4602      	mov	r2, r0
 8006b56:	4b05      	ldr	r3, [pc, #20]	@ (8006b6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	0a1b      	lsrs	r3, r3, #8
 8006b5c:	f003 0307 	and.w	r3, r3, #7
 8006b60:	4903      	ldr	r1, [pc, #12]	@ (8006b70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b62:	5ccb      	ldrb	r3, [r1, r3]
 8006b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	40021000 	.word	0x40021000
 8006b70:	08009c44 	.word	0x08009c44

08006b74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006b78:	f7ff ffde 	bl	8006b38 <HAL_RCC_GetHCLKFreq>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	4b05      	ldr	r3, [pc, #20]	@ (8006b94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	0adb      	lsrs	r3, r3, #11
 8006b84:	f003 0307 	and.w	r3, r3, #7
 8006b88:	4903      	ldr	r1, [pc, #12]	@ (8006b98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b8a:	5ccb      	ldrb	r3, [r1, r3]
 8006b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	40021000 	.word	0x40021000
 8006b98:	08009c44 	.word	0x08009c44

08006b9c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b085      	sub	sp, #20
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8006bd0 <RCC_Delay+0x34>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a0a      	ldr	r2, [pc, #40]	@ (8006bd4 <RCC_Delay+0x38>)
 8006baa:	fba2 2303 	umull	r2, r3, r2, r3
 8006bae:	0a5b      	lsrs	r3, r3, #9
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	fb02 f303 	mul.w	r3, r2, r3
 8006bb6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006bb8:	bf00      	nop
  }
  while (Delay --);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	1e5a      	subs	r2, r3, #1
 8006bbe:	60fa      	str	r2, [r7, #12]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d1f9      	bne.n	8006bb8 <RCC_Delay+0x1c>
}
 8006bc4:	bf00      	nop
 8006bc6:	bf00      	nop
 8006bc8:	3714      	adds	r7, #20
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bc80      	pop	{r7}
 8006bce:	4770      	bx	lr
 8006bd0:	20000060 	.word	0x20000060
 8006bd4:	10624dd3 	.word	0x10624dd3

08006bd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b086      	sub	sp, #24
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006be0:	2300      	movs	r3, #0
 8006be2:	613b      	str	r3, [r7, #16]
 8006be4:	2300      	movs	r3, #0
 8006be6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 0301 	and.w	r3, r3, #1
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d07d      	beq.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bf8:	4b4f      	ldr	r3, [pc, #316]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bfa:	69db      	ldr	r3, [r3, #28]
 8006bfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d10d      	bne.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c04:	4b4c      	ldr	r3, [pc, #304]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c06:	69db      	ldr	r3, [r3, #28]
 8006c08:	4a4b      	ldr	r2, [pc, #300]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c0e:	61d3      	str	r3, [r2, #28]
 8006c10:	4b49      	ldr	r3, [pc, #292]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c12:	69db      	ldr	r3, [r3, #28]
 8006c14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c18:	60bb      	str	r3, [r7, #8]
 8006c1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c20:	4b46      	ldr	r3, [pc, #280]	@ (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d118      	bne.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c2c:	4b43      	ldr	r3, [pc, #268]	@ (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a42      	ldr	r2, [pc, #264]	@ (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006c32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c36:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c38:	f7fd fa8e 	bl	8004158 <HAL_GetTick>
 8006c3c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c3e:	e008      	b.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c40:	f7fd fa8a 	bl	8004158 <HAL_GetTick>
 8006c44:	4602      	mov	r2, r0
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	1ad3      	subs	r3, r2, r3
 8006c4a:	2b64      	cmp	r3, #100	@ 0x64
 8006c4c:	d901      	bls.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006c4e:	2303      	movs	r3, #3
 8006c50:	e06d      	b.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c52:	4b3a      	ldr	r3, [pc, #232]	@ (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d0f0      	beq.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006c5e:	4b36      	ldr	r3, [pc, #216]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c60:	6a1b      	ldr	r3, [r3, #32]
 8006c62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c66:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d02e      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d027      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c7c:	4b2e      	ldr	r3, [pc, #184]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c7e:	6a1b      	ldr	r3, [r3, #32]
 8006c80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c84:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c86:	4b2e      	ldr	r3, [pc, #184]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006c88:	2201      	movs	r2, #1
 8006c8a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c8c:	4b2c      	ldr	r3, [pc, #176]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006c8e:	2200      	movs	r2, #0
 8006c90:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006c92:	4a29      	ldr	r2, [pc, #164]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f003 0301 	and.w	r3, r3, #1
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d014      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ca2:	f7fd fa59 	bl	8004158 <HAL_GetTick>
 8006ca6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ca8:	e00a      	b.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006caa:	f7fd fa55 	bl	8004158 <HAL_GetTick>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	1ad3      	subs	r3, r2, r3
 8006cb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d901      	bls.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	e036      	b.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cc0:	4b1d      	ldr	r3, [pc, #116]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cc2:	6a1b      	ldr	r3, [r3, #32]
 8006cc4:	f003 0302 	and.w	r3, r3, #2
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d0ee      	beq.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ccc:	4b1a      	ldr	r3, [pc, #104]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cce:	6a1b      	ldr	r3, [r3, #32]
 8006cd0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	4917      	ldr	r1, [pc, #92]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006cde:	7dfb      	ldrb	r3, [r7, #23]
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d105      	bne.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ce4:	4b14      	ldr	r3, [pc, #80]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ce6:	69db      	ldr	r3, [r3, #28]
 8006ce8:	4a13      	ldr	r2, [pc, #76]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006cee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 0302 	and.w	r3, r3, #2
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d008      	beq.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006cfc:	4b0e      	ldr	r3, [pc, #56]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	490b      	ldr	r1, [pc, #44]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 0310 	and.w	r3, r3, #16
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d008      	beq.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d1a:	4b07      	ldr	r3, [pc, #28]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	4904      	ldr	r1, [pc, #16]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3718      	adds	r7, #24
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	40021000 	.word	0x40021000
 8006d3c:	40007000 	.word	0x40007000
 8006d40:	42420440 	.word	0x42420440

08006d44 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b088      	sub	sp, #32
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	617b      	str	r3, [r7, #20]
 8006d50:	2300      	movs	r3, #0
 8006d52:	61fb      	str	r3, [r7, #28]
 8006d54:	2300      	movs	r3, #0
 8006d56:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	60fb      	str	r3, [r7, #12]
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2b10      	cmp	r3, #16
 8006d64:	d00a      	beq.n	8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2b10      	cmp	r3, #16
 8006d6a:	f200 808a 	bhi.w	8006e82 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d045      	beq.n	8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2b02      	cmp	r3, #2
 8006d78:	d075      	beq.n	8006e66 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8006d7a:	e082      	b.n	8006e82 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8006d7c:	4b46      	ldr	r3, [pc, #280]	@ (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006d82:	4b45      	ldr	r3, [pc, #276]	@ (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d07b      	beq.n	8006e86 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	0c9b      	lsrs	r3, r3, #18
 8006d92:	f003 030f 	and.w	r3, r3, #15
 8006d96:	4a41      	ldr	r2, [pc, #260]	@ (8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8006d98:	5cd3      	ldrb	r3, [r2, r3]
 8006d9a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d015      	beq.n	8006dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006da6:	4b3c      	ldr	r3, [pc, #240]	@ (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	0c5b      	lsrs	r3, r3, #17
 8006dac:	f003 0301 	and.w	r3, r3, #1
 8006db0:	4a3b      	ldr	r2, [pc, #236]	@ (8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8006db2:	5cd3      	ldrb	r3, [r2, r3]
 8006db4:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d00d      	beq.n	8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006dc0:	4a38      	ldr	r2, [pc, #224]	@ (8006ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	fb02 f303 	mul.w	r3, r2, r3
 8006dce:	61fb      	str	r3, [r7, #28]
 8006dd0:	e004      	b.n	8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	4a34      	ldr	r2, [pc, #208]	@ (8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8006dd6:	fb02 f303 	mul.w	r3, r2, r3
 8006dda:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006ddc:	4b2e      	ldr	r3, [pc, #184]	@ (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006de4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006de8:	d102      	bne.n	8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	61bb      	str	r3, [r7, #24]
      break;
 8006dee:	e04a      	b.n	8006e86 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	005b      	lsls	r3, r3, #1
 8006df4:	4a2d      	ldr	r2, [pc, #180]	@ (8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006df6:	fba2 2303 	umull	r2, r3, r2, r3
 8006dfa:	085b      	lsrs	r3, r3, #1
 8006dfc:	61bb      	str	r3, [r7, #24]
      break;
 8006dfe:	e042      	b.n	8006e86 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8006e00:	4b25      	ldr	r3, [pc, #148]	@ (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006e02:	6a1b      	ldr	r3, [r3, #32]
 8006e04:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e10:	d108      	bne.n	8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f003 0302 	and.w	r3, r3, #2
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d003      	beq.n	8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8006e1c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e20:	61bb      	str	r3, [r7, #24]
 8006e22:	e01f      	b.n	8006e64 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e2e:	d109      	bne.n	8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8006e30:	4b19      	ldr	r3, [pc, #100]	@ (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e34:	f003 0302 	and.w	r3, r3, #2
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d003      	beq.n	8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8006e3c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8006e40:	61bb      	str	r3, [r7, #24]
 8006e42:	e00f      	b.n	8006e64 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e4e:	d11c      	bne.n	8006e8a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8006e50:	4b11      	ldr	r3, [pc, #68]	@ (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d016      	beq.n	8006e8a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8006e5c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8006e60:	61bb      	str	r3, [r7, #24]
      break;
 8006e62:	e012      	b.n	8006e8a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8006e64:	e011      	b.n	8006e8a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006e66:	f7ff fe85 	bl	8006b74 <HAL_RCC_GetPCLK2Freq>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	0b9b      	lsrs	r3, r3, #14
 8006e72:	f003 0303 	and.w	r3, r3, #3
 8006e76:	3301      	adds	r3, #1
 8006e78:	005b      	lsls	r3, r3, #1
 8006e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e7e:	61bb      	str	r3, [r7, #24]
      break;
 8006e80:	e004      	b.n	8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8006e82:	bf00      	nop
 8006e84:	e002      	b.n	8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8006e86:	bf00      	nop
 8006e88:	e000      	b.n	8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8006e8a:	bf00      	nop
    }
  }
  return (frequency);
 8006e8c:	69bb      	ldr	r3, [r7, #24]
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3720      	adds	r7, #32
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	40021000 	.word	0x40021000
 8006e9c:	08009c60 	.word	0x08009c60
 8006ea0:	08009c70 	.word	0x08009c70
 8006ea4:	007a1200 	.word	0x007a1200
 8006ea8:	003d0900 	.word	0x003d0900
 8006eac:	aaaaaaab 	.word	0xaaaaaaab

08006eb0 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b082      	sub	sp, #8
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 0302 	and.w	r3, r3, #2
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d011      	beq.n	8006eea <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	f003 0302 	and.w	r3, r3, #2
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d00a      	beq.n	8006eea <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 f815 	bl	8006f04 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	685a      	ldr	r2, [r3, #4]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f022 0202 	bic.w	r2, r2, #2
 8006ee8:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006eea:	4b05      	ldr	r3, [pc, #20]	@ (8006f00 <HAL_RTC_AlarmIRQHandler+0x50>)
 8006eec:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006ef0:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	745a      	strb	r2, [r3, #17]
}
 8006ef8:	bf00      	nop
 8006efa:	3708      	adds	r7, #8
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	40010400 	.word	0x40010400

08006f04 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8006f0c:	bf00      	nop
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bc80      	pop	{r7}
 8006f14:	4770      	bx	lr

08006f16 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f16:	b580      	push	{r7, lr}
 8006f18:	b082      	sub	sp, #8
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d101      	bne.n	8006f28 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	e076      	b.n	8007016 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d108      	bne.n	8006f42 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f38:	d009      	beq.n	8006f4e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	61da      	str	r2, [r3, #28]
 8006f40:	e005      	b.n	8006f4e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d106      	bne.n	8006f6e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f7fc fdd5 	bl	8003b18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2202      	movs	r2, #2
 8006f72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f84:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006f96:	431a      	orrs	r2, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006fa0:	431a      	orrs	r2, r3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	f003 0302 	and.w	r3, r3, #2
 8006faa:	431a      	orrs	r2, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	695b      	ldr	r3, [r3, #20]
 8006fb0:	f003 0301 	and.w	r3, r3, #1
 8006fb4:	431a      	orrs	r2, r3
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	699b      	ldr	r3, [r3, #24]
 8006fba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006fbe:	431a      	orrs	r2, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	69db      	ldr	r3, [r3, #28]
 8006fc4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006fc8:	431a      	orrs	r2, r3
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a1b      	ldr	r3, [r3, #32]
 8006fce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fd2:	ea42 0103 	orr.w	r1, r2, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fda:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	430a      	orrs	r2, r1
 8006fe4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	699b      	ldr	r3, [r3, #24]
 8006fea:	0c1a      	lsrs	r2, r3, #16
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f002 0204 	and.w	r2, r2, #4
 8006ff4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	69da      	ldr	r2, [r3, #28]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007004:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007014:	2300      	movs	r3, #0
}
 8007016:	4618      	mov	r0, r3
 8007018:	3708      	adds	r7, #8
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}

0800701e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800701e:	b580      	push	{r7, lr}
 8007020:	b088      	sub	sp, #32
 8007022:	af00      	add	r7, sp, #0
 8007024:	60f8      	str	r0, [r7, #12]
 8007026:	60b9      	str	r1, [r7, #8]
 8007028:	603b      	str	r3, [r7, #0]
 800702a:	4613      	mov	r3, r2
 800702c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800702e:	f7fd f893 	bl	8004158 <HAL_GetTick>
 8007032:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007034:	88fb      	ldrh	r3, [r7, #6]
 8007036:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800703e:	b2db      	uxtb	r3, r3
 8007040:	2b01      	cmp	r3, #1
 8007042:	d001      	beq.n	8007048 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007044:	2302      	movs	r3, #2
 8007046:	e12a      	b.n	800729e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d002      	beq.n	8007054 <HAL_SPI_Transmit+0x36>
 800704e:	88fb      	ldrh	r3, [r7, #6]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d101      	bne.n	8007058 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	e122      	b.n	800729e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800705e:	2b01      	cmp	r3, #1
 8007060:	d101      	bne.n	8007066 <HAL_SPI_Transmit+0x48>
 8007062:	2302      	movs	r3, #2
 8007064:	e11b      	b.n	800729e <HAL_SPI_Transmit+0x280>
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2201      	movs	r2, #1
 800706a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2203      	movs	r2, #3
 8007072:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2200      	movs	r2, #0
 800707a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	68ba      	ldr	r2, [r7, #8]
 8007080:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	88fa      	ldrh	r2, [r7, #6]
 8007086:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	88fa      	ldrh	r2, [r7, #6]
 800708c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2200      	movs	r2, #0
 8007092:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2200      	movs	r2, #0
 8007098:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2200      	movs	r2, #0
 800709e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2200      	movs	r2, #0
 80070a4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070b4:	d10f      	bne.n	80070d6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80070c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80070d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070e0:	2b40      	cmp	r3, #64	@ 0x40
 80070e2:	d007      	beq.n	80070f4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80070f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070fc:	d152      	bne.n	80071a4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d002      	beq.n	800710c <HAL_SPI_Transmit+0xee>
 8007106:	8b7b      	ldrh	r3, [r7, #26]
 8007108:	2b01      	cmp	r3, #1
 800710a:	d145      	bne.n	8007198 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007110:	881a      	ldrh	r2, [r3, #0]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800711c:	1c9a      	adds	r2, r3, #2
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007126:	b29b      	uxth	r3, r3
 8007128:	3b01      	subs	r3, #1
 800712a:	b29a      	uxth	r2, r3
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007130:	e032      	b.n	8007198 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	f003 0302 	and.w	r3, r3, #2
 800713c:	2b02      	cmp	r3, #2
 800713e:	d112      	bne.n	8007166 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007144:	881a      	ldrh	r2, [r3, #0]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007150:	1c9a      	adds	r2, r3, #2
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800715a:	b29b      	uxth	r3, r3
 800715c:	3b01      	subs	r3, #1
 800715e:	b29a      	uxth	r2, r3
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007164:	e018      	b.n	8007198 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007166:	f7fc fff7 	bl	8004158 <HAL_GetTick>
 800716a:	4602      	mov	r2, r0
 800716c:	69fb      	ldr	r3, [r7, #28]
 800716e:	1ad3      	subs	r3, r2, r3
 8007170:	683a      	ldr	r2, [r7, #0]
 8007172:	429a      	cmp	r2, r3
 8007174:	d803      	bhi.n	800717e <HAL_SPI_Transmit+0x160>
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800717c:	d102      	bne.n	8007184 <HAL_SPI_Transmit+0x166>
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d109      	bne.n	8007198 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2200      	movs	r2, #0
 8007190:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007194:	2303      	movs	r3, #3
 8007196:	e082      	b.n	800729e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800719c:	b29b      	uxth	r3, r3
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d1c7      	bne.n	8007132 <HAL_SPI_Transmit+0x114>
 80071a2:	e053      	b.n	800724c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d002      	beq.n	80071b2 <HAL_SPI_Transmit+0x194>
 80071ac:	8b7b      	ldrh	r3, [r7, #26]
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d147      	bne.n	8007242 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	330c      	adds	r3, #12
 80071bc:	7812      	ldrb	r2, [r2, #0]
 80071be:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071c4:	1c5a      	adds	r2, r3, #1
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	3b01      	subs	r3, #1
 80071d2:	b29a      	uxth	r2, r3
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80071d8:	e033      	b.n	8007242 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	f003 0302 	and.w	r3, r3, #2
 80071e4:	2b02      	cmp	r3, #2
 80071e6:	d113      	bne.n	8007210 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	330c      	adds	r3, #12
 80071f2:	7812      	ldrb	r2, [r2, #0]
 80071f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071fa:	1c5a      	adds	r2, r3, #1
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007204:	b29b      	uxth	r3, r3
 8007206:	3b01      	subs	r3, #1
 8007208:	b29a      	uxth	r2, r3
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800720e:	e018      	b.n	8007242 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007210:	f7fc ffa2 	bl	8004158 <HAL_GetTick>
 8007214:	4602      	mov	r2, r0
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	1ad3      	subs	r3, r2, r3
 800721a:	683a      	ldr	r2, [r7, #0]
 800721c:	429a      	cmp	r2, r3
 800721e:	d803      	bhi.n	8007228 <HAL_SPI_Transmit+0x20a>
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007226:	d102      	bne.n	800722e <HAL_SPI_Transmit+0x210>
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d109      	bne.n	8007242 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2201      	movs	r2, #1
 8007232:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2200      	movs	r2, #0
 800723a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800723e:	2303      	movs	r3, #3
 8007240:	e02d      	b.n	800729e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007246:	b29b      	uxth	r3, r3
 8007248:	2b00      	cmp	r3, #0
 800724a:	d1c6      	bne.n	80071da <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800724c:	69fa      	ldr	r2, [r7, #28]
 800724e:	6839      	ldr	r1, [r7, #0]
 8007250:	68f8      	ldr	r0, [r7, #12]
 8007252:	f000 fbc5 	bl	80079e0 <SPI_EndRxTxTransaction>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d002      	beq.n	8007262 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2220      	movs	r2, #32
 8007260:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d10a      	bne.n	8007280 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800726a:	2300      	movs	r3, #0
 800726c:	617b      	str	r3, [r7, #20]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	617b      	str	r3, [r7, #20]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	617b      	str	r3, [r7, #20]
 800727e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2201      	movs	r2, #1
 8007284:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2200      	movs	r2, #0
 800728c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007294:	2b00      	cmp	r3, #0
 8007296:	d001      	beq.n	800729c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	e000      	b.n	800729e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800729c:	2300      	movs	r3, #0
  }
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3720      	adds	r7, #32
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072a6:	b580      	push	{r7, lr}
 80072a8:	b088      	sub	sp, #32
 80072aa:	af02      	add	r7, sp, #8
 80072ac:	60f8      	str	r0, [r7, #12]
 80072ae:	60b9      	str	r1, [r7, #8]
 80072b0:	603b      	str	r3, [r7, #0]
 80072b2:	4613      	mov	r3, r2
 80072b4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d001      	beq.n	80072c6 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80072c2:	2302      	movs	r3, #2
 80072c4:	e104      	b.n	80074d0 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80072ce:	d112      	bne.n	80072f6 <HAL_SPI_Receive+0x50>
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d10e      	bne.n	80072f6 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2204      	movs	r2, #4
 80072dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80072e0:	88fa      	ldrh	r2, [r7, #6]
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	9300      	str	r3, [sp, #0]
 80072e6:	4613      	mov	r3, r2
 80072e8:	68ba      	ldr	r2, [r7, #8]
 80072ea:	68b9      	ldr	r1, [r7, #8]
 80072ec:	68f8      	ldr	r0, [r7, #12]
 80072ee:	f000 f8f3 	bl	80074d8 <HAL_SPI_TransmitReceive>
 80072f2:	4603      	mov	r3, r0
 80072f4:	e0ec      	b.n	80074d0 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80072f6:	f7fc ff2f 	bl	8004158 <HAL_GetTick>
 80072fa:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d002      	beq.n	8007308 <HAL_SPI_Receive+0x62>
 8007302:	88fb      	ldrh	r3, [r7, #6]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d101      	bne.n	800730c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	e0e1      	b.n	80074d0 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007312:	2b01      	cmp	r3, #1
 8007314:	d101      	bne.n	800731a <HAL_SPI_Receive+0x74>
 8007316:	2302      	movs	r3, #2
 8007318:	e0da      	b.n	80074d0 <HAL_SPI_Receive+0x22a>
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2201      	movs	r2, #1
 800731e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2204      	movs	r2, #4
 8007326:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2200      	movs	r2, #0
 800732e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	68ba      	ldr	r2, [r7, #8]
 8007334:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	88fa      	ldrh	r2, [r7, #6]
 800733a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	88fa      	ldrh	r2, [r7, #6]
 8007340:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2200      	movs	r2, #0
 8007346:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2200      	movs	r2, #0
 800734c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2200      	movs	r2, #0
 8007352:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2200      	movs	r2, #0
 8007358:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2200      	movs	r2, #0
 800735e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007368:	d10f      	bne.n	800738a <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007378:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007388:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007394:	2b40      	cmp	r3, #64	@ 0x40
 8007396:	d007      	beq.n	80073a8 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80073a6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d170      	bne.n	8007492 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80073b0:	e035      	b.n	800741e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	f003 0301 	and.w	r3, r3, #1
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d115      	bne.n	80073ec <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f103 020c 	add.w	r2, r3, #12
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073cc:	7812      	ldrb	r2, [r2, #0]
 80073ce:	b2d2      	uxtb	r2, r2
 80073d0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073d6:	1c5a      	adds	r2, r3, #1
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	3b01      	subs	r3, #1
 80073e4:	b29a      	uxth	r2, r3
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80073ea:	e018      	b.n	800741e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073ec:	f7fc feb4 	bl	8004158 <HAL_GetTick>
 80073f0:	4602      	mov	r2, r0
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	1ad3      	subs	r3, r2, r3
 80073f6:	683a      	ldr	r2, [r7, #0]
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d803      	bhi.n	8007404 <HAL_SPI_Receive+0x15e>
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007402:	d102      	bne.n	800740a <HAL_SPI_Receive+0x164>
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d109      	bne.n	800741e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2201      	movs	r2, #1
 800740e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2200      	movs	r2, #0
 8007416:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800741a:	2303      	movs	r3, #3
 800741c:	e058      	b.n	80074d0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007422:	b29b      	uxth	r3, r3
 8007424:	2b00      	cmp	r3, #0
 8007426:	d1c4      	bne.n	80073b2 <HAL_SPI_Receive+0x10c>
 8007428:	e038      	b.n	800749c <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	f003 0301 	and.w	r3, r3, #1
 8007434:	2b01      	cmp	r3, #1
 8007436:	d113      	bne.n	8007460 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	68da      	ldr	r2, [r3, #12]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007442:	b292      	uxth	r2, r2
 8007444:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800744a:	1c9a      	adds	r2, r3, #2
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007454:	b29b      	uxth	r3, r3
 8007456:	3b01      	subs	r3, #1
 8007458:	b29a      	uxth	r2, r3
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800745e:	e018      	b.n	8007492 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007460:	f7fc fe7a 	bl	8004158 <HAL_GetTick>
 8007464:	4602      	mov	r2, r0
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	1ad3      	subs	r3, r2, r3
 800746a:	683a      	ldr	r2, [r7, #0]
 800746c:	429a      	cmp	r2, r3
 800746e:	d803      	bhi.n	8007478 <HAL_SPI_Receive+0x1d2>
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007476:	d102      	bne.n	800747e <HAL_SPI_Receive+0x1d8>
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d109      	bne.n	8007492 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2201      	movs	r2, #1
 8007482:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2200      	movs	r2, #0
 800748a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800748e:	2303      	movs	r3, #3
 8007490:	e01e      	b.n	80074d0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007496:	b29b      	uxth	r3, r3
 8007498:	2b00      	cmp	r3, #0
 800749a:	d1c6      	bne.n	800742a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800749c:	697a      	ldr	r2, [r7, #20]
 800749e:	6839      	ldr	r1, [r7, #0]
 80074a0:	68f8      	ldr	r0, [r7, #12]
 80074a2:	f000 fa4b 	bl	800793c <SPI_EndRxTransaction>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d002      	beq.n	80074b2 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2220      	movs	r2, #32
 80074b0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2201      	movs	r2, #1
 80074b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2200      	movs	r2, #0
 80074be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d001      	beq.n	80074ce <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	e000      	b.n	80074d0 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80074ce:	2300      	movs	r3, #0
  }
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3718      	adds	r7, #24
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b08a      	sub	sp, #40	@ 0x28
 80074dc:	af00      	add	r7, sp, #0
 80074de:	60f8      	str	r0, [r7, #12]
 80074e0:	60b9      	str	r1, [r7, #8]
 80074e2:	607a      	str	r2, [r7, #4]
 80074e4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80074e6:	2301      	movs	r3, #1
 80074e8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074ea:	f7fc fe35 	bl	8004158 <HAL_GetTick>
 80074ee:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80074f6:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80074fe:	887b      	ldrh	r3, [r7, #2]
 8007500:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007502:	7ffb      	ldrb	r3, [r7, #31]
 8007504:	2b01      	cmp	r3, #1
 8007506:	d00c      	beq.n	8007522 <HAL_SPI_TransmitReceive+0x4a>
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800750e:	d106      	bne.n	800751e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d102      	bne.n	800751e <HAL_SPI_TransmitReceive+0x46>
 8007518:	7ffb      	ldrb	r3, [r7, #31]
 800751a:	2b04      	cmp	r3, #4
 800751c:	d001      	beq.n	8007522 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800751e:	2302      	movs	r3, #2
 8007520:	e17f      	b.n	8007822 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d005      	beq.n	8007534 <HAL_SPI_TransmitReceive+0x5c>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d002      	beq.n	8007534 <HAL_SPI_TransmitReceive+0x5c>
 800752e:	887b      	ldrh	r3, [r7, #2]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d101      	bne.n	8007538 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	e174      	b.n	8007822 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800753e:	2b01      	cmp	r3, #1
 8007540:	d101      	bne.n	8007546 <HAL_SPI_TransmitReceive+0x6e>
 8007542:	2302      	movs	r3, #2
 8007544:	e16d      	b.n	8007822 <HAL_SPI_TransmitReceive+0x34a>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2201      	movs	r2, #1
 800754a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007554:	b2db      	uxtb	r3, r3
 8007556:	2b04      	cmp	r3, #4
 8007558:	d003      	beq.n	8007562 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2205      	movs	r2, #5
 800755e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2200      	movs	r2, #0
 8007566:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	887a      	ldrh	r2, [r7, #2]
 8007572:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	887a      	ldrh	r2, [r7, #2]
 8007578:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	68ba      	ldr	r2, [r7, #8]
 800757e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	887a      	ldrh	r2, [r7, #2]
 8007584:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	887a      	ldrh	r2, [r7, #2]
 800758a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2200      	movs	r2, #0
 8007590:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2200      	movs	r2, #0
 8007596:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075a2:	2b40      	cmp	r3, #64	@ 0x40
 80075a4:	d007      	beq.n	80075b6 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80075b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075be:	d17e      	bne.n	80076be <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d002      	beq.n	80075ce <HAL_SPI_TransmitReceive+0xf6>
 80075c8:	8afb      	ldrh	r3, [r7, #22]
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d16c      	bne.n	80076a8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075d2:	881a      	ldrh	r2, [r3, #0]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075de:	1c9a      	adds	r2, r3, #2
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	3b01      	subs	r3, #1
 80075ec:	b29a      	uxth	r2, r3
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075f2:	e059      	b.n	80076a8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	f003 0302 	and.w	r3, r3, #2
 80075fe:	2b02      	cmp	r3, #2
 8007600:	d11b      	bne.n	800763a <HAL_SPI_TransmitReceive+0x162>
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007606:	b29b      	uxth	r3, r3
 8007608:	2b00      	cmp	r3, #0
 800760a:	d016      	beq.n	800763a <HAL_SPI_TransmitReceive+0x162>
 800760c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800760e:	2b01      	cmp	r3, #1
 8007610:	d113      	bne.n	800763a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007616:	881a      	ldrh	r2, [r3, #0]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007622:	1c9a      	adds	r2, r3, #2
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800762c:	b29b      	uxth	r3, r3
 800762e:	3b01      	subs	r3, #1
 8007630:	b29a      	uxth	r2, r3
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007636:	2300      	movs	r3, #0
 8007638:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	f003 0301 	and.w	r3, r3, #1
 8007644:	2b01      	cmp	r3, #1
 8007646:	d119      	bne.n	800767c <HAL_SPI_TransmitReceive+0x1a4>
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800764c:	b29b      	uxth	r3, r3
 800764e:	2b00      	cmp	r3, #0
 8007650:	d014      	beq.n	800767c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	68da      	ldr	r2, [r3, #12]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800765c:	b292      	uxth	r2, r2
 800765e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007664:	1c9a      	adds	r2, r3, #2
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800766e:	b29b      	uxth	r3, r3
 8007670:	3b01      	subs	r3, #1
 8007672:	b29a      	uxth	r2, r3
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007678:	2301      	movs	r3, #1
 800767a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800767c:	f7fc fd6c 	bl	8004158 <HAL_GetTick>
 8007680:	4602      	mov	r2, r0
 8007682:	6a3b      	ldr	r3, [r7, #32]
 8007684:	1ad3      	subs	r3, r2, r3
 8007686:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007688:	429a      	cmp	r2, r3
 800768a:	d80d      	bhi.n	80076a8 <HAL_SPI_TransmitReceive+0x1d0>
 800768c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800768e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007692:	d009      	beq.n	80076a8 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2201      	movs	r2, #1
 8007698:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80076a4:	2303      	movs	r3, #3
 80076a6:	e0bc      	b.n	8007822 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d1a0      	bne.n	80075f4 <HAL_SPI_TransmitReceive+0x11c>
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d19b      	bne.n	80075f4 <HAL_SPI_TransmitReceive+0x11c>
 80076bc:	e082      	b.n	80077c4 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d002      	beq.n	80076cc <HAL_SPI_TransmitReceive+0x1f4>
 80076c6:	8afb      	ldrh	r3, [r7, #22]
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d171      	bne.n	80077b0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	330c      	adds	r3, #12
 80076d6:	7812      	ldrb	r2, [r2, #0]
 80076d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076de:	1c5a      	adds	r2, r3, #1
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	3b01      	subs	r3, #1
 80076ec:	b29a      	uxth	r2, r3
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076f2:	e05d      	b.n	80077b0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	f003 0302 	and.w	r3, r3, #2
 80076fe:	2b02      	cmp	r3, #2
 8007700:	d11c      	bne.n	800773c <HAL_SPI_TransmitReceive+0x264>
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007706:	b29b      	uxth	r3, r3
 8007708:	2b00      	cmp	r3, #0
 800770a:	d017      	beq.n	800773c <HAL_SPI_TransmitReceive+0x264>
 800770c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800770e:	2b01      	cmp	r3, #1
 8007710:	d114      	bne.n	800773c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	330c      	adds	r3, #12
 800771c:	7812      	ldrb	r2, [r2, #0]
 800771e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007724:	1c5a      	adds	r2, r3, #1
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800772e:	b29b      	uxth	r3, r3
 8007730:	3b01      	subs	r3, #1
 8007732:	b29a      	uxth	r2, r3
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007738:	2300      	movs	r3, #0
 800773a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	f003 0301 	and.w	r3, r3, #1
 8007746:	2b01      	cmp	r3, #1
 8007748:	d119      	bne.n	800777e <HAL_SPI_TransmitReceive+0x2a6>
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800774e:	b29b      	uxth	r3, r3
 8007750:	2b00      	cmp	r3, #0
 8007752:	d014      	beq.n	800777e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	68da      	ldr	r2, [r3, #12]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800775e:	b2d2      	uxtb	r2, r2
 8007760:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007766:	1c5a      	adds	r2, r3, #1
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007770:	b29b      	uxth	r3, r3
 8007772:	3b01      	subs	r3, #1
 8007774:	b29a      	uxth	r2, r3
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800777a:	2301      	movs	r3, #1
 800777c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800777e:	f7fc fceb 	bl	8004158 <HAL_GetTick>
 8007782:	4602      	mov	r2, r0
 8007784:	6a3b      	ldr	r3, [r7, #32]
 8007786:	1ad3      	subs	r3, r2, r3
 8007788:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800778a:	429a      	cmp	r2, r3
 800778c:	d803      	bhi.n	8007796 <HAL_SPI_TransmitReceive+0x2be>
 800778e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007794:	d102      	bne.n	800779c <HAL_SPI_TransmitReceive+0x2c4>
 8007796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007798:	2b00      	cmp	r3, #0
 800779a:	d109      	bne.n	80077b0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80077ac:	2303      	movs	r3, #3
 80077ae:	e038      	b.n	8007822 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d19c      	bne.n	80076f4 <HAL_SPI_TransmitReceive+0x21c>
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077be:	b29b      	uxth	r3, r3
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d197      	bne.n	80076f4 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80077c4:	6a3a      	ldr	r2, [r7, #32]
 80077c6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80077c8:	68f8      	ldr	r0, [r7, #12]
 80077ca:	f000 f909 	bl	80079e0 <SPI_EndRxTxTransaction>
 80077ce:	4603      	mov	r3, r0
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d008      	beq.n	80077e6 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2220      	movs	r2, #32
 80077d8:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2200      	movs	r2, #0
 80077de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e01d      	b.n	8007822 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d10a      	bne.n	8007804 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80077ee:	2300      	movs	r3, #0
 80077f0:	613b      	str	r3, [r7, #16]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	613b      	str	r3, [r7, #16]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	613b      	str	r3, [r7, #16]
 8007802:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2200      	movs	r2, #0
 8007810:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007818:	2b00      	cmp	r3, #0
 800781a:	d001      	beq.n	8007820 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800781c:	2301      	movs	r3, #1
 800781e:	e000      	b.n	8007822 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007820:	2300      	movs	r3, #0
  }
}
 8007822:	4618      	mov	r0, r3
 8007824:	3728      	adds	r7, #40	@ 0x28
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
	...

0800782c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b088      	sub	sp, #32
 8007830:	af00      	add	r7, sp, #0
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	603b      	str	r3, [r7, #0]
 8007838:	4613      	mov	r3, r2
 800783a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800783c:	f7fc fc8c 	bl	8004158 <HAL_GetTick>
 8007840:	4602      	mov	r2, r0
 8007842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007844:	1a9b      	subs	r3, r3, r2
 8007846:	683a      	ldr	r2, [r7, #0]
 8007848:	4413      	add	r3, r2
 800784a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800784c:	f7fc fc84 	bl	8004158 <HAL_GetTick>
 8007850:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007852:	4b39      	ldr	r3, [pc, #228]	@ (8007938 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	015b      	lsls	r3, r3, #5
 8007858:	0d1b      	lsrs	r3, r3, #20
 800785a:	69fa      	ldr	r2, [r7, #28]
 800785c:	fb02 f303 	mul.w	r3, r2, r3
 8007860:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007862:	e054      	b.n	800790e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800786a:	d050      	beq.n	800790e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800786c:	f7fc fc74 	bl	8004158 <HAL_GetTick>
 8007870:	4602      	mov	r2, r0
 8007872:	69bb      	ldr	r3, [r7, #24]
 8007874:	1ad3      	subs	r3, r2, r3
 8007876:	69fa      	ldr	r2, [r7, #28]
 8007878:	429a      	cmp	r2, r3
 800787a:	d902      	bls.n	8007882 <SPI_WaitFlagStateUntilTimeout+0x56>
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d13d      	bne.n	80078fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	685a      	ldr	r2, [r3, #4]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007890:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800789a:	d111      	bne.n	80078c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078a4:	d004      	beq.n	80078b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078ae:	d107      	bne.n	80078c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80078be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078c8:	d10f      	bne.n	80078ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80078d8:	601a      	str	r2, [r3, #0]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80078e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2201      	movs	r2, #1
 80078ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80078fa:	2303      	movs	r3, #3
 80078fc:	e017      	b.n	800792e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d101      	bne.n	8007908 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007904:	2300      	movs	r3, #0
 8007906:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	3b01      	subs	r3, #1
 800790c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	689a      	ldr	r2, [r3, #8]
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	4013      	ands	r3, r2
 8007918:	68ba      	ldr	r2, [r7, #8]
 800791a:	429a      	cmp	r2, r3
 800791c:	bf0c      	ite	eq
 800791e:	2301      	moveq	r3, #1
 8007920:	2300      	movne	r3, #0
 8007922:	b2db      	uxtb	r3, r3
 8007924:	461a      	mov	r2, r3
 8007926:	79fb      	ldrb	r3, [r7, #7]
 8007928:	429a      	cmp	r2, r3
 800792a:	d19b      	bne.n	8007864 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800792c:	2300      	movs	r3, #0
}
 800792e:	4618      	mov	r0, r3
 8007930:	3720      	adds	r7, #32
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop
 8007938:	20000060 	.word	0x20000060

0800793c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b086      	sub	sp, #24
 8007940:	af02      	add	r7, sp, #8
 8007942:	60f8      	str	r0, [r7, #12]
 8007944:	60b9      	str	r1, [r7, #8]
 8007946:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007950:	d111      	bne.n	8007976 <SPI_EndRxTransaction+0x3a>
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800795a:	d004      	beq.n	8007966 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007964:	d107      	bne.n	8007976 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007974:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800797e:	d117      	bne.n	80079b0 <SPI_EndRxTransaction+0x74>
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007988:	d112      	bne.n	80079b0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	9300      	str	r3, [sp, #0]
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	2200      	movs	r2, #0
 8007992:	2101      	movs	r1, #1
 8007994:	68f8      	ldr	r0, [r7, #12]
 8007996:	f7ff ff49 	bl	800782c <SPI_WaitFlagStateUntilTimeout>
 800799a:	4603      	mov	r3, r0
 800799c:	2b00      	cmp	r3, #0
 800799e:	d01a      	beq.n	80079d6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079a4:	f043 0220 	orr.w	r2, r3, #32
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80079ac:	2303      	movs	r3, #3
 80079ae:	e013      	b.n	80079d8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	9300      	str	r3, [sp, #0]
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	2200      	movs	r2, #0
 80079b8:	2180      	movs	r1, #128	@ 0x80
 80079ba:	68f8      	ldr	r0, [r7, #12]
 80079bc:	f7ff ff36 	bl	800782c <SPI_WaitFlagStateUntilTimeout>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d007      	beq.n	80079d6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079ca:	f043 0220 	orr.w	r2, r3, #32
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80079d2:	2303      	movs	r3, #3
 80079d4:	e000      	b.n	80079d8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3710      	adds	r7, #16
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b086      	sub	sp, #24
 80079e4:	af02      	add	r7, sp, #8
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	9300      	str	r3, [sp, #0]
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	2201      	movs	r2, #1
 80079f4:	2102      	movs	r1, #2
 80079f6:	68f8      	ldr	r0, [r7, #12]
 80079f8:	f7ff ff18 	bl	800782c <SPI_WaitFlagStateUntilTimeout>
 80079fc:	4603      	mov	r3, r0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d007      	beq.n	8007a12 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a06:	f043 0220 	orr.w	r2, r3, #32
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007a0e:	2303      	movs	r3, #3
 8007a10:	e013      	b.n	8007a3a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	9300      	str	r3, [sp, #0]
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	2180      	movs	r1, #128	@ 0x80
 8007a1c:	68f8      	ldr	r0, [r7, #12]
 8007a1e:	f7ff ff05 	bl	800782c <SPI_WaitFlagStateUntilTimeout>
 8007a22:	4603      	mov	r3, r0
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d007      	beq.n	8007a38 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a2c:	f043 0220 	orr.w	r2, r3, #32
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007a34:	2303      	movs	r3, #3
 8007a36:	e000      	b.n	8007a3a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8007a38:	2300      	movs	r3, #0
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3710      	adds	r7, #16
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}

08007a42 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a42:	b580      	push	{r7, lr}
 8007a44:	b082      	sub	sp, #8
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d101      	bne.n	8007a54 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a50:	2301      	movs	r3, #1
 8007a52:	e042      	b.n	8007ada <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d106      	bne.n	8007a6e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f7fc f8af 	bl	8003bcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2224      	movs	r2, #36	@ 0x24
 8007a72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	68da      	ldr	r2, [r3, #12]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007a84:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 f9d0 	bl	8007e2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	691a      	ldr	r2, [r3, #16]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007a9a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	695a      	ldr	r2, [r3, #20]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007aaa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	68da      	ldr	r2, [r3, #12]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007aba:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2220      	movs	r2, #32
 8007ac6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2220      	movs	r2, #32
 8007ace:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007ad8:	2300      	movs	r3, #0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3708      	adds	r7, #8
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}

08007ae2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ae2:	b580      	push	{r7, lr}
 8007ae4:	b08a      	sub	sp, #40	@ 0x28
 8007ae6:	af02      	add	r7, sp, #8
 8007ae8:	60f8      	str	r0, [r7, #12]
 8007aea:	60b9      	str	r1, [r7, #8]
 8007aec:	603b      	str	r3, [r7, #0]
 8007aee:	4613      	mov	r3, r2
 8007af0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007af2:	2300      	movs	r3, #0
 8007af4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	2b20      	cmp	r3, #32
 8007b00:	d175      	bne.n	8007bee <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d002      	beq.n	8007b0e <HAL_UART_Transmit+0x2c>
 8007b08:	88fb      	ldrh	r3, [r7, #6]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d101      	bne.n	8007b12 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e06e      	b.n	8007bf0 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2200      	movs	r2, #0
 8007b16:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2221      	movs	r2, #33	@ 0x21
 8007b1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b20:	f7fc fb1a 	bl	8004158 <HAL_GetTick>
 8007b24:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	88fa      	ldrh	r2, [r7, #6]
 8007b2a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	88fa      	ldrh	r2, [r7, #6]
 8007b30:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b3a:	d108      	bne.n	8007b4e <HAL_UART_Transmit+0x6c>
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	691b      	ldr	r3, [r3, #16]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d104      	bne.n	8007b4e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007b44:	2300      	movs	r3, #0
 8007b46:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	61bb      	str	r3, [r7, #24]
 8007b4c:	e003      	b.n	8007b56 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b52:	2300      	movs	r3, #0
 8007b54:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007b56:	e02e      	b.n	8007bb6 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	9300      	str	r3, [sp, #0]
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	2180      	movs	r1, #128	@ 0x80
 8007b62:	68f8      	ldr	r0, [r7, #12]
 8007b64:	f000 f86d 	bl	8007c42 <UART_WaitOnFlagUntilTimeout>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d005      	beq.n	8007b7a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2220      	movs	r2, #32
 8007b72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007b76:	2303      	movs	r3, #3
 8007b78:	e03a      	b.n	8007bf0 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d10b      	bne.n	8007b98 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007b80:	69bb      	ldr	r3, [r7, #24]
 8007b82:	881b      	ldrh	r3, [r3, #0]
 8007b84:	461a      	mov	r2, r3
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b8e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007b90:	69bb      	ldr	r3, [r7, #24]
 8007b92:	3302      	adds	r3, #2
 8007b94:	61bb      	str	r3, [r7, #24]
 8007b96:	e007      	b.n	8007ba8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	781a      	ldrb	r2, [r3, #0]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	3b01      	subs	r3, #1
 8007bb0:	b29a      	uxth	r2, r3
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d1cb      	bne.n	8007b58 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	9300      	str	r3, [sp, #0]
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	2140      	movs	r1, #64	@ 0x40
 8007bca:	68f8      	ldr	r0, [r7, #12]
 8007bcc:	f000 f839 	bl	8007c42 <UART_WaitOnFlagUntilTimeout>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d005      	beq.n	8007be2 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2220      	movs	r2, #32
 8007bda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007bde:	2303      	movs	r3, #3
 8007be0:	e006      	b.n	8007bf0 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2220      	movs	r2, #32
 8007be6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007bea:	2300      	movs	r3, #0
 8007bec:	e000      	b.n	8007bf0 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007bee:	2302      	movs	r3, #2
  }
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3720      	adds	r7, #32
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	4613      	mov	r3, r2
 8007c04:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	2b20      	cmp	r3, #32
 8007c10:	d112      	bne.n	8007c38 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d002      	beq.n	8007c1e <HAL_UART_Receive_IT+0x26>
 8007c18:	88fb      	ldrh	r3, [r7, #6]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d101      	bne.n	8007c22 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e00b      	b.n	8007c3a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2200      	movs	r2, #0
 8007c26:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007c28:	88fb      	ldrh	r3, [r7, #6]
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	68b9      	ldr	r1, [r7, #8]
 8007c2e:	68f8      	ldr	r0, [r7, #12]
 8007c30:	f000 f860 	bl	8007cf4 <UART_Start_Receive_IT>
 8007c34:	4603      	mov	r3, r0
 8007c36:	e000      	b.n	8007c3a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007c38:	2302      	movs	r3, #2
  }
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3710      	adds	r7, #16
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}

08007c42 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007c42:	b580      	push	{r7, lr}
 8007c44:	b086      	sub	sp, #24
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	60f8      	str	r0, [r7, #12]
 8007c4a:	60b9      	str	r1, [r7, #8]
 8007c4c:	603b      	str	r3, [r7, #0]
 8007c4e:	4613      	mov	r3, r2
 8007c50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c52:	e03b      	b.n	8007ccc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c54:	6a3b      	ldr	r3, [r7, #32]
 8007c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c5a:	d037      	beq.n	8007ccc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c5c:	f7fc fa7c 	bl	8004158 <HAL_GetTick>
 8007c60:	4602      	mov	r2, r0
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	1ad3      	subs	r3, r2, r3
 8007c66:	6a3a      	ldr	r2, [r7, #32]
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d302      	bcc.n	8007c72 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c6c:	6a3b      	ldr	r3, [r7, #32]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d101      	bne.n	8007c76 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007c72:	2303      	movs	r3, #3
 8007c74:	e03a      	b.n	8007cec <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	f003 0304 	and.w	r3, r3, #4
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d023      	beq.n	8007ccc <UART_WaitOnFlagUntilTimeout+0x8a>
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	2b80      	cmp	r3, #128	@ 0x80
 8007c88:	d020      	beq.n	8007ccc <UART_WaitOnFlagUntilTimeout+0x8a>
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	2b40      	cmp	r3, #64	@ 0x40
 8007c8e:	d01d      	beq.n	8007ccc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f003 0308 	and.w	r3, r3, #8
 8007c9a:	2b08      	cmp	r3, #8
 8007c9c:	d116      	bne.n	8007ccc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	617b      	str	r3, [r7, #20]
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	617b      	str	r3, [r7, #20]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	617b      	str	r3, [r7, #20]
 8007cb2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007cb4:	68f8      	ldr	r0, [r7, #12]
 8007cb6:	f000 f856 	bl	8007d66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2208      	movs	r2, #8
 8007cbe:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	e00f      	b.n	8007cec <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	4013      	ands	r3, r2
 8007cd6:	68ba      	ldr	r2, [r7, #8]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	bf0c      	ite	eq
 8007cdc:	2301      	moveq	r3, #1
 8007cde:	2300      	movne	r3, #0
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	79fb      	ldrb	r3, [r7, #7]
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d0b4      	beq.n	8007c54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007cea:	2300      	movs	r3, #0
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3718      	adds	r7, #24
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b085      	sub	sp, #20
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	60f8      	str	r0, [r7, #12]
 8007cfc:	60b9      	str	r1, [r7, #8]
 8007cfe:	4613      	mov	r3, r2
 8007d00:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	68ba      	ldr	r2, [r7, #8]
 8007d06:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	88fa      	ldrh	r2, [r7, #6]
 8007d0c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	88fa      	ldrh	r2, [r7, #6]
 8007d12:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2200      	movs	r2, #0
 8007d18:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2222      	movs	r2, #34	@ 0x22
 8007d1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	691b      	ldr	r3, [r3, #16]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d007      	beq.n	8007d3a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	68da      	ldr	r2, [r3, #12]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007d38:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	695a      	ldr	r2, [r3, #20]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f042 0201 	orr.w	r2, r2, #1
 8007d48:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	68da      	ldr	r2, [r3, #12]
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f042 0220 	orr.w	r2, r2, #32
 8007d58:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3714      	adds	r7, #20
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bc80      	pop	{r7}
 8007d64:	4770      	bx	lr

08007d66 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d66:	b480      	push	{r7}
 8007d68:	b095      	sub	sp, #84	@ 0x54
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	330c      	adds	r3, #12
 8007d74:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d78:	e853 3f00 	ldrex	r3, [r3]
 8007d7c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	330c      	adds	r3, #12
 8007d8c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007d8e:	643a      	str	r2, [r7, #64]	@ 0x40
 8007d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d92:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007d94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d96:	e841 2300 	strex	r3, r2, [r1]
 8007d9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d1e5      	bne.n	8007d6e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	3314      	adds	r3, #20
 8007da8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007daa:	6a3b      	ldr	r3, [r7, #32]
 8007dac:	e853 3f00 	ldrex	r3, [r3]
 8007db0:	61fb      	str	r3, [r7, #28]
   return(result);
 8007db2:	69fb      	ldr	r3, [r7, #28]
 8007db4:	f023 0301 	bic.w	r3, r3, #1
 8007db8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	3314      	adds	r3, #20
 8007dc0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007dc2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007dc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007dca:	e841 2300 	strex	r3, r2, [r1]
 8007dce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d1e5      	bne.n	8007da2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d119      	bne.n	8007e12 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	330c      	adds	r3, #12
 8007de4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	e853 3f00 	ldrex	r3, [r3]
 8007dec:	60bb      	str	r3, [r7, #8]
   return(result);
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	f023 0310 	bic.w	r3, r3, #16
 8007df4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	330c      	adds	r3, #12
 8007dfc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007dfe:	61ba      	str	r2, [r7, #24]
 8007e00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e02:	6979      	ldr	r1, [r7, #20]
 8007e04:	69ba      	ldr	r2, [r7, #24]
 8007e06:	e841 2300 	strex	r3, r2, [r1]
 8007e0a:	613b      	str	r3, [r7, #16]
   return(result);
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1e5      	bne.n	8007dde <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2220      	movs	r2, #32
 8007e16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007e20:	bf00      	nop
 8007e22:	3754      	adds	r7, #84	@ 0x54
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bc80      	pop	{r7}
 8007e28:	4770      	bx	lr
	...

08007e2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	691b      	ldr	r3, [r3, #16]
 8007e3a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	68da      	ldr	r2, [r3, #12]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	430a      	orrs	r2, r1
 8007e48:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	689a      	ldr	r2, [r3, #8]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	691b      	ldr	r3, [r3, #16]
 8007e52:	431a      	orrs	r2, r3
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	695b      	ldr	r3, [r3, #20]
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	68db      	ldr	r3, [r3, #12]
 8007e62:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8007e66:	f023 030c 	bic.w	r3, r3, #12
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	6812      	ldr	r2, [r2, #0]
 8007e6e:	68b9      	ldr	r1, [r7, #8]
 8007e70:	430b      	orrs	r3, r1
 8007e72:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	695b      	ldr	r3, [r3, #20]
 8007e7a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	699a      	ldr	r2, [r3, #24]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	430a      	orrs	r2, r1
 8007e88:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a2c      	ldr	r2, [pc, #176]	@ (8007f40 <UART_SetConfig+0x114>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d103      	bne.n	8007e9c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007e94:	f7fe fe6e 	bl	8006b74 <HAL_RCC_GetPCLK2Freq>
 8007e98:	60f8      	str	r0, [r7, #12]
 8007e9a:	e002      	b.n	8007ea2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007e9c:	f7fe fe56 	bl	8006b4c <HAL_RCC_GetPCLK1Freq>
 8007ea0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ea2:	68fa      	ldr	r2, [r7, #12]
 8007ea4:	4613      	mov	r3, r2
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	4413      	add	r3, r2
 8007eaa:	009a      	lsls	r2, r3, #2
 8007eac:	441a      	add	r2, r3
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eb8:	4a22      	ldr	r2, [pc, #136]	@ (8007f44 <UART_SetConfig+0x118>)
 8007eba:	fba2 2303 	umull	r2, r3, r2, r3
 8007ebe:	095b      	lsrs	r3, r3, #5
 8007ec0:	0119      	lsls	r1, r3, #4
 8007ec2:	68fa      	ldr	r2, [r7, #12]
 8007ec4:	4613      	mov	r3, r2
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	4413      	add	r3, r2
 8007eca:	009a      	lsls	r2, r3, #2
 8007ecc:	441a      	add	r2, r3
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	009b      	lsls	r3, r3, #2
 8007ed4:	fbb2 f2f3 	udiv	r2, r2, r3
 8007ed8:	4b1a      	ldr	r3, [pc, #104]	@ (8007f44 <UART_SetConfig+0x118>)
 8007eda:	fba3 0302 	umull	r0, r3, r3, r2
 8007ede:	095b      	lsrs	r3, r3, #5
 8007ee0:	2064      	movs	r0, #100	@ 0x64
 8007ee2:	fb00 f303 	mul.w	r3, r0, r3
 8007ee6:	1ad3      	subs	r3, r2, r3
 8007ee8:	011b      	lsls	r3, r3, #4
 8007eea:	3332      	adds	r3, #50	@ 0x32
 8007eec:	4a15      	ldr	r2, [pc, #84]	@ (8007f44 <UART_SetConfig+0x118>)
 8007eee:	fba2 2303 	umull	r2, r3, r2, r3
 8007ef2:	095b      	lsrs	r3, r3, #5
 8007ef4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007ef8:	4419      	add	r1, r3
 8007efa:	68fa      	ldr	r2, [r7, #12]
 8007efc:	4613      	mov	r3, r2
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	4413      	add	r3, r2
 8007f02:	009a      	lsls	r2, r3, #2
 8007f04:	441a      	add	r2, r3
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	009b      	lsls	r3, r3, #2
 8007f0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007f10:	4b0c      	ldr	r3, [pc, #48]	@ (8007f44 <UART_SetConfig+0x118>)
 8007f12:	fba3 0302 	umull	r0, r3, r3, r2
 8007f16:	095b      	lsrs	r3, r3, #5
 8007f18:	2064      	movs	r0, #100	@ 0x64
 8007f1a:	fb00 f303 	mul.w	r3, r0, r3
 8007f1e:	1ad3      	subs	r3, r2, r3
 8007f20:	011b      	lsls	r3, r3, #4
 8007f22:	3332      	adds	r3, #50	@ 0x32
 8007f24:	4a07      	ldr	r2, [pc, #28]	@ (8007f44 <UART_SetConfig+0x118>)
 8007f26:	fba2 2303 	umull	r2, r3, r2, r3
 8007f2a:	095b      	lsrs	r3, r3, #5
 8007f2c:	f003 020f 	and.w	r2, r3, #15
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	440a      	add	r2, r1
 8007f36:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007f38:	bf00      	nop
 8007f3a:	3710      	adds	r7, #16
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}
 8007f40:	40013800 	.word	0x40013800
 8007f44:	51eb851f 	.word	0x51eb851f

08007f48 <atoi>:
 8007f48:	220a      	movs	r2, #10
 8007f4a:	2100      	movs	r1, #0
 8007f4c:	f000 b87c 	b.w	8008048 <strtol>

08007f50 <_strtol_l.isra.0>:
 8007f50:	2b24      	cmp	r3, #36	@ 0x24
 8007f52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f56:	4686      	mov	lr, r0
 8007f58:	4690      	mov	r8, r2
 8007f5a:	d801      	bhi.n	8007f60 <_strtol_l.isra.0+0x10>
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d106      	bne.n	8007f6e <_strtol_l.isra.0+0x1e>
 8007f60:	f000 f930 	bl	80081c4 <__errno>
 8007f64:	2316      	movs	r3, #22
 8007f66:	6003      	str	r3, [r0, #0]
 8007f68:	2000      	movs	r0, #0
 8007f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f6e:	460d      	mov	r5, r1
 8007f70:	4833      	ldr	r0, [pc, #204]	@ (8008040 <_strtol_l.isra.0+0xf0>)
 8007f72:	462a      	mov	r2, r5
 8007f74:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f78:	5d06      	ldrb	r6, [r0, r4]
 8007f7a:	f016 0608 	ands.w	r6, r6, #8
 8007f7e:	d1f8      	bne.n	8007f72 <_strtol_l.isra.0+0x22>
 8007f80:	2c2d      	cmp	r4, #45	@ 0x2d
 8007f82:	d110      	bne.n	8007fa6 <_strtol_l.isra.0+0x56>
 8007f84:	2601      	movs	r6, #1
 8007f86:	782c      	ldrb	r4, [r5, #0]
 8007f88:	1c95      	adds	r5, r2, #2
 8007f8a:	f033 0210 	bics.w	r2, r3, #16
 8007f8e:	d115      	bne.n	8007fbc <_strtol_l.isra.0+0x6c>
 8007f90:	2c30      	cmp	r4, #48	@ 0x30
 8007f92:	d10d      	bne.n	8007fb0 <_strtol_l.isra.0+0x60>
 8007f94:	782a      	ldrb	r2, [r5, #0]
 8007f96:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007f9a:	2a58      	cmp	r2, #88	@ 0x58
 8007f9c:	d108      	bne.n	8007fb0 <_strtol_l.isra.0+0x60>
 8007f9e:	786c      	ldrb	r4, [r5, #1]
 8007fa0:	3502      	adds	r5, #2
 8007fa2:	2310      	movs	r3, #16
 8007fa4:	e00a      	b.n	8007fbc <_strtol_l.isra.0+0x6c>
 8007fa6:	2c2b      	cmp	r4, #43	@ 0x2b
 8007fa8:	bf04      	itt	eq
 8007faa:	782c      	ldrbeq	r4, [r5, #0]
 8007fac:	1c95      	addeq	r5, r2, #2
 8007fae:	e7ec      	b.n	8007f8a <_strtol_l.isra.0+0x3a>
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d1f6      	bne.n	8007fa2 <_strtol_l.isra.0+0x52>
 8007fb4:	2c30      	cmp	r4, #48	@ 0x30
 8007fb6:	bf14      	ite	ne
 8007fb8:	230a      	movne	r3, #10
 8007fba:	2308      	moveq	r3, #8
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007fc2:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007fc6:	fbbc f9f3 	udiv	r9, ip, r3
 8007fca:	4610      	mov	r0, r2
 8007fcc:	fb03 ca19 	mls	sl, r3, r9, ip
 8007fd0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007fd4:	2f09      	cmp	r7, #9
 8007fd6:	d80f      	bhi.n	8007ff8 <_strtol_l.isra.0+0xa8>
 8007fd8:	463c      	mov	r4, r7
 8007fda:	42a3      	cmp	r3, r4
 8007fdc:	dd1b      	ble.n	8008016 <_strtol_l.isra.0+0xc6>
 8007fde:	1c57      	adds	r7, r2, #1
 8007fe0:	d007      	beq.n	8007ff2 <_strtol_l.isra.0+0xa2>
 8007fe2:	4581      	cmp	r9, r0
 8007fe4:	d314      	bcc.n	8008010 <_strtol_l.isra.0+0xc0>
 8007fe6:	d101      	bne.n	8007fec <_strtol_l.isra.0+0x9c>
 8007fe8:	45a2      	cmp	sl, r4
 8007fea:	db11      	blt.n	8008010 <_strtol_l.isra.0+0xc0>
 8007fec:	2201      	movs	r2, #1
 8007fee:	fb00 4003 	mla	r0, r0, r3, r4
 8007ff2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007ff6:	e7eb      	b.n	8007fd0 <_strtol_l.isra.0+0x80>
 8007ff8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007ffc:	2f19      	cmp	r7, #25
 8007ffe:	d801      	bhi.n	8008004 <_strtol_l.isra.0+0xb4>
 8008000:	3c37      	subs	r4, #55	@ 0x37
 8008002:	e7ea      	b.n	8007fda <_strtol_l.isra.0+0x8a>
 8008004:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008008:	2f19      	cmp	r7, #25
 800800a:	d804      	bhi.n	8008016 <_strtol_l.isra.0+0xc6>
 800800c:	3c57      	subs	r4, #87	@ 0x57
 800800e:	e7e4      	b.n	8007fda <_strtol_l.isra.0+0x8a>
 8008010:	f04f 32ff 	mov.w	r2, #4294967295
 8008014:	e7ed      	b.n	8007ff2 <_strtol_l.isra.0+0xa2>
 8008016:	1c53      	adds	r3, r2, #1
 8008018:	d108      	bne.n	800802c <_strtol_l.isra.0+0xdc>
 800801a:	2322      	movs	r3, #34	@ 0x22
 800801c:	4660      	mov	r0, ip
 800801e:	f8ce 3000 	str.w	r3, [lr]
 8008022:	f1b8 0f00 	cmp.w	r8, #0
 8008026:	d0a0      	beq.n	8007f6a <_strtol_l.isra.0+0x1a>
 8008028:	1e69      	subs	r1, r5, #1
 800802a:	e006      	b.n	800803a <_strtol_l.isra.0+0xea>
 800802c:	b106      	cbz	r6, 8008030 <_strtol_l.isra.0+0xe0>
 800802e:	4240      	negs	r0, r0
 8008030:	f1b8 0f00 	cmp.w	r8, #0
 8008034:	d099      	beq.n	8007f6a <_strtol_l.isra.0+0x1a>
 8008036:	2a00      	cmp	r2, #0
 8008038:	d1f6      	bne.n	8008028 <_strtol_l.isra.0+0xd8>
 800803a:	f8c8 1000 	str.w	r1, [r8]
 800803e:	e794      	b.n	8007f6a <_strtol_l.isra.0+0x1a>
 8008040:	08009c73 	.word	0x08009c73

08008044 <_strtol_r>:
 8008044:	f7ff bf84 	b.w	8007f50 <_strtol_l.isra.0>

08008048 <strtol>:
 8008048:	4613      	mov	r3, r2
 800804a:	460a      	mov	r2, r1
 800804c:	4601      	mov	r1, r0
 800804e:	4802      	ldr	r0, [pc, #8]	@ (8008058 <strtol+0x10>)
 8008050:	6800      	ldr	r0, [r0, #0]
 8008052:	f7ff bf7d 	b.w	8007f50 <_strtol_l.isra.0>
 8008056:	bf00      	nop
 8008058:	2000006c 	.word	0x2000006c

0800805c <sniprintf>:
 800805c:	b40c      	push	{r2, r3}
 800805e:	b530      	push	{r4, r5, lr}
 8008060:	4b18      	ldr	r3, [pc, #96]	@ (80080c4 <sniprintf+0x68>)
 8008062:	1e0c      	subs	r4, r1, #0
 8008064:	681d      	ldr	r5, [r3, #0]
 8008066:	b09d      	sub	sp, #116	@ 0x74
 8008068:	da08      	bge.n	800807c <sniprintf+0x20>
 800806a:	238b      	movs	r3, #139	@ 0x8b
 800806c:	f04f 30ff 	mov.w	r0, #4294967295
 8008070:	602b      	str	r3, [r5, #0]
 8008072:	b01d      	add	sp, #116	@ 0x74
 8008074:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008078:	b002      	add	sp, #8
 800807a:	4770      	bx	lr
 800807c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008080:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008084:	f04f 0300 	mov.w	r3, #0
 8008088:	931b      	str	r3, [sp, #108]	@ 0x6c
 800808a:	bf0c      	ite	eq
 800808c:	4623      	moveq	r3, r4
 800808e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008092:	9304      	str	r3, [sp, #16]
 8008094:	9307      	str	r3, [sp, #28]
 8008096:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800809a:	9002      	str	r0, [sp, #8]
 800809c:	9006      	str	r0, [sp, #24]
 800809e:	f8ad 3016 	strh.w	r3, [sp, #22]
 80080a2:	4628      	mov	r0, r5
 80080a4:	ab21      	add	r3, sp, #132	@ 0x84
 80080a6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80080a8:	a902      	add	r1, sp, #8
 80080aa:	9301      	str	r3, [sp, #4]
 80080ac:	f000 fa08 	bl	80084c0 <_svfiprintf_r>
 80080b0:	1c43      	adds	r3, r0, #1
 80080b2:	bfbc      	itt	lt
 80080b4:	238b      	movlt	r3, #139	@ 0x8b
 80080b6:	602b      	strlt	r3, [r5, #0]
 80080b8:	2c00      	cmp	r4, #0
 80080ba:	d0da      	beq.n	8008072 <sniprintf+0x16>
 80080bc:	2200      	movs	r2, #0
 80080be:	9b02      	ldr	r3, [sp, #8]
 80080c0:	701a      	strb	r2, [r3, #0]
 80080c2:	e7d6      	b.n	8008072 <sniprintf+0x16>
 80080c4:	2000006c 	.word	0x2000006c

080080c8 <siprintf>:
 80080c8:	b40e      	push	{r1, r2, r3}
 80080ca:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80080ce:	b510      	push	{r4, lr}
 80080d0:	2400      	movs	r4, #0
 80080d2:	b09d      	sub	sp, #116	@ 0x74
 80080d4:	ab1f      	add	r3, sp, #124	@ 0x7c
 80080d6:	9002      	str	r0, [sp, #8]
 80080d8:	9006      	str	r0, [sp, #24]
 80080da:	9107      	str	r1, [sp, #28]
 80080dc:	9104      	str	r1, [sp, #16]
 80080de:	4809      	ldr	r0, [pc, #36]	@ (8008104 <siprintf+0x3c>)
 80080e0:	4909      	ldr	r1, [pc, #36]	@ (8008108 <siprintf+0x40>)
 80080e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80080e6:	9105      	str	r1, [sp, #20]
 80080e8:	6800      	ldr	r0, [r0, #0]
 80080ea:	a902      	add	r1, sp, #8
 80080ec:	9301      	str	r3, [sp, #4]
 80080ee:	941b      	str	r4, [sp, #108]	@ 0x6c
 80080f0:	f000 f9e6 	bl	80084c0 <_svfiprintf_r>
 80080f4:	9b02      	ldr	r3, [sp, #8]
 80080f6:	701c      	strb	r4, [r3, #0]
 80080f8:	b01d      	add	sp, #116	@ 0x74
 80080fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080fe:	b003      	add	sp, #12
 8008100:	4770      	bx	lr
 8008102:	bf00      	nop
 8008104:	2000006c 	.word	0x2000006c
 8008108:	ffff0208 	.word	0xffff0208

0800810c <siscanf>:
 800810c:	b40e      	push	{r1, r2, r3}
 800810e:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8008112:	b570      	push	{r4, r5, r6, lr}
 8008114:	2500      	movs	r5, #0
 8008116:	b09d      	sub	sp, #116	@ 0x74
 8008118:	ac21      	add	r4, sp, #132	@ 0x84
 800811a:	f854 6b04 	ldr.w	r6, [r4], #4
 800811e:	f8ad 2014 	strh.w	r2, [sp, #20]
 8008122:	951b      	str	r5, [sp, #108]	@ 0x6c
 8008124:	9002      	str	r0, [sp, #8]
 8008126:	9006      	str	r0, [sp, #24]
 8008128:	f7f8 f81a 	bl	8000160 <strlen>
 800812c:	4b0b      	ldr	r3, [pc, #44]	@ (800815c <siscanf+0x50>)
 800812e:	9003      	str	r0, [sp, #12]
 8008130:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008132:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008136:	9007      	str	r0, [sp, #28]
 8008138:	4809      	ldr	r0, [pc, #36]	@ (8008160 <siscanf+0x54>)
 800813a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800813e:	4632      	mov	r2, r6
 8008140:	4623      	mov	r3, r4
 8008142:	a902      	add	r1, sp, #8
 8008144:	6800      	ldr	r0, [r0, #0]
 8008146:	950f      	str	r5, [sp, #60]	@ 0x3c
 8008148:	9514      	str	r5, [sp, #80]	@ 0x50
 800814a:	9401      	str	r4, [sp, #4]
 800814c:	f000 fb0e 	bl	800876c <__ssvfiscanf_r>
 8008150:	b01d      	add	sp, #116	@ 0x74
 8008152:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008156:	b003      	add	sp, #12
 8008158:	4770      	bx	lr
 800815a:	bf00      	nop
 800815c:	08008165 	.word	0x08008165
 8008160:	2000006c 	.word	0x2000006c

08008164 <__seofread>:
 8008164:	2000      	movs	r0, #0
 8008166:	4770      	bx	lr

08008168 <memset>:
 8008168:	4603      	mov	r3, r0
 800816a:	4402      	add	r2, r0
 800816c:	4293      	cmp	r3, r2
 800816e:	d100      	bne.n	8008172 <memset+0xa>
 8008170:	4770      	bx	lr
 8008172:	f803 1b01 	strb.w	r1, [r3], #1
 8008176:	e7f9      	b.n	800816c <memset+0x4>

08008178 <strncmp>:
 8008178:	b510      	push	{r4, lr}
 800817a:	b16a      	cbz	r2, 8008198 <strncmp+0x20>
 800817c:	3901      	subs	r1, #1
 800817e:	1884      	adds	r4, r0, r2
 8008180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008184:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008188:	429a      	cmp	r2, r3
 800818a:	d103      	bne.n	8008194 <strncmp+0x1c>
 800818c:	42a0      	cmp	r0, r4
 800818e:	d001      	beq.n	8008194 <strncmp+0x1c>
 8008190:	2a00      	cmp	r2, #0
 8008192:	d1f5      	bne.n	8008180 <strncmp+0x8>
 8008194:	1ad0      	subs	r0, r2, r3
 8008196:	bd10      	pop	{r4, pc}
 8008198:	4610      	mov	r0, r2
 800819a:	e7fc      	b.n	8008196 <strncmp+0x1e>

0800819c <strncpy>:
 800819c:	4603      	mov	r3, r0
 800819e:	b510      	push	{r4, lr}
 80081a0:	3901      	subs	r1, #1
 80081a2:	b132      	cbz	r2, 80081b2 <strncpy+0x16>
 80081a4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80081a8:	3a01      	subs	r2, #1
 80081aa:	f803 4b01 	strb.w	r4, [r3], #1
 80081ae:	2c00      	cmp	r4, #0
 80081b0:	d1f7      	bne.n	80081a2 <strncpy+0x6>
 80081b2:	2100      	movs	r1, #0
 80081b4:	441a      	add	r2, r3
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d100      	bne.n	80081bc <strncpy+0x20>
 80081ba:	bd10      	pop	{r4, pc}
 80081bc:	f803 1b01 	strb.w	r1, [r3], #1
 80081c0:	e7f9      	b.n	80081b6 <strncpy+0x1a>
	...

080081c4 <__errno>:
 80081c4:	4b01      	ldr	r3, [pc, #4]	@ (80081cc <__errno+0x8>)
 80081c6:	6818      	ldr	r0, [r3, #0]
 80081c8:	4770      	bx	lr
 80081ca:	bf00      	nop
 80081cc:	2000006c 	.word	0x2000006c

080081d0 <__libc_init_array>:
 80081d0:	b570      	push	{r4, r5, r6, lr}
 80081d2:	2600      	movs	r6, #0
 80081d4:	4d0c      	ldr	r5, [pc, #48]	@ (8008208 <__libc_init_array+0x38>)
 80081d6:	4c0d      	ldr	r4, [pc, #52]	@ (800820c <__libc_init_array+0x3c>)
 80081d8:	1b64      	subs	r4, r4, r5
 80081da:	10a4      	asrs	r4, r4, #2
 80081dc:	42a6      	cmp	r6, r4
 80081de:	d109      	bne.n	80081f4 <__libc_init_array+0x24>
 80081e0:	f001 f872 	bl	80092c8 <_init>
 80081e4:	2600      	movs	r6, #0
 80081e6:	4d0a      	ldr	r5, [pc, #40]	@ (8008210 <__libc_init_array+0x40>)
 80081e8:	4c0a      	ldr	r4, [pc, #40]	@ (8008214 <__libc_init_array+0x44>)
 80081ea:	1b64      	subs	r4, r4, r5
 80081ec:	10a4      	asrs	r4, r4, #2
 80081ee:	42a6      	cmp	r6, r4
 80081f0:	d105      	bne.n	80081fe <__libc_init_array+0x2e>
 80081f2:	bd70      	pop	{r4, r5, r6, pc}
 80081f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80081f8:	4798      	blx	r3
 80081fa:	3601      	adds	r6, #1
 80081fc:	e7ee      	b.n	80081dc <__libc_init_array+0xc>
 80081fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008202:	4798      	blx	r3
 8008204:	3601      	adds	r6, #1
 8008206:	e7f2      	b.n	80081ee <__libc_init_array+0x1e>
 8008208:	08009dcc 	.word	0x08009dcc
 800820c:	08009dcc 	.word	0x08009dcc
 8008210:	08009dcc 	.word	0x08009dcc
 8008214:	08009dd0 	.word	0x08009dd0

08008218 <__retarget_lock_acquire_recursive>:
 8008218:	4770      	bx	lr

0800821a <__retarget_lock_release_recursive>:
 800821a:	4770      	bx	lr

0800821c <_free_r>:
 800821c:	b538      	push	{r3, r4, r5, lr}
 800821e:	4605      	mov	r5, r0
 8008220:	2900      	cmp	r1, #0
 8008222:	d040      	beq.n	80082a6 <_free_r+0x8a>
 8008224:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008228:	1f0c      	subs	r4, r1, #4
 800822a:	2b00      	cmp	r3, #0
 800822c:	bfb8      	it	lt
 800822e:	18e4      	addlt	r4, r4, r3
 8008230:	f000 f8de 	bl	80083f0 <__malloc_lock>
 8008234:	4a1c      	ldr	r2, [pc, #112]	@ (80082a8 <_free_r+0x8c>)
 8008236:	6813      	ldr	r3, [r2, #0]
 8008238:	b933      	cbnz	r3, 8008248 <_free_r+0x2c>
 800823a:	6063      	str	r3, [r4, #4]
 800823c:	6014      	str	r4, [r2, #0]
 800823e:	4628      	mov	r0, r5
 8008240:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008244:	f000 b8da 	b.w	80083fc <__malloc_unlock>
 8008248:	42a3      	cmp	r3, r4
 800824a:	d908      	bls.n	800825e <_free_r+0x42>
 800824c:	6820      	ldr	r0, [r4, #0]
 800824e:	1821      	adds	r1, r4, r0
 8008250:	428b      	cmp	r3, r1
 8008252:	bf01      	itttt	eq
 8008254:	6819      	ldreq	r1, [r3, #0]
 8008256:	685b      	ldreq	r3, [r3, #4]
 8008258:	1809      	addeq	r1, r1, r0
 800825a:	6021      	streq	r1, [r4, #0]
 800825c:	e7ed      	b.n	800823a <_free_r+0x1e>
 800825e:	461a      	mov	r2, r3
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	b10b      	cbz	r3, 8008268 <_free_r+0x4c>
 8008264:	42a3      	cmp	r3, r4
 8008266:	d9fa      	bls.n	800825e <_free_r+0x42>
 8008268:	6811      	ldr	r1, [r2, #0]
 800826a:	1850      	adds	r0, r2, r1
 800826c:	42a0      	cmp	r0, r4
 800826e:	d10b      	bne.n	8008288 <_free_r+0x6c>
 8008270:	6820      	ldr	r0, [r4, #0]
 8008272:	4401      	add	r1, r0
 8008274:	1850      	adds	r0, r2, r1
 8008276:	4283      	cmp	r3, r0
 8008278:	6011      	str	r1, [r2, #0]
 800827a:	d1e0      	bne.n	800823e <_free_r+0x22>
 800827c:	6818      	ldr	r0, [r3, #0]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	4408      	add	r0, r1
 8008282:	6010      	str	r0, [r2, #0]
 8008284:	6053      	str	r3, [r2, #4]
 8008286:	e7da      	b.n	800823e <_free_r+0x22>
 8008288:	d902      	bls.n	8008290 <_free_r+0x74>
 800828a:	230c      	movs	r3, #12
 800828c:	602b      	str	r3, [r5, #0]
 800828e:	e7d6      	b.n	800823e <_free_r+0x22>
 8008290:	6820      	ldr	r0, [r4, #0]
 8008292:	1821      	adds	r1, r4, r0
 8008294:	428b      	cmp	r3, r1
 8008296:	bf01      	itttt	eq
 8008298:	6819      	ldreq	r1, [r3, #0]
 800829a:	685b      	ldreq	r3, [r3, #4]
 800829c:	1809      	addeq	r1, r1, r0
 800829e:	6021      	streq	r1, [r4, #0]
 80082a0:	6063      	str	r3, [r4, #4]
 80082a2:	6054      	str	r4, [r2, #4]
 80082a4:	e7cb      	b.n	800823e <_free_r+0x22>
 80082a6:	bd38      	pop	{r3, r4, r5, pc}
 80082a8:	20000564 	.word	0x20000564

080082ac <sbrk_aligned>:
 80082ac:	b570      	push	{r4, r5, r6, lr}
 80082ae:	4e0f      	ldr	r6, [pc, #60]	@ (80082ec <sbrk_aligned+0x40>)
 80082b0:	460c      	mov	r4, r1
 80082b2:	6831      	ldr	r1, [r6, #0]
 80082b4:	4605      	mov	r5, r0
 80082b6:	b911      	cbnz	r1, 80082be <sbrk_aligned+0x12>
 80082b8:	f000 ff34 	bl	8009124 <_sbrk_r>
 80082bc:	6030      	str	r0, [r6, #0]
 80082be:	4621      	mov	r1, r4
 80082c0:	4628      	mov	r0, r5
 80082c2:	f000 ff2f 	bl	8009124 <_sbrk_r>
 80082c6:	1c43      	adds	r3, r0, #1
 80082c8:	d103      	bne.n	80082d2 <sbrk_aligned+0x26>
 80082ca:	f04f 34ff 	mov.w	r4, #4294967295
 80082ce:	4620      	mov	r0, r4
 80082d0:	bd70      	pop	{r4, r5, r6, pc}
 80082d2:	1cc4      	adds	r4, r0, #3
 80082d4:	f024 0403 	bic.w	r4, r4, #3
 80082d8:	42a0      	cmp	r0, r4
 80082da:	d0f8      	beq.n	80082ce <sbrk_aligned+0x22>
 80082dc:	1a21      	subs	r1, r4, r0
 80082de:	4628      	mov	r0, r5
 80082e0:	f000 ff20 	bl	8009124 <_sbrk_r>
 80082e4:	3001      	adds	r0, #1
 80082e6:	d1f2      	bne.n	80082ce <sbrk_aligned+0x22>
 80082e8:	e7ef      	b.n	80082ca <sbrk_aligned+0x1e>
 80082ea:	bf00      	nop
 80082ec:	20000560 	.word	0x20000560

080082f0 <_malloc_r>:
 80082f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082f4:	1ccd      	adds	r5, r1, #3
 80082f6:	f025 0503 	bic.w	r5, r5, #3
 80082fa:	3508      	adds	r5, #8
 80082fc:	2d0c      	cmp	r5, #12
 80082fe:	bf38      	it	cc
 8008300:	250c      	movcc	r5, #12
 8008302:	2d00      	cmp	r5, #0
 8008304:	4606      	mov	r6, r0
 8008306:	db01      	blt.n	800830c <_malloc_r+0x1c>
 8008308:	42a9      	cmp	r1, r5
 800830a:	d904      	bls.n	8008316 <_malloc_r+0x26>
 800830c:	230c      	movs	r3, #12
 800830e:	6033      	str	r3, [r6, #0]
 8008310:	2000      	movs	r0, #0
 8008312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008316:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80083ec <_malloc_r+0xfc>
 800831a:	f000 f869 	bl	80083f0 <__malloc_lock>
 800831e:	f8d8 3000 	ldr.w	r3, [r8]
 8008322:	461c      	mov	r4, r3
 8008324:	bb44      	cbnz	r4, 8008378 <_malloc_r+0x88>
 8008326:	4629      	mov	r1, r5
 8008328:	4630      	mov	r0, r6
 800832a:	f7ff ffbf 	bl	80082ac <sbrk_aligned>
 800832e:	1c43      	adds	r3, r0, #1
 8008330:	4604      	mov	r4, r0
 8008332:	d158      	bne.n	80083e6 <_malloc_r+0xf6>
 8008334:	f8d8 4000 	ldr.w	r4, [r8]
 8008338:	4627      	mov	r7, r4
 800833a:	2f00      	cmp	r7, #0
 800833c:	d143      	bne.n	80083c6 <_malloc_r+0xd6>
 800833e:	2c00      	cmp	r4, #0
 8008340:	d04b      	beq.n	80083da <_malloc_r+0xea>
 8008342:	6823      	ldr	r3, [r4, #0]
 8008344:	4639      	mov	r1, r7
 8008346:	4630      	mov	r0, r6
 8008348:	eb04 0903 	add.w	r9, r4, r3
 800834c:	f000 feea 	bl	8009124 <_sbrk_r>
 8008350:	4581      	cmp	r9, r0
 8008352:	d142      	bne.n	80083da <_malloc_r+0xea>
 8008354:	6821      	ldr	r1, [r4, #0]
 8008356:	4630      	mov	r0, r6
 8008358:	1a6d      	subs	r5, r5, r1
 800835a:	4629      	mov	r1, r5
 800835c:	f7ff ffa6 	bl	80082ac <sbrk_aligned>
 8008360:	3001      	adds	r0, #1
 8008362:	d03a      	beq.n	80083da <_malloc_r+0xea>
 8008364:	6823      	ldr	r3, [r4, #0]
 8008366:	442b      	add	r3, r5
 8008368:	6023      	str	r3, [r4, #0]
 800836a:	f8d8 3000 	ldr.w	r3, [r8]
 800836e:	685a      	ldr	r2, [r3, #4]
 8008370:	bb62      	cbnz	r2, 80083cc <_malloc_r+0xdc>
 8008372:	f8c8 7000 	str.w	r7, [r8]
 8008376:	e00f      	b.n	8008398 <_malloc_r+0xa8>
 8008378:	6822      	ldr	r2, [r4, #0]
 800837a:	1b52      	subs	r2, r2, r5
 800837c:	d420      	bmi.n	80083c0 <_malloc_r+0xd0>
 800837e:	2a0b      	cmp	r2, #11
 8008380:	d917      	bls.n	80083b2 <_malloc_r+0xc2>
 8008382:	1961      	adds	r1, r4, r5
 8008384:	42a3      	cmp	r3, r4
 8008386:	6025      	str	r5, [r4, #0]
 8008388:	bf18      	it	ne
 800838a:	6059      	strne	r1, [r3, #4]
 800838c:	6863      	ldr	r3, [r4, #4]
 800838e:	bf08      	it	eq
 8008390:	f8c8 1000 	streq.w	r1, [r8]
 8008394:	5162      	str	r2, [r4, r5]
 8008396:	604b      	str	r3, [r1, #4]
 8008398:	4630      	mov	r0, r6
 800839a:	f000 f82f 	bl	80083fc <__malloc_unlock>
 800839e:	f104 000b 	add.w	r0, r4, #11
 80083a2:	1d23      	adds	r3, r4, #4
 80083a4:	f020 0007 	bic.w	r0, r0, #7
 80083a8:	1ac2      	subs	r2, r0, r3
 80083aa:	bf1c      	itt	ne
 80083ac:	1a1b      	subne	r3, r3, r0
 80083ae:	50a3      	strne	r3, [r4, r2]
 80083b0:	e7af      	b.n	8008312 <_malloc_r+0x22>
 80083b2:	6862      	ldr	r2, [r4, #4]
 80083b4:	42a3      	cmp	r3, r4
 80083b6:	bf0c      	ite	eq
 80083b8:	f8c8 2000 	streq.w	r2, [r8]
 80083bc:	605a      	strne	r2, [r3, #4]
 80083be:	e7eb      	b.n	8008398 <_malloc_r+0xa8>
 80083c0:	4623      	mov	r3, r4
 80083c2:	6864      	ldr	r4, [r4, #4]
 80083c4:	e7ae      	b.n	8008324 <_malloc_r+0x34>
 80083c6:	463c      	mov	r4, r7
 80083c8:	687f      	ldr	r7, [r7, #4]
 80083ca:	e7b6      	b.n	800833a <_malloc_r+0x4a>
 80083cc:	461a      	mov	r2, r3
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	42a3      	cmp	r3, r4
 80083d2:	d1fb      	bne.n	80083cc <_malloc_r+0xdc>
 80083d4:	2300      	movs	r3, #0
 80083d6:	6053      	str	r3, [r2, #4]
 80083d8:	e7de      	b.n	8008398 <_malloc_r+0xa8>
 80083da:	230c      	movs	r3, #12
 80083dc:	4630      	mov	r0, r6
 80083de:	6033      	str	r3, [r6, #0]
 80083e0:	f000 f80c 	bl	80083fc <__malloc_unlock>
 80083e4:	e794      	b.n	8008310 <_malloc_r+0x20>
 80083e6:	6005      	str	r5, [r0, #0]
 80083e8:	e7d6      	b.n	8008398 <_malloc_r+0xa8>
 80083ea:	bf00      	nop
 80083ec:	20000564 	.word	0x20000564

080083f0 <__malloc_lock>:
 80083f0:	4801      	ldr	r0, [pc, #4]	@ (80083f8 <__malloc_lock+0x8>)
 80083f2:	f7ff bf11 	b.w	8008218 <__retarget_lock_acquire_recursive>
 80083f6:	bf00      	nop
 80083f8:	2000055c 	.word	0x2000055c

080083fc <__malloc_unlock>:
 80083fc:	4801      	ldr	r0, [pc, #4]	@ (8008404 <__malloc_unlock+0x8>)
 80083fe:	f7ff bf0c 	b.w	800821a <__retarget_lock_release_recursive>
 8008402:	bf00      	nop
 8008404:	2000055c 	.word	0x2000055c

08008408 <__ssputs_r>:
 8008408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800840c:	461f      	mov	r7, r3
 800840e:	688e      	ldr	r6, [r1, #8]
 8008410:	4682      	mov	sl, r0
 8008412:	42be      	cmp	r6, r7
 8008414:	460c      	mov	r4, r1
 8008416:	4690      	mov	r8, r2
 8008418:	680b      	ldr	r3, [r1, #0]
 800841a:	d82d      	bhi.n	8008478 <__ssputs_r+0x70>
 800841c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008420:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008424:	d026      	beq.n	8008474 <__ssputs_r+0x6c>
 8008426:	6965      	ldr	r5, [r4, #20]
 8008428:	6909      	ldr	r1, [r1, #16]
 800842a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800842e:	eba3 0901 	sub.w	r9, r3, r1
 8008432:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008436:	1c7b      	adds	r3, r7, #1
 8008438:	444b      	add	r3, r9
 800843a:	106d      	asrs	r5, r5, #1
 800843c:	429d      	cmp	r5, r3
 800843e:	bf38      	it	cc
 8008440:	461d      	movcc	r5, r3
 8008442:	0553      	lsls	r3, r2, #21
 8008444:	d527      	bpl.n	8008496 <__ssputs_r+0x8e>
 8008446:	4629      	mov	r1, r5
 8008448:	f7ff ff52 	bl	80082f0 <_malloc_r>
 800844c:	4606      	mov	r6, r0
 800844e:	b360      	cbz	r0, 80084aa <__ssputs_r+0xa2>
 8008450:	464a      	mov	r2, r9
 8008452:	6921      	ldr	r1, [r4, #16]
 8008454:	f000 fe84 	bl	8009160 <memcpy>
 8008458:	89a3      	ldrh	r3, [r4, #12]
 800845a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800845e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008462:	81a3      	strh	r3, [r4, #12]
 8008464:	6126      	str	r6, [r4, #16]
 8008466:	444e      	add	r6, r9
 8008468:	6026      	str	r6, [r4, #0]
 800846a:	463e      	mov	r6, r7
 800846c:	6165      	str	r5, [r4, #20]
 800846e:	eba5 0509 	sub.w	r5, r5, r9
 8008472:	60a5      	str	r5, [r4, #8]
 8008474:	42be      	cmp	r6, r7
 8008476:	d900      	bls.n	800847a <__ssputs_r+0x72>
 8008478:	463e      	mov	r6, r7
 800847a:	4632      	mov	r2, r6
 800847c:	4641      	mov	r1, r8
 800847e:	6820      	ldr	r0, [r4, #0]
 8008480:	f000 fe35 	bl	80090ee <memmove>
 8008484:	2000      	movs	r0, #0
 8008486:	68a3      	ldr	r3, [r4, #8]
 8008488:	1b9b      	subs	r3, r3, r6
 800848a:	60a3      	str	r3, [r4, #8]
 800848c:	6823      	ldr	r3, [r4, #0]
 800848e:	4433      	add	r3, r6
 8008490:	6023      	str	r3, [r4, #0]
 8008492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008496:	462a      	mov	r2, r5
 8008498:	f000 fe70 	bl	800917c <_realloc_r>
 800849c:	4606      	mov	r6, r0
 800849e:	2800      	cmp	r0, #0
 80084a0:	d1e0      	bne.n	8008464 <__ssputs_r+0x5c>
 80084a2:	4650      	mov	r0, sl
 80084a4:	6921      	ldr	r1, [r4, #16]
 80084a6:	f7ff feb9 	bl	800821c <_free_r>
 80084aa:	230c      	movs	r3, #12
 80084ac:	f8ca 3000 	str.w	r3, [sl]
 80084b0:	89a3      	ldrh	r3, [r4, #12]
 80084b2:	f04f 30ff 	mov.w	r0, #4294967295
 80084b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084ba:	81a3      	strh	r3, [r4, #12]
 80084bc:	e7e9      	b.n	8008492 <__ssputs_r+0x8a>
	...

080084c0 <_svfiprintf_r>:
 80084c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084c4:	4698      	mov	r8, r3
 80084c6:	898b      	ldrh	r3, [r1, #12]
 80084c8:	4607      	mov	r7, r0
 80084ca:	061b      	lsls	r3, r3, #24
 80084cc:	460d      	mov	r5, r1
 80084ce:	4614      	mov	r4, r2
 80084d0:	b09d      	sub	sp, #116	@ 0x74
 80084d2:	d510      	bpl.n	80084f6 <_svfiprintf_r+0x36>
 80084d4:	690b      	ldr	r3, [r1, #16]
 80084d6:	b973      	cbnz	r3, 80084f6 <_svfiprintf_r+0x36>
 80084d8:	2140      	movs	r1, #64	@ 0x40
 80084da:	f7ff ff09 	bl	80082f0 <_malloc_r>
 80084de:	6028      	str	r0, [r5, #0]
 80084e0:	6128      	str	r0, [r5, #16]
 80084e2:	b930      	cbnz	r0, 80084f2 <_svfiprintf_r+0x32>
 80084e4:	230c      	movs	r3, #12
 80084e6:	603b      	str	r3, [r7, #0]
 80084e8:	f04f 30ff 	mov.w	r0, #4294967295
 80084ec:	b01d      	add	sp, #116	@ 0x74
 80084ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084f2:	2340      	movs	r3, #64	@ 0x40
 80084f4:	616b      	str	r3, [r5, #20]
 80084f6:	2300      	movs	r3, #0
 80084f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80084fa:	2320      	movs	r3, #32
 80084fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008500:	2330      	movs	r3, #48	@ 0x30
 8008502:	f04f 0901 	mov.w	r9, #1
 8008506:	f8cd 800c 	str.w	r8, [sp, #12]
 800850a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80086a4 <_svfiprintf_r+0x1e4>
 800850e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008512:	4623      	mov	r3, r4
 8008514:	469a      	mov	sl, r3
 8008516:	f813 2b01 	ldrb.w	r2, [r3], #1
 800851a:	b10a      	cbz	r2, 8008520 <_svfiprintf_r+0x60>
 800851c:	2a25      	cmp	r2, #37	@ 0x25
 800851e:	d1f9      	bne.n	8008514 <_svfiprintf_r+0x54>
 8008520:	ebba 0b04 	subs.w	fp, sl, r4
 8008524:	d00b      	beq.n	800853e <_svfiprintf_r+0x7e>
 8008526:	465b      	mov	r3, fp
 8008528:	4622      	mov	r2, r4
 800852a:	4629      	mov	r1, r5
 800852c:	4638      	mov	r0, r7
 800852e:	f7ff ff6b 	bl	8008408 <__ssputs_r>
 8008532:	3001      	adds	r0, #1
 8008534:	f000 80a7 	beq.w	8008686 <_svfiprintf_r+0x1c6>
 8008538:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800853a:	445a      	add	r2, fp
 800853c:	9209      	str	r2, [sp, #36]	@ 0x24
 800853e:	f89a 3000 	ldrb.w	r3, [sl]
 8008542:	2b00      	cmp	r3, #0
 8008544:	f000 809f 	beq.w	8008686 <_svfiprintf_r+0x1c6>
 8008548:	2300      	movs	r3, #0
 800854a:	f04f 32ff 	mov.w	r2, #4294967295
 800854e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008552:	f10a 0a01 	add.w	sl, sl, #1
 8008556:	9304      	str	r3, [sp, #16]
 8008558:	9307      	str	r3, [sp, #28]
 800855a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800855e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008560:	4654      	mov	r4, sl
 8008562:	2205      	movs	r2, #5
 8008564:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008568:	484e      	ldr	r0, [pc, #312]	@ (80086a4 <_svfiprintf_r+0x1e4>)
 800856a:	f000 fdeb 	bl	8009144 <memchr>
 800856e:	9a04      	ldr	r2, [sp, #16]
 8008570:	b9d8      	cbnz	r0, 80085aa <_svfiprintf_r+0xea>
 8008572:	06d0      	lsls	r0, r2, #27
 8008574:	bf44      	itt	mi
 8008576:	2320      	movmi	r3, #32
 8008578:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800857c:	0711      	lsls	r1, r2, #28
 800857e:	bf44      	itt	mi
 8008580:	232b      	movmi	r3, #43	@ 0x2b
 8008582:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008586:	f89a 3000 	ldrb.w	r3, [sl]
 800858a:	2b2a      	cmp	r3, #42	@ 0x2a
 800858c:	d015      	beq.n	80085ba <_svfiprintf_r+0xfa>
 800858e:	4654      	mov	r4, sl
 8008590:	2000      	movs	r0, #0
 8008592:	f04f 0c0a 	mov.w	ip, #10
 8008596:	9a07      	ldr	r2, [sp, #28]
 8008598:	4621      	mov	r1, r4
 800859a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800859e:	3b30      	subs	r3, #48	@ 0x30
 80085a0:	2b09      	cmp	r3, #9
 80085a2:	d94b      	bls.n	800863c <_svfiprintf_r+0x17c>
 80085a4:	b1b0      	cbz	r0, 80085d4 <_svfiprintf_r+0x114>
 80085a6:	9207      	str	r2, [sp, #28]
 80085a8:	e014      	b.n	80085d4 <_svfiprintf_r+0x114>
 80085aa:	eba0 0308 	sub.w	r3, r0, r8
 80085ae:	fa09 f303 	lsl.w	r3, r9, r3
 80085b2:	4313      	orrs	r3, r2
 80085b4:	46a2      	mov	sl, r4
 80085b6:	9304      	str	r3, [sp, #16]
 80085b8:	e7d2      	b.n	8008560 <_svfiprintf_r+0xa0>
 80085ba:	9b03      	ldr	r3, [sp, #12]
 80085bc:	1d19      	adds	r1, r3, #4
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	9103      	str	r1, [sp, #12]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	bfbb      	ittet	lt
 80085c6:	425b      	neglt	r3, r3
 80085c8:	f042 0202 	orrlt.w	r2, r2, #2
 80085cc:	9307      	strge	r3, [sp, #28]
 80085ce:	9307      	strlt	r3, [sp, #28]
 80085d0:	bfb8      	it	lt
 80085d2:	9204      	strlt	r2, [sp, #16]
 80085d4:	7823      	ldrb	r3, [r4, #0]
 80085d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80085d8:	d10a      	bne.n	80085f0 <_svfiprintf_r+0x130>
 80085da:	7863      	ldrb	r3, [r4, #1]
 80085dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80085de:	d132      	bne.n	8008646 <_svfiprintf_r+0x186>
 80085e0:	9b03      	ldr	r3, [sp, #12]
 80085e2:	3402      	adds	r4, #2
 80085e4:	1d1a      	adds	r2, r3, #4
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	9203      	str	r2, [sp, #12]
 80085ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80085ee:	9305      	str	r3, [sp, #20]
 80085f0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80086a8 <_svfiprintf_r+0x1e8>
 80085f4:	2203      	movs	r2, #3
 80085f6:	4650      	mov	r0, sl
 80085f8:	7821      	ldrb	r1, [r4, #0]
 80085fa:	f000 fda3 	bl	8009144 <memchr>
 80085fe:	b138      	cbz	r0, 8008610 <_svfiprintf_r+0x150>
 8008600:	2240      	movs	r2, #64	@ 0x40
 8008602:	9b04      	ldr	r3, [sp, #16]
 8008604:	eba0 000a 	sub.w	r0, r0, sl
 8008608:	4082      	lsls	r2, r0
 800860a:	4313      	orrs	r3, r2
 800860c:	3401      	adds	r4, #1
 800860e:	9304      	str	r3, [sp, #16]
 8008610:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008614:	2206      	movs	r2, #6
 8008616:	4825      	ldr	r0, [pc, #148]	@ (80086ac <_svfiprintf_r+0x1ec>)
 8008618:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800861c:	f000 fd92 	bl	8009144 <memchr>
 8008620:	2800      	cmp	r0, #0
 8008622:	d036      	beq.n	8008692 <_svfiprintf_r+0x1d2>
 8008624:	4b22      	ldr	r3, [pc, #136]	@ (80086b0 <_svfiprintf_r+0x1f0>)
 8008626:	bb1b      	cbnz	r3, 8008670 <_svfiprintf_r+0x1b0>
 8008628:	9b03      	ldr	r3, [sp, #12]
 800862a:	3307      	adds	r3, #7
 800862c:	f023 0307 	bic.w	r3, r3, #7
 8008630:	3308      	adds	r3, #8
 8008632:	9303      	str	r3, [sp, #12]
 8008634:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008636:	4433      	add	r3, r6
 8008638:	9309      	str	r3, [sp, #36]	@ 0x24
 800863a:	e76a      	b.n	8008512 <_svfiprintf_r+0x52>
 800863c:	460c      	mov	r4, r1
 800863e:	2001      	movs	r0, #1
 8008640:	fb0c 3202 	mla	r2, ip, r2, r3
 8008644:	e7a8      	b.n	8008598 <_svfiprintf_r+0xd8>
 8008646:	2300      	movs	r3, #0
 8008648:	f04f 0c0a 	mov.w	ip, #10
 800864c:	4619      	mov	r1, r3
 800864e:	3401      	adds	r4, #1
 8008650:	9305      	str	r3, [sp, #20]
 8008652:	4620      	mov	r0, r4
 8008654:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008658:	3a30      	subs	r2, #48	@ 0x30
 800865a:	2a09      	cmp	r2, #9
 800865c:	d903      	bls.n	8008666 <_svfiprintf_r+0x1a6>
 800865e:	2b00      	cmp	r3, #0
 8008660:	d0c6      	beq.n	80085f0 <_svfiprintf_r+0x130>
 8008662:	9105      	str	r1, [sp, #20]
 8008664:	e7c4      	b.n	80085f0 <_svfiprintf_r+0x130>
 8008666:	4604      	mov	r4, r0
 8008668:	2301      	movs	r3, #1
 800866a:	fb0c 2101 	mla	r1, ip, r1, r2
 800866e:	e7f0      	b.n	8008652 <_svfiprintf_r+0x192>
 8008670:	ab03      	add	r3, sp, #12
 8008672:	9300      	str	r3, [sp, #0]
 8008674:	462a      	mov	r2, r5
 8008676:	4638      	mov	r0, r7
 8008678:	4b0e      	ldr	r3, [pc, #56]	@ (80086b4 <_svfiprintf_r+0x1f4>)
 800867a:	a904      	add	r1, sp, #16
 800867c:	f3af 8000 	nop.w
 8008680:	1c42      	adds	r2, r0, #1
 8008682:	4606      	mov	r6, r0
 8008684:	d1d6      	bne.n	8008634 <_svfiprintf_r+0x174>
 8008686:	89ab      	ldrh	r3, [r5, #12]
 8008688:	065b      	lsls	r3, r3, #25
 800868a:	f53f af2d 	bmi.w	80084e8 <_svfiprintf_r+0x28>
 800868e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008690:	e72c      	b.n	80084ec <_svfiprintf_r+0x2c>
 8008692:	ab03      	add	r3, sp, #12
 8008694:	9300      	str	r3, [sp, #0]
 8008696:	462a      	mov	r2, r5
 8008698:	4638      	mov	r0, r7
 800869a:	4b06      	ldr	r3, [pc, #24]	@ (80086b4 <_svfiprintf_r+0x1f4>)
 800869c:	a904      	add	r1, sp, #16
 800869e:	f000 fa4b 	bl	8008b38 <_printf_i>
 80086a2:	e7ed      	b.n	8008680 <_svfiprintf_r+0x1c0>
 80086a4:	08009d73 	.word	0x08009d73
 80086a8:	08009d79 	.word	0x08009d79
 80086ac:	08009d7d 	.word	0x08009d7d
 80086b0:	00000000 	.word	0x00000000
 80086b4:	08008409 	.word	0x08008409

080086b8 <_sungetc_r>:
 80086b8:	b538      	push	{r3, r4, r5, lr}
 80086ba:	1c4b      	adds	r3, r1, #1
 80086bc:	4614      	mov	r4, r2
 80086be:	d103      	bne.n	80086c8 <_sungetc_r+0x10>
 80086c0:	f04f 35ff 	mov.w	r5, #4294967295
 80086c4:	4628      	mov	r0, r5
 80086c6:	bd38      	pop	{r3, r4, r5, pc}
 80086c8:	8993      	ldrh	r3, [r2, #12]
 80086ca:	b2cd      	uxtb	r5, r1
 80086cc:	f023 0320 	bic.w	r3, r3, #32
 80086d0:	8193      	strh	r3, [r2, #12]
 80086d2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80086d4:	6852      	ldr	r2, [r2, #4]
 80086d6:	b18b      	cbz	r3, 80086fc <_sungetc_r+0x44>
 80086d8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80086da:	4293      	cmp	r3, r2
 80086dc:	dd08      	ble.n	80086f0 <_sungetc_r+0x38>
 80086de:	6823      	ldr	r3, [r4, #0]
 80086e0:	1e5a      	subs	r2, r3, #1
 80086e2:	6022      	str	r2, [r4, #0]
 80086e4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80086e8:	6863      	ldr	r3, [r4, #4]
 80086ea:	3301      	adds	r3, #1
 80086ec:	6063      	str	r3, [r4, #4]
 80086ee:	e7e9      	b.n	80086c4 <_sungetc_r+0xc>
 80086f0:	4621      	mov	r1, r4
 80086f2:	f000 fcc4 	bl	800907e <__submore>
 80086f6:	2800      	cmp	r0, #0
 80086f8:	d0f1      	beq.n	80086de <_sungetc_r+0x26>
 80086fa:	e7e1      	b.n	80086c0 <_sungetc_r+0x8>
 80086fc:	6921      	ldr	r1, [r4, #16]
 80086fe:	6823      	ldr	r3, [r4, #0]
 8008700:	b151      	cbz	r1, 8008718 <_sungetc_r+0x60>
 8008702:	4299      	cmp	r1, r3
 8008704:	d208      	bcs.n	8008718 <_sungetc_r+0x60>
 8008706:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800870a:	42a9      	cmp	r1, r5
 800870c:	d104      	bne.n	8008718 <_sungetc_r+0x60>
 800870e:	3b01      	subs	r3, #1
 8008710:	3201      	adds	r2, #1
 8008712:	6023      	str	r3, [r4, #0]
 8008714:	6062      	str	r2, [r4, #4]
 8008716:	e7d5      	b.n	80086c4 <_sungetc_r+0xc>
 8008718:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800871c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008720:	6363      	str	r3, [r4, #52]	@ 0x34
 8008722:	2303      	movs	r3, #3
 8008724:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008726:	4623      	mov	r3, r4
 8008728:	f803 5f46 	strb.w	r5, [r3, #70]!
 800872c:	6023      	str	r3, [r4, #0]
 800872e:	2301      	movs	r3, #1
 8008730:	e7dc      	b.n	80086ec <_sungetc_r+0x34>

08008732 <__ssrefill_r>:
 8008732:	b510      	push	{r4, lr}
 8008734:	460c      	mov	r4, r1
 8008736:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8008738:	b169      	cbz	r1, 8008756 <__ssrefill_r+0x24>
 800873a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800873e:	4299      	cmp	r1, r3
 8008740:	d001      	beq.n	8008746 <__ssrefill_r+0x14>
 8008742:	f7ff fd6b 	bl	800821c <_free_r>
 8008746:	2000      	movs	r0, #0
 8008748:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800874a:	6360      	str	r0, [r4, #52]	@ 0x34
 800874c:	6063      	str	r3, [r4, #4]
 800874e:	b113      	cbz	r3, 8008756 <__ssrefill_r+0x24>
 8008750:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008752:	6023      	str	r3, [r4, #0]
 8008754:	bd10      	pop	{r4, pc}
 8008756:	6923      	ldr	r3, [r4, #16]
 8008758:	f04f 30ff 	mov.w	r0, #4294967295
 800875c:	6023      	str	r3, [r4, #0]
 800875e:	2300      	movs	r3, #0
 8008760:	6063      	str	r3, [r4, #4]
 8008762:	89a3      	ldrh	r3, [r4, #12]
 8008764:	f043 0320 	orr.w	r3, r3, #32
 8008768:	81a3      	strh	r3, [r4, #12]
 800876a:	e7f3      	b.n	8008754 <__ssrefill_r+0x22>

0800876c <__ssvfiscanf_r>:
 800876c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008770:	460c      	mov	r4, r1
 8008772:	2100      	movs	r1, #0
 8008774:	4606      	mov	r6, r0
 8008776:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800877a:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800877e:	49ab      	ldr	r1, [pc, #684]	@ (8008a2c <__ssvfiscanf_r+0x2c0>)
 8008780:	f10d 0804 	add.w	r8, sp, #4
 8008784:	91a0      	str	r1, [sp, #640]	@ 0x280
 8008786:	49aa      	ldr	r1, [pc, #680]	@ (8008a30 <__ssvfiscanf_r+0x2c4>)
 8008788:	4faa      	ldr	r7, [pc, #680]	@ (8008a34 <__ssvfiscanf_r+0x2c8>)
 800878a:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800878e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8008790:	9300      	str	r3, [sp, #0]
 8008792:	f892 9000 	ldrb.w	r9, [r2]
 8008796:	f1b9 0f00 	cmp.w	r9, #0
 800879a:	f000 8159 	beq.w	8008a50 <__ssvfiscanf_r+0x2e4>
 800879e:	f817 3009 	ldrb.w	r3, [r7, r9]
 80087a2:	1c55      	adds	r5, r2, #1
 80087a4:	f013 0308 	ands.w	r3, r3, #8
 80087a8:	d019      	beq.n	80087de <__ssvfiscanf_r+0x72>
 80087aa:	6863      	ldr	r3, [r4, #4]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	dd0f      	ble.n	80087d0 <__ssvfiscanf_r+0x64>
 80087b0:	6823      	ldr	r3, [r4, #0]
 80087b2:	781a      	ldrb	r2, [r3, #0]
 80087b4:	5cba      	ldrb	r2, [r7, r2]
 80087b6:	0712      	lsls	r2, r2, #28
 80087b8:	d401      	bmi.n	80087be <__ssvfiscanf_r+0x52>
 80087ba:	462a      	mov	r2, r5
 80087bc:	e7e9      	b.n	8008792 <__ssvfiscanf_r+0x26>
 80087be:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80087c0:	3301      	adds	r3, #1
 80087c2:	3201      	adds	r2, #1
 80087c4:	9245      	str	r2, [sp, #276]	@ 0x114
 80087c6:	6862      	ldr	r2, [r4, #4]
 80087c8:	6023      	str	r3, [r4, #0]
 80087ca:	3a01      	subs	r2, #1
 80087cc:	6062      	str	r2, [r4, #4]
 80087ce:	e7ec      	b.n	80087aa <__ssvfiscanf_r+0x3e>
 80087d0:	4621      	mov	r1, r4
 80087d2:	4630      	mov	r0, r6
 80087d4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80087d6:	4798      	blx	r3
 80087d8:	2800      	cmp	r0, #0
 80087da:	d0e9      	beq.n	80087b0 <__ssvfiscanf_r+0x44>
 80087dc:	e7ed      	b.n	80087ba <__ssvfiscanf_r+0x4e>
 80087de:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 80087e2:	f040 8086 	bne.w	80088f2 <__ssvfiscanf_r+0x186>
 80087e6:	9341      	str	r3, [sp, #260]	@ 0x104
 80087e8:	9343      	str	r3, [sp, #268]	@ 0x10c
 80087ea:	7853      	ldrb	r3, [r2, #1]
 80087ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80087ee:	bf04      	itt	eq
 80087f0:	2310      	moveq	r3, #16
 80087f2:	1c95      	addeq	r5, r2, #2
 80087f4:	f04f 020a 	mov.w	r2, #10
 80087f8:	bf08      	it	eq
 80087fa:	9341      	streq	r3, [sp, #260]	@ 0x104
 80087fc:	46aa      	mov	sl, r5
 80087fe:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8008802:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8008806:	2b09      	cmp	r3, #9
 8008808:	d91e      	bls.n	8008848 <__ssvfiscanf_r+0xdc>
 800880a:	f8df b22c 	ldr.w	fp, [pc, #556]	@ 8008a38 <__ssvfiscanf_r+0x2cc>
 800880e:	2203      	movs	r2, #3
 8008810:	4658      	mov	r0, fp
 8008812:	f000 fc97 	bl	8009144 <memchr>
 8008816:	b138      	cbz	r0, 8008828 <__ssvfiscanf_r+0xbc>
 8008818:	2301      	movs	r3, #1
 800881a:	4655      	mov	r5, sl
 800881c:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800881e:	eba0 000b 	sub.w	r0, r0, fp
 8008822:	4083      	lsls	r3, r0
 8008824:	4313      	orrs	r3, r2
 8008826:	9341      	str	r3, [sp, #260]	@ 0x104
 8008828:	f815 3b01 	ldrb.w	r3, [r5], #1
 800882c:	2b78      	cmp	r3, #120	@ 0x78
 800882e:	d806      	bhi.n	800883e <__ssvfiscanf_r+0xd2>
 8008830:	2b57      	cmp	r3, #87	@ 0x57
 8008832:	d810      	bhi.n	8008856 <__ssvfiscanf_r+0xea>
 8008834:	2b25      	cmp	r3, #37	@ 0x25
 8008836:	d05c      	beq.n	80088f2 <__ssvfiscanf_r+0x186>
 8008838:	d856      	bhi.n	80088e8 <__ssvfiscanf_r+0x17c>
 800883a:	2b00      	cmp	r3, #0
 800883c:	d074      	beq.n	8008928 <__ssvfiscanf_r+0x1bc>
 800883e:	2303      	movs	r3, #3
 8008840:	9347      	str	r3, [sp, #284]	@ 0x11c
 8008842:	230a      	movs	r3, #10
 8008844:	9342      	str	r3, [sp, #264]	@ 0x108
 8008846:	e087      	b.n	8008958 <__ssvfiscanf_r+0x1ec>
 8008848:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800884a:	4655      	mov	r5, sl
 800884c:	fb02 1103 	mla	r1, r2, r3, r1
 8008850:	3930      	subs	r1, #48	@ 0x30
 8008852:	9143      	str	r1, [sp, #268]	@ 0x10c
 8008854:	e7d2      	b.n	80087fc <__ssvfiscanf_r+0x90>
 8008856:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800885a:	2a20      	cmp	r2, #32
 800885c:	d8ef      	bhi.n	800883e <__ssvfiscanf_r+0xd2>
 800885e:	a101      	add	r1, pc, #4	@ (adr r1, 8008864 <__ssvfiscanf_r+0xf8>)
 8008860:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008864:	08008937 	.word	0x08008937
 8008868:	0800883f 	.word	0x0800883f
 800886c:	0800883f 	.word	0x0800883f
 8008870:	08008991 	.word	0x08008991
 8008874:	0800883f 	.word	0x0800883f
 8008878:	0800883f 	.word	0x0800883f
 800887c:	0800883f 	.word	0x0800883f
 8008880:	0800883f 	.word	0x0800883f
 8008884:	0800883f 	.word	0x0800883f
 8008888:	0800883f 	.word	0x0800883f
 800888c:	0800883f 	.word	0x0800883f
 8008890:	080089a7 	.word	0x080089a7
 8008894:	0800898d 	.word	0x0800898d
 8008898:	080088ef 	.word	0x080088ef
 800889c:	080088ef 	.word	0x080088ef
 80088a0:	080088ef 	.word	0x080088ef
 80088a4:	0800883f 	.word	0x0800883f
 80088a8:	08008949 	.word	0x08008949
 80088ac:	0800883f 	.word	0x0800883f
 80088b0:	0800883f 	.word	0x0800883f
 80088b4:	0800883f 	.word	0x0800883f
 80088b8:	0800883f 	.word	0x0800883f
 80088bc:	080089b7 	.word	0x080089b7
 80088c0:	08008951 	.word	0x08008951
 80088c4:	0800892f 	.word	0x0800892f
 80088c8:	0800883f 	.word	0x0800883f
 80088cc:	0800883f 	.word	0x0800883f
 80088d0:	080089b3 	.word	0x080089b3
 80088d4:	0800883f 	.word	0x0800883f
 80088d8:	0800898d 	.word	0x0800898d
 80088dc:	0800883f 	.word	0x0800883f
 80088e0:	0800883f 	.word	0x0800883f
 80088e4:	08008937 	.word	0x08008937
 80088e8:	3b45      	subs	r3, #69	@ 0x45
 80088ea:	2b02      	cmp	r3, #2
 80088ec:	d8a7      	bhi.n	800883e <__ssvfiscanf_r+0xd2>
 80088ee:	2305      	movs	r3, #5
 80088f0:	e031      	b.n	8008956 <__ssvfiscanf_r+0x1ea>
 80088f2:	6863      	ldr	r3, [r4, #4]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	dd0d      	ble.n	8008914 <__ssvfiscanf_r+0x1a8>
 80088f8:	6823      	ldr	r3, [r4, #0]
 80088fa:	781a      	ldrb	r2, [r3, #0]
 80088fc:	454a      	cmp	r2, r9
 80088fe:	f040 80a7 	bne.w	8008a50 <__ssvfiscanf_r+0x2e4>
 8008902:	3301      	adds	r3, #1
 8008904:	6862      	ldr	r2, [r4, #4]
 8008906:	6023      	str	r3, [r4, #0]
 8008908:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800890a:	3a01      	subs	r2, #1
 800890c:	3301      	adds	r3, #1
 800890e:	6062      	str	r2, [r4, #4]
 8008910:	9345      	str	r3, [sp, #276]	@ 0x114
 8008912:	e752      	b.n	80087ba <__ssvfiscanf_r+0x4e>
 8008914:	4621      	mov	r1, r4
 8008916:	4630      	mov	r0, r6
 8008918:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800891a:	4798      	blx	r3
 800891c:	2800      	cmp	r0, #0
 800891e:	d0eb      	beq.n	80088f8 <__ssvfiscanf_r+0x18c>
 8008920:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8008922:	2800      	cmp	r0, #0
 8008924:	f040 808c 	bne.w	8008a40 <__ssvfiscanf_r+0x2d4>
 8008928:	f04f 30ff 	mov.w	r0, #4294967295
 800892c:	e08c      	b.n	8008a48 <__ssvfiscanf_r+0x2dc>
 800892e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008930:	f042 0220 	orr.w	r2, r2, #32
 8008934:	9241      	str	r2, [sp, #260]	@ 0x104
 8008936:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008938:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800893c:	9241      	str	r2, [sp, #260]	@ 0x104
 800893e:	2210      	movs	r2, #16
 8008940:	2b6e      	cmp	r3, #110	@ 0x6e
 8008942:	9242      	str	r2, [sp, #264]	@ 0x108
 8008944:	d902      	bls.n	800894c <__ssvfiscanf_r+0x1e0>
 8008946:	e005      	b.n	8008954 <__ssvfiscanf_r+0x1e8>
 8008948:	2300      	movs	r3, #0
 800894a:	9342      	str	r3, [sp, #264]	@ 0x108
 800894c:	2303      	movs	r3, #3
 800894e:	e002      	b.n	8008956 <__ssvfiscanf_r+0x1ea>
 8008950:	2308      	movs	r3, #8
 8008952:	9342      	str	r3, [sp, #264]	@ 0x108
 8008954:	2304      	movs	r3, #4
 8008956:	9347      	str	r3, [sp, #284]	@ 0x11c
 8008958:	6863      	ldr	r3, [r4, #4]
 800895a:	2b00      	cmp	r3, #0
 800895c:	dd39      	ble.n	80089d2 <__ssvfiscanf_r+0x266>
 800895e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008960:	0659      	lsls	r1, r3, #25
 8008962:	d404      	bmi.n	800896e <__ssvfiscanf_r+0x202>
 8008964:	6823      	ldr	r3, [r4, #0]
 8008966:	781a      	ldrb	r2, [r3, #0]
 8008968:	5cba      	ldrb	r2, [r7, r2]
 800896a:	0712      	lsls	r2, r2, #28
 800896c:	d438      	bmi.n	80089e0 <__ssvfiscanf_r+0x274>
 800896e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8008970:	2b02      	cmp	r3, #2
 8008972:	dc47      	bgt.n	8008a04 <__ssvfiscanf_r+0x298>
 8008974:	466b      	mov	r3, sp
 8008976:	4622      	mov	r2, r4
 8008978:	4630      	mov	r0, r6
 800897a:	a941      	add	r1, sp, #260	@ 0x104
 800897c:	f000 f9fa 	bl	8008d74 <_scanf_chars>
 8008980:	2801      	cmp	r0, #1
 8008982:	d065      	beq.n	8008a50 <__ssvfiscanf_r+0x2e4>
 8008984:	2802      	cmp	r0, #2
 8008986:	f47f af18 	bne.w	80087ba <__ssvfiscanf_r+0x4e>
 800898a:	e7c9      	b.n	8008920 <__ssvfiscanf_r+0x1b4>
 800898c:	220a      	movs	r2, #10
 800898e:	e7d7      	b.n	8008940 <__ssvfiscanf_r+0x1d4>
 8008990:	4629      	mov	r1, r5
 8008992:	4640      	mov	r0, r8
 8008994:	f000 fb3a 	bl	800900c <__sccl>
 8008998:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800899a:	4605      	mov	r5, r0
 800899c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089a0:	9341      	str	r3, [sp, #260]	@ 0x104
 80089a2:	2301      	movs	r3, #1
 80089a4:	e7d7      	b.n	8008956 <__ssvfiscanf_r+0x1ea>
 80089a6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80089a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089ac:	9341      	str	r3, [sp, #260]	@ 0x104
 80089ae:	2300      	movs	r3, #0
 80089b0:	e7d1      	b.n	8008956 <__ssvfiscanf_r+0x1ea>
 80089b2:	2302      	movs	r3, #2
 80089b4:	e7cf      	b.n	8008956 <__ssvfiscanf_r+0x1ea>
 80089b6:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80089b8:	06c3      	lsls	r3, r0, #27
 80089ba:	f53f aefe 	bmi.w	80087ba <__ssvfiscanf_r+0x4e>
 80089be:	9b00      	ldr	r3, [sp, #0]
 80089c0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80089c2:	1d19      	adds	r1, r3, #4
 80089c4:	9100      	str	r1, [sp, #0]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	07c0      	lsls	r0, r0, #31
 80089ca:	bf4c      	ite	mi
 80089cc:	801a      	strhmi	r2, [r3, #0]
 80089ce:	601a      	strpl	r2, [r3, #0]
 80089d0:	e6f3      	b.n	80087ba <__ssvfiscanf_r+0x4e>
 80089d2:	4621      	mov	r1, r4
 80089d4:	4630      	mov	r0, r6
 80089d6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80089d8:	4798      	blx	r3
 80089da:	2800      	cmp	r0, #0
 80089dc:	d0bf      	beq.n	800895e <__ssvfiscanf_r+0x1f2>
 80089de:	e79f      	b.n	8008920 <__ssvfiscanf_r+0x1b4>
 80089e0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80089e2:	3201      	adds	r2, #1
 80089e4:	9245      	str	r2, [sp, #276]	@ 0x114
 80089e6:	6862      	ldr	r2, [r4, #4]
 80089e8:	3a01      	subs	r2, #1
 80089ea:	2a00      	cmp	r2, #0
 80089ec:	6062      	str	r2, [r4, #4]
 80089ee:	dd02      	ble.n	80089f6 <__ssvfiscanf_r+0x28a>
 80089f0:	3301      	adds	r3, #1
 80089f2:	6023      	str	r3, [r4, #0]
 80089f4:	e7b6      	b.n	8008964 <__ssvfiscanf_r+0x1f8>
 80089f6:	4621      	mov	r1, r4
 80089f8:	4630      	mov	r0, r6
 80089fa:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80089fc:	4798      	blx	r3
 80089fe:	2800      	cmp	r0, #0
 8008a00:	d0b0      	beq.n	8008964 <__ssvfiscanf_r+0x1f8>
 8008a02:	e78d      	b.n	8008920 <__ssvfiscanf_r+0x1b4>
 8008a04:	2b04      	cmp	r3, #4
 8008a06:	dc06      	bgt.n	8008a16 <__ssvfiscanf_r+0x2aa>
 8008a08:	466b      	mov	r3, sp
 8008a0a:	4622      	mov	r2, r4
 8008a0c:	4630      	mov	r0, r6
 8008a0e:	a941      	add	r1, sp, #260	@ 0x104
 8008a10:	f000 fa0a 	bl	8008e28 <_scanf_i>
 8008a14:	e7b4      	b.n	8008980 <__ssvfiscanf_r+0x214>
 8008a16:	4b09      	ldr	r3, [pc, #36]	@ (8008a3c <__ssvfiscanf_r+0x2d0>)
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	f43f aece 	beq.w	80087ba <__ssvfiscanf_r+0x4e>
 8008a1e:	466b      	mov	r3, sp
 8008a20:	4622      	mov	r2, r4
 8008a22:	4630      	mov	r0, r6
 8008a24:	a941      	add	r1, sp, #260	@ 0x104
 8008a26:	f3af 8000 	nop.w
 8008a2a:	e7a9      	b.n	8008980 <__ssvfiscanf_r+0x214>
 8008a2c:	080086b9 	.word	0x080086b9
 8008a30:	08008733 	.word	0x08008733
 8008a34:	08009c73 	.word	0x08009c73
 8008a38:	08009d79 	.word	0x08009d79
 8008a3c:	00000000 	.word	0x00000000
 8008a40:	89a3      	ldrh	r3, [r4, #12]
 8008a42:	065b      	lsls	r3, r3, #25
 8008a44:	f53f af70 	bmi.w	8008928 <__ssvfiscanf_r+0x1bc>
 8008a48:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8008a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a50:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8008a52:	e7f9      	b.n	8008a48 <__ssvfiscanf_r+0x2dc>

08008a54 <_printf_common>:
 8008a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a58:	4616      	mov	r6, r2
 8008a5a:	4698      	mov	r8, r3
 8008a5c:	688a      	ldr	r2, [r1, #8]
 8008a5e:	690b      	ldr	r3, [r1, #16]
 8008a60:	4607      	mov	r7, r0
 8008a62:	4293      	cmp	r3, r2
 8008a64:	bfb8      	it	lt
 8008a66:	4613      	movlt	r3, r2
 8008a68:	6033      	str	r3, [r6, #0]
 8008a6a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008a6e:	460c      	mov	r4, r1
 8008a70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008a74:	b10a      	cbz	r2, 8008a7a <_printf_common+0x26>
 8008a76:	3301      	adds	r3, #1
 8008a78:	6033      	str	r3, [r6, #0]
 8008a7a:	6823      	ldr	r3, [r4, #0]
 8008a7c:	0699      	lsls	r1, r3, #26
 8008a7e:	bf42      	ittt	mi
 8008a80:	6833      	ldrmi	r3, [r6, #0]
 8008a82:	3302      	addmi	r3, #2
 8008a84:	6033      	strmi	r3, [r6, #0]
 8008a86:	6825      	ldr	r5, [r4, #0]
 8008a88:	f015 0506 	ands.w	r5, r5, #6
 8008a8c:	d106      	bne.n	8008a9c <_printf_common+0x48>
 8008a8e:	f104 0a19 	add.w	sl, r4, #25
 8008a92:	68e3      	ldr	r3, [r4, #12]
 8008a94:	6832      	ldr	r2, [r6, #0]
 8008a96:	1a9b      	subs	r3, r3, r2
 8008a98:	42ab      	cmp	r3, r5
 8008a9a:	dc2b      	bgt.n	8008af4 <_printf_common+0xa0>
 8008a9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008aa0:	6822      	ldr	r2, [r4, #0]
 8008aa2:	3b00      	subs	r3, #0
 8008aa4:	bf18      	it	ne
 8008aa6:	2301      	movne	r3, #1
 8008aa8:	0692      	lsls	r2, r2, #26
 8008aaa:	d430      	bmi.n	8008b0e <_printf_common+0xba>
 8008aac:	4641      	mov	r1, r8
 8008aae:	4638      	mov	r0, r7
 8008ab0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008ab4:	47c8      	blx	r9
 8008ab6:	3001      	adds	r0, #1
 8008ab8:	d023      	beq.n	8008b02 <_printf_common+0xae>
 8008aba:	6823      	ldr	r3, [r4, #0]
 8008abc:	6922      	ldr	r2, [r4, #16]
 8008abe:	f003 0306 	and.w	r3, r3, #6
 8008ac2:	2b04      	cmp	r3, #4
 8008ac4:	bf14      	ite	ne
 8008ac6:	2500      	movne	r5, #0
 8008ac8:	6833      	ldreq	r3, [r6, #0]
 8008aca:	f04f 0600 	mov.w	r6, #0
 8008ace:	bf08      	it	eq
 8008ad0:	68e5      	ldreq	r5, [r4, #12]
 8008ad2:	f104 041a 	add.w	r4, r4, #26
 8008ad6:	bf08      	it	eq
 8008ad8:	1aed      	subeq	r5, r5, r3
 8008ada:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008ade:	bf08      	it	eq
 8008ae0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	bfc4      	itt	gt
 8008ae8:	1a9b      	subgt	r3, r3, r2
 8008aea:	18ed      	addgt	r5, r5, r3
 8008aec:	42b5      	cmp	r5, r6
 8008aee:	d11a      	bne.n	8008b26 <_printf_common+0xd2>
 8008af0:	2000      	movs	r0, #0
 8008af2:	e008      	b.n	8008b06 <_printf_common+0xb2>
 8008af4:	2301      	movs	r3, #1
 8008af6:	4652      	mov	r2, sl
 8008af8:	4641      	mov	r1, r8
 8008afa:	4638      	mov	r0, r7
 8008afc:	47c8      	blx	r9
 8008afe:	3001      	adds	r0, #1
 8008b00:	d103      	bne.n	8008b0a <_printf_common+0xb6>
 8008b02:	f04f 30ff 	mov.w	r0, #4294967295
 8008b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b0a:	3501      	adds	r5, #1
 8008b0c:	e7c1      	b.n	8008a92 <_printf_common+0x3e>
 8008b0e:	2030      	movs	r0, #48	@ 0x30
 8008b10:	18e1      	adds	r1, r4, r3
 8008b12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008b16:	1c5a      	adds	r2, r3, #1
 8008b18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008b1c:	4422      	add	r2, r4
 8008b1e:	3302      	adds	r3, #2
 8008b20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008b24:	e7c2      	b.n	8008aac <_printf_common+0x58>
 8008b26:	2301      	movs	r3, #1
 8008b28:	4622      	mov	r2, r4
 8008b2a:	4641      	mov	r1, r8
 8008b2c:	4638      	mov	r0, r7
 8008b2e:	47c8      	blx	r9
 8008b30:	3001      	adds	r0, #1
 8008b32:	d0e6      	beq.n	8008b02 <_printf_common+0xae>
 8008b34:	3601      	adds	r6, #1
 8008b36:	e7d9      	b.n	8008aec <_printf_common+0x98>

08008b38 <_printf_i>:
 8008b38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b3c:	7e0f      	ldrb	r7, [r1, #24]
 8008b3e:	4691      	mov	r9, r2
 8008b40:	2f78      	cmp	r7, #120	@ 0x78
 8008b42:	4680      	mov	r8, r0
 8008b44:	460c      	mov	r4, r1
 8008b46:	469a      	mov	sl, r3
 8008b48:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008b4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008b4e:	d807      	bhi.n	8008b60 <_printf_i+0x28>
 8008b50:	2f62      	cmp	r7, #98	@ 0x62
 8008b52:	d80a      	bhi.n	8008b6a <_printf_i+0x32>
 8008b54:	2f00      	cmp	r7, #0
 8008b56:	f000 80d1 	beq.w	8008cfc <_printf_i+0x1c4>
 8008b5a:	2f58      	cmp	r7, #88	@ 0x58
 8008b5c:	f000 80b8 	beq.w	8008cd0 <_printf_i+0x198>
 8008b60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008b68:	e03a      	b.n	8008be0 <_printf_i+0xa8>
 8008b6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008b6e:	2b15      	cmp	r3, #21
 8008b70:	d8f6      	bhi.n	8008b60 <_printf_i+0x28>
 8008b72:	a101      	add	r1, pc, #4	@ (adr r1, 8008b78 <_printf_i+0x40>)
 8008b74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b78:	08008bd1 	.word	0x08008bd1
 8008b7c:	08008be5 	.word	0x08008be5
 8008b80:	08008b61 	.word	0x08008b61
 8008b84:	08008b61 	.word	0x08008b61
 8008b88:	08008b61 	.word	0x08008b61
 8008b8c:	08008b61 	.word	0x08008b61
 8008b90:	08008be5 	.word	0x08008be5
 8008b94:	08008b61 	.word	0x08008b61
 8008b98:	08008b61 	.word	0x08008b61
 8008b9c:	08008b61 	.word	0x08008b61
 8008ba0:	08008b61 	.word	0x08008b61
 8008ba4:	08008ce3 	.word	0x08008ce3
 8008ba8:	08008c0f 	.word	0x08008c0f
 8008bac:	08008c9d 	.word	0x08008c9d
 8008bb0:	08008b61 	.word	0x08008b61
 8008bb4:	08008b61 	.word	0x08008b61
 8008bb8:	08008d05 	.word	0x08008d05
 8008bbc:	08008b61 	.word	0x08008b61
 8008bc0:	08008c0f 	.word	0x08008c0f
 8008bc4:	08008b61 	.word	0x08008b61
 8008bc8:	08008b61 	.word	0x08008b61
 8008bcc:	08008ca5 	.word	0x08008ca5
 8008bd0:	6833      	ldr	r3, [r6, #0]
 8008bd2:	1d1a      	adds	r2, r3, #4
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	6032      	str	r2, [r6, #0]
 8008bd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008bdc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008be0:	2301      	movs	r3, #1
 8008be2:	e09c      	b.n	8008d1e <_printf_i+0x1e6>
 8008be4:	6833      	ldr	r3, [r6, #0]
 8008be6:	6820      	ldr	r0, [r4, #0]
 8008be8:	1d19      	adds	r1, r3, #4
 8008bea:	6031      	str	r1, [r6, #0]
 8008bec:	0606      	lsls	r6, r0, #24
 8008bee:	d501      	bpl.n	8008bf4 <_printf_i+0xbc>
 8008bf0:	681d      	ldr	r5, [r3, #0]
 8008bf2:	e003      	b.n	8008bfc <_printf_i+0xc4>
 8008bf4:	0645      	lsls	r5, r0, #25
 8008bf6:	d5fb      	bpl.n	8008bf0 <_printf_i+0xb8>
 8008bf8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008bfc:	2d00      	cmp	r5, #0
 8008bfe:	da03      	bge.n	8008c08 <_printf_i+0xd0>
 8008c00:	232d      	movs	r3, #45	@ 0x2d
 8008c02:	426d      	negs	r5, r5
 8008c04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c08:	230a      	movs	r3, #10
 8008c0a:	4858      	ldr	r0, [pc, #352]	@ (8008d6c <_printf_i+0x234>)
 8008c0c:	e011      	b.n	8008c32 <_printf_i+0xfa>
 8008c0e:	6821      	ldr	r1, [r4, #0]
 8008c10:	6833      	ldr	r3, [r6, #0]
 8008c12:	0608      	lsls	r0, r1, #24
 8008c14:	f853 5b04 	ldr.w	r5, [r3], #4
 8008c18:	d402      	bmi.n	8008c20 <_printf_i+0xe8>
 8008c1a:	0649      	lsls	r1, r1, #25
 8008c1c:	bf48      	it	mi
 8008c1e:	b2ad      	uxthmi	r5, r5
 8008c20:	2f6f      	cmp	r7, #111	@ 0x6f
 8008c22:	6033      	str	r3, [r6, #0]
 8008c24:	bf14      	ite	ne
 8008c26:	230a      	movne	r3, #10
 8008c28:	2308      	moveq	r3, #8
 8008c2a:	4850      	ldr	r0, [pc, #320]	@ (8008d6c <_printf_i+0x234>)
 8008c2c:	2100      	movs	r1, #0
 8008c2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008c32:	6866      	ldr	r6, [r4, #4]
 8008c34:	2e00      	cmp	r6, #0
 8008c36:	60a6      	str	r6, [r4, #8]
 8008c38:	db05      	blt.n	8008c46 <_printf_i+0x10e>
 8008c3a:	6821      	ldr	r1, [r4, #0]
 8008c3c:	432e      	orrs	r6, r5
 8008c3e:	f021 0104 	bic.w	r1, r1, #4
 8008c42:	6021      	str	r1, [r4, #0]
 8008c44:	d04b      	beq.n	8008cde <_printf_i+0x1a6>
 8008c46:	4616      	mov	r6, r2
 8008c48:	fbb5 f1f3 	udiv	r1, r5, r3
 8008c4c:	fb03 5711 	mls	r7, r3, r1, r5
 8008c50:	5dc7      	ldrb	r7, [r0, r7]
 8008c52:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008c56:	462f      	mov	r7, r5
 8008c58:	42bb      	cmp	r3, r7
 8008c5a:	460d      	mov	r5, r1
 8008c5c:	d9f4      	bls.n	8008c48 <_printf_i+0x110>
 8008c5e:	2b08      	cmp	r3, #8
 8008c60:	d10b      	bne.n	8008c7a <_printf_i+0x142>
 8008c62:	6823      	ldr	r3, [r4, #0]
 8008c64:	07df      	lsls	r7, r3, #31
 8008c66:	d508      	bpl.n	8008c7a <_printf_i+0x142>
 8008c68:	6923      	ldr	r3, [r4, #16]
 8008c6a:	6861      	ldr	r1, [r4, #4]
 8008c6c:	4299      	cmp	r1, r3
 8008c6e:	bfde      	ittt	le
 8008c70:	2330      	movle	r3, #48	@ 0x30
 8008c72:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008c76:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008c7a:	1b92      	subs	r2, r2, r6
 8008c7c:	6122      	str	r2, [r4, #16]
 8008c7e:	464b      	mov	r3, r9
 8008c80:	4621      	mov	r1, r4
 8008c82:	4640      	mov	r0, r8
 8008c84:	f8cd a000 	str.w	sl, [sp]
 8008c88:	aa03      	add	r2, sp, #12
 8008c8a:	f7ff fee3 	bl	8008a54 <_printf_common>
 8008c8e:	3001      	adds	r0, #1
 8008c90:	d14a      	bne.n	8008d28 <_printf_i+0x1f0>
 8008c92:	f04f 30ff 	mov.w	r0, #4294967295
 8008c96:	b004      	add	sp, #16
 8008c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c9c:	6823      	ldr	r3, [r4, #0]
 8008c9e:	f043 0320 	orr.w	r3, r3, #32
 8008ca2:	6023      	str	r3, [r4, #0]
 8008ca4:	2778      	movs	r7, #120	@ 0x78
 8008ca6:	4832      	ldr	r0, [pc, #200]	@ (8008d70 <_printf_i+0x238>)
 8008ca8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008cac:	6823      	ldr	r3, [r4, #0]
 8008cae:	6831      	ldr	r1, [r6, #0]
 8008cb0:	061f      	lsls	r7, r3, #24
 8008cb2:	f851 5b04 	ldr.w	r5, [r1], #4
 8008cb6:	d402      	bmi.n	8008cbe <_printf_i+0x186>
 8008cb8:	065f      	lsls	r7, r3, #25
 8008cba:	bf48      	it	mi
 8008cbc:	b2ad      	uxthmi	r5, r5
 8008cbe:	6031      	str	r1, [r6, #0]
 8008cc0:	07d9      	lsls	r1, r3, #31
 8008cc2:	bf44      	itt	mi
 8008cc4:	f043 0320 	orrmi.w	r3, r3, #32
 8008cc8:	6023      	strmi	r3, [r4, #0]
 8008cca:	b11d      	cbz	r5, 8008cd4 <_printf_i+0x19c>
 8008ccc:	2310      	movs	r3, #16
 8008cce:	e7ad      	b.n	8008c2c <_printf_i+0xf4>
 8008cd0:	4826      	ldr	r0, [pc, #152]	@ (8008d6c <_printf_i+0x234>)
 8008cd2:	e7e9      	b.n	8008ca8 <_printf_i+0x170>
 8008cd4:	6823      	ldr	r3, [r4, #0]
 8008cd6:	f023 0320 	bic.w	r3, r3, #32
 8008cda:	6023      	str	r3, [r4, #0]
 8008cdc:	e7f6      	b.n	8008ccc <_printf_i+0x194>
 8008cde:	4616      	mov	r6, r2
 8008ce0:	e7bd      	b.n	8008c5e <_printf_i+0x126>
 8008ce2:	6833      	ldr	r3, [r6, #0]
 8008ce4:	6825      	ldr	r5, [r4, #0]
 8008ce6:	1d18      	adds	r0, r3, #4
 8008ce8:	6961      	ldr	r1, [r4, #20]
 8008cea:	6030      	str	r0, [r6, #0]
 8008cec:	062e      	lsls	r6, r5, #24
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	d501      	bpl.n	8008cf6 <_printf_i+0x1be>
 8008cf2:	6019      	str	r1, [r3, #0]
 8008cf4:	e002      	b.n	8008cfc <_printf_i+0x1c4>
 8008cf6:	0668      	lsls	r0, r5, #25
 8008cf8:	d5fb      	bpl.n	8008cf2 <_printf_i+0x1ba>
 8008cfa:	8019      	strh	r1, [r3, #0]
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	4616      	mov	r6, r2
 8008d00:	6123      	str	r3, [r4, #16]
 8008d02:	e7bc      	b.n	8008c7e <_printf_i+0x146>
 8008d04:	6833      	ldr	r3, [r6, #0]
 8008d06:	2100      	movs	r1, #0
 8008d08:	1d1a      	adds	r2, r3, #4
 8008d0a:	6032      	str	r2, [r6, #0]
 8008d0c:	681e      	ldr	r6, [r3, #0]
 8008d0e:	6862      	ldr	r2, [r4, #4]
 8008d10:	4630      	mov	r0, r6
 8008d12:	f000 fa17 	bl	8009144 <memchr>
 8008d16:	b108      	cbz	r0, 8008d1c <_printf_i+0x1e4>
 8008d18:	1b80      	subs	r0, r0, r6
 8008d1a:	6060      	str	r0, [r4, #4]
 8008d1c:	6863      	ldr	r3, [r4, #4]
 8008d1e:	6123      	str	r3, [r4, #16]
 8008d20:	2300      	movs	r3, #0
 8008d22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d26:	e7aa      	b.n	8008c7e <_printf_i+0x146>
 8008d28:	4632      	mov	r2, r6
 8008d2a:	4649      	mov	r1, r9
 8008d2c:	4640      	mov	r0, r8
 8008d2e:	6923      	ldr	r3, [r4, #16]
 8008d30:	47d0      	blx	sl
 8008d32:	3001      	adds	r0, #1
 8008d34:	d0ad      	beq.n	8008c92 <_printf_i+0x15a>
 8008d36:	6823      	ldr	r3, [r4, #0]
 8008d38:	079b      	lsls	r3, r3, #30
 8008d3a:	d413      	bmi.n	8008d64 <_printf_i+0x22c>
 8008d3c:	68e0      	ldr	r0, [r4, #12]
 8008d3e:	9b03      	ldr	r3, [sp, #12]
 8008d40:	4298      	cmp	r0, r3
 8008d42:	bfb8      	it	lt
 8008d44:	4618      	movlt	r0, r3
 8008d46:	e7a6      	b.n	8008c96 <_printf_i+0x15e>
 8008d48:	2301      	movs	r3, #1
 8008d4a:	4632      	mov	r2, r6
 8008d4c:	4649      	mov	r1, r9
 8008d4e:	4640      	mov	r0, r8
 8008d50:	47d0      	blx	sl
 8008d52:	3001      	adds	r0, #1
 8008d54:	d09d      	beq.n	8008c92 <_printf_i+0x15a>
 8008d56:	3501      	adds	r5, #1
 8008d58:	68e3      	ldr	r3, [r4, #12]
 8008d5a:	9903      	ldr	r1, [sp, #12]
 8008d5c:	1a5b      	subs	r3, r3, r1
 8008d5e:	42ab      	cmp	r3, r5
 8008d60:	dcf2      	bgt.n	8008d48 <_printf_i+0x210>
 8008d62:	e7eb      	b.n	8008d3c <_printf_i+0x204>
 8008d64:	2500      	movs	r5, #0
 8008d66:	f104 0619 	add.w	r6, r4, #25
 8008d6a:	e7f5      	b.n	8008d58 <_printf_i+0x220>
 8008d6c:	08009d84 	.word	0x08009d84
 8008d70:	08009d95 	.word	0x08009d95

08008d74 <_scanf_chars>:
 8008d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d78:	4615      	mov	r5, r2
 8008d7a:	688a      	ldr	r2, [r1, #8]
 8008d7c:	4680      	mov	r8, r0
 8008d7e:	460c      	mov	r4, r1
 8008d80:	b932      	cbnz	r2, 8008d90 <_scanf_chars+0x1c>
 8008d82:	698a      	ldr	r2, [r1, #24]
 8008d84:	2a00      	cmp	r2, #0
 8008d86:	bf14      	ite	ne
 8008d88:	f04f 32ff 	movne.w	r2, #4294967295
 8008d8c:	2201      	moveq	r2, #1
 8008d8e:	608a      	str	r2, [r1, #8]
 8008d90:	2700      	movs	r7, #0
 8008d92:	6822      	ldr	r2, [r4, #0]
 8008d94:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8008e24 <_scanf_chars+0xb0>
 8008d98:	06d1      	lsls	r1, r2, #27
 8008d9a:	bf5f      	itttt	pl
 8008d9c:	681a      	ldrpl	r2, [r3, #0]
 8008d9e:	1d11      	addpl	r1, r2, #4
 8008da0:	6019      	strpl	r1, [r3, #0]
 8008da2:	6816      	ldrpl	r6, [r2, #0]
 8008da4:	69a0      	ldr	r0, [r4, #24]
 8008da6:	b188      	cbz	r0, 8008dcc <_scanf_chars+0x58>
 8008da8:	2801      	cmp	r0, #1
 8008daa:	d107      	bne.n	8008dbc <_scanf_chars+0x48>
 8008dac:	682b      	ldr	r3, [r5, #0]
 8008dae:	781a      	ldrb	r2, [r3, #0]
 8008db0:	6963      	ldr	r3, [r4, #20]
 8008db2:	5c9b      	ldrb	r3, [r3, r2]
 8008db4:	b953      	cbnz	r3, 8008dcc <_scanf_chars+0x58>
 8008db6:	2f00      	cmp	r7, #0
 8008db8:	d031      	beq.n	8008e1e <_scanf_chars+0xaa>
 8008dba:	e022      	b.n	8008e02 <_scanf_chars+0x8e>
 8008dbc:	2802      	cmp	r0, #2
 8008dbe:	d120      	bne.n	8008e02 <_scanf_chars+0x8e>
 8008dc0:	682b      	ldr	r3, [r5, #0]
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	f819 3003 	ldrb.w	r3, [r9, r3]
 8008dc8:	071b      	lsls	r3, r3, #28
 8008dca:	d41a      	bmi.n	8008e02 <_scanf_chars+0x8e>
 8008dcc:	6823      	ldr	r3, [r4, #0]
 8008dce:	3701      	adds	r7, #1
 8008dd0:	06da      	lsls	r2, r3, #27
 8008dd2:	bf5e      	ittt	pl
 8008dd4:	682b      	ldrpl	r3, [r5, #0]
 8008dd6:	781b      	ldrbpl	r3, [r3, #0]
 8008dd8:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008ddc:	682a      	ldr	r2, [r5, #0]
 8008dde:	686b      	ldr	r3, [r5, #4]
 8008de0:	3201      	adds	r2, #1
 8008de2:	602a      	str	r2, [r5, #0]
 8008de4:	68a2      	ldr	r2, [r4, #8]
 8008de6:	3b01      	subs	r3, #1
 8008de8:	3a01      	subs	r2, #1
 8008dea:	606b      	str	r3, [r5, #4]
 8008dec:	60a2      	str	r2, [r4, #8]
 8008dee:	b142      	cbz	r2, 8008e02 <_scanf_chars+0x8e>
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	dcd7      	bgt.n	8008da4 <_scanf_chars+0x30>
 8008df4:	4629      	mov	r1, r5
 8008df6:	4640      	mov	r0, r8
 8008df8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008dfc:	4798      	blx	r3
 8008dfe:	2800      	cmp	r0, #0
 8008e00:	d0d0      	beq.n	8008da4 <_scanf_chars+0x30>
 8008e02:	6823      	ldr	r3, [r4, #0]
 8008e04:	f013 0310 	ands.w	r3, r3, #16
 8008e08:	d105      	bne.n	8008e16 <_scanf_chars+0xa2>
 8008e0a:	68e2      	ldr	r2, [r4, #12]
 8008e0c:	3201      	adds	r2, #1
 8008e0e:	60e2      	str	r2, [r4, #12]
 8008e10:	69a2      	ldr	r2, [r4, #24]
 8008e12:	b102      	cbz	r2, 8008e16 <_scanf_chars+0xa2>
 8008e14:	7033      	strb	r3, [r6, #0]
 8008e16:	2000      	movs	r0, #0
 8008e18:	6923      	ldr	r3, [r4, #16]
 8008e1a:	443b      	add	r3, r7
 8008e1c:	6123      	str	r3, [r4, #16]
 8008e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e22:	bf00      	nop
 8008e24:	08009c73 	.word	0x08009c73

08008e28 <_scanf_i>:
 8008e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e2c:	460c      	mov	r4, r1
 8008e2e:	4698      	mov	r8, r3
 8008e30:	4b72      	ldr	r3, [pc, #456]	@ (8008ffc <_scanf_i+0x1d4>)
 8008e32:	b087      	sub	sp, #28
 8008e34:	4682      	mov	sl, r0
 8008e36:	4616      	mov	r6, r2
 8008e38:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008e3c:	ab03      	add	r3, sp, #12
 8008e3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008e42:	4b6f      	ldr	r3, [pc, #444]	@ (8009000 <_scanf_i+0x1d8>)
 8008e44:	69a1      	ldr	r1, [r4, #24]
 8008e46:	4a6f      	ldr	r2, [pc, #444]	@ (8009004 <_scanf_i+0x1dc>)
 8008e48:	4627      	mov	r7, r4
 8008e4a:	2903      	cmp	r1, #3
 8008e4c:	bf08      	it	eq
 8008e4e:	461a      	moveq	r2, r3
 8008e50:	68a3      	ldr	r3, [r4, #8]
 8008e52:	9201      	str	r2, [sp, #4]
 8008e54:	1e5a      	subs	r2, r3, #1
 8008e56:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008e5a:	bf81      	itttt	hi
 8008e5c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008e60:	eb03 0905 	addhi.w	r9, r3, r5
 8008e64:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008e68:	60a3      	strhi	r3, [r4, #8]
 8008e6a:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008e6e:	bf98      	it	ls
 8008e70:	f04f 0900 	movls.w	r9, #0
 8008e74:	463d      	mov	r5, r7
 8008e76:	f04f 0b00 	mov.w	fp, #0
 8008e7a:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8008e7e:	6023      	str	r3, [r4, #0]
 8008e80:	6831      	ldr	r1, [r6, #0]
 8008e82:	ab03      	add	r3, sp, #12
 8008e84:	2202      	movs	r2, #2
 8008e86:	7809      	ldrb	r1, [r1, #0]
 8008e88:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008e8c:	f000 f95a 	bl	8009144 <memchr>
 8008e90:	b328      	cbz	r0, 8008ede <_scanf_i+0xb6>
 8008e92:	f1bb 0f01 	cmp.w	fp, #1
 8008e96:	d159      	bne.n	8008f4c <_scanf_i+0x124>
 8008e98:	6862      	ldr	r2, [r4, #4]
 8008e9a:	b92a      	cbnz	r2, 8008ea8 <_scanf_i+0x80>
 8008e9c:	2108      	movs	r1, #8
 8008e9e:	6822      	ldr	r2, [r4, #0]
 8008ea0:	6061      	str	r1, [r4, #4]
 8008ea2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008ea6:	6022      	str	r2, [r4, #0]
 8008ea8:	6822      	ldr	r2, [r4, #0]
 8008eaa:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8008eae:	6022      	str	r2, [r4, #0]
 8008eb0:	68a2      	ldr	r2, [r4, #8]
 8008eb2:	1e51      	subs	r1, r2, #1
 8008eb4:	60a1      	str	r1, [r4, #8]
 8008eb6:	b192      	cbz	r2, 8008ede <_scanf_i+0xb6>
 8008eb8:	6832      	ldr	r2, [r6, #0]
 8008eba:	1c51      	adds	r1, r2, #1
 8008ebc:	6031      	str	r1, [r6, #0]
 8008ebe:	7812      	ldrb	r2, [r2, #0]
 8008ec0:	f805 2b01 	strb.w	r2, [r5], #1
 8008ec4:	6872      	ldr	r2, [r6, #4]
 8008ec6:	3a01      	subs	r2, #1
 8008ec8:	2a00      	cmp	r2, #0
 8008eca:	6072      	str	r2, [r6, #4]
 8008ecc:	dc07      	bgt.n	8008ede <_scanf_i+0xb6>
 8008ece:	4631      	mov	r1, r6
 8008ed0:	4650      	mov	r0, sl
 8008ed2:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8008ed6:	4790      	blx	r2
 8008ed8:	2800      	cmp	r0, #0
 8008eda:	f040 8085 	bne.w	8008fe8 <_scanf_i+0x1c0>
 8008ede:	f10b 0b01 	add.w	fp, fp, #1
 8008ee2:	f1bb 0f03 	cmp.w	fp, #3
 8008ee6:	d1cb      	bne.n	8008e80 <_scanf_i+0x58>
 8008ee8:	6863      	ldr	r3, [r4, #4]
 8008eea:	b90b      	cbnz	r3, 8008ef0 <_scanf_i+0xc8>
 8008eec:	230a      	movs	r3, #10
 8008eee:	6063      	str	r3, [r4, #4]
 8008ef0:	6863      	ldr	r3, [r4, #4]
 8008ef2:	4945      	ldr	r1, [pc, #276]	@ (8009008 <_scanf_i+0x1e0>)
 8008ef4:	6960      	ldr	r0, [r4, #20]
 8008ef6:	1ac9      	subs	r1, r1, r3
 8008ef8:	f000 f888 	bl	800900c <__sccl>
 8008efc:	f04f 0b00 	mov.w	fp, #0
 8008f00:	68a3      	ldr	r3, [r4, #8]
 8008f02:	6822      	ldr	r2, [r4, #0]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d03d      	beq.n	8008f84 <_scanf_i+0x15c>
 8008f08:	6831      	ldr	r1, [r6, #0]
 8008f0a:	6960      	ldr	r0, [r4, #20]
 8008f0c:	f891 c000 	ldrb.w	ip, [r1]
 8008f10:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008f14:	2800      	cmp	r0, #0
 8008f16:	d035      	beq.n	8008f84 <_scanf_i+0x15c>
 8008f18:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8008f1c:	d124      	bne.n	8008f68 <_scanf_i+0x140>
 8008f1e:	0510      	lsls	r0, r2, #20
 8008f20:	d522      	bpl.n	8008f68 <_scanf_i+0x140>
 8008f22:	f10b 0b01 	add.w	fp, fp, #1
 8008f26:	f1b9 0f00 	cmp.w	r9, #0
 8008f2a:	d003      	beq.n	8008f34 <_scanf_i+0x10c>
 8008f2c:	3301      	adds	r3, #1
 8008f2e:	f109 39ff 	add.w	r9, r9, #4294967295
 8008f32:	60a3      	str	r3, [r4, #8]
 8008f34:	6873      	ldr	r3, [r6, #4]
 8008f36:	3b01      	subs	r3, #1
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	6073      	str	r3, [r6, #4]
 8008f3c:	dd1b      	ble.n	8008f76 <_scanf_i+0x14e>
 8008f3e:	6833      	ldr	r3, [r6, #0]
 8008f40:	3301      	adds	r3, #1
 8008f42:	6033      	str	r3, [r6, #0]
 8008f44:	68a3      	ldr	r3, [r4, #8]
 8008f46:	3b01      	subs	r3, #1
 8008f48:	60a3      	str	r3, [r4, #8]
 8008f4a:	e7d9      	b.n	8008f00 <_scanf_i+0xd8>
 8008f4c:	f1bb 0f02 	cmp.w	fp, #2
 8008f50:	d1ae      	bne.n	8008eb0 <_scanf_i+0x88>
 8008f52:	6822      	ldr	r2, [r4, #0]
 8008f54:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8008f58:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8008f5c:	d1c4      	bne.n	8008ee8 <_scanf_i+0xc0>
 8008f5e:	2110      	movs	r1, #16
 8008f60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008f64:	6061      	str	r1, [r4, #4]
 8008f66:	e7a2      	b.n	8008eae <_scanf_i+0x86>
 8008f68:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8008f6c:	6022      	str	r2, [r4, #0]
 8008f6e:	780b      	ldrb	r3, [r1, #0]
 8008f70:	f805 3b01 	strb.w	r3, [r5], #1
 8008f74:	e7de      	b.n	8008f34 <_scanf_i+0x10c>
 8008f76:	4631      	mov	r1, r6
 8008f78:	4650      	mov	r0, sl
 8008f7a:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008f7e:	4798      	blx	r3
 8008f80:	2800      	cmp	r0, #0
 8008f82:	d0df      	beq.n	8008f44 <_scanf_i+0x11c>
 8008f84:	6823      	ldr	r3, [r4, #0]
 8008f86:	05d9      	lsls	r1, r3, #23
 8008f88:	d50d      	bpl.n	8008fa6 <_scanf_i+0x17e>
 8008f8a:	42bd      	cmp	r5, r7
 8008f8c:	d909      	bls.n	8008fa2 <_scanf_i+0x17a>
 8008f8e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008f92:	4632      	mov	r2, r6
 8008f94:	4650      	mov	r0, sl
 8008f96:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008f9a:	f105 39ff 	add.w	r9, r5, #4294967295
 8008f9e:	4798      	blx	r3
 8008fa0:	464d      	mov	r5, r9
 8008fa2:	42bd      	cmp	r5, r7
 8008fa4:	d028      	beq.n	8008ff8 <_scanf_i+0x1d0>
 8008fa6:	6822      	ldr	r2, [r4, #0]
 8008fa8:	f012 0210 	ands.w	r2, r2, #16
 8008fac:	d113      	bne.n	8008fd6 <_scanf_i+0x1ae>
 8008fae:	702a      	strb	r2, [r5, #0]
 8008fb0:	4639      	mov	r1, r7
 8008fb2:	6863      	ldr	r3, [r4, #4]
 8008fb4:	4650      	mov	r0, sl
 8008fb6:	9e01      	ldr	r6, [sp, #4]
 8008fb8:	47b0      	blx	r6
 8008fba:	f8d8 3000 	ldr.w	r3, [r8]
 8008fbe:	6821      	ldr	r1, [r4, #0]
 8008fc0:	1d1a      	adds	r2, r3, #4
 8008fc2:	f8c8 2000 	str.w	r2, [r8]
 8008fc6:	f011 0f20 	tst.w	r1, #32
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	d00f      	beq.n	8008fee <_scanf_i+0x1c6>
 8008fce:	6018      	str	r0, [r3, #0]
 8008fd0:	68e3      	ldr	r3, [r4, #12]
 8008fd2:	3301      	adds	r3, #1
 8008fd4:	60e3      	str	r3, [r4, #12]
 8008fd6:	2000      	movs	r0, #0
 8008fd8:	6923      	ldr	r3, [r4, #16]
 8008fda:	1bed      	subs	r5, r5, r7
 8008fdc:	445d      	add	r5, fp
 8008fde:	442b      	add	r3, r5
 8008fe0:	6123      	str	r3, [r4, #16]
 8008fe2:	b007      	add	sp, #28
 8008fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fe8:	f04f 0b00 	mov.w	fp, #0
 8008fec:	e7ca      	b.n	8008f84 <_scanf_i+0x15c>
 8008fee:	07ca      	lsls	r2, r1, #31
 8008ff0:	bf4c      	ite	mi
 8008ff2:	8018      	strhmi	r0, [r3, #0]
 8008ff4:	6018      	strpl	r0, [r3, #0]
 8008ff6:	e7eb      	b.n	8008fd0 <_scanf_i+0x1a8>
 8008ff8:	2001      	movs	r0, #1
 8008ffa:	e7f2      	b.n	8008fe2 <_scanf_i+0x1ba>
 8008ffc:	08009c0c 	.word	0x08009c0c
 8009000:	08008045 	.word	0x08008045
 8009004:	080092b5 	.word	0x080092b5
 8009008:	08009db6 	.word	0x08009db6

0800900c <__sccl>:
 800900c:	b570      	push	{r4, r5, r6, lr}
 800900e:	780b      	ldrb	r3, [r1, #0]
 8009010:	4604      	mov	r4, r0
 8009012:	2b5e      	cmp	r3, #94	@ 0x5e
 8009014:	bf0b      	itete	eq
 8009016:	784b      	ldrbeq	r3, [r1, #1]
 8009018:	1c4a      	addne	r2, r1, #1
 800901a:	1c8a      	addeq	r2, r1, #2
 800901c:	2100      	movne	r1, #0
 800901e:	bf08      	it	eq
 8009020:	2101      	moveq	r1, #1
 8009022:	3801      	subs	r0, #1
 8009024:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8009028:	f800 1f01 	strb.w	r1, [r0, #1]!
 800902c:	42a8      	cmp	r0, r5
 800902e:	d1fb      	bne.n	8009028 <__sccl+0x1c>
 8009030:	b90b      	cbnz	r3, 8009036 <__sccl+0x2a>
 8009032:	1e50      	subs	r0, r2, #1
 8009034:	bd70      	pop	{r4, r5, r6, pc}
 8009036:	f081 0101 	eor.w	r1, r1, #1
 800903a:	4610      	mov	r0, r2
 800903c:	54e1      	strb	r1, [r4, r3]
 800903e:	4602      	mov	r2, r0
 8009040:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009044:	2d2d      	cmp	r5, #45	@ 0x2d
 8009046:	d005      	beq.n	8009054 <__sccl+0x48>
 8009048:	2d5d      	cmp	r5, #93	@ 0x5d
 800904a:	d016      	beq.n	800907a <__sccl+0x6e>
 800904c:	2d00      	cmp	r5, #0
 800904e:	d0f1      	beq.n	8009034 <__sccl+0x28>
 8009050:	462b      	mov	r3, r5
 8009052:	e7f2      	b.n	800903a <__sccl+0x2e>
 8009054:	7846      	ldrb	r6, [r0, #1]
 8009056:	2e5d      	cmp	r6, #93	@ 0x5d
 8009058:	d0fa      	beq.n	8009050 <__sccl+0x44>
 800905a:	42b3      	cmp	r3, r6
 800905c:	dcf8      	bgt.n	8009050 <__sccl+0x44>
 800905e:	461a      	mov	r2, r3
 8009060:	3002      	adds	r0, #2
 8009062:	3201      	adds	r2, #1
 8009064:	4296      	cmp	r6, r2
 8009066:	54a1      	strb	r1, [r4, r2]
 8009068:	dcfb      	bgt.n	8009062 <__sccl+0x56>
 800906a:	1af2      	subs	r2, r6, r3
 800906c:	3a01      	subs	r2, #1
 800906e:	42b3      	cmp	r3, r6
 8009070:	bfa8      	it	ge
 8009072:	2200      	movge	r2, #0
 8009074:	1c5d      	adds	r5, r3, #1
 8009076:	18ab      	adds	r3, r5, r2
 8009078:	e7e1      	b.n	800903e <__sccl+0x32>
 800907a:	4610      	mov	r0, r2
 800907c:	e7da      	b.n	8009034 <__sccl+0x28>

0800907e <__submore>:
 800907e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009082:	460c      	mov	r4, r1
 8009084:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009086:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800908a:	4299      	cmp	r1, r3
 800908c:	d11b      	bne.n	80090c6 <__submore+0x48>
 800908e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009092:	f7ff f92d 	bl	80082f0 <_malloc_r>
 8009096:	b918      	cbnz	r0, 80090a0 <__submore+0x22>
 8009098:	f04f 30ff 	mov.w	r0, #4294967295
 800909c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80090a4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80090a6:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80090aa:	6360      	str	r0, [r4, #52]	@ 0x34
 80090ac:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80090b0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80090b4:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80090b8:	7043      	strb	r3, [r0, #1]
 80090ba:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80090be:	7003      	strb	r3, [r0, #0]
 80090c0:	6020      	str	r0, [r4, #0]
 80090c2:	2000      	movs	r0, #0
 80090c4:	e7ea      	b.n	800909c <__submore+0x1e>
 80090c6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80090c8:	0077      	lsls	r7, r6, #1
 80090ca:	463a      	mov	r2, r7
 80090cc:	f000 f856 	bl	800917c <_realloc_r>
 80090d0:	4605      	mov	r5, r0
 80090d2:	2800      	cmp	r0, #0
 80090d4:	d0e0      	beq.n	8009098 <__submore+0x1a>
 80090d6:	eb00 0806 	add.w	r8, r0, r6
 80090da:	4601      	mov	r1, r0
 80090dc:	4632      	mov	r2, r6
 80090de:	4640      	mov	r0, r8
 80090e0:	f000 f83e 	bl	8009160 <memcpy>
 80090e4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80090e8:	f8c4 8000 	str.w	r8, [r4]
 80090ec:	e7e9      	b.n	80090c2 <__submore+0x44>

080090ee <memmove>:
 80090ee:	4288      	cmp	r0, r1
 80090f0:	b510      	push	{r4, lr}
 80090f2:	eb01 0402 	add.w	r4, r1, r2
 80090f6:	d902      	bls.n	80090fe <memmove+0x10>
 80090f8:	4284      	cmp	r4, r0
 80090fa:	4623      	mov	r3, r4
 80090fc:	d807      	bhi.n	800910e <memmove+0x20>
 80090fe:	1e43      	subs	r3, r0, #1
 8009100:	42a1      	cmp	r1, r4
 8009102:	d008      	beq.n	8009116 <memmove+0x28>
 8009104:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009108:	f803 2f01 	strb.w	r2, [r3, #1]!
 800910c:	e7f8      	b.n	8009100 <memmove+0x12>
 800910e:	4601      	mov	r1, r0
 8009110:	4402      	add	r2, r0
 8009112:	428a      	cmp	r2, r1
 8009114:	d100      	bne.n	8009118 <memmove+0x2a>
 8009116:	bd10      	pop	{r4, pc}
 8009118:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800911c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009120:	e7f7      	b.n	8009112 <memmove+0x24>
	...

08009124 <_sbrk_r>:
 8009124:	b538      	push	{r3, r4, r5, lr}
 8009126:	2300      	movs	r3, #0
 8009128:	4d05      	ldr	r5, [pc, #20]	@ (8009140 <_sbrk_r+0x1c>)
 800912a:	4604      	mov	r4, r0
 800912c:	4608      	mov	r0, r1
 800912e:	602b      	str	r3, [r5, #0]
 8009130:	f7fa fee4 	bl	8003efc <_sbrk>
 8009134:	1c43      	adds	r3, r0, #1
 8009136:	d102      	bne.n	800913e <_sbrk_r+0x1a>
 8009138:	682b      	ldr	r3, [r5, #0]
 800913a:	b103      	cbz	r3, 800913e <_sbrk_r+0x1a>
 800913c:	6023      	str	r3, [r4, #0]
 800913e:	bd38      	pop	{r3, r4, r5, pc}
 8009140:	20000558 	.word	0x20000558

08009144 <memchr>:
 8009144:	4603      	mov	r3, r0
 8009146:	b510      	push	{r4, lr}
 8009148:	b2c9      	uxtb	r1, r1
 800914a:	4402      	add	r2, r0
 800914c:	4293      	cmp	r3, r2
 800914e:	4618      	mov	r0, r3
 8009150:	d101      	bne.n	8009156 <memchr+0x12>
 8009152:	2000      	movs	r0, #0
 8009154:	e003      	b.n	800915e <memchr+0x1a>
 8009156:	7804      	ldrb	r4, [r0, #0]
 8009158:	3301      	adds	r3, #1
 800915a:	428c      	cmp	r4, r1
 800915c:	d1f6      	bne.n	800914c <memchr+0x8>
 800915e:	bd10      	pop	{r4, pc}

08009160 <memcpy>:
 8009160:	440a      	add	r2, r1
 8009162:	4291      	cmp	r1, r2
 8009164:	f100 33ff 	add.w	r3, r0, #4294967295
 8009168:	d100      	bne.n	800916c <memcpy+0xc>
 800916a:	4770      	bx	lr
 800916c:	b510      	push	{r4, lr}
 800916e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009172:	4291      	cmp	r1, r2
 8009174:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009178:	d1f9      	bne.n	800916e <memcpy+0xe>
 800917a:	bd10      	pop	{r4, pc}

0800917c <_realloc_r>:
 800917c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009180:	4607      	mov	r7, r0
 8009182:	4614      	mov	r4, r2
 8009184:	460d      	mov	r5, r1
 8009186:	b921      	cbnz	r1, 8009192 <_realloc_r+0x16>
 8009188:	4611      	mov	r1, r2
 800918a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800918e:	f7ff b8af 	b.w	80082f0 <_malloc_r>
 8009192:	b92a      	cbnz	r2, 80091a0 <_realloc_r+0x24>
 8009194:	f7ff f842 	bl	800821c <_free_r>
 8009198:	4625      	mov	r5, r4
 800919a:	4628      	mov	r0, r5
 800919c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091a0:	f000 f88a 	bl	80092b8 <_malloc_usable_size_r>
 80091a4:	4284      	cmp	r4, r0
 80091a6:	4606      	mov	r6, r0
 80091a8:	d802      	bhi.n	80091b0 <_realloc_r+0x34>
 80091aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80091ae:	d8f4      	bhi.n	800919a <_realloc_r+0x1e>
 80091b0:	4621      	mov	r1, r4
 80091b2:	4638      	mov	r0, r7
 80091b4:	f7ff f89c 	bl	80082f0 <_malloc_r>
 80091b8:	4680      	mov	r8, r0
 80091ba:	b908      	cbnz	r0, 80091c0 <_realloc_r+0x44>
 80091bc:	4645      	mov	r5, r8
 80091be:	e7ec      	b.n	800919a <_realloc_r+0x1e>
 80091c0:	42b4      	cmp	r4, r6
 80091c2:	4622      	mov	r2, r4
 80091c4:	4629      	mov	r1, r5
 80091c6:	bf28      	it	cs
 80091c8:	4632      	movcs	r2, r6
 80091ca:	f7ff ffc9 	bl	8009160 <memcpy>
 80091ce:	4629      	mov	r1, r5
 80091d0:	4638      	mov	r0, r7
 80091d2:	f7ff f823 	bl	800821c <_free_r>
 80091d6:	e7f1      	b.n	80091bc <_realloc_r+0x40>

080091d8 <_strtoul_l.isra.0>:
 80091d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80091dc:	4686      	mov	lr, r0
 80091de:	460d      	mov	r5, r1
 80091e0:	4e33      	ldr	r6, [pc, #204]	@ (80092b0 <_strtoul_l.isra.0+0xd8>)
 80091e2:	4628      	mov	r0, r5
 80091e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80091e8:	5d37      	ldrb	r7, [r6, r4]
 80091ea:	f017 0708 	ands.w	r7, r7, #8
 80091ee:	d1f8      	bne.n	80091e2 <_strtoul_l.isra.0+0xa>
 80091f0:	2c2d      	cmp	r4, #45	@ 0x2d
 80091f2:	d110      	bne.n	8009216 <_strtoul_l.isra.0+0x3e>
 80091f4:	2701      	movs	r7, #1
 80091f6:	782c      	ldrb	r4, [r5, #0]
 80091f8:	1c85      	adds	r5, r0, #2
 80091fa:	f033 0010 	bics.w	r0, r3, #16
 80091fe:	d115      	bne.n	800922c <_strtoul_l.isra.0+0x54>
 8009200:	2c30      	cmp	r4, #48	@ 0x30
 8009202:	d10d      	bne.n	8009220 <_strtoul_l.isra.0+0x48>
 8009204:	7828      	ldrb	r0, [r5, #0]
 8009206:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800920a:	2858      	cmp	r0, #88	@ 0x58
 800920c:	d108      	bne.n	8009220 <_strtoul_l.isra.0+0x48>
 800920e:	786c      	ldrb	r4, [r5, #1]
 8009210:	3502      	adds	r5, #2
 8009212:	2310      	movs	r3, #16
 8009214:	e00a      	b.n	800922c <_strtoul_l.isra.0+0x54>
 8009216:	2c2b      	cmp	r4, #43	@ 0x2b
 8009218:	bf04      	itt	eq
 800921a:	782c      	ldrbeq	r4, [r5, #0]
 800921c:	1c85      	addeq	r5, r0, #2
 800921e:	e7ec      	b.n	80091fa <_strtoul_l.isra.0+0x22>
 8009220:	2b00      	cmp	r3, #0
 8009222:	d1f6      	bne.n	8009212 <_strtoul_l.isra.0+0x3a>
 8009224:	2c30      	cmp	r4, #48	@ 0x30
 8009226:	bf14      	ite	ne
 8009228:	230a      	movne	r3, #10
 800922a:	2308      	moveq	r3, #8
 800922c:	f04f 38ff 	mov.w	r8, #4294967295
 8009230:	fbb8 f8f3 	udiv	r8, r8, r3
 8009234:	2600      	movs	r6, #0
 8009236:	fb03 f908 	mul.w	r9, r3, r8
 800923a:	4630      	mov	r0, r6
 800923c:	ea6f 0909 	mvn.w	r9, r9
 8009240:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8009244:	f1bc 0f09 	cmp.w	ip, #9
 8009248:	d810      	bhi.n	800926c <_strtoul_l.isra.0+0x94>
 800924a:	4664      	mov	r4, ip
 800924c:	42a3      	cmp	r3, r4
 800924e:	dd1e      	ble.n	800928e <_strtoul_l.isra.0+0xb6>
 8009250:	f1b6 3fff 	cmp.w	r6, #4294967295
 8009254:	d007      	beq.n	8009266 <_strtoul_l.isra.0+0x8e>
 8009256:	4580      	cmp	r8, r0
 8009258:	d316      	bcc.n	8009288 <_strtoul_l.isra.0+0xb0>
 800925a:	d101      	bne.n	8009260 <_strtoul_l.isra.0+0x88>
 800925c:	45a1      	cmp	r9, r4
 800925e:	db13      	blt.n	8009288 <_strtoul_l.isra.0+0xb0>
 8009260:	2601      	movs	r6, #1
 8009262:	fb00 4003 	mla	r0, r0, r3, r4
 8009266:	f815 4b01 	ldrb.w	r4, [r5], #1
 800926a:	e7e9      	b.n	8009240 <_strtoul_l.isra.0+0x68>
 800926c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8009270:	f1bc 0f19 	cmp.w	ip, #25
 8009274:	d801      	bhi.n	800927a <_strtoul_l.isra.0+0xa2>
 8009276:	3c37      	subs	r4, #55	@ 0x37
 8009278:	e7e8      	b.n	800924c <_strtoul_l.isra.0+0x74>
 800927a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800927e:	f1bc 0f19 	cmp.w	ip, #25
 8009282:	d804      	bhi.n	800928e <_strtoul_l.isra.0+0xb6>
 8009284:	3c57      	subs	r4, #87	@ 0x57
 8009286:	e7e1      	b.n	800924c <_strtoul_l.isra.0+0x74>
 8009288:	f04f 36ff 	mov.w	r6, #4294967295
 800928c:	e7eb      	b.n	8009266 <_strtoul_l.isra.0+0x8e>
 800928e:	1c73      	adds	r3, r6, #1
 8009290:	d106      	bne.n	80092a0 <_strtoul_l.isra.0+0xc8>
 8009292:	2322      	movs	r3, #34	@ 0x22
 8009294:	4630      	mov	r0, r6
 8009296:	f8ce 3000 	str.w	r3, [lr]
 800929a:	b932      	cbnz	r2, 80092aa <_strtoul_l.isra.0+0xd2>
 800929c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80092a0:	b107      	cbz	r7, 80092a4 <_strtoul_l.isra.0+0xcc>
 80092a2:	4240      	negs	r0, r0
 80092a4:	2a00      	cmp	r2, #0
 80092a6:	d0f9      	beq.n	800929c <_strtoul_l.isra.0+0xc4>
 80092a8:	b106      	cbz	r6, 80092ac <_strtoul_l.isra.0+0xd4>
 80092aa:	1e69      	subs	r1, r5, #1
 80092ac:	6011      	str	r1, [r2, #0]
 80092ae:	e7f5      	b.n	800929c <_strtoul_l.isra.0+0xc4>
 80092b0:	08009c73 	.word	0x08009c73

080092b4 <_strtoul_r>:
 80092b4:	f7ff bf90 	b.w	80091d8 <_strtoul_l.isra.0>

080092b8 <_malloc_usable_size_r>:
 80092b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092bc:	1f18      	subs	r0, r3, #4
 80092be:	2b00      	cmp	r3, #0
 80092c0:	bfbc      	itt	lt
 80092c2:	580b      	ldrlt	r3, [r1, r0]
 80092c4:	18c0      	addlt	r0, r0, r3
 80092c6:	4770      	bx	lr

080092c8 <_init>:
 80092c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ca:	bf00      	nop
 80092cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092ce:	bc08      	pop	{r3}
 80092d0:	469e      	mov	lr, r3
 80092d2:	4770      	bx	lr

080092d4 <_fini>:
 80092d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092d6:	bf00      	nop
 80092d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092da:	bc08      	pop	{r3}
 80092dc:	469e      	mov	lr, r3
 80092de:	4770      	bx	lr
