
WT1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006594  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  080066a0  080066a0  000076a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067bc  080067bc  00008060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080067bc  080067bc  000077bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067c4  080067c4  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067c4  080067c4  000077c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080067c8  080067c8  000077c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080067cc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000344  20000060  0800682c  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003a4  0800682c  000083a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ce9  00000000  00000000  00008089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d04  00000000  00000000  00018d72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f80  00000000  00000000  0001ba78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bfa  00000000  00000000  0001c9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000196bb  00000000  00000000  0001d5f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001467d  00000000  00000000  00036cad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dff8  00000000  00000000  0004b32a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d9322  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045c0  00000000  00000000  000d9368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000dd928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08006688 	.word	0x08006688

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08006688 	.word	0x08006688

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <__aeabi_frsub>:
 8000170:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000174:	e002      	b.n	800017c <__addsf3>
 8000176:	bf00      	nop

08000178 <__aeabi_fsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800017c <__addsf3>:
 800017c:	0042      	lsls	r2, r0, #1
 800017e:	bf1f      	itttt	ne
 8000180:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000184:	ea92 0f03 	teqne	r2, r3
 8000188:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800018c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000190:	d06a      	beq.n	8000268 <__addsf3+0xec>
 8000192:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000196:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019a:	bfc1      	itttt	gt
 800019c:	18d2      	addgt	r2, r2, r3
 800019e:	4041      	eorgt	r1, r0
 80001a0:	4048      	eorgt	r0, r1
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	2b19      	cmp	r3, #25
 80001aa:	bf88      	it	hi
 80001ac:	4770      	bxhi	lr
 80001ae:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80001b2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001b6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4240      	negne	r0, r0
 80001be:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001c6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4249      	negne	r1, r1
 80001ce:	ea92 0f03 	teq	r2, r3
 80001d2:	d03f      	beq.n	8000254 <__addsf3+0xd8>
 80001d4:	f1a2 0201 	sub.w	r2, r2, #1
 80001d8:	fa41 fc03 	asr.w	ip, r1, r3
 80001dc:	eb10 000c 	adds.w	r0, r0, ip
 80001e0:	f1c3 0320 	rsb	r3, r3, #32
 80001e4:	fa01 f103 	lsl.w	r1, r1, r3
 80001e8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001ec:	d502      	bpl.n	80001f4 <__addsf3+0x78>
 80001ee:	4249      	negs	r1, r1
 80001f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001f8:	d313      	bcc.n	8000222 <__addsf3+0xa6>
 80001fa:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001fe:	d306      	bcc.n	800020e <__addsf3+0x92>
 8000200:	0840      	lsrs	r0, r0, #1
 8000202:	ea4f 0131 	mov.w	r1, r1, rrx
 8000206:	f102 0201 	add.w	r2, r2, #1
 800020a:	2afe      	cmp	r2, #254	@ 0xfe
 800020c:	d251      	bcs.n	80002b2 <__addsf3+0x136>
 800020e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000212:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000216:	bf08      	it	eq
 8000218:	f020 0001 	biceq.w	r0, r0, #1
 800021c:	ea40 0003 	orr.w	r0, r0, r3
 8000220:	4770      	bx	lr
 8000222:	0049      	lsls	r1, r1, #1
 8000224:	eb40 0000 	adc.w	r0, r0, r0
 8000228:	3a01      	subs	r2, #1
 800022a:	bf28      	it	cs
 800022c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000230:	d2ed      	bcs.n	800020e <__addsf3+0x92>
 8000232:	fab0 fc80 	clz	ip, r0
 8000236:	f1ac 0c08 	sub.w	ip, ip, #8
 800023a:	ebb2 020c 	subs.w	r2, r2, ip
 800023e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000242:	bfaa      	itet	ge
 8000244:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000248:	4252      	neglt	r2, r2
 800024a:	4318      	orrge	r0, r3
 800024c:	bfbc      	itt	lt
 800024e:	40d0      	lsrlt	r0, r2
 8000250:	4318      	orrlt	r0, r3
 8000252:	4770      	bx	lr
 8000254:	f092 0f00 	teq	r2, #0
 8000258:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800025c:	bf06      	itte	eq
 800025e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000262:	3201      	addeq	r2, #1
 8000264:	3b01      	subne	r3, #1
 8000266:	e7b5      	b.n	80001d4 <__addsf3+0x58>
 8000268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800026c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000270:	bf18      	it	ne
 8000272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000276:	d021      	beq.n	80002bc <__addsf3+0x140>
 8000278:	ea92 0f03 	teq	r2, r3
 800027c:	d004      	beq.n	8000288 <__addsf3+0x10c>
 800027e:	f092 0f00 	teq	r2, #0
 8000282:	bf08      	it	eq
 8000284:	4608      	moveq	r0, r1
 8000286:	4770      	bx	lr
 8000288:	ea90 0f01 	teq	r0, r1
 800028c:	bf1c      	itt	ne
 800028e:	2000      	movne	r0, #0
 8000290:	4770      	bxne	lr
 8000292:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000296:	d104      	bne.n	80002a2 <__addsf3+0x126>
 8000298:	0040      	lsls	r0, r0, #1
 800029a:	bf28      	it	cs
 800029c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80002a0:	4770      	bx	lr
 80002a2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80002a6:	bf3c      	itt	cc
 80002a8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80002ac:	4770      	bxcc	lr
 80002ae:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80002b2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ba:	4770      	bx	lr
 80002bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c0:	bf16      	itet	ne
 80002c2:	4608      	movne	r0, r1
 80002c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002c8:	4601      	movne	r1, r0
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	bf06      	itte	eq
 80002ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d2:	ea90 0f01 	teqeq	r0, r1
 80002d6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002da:	4770      	bx	lr

080002dc <__aeabi_ui2f>:
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	e004      	b.n	80002ec <__aeabi_i2f+0x8>
 80002e2:	bf00      	nop

080002e4 <__aeabi_i2f>:
 80002e4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002e8:	bf48      	it	mi
 80002ea:	4240      	negmi	r0, r0
 80002ec:	ea5f 0c00 	movs.w	ip, r0
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002f8:	4601      	mov	r1, r0
 80002fa:	f04f 0000 	mov.w	r0, #0
 80002fe:	e01c      	b.n	800033a <__aeabi_l2f+0x2a>

08000300 <__aeabi_ul2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	e00a      	b.n	8000324 <__aeabi_l2f+0x14>
 800030e:	bf00      	nop

08000310 <__aeabi_l2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800031c:	d502      	bpl.n	8000324 <__aeabi_l2f+0x14>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	ea5f 0c01 	movs.w	ip, r1
 8000328:	bf02      	ittt	eq
 800032a:	4684      	moveq	ip, r0
 800032c:	4601      	moveq	r1, r0
 800032e:	2000      	moveq	r0, #0
 8000330:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000334:	bf08      	it	eq
 8000336:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800033a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800033e:	fabc f28c 	clz	r2, ip
 8000342:	3a08      	subs	r2, #8
 8000344:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000348:	db10      	blt.n	800036c <__aeabi_l2f+0x5c>
 800034a:	fa01 fc02 	lsl.w	ip, r1, r2
 800034e:	4463      	add	r3, ip
 8000350:	fa00 fc02 	lsl.w	ip, r0, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800035c:	fa20 f202 	lsr.w	r2, r0, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	f020 0001 	biceq.w	r0, r0, #1
 800036a:	4770      	bx	lr
 800036c:	f102 0220 	add.w	r2, r2, #32
 8000370:	fa01 fc02 	lsl.w	ip, r1, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800037c:	fa21 f202 	lsr.w	r2, r1, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038a:	4770      	bx	lr

0800038c <__aeabi_fmul>:
 800038c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000390:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000394:	bf1e      	ittt	ne
 8000396:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039a:	ea92 0f0c 	teqne	r2, ip
 800039e:	ea93 0f0c 	teqne	r3, ip
 80003a2:	d06f      	beq.n	8000484 <__aeabi_fmul+0xf8>
 80003a4:	441a      	add	r2, r3
 80003a6:	ea80 0c01 	eor.w	ip, r0, r1
 80003aa:	0240      	lsls	r0, r0, #9
 80003ac:	bf18      	it	ne
 80003ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b2:	d01e      	beq.n	80003f2 <__aeabi_fmul+0x66>
 80003b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c0:	fba0 3101 	umull	r3, r1, r0, r1
 80003c4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003c8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003cc:	bf3e      	ittt	cc
 80003ce:	0049      	lslcc	r1, r1, #1
 80003d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d4:	005b      	lslcc	r3, r3, #1
 80003d6:	ea40 0001 	orr.w	r0, r0, r1
 80003da:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003de:	2afd      	cmp	r2, #253	@ 0xfd
 80003e0:	d81d      	bhi.n	800041e <__aeabi_fmul+0x92>
 80003e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ea:	bf08      	it	eq
 80003ec:	f020 0001 	biceq.w	r0, r0, #1
 80003f0:	4770      	bx	lr
 80003f2:	f090 0f00 	teq	r0, #0
 80003f6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003fa:	bf08      	it	eq
 80003fc:	0249      	lsleq	r1, r1, #9
 80003fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000402:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000406:	3a7f      	subs	r2, #127	@ 0x7f
 8000408:	bfc2      	ittt	gt
 800040a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800040e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000412:	4770      	bxgt	lr
 8000414:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	3a01      	subs	r2, #1
 800041e:	dc5d      	bgt.n	80004dc <__aeabi_fmul+0x150>
 8000420:	f112 0f19 	cmn.w	r2, #25
 8000424:	bfdc      	itt	le
 8000426:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800042a:	4770      	bxle	lr
 800042c:	f1c2 0200 	rsb	r2, r2, #0
 8000430:	0041      	lsls	r1, r0, #1
 8000432:	fa21 f102 	lsr.w	r1, r1, r2
 8000436:	f1c2 0220 	rsb	r2, r2, #32
 800043a:	fa00 fc02 	lsl.w	ip, r0, r2
 800043e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000442:	f140 0000 	adc.w	r0, r0, #0
 8000446:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044a:	bf08      	it	eq
 800044c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000450:	4770      	bx	lr
 8000452:	f092 0f00 	teq	r2, #0
 8000456:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800045a:	bf02      	ittt	eq
 800045c:	0040      	lsleq	r0, r0, #1
 800045e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000462:	3a01      	subeq	r2, #1
 8000464:	d0f9      	beq.n	800045a <__aeabi_fmul+0xce>
 8000466:	ea40 000c 	orr.w	r0, r0, ip
 800046a:	f093 0f00 	teq	r3, #0
 800046e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0049      	lsleq	r1, r1, #1
 8000476:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800047a:	3b01      	subeq	r3, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xe6>
 800047e:	ea41 010c 	orr.w	r1, r1, ip
 8000482:	e78f      	b.n	80003a4 <__aeabi_fmul+0x18>
 8000484:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000488:	ea92 0f0c 	teq	r2, ip
 800048c:	bf18      	it	ne
 800048e:	ea93 0f0c 	teqne	r3, ip
 8000492:	d00a      	beq.n	80004aa <__aeabi_fmul+0x11e>
 8000494:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000498:	bf18      	it	ne
 800049a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800049e:	d1d8      	bne.n	8000452 <__aeabi_fmul+0xc6>
 80004a0:	ea80 0001 	eor.w	r0, r0, r1
 80004a4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004a8:	4770      	bx	lr
 80004aa:	f090 0f00 	teq	r0, #0
 80004ae:	bf17      	itett	ne
 80004b0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004b4:	4608      	moveq	r0, r1
 80004b6:	f091 0f00 	teqne	r1, #0
 80004ba:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004be:	d014      	beq.n	80004ea <__aeabi_fmul+0x15e>
 80004c0:	ea92 0f0c 	teq	r2, ip
 80004c4:	d101      	bne.n	80004ca <__aeabi_fmul+0x13e>
 80004c6:	0242      	lsls	r2, r0, #9
 80004c8:	d10f      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004ca:	ea93 0f0c 	teq	r3, ip
 80004ce:	d103      	bne.n	80004d8 <__aeabi_fmul+0x14c>
 80004d0:	024b      	lsls	r3, r1, #9
 80004d2:	bf18      	it	ne
 80004d4:	4608      	movne	r0, r1
 80004d6:	d108      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004d8:	ea80 0001 	eor.w	r0, r0, r1
 80004dc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004e0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004e8:	4770      	bx	lr
 80004ea:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ee:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_fdiv>:
 80004f4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004fc:	bf1e      	ittt	ne
 80004fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000502:	ea92 0f0c 	teqne	r2, ip
 8000506:	ea93 0f0c 	teqne	r3, ip
 800050a:	d069      	beq.n	80005e0 <__aeabi_fdiv+0xec>
 800050c:	eba2 0203 	sub.w	r2, r2, r3
 8000510:	ea80 0c01 	eor.w	ip, r0, r1
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051a:	d037      	beq.n	800058c <__aeabi_fdiv+0x98>
 800051c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000520:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000524:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000528:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800052c:	428b      	cmp	r3, r1
 800052e:	bf38      	it	cc
 8000530:	005b      	lslcc	r3, r3, #1
 8000532:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000536:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800053a:	428b      	cmp	r3, r1
 800053c:	bf24      	itt	cs
 800053e:	1a5b      	subcs	r3, r3, r1
 8000540:	ea40 000c 	orrcs.w	r0, r0, ip
 8000544:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000548:	bf24      	itt	cs
 800054a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800054e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000552:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000556:	bf24      	itt	cs
 8000558:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800055c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000560:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000564:	bf24      	itt	cs
 8000566:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	bf18      	it	ne
 8000572:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000576:	d1e0      	bne.n	800053a <__aeabi_fdiv+0x46>
 8000578:	2afd      	cmp	r2, #253	@ 0xfd
 800057a:	f63f af50 	bhi.w	800041e <__aeabi_fmul+0x92>
 800057e:	428b      	cmp	r3, r1
 8000580:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000590:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000594:	327f      	adds	r2, #127	@ 0x7f
 8000596:	bfc2      	ittt	gt
 8000598:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800059c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a0:	4770      	bxgt	lr
 80005a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	3a01      	subs	r2, #1
 80005ac:	e737      	b.n	800041e <__aeabi_fmul+0x92>
 80005ae:	f092 0f00 	teq	r2, #0
 80005b2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005b6:	bf02      	ittt	eq
 80005b8:	0040      	lsleq	r0, r0, #1
 80005ba:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005be:	3a01      	subeq	r2, #1
 80005c0:	d0f9      	beq.n	80005b6 <__aeabi_fdiv+0xc2>
 80005c2:	ea40 000c 	orr.w	r0, r0, ip
 80005c6:	f093 0f00 	teq	r3, #0
 80005ca:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0049      	lsleq	r1, r1, #1
 80005d2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005d6:	3b01      	subeq	r3, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xda>
 80005da:	ea41 010c 	orr.w	r1, r1, ip
 80005de:	e795      	b.n	800050c <__aeabi_fdiv+0x18>
 80005e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e4:	ea92 0f0c 	teq	r2, ip
 80005e8:	d108      	bne.n	80005fc <__aeabi_fdiv+0x108>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	f47f af7d 	bne.w	80004ea <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	f47f af70 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e776      	b.n	80004ea <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	d104      	bne.n	800060c <__aeabi_fdiv+0x118>
 8000602:	024b      	lsls	r3, r1, #9
 8000604:	f43f af4c 	beq.w	80004a0 <__aeabi_fmul+0x114>
 8000608:	4608      	mov	r0, r1
 800060a:	e76e      	b.n	80004ea <__aeabi_fmul+0x15e>
 800060c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000610:	bf18      	it	ne
 8000612:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000616:	d1ca      	bne.n	80005ae <__aeabi_fdiv+0xba>
 8000618:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800061c:	f47f af5c 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 8000620:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000624:	f47f af3c 	bne.w	80004a0 <__aeabi_fmul+0x114>
 8000628:	e75f      	b.n	80004ea <__aeabi_fmul+0x15e>
 800062a:	bf00      	nop

0800062c <__gesf2>:
 800062c:	f04f 3cff 	mov.w	ip, #4294967295
 8000630:	e006      	b.n	8000640 <__cmpsf2+0x4>
 8000632:	bf00      	nop

08000634 <__lesf2>:
 8000634:	f04f 0c01 	mov.w	ip, #1
 8000638:	e002      	b.n	8000640 <__cmpsf2+0x4>
 800063a:	bf00      	nop

0800063c <__cmpsf2>:
 800063c:	f04f 0c01 	mov.w	ip, #1
 8000640:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000644:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000648:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800064c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000650:	bf18      	it	ne
 8000652:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000656:	d011      	beq.n	800067c <__cmpsf2+0x40>
 8000658:	b001      	add	sp, #4
 800065a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800065e:	bf18      	it	ne
 8000660:	ea90 0f01 	teqne	r0, r1
 8000664:	bf58      	it	pl
 8000666:	ebb2 0003 	subspl.w	r0, r2, r3
 800066a:	bf88      	it	hi
 800066c:	17c8      	asrhi	r0, r1, #31
 800066e:	bf38      	it	cc
 8000670:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000674:	bf18      	it	ne
 8000676:	f040 0001 	orrne.w	r0, r0, #1
 800067a:	4770      	bx	lr
 800067c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000680:	d102      	bne.n	8000688 <__cmpsf2+0x4c>
 8000682:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000686:	d105      	bne.n	8000694 <__cmpsf2+0x58>
 8000688:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800068c:	d1e4      	bne.n	8000658 <__cmpsf2+0x1c>
 800068e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000692:	d0e1      	beq.n	8000658 <__cmpsf2+0x1c>
 8000694:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <__aeabi_cfrcmple>:
 800069c:	4684      	mov	ip, r0
 800069e:	4608      	mov	r0, r1
 80006a0:	4661      	mov	r1, ip
 80006a2:	e7ff      	b.n	80006a4 <__aeabi_cfcmpeq>

080006a4 <__aeabi_cfcmpeq>:
 80006a4:	b50f      	push	{r0, r1, r2, r3, lr}
 80006a6:	f7ff ffc9 	bl	800063c <__cmpsf2>
 80006aa:	2800      	cmp	r0, #0
 80006ac:	bf48      	it	mi
 80006ae:	f110 0f00 	cmnmi.w	r0, #0
 80006b2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006b4 <__aeabi_fcmpeq>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff fff4 	bl	80006a4 <__aeabi_cfcmpeq>
 80006bc:	bf0c      	ite	eq
 80006be:	2001      	moveq	r0, #1
 80006c0:	2000      	movne	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmplt>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffea 	bl	80006a4 <__aeabi_cfcmpeq>
 80006d0:	bf34      	ite	cc
 80006d2:	2001      	movcc	r0, #1
 80006d4:	2000      	movcs	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmple>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffe0 	bl	80006a4 <__aeabi_cfcmpeq>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpge>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffd2 	bl	800069c <__aeabi_cfrcmple>
 80006f8:	bf94      	ite	ls
 80006fa:	2001      	movls	r0, #1
 80006fc:	2000      	movhi	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_fcmpgt>:
 8000704:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000708:	f7ff ffc8 	bl	800069c <__aeabi_cfrcmple>
 800070c:	bf34      	ite	cc
 800070e:	2001      	movcc	r0, #1
 8000710:	2000      	movcs	r0, #0
 8000712:	f85d fb08 	ldr.w	pc, [sp], #8
 8000716:	bf00      	nop

08000718 <ADC_Init>:
/**
  * @brief Initializes the ADC hardware
  * @param hadc: Pointer to ADC handle
  */
void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
    // Calibration
    if (HAL_ADCEx_Calibration_Start(hadc) != HAL_OK)
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f001 fdf5 	bl	8002310 <HAL_ADCEx_Calibration_Start>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <ADC_Init+0x18>
    {
        Error_Handler();
 800072c:	f000 fe5a 	bl	80013e4 <Error_Handler>
    }
}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <ADC_ReadAllChannels>:
  * @brief Reads all ADC channels and transmits UART messages if thresholds are met.
  * @param hadc: Pointer to ADC handle
  * @param data: Pointer to ADC_Data struct to store results
  */
void ADC_ReadAllChannels(ADC_HandleTypeDef* hadc, ADC_Data* data)
{
 8000738:	b590      	push	{r4, r7, lr}
 800073a:	b08f      	sub	sp, #60	@ 0x3c
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	6039      	str	r1, [r7, #0]
    ADC_ChannelConfTypeDef sConfig = {0};
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
    sConfig.Rank = 1;
 800074e:	2301      	movs	r3, #1
 8000750:	623b      	str	r3, [r7, #32]
    sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000752:	2306      	movs	r3, #6
 8000754:	627b      	str	r3, [r7, #36]	@ 0x24

    // Define the voltage threshold for UART transmission
    const float UART_TRANSMIT_THRESHOLD = 3.0f; // Proper 3V or above
 8000756:	4b94      	ldr	r3, [pc, #592]	@ (80009a8 <ADC_ReadAllChannels+0x270>)
 8000758:	633b      	str	r3, [r7, #48]	@ 0x30
    const float DRY_RUN_THRESHOLD = .0f; // Threshold for dry run detection
 800075a:	f04f 0300 	mov.w	r3, #0
 800075e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const float GROUND_THRESHOLD = 0.1f; // Threshold to consider as ground (0V)
 8000760:	4b92      	ldr	r3, [pc, #584]	@ (80009ac <ADC_ReadAllChannels+0x274>)
 8000762:	62bb      	str	r3, [r7, #40]	@ 0x28

    for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++)
 8000764:	2300      	movs	r3, #0
 8000766:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800076a:	e108      	b.n	800097e <ADC_ReadAllChannels+0x246>
    {
        // Configure channel
        sConfig.Channel = adcChannels[i];
 800076c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000770:	4a8f      	ldr	r2, [pc, #572]	@ (80009b0 <ADC_ReadAllChannels+0x278>)
 8000772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000776:	61fb      	str	r3, [r7, #28]
        HAL_ADC_ConfigChannel(hadc, &sConfig);
 8000778:	f107 031c 	add.w	r3, r7, #28
 800077c:	4619      	mov	r1, r3
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f001 fc32 	bl	8001fe8 <HAL_ADC_ConfigChannel>

        // Start conversion
        HAL_ADC_Start(hadc);
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f001 fa6f 	bl	8001c68 <HAL_ADC_Start>
        if (HAL_ADC_PollForConversion(hadc, 10) == HAL_OK)
 800078a:	210a      	movs	r1, #10
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f001 fb19 	bl	8001dc4 <HAL_ADC_PollForConversion>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	f040 80d6 	bne.w	8000946 <ADC_ReadAllChannels+0x20e>
        {
            data->rawValues[i] = HAL_ADC_GetValue(hadc);
 800079a:	f897 4037 	ldrb.w	r4, [r7, #55]	@ 0x37
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f001 fc16 	bl	8001fd0 <HAL_ADC_GetValue>
 80007a4:	4602      	mov	r2, r0
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
            data->voltages[i] = (data->rawValues[i] * 3.3f) / 4095.0f;
 80007ac:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff fd90 	bl	80002dc <__aeabi_ui2f>
 80007bc:	4603      	mov	r3, r0
 80007be:	497d      	ldr	r1, [pc, #500]	@ (80009b4 <ADC_ReadAllChannels+0x27c>)
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff fde3 	bl	800038c <__aeabi_fmul>
 80007c6:	4603      	mov	r3, r0
 80007c8:	f897 4037 	ldrb.w	r4, [r7, #55]	@ 0x37
 80007cc:	497a      	ldr	r1, [pc, #488]	@ (80009b8 <ADC_ReadAllChannels+0x280>)
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff fe90 	bl	80004f4 <__aeabi_fdiv>
 80007d4:	4603      	mov	r3, r0
 80007d6:	4619      	mov	r1, r3
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	1da2      	adds	r2, r4, #6
 80007dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            data->maxReached[i] = (data->voltages[i] >= 3.2f) ? 1 : 0; // Original 3.2V threshold for maxReached flag
 80007e0:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	3206      	adds	r2, #6
 80007e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007ec:	2201      	movs	r2, #1
 80007ee:	4614      	mov	r4, r2
 80007f0:	4972      	ldr	r1, [pc, #456]	@ (80009bc <ADC_ReadAllChannels+0x284>)
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff ff7c 	bl	80006f0 <__aeabi_fcmpge>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d101      	bne.n	8000802 <ADC_ReadAllChannels+0xca>
 80007fe:	2300      	movs	r3, #0
 8000800:	461c      	mov	r4, r3
 8000802:	b2e2      	uxtb	r2, r4
 8000804:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000808:	4611      	mov	r1, r2
 800080a:	683a      	ldr	r2, [r7, #0]
 800080c:	4413      	add	r3, r2
 800080e:	460a      	mov	r2, r1
 8000810:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

            // Check if the voltage is close to ground
            if (data->voltages[i] < GROUND_THRESHOLD)
 8000814:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	3206      	adds	r2, #6
 800081c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000820:	4619      	mov	r1, r3
 8000822:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000824:	f7ff ff6e 	bl	8000704 <__aeabi_fcmpgt>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d00d      	beq.n	800084a <ADC_ReadAllChannels+0x112>
            {
                data->rawValues[i] = 0; // Set raw value to 0
 800082e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	2100      	movs	r1, #0
 8000836:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                data->voltages[i] = 0.0f; // Set voltage to 0.0V
 800083a:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	3206      	adds	r2, #6
 8000842:	f04f 0100 	mov.w	r1, #0
 8000846:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            }

            // Check voltage for UART transmission
            if (data->voltages[i] >= UART_TRANSMIT_THRESHOLD)
 800084a:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	3206      	adds	r2, #6
 8000852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000856:	4619      	mov	r1, r3
 8000858:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800085a:	f7ff ff3f 	bl	80006dc <__aeabi_fcmple>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d052      	beq.n	800090a <ADC_ReadAllChannels+0x1d2>
            {
                switch (i)
 8000864:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000868:	2b04      	cmp	r3, #4
 800086a:	f200 8082 	bhi.w	8000972 <ADC_ReadAllChannels+0x23a>
 800086e:	a201      	add	r2, pc, #4	@ (adr r2, 8000874 <ADC_ReadAllChannels+0x13c>)
 8000870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000874:	08000889 	.word	0x08000889
 8000878:	080008a3 	.word	0x080008a3
 800087c:	080008bd 	.word	0x080008bd
 8000880:	080008d7 	.word	0x080008d7
 8000884:	080008f1 	.word	0x080008f1
                {
                    case 0: // IN0
                        UART_ReadDataPacket(dataPacket, "@10W#", sizeof("@10W#") - 1);
 8000888:	2205      	movs	r2, #5
 800088a:	494d      	ldr	r1, [pc, #308]	@ (80009c0 <ADC_ReadAllChannels+0x288>)
 800088c:	484d      	ldr	r0, [pc, #308]	@ (80009c4 <ADC_ReadAllChannels+0x28c>)
 800088e:	f001 f80b 	bl	80018a8 <UART_ReadDataPacket>
                        UART_TransmitString(&huart1, dataPacket);
 8000892:	494c      	ldr	r1, [pc, #304]	@ (80009c4 <ADC_ReadAllChannels+0x28c>)
 8000894:	484c      	ldr	r0, [pc, #304]	@ (80009c8 <ADC_ReadAllChannels+0x290>)
 8000896:	f000 fff3 	bl	8001880 <UART_TransmitString>
                        motorStatus = 1; // Motor is on
 800089a:	4b4c      	ldr	r3, [pc, #304]	@ (80009cc <ADC_ReadAllChannels+0x294>)
 800089c:	2201      	movs	r2, #1
 800089e:	701a      	strb	r2, [r3, #0]
                        break;
 80008a0:	e068      	b.n	8000974 <ADC_ReadAllChannels+0x23c>
                    case 1: // IN1
                        UART_ReadDataPacket(dataPacket, "@30W#", sizeof("@30W#") - 1);
 80008a2:	2205      	movs	r2, #5
 80008a4:	494a      	ldr	r1, [pc, #296]	@ (80009d0 <ADC_ReadAllChannels+0x298>)
 80008a6:	4847      	ldr	r0, [pc, #284]	@ (80009c4 <ADC_ReadAllChannels+0x28c>)
 80008a8:	f000 fffe 	bl	80018a8 <UART_ReadDataPacket>
                        UART_TransmitString(&huart1, dataPacket);
 80008ac:	4945      	ldr	r1, [pc, #276]	@ (80009c4 <ADC_ReadAllChannels+0x28c>)
 80008ae:	4846      	ldr	r0, [pc, #280]	@ (80009c8 <ADC_ReadAllChannels+0x290>)
 80008b0:	f000 ffe6 	bl	8001880 <UART_TransmitString>
                        motorStatus = 1; // Motor is on
 80008b4:	4b45      	ldr	r3, [pc, #276]	@ (80009cc <ADC_ReadAllChannels+0x294>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	701a      	strb	r2, [r3, #0]
                        break;
 80008ba:	e05b      	b.n	8000974 <ADC_ReadAllChannels+0x23c>
                    case 2: // IN2
                        UART_ReadDataPacket(dataPacket, "@70W#", sizeof("@70W#") - 1);
 80008bc:	2205      	movs	r2, #5
 80008be:	4945      	ldr	r1, [pc, #276]	@ (80009d4 <ADC_ReadAllChannels+0x29c>)
 80008c0:	4840      	ldr	r0, [pc, #256]	@ (80009c4 <ADC_ReadAllChannels+0x28c>)
 80008c2:	f000 fff1 	bl	80018a8 <UART_ReadDataPacket>
                        UART_TransmitString(&huart1, dataPacket);
 80008c6:	493f      	ldr	r1, [pc, #252]	@ (80009c4 <ADC_ReadAllChannels+0x28c>)
 80008c8:	483f      	ldr	r0, [pc, #252]	@ (80009c8 <ADC_ReadAllChannels+0x290>)
 80008ca:	f000 ffd9 	bl	8001880 <UART_TransmitString>
                        motorStatus = 1; // Motor is on
 80008ce:	4b3f      	ldr	r3, [pc, #252]	@ (80009cc <ADC_ReadAllChannels+0x294>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	701a      	strb	r2, [r3, #0]
                        break;
 80008d4:	e04e      	b.n	8000974 <ADC_ReadAllChannels+0x23c>
                    case 3: // IN3
                        UART_ReadDataPacket(dataPacket, "@1:W#", sizeof("@1:W#") - 1);
 80008d6:	2205      	movs	r2, #5
 80008d8:	493f      	ldr	r1, [pc, #252]	@ (80009d8 <ADC_ReadAllChannels+0x2a0>)
 80008da:	483a      	ldr	r0, [pc, #232]	@ (80009c4 <ADC_ReadAllChannels+0x28c>)
 80008dc:	f000 ffe4 	bl	80018a8 <UART_ReadDataPacket>
                        UART_TransmitString(&huart1, dataPacket);
 80008e0:	4938      	ldr	r1, [pc, #224]	@ (80009c4 <ADC_ReadAllChannels+0x28c>)
 80008e2:	4839      	ldr	r0, [pc, #228]	@ (80009c8 <ADC_ReadAllChannels+0x290>)
 80008e4:	f000 ffcc 	bl	8001880 <UART_TransmitString>
                        motorStatus = 1; // Motor is on
 80008e8:	4b38      	ldr	r3, [pc, #224]	@ (80009cc <ADC_ReadAllChannels+0x294>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	701a      	strb	r2, [r3, #0]
                        break;
 80008ee:	e041      	b.n	8000974 <ADC_ReadAllChannels+0x23c>
                    case 4: // IN4
                        UART_ReadDataPacket(dataPacket, "@DRY#", sizeof("@DRY#") - 1);
 80008f0:	2205      	movs	r2, #5
 80008f2:	493a      	ldr	r1, [pc, #232]	@ (80009dc <ADC_ReadAllChannels+0x2a4>)
 80008f4:	4833      	ldr	r0, [pc, #204]	@ (80009c4 <ADC_ReadAllChannels+0x28c>)
 80008f6:	f000 ffd7 	bl	80018a8 <UART_ReadDataPacket>
                        UART_TransmitString(&huart1, dataPacket);
 80008fa:	4932      	ldr	r1, [pc, #200]	@ (80009c4 <ADC_ReadAllChannels+0x28c>)
 80008fc:	4832      	ldr	r0, [pc, #200]	@ (80009c8 <ADC_ReadAllChannels+0x290>)
 80008fe:	f000 ffbf 	bl	8001880 <UART_TransmitString>
                        motorStatus = 1; // Set motor status to on for dry run
 8000902:	4b32      	ldr	r3, [pc, #200]	@ (80009cc <ADC_ReadAllChannels+0x294>)
 8000904:	2201      	movs	r2, #1
 8000906:	701a      	strb	r2, [r3, #0]
                        break;
 8000908:	e034      	b.n	8000974 <ADC_ReadAllChannels+0x23c>
                    // Cases for IN5 are not specified for UART transmission
                    default:
                        break;
                }
            }
            else if (data->voltages[i] < DRY_RUN_THRESHOLD && motorStatus == 1)
 800090a:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	3206      	adds	r2, #6
 8000912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000916:	4619      	mov	r1, r3
 8000918:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800091a:	f7ff fef3 	bl	8000704 <__aeabi_fcmpgt>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d027      	beq.n	8000974 <ADC_ReadAllChannels+0x23c>
 8000924:	4b29      	ldr	r3, [pc, #164]	@ (80009cc <ADC_ReadAllChannels+0x294>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b01      	cmp	r3, #1
 800092a:	d123      	bne.n	8000974 <ADC_ReadAllChannels+0x23c>
            {
                // If the voltage is below the dry run threshold and the motor is on
                UART_ReadDataPacket(dataPacket, "@MT0#", sizeof("@MT0#") - 1);
 800092c:	2205      	movs	r2, #5
 800092e:	492c      	ldr	r1, [pc, #176]	@ (80009e0 <ADC_ReadAllChannels+0x2a8>)
 8000930:	4824      	ldr	r0, [pc, #144]	@ (80009c4 <ADC_ReadAllChannels+0x28c>)
 8000932:	f000 ffb9 	bl	80018a8 <UART_ReadDataPacket>
                UART_TransmitString(&huart1, dataPacket);
 8000936:	4923      	ldr	r1, [pc, #140]	@ (80009c4 <ADC_ReadAllChannels+0x28c>)
 8000938:	4823      	ldr	r0, [pc, #140]	@ (80009c8 <ADC_ReadAllChannels+0x290>)
 800093a:	f000 ffa1 	bl	8001880 <UART_TransmitString>
                motorStatus = 0; // Set motor status to off
 800093e:	4b23      	ldr	r3, [pc, #140]	@ (80009cc <ADC_ReadAllChannels+0x294>)
 8000940:	2200      	movs	r2, #0
 8000942:	701a      	strb	r2, [r3, #0]
 8000944:	e016      	b.n	8000974 <ADC_ReadAllChannels+0x23c>
        }
        else
        {
            // Handle ADC conversion timeout or error if necessary
            // For simplicity, we'll just set values to 0 on error
            data->rawValues[i] = 0;
 8000946:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	2100      	movs	r1, #0
 800094e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            data->voltages[i] = 0.0f;
 8000952:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	3206      	adds	r2, #6
 800095a:	f04f 0100 	mov.w	r1, #0
 800095e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            data->maxReached[i] = 0;
 8000962:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000966:	683a      	ldr	r2, [r7, #0]
 8000968:	4413      	add	r3, r2
 800096a:	2200      	movs	r2, #0
 800096c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8000970:	e000      	b.n	8000974 <ADC_ReadAllChannels+0x23c>
                        break;
 8000972:	bf00      	nop
    for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++)
 8000974:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000978:	3301      	adds	r3, #1
 800097a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800097e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000982:	2b05      	cmp	r3, #5
 8000984:	f67f aef2 	bls.w	800076c <ADC_ReadAllChannels+0x34>
        }
    }

    // Check for incoming UART data
    char receivedData[20]; // Buffer to hold received data
    UART_ReceiveString(&huart1, receivedData, sizeof(receivedData)); // Receive data from UART
 8000988:	f107 0308 	add.w	r3, r7, #8
 800098c:	2214      	movs	r2, #20
 800098e:	4619      	mov	r1, r3
 8000990:	480d      	ldr	r0, [pc, #52]	@ (80009c8 <ADC_ReadAllChannels+0x290>)
 8000992:	f000 ffa6 	bl	80018e2 <UART_ReceiveString>
    UART_ProcessReceivedData(receivedData); // Process the received data
 8000996:	f107 0308 	add.w	r3, r7, #8
 800099a:	4618      	mov	r0, r3
 800099c:	f000 ffbc 	bl	8001918 <UART_ProcessReceivedData>
}
 80009a0:	bf00      	nop
 80009a2:	373c      	adds	r7, #60	@ 0x3c
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd90      	pop	{r4, r7, pc}
 80009a8:	40400000 	.word	0x40400000
 80009ac:	3dcccccd 	.word	0x3dcccccd
 80009b0:	08006730 	.word	0x08006730
 80009b4:	40533333 	.word	0x40533333
 80009b8:	457ff000 	.word	0x457ff000
 80009bc:	404ccccd 	.word	0x404ccccd
 80009c0:	080066a0 	.word	0x080066a0
 80009c4:	2000007c 	.word	0x2000007c
 80009c8:	200001b8 	.word	0x200001b8
 80009cc:	20000085 	.word	0x20000085
 80009d0:	080066a8 	.word	0x080066a8
 80009d4:	080066b0 	.word	0x080066b0
 80009d8:	080066b8 	.word	0x080066b8
 80009dc:	080066c0 	.word	0x080066c0
 80009e0:	080066c8 	.word	0x080066c8

080009e4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c2;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup (e.g., 0x4E or 0x7E)

void lcd_send_cmd (char cmd)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b086      	sub	sp, #24
 80009e8:	af02      	add	r7, sp, #8
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	f023 030f 	bic.w	r3, r3, #15
 80009f4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	011b      	lsls	r3, r3, #4
 80009fa:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0 (Command mode, Enable high)
 80009fc:	7bfb      	ldrb	r3, [r7, #15]
 80009fe:	f043 030c 	orr.w	r3, r3, #12
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 (Command mode, Enable low)
 8000a06:	7bfb      	ldrb	r3, [r7, #15]
 8000a08:	f043 0308 	orr.w	r3, r3, #8
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 (Command mode, Enable high)
 8000a10:	7bbb      	ldrb	r3, [r7, #14]
 8000a12:	f043 030c 	orr.w	r3, r3, #12
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 (Command mode, Enable low)
 8000a1a:	7bbb      	ldrb	r3, [r7, #14]
 8000a1c:	f043 0308 	orr.w	r3, r3, #8
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000a24:	f107 0208 	add.w	r2, r7, #8
 8000a28:	2364      	movs	r3, #100	@ 0x64
 8000a2a:	9300      	str	r3, [sp, #0]
 8000a2c:	2304      	movs	r3, #4
 8000a2e:	214e      	movs	r1, #78	@ 0x4e
 8000a30:	4803      	ldr	r0, [pc, #12]	@ (8000a40 <lcd_send_cmd+0x5c>)
 8000a32:	f002 f8f7 	bl	8002c24 <HAL_I2C_Master_Transmit>
}
 8000a36:	bf00      	nop
 8000a38:	3710      	adds	r7, #16
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	200000f8 	.word	0x200000f8

08000a44 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af02      	add	r7, sp, #8
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	f023 030f 	bic.w	r3, r3, #15
 8000a54:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	011b      	lsls	r3, r3, #4
 8000a5a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1 (Data mode, Enable high)
 8000a5c:	7bfb      	ldrb	r3, [r7, #15]
 8000a5e:	f043 030d 	orr.w	r3, r3, #13
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1 (Data mode, Enable low)
 8000a66:	7bfb      	ldrb	r3, [r7, #15]
 8000a68:	f043 0309 	orr.w	r3, r3, #9
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1 (Data mode, Enable high)
 8000a70:	7bbb      	ldrb	r3, [r7, #14]
 8000a72:	f043 030d 	orr.w	r3, r3, #13
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1 (Data mode, Enable low)
 8000a7a:	7bbb      	ldrb	r3, [r7, #14]
 8000a7c:	f043 0309 	orr.w	r3, r3, #9
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000a84:	f107 0208 	add.w	r2, r7, #8
 8000a88:	2364      	movs	r3, #100	@ 0x64
 8000a8a:	9300      	str	r3, [sp, #0]
 8000a8c:	2304      	movs	r3, #4
 8000a8e:	214e      	movs	r1, #78	@ 0x4e
 8000a90:	4803      	ldr	r0, [pc, #12]	@ (8000aa0 <lcd_send_data+0x5c>)
 8000a92:	f002 f8c7 	bl	8002c24 <HAL_I2C_Master_Transmit>
}
 8000a96:	bf00      	nop
 8000a98:	3710      	adds	r7, #16
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	200000f8 	.word	0x200000f8

08000aa4 <lcd_put_cur>:
	HAL_Delay(2); // Wait for clear command to execute
	lcd_send_cmd (0x80); // Set cursor to home position (0,0)
}

void lcd_put_cur(int row, int col)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	6039      	str	r1, [r7, #0]
    switch (row)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d003      	beq.n	8000abc <lcd_put_cur+0x18>
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d005      	beq.n	8000ac6 <lcd_put_cur+0x22>
 8000aba:	e009      	b.n	8000ad0 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80; // Address for first row
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ac2:	603b      	str	r3, [r7, #0]
            break;
 8000ac4:	e004      	b.n	8000ad0 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0; // Address for second row
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000acc:	603b      	str	r3, [r7, #0]
            break;
 8000ace:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff ff85 	bl	80009e4 <lcd_send_cmd>
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <lcd_init>:


void lcd_init (void)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	af00      	add	r7, sp, #0
	// 4 bit initialisation sequence (standard for PCF8574 based LCDs)
	HAL_Delay(50);  // wait for >40ms after power-on
 8000ae6:	2032      	movs	r0, #50	@ 0x32
 8000ae8:	f000 ffc2 	bl	8001a70 <HAL_Delay>
	lcd_send_cmd (0x30); // Function set (8-bit mode)
 8000aec:	2030      	movs	r0, #48	@ 0x30
 8000aee:	f7ff ff79 	bl	80009e4 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000af2:	2005      	movs	r0, #5
 8000af4:	f000 ffbc 	bl	8001a70 <HAL_Delay>
	lcd_send_cmd (0x30); // Function set (8-bit mode)
 8000af8:	2030      	movs	r0, #48	@ 0x30
 8000afa:	f7ff ff73 	bl	80009e4 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000afe:	2001      	movs	r0, #1
 8000b00:	f000 ffb6 	bl	8001a70 <HAL_Delay>
	lcd_send_cmd (0x30); // Function set (8-bit mode)
 8000b04:	2030      	movs	r0, #48	@ 0x30
 8000b06:	f7ff ff6d 	bl	80009e4 <lcd_send_cmd>
	HAL_Delay(10);
 8000b0a:	200a      	movs	r0, #10
 8000b0c:	f000 ffb0 	bl	8001a70 <HAL_Delay>
	lcd_send_cmd (0x20);  // Function set (4-bit mode)
 8000b10:	2020      	movs	r0, #32
 8000b12:	f7ff ff67 	bl	80009e4 <lcd_send_cmd>
	HAL_Delay(10);
 8000b16:	200a      	movs	r0, #10
 8000b18:	f000 ffaa 	bl	8001a70 <HAL_Delay>

  // Display initialisation commands (after 4-bit mode is set)
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000b1c:	2028      	movs	r0, #40	@ 0x28
 8000b1e:	f7ff ff61 	bl	80009e4 <lcd_send_cmd>
	HAL_Delay(1);
 8000b22:	2001      	movs	r0, #1
 8000b24:	f000 ffa4 	bl	8001a70 <HAL_Delay>
	lcd_send_cmd (0x08); // Display on/off control --> D=0,C=0, B=0  ---> display off
 8000b28:	2008      	movs	r0, #8
 8000b2a:	f7ff ff5b 	bl	80009e4 <lcd_send_cmd>
	HAL_Delay(1);
 8000b2e:	2001      	movs	r0, #1
 8000b30:	f000 ff9e 	bl	8001a70 <HAL_Delay>
	lcd_send_cmd (0x01);  // Clear display
 8000b34:	2001      	movs	r0, #1
 8000b36:	f7ff ff55 	bl	80009e4 <lcd_send_cmd>
	HAL_Delay(2); // Longer delay for clear display
 8000b3a:	2002      	movs	r0, #2
 8000b3c:	f000 ff98 	bl	8001a70 <HAL_Delay>
	lcd_send_cmd (0x06); // Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000b40:	2006      	movs	r0, #6
 8000b42:	f7ff ff4f 	bl	80009e4 <lcd_send_cmd>
	HAL_Delay(1);
 8000b46:	2001      	movs	r0, #1
 8000b48:	f000 ff92 	bl	8001a70 <HAL_Delay>
	lcd_send_cmd (0x0C); // Display on/off control --> D = 1, C and B = 0. (Display ON, Cursor OFF, Blink OFF)
 8000b4c:	200c      	movs	r0, #12
 8000b4e:	f7ff ff49 	bl	80009e4 <lcd_send_cmd>
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b082      	sub	sp, #8
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000b5e:	e006      	b.n	8000b6e <lcd_send_string+0x18>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	1c5a      	adds	r2, r3, #1
 8000b64:	607a      	str	r2, [r7, #4]
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff ff6b 	bl	8000a44 <lcd_send_data>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d1f4      	bne.n	8000b60 <lcd_send_string+0xa>
}
 8000b76:	bf00      	nop
 8000b78:	bf00      	nop
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <LoRa_Reset>:
// Helper macros
#define NSS_LOW()    HAL_GPIO_WritePin(LORA_NSS_PORT, LORA_NSS_PIN, GPIO_PIN_RESET)
#define NSS_HIGH()   HAL_GPIO_WritePin(LORA_NSS_PORT, LORA_NSS_PIN, GPIO_PIN_SET)

// Reset the LoRa chip
void LoRa_Reset(void) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LORA_RESET_PORT, LORA_RESET_PIN, GPIO_PIN_RESET);
 8000b84:	2200      	movs	r2, #0
 8000b86:	2101      	movs	r1, #1
 8000b88:	4807      	ldr	r0, [pc, #28]	@ (8000ba8 <LoRa_Reset+0x28>)
 8000b8a:	f001 feee 	bl	800296a <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000b8e:	2001      	movs	r0, #1
 8000b90:	f000 ff6e 	bl	8001a70 <HAL_Delay>
    HAL_GPIO_WritePin(LORA_RESET_PORT, LORA_RESET_PIN, GPIO_PIN_SET);
 8000b94:	2201      	movs	r2, #1
 8000b96:	2101      	movs	r1, #1
 8000b98:	4803      	ldr	r0, [pc, #12]	@ (8000ba8 <LoRa_Reset+0x28>)
 8000b9a:	f001 fee6 	bl	800296a <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000b9e:	200a      	movs	r0, #10
 8000ba0:	f000 ff66 	bl	8001a70 <HAL_Delay>
}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40010c00 	.word	0x40010c00

08000bac <LoRa_WriteReg>:

// Write single register
void LoRa_WriteReg(uint8_t addr, uint8_t data) {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	460a      	mov	r2, r1
 8000bb6:	71fb      	strb	r3, [r7, #7]
 8000bb8:	4613      	mov	r3, r2
 8000bba:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];
    buf[0] = addr | 0x80; // MSB=1 for write
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	733b      	strb	r3, [r7, #12]
    buf[1] = data;
 8000bc6:	79bb      	ldrb	r3, [r7, #6]
 8000bc8:	737b      	strb	r3, [r7, #13]

    NSS_LOW();
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2110      	movs	r1, #16
 8000bce:	480a      	ldr	r0, [pc, #40]	@ (8000bf8 <LoRa_WriteReg+0x4c>)
 8000bd0:	f001 fecb 	bl	800296a <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, buf, 2, HAL_MAX_DELAY);
 8000bd4:	f107 010c 	add.w	r1, r7, #12
 8000bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bdc:	2202      	movs	r2, #2
 8000bde:	4807      	ldr	r0, [pc, #28]	@ (8000bfc <LoRa_WriteReg+0x50>)
 8000be0:	f004 f8c2 	bl	8004d68 <HAL_SPI_Transmit>
    NSS_HIGH();
 8000be4:	2201      	movs	r2, #1
 8000be6:	2110      	movs	r1, #16
 8000be8:	4803      	ldr	r0, [pc, #12]	@ (8000bf8 <LoRa_WriteReg+0x4c>)
 8000bea:	f001 febe 	bl	800296a <HAL_GPIO_WritePin>
}
 8000bee:	bf00      	nop
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40010800 	.word	0x40010800
 8000bfc:	20000160 	.word	0x20000160

08000c00 <LoRa_ReadReg>:

// Read single register
uint8_t LoRa_ReadReg(uint8_t addr) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	71fb      	strb	r3, [r7, #7]
    uint8_t tx = addr & 0x7F; // MSB=0 for read
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	73fb      	strb	r3, [r7, #15]
    uint8_t rx = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	73bb      	strb	r3, [r7, #14]

    NSS_LOW();
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2110      	movs	r1, #16
 8000c1c:	480e      	ldr	r0, [pc, #56]	@ (8000c58 <LoRa_ReadReg+0x58>)
 8000c1e:	f001 fea4 	bl	800296a <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &tx, 1, HAL_MAX_DELAY);
 8000c22:	f107 010f 	add.w	r1, r7, #15
 8000c26:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	480b      	ldr	r0, [pc, #44]	@ (8000c5c <LoRa_ReadReg+0x5c>)
 8000c2e:	f004 f89b 	bl	8004d68 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, &rx, 1, HAL_MAX_DELAY);
 8000c32:	f107 010e 	add.w	r1, r7, #14
 8000c36:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	4807      	ldr	r0, [pc, #28]	@ (8000c5c <LoRa_ReadReg+0x5c>)
 8000c3e:	f004 f9d7 	bl	8004ff0 <HAL_SPI_Receive>
    NSS_HIGH();
 8000c42:	2201      	movs	r2, #1
 8000c44:	2110      	movs	r1, #16
 8000c46:	4804      	ldr	r0, [pc, #16]	@ (8000c58 <LoRa_ReadReg+0x58>)
 8000c48:	f001 fe8f 	bl	800296a <HAL_GPIO_WritePin>

    return rx;
 8000c4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40010800 	.word	0x40010800
 8000c5c:	20000160 	.word	0x20000160

08000c60 <LoRa_WriteBuffer>:

// Write multiple bytes
void LoRa_WriteBuffer(uint8_t addr, uint8_t *buffer, uint8_t size) {
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	6039      	str	r1, [r7, #0]
 8000c6a:	71fb      	strb	r3, [r7, #7]
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	71bb      	strb	r3, [r7, #6]
    addr |= 0x80;
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	71fb      	strb	r3, [r7, #7]

    NSS_LOW();
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2110      	movs	r1, #16
 8000c7e:	480d      	ldr	r0, [pc, #52]	@ (8000cb4 <LoRa_WriteBuffer+0x54>)
 8000c80:	f001 fe73 	bl	800296a <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &addr, 1, HAL_MAX_DELAY);
 8000c84:	1df9      	adds	r1, r7, #7
 8000c86:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	480a      	ldr	r0, [pc, #40]	@ (8000cb8 <LoRa_WriteBuffer+0x58>)
 8000c8e:	f004 f86b 	bl	8004d68 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, buffer, size, HAL_MAX_DELAY);
 8000c92:	79bb      	ldrb	r3, [r7, #6]
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9a:	6839      	ldr	r1, [r7, #0]
 8000c9c:	4806      	ldr	r0, [pc, #24]	@ (8000cb8 <LoRa_WriteBuffer+0x58>)
 8000c9e:	f004 f863 	bl	8004d68 <HAL_SPI_Transmit>
    NSS_HIGH();
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2110      	movs	r1, #16
 8000ca6:	4803      	ldr	r0, [pc, #12]	@ (8000cb4 <LoRa_WriteBuffer+0x54>)
 8000ca8:	f001 fe5f 	bl	800296a <HAL_GPIO_WritePin>
}
 8000cac:	bf00      	nop
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40010800 	.word	0x40010800
 8000cb8:	20000160 	.word	0x20000160

08000cbc <LoRa_ReadBuffer>:

// Read multiple bytes
void LoRa_ReadBuffer(uint8_t addr, uint8_t *buffer, uint8_t size) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	6039      	str	r1, [r7, #0]
 8000cc6:	71fb      	strb	r3, [r7, #7]
 8000cc8:	4613      	mov	r3, r2
 8000cca:	71bb      	strb	r3, [r7, #6]
    addr &= 0x7F;
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	71fb      	strb	r3, [r7, #7]

    NSS_LOW();
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2110      	movs	r1, #16
 8000cda:	480d      	ldr	r0, [pc, #52]	@ (8000d10 <LoRa_ReadBuffer+0x54>)
 8000cdc:	f001 fe45 	bl	800296a <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &addr, 1, HAL_MAX_DELAY);
 8000ce0:	1df9      	adds	r1, r7, #7
 8000ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	480a      	ldr	r0, [pc, #40]	@ (8000d14 <LoRa_ReadBuffer+0x58>)
 8000cea:	f004 f83d 	bl	8004d68 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, buffer, size, HAL_MAX_DELAY);
 8000cee:	79bb      	ldrb	r3, [r7, #6]
 8000cf0:	b29a      	uxth	r2, r3
 8000cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf6:	6839      	ldr	r1, [r7, #0]
 8000cf8:	4806      	ldr	r0, [pc, #24]	@ (8000d14 <LoRa_ReadBuffer+0x58>)
 8000cfa:	f004 f979 	bl	8004ff0 <HAL_SPI_Receive>
    NSS_HIGH();
 8000cfe:	2201      	movs	r2, #1
 8000d00:	2110      	movs	r1, #16
 8000d02:	4803      	ldr	r0, [pc, #12]	@ (8000d10 <LoRa_ReadBuffer+0x54>)
 8000d04:	f001 fe31 	bl	800296a <HAL_GPIO_WritePin>
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40010800 	.word	0x40010800
 8000d14:	20000160 	.word	0x20000160

08000d18 <LoRa_Init>:

// LoRa Init (basic setup for 433MHz or 868/915MHz)
void LoRa_Init(void) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
    LoRa_Reset();
 8000d1c:	f7ff ff30 	bl	8000b80 <LoRa_Reset>

    // Put device in sleep mode
    LoRa_WriteReg(0x01, 0x00); // RegOpMode: Sleep, FSK mode
 8000d20:	2100      	movs	r1, #0
 8000d22:	2001      	movs	r0, #1
 8000d24:	f7ff ff42 	bl	8000bac <LoRa_WriteReg>
    HAL_Delay(10);
 8000d28:	200a      	movs	r0, #10
 8000d2a:	f000 fea1 	bl	8001a70 <HAL_Delay>

    // Switch to LoRa mode
    LoRa_WriteReg(0x01, 0x80); // RegOpMode: LoRa + Sleep
 8000d2e:	2180      	movs	r1, #128	@ 0x80
 8000d30:	2001      	movs	r0, #1
 8000d32:	f7ff ff3b 	bl	8000bac <LoRa_WriteReg>
    HAL_Delay(10);
 8000d36:	200a      	movs	r0, #10
 8000d38:	f000 fe9a 	bl	8001a70 <HAL_Delay>

    // Frequency setup (example: 433 MHz)
    LoRa_WriteReg(0x06, 0x6C); // RegFrfMsb
 8000d3c:	216c      	movs	r1, #108	@ 0x6c
 8000d3e:	2006      	movs	r0, #6
 8000d40:	f7ff ff34 	bl	8000bac <LoRa_WriteReg>
    LoRa_WriteReg(0x07, 0x80); // RegFrfMid
 8000d44:	2180      	movs	r1, #128	@ 0x80
 8000d46:	2007      	movs	r0, #7
 8000d48:	f7ff ff30 	bl	8000bac <LoRa_WriteReg>
    LoRa_WriteReg(0x08, 0x00); // RegFrfLsb
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	2008      	movs	r0, #8
 8000d50:	f7ff ff2c 	bl	8000bac <LoRa_WriteReg>

    // Power setup
    LoRa_WriteReg(0x09, 0x8F); // RegPaConfig: PA_BOOST, max power
 8000d54:	218f      	movs	r1, #143	@ 0x8f
 8000d56:	2009      	movs	r0, #9
 8000d58:	f7ff ff28 	bl	8000bac <LoRa_WriteReg>

    // LNA boost
    LoRa_WriteReg(0x0C, 0x23);
 8000d5c:	2123      	movs	r1, #35	@ 0x23
 8000d5e:	200c      	movs	r0, #12
 8000d60:	f7ff ff24 	bl	8000bac <LoRa_WriteReg>

    // Bandwidth + coding rate + explicit header
    LoRa_WriteReg(0x1D, 0x72);
 8000d64:	2172      	movs	r1, #114	@ 0x72
 8000d66:	201d      	movs	r0, #29
 8000d68:	f7ff ff20 	bl	8000bac <LoRa_WriteReg>

    // Spreading factor + CRC
    LoRa_WriteReg(0x1E, 0x74);
 8000d6c:	2174      	movs	r1, #116	@ 0x74
 8000d6e:	201e      	movs	r0, #30
 8000d70:	f7ff ff1c 	bl	8000bac <LoRa_WriteReg>

    // Preamble
    LoRa_WriteReg(0x20, 0x00);
 8000d74:	2100      	movs	r1, #0
 8000d76:	2020      	movs	r0, #32
 8000d78:	f7ff ff18 	bl	8000bac <LoRa_WriteReg>
    LoRa_WriteReg(0x21, 0x08);
 8000d7c:	2108      	movs	r1, #8
 8000d7e:	2021      	movs	r0, #33	@ 0x21
 8000d80:	f7ff ff14 	bl	8000bac <LoRa_WriteReg>

    // Continuous RX mode
    LoRa_WriteReg(0x01, 0x85);
 8000d84:	2185      	movs	r1, #133	@ 0x85
 8000d86:	2001      	movs	r0, #1
 8000d88:	f7ff ff10 	bl	8000bac <LoRa_WriteReg>
}
 8000d8c:	bf00      	nop
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <LoRa_SendPacket>:

// Send packet
void LoRa_SendPacket(uint8_t *buffer, uint8_t size) {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	460b      	mov	r3, r1
 8000d9a:	70fb      	strb	r3, [r7, #3]
    // Set to standby
    LoRa_WriteReg(0x01, 0x81);
 8000d9c:	2181      	movs	r1, #129	@ 0x81
 8000d9e:	2001      	movs	r0, #1
 8000da0:	f7ff ff04 	bl	8000bac <LoRa_WriteReg>

    // Set FIFO address
    LoRa_WriteReg(0x0E, 0x00); // FifoTxBaseAddr
 8000da4:	2100      	movs	r1, #0
 8000da6:	200e      	movs	r0, #14
 8000da8:	f7ff ff00 	bl	8000bac <LoRa_WriteReg>
    LoRa_WriteReg(0x0D, 0x00); // FifoAddrPtr
 8000dac:	2100      	movs	r1, #0
 8000dae:	200d      	movs	r0, #13
 8000db0:	f7ff fefc 	bl	8000bac <LoRa_WriteReg>

    // Write data
    LoRa_WriteBuffer(0x00, buffer, size);
 8000db4:	78fb      	ldrb	r3, [r7, #3]
 8000db6:	461a      	mov	r2, r3
 8000db8:	6879      	ldr	r1, [r7, #4]
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f7ff ff50 	bl	8000c60 <LoRa_WriteBuffer>

    // Payload length
    LoRa_WriteReg(0x22, size);
 8000dc0:	78fb      	ldrb	r3, [r7, #3]
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	2022      	movs	r0, #34	@ 0x22
 8000dc6:	f7ff fef1 	bl	8000bac <LoRa_WriteReg>

    // TX mode
    LoRa_WriteReg(0x01, 0x83);
 8000dca:	2183      	movs	r1, #131	@ 0x83
 8000dcc:	2001      	movs	r0, #1
 8000dce:	f7ff feed 	bl	8000bac <LoRa_WriteReg>

    // Wait for DIO0 = TxDone
    while (HAL_GPIO_ReadPin(LORA_DIO0_PORT, LORA_DIO0_PIN) == GPIO_PIN_RESET);
 8000dd2:	bf00      	nop
 8000dd4:	2102      	movs	r1, #2
 8000dd6:	4807      	ldr	r0, [pc, #28]	@ (8000df4 <LoRa_SendPacket+0x64>)
 8000dd8:	f001 fdb0 	bl	800293c <HAL_GPIO_ReadPin>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d0f8      	beq.n	8000dd4 <LoRa_SendPacket+0x44>

    // Clear IRQ flags
    LoRa_WriteReg(0x12, 0xFF);
 8000de2:	21ff      	movs	r1, #255	@ 0xff
 8000de4:	2012      	movs	r0, #18
 8000de6:	f7ff fee1 	bl	8000bac <LoRa_WriteReg>
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40010c00 	.word	0x40010c00

08000df8 <LoRa_ReceivePacket>:

// Receive packet
uint8_t LoRa_ReceivePacket(uint8_t *buffer) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
    uint8_t size = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	73fb      	strb	r3, [r7, #15]

    if (HAL_GPIO_ReadPin(LORA_DIO0_PORT, LORA_DIO0_PIN) == GPIO_PIN_SET) {
 8000e04:	2102      	movs	r1, #2
 8000e06:	4811      	ldr	r0, [pc, #68]	@ (8000e4c <LoRa_ReceivePacket+0x54>)
 8000e08:	f001 fd98 	bl	800293c <HAL_GPIO_ReadPin>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d116      	bne.n	8000e40 <LoRa_ReceivePacket+0x48>
        // Packet received
        size = LoRa_ReadReg(0x13); // RxNbBytes
 8000e12:	2013      	movs	r0, #19
 8000e14:	f7ff fef4 	bl	8000c00 <LoRa_ReadReg>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	73fb      	strb	r3, [r7, #15]
        LoRa_WriteReg(0x0D, LoRa_ReadReg(0x10)); // FifoAddrPtr = FifoRxCurrentAddr
 8000e1c:	2010      	movs	r0, #16
 8000e1e:	f7ff feef 	bl	8000c00 <LoRa_ReadReg>
 8000e22:	4603      	mov	r3, r0
 8000e24:	4619      	mov	r1, r3
 8000e26:	200d      	movs	r0, #13
 8000e28:	f7ff fec0 	bl	8000bac <LoRa_WriteReg>
        LoRa_ReadBuffer(0x00, buffer, size);
 8000e2c:	7bfb      	ldrb	r3, [r7, #15]
 8000e2e:	461a      	mov	r2, r3
 8000e30:	6879      	ldr	r1, [r7, #4]
 8000e32:	2000      	movs	r0, #0
 8000e34:	f7ff ff42 	bl	8000cbc <LoRa_ReadBuffer>

        // Clear IRQ
        LoRa_WriteReg(0x12, 0xFF);
 8000e38:	21ff      	movs	r1, #255	@ 0xff
 8000e3a:	2012      	movs	r0, #18
 8000e3c:	f7ff feb6 	bl	8000bac <LoRa_WriteReg>
    }

    return size;
 8000e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40010c00 	.word	0x40010c00

08000e50 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8000e50:	b5b0      	push	{r4, r5, r7, lr}
 8000e52:	b08e      	sub	sp, #56	@ 0x38
 8000e54:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e56:	f000 fda9 	bl	80019ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e5a:	f000 f8a7 	bl	8000fac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e5e:	f000 fa19 	bl	8001294 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000e62:	f000 f901 	bl	8001068 <MX_ADC1_Init>
  MX_RTC_Init();
 8000e66:	f000 f96b 	bl	8001140 <MX_RTC_Init>
  MX_SPI1_Init();
 8000e6a:	f000 f9b3 	bl	80011d4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000e6e:	f000 f9e7 	bl	8001240 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8000e72:	f000 f937 	bl	80010e4 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  lcd_init();  // Initialize the LCD
 8000e76:	f7ff fe34 	bl	8000ae2 <lcd_init>

  ADC_Init(&hadc1);
 8000e7a:	4841      	ldr	r0, [pc, #260]	@ (8000f80 <main+0x130>)
 8000e7c:	f7ff fc4c 	bl	8000718 <ADC_Init>

  LoRa_Init();   // initialize LoRa
 8000e80:	f7ff ff4a 	bl	8000d18 <LoRa_Init>

  char msg[] = "LoRa Receiver Ready\r\n";
 8000e84:	4b3f      	ldr	r3, [pc, #252]	@ (8000f84 <main+0x134>)
 8000e86:	f107 0418 	add.w	r4, r7, #24
 8000e8a:	461d      	mov	r5, r3
 8000e8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e90:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e94:	6020      	str	r0, [r4, #0]
 8000e96:	3404      	adds	r4, #4
 8000e98:	8021      	strh	r1, [r4, #0]
  HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000e9a:	f107 0318 	add.w	r3, r7, #24
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff f95e 	bl	8000160 <strlen>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	b29a      	uxth	r2, r3
 8000ea8:	f107 0118 	add.w	r1, r7, #24
 8000eac:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb0:	4835      	ldr	r0, [pc, #212]	@ (8000f88 <main+0x138>)
 8000eb2:	f004 fcba 	bl	800582a <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
      // Read all ADC channels
      ADC_ReadAllChannels(&hadc1, &adcData);
 8000eb6:	4935      	ldr	r1, [pc, #212]	@ (8000f8c <main+0x13c>)
 8000eb8:	4831      	ldr	r0, [pc, #196]	@ (8000f80 <main+0x130>)
 8000eba:	f7ff fc3d 	bl	8000738 <ADC_ReadAllChannels>

      // LoRa operation based on mode
      if (loraMode == 1) {
 8000ebe:	4b34      	ldr	r3, [pc, #208]	@ (8000f90 <main+0x140>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d110      	bne.n	8000ee8 <main+0x98>
          // Transmitter
          uint8_t msg[] = "Hello from STM32!";
 8000ec6:	4b33      	ldr	r3, [pc, #204]	@ (8000f94 <main+0x144>)
 8000ec8:	1d3c      	adds	r4, r7, #4
 8000eca:	461d      	mov	r5, r3
 8000ecc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ece:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ed0:	682b      	ldr	r3, [r5, #0]
 8000ed2:	8023      	strh	r3, [r4, #0]
          LoRa_SendPacket(msg, sizeof(msg) - 1);
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	2111      	movs	r1, #17
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff ff59 	bl	8000d90 <LoRa_SendPacket>
          HAL_Delay(1000);
 8000ede:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ee2:	f000 fdc5 	bl	8001a70 <HAL_Delay>
 8000ee6:	e012      	b.n	8000f0e <main+0xbe>
      } else {
          // Receiver
          uint8_t len = LoRa_ReceivePacket(rxBuffer);
 8000ee8:	482b      	ldr	r0, [pc, #172]	@ (8000f98 <main+0x148>)
 8000eea:	f7ff ff85 	bl	8000df8 <LoRa_ReceivePacket>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          if (len > 0) {
 8000ef4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d008      	beq.n	8000f0e <main+0xbe>
              HAL_UART_Transmit(&huart1, rxBuffer, len, HAL_MAX_DELAY);
 8000efc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	f04f 33ff 	mov.w	r3, #4294967295
 8000f06:	4924      	ldr	r1, [pc, #144]	@ (8000f98 <main+0x148>)
 8000f08:	481f      	ldr	r0, [pc, #124]	@ (8000f88 <main+0x138>)
 8000f0a:	f004 fc8e 	bl	800582a <HAL_UART_Transmit>
          }
      }

      // RTC time
      Get_Time();
 8000f0e:	f000 fa87 	bl	8001420 <Get_Time>
      sprintf(buffer, "%02d:%02d:%02d", time.hour, time.minutes, time.seconds);
 8000f12:	4b22      	ldr	r3, [pc, #136]	@ (8000f9c <main+0x14c>)
 8000f14:	789b      	ldrb	r3, [r3, #2]
 8000f16:	461a      	mov	r2, r3
 8000f18:	4b20      	ldr	r3, [pc, #128]	@ (8000f9c <main+0x14c>)
 8000f1a:	785b      	ldrb	r3, [r3, #1]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000f9c <main+0x14c>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	9300      	str	r3, [sp, #0]
 8000f24:	460b      	mov	r3, r1
 8000f26:	491e      	ldr	r1, [pc, #120]	@ (8000fa0 <main+0x150>)
 8000f28:	481e      	ldr	r0, [pc, #120]	@ (8000fa4 <main+0x154>)
 8000f2a:	f004 fee9 	bl	8005d00 <siprintf>
      lcd_put_cur(0, 0);
 8000f2e:	2100      	movs	r1, #0
 8000f30:	2000      	movs	r0, #0
 8000f32:	f7ff fdb7 	bl	8000aa4 <lcd_put_cur>
      lcd_send_string(buffer);
 8000f36:	481b      	ldr	r0, [pc, #108]	@ (8000fa4 <main+0x154>)
 8000f38:	f7ff fe0d 	bl	8000b56 <lcd_send_string>

      sprintf(buffer, "%02d-%02d-20%02d", time.dayofmonth, time.month, time.year);
 8000f3c:	4b17      	ldr	r3, [pc, #92]	@ (8000f9c <main+0x14c>)
 8000f3e:	791b      	ldrb	r3, [r3, #4]
 8000f40:	461a      	mov	r2, r3
 8000f42:	4b16      	ldr	r3, [pc, #88]	@ (8000f9c <main+0x14c>)
 8000f44:	795b      	ldrb	r3, [r3, #5]
 8000f46:	4619      	mov	r1, r3
 8000f48:	4b14      	ldr	r3, [pc, #80]	@ (8000f9c <main+0x14c>)
 8000f4a:	799b      	ldrb	r3, [r3, #6]
 8000f4c:	9300      	str	r3, [sp, #0]
 8000f4e:	460b      	mov	r3, r1
 8000f50:	4915      	ldr	r1, [pc, #84]	@ (8000fa8 <main+0x158>)
 8000f52:	4814      	ldr	r0, [pc, #80]	@ (8000fa4 <main+0x154>)
 8000f54:	f004 fed4 	bl	8005d00 <siprintf>
      lcd_put_cur(1, 0);
 8000f58:	2100      	movs	r1, #0
 8000f5a:	2001      	movs	r0, #1
 8000f5c:	f7ff fda2 	bl	8000aa4 <lcd_put_cur>
      lcd_send_string(buffer);
 8000f60:	4810      	ldr	r0, [pc, #64]	@ (8000fa4 <main+0x154>)
 8000f62:	f7ff fdf8 	bl	8000b56 <lcd_send_string>

      // RTC temperature
      lcd_put_cur(0, 10);
 8000f66:	210a      	movs	r1, #10
 8000f68:	2000      	movs	r0, #0
 8000f6a:	f7ff fd9b 	bl	8000aa4 <lcd_put_cur>
      lcd_send_string(buffer);
 8000f6e:	480d      	ldr	r0, [pc, #52]	@ (8000fa4 <main+0x154>)
 8000f70:	f7ff fdf1 	bl	8000b56 <lcd_send_string>

      HAL_Delay(500);
 8000f74:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f78:	f000 fd7a 	bl	8001a70 <HAL_Delay>
      ADC_ReadAllChannels(&hadc1, &adcData);
 8000f7c:	e79b      	b.n	8000eb6 <main+0x66>
 8000f7e:	bf00      	nop
 8000f80:	200000c8 	.word	0x200000c8
 8000f84:	080066f4 	.word	0x080066f4
 8000f88:	200001b8 	.word	0x200001b8
 8000f8c:	20000214 	.word	0x20000214
 8000f90:	20000000 	.word	0x20000000
 8000f94:	0800670c 	.word	0x0800670c
 8000f98:	20000088 	.word	0x20000088
 8000f9c:	2000024c 	.word	0x2000024c
 8000fa0:	080066d0 	.word	0x080066d0
 8000fa4:	20000200 	.word	0x20000200
 8000fa8:	080066e0 	.word	0x080066e0

08000fac <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b094      	sub	sp, #80	@ 0x50
 8000fb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000fb2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fb6:	2228      	movs	r2, #40	@ 0x28
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f004 fec2 	bl	8005d44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000fd0:	1d3b      	adds	r3, r7, #4
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fe0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fea:	2301      	movs	r3, #1
 8000fec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ff2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ff6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ff8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000ffc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000ffe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001002:	4618      	mov	r0, r3
 8001004:	f002 fd2c 	bl	8003a60 <HAL_RCC_OscConfig>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <SystemClock_Config+0x66>
    Error_Handler();
 800100e:	f000 f9e9 	bl	80013e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001012:	230f      	movs	r3, #15
 8001014:	617b      	str	r3, [r7, #20]
                                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001016:	2302      	movs	r3, #2
 8001018:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800101e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001022:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001024:	2300      	movs	r3, #0
 8001026:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	2102      	movs	r1, #2
 800102e:	4618      	mov	r0, r3
 8001030:	f002 ff98 	bl	8003f64 <HAL_RCC_ClockConfig>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <SystemClock_Config+0x92>
    Error_Handler();
 800103a:	f000 f9d3 	bl	80013e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC | RCC_PERIPHCLK_ADC;
 800103e:	2303      	movs	r3, #3
 8001040:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV128;
 8001042:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001046:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001048:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800104c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	4618      	mov	r0, r3
 8001052:	f003 f915 	bl	8004280 <HAL_RCCEx_PeriphCLKConfig>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <SystemClock_Config+0xb4>
    Error_Handler();
 800105c:	f000 f9c2 	bl	80013e4 <Error_Handler>
  }
}
 8001060:	bf00      	nop
 8001062:	3750      	adds	r7, #80	@ 0x50
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <MX_ADC1_Init>:
/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = { 0 };
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001078:	4b18      	ldr	r3, [pc, #96]	@ (80010dc <MX_ADC1_Init+0x74>)
 800107a:	4a19      	ldr	r2, [pc, #100]	@ (80010e0 <MX_ADC1_Init+0x78>)
 800107c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800107e:	4b17      	ldr	r3, [pc, #92]	@ (80010dc <MX_ADC1_Init+0x74>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001084:	4b15      	ldr	r3, [pc, #84]	@ (80010dc <MX_ADC1_Init+0x74>)
 8001086:	2200      	movs	r2, #0
 8001088:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800108a:	4b14      	ldr	r3, [pc, #80]	@ (80010dc <MX_ADC1_Init+0x74>)
 800108c:	2200      	movs	r2, #0
 800108e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001090:	4b12      	ldr	r3, [pc, #72]	@ (80010dc <MX_ADC1_Init+0x74>)
 8001092:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001096:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001098:	4b10      	ldr	r3, [pc, #64]	@ (80010dc <MX_ADC1_Init+0x74>)
 800109a:	2200      	movs	r2, #0
 800109c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800109e:	4b0f      	ldr	r3, [pc, #60]	@ (80010dc <MX_ADC1_Init+0x74>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80010a4:	480d      	ldr	r0, [pc, #52]	@ (80010dc <MX_ADC1_Init+0x74>)
 80010a6:	f000 fd07 	bl	8001ab8 <HAL_ADC_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_ADC1_Init+0x4c>
    Error_Handler();
 80010b0:	f000 f998 	bl	80013e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010b8:	2301      	movs	r3, #1
 80010ba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80010bc:	2300      	movs	r3, #0
 80010be:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	4619      	mov	r1, r3
 80010c4:	4805      	ldr	r0, [pc, #20]	@ (80010dc <MX_ADC1_Init+0x74>)
 80010c6:	f000 ff8f 	bl	8001fe8 <HAL_ADC_ConfigChannel>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_ADC1_Init+0x6c>
    Error_Handler();
 80010d0:	f000 f988 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 80010d4:	bf00      	nop
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	200000c8 	.word	0x200000c8
 80010e0:	40012400 	.word	0x40012400

080010e4 <MX_I2C2_Init>:
/**
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void) {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80010e8:	4b12      	ldr	r3, [pc, #72]	@ (8001134 <MX_I2C2_Init+0x50>)
 80010ea:	4a13      	ldr	r2, [pc, #76]	@ (8001138 <MX_I2C2_Init+0x54>)
 80010ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80010ee:	4b11      	ldr	r3, [pc, #68]	@ (8001134 <MX_I2C2_Init+0x50>)
 80010f0:	4a12      	ldr	r2, [pc, #72]	@ (800113c <MX_I2C2_Init+0x58>)
 80010f2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001134 <MX_I2C2_Init+0x50>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80010fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001134 <MX_I2C2_Init+0x50>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001100:	4b0c      	ldr	r3, [pc, #48]	@ (8001134 <MX_I2C2_Init+0x50>)
 8001102:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001106:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001108:	4b0a      	ldr	r3, [pc, #40]	@ (8001134 <MX_I2C2_Init+0x50>)
 800110a:	2200      	movs	r2, #0
 800110c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800110e:	4b09      	ldr	r3, [pc, #36]	@ (8001134 <MX_I2C2_Init+0x50>)
 8001110:	2200      	movs	r2, #0
 8001112:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001114:	4b07      	ldr	r3, [pc, #28]	@ (8001134 <MX_I2C2_Init+0x50>)
 8001116:	2200      	movs	r2, #0
 8001118:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800111a:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <MX_I2C2_Init+0x50>)
 800111c:	2200      	movs	r2, #0
 800111e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8001120:	4804      	ldr	r0, [pc, #16]	@ (8001134 <MX_I2C2_Init+0x50>)
 8001122:	f001 fc3b 	bl	800299c <HAL_I2C_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_I2C2_Init+0x4c>
    Error_Handler();
 800112c:	f000 f95a 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */
}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}
 8001134:	200000f8 	.word	0x200000f8
 8001138:	40005800 	.word	0x40005800
 800113c:	000186a0 	.word	0x000186a0

08001140 <MX_RTC_Init>:
/**
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void) {
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = { 0 };
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	2100      	movs	r1, #0
 800114a:	460a      	mov	r2, r1
 800114c:	801a      	strh	r2, [r3, #0]
 800114e:	460a      	mov	r2, r1
 8001150:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = { 0 };
 8001152:	2300      	movs	r3, #0
 8001154:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001156:	4b1d      	ldr	r3, [pc, #116]	@ (80011cc <MX_RTC_Init+0x8c>)
 8001158:	4a1d      	ldr	r2, [pc, #116]	@ (80011d0 <MX_RTC_Init+0x90>)
 800115a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800115c:	4b1b      	ldr	r3, [pc, #108]	@ (80011cc <MX_RTC_Init+0x8c>)
 800115e:	f04f 32ff 	mov.w	r2, #4294967295
 8001162:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001164:	4b19      	ldr	r3, [pc, #100]	@ (80011cc <MX_RTC_Init+0x8c>)
 8001166:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800116a:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 800116c:	4817      	ldr	r0, [pc, #92]	@ (80011cc <MX_RTC_Init+0x8c>)
 800116e:	f003 f9f3 	bl	8004558 <HAL_RTC_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_RTC_Init+0x3c>
    Error_Handler();
 8001178:	f000 f934 	bl	80013e4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800117c:	2300      	movs	r3, #0
 800117e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001180:	2300      	movs	r3, #0
 8001182:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001184:	2300      	movs	r3, #0
 8001186:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	2201      	movs	r2, #1
 800118c:	4619      	mov	r1, r3
 800118e:	480f      	ldr	r0, [pc, #60]	@ (80011cc <MX_RTC_Init+0x8c>)
 8001190:	f003 fa6e 	bl	8004670 <HAL_RTC_SetTime>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_RTC_Init+0x5e>
    Error_Handler();
 800119a:	f000 f923 	bl	80013e4 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 800119e:	2301      	movs	r3, #1
 80011a0:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80011a2:	2301      	movs	r3, #1
 80011a4:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 80011a6:	2301      	movs	r3, #1
 80011a8:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK) {
 80011ae:	463b      	mov	r3, r7
 80011b0:	2201      	movs	r2, #1
 80011b2:	4619      	mov	r1, r3
 80011b4:	4805      	ldr	r0, [pc, #20]	@ (80011cc <MX_RTC_Init+0x8c>)
 80011b6:	f003 faf3 	bl	80047a0 <HAL_RTC_SetDate>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_RTC_Init+0x84>
    Error_Handler();
 80011c0:	f000 f910 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	2000014c 	.word	0x2000014c
 80011d0:	40002800 	.word	0x40002800

080011d4 <MX_SPI1_Init>:
/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011d8:	4b17      	ldr	r3, [pc, #92]	@ (8001238 <MX_SPI1_Init+0x64>)
 80011da:	4a18      	ldr	r2, [pc, #96]	@ (800123c <MX_SPI1_Init+0x68>)
 80011dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011de:	4b16      	ldr	r3, [pc, #88]	@ (8001238 <MX_SPI1_Init+0x64>)
 80011e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011e6:	4b14      	ldr	r3, [pc, #80]	@ (8001238 <MX_SPI1_Init+0x64>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011ec:	4b12      	ldr	r3, [pc, #72]	@ (8001238 <MX_SPI1_Init+0x64>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011f2:	4b11      	ldr	r3, [pc, #68]	@ (8001238 <MX_SPI1_Init+0x64>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001238 <MX_SPI1_Init+0x64>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001238 <MX_SPI1_Init+0x64>)
 8001200:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001204:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001206:	4b0c      	ldr	r3, [pc, #48]	@ (8001238 <MX_SPI1_Init+0x64>)
 8001208:	2208      	movs	r2, #8
 800120a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800120c:	4b0a      	ldr	r3, [pc, #40]	@ (8001238 <MX_SPI1_Init+0x64>)
 800120e:	2200      	movs	r2, #0
 8001210:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001212:	4b09      	ldr	r3, [pc, #36]	@ (8001238 <MX_SPI1_Init+0x64>)
 8001214:	2200      	movs	r2, #0
 8001216:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001218:	4b07      	ldr	r3, [pc, #28]	@ (8001238 <MX_SPI1_Init+0x64>)
 800121a:	2200      	movs	r2, #0
 800121c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800121e:	4b06      	ldr	r3, [pc, #24]	@ (8001238 <MX_SPI1_Init+0x64>)
 8001220:	220a      	movs	r2, #10
 8001222:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001224:	4804      	ldr	r0, [pc, #16]	@ (8001238 <MX_SPI1_Init+0x64>)
 8001226:	f003 fd1b 	bl	8004c60 <HAL_SPI_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_SPI1_Init+0x60>
    Error_Handler();
 8001230:	f000 f8d8 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000160 	.word	0x20000160
 800123c:	40013000 	.word	0x40013000

08001240 <MX_USART1_UART_Init>:
/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void) {
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001244:	4b11      	ldr	r3, [pc, #68]	@ (800128c <MX_USART1_UART_Init+0x4c>)
 8001246:	4a12      	ldr	r2, [pc, #72]	@ (8001290 <MX_USART1_UART_Init+0x50>)
 8001248:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800124a:	4b10      	ldr	r3, [pc, #64]	@ (800128c <MX_USART1_UART_Init+0x4c>)
 800124c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001250:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001252:	4b0e      	ldr	r3, [pc, #56]	@ (800128c <MX_USART1_UART_Init+0x4c>)
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001258:	4b0c      	ldr	r3, [pc, #48]	@ (800128c <MX_USART1_UART_Init+0x4c>)
 800125a:	2200      	movs	r2, #0
 800125c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800125e:	4b0b      	ldr	r3, [pc, #44]	@ (800128c <MX_USART1_UART_Init+0x4c>)
 8001260:	2200      	movs	r2, #0
 8001262:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001264:	4b09      	ldr	r3, [pc, #36]	@ (800128c <MX_USART1_UART_Init+0x4c>)
 8001266:	220c      	movs	r2, #12
 8001268:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800126a:	4b08      	ldr	r3, [pc, #32]	@ (800128c <MX_USART1_UART_Init+0x4c>)
 800126c:	2200      	movs	r2, #0
 800126e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001270:	4b06      	ldr	r3, [pc, #24]	@ (800128c <MX_USART1_UART_Init+0x4c>)
 8001272:	2200      	movs	r2, #0
 8001274:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001276:	4805      	ldr	r0, [pc, #20]	@ (800128c <MX_USART1_UART_Init+0x4c>)
 8001278:	f004 fa87 	bl	800578a <HAL_UART_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_USART1_UART_Init+0x46>
    Error_Handler();
 8001282:	f000 f8af 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	200001b8 	.word	0x200001b8
 8001290:	40013800 	.word	0x40013800

08001294 <MX_GPIO_Init>:
/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void) {
 8001294:	b580      	push	{r7, lr}
 8001296:	b088      	sub	sp, #32
 8001298:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800129a:	f107 0310 	add.w	r3, r7, #16
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a8:	4b4a      	ldr	r3, [pc, #296]	@ (80013d4 <MX_GPIO_Init+0x140>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	4a49      	ldr	r2, [pc, #292]	@ (80013d4 <MX_GPIO_Init+0x140>)
 80012ae:	f043 0310 	orr.w	r3, r3, #16
 80012b2:	6193      	str	r3, [r2, #24]
 80012b4:	4b47      	ldr	r3, [pc, #284]	@ (80013d4 <MX_GPIO_Init+0x140>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	f003 0310 	and.w	r3, r3, #16
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c0:	4b44      	ldr	r3, [pc, #272]	@ (80013d4 <MX_GPIO_Init+0x140>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	4a43      	ldr	r2, [pc, #268]	@ (80013d4 <MX_GPIO_Init+0x140>)
 80012c6:	f043 0320 	orr.w	r3, r3, #32
 80012ca:	6193      	str	r3, [r2, #24]
 80012cc:	4b41      	ldr	r3, [pc, #260]	@ (80013d4 <MX_GPIO_Init+0x140>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	f003 0320 	and.w	r3, r3, #32
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d8:	4b3e      	ldr	r3, [pc, #248]	@ (80013d4 <MX_GPIO_Init+0x140>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	4a3d      	ldr	r2, [pc, #244]	@ (80013d4 <MX_GPIO_Init+0x140>)
 80012de:	f043 0304 	orr.w	r3, r3, #4
 80012e2:	6193      	str	r3, [r2, #24]
 80012e4:	4b3b      	ldr	r3, [pc, #236]	@ (80013d4 <MX_GPIO_Init+0x140>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	607b      	str	r3, [r7, #4]
 80012ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f0:	4b38      	ldr	r3, [pc, #224]	@ (80013d4 <MX_GPIO_Init+0x140>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	4a37      	ldr	r2, [pc, #220]	@ (80013d4 <MX_GPIO_Init+0x140>)
 80012f6:	f043 0308 	orr.w	r3, r3, #8
 80012fa:	6193      	str	r3, [r2, #24]
 80012fc:	4b35      	ldr	r3, [pc, #212]	@ (80013d4 <MX_GPIO_Init+0x140>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	f003 0308 	and.w	r3, r3, #8
 8001304:	603b      	str	r3, [r7, #0]
 8001306:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001308:	2201      	movs	r2, #1
 800130a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800130e:	4832      	ldr	r0, [pc, #200]	@ (80013d8 <MX_GPIO_Init+0x144>)
 8001310:	f001 fb2b 	bl	800296a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Relay1_Pin | Relay2_Pin | Relay3_Pin | SWITCH4_Pin | LORA_STATUS_Pin | RF_DATA_Pin, GPIO_PIN_RESET);
 8001314:	2200      	movs	r2, #0
 8001316:	f248 01c7 	movw	r1, #32967	@ 0x80c7
 800131a:	4830      	ldr	r0, [pc, #192]	@ (80013dc <MX_GPIO_Init+0x148>)
 800131c:	f001 fb25 	bl	800296a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin | LED2_Pin | LED3_Pin, GPIO_PIN_SET);
 8001320:	2201      	movs	r2, #1
 8001322:	f44f 51c8 	mov.w	r1, #6400	@ 0x1900
 8001326:	482e      	ldr	r0, [pc, #184]	@ (80013e0 <MX_GPIO_Init+0x14c>)
 8001328:	f001 fb1f 	bl	800296a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_SELECT_GPIO_Port, LORA_SELECT_Pin, GPIO_PIN_RESET);
 800132c:	2200      	movs	r2, #0
 800132e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001332:	482b      	ldr	r0, [pc, #172]	@ (80013e0 <MX_GPIO_Init+0x14c>)
 8001334:	f001 fb19 	bl	800296a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED4_Pin | LED5_Pin, GPIO_PIN_SET);
 8001338:	2201      	movs	r2, #1
 800133a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800133e:	4827      	ldr	r0, [pc, #156]	@ (80013dc <MX_GPIO_Init+0x148>)
 8001340:	f001 fb13 	bl	800296a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001344:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001348:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134a:	2301      	movs	r3, #1
 800134c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2302      	movs	r3, #2
 8001354:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001356:	f107 0310 	add.w	r3, r7, #16
 800135a:	4619      	mov	r1, r3
 800135c:	481e      	ldr	r0, [pc, #120]	@ (80013d8 <MX_GPIO_Init+0x144>)
 800135e:	f001 f969 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pins : AC_voltage_Pin AC_current_Pin */
  GPIO_InitStruct.Pin = AC_voltage_Pin | AC_current_Pin;
 8001362:	23c0      	movs	r3, #192	@ 0xc0
 8001364:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001366:	2303      	movs	r3, #3
 8001368:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136a:	f107 0310 	add.w	r3, r7, #16
 800136e:	4619      	mov	r1, r3
 8001370:	481b      	ldr	r0, [pc, #108]	@ (80013e0 <MX_GPIO_Init+0x14c>)
 8001372:	f001 f95f 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pins : Relay1_Pin Relay2_Pin Relay3_Pin SWITCH4_Pin
                           LORA_STATUS_Pin RF_DATA_Pin LED4_Pin LED5_Pin */
  GPIO_InitStruct.Pin = Relay1_Pin | Relay2_Pin | Relay3_Pin | SWITCH4_Pin
 8001376:	f248 33c7 	movw	r3, #33735	@ 0x83c7
 800137a:	613b      	str	r3, [r7, #16]
                        | LORA_STATUS_Pin | RF_DATA_Pin | LED4_Pin | LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137c:	2301      	movs	r3, #1
 800137e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001384:	2302      	movs	r3, #2
 8001386:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001388:	f107 0310 	add.w	r3, r7, #16
 800138c:	4619      	mov	r1, r3
 800138e:	4813      	ldr	r0, [pc, #76]	@ (80013dc <MX_GPIO_Init+0x148>)
 8001390:	f001 f950 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWITCH1_Pin SWITCH2_Pin SWITCH3_Pin */
  GPIO_InitStruct.Pin = SWITCH1_Pin | SWITCH2_Pin | SWITCH3_Pin;
 8001394:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8001398:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a2:	f107 0310 	add.w	r3, r7, #16
 80013a6:	4619      	mov	r1, r3
 80013a8:	480c      	ldr	r0, [pc, #48]	@ (80013dc <MX_GPIO_Init+0x148>)
 80013aa:	f001 f943 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LORA_SELECT_Pin */
  GPIO_InitStruct.Pin = LED1_Pin | LED2_Pin | LED3_Pin | LORA_SELECT_Pin;
 80013ae:	f44f 4319 	mov.w	r3, #39168	@ 0x9900
 80013b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b4:	2301      	movs	r3, #1
 80013b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013bc:	2302      	movs	r3, #2
 80013be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c0:	f107 0310 	add.w	r3, r7, #16
 80013c4:	4619      	mov	r1, r3
 80013c6:	4806      	ldr	r0, [pc, #24]	@ (80013e0 <MX_GPIO_Init+0x14c>)
 80013c8:	f001 f934 	bl	8002634 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80013cc:	bf00      	nop
 80013ce:	3720      	adds	r7, #32
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40021000 	.word	0x40021000
 80013d8:	40011000 	.word	0x40011000
 80013dc:	40010c00 	.word	0x40010c00
 80013e0:	40010800 	.word	0x40010800

080013e4 <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void) {
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e8:	b672      	cpsid	i
}
 80013ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 80013ec:	bf00      	nop
 80013ee:	e7fd      	b.n	80013ec <Error_Handler+0x8>

080013f0 <bcdToDec>:
  * @brief Converts a Binary Coded Decimal (BCD) number to a normal decimal number.
  * @param val: The BCD value to convert.
  * @retval The decimal representation of the value.
  */
int bcdToDec(uint8_t val)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	091b      	lsrs	r3, r3, #4
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	461a      	mov	r2, r3
 8001402:	4613      	mov	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4413      	add	r3, r2
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	461a      	mov	r2, r3
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	f003 030f 	and.w	r3, r3, #15
 8001412:	4413      	add	r3, r2
}
 8001414:	4618      	mov	r0, r3
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr
	...

08001420 <Get_Time>:
  *        The read values are stored in the global 'time' structure.
  * @param None
  * @retval None
  */
void Get_Time (void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af04      	add	r7, sp, #16
	uint8_t get_time[7];
	// Read 7 bytes starting from address 0x00 (seconds register)
	HAL_I2C_Mem_Read(&hi2c2, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000);
 8001426:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800142a:	9302      	str	r3, [sp, #8]
 800142c:	2307      	movs	r3, #7
 800142e:	9301      	str	r3, [sp, #4]
 8001430:	463b      	mov	r3, r7
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	2301      	movs	r3, #1
 8001436:	2200      	movs	r2, #0
 8001438:	21d0      	movs	r1, #208	@ 0xd0
 800143a:	481f      	ldr	r0, [pc, #124]	@ (80014b8 <Get_Time+0x98>)
 800143c:	f001 fcf0 	bl	8002e20 <HAL_I2C_Mem_Read>
	time.seconds = bcdToDec(get_time[0]);
 8001440:	783b      	ldrb	r3, [r7, #0]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff ffd4 	bl	80013f0 <bcdToDec>
 8001448:	4603      	mov	r3, r0
 800144a:	b2da      	uxtb	r2, r3
 800144c:	4b1b      	ldr	r3, [pc, #108]	@ (80014bc <Get_Time+0x9c>)
 800144e:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(get_time[1]);
 8001450:	787b      	ldrb	r3, [r7, #1]
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff ffcc 	bl	80013f0 <bcdToDec>
 8001458:	4603      	mov	r3, r0
 800145a:	b2da      	uxtb	r2, r3
 800145c:	4b17      	ldr	r3, [pc, #92]	@ (80014bc <Get_Time+0x9c>)
 800145e:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(get_time[2]);
 8001460:	78bb      	ldrb	r3, [r7, #2]
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff ffc4 	bl	80013f0 <bcdToDec>
 8001468:	4603      	mov	r3, r0
 800146a:	b2da      	uxtb	r2, r3
 800146c:	4b13      	ldr	r3, [pc, #76]	@ (80014bc <Get_Time+0x9c>)
 800146e:	709a      	strb	r2, [r3, #2]
	time.dayofweek = bcdToDec(get_time[3]);
 8001470:	78fb      	ldrb	r3, [r7, #3]
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff ffbc 	bl	80013f0 <bcdToDec>
 8001478:	4603      	mov	r3, r0
 800147a:	b2da      	uxtb	r2, r3
 800147c:	4b0f      	ldr	r3, [pc, #60]	@ (80014bc <Get_Time+0x9c>)
 800147e:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(get_time[4]);
 8001480:	793b      	ldrb	r3, [r7, #4]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff ffb4 	bl	80013f0 <bcdToDec>
 8001488:	4603      	mov	r3, r0
 800148a:	b2da      	uxtb	r2, r3
 800148c:	4b0b      	ldr	r3, [pc, #44]	@ (80014bc <Get_Time+0x9c>)
 800148e:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(get_time[5]);
 8001490:	797b      	ldrb	r3, [r7, #5]
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff ffac 	bl	80013f0 <bcdToDec>
 8001498:	4603      	mov	r3, r0
 800149a:	b2da      	uxtb	r2, r3
 800149c:	4b07      	ldr	r3, [pc, #28]	@ (80014bc <Get_Time+0x9c>)
 800149e:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(get_time[6]);
 80014a0:	79bb      	ldrb	r3, [r7, #6]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff ffa4 	bl	80013f0 <bcdToDec>
 80014a8:	4603      	mov	r3, r0
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	4b03      	ldr	r3, [pc, #12]	@ (80014bc <Get_Time+0x9c>)
 80014ae:	719a      	strb	r2, [r3, #6]
}
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	200000f8 	.word	0x200000f8
 80014bc:	2000024c 	.word	0x2000024c

080014c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014c6:	4b15      	ldr	r3, [pc, #84]	@ (800151c <HAL_MspInit+0x5c>)
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	4a14      	ldr	r2, [pc, #80]	@ (800151c <HAL_MspInit+0x5c>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	6193      	str	r3, [r2, #24]
 80014d2:	4b12      	ldr	r3, [pc, #72]	@ (800151c <HAL_MspInit+0x5c>)
 80014d4:	699b      	ldr	r3, [r3, #24]
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014de:	4b0f      	ldr	r3, [pc, #60]	@ (800151c <HAL_MspInit+0x5c>)
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	4a0e      	ldr	r2, [pc, #56]	@ (800151c <HAL_MspInit+0x5c>)
 80014e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014e8:	61d3      	str	r3, [r2, #28]
 80014ea:	4b0c      	ldr	r3, [pc, #48]	@ (800151c <HAL_MspInit+0x5c>)
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001520 <HAL_MspInit+0x60>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	4a04      	ldr	r2, [pc, #16]	@ (8001520 <HAL_MspInit+0x60>)
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001512:	bf00      	nop
 8001514:	3714      	adds	r7, #20
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr
 800151c:	40021000 	.word	0x40021000
 8001520:	40010000 	.word	0x40010000

08001524 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b088      	sub	sp, #32
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152c:	f107 0310 	add.w	r3, r7, #16
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a14      	ldr	r2, [pc, #80]	@ (8001590 <HAL_ADC_MspInit+0x6c>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d121      	bne.n	8001588 <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001544:	4b13      	ldr	r3, [pc, #76]	@ (8001594 <HAL_ADC_MspInit+0x70>)
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	4a12      	ldr	r2, [pc, #72]	@ (8001594 <HAL_ADC_MspInit+0x70>)
 800154a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800154e:	6193      	str	r3, [r2, #24]
 8001550:	4b10      	ldr	r3, [pc, #64]	@ (8001594 <HAL_ADC_MspInit+0x70>)
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800155c:	4b0d      	ldr	r3, [pc, #52]	@ (8001594 <HAL_ADC_MspInit+0x70>)
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	4a0c      	ldr	r2, [pc, #48]	@ (8001594 <HAL_ADC_MspInit+0x70>)
 8001562:	f043 0304 	orr.w	r3, r3, #4
 8001566:	6193      	str	r3, [r2, #24]
 8001568:	4b0a      	ldr	r3, [pc, #40]	@ (8001594 <HAL_ADC_MspInit+0x70>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	f003 0304 	and.w	r3, r3, #4
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001574:	233f      	movs	r3, #63	@ 0x3f
 8001576:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001578:	2303      	movs	r3, #3
 800157a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157c:	f107 0310 	add.w	r3, r7, #16
 8001580:	4619      	mov	r1, r3
 8001582:	4805      	ldr	r0, [pc, #20]	@ (8001598 <HAL_ADC_MspInit+0x74>)
 8001584:	f001 f856 	bl	8002634 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001588:	bf00      	nop
 800158a:	3720      	adds	r7, #32
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40012400 	.word	0x40012400
 8001594:	40021000 	.word	0x40021000
 8001598:	40010800 	.word	0x40010800

0800159c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b088      	sub	sp, #32
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a4:	f107 0310 	add.w	r3, r7, #16
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a16      	ldr	r2, [pc, #88]	@ (8001610 <HAL_I2C_MspInit+0x74>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d124      	bne.n	8001606 <HAL_I2C_MspInit+0x6a>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015bc:	4b15      	ldr	r3, [pc, #84]	@ (8001614 <HAL_I2C_MspInit+0x78>)
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	4a14      	ldr	r2, [pc, #80]	@ (8001614 <HAL_I2C_MspInit+0x78>)
 80015c2:	f043 0308 	orr.w	r3, r3, #8
 80015c6:	6193      	str	r3, [r2, #24]
 80015c8:	4b12      	ldr	r3, [pc, #72]	@ (8001614 <HAL_I2C_MspInit+0x78>)
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	f003 0308 	and.w	r3, r3, #8
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80015d4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80015d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015da:	2312      	movs	r3, #18
 80015dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015de:	2303      	movs	r3, #3
 80015e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e2:	f107 0310 	add.w	r3, r7, #16
 80015e6:	4619      	mov	r1, r3
 80015e8:	480b      	ldr	r0, [pc, #44]	@ (8001618 <HAL_I2C_MspInit+0x7c>)
 80015ea:	f001 f823 	bl	8002634 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80015ee:	4b09      	ldr	r3, [pc, #36]	@ (8001614 <HAL_I2C_MspInit+0x78>)
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	4a08      	ldr	r2, [pc, #32]	@ (8001614 <HAL_I2C_MspInit+0x78>)
 80015f4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80015f8:	61d3      	str	r3, [r2, #28]
 80015fa:	4b06      	ldr	r3, [pc, #24]	@ (8001614 <HAL_I2C_MspInit+0x78>)
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001606:	bf00      	nop
 8001608:	3720      	adds	r7, #32
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40005800 	.word	0x40005800
 8001614:	40021000 	.word	0x40021000
 8001618:	40010c00 	.word	0x40010c00

0800161c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a0b      	ldr	r2, [pc, #44]	@ (8001658 <HAL_RTC_MspInit+0x3c>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d110      	bne.n	8001650 <HAL_RTC_MspInit+0x34>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800162e:	f002 fa0b 	bl	8003a48 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001632:	4b0a      	ldr	r3, [pc, #40]	@ (800165c <HAL_RTC_MspInit+0x40>)
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	4a09      	ldr	r2, [pc, #36]	@ (800165c <HAL_RTC_MspInit+0x40>)
 8001638:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800163c:	61d3      	str	r3, [r2, #28]
 800163e:	4b07      	ldr	r3, [pc, #28]	@ (800165c <HAL_RTC_MspInit+0x40>)
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800164a:	4b05      	ldr	r3, [pc, #20]	@ (8001660 <HAL_RTC_MspInit+0x44>)
 800164c:	2201      	movs	r2, #1
 800164e:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8001650:	bf00      	nop
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40002800 	.word	0x40002800
 800165c:	40021000 	.word	0x40021000
 8001660:	4242043c 	.word	0x4242043c

08001664 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b08a      	sub	sp, #40	@ 0x28
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a22      	ldr	r2, [pc, #136]	@ (8001708 <HAL_SPI_MspInit+0xa4>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d13d      	bne.n	8001700 <HAL_SPI_MspInit+0x9c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001684:	4b21      	ldr	r3, [pc, #132]	@ (800170c <HAL_SPI_MspInit+0xa8>)
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	4a20      	ldr	r2, [pc, #128]	@ (800170c <HAL_SPI_MspInit+0xa8>)
 800168a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800168e:	6193      	str	r3, [r2, #24]
 8001690:	4b1e      	ldr	r3, [pc, #120]	@ (800170c <HAL_SPI_MspInit+0xa8>)
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001698:	613b      	str	r3, [r7, #16]
 800169a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800169c:	4b1b      	ldr	r3, [pc, #108]	@ (800170c <HAL_SPI_MspInit+0xa8>)
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	4a1a      	ldr	r2, [pc, #104]	@ (800170c <HAL_SPI_MspInit+0xa8>)
 80016a2:	f043 0308 	orr.w	r3, r3, #8
 80016a6:	6193      	str	r3, [r2, #24]
 80016a8:	4b18      	ldr	r3, [pc, #96]	@ (800170c <HAL_SPI_MspInit+0xa8>)
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	f003 0308 	and.w	r3, r3, #8
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80016b4:	2328      	movs	r3, #40	@ 0x28
 80016b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b8:	2302      	movs	r3, #2
 80016ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016bc:	2303      	movs	r3, #3
 80016be:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	4619      	mov	r1, r3
 80016c6:	4812      	ldr	r0, [pc, #72]	@ (8001710 <HAL_SPI_MspInit+0xac>)
 80016c8:	f000 ffb4 	bl	8002634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016cc:	2310      	movs	r3, #16
 80016ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d0:	2300      	movs	r3, #0
 80016d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	4619      	mov	r1, r3
 80016de:	480c      	ldr	r0, [pc, #48]	@ (8001710 <HAL_SPI_MspInit+0xac>)
 80016e0:	f000 ffa8 	bl	8002634 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80016e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001714 <HAL_SPI_MspInit+0xb0>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80016ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ec:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80016f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80016f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80016fa:	4a06      	ldr	r2, [pc, #24]	@ (8001714 <HAL_SPI_MspInit+0xb0>)
 80016fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016fe:	6053      	str	r3, [r2, #4]

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001700:	bf00      	nop
 8001702:	3728      	adds	r7, #40	@ 0x28
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40013000 	.word	0x40013000
 800170c:	40021000 	.word	0x40021000
 8001710:	40010c00 	.word	0x40010c00
 8001714:	40010000 	.word	0x40010000

08001718 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b088      	sub	sp, #32
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001720:	f107 0310 	add.w	r3, r7, #16
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a1c      	ldr	r2, [pc, #112]	@ (80017a4 <HAL_UART_MspInit+0x8c>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d131      	bne.n	800179c <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001738:	4b1b      	ldr	r3, [pc, #108]	@ (80017a8 <HAL_UART_MspInit+0x90>)
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	4a1a      	ldr	r2, [pc, #104]	@ (80017a8 <HAL_UART_MspInit+0x90>)
 800173e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001742:	6193      	str	r3, [r2, #24]
 8001744:	4b18      	ldr	r3, [pc, #96]	@ (80017a8 <HAL_UART_MspInit+0x90>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001750:	4b15      	ldr	r3, [pc, #84]	@ (80017a8 <HAL_UART_MspInit+0x90>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	4a14      	ldr	r2, [pc, #80]	@ (80017a8 <HAL_UART_MspInit+0x90>)
 8001756:	f043 0304 	orr.w	r3, r3, #4
 800175a:	6193      	str	r3, [r2, #24]
 800175c:	4b12      	ldr	r3, [pc, #72]	@ (80017a8 <HAL_UART_MspInit+0x90>)
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	f003 0304 	and.w	r3, r3, #4
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001768:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800176c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176e:	2302      	movs	r3, #2
 8001770:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001772:	2303      	movs	r3, #3
 8001774:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001776:	f107 0310 	add.w	r3, r7, #16
 800177a:	4619      	mov	r1, r3
 800177c:	480b      	ldr	r0, [pc, #44]	@ (80017ac <HAL_UART_MspInit+0x94>)
 800177e:	f000 ff59 	bl	8002634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001782:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001786:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001790:	f107 0310 	add.w	r3, r7, #16
 8001794:	4619      	mov	r1, r3
 8001796:	4805      	ldr	r0, [pc, #20]	@ (80017ac <HAL_UART_MspInit+0x94>)
 8001798:	f000 ff4c 	bl	8002634 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800179c:	bf00      	nop
 800179e:	3720      	adds	r7, #32
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40013800 	.word	0x40013800
 80017a8:	40021000 	.word	0x40021000
 80017ac:	40010800 	.word	0x40010800

080017b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017b4:	bf00      	nop
 80017b6:	e7fd      	b.n	80017b4 <NMI_Handler+0x4>

080017b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017bc:	bf00      	nop
 80017be:	e7fd      	b.n	80017bc <HardFault_Handler+0x4>

080017c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c4:	bf00      	nop
 80017c6:	e7fd      	b.n	80017c4 <MemManage_Handler+0x4>

080017c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017cc:	bf00      	nop
 80017ce:	e7fd      	b.n	80017cc <BusFault_Handler+0x4>

080017d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d4:	bf00      	nop
 80017d6:	e7fd      	b.n	80017d4 <UsageFault_Handler+0x4>

080017d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr

080017e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr

080017f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr

080017fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001800:	f000 f91a 	bl	8001a38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001804:	bf00      	nop
 8001806:	bd80      	pop	{r7, pc}

08001808 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001810:	4a14      	ldr	r2, [pc, #80]	@ (8001864 <_sbrk+0x5c>)
 8001812:	4b15      	ldr	r3, [pc, #84]	@ (8001868 <_sbrk+0x60>)
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800181c:	4b13      	ldr	r3, [pc, #76]	@ (800186c <_sbrk+0x64>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d102      	bne.n	800182a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001824:	4b11      	ldr	r3, [pc, #68]	@ (800186c <_sbrk+0x64>)
 8001826:	4a12      	ldr	r2, [pc, #72]	@ (8001870 <_sbrk+0x68>)
 8001828:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800182a:	4b10      	ldr	r3, [pc, #64]	@ (800186c <_sbrk+0x64>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4413      	add	r3, r2
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	429a      	cmp	r2, r3
 8001836:	d207      	bcs.n	8001848 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001838:	f004 faa0 	bl	8005d7c <__errno>
 800183c:	4603      	mov	r3, r0
 800183e:	220c      	movs	r2, #12
 8001840:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001842:	f04f 33ff 	mov.w	r3, #4294967295
 8001846:	e009      	b.n	800185c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001848:	4b08      	ldr	r3, [pc, #32]	@ (800186c <_sbrk+0x64>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800184e:	4b07      	ldr	r3, [pc, #28]	@ (800186c <_sbrk+0x64>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4413      	add	r3, r2
 8001856:	4a05      	ldr	r2, [pc, #20]	@ (800186c <_sbrk+0x64>)
 8001858:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800185a:	68fb      	ldr	r3, [r7, #12]
}
 800185c:	4618      	mov	r0, r3
 800185e:	3718      	adds	r7, #24
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20005000 	.word	0x20005000
 8001868:	00000400 	.word	0x00000400
 800186c:	20000254 	.word	0x20000254
 8001870:	200003a8 	.word	0x200003a8

08001874 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr

08001880 <UART_TransmitString>:
  * @param huart: Pointer to the UART handle (e.g., &huart1)
  * @param str: Pointer to the string to transmit
  * @retval None
  */
void UART_TransmitString(UART_HandleTypeDef *huart, const char *str)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 800188a:	6838      	ldr	r0, [r7, #0]
 800188c:	f7fe fc68 	bl	8000160 <strlen>
 8001890:	4603      	mov	r3, r0
 8001892:	b29a      	uxth	r2, r3
 8001894:	f04f 33ff 	mov.w	r3, #4294967295
 8001898:	6839      	ldr	r1, [r7, #0]
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f003 ffc5 	bl	800582a <HAL_UART_Transmit>
}
 80018a0:	bf00      	nop
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <UART_ReadDataPacket>:
  * @param data: Pointer to the data to be copied
  * @param size: Size of the data to be copied
  * @retval None
  */
void UART_ReadDataPacket(char *buffer, const char *data, size_t size)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
    if (buffer != NULL && data != NULL && size > 0)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d00f      	beq.n	80018da <UART_ReadDataPacket+0x32>
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d00c      	beq.n	80018da <UART_ReadDataPacket+0x32>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d009      	beq.n	80018da <UART_ReadDataPacket+0x32>
    {
        strncpy(buffer, data, size);
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	68b9      	ldr	r1, [r7, #8]
 80018ca:	68f8      	ldr	r0, [r7, #12]
 80018cc:	f004 fa42 	bl	8005d54 <strncpy>
        buffer[size] = '\0'; // Null-terminate the string
 80018d0:	68fa      	ldr	r2, [r7, #12]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4413      	add	r3, r2
 80018d6:	2200      	movs	r2, #0
 80018d8:	701a      	strb	r2, [r3, #0]
    }
}
 80018da:	bf00      	nop
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <UART_ReceiveString>:
  * @param buffer: Pointer to the buffer where the received string will be stored
  * @param size: Maximum size of the buffer
  * @retval None
  */
void UART_ReceiveString(UART_HandleTypeDef *huart, char *buffer, size_t size)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b084      	sub	sp, #16
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	60f8      	str	r0, [r7, #12]
 80018ea:	60b9      	str	r1, [r7, #8]
 80018ec:	607a      	str	r2, [r7, #4]
    HAL_UART_Receive(huart, (uint8_t *)buffer, size - 1, HAL_MAX_DELAY); // Leave space for null terminator
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	3b01      	subs	r3, #1
 80018f4:	b29a      	uxth	r2, r3
 80018f6:	f04f 33ff 	mov.w	r3, #4294967295
 80018fa:	68b9      	ldr	r1, [r7, #8]
 80018fc:	68f8      	ldr	r0, [r7, #12]
 80018fe:	f004 f81f 	bl	8005940 <HAL_UART_Receive>
    buffer[size - 1] = '\0'; // Ensure null termination
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	3b01      	subs	r3, #1
 8001906:	68ba      	ldr	r2, [r7, #8]
 8001908:	4413      	add	r3, r2
 800190a:	2200      	movs	r2, #0
 800190c:	701a      	strb	r2, [r3, #0]
}
 800190e:	bf00      	nop
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
	...

08001918 <UART_ProcessReceivedData>:
  * @brief Processes received data and updates the motor status.
  * @param buffer: Pointer to the buffer containing the received data
  * @retval None
  */
void UART_ProcessReceivedData(char *buffer)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
    if (strcmp(buffer, "@MT1#") == 0)
 8001920:	490c      	ldr	r1, [pc, #48]	@ (8001954 <UART_ProcessReceivedData+0x3c>)
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7fe fc12 	bl	800014c <strcmp>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d103      	bne.n	8001936 <UART_ProcessReceivedData+0x1e>
    {
        // Set motor status to ON
        motorStatus = 1; // Now this will work as motorStatus is declared extern
 800192e:	4b0a      	ldr	r3, [pc, #40]	@ (8001958 <UART_ProcessReceivedData+0x40>)
 8001930:	2201      	movs	r2, #1
 8001932:	701a      	strb	r2, [r3, #0]
    else if (strcmp(buffer, "@MT0#") == 0)
    {
        // Set motor status to OFF
        motorStatus = 0; // Now this will work as motorStatus is declared extern
    }
}
 8001934:	e009      	b.n	800194a <UART_ProcessReceivedData+0x32>
    else if (strcmp(buffer, "@MT0#") == 0)
 8001936:	4909      	ldr	r1, [pc, #36]	@ (800195c <UART_ProcessReceivedData+0x44>)
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7fe fc07 	bl	800014c <strcmp>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d102      	bne.n	800194a <UART_ProcessReceivedData+0x32>
        motorStatus = 0; // Now this will work as motorStatus is declared extern
 8001944:	4b04      	ldr	r3, [pc, #16]	@ (8001958 <UART_ProcessReceivedData+0x40>)
 8001946:	2200      	movs	r2, #0
 8001948:	701a      	strb	r2, [r3, #0]
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	08006720 	.word	0x08006720
 8001958:	20000085 	.word	0x20000085
 800195c:	08006728 	.word	0x08006728

08001960 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001960:	f7ff ff88 	bl	8001874 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001964:	480b      	ldr	r0, [pc, #44]	@ (8001994 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001966:	490c      	ldr	r1, [pc, #48]	@ (8001998 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001968:	4a0c      	ldr	r2, [pc, #48]	@ (800199c <LoopFillZerobss+0x16>)
  movs r3, #0
 800196a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800196c:	e002      	b.n	8001974 <LoopCopyDataInit>

0800196e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800196e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001970:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001972:	3304      	adds	r3, #4

08001974 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001974:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001976:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001978:	d3f9      	bcc.n	800196e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800197a:	4a09      	ldr	r2, [pc, #36]	@ (80019a0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800197c:	4c09      	ldr	r4, [pc, #36]	@ (80019a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800197e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001980:	e001      	b.n	8001986 <LoopFillZerobss>

08001982 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001982:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001984:	3204      	adds	r2, #4

08001986 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001986:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001988:	d3fb      	bcc.n	8001982 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800198a:	f004 f9fd 	bl	8005d88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800198e:	f7ff fa5f 	bl	8000e50 <main>
  bx lr
 8001992:	4770      	bx	lr
  ldr r0, =_sdata
 8001994:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001998:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800199c:	080067cc 	.word	0x080067cc
  ldr r2, =_sbss
 80019a0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80019a4:	200003a4 	.word	0x200003a4

080019a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019a8:	e7fe      	b.n	80019a8 <ADC1_2_IRQHandler>
	...

080019ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019b0:	4b08      	ldr	r3, [pc, #32]	@ (80019d4 <HAL_Init+0x28>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a07      	ldr	r2, [pc, #28]	@ (80019d4 <HAL_Init+0x28>)
 80019b6:	f043 0310 	orr.w	r3, r3, #16
 80019ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019bc:	2003      	movs	r0, #3
 80019be:	f000 fe05 	bl	80025cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019c2:	2000      	movs	r0, #0
 80019c4:	f000 f808 	bl	80019d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019c8:	f7ff fd7a 	bl	80014c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40022000 	.word	0x40022000

080019d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019e0:	4b12      	ldr	r3, [pc, #72]	@ (8001a2c <HAL_InitTick+0x54>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	4b12      	ldr	r3, [pc, #72]	@ (8001a30 <HAL_InitTick+0x58>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	4619      	mov	r1, r3
 80019ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80019f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f6:	4618      	mov	r0, r3
 80019f8:	f000 fe0f 	bl	800261a <HAL_SYSTICK_Config>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e00e      	b.n	8001a24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b0f      	cmp	r3, #15
 8001a0a:	d80a      	bhi.n	8001a22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	f04f 30ff 	mov.w	r0, #4294967295
 8001a14:	f000 fde5 	bl	80025e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a18:	4a06      	ldr	r2, [pc, #24]	@ (8001a34 <HAL_InitTick+0x5c>)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	e000      	b.n	8001a24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20000004 	.word	0x20000004
 8001a30:	2000000c 	.word	0x2000000c
 8001a34:	20000008 	.word	0x20000008

08001a38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a3c:	4b05      	ldr	r3, [pc, #20]	@ (8001a54 <HAL_IncTick+0x1c>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	461a      	mov	r2, r3
 8001a42:	4b05      	ldr	r3, [pc, #20]	@ (8001a58 <HAL_IncTick+0x20>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4413      	add	r3, r2
 8001a48:	4a03      	ldr	r2, [pc, #12]	@ (8001a58 <HAL_IncTick+0x20>)
 8001a4a:	6013      	str	r3, [r2, #0]
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bc80      	pop	{r7}
 8001a52:	4770      	bx	lr
 8001a54:	2000000c 	.word	0x2000000c
 8001a58:	20000258 	.word	0x20000258

08001a5c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a60:	4b02      	ldr	r3, [pc, #8]	@ (8001a6c <HAL_GetTick+0x10>)
 8001a62:	681b      	ldr	r3, [r3, #0]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr
 8001a6c:	20000258 	.word	0x20000258

08001a70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a78:	f7ff fff0 	bl	8001a5c <HAL_GetTick>
 8001a7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a88:	d005      	beq.n	8001a96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ab4 <HAL_Delay+0x44>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	461a      	mov	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	4413      	add	r3, r2
 8001a94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a96:	bf00      	nop
 8001a98:	f7ff ffe0 	bl	8001a5c <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d8f7      	bhi.n	8001a98 <HAL_Delay+0x28>
  {
  }
}
 8001aa8:	bf00      	nop
 8001aaa:	bf00      	nop
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	2000000c 	.word	0x2000000c

08001ab8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e0be      	b.n	8001c58 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d109      	bne.n	8001afc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7ff fd14 	bl	8001524 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f000 fbc5 	bl	800228c <ADC_ConversionStop_Disable>
 8001b02:	4603      	mov	r3, r0
 8001b04:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b0a:	f003 0310 	and.w	r3, r3, #16
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f040 8099 	bne.w	8001c46 <HAL_ADC_Init+0x18e>
 8001b14:	7dfb      	ldrb	r3, [r7, #23]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f040 8095 	bne.w	8001c46 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b20:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001b24:	f023 0302 	bic.w	r3, r3, #2
 8001b28:	f043 0202 	orr.w	r2, r3, #2
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b38:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	7b1b      	ldrb	r3, [r3, #12]
 8001b3e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b40:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b42:	68ba      	ldr	r2, [r7, #8]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b50:	d003      	beq.n	8001b5a <HAL_ADC_Init+0xa2>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d102      	bne.n	8001b60 <HAL_ADC_Init+0xa8>
 8001b5a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b5e:	e000      	b.n	8001b62 <HAL_ADC_Init+0xaa>
 8001b60:	2300      	movs	r3, #0
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	7d1b      	ldrb	r3, [r3, #20]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d119      	bne.n	8001ba4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	7b1b      	ldrb	r3, [r3, #12]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d109      	bne.n	8001b8c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	035a      	lsls	r2, r3, #13
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b88:	613b      	str	r3, [r7, #16]
 8001b8a:	e00b      	b.n	8001ba4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b90:	f043 0220 	orr.w	r2, r3, #32
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b9c:	f043 0201 	orr.w	r2, r3, #1
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	689a      	ldr	r2, [r3, #8]
 8001bbe:	4b28      	ldr	r3, [pc, #160]	@ (8001c60 <HAL_ADC_Init+0x1a8>)
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6812      	ldr	r2, [r2, #0]
 8001bc6:	68b9      	ldr	r1, [r7, #8]
 8001bc8:	430b      	orrs	r3, r1
 8001bca:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001bd4:	d003      	beq.n	8001bde <HAL_ADC_Init+0x126>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d104      	bne.n	8001be8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	3b01      	subs	r3, #1
 8001be4:	051b      	lsls	r3, r3, #20
 8001be6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bee:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689a      	ldr	r2, [r3, #8]
 8001c02:	4b18      	ldr	r3, [pc, #96]	@ (8001c64 <HAL_ADC_Init+0x1ac>)
 8001c04:	4013      	ands	r3, r2
 8001c06:	68ba      	ldr	r2, [r7, #8]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d10b      	bne.n	8001c24 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c16:	f023 0303 	bic.w	r3, r3, #3
 8001c1a:	f043 0201 	orr.w	r2, r3, #1
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c22:	e018      	b.n	8001c56 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c28:	f023 0312 	bic.w	r3, r3, #18
 8001c2c:	f043 0210 	orr.w	r2, r3, #16
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c38:	f043 0201 	orr.w	r2, r3, #1
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c44:	e007      	b.n	8001c56 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c4a:	f043 0210 	orr.w	r2, r3, #16
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	ffe1f7fd 	.word	0xffe1f7fd
 8001c64:	ff1f0efe 	.word	0xff1f0efe

08001c68 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c70:	2300      	movs	r3, #0
 8001c72:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d101      	bne.n	8001c82 <HAL_ADC_Start+0x1a>
 8001c7e:	2302      	movs	r3, #2
 8001c80:	e098      	b.n	8001db4 <HAL_ADC_Start+0x14c>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2201      	movs	r2, #1
 8001c86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 faa4 	bl	80021d8 <ADC_Enable>
 8001c90:	4603      	mov	r3, r0
 8001c92:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f040 8087 	bne.w	8001daa <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ca0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ca4:	f023 0301 	bic.w	r3, r3, #1
 8001ca8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a41      	ldr	r2, [pc, #260]	@ (8001dbc <HAL_ADC_Start+0x154>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d105      	bne.n	8001cc6 <HAL_ADC_Start+0x5e>
 8001cba:	4b41      	ldr	r3, [pc, #260]	@ (8001dc0 <HAL_ADC_Start+0x158>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d115      	bne.n	8001cf2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cca:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d026      	beq.n	8001d2e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ce4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001ce8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001cf0:	e01d      	b.n	8001d2e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a2f      	ldr	r2, [pc, #188]	@ (8001dc0 <HAL_ADC_Start+0x158>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d004      	beq.n	8001d12 <HAL_ADC_Start+0xaa>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a2b      	ldr	r2, [pc, #172]	@ (8001dbc <HAL_ADC_Start+0x154>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d10d      	bne.n	8001d2e <HAL_ADC_Start+0xc6>
 8001d12:	4b2b      	ldr	r3, [pc, #172]	@ (8001dc0 <HAL_ADC_Start+0x158>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d007      	beq.n	8001d2e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d22:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d26:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d006      	beq.n	8001d48 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d3e:	f023 0206 	bic.w	r2, r3, #6
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001d46:	e002      	b.n	8001d4e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f06f 0202 	mvn.w	r2, #2
 8001d5e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001d6a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001d6e:	d113      	bne.n	8001d98 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d74:	4a11      	ldr	r2, [pc, #68]	@ (8001dbc <HAL_ADC_Start+0x154>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d105      	bne.n	8001d86 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001d7a:	4b11      	ldr	r3, [pc, #68]	@ (8001dc0 <HAL_ADC_Start+0x158>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d108      	bne.n	8001d98 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001d94:	609a      	str	r2, [r3, #8]
 8001d96:	e00c      	b.n	8001db2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	689a      	ldr	r2, [r3, #8]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	e003      	b.n	8001db2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3710      	adds	r7, #16
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40012800 	.word	0x40012800
 8001dc0:	40012400 	.word	0x40012400

08001dc4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001dc4:	b590      	push	{r4, r7, lr}
 8001dc6:	b087      	sub	sp, #28
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001dda:	f7ff fe3f 	bl	8001a5c <HAL_GetTick>
 8001dde:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00b      	beq.n	8001e06 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001df2:	f043 0220 	orr.w	r2, r3, #32
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e0d3      	b.n	8001fae <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d131      	bne.n	8001e78 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e1a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d12a      	bne.n	8001e78 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001e22:	e021      	b.n	8001e68 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e2a:	d01d      	beq.n	8001e68 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d007      	beq.n	8001e42 <HAL_ADC_PollForConversion+0x7e>
 8001e32:	f7ff fe13 	bl	8001a5c <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d212      	bcs.n	8001e68 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d10b      	bne.n	8001e68 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e54:	f043 0204 	orr.w	r2, r3, #4
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e0a2      	b.n	8001fae <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d0d6      	beq.n	8001e24 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001e76:	e070      	b.n	8001f5a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001e78:	4b4f      	ldr	r3, [pc, #316]	@ (8001fb8 <HAL_ADC_PollForConversion+0x1f4>)
 8001e7a:	681c      	ldr	r4, [r3, #0]
 8001e7c:	2002      	movs	r0, #2
 8001e7e:	f002 fab5 	bl	80043ec <HAL_RCCEx_GetPeriphCLKFreq>
 8001e82:	4603      	mov	r3, r0
 8001e84:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6919      	ldr	r1, [r3, #16]
 8001e8e:	4b4b      	ldr	r3, [pc, #300]	@ (8001fbc <HAL_ADC_PollForConversion+0x1f8>)
 8001e90:	400b      	ands	r3, r1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d118      	bne.n	8001ec8 <HAL_ADC_PollForConversion+0x104>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68d9      	ldr	r1, [r3, #12]
 8001e9c:	4b48      	ldr	r3, [pc, #288]	@ (8001fc0 <HAL_ADC_PollForConversion+0x1fc>)
 8001e9e:	400b      	ands	r3, r1
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d111      	bne.n	8001ec8 <HAL_ADC_PollForConversion+0x104>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6919      	ldr	r1, [r3, #16]
 8001eaa:	4b46      	ldr	r3, [pc, #280]	@ (8001fc4 <HAL_ADC_PollForConversion+0x200>)
 8001eac:	400b      	ands	r3, r1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d108      	bne.n	8001ec4 <HAL_ADC_PollForConversion+0x100>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68d9      	ldr	r1, [r3, #12]
 8001eb8:	4b43      	ldr	r3, [pc, #268]	@ (8001fc8 <HAL_ADC_PollForConversion+0x204>)
 8001eba:	400b      	ands	r3, r1
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d101      	bne.n	8001ec4 <HAL_ADC_PollForConversion+0x100>
 8001ec0:	2314      	movs	r3, #20
 8001ec2:	e020      	b.n	8001f06 <HAL_ADC_PollForConversion+0x142>
 8001ec4:	2329      	movs	r3, #41	@ 0x29
 8001ec6:	e01e      	b.n	8001f06 <HAL_ADC_PollForConversion+0x142>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6919      	ldr	r1, [r3, #16]
 8001ece:	4b3d      	ldr	r3, [pc, #244]	@ (8001fc4 <HAL_ADC_PollForConversion+0x200>)
 8001ed0:	400b      	ands	r3, r1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d106      	bne.n	8001ee4 <HAL_ADC_PollForConversion+0x120>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68d9      	ldr	r1, [r3, #12]
 8001edc:	4b3a      	ldr	r3, [pc, #232]	@ (8001fc8 <HAL_ADC_PollForConversion+0x204>)
 8001ede:	400b      	ands	r3, r1
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d00d      	beq.n	8001f00 <HAL_ADC_PollForConversion+0x13c>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6919      	ldr	r1, [r3, #16]
 8001eea:	4b38      	ldr	r3, [pc, #224]	@ (8001fcc <HAL_ADC_PollForConversion+0x208>)
 8001eec:	400b      	ands	r3, r1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d108      	bne.n	8001f04 <HAL_ADC_PollForConversion+0x140>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68d9      	ldr	r1, [r3, #12]
 8001ef8:	4b34      	ldr	r3, [pc, #208]	@ (8001fcc <HAL_ADC_PollForConversion+0x208>)
 8001efa:	400b      	ands	r3, r1
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <HAL_ADC_PollForConversion+0x140>
 8001f00:	2354      	movs	r3, #84	@ 0x54
 8001f02:	e000      	b.n	8001f06 <HAL_ADC_PollForConversion+0x142>
 8001f04:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001f06:	fb02 f303 	mul.w	r3, r2, r3
 8001f0a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001f0c:	e021      	b.n	8001f52 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f14:	d01a      	beq.n	8001f4c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d007      	beq.n	8001f2c <HAL_ADC_PollForConversion+0x168>
 8001f1c:	f7ff fd9e 	bl	8001a5c <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d20f      	bcs.n	8001f4c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d90b      	bls.n	8001f4c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f38:	f043 0204 	orr.w	r2, r3, #4
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e030      	b.n	8001fae <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d8d9      	bhi.n	8001f0e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f06f 0212 	mvn.w	r2, #18
 8001f62:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f68:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001f7a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001f7e:	d115      	bne.n	8001fac <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d111      	bne.n	8001fac <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f8c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d105      	bne.n	8001fac <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa4:	f043 0201 	orr.w	r2, r3, #1
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	371c      	adds	r7, #28
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd90      	pop	{r4, r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20000004 	.word	0x20000004
 8001fbc:	24924924 	.word	0x24924924
 8001fc0:	00924924 	.word	0x00924924
 8001fc4:	12492492 	.word	0x12492492
 8001fc8:	00492492 	.word	0x00492492
 8001fcc:	00249249 	.word	0x00249249

08001fd0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr

08001fe8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002000:	2b01      	cmp	r3, #1
 8002002:	d101      	bne.n	8002008 <HAL_ADC_ConfigChannel+0x20>
 8002004:	2302      	movs	r3, #2
 8002006:	e0dc      	b.n	80021c2 <HAL_ADC_ConfigChannel+0x1da>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	2b06      	cmp	r3, #6
 8002016:	d81c      	bhi.n	8002052 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685a      	ldr	r2, [r3, #4]
 8002022:	4613      	mov	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	3b05      	subs	r3, #5
 800202a:	221f      	movs	r2, #31
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	43db      	mvns	r3, r3
 8002032:	4019      	ands	r1, r3
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	6818      	ldr	r0, [r3, #0]
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685a      	ldr	r2, [r3, #4]
 800203c:	4613      	mov	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4413      	add	r3, r2
 8002042:	3b05      	subs	r3, #5
 8002044:	fa00 f203 	lsl.w	r2, r0, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	430a      	orrs	r2, r1
 800204e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002050:	e03c      	b.n	80020cc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b0c      	cmp	r3, #12
 8002058:	d81c      	bhi.n	8002094 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685a      	ldr	r2, [r3, #4]
 8002064:	4613      	mov	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	3b23      	subs	r3, #35	@ 0x23
 800206c:	221f      	movs	r2, #31
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	43db      	mvns	r3, r3
 8002074:	4019      	ands	r1, r3
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	6818      	ldr	r0, [r3, #0]
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685a      	ldr	r2, [r3, #4]
 800207e:	4613      	mov	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	4413      	add	r3, r2
 8002084:	3b23      	subs	r3, #35	@ 0x23
 8002086:	fa00 f203 	lsl.w	r2, r0, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	430a      	orrs	r2, r1
 8002090:	631a      	str	r2, [r3, #48]	@ 0x30
 8002092:	e01b      	b.n	80020cc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685a      	ldr	r2, [r3, #4]
 800209e:	4613      	mov	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4413      	add	r3, r2
 80020a4:	3b41      	subs	r3, #65	@ 0x41
 80020a6:	221f      	movs	r2, #31
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	43db      	mvns	r3, r3
 80020ae:	4019      	ands	r1, r3
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	6818      	ldr	r0, [r3, #0]
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685a      	ldr	r2, [r3, #4]
 80020b8:	4613      	mov	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	4413      	add	r3, r2
 80020be:	3b41      	subs	r3, #65	@ 0x41
 80020c0:	fa00 f203 	lsl.w	r2, r0, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	430a      	orrs	r2, r1
 80020ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2b09      	cmp	r3, #9
 80020d2:	d91c      	bls.n	800210e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68d9      	ldr	r1, [r3, #12]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	4613      	mov	r3, r2
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	4413      	add	r3, r2
 80020e4:	3b1e      	subs	r3, #30
 80020e6:	2207      	movs	r2, #7
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	43db      	mvns	r3, r3
 80020ee:	4019      	ands	r1, r3
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	6898      	ldr	r0, [r3, #8]
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	4613      	mov	r3, r2
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	4413      	add	r3, r2
 80020fe:	3b1e      	subs	r3, #30
 8002100:	fa00 f203 	lsl.w	r2, r0, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	430a      	orrs	r2, r1
 800210a:	60da      	str	r2, [r3, #12]
 800210c:	e019      	b.n	8002142 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6919      	ldr	r1, [r3, #16]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	4613      	mov	r3, r2
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	4413      	add	r3, r2
 800211e:	2207      	movs	r2, #7
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	43db      	mvns	r3, r3
 8002126:	4019      	ands	r1, r3
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	6898      	ldr	r0, [r3, #8]
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	4613      	mov	r3, r2
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	4413      	add	r3, r2
 8002136:	fa00 f203 	lsl.w	r2, r0, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	430a      	orrs	r2, r1
 8002140:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2b10      	cmp	r3, #16
 8002148:	d003      	beq.n	8002152 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800214e:	2b11      	cmp	r3, #17
 8002150:	d132      	bne.n	80021b8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a1d      	ldr	r2, [pc, #116]	@ (80021cc <HAL_ADC_ConfigChannel+0x1e4>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d125      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d126      	bne.n	80021b8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002178:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2b10      	cmp	r3, #16
 8002180:	d11a      	bne.n	80021b8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002182:	4b13      	ldr	r3, [pc, #76]	@ (80021d0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a13      	ldr	r2, [pc, #76]	@ (80021d4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002188:	fba2 2303 	umull	r2, r3, r2, r3
 800218c:	0c9a      	lsrs	r2, r3, #18
 800218e:	4613      	mov	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002198:	e002      	b.n	80021a0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	3b01      	subs	r3, #1
 800219e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1f9      	bne.n	800219a <HAL_ADC_ConfigChannel+0x1b2>
 80021a6:	e007      	b.n	80021b8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ac:	f043 0220 	orr.w	r2, r3, #32
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80021c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bc80      	pop	{r7}
 80021ca:	4770      	bx	lr
 80021cc:	40012400 	.word	0x40012400
 80021d0:	20000004 	.word	0x20000004
 80021d4:	431bde83 	.word	0x431bde83

080021d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021e0:	2300      	movs	r3, #0
 80021e2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80021e4:	2300      	movs	r3, #0
 80021e6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d040      	beq.n	8002278 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f042 0201 	orr.w	r2, r2, #1
 8002204:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002206:	4b1f      	ldr	r3, [pc, #124]	@ (8002284 <ADC_Enable+0xac>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a1f      	ldr	r2, [pc, #124]	@ (8002288 <ADC_Enable+0xb0>)
 800220c:	fba2 2303 	umull	r2, r3, r2, r3
 8002210:	0c9b      	lsrs	r3, r3, #18
 8002212:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002214:	e002      	b.n	800221c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	3b01      	subs	r3, #1
 800221a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1f9      	bne.n	8002216 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002222:	f7ff fc1b 	bl	8001a5c <HAL_GetTick>
 8002226:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002228:	e01f      	b.n	800226a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800222a:	f7ff fc17 	bl	8001a5c <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d918      	bls.n	800226a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b01      	cmp	r3, #1
 8002244:	d011      	beq.n	800226a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800224a:	f043 0210 	orr.w	r2, r3, #16
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002256:	f043 0201 	orr.w	r2, r3, #1
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e007      	b.n	800227a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	2b01      	cmp	r3, #1
 8002276:	d1d8      	bne.n	800222a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	20000004 	.word	0x20000004
 8002288:	431bde83 	.word	0x431bde83

0800228c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002294:	2300      	movs	r3, #0
 8002296:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d12e      	bne.n	8002304 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 0201 	bic.w	r2, r2, #1
 80022b4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022b6:	f7ff fbd1 	bl	8001a5c <HAL_GetTick>
 80022ba:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80022bc:	e01b      	b.n	80022f6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80022be:	f7ff fbcd 	bl	8001a5c <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d914      	bls.n	80022f6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d10d      	bne.n	80022f6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022de:	f043 0210 	orr.w	r2, r3, #16
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ea:	f043 0201 	orr.w	r2, r3, #1
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e007      	b.n	8002306 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	2b01      	cmp	r3, #1
 8002302:	d0dc      	beq.n	80022be <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
	...

08002310 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002310:	b590      	push	{r4, r7, lr}
 8002312:	b087      	sub	sp, #28
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002318:	2300      	movs	r3, #0
 800231a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800231c:	2300      	movs	r3, #0
 800231e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002326:	2b01      	cmp	r3, #1
 8002328:	d101      	bne.n	800232e <HAL_ADCEx_Calibration_Start+0x1e>
 800232a:	2302      	movs	r3, #2
 800232c:	e097      	b.n	800245e <HAL_ADCEx_Calibration_Start+0x14e>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7ff ffa8 	bl	800228c <ADC_ConversionStop_Disable>
 800233c:	4603      	mov	r3, r0
 800233e:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f7ff ff49 	bl	80021d8 <ADC_Enable>
 8002346:	4603      	mov	r3, r0
 8002348:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 800234a:	7dfb      	ldrb	r3, [r7, #23]
 800234c:	2b00      	cmp	r3, #0
 800234e:	f040 8081 	bne.w	8002454 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002356:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800235a:	f023 0302 	bic.w	r3, r3, #2
 800235e:	f043 0202 	orr.w	r2, r3, #2
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002366:	4b40      	ldr	r3, [pc, #256]	@ (8002468 <HAL_ADCEx_Calibration_Start+0x158>)
 8002368:	681c      	ldr	r4, [r3, #0]
 800236a:	2002      	movs	r0, #2
 800236c:	f002 f83e 	bl	80043ec <HAL_RCCEx_GetPeriphCLKFreq>
 8002370:	4603      	mov	r3, r0
 8002372:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002376:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002378:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800237a:	e002      	b.n	8002382 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	3b01      	subs	r3, #1
 8002380:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1f9      	bne.n	800237c <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f042 0208 	orr.w	r2, r2, #8
 8002396:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002398:	f7ff fb60 	bl	8001a5c <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800239e:	e01b      	b.n	80023d8 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80023a0:	f7ff fb5c 	bl	8001a5c <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b0a      	cmp	r3, #10
 80023ac:	d914      	bls.n	80023d8 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 0308 	and.w	r3, r3, #8
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00d      	beq.n	80023d8 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c0:	f023 0312 	bic.w	r3, r3, #18
 80023c4:	f043 0210 	orr.w	r2, r3, #16
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e042      	b.n	800245e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f003 0308 	and.w	r3, r3, #8
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1dc      	bne.n	80023a0 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f042 0204 	orr.w	r2, r2, #4
 80023f4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80023f6:	f7ff fb31 	bl	8001a5c <HAL_GetTick>
 80023fa:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80023fc:	e01b      	b.n	8002436 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80023fe:	f7ff fb2d 	bl	8001a5c <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b0a      	cmp	r3, #10
 800240a:	d914      	bls.n	8002436 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 0304 	and.w	r3, r3, #4
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00d      	beq.n	8002436 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800241e:	f023 0312 	bic.w	r3, r3, #18
 8002422:	f043 0210 	orr.w	r2, r3, #16
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e013      	b.n	800245e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	d1dc      	bne.n	80023fe <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002448:	f023 0303 	bic.w	r3, r3, #3
 800244c:	f043 0201 	orr.w	r2, r3, #1
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800245c:	7dfb      	ldrb	r3, [r7, #23]
}
 800245e:	4618      	mov	r0, r3
 8002460:	371c      	adds	r7, #28
 8002462:	46bd      	mov	sp, r7
 8002464:	bd90      	pop	{r4, r7, pc}
 8002466:	bf00      	nop
 8002468:	20000004 	.word	0x20000004

0800246c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800247c:	4b0c      	ldr	r3, [pc, #48]	@ (80024b0 <__NVIC_SetPriorityGrouping+0x44>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002488:	4013      	ands	r3, r2
 800248a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002494:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002498:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800249c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800249e:	4a04      	ldr	r2, [pc, #16]	@ (80024b0 <__NVIC_SetPriorityGrouping+0x44>)
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	60d3      	str	r3, [r2, #12]
}
 80024a4:	bf00      	nop
 80024a6:	3714      	adds	r7, #20
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bc80      	pop	{r7}
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	e000ed00 	.word	0xe000ed00

080024b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024b8:	4b04      	ldr	r3, [pc, #16]	@ (80024cc <__NVIC_GetPriorityGrouping+0x18>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	0a1b      	lsrs	r3, r3, #8
 80024be:	f003 0307 	and.w	r3, r3, #7
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bc80      	pop	{r7}
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	e000ed00 	.word	0xe000ed00

080024d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	6039      	str	r1, [r7, #0]
 80024da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	db0a      	blt.n	80024fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	b2da      	uxtb	r2, r3
 80024e8:	490c      	ldr	r1, [pc, #48]	@ (800251c <__NVIC_SetPriority+0x4c>)
 80024ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ee:	0112      	lsls	r2, r2, #4
 80024f0:	b2d2      	uxtb	r2, r2
 80024f2:	440b      	add	r3, r1
 80024f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024f8:	e00a      	b.n	8002510 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	4908      	ldr	r1, [pc, #32]	@ (8002520 <__NVIC_SetPriority+0x50>)
 8002500:	79fb      	ldrb	r3, [r7, #7]
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	3b04      	subs	r3, #4
 8002508:	0112      	lsls	r2, r2, #4
 800250a:	b2d2      	uxtb	r2, r2
 800250c:	440b      	add	r3, r1
 800250e:	761a      	strb	r2, [r3, #24]
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	bc80      	pop	{r7}
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	e000e100 	.word	0xe000e100
 8002520:	e000ed00 	.word	0xe000ed00

08002524 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002524:	b480      	push	{r7}
 8002526:	b089      	sub	sp, #36	@ 0x24
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	f1c3 0307 	rsb	r3, r3, #7
 800253e:	2b04      	cmp	r3, #4
 8002540:	bf28      	it	cs
 8002542:	2304      	movcs	r3, #4
 8002544:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	3304      	adds	r3, #4
 800254a:	2b06      	cmp	r3, #6
 800254c:	d902      	bls.n	8002554 <NVIC_EncodePriority+0x30>
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	3b03      	subs	r3, #3
 8002552:	e000      	b.n	8002556 <NVIC_EncodePriority+0x32>
 8002554:	2300      	movs	r3, #0
 8002556:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002558:	f04f 32ff 	mov.w	r2, #4294967295
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	43da      	mvns	r2, r3
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	401a      	ands	r2, r3
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800256c:	f04f 31ff 	mov.w	r1, #4294967295
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	fa01 f303 	lsl.w	r3, r1, r3
 8002576:	43d9      	mvns	r1, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800257c:	4313      	orrs	r3, r2
         );
}
 800257e:	4618      	mov	r0, r3
 8002580:	3724      	adds	r7, #36	@ 0x24
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr

08002588 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3b01      	subs	r3, #1
 8002594:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002598:	d301      	bcc.n	800259e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800259a:	2301      	movs	r3, #1
 800259c:	e00f      	b.n	80025be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800259e:	4a0a      	ldr	r2, [pc, #40]	@ (80025c8 <SysTick_Config+0x40>)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025a6:	210f      	movs	r1, #15
 80025a8:	f04f 30ff 	mov.w	r0, #4294967295
 80025ac:	f7ff ff90 	bl	80024d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025b0:	4b05      	ldr	r3, [pc, #20]	@ (80025c8 <SysTick_Config+0x40>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025b6:	4b04      	ldr	r3, [pc, #16]	@ (80025c8 <SysTick_Config+0x40>)
 80025b8:	2207      	movs	r2, #7
 80025ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	e000e010 	.word	0xe000e010

080025cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7ff ff49 	bl	800246c <__NVIC_SetPriorityGrouping>
}
 80025da:	bf00      	nop
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b086      	sub	sp, #24
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	4603      	mov	r3, r0
 80025ea:	60b9      	str	r1, [r7, #8]
 80025ec:	607a      	str	r2, [r7, #4]
 80025ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025f4:	f7ff ff5e 	bl	80024b4 <__NVIC_GetPriorityGrouping>
 80025f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	68b9      	ldr	r1, [r7, #8]
 80025fe:	6978      	ldr	r0, [r7, #20]
 8002600:	f7ff ff90 	bl	8002524 <NVIC_EncodePriority>
 8002604:	4602      	mov	r2, r0
 8002606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800260a:	4611      	mov	r1, r2
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff ff5f 	bl	80024d0 <__NVIC_SetPriority>
}
 8002612:	bf00      	nop
 8002614:	3718      	adds	r7, #24
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b082      	sub	sp, #8
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7ff ffb0 	bl	8002588 <SysTick_Config>
 8002628:	4603      	mov	r3, r0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
	...

08002634 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002634:	b480      	push	{r7}
 8002636:	b08b      	sub	sp, #44	@ 0x2c
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800263e:	2300      	movs	r3, #0
 8002640:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002642:	2300      	movs	r3, #0
 8002644:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002646:	e169      	b.n	800291c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002648:	2201      	movs	r2, #1
 800264a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	69fa      	ldr	r2, [r7, #28]
 8002658:	4013      	ands	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	429a      	cmp	r2, r3
 8002662:	f040 8158 	bne.w	8002916 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	4a9a      	ldr	r2, [pc, #616]	@ (80028d4 <HAL_GPIO_Init+0x2a0>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d05e      	beq.n	800272e <HAL_GPIO_Init+0xfa>
 8002670:	4a98      	ldr	r2, [pc, #608]	@ (80028d4 <HAL_GPIO_Init+0x2a0>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d875      	bhi.n	8002762 <HAL_GPIO_Init+0x12e>
 8002676:	4a98      	ldr	r2, [pc, #608]	@ (80028d8 <HAL_GPIO_Init+0x2a4>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d058      	beq.n	800272e <HAL_GPIO_Init+0xfa>
 800267c:	4a96      	ldr	r2, [pc, #600]	@ (80028d8 <HAL_GPIO_Init+0x2a4>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d86f      	bhi.n	8002762 <HAL_GPIO_Init+0x12e>
 8002682:	4a96      	ldr	r2, [pc, #600]	@ (80028dc <HAL_GPIO_Init+0x2a8>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d052      	beq.n	800272e <HAL_GPIO_Init+0xfa>
 8002688:	4a94      	ldr	r2, [pc, #592]	@ (80028dc <HAL_GPIO_Init+0x2a8>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d869      	bhi.n	8002762 <HAL_GPIO_Init+0x12e>
 800268e:	4a94      	ldr	r2, [pc, #592]	@ (80028e0 <HAL_GPIO_Init+0x2ac>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d04c      	beq.n	800272e <HAL_GPIO_Init+0xfa>
 8002694:	4a92      	ldr	r2, [pc, #584]	@ (80028e0 <HAL_GPIO_Init+0x2ac>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d863      	bhi.n	8002762 <HAL_GPIO_Init+0x12e>
 800269a:	4a92      	ldr	r2, [pc, #584]	@ (80028e4 <HAL_GPIO_Init+0x2b0>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d046      	beq.n	800272e <HAL_GPIO_Init+0xfa>
 80026a0:	4a90      	ldr	r2, [pc, #576]	@ (80028e4 <HAL_GPIO_Init+0x2b0>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d85d      	bhi.n	8002762 <HAL_GPIO_Init+0x12e>
 80026a6:	2b12      	cmp	r3, #18
 80026a8:	d82a      	bhi.n	8002700 <HAL_GPIO_Init+0xcc>
 80026aa:	2b12      	cmp	r3, #18
 80026ac:	d859      	bhi.n	8002762 <HAL_GPIO_Init+0x12e>
 80026ae:	a201      	add	r2, pc, #4	@ (adr r2, 80026b4 <HAL_GPIO_Init+0x80>)
 80026b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b4:	0800272f 	.word	0x0800272f
 80026b8:	08002709 	.word	0x08002709
 80026bc:	0800271b 	.word	0x0800271b
 80026c0:	0800275d 	.word	0x0800275d
 80026c4:	08002763 	.word	0x08002763
 80026c8:	08002763 	.word	0x08002763
 80026cc:	08002763 	.word	0x08002763
 80026d0:	08002763 	.word	0x08002763
 80026d4:	08002763 	.word	0x08002763
 80026d8:	08002763 	.word	0x08002763
 80026dc:	08002763 	.word	0x08002763
 80026e0:	08002763 	.word	0x08002763
 80026e4:	08002763 	.word	0x08002763
 80026e8:	08002763 	.word	0x08002763
 80026ec:	08002763 	.word	0x08002763
 80026f0:	08002763 	.word	0x08002763
 80026f4:	08002763 	.word	0x08002763
 80026f8:	08002711 	.word	0x08002711
 80026fc:	08002725 	.word	0x08002725
 8002700:	4a79      	ldr	r2, [pc, #484]	@ (80028e8 <HAL_GPIO_Init+0x2b4>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d013      	beq.n	800272e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002706:	e02c      	b.n	8002762 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	623b      	str	r3, [r7, #32]
          break;
 800270e:	e029      	b.n	8002764 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	3304      	adds	r3, #4
 8002716:	623b      	str	r3, [r7, #32]
          break;
 8002718:	e024      	b.n	8002764 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	3308      	adds	r3, #8
 8002720:	623b      	str	r3, [r7, #32]
          break;
 8002722:	e01f      	b.n	8002764 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	330c      	adds	r3, #12
 800272a:	623b      	str	r3, [r7, #32]
          break;
 800272c:	e01a      	b.n	8002764 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d102      	bne.n	800273c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002736:	2304      	movs	r3, #4
 8002738:	623b      	str	r3, [r7, #32]
          break;
 800273a:	e013      	b.n	8002764 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d105      	bne.n	8002750 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002744:	2308      	movs	r3, #8
 8002746:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	69fa      	ldr	r2, [r7, #28]
 800274c:	611a      	str	r2, [r3, #16]
          break;
 800274e:	e009      	b.n	8002764 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002750:	2308      	movs	r3, #8
 8002752:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	69fa      	ldr	r2, [r7, #28]
 8002758:	615a      	str	r2, [r3, #20]
          break;
 800275a:	e003      	b.n	8002764 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800275c:	2300      	movs	r3, #0
 800275e:	623b      	str	r3, [r7, #32]
          break;
 8002760:	e000      	b.n	8002764 <HAL_GPIO_Init+0x130>
          break;
 8002762:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	2bff      	cmp	r3, #255	@ 0xff
 8002768:	d801      	bhi.n	800276e <HAL_GPIO_Init+0x13a>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	e001      	b.n	8002772 <HAL_GPIO_Init+0x13e>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	3304      	adds	r3, #4
 8002772:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	2bff      	cmp	r3, #255	@ 0xff
 8002778:	d802      	bhi.n	8002780 <HAL_GPIO_Init+0x14c>
 800277a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	e002      	b.n	8002786 <HAL_GPIO_Init+0x152>
 8002780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002782:	3b08      	subs	r3, #8
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	210f      	movs	r1, #15
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	fa01 f303 	lsl.w	r3, r1, r3
 8002794:	43db      	mvns	r3, r3
 8002796:	401a      	ands	r2, r3
 8002798:	6a39      	ldr	r1, [r7, #32]
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	fa01 f303 	lsl.w	r3, r1, r3
 80027a0:	431a      	orrs	r2, r3
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f000 80b1 	beq.w	8002916 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027b4:	4b4d      	ldr	r3, [pc, #308]	@ (80028ec <HAL_GPIO_Init+0x2b8>)
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	4a4c      	ldr	r2, [pc, #304]	@ (80028ec <HAL_GPIO_Init+0x2b8>)
 80027ba:	f043 0301 	orr.w	r3, r3, #1
 80027be:	6193      	str	r3, [r2, #24]
 80027c0:	4b4a      	ldr	r3, [pc, #296]	@ (80028ec <HAL_GPIO_Init+0x2b8>)
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	60bb      	str	r3, [r7, #8]
 80027ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80027cc:	4a48      	ldr	r2, [pc, #288]	@ (80028f0 <HAL_GPIO_Init+0x2bc>)
 80027ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d0:	089b      	lsrs	r3, r3, #2
 80027d2:	3302      	adds	r3, #2
 80027d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027dc:	f003 0303 	and.w	r3, r3, #3
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	220f      	movs	r2, #15
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	43db      	mvns	r3, r3
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	4013      	ands	r3, r2
 80027ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a40      	ldr	r2, [pc, #256]	@ (80028f4 <HAL_GPIO_Init+0x2c0>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d013      	beq.n	8002820 <HAL_GPIO_Init+0x1ec>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a3f      	ldr	r2, [pc, #252]	@ (80028f8 <HAL_GPIO_Init+0x2c4>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d00d      	beq.n	800281c <HAL_GPIO_Init+0x1e8>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a3e      	ldr	r2, [pc, #248]	@ (80028fc <HAL_GPIO_Init+0x2c8>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d007      	beq.n	8002818 <HAL_GPIO_Init+0x1e4>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a3d      	ldr	r2, [pc, #244]	@ (8002900 <HAL_GPIO_Init+0x2cc>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d101      	bne.n	8002814 <HAL_GPIO_Init+0x1e0>
 8002810:	2303      	movs	r3, #3
 8002812:	e006      	b.n	8002822 <HAL_GPIO_Init+0x1ee>
 8002814:	2304      	movs	r3, #4
 8002816:	e004      	b.n	8002822 <HAL_GPIO_Init+0x1ee>
 8002818:	2302      	movs	r3, #2
 800281a:	e002      	b.n	8002822 <HAL_GPIO_Init+0x1ee>
 800281c:	2301      	movs	r3, #1
 800281e:	e000      	b.n	8002822 <HAL_GPIO_Init+0x1ee>
 8002820:	2300      	movs	r3, #0
 8002822:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002824:	f002 0203 	and.w	r2, r2, #3
 8002828:	0092      	lsls	r2, r2, #2
 800282a:	4093      	lsls	r3, r2
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	4313      	orrs	r3, r2
 8002830:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002832:	492f      	ldr	r1, [pc, #188]	@ (80028f0 <HAL_GPIO_Init+0x2bc>)
 8002834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002836:	089b      	lsrs	r3, r3, #2
 8002838:	3302      	adds	r3, #2
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d006      	beq.n	800285a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800284c:	4b2d      	ldr	r3, [pc, #180]	@ (8002904 <HAL_GPIO_Init+0x2d0>)
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	492c      	ldr	r1, [pc, #176]	@ (8002904 <HAL_GPIO_Init+0x2d0>)
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	4313      	orrs	r3, r2
 8002856:	608b      	str	r3, [r1, #8]
 8002858:	e006      	b.n	8002868 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800285a:	4b2a      	ldr	r3, [pc, #168]	@ (8002904 <HAL_GPIO_Init+0x2d0>)
 800285c:	689a      	ldr	r2, [r3, #8]
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	43db      	mvns	r3, r3
 8002862:	4928      	ldr	r1, [pc, #160]	@ (8002904 <HAL_GPIO_Init+0x2d0>)
 8002864:	4013      	ands	r3, r2
 8002866:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d006      	beq.n	8002882 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002874:	4b23      	ldr	r3, [pc, #140]	@ (8002904 <HAL_GPIO_Init+0x2d0>)
 8002876:	68da      	ldr	r2, [r3, #12]
 8002878:	4922      	ldr	r1, [pc, #136]	@ (8002904 <HAL_GPIO_Init+0x2d0>)
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	4313      	orrs	r3, r2
 800287e:	60cb      	str	r3, [r1, #12]
 8002880:	e006      	b.n	8002890 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002882:	4b20      	ldr	r3, [pc, #128]	@ (8002904 <HAL_GPIO_Init+0x2d0>)
 8002884:	68da      	ldr	r2, [r3, #12]
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	43db      	mvns	r3, r3
 800288a:	491e      	ldr	r1, [pc, #120]	@ (8002904 <HAL_GPIO_Init+0x2d0>)
 800288c:	4013      	ands	r3, r2
 800288e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d006      	beq.n	80028aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800289c:	4b19      	ldr	r3, [pc, #100]	@ (8002904 <HAL_GPIO_Init+0x2d0>)
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	4918      	ldr	r1, [pc, #96]	@ (8002904 <HAL_GPIO_Init+0x2d0>)
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	604b      	str	r3, [r1, #4]
 80028a8:	e006      	b.n	80028b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80028aa:	4b16      	ldr	r3, [pc, #88]	@ (8002904 <HAL_GPIO_Init+0x2d0>)
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	43db      	mvns	r3, r3
 80028b2:	4914      	ldr	r1, [pc, #80]	@ (8002904 <HAL_GPIO_Init+0x2d0>)
 80028b4:	4013      	ands	r3, r2
 80028b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d021      	beq.n	8002908 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80028c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002904 <HAL_GPIO_Init+0x2d0>)
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	490e      	ldr	r1, [pc, #56]	@ (8002904 <HAL_GPIO_Init+0x2d0>)
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	600b      	str	r3, [r1, #0]
 80028d0:	e021      	b.n	8002916 <HAL_GPIO_Init+0x2e2>
 80028d2:	bf00      	nop
 80028d4:	10320000 	.word	0x10320000
 80028d8:	10310000 	.word	0x10310000
 80028dc:	10220000 	.word	0x10220000
 80028e0:	10210000 	.word	0x10210000
 80028e4:	10120000 	.word	0x10120000
 80028e8:	10110000 	.word	0x10110000
 80028ec:	40021000 	.word	0x40021000
 80028f0:	40010000 	.word	0x40010000
 80028f4:	40010800 	.word	0x40010800
 80028f8:	40010c00 	.word	0x40010c00
 80028fc:	40011000 	.word	0x40011000
 8002900:	40011400 	.word	0x40011400
 8002904:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002908:	4b0b      	ldr	r3, [pc, #44]	@ (8002938 <HAL_GPIO_Init+0x304>)
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	43db      	mvns	r3, r3
 8002910:	4909      	ldr	r1, [pc, #36]	@ (8002938 <HAL_GPIO_Init+0x304>)
 8002912:	4013      	ands	r3, r2
 8002914:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002918:	3301      	adds	r3, #1
 800291a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002922:	fa22 f303 	lsr.w	r3, r2, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	f47f ae8e 	bne.w	8002648 <HAL_GPIO_Init+0x14>
  }
}
 800292c:	bf00      	nop
 800292e:	bf00      	nop
 8002930:	372c      	adds	r7, #44	@ 0x2c
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr
 8002938:	40010400 	.word	0x40010400

0800293c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	460b      	mov	r3, r1
 8002946:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	887b      	ldrh	r3, [r7, #2]
 800294e:	4013      	ands	r3, r2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d002      	beq.n	800295a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002954:	2301      	movs	r3, #1
 8002956:	73fb      	strb	r3, [r7, #15]
 8002958:	e001      	b.n	800295e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800295a:	2300      	movs	r3, #0
 800295c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800295e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002960:	4618      	mov	r0, r3
 8002962:	3714      	adds	r7, #20
 8002964:	46bd      	mov	sp, r7
 8002966:	bc80      	pop	{r7}
 8002968:	4770      	bx	lr

0800296a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800296a:	b480      	push	{r7}
 800296c:	b083      	sub	sp, #12
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
 8002972:	460b      	mov	r3, r1
 8002974:	807b      	strh	r3, [r7, #2]
 8002976:	4613      	mov	r3, r2
 8002978:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800297a:	787b      	ldrb	r3, [r7, #1]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d003      	beq.n	8002988 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002980:	887a      	ldrh	r2, [r7, #2]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002986:	e003      	b.n	8002990 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002988:	887b      	ldrh	r3, [r7, #2]
 800298a:	041a      	lsls	r2, r3, #16
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	611a      	str	r2, [r3, #16]
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	bc80      	pop	{r7}
 8002998:	4770      	bx	lr
	...

0800299c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e12b      	b.n	8002c06 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d106      	bne.n	80029c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7fe fdea 	bl	800159c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2224      	movs	r2, #36	@ 0x24
 80029cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 0201 	bic.w	r2, r2, #1
 80029de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80029ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a00:	f001 fbf8 	bl	80041f4 <HAL_RCC_GetPCLK1Freq>
 8002a04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	4a81      	ldr	r2, [pc, #516]	@ (8002c10 <HAL_I2C_Init+0x274>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d807      	bhi.n	8002a20 <HAL_I2C_Init+0x84>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4a80      	ldr	r2, [pc, #512]	@ (8002c14 <HAL_I2C_Init+0x278>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	bf94      	ite	ls
 8002a18:	2301      	movls	r3, #1
 8002a1a:	2300      	movhi	r3, #0
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	e006      	b.n	8002a2e <HAL_I2C_Init+0x92>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	4a7d      	ldr	r2, [pc, #500]	@ (8002c18 <HAL_I2C_Init+0x27c>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	bf94      	ite	ls
 8002a28:	2301      	movls	r3, #1
 8002a2a:	2300      	movhi	r3, #0
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e0e7      	b.n	8002c06 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	4a78      	ldr	r2, [pc, #480]	@ (8002c1c <HAL_I2C_Init+0x280>)
 8002a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3e:	0c9b      	lsrs	r3, r3, #18
 8002a40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68ba      	ldr	r2, [r7, #8]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	4a6a      	ldr	r2, [pc, #424]	@ (8002c10 <HAL_I2C_Init+0x274>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d802      	bhi.n	8002a70 <HAL_I2C_Init+0xd4>
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	e009      	b.n	8002a84 <HAL_I2C_Init+0xe8>
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002a76:	fb02 f303 	mul.w	r3, r2, r3
 8002a7a:	4a69      	ldr	r2, [pc, #420]	@ (8002c20 <HAL_I2C_Init+0x284>)
 8002a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a80:	099b      	lsrs	r3, r3, #6
 8002a82:	3301      	adds	r3, #1
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	6812      	ldr	r2, [r2, #0]
 8002a88:	430b      	orrs	r3, r1
 8002a8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002a96:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	495c      	ldr	r1, [pc, #368]	@ (8002c10 <HAL_I2C_Init+0x274>)
 8002aa0:	428b      	cmp	r3, r1
 8002aa2:	d819      	bhi.n	8002ad8 <HAL_I2C_Init+0x13c>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	1e59      	subs	r1, r3, #1
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ab2:	1c59      	adds	r1, r3, #1
 8002ab4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002ab8:	400b      	ands	r3, r1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00a      	beq.n	8002ad4 <HAL_I2C_Init+0x138>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	1e59      	subs	r1, r3, #1
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002acc:	3301      	adds	r3, #1
 8002ace:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ad2:	e051      	b.n	8002b78 <HAL_I2C_Init+0x1dc>
 8002ad4:	2304      	movs	r3, #4
 8002ad6:	e04f      	b.n	8002b78 <HAL_I2C_Init+0x1dc>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d111      	bne.n	8002b04 <HAL_I2C_Init+0x168>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	1e58      	subs	r0, r3, #1
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6859      	ldr	r1, [r3, #4]
 8002ae8:	460b      	mov	r3, r1
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	440b      	add	r3, r1
 8002aee:	fbb0 f3f3 	udiv	r3, r0, r3
 8002af2:	3301      	adds	r3, #1
 8002af4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	bf0c      	ite	eq
 8002afc:	2301      	moveq	r3, #1
 8002afe:	2300      	movne	r3, #0
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	e012      	b.n	8002b2a <HAL_I2C_Init+0x18e>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	1e58      	subs	r0, r3, #1
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6859      	ldr	r1, [r3, #4]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	440b      	add	r3, r1
 8002b12:	0099      	lsls	r1, r3, #2
 8002b14:	440b      	add	r3, r1
 8002b16:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	bf0c      	ite	eq
 8002b24:	2301      	moveq	r3, #1
 8002b26:	2300      	movne	r3, #0
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <HAL_I2C_Init+0x196>
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e022      	b.n	8002b78 <HAL_I2C_Init+0x1dc>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10e      	bne.n	8002b58 <HAL_I2C_Init+0x1bc>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	1e58      	subs	r0, r3, #1
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6859      	ldr	r1, [r3, #4]
 8002b42:	460b      	mov	r3, r1
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	440b      	add	r3, r1
 8002b48:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b56:	e00f      	b.n	8002b78 <HAL_I2C_Init+0x1dc>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	1e58      	subs	r0, r3, #1
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6859      	ldr	r1, [r3, #4]
 8002b60:	460b      	mov	r3, r1
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	440b      	add	r3, r1
 8002b66:	0099      	lsls	r1, r3, #2
 8002b68:	440b      	add	r3, r1
 8002b6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b6e:	3301      	adds	r3, #1
 8002b70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b74:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b78:	6879      	ldr	r1, [r7, #4]
 8002b7a:	6809      	ldr	r1, [r1, #0]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	69da      	ldr	r2, [r3, #28]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	431a      	orrs	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002ba6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	6911      	ldr	r1, [r2, #16]
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	68d2      	ldr	r2, [r2, #12]
 8002bb2:	4311      	orrs	r1, r2
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	6812      	ldr	r2, [r2, #0]
 8002bb8:	430b      	orrs	r3, r1
 8002bba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	695a      	ldr	r2, [r3, #20]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0201 	orr.w	r2, r2, #1
 8002be6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	000186a0 	.word	0x000186a0
 8002c14:	001e847f 	.word	0x001e847f
 8002c18:	003d08ff 	.word	0x003d08ff
 8002c1c:	431bde83 	.word	0x431bde83
 8002c20:	10624dd3 	.word	0x10624dd3

08002c24 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b088      	sub	sp, #32
 8002c28:	af02      	add	r7, sp, #8
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	607a      	str	r2, [r7, #4]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	460b      	mov	r3, r1
 8002c32:	817b      	strh	r3, [r7, #10]
 8002c34:	4613      	mov	r3, r2
 8002c36:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c38:	f7fe ff10 	bl	8001a5c <HAL_GetTick>
 8002c3c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b20      	cmp	r3, #32
 8002c48:	f040 80e0 	bne.w	8002e0c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	9300      	str	r3, [sp, #0]
 8002c50:	2319      	movs	r3, #25
 8002c52:	2201      	movs	r2, #1
 8002c54:	4970      	ldr	r1, [pc, #448]	@ (8002e18 <HAL_I2C_Master_Transmit+0x1f4>)
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 fcc0 	bl	80035dc <I2C_WaitOnFlagUntilTimeout>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c62:	2302      	movs	r3, #2
 8002c64:	e0d3      	b.n	8002e0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d101      	bne.n	8002c74 <HAL_I2C_Master_Transmit+0x50>
 8002c70:	2302      	movs	r3, #2
 8002c72:	e0cc      	b.n	8002e0e <HAL_I2C_Master_Transmit+0x1ea>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d007      	beq.n	8002c9a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f042 0201 	orr.w	r2, r2, #1
 8002c98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ca8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2221      	movs	r2, #33	@ 0x21
 8002cae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2210      	movs	r2, #16
 8002cb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	893a      	ldrh	r2, [r7, #8]
 8002cca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	4a50      	ldr	r2, [pc, #320]	@ (8002e1c <HAL_I2C_Master_Transmit+0x1f8>)
 8002cda:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002cdc:	8979      	ldrh	r1, [r7, #10]
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	6a3a      	ldr	r2, [r7, #32]
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 fb10 	bl	8003308 <I2C_MasterRequestWrite>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e08d      	b.n	8002e0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	613b      	str	r3, [r7, #16]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	613b      	str	r3, [r7, #16]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	613b      	str	r3, [r7, #16]
 8002d06:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d08:	e066      	b.n	8002dd8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	6a39      	ldr	r1, [r7, #32]
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f000 fd7e 	bl	8003810 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00d      	beq.n	8002d36 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	d107      	bne.n	8002d32 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e06b      	b.n	8002e0e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3a:	781a      	ldrb	r2, [r3, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d46:	1c5a      	adds	r2, r3, #1
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	3b01      	subs	r3, #1
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	695b      	ldr	r3, [r3, #20]
 8002d6c:	f003 0304 	and.w	r3, r3, #4
 8002d70:	2b04      	cmp	r3, #4
 8002d72:	d11b      	bne.n	8002dac <HAL_I2C_Master_Transmit+0x188>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d017      	beq.n	8002dac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d80:	781a      	ldrb	r2, [r3, #0]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8c:	1c5a      	adds	r2, r3, #1
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002da4:	3b01      	subs	r3, #1
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	6a39      	ldr	r1, [r7, #32]
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 fd75 	bl	80038a0 <I2C_WaitOnBTFFlagUntilTimeout>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00d      	beq.n	8002dd8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc0:	2b04      	cmp	r3, #4
 8002dc2:	d107      	bne.n	8002dd4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dd2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e01a      	b.n	8002e0e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d194      	bne.n	8002d0a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2220      	movs	r2, #32
 8002df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	e000      	b.n	8002e0e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002e0c:	2302      	movs	r3, #2
  }
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3718      	adds	r7, #24
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	00100002 	.word	0x00100002
 8002e1c:	ffff0000 	.word	0xffff0000

08002e20 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b08c      	sub	sp, #48	@ 0x30
 8002e24:	af02      	add	r7, sp, #8
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	4608      	mov	r0, r1
 8002e2a:	4611      	mov	r1, r2
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	4603      	mov	r3, r0
 8002e30:	817b      	strh	r3, [r7, #10]
 8002e32:	460b      	mov	r3, r1
 8002e34:	813b      	strh	r3, [r7, #8]
 8002e36:	4613      	mov	r3, r2
 8002e38:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e3e:	f7fe fe0d 	bl	8001a5c <HAL_GetTick>
 8002e42:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b20      	cmp	r3, #32
 8002e4e:	f040 8250 	bne.w	80032f2 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	2319      	movs	r3, #25
 8002e58:	2201      	movs	r2, #1
 8002e5a:	4982      	ldr	r1, [pc, #520]	@ (8003064 <HAL_I2C_Mem_Read+0x244>)
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f000 fbbd 	bl	80035dc <I2C_WaitOnFlagUntilTimeout>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002e68:	2302      	movs	r3, #2
 8002e6a:	e243      	b.n	80032f4 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d101      	bne.n	8002e7a <HAL_I2C_Mem_Read+0x5a>
 8002e76:	2302      	movs	r3, #2
 8002e78:	e23c      	b.n	80032f4 <HAL_I2C_Mem_Read+0x4d4>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d007      	beq.n	8002ea0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f042 0201 	orr.w	r2, r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002eae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2222      	movs	r2, #34	@ 0x22
 8002eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2240      	movs	r2, #64	@ 0x40
 8002ebc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002eca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002ed0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	4a62      	ldr	r2, [pc, #392]	@ (8003068 <HAL_I2C_Mem_Read+0x248>)
 8002ee0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ee2:	88f8      	ldrh	r0, [r7, #6]
 8002ee4:	893a      	ldrh	r2, [r7, #8]
 8002ee6:	8979      	ldrh	r1, [r7, #10]
 8002ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eea:	9301      	str	r3, [sp, #4]
 8002eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 fa8a 	bl	800340c <I2C_RequestMemoryRead>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e1f8      	b.n	80032f4 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d113      	bne.n	8002f32 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61fb      	str	r3, [r7, #28]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	61fb      	str	r3, [r7, #28]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	61fb      	str	r3, [r7, #28]
 8002f1e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	e1cc      	b.n	80032cc <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d11e      	bne.n	8002f78 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f48:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f4a:	b672      	cpsid	i
}
 8002f4c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f4e:	2300      	movs	r3, #0
 8002f50:	61bb      	str	r3, [r7, #24]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	61bb      	str	r3, [r7, #24]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	61bb      	str	r3, [r7, #24]
 8002f62:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f72:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002f74:	b662      	cpsie	i
}
 8002f76:	e035      	b.n	8002fe4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d11e      	bne.n	8002fbe <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f8e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f90:	b672      	cpsid	i
}
 8002f92:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f94:	2300      	movs	r3, #0
 8002f96:	617b      	str	r3, [r7, #20]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	617b      	str	r3, [r7, #20]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	617b      	str	r3, [r7, #20]
 8002fa8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fb8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002fba:	b662      	cpsie	i
}
 8002fbc:	e012      	b.n	8002fe4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002fcc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fce:	2300      	movs	r3, #0
 8002fd0:	613b      	str	r3, [r7, #16]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	613b      	str	r3, [r7, #16]
 8002fe2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002fe4:	e172      	b.n	80032cc <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fea:	2b03      	cmp	r3, #3
 8002fec:	f200 811f 	bhi.w	800322e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d123      	bne.n	8003040 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ff8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ffa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f000 fc97 	bl	8003930 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e173      	b.n	80032f4 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	691a      	ldr	r2, [r3, #16]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003016:	b2d2      	uxtb	r2, r2
 8003018:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800301e:	1c5a      	adds	r2, r3, #1
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003028:	3b01      	subs	r3, #1
 800302a:	b29a      	uxth	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003034:	b29b      	uxth	r3, r3
 8003036:	3b01      	subs	r3, #1
 8003038:	b29a      	uxth	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800303e:	e145      	b.n	80032cc <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003044:	2b02      	cmp	r3, #2
 8003046:	d152      	bne.n	80030ee <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800304e:	2200      	movs	r2, #0
 8003050:	4906      	ldr	r1, [pc, #24]	@ (800306c <HAL_I2C_Mem_Read+0x24c>)
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 fac2 	bl	80035dc <I2C_WaitOnFlagUntilTimeout>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d008      	beq.n	8003070 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e148      	b.n	80032f4 <HAL_I2C_Mem_Read+0x4d4>
 8003062:	bf00      	nop
 8003064:	00100002 	.word	0x00100002
 8003068:	ffff0000 	.word	0xffff0000
 800306c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003070:	b672      	cpsid	i
}
 8003072:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003082:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	691a      	ldr	r2, [r3, #16]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003096:	1c5a      	adds	r2, r3, #1
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030a0:	3b01      	subs	r3, #1
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	3b01      	subs	r3, #1
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80030b6:	b662      	cpsie	i
}
 80030b8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	691a      	ldr	r2, [r3, #16]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c4:	b2d2      	uxtb	r2, r2
 80030c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030cc:	1c5a      	adds	r2, r3, #1
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030d6:	3b01      	subs	r3, #1
 80030d8:	b29a      	uxth	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	3b01      	subs	r3, #1
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80030ec:	e0ee      	b.n	80032cc <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f0:	9300      	str	r3, [sp, #0]
 80030f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030f4:	2200      	movs	r2, #0
 80030f6:	4981      	ldr	r1, [pc, #516]	@ (80032fc <HAL_I2C_Mem_Read+0x4dc>)
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f000 fa6f 	bl	80035dc <I2C_WaitOnFlagUntilTimeout>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e0f5      	b.n	80032f4 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003116:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003118:	b672      	cpsid	i
}
 800311a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	691a      	ldr	r2, [r3, #16]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003126:	b2d2      	uxtb	r2, r2
 8003128:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312e:	1c5a      	adds	r2, r3, #1
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003138:	3b01      	subs	r3, #1
 800313a:	b29a      	uxth	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003144:	b29b      	uxth	r3, r3
 8003146:	3b01      	subs	r3, #1
 8003148:	b29a      	uxth	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800314e:	4b6c      	ldr	r3, [pc, #432]	@ (8003300 <HAL_I2C_Mem_Read+0x4e0>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	08db      	lsrs	r3, r3, #3
 8003154:	4a6b      	ldr	r2, [pc, #428]	@ (8003304 <HAL_I2C_Mem_Read+0x4e4>)
 8003156:	fba2 2303 	umull	r2, r3, r2, r3
 800315a:	0a1a      	lsrs	r2, r3, #8
 800315c:	4613      	mov	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4413      	add	r3, r2
 8003162:	00da      	lsls	r2, r3, #3
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	3b01      	subs	r3, #1
 800316c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800316e:	6a3b      	ldr	r3, [r7, #32]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d118      	bne.n	80031a6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2220      	movs	r2, #32
 800317e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318e:	f043 0220 	orr.w	r2, r3, #32
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003196:	b662      	cpsie	i
}
 8003198:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e0a6      	b.n	80032f4 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	2b04      	cmp	r3, #4
 80031b2:	d1d9      	bne.n	8003168 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	691a      	ldr	r2, [r3, #16]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ce:	b2d2      	uxtb	r2, r2
 80031d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d6:	1c5a      	adds	r2, r3, #1
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031e0:	3b01      	subs	r3, #1
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	3b01      	subs	r3, #1
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80031f6:	b662      	cpsie	i
}
 80031f8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	691a      	ldr	r2, [r3, #16]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003204:	b2d2      	uxtb	r2, r2
 8003206:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320c:	1c5a      	adds	r2, r3, #1
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003216:	3b01      	subs	r3, #1
 8003218:	b29a      	uxth	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003222:	b29b      	uxth	r3, r3
 8003224:	3b01      	subs	r3, #1
 8003226:	b29a      	uxth	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800322c:	e04e      	b.n	80032cc <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800322e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003230:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f000 fb7c 	bl	8003930 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e058      	b.n	80032f4 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	691a      	ldr	r2, [r3, #16]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324c:	b2d2      	uxtb	r2, r2
 800324e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003254:	1c5a      	adds	r2, r3, #1
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800325e:	3b01      	subs	r3, #1
 8003260:	b29a      	uxth	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800326a:	b29b      	uxth	r3, r3
 800326c:	3b01      	subs	r3, #1
 800326e:	b29a      	uxth	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	f003 0304 	and.w	r3, r3, #4
 800327e:	2b04      	cmp	r3, #4
 8003280:	d124      	bne.n	80032cc <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003286:	2b03      	cmp	r3, #3
 8003288:	d107      	bne.n	800329a <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003298:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	691a      	ldr	r2, [r3, #16]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a4:	b2d2      	uxtb	r2, r2
 80032a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ac:	1c5a      	adds	r2, r3, #1
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032b6:	3b01      	subs	r3, #1
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	3b01      	subs	r3, #1
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f47f ae88 	bne.w	8002fe6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2220      	movs	r2, #32
 80032da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80032ee:	2300      	movs	r3, #0
 80032f0:	e000      	b.n	80032f4 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80032f2:	2302      	movs	r3, #2
  }
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3728      	adds	r7, #40	@ 0x28
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	00010004 	.word	0x00010004
 8003300:	20000004 	.word	0x20000004
 8003304:	14f8b589 	.word	0x14f8b589

08003308 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b088      	sub	sp, #32
 800330c:	af02      	add	r7, sp, #8
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	607a      	str	r2, [r7, #4]
 8003312:	603b      	str	r3, [r7, #0]
 8003314:	460b      	mov	r3, r1
 8003316:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800331c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	2b08      	cmp	r3, #8
 8003322:	d006      	beq.n	8003332 <I2C_MasterRequestWrite+0x2a>
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d003      	beq.n	8003332 <I2C_MasterRequestWrite+0x2a>
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003330:	d108      	bne.n	8003344 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003340:	601a      	str	r2, [r3, #0]
 8003342:	e00b      	b.n	800335c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003348:	2b12      	cmp	r3, #18
 800334a:	d107      	bne.n	800335c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800335a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003368:	68f8      	ldr	r0, [r7, #12]
 800336a:	f000 f937 	bl	80035dc <I2C_WaitOnFlagUntilTimeout>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00d      	beq.n	8003390 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800337e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003382:	d103      	bne.n	800338c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800338a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e035      	b.n	80033fc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003398:	d108      	bne.n	80033ac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800339a:	897b      	ldrh	r3, [r7, #10]
 800339c:	b2db      	uxtb	r3, r3
 800339e:	461a      	mov	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80033a8:	611a      	str	r2, [r3, #16]
 80033aa:	e01b      	b.n	80033e4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80033ac:	897b      	ldrh	r3, [r7, #10]
 80033ae:	11db      	asrs	r3, r3, #7
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	f003 0306 	and.w	r3, r3, #6
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	f063 030f 	orn	r3, r3, #15
 80033bc:	b2da      	uxtb	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	490e      	ldr	r1, [pc, #56]	@ (8003404 <I2C_MasterRequestWrite+0xfc>)
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	f000 f980 	bl	80036d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e010      	b.n	80033fc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80033da:	897b      	ldrh	r3, [r7, #10]
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	4907      	ldr	r1, [pc, #28]	@ (8003408 <I2C_MasterRequestWrite+0x100>)
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f000 f970 	bl	80036d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e000      	b.n	80033fc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3718      	adds	r7, #24
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	00010008 	.word	0x00010008
 8003408:	00010002 	.word	0x00010002

0800340c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b088      	sub	sp, #32
 8003410:	af02      	add	r7, sp, #8
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	4608      	mov	r0, r1
 8003416:	4611      	mov	r1, r2
 8003418:	461a      	mov	r2, r3
 800341a:	4603      	mov	r3, r0
 800341c:	817b      	strh	r3, [r7, #10]
 800341e:	460b      	mov	r3, r1
 8003420:	813b      	strh	r3, [r7, #8]
 8003422:	4613      	mov	r3, r2
 8003424:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003434:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003444:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003448:	9300      	str	r3, [sp, #0]
 800344a:	6a3b      	ldr	r3, [r7, #32]
 800344c:	2200      	movs	r2, #0
 800344e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f000 f8c2 	bl	80035dc <I2C_WaitOnFlagUntilTimeout>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00d      	beq.n	800347a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003468:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800346c:	d103      	bne.n	8003476 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003474:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e0aa      	b.n	80035d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800347a:	897b      	ldrh	r3, [r7, #10]
 800347c:	b2db      	uxtb	r3, r3
 800347e:	461a      	mov	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003488:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800348a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800348c:	6a3a      	ldr	r2, [r7, #32]
 800348e:	4952      	ldr	r1, [pc, #328]	@ (80035d8 <I2C_RequestMemoryRead+0x1cc>)
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f000 f91d 	bl	80036d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e097      	b.n	80035d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034a0:	2300      	movs	r3, #0
 80034a2:	617b      	str	r3, [r7, #20]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	617b      	str	r3, [r7, #20]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	617b      	str	r3, [r7, #20]
 80034b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034b8:	6a39      	ldr	r1, [r7, #32]
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f000 f9a8 	bl	8003810 <I2C_WaitOnTXEFlagUntilTimeout>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00d      	beq.n	80034e2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ca:	2b04      	cmp	r3, #4
 80034cc:	d107      	bne.n	80034de <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e076      	b.n	80035d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034e2:	88fb      	ldrh	r3, [r7, #6]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d105      	bne.n	80034f4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034e8:	893b      	ldrh	r3, [r7, #8]
 80034ea:	b2da      	uxtb	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	611a      	str	r2, [r3, #16]
 80034f2:	e021      	b.n	8003538 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80034f4:	893b      	ldrh	r3, [r7, #8]
 80034f6:	0a1b      	lsrs	r3, r3, #8
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	b2da      	uxtb	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003502:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003504:	6a39      	ldr	r1, [r7, #32]
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f000 f982 	bl	8003810 <I2C_WaitOnTXEFlagUntilTimeout>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00d      	beq.n	800352e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003516:	2b04      	cmp	r3, #4
 8003518:	d107      	bne.n	800352a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003528:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e050      	b.n	80035d0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800352e:	893b      	ldrh	r3, [r7, #8]
 8003530:	b2da      	uxtb	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003538:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800353a:	6a39      	ldr	r1, [r7, #32]
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f000 f967 	bl	8003810 <I2C_WaitOnTXEFlagUntilTimeout>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00d      	beq.n	8003564 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800354c:	2b04      	cmp	r3, #4
 800354e:	d107      	bne.n	8003560 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800355e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e035      	b.n	80035d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003572:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003576:	9300      	str	r3, [sp, #0]
 8003578:	6a3b      	ldr	r3, [r7, #32]
 800357a:	2200      	movs	r2, #0
 800357c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f000 f82b 	bl	80035dc <I2C_WaitOnFlagUntilTimeout>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00d      	beq.n	80035a8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003596:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800359a:	d103      	bne.n	80035a4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035a2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e013      	b.n	80035d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80035a8:	897b      	ldrh	r3, [r7, #10]
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	f043 0301 	orr.w	r3, r3, #1
 80035b0:	b2da      	uxtb	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ba:	6a3a      	ldr	r2, [r7, #32]
 80035bc:	4906      	ldr	r1, [pc, #24]	@ (80035d8 <I2C_RequestMemoryRead+0x1cc>)
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 f886 	bl	80036d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e000      	b.n	80035d0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3718      	adds	r7, #24
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	00010002 	.word	0x00010002

080035dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	603b      	str	r3, [r7, #0]
 80035e8:	4613      	mov	r3, r2
 80035ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035ec:	e048      	b.n	8003680 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f4:	d044      	beq.n	8003680 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035f6:	f7fe fa31 	bl	8001a5c <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	429a      	cmp	r2, r3
 8003604:	d302      	bcc.n	800360c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d139      	bne.n	8003680 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	0c1b      	lsrs	r3, r3, #16
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b01      	cmp	r3, #1
 8003614:	d10d      	bne.n	8003632 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	695b      	ldr	r3, [r3, #20]
 800361c:	43da      	mvns	r2, r3
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	4013      	ands	r3, r2
 8003622:	b29b      	uxth	r3, r3
 8003624:	2b00      	cmp	r3, #0
 8003626:	bf0c      	ite	eq
 8003628:	2301      	moveq	r3, #1
 800362a:	2300      	movne	r3, #0
 800362c:	b2db      	uxtb	r3, r3
 800362e:	461a      	mov	r2, r3
 8003630:	e00c      	b.n	800364c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	43da      	mvns	r2, r3
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	4013      	ands	r3, r2
 800363e:	b29b      	uxth	r3, r3
 8003640:	2b00      	cmp	r3, #0
 8003642:	bf0c      	ite	eq
 8003644:	2301      	moveq	r3, #1
 8003646:	2300      	movne	r3, #0
 8003648:	b2db      	uxtb	r3, r3
 800364a:	461a      	mov	r2, r3
 800364c:	79fb      	ldrb	r3, [r7, #7]
 800364e:	429a      	cmp	r2, r3
 8003650:	d116      	bne.n	8003680 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2220      	movs	r2, #32
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800366c:	f043 0220 	orr.w	r2, r3, #32
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e023      	b.n	80036c8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	0c1b      	lsrs	r3, r3, #16
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b01      	cmp	r3, #1
 8003688:	d10d      	bne.n	80036a6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	43da      	mvns	r2, r3
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	4013      	ands	r3, r2
 8003696:	b29b      	uxth	r3, r3
 8003698:	2b00      	cmp	r3, #0
 800369a:	bf0c      	ite	eq
 800369c:	2301      	moveq	r3, #1
 800369e:	2300      	movne	r3, #0
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	461a      	mov	r2, r3
 80036a4:	e00c      	b.n	80036c0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	43da      	mvns	r2, r3
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	4013      	ands	r3, r2
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	bf0c      	ite	eq
 80036b8:	2301      	moveq	r3, #1
 80036ba:	2300      	movne	r3, #0
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	461a      	mov	r2, r3
 80036c0:	79fb      	ldrb	r3, [r7, #7]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d093      	beq.n	80035ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
 80036dc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036de:	e071      	b.n	80037c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036ee:	d123      	bne.n	8003738 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036fe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003708:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2220      	movs	r2, #32
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003724:	f043 0204 	orr.w	r2, r3, #4
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e067      	b.n	8003808 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800373e:	d041      	beq.n	80037c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003740:	f7fe f98c 	bl	8001a5c <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	429a      	cmp	r2, r3
 800374e:	d302      	bcc.n	8003756 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d136      	bne.n	80037c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	0c1b      	lsrs	r3, r3, #16
 800375a:	b2db      	uxtb	r3, r3
 800375c:	2b01      	cmp	r3, #1
 800375e:	d10c      	bne.n	800377a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	43da      	mvns	r2, r3
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	4013      	ands	r3, r2
 800376c:	b29b      	uxth	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	bf14      	ite	ne
 8003772:	2301      	movne	r3, #1
 8003774:	2300      	moveq	r3, #0
 8003776:	b2db      	uxtb	r3, r3
 8003778:	e00b      	b.n	8003792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	43da      	mvns	r2, r3
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	4013      	ands	r3, r2
 8003786:	b29b      	uxth	r3, r3
 8003788:	2b00      	cmp	r3, #0
 800378a:	bf14      	ite	ne
 800378c:	2301      	movne	r3, #1
 800378e:	2300      	moveq	r3, #0
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d016      	beq.n	80037c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2220      	movs	r2, #32
 80037a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b0:	f043 0220 	orr.w	r2, r3, #32
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e021      	b.n	8003808 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	0c1b      	lsrs	r3, r3, #16
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d10c      	bne.n	80037e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	695b      	ldr	r3, [r3, #20]
 80037d4:	43da      	mvns	r2, r3
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	4013      	ands	r3, r2
 80037da:	b29b      	uxth	r3, r3
 80037dc:	2b00      	cmp	r3, #0
 80037de:	bf14      	ite	ne
 80037e0:	2301      	movne	r3, #1
 80037e2:	2300      	moveq	r3, #0
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	e00b      	b.n	8003800 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	43da      	mvns	r2, r3
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	4013      	ands	r3, r2
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	bf14      	ite	ne
 80037fa:	2301      	movne	r3, #1
 80037fc:	2300      	moveq	r3, #0
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	2b00      	cmp	r3, #0
 8003802:	f47f af6d 	bne.w	80036e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800381c:	e034      	b.n	8003888 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f000 f8e3 	bl	80039ea <I2C_IsAcknowledgeFailed>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e034      	b.n	8003898 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003834:	d028      	beq.n	8003888 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003836:	f7fe f911 	bl	8001a5c <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	429a      	cmp	r2, r3
 8003844:	d302      	bcc.n	800384c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d11d      	bne.n	8003888 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003856:	2b80      	cmp	r3, #128	@ 0x80
 8003858:	d016      	beq.n	8003888 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2220      	movs	r2, #32
 8003864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003874:	f043 0220 	orr.w	r2, r3, #32
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e007      	b.n	8003898 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003892:	2b80      	cmp	r3, #128	@ 0x80
 8003894:	d1c3      	bne.n	800381e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038ac:	e034      	b.n	8003918 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f000 f89b 	bl	80039ea <I2C_IsAcknowledgeFailed>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e034      	b.n	8003928 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c4:	d028      	beq.n	8003918 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038c6:	f7fe f8c9 	bl	8001a5c <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	68ba      	ldr	r2, [r7, #8]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d302      	bcc.n	80038dc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d11d      	bne.n	8003918 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	f003 0304 	and.w	r3, r3, #4
 80038e6:	2b04      	cmp	r3, #4
 80038e8:	d016      	beq.n	8003918 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2220      	movs	r2, #32
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003904:	f043 0220 	orr.w	r2, r3, #32
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e007      	b.n	8003928 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	f003 0304 	and.w	r3, r3, #4
 8003922:	2b04      	cmp	r3, #4
 8003924:	d1c3      	bne.n	80038ae <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800393c:	e049      	b.n	80039d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	695b      	ldr	r3, [r3, #20]
 8003944:	f003 0310 	and.w	r3, r3, #16
 8003948:	2b10      	cmp	r3, #16
 800394a:	d119      	bne.n	8003980 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f06f 0210 	mvn.w	r2, #16
 8003954:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2220      	movs	r2, #32
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e030      	b.n	80039e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003980:	f7fe f86c 	bl	8001a5c <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	68ba      	ldr	r2, [r7, #8]
 800398c:	429a      	cmp	r2, r3
 800398e:	d302      	bcc.n	8003996 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d11d      	bne.n	80039d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	695b      	ldr	r3, [r3, #20]
 800399c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039a0:	2b40      	cmp	r3, #64	@ 0x40
 80039a2:	d016      	beq.n	80039d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2220      	movs	r2, #32
 80039ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039be:	f043 0220 	orr.w	r2, r3, #32
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e007      	b.n	80039e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039dc:	2b40      	cmp	r3, #64	@ 0x40
 80039de:	d1ae      	bne.n	800393e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3710      	adds	r7, #16
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80039ea:	b480      	push	{r7}
 80039ec:	b083      	sub	sp, #12
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a00:	d11b      	bne.n	8003a3a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a0a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2220      	movs	r2, #32
 8003a16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a26:	f043 0204 	orr.w	r2, r3, #4
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e000      	b.n	8003a3c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bc80      	pop	{r7}
 8003a44:	4770      	bx	lr
	...

08003a48 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003a4c:	4b03      	ldr	r3, [pc, #12]	@ (8003a5c <HAL_PWR_EnableBkUpAccess+0x14>)
 8003a4e:	2201      	movs	r2, #1
 8003a50:	601a      	str	r2, [r3, #0]
}
 8003a52:	bf00      	nop
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bc80      	pop	{r7}
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	420e0020 	.word	0x420e0020

08003a60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e272      	b.n	8003f58 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f000 8087 	beq.w	8003b8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a80:	4b92      	ldr	r3, [pc, #584]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f003 030c 	and.w	r3, r3, #12
 8003a88:	2b04      	cmp	r3, #4
 8003a8a:	d00c      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a8c:	4b8f      	ldr	r3, [pc, #572]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f003 030c 	and.w	r3, r3, #12
 8003a94:	2b08      	cmp	r3, #8
 8003a96:	d112      	bne.n	8003abe <HAL_RCC_OscConfig+0x5e>
 8003a98:	4b8c      	ldr	r3, [pc, #560]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003aa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003aa4:	d10b      	bne.n	8003abe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa6:	4b89      	ldr	r3, [pc, #548]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d06c      	beq.n	8003b8c <HAL_RCC_OscConfig+0x12c>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d168      	bne.n	8003b8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e24c      	b.n	8003f58 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ac6:	d106      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x76>
 8003ac8:	4b80      	ldr	r3, [pc, #512]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a7f      	ldr	r2, [pc, #508]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003ace:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ad2:	6013      	str	r3, [r2, #0]
 8003ad4:	e02e      	b.n	8003b34 <HAL_RCC_OscConfig+0xd4>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10c      	bne.n	8003af8 <HAL_RCC_OscConfig+0x98>
 8003ade:	4b7b      	ldr	r3, [pc, #492]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a7a      	ldr	r2, [pc, #488]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003ae4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ae8:	6013      	str	r3, [r2, #0]
 8003aea:	4b78      	ldr	r3, [pc, #480]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a77      	ldr	r2, [pc, #476]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003af0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003af4:	6013      	str	r3, [r2, #0]
 8003af6:	e01d      	b.n	8003b34 <HAL_RCC_OscConfig+0xd4>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b00:	d10c      	bne.n	8003b1c <HAL_RCC_OscConfig+0xbc>
 8003b02:	4b72      	ldr	r3, [pc, #456]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a71      	ldr	r2, [pc, #452]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003b08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b0c:	6013      	str	r3, [r2, #0]
 8003b0e:	4b6f      	ldr	r3, [pc, #444]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a6e      	ldr	r2, [pc, #440]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003b14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b18:	6013      	str	r3, [r2, #0]
 8003b1a:	e00b      	b.n	8003b34 <HAL_RCC_OscConfig+0xd4>
 8003b1c:	4b6b      	ldr	r3, [pc, #428]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a6a      	ldr	r2, [pc, #424]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003b22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b26:	6013      	str	r3, [r2, #0]
 8003b28:	4b68      	ldr	r3, [pc, #416]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a67      	ldr	r2, [pc, #412]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003b2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d013      	beq.n	8003b64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b3c:	f7fd ff8e 	bl	8001a5c <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b42:	e008      	b.n	8003b56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b44:	f7fd ff8a 	bl	8001a5c <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b64      	cmp	r3, #100	@ 0x64
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e200      	b.n	8003f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b56:	4b5d      	ldr	r3, [pc, #372]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0f0      	beq.n	8003b44 <HAL_RCC_OscConfig+0xe4>
 8003b62:	e014      	b.n	8003b8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b64:	f7fd ff7a 	bl	8001a5c <HAL_GetTick>
 8003b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b6a:	e008      	b.n	8003b7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b6c:	f7fd ff76 	bl	8001a5c <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b64      	cmp	r3, #100	@ 0x64
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e1ec      	b.n	8003f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b7e:	4b53      	ldr	r3, [pc, #332]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1f0      	bne.n	8003b6c <HAL_RCC_OscConfig+0x10c>
 8003b8a:	e000      	b.n	8003b8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d063      	beq.n	8003c62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b9a:	4b4c      	ldr	r3, [pc, #304]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f003 030c 	and.w	r3, r3, #12
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00b      	beq.n	8003bbe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003ba6:	4b49      	ldr	r3, [pc, #292]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f003 030c 	and.w	r3, r3, #12
 8003bae:	2b08      	cmp	r3, #8
 8003bb0:	d11c      	bne.n	8003bec <HAL_RCC_OscConfig+0x18c>
 8003bb2:	4b46      	ldr	r3, [pc, #280]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d116      	bne.n	8003bec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bbe:	4b43      	ldr	r3, [pc, #268]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d005      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x176>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d001      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e1c0      	b.n	8003f58 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bd6:	4b3d      	ldr	r3, [pc, #244]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	00db      	lsls	r3, r3, #3
 8003be4:	4939      	ldr	r1, [pc, #228]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bea:	e03a      	b.n	8003c62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d020      	beq.n	8003c36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bf4:	4b36      	ldr	r3, [pc, #216]	@ (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bfa:	f7fd ff2f 	bl	8001a5c <HAL_GetTick>
 8003bfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c00:	e008      	b.n	8003c14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c02:	f7fd ff2b 	bl	8001a5c <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d901      	bls.n	8003c14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e1a1      	b.n	8003f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c14:	4b2d      	ldr	r3, [pc, #180]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d0f0      	beq.n	8003c02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c20:	4b2a      	ldr	r3, [pc, #168]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	4927      	ldr	r1, [pc, #156]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	600b      	str	r3, [r1, #0]
 8003c34:	e015      	b.n	8003c62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c36:	4b26      	ldr	r3, [pc, #152]	@ (8003cd0 <HAL_RCC_OscConfig+0x270>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c3c:	f7fd ff0e 	bl	8001a5c <HAL_GetTick>
 8003c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c42:	e008      	b.n	8003c56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c44:	f7fd ff0a 	bl	8001a5c <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e180      	b.n	8003f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c56:	4b1d      	ldr	r3, [pc, #116]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1f0      	bne.n	8003c44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0308 	and.w	r3, r3, #8
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d03a      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d019      	beq.n	8003caa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c76:	4b17      	ldr	r3, [pc, #92]	@ (8003cd4 <HAL_RCC_OscConfig+0x274>)
 8003c78:	2201      	movs	r2, #1
 8003c7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c7c:	f7fd feee 	bl	8001a5c <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c84:	f7fd feea 	bl	8001a5c <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e160      	b.n	8003f58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c96:	4b0d      	ldr	r3, [pc, #52]	@ (8003ccc <HAL_RCC_OscConfig+0x26c>)
 8003c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d0f0      	beq.n	8003c84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003ca2:	2001      	movs	r0, #1
 8003ca4:	f000 face 	bl	8004244 <RCC_Delay>
 8003ca8:	e01c      	b.n	8003ce4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003caa:	4b0a      	ldr	r3, [pc, #40]	@ (8003cd4 <HAL_RCC_OscConfig+0x274>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cb0:	f7fd fed4 	bl	8001a5c <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cb6:	e00f      	b.n	8003cd8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cb8:	f7fd fed0 	bl	8001a5c <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d908      	bls.n	8003cd8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e146      	b.n	8003f58 <HAL_RCC_OscConfig+0x4f8>
 8003cca:	bf00      	nop
 8003ccc:	40021000 	.word	0x40021000
 8003cd0:	42420000 	.word	0x42420000
 8003cd4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cd8:	4b92      	ldr	r3, [pc, #584]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1e9      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0304 	and.w	r3, r3, #4
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f000 80a6 	beq.w	8003e3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cf6:	4b8b      	ldr	r3, [pc, #556]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003cf8:	69db      	ldr	r3, [r3, #28]
 8003cfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10d      	bne.n	8003d1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d02:	4b88      	ldr	r3, [pc, #544]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003d04:	69db      	ldr	r3, [r3, #28]
 8003d06:	4a87      	ldr	r2, [pc, #540]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003d08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d0c:	61d3      	str	r3, [r2, #28]
 8003d0e:	4b85      	ldr	r3, [pc, #532]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d16:	60bb      	str	r3, [r7, #8]
 8003d18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d1e:	4b82      	ldr	r3, [pc, #520]	@ (8003f28 <HAL_RCC_OscConfig+0x4c8>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d118      	bne.n	8003d5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d2a:	4b7f      	ldr	r3, [pc, #508]	@ (8003f28 <HAL_RCC_OscConfig+0x4c8>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a7e      	ldr	r2, [pc, #504]	@ (8003f28 <HAL_RCC_OscConfig+0x4c8>)
 8003d30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d36:	f7fd fe91 	bl	8001a5c <HAL_GetTick>
 8003d3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d3c:	e008      	b.n	8003d50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d3e:	f7fd fe8d 	bl	8001a5c <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b64      	cmp	r3, #100	@ 0x64
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e103      	b.n	8003f58 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d50:	4b75      	ldr	r3, [pc, #468]	@ (8003f28 <HAL_RCC_OscConfig+0x4c8>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d0f0      	beq.n	8003d3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d106      	bne.n	8003d72 <HAL_RCC_OscConfig+0x312>
 8003d64:	4b6f      	ldr	r3, [pc, #444]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	4a6e      	ldr	r2, [pc, #440]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003d6a:	f043 0301 	orr.w	r3, r3, #1
 8003d6e:	6213      	str	r3, [r2, #32]
 8003d70:	e02d      	b.n	8003dce <HAL_RCC_OscConfig+0x36e>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10c      	bne.n	8003d94 <HAL_RCC_OscConfig+0x334>
 8003d7a:	4b6a      	ldr	r3, [pc, #424]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	4a69      	ldr	r2, [pc, #420]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003d80:	f023 0301 	bic.w	r3, r3, #1
 8003d84:	6213      	str	r3, [r2, #32]
 8003d86:	4b67      	ldr	r3, [pc, #412]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	4a66      	ldr	r2, [pc, #408]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003d8c:	f023 0304 	bic.w	r3, r3, #4
 8003d90:	6213      	str	r3, [r2, #32]
 8003d92:	e01c      	b.n	8003dce <HAL_RCC_OscConfig+0x36e>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	2b05      	cmp	r3, #5
 8003d9a:	d10c      	bne.n	8003db6 <HAL_RCC_OscConfig+0x356>
 8003d9c:	4b61      	ldr	r3, [pc, #388]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	4a60      	ldr	r2, [pc, #384]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003da2:	f043 0304 	orr.w	r3, r3, #4
 8003da6:	6213      	str	r3, [r2, #32]
 8003da8:	4b5e      	ldr	r3, [pc, #376]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	4a5d      	ldr	r2, [pc, #372]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003dae:	f043 0301 	orr.w	r3, r3, #1
 8003db2:	6213      	str	r3, [r2, #32]
 8003db4:	e00b      	b.n	8003dce <HAL_RCC_OscConfig+0x36e>
 8003db6:	4b5b      	ldr	r3, [pc, #364]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	4a5a      	ldr	r2, [pc, #360]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003dbc:	f023 0301 	bic.w	r3, r3, #1
 8003dc0:	6213      	str	r3, [r2, #32]
 8003dc2:	4b58      	ldr	r3, [pc, #352]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	4a57      	ldr	r2, [pc, #348]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003dc8:	f023 0304 	bic.w	r3, r3, #4
 8003dcc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d015      	beq.n	8003e02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dd6:	f7fd fe41 	bl	8001a5c <HAL_GetTick>
 8003dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ddc:	e00a      	b.n	8003df4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dde:	f7fd fe3d 	bl	8001a5c <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e0b1      	b.n	8003f58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003df4:	4b4b      	ldr	r3, [pc, #300]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d0ee      	beq.n	8003dde <HAL_RCC_OscConfig+0x37e>
 8003e00:	e014      	b.n	8003e2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e02:	f7fd fe2b 	bl	8001a5c <HAL_GetTick>
 8003e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e08:	e00a      	b.n	8003e20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e0a:	f7fd fe27 	bl	8001a5c <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d901      	bls.n	8003e20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e09b      	b.n	8003f58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e20:	4b40      	ldr	r3, [pc, #256]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1ee      	bne.n	8003e0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e2c:	7dfb      	ldrb	r3, [r7, #23]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d105      	bne.n	8003e3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e32:	4b3c      	ldr	r3, [pc, #240]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	4a3b      	ldr	r2, [pc, #236]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003e38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	f000 8087 	beq.w	8003f56 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e48:	4b36      	ldr	r3, [pc, #216]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f003 030c 	and.w	r3, r3, #12
 8003e50:	2b08      	cmp	r3, #8
 8003e52:	d061      	beq.n	8003f18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	69db      	ldr	r3, [r3, #28]
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d146      	bne.n	8003eea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e5c:	4b33      	ldr	r3, [pc, #204]	@ (8003f2c <HAL_RCC_OscConfig+0x4cc>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e62:	f7fd fdfb 	bl	8001a5c <HAL_GetTick>
 8003e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e68:	e008      	b.n	8003e7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e6a:	f7fd fdf7 	bl	8001a5c <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d901      	bls.n	8003e7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e06d      	b.n	8003f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e7c:	4b29      	ldr	r3, [pc, #164]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1f0      	bne.n	8003e6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
 8003e8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e90:	d108      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003e92:	4b24      	ldr	r3, [pc, #144]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	4921      	ldr	r1, [pc, #132]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ea4:	4b1f      	ldr	r3, [pc, #124]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a19      	ldr	r1, [r3, #32]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb4:	430b      	orrs	r3, r1
 8003eb6:	491b      	ldr	r1, [pc, #108]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ebc:	4b1b      	ldr	r3, [pc, #108]	@ (8003f2c <HAL_RCC_OscConfig+0x4cc>)
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec2:	f7fd fdcb 	bl	8001a5c <HAL_GetTick>
 8003ec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ec8:	e008      	b.n	8003edc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eca:	f7fd fdc7 	bl	8001a5c <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d901      	bls.n	8003edc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e03d      	b.n	8003f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003edc:	4b11      	ldr	r3, [pc, #68]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d0f0      	beq.n	8003eca <HAL_RCC_OscConfig+0x46a>
 8003ee8:	e035      	b.n	8003f56 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eea:	4b10      	ldr	r3, [pc, #64]	@ (8003f2c <HAL_RCC_OscConfig+0x4cc>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef0:	f7fd fdb4 	bl	8001a5c <HAL_GetTick>
 8003ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ef6:	e008      	b.n	8003f0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ef8:	f7fd fdb0 	bl	8001a5c <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e026      	b.n	8003f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f0a:	4b06      	ldr	r3, [pc, #24]	@ (8003f24 <HAL_RCC_OscConfig+0x4c4>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1f0      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x498>
 8003f16:	e01e      	b.n	8003f56 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	69db      	ldr	r3, [r3, #28]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d107      	bne.n	8003f30 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e019      	b.n	8003f58 <HAL_RCC_OscConfig+0x4f8>
 8003f24:	40021000 	.word	0x40021000
 8003f28:	40007000 	.word	0x40007000
 8003f2c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f30:	4b0b      	ldr	r3, [pc, #44]	@ (8003f60 <HAL_RCC_OscConfig+0x500>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a1b      	ldr	r3, [r3, #32]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d106      	bne.n	8003f52 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d001      	beq.n	8003f56 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e000      	b.n	8003f58 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3718      	adds	r7, #24
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	40021000 	.word	0x40021000

08003f64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d101      	bne.n	8003f78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e0d0      	b.n	800411a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f78:	4b6a      	ldr	r3, [pc, #424]	@ (8004124 <HAL_RCC_ClockConfig+0x1c0>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0307 	and.w	r3, r3, #7
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d910      	bls.n	8003fa8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f86:	4b67      	ldr	r3, [pc, #412]	@ (8004124 <HAL_RCC_ClockConfig+0x1c0>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f023 0207 	bic.w	r2, r3, #7
 8003f8e:	4965      	ldr	r1, [pc, #404]	@ (8004124 <HAL_RCC_ClockConfig+0x1c0>)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f96:	4b63      	ldr	r3, [pc, #396]	@ (8004124 <HAL_RCC_ClockConfig+0x1c0>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0307 	and.w	r3, r3, #7
 8003f9e:	683a      	ldr	r2, [r7, #0]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d001      	beq.n	8003fa8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e0b8      	b.n	800411a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d020      	beq.n	8003ff6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0304 	and.w	r3, r3, #4
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d005      	beq.n	8003fcc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fc0:	4b59      	ldr	r3, [pc, #356]	@ (8004128 <HAL_RCC_ClockConfig+0x1c4>)
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	4a58      	ldr	r2, [pc, #352]	@ (8004128 <HAL_RCC_ClockConfig+0x1c4>)
 8003fc6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003fca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0308 	and.w	r3, r3, #8
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d005      	beq.n	8003fe4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fd8:	4b53      	ldr	r3, [pc, #332]	@ (8004128 <HAL_RCC_ClockConfig+0x1c4>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	4a52      	ldr	r2, [pc, #328]	@ (8004128 <HAL_RCC_ClockConfig+0x1c4>)
 8003fde:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003fe2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fe4:	4b50      	ldr	r3, [pc, #320]	@ (8004128 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	494d      	ldr	r1, [pc, #308]	@ (8004128 <HAL_RCC_ClockConfig+0x1c4>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d040      	beq.n	8004084 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d107      	bne.n	800401a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800400a:	4b47      	ldr	r3, [pc, #284]	@ (8004128 <HAL_RCC_ClockConfig+0x1c4>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d115      	bne.n	8004042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e07f      	b.n	800411a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	2b02      	cmp	r3, #2
 8004020:	d107      	bne.n	8004032 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004022:	4b41      	ldr	r3, [pc, #260]	@ (8004128 <HAL_RCC_ClockConfig+0x1c4>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d109      	bne.n	8004042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e073      	b.n	800411a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004032:	4b3d      	ldr	r3, [pc, #244]	@ (8004128 <HAL_RCC_ClockConfig+0x1c4>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e06b      	b.n	800411a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004042:	4b39      	ldr	r3, [pc, #228]	@ (8004128 <HAL_RCC_ClockConfig+0x1c4>)
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f023 0203 	bic.w	r2, r3, #3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	4936      	ldr	r1, [pc, #216]	@ (8004128 <HAL_RCC_ClockConfig+0x1c4>)
 8004050:	4313      	orrs	r3, r2
 8004052:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004054:	f7fd fd02 	bl	8001a5c <HAL_GetTick>
 8004058:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800405a:	e00a      	b.n	8004072 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800405c:	f7fd fcfe 	bl	8001a5c <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	f241 3288 	movw	r2, #5000	@ 0x1388
 800406a:	4293      	cmp	r3, r2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e053      	b.n	800411a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004072:	4b2d      	ldr	r3, [pc, #180]	@ (8004128 <HAL_RCC_ClockConfig+0x1c4>)
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f003 020c 	and.w	r2, r3, #12
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	429a      	cmp	r2, r3
 8004082:	d1eb      	bne.n	800405c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004084:	4b27      	ldr	r3, [pc, #156]	@ (8004124 <HAL_RCC_ClockConfig+0x1c0>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0307 	and.w	r3, r3, #7
 800408c:	683a      	ldr	r2, [r7, #0]
 800408e:	429a      	cmp	r2, r3
 8004090:	d210      	bcs.n	80040b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004092:	4b24      	ldr	r3, [pc, #144]	@ (8004124 <HAL_RCC_ClockConfig+0x1c0>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f023 0207 	bic.w	r2, r3, #7
 800409a:	4922      	ldr	r1, [pc, #136]	@ (8004124 <HAL_RCC_ClockConfig+0x1c0>)
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	4313      	orrs	r3, r2
 80040a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040a2:	4b20      	ldr	r3, [pc, #128]	@ (8004124 <HAL_RCC_ClockConfig+0x1c0>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0307 	and.w	r3, r3, #7
 80040aa:	683a      	ldr	r2, [r7, #0]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d001      	beq.n	80040b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e032      	b.n	800411a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0304 	and.w	r3, r3, #4
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d008      	beq.n	80040d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040c0:	4b19      	ldr	r3, [pc, #100]	@ (8004128 <HAL_RCC_ClockConfig+0x1c4>)
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	4916      	ldr	r1, [pc, #88]	@ (8004128 <HAL_RCC_ClockConfig+0x1c4>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0308 	and.w	r3, r3, #8
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d009      	beq.n	80040f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80040de:	4b12      	ldr	r3, [pc, #72]	@ (8004128 <HAL_RCC_ClockConfig+0x1c4>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	490e      	ldr	r1, [pc, #56]	@ (8004128 <HAL_RCC_ClockConfig+0x1c4>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040f2:	f000 f821 	bl	8004138 <HAL_RCC_GetSysClockFreq>
 80040f6:	4602      	mov	r2, r0
 80040f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004128 <HAL_RCC_ClockConfig+0x1c4>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	091b      	lsrs	r3, r3, #4
 80040fe:	f003 030f 	and.w	r3, r3, #15
 8004102:	490a      	ldr	r1, [pc, #40]	@ (800412c <HAL_RCC_ClockConfig+0x1c8>)
 8004104:	5ccb      	ldrb	r3, [r1, r3]
 8004106:	fa22 f303 	lsr.w	r3, r2, r3
 800410a:	4a09      	ldr	r2, [pc, #36]	@ (8004130 <HAL_RCC_ClockConfig+0x1cc>)
 800410c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800410e:	4b09      	ldr	r3, [pc, #36]	@ (8004134 <HAL_RCC_ClockConfig+0x1d0>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4618      	mov	r0, r3
 8004114:	f7fd fc60 	bl	80019d8 <HAL_InitTick>

  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3710      	adds	r7, #16
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	40022000 	.word	0x40022000
 8004128:	40021000 	.word	0x40021000
 800412c:	08006748 	.word	0x08006748
 8004130:	20000004 	.word	0x20000004
 8004134:	20000008 	.word	0x20000008

08004138 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004138:	b480      	push	{r7}
 800413a:	b087      	sub	sp, #28
 800413c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800413e:	2300      	movs	r3, #0
 8004140:	60fb      	str	r3, [r7, #12]
 8004142:	2300      	movs	r3, #0
 8004144:	60bb      	str	r3, [r7, #8]
 8004146:	2300      	movs	r3, #0
 8004148:	617b      	str	r3, [r7, #20]
 800414a:	2300      	movs	r3, #0
 800414c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800414e:	2300      	movs	r3, #0
 8004150:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004152:	4b1e      	ldr	r3, [pc, #120]	@ (80041cc <HAL_RCC_GetSysClockFreq+0x94>)
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f003 030c 	and.w	r3, r3, #12
 800415e:	2b04      	cmp	r3, #4
 8004160:	d002      	beq.n	8004168 <HAL_RCC_GetSysClockFreq+0x30>
 8004162:	2b08      	cmp	r3, #8
 8004164:	d003      	beq.n	800416e <HAL_RCC_GetSysClockFreq+0x36>
 8004166:	e027      	b.n	80041b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004168:	4b19      	ldr	r3, [pc, #100]	@ (80041d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800416a:	613b      	str	r3, [r7, #16]
      break;
 800416c:	e027      	b.n	80041be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	0c9b      	lsrs	r3, r3, #18
 8004172:	f003 030f 	and.w	r3, r3, #15
 8004176:	4a17      	ldr	r2, [pc, #92]	@ (80041d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004178:	5cd3      	ldrb	r3, [r2, r3]
 800417a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d010      	beq.n	80041a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004186:	4b11      	ldr	r3, [pc, #68]	@ (80041cc <HAL_RCC_GetSysClockFreq+0x94>)
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	0c5b      	lsrs	r3, r3, #17
 800418c:	f003 0301 	and.w	r3, r3, #1
 8004190:	4a11      	ldr	r2, [pc, #68]	@ (80041d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004192:	5cd3      	ldrb	r3, [r2, r3]
 8004194:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a0d      	ldr	r2, [pc, #52]	@ (80041d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800419a:	fb03 f202 	mul.w	r2, r3, r2
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a4:	617b      	str	r3, [r7, #20]
 80041a6:	e004      	b.n	80041b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a0c      	ldr	r2, [pc, #48]	@ (80041dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80041ac:	fb02 f303 	mul.w	r3, r2, r3
 80041b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	613b      	str	r3, [r7, #16]
      break;
 80041b6:	e002      	b.n	80041be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80041b8:	4b05      	ldr	r3, [pc, #20]	@ (80041d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80041ba:	613b      	str	r3, [r7, #16]
      break;
 80041bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041be:	693b      	ldr	r3, [r7, #16]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	371c      	adds	r7, #28
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bc80      	pop	{r7}
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	40021000 	.word	0x40021000
 80041d0:	007a1200 	.word	0x007a1200
 80041d4:	08006760 	.word	0x08006760
 80041d8:	08006770 	.word	0x08006770
 80041dc:	003d0900 	.word	0x003d0900

080041e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041e0:	b480      	push	{r7}
 80041e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041e4:	4b02      	ldr	r3, [pc, #8]	@ (80041f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80041e6:	681b      	ldr	r3, [r3, #0]
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bc80      	pop	{r7}
 80041ee:	4770      	bx	lr
 80041f0:	20000004 	.word	0x20000004

080041f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041f8:	f7ff fff2 	bl	80041e0 <HAL_RCC_GetHCLKFreq>
 80041fc:	4602      	mov	r2, r0
 80041fe:	4b05      	ldr	r3, [pc, #20]	@ (8004214 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	0a1b      	lsrs	r3, r3, #8
 8004204:	f003 0307 	and.w	r3, r3, #7
 8004208:	4903      	ldr	r1, [pc, #12]	@ (8004218 <HAL_RCC_GetPCLK1Freq+0x24>)
 800420a:	5ccb      	ldrb	r3, [r1, r3]
 800420c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004210:	4618      	mov	r0, r3
 8004212:	bd80      	pop	{r7, pc}
 8004214:	40021000 	.word	0x40021000
 8004218:	08006758 	.word	0x08006758

0800421c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004220:	f7ff ffde 	bl	80041e0 <HAL_RCC_GetHCLKFreq>
 8004224:	4602      	mov	r2, r0
 8004226:	4b05      	ldr	r3, [pc, #20]	@ (800423c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	0adb      	lsrs	r3, r3, #11
 800422c:	f003 0307 	and.w	r3, r3, #7
 8004230:	4903      	ldr	r1, [pc, #12]	@ (8004240 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004232:	5ccb      	ldrb	r3, [r1, r3]
 8004234:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004238:	4618      	mov	r0, r3
 800423a:	bd80      	pop	{r7, pc}
 800423c:	40021000 	.word	0x40021000
 8004240:	08006758 	.word	0x08006758

08004244 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800424c:	4b0a      	ldr	r3, [pc, #40]	@ (8004278 <RCC_Delay+0x34>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a0a      	ldr	r2, [pc, #40]	@ (800427c <RCC_Delay+0x38>)
 8004252:	fba2 2303 	umull	r2, r3, r2, r3
 8004256:	0a5b      	lsrs	r3, r3, #9
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	fb02 f303 	mul.w	r3, r2, r3
 800425e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004260:	bf00      	nop
  }
  while (Delay --);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	1e5a      	subs	r2, r3, #1
 8004266:	60fa      	str	r2, [r7, #12]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1f9      	bne.n	8004260 <RCC_Delay+0x1c>
}
 800426c:	bf00      	nop
 800426e:	bf00      	nop
 8004270:	3714      	adds	r7, #20
 8004272:	46bd      	mov	sp, r7
 8004274:	bc80      	pop	{r7}
 8004276:	4770      	bx	lr
 8004278:	20000004 	.word	0x20000004
 800427c:	10624dd3 	.word	0x10624dd3

08004280 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004288:	2300      	movs	r3, #0
 800428a:	613b      	str	r3, [r7, #16]
 800428c:	2300      	movs	r3, #0
 800428e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0301 	and.w	r3, r3, #1
 8004298:	2b00      	cmp	r3, #0
 800429a:	d07d      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800429c:	2300      	movs	r3, #0
 800429e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042a0:	4b4f      	ldr	r3, [pc, #316]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042a2:	69db      	ldr	r3, [r3, #28]
 80042a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d10d      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042ac:	4b4c      	ldr	r3, [pc, #304]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042ae:	69db      	ldr	r3, [r3, #28]
 80042b0:	4a4b      	ldr	r2, [pc, #300]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042b6:	61d3      	str	r3, [r2, #28]
 80042b8:	4b49      	ldr	r3, [pc, #292]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042ba:	69db      	ldr	r3, [r3, #28]
 80042bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042c0:	60bb      	str	r3, [r7, #8]
 80042c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042c4:	2301      	movs	r3, #1
 80042c6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042c8:	4b46      	ldr	r3, [pc, #280]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d118      	bne.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042d4:	4b43      	ldr	r3, [pc, #268]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a42      	ldr	r2, [pc, #264]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042e0:	f7fd fbbc 	bl	8001a5c <HAL_GetTick>
 80042e4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042e6:	e008      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042e8:	f7fd fbb8 	bl	8001a5c <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b64      	cmp	r3, #100	@ 0x64
 80042f4:	d901      	bls.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e06d      	b.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042fa:	4b3a      	ldr	r3, [pc, #232]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004302:	2b00      	cmp	r3, #0
 8004304:	d0f0      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004306:	4b36      	ldr	r3, [pc, #216]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800430e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d02e      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	429a      	cmp	r2, r3
 8004322:	d027      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004324:	4b2e      	ldr	r3, [pc, #184]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004326:	6a1b      	ldr	r3, [r3, #32]
 8004328:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800432c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800432e:	4b2e      	ldr	r3, [pc, #184]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004330:	2201      	movs	r2, #1
 8004332:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004334:	4b2c      	ldr	r3, [pc, #176]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004336:	2200      	movs	r2, #0
 8004338:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800433a:	4a29      	ldr	r2, [pc, #164]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b00      	cmp	r3, #0
 8004348:	d014      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800434a:	f7fd fb87 	bl	8001a5c <HAL_GetTick>
 800434e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004350:	e00a      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004352:	f7fd fb83 	bl	8001a5c <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004360:	4293      	cmp	r3, r2
 8004362:	d901      	bls.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e036      	b.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004368:	4b1d      	ldr	r3, [pc, #116]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800436a:	6a1b      	ldr	r3, [r3, #32]
 800436c:	f003 0302 	and.w	r3, r3, #2
 8004370:	2b00      	cmp	r3, #0
 8004372:	d0ee      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004374:	4b1a      	ldr	r3, [pc, #104]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	4917      	ldr	r1, [pc, #92]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004382:	4313      	orrs	r3, r2
 8004384:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004386:	7dfb      	ldrb	r3, [r7, #23]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d105      	bne.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800438c:	4b14      	ldr	r3, [pc, #80]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800438e:	69db      	ldr	r3, [r3, #28]
 8004390:	4a13      	ldr	r2, [pc, #76]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004392:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004396:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d008      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043a4:	4b0e      	ldr	r3, [pc, #56]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	490b      	ldr	r1, [pc, #44]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0310 	and.w	r3, r3, #16
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d008      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043c2:	4b07      	ldr	r3, [pc, #28]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	4904      	ldr	r1, [pc, #16]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3718      	adds	r7, #24
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	40021000 	.word	0x40021000
 80043e4:	40007000 	.word	0x40007000
 80043e8:	42420440 	.word	0x42420440

080043ec <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b088      	sub	sp, #32
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80043f4:	2300      	movs	r3, #0
 80043f6:	617b      	str	r3, [r7, #20]
 80043f8:	2300      	movs	r3, #0
 80043fa:	61fb      	str	r3, [r7, #28]
 80043fc:	2300      	movs	r3, #0
 80043fe:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004400:	2300      	movs	r3, #0
 8004402:	60fb      	str	r3, [r7, #12]
 8004404:	2300      	movs	r3, #0
 8004406:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b10      	cmp	r3, #16
 800440c:	d00a      	beq.n	8004424 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2b10      	cmp	r3, #16
 8004412:	f200 808a 	bhi.w	800452a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d045      	beq.n	80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b02      	cmp	r3, #2
 8004420:	d075      	beq.n	800450e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004422:	e082      	b.n	800452a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004424:	4b46      	ldr	r3, [pc, #280]	@ (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800442a:	4b45      	ldr	r3, [pc, #276]	@ (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d07b      	beq.n	800452e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	0c9b      	lsrs	r3, r3, #18
 800443a:	f003 030f 	and.w	r3, r3, #15
 800443e:	4a41      	ldr	r2, [pc, #260]	@ (8004544 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004440:	5cd3      	ldrb	r3, [r2, r3]
 8004442:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d015      	beq.n	800447a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800444e:	4b3c      	ldr	r3, [pc, #240]	@ (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	0c5b      	lsrs	r3, r3, #17
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	4a3b      	ldr	r2, [pc, #236]	@ (8004548 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800445a:	5cd3      	ldrb	r3, [r2, r3]
 800445c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00d      	beq.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004468:	4a38      	ldr	r2, [pc, #224]	@ (800454c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	fb02 f303 	mul.w	r3, r2, r3
 8004476:	61fb      	str	r3, [r7, #28]
 8004478:	e004      	b.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	4a34      	ldr	r2, [pc, #208]	@ (8004550 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800447e:	fb02 f303 	mul.w	r3, r2, r3
 8004482:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004484:	4b2e      	ldr	r3, [pc, #184]	@ (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800448c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004490:	d102      	bne.n	8004498 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	61bb      	str	r3, [r7, #24]
      break;
 8004496:	e04a      	b.n	800452e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	005b      	lsls	r3, r3, #1
 800449c:	4a2d      	ldr	r2, [pc, #180]	@ (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800449e:	fba2 2303 	umull	r2, r3, r2, r3
 80044a2:	085b      	lsrs	r3, r3, #1
 80044a4:	61bb      	str	r3, [r7, #24]
      break;
 80044a6:	e042      	b.n	800452e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80044a8:	4b25      	ldr	r3, [pc, #148]	@ (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80044aa:	6a1b      	ldr	r3, [r3, #32]
 80044ac:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044b8:	d108      	bne.n	80044cc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d003      	beq.n	80044cc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80044c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044c8:	61bb      	str	r3, [r7, #24]
 80044ca:	e01f      	b.n	800450c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044d6:	d109      	bne.n	80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80044d8:	4b19      	ldr	r3, [pc, #100]	@ (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80044da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d003      	beq.n	80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80044e4:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80044e8:	61bb      	str	r3, [r7, #24]
 80044ea:	e00f      	b.n	800450c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044f6:	d11c      	bne.n	8004532 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80044f8:	4b11      	ldr	r3, [pc, #68]	@ (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d016      	beq.n	8004532 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004504:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8004508:	61bb      	str	r3, [r7, #24]
      break;
 800450a:	e012      	b.n	8004532 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800450c:	e011      	b.n	8004532 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800450e:	f7ff fe85 	bl	800421c <HAL_RCC_GetPCLK2Freq>
 8004512:	4602      	mov	r2, r0
 8004514:	4b0a      	ldr	r3, [pc, #40]	@ (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	0b9b      	lsrs	r3, r3, #14
 800451a:	f003 0303 	and.w	r3, r3, #3
 800451e:	3301      	adds	r3, #1
 8004520:	005b      	lsls	r3, r3, #1
 8004522:	fbb2 f3f3 	udiv	r3, r2, r3
 8004526:	61bb      	str	r3, [r7, #24]
      break;
 8004528:	e004      	b.n	8004534 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800452a:	bf00      	nop
 800452c:	e002      	b.n	8004534 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800452e:	bf00      	nop
 8004530:	e000      	b.n	8004534 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004532:	bf00      	nop
    }
  }
  return (frequency);
 8004534:	69bb      	ldr	r3, [r7, #24]
}
 8004536:	4618      	mov	r0, r3
 8004538:	3720      	adds	r7, #32
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	40021000 	.word	0x40021000
 8004544:	08006774 	.word	0x08006774
 8004548:	08006784 	.word	0x08006784
 800454c:	007a1200 	.word	0x007a1200
 8004550:	003d0900 	.word	0x003d0900
 8004554:	aaaaaaab 	.word	0xaaaaaaab

08004558 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8004560:	2300      	movs	r3, #0
 8004562:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e07a      	b.n	8004664 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	7c5b      	ldrb	r3, [r3, #17]
 8004572:	b2db      	uxtb	r3, r3
 8004574:	2b00      	cmp	r3, #0
 8004576:	d105      	bne.n	8004584 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7fd f84c 	bl	800161c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2202      	movs	r2, #2
 8004588:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f9be 	bl	800490c <HAL_RTC_WaitForSynchro>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d004      	beq.n	80045a0 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2204      	movs	r2, #4
 800459a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e061      	b.n	8004664 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 fa77 	bl	8004a94 <RTC_EnterInitMode>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d004      	beq.n	80045b6 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2204      	movs	r2, #4
 80045b0:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e056      	b.n	8004664 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	685a      	ldr	r2, [r3, #4]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f022 0207 	bic.w	r2, r2, #7
 80045c4:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d005      	beq.n	80045da <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80045ce:	4b27      	ldr	r3, [pc, #156]	@ (800466c <HAL_RTC_Init+0x114>)
 80045d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045d2:	4a26      	ldr	r2, [pc, #152]	@ (800466c <HAL_RTC_Init+0x114>)
 80045d4:	f023 0301 	bic.w	r3, r3, #1
 80045d8:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80045da:	4b24      	ldr	r3, [pc, #144]	@ (800466c <HAL_RTC_Init+0x114>)
 80045dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045de:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	4921      	ldr	r1, [pc, #132]	@ (800466c <HAL_RTC_Init+0x114>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f4:	d003      	beq.n	80045fe <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	60fb      	str	r3, [r7, #12]
 80045fc:	e00e      	b.n	800461c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80045fe:	2001      	movs	r0, #1
 8004600:	f7ff fef4 	bl	80043ec <HAL_RCCEx_GetPeriphCLKFreq>
 8004604:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d104      	bne.n	8004616 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2204      	movs	r2, #4
 8004610:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e026      	b.n	8004664 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	3b01      	subs	r3, #1
 800461a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	0c1a      	lsrs	r2, r3, #16
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f002 020f 	and.w	r2, r2, #15
 8004628:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	b292      	uxth	r2, r2
 8004632:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 fa55 	bl	8004ae4 <RTC_ExitInitMode>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d004      	beq.n	800464a <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2204      	movs	r2, #4
 8004644:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e00c      	b.n	8004664 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2201      	movs	r2, #1
 800465a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8004662:	2300      	movs	r3, #0
  }
}
 8004664:	4618      	mov	r0, r3
 8004666:	3710      	adds	r7, #16
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	40006c00 	.word	0x40006c00

08004670 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004670:	b590      	push	{r4, r7, lr}
 8004672:	b087      	sub	sp, #28
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 800467c:	2300      	movs	r3, #0
 800467e:	617b      	str	r3, [r7, #20]
 8004680:	2300      	movs	r3, #0
 8004682:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d002      	beq.n	8004690 <HAL_RTC_SetTime+0x20>
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d101      	bne.n	8004694 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e080      	b.n	8004796 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	7c1b      	ldrb	r3, [r3, #16]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d101      	bne.n	80046a0 <HAL_RTC_SetTime+0x30>
 800469c:	2302      	movs	r3, #2
 800469e:	e07a      	b.n	8004796 <HAL_RTC_SetTime+0x126>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2201      	movs	r2, #1
 80046a4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2202      	movs	r2, #2
 80046aa:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d113      	bne.n	80046da <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	461a      	mov	r2, r3
 80046b8:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80046bc:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	785b      	ldrb	r3, [r3, #1]
 80046c4:	4619      	mov	r1, r3
 80046c6:	460b      	mov	r3, r1
 80046c8:	011b      	lsls	r3, r3, #4
 80046ca:	1a5b      	subs	r3, r3, r1
 80046cc:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80046ce:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80046d0:	68ba      	ldr	r2, [r7, #8]
 80046d2:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80046d4:	4413      	add	r3, r2
 80046d6:	617b      	str	r3, [r7, #20]
 80046d8:	e01e      	b.n	8004718 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	4618      	mov	r0, r3
 80046e0:	f000 fa28 	bl	8004b34 <RTC_Bcd2ToByte>
 80046e4:	4603      	mov	r3, r0
 80046e6:	461a      	mov	r2, r3
 80046e8:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80046ec:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	785b      	ldrb	r3, [r3, #1]
 80046f4:	4618      	mov	r0, r3
 80046f6:	f000 fa1d 	bl	8004b34 <RTC_Bcd2ToByte>
 80046fa:	4603      	mov	r3, r0
 80046fc:	461a      	mov	r2, r3
 80046fe:	4613      	mov	r3, r2
 8004700:	011b      	lsls	r3, r3, #4
 8004702:	1a9b      	subs	r3, r3, r2
 8004704:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004706:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	789b      	ldrb	r3, [r3, #2]
 800470c:	4618      	mov	r0, r3
 800470e:	f000 fa11 	bl	8004b34 <RTC_Bcd2ToByte>
 8004712:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004714:	4423      	add	r3, r4
 8004716:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004718:	6979      	ldr	r1, [r7, #20]
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	f000 f953 	bl	80049c6 <RTC_WriteTimeCounter>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d007      	beq.n	8004736 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2204      	movs	r2, #4
 800472a:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e02f      	b.n	8004796 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	685a      	ldr	r2, [r3, #4]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f022 0205 	bic.w	r2, r2, #5
 8004744:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f000 f964 	bl	8004a14 <RTC_ReadAlarmCounter>
 800474c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004754:	d018      	beq.n	8004788 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	429a      	cmp	r2, r3
 800475c:	d214      	bcs.n	8004788 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8004764:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8004768:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800476a:	6939      	ldr	r1, [r7, #16]
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	f000 f96a 	bl	8004a46 <RTC_WriteAlarmCounter>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d007      	beq.n	8004788 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2204      	movs	r2, #4
 800477c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e006      	b.n	8004796 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2201      	movs	r2, #1
 800478c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8004794:	2300      	movs	r3, #0
  }
}
 8004796:	4618      	mov	r0, r3
 8004798:	371c      	adds	r7, #28
 800479a:	46bd      	mov	sp, r7
 800479c:	bd90      	pop	{r4, r7, pc}
	...

080047a0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b088      	sub	sp, #32
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80047ac:	2300      	movs	r3, #0
 80047ae:	61fb      	str	r3, [r7, #28]
 80047b0:	2300      	movs	r3, #0
 80047b2:	61bb      	str	r3, [r7, #24]
 80047b4:	2300      	movs	r3, #0
 80047b6:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d002      	beq.n	80047c4 <HAL_RTC_SetDate+0x24>
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d101      	bne.n	80047c8 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e097      	b.n	80048f8 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	7c1b      	ldrb	r3, [r3, #16]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d101      	bne.n	80047d4 <HAL_RTC_SetDate+0x34>
 80047d0:	2302      	movs	r3, #2
 80047d2:	e091      	b.n	80048f8 <HAL_RTC_SetDate+0x158>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2201      	movs	r2, #1
 80047d8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2202      	movs	r2, #2
 80047de:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10c      	bne.n	8004800 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	78da      	ldrb	r2, [r3, #3]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	785a      	ldrb	r2, [r3, #1]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	789a      	ldrb	r2, [r3, #2]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	739a      	strb	r2, [r3, #14]
 80047fe:	e01a      	b.n	8004836 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	78db      	ldrb	r3, [r3, #3]
 8004804:	4618      	mov	r0, r3
 8004806:	f000 f995 	bl	8004b34 <RTC_Bcd2ToByte>
 800480a:	4603      	mov	r3, r0
 800480c:	461a      	mov	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	785b      	ldrb	r3, [r3, #1]
 8004816:	4618      	mov	r0, r3
 8004818:	f000 f98c 	bl	8004b34 <RTC_Bcd2ToByte>
 800481c:	4603      	mov	r3, r0
 800481e:	461a      	mov	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	789b      	ldrb	r3, [r3, #2]
 8004828:	4618      	mov	r0, r3
 800482a:	f000 f983 	bl	8004b34 <RTC_Bcd2ToByte>
 800482e:	4603      	mov	r3, r0
 8004830:	461a      	mov	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	7bdb      	ldrb	r3, [r3, #15]
 800483a:	4618      	mov	r0, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	7b59      	ldrb	r1, [r3, #13]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	7b9b      	ldrb	r3, [r3, #14]
 8004844:	461a      	mov	r2, r3
 8004846:	f000 f993 	bl	8004b70 <RTC_WeekDayNum>
 800484a:	4603      	mov	r3, r0
 800484c:	461a      	mov	r2, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	7b1a      	ldrb	r2, [r3, #12]
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f000 f883 	bl	8004966 <RTC_ReadTimeCounter>
 8004860:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	4a26      	ldr	r2, [pc, #152]	@ (8004900 <HAL_RTC_SetDate+0x160>)
 8004866:	fba2 2303 	umull	r2, r3, r2, r3
 800486a:	0adb      	lsrs	r3, r3, #11
 800486c:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	2b18      	cmp	r3, #24
 8004872:	d93a      	bls.n	80048ea <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	4a23      	ldr	r2, [pc, #140]	@ (8004904 <HAL_RTC_SetDate+0x164>)
 8004878:	fba2 2303 	umull	r2, r3, r2, r3
 800487c:	091b      	lsrs	r3, r3, #4
 800487e:	4a22      	ldr	r2, [pc, #136]	@ (8004908 <HAL_RTC_SetDate+0x168>)
 8004880:	fb02 f303 	mul.w	r3, r2, r3
 8004884:	69fa      	ldr	r2, [r7, #28]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800488a:	69f9      	ldr	r1, [r7, #28]
 800488c:	68f8      	ldr	r0, [r7, #12]
 800488e:	f000 f89a 	bl	80049c6 <RTC_WriteTimeCounter>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d007      	beq.n	80048a8 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2204      	movs	r2, #4
 800489c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e027      	b.n	80048f8 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80048a8:	68f8      	ldr	r0, [r7, #12]
 80048aa:	f000 f8b3 	bl	8004a14 <RTC_ReadAlarmCounter>
 80048ae:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b6:	d018      	beq.n	80048ea <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d214      	bcs.n	80048ea <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 80048c6:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80048ca:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80048cc:	69b9      	ldr	r1, [r7, #24]
 80048ce:	68f8      	ldr	r0, [r7, #12]
 80048d0:	f000 f8b9 	bl	8004a46 <RTC_WriteAlarmCounter>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d007      	beq.n	80048ea <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2204      	movs	r2, #4
 80048de:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e006      	b.n	80048f8 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2201      	movs	r2, #1
 80048ee:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3720      	adds	r7, #32
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	91a2b3c5 	.word	0x91a2b3c5
 8004904:	aaaaaaab 	.word	0xaaaaaaab
 8004908:	00015180 	.word	0x00015180

0800490c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004914:	2300      	movs	r3, #0
 8004916:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e01d      	b.n	800495e <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	685a      	ldr	r2, [r3, #4]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f022 0208 	bic.w	r2, r2, #8
 8004930:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004932:	f7fd f893 	bl	8001a5c <HAL_GetTick>
 8004936:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004938:	e009      	b.n	800494e <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800493a:	f7fd f88f 	bl	8001a5c <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004948:	d901      	bls.n	800494e <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e007      	b.n	800495e <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f003 0308 	and.w	r3, r3, #8
 8004958:	2b00      	cmp	r3, #0
 800495a:	d0ee      	beq.n	800493a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3710      	adds	r7, #16
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8004966:	b480      	push	{r7}
 8004968:	b087      	sub	sp, #28
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800496e:	2300      	movs	r3, #0
 8004970:	827b      	strh	r3, [r7, #18]
 8004972:	2300      	movs	r3, #0
 8004974:	823b      	strh	r3, [r7, #16]
 8004976:	2300      	movs	r3, #0
 8004978:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 800497a:	2300      	movs	r3, #0
 800497c:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	69db      	ldr	r3, [r3, #28]
 800498c:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8004996:	8a7a      	ldrh	r2, [r7, #18]
 8004998:	8a3b      	ldrh	r3, [r7, #16]
 800499a:	429a      	cmp	r2, r3
 800499c:	d008      	beq.n	80049b0 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800499e:	8a3b      	ldrh	r3, [r7, #16]
 80049a0:	041a      	lsls	r2, r3, #16
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	69db      	ldr	r3, [r3, #28]
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	4313      	orrs	r3, r2
 80049ac:	617b      	str	r3, [r7, #20]
 80049ae:	e004      	b.n	80049ba <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80049b0:	8a7b      	ldrh	r3, [r7, #18]
 80049b2:	041a      	lsls	r2, r3, #16
 80049b4:	89fb      	ldrh	r3, [r7, #14]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80049ba:	697b      	ldr	r3, [r7, #20]
}
 80049bc:	4618      	mov	r0, r3
 80049be:	371c      	adds	r7, #28
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bc80      	pop	{r7}
 80049c4:	4770      	bx	lr

080049c6 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b084      	sub	sp, #16
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
 80049ce:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049d0:	2300      	movs	r3, #0
 80049d2:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 f85d 	bl	8004a94 <RTC_EnterInitMode>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d002      	beq.n	80049e6 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	73fb      	strb	r3, [r7, #15]
 80049e4:	e011      	b.n	8004a0a <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	683a      	ldr	r2, [r7, #0]
 80049ec:	0c12      	lsrs	r2, r2, #16
 80049ee:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	683a      	ldr	r2, [r7, #0]
 80049f6:	b292      	uxth	r2, r2
 80049f8:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f872 	bl	8004ae4 <RTC_ExitInitMode>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3710      	adds	r7, #16
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	81fb      	strh	r3, [r7, #14]
 8004a20:	2300      	movs	r3, #0
 8004a22:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a32:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8004a34:	89fb      	ldrh	r3, [r7, #14]
 8004a36:	041a      	lsls	r2, r3, #16
 8004a38:	89bb      	ldrh	r3, [r7, #12]
 8004a3a:	4313      	orrs	r3, r2
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3714      	adds	r7, #20
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bc80      	pop	{r7}
 8004a44:	4770      	bx	lr

08004a46 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8004a46:	b580      	push	{r7, lr}
 8004a48:	b084      	sub	sp, #16
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
 8004a4e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a50:	2300      	movs	r3, #0
 8004a52:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 f81d 	bl	8004a94 <RTC_EnterInitMode>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d002      	beq.n	8004a66 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	73fb      	strb	r3, [r7, #15]
 8004a64:	e011      	b.n	8004a8a <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	683a      	ldr	r2, [r7, #0]
 8004a6c:	0c12      	lsrs	r2, r2, #16
 8004a6e:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	683a      	ldr	r2, [r7, #0]
 8004a76:	b292      	uxth	r2, r2
 8004a78:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f832 	bl	8004ae4 <RTC_ExitInitMode>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3710      	adds	r7, #16
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8004aa0:	f7fc ffdc 	bl	8001a5c <HAL_GetTick>
 8004aa4:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004aa6:	e009      	b.n	8004abc <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004aa8:	f7fc ffd8 	bl	8001a5c <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004ab6:	d901      	bls.n	8004abc <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e00f      	b.n	8004adc <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f003 0320 	and.w	r3, r3, #32
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d0ee      	beq.n	8004aa8 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	685a      	ldr	r2, [r3, #4]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f042 0210 	orr.w	r2, r2, #16
 8004ad8:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3710      	adds	r7, #16
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004aec:	2300      	movs	r3, #0
 8004aee:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	685a      	ldr	r2, [r3, #4]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f022 0210 	bic.w	r2, r2, #16
 8004afe:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004b00:	f7fc ffac 	bl	8001a5c <HAL_GetTick>
 8004b04:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004b06:	e009      	b.n	8004b1c <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004b08:	f7fc ffa8 	bl	8001a5c <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004b16:	d901      	bls.n	8004b1c <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e007      	b.n	8004b2c <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f003 0320 	and.w	r3, r3, #32
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d0ee      	beq.n	8004b08 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3710      	adds	r7, #16
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8004b42:	79fb      	ldrb	r3, [r7, #7]
 8004b44:	091b      	lsrs	r3, r3, #4
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	461a      	mov	r2, r3
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	4413      	add	r3, r2
 8004b50:	005b      	lsls	r3, r3, #1
 8004b52:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8004b54:	79fb      	ldrb	r3, [r7, #7]
 8004b56:	f003 030f 	and.w	r3, r3, #15
 8004b5a:	b2da      	uxtb	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	4413      	add	r3, r2
 8004b62:	b2db      	uxtb	r3, r3
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3714      	adds	r7, #20
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bc80      	pop	{r7}
 8004b6c:	4770      	bx	lr
	...

08004b70 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	460b      	mov	r3, r1
 8004b7a:	70fb      	strb	r3, [r7, #3]
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8004b80:	2300      	movs	r3, #0
 8004b82:	60bb      	str	r3, [r7, #8]
 8004b84:	2300      	movs	r3, #0
 8004b86:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8004b8e:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8004b90:	78fb      	ldrb	r3, [r7, #3]
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d82d      	bhi.n	8004bf2 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8004b96:	78fa      	ldrb	r2, [r7, #3]
 8004b98:	4613      	mov	r3, r2
 8004b9a:	005b      	lsls	r3, r3, #1
 8004b9c:	4413      	add	r3, r2
 8004b9e:	00db      	lsls	r3, r3, #3
 8004ba0:	1a9b      	subs	r3, r3, r2
 8004ba2:	4a2c      	ldr	r2, [pc, #176]	@ (8004c54 <RTC_WeekDayNum+0xe4>)
 8004ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba8:	085a      	lsrs	r2, r3, #1
 8004baa:	78bb      	ldrb	r3, [r7, #2]
 8004bac:	441a      	add	r2, r3
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	441a      	add	r2, r3
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	089b      	lsrs	r3, r3, #2
 8004bb8:	441a      	add	r2, r3
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	4926      	ldr	r1, [pc, #152]	@ (8004c58 <RTC_WeekDayNum+0xe8>)
 8004bc0:	fba1 1303 	umull	r1, r3, r1, r3
 8004bc4:	095b      	lsrs	r3, r3, #5
 8004bc6:	1ad2      	subs	r2, r2, r3
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	4922      	ldr	r1, [pc, #136]	@ (8004c58 <RTC_WeekDayNum+0xe8>)
 8004bce:	fba1 1303 	umull	r1, r3, r1, r3
 8004bd2:	09db      	lsrs	r3, r3, #7
 8004bd4:	4413      	add	r3, r2
 8004bd6:	1d1a      	adds	r2, r3, #4
 8004bd8:	4b20      	ldr	r3, [pc, #128]	@ (8004c5c <RTC_WeekDayNum+0xec>)
 8004bda:	fba3 1302 	umull	r1, r3, r3, r2
 8004bde:	1ad1      	subs	r1, r2, r3
 8004be0:	0849      	lsrs	r1, r1, #1
 8004be2:	440b      	add	r3, r1
 8004be4:	0899      	lsrs	r1, r3, #2
 8004be6:	460b      	mov	r3, r1
 8004be8:	00db      	lsls	r3, r3, #3
 8004bea:	1a5b      	subs	r3, r3, r1
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	60fb      	str	r3, [r7, #12]
 8004bf0:	e029      	b.n	8004c46 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8004bf2:	78fa      	ldrb	r2, [r7, #3]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	005b      	lsls	r3, r3, #1
 8004bf8:	4413      	add	r3, r2
 8004bfa:	00db      	lsls	r3, r3, #3
 8004bfc:	1a9b      	subs	r3, r3, r2
 8004bfe:	4a15      	ldr	r2, [pc, #84]	@ (8004c54 <RTC_WeekDayNum+0xe4>)
 8004c00:	fba2 2303 	umull	r2, r3, r2, r3
 8004c04:	085a      	lsrs	r2, r3, #1
 8004c06:	78bb      	ldrb	r3, [r7, #2]
 8004c08:	441a      	add	r2, r3
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	441a      	add	r2, r3
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	089b      	lsrs	r3, r3, #2
 8004c12:	441a      	add	r2, r3
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	4910      	ldr	r1, [pc, #64]	@ (8004c58 <RTC_WeekDayNum+0xe8>)
 8004c18:	fba1 1303 	umull	r1, r3, r1, r3
 8004c1c:	095b      	lsrs	r3, r3, #5
 8004c1e:	1ad2      	subs	r2, r2, r3
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	490d      	ldr	r1, [pc, #52]	@ (8004c58 <RTC_WeekDayNum+0xe8>)
 8004c24:	fba1 1303 	umull	r1, r3, r1, r3
 8004c28:	09db      	lsrs	r3, r3, #7
 8004c2a:	4413      	add	r3, r2
 8004c2c:	1c9a      	adds	r2, r3, #2
 8004c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8004c5c <RTC_WeekDayNum+0xec>)
 8004c30:	fba3 1302 	umull	r1, r3, r3, r2
 8004c34:	1ad1      	subs	r1, r2, r3
 8004c36:	0849      	lsrs	r1, r1, #1
 8004c38:	440b      	add	r3, r1
 8004c3a:	0899      	lsrs	r1, r3, #2
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	00db      	lsls	r3, r3, #3
 8004c40:	1a5b      	subs	r3, r3, r1
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	b2db      	uxtb	r3, r3
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3714      	adds	r7, #20
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bc80      	pop	{r7}
 8004c52:	4770      	bx	lr
 8004c54:	38e38e39 	.word	0x38e38e39
 8004c58:	51eb851f 	.word	0x51eb851f
 8004c5c:	24924925 	.word	0x24924925

08004c60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d101      	bne.n	8004c72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e076      	b.n	8004d60 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d108      	bne.n	8004c8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c82:	d009      	beq.n	8004c98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	61da      	str	r2, [r3, #28]
 8004c8a:	e005      	b.n	8004c98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d106      	bne.n	8004cb8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f7fc fcd6 	bl	8001664 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2202      	movs	r2, #2
 8004cbc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004ce0:	431a      	orrs	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cea:	431a      	orrs	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	431a      	orrs	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	f003 0301 	and.w	r3, r3, #1
 8004cfe:	431a      	orrs	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d08:	431a      	orrs	r2, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	69db      	ldr	r3, [r3, #28]
 8004d0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d12:	431a      	orrs	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d1c:	ea42 0103 	orr.w	r1, r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d24:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	0c1a      	lsrs	r2, r3, #16
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f002 0204 	and.w	r2, r2, #4
 8004d3e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	69da      	ldr	r2, [r3, #28]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d4e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3708      	adds	r7, #8
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b088      	sub	sp, #32
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	603b      	str	r3, [r7, #0]
 8004d74:	4613      	mov	r3, r2
 8004d76:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d78:	f7fc fe70 	bl	8001a5c <HAL_GetTick>
 8004d7c:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004d7e:	88fb      	ldrh	r3, [r7, #6]
 8004d80:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d001      	beq.n	8004d92 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004d8e:	2302      	movs	r3, #2
 8004d90:	e12a      	b.n	8004fe8 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d002      	beq.n	8004d9e <HAL_SPI_Transmit+0x36>
 8004d98:	88fb      	ldrh	r3, [r7, #6]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d101      	bne.n	8004da2 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e122      	b.n	8004fe8 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d101      	bne.n	8004db0 <HAL_SPI_Transmit+0x48>
 8004dac:	2302      	movs	r3, #2
 8004dae:	e11b      	b.n	8004fe8 <HAL_SPI_Transmit+0x280>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2203      	movs	r2, #3
 8004dbc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	68ba      	ldr	r2, [r7, #8]
 8004dca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	88fa      	ldrh	r2, [r7, #6]
 8004dd0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	88fa      	ldrh	r2, [r7, #6]
 8004dd6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2200      	movs	r2, #0
 8004de8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dfe:	d10f      	bne.n	8004e20 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e0e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e1e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e2a:	2b40      	cmp	r3, #64	@ 0x40
 8004e2c:	d007      	beq.n	8004e3e <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e3c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e46:	d152      	bne.n	8004eee <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d002      	beq.n	8004e56 <HAL_SPI_Transmit+0xee>
 8004e50:	8b7b      	ldrh	r3, [r7, #26]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d145      	bne.n	8004ee2 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e5a:	881a      	ldrh	r2, [r3, #0]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e66:	1c9a      	adds	r2, r3, #2
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	3b01      	subs	r3, #1
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004e7a:	e032      	b.n	8004ee2 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d112      	bne.n	8004eb0 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e8e:	881a      	ldrh	r2, [r3, #0]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e9a:	1c9a      	adds	r2, r3, #2
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004eae:	e018      	b.n	8004ee2 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004eb0:	f7fc fdd4 	bl	8001a5c <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	683a      	ldr	r2, [r7, #0]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d803      	bhi.n	8004ec8 <HAL_SPI_Transmit+0x160>
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec6:	d102      	bne.n	8004ece <HAL_SPI_Transmit+0x166>
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d109      	bne.n	8004ee2 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e082      	b.n	8004fe8 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1c7      	bne.n	8004e7c <HAL_SPI_Transmit+0x114>
 8004eec:	e053      	b.n	8004f96 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d002      	beq.n	8004efc <HAL_SPI_Transmit+0x194>
 8004ef6:	8b7b      	ldrh	r3, [r7, #26]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d147      	bne.n	8004f8c <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	330c      	adds	r3, #12
 8004f06:	7812      	ldrb	r2, [r2, #0]
 8004f08:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f0e:	1c5a      	adds	r2, r3, #1
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004f22:	e033      	b.n	8004f8c <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d113      	bne.n	8004f5a <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	330c      	adds	r3, #12
 8004f3c:	7812      	ldrb	r2, [r2, #0]
 8004f3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f44:	1c5a      	adds	r2, r3, #1
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	3b01      	subs	r3, #1
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004f58:	e018      	b.n	8004f8c <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f5a:	f7fc fd7f 	bl	8001a5c <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	683a      	ldr	r2, [r7, #0]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d803      	bhi.n	8004f72 <HAL_SPI_Transmit+0x20a>
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f70:	d102      	bne.n	8004f78 <HAL_SPI_Transmit+0x210>
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d109      	bne.n	8004f8c <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e02d      	b.n	8004fe8 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1c6      	bne.n	8004f24 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f96:	69fa      	ldr	r2, [r7, #28]
 8004f98:	6839      	ldr	r1, [r7, #0]
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	f000 fbc4 	bl	8005728 <SPI_EndRxTxTransaction>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d002      	beq.n	8004fac <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2220      	movs	r2, #32
 8004faa:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d10a      	bne.n	8004fca <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	617b      	str	r3, [r7, #20]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	617b      	str	r3, [r7, #20]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	617b      	str	r3, [r7, #20]
 8004fc8:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d001      	beq.n	8004fe6 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e000      	b.n	8004fe8 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
  }
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3720      	adds	r7, #32
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b088      	sub	sp, #32
 8004ff4:	af02      	add	r7, sp, #8
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	603b      	str	r3, [r7, #0]
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005006:	b2db      	uxtb	r3, r3
 8005008:	2b01      	cmp	r3, #1
 800500a:	d001      	beq.n	8005010 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800500c:	2302      	movs	r3, #2
 800500e:	e104      	b.n	800521a <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005018:	d112      	bne.n	8005040 <HAL_SPI_Receive+0x50>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10e      	bne.n	8005040 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2204      	movs	r2, #4
 8005026:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800502a:	88fa      	ldrh	r2, [r7, #6]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	9300      	str	r3, [sp, #0]
 8005030:	4613      	mov	r3, r2
 8005032:	68ba      	ldr	r2, [r7, #8]
 8005034:	68b9      	ldr	r1, [r7, #8]
 8005036:	68f8      	ldr	r0, [r7, #12]
 8005038:	f000 f8f3 	bl	8005222 <HAL_SPI_TransmitReceive>
 800503c:	4603      	mov	r3, r0
 800503e:	e0ec      	b.n	800521a <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005040:	f7fc fd0c 	bl	8001a5c <HAL_GetTick>
 8005044:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d002      	beq.n	8005052 <HAL_SPI_Receive+0x62>
 800504c:	88fb      	ldrh	r3, [r7, #6]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d101      	bne.n	8005056 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e0e1      	b.n	800521a <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800505c:	2b01      	cmp	r3, #1
 800505e:	d101      	bne.n	8005064 <HAL_SPI_Receive+0x74>
 8005060:	2302      	movs	r3, #2
 8005062:	e0da      	b.n	800521a <HAL_SPI_Receive+0x22a>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2204      	movs	r2, #4
 8005070:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	68ba      	ldr	r2, [r7, #8]
 800507e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	88fa      	ldrh	r2, [r7, #6]
 8005084:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	88fa      	ldrh	r2, [r7, #6]
 800508a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050b2:	d10f      	bne.n	80050d4 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050c2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80050d2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050de:	2b40      	cmp	r3, #64	@ 0x40
 80050e0:	d007      	beq.n	80050f2 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80050f0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d170      	bne.n	80051dc <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80050fa:	e035      	b.n	8005168 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b01      	cmp	r3, #1
 8005108:	d115      	bne.n	8005136 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f103 020c 	add.w	r2, r3, #12
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005116:	7812      	ldrb	r2, [r2, #0]
 8005118:	b2d2      	uxtb	r2, r2
 800511a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005120:	1c5a      	adds	r2, r3, #1
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800512a:	b29b      	uxth	r3, r3
 800512c:	3b01      	subs	r3, #1
 800512e:	b29a      	uxth	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005134:	e018      	b.n	8005168 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005136:	f7fc fc91 	bl	8001a5c <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	683a      	ldr	r2, [r7, #0]
 8005142:	429a      	cmp	r2, r3
 8005144:	d803      	bhi.n	800514e <HAL_SPI_Receive+0x15e>
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800514c:	d102      	bne.n	8005154 <HAL_SPI_Receive+0x164>
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d109      	bne.n	8005168 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e058      	b.n	800521a <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800516c:	b29b      	uxth	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1c4      	bne.n	80050fc <HAL_SPI_Receive+0x10c>
 8005172:	e038      	b.n	80051e6 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	2b01      	cmp	r3, #1
 8005180:	d113      	bne.n	80051aa <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68da      	ldr	r2, [r3, #12]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800518c:	b292      	uxth	r2, r2
 800518e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005194:	1c9a      	adds	r2, r3, #2
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800519e:	b29b      	uxth	r3, r3
 80051a0:	3b01      	subs	r3, #1
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80051a8:	e018      	b.n	80051dc <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051aa:	f7fc fc57 	bl	8001a5c <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	683a      	ldr	r2, [r7, #0]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d803      	bhi.n	80051c2 <HAL_SPI_Receive+0x1d2>
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c0:	d102      	bne.n	80051c8 <HAL_SPI_Receive+0x1d8>
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d109      	bne.n	80051dc <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	e01e      	b.n	800521a <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1c6      	bne.n	8005174 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051e6:	697a      	ldr	r2, [r7, #20]
 80051e8:	6839      	ldr	r1, [r7, #0]
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	f000 fa4a 	bl	8005684 <SPI_EndRxTransaction>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d002      	beq.n	80051fc <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2220      	movs	r2, #32
 80051fa:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2200      	movs	r2, #0
 8005208:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005210:	2b00      	cmp	r3, #0
 8005212:	d001      	beq.n	8005218 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e000      	b.n	800521a <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005218:	2300      	movs	r3, #0
  }
}
 800521a:	4618      	mov	r0, r3
 800521c:	3718      	adds	r7, #24
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005222:	b580      	push	{r7, lr}
 8005224:	b08a      	sub	sp, #40	@ 0x28
 8005226:	af00      	add	r7, sp, #0
 8005228:	60f8      	str	r0, [r7, #12]
 800522a:	60b9      	str	r1, [r7, #8]
 800522c:	607a      	str	r2, [r7, #4]
 800522e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005230:	2301      	movs	r3, #1
 8005232:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005234:	f7fc fc12 	bl	8001a5c <HAL_GetTick>
 8005238:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005240:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005248:	887b      	ldrh	r3, [r7, #2]
 800524a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800524c:	7ffb      	ldrb	r3, [r7, #31]
 800524e:	2b01      	cmp	r3, #1
 8005250:	d00c      	beq.n	800526c <HAL_SPI_TransmitReceive+0x4a>
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005258:	d106      	bne.n	8005268 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d102      	bne.n	8005268 <HAL_SPI_TransmitReceive+0x46>
 8005262:	7ffb      	ldrb	r3, [r7, #31]
 8005264:	2b04      	cmp	r3, #4
 8005266:	d001      	beq.n	800526c <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005268:	2302      	movs	r3, #2
 800526a:	e17f      	b.n	800556c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d005      	beq.n	800527e <HAL_SPI_TransmitReceive+0x5c>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d002      	beq.n	800527e <HAL_SPI_TransmitReceive+0x5c>
 8005278:	887b      	ldrh	r3, [r7, #2]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e174      	b.n	800556c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005288:	2b01      	cmp	r3, #1
 800528a:	d101      	bne.n	8005290 <HAL_SPI_TransmitReceive+0x6e>
 800528c:	2302      	movs	r3, #2
 800528e:	e16d      	b.n	800556c <HAL_SPI_TransmitReceive+0x34a>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b04      	cmp	r3, #4
 80052a2:	d003      	beq.n	80052ac <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2205      	movs	r2, #5
 80052a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	887a      	ldrh	r2, [r7, #2]
 80052bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	887a      	ldrh	r2, [r7, #2]
 80052c2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	68ba      	ldr	r2, [r7, #8]
 80052c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	887a      	ldrh	r2, [r7, #2]
 80052ce:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	887a      	ldrh	r2, [r7, #2]
 80052d4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052ec:	2b40      	cmp	r3, #64	@ 0x40
 80052ee:	d007      	beq.n	8005300 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80052fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005308:	d17e      	bne.n	8005408 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d002      	beq.n	8005318 <HAL_SPI_TransmitReceive+0xf6>
 8005312:	8afb      	ldrh	r3, [r7, #22]
 8005314:	2b01      	cmp	r3, #1
 8005316:	d16c      	bne.n	80053f2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800531c:	881a      	ldrh	r2, [r3, #0]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005328:	1c9a      	adds	r2, r3, #2
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005332:	b29b      	uxth	r3, r3
 8005334:	3b01      	subs	r3, #1
 8005336:	b29a      	uxth	r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800533c:	e059      	b.n	80053f2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f003 0302 	and.w	r3, r3, #2
 8005348:	2b02      	cmp	r3, #2
 800534a:	d11b      	bne.n	8005384 <HAL_SPI_TransmitReceive+0x162>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005350:	b29b      	uxth	r3, r3
 8005352:	2b00      	cmp	r3, #0
 8005354:	d016      	beq.n	8005384 <HAL_SPI_TransmitReceive+0x162>
 8005356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005358:	2b01      	cmp	r3, #1
 800535a:	d113      	bne.n	8005384 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005360:	881a      	ldrh	r2, [r3, #0]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800536c:	1c9a      	adds	r2, r3, #2
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005376:	b29b      	uxth	r3, r3
 8005378:	3b01      	subs	r3, #1
 800537a:	b29a      	uxth	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005380:	2300      	movs	r3, #0
 8005382:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f003 0301 	and.w	r3, r3, #1
 800538e:	2b01      	cmp	r3, #1
 8005390:	d119      	bne.n	80053c6 <HAL_SPI_TransmitReceive+0x1a4>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005396:	b29b      	uxth	r3, r3
 8005398:	2b00      	cmp	r3, #0
 800539a:	d014      	beq.n	80053c6 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68da      	ldr	r2, [r3, #12]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a6:	b292      	uxth	r2, r2
 80053a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ae:	1c9a      	adds	r2, r3, #2
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	3b01      	subs	r3, #1
 80053bc:	b29a      	uxth	r2, r3
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80053c2:	2301      	movs	r3, #1
 80053c4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80053c6:	f7fc fb49 	bl	8001a5c <HAL_GetTick>
 80053ca:	4602      	mov	r2, r0
 80053cc:	6a3b      	ldr	r3, [r7, #32]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d80d      	bhi.n	80053f2 <HAL_SPI_TransmitReceive+0x1d0>
 80053d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053dc:	d009      	beq.n	80053f2 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e0bc      	b.n	800556c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1a0      	bne.n	800533e <HAL_SPI_TransmitReceive+0x11c>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005400:	b29b      	uxth	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d19b      	bne.n	800533e <HAL_SPI_TransmitReceive+0x11c>
 8005406:	e082      	b.n	800550e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d002      	beq.n	8005416 <HAL_SPI_TransmitReceive+0x1f4>
 8005410:	8afb      	ldrh	r3, [r7, #22]
 8005412:	2b01      	cmp	r3, #1
 8005414:	d171      	bne.n	80054fa <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	330c      	adds	r3, #12
 8005420:	7812      	ldrb	r2, [r2, #0]
 8005422:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005428:	1c5a      	adds	r2, r3, #1
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005432:	b29b      	uxth	r3, r3
 8005434:	3b01      	subs	r3, #1
 8005436:	b29a      	uxth	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800543c:	e05d      	b.n	80054fa <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	f003 0302 	and.w	r3, r3, #2
 8005448:	2b02      	cmp	r3, #2
 800544a:	d11c      	bne.n	8005486 <HAL_SPI_TransmitReceive+0x264>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005450:	b29b      	uxth	r3, r3
 8005452:	2b00      	cmp	r3, #0
 8005454:	d017      	beq.n	8005486 <HAL_SPI_TransmitReceive+0x264>
 8005456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005458:	2b01      	cmp	r3, #1
 800545a:	d114      	bne.n	8005486 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	330c      	adds	r3, #12
 8005466:	7812      	ldrb	r2, [r2, #0]
 8005468:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800546e:	1c5a      	adds	r2, r3, #1
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005478:	b29b      	uxth	r3, r3
 800547a:	3b01      	subs	r3, #1
 800547c:	b29a      	uxth	r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005482:	2300      	movs	r3, #0
 8005484:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f003 0301 	and.w	r3, r3, #1
 8005490:	2b01      	cmp	r3, #1
 8005492:	d119      	bne.n	80054c8 <HAL_SPI_TransmitReceive+0x2a6>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005498:	b29b      	uxth	r3, r3
 800549a:	2b00      	cmp	r3, #0
 800549c:	d014      	beq.n	80054c8 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68da      	ldr	r2, [r3, #12]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054a8:	b2d2      	uxtb	r2, r2
 80054aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054b0:	1c5a      	adds	r2, r3, #1
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	3b01      	subs	r3, #1
 80054be:	b29a      	uxth	r2, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80054c4:	2301      	movs	r3, #1
 80054c6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80054c8:	f7fc fac8 	bl	8001a5c <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	6a3b      	ldr	r3, [r7, #32]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d803      	bhi.n	80054e0 <HAL_SPI_TransmitReceive+0x2be>
 80054d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054de:	d102      	bne.n	80054e6 <HAL_SPI_TransmitReceive+0x2c4>
 80054e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d109      	bne.n	80054fa <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e038      	b.n	800556c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054fe:	b29b      	uxth	r3, r3
 8005500:	2b00      	cmp	r3, #0
 8005502:	d19c      	bne.n	800543e <HAL_SPI_TransmitReceive+0x21c>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005508:	b29b      	uxth	r3, r3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d197      	bne.n	800543e <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800550e:	6a3a      	ldr	r2, [r7, #32]
 8005510:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005512:	68f8      	ldr	r0, [r7, #12]
 8005514:	f000 f908 	bl	8005728 <SPI_EndRxTxTransaction>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d008      	beq.n	8005530 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2220      	movs	r2, #32
 8005522:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e01d      	b.n	800556c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d10a      	bne.n	800554e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005538:	2300      	movs	r3, #0
 800553a:	613b      	str	r3, [r7, #16]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	613b      	str	r3, [r7, #16]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	613b      	str	r3, [r7, #16]
 800554c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2201      	movs	r2, #1
 8005552:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005562:	2b00      	cmp	r3, #0
 8005564:	d001      	beq.n	800556a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e000      	b.n	800556c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800556a:	2300      	movs	r3, #0
  }
}
 800556c:	4618      	mov	r0, r3
 800556e:	3728      	adds	r7, #40	@ 0x28
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b088      	sub	sp, #32
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	603b      	str	r3, [r7, #0]
 8005580:	4613      	mov	r3, r2
 8005582:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005584:	f7fc fa6a 	bl	8001a5c <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800558c:	1a9b      	subs	r3, r3, r2
 800558e:	683a      	ldr	r2, [r7, #0]
 8005590:	4413      	add	r3, r2
 8005592:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005594:	f7fc fa62 	bl	8001a5c <HAL_GetTick>
 8005598:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800559a:	4b39      	ldr	r3, [pc, #228]	@ (8005680 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	015b      	lsls	r3, r3, #5
 80055a0:	0d1b      	lsrs	r3, r3, #20
 80055a2:	69fa      	ldr	r2, [r7, #28]
 80055a4:	fb02 f303 	mul.w	r3, r2, r3
 80055a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055aa:	e054      	b.n	8005656 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b2:	d050      	beq.n	8005656 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80055b4:	f7fc fa52 	bl	8001a5c <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	69fa      	ldr	r2, [r7, #28]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d902      	bls.n	80055ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d13d      	bne.n	8005646 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	685a      	ldr	r2, [r3, #4]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80055d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055e2:	d111      	bne.n	8005608 <SPI_WaitFlagStateUntilTimeout+0x94>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055ec:	d004      	beq.n	80055f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055f6:	d107      	bne.n	8005608 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005606:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800560c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005610:	d10f      	bne.n	8005632 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005620:	601a      	str	r2, [r3, #0]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005630:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e017      	b.n	8005676 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d101      	bne.n	8005650 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800564c:	2300      	movs	r3, #0
 800564e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	3b01      	subs	r3, #1
 8005654:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	689a      	ldr	r2, [r3, #8]
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	4013      	ands	r3, r2
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	429a      	cmp	r2, r3
 8005664:	bf0c      	ite	eq
 8005666:	2301      	moveq	r3, #1
 8005668:	2300      	movne	r3, #0
 800566a:	b2db      	uxtb	r3, r3
 800566c:	461a      	mov	r2, r3
 800566e:	79fb      	ldrb	r3, [r7, #7]
 8005670:	429a      	cmp	r2, r3
 8005672:	d19b      	bne.n	80055ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3720      	adds	r7, #32
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	20000004 	.word	0x20000004

08005684 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b086      	sub	sp, #24
 8005688:	af02      	add	r7, sp, #8
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005698:	d111      	bne.n	80056be <SPI_EndRxTransaction+0x3a>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056a2:	d004      	beq.n	80056ae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056ac:	d107      	bne.n	80056be <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056bc:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056c6:	d117      	bne.n	80056f8 <SPI_EndRxTransaction+0x74>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056d0:	d112      	bne.n	80056f8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	9300      	str	r3, [sp, #0]
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	2200      	movs	r2, #0
 80056da:	2101      	movs	r1, #1
 80056dc:	68f8      	ldr	r0, [r7, #12]
 80056de:	f7ff ff49 	bl	8005574 <SPI_WaitFlagStateUntilTimeout>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d01a      	beq.n	800571e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ec:	f043 0220 	orr.w	r2, r3, #32
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e013      	b.n	8005720 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	9300      	str	r3, [sp, #0]
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	2200      	movs	r2, #0
 8005700:	2180      	movs	r1, #128	@ 0x80
 8005702:	68f8      	ldr	r0, [r7, #12]
 8005704:	f7ff ff36 	bl	8005574 <SPI_WaitFlagStateUntilTimeout>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d007      	beq.n	800571e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005712:	f043 0220 	orr.w	r2, r3, #32
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e000      	b.n	8005720 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3710      	adds	r7, #16
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b086      	sub	sp, #24
 800572c:	af02      	add	r7, sp, #8
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	9300      	str	r3, [sp, #0]
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	2201      	movs	r2, #1
 800573c:	2102      	movs	r1, #2
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	f7ff ff18 	bl	8005574 <SPI_WaitFlagStateUntilTimeout>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d007      	beq.n	800575a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800574e:	f043 0220 	orr.w	r2, r3, #32
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e013      	b.n	8005782 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	9300      	str	r3, [sp, #0]
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	2200      	movs	r2, #0
 8005762:	2180      	movs	r1, #128	@ 0x80
 8005764:	68f8      	ldr	r0, [r7, #12]
 8005766:	f7ff ff05 	bl	8005574 <SPI_WaitFlagStateUntilTimeout>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d007      	beq.n	8005780 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005774:	f043 0220 	orr.w	r2, r3, #32
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e000      	b.n	8005782 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3710      	adds	r7, #16
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}

0800578a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800578a:	b580      	push	{r7, lr}
 800578c:	b082      	sub	sp, #8
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d101      	bne.n	800579c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e042      	b.n	8005822 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d106      	bne.n	80057b6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f7fb ffb1 	bl	8001718 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2224      	movs	r2, #36	@ 0x24
 80057ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68da      	ldr	r2, [r3, #12]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80057cc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 fa08 	bl	8005be4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	691a      	ldr	r2, [r3, #16]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80057e2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	695a      	ldr	r2, [r3, #20]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80057f2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68da      	ldr	r2, [r3, #12]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005802:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2220      	movs	r2, #32
 800580e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2220      	movs	r2, #32
 8005816:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3708      	adds	r7, #8
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800582a:	b580      	push	{r7, lr}
 800582c:	b08a      	sub	sp, #40	@ 0x28
 800582e:	af02      	add	r7, sp, #8
 8005830:	60f8      	str	r0, [r7, #12]
 8005832:	60b9      	str	r1, [r7, #8]
 8005834:	603b      	str	r3, [r7, #0]
 8005836:	4613      	mov	r3, r2
 8005838:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800583a:	2300      	movs	r3, #0
 800583c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b20      	cmp	r3, #32
 8005848:	d175      	bne.n	8005936 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d002      	beq.n	8005856 <HAL_UART_Transmit+0x2c>
 8005850:	88fb      	ldrh	r3, [r7, #6]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d101      	bne.n	800585a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e06e      	b.n	8005938 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2221      	movs	r2, #33	@ 0x21
 8005864:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005868:	f7fc f8f8 	bl	8001a5c <HAL_GetTick>
 800586c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	88fa      	ldrh	r2, [r7, #6]
 8005872:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	88fa      	ldrh	r2, [r7, #6]
 8005878:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005882:	d108      	bne.n	8005896 <HAL_UART_Transmit+0x6c>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d104      	bne.n	8005896 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800588c:	2300      	movs	r3, #0
 800588e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	61bb      	str	r3, [r7, #24]
 8005894:	e003      	b.n	800589e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800589a:	2300      	movs	r3, #0
 800589c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800589e:	e02e      	b.n	80058fe <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	9300      	str	r3, [sp, #0]
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	2200      	movs	r2, #0
 80058a8:	2180      	movs	r1, #128	@ 0x80
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f000 f8df 	bl	8005a6e <UART_WaitOnFlagUntilTimeout>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d005      	beq.n	80058c2 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2220      	movs	r2, #32
 80058ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e03a      	b.n	8005938 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d10b      	bne.n	80058e0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	881b      	ldrh	r3, [r3, #0]
 80058cc:	461a      	mov	r2, r3
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058d6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	3302      	adds	r3, #2
 80058dc:	61bb      	str	r3, [r7, #24]
 80058de:	e007      	b.n	80058f0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	781a      	ldrb	r2, [r3, #0]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	3301      	adds	r3, #1
 80058ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	3b01      	subs	r3, #1
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005902:	b29b      	uxth	r3, r3
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1cb      	bne.n	80058a0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	9300      	str	r3, [sp, #0]
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	2200      	movs	r2, #0
 8005910:	2140      	movs	r1, #64	@ 0x40
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	f000 f8ab 	bl	8005a6e <UART_WaitOnFlagUntilTimeout>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d005      	beq.n	800592a <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2220      	movs	r2, #32
 8005922:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e006      	b.n	8005938 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2220      	movs	r2, #32
 800592e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005932:	2300      	movs	r3, #0
 8005934:	e000      	b.n	8005938 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005936:	2302      	movs	r3, #2
  }
}
 8005938:	4618      	mov	r0, r3
 800593a:	3720      	adds	r7, #32
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b08a      	sub	sp, #40	@ 0x28
 8005944:	af02      	add	r7, sp, #8
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	603b      	str	r3, [r7, #0]
 800594c:	4613      	mov	r3, r2
 800594e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005950:	2300      	movs	r3, #0
 8005952:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800595a:	b2db      	uxtb	r3, r3
 800595c:	2b20      	cmp	r3, #32
 800595e:	f040 8081 	bne.w	8005a64 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d002      	beq.n	800596e <HAL_UART_Receive+0x2e>
 8005968:	88fb      	ldrh	r3, [r7, #6]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d101      	bne.n	8005972 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e079      	b.n	8005a66 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2222      	movs	r2, #34	@ 0x22
 800597c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005986:	f7fc f869 	bl	8001a5c <HAL_GetTick>
 800598a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	88fa      	ldrh	r2, [r7, #6]
 8005990:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	88fa      	ldrh	r2, [r7, #6]
 8005996:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059a0:	d108      	bne.n	80059b4 <HAL_UART_Receive+0x74>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d104      	bne.n	80059b4 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80059aa:	2300      	movs	r3, #0
 80059ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	61bb      	str	r3, [r7, #24]
 80059b2:	e003      	b.n	80059bc <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059b8:	2300      	movs	r3, #0
 80059ba:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80059bc:	e047      	b.n	8005a4e <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	9300      	str	r3, [sp, #0]
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	2200      	movs	r2, #0
 80059c6:	2120      	movs	r1, #32
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f000 f850 	bl	8005a6e <UART_WaitOnFlagUntilTimeout>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d005      	beq.n	80059e0 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2220      	movs	r2, #32
 80059d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80059dc:	2303      	movs	r3, #3
 80059de:	e042      	b.n	8005a66 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d10c      	bne.n	8005a00 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059f2:	b29a      	uxth	r2, r3
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	3302      	adds	r3, #2
 80059fc:	61bb      	str	r3, [r7, #24]
 80059fe:	e01f      	b.n	8005a40 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a08:	d007      	beq.n	8005a1a <HAL_UART_Receive+0xda>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10a      	bne.n	8005a28 <HAL_UART_Receive+0xe8>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d106      	bne.n	8005a28 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	b2da      	uxtb	r2, r3
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	701a      	strb	r2, [r3, #0]
 8005a26:	e008      	b.n	8005a3a <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a34:	b2da      	uxtb	r2, r3
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	3b01      	subs	r3, #1
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1b2      	bne.n	80059be <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8005a60:	2300      	movs	r3, #0
 8005a62:	e000      	b.n	8005a66 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005a64:	2302      	movs	r3, #2
  }
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3720      	adds	r7, #32
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b086      	sub	sp, #24
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	60f8      	str	r0, [r7, #12]
 8005a76:	60b9      	str	r1, [r7, #8]
 8005a78:	603b      	str	r3, [r7, #0]
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a7e:	e03b      	b.n	8005af8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a80:	6a3b      	ldr	r3, [r7, #32]
 8005a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a86:	d037      	beq.n	8005af8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a88:	f7fb ffe8 	bl	8001a5c <HAL_GetTick>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	6a3a      	ldr	r2, [r7, #32]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d302      	bcc.n	8005a9e <UART_WaitOnFlagUntilTimeout+0x30>
 8005a98:	6a3b      	ldr	r3, [r7, #32]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d101      	bne.n	8005aa2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e03a      	b.n	8005b18 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	f003 0304 	and.w	r3, r3, #4
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d023      	beq.n	8005af8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	2b80      	cmp	r3, #128	@ 0x80
 8005ab4:	d020      	beq.n	8005af8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	2b40      	cmp	r3, #64	@ 0x40
 8005aba:	d01d      	beq.n	8005af8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0308 	and.w	r3, r3, #8
 8005ac6:	2b08      	cmp	r3, #8
 8005ac8:	d116      	bne.n	8005af8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005aca:	2300      	movs	r3, #0
 8005acc:	617b      	str	r3, [r7, #20]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	617b      	str	r3, [r7, #20]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	617b      	str	r3, [r7, #20]
 8005ade:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	f000 f81d 	bl	8005b20 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2208      	movs	r2, #8
 8005aea:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e00f      	b.n	8005b18 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	4013      	ands	r3, r2
 8005b02:	68ba      	ldr	r2, [r7, #8]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	bf0c      	ite	eq
 8005b08:	2301      	moveq	r3, #1
 8005b0a:	2300      	movne	r3, #0
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	461a      	mov	r2, r3
 8005b10:	79fb      	ldrb	r3, [r7, #7]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d0b4      	beq.n	8005a80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3718      	adds	r7, #24
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b095      	sub	sp, #84	@ 0x54
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	330c      	adds	r3, #12
 8005b2e:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b32:	e853 3f00 	ldrex	r3, [r3]
 8005b36:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	330c      	adds	r3, #12
 8005b46:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b48:	643a      	str	r2, [r7, #64]	@ 0x40
 8005b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b4e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b50:	e841 2300 	strex	r3, r2, [r1]
 8005b54:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d1e5      	bne.n	8005b28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	3314      	adds	r3, #20
 8005b62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b64:	6a3b      	ldr	r3, [r7, #32]
 8005b66:	e853 3f00 	ldrex	r3, [r3]
 8005b6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	f023 0301 	bic.w	r3, r3, #1
 8005b72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	3314      	adds	r3, #20
 8005b7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b84:	e841 2300 	strex	r3, r2, [r1]
 8005b88:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d1e5      	bne.n	8005b5c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d119      	bne.n	8005bcc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	330c      	adds	r3, #12
 8005b9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	e853 3f00 	ldrex	r3, [r3]
 8005ba6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	f023 0310 	bic.w	r3, r3, #16
 8005bae:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	330c      	adds	r3, #12
 8005bb6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bb8:	61ba      	str	r2, [r7, #24]
 8005bba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bbc:	6979      	ldr	r1, [r7, #20]
 8005bbe:	69ba      	ldr	r2, [r7, #24]
 8005bc0:	e841 2300 	strex	r3, r2, [r1]
 8005bc4:	613b      	str	r3, [r7, #16]
   return(result);
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1e5      	bne.n	8005b98 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2220      	movs	r2, #32
 8005bd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005bda:	bf00      	nop
 8005bdc:	3754      	adds	r7, #84	@ 0x54
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bc80      	pop	{r7}
 8005be2:	4770      	bx	lr

08005be4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	68da      	ldr	r2, [r3, #12]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	689a      	ldr	r2, [r3, #8]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	431a      	orrs	r2, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	695b      	ldr	r3, [r3, #20]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005c1e:	f023 030c 	bic.w	r3, r3, #12
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	6812      	ldr	r2, [r2, #0]
 8005c26:	68b9      	ldr	r1, [r7, #8]
 8005c28:	430b      	orrs	r3, r1
 8005c2a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	695b      	ldr	r3, [r3, #20]
 8005c32:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	699a      	ldr	r2, [r3, #24]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	430a      	orrs	r2, r1
 8005c40:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a2c      	ldr	r2, [pc, #176]	@ (8005cf8 <UART_SetConfig+0x114>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d103      	bne.n	8005c54 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005c4c:	f7fe fae6 	bl	800421c <HAL_RCC_GetPCLK2Freq>
 8005c50:	60f8      	str	r0, [r7, #12]
 8005c52:	e002      	b.n	8005c5a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005c54:	f7fe face 	bl	80041f4 <HAL_RCC_GetPCLK1Freq>
 8005c58:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	4413      	add	r3, r2
 8005c62:	009a      	lsls	r2, r3, #2
 8005c64:	441a      	add	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c70:	4a22      	ldr	r2, [pc, #136]	@ (8005cfc <UART_SetConfig+0x118>)
 8005c72:	fba2 2303 	umull	r2, r3, r2, r3
 8005c76:	095b      	lsrs	r3, r3, #5
 8005c78:	0119      	lsls	r1, r3, #4
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	4413      	add	r3, r2
 8005c82:	009a      	lsls	r2, r3, #2
 8005c84:	441a      	add	r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c90:	4b1a      	ldr	r3, [pc, #104]	@ (8005cfc <UART_SetConfig+0x118>)
 8005c92:	fba3 0302 	umull	r0, r3, r3, r2
 8005c96:	095b      	lsrs	r3, r3, #5
 8005c98:	2064      	movs	r0, #100	@ 0x64
 8005c9a:	fb00 f303 	mul.w	r3, r0, r3
 8005c9e:	1ad3      	subs	r3, r2, r3
 8005ca0:	011b      	lsls	r3, r3, #4
 8005ca2:	3332      	adds	r3, #50	@ 0x32
 8005ca4:	4a15      	ldr	r2, [pc, #84]	@ (8005cfc <UART_SetConfig+0x118>)
 8005ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8005caa:	095b      	lsrs	r3, r3, #5
 8005cac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005cb0:	4419      	add	r1, r3
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	4413      	add	r3, r2
 8005cba:	009a      	lsls	r2, r3, #2
 8005cbc:	441a      	add	r2, r3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8005cfc <UART_SetConfig+0x118>)
 8005cca:	fba3 0302 	umull	r0, r3, r3, r2
 8005cce:	095b      	lsrs	r3, r3, #5
 8005cd0:	2064      	movs	r0, #100	@ 0x64
 8005cd2:	fb00 f303 	mul.w	r3, r0, r3
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	011b      	lsls	r3, r3, #4
 8005cda:	3332      	adds	r3, #50	@ 0x32
 8005cdc:	4a07      	ldr	r2, [pc, #28]	@ (8005cfc <UART_SetConfig+0x118>)
 8005cde:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce2:	095b      	lsrs	r3, r3, #5
 8005ce4:	f003 020f 	and.w	r2, r3, #15
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	440a      	add	r2, r1
 8005cee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005cf0:	bf00      	nop
 8005cf2:	3710      	adds	r7, #16
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	40013800 	.word	0x40013800
 8005cfc:	51eb851f 	.word	0x51eb851f

08005d00 <siprintf>:
 8005d00:	b40e      	push	{r1, r2, r3}
 8005d02:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005d06:	b510      	push	{r4, lr}
 8005d08:	2400      	movs	r4, #0
 8005d0a:	b09d      	sub	sp, #116	@ 0x74
 8005d0c:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005d0e:	9002      	str	r0, [sp, #8]
 8005d10:	9006      	str	r0, [sp, #24]
 8005d12:	9107      	str	r1, [sp, #28]
 8005d14:	9104      	str	r1, [sp, #16]
 8005d16:	4809      	ldr	r0, [pc, #36]	@ (8005d3c <siprintf+0x3c>)
 8005d18:	4909      	ldr	r1, [pc, #36]	@ (8005d40 <siprintf+0x40>)
 8005d1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d1e:	9105      	str	r1, [sp, #20]
 8005d20:	6800      	ldr	r0, [r0, #0]
 8005d22:	a902      	add	r1, sp, #8
 8005d24:	9301      	str	r3, [sp, #4]
 8005d26:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005d28:	f000 f9a6 	bl	8006078 <_svfiprintf_r>
 8005d2c:	9b02      	ldr	r3, [sp, #8]
 8005d2e:	701c      	strb	r4, [r3, #0]
 8005d30:	b01d      	add	sp, #116	@ 0x74
 8005d32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d36:	b003      	add	sp, #12
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	20000010 	.word	0x20000010
 8005d40:	ffff0208 	.word	0xffff0208

08005d44 <memset>:
 8005d44:	4603      	mov	r3, r0
 8005d46:	4402      	add	r2, r0
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d100      	bne.n	8005d4e <memset+0xa>
 8005d4c:	4770      	bx	lr
 8005d4e:	f803 1b01 	strb.w	r1, [r3], #1
 8005d52:	e7f9      	b.n	8005d48 <memset+0x4>

08005d54 <strncpy>:
 8005d54:	4603      	mov	r3, r0
 8005d56:	b510      	push	{r4, lr}
 8005d58:	3901      	subs	r1, #1
 8005d5a:	b132      	cbz	r2, 8005d6a <strncpy+0x16>
 8005d5c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005d60:	3a01      	subs	r2, #1
 8005d62:	f803 4b01 	strb.w	r4, [r3], #1
 8005d66:	2c00      	cmp	r4, #0
 8005d68:	d1f7      	bne.n	8005d5a <strncpy+0x6>
 8005d6a:	2100      	movs	r1, #0
 8005d6c:	441a      	add	r2, r3
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d100      	bne.n	8005d74 <strncpy+0x20>
 8005d72:	bd10      	pop	{r4, pc}
 8005d74:	f803 1b01 	strb.w	r1, [r3], #1
 8005d78:	e7f9      	b.n	8005d6e <strncpy+0x1a>
	...

08005d7c <__errno>:
 8005d7c:	4b01      	ldr	r3, [pc, #4]	@ (8005d84 <__errno+0x8>)
 8005d7e:	6818      	ldr	r0, [r3, #0]
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	20000010 	.word	0x20000010

08005d88 <__libc_init_array>:
 8005d88:	b570      	push	{r4, r5, r6, lr}
 8005d8a:	2600      	movs	r6, #0
 8005d8c:	4d0c      	ldr	r5, [pc, #48]	@ (8005dc0 <__libc_init_array+0x38>)
 8005d8e:	4c0d      	ldr	r4, [pc, #52]	@ (8005dc4 <__libc_init_array+0x3c>)
 8005d90:	1b64      	subs	r4, r4, r5
 8005d92:	10a4      	asrs	r4, r4, #2
 8005d94:	42a6      	cmp	r6, r4
 8005d96:	d109      	bne.n	8005dac <__libc_init_array+0x24>
 8005d98:	f000 fc76 	bl	8006688 <_init>
 8005d9c:	2600      	movs	r6, #0
 8005d9e:	4d0a      	ldr	r5, [pc, #40]	@ (8005dc8 <__libc_init_array+0x40>)
 8005da0:	4c0a      	ldr	r4, [pc, #40]	@ (8005dcc <__libc_init_array+0x44>)
 8005da2:	1b64      	subs	r4, r4, r5
 8005da4:	10a4      	asrs	r4, r4, #2
 8005da6:	42a6      	cmp	r6, r4
 8005da8:	d105      	bne.n	8005db6 <__libc_init_array+0x2e>
 8005daa:	bd70      	pop	{r4, r5, r6, pc}
 8005dac:	f855 3b04 	ldr.w	r3, [r5], #4
 8005db0:	4798      	blx	r3
 8005db2:	3601      	adds	r6, #1
 8005db4:	e7ee      	b.n	8005d94 <__libc_init_array+0xc>
 8005db6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dba:	4798      	blx	r3
 8005dbc:	3601      	adds	r6, #1
 8005dbe:	e7f2      	b.n	8005da6 <__libc_init_array+0x1e>
 8005dc0:	080067c4 	.word	0x080067c4
 8005dc4:	080067c4 	.word	0x080067c4
 8005dc8:	080067c4 	.word	0x080067c4
 8005dcc:	080067c8 	.word	0x080067c8

08005dd0 <__retarget_lock_acquire_recursive>:
 8005dd0:	4770      	bx	lr

08005dd2 <__retarget_lock_release_recursive>:
 8005dd2:	4770      	bx	lr

08005dd4 <_free_r>:
 8005dd4:	b538      	push	{r3, r4, r5, lr}
 8005dd6:	4605      	mov	r5, r0
 8005dd8:	2900      	cmp	r1, #0
 8005dda:	d040      	beq.n	8005e5e <_free_r+0x8a>
 8005ddc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005de0:	1f0c      	subs	r4, r1, #4
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	bfb8      	it	lt
 8005de6:	18e4      	addlt	r4, r4, r3
 8005de8:	f000 f8de 	bl	8005fa8 <__malloc_lock>
 8005dec:	4a1c      	ldr	r2, [pc, #112]	@ (8005e60 <_free_r+0x8c>)
 8005dee:	6813      	ldr	r3, [r2, #0]
 8005df0:	b933      	cbnz	r3, 8005e00 <_free_r+0x2c>
 8005df2:	6063      	str	r3, [r4, #4]
 8005df4:	6014      	str	r4, [r2, #0]
 8005df6:	4628      	mov	r0, r5
 8005df8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005dfc:	f000 b8da 	b.w	8005fb4 <__malloc_unlock>
 8005e00:	42a3      	cmp	r3, r4
 8005e02:	d908      	bls.n	8005e16 <_free_r+0x42>
 8005e04:	6820      	ldr	r0, [r4, #0]
 8005e06:	1821      	adds	r1, r4, r0
 8005e08:	428b      	cmp	r3, r1
 8005e0a:	bf01      	itttt	eq
 8005e0c:	6819      	ldreq	r1, [r3, #0]
 8005e0e:	685b      	ldreq	r3, [r3, #4]
 8005e10:	1809      	addeq	r1, r1, r0
 8005e12:	6021      	streq	r1, [r4, #0]
 8005e14:	e7ed      	b.n	8005df2 <_free_r+0x1e>
 8005e16:	461a      	mov	r2, r3
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	b10b      	cbz	r3, 8005e20 <_free_r+0x4c>
 8005e1c:	42a3      	cmp	r3, r4
 8005e1e:	d9fa      	bls.n	8005e16 <_free_r+0x42>
 8005e20:	6811      	ldr	r1, [r2, #0]
 8005e22:	1850      	adds	r0, r2, r1
 8005e24:	42a0      	cmp	r0, r4
 8005e26:	d10b      	bne.n	8005e40 <_free_r+0x6c>
 8005e28:	6820      	ldr	r0, [r4, #0]
 8005e2a:	4401      	add	r1, r0
 8005e2c:	1850      	adds	r0, r2, r1
 8005e2e:	4283      	cmp	r3, r0
 8005e30:	6011      	str	r1, [r2, #0]
 8005e32:	d1e0      	bne.n	8005df6 <_free_r+0x22>
 8005e34:	6818      	ldr	r0, [r3, #0]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	4408      	add	r0, r1
 8005e3a:	6010      	str	r0, [r2, #0]
 8005e3c:	6053      	str	r3, [r2, #4]
 8005e3e:	e7da      	b.n	8005df6 <_free_r+0x22>
 8005e40:	d902      	bls.n	8005e48 <_free_r+0x74>
 8005e42:	230c      	movs	r3, #12
 8005e44:	602b      	str	r3, [r5, #0]
 8005e46:	e7d6      	b.n	8005df6 <_free_r+0x22>
 8005e48:	6820      	ldr	r0, [r4, #0]
 8005e4a:	1821      	adds	r1, r4, r0
 8005e4c:	428b      	cmp	r3, r1
 8005e4e:	bf01      	itttt	eq
 8005e50:	6819      	ldreq	r1, [r3, #0]
 8005e52:	685b      	ldreq	r3, [r3, #4]
 8005e54:	1809      	addeq	r1, r1, r0
 8005e56:	6021      	streq	r1, [r4, #0]
 8005e58:	6063      	str	r3, [r4, #4]
 8005e5a:	6054      	str	r4, [r2, #4]
 8005e5c:	e7cb      	b.n	8005df6 <_free_r+0x22>
 8005e5e:	bd38      	pop	{r3, r4, r5, pc}
 8005e60:	200003a0 	.word	0x200003a0

08005e64 <sbrk_aligned>:
 8005e64:	b570      	push	{r4, r5, r6, lr}
 8005e66:	4e0f      	ldr	r6, [pc, #60]	@ (8005ea4 <sbrk_aligned+0x40>)
 8005e68:	460c      	mov	r4, r1
 8005e6a:	6831      	ldr	r1, [r6, #0]
 8005e6c:	4605      	mov	r5, r0
 8005e6e:	b911      	cbnz	r1, 8005e76 <sbrk_aligned+0x12>
 8005e70:	f000 fba8 	bl	80065c4 <_sbrk_r>
 8005e74:	6030      	str	r0, [r6, #0]
 8005e76:	4621      	mov	r1, r4
 8005e78:	4628      	mov	r0, r5
 8005e7a:	f000 fba3 	bl	80065c4 <_sbrk_r>
 8005e7e:	1c43      	adds	r3, r0, #1
 8005e80:	d103      	bne.n	8005e8a <sbrk_aligned+0x26>
 8005e82:	f04f 34ff 	mov.w	r4, #4294967295
 8005e86:	4620      	mov	r0, r4
 8005e88:	bd70      	pop	{r4, r5, r6, pc}
 8005e8a:	1cc4      	adds	r4, r0, #3
 8005e8c:	f024 0403 	bic.w	r4, r4, #3
 8005e90:	42a0      	cmp	r0, r4
 8005e92:	d0f8      	beq.n	8005e86 <sbrk_aligned+0x22>
 8005e94:	1a21      	subs	r1, r4, r0
 8005e96:	4628      	mov	r0, r5
 8005e98:	f000 fb94 	bl	80065c4 <_sbrk_r>
 8005e9c:	3001      	adds	r0, #1
 8005e9e:	d1f2      	bne.n	8005e86 <sbrk_aligned+0x22>
 8005ea0:	e7ef      	b.n	8005e82 <sbrk_aligned+0x1e>
 8005ea2:	bf00      	nop
 8005ea4:	2000039c 	.word	0x2000039c

08005ea8 <_malloc_r>:
 8005ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005eac:	1ccd      	adds	r5, r1, #3
 8005eae:	f025 0503 	bic.w	r5, r5, #3
 8005eb2:	3508      	adds	r5, #8
 8005eb4:	2d0c      	cmp	r5, #12
 8005eb6:	bf38      	it	cc
 8005eb8:	250c      	movcc	r5, #12
 8005eba:	2d00      	cmp	r5, #0
 8005ebc:	4606      	mov	r6, r0
 8005ebe:	db01      	blt.n	8005ec4 <_malloc_r+0x1c>
 8005ec0:	42a9      	cmp	r1, r5
 8005ec2:	d904      	bls.n	8005ece <_malloc_r+0x26>
 8005ec4:	230c      	movs	r3, #12
 8005ec6:	6033      	str	r3, [r6, #0]
 8005ec8:	2000      	movs	r0, #0
 8005eca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ece:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005fa4 <_malloc_r+0xfc>
 8005ed2:	f000 f869 	bl	8005fa8 <__malloc_lock>
 8005ed6:	f8d8 3000 	ldr.w	r3, [r8]
 8005eda:	461c      	mov	r4, r3
 8005edc:	bb44      	cbnz	r4, 8005f30 <_malloc_r+0x88>
 8005ede:	4629      	mov	r1, r5
 8005ee0:	4630      	mov	r0, r6
 8005ee2:	f7ff ffbf 	bl	8005e64 <sbrk_aligned>
 8005ee6:	1c43      	adds	r3, r0, #1
 8005ee8:	4604      	mov	r4, r0
 8005eea:	d158      	bne.n	8005f9e <_malloc_r+0xf6>
 8005eec:	f8d8 4000 	ldr.w	r4, [r8]
 8005ef0:	4627      	mov	r7, r4
 8005ef2:	2f00      	cmp	r7, #0
 8005ef4:	d143      	bne.n	8005f7e <_malloc_r+0xd6>
 8005ef6:	2c00      	cmp	r4, #0
 8005ef8:	d04b      	beq.n	8005f92 <_malloc_r+0xea>
 8005efa:	6823      	ldr	r3, [r4, #0]
 8005efc:	4639      	mov	r1, r7
 8005efe:	4630      	mov	r0, r6
 8005f00:	eb04 0903 	add.w	r9, r4, r3
 8005f04:	f000 fb5e 	bl	80065c4 <_sbrk_r>
 8005f08:	4581      	cmp	r9, r0
 8005f0a:	d142      	bne.n	8005f92 <_malloc_r+0xea>
 8005f0c:	6821      	ldr	r1, [r4, #0]
 8005f0e:	4630      	mov	r0, r6
 8005f10:	1a6d      	subs	r5, r5, r1
 8005f12:	4629      	mov	r1, r5
 8005f14:	f7ff ffa6 	bl	8005e64 <sbrk_aligned>
 8005f18:	3001      	adds	r0, #1
 8005f1a:	d03a      	beq.n	8005f92 <_malloc_r+0xea>
 8005f1c:	6823      	ldr	r3, [r4, #0]
 8005f1e:	442b      	add	r3, r5
 8005f20:	6023      	str	r3, [r4, #0]
 8005f22:	f8d8 3000 	ldr.w	r3, [r8]
 8005f26:	685a      	ldr	r2, [r3, #4]
 8005f28:	bb62      	cbnz	r2, 8005f84 <_malloc_r+0xdc>
 8005f2a:	f8c8 7000 	str.w	r7, [r8]
 8005f2e:	e00f      	b.n	8005f50 <_malloc_r+0xa8>
 8005f30:	6822      	ldr	r2, [r4, #0]
 8005f32:	1b52      	subs	r2, r2, r5
 8005f34:	d420      	bmi.n	8005f78 <_malloc_r+0xd0>
 8005f36:	2a0b      	cmp	r2, #11
 8005f38:	d917      	bls.n	8005f6a <_malloc_r+0xc2>
 8005f3a:	1961      	adds	r1, r4, r5
 8005f3c:	42a3      	cmp	r3, r4
 8005f3e:	6025      	str	r5, [r4, #0]
 8005f40:	bf18      	it	ne
 8005f42:	6059      	strne	r1, [r3, #4]
 8005f44:	6863      	ldr	r3, [r4, #4]
 8005f46:	bf08      	it	eq
 8005f48:	f8c8 1000 	streq.w	r1, [r8]
 8005f4c:	5162      	str	r2, [r4, r5]
 8005f4e:	604b      	str	r3, [r1, #4]
 8005f50:	4630      	mov	r0, r6
 8005f52:	f000 f82f 	bl	8005fb4 <__malloc_unlock>
 8005f56:	f104 000b 	add.w	r0, r4, #11
 8005f5a:	1d23      	adds	r3, r4, #4
 8005f5c:	f020 0007 	bic.w	r0, r0, #7
 8005f60:	1ac2      	subs	r2, r0, r3
 8005f62:	bf1c      	itt	ne
 8005f64:	1a1b      	subne	r3, r3, r0
 8005f66:	50a3      	strne	r3, [r4, r2]
 8005f68:	e7af      	b.n	8005eca <_malloc_r+0x22>
 8005f6a:	6862      	ldr	r2, [r4, #4]
 8005f6c:	42a3      	cmp	r3, r4
 8005f6e:	bf0c      	ite	eq
 8005f70:	f8c8 2000 	streq.w	r2, [r8]
 8005f74:	605a      	strne	r2, [r3, #4]
 8005f76:	e7eb      	b.n	8005f50 <_malloc_r+0xa8>
 8005f78:	4623      	mov	r3, r4
 8005f7a:	6864      	ldr	r4, [r4, #4]
 8005f7c:	e7ae      	b.n	8005edc <_malloc_r+0x34>
 8005f7e:	463c      	mov	r4, r7
 8005f80:	687f      	ldr	r7, [r7, #4]
 8005f82:	e7b6      	b.n	8005ef2 <_malloc_r+0x4a>
 8005f84:	461a      	mov	r2, r3
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	42a3      	cmp	r3, r4
 8005f8a:	d1fb      	bne.n	8005f84 <_malloc_r+0xdc>
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	6053      	str	r3, [r2, #4]
 8005f90:	e7de      	b.n	8005f50 <_malloc_r+0xa8>
 8005f92:	230c      	movs	r3, #12
 8005f94:	4630      	mov	r0, r6
 8005f96:	6033      	str	r3, [r6, #0]
 8005f98:	f000 f80c 	bl	8005fb4 <__malloc_unlock>
 8005f9c:	e794      	b.n	8005ec8 <_malloc_r+0x20>
 8005f9e:	6005      	str	r5, [r0, #0]
 8005fa0:	e7d6      	b.n	8005f50 <_malloc_r+0xa8>
 8005fa2:	bf00      	nop
 8005fa4:	200003a0 	.word	0x200003a0

08005fa8 <__malloc_lock>:
 8005fa8:	4801      	ldr	r0, [pc, #4]	@ (8005fb0 <__malloc_lock+0x8>)
 8005faa:	f7ff bf11 	b.w	8005dd0 <__retarget_lock_acquire_recursive>
 8005fae:	bf00      	nop
 8005fb0:	20000398 	.word	0x20000398

08005fb4 <__malloc_unlock>:
 8005fb4:	4801      	ldr	r0, [pc, #4]	@ (8005fbc <__malloc_unlock+0x8>)
 8005fb6:	f7ff bf0c 	b.w	8005dd2 <__retarget_lock_release_recursive>
 8005fba:	bf00      	nop
 8005fbc:	20000398 	.word	0x20000398

08005fc0 <__ssputs_r>:
 8005fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fc4:	461f      	mov	r7, r3
 8005fc6:	688e      	ldr	r6, [r1, #8]
 8005fc8:	4682      	mov	sl, r0
 8005fca:	42be      	cmp	r6, r7
 8005fcc:	460c      	mov	r4, r1
 8005fce:	4690      	mov	r8, r2
 8005fd0:	680b      	ldr	r3, [r1, #0]
 8005fd2:	d82d      	bhi.n	8006030 <__ssputs_r+0x70>
 8005fd4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005fd8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005fdc:	d026      	beq.n	800602c <__ssputs_r+0x6c>
 8005fde:	6965      	ldr	r5, [r4, #20]
 8005fe0:	6909      	ldr	r1, [r1, #16]
 8005fe2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005fe6:	eba3 0901 	sub.w	r9, r3, r1
 8005fea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005fee:	1c7b      	adds	r3, r7, #1
 8005ff0:	444b      	add	r3, r9
 8005ff2:	106d      	asrs	r5, r5, #1
 8005ff4:	429d      	cmp	r5, r3
 8005ff6:	bf38      	it	cc
 8005ff8:	461d      	movcc	r5, r3
 8005ffa:	0553      	lsls	r3, r2, #21
 8005ffc:	d527      	bpl.n	800604e <__ssputs_r+0x8e>
 8005ffe:	4629      	mov	r1, r5
 8006000:	f7ff ff52 	bl	8005ea8 <_malloc_r>
 8006004:	4606      	mov	r6, r0
 8006006:	b360      	cbz	r0, 8006062 <__ssputs_r+0xa2>
 8006008:	464a      	mov	r2, r9
 800600a:	6921      	ldr	r1, [r4, #16]
 800600c:	f000 faf8 	bl	8006600 <memcpy>
 8006010:	89a3      	ldrh	r3, [r4, #12]
 8006012:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006016:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800601a:	81a3      	strh	r3, [r4, #12]
 800601c:	6126      	str	r6, [r4, #16]
 800601e:	444e      	add	r6, r9
 8006020:	6026      	str	r6, [r4, #0]
 8006022:	463e      	mov	r6, r7
 8006024:	6165      	str	r5, [r4, #20]
 8006026:	eba5 0509 	sub.w	r5, r5, r9
 800602a:	60a5      	str	r5, [r4, #8]
 800602c:	42be      	cmp	r6, r7
 800602e:	d900      	bls.n	8006032 <__ssputs_r+0x72>
 8006030:	463e      	mov	r6, r7
 8006032:	4632      	mov	r2, r6
 8006034:	4641      	mov	r1, r8
 8006036:	6820      	ldr	r0, [r4, #0]
 8006038:	f000 faaa 	bl	8006590 <memmove>
 800603c:	2000      	movs	r0, #0
 800603e:	68a3      	ldr	r3, [r4, #8]
 8006040:	1b9b      	subs	r3, r3, r6
 8006042:	60a3      	str	r3, [r4, #8]
 8006044:	6823      	ldr	r3, [r4, #0]
 8006046:	4433      	add	r3, r6
 8006048:	6023      	str	r3, [r4, #0]
 800604a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800604e:	462a      	mov	r2, r5
 8006050:	f000 fae4 	bl	800661c <_realloc_r>
 8006054:	4606      	mov	r6, r0
 8006056:	2800      	cmp	r0, #0
 8006058:	d1e0      	bne.n	800601c <__ssputs_r+0x5c>
 800605a:	4650      	mov	r0, sl
 800605c:	6921      	ldr	r1, [r4, #16]
 800605e:	f7ff feb9 	bl	8005dd4 <_free_r>
 8006062:	230c      	movs	r3, #12
 8006064:	f8ca 3000 	str.w	r3, [sl]
 8006068:	89a3      	ldrh	r3, [r4, #12]
 800606a:	f04f 30ff 	mov.w	r0, #4294967295
 800606e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006072:	81a3      	strh	r3, [r4, #12]
 8006074:	e7e9      	b.n	800604a <__ssputs_r+0x8a>
	...

08006078 <_svfiprintf_r>:
 8006078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800607c:	4698      	mov	r8, r3
 800607e:	898b      	ldrh	r3, [r1, #12]
 8006080:	4607      	mov	r7, r0
 8006082:	061b      	lsls	r3, r3, #24
 8006084:	460d      	mov	r5, r1
 8006086:	4614      	mov	r4, r2
 8006088:	b09d      	sub	sp, #116	@ 0x74
 800608a:	d510      	bpl.n	80060ae <_svfiprintf_r+0x36>
 800608c:	690b      	ldr	r3, [r1, #16]
 800608e:	b973      	cbnz	r3, 80060ae <_svfiprintf_r+0x36>
 8006090:	2140      	movs	r1, #64	@ 0x40
 8006092:	f7ff ff09 	bl	8005ea8 <_malloc_r>
 8006096:	6028      	str	r0, [r5, #0]
 8006098:	6128      	str	r0, [r5, #16]
 800609a:	b930      	cbnz	r0, 80060aa <_svfiprintf_r+0x32>
 800609c:	230c      	movs	r3, #12
 800609e:	603b      	str	r3, [r7, #0]
 80060a0:	f04f 30ff 	mov.w	r0, #4294967295
 80060a4:	b01d      	add	sp, #116	@ 0x74
 80060a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060aa:	2340      	movs	r3, #64	@ 0x40
 80060ac:	616b      	str	r3, [r5, #20]
 80060ae:	2300      	movs	r3, #0
 80060b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80060b2:	2320      	movs	r3, #32
 80060b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80060b8:	2330      	movs	r3, #48	@ 0x30
 80060ba:	f04f 0901 	mov.w	r9, #1
 80060be:	f8cd 800c 	str.w	r8, [sp, #12]
 80060c2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800625c <_svfiprintf_r+0x1e4>
 80060c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80060ca:	4623      	mov	r3, r4
 80060cc:	469a      	mov	sl, r3
 80060ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060d2:	b10a      	cbz	r2, 80060d8 <_svfiprintf_r+0x60>
 80060d4:	2a25      	cmp	r2, #37	@ 0x25
 80060d6:	d1f9      	bne.n	80060cc <_svfiprintf_r+0x54>
 80060d8:	ebba 0b04 	subs.w	fp, sl, r4
 80060dc:	d00b      	beq.n	80060f6 <_svfiprintf_r+0x7e>
 80060de:	465b      	mov	r3, fp
 80060e0:	4622      	mov	r2, r4
 80060e2:	4629      	mov	r1, r5
 80060e4:	4638      	mov	r0, r7
 80060e6:	f7ff ff6b 	bl	8005fc0 <__ssputs_r>
 80060ea:	3001      	adds	r0, #1
 80060ec:	f000 80a7 	beq.w	800623e <_svfiprintf_r+0x1c6>
 80060f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80060f2:	445a      	add	r2, fp
 80060f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80060f6:	f89a 3000 	ldrb.w	r3, [sl]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	f000 809f 	beq.w	800623e <_svfiprintf_r+0x1c6>
 8006100:	2300      	movs	r3, #0
 8006102:	f04f 32ff 	mov.w	r2, #4294967295
 8006106:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800610a:	f10a 0a01 	add.w	sl, sl, #1
 800610e:	9304      	str	r3, [sp, #16]
 8006110:	9307      	str	r3, [sp, #28]
 8006112:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006116:	931a      	str	r3, [sp, #104]	@ 0x68
 8006118:	4654      	mov	r4, sl
 800611a:	2205      	movs	r2, #5
 800611c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006120:	484e      	ldr	r0, [pc, #312]	@ (800625c <_svfiprintf_r+0x1e4>)
 8006122:	f000 fa5f 	bl	80065e4 <memchr>
 8006126:	9a04      	ldr	r2, [sp, #16]
 8006128:	b9d8      	cbnz	r0, 8006162 <_svfiprintf_r+0xea>
 800612a:	06d0      	lsls	r0, r2, #27
 800612c:	bf44      	itt	mi
 800612e:	2320      	movmi	r3, #32
 8006130:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006134:	0711      	lsls	r1, r2, #28
 8006136:	bf44      	itt	mi
 8006138:	232b      	movmi	r3, #43	@ 0x2b
 800613a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800613e:	f89a 3000 	ldrb.w	r3, [sl]
 8006142:	2b2a      	cmp	r3, #42	@ 0x2a
 8006144:	d015      	beq.n	8006172 <_svfiprintf_r+0xfa>
 8006146:	4654      	mov	r4, sl
 8006148:	2000      	movs	r0, #0
 800614a:	f04f 0c0a 	mov.w	ip, #10
 800614e:	9a07      	ldr	r2, [sp, #28]
 8006150:	4621      	mov	r1, r4
 8006152:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006156:	3b30      	subs	r3, #48	@ 0x30
 8006158:	2b09      	cmp	r3, #9
 800615a:	d94b      	bls.n	80061f4 <_svfiprintf_r+0x17c>
 800615c:	b1b0      	cbz	r0, 800618c <_svfiprintf_r+0x114>
 800615e:	9207      	str	r2, [sp, #28]
 8006160:	e014      	b.n	800618c <_svfiprintf_r+0x114>
 8006162:	eba0 0308 	sub.w	r3, r0, r8
 8006166:	fa09 f303 	lsl.w	r3, r9, r3
 800616a:	4313      	orrs	r3, r2
 800616c:	46a2      	mov	sl, r4
 800616e:	9304      	str	r3, [sp, #16]
 8006170:	e7d2      	b.n	8006118 <_svfiprintf_r+0xa0>
 8006172:	9b03      	ldr	r3, [sp, #12]
 8006174:	1d19      	adds	r1, r3, #4
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	9103      	str	r1, [sp, #12]
 800617a:	2b00      	cmp	r3, #0
 800617c:	bfbb      	ittet	lt
 800617e:	425b      	neglt	r3, r3
 8006180:	f042 0202 	orrlt.w	r2, r2, #2
 8006184:	9307      	strge	r3, [sp, #28]
 8006186:	9307      	strlt	r3, [sp, #28]
 8006188:	bfb8      	it	lt
 800618a:	9204      	strlt	r2, [sp, #16]
 800618c:	7823      	ldrb	r3, [r4, #0]
 800618e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006190:	d10a      	bne.n	80061a8 <_svfiprintf_r+0x130>
 8006192:	7863      	ldrb	r3, [r4, #1]
 8006194:	2b2a      	cmp	r3, #42	@ 0x2a
 8006196:	d132      	bne.n	80061fe <_svfiprintf_r+0x186>
 8006198:	9b03      	ldr	r3, [sp, #12]
 800619a:	3402      	adds	r4, #2
 800619c:	1d1a      	adds	r2, r3, #4
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	9203      	str	r2, [sp, #12]
 80061a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80061a6:	9305      	str	r3, [sp, #20]
 80061a8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006260 <_svfiprintf_r+0x1e8>
 80061ac:	2203      	movs	r2, #3
 80061ae:	4650      	mov	r0, sl
 80061b0:	7821      	ldrb	r1, [r4, #0]
 80061b2:	f000 fa17 	bl	80065e4 <memchr>
 80061b6:	b138      	cbz	r0, 80061c8 <_svfiprintf_r+0x150>
 80061b8:	2240      	movs	r2, #64	@ 0x40
 80061ba:	9b04      	ldr	r3, [sp, #16]
 80061bc:	eba0 000a 	sub.w	r0, r0, sl
 80061c0:	4082      	lsls	r2, r0
 80061c2:	4313      	orrs	r3, r2
 80061c4:	3401      	adds	r4, #1
 80061c6:	9304      	str	r3, [sp, #16]
 80061c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061cc:	2206      	movs	r2, #6
 80061ce:	4825      	ldr	r0, [pc, #148]	@ (8006264 <_svfiprintf_r+0x1ec>)
 80061d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80061d4:	f000 fa06 	bl	80065e4 <memchr>
 80061d8:	2800      	cmp	r0, #0
 80061da:	d036      	beq.n	800624a <_svfiprintf_r+0x1d2>
 80061dc:	4b22      	ldr	r3, [pc, #136]	@ (8006268 <_svfiprintf_r+0x1f0>)
 80061de:	bb1b      	cbnz	r3, 8006228 <_svfiprintf_r+0x1b0>
 80061e0:	9b03      	ldr	r3, [sp, #12]
 80061e2:	3307      	adds	r3, #7
 80061e4:	f023 0307 	bic.w	r3, r3, #7
 80061e8:	3308      	adds	r3, #8
 80061ea:	9303      	str	r3, [sp, #12]
 80061ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061ee:	4433      	add	r3, r6
 80061f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80061f2:	e76a      	b.n	80060ca <_svfiprintf_r+0x52>
 80061f4:	460c      	mov	r4, r1
 80061f6:	2001      	movs	r0, #1
 80061f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80061fc:	e7a8      	b.n	8006150 <_svfiprintf_r+0xd8>
 80061fe:	2300      	movs	r3, #0
 8006200:	f04f 0c0a 	mov.w	ip, #10
 8006204:	4619      	mov	r1, r3
 8006206:	3401      	adds	r4, #1
 8006208:	9305      	str	r3, [sp, #20]
 800620a:	4620      	mov	r0, r4
 800620c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006210:	3a30      	subs	r2, #48	@ 0x30
 8006212:	2a09      	cmp	r2, #9
 8006214:	d903      	bls.n	800621e <_svfiprintf_r+0x1a6>
 8006216:	2b00      	cmp	r3, #0
 8006218:	d0c6      	beq.n	80061a8 <_svfiprintf_r+0x130>
 800621a:	9105      	str	r1, [sp, #20]
 800621c:	e7c4      	b.n	80061a8 <_svfiprintf_r+0x130>
 800621e:	4604      	mov	r4, r0
 8006220:	2301      	movs	r3, #1
 8006222:	fb0c 2101 	mla	r1, ip, r1, r2
 8006226:	e7f0      	b.n	800620a <_svfiprintf_r+0x192>
 8006228:	ab03      	add	r3, sp, #12
 800622a:	9300      	str	r3, [sp, #0]
 800622c:	462a      	mov	r2, r5
 800622e:	4638      	mov	r0, r7
 8006230:	4b0e      	ldr	r3, [pc, #56]	@ (800626c <_svfiprintf_r+0x1f4>)
 8006232:	a904      	add	r1, sp, #16
 8006234:	f3af 8000 	nop.w
 8006238:	1c42      	adds	r2, r0, #1
 800623a:	4606      	mov	r6, r0
 800623c:	d1d6      	bne.n	80061ec <_svfiprintf_r+0x174>
 800623e:	89ab      	ldrh	r3, [r5, #12]
 8006240:	065b      	lsls	r3, r3, #25
 8006242:	f53f af2d 	bmi.w	80060a0 <_svfiprintf_r+0x28>
 8006246:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006248:	e72c      	b.n	80060a4 <_svfiprintf_r+0x2c>
 800624a:	ab03      	add	r3, sp, #12
 800624c:	9300      	str	r3, [sp, #0]
 800624e:	462a      	mov	r2, r5
 8006250:	4638      	mov	r0, r7
 8006252:	4b06      	ldr	r3, [pc, #24]	@ (800626c <_svfiprintf_r+0x1f4>)
 8006254:	a904      	add	r1, sp, #16
 8006256:	f000 f87d 	bl	8006354 <_printf_i>
 800625a:	e7ed      	b.n	8006238 <_svfiprintf_r+0x1c0>
 800625c:	08006786 	.word	0x08006786
 8006260:	0800678c 	.word	0x0800678c
 8006264:	08006790 	.word	0x08006790
 8006268:	00000000 	.word	0x00000000
 800626c:	08005fc1 	.word	0x08005fc1

08006270 <_printf_common>:
 8006270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006274:	4616      	mov	r6, r2
 8006276:	4698      	mov	r8, r3
 8006278:	688a      	ldr	r2, [r1, #8]
 800627a:	690b      	ldr	r3, [r1, #16]
 800627c:	4607      	mov	r7, r0
 800627e:	4293      	cmp	r3, r2
 8006280:	bfb8      	it	lt
 8006282:	4613      	movlt	r3, r2
 8006284:	6033      	str	r3, [r6, #0]
 8006286:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800628a:	460c      	mov	r4, r1
 800628c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006290:	b10a      	cbz	r2, 8006296 <_printf_common+0x26>
 8006292:	3301      	adds	r3, #1
 8006294:	6033      	str	r3, [r6, #0]
 8006296:	6823      	ldr	r3, [r4, #0]
 8006298:	0699      	lsls	r1, r3, #26
 800629a:	bf42      	ittt	mi
 800629c:	6833      	ldrmi	r3, [r6, #0]
 800629e:	3302      	addmi	r3, #2
 80062a0:	6033      	strmi	r3, [r6, #0]
 80062a2:	6825      	ldr	r5, [r4, #0]
 80062a4:	f015 0506 	ands.w	r5, r5, #6
 80062a8:	d106      	bne.n	80062b8 <_printf_common+0x48>
 80062aa:	f104 0a19 	add.w	sl, r4, #25
 80062ae:	68e3      	ldr	r3, [r4, #12]
 80062b0:	6832      	ldr	r2, [r6, #0]
 80062b2:	1a9b      	subs	r3, r3, r2
 80062b4:	42ab      	cmp	r3, r5
 80062b6:	dc2b      	bgt.n	8006310 <_printf_common+0xa0>
 80062b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80062bc:	6822      	ldr	r2, [r4, #0]
 80062be:	3b00      	subs	r3, #0
 80062c0:	bf18      	it	ne
 80062c2:	2301      	movne	r3, #1
 80062c4:	0692      	lsls	r2, r2, #26
 80062c6:	d430      	bmi.n	800632a <_printf_common+0xba>
 80062c8:	4641      	mov	r1, r8
 80062ca:	4638      	mov	r0, r7
 80062cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80062d0:	47c8      	blx	r9
 80062d2:	3001      	adds	r0, #1
 80062d4:	d023      	beq.n	800631e <_printf_common+0xae>
 80062d6:	6823      	ldr	r3, [r4, #0]
 80062d8:	6922      	ldr	r2, [r4, #16]
 80062da:	f003 0306 	and.w	r3, r3, #6
 80062de:	2b04      	cmp	r3, #4
 80062e0:	bf14      	ite	ne
 80062e2:	2500      	movne	r5, #0
 80062e4:	6833      	ldreq	r3, [r6, #0]
 80062e6:	f04f 0600 	mov.w	r6, #0
 80062ea:	bf08      	it	eq
 80062ec:	68e5      	ldreq	r5, [r4, #12]
 80062ee:	f104 041a 	add.w	r4, r4, #26
 80062f2:	bf08      	it	eq
 80062f4:	1aed      	subeq	r5, r5, r3
 80062f6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80062fa:	bf08      	it	eq
 80062fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006300:	4293      	cmp	r3, r2
 8006302:	bfc4      	itt	gt
 8006304:	1a9b      	subgt	r3, r3, r2
 8006306:	18ed      	addgt	r5, r5, r3
 8006308:	42b5      	cmp	r5, r6
 800630a:	d11a      	bne.n	8006342 <_printf_common+0xd2>
 800630c:	2000      	movs	r0, #0
 800630e:	e008      	b.n	8006322 <_printf_common+0xb2>
 8006310:	2301      	movs	r3, #1
 8006312:	4652      	mov	r2, sl
 8006314:	4641      	mov	r1, r8
 8006316:	4638      	mov	r0, r7
 8006318:	47c8      	blx	r9
 800631a:	3001      	adds	r0, #1
 800631c:	d103      	bne.n	8006326 <_printf_common+0xb6>
 800631e:	f04f 30ff 	mov.w	r0, #4294967295
 8006322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006326:	3501      	adds	r5, #1
 8006328:	e7c1      	b.n	80062ae <_printf_common+0x3e>
 800632a:	2030      	movs	r0, #48	@ 0x30
 800632c:	18e1      	adds	r1, r4, r3
 800632e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006332:	1c5a      	adds	r2, r3, #1
 8006334:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006338:	4422      	add	r2, r4
 800633a:	3302      	adds	r3, #2
 800633c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006340:	e7c2      	b.n	80062c8 <_printf_common+0x58>
 8006342:	2301      	movs	r3, #1
 8006344:	4622      	mov	r2, r4
 8006346:	4641      	mov	r1, r8
 8006348:	4638      	mov	r0, r7
 800634a:	47c8      	blx	r9
 800634c:	3001      	adds	r0, #1
 800634e:	d0e6      	beq.n	800631e <_printf_common+0xae>
 8006350:	3601      	adds	r6, #1
 8006352:	e7d9      	b.n	8006308 <_printf_common+0x98>

08006354 <_printf_i>:
 8006354:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006358:	7e0f      	ldrb	r7, [r1, #24]
 800635a:	4691      	mov	r9, r2
 800635c:	2f78      	cmp	r7, #120	@ 0x78
 800635e:	4680      	mov	r8, r0
 8006360:	460c      	mov	r4, r1
 8006362:	469a      	mov	sl, r3
 8006364:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006366:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800636a:	d807      	bhi.n	800637c <_printf_i+0x28>
 800636c:	2f62      	cmp	r7, #98	@ 0x62
 800636e:	d80a      	bhi.n	8006386 <_printf_i+0x32>
 8006370:	2f00      	cmp	r7, #0
 8006372:	f000 80d1 	beq.w	8006518 <_printf_i+0x1c4>
 8006376:	2f58      	cmp	r7, #88	@ 0x58
 8006378:	f000 80b8 	beq.w	80064ec <_printf_i+0x198>
 800637c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006380:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006384:	e03a      	b.n	80063fc <_printf_i+0xa8>
 8006386:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800638a:	2b15      	cmp	r3, #21
 800638c:	d8f6      	bhi.n	800637c <_printf_i+0x28>
 800638e:	a101      	add	r1, pc, #4	@ (adr r1, 8006394 <_printf_i+0x40>)
 8006390:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006394:	080063ed 	.word	0x080063ed
 8006398:	08006401 	.word	0x08006401
 800639c:	0800637d 	.word	0x0800637d
 80063a0:	0800637d 	.word	0x0800637d
 80063a4:	0800637d 	.word	0x0800637d
 80063a8:	0800637d 	.word	0x0800637d
 80063ac:	08006401 	.word	0x08006401
 80063b0:	0800637d 	.word	0x0800637d
 80063b4:	0800637d 	.word	0x0800637d
 80063b8:	0800637d 	.word	0x0800637d
 80063bc:	0800637d 	.word	0x0800637d
 80063c0:	080064ff 	.word	0x080064ff
 80063c4:	0800642b 	.word	0x0800642b
 80063c8:	080064b9 	.word	0x080064b9
 80063cc:	0800637d 	.word	0x0800637d
 80063d0:	0800637d 	.word	0x0800637d
 80063d4:	08006521 	.word	0x08006521
 80063d8:	0800637d 	.word	0x0800637d
 80063dc:	0800642b 	.word	0x0800642b
 80063e0:	0800637d 	.word	0x0800637d
 80063e4:	0800637d 	.word	0x0800637d
 80063e8:	080064c1 	.word	0x080064c1
 80063ec:	6833      	ldr	r3, [r6, #0]
 80063ee:	1d1a      	adds	r2, r3, #4
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	6032      	str	r2, [r6, #0]
 80063f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80063f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80063fc:	2301      	movs	r3, #1
 80063fe:	e09c      	b.n	800653a <_printf_i+0x1e6>
 8006400:	6833      	ldr	r3, [r6, #0]
 8006402:	6820      	ldr	r0, [r4, #0]
 8006404:	1d19      	adds	r1, r3, #4
 8006406:	6031      	str	r1, [r6, #0]
 8006408:	0606      	lsls	r6, r0, #24
 800640a:	d501      	bpl.n	8006410 <_printf_i+0xbc>
 800640c:	681d      	ldr	r5, [r3, #0]
 800640e:	e003      	b.n	8006418 <_printf_i+0xc4>
 8006410:	0645      	lsls	r5, r0, #25
 8006412:	d5fb      	bpl.n	800640c <_printf_i+0xb8>
 8006414:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006418:	2d00      	cmp	r5, #0
 800641a:	da03      	bge.n	8006424 <_printf_i+0xd0>
 800641c:	232d      	movs	r3, #45	@ 0x2d
 800641e:	426d      	negs	r5, r5
 8006420:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006424:	230a      	movs	r3, #10
 8006426:	4858      	ldr	r0, [pc, #352]	@ (8006588 <_printf_i+0x234>)
 8006428:	e011      	b.n	800644e <_printf_i+0xfa>
 800642a:	6821      	ldr	r1, [r4, #0]
 800642c:	6833      	ldr	r3, [r6, #0]
 800642e:	0608      	lsls	r0, r1, #24
 8006430:	f853 5b04 	ldr.w	r5, [r3], #4
 8006434:	d402      	bmi.n	800643c <_printf_i+0xe8>
 8006436:	0649      	lsls	r1, r1, #25
 8006438:	bf48      	it	mi
 800643a:	b2ad      	uxthmi	r5, r5
 800643c:	2f6f      	cmp	r7, #111	@ 0x6f
 800643e:	6033      	str	r3, [r6, #0]
 8006440:	bf14      	ite	ne
 8006442:	230a      	movne	r3, #10
 8006444:	2308      	moveq	r3, #8
 8006446:	4850      	ldr	r0, [pc, #320]	@ (8006588 <_printf_i+0x234>)
 8006448:	2100      	movs	r1, #0
 800644a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800644e:	6866      	ldr	r6, [r4, #4]
 8006450:	2e00      	cmp	r6, #0
 8006452:	60a6      	str	r6, [r4, #8]
 8006454:	db05      	blt.n	8006462 <_printf_i+0x10e>
 8006456:	6821      	ldr	r1, [r4, #0]
 8006458:	432e      	orrs	r6, r5
 800645a:	f021 0104 	bic.w	r1, r1, #4
 800645e:	6021      	str	r1, [r4, #0]
 8006460:	d04b      	beq.n	80064fa <_printf_i+0x1a6>
 8006462:	4616      	mov	r6, r2
 8006464:	fbb5 f1f3 	udiv	r1, r5, r3
 8006468:	fb03 5711 	mls	r7, r3, r1, r5
 800646c:	5dc7      	ldrb	r7, [r0, r7]
 800646e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006472:	462f      	mov	r7, r5
 8006474:	42bb      	cmp	r3, r7
 8006476:	460d      	mov	r5, r1
 8006478:	d9f4      	bls.n	8006464 <_printf_i+0x110>
 800647a:	2b08      	cmp	r3, #8
 800647c:	d10b      	bne.n	8006496 <_printf_i+0x142>
 800647e:	6823      	ldr	r3, [r4, #0]
 8006480:	07df      	lsls	r7, r3, #31
 8006482:	d508      	bpl.n	8006496 <_printf_i+0x142>
 8006484:	6923      	ldr	r3, [r4, #16]
 8006486:	6861      	ldr	r1, [r4, #4]
 8006488:	4299      	cmp	r1, r3
 800648a:	bfde      	ittt	le
 800648c:	2330      	movle	r3, #48	@ 0x30
 800648e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006492:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006496:	1b92      	subs	r2, r2, r6
 8006498:	6122      	str	r2, [r4, #16]
 800649a:	464b      	mov	r3, r9
 800649c:	4621      	mov	r1, r4
 800649e:	4640      	mov	r0, r8
 80064a0:	f8cd a000 	str.w	sl, [sp]
 80064a4:	aa03      	add	r2, sp, #12
 80064a6:	f7ff fee3 	bl	8006270 <_printf_common>
 80064aa:	3001      	adds	r0, #1
 80064ac:	d14a      	bne.n	8006544 <_printf_i+0x1f0>
 80064ae:	f04f 30ff 	mov.w	r0, #4294967295
 80064b2:	b004      	add	sp, #16
 80064b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064b8:	6823      	ldr	r3, [r4, #0]
 80064ba:	f043 0320 	orr.w	r3, r3, #32
 80064be:	6023      	str	r3, [r4, #0]
 80064c0:	2778      	movs	r7, #120	@ 0x78
 80064c2:	4832      	ldr	r0, [pc, #200]	@ (800658c <_printf_i+0x238>)
 80064c4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80064c8:	6823      	ldr	r3, [r4, #0]
 80064ca:	6831      	ldr	r1, [r6, #0]
 80064cc:	061f      	lsls	r7, r3, #24
 80064ce:	f851 5b04 	ldr.w	r5, [r1], #4
 80064d2:	d402      	bmi.n	80064da <_printf_i+0x186>
 80064d4:	065f      	lsls	r7, r3, #25
 80064d6:	bf48      	it	mi
 80064d8:	b2ad      	uxthmi	r5, r5
 80064da:	6031      	str	r1, [r6, #0]
 80064dc:	07d9      	lsls	r1, r3, #31
 80064de:	bf44      	itt	mi
 80064e0:	f043 0320 	orrmi.w	r3, r3, #32
 80064e4:	6023      	strmi	r3, [r4, #0]
 80064e6:	b11d      	cbz	r5, 80064f0 <_printf_i+0x19c>
 80064e8:	2310      	movs	r3, #16
 80064ea:	e7ad      	b.n	8006448 <_printf_i+0xf4>
 80064ec:	4826      	ldr	r0, [pc, #152]	@ (8006588 <_printf_i+0x234>)
 80064ee:	e7e9      	b.n	80064c4 <_printf_i+0x170>
 80064f0:	6823      	ldr	r3, [r4, #0]
 80064f2:	f023 0320 	bic.w	r3, r3, #32
 80064f6:	6023      	str	r3, [r4, #0]
 80064f8:	e7f6      	b.n	80064e8 <_printf_i+0x194>
 80064fa:	4616      	mov	r6, r2
 80064fc:	e7bd      	b.n	800647a <_printf_i+0x126>
 80064fe:	6833      	ldr	r3, [r6, #0]
 8006500:	6825      	ldr	r5, [r4, #0]
 8006502:	1d18      	adds	r0, r3, #4
 8006504:	6961      	ldr	r1, [r4, #20]
 8006506:	6030      	str	r0, [r6, #0]
 8006508:	062e      	lsls	r6, r5, #24
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	d501      	bpl.n	8006512 <_printf_i+0x1be>
 800650e:	6019      	str	r1, [r3, #0]
 8006510:	e002      	b.n	8006518 <_printf_i+0x1c4>
 8006512:	0668      	lsls	r0, r5, #25
 8006514:	d5fb      	bpl.n	800650e <_printf_i+0x1ba>
 8006516:	8019      	strh	r1, [r3, #0]
 8006518:	2300      	movs	r3, #0
 800651a:	4616      	mov	r6, r2
 800651c:	6123      	str	r3, [r4, #16]
 800651e:	e7bc      	b.n	800649a <_printf_i+0x146>
 8006520:	6833      	ldr	r3, [r6, #0]
 8006522:	2100      	movs	r1, #0
 8006524:	1d1a      	adds	r2, r3, #4
 8006526:	6032      	str	r2, [r6, #0]
 8006528:	681e      	ldr	r6, [r3, #0]
 800652a:	6862      	ldr	r2, [r4, #4]
 800652c:	4630      	mov	r0, r6
 800652e:	f000 f859 	bl	80065e4 <memchr>
 8006532:	b108      	cbz	r0, 8006538 <_printf_i+0x1e4>
 8006534:	1b80      	subs	r0, r0, r6
 8006536:	6060      	str	r0, [r4, #4]
 8006538:	6863      	ldr	r3, [r4, #4]
 800653a:	6123      	str	r3, [r4, #16]
 800653c:	2300      	movs	r3, #0
 800653e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006542:	e7aa      	b.n	800649a <_printf_i+0x146>
 8006544:	4632      	mov	r2, r6
 8006546:	4649      	mov	r1, r9
 8006548:	4640      	mov	r0, r8
 800654a:	6923      	ldr	r3, [r4, #16]
 800654c:	47d0      	blx	sl
 800654e:	3001      	adds	r0, #1
 8006550:	d0ad      	beq.n	80064ae <_printf_i+0x15a>
 8006552:	6823      	ldr	r3, [r4, #0]
 8006554:	079b      	lsls	r3, r3, #30
 8006556:	d413      	bmi.n	8006580 <_printf_i+0x22c>
 8006558:	68e0      	ldr	r0, [r4, #12]
 800655a:	9b03      	ldr	r3, [sp, #12]
 800655c:	4298      	cmp	r0, r3
 800655e:	bfb8      	it	lt
 8006560:	4618      	movlt	r0, r3
 8006562:	e7a6      	b.n	80064b2 <_printf_i+0x15e>
 8006564:	2301      	movs	r3, #1
 8006566:	4632      	mov	r2, r6
 8006568:	4649      	mov	r1, r9
 800656a:	4640      	mov	r0, r8
 800656c:	47d0      	blx	sl
 800656e:	3001      	adds	r0, #1
 8006570:	d09d      	beq.n	80064ae <_printf_i+0x15a>
 8006572:	3501      	adds	r5, #1
 8006574:	68e3      	ldr	r3, [r4, #12]
 8006576:	9903      	ldr	r1, [sp, #12]
 8006578:	1a5b      	subs	r3, r3, r1
 800657a:	42ab      	cmp	r3, r5
 800657c:	dcf2      	bgt.n	8006564 <_printf_i+0x210>
 800657e:	e7eb      	b.n	8006558 <_printf_i+0x204>
 8006580:	2500      	movs	r5, #0
 8006582:	f104 0619 	add.w	r6, r4, #25
 8006586:	e7f5      	b.n	8006574 <_printf_i+0x220>
 8006588:	08006797 	.word	0x08006797
 800658c:	080067a8 	.word	0x080067a8

08006590 <memmove>:
 8006590:	4288      	cmp	r0, r1
 8006592:	b510      	push	{r4, lr}
 8006594:	eb01 0402 	add.w	r4, r1, r2
 8006598:	d902      	bls.n	80065a0 <memmove+0x10>
 800659a:	4284      	cmp	r4, r0
 800659c:	4623      	mov	r3, r4
 800659e:	d807      	bhi.n	80065b0 <memmove+0x20>
 80065a0:	1e43      	subs	r3, r0, #1
 80065a2:	42a1      	cmp	r1, r4
 80065a4:	d008      	beq.n	80065b8 <memmove+0x28>
 80065a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80065aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80065ae:	e7f8      	b.n	80065a2 <memmove+0x12>
 80065b0:	4601      	mov	r1, r0
 80065b2:	4402      	add	r2, r0
 80065b4:	428a      	cmp	r2, r1
 80065b6:	d100      	bne.n	80065ba <memmove+0x2a>
 80065b8:	bd10      	pop	{r4, pc}
 80065ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80065be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80065c2:	e7f7      	b.n	80065b4 <memmove+0x24>

080065c4 <_sbrk_r>:
 80065c4:	b538      	push	{r3, r4, r5, lr}
 80065c6:	2300      	movs	r3, #0
 80065c8:	4d05      	ldr	r5, [pc, #20]	@ (80065e0 <_sbrk_r+0x1c>)
 80065ca:	4604      	mov	r4, r0
 80065cc:	4608      	mov	r0, r1
 80065ce:	602b      	str	r3, [r5, #0]
 80065d0:	f7fb f91a 	bl	8001808 <_sbrk>
 80065d4:	1c43      	adds	r3, r0, #1
 80065d6:	d102      	bne.n	80065de <_sbrk_r+0x1a>
 80065d8:	682b      	ldr	r3, [r5, #0]
 80065da:	b103      	cbz	r3, 80065de <_sbrk_r+0x1a>
 80065dc:	6023      	str	r3, [r4, #0]
 80065de:	bd38      	pop	{r3, r4, r5, pc}
 80065e0:	20000394 	.word	0x20000394

080065e4 <memchr>:
 80065e4:	4603      	mov	r3, r0
 80065e6:	b510      	push	{r4, lr}
 80065e8:	b2c9      	uxtb	r1, r1
 80065ea:	4402      	add	r2, r0
 80065ec:	4293      	cmp	r3, r2
 80065ee:	4618      	mov	r0, r3
 80065f0:	d101      	bne.n	80065f6 <memchr+0x12>
 80065f2:	2000      	movs	r0, #0
 80065f4:	e003      	b.n	80065fe <memchr+0x1a>
 80065f6:	7804      	ldrb	r4, [r0, #0]
 80065f8:	3301      	adds	r3, #1
 80065fa:	428c      	cmp	r4, r1
 80065fc:	d1f6      	bne.n	80065ec <memchr+0x8>
 80065fe:	bd10      	pop	{r4, pc}

08006600 <memcpy>:
 8006600:	440a      	add	r2, r1
 8006602:	4291      	cmp	r1, r2
 8006604:	f100 33ff 	add.w	r3, r0, #4294967295
 8006608:	d100      	bne.n	800660c <memcpy+0xc>
 800660a:	4770      	bx	lr
 800660c:	b510      	push	{r4, lr}
 800660e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006612:	4291      	cmp	r1, r2
 8006614:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006618:	d1f9      	bne.n	800660e <memcpy+0xe>
 800661a:	bd10      	pop	{r4, pc}

0800661c <_realloc_r>:
 800661c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006620:	4607      	mov	r7, r0
 8006622:	4614      	mov	r4, r2
 8006624:	460d      	mov	r5, r1
 8006626:	b921      	cbnz	r1, 8006632 <_realloc_r+0x16>
 8006628:	4611      	mov	r1, r2
 800662a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800662e:	f7ff bc3b 	b.w	8005ea8 <_malloc_r>
 8006632:	b92a      	cbnz	r2, 8006640 <_realloc_r+0x24>
 8006634:	f7ff fbce 	bl	8005dd4 <_free_r>
 8006638:	4625      	mov	r5, r4
 800663a:	4628      	mov	r0, r5
 800663c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006640:	f000 f81a 	bl	8006678 <_malloc_usable_size_r>
 8006644:	4284      	cmp	r4, r0
 8006646:	4606      	mov	r6, r0
 8006648:	d802      	bhi.n	8006650 <_realloc_r+0x34>
 800664a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800664e:	d8f4      	bhi.n	800663a <_realloc_r+0x1e>
 8006650:	4621      	mov	r1, r4
 8006652:	4638      	mov	r0, r7
 8006654:	f7ff fc28 	bl	8005ea8 <_malloc_r>
 8006658:	4680      	mov	r8, r0
 800665a:	b908      	cbnz	r0, 8006660 <_realloc_r+0x44>
 800665c:	4645      	mov	r5, r8
 800665e:	e7ec      	b.n	800663a <_realloc_r+0x1e>
 8006660:	42b4      	cmp	r4, r6
 8006662:	4622      	mov	r2, r4
 8006664:	4629      	mov	r1, r5
 8006666:	bf28      	it	cs
 8006668:	4632      	movcs	r2, r6
 800666a:	f7ff ffc9 	bl	8006600 <memcpy>
 800666e:	4629      	mov	r1, r5
 8006670:	4638      	mov	r0, r7
 8006672:	f7ff fbaf 	bl	8005dd4 <_free_r>
 8006676:	e7f1      	b.n	800665c <_realloc_r+0x40>

08006678 <_malloc_usable_size_r>:
 8006678:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800667c:	1f18      	subs	r0, r3, #4
 800667e:	2b00      	cmp	r3, #0
 8006680:	bfbc      	itt	lt
 8006682:	580b      	ldrlt	r3, [r1, r0]
 8006684:	18c0      	addlt	r0, r0, r3
 8006686:	4770      	bx	lr

08006688 <_init>:
 8006688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800668a:	bf00      	nop
 800668c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800668e:	bc08      	pop	{r3}
 8006690:	469e      	mov	lr, r3
 8006692:	4770      	bx	lr

08006694 <_fini>:
 8006694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006696:	bf00      	nop
 8006698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800669a:	bc08      	pop	{r3}
 800669c:	469e      	mov	lr, r3
 800669e:	4770      	bx	lr
