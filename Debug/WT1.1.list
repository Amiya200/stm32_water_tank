
WT1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000794c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  08007a58  08007a58  00008a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f3c  08007f3c  000090c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007f3c  08007f3c  00008f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f44  08007f44  000090c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f44  08007f44  00008f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f48  08007f48  00008f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c4  20000000  08007f4c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004fc  200000c4  08008010  000090c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005c0  08008010  000095c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000090c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013bed  00000000  00000000  000090ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cad  00000000  00000000  0001ccda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001300  00000000  00000000  00020988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ec3  00000000  00000000  00021c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aaf0  00000000  00000000  00022b4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019267  00000000  00000000  0003d63b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f9ca  00000000  00000000  000568a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e626c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053e4  00000000  00000000  000e62b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  000eb694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000c4 	.word	0x200000c4
 8000128:	00000000 	.word	0x00000000
 800012c:	08007a40 	.word	0x08007a40

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000c8 	.word	0x200000c8
 8000148:	08007a40 	.word	0x08007a40

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <__aeabi_frsub>:
 8000170:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000174:	e002      	b.n	800017c <__addsf3>
 8000176:	bf00      	nop

08000178 <__aeabi_fsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800017c <__addsf3>:
 800017c:	0042      	lsls	r2, r0, #1
 800017e:	bf1f      	itttt	ne
 8000180:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000184:	ea92 0f03 	teqne	r2, r3
 8000188:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800018c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000190:	d06a      	beq.n	8000268 <__addsf3+0xec>
 8000192:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000196:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019a:	bfc1      	itttt	gt
 800019c:	18d2      	addgt	r2, r2, r3
 800019e:	4041      	eorgt	r1, r0
 80001a0:	4048      	eorgt	r0, r1
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	2b19      	cmp	r3, #25
 80001aa:	bf88      	it	hi
 80001ac:	4770      	bxhi	lr
 80001ae:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80001b2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001b6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4240      	negne	r0, r0
 80001be:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001c6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4249      	negne	r1, r1
 80001ce:	ea92 0f03 	teq	r2, r3
 80001d2:	d03f      	beq.n	8000254 <__addsf3+0xd8>
 80001d4:	f1a2 0201 	sub.w	r2, r2, #1
 80001d8:	fa41 fc03 	asr.w	ip, r1, r3
 80001dc:	eb10 000c 	adds.w	r0, r0, ip
 80001e0:	f1c3 0320 	rsb	r3, r3, #32
 80001e4:	fa01 f103 	lsl.w	r1, r1, r3
 80001e8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001ec:	d502      	bpl.n	80001f4 <__addsf3+0x78>
 80001ee:	4249      	negs	r1, r1
 80001f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001f8:	d313      	bcc.n	8000222 <__addsf3+0xa6>
 80001fa:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001fe:	d306      	bcc.n	800020e <__addsf3+0x92>
 8000200:	0840      	lsrs	r0, r0, #1
 8000202:	ea4f 0131 	mov.w	r1, r1, rrx
 8000206:	f102 0201 	add.w	r2, r2, #1
 800020a:	2afe      	cmp	r2, #254	@ 0xfe
 800020c:	d251      	bcs.n	80002b2 <__addsf3+0x136>
 800020e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000212:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000216:	bf08      	it	eq
 8000218:	f020 0001 	biceq.w	r0, r0, #1
 800021c:	ea40 0003 	orr.w	r0, r0, r3
 8000220:	4770      	bx	lr
 8000222:	0049      	lsls	r1, r1, #1
 8000224:	eb40 0000 	adc.w	r0, r0, r0
 8000228:	3a01      	subs	r2, #1
 800022a:	bf28      	it	cs
 800022c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000230:	d2ed      	bcs.n	800020e <__addsf3+0x92>
 8000232:	fab0 fc80 	clz	ip, r0
 8000236:	f1ac 0c08 	sub.w	ip, ip, #8
 800023a:	ebb2 020c 	subs.w	r2, r2, ip
 800023e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000242:	bfaa      	itet	ge
 8000244:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000248:	4252      	neglt	r2, r2
 800024a:	4318      	orrge	r0, r3
 800024c:	bfbc      	itt	lt
 800024e:	40d0      	lsrlt	r0, r2
 8000250:	4318      	orrlt	r0, r3
 8000252:	4770      	bx	lr
 8000254:	f092 0f00 	teq	r2, #0
 8000258:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800025c:	bf06      	itte	eq
 800025e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000262:	3201      	addeq	r2, #1
 8000264:	3b01      	subne	r3, #1
 8000266:	e7b5      	b.n	80001d4 <__addsf3+0x58>
 8000268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800026c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000270:	bf18      	it	ne
 8000272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000276:	d021      	beq.n	80002bc <__addsf3+0x140>
 8000278:	ea92 0f03 	teq	r2, r3
 800027c:	d004      	beq.n	8000288 <__addsf3+0x10c>
 800027e:	f092 0f00 	teq	r2, #0
 8000282:	bf08      	it	eq
 8000284:	4608      	moveq	r0, r1
 8000286:	4770      	bx	lr
 8000288:	ea90 0f01 	teq	r0, r1
 800028c:	bf1c      	itt	ne
 800028e:	2000      	movne	r0, #0
 8000290:	4770      	bxne	lr
 8000292:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000296:	d104      	bne.n	80002a2 <__addsf3+0x126>
 8000298:	0040      	lsls	r0, r0, #1
 800029a:	bf28      	it	cs
 800029c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80002a0:	4770      	bx	lr
 80002a2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80002a6:	bf3c      	itt	cc
 80002a8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80002ac:	4770      	bxcc	lr
 80002ae:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80002b2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ba:	4770      	bx	lr
 80002bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c0:	bf16      	itet	ne
 80002c2:	4608      	movne	r0, r1
 80002c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002c8:	4601      	movne	r1, r0
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	bf06      	itte	eq
 80002ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d2:	ea90 0f01 	teqeq	r0, r1
 80002d6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002da:	4770      	bx	lr

080002dc <__aeabi_ui2f>:
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	e004      	b.n	80002ec <__aeabi_i2f+0x8>
 80002e2:	bf00      	nop

080002e4 <__aeabi_i2f>:
 80002e4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002e8:	bf48      	it	mi
 80002ea:	4240      	negmi	r0, r0
 80002ec:	ea5f 0c00 	movs.w	ip, r0
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002f8:	4601      	mov	r1, r0
 80002fa:	f04f 0000 	mov.w	r0, #0
 80002fe:	e01c      	b.n	800033a <__aeabi_l2f+0x2a>

08000300 <__aeabi_ul2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	e00a      	b.n	8000324 <__aeabi_l2f+0x14>
 800030e:	bf00      	nop

08000310 <__aeabi_l2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800031c:	d502      	bpl.n	8000324 <__aeabi_l2f+0x14>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	ea5f 0c01 	movs.w	ip, r1
 8000328:	bf02      	ittt	eq
 800032a:	4684      	moveq	ip, r0
 800032c:	4601      	moveq	r1, r0
 800032e:	2000      	moveq	r0, #0
 8000330:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000334:	bf08      	it	eq
 8000336:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800033a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800033e:	fabc f28c 	clz	r2, ip
 8000342:	3a08      	subs	r2, #8
 8000344:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000348:	db10      	blt.n	800036c <__aeabi_l2f+0x5c>
 800034a:	fa01 fc02 	lsl.w	ip, r1, r2
 800034e:	4463      	add	r3, ip
 8000350:	fa00 fc02 	lsl.w	ip, r0, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800035c:	fa20 f202 	lsr.w	r2, r0, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	f020 0001 	biceq.w	r0, r0, #1
 800036a:	4770      	bx	lr
 800036c:	f102 0220 	add.w	r2, r2, #32
 8000370:	fa01 fc02 	lsl.w	ip, r1, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800037c:	fa21 f202 	lsr.w	r2, r1, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038a:	4770      	bx	lr

0800038c <__aeabi_fmul>:
 800038c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000390:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000394:	bf1e      	ittt	ne
 8000396:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039a:	ea92 0f0c 	teqne	r2, ip
 800039e:	ea93 0f0c 	teqne	r3, ip
 80003a2:	d06f      	beq.n	8000484 <__aeabi_fmul+0xf8>
 80003a4:	441a      	add	r2, r3
 80003a6:	ea80 0c01 	eor.w	ip, r0, r1
 80003aa:	0240      	lsls	r0, r0, #9
 80003ac:	bf18      	it	ne
 80003ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b2:	d01e      	beq.n	80003f2 <__aeabi_fmul+0x66>
 80003b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c0:	fba0 3101 	umull	r3, r1, r0, r1
 80003c4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003c8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003cc:	bf3e      	ittt	cc
 80003ce:	0049      	lslcc	r1, r1, #1
 80003d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d4:	005b      	lslcc	r3, r3, #1
 80003d6:	ea40 0001 	orr.w	r0, r0, r1
 80003da:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003de:	2afd      	cmp	r2, #253	@ 0xfd
 80003e0:	d81d      	bhi.n	800041e <__aeabi_fmul+0x92>
 80003e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ea:	bf08      	it	eq
 80003ec:	f020 0001 	biceq.w	r0, r0, #1
 80003f0:	4770      	bx	lr
 80003f2:	f090 0f00 	teq	r0, #0
 80003f6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003fa:	bf08      	it	eq
 80003fc:	0249      	lsleq	r1, r1, #9
 80003fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000402:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000406:	3a7f      	subs	r2, #127	@ 0x7f
 8000408:	bfc2      	ittt	gt
 800040a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800040e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000412:	4770      	bxgt	lr
 8000414:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	3a01      	subs	r2, #1
 800041e:	dc5d      	bgt.n	80004dc <__aeabi_fmul+0x150>
 8000420:	f112 0f19 	cmn.w	r2, #25
 8000424:	bfdc      	itt	le
 8000426:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800042a:	4770      	bxle	lr
 800042c:	f1c2 0200 	rsb	r2, r2, #0
 8000430:	0041      	lsls	r1, r0, #1
 8000432:	fa21 f102 	lsr.w	r1, r1, r2
 8000436:	f1c2 0220 	rsb	r2, r2, #32
 800043a:	fa00 fc02 	lsl.w	ip, r0, r2
 800043e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000442:	f140 0000 	adc.w	r0, r0, #0
 8000446:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044a:	bf08      	it	eq
 800044c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000450:	4770      	bx	lr
 8000452:	f092 0f00 	teq	r2, #0
 8000456:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800045a:	bf02      	ittt	eq
 800045c:	0040      	lsleq	r0, r0, #1
 800045e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000462:	3a01      	subeq	r2, #1
 8000464:	d0f9      	beq.n	800045a <__aeabi_fmul+0xce>
 8000466:	ea40 000c 	orr.w	r0, r0, ip
 800046a:	f093 0f00 	teq	r3, #0
 800046e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0049      	lsleq	r1, r1, #1
 8000476:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800047a:	3b01      	subeq	r3, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xe6>
 800047e:	ea41 010c 	orr.w	r1, r1, ip
 8000482:	e78f      	b.n	80003a4 <__aeabi_fmul+0x18>
 8000484:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000488:	ea92 0f0c 	teq	r2, ip
 800048c:	bf18      	it	ne
 800048e:	ea93 0f0c 	teqne	r3, ip
 8000492:	d00a      	beq.n	80004aa <__aeabi_fmul+0x11e>
 8000494:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000498:	bf18      	it	ne
 800049a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800049e:	d1d8      	bne.n	8000452 <__aeabi_fmul+0xc6>
 80004a0:	ea80 0001 	eor.w	r0, r0, r1
 80004a4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004a8:	4770      	bx	lr
 80004aa:	f090 0f00 	teq	r0, #0
 80004ae:	bf17      	itett	ne
 80004b0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004b4:	4608      	moveq	r0, r1
 80004b6:	f091 0f00 	teqne	r1, #0
 80004ba:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004be:	d014      	beq.n	80004ea <__aeabi_fmul+0x15e>
 80004c0:	ea92 0f0c 	teq	r2, ip
 80004c4:	d101      	bne.n	80004ca <__aeabi_fmul+0x13e>
 80004c6:	0242      	lsls	r2, r0, #9
 80004c8:	d10f      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004ca:	ea93 0f0c 	teq	r3, ip
 80004ce:	d103      	bne.n	80004d8 <__aeabi_fmul+0x14c>
 80004d0:	024b      	lsls	r3, r1, #9
 80004d2:	bf18      	it	ne
 80004d4:	4608      	movne	r0, r1
 80004d6:	d108      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004d8:	ea80 0001 	eor.w	r0, r0, r1
 80004dc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004e0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004e8:	4770      	bx	lr
 80004ea:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ee:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_fdiv>:
 80004f4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004fc:	bf1e      	ittt	ne
 80004fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000502:	ea92 0f0c 	teqne	r2, ip
 8000506:	ea93 0f0c 	teqne	r3, ip
 800050a:	d069      	beq.n	80005e0 <__aeabi_fdiv+0xec>
 800050c:	eba2 0203 	sub.w	r2, r2, r3
 8000510:	ea80 0c01 	eor.w	ip, r0, r1
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051a:	d037      	beq.n	800058c <__aeabi_fdiv+0x98>
 800051c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000520:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000524:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000528:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800052c:	428b      	cmp	r3, r1
 800052e:	bf38      	it	cc
 8000530:	005b      	lslcc	r3, r3, #1
 8000532:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000536:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800053a:	428b      	cmp	r3, r1
 800053c:	bf24      	itt	cs
 800053e:	1a5b      	subcs	r3, r3, r1
 8000540:	ea40 000c 	orrcs.w	r0, r0, ip
 8000544:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000548:	bf24      	itt	cs
 800054a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800054e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000552:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000556:	bf24      	itt	cs
 8000558:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800055c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000560:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000564:	bf24      	itt	cs
 8000566:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	bf18      	it	ne
 8000572:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000576:	d1e0      	bne.n	800053a <__aeabi_fdiv+0x46>
 8000578:	2afd      	cmp	r2, #253	@ 0xfd
 800057a:	f63f af50 	bhi.w	800041e <__aeabi_fmul+0x92>
 800057e:	428b      	cmp	r3, r1
 8000580:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000590:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000594:	327f      	adds	r2, #127	@ 0x7f
 8000596:	bfc2      	ittt	gt
 8000598:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800059c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a0:	4770      	bxgt	lr
 80005a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	3a01      	subs	r2, #1
 80005ac:	e737      	b.n	800041e <__aeabi_fmul+0x92>
 80005ae:	f092 0f00 	teq	r2, #0
 80005b2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005b6:	bf02      	ittt	eq
 80005b8:	0040      	lsleq	r0, r0, #1
 80005ba:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005be:	3a01      	subeq	r2, #1
 80005c0:	d0f9      	beq.n	80005b6 <__aeabi_fdiv+0xc2>
 80005c2:	ea40 000c 	orr.w	r0, r0, ip
 80005c6:	f093 0f00 	teq	r3, #0
 80005ca:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0049      	lsleq	r1, r1, #1
 80005d2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005d6:	3b01      	subeq	r3, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xda>
 80005da:	ea41 010c 	orr.w	r1, r1, ip
 80005de:	e795      	b.n	800050c <__aeabi_fdiv+0x18>
 80005e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e4:	ea92 0f0c 	teq	r2, ip
 80005e8:	d108      	bne.n	80005fc <__aeabi_fdiv+0x108>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	f47f af7d 	bne.w	80004ea <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	f47f af70 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e776      	b.n	80004ea <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	d104      	bne.n	800060c <__aeabi_fdiv+0x118>
 8000602:	024b      	lsls	r3, r1, #9
 8000604:	f43f af4c 	beq.w	80004a0 <__aeabi_fmul+0x114>
 8000608:	4608      	mov	r0, r1
 800060a:	e76e      	b.n	80004ea <__aeabi_fmul+0x15e>
 800060c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000610:	bf18      	it	ne
 8000612:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000616:	d1ca      	bne.n	80005ae <__aeabi_fdiv+0xba>
 8000618:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800061c:	f47f af5c 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 8000620:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000624:	f47f af3c 	bne.w	80004a0 <__aeabi_fmul+0x114>
 8000628:	e75f      	b.n	80004ea <__aeabi_fmul+0x15e>
 800062a:	bf00      	nop

0800062c <__gesf2>:
 800062c:	f04f 3cff 	mov.w	ip, #4294967295
 8000630:	e006      	b.n	8000640 <__cmpsf2+0x4>
 8000632:	bf00      	nop

08000634 <__lesf2>:
 8000634:	f04f 0c01 	mov.w	ip, #1
 8000638:	e002      	b.n	8000640 <__cmpsf2+0x4>
 800063a:	bf00      	nop

0800063c <__cmpsf2>:
 800063c:	f04f 0c01 	mov.w	ip, #1
 8000640:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000644:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000648:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800064c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000650:	bf18      	it	ne
 8000652:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000656:	d011      	beq.n	800067c <__cmpsf2+0x40>
 8000658:	b001      	add	sp, #4
 800065a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800065e:	bf18      	it	ne
 8000660:	ea90 0f01 	teqne	r0, r1
 8000664:	bf58      	it	pl
 8000666:	ebb2 0003 	subspl.w	r0, r2, r3
 800066a:	bf88      	it	hi
 800066c:	17c8      	asrhi	r0, r1, #31
 800066e:	bf38      	it	cc
 8000670:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000674:	bf18      	it	ne
 8000676:	f040 0001 	orrne.w	r0, r0, #1
 800067a:	4770      	bx	lr
 800067c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000680:	d102      	bne.n	8000688 <__cmpsf2+0x4c>
 8000682:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000686:	d105      	bne.n	8000694 <__cmpsf2+0x58>
 8000688:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800068c:	d1e4      	bne.n	8000658 <__cmpsf2+0x1c>
 800068e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000692:	d0e1      	beq.n	8000658 <__cmpsf2+0x1c>
 8000694:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <__aeabi_cfrcmple>:
 800069c:	4684      	mov	ip, r0
 800069e:	4608      	mov	r0, r1
 80006a0:	4661      	mov	r1, ip
 80006a2:	e7ff      	b.n	80006a4 <__aeabi_cfcmpeq>

080006a4 <__aeabi_cfcmpeq>:
 80006a4:	b50f      	push	{r0, r1, r2, r3, lr}
 80006a6:	f7ff ffc9 	bl	800063c <__cmpsf2>
 80006aa:	2800      	cmp	r0, #0
 80006ac:	bf48      	it	mi
 80006ae:	f110 0f00 	cmnmi.w	r0, #0
 80006b2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006b4 <__aeabi_fcmpeq>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff fff4 	bl	80006a4 <__aeabi_cfcmpeq>
 80006bc:	bf0c      	ite	eq
 80006be:	2001      	moveq	r0, #1
 80006c0:	2000      	movne	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmplt>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffea 	bl	80006a4 <__aeabi_cfcmpeq>
 80006d0:	bf34      	ite	cc
 80006d2:	2001      	movcc	r0, #1
 80006d4:	2000      	movcs	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmple>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffe0 	bl	80006a4 <__aeabi_cfcmpeq>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpge>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffd2 	bl	800069c <__aeabi_cfrcmple>
 80006f8:	bf94      	ite	ls
 80006fa:	2001      	movls	r0, #1
 80006fc:	2000      	movhi	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_fcmpgt>:
 8000704:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000708:	f7ff ffc8 	bl	800069c <__aeabi_cfrcmple>
 800070c:	bf34      	ite	cc
 800070e:	2001      	movcc	r0, #1
 8000710:	2000      	movcs	r0, #0
 8000712:	f85d fb08 	ldr.w	pc, [sp], #8
 8000716:	bf00      	nop

08000718 <__aeabi_f2uiz>:
 8000718:	0042      	lsls	r2, r0, #1
 800071a:	d20e      	bcs.n	800073a <__aeabi_f2uiz+0x22>
 800071c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000720:	d30b      	bcc.n	800073a <__aeabi_f2uiz+0x22>
 8000722:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000726:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800072a:	d409      	bmi.n	8000740 <__aeabi_f2uiz+0x28>
 800072c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000730:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000734:	fa23 f002 	lsr.w	r0, r3, r2
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr
 8000740:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000744:	d101      	bne.n	800074a <__aeabi_f2uiz+0x32>
 8000746:	0242      	lsls	r2, r0, #9
 8000748:	d102      	bne.n	8000750 <__aeabi_f2uiz+0x38>
 800074a:	f04f 30ff 	mov.w	r0, #4294967295
 800074e:	4770      	bx	lr
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop

08000758 <__aeabi_uldivmod>:
 8000758:	b953      	cbnz	r3, 8000770 <__aeabi_uldivmod+0x18>
 800075a:	b94a      	cbnz	r2, 8000770 <__aeabi_uldivmod+0x18>
 800075c:	2900      	cmp	r1, #0
 800075e:	bf08      	it	eq
 8000760:	2800      	cmpeq	r0, #0
 8000762:	bf1c      	itt	ne
 8000764:	f04f 31ff 	movne.w	r1, #4294967295
 8000768:	f04f 30ff 	movne.w	r0, #4294967295
 800076c:	f000 b98c 	b.w	8000a88 <__aeabi_idiv0>
 8000770:	f1ad 0c08 	sub.w	ip, sp, #8
 8000774:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000778:	f000 f806 	bl	8000788 <__udivmoddi4>
 800077c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000784:	b004      	add	sp, #16
 8000786:	4770      	bx	lr

08000788 <__udivmoddi4>:
 8000788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800078c:	9d08      	ldr	r5, [sp, #32]
 800078e:	468e      	mov	lr, r1
 8000790:	4604      	mov	r4, r0
 8000792:	4688      	mov	r8, r1
 8000794:	2b00      	cmp	r3, #0
 8000796:	d14a      	bne.n	800082e <__udivmoddi4+0xa6>
 8000798:	428a      	cmp	r2, r1
 800079a:	4617      	mov	r7, r2
 800079c:	d962      	bls.n	8000864 <__udivmoddi4+0xdc>
 800079e:	fab2 f682 	clz	r6, r2
 80007a2:	b14e      	cbz	r6, 80007b8 <__udivmoddi4+0x30>
 80007a4:	f1c6 0320 	rsb	r3, r6, #32
 80007a8:	fa01 f806 	lsl.w	r8, r1, r6
 80007ac:	fa20 f303 	lsr.w	r3, r0, r3
 80007b0:	40b7      	lsls	r7, r6
 80007b2:	ea43 0808 	orr.w	r8, r3, r8
 80007b6:	40b4      	lsls	r4, r6
 80007b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007bc:	fbb8 f1fe 	udiv	r1, r8, lr
 80007c0:	fa1f fc87 	uxth.w	ip, r7
 80007c4:	fb0e 8811 	mls	r8, lr, r1, r8
 80007c8:	fb01 f20c 	mul.w	r2, r1, ip
 80007cc:	0c23      	lsrs	r3, r4, #16
 80007ce:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80007d2:	429a      	cmp	r2, r3
 80007d4:	d909      	bls.n	80007ea <__udivmoddi4+0x62>
 80007d6:	18fb      	adds	r3, r7, r3
 80007d8:	f101 30ff 	add.w	r0, r1, #4294967295
 80007dc:	f080 80eb 	bcs.w	80009b6 <__udivmoddi4+0x22e>
 80007e0:	429a      	cmp	r2, r3
 80007e2:	f240 80e8 	bls.w	80009b6 <__udivmoddi4+0x22e>
 80007e6:	3902      	subs	r1, #2
 80007e8:	443b      	add	r3, r7
 80007ea:	1a9a      	subs	r2, r3, r2
 80007ec:	fbb2 f0fe 	udiv	r0, r2, lr
 80007f0:	fb0e 2210 	mls	r2, lr, r0, r2
 80007f4:	fb00 fc0c 	mul.w	ip, r0, ip
 80007f8:	b2a3      	uxth	r3, r4
 80007fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80007fe:	459c      	cmp	ip, r3
 8000800:	d909      	bls.n	8000816 <__udivmoddi4+0x8e>
 8000802:	18fb      	adds	r3, r7, r3
 8000804:	f100 32ff 	add.w	r2, r0, #4294967295
 8000808:	f080 80d7 	bcs.w	80009ba <__udivmoddi4+0x232>
 800080c:	459c      	cmp	ip, r3
 800080e:	f240 80d4 	bls.w	80009ba <__udivmoddi4+0x232>
 8000812:	443b      	add	r3, r7
 8000814:	3802      	subs	r0, #2
 8000816:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800081a:	2100      	movs	r1, #0
 800081c:	eba3 030c 	sub.w	r3, r3, ip
 8000820:	b11d      	cbz	r5, 800082a <__udivmoddi4+0xa2>
 8000822:	2200      	movs	r2, #0
 8000824:	40f3      	lsrs	r3, r6
 8000826:	e9c5 3200 	strd	r3, r2, [r5]
 800082a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800082e:	428b      	cmp	r3, r1
 8000830:	d905      	bls.n	800083e <__udivmoddi4+0xb6>
 8000832:	b10d      	cbz	r5, 8000838 <__udivmoddi4+0xb0>
 8000834:	e9c5 0100 	strd	r0, r1, [r5]
 8000838:	2100      	movs	r1, #0
 800083a:	4608      	mov	r0, r1
 800083c:	e7f5      	b.n	800082a <__udivmoddi4+0xa2>
 800083e:	fab3 f183 	clz	r1, r3
 8000842:	2900      	cmp	r1, #0
 8000844:	d146      	bne.n	80008d4 <__udivmoddi4+0x14c>
 8000846:	4573      	cmp	r3, lr
 8000848:	d302      	bcc.n	8000850 <__udivmoddi4+0xc8>
 800084a:	4282      	cmp	r2, r0
 800084c:	f200 8108 	bhi.w	8000a60 <__udivmoddi4+0x2d8>
 8000850:	1a84      	subs	r4, r0, r2
 8000852:	eb6e 0203 	sbc.w	r2, lr, r3
 8000856:	2001      	movs	r0, #1
 8000858:	4690      	mov	r8, r2
 800085a:	2d00      	cmp	r5, #0
 800085c:	d0e5      	beq.n	800082a <__udivmoddi4+0xa2>
 800085e:	e9c5 4800 	strd	r4, r8, [r5]
 8000862:	e7e2      	b.n	800082a <__udivmoddi4+0xa2>
 8000864:	2a00      	cmp	r2, #0
 8000866:	f000 8091 	beq.w	800098c <__udivmoddi4+0x204>
 800086a:	fab2 f682 	clz	r6, r2
 800086e:	2e00      	cmp	r6, #0
 8000870:	f040 80a5 	bne.w	80009be <__udivmoddi4+0x236>
 8000874:	1a8a      	subs	r2, r1, r2
 8000876:	2101      	movs	r1, #1
 8000878:	0c03      	lsrs	r3, r0, #16
 800087a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800087e:	b280      	uxth	r0, r0
 8000880:	b2bc      	uxth	r4, r7
 8000882:	fbb2 fcfe 	udiv	ip, r2, lr
 8000886:	fb0e 221c 	mls	r2, lr, ip, r2
 800088a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800088e:	fb04 f20c 	mul.w	r2, r4, ip
 8000892:	429a      	cmp	r2, r3
 8000894:	d907      	bls.n	80008a6 <__udivmoddi4+0x11e>
 8000896:	18fb      	adds	r3, r7, r3
 8000898:	f10c 38ff 	add.w	r8, ip, #4294967295
 800089c:	d202      	bcs.n	80008a4 <__udivmoddi4+0x11c>
 800089e:	429a      	cmp	r2, r3
 80008a0:	f200 80e3 	bhi.w	8000a6a <__udivmoddi4+0x2e2>
 80008a4:	46c4      	mov	ip, r8
 80008a6:	1a9b      	subs	r3, r3, r2
 80008a8:	fbb3 f2fe 	udiv	r2, r3, lr
 80008ac:	fb0e 3312 	mls	r3, lr, r2, r3
 80008b0:	fb02 f404 	mul.w	r4, r2, r4
 80008b4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80008b8:	429c      	cmp	r4, r3
 80008ba:	d907      	bls.n	80008cc <__udivmoddi4+0x144>
 80008bc:	18fb      	adds	r3, r7, r3
 80008be:	f102 30ff 	add.w	r0, r2, #4294967295
 80008c2:	d202      	bcs.n	80008ca <__udivmoddi4+0x142>
 80008c4:	429c      	cmp	r4, r3
 80008c6:	f200 80cd 	bhi.w	8000a64 <__udivmoddi4+0x2dc>
 80008ca:	4602      	mov	r2, r0
 80008cc:	1b1b      	subs	r3, r3, r4
 80008ce:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80008d2:	e7a5      	b.n	8000820 <__udivmoddi4+0x98>
 80008d4:	f1c1 0620 	rsb	r6, r1, #32
 80008d8:	408b      	lsls	r3, r1
 80008da:	fa22 f706 	lsr.w	r7, r2, r6
 80008de:	431f      	orrs	r7, r3
 80008e0:	fa2e fa06 	lsr.w	sl, lr, r6
 80008e4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80008e8:	fbba f8f9 	udiv	r8, sl, r9
 80008ec:	fa0e fe01 	lsl.w	lr, lr, r1
 80008f0:	fa20 f306 	lsr.w	r3, r0, r6
 80008f4:	fb09 aa18 	mls	sl, r9, r8, sl
 80008f8:	fa1f fc87 	uxth.w	ip, r7
 80008fc:	ea43 030e 	orr.w	r3, r3, lr
 8000900:	fa00 fe01 	lsl.w	lr, r0, r1
 8000904:	fb08 f00c 	mul.w	r0, r8, ip
 8000908:	0c1c      	lsrs	r4, r3, #16
 800090a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800090e:	42a0      	cmp	r0, r4
 8000910:	fa02 f201 	lsl.w	r2, r2, r1
 8000914:	d90a      	bls.n	800092c <__udivmoddi4+0x1a4>
 8000916:	193c      	adds	r4, r7, r4
 8000918:	f108 3aff 	add.w	sl, r8, #4294967295
 800091c:	f080 809e 	bcs.w	8000a5c <__udivmoddi4+0x2d4>
 8000920:	42a0      	cmp	r0, r4
 8000922:	f240 809b 	bls.w	8000a5c <__udivmoddi4+0x2d4>
 8000926:	f1a8 0802 	sub.w	r8, r8, #2
 800092a:	443c      	add	r4, r7
 800092c:	1a24      	subs	r4, r4, r0
 800092e:	b298      	uxth	r0, r3
 8000930:	fbb4 f3f9 	udiv	r3, r4, r9
 8000934:	fb09 4413 	mls	r4, r9, r3, r4
 8000938:	fb03 fc0c 	mul.w	ip, r3, ip
 800093c:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000940:	45a4      	cmp	ip, r4
 8000942:	d909      	bls.n	8000958 <__udivmoddi4+0x1d0>
 8000944:	193c      	adds	r4, r7, r4
 8000946:	f103 30ff 	add.w	r0, r3, #4294967295
 800094a:	f080 8085 	bcs.w	8000a58 <__udivmoddi4+0x2d0>
 800094e:	45a4      	cmp	ip, r4
 8000950:	f240 8082 	bls.w	8000a58 <__udivmoddi4+0x2d0>
 8000954:	3b02      	subs	r3, #2
 8000956:	443c      	add	r4, r7
 8000958:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800095c:	eba4 040c 	sub.w	r4, r4, ip
 8000960:	fba0 8c02 	umull	r8, ip, r0, r2
 8000964:	4564      	cmp	r4, ip
 8000966:	4643      	mov	r3, r8
 8000968:	46e1      	mov	r9, ip
 800096a:	d364      	bcc.n	8000a36 <__udivmoddi4+0x2ae>
 800096c:	d061      	beq.n	8000a32 <__udivmoddi4+0x2aa>
 800096e:	b15d      	cbz	r5, 8000988 <__udivmoddi4+0x200>
 8000970:	ebbe 0203 	subs.w	r2, lr, r3
 8000974:	eb64 0409 	sbc.w	r4, r4, r9
 8000978:	fa04 f606 	lsl.w	r6, r4, r6
 800097c:	fa22 f301 	lsr.w	r3, r2, r1
 8000980:	431e      	orrs	r6, r3
 8000982:	40cc      	lsrs	r4, r1
 8000984:	e9c5 6400 	strd	r6, r4, [r5]
 8000988:	2100      	movs	r1, #0
 800098a:	e74e      	b.n	800082a <__udivmoddi4+0xa2>
 800098c:	fbb1 fcf2 	udiv	ip, r1, r2
 8000990:	0c01      	lsrs	r1, r0, #16
 8000992:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000996:	b280      	uxth	r0, r0
 8000998:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800099c:	463b      	mov	r3, r7
 800099e:	fbb1 f1f7 	udiv	r1, r1, r7
 80009a2:	4638      	mov	r0, r7
 80009a4:	463c      	mov	r4, r7
 80009a6:	46b8      	mov	r8, r7
 80009a8:	46be      	mov	lr, r7
 80009aa:	2620      	movs	r6, #32
 80009ac:	eba2 0208 	sub.w	r2, r2, r8
 80009b0:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80009b4:	e765      	b.n	8000882 <__udivmoddi4+0xfa>
 80009b6:	4601      	mov	r1, r0
 80009b8:	e717      	b.n	80007ea <__udivmoddi4+0x62>
 80009ba:	4610      	mov	r0, r2
 80009bc:	e72b      	b.n	8000816 <__udivmoddi4+0x8e>
 80009be:	f1c6 0120 	rsb	r1, r6, #32
 80009c2:	fa2e fc01 	lsr.w	ip, lr, r1
 80009c6:	40b7      	lsls	r7, r6
 80009c8:	fa0e fe06 	lsl.w	lr, lr, r6
 80009cc:	fa20 f101 	lsr.w	r1, r0, r1
 80009d0:	ea41 010e 	orr.w	r1, r1, lr
 80009d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009d8:	fbbc f8fe 	udiv	r8, ip, lr
 80009dc:	b2bc      	uxth	r4, r7
 80009de:	fb0e cc18 	mls	ip, lr, r8, ip
 80009e2:	fb08 f904 	mul.w	r9, r8, r4
 80009e6:	0c0a      	lsrs	r2, r1, #16
 80009e8:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80009ec:	40b0      	lsls	r0, r6
 80009ee:	4591      	cmp	r9, r2
 80009f0:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80009f4:	b280      	uxth	r0, r0
 80009f6:	d93e      	bls.n	8000a76 <__udivmoddi4+0x2ee>
 80009f8:	18ba      	adds	r2, r7, r2
 80009fa:	f108 3cff 	add.w	ip, r8, #4294967295
 80009fe:	d201      	bcs.n	8000a04 <__udivmoddi4+0x27c>
 8000a00:	4591      	cmp	r9, r2
 8000a02:	d81f      	bhi.n	8000a44 <__udivmoddi4+0x2bc>
 8000a04:	eba2 0209 	sub.w	r2, r2, r9
 8000a08:	fbb2 f9fe 	udiv	r9, r2, lr
 8000a0c:	fb09 f804 	mul.w	r8, r9, r4
 8000a10:	fb0e 2a19 	mls	sl, lr, r9, r2
 8000a14:	b28a      	uxth	r2, r1
 8000a16:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 8000a1a:	4542      	cmp	r2, r8
 8000a1c:	d229      	bcs.n	8000a72 <__udivmoddi4+0x2ea>
 8000a1e:	18ba      	adds	r2, r7, r2
 8000a20:	f109 31ff 	add.w	r1, r9, #4294967295
 8000a24:	d2c2      	bcs.n	80009ac <__udivmoddi4+0x224>
 8000a26:	4542      	cmp	r2, r8
 8000a28:	d2c0      	bcs.n	80009ac <__udivmoddi4+0x224>
 8000a2a:	f1a9 0102 	sub.w	r1, r9, #2
 8000a2e:	443a      	add	r2, r7
 8000a30:	e7bc      	b.n	80009ac <__udivmoddi4+0x224>
 8000a32:	45c6      	cmp	lr, r8
 8000a34:	d29b      	bcs.n	800096e <__udivmoddi4+0x1e6>
 8000a36:	ebb8 0302 	subs.w	r3, r8, r2
 8000a3a:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000a3e:	3801      	subs	r0, #1
 8000a40:	46e1      	mov	r9, ip
 8000a42:	e794      	b.n	800096e <__udivmoddi4+0x1e6>
 8000a44:	eba7 0909 	sub.w	r9, r7, r9
 8000a48:	444a      	add	r2, r9
 8000a4a:	fbb2 f9fe 	udiv	r9, r2, lr
 8000a4e:	f1a8 0c02 	sub.w	ip, r8, #2
 8000a52:	fb09 f804 	mul.w	r8, r9, r4
 8000a56:	e7db      	b.n	8000a10 <__udivmoddi4+0x288>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	e77d      	b.n	8000958 <__udivmoddi4+0x1d0>
 8000a5c:	46d0      	mov	r8, sl
 8000a5e:	e765      	b.n	800092c <__udivmoddi4+0x1a4>
 8000a60:	4608      	mov	r0, r1
 8000a62:	e6fa      	b.n	800085a <__udivmoddi4+0xd2>
 8000a64:	443b      	add	r3, r7
 8000a66:	3a02      	subs	r2, #2
 8000a68:	e730      	b.n	80008cc <__udivmoddi4+0x144>
 8000a6a:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a6e:	443b      	add	r3, r7
 8000a70:	e719      	b.n	80008a6 <__udivmoddi4+0x11e>
 8000a72:	4649      	mov	r1, r9
 8000a74:	e79a      	b.n	80009ac <__udivmoddi4+0x224>
 8000a76:	eba2 0209 	sub.w	r2, r2, r9
 8000a7a:	fbb2 f9fe 	udiv	r9, r2, lr
 8000a7e:	46c4      	mov	ip, r8
 8000a80:	fb09 f804 	mul.w	r8, r9, r4
 8000a84:	e7c4      	b.n	8000a10 <__udivmoddi4+0x288>
 8000a86:	bf00      	nop

08000a88 <__aeabi_idiv0>:
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <readChannelVoltage>:

static char dataPacketTx[16];

/* --- helper: sample one channel --- */
static float readChannelVoltage(ADC_HandleTypeDef *hadc, uint32_t channel)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b088      	sub	sp, #32
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	6039      	str	r1, [r7, #0]
    ADC_ChannelConfTypeDef sConfig = {0};
 8000a96:	f107 030c 	add.w	r3, r7, #12
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
    sConfig.Channel = channel;
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	60fb      	str	r3, [r7, #12]
    sConfig.Rank = 1;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000aaa:	2306      	movs	r3, #6
 8000aac:	617b      	str	r3, [r7, #20]

    if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8000aae:	f107 030c 	add.w	r3, r7, #12
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f003 f9f9 	bl	8003eac <HAL_ADC_ConfigChannel>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d002      	beq.n	8000ac6 <readChannelVoltage+0x3a>
        return 0.0f;
 8000ac0:	f04f 0300 	mov.w	r3, #0
 8000ac4:	e029      	b.n	8000b1a <readChannelVoltage+0x8e>
    if (HAL_ADC_Start(hadc) != HAL_OK)
 8000ac6:	6878      	ldr	r0, [r7, #4]
 8000ac8:	f003 f804 	bl	8003ad4 <HAL_ADC_Start>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d002      	beq.n	8000ad8 <readChannelVoltage+0x4c>
        return 0.0f;
 8000ad2:	f04f 0300 	mov.w	r3, #0
 8000ad6:	e020      	b.n	8000b1a <readChannelVoltage+0x8e>

    float v = 0.0f;
 8000ad8:	f04f 0300 	mov.w	r3, #0
 8000adc:	61fb      	str	r3, [r7, #28]
    if (HAL_ADC_PollForConversion(hadc, 10) == HAL_OK)
 8000ade:	210a      	movs	r1, #10
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f003 f8d1 	bl	8003c88 <HAL_ADC_PollForConversion>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d112      	bne.n	8000b12 <readChannelVoltage+0x86>
    {
        uint32_t raw = HAL_ADC_GetValue(hadc);
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f003 f9d1 	bl	8003e94 <HAL_ADC_GetValue>
 8000af2:	61b8      	str	r0, [r7, #24]
        v = (raw * 3.3f) / 4095.0f;
 8000af4:	69b8      	ldr	r0, [r7, #24]
 8000af6:	f7ff fbf1 	bl	80002dc <__aeabi_ui2f>
 8000afa:	4603      	mov	r3, r0
 8000afc:	4909      	ldr	r1, [pc, #36]	@ (8000b24 <readChannelVoltage+0x98>)
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff fc44 	bl	800038c <__aeabi_fmul>
 8000b04:	4603      	mov	r3, r0
 8000b06:	4908      	ldr	r1, [pc, #32]	@ (8000b28 <readChannelVoltage+0x9c>)
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff fcf3 	bl	80004f4 <__aeabi_fdiv>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	61fb      	str	r3, [r7, #28]
    }
    HAL_ADC_Stop(hadc);
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f003 f88c 	bl	8003c30 <HAL_ADC_Stop>
    return v;
 8000b18:	69fb      	ldr	r3, [r7, #28]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3720      	adds	r7, #32
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40533333 	.word	0x40533333
 8000b28:	457ff000 	.word	0x457ff000

08000b2c <ADC_Init>:

/* --- Public API --- */
void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
    if (HAL_ADCEx_Calibration_Start(hadc) != HAL_OK)
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f003 fb4d 	bl	80041d4 <HAL_ADCEx_Calibration_Start>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <ADC_Init+0x18>
    {
        Error_Handler();
 8000b40:	f000 ff5a 	bl	80019f8 <Error_Handler>
    }
}
 8000b44:	bf00      	nop
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <ADC_ReadAllChannels>:

void ADC_ReadAllChannels(ADC_HandleTypeDef* hadc, ADC_Data* data)
{
 8000b4c:	b5b0      	push	{r4, r5, r7, lr}
 8000b4e:	b0a6      	sub	sp, #152	@ 0x98
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6039      	str	r1, [r7, #0]
    bool changed = false;
 8000b56:	2300      	movs	r3, #0
 8000b58:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97

    for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++)
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8000b62:	e147      	b.n	8000df4 <ADC_ReadAllChannels+0x2a8>
    {
        float v = readChannelVoltage(hadc, adcChannels[i]);
 8000b64:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000b68:	4aba      	ldr	r2, [pc, #744]	@ (8000e54 <ADC_ReadAllChannels+0x308>)
 8000b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b6e:	4619      	mov	r1, r3
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f7ff ff8b 	bl	8000a8c <readChannelVoltage>
 8000b76:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90

        if (s_filtered[i] == 0.0f)
 8000b7a:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000b7e:	4ab6      	ldr	r2, [pc, #728]	@ (8000e58 <ADC_ReadAllChannels+0x30c>)
 8000b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b84:	f04f 0100 	mov.w	r1, #0
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff fd93 	bl	80006b4 <__aeabi_fcmpeq>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d007      	beq.n	8000ba4 <ADC_ReadAllChannels+0x58>
            s_filtered[i] = v;
 8000b94:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000b98:	49af      	ldr	r1, [pc, #700]	@ (8000e58 <ADC_ReadAllChannels+0x30c>)
 8000b9a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000ba2:	e01b      	b.n	8000bdc <ADC_ReadAllChannels+0x90>
        else
            s_filtered[i] = EMA_ALPHA * v + (1 - EMA_ALPHA) * s_filtered[i];
 8000ba4:	49ad      	ldr	r1, [pc, #692]	@ (8000e5c <ADC_ReadAllChannels+0x310>)
 8000ba6:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8000baa:	f7ff fbef 	bl	800038c <__aeabi_fmul>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	461d      	mov	r5, r3
 8000bb2:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000bb6:	4aa8      	ldr	r2, [pc, #672]	@ (8000e58 <ADC_ReadAllChannels+0x30c>)
 8000bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bbc:	49a8      	ldr	r1, [pc, #672]	@ (8000e60 <ADC_ReadAllChannels+0x314>)
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff fbe4 	bl	800038c <__aeabi_fmul>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	f897 4096 	ldrb.w	r4, [r7, #150]	@ 0x96
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4628      	mov	r0, r5
 8000bce:	f7ff fad5 	bl	800017c <__addsf3>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4ba0      	ldr	r3, [pc, #640]	@ (8000e58 <ADC_ReadAllChannels+0x30c>)
 8000bd8:	f843 2024 	str.w	r2, [r3, r4, lsl #2]

        v = s_filtered[i];
 8000bdc:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000be0:	4a9d      	ldr	r2, [pc, #628]	@ (8000e58 <ADC_ReadAllChannels+0x30c>)
 8000be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000be6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

        if (v < GROUND_THRESHOLD)
 8000bea:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8000bee:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8000bf2:	f7ff fd69 	bl	80006c8 <__aeabi_fcmplt>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d003      	beq.n	8000c04 <ADC_ReadAllChannels+0xb8>
            v = 0.0f;
 8000bfc:	f04f 0300 	mov.w	r3, #0
 8000c00:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

        data->voltages[i] = v;
 8000c04:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000c08:	683a      	ldr	r2, [r7, #0]
 8000c0a:	3302      	adds	r3, #2
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	4413      	add	r3, r2
 8000c10:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000c14:	605a      	str	r2, [r3, #4]
        data->rawValues[i] = (uint16_t)((v * 4095.0f) / 3.3f);
 8000c16:	4993      	ldr	r1, [pc, #588]	@ (8000e64 <ADC_ReadAllChannels+0x318>)
 8000c18:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8000c1c:	f7ff fbb6 	bl	800038c <__aeabi_fmul>
 8000c20:	4603      	mov	r3, r0
 8000c22:	4991      	ldr	r1, [pc, #580]	@ (8000e68 <ADC_ReadAllChannels+0x31c>)
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff fc65 	bl	80004f4 <__aeabi_fdiv>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	f897 4096 	ldrb.w	r4, [r7, #150]	@ 0x96
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fd71 	bl	8000718 <__aeabi_f2uiz>
 8000c36:	4603      	mov	r3, r0
 8000c38:	b29a      	uxth	r2, r3
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
        data->maxReached[i] = (v >= 3.2f);
 8000c40:	2301      	movs	r3, #1
 8000c42:	461c      	mov	r4, r3
 8000c44:	4989      	ldr	r1, [pc, #548]	@ (8000e6c <ADC_ReadAllChannels+0x320>)
 8000c46:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8000c4a:	f7ff fd51 	bl	80006f0 <__aeabi_fcmpge>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d101      	bne.n	8000c58 <ADC_ReadAllChannels+0x10c>
 8000c54:	2300      	movs	r3, #0
 8000c56:	461c      	mov	r4, r3
 8000c58:	b2e2      	uxtb	r2, r4
 8000c5a:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000c5e:	4611      	mov	r1, r2
 8000c60:	683a      	ldr	r2, [r7, #0]
 8000c62:	4413      	add	r3, r2
 8000c64:	460a      	mov	r2, r1
 8000c66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

        // ✅ NEW: export to debugger live
        g_adcVoltages[i] = v;
 8000c6a:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000c6e:	4980      	ldr	r1, [pc, #512]	@ (8000e70 <ADC_ReadAllChannels+0x324>)
 8000c70:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000c74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        if (fabsf(v - s_prev_volt[i]) > PRINT_DELTA) {
 8000c78:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000c7c:	4a7d      	ldr	r2, [pc, #500]	@ (8000e74 <ADC_ReadAllChannels+0x328>)
 8000c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c82:	4619      	mov	r1, r3
 8000c84:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8000c88:	f7ff fa76 	bl	8000178 <__aeabi_fsub>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000c92:	4979      	ldr	r1, [pc, #484]	@ (8000e78 <ADC_ReadAllChannels+0x32c>)
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff fd35 	bl	8000704 <__aeabi_fcmpgt>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d009      	beq.n	8000cb4 <ADC_ReadAllChannels+0x168>
            changed = true;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
            s_prev_volt[i] = v;
 8000ca6:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000caa:	4972      	ldr	r1, [pc, #456]	@ (8000e74 <ADC_ReadAllChannels+0x328>)
 8000cac:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000cb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }

        /* --- threshold and debounce logic --- */
        if (!s_level_flags[i] && v >= THR)
 8000cb4:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000cb8:	4a70      	ldr	r2, [pc, #448]	@ (8000e7c <ADC_ReadAllChannels+0x330>)
 8000cba:	5cd3      	ldrb	r3, [r2, r3]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d152      	bne.n	8000d66 <ADC_ReadAllChannels+0x21a>
 8000cc0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000cc4:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8000cc8:	f7ff fd12 	bl	80006f0 <__aeabi_fcmpge>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d049      	beq.n	8000d66 <ADC_ReadAllChannels+0x21a>
        {
            s_level_flags[i] = 1;
 8000cd2:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000cd6:	4a69      	ldr	r2, [pc, #420]	@ (8000e7c <ADC_ReadAllChannels+0x330>)
 8000cd8:	2101      	movs	r1, #1
 8000cda:	54d1      	strb	r1, [r2, r3]
            switch (i)
 8000cdc:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000ce0:	2b04      	cmp	r3, #4
 8000ce2:	d82b      	bhi.n	8000d3c <ADC_ReadAllChannels+0x1f0>
 8000ce4:	a201      	add	r2, pc, #4	@ (adr r2, 8000cec <ADC_ReadAllChannels+0x1a0>)
 8000ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cea:	bf00      	nop
 8000cec:	08000d01 	.word	0x08000d01
 8000cf0:	08000d0d 	.word	0x08000d0d
 8000cf4:	08000d19 	.word	0x08000d19
 8000cf8:	08000d25 	.word	0x08000d25
 8000cfc:	08000d31 	.word	0x08000d31
            {
                case 0: snprintf(dataPacketTx, sizeof(dataPacketTx), "@10W#"); break;
 8000d00:	4a5f      	ldr	r2, [pc, #380]	@ (8000e80 <ADC_ReadAllChannels+0x334>)
 8000d02:	2110      	movs	r1, #16
 8000d04:	485f      	ldr	r0, [pc, #380]	@ (8000e84 <ADC_ReadAllChannels+0x338>)
 8000d06:	f006 f9a1 	bl	800704c <sniprintf>
 8000d0a:	e01b      	b.n	8000d44 <ADC_ReadAllChannels+0x1f8>
                case 1: snprintf(dataPacketTx, sizeof(dataPacketTx), "@30W#"); break;
 8000d0c:	4a5e      	ldr	r2, [pc, #376]	@ (8000e88 <ADC_ReadAllChannels+0x33c>)
 8000d0e:	2110      	movs	r1, #16
 8000d10:	485c      	ldr	r0, [pc, #368]	@ (8000e84 <ADC_ReadAllChannels+0x338>)
 8000d12:	f006 f99b 	bl	800704c <sniprintf>
 8000d16:	e015      	b.n	8000d44 <ADC_ReadAllChannels+0x1f8>
                case 2: snprintf(dataPacketTx, sizeof(dataPacketTx), "@70W#"); break;
 8000d18:	4a5c      	ldr	r2, [pc, #368]	@ (8000e8c <ADC_ReadAllChannels+0x340>)
 8000d1a:	2110      	movs	r1, #16
 8000d1c:	4859      	ldr	r0, [pc, #356]	@ (8000e84 <ADC_ReadAllChannels+0x338>)
 8000d1e:	f006 f995 	bl	800704c <sniprintf>
 8000d22:	e00f      	b.n	8000d44 <ADC_ReadAllChannels+0x1f8>
                case 3: snprintf(dataPacketTx, sizeof(dataPacketTx), "@1:W#"); break;
 8000d24:	4a5a      	ldr	r2, [pc, #360]	@ (8000e90 <ADC_ReadAllChannels+0x344>)
 8000d26:	2110      	movs	r1, #16
 8000d28:	4856      	ldr	r0, [pc, #344]	@ (8000e84 <ADC_ReadAllChannels+0x338>)
 8000d2a:	f006 f98f 	bl	800704c <sniprintf>
 8000d2e:	e009      	b.n	8000d44 <ADC_ReadAllChannels+0x1f8>
                case 4: snprintf(dataPacketTx, sizeof(dataPacketTx), "@DRY#"); break;
 8000d30:	4a58      	ldr	r2, [pc, #352]	@ (8000e94 <ADC_ReadAllChannels+0x348>)
 8000d32:	2110      	movs	r1, #16
 8000d34:	4853      	ldr	r0, [pc, #332]	@ (8000e84 <ADC_ReadAllChannels+0x338>)
 8000d36:	f006 f989 	bl	800704c <sniprintf>
 8000d3a:	e003      	b.n	8000d44 <ADC_ReadAllChannels+0x1f8>
                default: dataPacketTx[0] = '\0'; break;
 8000d3c:	4b51      	ldr	r3, [pc, #324]	@ (8000e84 <ADC_ReadAllChannels+0x338>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	701a      	strb	r2, [r3, #0]
 8000d42:	bf00      	nop
            }
            if (dataPacketTx[0])
 8000d44:	4b4f      	ldr	r3, [pc, #316]	@ (8000e84 <ADC_ReadAllChannels+0x338>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d003      	beq.n	8000d54 <ADC_ReadAllChannels+0x208>
                UART_TransmitString(&huart1, dataPacketTx);
 8000d4c:	494d      	ldr	r1, [pc, #308]	@ (8000e84 <ADC_ReadAllChannels+0x338>)
 8000d4e:	4852      	ldr	r0, [pc, #328]	@ (8000e98 <ADC_ReadAllChannels+0x34c>)
 8000d50:	f002 fce6 	bl	8003720 <UART_TransmitString>

            motorStatus = 1;
 8000d54:	4b51      	ldr	r3, [pc, #324]	@ (8000e9c <ADC_ReadAllChannels+0x350>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	701a      	strb	r2, [r3, #0]
            s_low_counts[i] = 0;
 8000d5a:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000d5e:	4a50      	ldr	r2, [pc, #320]	@ (8000ea0 <ADC_ReadAllChannels+0x354>)
 8000d60:	2100      	movs	r1, #0
 8000d62:	54d1      	strb	r1, [r2, r3]
 8000d64:	e012      	b.n	8000d8c <ADC_ReadAllChannels+0x240>
        }
        else if (s_level_flags[i] && v < (THR - HYST_DELTA))
 8000d66:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000d6a:	4a44      	ldr	r2, [pc, #272]	@ (8000e7c <ADC_ReadAllChannels+0x330>)
 8000d6c:	5cd3      	ldrb	r3, [r2, r3]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d00c      	beq.n	8000d8c <ADC_ReadAllChannels+0x240>
 8000d72:	494c      	ldr	r1, [pc, #304]	@ (8000ea4 <ADC_ReadAllChannels+0x358>)
 8000d74:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8000d78:	f7ff fca6 	bl	80006c8 <__aeabi_fcmplt>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d004      	beq.n	8000d8c <ADC_ReadAllChannels+0x240>
        {
            s_level_flags[i] = 0;
 8000d82:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000d86:	4a3d      	ldr	r2, [pc, #244]	@ (8000e7c <ADC_ReadAllChannels+0x330>)
 8000d88:	2100      	movs	r1, #0
 8000d8a:	54d1      	strb	r1, [r2, r3]
        }

        if (v < DRY_VOLTAGE_THRESHOLD)
 8000d8c:	493a      	ldr	r1, [pc, #232]	@ (8000e78 <ADC_ReadAllChannels+0x32c>)
 8000d8e:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8000d92:	f7ff fc99 	bl	80006c8 <__aeabi_fcmplt>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d00e      	beq.n	8000dba <ADC_ReadAllChannels+0x26e>
        {
            if (s_low_counts[i] < 0xFF) s_low_counts[i]++;
 8000d9c:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000da0:	4a3f      	ldr	r2, [pc, #252]	@ (8000ea0 <ADC_ReadAllChannels+0x354>)
 8000da2:	5cd3      	ldrb	r3, [r2, r3]
 8000da4:	2bff      	cmp	r3, #255	@ 0xff
 8000da6:	d00d      	beq.n	8000dc4 <ADC_ReadAllChannels+0x278>
 8000da8:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000dac:	4a3c      	ldr	r2, [pc, #240]	@ (8000ea0 <ADC_ReadAllChannels+0x354>)
 8000dae:	5cd2      	ldrb	r2, [r2, r3]
 8000db0:	3201      	adds	r2, #1
 8000db2:	b2d1      	uxtb	r1, r2
 8000db4:	4a3a      	ldr	r2, [pc, #232]	@ (8000ea0 <ADC_ReadAllChannels+0x354>)
 8000db6:	54d1      	strb	r1, [r2, r3]
 8000db8:	e004      	b.n	8000dc4 <ADC_ReadAllChannels+0x278>
        }
        else
        {
            s_low_counts[i] = 0;
 8000dba:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000dbe:	4a38      	ldr	r2, [pc, #224]	@ (8000ea0 <ADC_ReadAllChannels+0x354>)
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	54d1      	strb	r1, [r2, r3]
        }

        if (motorStatus == 1 && s_low_counts[i] >= DRY_COUNT_THRESHOLD)
 8000dc4:	4b35      	ldr	r3, [pc, #212]	@ (8000e9c <ADC_ReadAllChannels+0x350>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d10d      	bne.n	8000dea <ADC_ReadAllChannels+0x29e>
 8000dce:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000dd2:	4a33      	ldr	r2, [pc, #204]	@ (8000ea0 <ADC_ReadAllChannels+0x354>)
 8000dd4:	5cd3      	ldrb	r3, [r2, r3]
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d907      	bls.n	8000dea <ADC_ReadAllChannels+0x29e>
        {
            motorStatus = 0;
 8000dda:	4b30      	ldr	r3, [pc, #192]	@ (8000e9c <ADC_ReadAllChannels+0x350>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	701a      	strb	r2, [r3, #0]
            memset(s_low_counts, 0, sizeof(s_low_counts));
 8000de0:	2206      	movs	r2, #6
 8000de2:	2100      	movs	r1, #0
 8000de4:	482e      	ldr	r0, [pc, #184]	@ (8000ea0 <ADC_ReadAllChannels+0x354>)
 8000de6:	f006 f989 	bl	80070fc <memset>
    for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++)
 8000dea:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000dee:	3301      	adds	r3, #1
 8000df0:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8000df4:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000df8:	2b05      	cmp	r3, #5
 8000dfa:	f67f aeb3 	bls.w	8000b64 <ADC_ReadAllChannels+0x18>
        }
    }

    /* print only if changed */
    if (changed)
 8000dfe:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d022      	beq.n	8000e4c <ADC_ReadAllChannels+0x300>
    {
        char dbg[128];
        int pos = snprintf(dbg, sizeof(dbg), "[ADC] ");
 8000e06:	f107 0308 	add.w	r3, r7, #8
 8000e0a:	4a27      	ldr	r2, [pc, #156]	@ (8000ea8 <ADC_ReadAllChannels+0x35c>)
 8000e0c:	2180      	movs	r1, #128	@ 0x80
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f006 f91c 	bl	800704c <sniprintf>
 8000e14:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
        for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++)
 8000e18:	2300      	movs	r3, #0
 8000e1a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8000e1e:	e004      	b.n	8000e2a <ADC_ReadAllChannels+0x2de>
 8000e20:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8000e24:	3301      	adds	r3, #1
 8000e26:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8000e2a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8000e2e:	2b05      	cmp	r3, #5
 8000e30:	d9f6      	bls.n	8000e20 <ADC_ReadAllChannels+0x2d4>
//                            i,
//                            data->rawValues[i],
//                            data->voltages[i],
//                            data->maxReached[i] ? "!" : "");
        }
        dbg[sizeof(dbg)-1] = '\0';
 8000e32:	2300      	movs	r3, #0
 8000e34:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        UART_TransmitString(&huart1, dbg);
 8000e38:	f107 0308 	add.w	r3, r7, #8
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4816      	ldr	r0, [pc, #88]	@ (8000e98 <ADC_ReadAllChannels+0x34c>)
 8000e40:	f002 fc6e 	bl	8003720 <UART_TransmitString>
        UART_TransmitString(&huart1, "\r\n");
 8000e44:	4919      	ldr	r1, [pc, #100]	@ (8000eac <ADC_ReadAllChannels+0x360>)
 8000e46:	4814      	ldr	r0, [pc, #80]	@ (8000e98 <ADC_ReadAllChannels+0x34c>)
 8000e48:	f002 fc6a 	bl	8003720 <UART_TransmitString>
    }
}
 8000e4c:	bf00      	nop
 8000e4e:	3798      	adds	r7, #152	@ 0x98
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bdb0      	pop	{r4, r5, r7, pc}
 8000e54:	08007e64 	.word	0x08007e64
 8000e58:	200000f8 	.word	0x200000f8
 8000e5c:	3e99999a 	.word	0x3e99999a
 8000e60:	3f333333 	.word	0x3f333333
 8000e64:	457ff000 	.word	0x457ff000
 8000e68:	40533333 	.word	0x40533333
 8000e6c:	404ccccd 	.word	0x404ccccd
 8000e70:	200000e0 	.word	0x200000e0
 8000e74:	20000120 	.word	0x20000120
 8000e78:	3d4ccccd 	.word	0x3d4ccccd
 8000e7c:	20000110 	.word	0x20000110
 8000e80:	08007a58 	.word	0x08007a58
 8000e84:	20000138 	.word	0x20000138
 8000e88:	08007a60 	.word	0x08007a60
 8000e8c:	08007a68 	.word	0x08007a68
 8000e90:	08007a70 	.word	0x08007a70
 8000e94:	08007a78 	.word	0x08007a78
 8000e98:	2000025c 	.word	0x2000025c
 8000e9c:	20000368 	.word	0x20000368
 8000ea0:	20000118 	.word	0x20000118
 8000ea4:	3f666666 	.word	0x3f666666
 8000ea8:	08007a80 	.word	0x08007a80
 8000eac:	08007a88 	.word	0x08007a88

08000eb0 <map_nibble_ctrl>:
   Build a PCF8574 byte from a 4-bit data nibble and RS/EN flags according to LCD_PINMAP.
*/

static inline uint8_t map_nibble_ctrl(uint8_t nibble /*D7..D4 or D4..D7 per map*/,
                                      uint8_t rs, uint8_t en, uint8_t bl_on)
{
 8000eb0:	b490      	push	{r4, r7}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	4608      	mov	r0, r1
 8000eba:	4611      	mov	r1, r2
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4623      	mov	r3, r4
 8000ec0:	71fb      	strb	r3, [r7, #7]
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	71bb      	strb	r3, [r7, #6]
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	717b      	strb	r3, [r7, #5]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	713b      	strb	r3, [r7, #4]
#if (LCD_PINMAP == LCD_PINMAP_A)
    /* Map A: D7..D4 -> P7..P4, EN=P2, RW=P1(0), RS=P0, BL=P3
       Byte: [D7 D6 D5 D4 BL EN RW RS] */
    uint8_t b = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	73fb      	strb	r3, [r7, #15]
    b |= (nibble & 0xF0);           // D7..D4 already in high nibble
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	f023 030f 	bic.w	r3, r3, #15
 8000eda:	b25a      	sxtb	r2, r3
 8000edc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	b25b      	sxtb	r3, r3
 8000ee4:	73fb      	strb	r3, [r7, #15]
    b |= (bl_on ? 0x08 : 0x00);     // BL=P3
 8000ee6:	793b      	ldrb	r3, [r7, #4]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <map_nibble_ctrl+0x40>
 8000eec:	2208      	movs	r2, #8
 8000eee:	e000      	b.n	8000ef2 <map_nibble_ctrl+0x42>
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	b25b      	sxtb	r3, r3
 8000efa:	73fb      	strb	r3, [r7, #15]
    b |= (en ? 0x04 : 0x00);        // EN=P2
 8000efc:	797b      	ldrb	r3, [r7, #5]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <map_nibble_ctrl+0x56>
 8000f02:	2204      	movs	r2, #4
 8000f04:	e000      	b.n	8000f08 <map_nibble_ctrl+0x58>
 8000f06:	2200      	movs	r2, #0
 8000f08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	b25b      	sxtb	r3, r3
 8000f10:	73fb      	strb	r3, [r7, #15]
    b |= 0x00;                      // RW=P1 forced 0 (write)
    b |= (rs ? 0x01 : 0x00);        // RS=P0
 8000f12:	79bb      	ldrb	r3, [r7, #6]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	bf14      	ite	ne
 8000f18:	2301      	movne	r3, #1
 8000f1a:	2300      	moveq	r3, #0
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	b25a      	sxtb	r2, r3
 8000f20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	b25b      	sxtb	r3, r3
 8000f28:	73fb      	strb	r3, [r7, #15]
    return b;
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
    b |= (bl_on ? 0x80 : 0x00);           // BL=P7
    return b;
#else
# error "Unsupported LCD_PINMAP selection"
#endif
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bc90      	pop	{r4, r7}
 8000f34:	4770      	bx	lr
	...

08000f38 <expander_write>:

static void expander_write(uint8_t data)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af02      	add	r7, sp, #8
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Master_Transmit(&hi2c2, SLAVE_ADDRESS_LCD, &data, 1, 100);
 8000f42:	1dfa      	adds	r2, r7, #7
 8000f44:	2364      	movs	r3, #100	@ 0x64
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	2301      	movs	r3, #1
 8000f4a:	214e      	movs	r1, #78	@ 0x4e
 8000f4c:	4803      	ldr	r0, [pc, #12]	@ (8000f5c <expander_write+0x24>)
 8000f4e:	f003 fe0d 	bl	8004b6c <HAL_I2C_Master_Transmit>
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	2000019c 	.word	0x2000019c

08000f60 <pulse_enable>:

static void pulse_enable(uint8_t data)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
#if (LCD_PINMAP == LCD_PINMAP_A)
    expander_write(data | 0x04);  // EN=1
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	f043 0304 	orr.w	r3, r3, #4
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff ffe0 	bl	8000f38 <expander_write>
    HAL_Delay(1);
 8000f78:	2001      	movs	r0, #1
 8000f7a:	f002 fcaf 	bl	80038dc <HAL_Delay>
    expander_write(data & ~0x04); // EN=0
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	f023 0304 	bic.w	r3, r3, #4
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff ffd6 	bl	8000f38 <expander_write>
#elif (LCD_PINMAP == LCD_PINMAP_B)
    expander_write(data | 0x10);  // EN=1
    HAL_Delay(1);
    expander_write(data & ~0x10); // EN=0
#endif
    HAL_Delay(1);
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	f002 fca5 	bl	80038dc <HAL_Delay>
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <write4bits>:

static void write4bits(uint8_t nibble /*D7..D4 in high nibble*/, uint8_t rs, uint8_t bl_on)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b084      	sub	sp, #16
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	71fb      	strb	r3, [r7, #7]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	71bb      	strb	r3, [r7, #6]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	717b      	strb	r3, [r7, #5]
    uint8_t x = map_nibble_ctrl(nibble, rs, 1 /*en edge*/, bl_on);
 8000fac:	797b      	ldrb	r3, [r7, #5]
 8000fae:	79b9      	ldrb	r1, [r7, #6]
 8000fb0:	79f8      	ldrb	r0, [r7, #7]
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	f7ff ff7c 	bl	8000eb0 <map_nibble_ctrl>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	73fb      	strb	r3, [r7, #15]
    expander_write(x);
 8000fbc:	7bfb      	ldrb	r3, [r7, #15]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff ffba 	bl	8000f38 <expander_write>
    pulse_enable(x);
 8000fc4:	7bfb      	ldrb	r3, [r7, #15]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff ffca 	bl	8000f60 <pulse_enable>
}
 8000fcc:	bf00      	nop
 8000fce:	3710      	adds	r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <lcd_backlight_on>:

/* -------- Public API -------- */

void lcd_backlight_on(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
#if (LCD_PINMAP == LCD_PINMAP_A)
    uint8_t b = 0x08; // BL=1, others 0
 8000fda:	2308      	movs	r3, #8
 8000fdc:	71fb      	strb	r3, [r7, #7]
#elif (LCD_PINMAP == LCD_PINMAP_B)
    uint8_t b = 0x80; // BL=1, others 0
#endif
    expander_write(b);
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff ffa9 	bl	8000f38 <expander_write>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <lcd_send_cmd>:
    uint8_t b = 0x00;
    expander_write(b);
}

void lcd_send_cmd(uint8_t cmd)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	71fb      	strb	r3, [r7, #7]
    /* high then low nibble, RS=0 */
    write4bits(cmd & 0xF0, 0, 1);
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	f023 030f 	bic.w	r3, r3, #15
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	2201      	movs	r2, #1
 8001002:	2100      	movs	r1, #0
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff ffc8 	bl	8000f9a <write4bits>
    write4bits((cmd << 4) & 0xF0, 0, 1);
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	011b      	lsls	r3, r3, #4
 800100e:	b2db      	uxtb	r3, r3
 8001010:	2201      	movs	r2, #1
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ffc0 	bl	8000f9a <write4bits>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <lcd_send_data>:

void lcd_send_data(uint8_t data)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
 8001028:	4603      	mov	r3, r0
 800102a:	71fb      	strb	r3, [r7, #7]
    /* high then low nibble, RS=1 */
    write4bits(data & 0xF0, 1, 1);
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	f023 030f 	bic.w	r3, r3, #15
 8001032:	b2db      	uxtb	r3, r3
 8001034:	2201      	movs	r2, #1
 8001036:	2101      	movs	r1, #1
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ffae 	bl	8000f9a <write4bits>
    write4bits((data << 4) & 0xF0, 1, 1);
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	011b      	lsls	r3, r3, #4
 8001042:	b2db      	uxtb	r3, r3
 8001044:	2201      	movs	r2, #1
 8001046:	2101      	movs	r1, #1
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ffa6 	bl	8000f9a <write4bits>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <lcd_clear>:

void lcd_clear(void)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	af00      	add	r7, sp, #0
    lcd_send_cmd(0x01);
 800105a:	2001      	movs	r0, #1
 800105c:	f7ff ffc7 	bl	8000fee <lcd_send_cmd>
    HAL_Delay(2);
 8001060:	2002      	movs	r0, #2
 8001062:	f002 fc3b 	bl	80038dc <HAL_Delay>
    lcd_send_cmd(0x80);
 8001066:	2080      	movs	r0, #128	@ 0x80
 8001068:	f7ff ffc1 	bl	8000fee <lcd_send_cmd>
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}

08001070 <lcd_put_cur>:

void lcd_put_cur(uint8_t row, uint8_t col)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	460a      	mov	r2, r1
 800107a:	71fb      	strb	r3, [r7, #7]
 800107c:	4613      	mov	r3, r2
 800107e:	71bb      	strb	r3, [r7, #6]
    static const uint8_t row_offsets[] = {0x00, 0x40};
    if (row > 1) row = 1;
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d901      	bls.n	800108a <lcd_put_cur+0x1a>
 8001086:	2301      	movs	r3, #1
 8001088:	71fb      	strb	r3, [r7, #7]
    lcd_send_cmd(0x80 | (row_offsets[row] + col));
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	4a08      	ldr	r2, [pc, #32]	@ (80010b0 <lcd_put_cur+0x40>)
 800108e:	5cd2      	ldrb	r2, [r2, r3]
 8001090:	79bb      	ldrb	r3, [r7, #6]
 8001092:	4413      	add	r3, r2
 8001094:	b2db      	uxtb	r3, r3
 8001096:	b25b      	sxtb	r3, r3
 8001098:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800109c:	b25b      	sxtb	r3, r3
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff ffa4 	bl	8000fee <lcd_send_cmd>
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	08007e7c 	.word	0x08007e7c

080010b4 <lcd_send_string>:

void lcd_send_string(char *str)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
    while (*str) lcd_send_data((uint8_t)*str++);
 80010bc:	e006      	b.n	80010cc <lcd_send_string+0x18>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	1c5a      	adds	r2, r3, #1
 80010c2:	607a      	str	r2, [r7, #4]
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff ffab 	bl	8001022 <lcd_send_data>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d1f4      	bne.n	80010be <lcd_send_string+0xa>
}
 80010d4:	bf00      	nop
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <lcd_init>:

void lcd_init(void)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	af00      	add	r7, sp, #0
    HAL_Delay(50);
 80010e2:	2032      	movs	r0, #50	@ 0x32
 80010e4:	f002 fbfa 	bl	80038dc <HAL_Delay>
    lcd_backlight_on();
 80010e8:	f7ff ff74 	bl	8000fd4 <lcd_backlight_on>

    /* Force 8-bit mode (send only high-nibble pattern) */
    write4bits(0x30, 0, 1); HAL_Delay(5);
 80010ec:	2201      	movs	r2, #1
 80010ee:	2100      	movs	r1, #0
 80010f0:	2030      	movs	r0, #48	@ 0x30
 80010f2:	f7ff ff52 	bl	8000f9a <write4bits>
 80010f6:	2005      	movs	r0, #5
 80010f8:	f002 fbf0 	bl	80038dc <HAL_Delay>
    write4bits(0x30, 0, 1); HAL_Delay(1);
 80010fc:	2201      	movs	r2, #1
 80010fe:	2100      	movs	r1, #0
 8001100:	2030      	movs	r0, #48	@ 0x30
 8001102:	f7ff ff4a 	bl	8000f9a <write4bits>
 8001106:	2001      	movs	r0, #1
 8001108:	f002 fbe8 	bl	80038dc <HAL_Delay>
    write4bits(0x30, 0, 1); HAL_Delay(1);
 800110c:	2201      	movs	r2, #1
 800110e:	2100      	movs	r1, #0
 8001110:	2030      	movs	r0, #48	@ 0x30
 8001112:	f7ff ff42 	bl	8000f9a <write4bits>
 8001116:	2001      	movs	r0, #1
 8001118:	f002 fbe0 	bl	80038dc <HAL_Delay>

    /* Switch to 4-bit mode */
    write4bits(0x20, 0, 1); HAL_Delay(1);
 800111c:	2201      	movs	r2, #1
 800111e:	2100      	movs	r1, #0
 8001120:	2020      	movs	r0, #32
 8001122:	f7ff ff3a 	bl	8000f9a <write4bits>
 8001126:	2001      	movs	r0, #1
 8001128:	f002 fbd8 	bl	80038dc <HAL_Delay>

    /* Function set: 4-bit, 2 lines, 5x8 */
    lcd_send_cmd(0x28); HAL_Delay(1);
 800112c:	2028      	movs	r0, #40	@ 0x28
 800112e:	f7ff ff5e 	bl	8000fee <lcd_send_cmd>
 8001132:	2001      	movs	r0, #1
 8001134:	f002 fbd2 	bl	80038dc <HAL_Delay>
    /* Display off */
    lcd_send_cmd(0x08); HAL_Delay(1);
 8001138:	2008      	movs	r0, #8
 800113a:	f7ff ff58 	bl	8000fee <lcd_send_cmd>
 800113e:	2001      	movs	r0, #1
 8001140:	f002 fbcc 	bl	80038dc <HAL_Delay>
    /* Clear */
    lcd_clear();        HAL_Delay(2);
 8001144:	f7ff ff87 	bl	8001056 <lcd_clear>
 8001148:	2002      	movs	r0, #2
 800114a:	f002 fbc7 	bl	80038dc <HAL_Delay>
    /* Entry mode: increment, no shift */
    lcd_send_cmd(0x06); HAL_Delay(1);
 800114e:	2006      	movs	r0, #6
 8001150:	f7ff ff4d 	bl	8000fee <lcd_send_cmd>
 8001154:	2001      	movs	r0, #1
 8001156:	f002 fbc1 	bl	80038dc <HAL_Delay>
    /* Display on, cursor off, blink off */
    lcd_send_cmd(0x0C); HAL_Delay(1);
 800115a:	200c      	movs	r0, #12
 800115c:	f7ff ff47 	bl	8000fee <lcd_send_cmd>
 8001160:	2001      	movs	r0, #1
 8001162:	f002 fbbb 	bl	80038dc <HAL_Delay>
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}

0800116a <now_ms>:

static LedIntent s_intent[LED_COLOR_COUNT];
static uint8_t   s_activeBlink[LED_COLOR_COUNT];
static uint32_t  s_nextToggleAt[LED_COLOR_COUNT];

static inline uint32_t now_ms(void) { return HAL_GetTick(); }
 800116a:	b580      	push	{r7, lr}
 800116c:	af00      	add	r7, sp, #0
 800116e:	f002 fbab 	bl	80038c8 <HAL_GetTick>
 8001172:	4603      	mov	r3, r0
 8001174:	4618      	mov	r0, r3
 8001176:	bd80      	pop	{r7, pc}

08001178 <led_write>:

static void led_write(LedColor c, GPIO_PinState st) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	460a      	mov	r2, r1
 8001182:	71fb      	strb	r3, [r7, #7]
 8001184:	4613      	mov	r3, r2
 8001186:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(LED_PORTS[c], LED_PINS[c], st);
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	4a07      	ldr	r2, [pc, #28]	@ (80011a8 <led_write+0x30>)
 800118c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	4a06      	ldr	r2, [pc, #24]	@ (80011ac <led_write+0x34>)
 8001194:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001198:	79ba      	ldrb	r2, [r7, #6]
 800119a:	4619      	mov	r1, r3
 800119c:	f003 fb71 	bl	8004882 <HAL_GPIO_WritePin>
}
 80011a0:	bf00      	nop
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20000000 	.word	0x20000000
 80011ac:	20000010 	.word	0x20000010

080011b0 <led_on>:
static void led_on(LedColor c)  { led_write(c, GPIO_PIN_SET); }
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	2101      	movs	r1, #1
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff ffda 	bl	8001178 <led_write>
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <led_off>:
static void led_off(LedColor c) { led_write(c, GPIO_PIN_RESET); }
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff ffcc 	bl	8001178 <led_write>
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <LED_Task>:
    }
}

/* call this every loop (or from a 10–20ms tick) */
void LED_Task(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
    uint32_t t = now_ms();
 80011ee:	f7ff ffbc 	bl	800116a <now_ms>
 80011f2:	6038      	str	r0, [r7, #0]

    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 80011f4:	2300      	movs	r3, #0
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	e064      	b.n	80012c4 <LED_Task+0xdc>
        switch (s_intent[i].mode) {
 80011fa:	4a36      	ldr	r2, [pc, #216]	@ (80012d4 <LED_Task+0xec>)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d002      	beq.n	800120c <LED_Task+0x24>
 8001206:	2b01      	cmp	r3, #1
 8001208:	d00b      	beq.n	8001222 <LED_Task+0x3a>
 800120a:	e015      	b.n	8001238 <LED_Task+0x50>
        case LED_MODE_OFF:
            s_activeBlink[i] = 0;
 800120c:	4a32      	ldr	r2, [pc, #200]	@ (80012d8 <LED_Task+0xf0>)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4413      	add	r3, r2
 8001212:	2200      	movs	r2, #0
 8001214:	701a      	strb	r2, [r3, #0]
            led_off((LedColor)i);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	b2db      	uxtb	r3, r3
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff ffd6 	bl	80011cc <led_off>
            break;
 8001220:	e04d      	b.n	80012be <LED_Task+0xd6>

        case LED_MODE_STEADY:
            s_activeBlink[i] = 1;
 8001222:	4a2d      	ldr	r2, [pc, #180]	@ (80012d8 <LED_Task+0xf0>)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4413      	add	r3, r2
 8001228:	2201      	movs	r2, #1
 800122a:	701a      	strb	r2, [r3, #0]
            led_on((LedColor)i);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	b2db      	uxtb	r3, r3
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ffbd 	bl	80011b0 <led_on>
            break;
 8001236:	e042      	b.n	80012be <LED_Task+0xd6>

        case LED_MODE_BLINK:
        default:
            if (s_intent[i].period_ms == 0) s_intent[i].period_ms = 500;
 8001238:	4a26      	ldr	r2, [pc, #152]	@ (80012d4 <LED_Task+0xec>)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	4413      	add	r3, r2
 8001240:	885b      	ldrh	r3, [r3, #2]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d106      	bne.n	8001254 <LED_Task+0x6c>
 8001246:	4a23      	ldr	r2, [pc, #140]	@ (80012d4 <LED_Task+0xec>)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4413      	add	r3, r2
 800124e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001252:	805a      	strh	r2, [r3, #2]
            if ((int32_t)(s_nextToggleAt[i] - t) <= 0) {
 8001254:	4a21      	ldr	r2, [pc, #132]	@ (80012dc <LED_Task+0xf4>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	2b00      	cmp	r3, #0
 8001262:	dc2b      	bgt.n	80012bc <LED_Task+0xd4>
                s_activeBlink[i] = !s_activeBlink[i];
 8001264:	4a1c      	ldr	r2, [pc, #112]	@ (80012d8 <LED_Task+0xf0>)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4413      	add	r3, r2
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	bf0c      	ite	eq
 8001270:	2301      	moveq	r3, #1
 8001272:	2300      	movne	r3, #0
 8001274:	b2db      	uxtb	r3, r3
 8001276:	4619      	mov	r1, r3
 8001278:	4a17      	ldr	r2, [pc, #92]	@ (80012d8 <LED_Task+0xf0>)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4413      	add	r3, r2
 800127e:	460a      	mov	r2, r1
 8001280:	701a      	strb	r2, [r3, #0]
                if (s_activeBlink[i]) led_on((LedColor)i);
 8001282:	4a15      	ldr	r2, [pc, #84]	@ (80012d8 <LED_Task+0xf0>)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4413      	add	r3, r2
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d005      	beq.n	800129a <LED_Task+0xb2>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	b2db      	uxtb	r3, r3
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff ff8c 	bl	80011b0 <led_on>
 8001298:	e004      	b.n	80012a4 <LED_Task+0xbc>
                else                  led_off((LedColor)i);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	b2db      	uxtb	r3, r3
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff ff94 	bl	80011cc <led_off>
                s_nextToggleAt[i] = t + s_intent[i].period_ms;
 80012a4:	4a0b      	ldr	r2, [pc, #44]	@ (80012d4 <LED_Task+0xec>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	885b      	ldrh	r3, [r3, #2]
 80012ae:	461a      	mov	r2, r3
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	441a      	add	r2, r3
 80012b4:	4909      	ldr	r1, [pc, #36]	@ (80012dc <LED_Task+0xf4>)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            }
            break;
 80012bc:	bf00      	nop
    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	3301      	adds	r3, #1
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2b03      	cmp	r3, #3
 80012c8:	dd97      	ble.n	80011fa <LED_Task+0x12>
        }
    }
}
 80012ca:	bf00      	nop
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20000148 	.word	0x20000148
 80012d8:	20000158 	.word	0x20000158
 80012dc:	2000015c 	.word	0x2000015c

080012e0 <LED_ClearAllIntents>:

void LED_ClearAllIntents(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 80012e6:	2300      	movs	r3, #0
 80012e8:	607b      	str	r3, [r7, #4]
 80012ea:	e00d      	b.n	8001308 <LED_ClearAllIntents+0x28>
        s_intent[i].mode = LED_MODE_OFF;
 80012ec:	4a0b      	ldr	r2, [pc, #44]	@ (800131c <LED_ClearAllIntents+0x3c>)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2100      	movs	r1, #0
 80012f2:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
        s_intent[i].period_ms = 0;
 80012f6:	4a09      	ldr	r2, [pc, #36]	@ (800131c <LED_ClearAllIntents+0x3c>)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	4413      	add	r3, r2
 80012fe:	2200      	movs	r2, #0
 8001300:	805a      	strh	r2, [r3, #2]
    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	3301      	adds	r3, #1
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2b03      	cmp	r3, #3
 800130c:	ddee      	ble.n	80012ec <LED_ClearAllIntents+0xc>
    }
}
 800130e:	bf00      	nop
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	20000148 	.word	0x20000148

08001320 <LED_SetIntent>:

void LED_SetIntent(LedColor color, LedMode mode, uint16_t period_ms)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	71fb      	strb	r3, [r7, #7]
 800132a:	460b      	mov	r3, r1
 800132c:	71bb      	strb	r3, [r7, #6]
 800132e:	4613      	mov	r3, r2
 8001330:	80bb      	strh	r3, [r7, #4]
    if ((int)color < 0 || color >= LED_COLOR_COUNT) return;
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	2b03      	cmp	r3, #3
 8001336:	d80b      	bhi.n	8001350 <LED_SetIntent+0x30>
    s_intent[color].mode = mode;
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	4908      	ldr	r1, [pc, #32]	@ (800135c <LED_SetIntent+0x3c>)
 800133c:	79ba      	ldrb	r2, [r7, #6]
 800133e:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
    s_intent[color].period_ms = period_ms;
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	4a05      	ldr	r2, [pc, #20]	@ (800135c <LED_SetIntent+0x3c>)
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	4413      	add	r3, r2
 800134a:	88ba      	ldrh	r2, [r7, #4]
 800134c:	805a      	strh	r2, [r3, #2]
 800134e:	e000      	b.n	8001352 <LED_SetIntent+0x32>
    if ((int)color < 0 || color >= LED_COLOR_COUNT) return;
 8001350:	bf00      	nop
}
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	bc80      	pop	{r7}
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	20000148 	.word	0x20000148

08001360 <LED_ApplyIntents>:

/* current implementation uses intents directly in LED_Task() */
void LED_ApplyIntents(void) { /* no-op, reserved for future resolve rules */ }
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr

0800136c <LoRa_WriteReg>:

uint8_t rxBuffer[64]; // LoRa RX
uint8_t txBuffer[64]; // LoRa TX

/* ---------------- Low-level SPI helpers ---------------- */
void LoRa_WriteReg(uint8_t addr, uint8_t data) {
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	460a      	mov	r2, r1
 8001376:	71fb      	strb	r3, [r7, #7]
 8001378:	4613      	mov	r3, r2
 800137a:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2] = { (uint8_t)(addr | 0x80), data };
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001382:	b2db      	uxtb	r3, r3
 8001384:	733b      	strb	r3, [r7, #12]
 8001386:	79bb      	ldrb	r3, [r7, #6]
 8001388:	737b      	strb	r3, [r7, #13]
    NSS_LOW();
 800138a:	2200      	movs	r2, #0
 800138c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001390:	480a      	ldr	r0, [pc, #40]	@ (80013bc <LoRa_WriteReg+0x50>)
 8001392:	f003 fa76 	bl	8004882 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, buf, 2, HAL_MAX_DELAY);
 8001396:	f107 010c 	add.w	r1, r7, #12
 800139a:	f04f 33ff 	mov.w	r3, #4294967295
 800139e:	2202      	movs	r2, #2
 80013a0:	4807      	ldr	r0, [pc, #28]	@ (80013c0 <LoRa_WriteReg+0x54>)
 80013a2:	f005 f9d3 	bl	800674c <HAL_SPI_Transmit>
    NSS_HIGH();
 80013a6:	2201      	movs	r2, #1
 80013a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013ac:	4803      	ldr	r0, [pc, #12]	@ (80013bc <LoRa_WriteReg+0x50>)
 80013ae:	f003 fa68 	bl	8004882 <HAL_GPIO_WritePin>
}
 80013b2:	bf00      	nop
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40010800 	.word	0x40010800
 80013c0:	20000204 	.word	0x20000204

080013c4 <LoRa_Reset>:
    HAL_SPI_Receive(&hspi1, buffer, size, HAL_MAX_DELAY);
    NSS_HIGH();
}

/* ---------------- Reset ---------------- */
void LoRa_Reset(void) {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LORA_RESET_PORT, LORA_RESET_PIN, GPIO_PIN_RESET);
 80013c8:	2200      	movs	r2, #0
 80013ca:	2140      	movs	r1, #64	@ 0x40
 80013cc:	4807      	ldr	r0, [pc, #28]	@ (80013ec <LoRa_Reset+0x28>)
 80013ce:	f003 fa58 	bl	8004882 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 80013d2:	2002      	movs	r0, #2
 80013d4:	f002 fa82 	bl	80038dc <HAL_Delay>
    HAL_GPIO_WritePin(LORA_RESET_PORT, LORA_RESET_PIN, GPIO_PIN_SET);
 80013d8:	2201      	movs	r2, #1
 80013da:	2140      	movs	r1, #64	@ 0x40
 80013dc:	4803      	ldr	r0, [pc, #12]	@ (80013ec <LoRa_Reset+0x28>)
 80013de:	f003 fa50 	bl	8004882 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 80013e2:	2002      	movs	r0, #2
 80013e4:	f002 fa7a 	bl	80038dc <HAL_Delay>
}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40010c00 	.word	0x40010c00

080013f0 <LoRa_SetFrequency>:

/* ---------------- Set frequency ---------------- */
void LoRa_SetFrequency(uint32_t freqHz) {
 80013f0:	b5b0      	push	{r4, r5, r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
    uint64_t frf = ((uint64_t)freqHz << 19) / 32000000ULL;
 80013f8:	6879      	ldr	r1, [r7, #4]
 80013fa:	2000      	movs	r0, #0
 80013fc:	460a      	mov	r2, r1
 80013fe:	4603      	mov	r3, r0
 8001400:	0b55      	lsrs	r5, r2, #13
 8001402:	04d4      	lsls	r4, r2, #19
 8001404:	4a18      	ldr	r2, [pc, #96]	@ (8001468 <LoRa_SetFrequency+0x78>)
 8001406:	f04f 0300 	mov.w	r3, #0
 800140a:	4620      	mov	r0, r4
 800140c:	4629      	mov	r1, r5
 800140e:	f7ff f9a3 	bl	8000758 <__aeabi_uldivmod>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	e9c7 2302 	strd	r2, r3, [r7, #8]
    LoRa_WriteReg(0x06, (uint8_t)(frf >> 16));
 800141a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800141e:	f04f 0200 	mov.w	r2, #0
 8001422:	f04f 0300 	mov.w	r3, #0
 8001426:	0c02      	lsrs	r2, r0, #16
 8001428:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800142c:	0c0b      	lsrs	r3, r1, #16
 800142e:	b2d3      	uxtb	r3, r2
 8001430:	4619      	mov	r1, r3
 8001432:	2006      	movs	r0, #6
 8001434:	f7ff ff9a 	bl	800136c <LoRa_WriteReg>
    LoRa_WriteReg(0x07, (uint8_t)(frf >> 8));
 8001438:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800143c:	f04f 0200 	mov.w	r2, #0
 8001440:	f04f 0300 	mov.w	r3, #0
 8001444:	0a02      	lsrs	r2, r0, #8
 8001446:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800144a:	0a0b      	lsrs	r3, r1, #8
 800144c:	b2d3      	uxtb	r3, r2
 800144e:	4619      	mov	r1, r3
 8001450:	2007      	movs	r0, #7
 8001452:	f7ff ff8b 	bl	800136c <LoRa_WriteReg>
    LoRa_WriteReg(0x08, (uint8_t)(frf >> 0));
 8001456:	7a3b      	ldrb	r3, [r7, #8]
 8001458:	4619      	mov	r1, r3
 800145a:	2008      	movs	r0, #8
 800145c:	f7ff ff86 	bl	800136c <LoRa_WriteReg>
}
 8001460:	bf00      	nop
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bdb0      	pop	{r4, r5, r7, pc}
 8001468:	01e84800 	.word	0x01e84800

0800146c <LoRa_Init>:

/* ---------------- Init ---------------- */
void LoRa_Init(void) {
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
    LoRa_Reset();
 8001470:	f7ff ffa8 	bl	80013c4 <LoRa_Reset>

    // Sleep → LoRa sleep
    LoRa_WriteReg(0x01, 0x00);
 8001474:	2100      	movs	r1, #0
 8001476:	2001      	movs	r0, #1
 8001478:	f7ff ff78 	bl	800136c <LoRa_WriteReg>
    HAL_Delay(2);
 800147c:	2002      	movs	r0, #2
 800147e:	f002 fa2d 	bl	80038dc <HAL_Delay>
    LoRa_WriteReg(0x01, 0x80);
 8001482:	2180      	movs	r1, #128	@ 0x80
 8001484:	2001      	movs	r0, #1
 8001486:	f7ff ff71 	bl	800136c <LoRa_WriteReg>
    HAL_Delay(2);
 800148a:	2002      	movs	r0, #2
 800148c:	f002 fa26 	bl	80038dc <HAL_Delay>

    // Frequency
    LoRa_SetFrequency(LORA_FREQUENCY);
 8001490:	4818      	ldr	r0, [pc, #96]	@ (80014f4 <LoRa_Init+0x88>)
 8001492:	f7ff ffad 	bl	80013f0 <LoRa_SetFrequency>

    // PA config
    LoRa_WriteReg(0x09, 0x8F); // PA_BOOST
 8001496:	218f      	movs	r1, #143	@ 0x8f
 8001498:	2009      	movs	r0, #9
 800149a:	f7ff ff67 	bl	800136c <LoRa_WriteReg>
    LoRa_WriteReg(0x4D, 0x87); // RegPaDac
 800149e:	2187      	movs	r1, #135	@ 0x87
 80014a0:	204d      	movs	r0, #77	@ 0x4d
 80014a2:	f7ff ff63 	bl	800136c <LoRa_WriteReg>

    // LNA
    LoRa_WriteReg(0x0C, 0x23);
 80014a6:	2123      	movs	r1, #35	@ 0x23
 80014a8:	200c      	movs	r0, #12
 80014aa:	f7ff ff5f 	bl	800136c <LoRa_WriteReg>

    // Modem config
    LoRa_WriteReg(0x1D, 0x72);
 80014ae:	2172      	movs	r1, #114	@ 0x72
 80014b0:	201d      	movs	r0, #29
 80014b2:	f7ff ff5b 	bl	800136c <LoRa_WriteReg>
    LoRa_WriteReg(0x1E, 0x74);
 80014b6:	2174      	movs	r1, #116	@ 0x74
 80014b8:	201e      	movs	r0, #30
 80014ba:	f7ff ff57 	bl	800136c <LoRa_WriteReg>
    LoRa_WriteReg(0x26, 0x04);
 80014be:	2104      	movs	r1, #4
 80014c0:	2026      	movs	r0, #38	@ 0x26
 80014c2:	f7ff ff53 	bl	800136c <LoRa_WriteReg>

    // Preamble
    LoRa_WriteReg(0x20, 0x00);
 80014c6:	2100      	movs	r1, #0
 80014c8:	2020      	movs	r0, #32
 80014ca:	f7ff ff4f 	bl	800136c <LoRa_WriteReg>
    LoRa_WriteReg(0x21, 0x08);
 80014ce:	2108      	movs	r1, #8
 80014d0:	2021      	movs	r0, #33	@ 0x21
 80014d2:	f7ff ff4b 	bl	800136c <LoRa_WriteReg>

    // SyncWord
    LoRa_WriteReg(0x39, 0x22);
 80014d6:	2122      	movs	r1, #34	@ 0x22
 80014d8:	2039      	movs	r0, #57	@ 0x39
 80014da:	f7ff ff47 	bl	800136c <LoRa_WriteReg>

    // DIO mapping
    LoRa_WriteReg(0x40, 0x00);
 80014de:	2100      	movs	r1, #0
 80014e0:	2040      	movs	r0, #64	@ 0x40
 80014e2:	f7ff ff43 	bl	800136c <LoRa_WriteReg>

    // Clear IRQs
    LoRa_WriteReg(0x12, 0xFF);
 80014e6:	21ff      	movs	r1, #255	@ 0xff
 80014e8:	2012      	movs	r0, #18
 80014ea:	f7ff ff3f 	bl	800136c <LoRa_WriteReg>
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	19cf0e40 	.word	0x19cf0e40

080014f8 <Debug_Print>:
static void MX_ADC1_Init(void);
static void MX_SPI1_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_I2C2_Init(void);

void Debug_Print(char *msg) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
    UART_TransmitString(&huart1, msg);
 8001500:	6879      	ldr	r1, [r7, #4]
 8001502:	4803      	ldr	r0, [pc, #12]	@ (8001510 <Debug_Print+0x18>)
 8001504:	f002 f90c 	bl	8003720 <UART_TransmitString>
}
 8001508:	bf00      	nop
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	2000025c 	.word	0x2000025c

08001514 <main>:

int main(void)
{
 8001514:	b5b0      	push	{r4, r5, r7, lr}
 8001516:	b08a      	sub	sp, #40	@ 0x28
 8001518:	af04      	add	r7, sp, #16
    HAL_Init();
 800151a:	f002 f97d 	bl	8003818 <HAL_Init>
    SystemClock_Config();
 800151e:	f000 f8b1 	bl	8001684 <SystemClock_Config>

    MX_GPIO_Init();
 8001522:	f000 f9d5 	bl	80018d0 <MX_GPIO_Init>
    MX_USART1_UART_Init();
 8001526:	f000 f9a9 	bl	800187c <MX_USART1_UART_Init>
    UART_Init();
 800152a:	f002 f8db 	bl	80036e4 <UART_Init>
    MX_ADC1_Init();
 800152e:	f000 f903 	bl	8001738 <MX_ADC1_Init>
    RTC_InitWithBackup();      // ✅ RTC setup with backup
 8001532:	f000 fd3d 	bl	8001fb0 <RTC_InitWithBackup>
    MX_SPI1_Init();
 8001536:	f000 f96b 	bl	8001810 <MX_SPI1_Init>
    MX_I2C2_Init();
 800153a:	f000 f93b 	bl	80017b4 <MX_I2C2_Init>

    lcd_init();
 800153e:	f7ff fdce 	bl	80010de <lcd_init>
    ADC_Init(&hadc1);
 8001542:	4848      	ldr	r0, [pc, #288]	@ (8001664 <main+0x150>)
 8001544:	f7ff faf2 	bl	8000b2c <ADC_Init>
    LoRa_Init();
 8001548:	f7ff ff90 	bl	800146c <LoRa_Init>
    Screen_Init();
 800154c:	f001 faa2 	bl	8002a94 <Screen_Init>
    UART_Init();
 8001550:	f002 f8c8 	bl	80036e4 <UART_Init>
    Switches_Init();
 8001554:	f002 f832 	bl	80035bc <Switches_Init>

    Debug_Print("System Initialized\r\n");
 8001558:	4843      	ldr	r0, [pc, #268]	@ (8001668 <main+0x154>)
 800155a:	f7ff ffcd 	bl	80014f8 <Debug_Print>

    // ⚡ UNCOMMENT only once after flashing new code:
//    RTC_SetTimeDate(0, 30, 18, 5, 19, 9, 2025);

    uint8_t lastSecond = 255;
 800155e:	23ff      	movs	r3, #255	@ 0xff
 8001560:	75fb      	strb	r3, [r7, #23]

    while (1)
    {
        Screen_HandleSwitches();
 8001562:	f001 fe03 	bl	800316c <Screen_HandleSwitches>
        Screen_Update();
 8001566:	f001 f86b 	bl	8002640 <Screen_Update>
        ADC_ReadAllChannels(&hadc1, &adcData);
 800156a:	4940      	ldr	r1, [pc, #256]	@ (800166c <main+0x158>)
 800156c:	483d      	ldr	r0, [pc, #244]	@ (8001664 <main+0x150>)
 800156e:	f7ff faed 	bl	8000b4c <ADC_ReadAllChannels>

        RTC_TimeTypeDef sTime;
        RTC_DateTypeDef sDate;
        HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001572:	f107 0308 	add.w	r3, r7, #8
 8001576:	2200      	movs	r2, #0
 8001578:	4619      	mov	r1, r3
 800157a:	483d      	ldr	r0, [pc, #244]	@ (8001670 <main+0x15c>)
 800157c:	f004 fc62 	bl	8005e44 <HAL_RTC_GetTime>
        HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	2200      	movs	r2, #0
 8001584:	4619      	mov	r1, r3
 8001586:	483a      	ldr	r0, [pc, #232]	@ (8001670 <main+0x15c>)
 8001588:	f004 fd34 	bl	8005ff4 <HAL_RTC_GetDate>

        if (sTime.Seconds != lastSecond)
 800158c:	7abb      	ldrb	r3, [r7, #10]
 800158e:	7dfa      	ldrb	r2, [r7, #23]
 8001590:	429a      	cmp	r2, r3
 8001592:	d034      	beq.n	80015fe <main+0xea>
        {
            lastSecond = sTime.Seconds;
 8001594:	7abb      	ldrb	r3, [r7, #10]
 8001596:	75fb      	strb	r3, [r7, #23]

            debugTime.Hours   = sTime.Hours;
 8001598:	7a3a      	ldrb	r2, [r7, #8]
 800159a:	4b36      	ldr	r3, [pc, #216]	@ (8001674 <main+0x160>)
 800159c:	701a      	strb	r2, [r3, #0]
            debugTime.Minutes = sTime.Minutes;
 800159e:	7a7a      	ldrb	r2, [r7, #9]
 80015a0:	4b34      	ldr	r3, [pc, #208]	@ (8001674 <main+0x160>)
 80015a2:	705a      	strb	r2, [r3, #1]
            debugTime.Seconds = sTime.Seconds;
 80015a4:	7aba      	ldrb	r2, [r7, #10]
 80015a6:	4b33      	ldr	r3, [pc, #204]	@ (8001674 <main+0x160>)
 80015a8:	709a      	strb	r2, [r3, #2]
            debugTime.Date    = sDate.Date;
 80015aa:	79ba      	ldrb	r2, [r7, #6]
 80015ac:	4b31      	ldr	r3, [pc, #196]	@ (8001674 <main+0x160>)
 80015ae:	70da      	strb	r2, [r3, #3]
            debugTime.Month   = sDate.Month;
 80015b0:	797a      	ldrb	r2, [r7, #5]
 80015b2:	4b30      	ldr	r3, [pc, #192]	@ (8001674 <main+0x160>)
 80015b4:	711a      	strb	r2, [r3, #4]
            debugTime.Year    = 2025 + sDate.Year;
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	f203 73e9 	addw	r3, r3, #2025	@ 0x7e9
 80015bc:	b29a      	uxth	r2, r3
 80015be:	4b2d      	ldr	r3, [pc, #180]	@ (8001674 <main+0x160>)
 80015c0:	80da      	strh	r2, [r3, #6]

            sprintf(dbg, "⏰ %02d:%02d:%02d 📅 %02d-%02d-%04d\r\n",
                    debugTime.Hours, debugTime.Minutes, debugTime.Seconds,
 80015c2:	4b2c      	ldr	r3, [pc, #176]	@ (8001674 <main+0x160>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
            sprintf(dbg, "⏰ %02d:%02d:%02d 📅 %02d-%02d-%04d\r\n",
 80015c6:	461c      	mov	r4, r3
                    debugTime.Hours, debugTime.Minutes, debugTime.Seconds,
 80015c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001674 <main+0x160>)
 80015ca:	785b      	ldrb	r3, [r3, #1]
            sprintf(dbg, "⏰ %02d:%02d:%02d 📅 %02d-%02d-%04d\r\n",
 80015cc:	461d      	mov	r5, r3
                    debugTime.Hours, debugTime.Minutes, debugTime.Seconds,
 80015ce:	4b29      	ldr	r3, [pc, #164]	@ (8001674 <main+0x160>)
 80015d0:	789b      	ldrb	r3, [r3, #2]
            sprintf(dbg, "⏰ %02d:%02d:%02d 📅 %02d-%02d-%04d\r\n",
 80015d2:	461a      	mov	r2, r3
                    debugTime.Date, debugTime.Month, debugTime.Year);
 80015d4:	4b27      	ldr	r3, [pc, #156]	@ (8001674 <main+0x160>)
 80015d6:	78db      	ldrb	r3, [r3, #3]
            sprintf(dbg, "⏰ %02d:%02d:%02d 📅 %02d-%02d-%04d\r\n",
 80015d8:	4619      	mov	r1, r3
                    debugTime.Date, debugTime.Month, debugTime.Year);
 80015da:	4b26      	ldr	r3, [pc, #152]	@ (8001674 <main+0x160>)
 80015dc:	791b      	ldrb	r3, [r3, #4]
            sprintf(dbg, "⏰ %02d:%02d:%02d 📅 %02d-%02d-%04d\r\n",
 80015de:	4618      	mov	r0, r3
                    debugTime.Date, debugTime.Month, debugTime.Year);
 80015e0:	4b24      	ldr	r3, [pc, #144]	@ (8001674 <main+0x160>)
 80015e2:	88db      	ldrh	r3, [r3, #6]
            sprintf(dbg, "⏰ %02d:%02d:%02d 📅 %02d-%02d-%04d\r\n",
 80015e4:	9303      	str	r3, [sp, #12]
 80015e6:	9002      	str	r0, [sp, #8]
 80015e8:	9101      	str	r1, [sp, #4]
 80015ea:	9200      	str	r2, [sp, #0]
 80015ec:	462b      	mov	r3, r5
 80015ee:	4622      	mov	r2, r4
 80015f0:	4921      	ldr	r1, [pc, #132]	@ (8001678 <main+0x164>)
 80015f2:	4822      	ldr	r0, [pc, #136]	@ (800167c <main+0x168>)
 80015f4:	f005 fd60 	bl	80070b8 <siprintf>
            Debug_Print(dbg);
 80015f8:	4820      	ldr	r0, [pc, #128]	@ (800167c <main+0x168>)
 80015fa:	f7ff ff7d 	bl	80014f8 <Debug_Print>
        }

        if (UART_GetReceivedPacket(receivedUartPacket, sizeof(receivedUartPacket))) {
 80015fe:	2140      	movs	r1, #64	@ 0x40
 8001600:	481f      	ldr	r0, [pc, #124]	@ (8001680 <main+0x16c>)
 8001602:	f002 f8a1 	bl	8003748 <UART_GetReceivedPacket>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d01f      	beq.n	800164c <main+0x138>
            char *p = receivedUartPacket;
 800160c:	4b1c      	ldr	r3, [pc, #112]	@ (8001680 <main+0x16c>)
 800160e:	613b      	str	r3, [r7, #16]
            size_t n = strlen(receivedUartPacket);
 8001610:	481b      	ldr	r0, [pc, #108]	@ (8001680 <main+0x16c>)
 8001612:	f7fe fda5 	bl	8000160 <strlen>
 8001616:	60f8      	str	r0, [r7, #12]
            if (n >= 2 && p[0] == '@' && p[n-1] == '#') {
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d913      	bls.n	8001646 <main+0x132>
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b40      	cmp	r3, #64	@ 0x40
 8001624:	d10f      	bne.n	8001646 <main+0x132>
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	3b01      	subs	r3, #1
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	4413      	add	r3, r2
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2b23      	cmp	r3, #35	@ 0x23
 8001632:	d108      	bne.n	8001646 <main+0x132>
                p[n-1] = '\0';
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	3b01      	subs	r3, #1
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4413      	add	r3, r2
 800163c:	2200      	movs	r2, #0
 800163e:	701a      	strb	r2, [r3, #0]
                p++;
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	3301      	adds	r3, #1
 8001644:	613b      	str	r3, [r7, #16]
            }
            ModelHandle_ProcessUartCommand(p);
 8001646:	6938      	ldr	r0, [r7, #16]
 8001648:	f000 fc2a 	bl	8001ea0 <ModelHandle_ProcessUartCommand>
        }

        ModelHandle_Process();
 800164c:	f000 fc52 	bl	8001ef4 <ModelHandle_Process>
        Relay_All(false);
 8001650:	2000      	movs	r0, #0
 8001652:	f000 fc93 	bl	8001f7c <Relay_All>
        LED_Task();
 8001656:	f7ff fdc7 	bl	80011e8 <LED_Task>

        HAL_Delay(50);
 800165a:	2032      	movs	r0, #50	@ 0x32
 800165c:	f002 f93e 	bl	80038dc <HAL_Delay>
    {
 8001660:	e77f      	b.n	8001562 <main+0x4e>
 8001662:	bf00      	nop
 8001664:	2000016c 	.word	0x2000016c
 8001668:	08007a8c 	.word	0x08007a8c
 800166c:	200002a4 	.word	0x200002a4
 8001670:	200001f0 	.word	0x200001f0
 8001674:	20000310 	.word	0x20000310
 8001678:	08007aa4 	.word	0x08007aa4
 800167c:	20000318 	.word	0x20000318
 8001680:	200002d0 	.word	0x200002d0

08001684 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */


void SystemClock_Config(void) {
 8001684:	b580      	push	{r7, lr}
 8001686:	b094      	sub	sp, #80	@ 0x50
 8001688:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800168a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800168e:	2228      	movs	r2, #40	@ 0x28
 8001690:	2100      	movs	r1, #0
 8001692:	4618      	mov	r0, r3
 8001694:	f005 fd32 	bl	80070fc <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016a8:	1d3b      	adds	r3, r7, #4
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	60da      	str	r2, [r3, #12]

    // Use HSI (8 MHz internal) with PLL
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016b4:	2302      	movs	r3, #2
 80016b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016b8:	2301      	movs	r3, #1
 80016ba:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016bc:	2310      	movs	r3, #16
 80016be:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016c0:	2302      	movs	r3, #2
 80016c2:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2; // HSI/2 = 4 MHz
 80016c4:	2300      	movs	r3, #0
 80016c6:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;             // 4*16 = 64 MHz
 80016c8:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80016cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) { Error_Handler(); }
 80016ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016d2:	4618      	mov	r0, r3
 80016d4:	f003 fdae 	bl	8005234 <HAL_RCC_OscConfig>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <SystemClock_Config+0x5e>
 80016de:	f000 f98b 	bl	80019f8 <Error_Handler>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80016e2:	230f      	movs	r3, #15
 80016e4:	617b      	str	r3, [r7, #20]
                                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK; // Updated line
 80016e6:	2302      	movs	r3, #2
 80016e8:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016ea:	2300      	movs	r3, #0
 80016ec:	61fb      	str	r3, [r7, #28]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016f2:	623b      	str	r3, [r7, #32]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016f4:	2300      	movs	r3, #0
 80016f6:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) { Error_Handler(); }
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	2102      	movs	r1, #2
 80016fe:	4618      	mov	r0, r3
 8001700:	f004 f81a 	bl	8005738 <HAL_RCC_ClockConfig>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <SystemClock_Config+0x8a>
 800170a:	f000 f975 	bl	80019f8 <Error_Handler>

    // Use LSI (internal ~40 kHz) for RTC, and HSI/6 for ADC
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC | RCC_PERIPHCLK_ADC;
 800170e:	2303      	movs	r3, #3
 8001710:	607b      	str	r3, [r7, #4]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001712:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001716:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001718:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800171c:	60fb      	str	r3, [r7, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) { Error_Handler(); }
 800171e:	1d3b      	adds	r3, r7, #4
 8001720:	4618      	mov	r0, r3
 8001722:	f004 f997 	bl	8005a54 <HAL_RCCEx_PeriphCLKConfig>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <SystemClock_Config+0xac>
 800172c:	f000 f964 	bl	80019f8 <Error_Handler>
}
 8001730:	bf00      	nop
 8001732:	3750      	adds	r7, #80	@ 0x50
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800173e:	1d3b      	adds	r3, r7, #4
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001748:	4b18      	ldr	r3, [pc, #96]	@ (80017ac <MX_ADC1_Init+0x74>)
 800174a:	4a19      	ldr	r2, [pc, #100]	@ (80017b0 <MX_ADC1_Init+0x78>)
 800174c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800174e:	4b17      	ldr	r3, [pc, #92]	@ (80017ac <MX_ADC1_Init+0x74>)
 8001750:	2200      	movs	r2, #0
 8001752:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001754:	4b15      	ldr	r3, [pc, #84]	@ (80017ac <MX_ADC1_Init+0x74>)
 8001756:	2200      	movs	r2, #0
 8001758:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800175a:	4b14      	ldr	r3, [pc, #80]	@ (80017ac <MX_ADC1_Init+0x74>)
 800175c:	2200      	movs	r2, #0
 800175e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001760:	4b12      	ldr	r3, [pc, #72]	@ (80017ac <MX_ADC1_Init+0x74>)
 8001762:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001766:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001768:	4b10      	ldr	r3, [pc, #64]	@ (80017ac <MX_ADC1_Init+0x74>)
 800176a:	2200      	movs	r2, #0
 800176c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800176e:	4b0f      	ldr	r3, [pc, #60]	@ (80017ac <MX_ADC1_Init+0x74>)
 8001770:	2201      	movs	r2, #1
 8001772:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001774:	480d      	ldr	r0, [pc, #52]	@ (80017ac <MX_ADC1_Init+0x74>)
 8001776:	f002 f8d5 	bl	8003924 <HAL_ADC_Init>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001780:	f000 f93a 	bl	80019f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001784:	2300      	movs	r3, #0
 8001786:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001788:	2301      	movs	r3, #1
 800178a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800178c:	2300      	movs	r3, #0
 800178e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001790:	1d3b      	adds	r3, r7, #4
 8001792:	4619      	mov	r1, r3
 8001794:	4805      	ldr	r0, [pc, #20]	@ (80017ac <MX_ADC1_Init+0x74>)
 8001796:	f002 fb89 	bl	8003eac <HAL_ADC_ConfigChannel>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80017a0:	f000 f92a 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017a4:	bf00      	nop
 80017a6:	3710      	adds	r7, #16
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	2000016c 	.word	0x2000016c
 80017b0:	40012400 	.word	0x40012400

080017b4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80017b8:	4b12      	ldr	r3, [pc, #72]	@ (8001804 <MX_I2C2_Init+0x50>)
 80017ba:	4a13      	ldr	r2, [pc, #76]	@ (8001808 <MX_I2C2_Init+0x54>)
 80017bc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80017be:	4b11      	ldr	r3, [pc, #68]	@ (8001804 <MX_I2C2_Init+0x50>)
 80017c0:	4a12      	ldr	r2, [pc, #72]	@ (800180c <MX_I2C2_Init+0x58>)
 80017c2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001804 <MX_I2C2_Init+0x50>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80017ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001804 <MX_I2C2_Init+0x50>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001804 <MX_I2C2_Init+0x50>)
 80017d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80017d6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001804 <MX_I2C2_Init+0x50>)
 80017da:	2200      	movs	r2, #0
 80017dc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80017de:	4b09      	ldr	r3, [pc, #36]	@ (8001804 <MX_I2C2_Init+0x50>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017e4:	4b07      	ldr	r3, [pc, #28]	@ (8001804 <MX_I2C2_Init+0x50>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017ea:	4b06      	ldr	r3, [pc, #24]	@ (8001804 <MX_I2C2_Init+0x50>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80017f0:	4804      	ldr	r0, [pc, #16]	@ (8001804 <MX_I2C2_Init+0x50>)
 80017f2:	f003 f877 	bl	80048e4 <HAL_I2C_Init>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80017fc:	f000 f8fc 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001800:	bf00      	nop
 8001802:	bd80      	pop	{r7, pc}
 8001804:	2000019c 	.word	0x2000019c
 8001808:	40005800 	.word	0x40005800
 800180c:	000186a0 	.word	0x000186a0

08001810 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001814:	4b17      	ldr	r3, [pc, #92]	@ (8001874 <MX_SPI1_Init+0x64>)
 8001816:	4a18      	ldr	r2, [pc, #96]	@ (8001878 <MX_SPI1_Init+0x68>)
 8001818:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800181a:	4b16      	ldr	r3, [pc, #88]	@ (8001874 <MX_SPI1_Init+0x64>)
 800181c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001820:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001822:	4b14      	ldr	r3, [pc, #80]	@ (8001874 <MX_SPI1_Init+0x64>)
 8001824:	2200      	movs	r2, #0
 8001826:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001828:	4b12      	ldr	r3, [pc, #72]	@ (8001874 <MX_SPI1_Init+0x64>)
 800182a:	2200      	movs	r2, #0
 800182c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800182e:	4b11      	ldr	r3, [pc, #68]	@ (8001874 <MX_SPI1_Init+0x64>)
 8001830:	2200      	movs	r2, #0
 8001832:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001834:	4b0f      	ldr	r3, [pc, #60]	@ (8001874 <MX_SPI1_Init+0x64>)
 8001836:	2200      	movs	r2, #0
 8001838:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800183a:	4b0e      	ldr	r3, [pc, #56]	@ (8001874 <MX_SPI1_Init+0x64>)
 800183c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001840:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001842:	4b0c      	ldr	r3, [pc, #48]	@ (8001874 <MX_SPI1_Init+0x64>)
 8001844:	2218      	movs	r2, #24
 8001846:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001848:	4b0a      	ldr	r3, [pc, #40]	@ (8001874 <MX_SPI1_Init+0x64>)
 800184a:	2200      	movs	r2, #0
 800184c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800184e:	4b09      	ldr	r3, [pc, #36]	@ (8001874 <MX_SPI1_Init+0x64>)
 8001850:	2200      	movs	r2, #0
 8001852:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001854:	4b07      	ldr	r3, [pc, #28]	@ (8001874 <MX_SPI1_Init+0x64>)
 8001856:	2200      	movs	r2, #0
 8001858:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800185a:	4b06      	ldr	r3, [pc, #24]	@ (8001874 <MX_SPI1_Init+0x64>)
 800185c:	220a      	movs	r2, #10
 800185e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001860:	4804      	ldr	r0, [pc, #16]	@ (8001874 <MX_SPI1_Init+0x64>)
 8001862:	f004 feef 	bl	8006644 <HAL_SPI_Init>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800186c:	f000 f8c4 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}
 8001874:	20000204 	.word	0x20000204
 8001878:	40013000 	.word	0x40013000

0800187c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001880:	4b11      	ldr	r3, [pc, #68]	@ (80018c8 <MX_USART1_UART_Init+0x4c>)
 8001882:	4a12      	ldr	r2, [pc, #72]	@ (80018cc <MX_USART1_UART_Init+0x50>)
 8001884:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001886:	4b10      	ldr	r3, [pc, #64]	@ (80018c8 <MX_USART1_UART_Init+0x4c>)
 8001888:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800188c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800188e:	4b0e      	ldr	r3, [pc, #56]	@ (80018c8 <MX_USART1_UART_Init+0x4c>)
 8001890:	2200      	movs	r2, #0
 8001892:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001894:	4b0c      	ldr	r3, [pc, #48]	@ (80018c8 <MX_USART1_UART_Init+0x4c>)
 8001896:	2200      	movs	r2, #0
 8001898:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800189a:	4b0b      	ldr	r3, [pc, #44]	@ (80018c8 <MX_USART1_UART_Init+0x4c>)
 800189c:	2200      	movs	r2, #0
 800189e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018a0:	4b09      	ldr	r3, [pc, #36]	@ (80018c8 <MX_USART1_UART_Init+0x4c>)
 80018a2:	220c      	movs	r2, #12
 80018a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018a6:	4b08      	ldr	r3, [pc, #32]	@ (80018c8 <MX_USART1_UART_Init+0x4c>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018ac:	4b06      	ldr	r3, [pc, #24]	@ (80018c8 <MX_USART1_UART_Init+0x4c>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018b2:	4805      	ldr	r0, [pc, #20]	@ (80018c8 <MX_USART1_UART_Init+0x4c>)
 80018b4:	f005 f947 	bl	8006b46 <HAL_UART_Init>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018be:	f000 f89b 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	2000025c 	.word	0x2000025c
 80018cc:	40013800 	.word	0x40013800

080018d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b088      	sub	sp, #32
 80018d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d6:	f107 0310 	add.w	r3, r7, #16
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]
 80018e2:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018e4:	4b40      	ldr	r3, [pc, #256]	@ (80019e8 <MX_GPIO_Init+0x118>)
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	4a3f      	ldr	r2, [pc, #252]	@ (80019e8 <MX_GPIO_Init+0x118>)
 80018ea:	f043 0310 	orr.w	r3, r3, #16
 80018ee:	6193      	str	r3, [r2, #24]
 80018f0:	4b3d      	ldr	r3, [pc, #244]	@ (80019e8 <MX_GPIO_Init+0x118>)
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	f003 0310 	and.w	r3, r3, #16
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018fc:	4b3a      	ldr	r3, [pc, #232]	@ (80019e8 <MX_GPIO_Init+0x118>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	4a39      	ldr	r2, [pc, #228]	@ (80019e8 <MX_GPIO_Init+0x118>)
 8001902:	f043 0320 	orr.w	r3, r3, #32
 8001906:	6193      	str	r3, [r2, #24]
 8001908:	4b37      	ldr	r3, [pc, #220]	@ (80019e8 <MX_GPIO_Init+0x118>)
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	f003 0320 	and.w	r3, r3, #32
 8001910:	60bb      	str	r3, [r7, #8]
 8001912:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001914:	4b34      	ldr	r3, [pc, #208]	@ (80019e8 <MX_GPIO_Init+0x118>)
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	4a33      	ldr	r2, [pc, #204]	@ (80019e8 <MX_GPIO_Init+0x118>)
 800191a:	f043 0304 	orr.w	r3, r3, #4
 800191e:	6193      	str	r3, [r2, #24]
 8001920:	4b31      	ldr	r3, [pc, #196]	@ (80019e8 <MX_GPIO_Init+0x118>)
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	f003 0304 	and.w	r3, r3, #4
 8001928:	607b      	str	r3, [r7, #4]
 800192a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800192c:	4b2e      	ldr	r3, [pc, #184]	@ (80019e8 <MX_GPIO_Init+0x118>)
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	4a2d      	ldr	r2, [pc, #180]	@ (80019e8 <MX_GPIO_Init+0x118>)
 8001932:	f043 0308 	orr.w	r3, r3, #8
 8001936:	6193      	str	r3, [r2, #24]
 8001938:	4b2b      	ldr	r3, [pc, #172]	@ (80019e8 <MX_GPIO_Init+0x118>)
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	f003 0308 	and.w	r3, r3, #8
 8001940:	603b      	str	r3, [r7, #0]
 8001942:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Relay1_Pin|Relay2_Pin|Relay3_Pin|LORA_STATUS_Pin
 8001944:	2200      	movs	r2, #0
 8001946:	f240 3147 	movw	r1, #839	@ 0x347
 800194a:	4828      	ldr	r0, [pc, #160]	@ (80019ec <MX_GPIO_Init+0x11c>)
 800194c:	f002 ff99 	bl	8004882 <HAL_GPIO_WritePin>
                          |LED4_Pin|LED5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LORA_SELECT_Pin, GPIO_PIN_RESET);
 8001950:	2200      	movs	r2, #0
 8001952:	f44f 4119 	mov.w	r1, #39168	@ 0x9900
 8001956:	4826      	ldr	r0, [pc, #152]	@ (80019f0 <MX_GPIO_Init+0x120>)
 8001958:	f002 ff93 	bl	8004882 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : AC_voltage_Pin AC_current_Pin */
  GPIO_InitStruct.Pin = AC_voltage_Pin|AC_current_Pin;
 800195c:	23c0      	movs	r3, #192	@ 0xc0
 800195e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001960:	2303      	movs	r3, #3
 8001962:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001964:	f107 0310 	add.w	r3, r7, #16
 8001968:	4619      	mov	r1, r3
 800196a:	4821      	ldr	r0, [pc, #132]	@ (80019f0 <MX_GPIO_Init+0x120>)
 800196c:	f002 fdee 	bl	800454c <HAL_GPIO_Init>

  /*Configure GPIO pins : Relay1_Pin Relay2_Pin Relay3_Pin LORA_STATUS_Pin
                           LED4_Pin LED5_Pin */
  GPIO_InitStruct.Pin = Relay1_Pin|Relay2_Pin|Relay3_Pin|LORA_STATUS_Pin
 8001970:	f240 3347 	movw	r3, #839	@ 0x347
 8001974:	613b      	str	r3, [r7, #16]
                          |LED4_Pin|LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001976:	2301      	movs	r3, #1
 8001978:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197e:	2302      	movs	r3, #2
 8001980:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001982:	f107 0310 	add.w	r3, r7, #16
 8001986:	4619      	mov	r1, r3
 8001988:	4818      	ldr	r0, [pc, #96]	@ (80019ec <MX_GPIO_Init+0x11c>)
 800198a:	f002 fddf 	bl	800454c <HAL_GPIO_Init>

  /*Configure GPIO pins : SWITCH1_Pin SWITCH2_Pin SWITCH3_Pin SWITCH4_Pin */
  GPIO_InitStruct.Pin = SWITCH1_Pin|SWITCH2_Pin|SWITCH3_Pin|SWITCH4_Pin;
 800198e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001992:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001994:	4b17      	ldr	r3, [pc, #92]	@ (80019f4 <MX_GPIO_Init+0x124>)
 8001996:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001998:	2301      	movs	r3, #1
 800199a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800199c:	f107 0310 	add.w	r3, r7, #16
 80019a0:	4619      	mov	r1, r3
 80019a2:	4812      	ldr	r0, [pc, #72]	@ (80019ec <MX_GPIO_Init+0x11c>)
 80019a4:	f002 fdd2 	bl	800454c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LORA_SELECT_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LORA_SELECT_Pin;
 80019a8:	f44f 4319 	mov.w	r3, #39168	@ 0x9900
 80019ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ae:	2301      	movs	r3, #1
 80019b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b6:	2302      	movs	r3, #2
 80019b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ba:	f107 0310 	add.w	r3, r7, #16
 80019be:	4619      	mov	r1, r3
 80019c0:	480b      	ldr	r0, [pc, #44]	@ (80019f0 <MX_GPIO_Init+0x120>)
 80019c2:	f002 fdc3 	bl	800454c <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_DATA_Pin */
  GPIO_InitStruct.Pin = RF_DATA_Pin;
 80019c6:	2380      	movs	r3, #128	@ 0x80
 80019c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RF_DATA_GPIO_Port, &GPIO_InitStruct);
 80019d2:	f107 0310 	add.w	r3, r7, #16
 80019d6:	4619      	mov	r1, r3
 80019d8:	4804      	ldr	r0, [pc, #16]	@ (80019ec <MX_GPIO_Init+0x11c>)
 80019da:	f002 fdb7 	bl	800454c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80019de:	bf00      	nop
 80019e0:	3720      	adds	r7, #32
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40021000 	.word	0x40021000
 80019ec:	40010c00 	.word	0x40010c00
 80019f0:	40010800 	.word	0x40010800
 80019f4:	10310000 	.word	0x10310000

080019f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
    /* Print an error and blink an LED to show we're in the error handler */
    Debug_Print("** Error_Handler entered **\r\n");
 80019fc:	4806      	ldr	r0, [pc, #24]	@ (8001a18 <Error_Handler+0x20>)
 80019fe:	f7ff fd7b 	bl	80014f8 <Debug_Print>

    /* Try to indicate error by toggling LED1 (or any LED defined in your MX_GPIO_Init) */
    for (;;) {
        HAL_GPIO_TogglePin(GPIOA, LED1_Pin);
 8001a02:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a06:	4805      	ldr	r0, [pc, #20]	@ (8001a1c <Error_Handler+0x24>)
 8001a08:	f002 ff53 	bl	80048b2 <HAL_GPIO_TogglePin>
        HAL_Delay(250);
 8001a0c:	20fa      	movs	r0, #250	@ 0xfa
 8001a0e:	f001 ff65 	bl	80038dc <HAL_Delay>
        HAL_GPIO_TogglePin(GPIOA, LED1_Pin);
 8001a12:	bf00      	nop
 8001a14:	e7f5      	b.n	8001a02 <Error_Handler+0xa>
 8001a16:	bf00      	nop
 8001a18:	08007ad0 	.word	0x08007ad0
 8001a1c:	40010800 	.word	0x40010800

08001a20 <now_ms>:
static const uint32_t MAX_CONT_RUN_MS = 2UL * 60UL * 60UL * 1000UL; // 2h
static bool           maxRunTimerArmed = false;
static uint32_t       maxRunStartTick  = 0;

/* ===== Utilities ===== */
static inline uint32_t now_ms(void) { return HAL_GetTick(); }
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	f001 ff50 	bl	80038c8 <HAL_GetTick>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <motor_apply>:
    if (mm) *mm = (uint8_t)((sec % 3600UL) / 60UL);
}

/* ===== Motor ===== */
static void motor_apply(bool on)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	71fb      	strb	r3, [r7, #7]
    Relay_Set(1, on);
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	2001      	movs	r0, #1
 8001a40:	f000 fa78 	bl	8001f34 <Relay_Set>
    motorStatus = on ? 1U : 0U;
 8001a44:	79fb      	ldrb	r3, [r7, #7]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <motor_apply+0x1e>
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	e000      	b.n	8001a50 <motor_apply+0x20>
 8001a4e:	2200      	movs	r2, #0
 8001a50:	4b0d      	ldr	r3, [pc, #52]	@ (8001a88 <motor_apply+0x58>)
 8001a52:	701a      	strb	r2, [r3, #0]

    if (on) {
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00f      	beq.n	8001a7a <motor_apply+0x4a>
        if (!maxRunTimerArmed) {
 8001a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a8c <motor_apply+0x5c>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	f083 0301 	eor.w	r3, r3, #1
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d00b      	beq.n	8001a80 <motor_apply+0x50>
            maxRunTimerArmed = true;
 8001a68:	4b08      	ldr	r3, [pc, #32]	@ (8001a8c <motor_apply+0x5c>)
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	701a      	strb	r2, [r3, #0]
            maxRunStartTick  = now_ms();
 8001a6e:	f7ff ffd7 	bl	8001a20 <now_ms>
 8001a72:	4603      	mov	r3, r0
 8001a74:	4a06      	ldr	r2, [pc, #24]	@ (8001a90 <motor_apply+0x60>)
 8001a76:	6013      	str	r3, [r2, #0]
        }
    } else {
        maxRunTimerArmed = false;
    }
}
 8001a78:	e002      	b.n	8001a80 <motor_apply+0x50>
        maxRunTimerArmed = false;
 8001a7a:	4b04      	ldr	r3, [pc, #16]	@ (8001a8c <motor_apply+0x5c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	701a      	strb	r2, [r3, #0]
}
 8001a80:	bf00      	nop
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	20000368 	.word	0x20000368
 8001a8c:	200003c8 	.word	0x200003c8
 8001a90:	200003cc 	.word	0x200003cc

08001a94 <countdown_tick>:
    if (onMode) motor_apply(true);
    else        motor_apply(false);
}

static void countdown_tick(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
    if (!countdownActive) return;
 8001a9a:	4b1b      	ldr	r3, [pc, #108]	@ (8001b08 <countdown_tick+0x74>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	f083 0301 	eor.w	r3, r3, #1
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d12a      	bne.n	8001b00 <countdown_tick+0x6c>

    uint32_t tnow = now_ms();
 8001aaa:	f7ff ffb9 	bl	8001a20 <now_ms>
 8001aae:	6078      	str	r0, [r7, #4]
    if ((int32_t)(countdownDeadline - tnow) <= 0) {
 8001ab0:	4b16      	ldr	r3, [pc, #88]	@ (8001b0c <countdown_tick+0x78>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	dc12      	bgt.n	8001ae2 <countdown_tick+0x4e>
        if (countdownMode) motor_apply(false);
 8001abc:	4b14      	ldr	r3, [pc, #80]	@ (8001b10 <countdown_tick+0x7c>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <countdown_tick+0x3a>
 8001ac6:	2000      	movs	r0, #0
 8001ac8:	f7ff ffb2 	bl	8001a30 <motor_apply>
 8001acc:	e002      	b.n	8001ad4 <countdown_tick+0x40>
        else               motor_apply(true);
 8001ace:	2001      	movs	r0, #1
 8001ad0:	f7ff ffae 	bl	8001a30 <motor_apply>
        countdownActive   = false;
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8001b08 <countdown_tick+0x74>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	701a      	strb	r2, [r3, #0]
        countdownDuration = 0;
 8001ada:	4b0e      	ldr	r3, [pc, #56]	@ (8001b14 <countdown_tick+0x80>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
        return;
 8001ae0:	e00f      	b.n	8001b02 <countdown_tick+0x6e>
    }

    uint32_t remaining_ms = countdownDeadline - tnow;
 8001ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8001b0c <countdown_tick+0x78>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	603b      	str	r3, [r7, #0]
    countdownDuration = (remaining_ms + 999) / 1000;
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 8001af2:	4a09      	ldr	r2, [pc, #36]	@ (8001b18 <countdown_tick+0x84>)
 8001af4:	fba2 2303 	umull	r2, r3, r2, r3
 8001af8:	099b      	lsrs	r3, r3, #6
 8001afa:	4a06      	ldr	r2, [pc, #24]	@ (8001b14 <countdown_tick+0x80>)
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	e000      	b.n	8001b02 <countdown_tick+0x6e>
    if (!countdownActive) return;
 8001b00:	bf00      	nop
}
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20000369 	.word	0x20000369
 8001b0c:	20000370 	.word	0x20000370
 8001b10:	20000018 	.word	0x20000018
 8001b14:	2000036c 	.word	0x2000036c
 8001b18:	10624dd3 	.word	0x10624dd3

08001b1c <twist_tick>:
/* ===== Twist ===== */
static bool     twist_on_phase = false;
static uint32_t twist_phase_deadline = 0;

static void twist_tick(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
    if (!twistSettings.twistActive) return;
 8001b22:	4b22      	ldr	r3, [pc, #136]	@ (8001bac <twist_tick+0x90>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	f083 0301 	eor.w	r3, r3, #1
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d137      	bne.n	8001ba0 <twist_tick+0x84>

    uint32_t tnow = now_ms();
 8001b30:	f7ff ff76 	bl	8001a20 <now_ms>
 8001b34:	6078      	str	r0, [r7, #4]
    if ((int32_t)(twist_phase_deadline - tnow) > 0) return;
 8001b36:	4b1e      	ldr	r3, [pc, #120]	@ (8001bb0 <twist_tick+0x94>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	dc30      	bgt.n	8001ba4 <twist_tick+0x88>

    twist_on_phase = !twist_on_phase;
 8001b42:	4b1c      	ldr	r3, [pc, #112]	@ (8001bb4 <twist_tick+0x98>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	bf14      	ite	ne
 8001b4a:	2301      	movne	r3, #1
 8001b4c:	2300      	moveq	r3, #0
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	f083 0301 	eor.w	r3, r3, #1
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	b2da      	uxtb	r2, r3
 8001b5c:	4b15      	ldr	r3, [pc, #84]	@ (8001bb4 <twist_tick+0x98>)
 8001b5e:	701a      	strb	r2, [r3, #0]
    if (twist_on_phase) {
 8001b60:	4b14      	ldr	r3, [pc, #80]	@ (8001bb4 <twist_tick+0x98>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d00d      	beq.n	8001b84 <twist_tick+0x68>
        motor_apply(true);
 8001b68:	2001      	movs	r0, #1
 8001b6a:	f7ff ff61 	bl	8001a30 <motor_apply>
        twist_phase_deadline = tnow + (twistSettings.onDurationSeconds * 1000UL);
 8001b6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001bac <twist_tick+0x90>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001b76:	fb03 f202 	mul.w	r2, r3, r2
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	4a0c      	ldr	r2, [pc, #48]	@ (8001bb0 <twist_tick+0x94>)
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	e010      	b.n	8001ba6 <twist_tick+0x8a>
    } else {
        motor_apply(false);
 8001b84:	2000      	movs	r0, #0
 8001b86:	f7ff ff53 	bl	8001a30 <motor_apply>
        twist_phase_deadline = tnow + (twistSettings.offDurationSeconds * 1000UL);
 8001b8a:	4b08      	ldr	r3, [pc, #32]	@ (8001bac <twist_tick+0x90>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001b92:	fb03 f202 	mul.w	r2, r3, r2
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4413      	add	r3, r2
 8001b9a:	4a05      	ldr	r2, [pc, #20]	@ (8001bb0 <twist_tick+0x94>)
 8001b9c:	6013      	str	r3, [r2, #0]
 8001b9e:	e002      	b.n	8001ba6 <twist_tick+0x8a>
    if (!twistSettings.twistActive) return;
 8001ba0:	bf00      	nop
 8001ba2:	e000      	b.n	8001ba6 <twist_tick+0x8a>
    if ((int32_t)(twist_phase_deadline - tnow) > 0) return;
 8001ba4:	bf00      	nop
    }
}
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20000028 	.word	0x20000028
 8001bb0:	200003d4 	.word	0x200003d4
 8001bb4:	200003d0 	.word	0x200003d0

08001bb8 <search_tick>:
/* ===== Search ===== */
static bool     search_in_test = false;
static uint32_t search_phase_deadline = 0;

static void search_tick(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
    if (!searchSettings.searchActive) return;
 8001bbe:	4b1f      	ldr	r3, [pc, #124]	@ (8001c3c <search_tick+0x84>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	f083 0301 	eor.w	r3, r3, #1
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d131      	bne.n	8001c30 <search_tick+0x78>

    uint32_t tnow = now_ms();
 8001bcc:	f7ff ff28 	bl	8001a20 <now_ms>
 8001bd0:	6078      	str	r0, [r7, #4]
    if ((int32_t)(search_phase_deadline - tnow) > 0) return;
 8001bd2:	4b1b      	ldr	r3, [pc, #108]	@ (8001c40 <search_tick+0x88>)
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	dc2a      	bgt.n	8001c34 <search_tick+0x7c>

    if (!search_in_test) {
 8001bde:	4b19      	ldr	r3, [pc, #100]	@ (8001c44 <search_tick+0x8c>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	f083 0301 	eor.w	r3, r3, #1
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d010      	beq.n	8001c0e <search_tick+0x56>
        search_in_test = true;
 8001bec:	4b15      	ldr	r3, [pc, #84]	@ (8001c44 <search_tick+0x8c>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	701a      	strb	r2, [r3, #0]
        motor_apply(true);
 8001bf2:	2001      	movs	r0, #1
 8001bf4:	f7ff ff1c 	bl	8001a30 <motor_apply>
        search_phase_deadline = tnow + (searchSettings.dryRunTimeSeconds * 1000UL);
 8001bf8:	4b10      	ldr	r3, [pc, #64]	@ (8001c3c <search_tick+0x84>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c00:	fb03 f202 	mul.w	r2, r3, r2
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4413      	add	r3, r2
 8001c08:	4a0d      	ldr	r2, [pc, #52]	@ (8001c40 <search_tick+0x88>)
 8001c0a:	6013      	str	r3, [r2, #0]
 8001c0c:	e013      	b.n	8001c36 <search_tick+0x7e>
    } else {
        motor_apply(false);
 8001c0e:	2000      	movs	r0, #0
 8001c10:	f7ff ff0e 	bl	8001a30 <motor_apply>
        search_in_test = false;
 8001c14:	4b0b      	ldr	r3, [pc, #44]	@ (8001c44 <search_tick+0x8c>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	701a      	strb	r2, [r3, #0]
        search_phase_deadline = tnow + (searchSettings.testingGapSeconds * 1000UL);
 8001c1a:	4b08      	ldr	r3, [pc, #32]	@ (8001c3c <search_tick+0x84>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c22:	fb03 f202 	mul.w	r2, r3, r2
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4413      	add	r3, r2
 8001c2a:	4a05      	ldr	r2, [pc, #20]	@ (8001c40 <search_tick+0x88>)
 8001c2c:	6013      	str	r3, [r2, #0]
 8001c2e:	e002      	b.n	8001c36 <search_tick+0x7e>
    if (!searchSettings.searchActive) return;
 8001c30:	bf00      	nop
 8001c32:	e000      	b.n	8001c36 <search_tick+0x7e>
    if ((int32_t)(search_phase_deadline - tnow) > 0) return;
 8001c34:	bf00      	nop
    }
}
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	2000001c 	.word	0x2000001c
 8001c40:	200003dc 	.word	0x200003dc
 8001c44:	200003d8 	.word	0x200003d8

08001c48 <seconds_since_midnight>:

/* ===== Timer (daily window) ===== */
static uint32_t seconds_since_midnight(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
    uint32_t ms = now_ms() % (24UL*3600UL*1000UL);
 8001c4e:	f7ff fee7 	bl	8001a20 <now_ms>
 8001c52:	4603      	mov	r3, r0
 8001c54:	4a08      	ldr	r2, [pc, #32]	@ (8001c78 <seconds_since_midnight+0x30>)
 8001c56:	fba2 1203 	umull	r1, r2, r2, r3
 8001c5a:	0e12      	lsrs	r2, r2, #24
 8001c5c:	4907      	ldr	r1, [pc, #28]	@ (8001c7c <seconds_since_midnight+0x34>)
 8001c5e:	fb01 f202 	mul.w	r2, r1, r2
 8001c62:	1a9b      	subs	r3, r3, r2
 8001c64:	607b      	str	r3, [r7, #4]
    return ms / 1000UL;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a05      	ldr	r2, [pc, #20]	@ (8001c80 <seconds_since_midnight+0x38>)
 8001c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6e:	099b      	lsrs	r3, r3, #6
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	31b5d43b 	.word	0x31b5d43b
 8001c7c:	05265c00 	.word	0x05265c00
 8001c80:	10624dd3 	.word	0x10624dd3

08001c84 <timer_tick>:

static void timer_tick(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
    uint32_t nowS = seconds_since_midnight();
 8001c8a:	f7ff ffdd 	bl	8001c48 <seconds_since_midnight>
 8001c8e:	6078      	str	r0, [r7, #4]

    for (int i = 0; i < 5; i++) {
 8001c90:	2300      	movs	r3, #0
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	e042      	b.n	8001d1c <timer_tick+0x98>
        TimerSlot* s = &timerSlots[i];
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	011b      	lsls	r3, r3, #4
 8001c9a:	4a24      	ldr	r2, [pc, #144]	@ (8001d2c <timer_tick+0xa8>)
 8001c9c:	4413      	add	r3, r2
 8001c9e:	603b      	str	r3, [r7, #0]
        if (!s->active) continue;
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	f083 0301 	eor.w	r3, r3, #1
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d132      	bne.n	8001d14 <timer_tick+0x90>

        bool inWindow;
        if (s->onTimeSeconds <= s->offTimeSeconds) {
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685a      	ldr	r2, [r3, #4]
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d812      	bhi.n	8001ce0 <timer_tick+0x5c>
            inWindow = (nowS >= s->onTimeSeconds) && (nowS < s->offTimeSeconds);
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d306      	bcc.n	8001cd2 <timer_tick+0x4e>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d201      	bcs.n	8001cd2 <timer_tick+0x4e>
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e000      	b.n	8001cd4 <timer_tick+0x50>
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	72fb      	strb	r3, [r7, #11]
 8001cd6:	7afb      	ldrb	r3, [r7, #11]
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	72fb      	strb	r3, [r7, #11]
 8001cde:	e011      	b.n	8001d04 <timer_tick+0x80>
        } else {
            inWindow = (nowS >= s->onTimeSeconds) || (nowS < s->offTimeSeconds);
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d204      	bcs.n	8001cf4 <timer_tick+0x70>
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d201      	bcs.n	8001cf8 <timer_tick+0x74>
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e000      	b.n	8001cfa <timer_tick+0x76>
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	72fb      	strb	r3, [r7, #11]
 8001cfc:	7afb      	ldrb	r3, [r7, #11]
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	72fb      	strb	r3, [r7, #11]
        }

        if (i == 0) {
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d105      	bne.n	8001d16 <timer_tick+0x92>
            motor_apply(inWindow);
 8001d0a:	7afb      	ldrb	r3, [r7, #11]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff fe8f 	bl	8001a30 <motor_apply>
 8001d12:	e000      	b.n	8001d16 <timer_tick+0x92>
        if (!s->active) continue;
 8001d14:	bf00      	nop
    for (int i = 0; i < 5; i++) {
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2b04      	cmp	r3, #4
 8001d20:	ddb9      	ble.n	8001c96 <timer_tick+0x12>
        }
    }
}
 8001d22:	bf00      	nop
 8001d24:	bf00      	nop
 8001d26:	3710      	adds	r7, #16
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	20000374 	.word	0x20000374

08001d30 <protections_tick>:

/* ===== Protections ===== */
static void protections_tick(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
    /* ✅ Dry run: motor ON but ADC5 shows water missing */
    if (motorStatus == 1U && adcData.voltages[5] > 0.1f) {
 8001d34:	4b22      	ldr	r3, [pc, #136]	@ (8001dc0 <protections_tick+0x90>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d10f      	bne.n	8001d5e <protections_tick+0x2e>
 8001d3e:	4b21      	ldr	r3, [pc, #132]	@ (8001dc4 <protections_tick+0x94>)
 8001d40:	6a1b      	ldr	r3, [r3, #32]
 8001d42:	4921      	ldr	r1, [pc, #132]	@ (8001dc8 <protections_tick+0x98>)
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7fe fcdd 	bl	8000704 <__aeabi_fcmpgt>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d006      	beq.n	8001d5e <protections_tick+0x2e>
        senseDryRun = true;
 8001d50:	4b1e      	ldr	r3, [pc, #120]	@ (8001dcc <protections_tick+0x9c>)
 8001d52:	2201      	movs	r2, #1
 8001d54:	701a      	strb	r2, [r3, #0]
        motor_apply(false);
 8001d56:	2000      	movs	r0, #0
 8001d58:	f7ff fe6a 	bl	8001a30 <motor_apply>
 8001d5c:	e002      	b.n	8001d64 <protections_tick+0x34>
    } else {
        senseDryRun = false;
 8001d5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001dcc <protections_tick+0x9c>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]
    }

    if (senseOverLoad && motorStatus == 1U) {
 8001d64:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd0 <protections_tick+0xa0>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d007      	beq.n	8001d7e <protections_tick+0x4e>
 8001d6e:	4b14      	ldr	r3, [pc, #80]	@ (8001dc0 <protections_tick+0x90>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d102      	bne.n	8001d7e <protections_tick+0x4e>
        motor_apply(false);
 8001d78:	2000      	movs	r0, #0
 8001d7a:	f7ff fe59 	bl	8001a30 <motor_apply>
    }

    if (senseOverUnderVolt) {
 8001d7e:	4b15      	ldr	r3, [pc, #84]	@ (8001dd4 <protections_tick+0xa4>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d002      	beq.n	8001d8e <protections_tick+0x5e>
        motor_apply(false);
 8001d88:	2000      	movs	r0, #0
 8001d8a:	f7ff fe51 	bl	8001a30 <motor_apply>
    }

    if (maxRunTimerArmed && (now_ms() - maxRunStartTick) >= MAX_CONT_RUN_MS) {
 8001d8e:	4b12      	ldr	r3, [pc, #72]	@ (8001dd8 <protections_tick+0xa8>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d011      	beq.n	8001dba <protections_tick+0x8a>
 8001d96:	f7ff fe43 	bl	8001a20 <now_ms>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001ddc <protections_tick+0xac>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	4a0f      	ldr	r2, [pc, #60]	@ (8001de0 <protections_tick+0xb0>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d308      	bcc.n	8001dba <protections_tick+0x8a>
        motor_apply(false);
 8001da8:	2000      	movs	r0, #0
 8001daa:	f7ff fe41 	bl	8001a30 <motor_apply>
        senseMaxRunReached = true;
 8001dae:	4b0d      	ldr	r3, [pc, #52]	@ (8001de4 <protections_tick+0xb4>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	701a      	strb	r2, [r3, #0]
        maxRunTimerArmed = false;
 8001db4:	4b08      	ldr	r3, [pc, #32]	@ (8001dd8 <protections_tick+0xa8>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	701a      	strb	r2, [r3, #0]
    }
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000368 	.word	0x20000368
 8001dc4:	200002a4 	.word	0x200002a4
 8001dc8:	3dcccccd 	.word	0x3dcccccd
 8001dcc:	200003c4 	.word	0x200003c4
 8001dd0:	200003c5 	.word	0x200003c5
 8001dd4:	200003c6 	.word	0x200003c6
 8001dd8:	200003c8 	.word	0x200003c8
 8001ddc:	200003cc 	.word	0x200003cc
 8001de0:	006ddd00 	.word	0x006ddd00
 8001de4:	200003c7 	.word	0x200003c7

08001de8 <leds_from_model>:

/* ===== LED synthesis ===== */
static void leds_from_model(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
    LED_ClearAllIntents();
 8001dec:	f7ff fa78 	bl	80012e0 <LED_ClearAllIntents>

    if (motorStatus == 1U) {
 8001df0:	4b24      	ldr	r3, [pc, #144]	@ (8001e84 <leds_from_model+0x9c>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d104      	bne.n	8001e04 <leds_from_model+0x1c>
        LED_SetIntent(LED_COLOR_GREEN, LED_MODE_STEADY, 0);
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2101      	movs	r1, #1
 8001dfe:	2000      	movs	r0, #0
 8001e00:	f7ff fa8e 	bl	8001320 <LED_SetIntent>
    }
    if (countdownActive && countdownMode) {
 8001e04:	4b20      	ldr	r3, [pc, #128]	@ (8001e88 <leds_from_model+0xa0>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00a      	beq.n	8001e24 <leds_from_model+0x3c>
 8001e0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001e8c <leds_from_model+0xa4>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d005      	beq.n	8001e24 <leds_from_model+0x3c>
        LED_SetIntent(LED_COLOR_GREEN, LED_MODE_BLINK, 500);
 8001e18:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001e1c:	2102      	movs	r1, #2
 8001e1e:	2000      	movs	r0, #0
 8001e20:	f7ff fa7e 	bl	8001320 <LED_SetIntent>
    }
    if (senseDryRun) {
 8001e24:	4b1a      	ldr	r3, [pc, #104]	@ (8001e90 <leds_from_model+0xa8>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d004      	beq.n	8001e38 <leds_from_model+0x50>
        LED_SetIntent(LED_COLOR_RED, LED_MODE_STEADY, 0);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	2101      	movs	r1, #1
 8001e32:	2001      	movs	r0, #1
 8001e34:	f7ff fa74 	bl	8001320 <LED_SetIntent>
    }
    if (senseMaxRunReached) {
 8001e38:	4b16      	ldr	r3, [pc, #88]	@ (8001e94 <leds_from_model+0xac>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d005      	beq.n	8001e4e <leds_from_model+0x66>
        LED_SetIntent(LED_COLOR_RED, LED_MODE_BLINK, 400);
 8001e42:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001e46:	2102      	movs	r1, #2
 8001e48:	2001      	movs	r0, #1
 8001e4a:	f7ff fa69 	bl	8001320 <LED_SetIntent>
    }
    if (senseOverLoad) {
 8001e4e:	4b12      	ldr	r3, [pc, #72]	@ (8001e98 <leds_from_model+0xb0>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d005      	beq.n	8001e64 <leds_from_model+0x7c>
        LED_SetIntent(LED_COLOR_BLUE, LED_MODE_BLINK, 350);
 8001e58:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8001e5c:	2102      	movs	r1, #2
 8001e5e:	2002      	movs	r0, #2
 8001e60:	f7ff fa5e 	bl	8001320 <LED_SetIntent>
    }
    if (senseOverUnderVolt) {
 8001e64:	4b0d      	ldr	r3, [pc, #52]	@ (8001e9c <leds_from_model+0xb4>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d005      	beq.n	8001e7a <leds_from_model+0x92>
        LED_SetIntent(LED_COLOR_PURPLE, LED_MODE_BLINK, 350);
 8001e6e:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8001e72:	2102      	movs	r1, #2
 8001e74:	2003      	movs	r0, #3
 8001e76:	f7ff fa53 	bl	8001320 <LED_SetIntent>
    }

    LED_ApplyIntents();
 8001e7a:	f7ff fa71 	bl	8001360 <LED_ApplyIntents>
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20000368 	.word	0x20000368
 8001e88:	20000369 	.word	0x20000369
 8001e8c:	20000018 	.word	0x20000018
 8001e90:	200003c4 	.word	0x200003c4
 8001e94:	200003c7 	.word	0x200003c7
 8001e98:	200003c5 	.word	0x200003c5
 8001e9c:	200003c6 	.word	0x200003c6

08001ea0 <ModelHandle_ProcessUartCommand>:

/* ===== Command parser ===== */
void ModelHandle_ProcessUartCommand(const char* cmd)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
    if (!cmd || !*cmd) return;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d019      	beq.n	8001ee2 <ModelHandle_ProcessUartCommand+0x42>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d015      	beq.n	8001ee2 <ModelHandle_ProcessUartCommand+0x42>

    if (strcmp(cmd, "MOTOR_ON") == 0) {
 8001eb6:	490d      	ldr	r1, [pc, #52]	@ (8001eec <ModelHandle_ProcessUartCommand+0x4c>)
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f7fe f947 	bl	800014c <strcmp>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d103      	bne.n	8001ecc <ModelHandle_ProcessUartCommand+0x2c>
        motor_apply(true);
 8001ec4:	2001      	movs	r0, #1
 8001ec6:	f7ff fdb3 	bl	8001a30 <motor_apply>
 8001eca:	e00b      	b.n	8001ee4 <ModelHandle_ProcessUartCommand+0x44>
    }
    else if (strcmp(cmd, "MOTOR_OFF") == 0) {
 8001ecc:	4908      	ldr	r1, [pc, #32]	@ (8001ef0 <ModelHandle_ProcessUartCommand+0x50>)
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7fe f93c 	bl	800014c <strcmp>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d104      	bne.n	8001ee4 <ModelHandle_ProcessUartCommand+0x44>
        motor_apply(false);
 8001eda:	2000      	movs	r0, #0
 8001edc:	f7ff fda8 	bl	8001a30 <motor_apply>
 8001ee0:	e000      	b.n	8001ee4 <ModelHandle_ProcessUartCommand+0x44>
    if (!cmd || !*cmd) return;
 8001ee2:	bf00      	nop
    }
    /* ... rest of your command parsing unchanged ... */
}
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	08007af0 	.word	0x08007af0
 8001ef0:	08007afc 	.word	0x08007afc

08001ef4 <ModelHandle_Process>:
void ModelHandle_SetOverUnderVolt(bool on) { senseOverUnderVolt = on; }
void ModelHandle_ClearMaxRunFlag(void)     { senseMaxRunReached = false; }

/* ===== Main tick ===== */
void ModelHandle_Process(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
    countdown_tick();
 8001ef8:	f7ff fdcc 	bl	8001a94 <countdown_tick>
    twist_tick();
 8001efc:	f7ff fe0e 	bl	8001b1c <twist_tick>
    search_tick();
 8001f00:	f7ff fe5a 	bl	8001bb8 <search_tick>
    timer_tick();
 8001f04:	f7ff febe 	bl	8001c84 <timer_tick>
    protections_tick();
 8001f08:	f7ff ff12 	bl	8001d30 <protections_tick>
    leds_from_model();
 8001f0c:	f7ff ff6c 	bl	8001de8 <leds_from_model>
}
 8001f10:	bf00      	nop
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <Motor_GetStatus>:

/* ===== ✅ Added for screen.c ===== */
bool Motor_GetStatus(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
    return (motorStatus == 1U);
 8001f18:	4b05      	ldr	r3, [pc, #20]	@ (8001f30 <Motor_GetStatus+0x1c>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	bf0c      	ite	eq
 8001f22:	2301      	moveq	r3, #1
 8001f24:	2300      	movne	r3, #0
 8001f26:	b2db      	uxtb	r3, r3
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr
 8001f30:	20000368 	.word	0x20000368

08001f34 <Relay_Set>:
                          (RELAY_ACTIVE_STATE == GPIO_PIN_SET) ? GPIO_PIN_RESET : GPIO_PIN_SET);
    }
}

void Relay_Set(uint8_t relay_no, bool on)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	460a      	mov	r2, r1
 8001f3e:	71fb      	strb	r3, [r7, #7]
 8001f40:	4613      	mov	r3, r2
 8001f42:	71bb      	strb	r3, [r7, #6]
    if (relay_no == 0 || relay_no > NUM_RELAYS) return;
 8001f44:	79fb      	ldrb	r3, [r7, #7]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d012      	beq.n	8001f70 <Relay_Set+0x3c>
 8001f4a:	79fb      	ldrb	r3, [r7, #7]
 8001f4c:	2b03      	cmp	r3, #3
 8001f4e:	d80f      	bhi.n	8001f70 <Relay_Set+0x3c>

    HAL_GPIO_WritePin(relays[relay_no - 1].port,
 8001f50:	79fb      	ldrb	r3, [r7, #7]
 8001f52:	3b01      	subs	r3, #1
 8001f54:	4a08      	ldr	r2, [pc, #32]	@ (8001f78 <Relay_Set+0x44>)
 8001f56:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
                      relays[relay_no - 1].pin,
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	4a06      	ldr	r2, [pc, #24]	@ (8001f78 <Relay_Set+0x44>)
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	4413      	add	r3, r2
 8001f64:	889b      	ldrh	r3, [r3, #4]
    HAL_GPIO_WritePin(relays[relay_no - 1].port,
 8001f66:	79ba      	ldrb	r2, [r7, #6]
 8001f68:	4619      	mov	r1, r3
 8001f6a:	f002 fc8a 	bl	8004882 <HAL_GPIO_WritePin>
 8001f6e:	e000      	b.n	8001f72 <Relay_Set+0x3e>
    if (relay_no == 0 || relay_no > NUM_RELAYS) return;
 8001f70:	bf00      	nop
                      on ? RELAY_ACTIVE_STATE :
                           (RELAY_ACTIVE_STATE == GPIO_PIN_SET ? GPIO_PIN_RESET : GPIO_PIN_SET));
}
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	08007e80 	.word	0x08007e80

08001f7c <Relay_All>:

    return (s == RELAY_ACTIVE_STATE);
}

void Relay_All(bool on)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	71fb      	strb	r3, [r7, #7]
    for (int i = 1; i <= NUM_RELAYS; i++) {
 8001f86:	2301      	movs	r3, #1
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	e009      	b.n	8001fa0 <Relay_All+0x24>
        Relay_Set(i, on);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	79fa      	ldrb	r2, [r7, #7]
 8001f92:	4611      	mov	r1, r2
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff ffcd 	bl	8001f34 <Relay_Set>
    for (int i = 1; i <= NUM_RELAYS; i++) {
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2b03      	cmp	r3, #3
 8001fa4:	ddf2      	ble.n	8001f8c <Relay_All+0x10>
    }
}
 8001fa6:	bf00      	nop
 8001fa8:	bf00      	nop
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <RTC_InitWithBackup>:

extern void Debug_Print(char *msg);

/* ------------------ RTC Init with Backup ------------------ */
void RTC_InitWithBackup(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
    HAL_PWR_EnableBkUpAccess();
 8001fb6:	f003 f931 	bl	800521c <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_LSI_ENABLE();
 8001fba:	4b21      	ldr	r3, [pc, #132]	@ (8002040 <RTC_InitWithBackup+0x90>)
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET);
 8001fc0:	bf00      	nop
 8001fc2:	4b20      	ldr	r3, [pc, #128]	@ (8002044 <RTC_InitWithBackup+0x94>)
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d0f9      	beq.n	8001fc2 <RTC_InitWithBackup+0x12>

    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fce:	463b      	mov	r3, r7
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	603b      	str	r3, [r7, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001fde:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fe2:	607b      	str	r3, [r7, #4]
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8001fe4:	463b      	mov	r3, r7
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f003 fd34 	bl	8005a54 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_RTC_ENABLE();
 8001fec:	4b16      	ldr	r3, [pc, #88]	@ (8002048 <RTC_InitWithBackup+0x98>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	601a      	str	r2, [r3, #0]

    hrtc.Instance = RTC;
 8001ff2:	4b16      	ldr	r3, [pc, #88]	@ (800204c <RTC_InitWithBackup+0x9c>)
 8001ff4:	4a16      	ldr	r2, [pc, #88]	@ (8002050 <RTC_InitWithBackup+0xa0>)
 8001ff6:	601a      	str	r2, [r3, #0]
    hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001ff8:	4b14      	ldr	r3, [pc, #80]	@ (800204c <RTC_InitWithBackup+0x9c>)
 8001ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8001ffe:	605a      	str	r2, [r3, #4]
    hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8002000:	4b12      	ldr	r3, [pc, #72]	@ (800204c <RTC_InitWithBackup+0x9c>)
 8002002:	2200      	movs	r2, #0
 8002004:	609a      	str	r2, [r3, #8]

    if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002006:	4811      	ldr	r0, [pc, #68]	@ (800204c <RTC_InitWithBackup+0x9c>)
 8002008:	f003 fe90 	bl	8005d2c <HAL_RTC_Init>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <RTC_InitWithBackup+0x6a>
    {
        Debug_Print("RTC Init failed\r\n");
 8002012:	4810      	ldr	r0, [pc, #64]	@ (8002054 <RTC_InitWithBackup+0xa4>)
 8002014:	f7ff fa70 	bl	80014f8 <Debug_Print>
 8002018:	e00f      	b.n	800203a <RTC_InitWithBackup+0x8a>
        return;
    }

    if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) == 0x32F2)
 800201a:	2101      	movs	r1, #1
 800201c:	480b      	ldr	r0, [pc, #44]	@ (800204c <RTC_InitWithBackup+0x9c>)
 800201e:	f004 faf5 	bl	800660c <HAL_RTCEx_BKUPRead>
 8002022:	4603      	mov	r3, r0
 8002024:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 8002028:	4293      	cmp	r3, r2
 800202a:	d103      	bne.n	8002034 <RTC_InitWithBackup+0x84>
        Debug_Print("RTC already initialized\r\n");
 800202c:	480a      	ldr	r0, [pc, #40]	@ (8002058 <RTC_InitWithBackup+0xa8>)
 800202e:	f7ff fa63 	bl	80014f8 <Debug_Print>
 8002032:	e002      	b.n	800203a <RTC_InitWithBackup+0x8a>
    else
        Debug_Print("RTC not initialized. Please set time/date now.\r\n");
 8002034:	4809      	ldr	r0, [pc, #36]	@ (800205c <RTC_InitWithBackup+0xac>)
 8002036:	f7ff fa5f 	bl	80014f8 <Debug_Print>
}
 800203a:	3710      	adds	r7, #16
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	42420480 	.word	0x42420480
 8002044:	40021000 	.word	0x40021000
 8002048:	4242043c 	.word	0x4242043c
 800204c:	200001f0 	.word	0x200001f0
 8002050:	40002800 	.word	0x40002800
 8002054:	08007b08 	.word	0x08007b08
 8002058:	08007b1c 	.word	0x08007b1c
 800205c:	08007b38 	.word	0x08007b38

08002060 <lcd_line>:
static uint16_t edit_search_gap_s = 60, edit_search_dry_s = 10;
static uint16_t edit_twist_on_s = 5, edit_twist_off_s = 5;
static uint16_t edit_countdown_min = 5;

/* ===== LCD Helpers ===== */
static inline void lcd_line(uint8_t row, const char* s) {
 8002060:	b580      	push	{r7, lr}
 8002062:	b088      	sub	sp, #32
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	6039      	str	r1, [r7, #0]
 800206a:	71fb      	strb	r3, [r7, #7]
    char ln[17];
    snprintf(ln, sizeof(ln), "%-16.16s", s);
 800206c:	f107 000c 	add.w	r0, r7, #12
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	4a09      	ldr	r2, [pc, #36]	@ (8002098 <lcd_line+0x38>)
 8002074:	2111      	movs	r1, #17
 8002076:	f004 ffe9 	bl	800704c <sniprintf>
    lcd_put_cur(row, 0);
 800207a:	79fb      	ldrb	r3, [r7, #7]
 800207c:	2100      	movs	r1, #0
 800207e:	4618      	mov	r0, r3
 8002080:	f7fe fff6 	bl	8001070 <lcd_put_cur>
    lcd_send_string(ln);
 8002084:	f107 030c 	add.w	r3, r7, #12
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff f813 	bl	80010b4 <lcd_send_string>
}
 800208e:	bf00      	nop
 8002090:	3720      	adds	r7, #32
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	08007bec 	.word	0x08007bec

0800209c <lcd_line0>:
static inline void lcd_line0(const char* s){ lcd_line(0,s); }
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6879      	ldr	r1, [r7, #4]
 80020a6:	2000      	movs	r0, #0
 80020a8:	f7ff ffda 	bl	8002060 <lcd_line>
 80020ac:	bf00      	nop
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <lcd_line1>:
static inline void lcd_line1(const char* s){ lcd_line(1,s); }
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6879      	ldr	r1, [r7, #4]
 80020be:	2001      	movs	r0, #1
 80020c0:	f7ff ffce 	bl	8002060 <lcd_line>
 80020c4:	bf00      	nop
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <refreshInactivityTimer>:

/* ===== Utilities ===== */
static void refreshInactivityTimer(void){ lastUserAction = HAL_GetTick(); }
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	f001 fbfa 	bl	80038c8 <HAL_GetTick>
 80020d4:	4603      	mov	r3, r0
 80020d6:	4a02      	ldr	r2, [pc, #8]	@ (80020e0 <refreshInactivityTimer+0x14>)
 80020d8:	6013      	str	r3, [r2, #0]
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	200003ec 	.word	0x200003ec

080020e4 <goto_menu_top>:
static void goto_menu_top(void){ menu_idx = 0; menu_view_top = 0; }
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	4b04      	ldr	r3, [pc, #16]	@ (80020fc <goto_menu_top+0x18>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	4b04      	ldr	r3, [pc, #16]	@ (8002100 <goto_menu_top+0x1c>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	bf00      	nop
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr
 80020fc:	200003f4 	.word	0x200003f4
 8002100:	200003f8 	.word	0x200003f8

08002104 <format_menu_line>:

/* ===== Helper: format menu line ===== */
static void format_menu_line(char* buf, size_t bufsize, int idx, bool selected){
 8002104:	b580      	push	{r7, lr}
 8002106:	b08c      	sub	sp, #48	@ 0x30
 8002108:	af02      	add	r7, sp, #8
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
 8002110:	70fb      	strb	r3, [r7, #3]
    if (idx < MAIN_MENU_COUNT && idx >= 0) {
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b06      	cmp	r3, #6
 8002116:	d820      	bhi.n	800215a <format_menu_line+0x56>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	db1d      	blt.n	800215a <format_menu_line+0x56>
        char prefix = selected ? '>' : ' ';
 800211e:	78fb      	ldrb	r3, [r7, #3]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <format_menu_line+0x24>
 8002124:	233e      	movs	r3, #62	@ 0x3e
 8002126:	e000      	b.n	800212a <format_menu_line+0x26>
 8002128:	2320      	movs	r3, #32
 800212a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        char item[16];
        snprintf(item, sizeof(item), "%-15.15s", main_menu[idx]);
 800212e:	4a10      	ldr	r2, [pc, #64]	@ (8002170 <format_menu_line+0x6c>)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002136:	f107 0014 	add.w	r0, r7, #20
 800213a:	4a0e      	ldr	r2, [pc, #56]	@ (8002174 <format_menu_line+0x70>)
 800213c:	2110      	movs	r1, #16
 800213e:	f004 ff85 	bl	800704c <sniprintf>
        snprintf(buf, bufsize, "%c%s", prefix, item);
 8002142:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002146:	f107 0314 	add.w	r3, r7, #20
 800214a:	9300      	str	r3, [sp, #0]
 800214c:	4613      	mov	r3, r2
 800214e:	4a0a      	ldr	r2, [pc, #40]	@ (8002178 <format_menu_line+0x74>)
 8002150:	68b9      	ldr	r1, [r7, #8]
 8002152:	68f8      	ldr	r0, [r7, #12]
 8002154:	f004 ff7a 	bl	800704c <sniprintf>
    if (idx < MAIN_MENU_COUNT && idx >= 0) {
 8002158:	e005      	b.n	8002166 <format_menu_line+0x62>
    } else {
        snprintf(buf, bufsize, "                ");
 800215a:	4a08      	ldr	r2, [pc, #32]	@ (800217c <format_menu_line+0x78>)
 800215c:	68b9      	ldr	r1, [r7, #8]
 800215e:	68f8      	ldr	r0, [r7, #12]
 8002160:	f004 ff74 	bl	800704c <sniprintf>
    }
}
 8002164:	bf00      	nop
 8002166:	bf00      	nop
 8002168:	3728      	adds	r7, #40	@ 0x28
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	20000038 	.word	0x20000038
 8002174:	08007bf8 	.word	0x08007bf8
 8002178:	08007c04 	.word	0x08007c04
 800217c:	08007c0c 	.word	0x08007c0c

08002180 <show_welcome>:

/* ===== Render functions ===== */

static void show_welcome(void){
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
    lcd_clear();
 8002184:	f7fe ff67 	bl	8001056 <lcd_clear>
    lcd_line0("  Welcome to ");
 8002188:	4803      	ldr	r0, [pc, #12]	@ (8002198 <show_welcome+0x18>)
 800218a:	f7ff ff87 	bl	800209c <lcd_line0>
    lcd_line1("   HELONIX   ");
 800218e:	4803      	ldr	r0, [pc, #12]	@ (800219c <show_welcome+0x1c>)
 8002190:	f7ff ff90 	bl	80020b4 <lcd_line1>
}
 8002194:	bf00      	nop
 8002196:	bd80      	pop	{r7, pc}
 8002198:	08007c20 	.word	0x08007c20
 800219c:	08007c30 	.word	0x08007c30

080021a0 <show_dash>:

static void show_dash(void) {
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08e      	sub	sp, #56	@ 0x38
 80021a4:	af00      	add	r7, sp, #0
    char line0[17], line1[17];
    // Motor status
    const char *motor = Motor_GetStatus() ? "ON" : "OFF";
 80021a6:	f7ff feb5 	bl	8001f14 <Motor_GetStatus>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <show_dash+0x14>
 80021b0:	4b2a      	ldr	r3, [pc, #168]	@ (800225c <show_dash+0xbc>)
 80021b2:	e000      	b.n	80021b6 <show_dash+0x16>
 80021b4:	4b2a      	ldr	r3, [pc, #168]	@ (8002260 <show_dash+0xc0>)
 80021b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    snprintf(line0,sizeof(line0),"Motor:%-3s",motor);
 80021b8:	f107 0014 	add.w	r0, r7, #20
 80021bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021be:	4a29      	ldr	r2, [pc, #164]	@ (8002264 <show_dash+0xc4>)
 80021c0:	2111      	movs	r1, #17
 80021c2:	f004 ff43 	bl	800704c <sniprintf>

    // Water level based on count of sensors 0–4 reading <0.1V
    int submergedCount = 0;
 80021c6:	2300      	movs	r3, #0
 80021c8:	637b      	str	r3, [r7, #52]	@ 0x34
    for (int i=0; i<5; i++) {
 80021ca:	2300      	movs	r3, #0
 80021cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80021ce:	e012      	b.n	80021f6 <show_dash+0x56>
        if (adcData.voltages[i] < 0.1f) submergedCount++;
 80021d0:	4a25      	ldr	r2, [pc, #148]	@ (8002268 <show_dash+0xc8>)
 80021d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021d4:	3302      	adds	r3, #2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	4923      	ldr	r1, [pc, #140]	@ (800226c <show_dash+0xcc>)
 80021de:	4618      	mov	r0, r3
 80021e0:	f7fe fa72 	bl	80006c8 <__aeabi_fcmplt>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d002      	beq.n	80021f0 <show_dash+0x50>
 80021ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021ec:	3301      	adds	r3, #1
 80021ee:	637b      	str	r3, [r7, #52]	@ 0x34
    for (int i=0; i<5; i++) {
 80021f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021f2:	3301      	adds	r3, #1
 80021f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80021f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021f8:	2b04      	cmp	r3, #4
 80021fa:	dde9      	ble.n	80021d0 <show_dash+0x30>
    }

    const char *level;
    switch (submergedCount) {
 80021fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021fe:	2b03      	cmp	r3, #3
 8002200:	d816      	bhi.n	8002230 <show_dash+0x90>
 8002202:	a201      	add	r2, pc, #4	@ (adr r2, 8002208 <show_dash+0x68>)
 8002204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002208:	08002219 	.word	0x08002219
 800220c:	0800221f 	.word	0x0800221f
 8002210:	08002225 	.word	0x08002225
 8002214:	0800222b 	.word	0x0800222b
        case 0:  level = "EMPTY"; break;
 8002218:	4b15      	ldr	r3, [pc, #84]	@ (8002270 <show_dash+0xd0>)
 800221a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800221c:	e00b      	b.n	8002236 <show_dash+0x96>
        case 1:  level = "LOW";   break;
 800221e:	4b15      	ldr	r3, [pc, #84]	@ (8002274 <show_dash+0xd4>)
 8002220:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002222:	e008      	b.n	8002236 <show_dash+0x96>
        case 2:  level = "HALF";  break;
 8002224:	4b14      	ldr	r3, [pc, #80]	@ (8002278 <show_dash+0xd8>)
 8002226:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002228:	e005      	b.n	8002236 <show_dash+0x96>
        case 3:  level = "3/4";   break;
 800222a:	4b14      	ldr	r3, [pc, #80]	@ (800227c <show_dash+0xdc>)
 800222c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800222e:	e002      	b.n	8002236 <show_dash+0x96>
        default: level = "FULL";  break;
 8002230:	4b13      	ldr	r3, [pc, #76]	@ (8002280 <show_dash+0xe0>)
 8002232:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002234:	bf00      	nop
    }

    snprintf(line1,sizeof(line1),"Water:%-5s",level);
 8002236:	4638      	mov	r0, r7
 8002238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800223a:	4a12      	ldr	r2, [pc, #72]	@ (8002284 <show_dash+0xe4>)
 800223c:	2111      	movs	r1, #17
 800223e:	f004 ff05 	bl	800704c <sniprintf>

    lcd_line0(line0);
 8002242:	f107 0314 	add.w	r3, r7, #20
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff ff28 	bl	800209c <lcd_line0>
    lcd_line1(line1);
 800224c:	463b      	mov	r3, r7
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff ff30 	bl	80020b4 <lcd_line1>

}
 8002254:	bf00      	nop
 8002256:	3738      	adds	r7, #56	@ 0x38
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	08007c40 	.word	0x08007c40
 8002260:	08007c44 	.word	0x08007c44
 8002264:	08007c48 	.word	0x08007c48
 8002268:	200002a4 	.word	0x200002a4
 800226c:	3dcccccd 	.word	0x3dcccccd
 8002270:	08007c54 	.word	0x08007c54
 8002274:	08007c5c 	.word	0x08007c5c
 8002278:	08007c60 	.word	0x08007c60
 800227c:	08007c68 	.word	0x08007c68
 8002280:	08007c6c 	.word	0x08007c6c
 8002284:	08007c74 	.word	0x08007c74

08002288 <show_menu>:

static void show_menu(void){
 8002288:	b580      	push	{r7, lr}
 800228a:	b08a      	sub	sp, #40	@ 0x28
 800228c:	af00      	add	r7, sp, #0
    char line0[17], line1[17];
    if (menu_idx < menu_view_top) menu_view_top = menu_idx;
 800228e:	4b2a      	ldr	r3, [pc, #168]	@ (8002338 <show_menu+0xb0>)
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	4b2a      	ldr	r3, [pc, #168]	@ (800233c <show_menu+0xb4>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	429a      	cmp	r2, r3
 8002298:	da04      	bge.n	80022a4 <show_menu+0x1c>
 800229a:	4b27      	ldr	r3, [pc, #156]	@ (8002338 <show_menu+0xb0>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a27      	ldr	r2, [pc, #156]	@ (800233c <show_menu+0xb4>)
 80022a0:	6013      	str	r3, [r2, #0]
 80022a2:	e00b      	b.n	80022bc <show_menu+0x34>
    else if (menu_idx > menu_view_top+1) menu_view_top = menu_idx-1;
 80022a4:	4b25      	ldr	r3, [pc, #148]	@ (800233c <show_menu+0xb4>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	1c5a      	adds	r2, r3, #1
 80022aa:	4b23      	ldr	r3, [pc, #140]	@ (8002338 <show_menu+0xb0>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	da04      	bge.n	80022bc <show_menu+0x34>
 80022b2:	4b21      	ldr	r3, [pc, #132]	@ (8002338 <show_menu+0xb0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	3b01      	subs	r3, #1
 80022b8:	4a20      	ldr	r2, [pc, #128]	@ (800233c <show_menu+0xb4>)
 80022ba:	6013      	str	r3, [r2, #0]
    format_menu_line(line0,sizeof(line0),menu_view_top,menu_idx==menu_view_top && cursorVisible);
 80022bc:	4b1f      	ldr	r3, [pc, #124]	@ (800233c <show_menu+0xb4>)
 80022be:	6819      	ldr	r1, [r3, #0]
 80022c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002338 <show_menu+0xb0>)
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	4b1d      	ldr	r3, [pc, #116]	@ (800233c <show_menu+0xb4>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d105      	bne.n	80022d8 <show_menu+0x50>
 80022cc:	4b1c      	ldr	r3, [pc, #112]	@ (8002340 <show_menu+0xb8>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <show_menu+0x50>
 80022d4:	2301      	movs	r3, #1
 80022d6:	e000      	b.n	80022da <show_menu+0x52>
 80022d8:	2300      	movs	r3, #0
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	f107 0014 	add.w	r0, r7, #20
 80022e4:	460a      	mov	r2, r1
 80022e6:	2111      	movs	r1, #17
 80022e8:	f7ff ff0c 	bl	8002104 <format_menu_line>
    format_menu_line(line1,sizeof(line1),menu_view_top+1,menu_idx==(menu_view_top+1) && cursorVisible);
 80022ec:	4b13      	ldr	r3, [pc, #76]	@ (800233c <show_menu+0xb4>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	1c59      	adds	r1, r3, #1
 80022f2:	4b12      	ldr	r3, [pc, #72]	@ (800233c <show_menu+0xb4>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	1c5a      	adds	r2, r3, #1
 80022f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002338 <show_menu+0xb0>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d105      	bne.n	800230c <show_menu+0x84>
 8002300:	4b0f      	ldr	r3, [pc, #60]	@ (8002340 <show_menu+0xb8>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <show_menu+0x84>
 8002308:	2301      	movs	r3, #1
 800230a:	e000      	b.n	800230e <show_menu+0x86>
 800230c:	2300      	movs	r3, #0
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	b2db      	uxtb	r3, r3
 8002314:	4638      	mov	r0, r7
 8002316:	460a      	mov	r2, r1
 8002318:	2111      	movs	r1, #17
 800231a:	f7ff fef3 	bl	8002104 <format_menu_line>
    lcd_line0(line0);
 800231e:	f107 0314 	add.w	r3, r7, #20
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff feba 	bl	800209c <lcd_line0>
    lcd_line1(line1);
 8002328:	463b      	mov	r3, r7
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff fec2 	bl	80020b4 <lcd_line1>
}
 8002330:	bf00      	nop
 8002332:	3728      	adds	r7, #40	@ 0x28
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	200003f4 	.word	0x200003f4
 800233c:	200003f8 	.word	0x200003f8
 8002340:	20000035 	.word	0x20000035

08002344 <show_manual>:

static void show_manual(void){
 8002344:	b580      	push	{r7, lr}
 8002346:	b08a      	sub	sp, #40	@ 0x28
 8002348:	af00      	add	r7, sp, #0
    char line0[17], line1[17];
    snprintf(line0,sizeof(line0),"Manual Mode");
 800234a:	f107 0314 	add.w	r3, r7, #20
 800234e:	4a12      	ldr	r2, [pc, #72]	@ (8002398 <show_manual+0x54>)
 8002350:	2111      	movs	r1, #17
 8002352:	4618      	mov	r0, r3
 8002354:	f004 fe7a 	bl	800704c <sniprintf>
    if (Motor_GetStatus()) snprintf(line1,sizeof(line1),">Stop     Back");
 8002358:	f7ff fddc 	bl	8001f14 <Motor_GetStatus>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d006      	beq.n	8002370 <show_manual+0x2c>
 8002362:	463b      	mov	r3, r7
 8002364:	4a0d      	ldr	r2, [pc, #52]	@ (800239c <show_manual+0x58>)
 8002366:	2111      	movs	r1, #17
 8002368:	4618      	mov	r0, r3
 800236a:	f004 fe6f 	bl	800704c <sniprintf>
 800236e:	e005      	b.n	800237c <show_manual+0x38>
    else snprintf(line1,sizeof(line1),">Start    Back");
 8002370:	463b      	mov	r3, r7
 8002372:	4a0b      	ldr	r2, [pc, #44]	@ (80023a0 <show_manual+0x5c>)
 8002374:	2111      	movs	r1, #17
 8002376:	4618      	mov	r0, r3
 8002378:	f004 fe68 	bl	800704c <sniprintf>
    lcd_line0(line0);
 800237c:	f107 0314 	add.w	r3, r7, #20
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff fe8b 	bl	800209c <lcd_line0>
    lcd_line1(line1);
 8002386:	463b      	mov	r3, r7
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff fe93 	bl	80020b4 <lcd_line1>
}
 800238e:	bf00      	nop
 8002390:	3728      	adds	r7, #40	@ 0x28
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	08007b90 	.word	0x08007b90
 800239c:	08007c80 	.word	0x08007c80
 80023a0:	08007c90 	.word	0x08007c90

080023a4 <show_semi_auto>:

static void show_semi_auto(void){
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08a      	sub	sp, #40	@ 0x28
 80023a8:	af00      	add	r7, sp, #0
    char line0[17], line1[17];
    snprintf(line0,sizeof(line0),"Semi-Auto Mode");
 80023aa:	f107 0314 	add.w	r3, r7, #20
 80023ae:	4a11      	ldr	r2, [pc, #68]	@ (80023f4 <show_semi_auto+0x50>)
 80023b0:	2111      	movs	r1, #17
 80023b2:	4618      	mov	r0, r3
 80023b4:	f004 fe4a 	bl	800704c <sniprintf>
    if (semiAutoEnabled) snprintf(line1,sizeof(line1),">Disable  Back");
 80023b8:	4b0f      	ldr	r3, [pc, #60]	@ (80023f8 <show_semi_auto+0x54>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d006      	beq.n	80023ce <show_semi_auto+0x2a>
 80023c0:	463b      	mov	r3, r7
 80023c2:	4a0e      	ldr	r2, [pc, #56]	@ (80023fc <show_semi_auto+0x58>)
 80023c4:	2111      	movs	r1, #17
 80023c6:	4618      	mov	r0, r3
 80023c8:	f004 fe40 	bl	800704c <sniprintf>
 80023cc:	e005      	b.n	80023da <show_semi_auto+0x36>
    else snprintf(line1,sizeof(line1),">Enable   Back");
 80023ce:	463b      	mov	r3, r7
 80023d0:	4a0b      	ldr	r2, [pc, #44]	@ (8002400 <show_semi_auto+0x5c>)
 80023d2:	2111      	movs	r1, #17
 80023d4:	4618      	mov	r0, r3
 80023d6:	f004 fe39 	bl	800704c <sniprintf>
    lcd_line0(line0);
 80023da:	f107 0314 	add.w	r3, r7, #20
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff fe5c 	bl	800209c <lcd_line0>
    lcd_line1(line1);
 80023e4:	463b      	mov	r3, r7
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7ff fe64 	bl	80020b4 <lcd_line1>
}
 80023ec:	bf00      	nop
 80023ee:	3728      	adds	r7, #40	@ 0x28
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	08007b9c 	.word	0x08007b9c
 80023f8:	200003f0 	.word	0x200003f0
 80023fc:	08007ca0 	.word	0x08007ca0
 8002400:	08007cb0 	.word	0x08007cb0

08002404 <show_timer>:

static void show_timer(void){
 8002404:	b580      	push	{r7, lr}
 8002406:	b08c      	sub	sp, #48	@ 0x30
 8002408:	af02      	add	r7, sp, #8
    char l0[17], l1[17];
    snprintf(l0,sizeof(l0),"T1 ON %02d:%02d",edit_timer_on_h,edit_timer_on_m);
 800240a:	4b13      	ldr	r3, [pc, #76]	@ (8002458 <show_timer+0x54>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	461a      	mov	r2, r3
 8002410:	4b12      	ldr	r3, [pc, #72]	@ (800245c <show_timer+0x58>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	f107 0014 	add.w	r0, r7, #20
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	4613      	mov	r3, r2
 800241c:	4a10      	ldr	r2, [pc, #64]	@ (8002460 <show_timer+0x5c>)
 800241e:	2111      	movs	r1, #17
 8002420:	f004 fe14 	bl	800704c <sniprintf>
    snprintf(l1,sizeof(l1),"T1 OFF %02d:%02d",edit_timer_off_h,edit_timer_off_m);
 8002424:	4b0f      	ldr	r3, [pc, #60]	@ (8002464 <show_timer+0x60>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	461a      	mov	r2, r3
 800242a:	4b0f      	ldr	r3, [pc, #60]	@ (8002468 <show_timer+0x64>)
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	4638      	mov	r0, r7
 8002430:	9300      	str	r3, [sp, #0]
 8002432:	4613      	mov	r3, r2
 8002434:	4a0d      	ldr	r2, [pc, #52]	@ (800246c <show_timer+0x68>)
 8002436:	2111      	movs	r1, #17
 8002438:	f004 fe08 	bl	800704c <sniprintf>
    lcd_line0(l0);
 800243c:	f107 0314 	add.w	r3, r7, #20
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff fe2b 	bl	800209c <lcd_line0>
    lcd_line1(l1);
 8002446:	463b      	mov	r3, r7
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff fe33 	bl	80020b4 <lcd_line1>
}
 800244e:	bf00      	nop
 8002450:	3728      	adds	r7, #40	@ 0x28
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	20000054 	.word	0x20000054
 800245c:	20000055 	.word	0x20000055
 8002460:	08007cc0 	.word	0x08007cc0
 8002464:	20000056 	.word	0x20000056
 8002468:	20000057 	.word	0x20000057
 800246c:	08007cd0 	.word	0x08007cd0

08002470 <show_search>:

static void show_search(void){
 8002470:	b580      	push	{r7, lr}
 8002472:	b08c      	sub	sp, #48	@ 0x30
 8002474:	af02      	add	r7, sp, #8
    char l0[17], l1[17];
    snprintf(l0,sizeof(l0),"Gap:%3ds Dry:%3ds",edit_search_gap_s,edit_search_dry_s);
 8002476:	4b10      	ldr	r3, [pc, #64]	@ (80024b8 <show_search+0x48>)
 8002478:	881b      	ldrh	r3, [r3, #0]
 800247a:	461a      	mov	r2, r3
 800247c:	4b0f      	ldr	r3, [pc, #60]	@ (80024bc <show_search+0x4c>)
 800247e:	881b      	ldrh	r3, [r3, #0]
 8002480:	f107 0014 	add.w	r0, r7, #20
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	4613      	mov	r3, r2
 8002488:	4a0d      	ldr	r2, [pc, #52]	@ (80024c0 <show_search+0x50>)
 800248a:	2111      	movs	r1, #17
 800248c:	f004 fdde 	bl	800704c <sniprintf>
    snprintf(l1,sizeof(l1),">Edit     Back");
 8002490:	463b      	mov	r3, r7
 8002492:	4a0c      	ldr	r2, [pc, #48]	@ (80024c4 <show_search+0x54>)
 8002494:	2111      	movs	r1, #17
 8002496:	4618      	mov	r0, r3
 8002498:	f004 fdd8 	bl	800704c <sniprintf>
    lcd_line0(l0);
 800249c:	f107 0314 	add.w	r3, r7, #20
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff fdfb 	bl	800209c <lcd_line0>
    lcd_line1(l1);
 80024a6:	463b      	mov	r3, r7
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff fe03 	bl	80020b4 <lcd_line1>
}
 80024ae:	bf00      	nop
 80024b0:	3728      	adds	r7, #40	@ 0x28
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	20000058 	.word	0x20000058
 80024bc:	2000005a 	.word	0x2000005a
 80024c0:	08007ce4 	.word	0x08007ce4
 80024c4:	08007cf8 	.word	0x08007cf8

080024c8 <show_countdown>:

static void show_countdown(void){
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b090      	sub	sp, #64	@ 0x40
 80024cc:	af02      	add	r7, sp, #8
    char l0[17], l1[17];
    if (countdownActive) {
 80024ce:	4b1f      	ldr	r3, [pc, #124]	@ (800254c <show_countdown+0x84>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d01e      	beq.n	8002516 <show_countdown+0x4e>
        uint32_t sec = countdownDuration;
 80024d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002550 <show_countdown+0x88>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	637b      	str	r3, [r7, #52]	@ 0x34
        uint32_t min = sec/60;
 80024de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024e0:	4a1c      	ldr	r2, [pc, #112]	@ (8002554 <show_countdown+0x8c>)
 80024e2:	fba2 2303 	umull	r2, r3, r2, r3
 80024e6:	095b      	lsrs	r3, r3, #5
 80024e8:	633b      	str	r3, [r7, #48]	@ 0x30
        uint32_t s = sec%60;
 80024ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80024ec:	4b19      	ldr	r3, [pc, #100]	@ (8002554 <show_countdown+0x8c>)
 80024ee:	fba3 1302 	umull	r1, r3, r3, r2
 80024f2:	0959      	lsrs	r1, r3, #5
 80024f4:	460b      	mov	r3, r1
 80024f6:	011b      	lsls	r3, r3, #4
 80024f8:	1a5b      	subs	r3, r3, r1
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        snprintf(l0,sizeof(l0),"Count %02d:%02d",(int)min,(int)s);
 8002500:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002504:	f107 0018 	add.w	r0, r7, #24
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	4613      	mov	r3, r2
 800250c:	4a12      	ldr	r2, [pc, #72]	@ (8002558 <show_countdown+0x90>)
 800250e:	2111      	movs	r1, #17
 8002510:	f004 fd9c 	bl	800704c <sniprintf>
 8002514:	e006      	b.n	8002524 <show_countdown+0x5c>
    } else {
        snprintf(l0,sizeof(l0),"Countdown Inact");
 8002516:	f107 0318 	add.w	r3, r7, #24
 800251a:	4a10      	ldr	r2, [pc, #64]	@ (800255c <show_countdown+0x94>)
 800251c:	2111      	movs	r1, #17
 800251e:	4618      	mov	r0, r3
 8002520:	f004 fd94 	bl	800704c <sniprintf>
    }
    snprintf(l1,sizeof(l1),">Set Start Back");
 8002524:	1d3b      	adds	r3, r7, #4
 8002526:	4a0e      	ldr	r2, [pc, #56]	@ (8002560 <show_countdown+0x98>)
 8002528:	2111      	movs	r1, #17
 800252a:	4618      	mov	r0, r3
 800252c:	f004 fd8e 	bl	800704c <sniprintf>
    lcd_line0(l0);
 8002530:	f107 0318 	add.w	r3, r7, #24
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff fdb1 	bl	800209c <lcd_line0>
    lcd_line1(l1);
 800253a:	1d3b      	adds	r3, r7, #4
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff fdb9 	bl	80020b4 <lcd_line1>
}
 8002542:	bf00      	nop
 8002544:	3738      	adds	r7, #56	@ 0x38
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	20000369 	.word	0x20000369
 8002550:	2000036c 	.word	0x2000036c
 8002554:	88888889 	.word	0x88888889
 8002558:	08007d08 	.word	0x08007d08
 800255c:	08007d18 	.word	0x08007d18
 8002560:	08007d28 	.word	0x08007d28

08002564 <show_twist>:

static void show_twist(void){
 8002564:	b580      	push	{r7, lr}
 8002566:	b08a      	sub	sp, #40	@ 0x28
 8002568:	af00      	add	r7, sp, #0
    char l0[17], l1[17];
    snprintf(l0,sizeof(l0),"Twist ON:%3ds",edit_twist_on_s);
 800256a:	4b0e      	ldr	r3, [pc, #56]	@ (80025a4 <show_twist+0x40>)
 800256c:	881b      	ldrh	r3, [r3, #0]
 800256e:	f107 0014 	add.w	r0, r7, #20
 8002572:	4a0d      	ldr	r2, [pc, #52]	@ (80025a8 <show_twist+0x44>)
 8002574:	2111      	movs	r1, #17
 8002576:	f004 fd69 	bl	800704c <sniprintf>
    snprintf(l1,sizeof(l1),"Twist OFF:%3ds",edit_twist_off_s);
 800257a:	4b0c      	ldr	r3, [pc, #48]	@ (80025ac <show_twist+0x48>)
 800257c:	881b      	ldrh	r3, [r3, #0]
 800257e:	4638      	mov	r0, r7
 8002580:	4a0b      	ldr	r2, [pc, #44]	@ (80025b0 <show_twist+0x4c>)
 8002582:	2111      	movs	r1, #17
 8002584:	f004 fd62 	bl	800704c <sniprintf>
    lcd_line0(l0);
 8002588:	f107 0314 	add.w	r3, r7, #20
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff fd85 	bl	800209c <lcd_line0>
    lcd_line1(l1);
 8002592:	463b      	mov	r3, r7
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff fd8d 	bl	80020b4 <lcd_line1>
}
 800259a:	bf00      	nop
 800259c:	3728      	adds	r7, #40	@ 0x28
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	2000005c 	.word	0x2000005c
 80025a8:	08007d38 	.word	0x08007d38
 80025ac:	2000005e 	.word	0x2000005e
 80025b0:	08007d48 	.word	0x08007d48

080025b4 <apply_search_settings>:
/* === apply + rest of code remains the same (no changes needed) === */
// (keep your Screen_Update, Screen_Init, Screen_HandleButton etc. logic untouched)
// Just keep all snprintf() lines trimmed to <=16 characters like above

/* ===== Apply functions (write edits to real settings) ===== */
static void apply_search_settings(void){
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
    searchSettings.testingGapSeconds = edit_search_gap_s;
 80025b8:	4b06      	ldr	r3, [pc, #24]	@ (80025d4 <apply_search_settings+0x20>)
 80025ba:	881b      	ldrh	r3, [r3, #0]
 80025bc:	461a      	mov	r2, r3
 80025be:	4b06      	ldr	r3, [pc, #24]	@ (80025d8 <apply_search_settings+0x24>)
 80025c0:	605a      	str	r2, [r3, #4]
    searchSettings.dryRunTimeSeconds = edit_search_dry_s;
 80025c2:	4b06      	ldr	r3, [pc, #24]	@ (80025dc <apply_search_settings+0x28>)
 80025c4:	881b      	ldrh	r3, [r3, #0]
 80025c6:	461a      	mov	r2, r3
 80025c8:	4b03      	ldr	r3, [pc, #12]	@ (80025d8 <apply_search_settings+0x24>)
 80025ca:	609a      	str	r2, [r3, #8]
    // If you need to call any apply function or save to non-volatile, do it here.
}
 80025cc:	bf00      	nop
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr
 80025d4:	20000058 	.word	0x20000058
 80025d8:	2000001c 	.word	0x2000001c
 80025dc:	2000005a 	.word	0x2000005a

080025e0 <apply_twist_settings>:

static void apply_twist_settings(void){
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
    twistSettings.onDurationSeconds = edit_twist_on_s;
 80025e4:	4b06      	ldr	r3, [pc, #24]	@ (8002600 <apply_twist_settings+0x20>)
 80025e6:	881b      	ldrh	r3, [r3, #0]
 80025e8:	461a      	mov	r2, r3
 80025ea:	4b06      	ldr	r3, [pc, #24]	@ (8002604 <apply_twist_settings+0x24>)
 80025ec:	605a      	str	r2, [r3, #4]
    twistSettings.offDurationSeconds = edit_twist_off_s;
 80025ee:	4b06      	ldr	r3, [pc, #24]	@ (8002608 <apply_twist_settings+0x28>)
 80025f0:	881b      	ldrh	r3, [r3, #0]
 80025f2:	461a      	mov	r2, r3
 80025f4:	4b03      	ldr	r3, [pc, #12]	@ (8002604 <apply_twist_settings+0x24>)
 80025f6:	609a      	str	r2, [r3, #8]
}
 80025f8:	bf00      	nop
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr
 8002600:	2000005c 	.word	0x2000005c
 8002604:	20000028 	.word	0x20000028
 8002608:	2000005e 	.word	0x2000005e

0800260c <apply_countdown_settings>:

static void apply_countdown_settings(void){
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
    countdownDuration = (uint32_t)edit_countdown_min * 60u;
 8002610:	4b06      	ldr	r3, [pc, #24]	@ (800262c <apply_countdown_settings+0x20>)
 8002612:	881b      	ldrh	r3, [r3, #0]
 8002614:	461a      	mov	r2, r3
 8002616:	4613      	mov	r3, r2
 8002618:	011b      	lsls	r3, r3, #4
 800261a:	1a9b      	subs	r3, r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	461a      	mov	r2, r3
 8002620:	4b03      	ldr	r3, [pc, #12]	@ (8002630 <apply_countdown_settings+0x24>)
 8002622:	601a      	str	r2, [r3, #0]
}
 8002624:	bf00      	nop
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr
 800262c:	20000060 	.word	0x20000060
 8002630:	2000036c 	.word	0x2000036c

08002634 <apply_timer_settings>:

static void apply_timer_settings(void){
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
    (void)edit_timer_on_h;
    (void)edit_timer_on_m;
    (void)edit_timer_off_h;
    (void)edit_timer_off_m;
    // e.g. timerSlots[0].onHour = edit_timer_on_h; ...
}
 8002638:	bf00      	nop
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr

08002640 <Screen_Update>:

/* ===== Core Update Loop ===== */

void Screen_Update(void){
 8002640:	b580      	push	{r7, lr}
 8002642:	b0dc      	sub	sp, #368	@ 0x170
 8002644:	af00      	add	r7, sp, #0
    uint32_t now = HAL_GetTick();
 8002646:	f001 f93f 	bl	80038c8 <HAL_GetTick>
 800264a:	f8c7 0168 	str.w	r0, [r7, #360]	@ 0x168

    // Cursor blink on menu and all edit screens
    bool cursorBlinkActive = false;
 800264e:	2300      	movs	r3, #0
 8002650:	f887 316f 	strb.w	r3, [r7, #367]	@ 0x16f
    switch (ui) {
 8002654:	4bb7      	ldr	r3, [pc, #732]	@ (8002934 <Screen_Update+0x2f4>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	2b11      	cmp	r3, #17
 800265a:	bf8c      	ite	hi
 800265c:	2201      	movhi	r2, #1
 800265e:	2200      	movls	r2, #0
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	2a00      	cmp	r2, #0
 8002664:	d10f      	bne.n	8002686 <Screen_Update+0x46>
 8002666:	4ab4      	ldr	r2, [pc, #720]	@ (8002938 <Screen_Update+0x2f8>)
 8002668:	fa22 f303 	lsr.w	r3, r2, r3
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b00      	cmp	r3, #0
 8002672:	bf14      	ite	ne
 8002674:	2301      	movne	r3, #1
 8002676:	2300      	moveq	r3, #0
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d003      	beq.n	8002686 <Screen_Update+0x46>
        case UI_SEARCH_EDIT_GAP:
        case UI_SEARCH_EDIT_DRY:
        case UI_COUNTDOWN_EDIT_MIN:
        case UI_TWIST_EDIT_ON:
        case UI_TWIST_EDIT_OFF:
            cursorBlinkActive = true;
 800267e:	2301      	movs	r3, #1
 8002680:	f887 316f 	strb.w	r3, [r7, #367]	@ 0x16f
            break;
 8002684:	e006      	b.n	8002694 <Screen_Update+0x54>
        default:
            cursorBlinkActive = false;
 8002686:	2300      	movs	r3, #0
 8002688:	f887 316f 	strb.w	r3, [r7, #367]	@ 0x16f
            cursorVisible = true; // always visible outside blinking screens
 800268c:	4bab      	ldr	r3, [pc, #684]	@ (800293c <Screen_Update+0x2fc>)
 800268e:	2201      	movs	r2, #1
 8002690:	701a      	strb	r2, [r3, #0]
            break;
 8002692:	bf00      	nop
    }

    if (cursorBlinkActive && (now - lastCursorToggle >= CURSOR_BLINK_MS)) {
 8002694:	f897 316f 	ldrb.w	r3, [r7, #367]	@ 0x16f
 8002698:	2b00      	cmp	r3, #0
 800269a:	d01e      	beq.n	80026da <Screen_Update+0x9a>
 800269c:	4ba8      	ldr	r3, [pc, #672]	@ (8002940 <Screen_Update+0x300>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d315      	bcc.n	80026da <Screen_Update+0x9a>
        cursorVisible = !cursorVisible;
 80026ae:	4ba3      	ldr	r3, [pc, #652]	@ (800293c <Screen_Update+0x2fc>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	bf14      	ite	ne
 80026b6:	2301      	movne	r3, #1
 80026b8:	2300      	moveq	r3, #0
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	f083 0301 	eor.w	r3, r3, #1
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	4b9c      	ldr	r3, [pc, #624]	@ (800293c <Screen_Update+0x2fc>)
 80026ca:	701a      	strb	r2, [r3, #0]
        lastCursorToggle = now;
 80026cc:	4a9c      	ldr	r2, [pc, #624]	@ (8002940 <Screen_Update+0x300>)
 80026ce:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80026d2:	6013      	str	r3, [r2, #0]
        screenNeedsRefresh = true;
 80026d4:	4b9b      	ldr	r3, [pc, #620]	@ (8002944 <Screen_Update+0x304>)
 80026d6:	2201      	movs	r2, #1
 80026d8:	701a      	strb	r2, [r3, #0]
    }

    /* Welcome timeout */
    if (ui == UI_WELCOME && now - lastLcdUpdateTime >= WELCOME_MS) {
 80026da:	4b96      	ldr	r3, [pc, #600]	@ (8002934 <Screen_Update+0x2f4>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d112      	bne.n	8002708 <Screen_Update+0xc8>
 80026e2:	4b99      	ldr	r3, [pc, #612]	@ (8002948 <Screen_Update+0x308>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d309      	bcc.n	8002708 <Screen_Update+0xc8>
        ui = UI_DASH;
 80026f4:	4b8f      	ldr	r3, [pc, #572]	@ (8002934 <Screen_Update+0x2f4>)
 80026f6:	2201      	movs	r2, #1
 80026f8:	701a      	strb	r2, [r3, #0]
        lastLcdUpdateTime = now;
 80026fa:	4a93      	ldr	r2, [pc, #588]	@ (8002948 <Screen_Update+0x308>)
 80026fc:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002700:	6013      	str	r3, [r2, #0]
        screenNeedsRefresh = true;
 8002702:	4b90      	ldr	r3, [pc, #576]	@ (8002944 <Screen_Update+0x304>)
 8002704:	2201      	movs	r2, #1
 8002706:	701a      	strb	r2, [r3, #0]
    }

    /* Optional auto-back to dashboard after inactivity in menus/edit screens */
    if (ui != UI_WELCOME && ui != UI_DASH && (now - lastUserAction >= AUTO_BACK_MS)) {
 8002708:	4b8a      	ldr	r3, [pc, #552]	@ (8002934 <Screen_Update+0x2f4>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d012      	beq.n	8002736 <Screen_Update+0xf6>
 8002710:	4b88      	ldr	r3, [pc, #544]	@ (8002934 <Screen_Update+0x2f4>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d00e      	beq.n	8002736 <Screen_Update+0xf6>
 8002718:	4b8c      	ldr	r3, [pc, #560]	@ (800294c <Screen_Update+0x30c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8002726:	4293      	cmp	r3, r2
 8002728:	d305      	bcc.n	8002736 <Screen_Update+0xf6>
        ui = UI_DASH;
 800272a:	4b82      	ldr	r3, [pc, #520]	@ (8002934 <Screen_Update+0x2f4>)
 800272c:	2201      	movs	r2, #1
 800272e:	701a      	strb	r2, [r3, #0]
        screenNeedsRefresh = true;
 8002730:	4b84      	ldr	r3, [pc, #528]	@ (8002944 <Screen_Update+0x304>)
 8002732:	2201      	movs	r2, #1
 8002734:	701a      	strb	r2, [r3, #0]
    }

    // Always refresh dashboard every 1s
    if (ui == UI_DASH && (now - lastLcdUpdateTime >= 1000)) {
 8002736:	4b7f      	ldr	r3, [pc, #508]	@ (8002934 <Screen_Update+0x2f4>)
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d10e      	bne.n	800275c <Screen_Update+0x11c>
 800273e:	4b82      	ldr	r3, [pc, #520]	@ (8002948 <Screen_Update+0x308>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800274c:	d306      	bcc.n	800275c <Screen_Update+0x11c>
        screenNeedsRefresh = true;
 800274e:	4b7d      	ldr	r3, [pc, #500]	@ (8002944 <Screen_Update+0x304>)
 8002750:	2201      	movs	r2, #1
 8002752:	701a      	strb	r2, [r3, #0]
        lastLcdUpdateTime = now;
 8002754:	4a7c      	ldr	r2, [pc, #496]	@ (8002948 <Screen_Update+0x308>)
 8002756:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800275a:	6013      	str	r3, [r2, #0]
    }

    if (screenNeedsRefresh || ui != last_ui) {
 800275c:	4b79      	ldr	r3, [pc, #484]	@ (8002944 <Screen_Update+0x304>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d106      	bne.n	8002772 <Screen_Update+0x132>
 8002764:	4b73      	ldr	r3, [pc, #460]	@ (8002934 <Screen_Update+0x2f4>)
 8002766:	781a      	ldrb	r2, [r3, #0]
 8002768:	4b79      	ldr	r3, [pc, #484]	@ (8002950 <Screen_Update+0x310>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	429a      	cmp	r2, r3
 800276e:	f000 8174 	beq.w	8002a5a <Screen_Update+0x41a>
    	bool fullRedraw = (ui != last_ui);  // only clear if state changes
 8002772:	4b70      	ldr	r3, [pc, #448]	@ (8002934 <Screen_Update+0x2f4>)
 8002774:	781a      	ldrb	r2, [r3, #0]
 8002776:	4b76      	ldr	r3, [pc, #472]	@ (8002950 <Screen_Update+0x310>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	429a      	cmp	r2, r3
 800277c:	bf14      	ite	ne
 800277e:	2301      	movne	r3, #1
 8002780:	2300      	moveq	r3, #0
 8002782:	f887 3167 	strb.w	r3, [r7, #359]	@ 0x167
        last_ui = ui;
 8002786:	4b6b      	ldr	r3, [pc, #428]	@ (8002934 <Screen_Update+0x2f4>)
 8002788:	781a      	ldrb	r2, [r3, #0]
 800278a:	4b71      	ldr	r3, [pc, #452]	@ (8002950 <Screen_Update+0x310>)
 800278c:	701a      	strb	r2, [r3, #0]
        screenNeedsRefresh = false;
 800278e:	4b6d      	ldr	r3, [pc, #436]	@ (8002944 <Screen_Update+0x304>)
 8002790:	2200      	movs	r2, #0
 8002792:	701a      	strb	r2, [r3, #0]

        if (fullRedraw) {
 8002794:	f897 3167 	ldrb.w	r3, [r7, #359]	@ 0x167
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <Screen_Update+0x160>
               lcd_clear();   // clear only on state change
 800279c:	f7fe fc5b 	bl	8001056 <lcd_clear>
           }
        switch (ui) {
 80027a0:	4b64      	ldr	r3, [pc, #400]	@ (8002934 <Screen_Update+0x2f4>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b11      	cmp	r3, #17
 80027a6:	f200 8151 	bhi.w	8002a4c <Screen_Update+0x40c>
 80027aa:	a201      	add	r2, pc, #4	@ (adr r2, 80027b0 <Screen_Update+0x170>)
 80027ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b0:	080027f9 	.word	0x080027f9
 80027b4:	080027ff 	.word	0x080027ff
 80027b8:	08002805 	.word	0x08002805
 80027bc:	0800280b 	.word	0x0800280b
 80027c0:	08002811 	.word	0x08002811
 80027c4:	08002817 	.word	0x08002817
 80027c8:	0800282f 	.word	0x0800282f
 80027cc:	08002863 	.word	0x08002863
 80027d0:	08002897 	.word	0x08002897
 80027d4:	080028cb 	.word	0x080028cb
 80027d8:	0800281d 	.word	0x0800281d
 80027dc:	080028ff 	.word	0x080028ff
 80027e0:	08002981 	.word	0x08002981
 80027e4:	08002823 	.word	0x08002823
 80027e8:	080029b5 	.word	0x080029b5
 80027ec:	08002829 	.word	0x08002829
 80027f0:	080029e9 	.word	0x080029e9
 80027f4:	08002a1d 	.word	0x08002a1d
            case UI_WELCOME: show_welcome(); break;
 80027f8:	f7ff fcc2 	bl	8002180 <show_welcome>
 80027fc:	e12d      	b.n	8002a5a <Screen_Update+0x41a>
            case UI_DASH: show_dash(); break;
 80027fe:	f7ff fccf 	bl	80021a0 <show_dash>
 8002802:	e12a      	b.n	8002a5a <Screen_Update+0x41a>
            case UI_MENU: show_menu(); break;
 8002804:	f7ff fd40 	bl	8002288 <show_menu>
 8002808:	e127      	b.n	8002a5a <Screen_Update+0x41a>
            case UI_MANUAL: show_manual(); break;
 800280a:	f7ff fd9b 	bl	8002344 <show_manual>
 800280e:	e124      	b.n	8002a5a <Screen_Update+0x41a>
            case UI_SEMI_AUTO: show_semi_auto(); break;
 8002810:	f7ff fdc8 	bl	80023a4 <show_semi_auto>
 8002814:	e121      	b.n	8002a5a <Screen_Update+0x41a>
            case UI_TIMER: show_timer(); break;
 8002816:	f7ff fdf5 	bl	8002404 <show_timer>
 800281a:	e11e      	b.n	8002a5a <Screen_Update+0x41a>
            case UI_SEARCH: show_search(); break;
 800281c:	f7ff fe28 	bl	8002470 <show_search>
 8002820:	e11b      	b.n	8002a5a <Screen_Update+0x41a>
            case UI_COUNTDOWN: show_countdown(); break;
 8002822:	f7ff fe51 	bl	80024c8 <show_countdown>
 8002826:	e118      	b.n	8002a5a <Screen_Update+0x41a>
            case UI_TWIST: show_twist(); break;
 8002828:	f7ff fe9c 	bl	8002564 <show_twist>
 800282c:	e115      	b.n	8002a5a <Screen_Update+0x41a>

            /* Editing screens show a small edit UI permitting up/down to change value. */
            case UI_TIMER_EDIT_ON_H: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit ON Hour: %02d  ", edit_timer_on_h);
 800282e:	4b49      	ldr	r3, [pc, #292]	@ (8002954 <Screen_Update+0x314>)
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	f507 70aa 	add.w	r0, r7, #340	@ 0x154
 8002836:	4a48      	ldr	r2, [pc, #288]	@ (8002958 <Screen_Update+0x318>)
 8002838:	2111      	movs	r1, #17
 800283a:	f004 fc07 	bl	800704c <sniprintf>
                snprintf(l1,sizeof(l1),">Up +  Dn -  Sel OK");
 800283e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002842:	4a46      	ldr	r2, [pc, #280]	@ (800295c <Screen_Update+0x31c>)
 8002844:	2111      	movs	r1, #17
 8002846:	4618      	mov	r0, r3
 8002848:	f004 fc00 	bl	800704c <sniprintf>
                lcd_line0(l0);
 800284c:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff fc23 	bl	800209c <lcd_line0>
                lcd_line1(l1);
 8002856:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff fc2a 	bl	80020b4 <lcd_line1>
                break;
 8002860:	e0fb      	b.n	8002a5a <Screen_Update+0x41a>
            }
            case UI_TIMER_EDIT_ON_M: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit ON Min: %02d  ", edit_timer_on_m);
 8002862:	4b3f      	ldr	r3, [pc, #252]	@ (8002960 <Screen_Update+0x320>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	f507 7096 	add.w	r0, r7, #300	@ 0x12c
 800286a:	4a3e      	ldr	r2, [pc, #248]	@ (8002964 <Screen_Update+0x324>)
 800286c:	2111      	movs	r1, #17
 800286e:	f004 fbed 	bl	800704c <sniprintf>
                snprintf(l1,sizeof(l1),">Up +  Dn -  Sel OK");
 8002872:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002876:	4a39      	ldr	r2, [pc, #228]	@ (800295c <Screen_Update+0x31c>)
 8002878:	2111      	movs	r1, #17
 800287a:	4618      	mov	r0, r3
 800287c:	f004 fbe6 	bl	800704c <sniprintf>
                lcd_line0(l0);
 8002880:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff fc09 	bl	800209c <lcd_line0>
                lcd_line1(l1);
 800288a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff fc10 	bl	80020b4 <lcd_line1>
                break;
 8002894:	e0e1      	b.n	8002a5a <Screen_Update+0x41a>
            }
            case UI_TIMER_EDIT_OFF_H: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit OFF Hr: %02d  ", edit_timer_off_h);
 8002896:	4b34      	ldr	r3, [pc, #208]	@ (8002968 <Screen_Update+0x328>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	f507 7082 	add.w	r0, r7, #260	@ 0x104
 800289e:	4a33      	ldr	r2, [pc, #204]	@ (800296c <Screen_Update+0x32c>)
 80028a0:	2111      	movs	r1, #17
 80028a2:	f004 fbd3 	bl	800704c <sniprintf>
                snprintf(l1,sizeof(l1),">Up +  Dn -  Sel OK");
 80028a6:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 80028aa:	4a2c      	ldr	r2, [pc, #176]	@ (800295c <Screen_Update+0x31c>)
 80028ac:	2111      	movs	r1, #17
 80028ae:	4618      	mov	r0, r3
 80028b0:	f004 fbcc 	bl	800704c <sniprintf>
                lcd_line0(l0);
 80028b4:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff fbef 	bl	800209c <lcd_line0>
                lcd_line1(l1);
 80028be:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff fbf6 	bl	80020b4 <lcd_line1>
                break;
 80028c8:	e0c7      	b.n	8002a5a <Screen_Update+0x41a>
            }
            case UI_TIMER_EDIT_OFF_M: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit OFF Mn: %02d  ", edit_timer_off_m);
 80028ca:	4b29      	ldr	r3, [pc, #164]	@ (8002970 <Screen_Update+0x330>)
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 80028d2:	4a28      	ldr	r2, [pc, #160]	@ (8002974 <Screen_Update+0x334>)
 80028d4:	2111      	movs	r1, #17
 80028d6:	f004 fbb9 	bl	800704c <sniprintf>
                snprintf(l1,sizeof(l1),">Up +  Dn -  Sel OK");
 80028da:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 80028de:	4a1f      	ldr	r2, [pc, #124]	@ (800295c <Screen_Update+0x31c>)
 80028e0:	2111      	movs	r1, #17
 80028e2:	4618      	mov	r0, r3
 80028e4:	f004 fbb2 	bl	800704c <sniprintf>
                lcd_line0(l0);
 80028e8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff fbd5 	bl	800209c <lcd_line0>
                lcd_line1(l1);
 80028f2:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff fbdc 	bl	80020b4 <lcd_line1>
                break;
 80028fc:	e0ad      	b.n	8002a5a <Screen_Update+0x41a>
            }
            case UI_SEARCH_EDIT_GAP: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit Gap: %3ds  ", edit_search_gap_s);
 80028fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002978 <Screen_Update+0x338>)
 8002900:	881b      	ldrh	r3, [r3, #0]
 8002902:	f107 00b4 	add.w	r0, r7, #180	@ 0xb4
 8002906:	4a1d      	ldr	r2, [pc, #116]	@ (800297c <Screen_Update+0x33c>)
 8002908:	2111      	movs	r1, #17
 800290a:	f004 fb9f 	bl	800704c <sniprintf>
                snprintf(l1,sizeof(l1),">Up +  Dn -  Sel OK");
 800290e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8002912:	4a12      	ldr	r2, [pc, #72]	@ (800295c <Screen_Update+0x31c>)
 8002914:	2111      	movs	r1, #17
 8002916:	4618      	mov	r0, r3
 8002918:	f004 fb98 	bl	800704c <sniprintf>
                lcd_line0(l0);
 800291c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff fbbb 	bl	800209c <lcd_line0>
                lcd_line1(l1);
 8002926:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff fbc2 	bl	80020b4 <lcd_line1>
                break;
 8002930:	e093      	b.n	8002a5a <Screen_Update+0x41a>
 8002932:	bf00      	nop
 8002934:	200003e4 	.word	0x200003e4
 8002938:	00035bc4 	.word	0x00035bc4
 800293c:	20000035 	.word	0x20000035
 8002940:	200003e8 	.word	0x200003e8
 8002944:	200003e5 	.word	0x200003e5
 8002948:	200003e0 	.word	0x200003e0
 800294c:	200003ec 	.word	0x200003ec
 8002950:	20000034 	.word	0x20000034
 8002954:	20000054 	.word	0x20000054
 8002958:	08007d58 	.word	0x08007d58
 800295c:	08007d70 	.word	0x08007d70
 8002960:	20000055 	.word	0x20000055
 8002964:	08007d84 	.word	0x08007d84
 8002968:	20000056 	.word	0x20000056
 800296c:	08007d98 	.word	0x08007d98
 8002970:	20000057 	.word	0x20000057
 8002974:	08007dac 	.word	0x08007dac
 8002978:	20000058 	.word	0x20000058
 800297c:	08007dc0 	.word	0x08007dc0
            }
            case UI_SEARCH_EDIT_DRY: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit Dry: %3ds  ", edit_search_dry_s);
 8002980:	4b38      	ldr	r3, [pc, #224]	@ (8002a64 <Screen_Update+0x424>)
 8002982:	881b      	ldrh	r3, [r3, #0]
 8002984:	f107 008c 	add.w	r0, r7, #140	@ 0x8c
 8002988:	4a37      	ldr	r2, [pc, #220]	@ (8002a68 <Screen_Update+0x428>)
 800298a:	2111      	movs	r1, #17
 800298c:	f004 fb5e 	bl	800704c <sniprintf>
                snprintf(l1,sizeof(l1),">Up +  Dn -  Sel OK");
 8002990:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8002994:	4a35      	ldr	r2, [pc, #212]	@ (8002a6c <Screen_Update+0x42c>)
 8002996:	2111      	movs	r1, #17
 8002998:	4618      	mov	r0, r3
 800299a:	f004 fb57 	bl	800704c <sniprintf>
                lcd_line0(l0);
 800299e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff fb7a 	bl	800209c <lcd_line0>
                lcd_line1(l1);
 80029a8:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff fb81 	bl	80020b4 <lcd_line1>
                break;
 80029b2:	e052      	b.n	8002a5a <Screen_Update+0x41a>
            }
            case UI_COUNTDOWN_EDIT_MIN: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Set Min: %3d    ", edit_countdown_min);
 80029b4:	4b2e      	ldr	r3, [pc, #184]	@ (8002a70 <Screen_Update+0x430>)
 80029b6:	881b      	ldrh	r3, [r3, #0]
 80029b8:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 80029bc:	4a2d      	ldr	r2, [pc, #180]	@ (8002a74 <Screen_Update+0x434>)
 80029be:	2111      	movs	r1, #17
 80029c0:	f004 fb44 	bl	800704c <sniprintf>
                snprintf(l1,sizeof(l1),">Up +  Dn -  Sel Start");
 80029c4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80029c8:	4a2b      	ldr	r2, [pc, #172]	@ (8002a78 <Screen_Update+0x438>)
 80029ca:	2111      	movs	r1, #17
 80029cc:	4618      	mov	r0, r3
 80029ce:	f004 fb3d 	bl	800704c <sniprintf>
                lcd_line0(l0);
 80029d2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7ff fb60 	bl	800209c <lcd_line0>
                lcd_line1(l1);
 80029dc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff fb67 	bl	80020b4 <lcd_line1>
                break;
 80029e6:	e038      	b.n	8002a5a <Screen_Update+0x41a>
            }
            case UI_TWIST_EDIT_ON: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit T ON: %3ds  ", edit_twist_on_s);
 80029e8:	4b24      	ldr	r3, [pc, #144]	@ (8002a7c <Screen_Update+0x43c>)
 80029ea:	881b      	ldrh	r3, [r3, #0]
 80029ec:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 80029f0:	4a23      	ldr	r2, [pc, #140]	@ (8002a80 <Screen_Update+0x440>)
 80029f2:	2111      	movs	r1, #17
 80029f4:	f004 fb2a 	bl	800704c <sniprintf>
                snprintf(l1,sizeof(l1),">Up +  Dn -  Sel OK");
 80029f8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80029fc:	4a1b      	ldr	r2, [pc, #108]	@ (8002a6c <Screen_Update+0x42c>)
 80029fe:	2111      	movs	r1, #17
 8002a00:	4618      	mov	r0, r3
 8002a02:	f004 fb23 	bl	800704c <sniprintf>
                lcd_line0(l0);
 8002a06:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff fb46 	bl	800209c <lcd_line0>
                lcd_line1(l1);
 8002a10:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff fb4d 	bl	80020b4 <lcd_line1>
                break;
 8002a1a:	e01e      	b.n	8002a5a <Screen_Update+0x41a>
            }
            case UI_TWIST_EDIT_OFF: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit T OFF: %3ds ", edit_twist_off_s);
 8002a1c:	4b19      	ldr	r3, [pc, #100]	@ (8002a84 <Screen_Update+0x444>)
 8002a1e:	881b      	ldrh	r3, [r3, #0]
 8002a20:	f107 0014 	add.w	r0, r7, #20
 8002a24:	4a18      	ldr	r2, [pc, #96]	@ (8002a88 <Screen_Update+0x448>)
 8002a26:	2111      	movs	r1, #17
 8002a28:	f004 fb10 	bl	800704c <sniprintf>
                snprintf(l1,sizeof(l1),">Up +  Dn -  Sel OK");
 8002a2c:	463b      	mov	r3, r7
 8002a2e:	4a0f      	ldr	r2, [pc, #60]	@ (8002a6c <Screen_Update+0x42c>)
 8002a30:	2111      	movs	r1, #17
 8002a32:	4618      	mov	r0, r3
 8002a34:	f004 fb0a 	bl	800704c <sniprintf>
                lcd_line0(l0);
 8002a38:	f107 0314 	add.w	r3, r7, #20
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff fb2d 	bl	800209c <lcd_line0>
                lcd_line1(l1);
 8002a42:	463b      	mov	r3, r7
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff fb35 	bl	80020b4 <lcd_line1>
                break;
 8002a4a:	e006      	b.n	8002a5a <Screen_Update+0x41a>
            }
            default:
                lcd_line0("Not Implemented   ");
 8002a4c:	480f      	ldr	r0, [pc, #60]	@ (8002a8c <Screen_Update+0x44c>)
 8002a4e:	f7ff fb25 	bl	800209c <lcd_line0>
                lcd_line1("                  ");
 8002a52:	480f      	ldr	r0, [pc, #60]	@ (8002a90 <Screen_Update+0x450>)
 8002a54:	f7ff fb2e 	bl	80020b4 <lcd_line1>
                break;
 8002a58:	bf00      	nop
        }
    }
}
 8002a5a:	bf00      	nop
 8002a5c:	f507 77b8 	add.w	r7, r7, #368	@ 0x170
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	2000005a 	.word	0x2000005a
 8002a68:	08007dd4 	.word	0x08007dd4
 8002a6c:	08007d70 	.word	0x08007d70
 8002a70:	20000060 	.word	0x20000060
 8002a74:	08007de8 	.word	0x08007de8
 8002a78:	08007dfc 	.word	0x08007dfc
 8002a7c:	2000005c 	.word	0x2000005c
 8002a80:	08007e14 	.word	0x08007e14
 8002a84:	2000005e 	.word	0x2000005e
 8002a88:	08007e28 	.word	0x08007e28
 8002a8c:	08007e3c 	.word	0x08007e3c
 8002a90:	08007e50 	.word	0x08007e50

08002a94 <Screen_Init>:

/* ===== Initialization / Reset ===== */

void Screen_Init(void){
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
    lcd_init();
 8002a98:	f7fe fb21 	bl	80010de <lcd_init>
    ui = UI_WELCOME;
 8002a9c:	4b17      	ldr	r3, [pc, #92]	@ (8002afc <Screen_Init+0x68>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	701a      	strb	r2, [r3, #0]
    last_ui = UI_MAX_;
 8002aa2:	4b17      	ldr	r3, [pc, #92]	@ (8002b00 <Screen_Init+0x6c>)
 8002aa4:	2212      	movs	r2, #18
 8002aa6:	701a      	strb	r2, [r3, #0]
    screenNeedsRefresh = true;
 8002aa8:	4b16      	ldr	r3, [pc, #88]	@ (8002b04 <Screen_Init+0x70>)
 8002aaa:	2201      	movs	r2, #1
 8002aac:	701a      	strb	r2, [r3, #0]
    lastLcdUpdateTime = HAL_GetTick();
 8002aae:	f000 ff0b 	bl	80038c8 <HAL_GetTick>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	4a14      	ldr	r2, [pc, #80]	@ (8002b08 <Screen_Init+0x74>)
 8002ab6:	6013      	str	r3, [r2, #0]
    refreshInactivityTimer();
 8002ab8:	f7ff fb08 	bl	80020cc <refreshInactivityTimer>

    // initialize edits from actual settings
    edit_search_gap_s = searchSettings.testingGapSeconds;
 8002abc:	4b13      	ldr	r3, [pc, #76]	@ (8002b0c <Screen_Init+0x78>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	4b13      	ldr	r3, [pc, #76]	@ (8002b10 <Screen_Init+0x7c>)
 8002ac4:	801a      	strh	r2, [r3, #0]
    edit_search_dry_s = searchSettings.dryRunTimeSeconds;
 8002ac6:	4b11      	ldr	r3, [pc, #68]	@ (8002b0c <Screen_Init+0x78>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	4b11      	ldr	r3, [pc, #68]	@ (8002b14 <Screen_Init+0x80>)
 8002ace:	801a      	strh	r2, [r3, #0]
    edit_twist_on_s = twistSettings.onDurationSeconds;
 8002ad0:	4b11      	ldr	r3, [pc, #68]	@ (8002b18 <Screen_Init+0x84>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	4b11      	ldr	r3, [pc, #68]	@ (8002b1c <Screen_Init+0x88>)
 8002ad8:	801a      	strh	r2, [r3, #0]
    edit_twist_off_s = twistSettings.offDurationSeconds;
 8002ada:	4b0f      	ldr	r3, [pc, #60]	@ (8002b18 <Screen_Init+0x84>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8002b20 <Screen_Init+0x8c>)
 8002ae2:	801a      	strh	r2, [r3, #0]
    // countdown: convert seconds to minutes if possible
    edit_countdown_min = (uint16_t)(countdownDuration / 60u);
 8002ae4:	4b0f      	ldr	r3, [pc, #60]	@ (8002b24 <Screen_Init+0x90>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a0f      	ldr	r2, [pc, #60]	@ (8002b28 <Screen_Init+0x94>)
 8002aea:	fba2 2303 	umull	r2, r3, r2, r3
 8002aee:	095b      	lsrs	r3, r3, #5
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	4b0e      	ldr	r3, [pc, #56]	@ (8002b2c <Screen_Init+0x98>)
 8002af4:	801a      	strh	r2, [r3, #0]
}
 8002af6:	bf00      	nop
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	200003e4 	.word	0x200003e4
 8002b00:	20000034 	.word	0x20000034
 8002b04:	200003e5 	.word	0x200003e5
 8002b08:	200003e0 	.word	0x200003e0
 8002b0c:	2000001c 	.word	0x2000001c
 8002b10:	20000058 	.word	0x20000058
 8002b14:	2000005a 	.word	0x2000005a
 8002b18:	20000028 	.word	0x20000028
 8002b1c:	2000005c 	.word	0x2000005c
 8002b20:	2000005e 	.word	0x2000005e
 8002b24:	2000036c 	.word	0x2000036c
 8002b28:	88888889 	.word	0x88888889
 8002b2c:	20000060 	.word	0x20000060

08002b30 <menu_move_up>:
    refreshInactivityTimer();
}

/* ===== Button actions ===== */

static void menu_move_up(void){
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
    if (ui == UI_MENU) {
 8002b34:	4b62      	ldr	r3, [pc, #392]	@ (8002cc0 <menu_move_up+0x190>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d116      	bne.n	8002b6a <menu_move_up+0x3a>
        if (menu_idx > 0) menu_idx--;
 8002b3c:	4b61      	ldr	r3, [pc, #388]	@ (8002cc4 <menu_move_up+0x194>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	dd04      	ble.n	8002b4e <menu_move_up+0x1e>
 8002b44:	4b5f      	ldr	r3, [pc, #380]	@ (8002cc4 <menu_move_up+0x194>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	4a5e      	ldr	r2, [pc, #376]	@ (8002cc4 <menu_move_up+0x194>)
 8002b4c:	6013      	str	r3, [r2, #0]
        // adjust view top
        if (menu_idx < menu_view_top) menu_view_top = menu_idx;
 8002b4e:	4b5d      	ldr	r3, [pc, #372]	@ (8002cc4 <menu_move_up+0x194>)
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	4b5d      	ldr	r3, [pc, #372]	@ (8002cc8 <menu_move_up+0x198>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	da03      	bge.n	8002b62 <menu_move_up+0x32>
 8002b5a:	4b5a      	ldr	r3, [pc, #360]	@ (8002cc4 <menu_move_up+0x194>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a5a      	ldr	r2, [pc, #360]	@ (8002cc8 <menu_move_up+0x198>)
 8002b60:	6013      	str	r3, [r2, #0]
        screenNeedsRefresh = true;
 8002b62:	4b5a      	ldr	r3, [pc, #360]	@ (8002ccc <menu_move_up+0x19c>)
 8002b64:	2201      	movs	r2, #1
 8002b66:	701a      	strb	r2, [r3, #0]
 8002b68:	e0a5      	b.n	8002cb6 <menu_move_up+0x186>
    } else if (ui == UI_MANUAL) {
 8002b6a:	4b55      	ldr	r3, [pc, #340]	@ (8002cc0 <menu_move_up+0x190>)
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	2b03      	cmp	r3, #3
 8002b70:	f000 80a1 	beq.w	8002cb6 <menu_move_up+0x186>
        // Manual: UP/DOWN unused (you could implement speed or similar)
    } else {
        // in edit screens: increment value
        switch (ui){
 8002b74:	4b52      	ldr	r3, [pc, #328]	@ (8002cc0 <menu_move_up+0x190>)
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	3b06      	subs	r3, #6
 8002b7a:	2b0b      	cmp	r3, #11
 8002b7c:	f200 8085 	bhi.w	8002c8a <menu_move_up+0x15a>
 8002b80:	a201      	add	r2, pc, #4	@ (adr r2, 8002b88 <menu_move_up+0x58>)
 8002b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b86:	bf00      	nop
 8002b88:	08002bb9 	.word	0x08002bb9
 8002b8c:	08002bcf 	.word	0x08002bcf
 8002b90:	08002be5 	.word	0x08002be5
 8002b94:	08002bfb 	.word	0x08002bfb
 8002b98:	08002c8b 	.word	0x08002c8b
 8002b9c:	08002c11 	.word	0x08002c11
 8002ba0:	08002c29 	.word	0x08002c29
 8002ba4:	08002c8b 	.word	0x08002c8b
 8002ba8:	08002c41 	.word	0x08002c41
 8002bac:	08002c8b 	.word	0x08002c8b
 8002bb0:	08002c5b 	.word	0x08002c5b
 8002bb4:	08002c73 	.word	0x08002c73
            case UI_TIMER_EDIT_ON_H: if (edit_timer_on_h < 23) edit_timer_on_h++; break;
 8002bb8:	4b45      	ldr	r3, [pc, #276]	@ (8002cd0 <menu_move_up+0x1a0>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	2b16      	cmp	r3, #22
 8002bbe:	d866      	bhi.n	8002c8e <menu_move_up+0x15e>
 8002bc0:	4b43      	ldr	r3, [pc, #268]	@ (8002cd0 <menu_move_up+0x1a0>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	4b41      	ldr	r3, [pc, #260]	@ (8002cd0 <menu_move_up+0x1a0>)
 8002bca:	701a      	strb	r2, [r3, #0]
 8002bcc:	e05f      	b.n	8002c8e <menu_move_up+0x15e>
            case UI_TIMER_EDIT_ON_M: if (edit_timer_on_m < 59) edit_timer_on_m++; break;
 8002bce:	4b41      	ldr	r3, [pc, #260]	@ (8002cd4 <menu_move_up+0x1a4>)
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	2b3a      	cmp	r3, #58	@ 0x3a
 8002bd4:	d85d      	bhi.n	8002c92 <menu_move_up+0x162>
 8002bd6:	4b3f      	ldr	r3, [pc, #252]	@ (8002cd4 <menu_move_up+0x1a4>)
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	3301      	adds	r3, #1
 8002bdc:	b2da      	uxtb	r2, r3
 8002bde:	4b3d      	ldr	r3, [pc, #244]	@ (8002cd4 <menu_move_up+0x1a4>)
 8002be0:	701a      	strb	r2, [r3, #0]
 8002be2:	e056      	b.n	8002c92 <menu_move_up+0x162>
            case UI_TIMER_EDIT_OFF_H: if (edit_timer_off_h < 23) edit_timer_off_h++; break;
 8002be4:	4b3c      	ldr	r3, [pc, #240]	@ (8002cd8 <menu_move_up+0x1a8>)
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	2b16      	cmp	r3, #22
 8002bea:	d854      	bhi.n	8002c96 <menu_move_up+0x166>
 8002bec:	4b3a      	ldr	r3, [pc, #232]	@ (8002cd8 <menu_move_up+0x1a8>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	b2da      	uxtb	r2, r3
 8002bf4:	4b38      	ldr	r3, [pc, #224]	@ (8002cd8 <menu_move_up+0x1a8>)
 8002bf6:	701a      	strb	r2, [r3, #0]
 8002bf8:	e04d      	b.n	8002c96 <menu_move_up+0x166>
            case UI_TIMER_EDIT_OFF_M: if (edit_timer_off_m < 59) edit_timer_off_m++; break;
 8002bfa:	4b38      	ldr	r3, [pc, #224]	@ (8002cdc <menu_move_up+0x1ac>)
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	2b3a      	cmp	r3, #58	@ 0x3a
 8002c00:	d84b      	bhi.n	8002c9a <menu_move_up+0x16a>
 8002c02:	4b36      	ldr	r3, [pc, #216]	@ (8002cdc <menu_move_up+0x1ac>)
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	3301      	adds	r3, #1
 8002c08:	b2da      	uxtb	r2, r3
 8002c0a:	4b34      	ldr	r3, [pc, #208]	@ (8002cdc <menu_move_up+0x1ac>)
 8002c0c:	701a      	strb	r2, [r3, #0]
 8002c0e:	e044      	b.n	8002c9a <menu_move_up+0x16a>
            case UI_SEARCH_EDIT_GAP: if (edit_search_gap_s < 3600) edit_search_gap_s += 1; break;
 8002c10:	4b33      	ldr	r3, [pc, #204]	@ (8002ce0 <menu_move_up+0x1b0>)
 8002c12:	881b      	ldrh	r3, [r3, #0]
 8002c14:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8002c18:	d241      	bcs.n	8002c9e <menu_move_up+0x16e>
 8002c1a:	4b31      	ldr	r3, [pc, #196]	@ (8002ce0 <menu_move_up+0x1b0>)
 8002c1c:	881b      	ldrh	r3, [r3, #0]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	4b2f      	ldr	r3, [pc, #188]	@ (8002ce0 <menu_move_up+0x1b0>)
 8002c24:	801a      	strh	r2, [r3, #0]
 8002c26:	e03a      	b.n	8002c9e <menu_move_up+0x16e>
            case UI_SEARCH_EDIT_DRY: if (edit_search_dry_s < 3600) edit_search_dry_s += 1; break;
 8002c28:	4b2e      	ldr	r3, [pc, #184]	@ (8002ce4 <menu_move_up+0x1b4>)
 8002c2a:	881b      	ldrh	r3, [r3, #0]
 8002c2c:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8002c30:	d237      	bcs.n	8002ca2 <menu_move_up+0x172>
 8002c32:	4b2c      	ldr	r3, [pc, #176]	@ (8002ce4 <menu_move_up+0x1b4>)
 8002c34:	881b      	ldrh	r3, [r3, #0]
 8002c36:	3301      	adds	r3, #1
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	4b2a      	ldr	r3, [pc, #168]	@ (8002ce4 <menu_move_up+0x1b4>)
 8002c3c:	801a      	strh	r2, [r3, #0]
 8002c3e:	e030      	b.n	8002ca2 <menu_move_up+0x172>
            case UI_COUNTDOWN_EDIT_MIN: if (edit_countdown_min < 999) edit_countdown_min += 1; break;
 8002c40:	4b29      	ldr	r3, [pc, #164]	@ (8002ce8 <menu_move_up+0x1b8>)
 8002c42:	881b      	ldrh	r3, [r3, #0]
 8002c44:	f240 32e6 	movw	r2, #998	@ 0x3e6
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d82c      	bhi.n	8002ca6 <menu_move_up+0x176>
 8002c4c:	4b26      	ldr	r3, [pc, #152]	@ (8002ce8 <menu_move_up+0x1b8>)
 8002c4e:	881b      	ldrh	r3, [r3, #0]
 8002c50:	3301      	adds	r3, #1
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	4b24      	ldr	r3, [pc, #144]	@ (8002ce8 <menu_move_up+0x1b8>)
 8002c56:	801a      	strh	r2, [r3, #0]
 8002c58:	e025      	b.n	8002ca6 <menu_move_up+0x176>
            case UI_TWIST_EDIT_ON: if (edit_twist_on_s < 3600) edit_twist_on_s += 1; break;
 8002c5a:	4b24      	ldr	r3, [pc, #144]	@ (8002cec <menu_move_up+0x1bc>)
 8002c5c:	881b      	ldrh	r3, [r3, #0]
 8002c5e:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8002c62:	d222      	bcs.n	8002caa <menu_move_up+0x17a>
 8002c64:	4b21      	ldr	r3, [pc, #132]	@ (8002cec <menu_move_up+0x1bc>)
 8002c66:	881b      	ldrh	r3, [r3, #0]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	4b1f      	ldr	r3, [pc, #124]	@ (8002cec <menu_move_up+0x1bc>)
 8002c6e:	801a      	strh	r2, [r3, #0]
 8002c70:	e01b      	b.n	8002caa <menu_move_up+0x17a>
            case UI_TWIST_EDIT_OFF: if (edit_twist_off_s < 3600) edit_twist_off_s += 1; break;
 8002c72:	4b1f      	ldr	r3, [pc, #124]	@ (8002cf0 <menu_move_up+0x1c0>)
 8002c74:	881b      	ldrh	r3, [r3, #0]
 8002c76:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8002c7a:	d218      	bcs.n	8002cae <menu_move_up+0x17e>
 8002c7c:	4b1c      	ldr	r3, [pc, #112]	@ (8002cf0 <menu_move_up+0x1c0>)
 8002c7e:	881b      	ldrh	r3, [r3, #0]
 8002c80:	3301      	adds	r3, #1
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	4b1a      	ldr	r3, [pc, #104]	@ (8002cf0 <menu_move_up+0x1c0>)
 8002c86:	801a      	strh	r2, [r3, #0]
 8002c88:	e011      	b.n	8002cae <menu_move_up+0x17e>
            default: break;
 8002c8a:	bf00      	nop
 8002c8c:	e010      	b.n	8002cb0 <menu_move_up+0x180>
            case UI_TIMER_EDIT_ON_H: if (edit_timer_on_h < 23) edit_timer_on_h++; break;
 8002c8e:	bf00      	nop
 8002c90:	e00e      	b.n	8002cb0 <menu_move_up+0x180>
            case UI_TIMER_EDIT_ON_M: if (edit_timer_on_m < 59) edit_timer_on_m++; break;
 8002c92:	bf00      	nop
 8002c94:	e00c      	b.n	8002cb0 <menu_move_up+0x180>
            case UI_TIMER_EDIT_OFF_H: if (edit_timer_off_h < 23) edit_timer_off_h++; break;
 8002c96:	bf00      	nop
 8002c98:	e00a      	b.n	8002cb0 <menu_move_up+0x180>
            case UI_TIMER_EDIT_OFF_M: if (edit_timer_off_m < 59) edit_timer_off_m++; break;
 8002c9a:	bf00      	nop
 8002c9c:	e008      	b.n	8002cb0 <menu_move_up+0x180>
            case UI_SEARCH_EDIT_GAP: if (edit_search_gap_s < 3600) edit_search_gap_s += 1; break;
 8002c9e:	bf00      	nop
 8002ca0:	e006      	b.n	8002cb0 <menu_move_up+0x180>
            case UI_SEARCH_EDIT_DRY: if (edit_search_dry_s < 3600) edit_search_dry_s += 1; break;
 8002ca2:	bf00      	nop
 8002ca4:	e004      	b.n	8002cb0 <menu_move_up+0x180>
            case UI_COUNTDOWN_EDIT_MIN: if (edit_countdown_min < 999) edit_countdown_min += 1; break;
 8002ca6:	bf00      	nop
 8002ca8:	e002      	b.n	8002cb0 <menu_move_up+0x180>
            case UI_TWIST_EDIT_ON: if (edit_twist_on_s < 3600) edit_twist_on_s += 1; break;
 8002caa:	bf00      	nop
 8002cac:	e000      	b.n	8002cb0 <menu_move_up+0x180>
            case UI_TWIST_EDIT_OFF: if (edit_twist_off_s < 3600) edit_twist_off_s += 1; break;
 8002cae:	bf00      	nop
        }
        screenNeedsRefresh = true;
 8002cb0:	4b06      	ldr	r3, [pc, #24]	@ (8002ccc <menu_move_up+0x19c>)
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	701a      	strb	r2, [r3, #0]
    }
    refreshInactivityTimer();
 8002cb6:	f7ff fa09 	bl	80020cc <refreshInactivityTimer>
}
 8002cba:	bf00      	nop
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	200003e4 	.word	0x200003e4
 8002cc4:	200003f4 	.word	0x200003f4
 8002cc8:	200003f8 	.word	0x200003f8
 8002ccc:	200003e5 	.word	0x200003e5
 8002cd0:	20000054 	.word	0x20000054
 8002cd4:	20000055 	.word	0x20000055
 8002cd8:	20000056 	.word	0x20000056
 8002cdc:	20000057 	.word	0x20000057
 8002ce0:	20000058 	.word	0x20000058
 8002ce4:	2000005a 	.word	0x2000005a
 8002ce8:	20000060 	.word	0x20000060
 8002cec:	2000005c 	.word	0x2000005c
 8002cf0:	2000005e 	.word	0x2000005e

08002cf4 <menu_move_down>:

static void menu_move_down(void){
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
    if (ui == UI_MENU) {
 8002cf8:	4b5d      	ldr	r3, [pc, #372]	@ (8002e70 <menu_move_down+0x17c>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d118      	bne.n	8002d32 <menu_move_down+0x3e>
        if (menu_idx < (MAIN_MENU_COUNT-1)) menu_idx++;
 8002d00:	4b5c      	ldr	r3, [pc, #368]	@ (8002e74 <menu_move_down+0x180>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2b05      	cmp	r3, #5
 8002d06:	d804      	bhi.n	8002d12 <menu_move_down+0x1e>
 8002d08:	4b5a      	ldr	r3, [pc, #360]	@ (8002e74 <menu_move_down+0x180>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	4a59      	ldr	r2, [pc, #356]	@ (8002e74 <menu_move_down+0x180>)
 8002d10:	6013      	str	r3, [r2, #0]
        // adjust view top
        if (menu_idx > menu_view_top + 1) menu_view_top = menu_idx - 1;
 8002d12:	4b59      	ldr	r3, [pc, #356]	@ (8002e78 <menu_move_down+0x184>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	1c5a      	adds	r2, r3, #1
 8002d18:	4b56      	ldr	r3, [pc, #344]	@ (8002e74 <menu_move_down+0x180>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	da04      	bge.n	8002d2a <menu_move_down+0x36>
 8002d20:	4b54      	ldr	r3, [pc, #336]	@ (8002e74 <menu_move_down+0x180>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	3b01      	subs	r3, #1
 8002d26:	4a54      	ldr	r2, [pc, #336]	@ (8002e78 <menu_move_down+0x184>)
 8002d28:	6013      	str	r3, [r2, #0]
        screenNeedsRefresh = true;
 8002d2a:	4b54      	ldr	r3, [pc, #336]	@ (8002e7c <menu_move_down+0x188>)
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	701a      	strb	r2, [r3, #0]
 8002d30:	e099      	b.n	8002e66 <menu_move_down+0x172>
    } else {
        // edit screens: decrement value
        switch (ui){
 8002d32:	4b4f      	ldr	r3, [pc, #316]	@ (8002e70 <menu_move_down+0x17c>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	3b06      	subs	r3, #6
 8002d38:	2b0b      	cmp	r3, #11
 8002d3a:	d87e      	bhi.n	8002e3a <menu_move_down+0x146>
 8002d3c:	a201      	add	r2, pc, #4	@ (adr r2, 8002d44 <menu_move_down+0x50>)
 8002d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d42:	bf00      	nop
 8002d44:	08002d75 	.word	0x08002d75
 8002d48:	08002d8b 	.word	0x08002d8b
 8002d4c:	08002da1 	.word	0x08002da1
 8002d50:	08002db7 	.word	0x08002db7
 8002d54:	08002e3b 	.word	0x08002e3b
 8002d58:	08002dcd 	.word	0x08002dcd
 8002d5c:	08002de3 	.word	0x08002de3
 8002d60:	08002e3b 	.word	0x08002e3b
 8002d64:	08002df9 	.word	0x08002df9
 8002d68:	08002e3b 	.word	0x08002e3b
 8002d6c:	08002e0f 	.word	0x08002e0f
 8002d70:	08002e25 	.word	0x08002e25
            case UI_TIMER_EDIT_ON_H: if (edit_timer_on_h > 0) edit_timer_on_h--; break;
 8002d74:	4b42      	ldr	r3, [pc, #264]	@ (8002e80 <menu_move_down+0x18c>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d060      	beq.n	8002e3e <menu_move_down+0x14a>
 8002d7c:	4b40      	ldr	r3, [pc, #256]	@ (8002e80 <menu_move_down+0x18c>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	3b01      	subs	r3, #1
 8002d82:	b2da      	uxtb	r2, r3
 8002d84:	4b3e      	ldr	r3, [pc, #248]	@ (8002e80 <menu_move_down+0x18c>)
 8002d86:	701a      	strb	r2, [r3, #0]
 8002d88:	e059      	b.n	8002e3e <menu_move_down+0x14a>
            case UI_TIMER_EDIT_ON_M: if (edit_timer_on_m > 0) edit_timer_on_m--; break;
 8002d8a:	4b3e      	ldr	r3, [pc, #248]	@ (8002e84 <menu_move_down+0x190>)
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d057      	beq.n	8002e42 <menu_move_down+0x14e>
 8002d92:	4b3c      	ldr	r3, [pc, #240]	@ (8002e84 <menu_move_down+0x190>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	3b01      	subs	r3, #1
 8002d98:	b2da      	uxtb	r2, r3
 8002d9a:	4b3a      	ldr	r3, [pc, #232]	@ (8002e84 <menu_move_down+0x190>)
 8002d9c:	701a      	strb	r2, [r3, #0]
 8002d9e:	e050      	b.n	8002e42 <menu_move_down+0x14e>
            case UI_TIMER_EDIT_OFF_H: if (edit_timer_off_h > 0) edit_timer_off_h--; break;
 8002da0:	4b39      	ldr	r3, [pc, #228]	@ (8002e88 <menu_move_down+0x194>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d04e      	beq.n	8002e46 <menu_move_down+0x152>
 8002da8:	4b37      	ldr	r3, [pc, #220]	@ (8002e88 <menu_move_down+0x194>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	3b01      	subs	r3, #1
 8002dae:	b2da      	uxtb	r2, r3
 8002db0:	4b35      	ldr	r3, [pc, #212]	@ (8002e88 <menu_move_down+0x194>)
 8002db2:	701a      	strb	r2, [r3, #0]
 8002db4:	e047      	b.n	8002e46 <menu_move_down+0x152>
            case UI_TIMER_EDIT_OFF_M: if (edit_timer_off_m > 0) edit_timer_off_m--; break;
 8002db6:	4b35      	ldr	r3, [pc, #212]	@ (8002e8c <menu_move_down+0x198>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d045      	beq.n	8002e4a <menu_move_down+0x156>
 8002dbe:	4b33      	ldr	r3, [pc, #204]	@ (8002e8c <menu_move_down+0x198>)
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	4b31      	ldr	r3, [pc, #196]	@ (8002e8c <menu_move_down+0x198>)
 8002dc8:	701a      	strb	r2, [r3, #0]
 8002dca:	e03e      	b.n	8002e4a <menu_move_down+0x156>
            case UI_SEARCH_EDIT_GAP: if (edit_search_gap_s > 1) edit_search_gap_s -= 1; break;
 8002dcc:	4b30      	ldr	r3, [pc, #192]	@ (8002e90 <menu_move_down+0x19c>)
 8002dce:	881b      	ldrh	r3, [r3, #0]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d93c      	bls.n	8002e4e <menu_move_down+0x15a>
 8002dd4:	4b2e      	ldr	r3, [pc, #184]	@ (8002e90 <menu_move_down+0x19c>)
 8002dd6:	881b      	ldrh	r3, [r3, #0]
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	4b2c      	ldr	r3, [pc, #176]	@ (8002e90 <menu_move_down+0x19c>)
 8002dde:	801a      	strh	r2, [r3, #0]
 8002de0:	e035      	b.n	8002e4e <menu_move_down+0x15a>
            case UI_SEARCH_EDIT_DRY: if (edit_search_dry_s > 1) edit_search_dry_s -= 1; break;
 8002de2:	4b2c      	ldr	r3, [pc, #176]	@ (8002e94 <menu_move_down+0x1a0>)
 8002de4:	881b      	ldrh	r3, [r3, #0]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d933      	bls.n	8002e52 <menu_move_down+0x15e>
 8002dea:	4b2a      	ldr	r3, [pc, #168]	@ (8002e94 <menu_move_down+0x1a0>)
 8002dec:	881b      	ldrh	r3, [r3, #0]
 8002dee:	3b01      	subs	r3, #1
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	4b28      	ldr	r3, [pc, #160]	@ (8002e94 <menu_move_down+0x1a0>)
 8002df4:	801a      	strh	r2, [r3, #0]
 8002df6:	e02c      	b.n	8002e52 <menu_move_down+0x15e>
            case UI_COUNTDOWN_EDIT_MIN: if (edit_countdown_min > 0) edit_countdown_min -= 1; break;
 8002df8:	4b27      	ldr	r3, [pc, #156]	@ (8002e98 <menu_move_down+0x1a4>)
 8002dfa:	881b      	ldrh	r3, [r3, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d02a      	beq.n	8002e56 <menu_move_down+0x162>
 8002e00:	4b25      	ldr	r3, [pc, #148]	@ (8002e98 <menu_move_down+0x1a4>)
 8002e02:	881b      	ldrh	r3, [r3, #0]
 8002e04:	3b01      	subs	r3, #1
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	4b23      	ldr	r3, [pc, #140]	@ (8002e98 <menu_move_down+0x1a4>)
 8002e0a:	801a      	strh	r2, [r3, #0]
 8002e0c:	e023      	b.n	8002e56 <menu_move_down+0x162>
            case UI_TWIST_EDIT_ON: if (edit_twist_on_s > 1) edit_twist_on_s -= 1; break;
 8002e0e:	4b23      	ldr	r3, [pc, #140]	@ (8002e9c <menu_move_down+0x1a8>)
 8002e10:	881b      	ldrh	r3, [r3, #0]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d921      	bls.n	8002e5a <menu_move_down+0x166>
 8002e16:	4b21      	ldr	r3, [pc, #132]	@ (8002e9c <menu_move_down+0x1a8>)
 8002e18:	881b      	ldrh	r3, [r3, #0]
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	4b1f      	ldr	r3, [pc, #124]	@ (8002e9c <menu_move_down+0x1a8>)
 8002e20:	801a      	strh	r2, [r3, #0]
 8002e22:	e01a      	b.n	8002e5a <menu_move_down+0x166>
            case UI_TWIST_EDIT_OFF: if (edit_twist_off_s > 1) edit_twist_off_s -= 1; break;
 8002e24:	4b1e      	ldr	r3, [pc, #120]	@ (8002ea0 <menu_move_down+0x1ac>)
 8002e26:	881b      	ldrh	r3, [r3, #0]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d918      	bls.n	8002e5e <menu_move_down+0x16a>
 8002e2c:	4b1c      	ldr	r3, [pc, #112]	@ (8002ea0 <menu_move_down+0x1ac>)
 8002e2e:	881b      	ldrh	r3, [r3, #0]
 8002e30:	3b01      	subs	r3, #1
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	4b1a      	ldr	r3, [pc, #104]	@ (8002ea0 <menu_move_down+0x1ac>)
 8002e36:	801a      	strh	r2, [r3, #0]
 8002e38:	e011      	b.n	8002e5e <menu_move_down+0x16a>
            default: break;
 8002e3a:	bf00      	nop
 8002e3c:	e010      	b.n	8002e60 <menu_move_down+0x16c>
            case UI_TIMER_EDIT_ON_H: if (edit_timer_on_h > 0) edit_timer_on_h--; break;
 8002e3e:	bf00      	nop
 8002e40:	e00e      	b.n	8002e60 <menu_move_down+0x16c>
            case UI_TIMER_EDIT_ON_M: if (edit_timer_on_m > 0) edit_timer_on_m--; break;
 8002e42:	bf00      	nop
 8002e44:	e00c      	b.n	8002e60 <menu_move_down+0x16c>
            case UI_TIMER_EDIT_OFF_H: if (edit_timer_off_h > 0) edit_timer_off_h--; break;
 8002e46:	bf00      	nop
 8002e48:	e00a      	b.n	8002e60 <menu_move_down+0x16c>
            case UI_TIMER_EDIT_OFF_M: if (edit_timer_off_m > 0) edit_timer_off_m--; break;
 8002e4a:	bf00      	nop
 8002e4c:	e008      	b.n	8002e60 <menu_move_down+0x16c>
            case UI_SEARCH_EDIT_GAP: if (edit_search_gap_s > 1) edit_search_gap_s -= 1; break;
 8002e4e:	bf00      	nop
 8002e50:	e006      	b.n	8002e60 <menu_move_down+0x16c>
            case UI_SEARCH_EDIT_DRY: if (edit_search_dry_s > 1) edit_search_dry_s -= 1; break;
 8002e52:	bf00      	nop
 8002e54:	e004      	b.n	8002e60 <menu_move_down+0x16c>
            case UI_COUNTDOWN_EDIT_MIN: if (edit_countdown_min > 0) edit_countdown_min -= 1; break;
 8002e56:	bf00      	nop
 8002e58:	e002      	b.n	8002e60 <menu_move_down+0x16c>
            case UI_TWIST_EDIT_ON: if (edit_twist_on_s > 1) edit_twist_on_s -= 1; break;
 8002e5a:	bf00      	nop
 8002e5c:	e000      	b.n	8002e60 <menu_move_down+0x16c>
            case UI_TWIST_EDIT_OFF: if (edit_twist_off_s > 1) edit_twist_off_s -= 1; break;
 8002e5e:	bf00      	nop
        }
        screenNeedsRefresh = true;
 8002e60:	4b06      	ldr	r3, [pc, #24]	@ (8002e7c <menu_move_down+0x188>)
 8002e62:	2201      	movs	r2, #1
 8002e64:	701a      	strb	r2, [r3, #0]
    }
    refreshInactivityTimer();
 8002e66:	f7ff f931 	bl	80020cc <refreshInactivityTimer>
}
 8002e6a:	bf00      	nop
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	200003e4 	.word	0x200003e4
 8002e74:	200003f4 	.word	0x200003f4
 8002e78:	200003f8 	.word	0x200003f8
 8002e7c:	200003e5 	.word	0x200003e5
 8002e80:	20000054 	.word	0x20000054
 8002e84:	20000055 	.word	0x20000055
 8002e88:	20000056 	.word	0x20000056
 8002e8c:	20000057 	.word	0x20000057
 8002e90:	20000058 	.word	0x20000058
 8002e94:	2000005a 	.word	0x2000005a
 8002e98:	20000060 	.word	0x20000060
 8002e9c:	2000005c 	.word	0x2000005c
 8002ea0:	2000005e 	.word	0x2000005e

08002ea4 <menu_select>:

static void menu_select(void){
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
    refreshInactivityTimer();
 8002ea8:	f7ff f910 	bl	80020cc <refreshInactivityTimer>

    switch (ui){
 8002eac:	4b71      	ldr	r3, [pc, #452]	@ (8003074 <menu_select+0x1d0>)
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	2b11      	cmp	r3, #17
 8002eb2:	f200 80d5 	bhi.w	8003060 <menu_select+0x1bc>
 8002eb6:	a201      	add	r2, pc, #4	@ (adr r2, 8002ebc <menu_select+0x18>)
 8002eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ebc:	08002f05 	.word	0x08002f05
 8002ec0:	08002f0d 	.word	0x08002f0d
 8002ec4:	08002f19 	.word	0x08002f19
 8002ec8:	08002f87 	.word	0x08002f87
 8002ecc:	08002fa7 	.word	0x08002fa7
 8002ed0:	08002fcd 	.word	0x08002fcd
 8002ed4:	08002fd5 	.word	0x08002fd5
 8002ed8:	08002fdd 	.word	0x08002fdd
 8002edc:	08002fe5 	.word	0x08002fe5
 8002ee0:	08002fed 	.word	0x08002fed
 8002ee4:	08002ff9 	.word	0x08002ff9
 8002ee8:	08003001 	.word	0x08003001
 8002eec:	0800300d 	.word	0x0800300d
 8002ef0:	08003019 	.word	0x08003019
 8002ef4:	08003033 	.word	0x08003033
 8002ef8:	08003045 	.word	0x08003045
 8002efc:	0800304d 	.word	0x0800304d
 8002f00:	08003055 	.word	0x08003055
        case UI_WELCOME:
            ui = UI_DASH;
 8002f04:	4b5b      	ldr	r3, [pc, #364]	@ (8003074 <menu_select+0x1d0>)
 8002f06:	2201      	movs	r2, #1
 8002f08:	701a      	strb	r2, [r3, #0]
            break;
 8002f0a:	e0ad      	b.n	8003068 <menu_select+0x1c4>

        case UI_DASH:
            // Enter menu
            ui = UI_MENU;
 8002f0c:	4b59      	ldr	r3, [pc, #356]	@ (8003074 <menu_select+0x1d0>)
 8002f0e:	2202      	movs	r2, #2
 8002f10:	701a      	strb	r2, [r3, #0]
            goto_menu_top();
 8002f12:	f7ff f8e7 	bl	80020e4 <goto_menu_top>
            break;
 8002f16:	e0a7      	b.n	8003068 <menu_select+0x1c4>

        case UI_MENU:
            // perform action based on menu_idx
            switch (menu_idx){
 8002f18:	4b57      	ldr	r3, [pc, #348]	@ (8003078 <menu_select+0x1d4>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2b06      	cmp	r3, #6
 8002f1e:	d82d      	bhi.n	8002f7c <menu_select+0xd8>
 8002f20:	a201      	add	r2, pc, #4	@ (adr r2, 8002f28 <menu_select+0x84>)
 8002f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f26:	bf00      	nop
 8002f28:	08002f45 	.word	0x08002f45
 8002f2c:	08002f4d 	.word	0x08002f4d
 8002f30:	08002f55 	.word	0x08002f55
 8002f34:	08002f5d 	.word	0x08002f5d
 8002f38:	08002f65 	.word	0x08002f65
 8002f3c:	08002f6d 	.word	0x08002f6d
 8002f40:	08002f75 	.word	0x08002f75
                case 0: ui = UI_MANUAL; break;
 8002f44:	4b4b      	ldr	r3, [pc, #300]	@ (8003074 <menu_select+0x1d0>)
 8002f46:	2203      	movs	r2, #3
 8002f48:	701a      	strb	r2, [r3, #0]
 8002f4a:	e01b      	b.n	8002f84 <menu_select+0xe0>
                case 1: ui = UI_SEMI_AUTO; break;
 8002f4c:	4b49      	ldr	r3, [pc, #292]	@ (8003074 <menu_select+0x1d0>)
 8002f4e:	2204      	movs	r2, #4
 8002f50:	701a      	strb	r2, [r3, #0]
 8002f52:	e017      	b.n	8002f84 <menu_select+0xe0>
                case 2: ui = UI_TIMER; break;
 8002f54:	4b47      	ldr	r3, [pc, #284]	@ (8003074 <menu_select+0x1d0>)
 8002f56:	2205      	movs	r2, #5
 8002f58:	701a      	strb	r2, [r3, #0]
 8002f5a:	e013      	b.n	8002f84 <menu_select+0xe0>
                case 3: ui = UI_SEARCH; break;
 8002f5c:	4b45      	ldr	r3, [pc, #276]	@ (8003074 <menu_select+0x1d0>)
 8002f5e:	220a      	movs	r2, #10
 8002f60:	701a      	strb	r2, [r3, #0]
 8002f62:	e00f      	b.n	8002f84 <menu_select+0xe0>
                case 4: ui = UI_COUNTDOWN; break;
 8002f64:	4b43      	ldr	r3, [pc, #268]	@ (8003074 <menu_select+0x1d0>)
 8002f66:	220d      	movs	r2, #13
 8002f68:	701a      	strb	r2, [r3, #0]
 8002f6a:	e00b      	b.n	8002f84 <menu_select+0xe0>
                case 5: ui = UI_TWIST; break;
 8002f6c:	4b41      	ldr	r3, [pc, #260]	@ (8003074 <menu_select+0x1d0>)
 8002f6e:	220f      	movs	r2, #15
 8002f70:	701a      	strb	r2, [r3, #0]
 8002f72:	e007      	b.n	8002f84 <menu_select+0xe0>
                case 6: ui = UI_DASH; break;
 8002f74:	4b3f      	ldr	r3, [pc, #252]	@ (8003074 <menu_select+0x1d0>)
 8002f76:	2201      	movs	r2, #1
 8002f78:	701a      	strb	r2, [r3, #0]
 8002f7a:	e003      	b.n	8002f84 <menu_select+0xe0>
                default: ui = UI_DASH; break;
 8002f7c:	4b3d      	ldr	r3, [pc, #244]	@ (8003074 <menu_select+0x1d0>)
 8002f7e:	2201      	movs	r2, #1
 8002f80:	701a      	strb	r2, [r3, #0]
 8002f82:	bf00      	nop
            }
            break;
 8002f84:	e070      	b.n	8003068 <menu_select+0x1c4>

        case UI_MANUAL:
            // Toggle motor on select
            if (Motor_GetStatus()) {
 8002f86:	f7fe ffc5 	bl	8001f14 <Motor_GetStatus>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d003      	beq.n	8002f98 <menu_select+0xf4>
            	motorStatus = 0;
 8002f90:	4b3a      	ldr	r3, [pc, #232]	@ (800307c <menu_select+0x1d8>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	701a      	strb	r2, [r3, #0]
 8002f96:	e002      	b.n	8002f9e <menu_select+0xfa>
            } else {
            	motorStatus = 1;
 8002f98:	4b38      	ldr	r3, [pc, #224]	@ (800307c <menu_select+0x1d8>)
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	701a      	strb	r2, [r3, #0]
            }
            screenNeedsRefresh = true;
 8002f9e:	4b38      	ldr	r3, [pc, #224]	@ (8003080 <menu_select+0x1dc>)
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	701a      	strb	r2, [r3, #0]
            break;
 8002fa4:	e060      	b.n	8003068 <menu_select+0x1c4>

        case UI_SEMI_AUTO:
            semiAutoEnabled = !semiAutoEnabled;
 8002fa6:	4b37      	ldr	r3, [pc, #220]	@ (8003084 <menu_select+0x1e0>)
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	bf14      	ite	ne
 8002fae:	2301      	movne	r3, #1
 8002fb0:	2300      	moveq	r3, #0
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	f083 0301 	eor.w	r3, r3, #1
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	b2da      	uxtb	r2, r3
 8002fc0:	4b30      	ldr	r3, [pc, #192]	@ (8003084 <menu_select+0x1e0>)
 8002fc2:	701a      	strb	r2, [r3, #0]
            screenNeedsRefresh = true;
 8002fc4:	4b2e      	ldr	r3, [pc, #184]	@ (8003080 <menu_select+0x1dc>)
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	701a      	strb	r2, [r3, #0]
            break;
 8002fca:	e04d      	b.n	8003068 <menu_select+0x1c4>

        case UI_TIMER:
            // From timer display, SELECT enters editing ON time first
            ui = UI_TIMER_EDIT_ON_H;
 8002fcc:	4b29      	ldr	r3, [pc, #164]	@ (8003074 <menu_select+0x1d0>)
 8002fce:	2206      	movs	r2, #6
 8002fd0:	701a      	strb	r2, [r3, #0]
            break;
 8002fd2:	e049      	b.n	8003068 <menu_select+0x1c4>

        case UI_TIMER_EDIT_ON_H:
            ui = UI_TIMER_EDIT_ON_M; break;
 8002fd4:	4b27      	ldr	r3, [pc, #156]	@ (8003074 <menu_select+0x1d0>)
 8002fd6:	2207      	movs	r2, #7
 8002fd8:	701a      	strb	r2, [r3, #0]
 8002fda:	e045      	b.n	8003068 <menu_select+0x1c4>
        case UI_TIMER_EDIT_ON_M:
            ui = UI_TIMER_EDIT_OFF_H; break;
 8002fdc:	4b25      	ldr	r3, [pc, #148]	@ (8003074 <menu_select+0x1d0>)
 8002fde:	2208      	movs	r2, #8
 8002fe0:	701a      	strb	r2, [r3, #0]
 8002fe2:	e041      	b.n	8003068 <menu_select+0x1c4>
        case UI_TIMER_EDIT_OFF_H:
            ui = UI_TIMER_EDIT_OFF_M; break;
 8002fe4:	4b23      	ldr	r3, [pc, #140]	@ (8003074 <menu_select+0x1d0>)
 8002fe6:	2209      	movs	r2, #9
 8002fe8:	701a      	strb	r2, [r3, #0]
 8002fea:	e03d      	b.n	8003068 <menu_select+0x1c4>
        case UI_TIMER_EDIT_OFF_M:
            // finished editing timer; apply
            apply_timer_settings();
 8002fec:	f7ff fb22 	bl	8002634 <apply_timer_settings>
            ui = UI_TIMER; break;
 8002ff0:	4b20      	ldr	r3, [pc, #128]	@ (8003074 <menu_select+0x1d0>)
 8002ff2:	2205      	movs	r2, #5
 8002ff4:	701a      	strb	r2, [r3, #0]
 8002ff6:	e037      	b.n	8003068 <menu_select+0x1c4>

        case UI_SEARCH:
            // enter edit gap
            ui = UI_SEARCH_EDIT_GAP; break;
 8002ff8:	4b1e      	ldr	r3, [pc, #120]	@ (8003074 <menu_select+0x1d0>)
 8002ffa:	220b      	movs	r2, #11
 8002ffc:	701a      	strb	r2, [r3, #0]
 8002ffe:	e033      	b.n	8003068 <menu_select+0x1c4>

        case UI_SEARCH_EDIT_GAP:
            // after editing gap go to dry
            apply_search_settings(); // partial apply
 8003000:	f7ff fad8 	bl	80025b4 <apply_search_settings>
            ui = UI_SEARCH_EDIT_DRY; break;
 8003004:	4b1b      	ldr	r3, [pc, #108]	@ (8003074 <menu_select+0x1d0>)
 8003006:	220c      	movs	r2, #12
 8003008:	701a      	strb	r2, [r3, #0]
 800300a:	e02d      	b.n	8003068 <menu_select+0x1c4>
        case UI_SEARCH_EDIT_DRY:
            apply_search_settings();
 800300c:	f7ff fad2 	bl	80025b4 <apply_search_settings>
            ui = UI_SEARCH; break;
 8003010:	4b18      	ldr	r3, [pc, #96]	@ (8003074 <menu_select+0x1d0>)
 8003012:	220a      	movs	r2, #10
 8003014:	701a      	strb	r2, [r3, #0]
 8003016:	e027      	b.n	8003068 <menu_select+0x1c4>

        case UI_COUNTDOWN:
            // if countdown active, SELECT stops it, otherwise go to set/start
            if (countdownActive) {
 8003018:	4b1b      	ldr	r3, [pc, #108]	@ (8003088 <menu_select+0x1e4>)
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <menu_select+0x186>
                countdownActive = false;
 8003022:	4b19      	ldr	r3, [pc, #100]	@ (8003088 <menu_select+0x1e4>)
 8003024:	2200      	movs	r2, #0
 8003026:	701a      	strb	r2, [r3, #0]
            } else {
                ui = UI_COUNTDOWN_EDIT_MIN;
            }
            break;
 8003028:	e01e      	b.n	8003068 <menu_select+0x1c4>
                ui = UI_COUNTDOWN_EDIT_MIN;
 800302a:	4b12      	ldr	r3, [pc, #72]	@ (8003074 <menu_select+0x1d0>)
 800302c:	220e      	movs	r2, #14
 800302e:	701a      	strb	r2, [r3, #0]
            break;
 8003030:	e01a      	b.n	8003068 <menu_select+0x1c4>
        case UI_COUNTDOWN_EDIT_MIN:
            apply_countdown_settings();
 8003032:	f7ff faeb 	bl	800260c <apply_countdown_settings>
            // start countdown
            countdownActive = true;
 8003036:	4b14      	ldr	r3, [pc, #80]	@ (8003088 <menu_select+0x1e4>)
 8003038:	2201      	movs	r2, #1
 800303a:	701a      	strb	r2, [r3, #0]
            ui = UI_COUNTDOWN;
 800303c:	4b0d      	ldr	r3, [pc, #52]	@ (8003074 <menu_select+0x1d0>)
 800303e:	220d      	movs	r2, #13
 8003040:	701a      	strb	r2, [r3, #0]
            break;
 8003042:	e011      	b.n	8003068 <menu_select+0x1c4>

        case UI_TWIST:
            // SELECT enters edit ON duration
            ui = UI_TWIST_EDIT_ON; break;
 8003044:	4b0b      	ldr	r3, [pc, #44]	@ (8003074 <menu_select+0x1d0>)
 8003046:	2210      	movs	r2, #16
 8003048:	701a      	strb	r2, [r3, #0]
 800304a:	e00d      	b.n	8003068 <menu_select+0x1c4>
        case UI_TWIST_EDIT_ON:
            // next selects edit off
            ui = UI_TWIST_EDIT_OFF; break;
 800304c:	4b09      	ldr	r3, [pc, #36]	@ (8003074 <menu_select+0x1d0>)
 800304e:	2211      	movs	r2, #17
 8003050:	701a      	strb	r2, [r3, #0]
 8003052:	e009      	b.n	8003068 <menu_select+0x1c4>
        case UI_TWIST_EDIT_OFF:
            // finished editing twist -> apply
            apply_twist_settings();
 8003054:	f7ff fac4 	bl	80025e0 <apply_twist_settings>
            ui = UI_TWIST; break;
 8003058:	4b06      	ldr	r3, [pc, #24]	@ (8003074 <menu_select+0x1d0>)
 800305a:	220f      	movs	r2, #15
 800305c:	701a      	strb	r2, [r3, #0]
 800305e:	e003      	b.n	8003068 <menu_select+0x1c4>

        /* Edit screens handled above */
        default:
            ui = UI_DASH;
 8003060:	4b04      	ldr	r3, [pc, #16]	@ (8003074 <menu_select+0x1d0>)
 8003062:	2201      	movs	r2, #1
 8003064:	701a      	strb	r2, [r3, #0]
            break;
 8003066:	bf00      	nop
    }

    screenNeedsRefresh = true;
 8003068:	4b05      	ldr	r3, [pc, #20]	@ (8003080 <menu_select+0x1dc>)
 800306a:	2201      	movs	r2, #1
 800306c:	701a      	strb	r2, [r3, #0]
}
 800306e:	bf00      	nop
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	200003e4 	.word	0x200003e4
 8003078:	200003f4 	.word	0x200003f4
 800307c:	20000368 	.word	0x20000368
 8003080:	200003e5 	.word	0x200003e5
 8003084:	200003f0 	.word	0x200003f0
 8003088:	20000369 	.word	0x20000369

0800308c <menu_reset>:

static void menu_reset(void){
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
    // act as back/home
    refreshInactivityTimer();
 8003090:	f7ff f81c 	bl	80020cc <refreshInactivityTimer>

    switch (ui){
 8003094:	4b22      	ldr	r3, [pc, #136]	@ (8003120 <menu_reset+0x94>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	2b11      	cmp	r3, #17
 800309a:	dc36      	bgt.n	800310a <menu_reset+0x7e>
 800309c:	2b02      	cmp	r3, #2
 800309e:	da04      	bge.n	80030aa <menu_reset+0x1e>
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d036      	beq.n	8003112 <menu_reset+0x86>
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d020      	beq.n	80030ea <menu_reset+0x5e>
 80030a8:	e02f      	b.n	800310a <menu_reset+0x7e>
 80030aa:	461a      	mov	r2, r3
 80030ac:	2301      	movs	r3, #1
 80030ae:	4093      	lsls	r3, r2
 80030b0:	4a1c      	ldr	r2, [pc, #112]	@ (8003124 <menu_reset+0x98>)
 80030b2:	401a      	ands	r2, r3
 80030b4:	2a00      	cmp	r2, #0
 80030b6:	bf14      	ite	ne
 80030b8:	2201      	movne	r2, #1
 80030ba:	2200      	moveq	r2, #0
 80030bc:	b2d2      	uxtb	r2, r2
 80030be:	2a00      	cmp	r2, #0
 80030c0:	d11f      	bne.n	8003102 <menu_reset+0x76>
 80030c2:	f24a 4238 	movw	r2, #42040	@ 0xa438
 80030c6:	401a      	ands	r2, r3
 80030c8:	2a00      	cmp	r2, #0
 80030ca:	bf14      	ite	ne
 80030cc:	2201      	movne	r2, #1
 80030ce:	2200      	moveq	r2, #0
 80030d0:	b2d2      	uxtb	r2, r2
 80030d2:	2a00      	cmp	r2, #0
 80030d4:	d111      	bne.n	80030fa <menu_reset+0x6e>
 80030d6:	f003 0304 	and.w	r3, r3, #4
 80030da:	2b00      	cmp	r3, #0
 80030dc:	bf14      	ite	ne
 80030de:	2301      	movne	r3, #1
 80030e0:	2300      	moveq	r3, #0
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d104      	bne.n	80030f2 <menu_reset+0x66>
 80030e8:	e00f      	b.n	800310a <menu_reset+0x7e>
        case UI_WELCOME:
            // do nothing
            break;
        case UI_DASH:
            // already at dash - go to welcome
            ui = UI_WELCOME;
 80030ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003120 <menu_reset+0x94>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	701a      	strb	r2, [r3, #0]
            break;
 80030f0:	e010      	b.n	8003114 <menu_reset+0x88>
        case UI_MENU:
            // go back to dash
            ui = UI_DASH;
 80030f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003120 <menu_reset+0x94>)
 80030f4:	2201      	movs	r2, #1
 80030f6:	701a      	strb	r2, [r3, #0]
            break;
 80030f8:	e00c      	b.n	8003114 <menu_reset+0x88>
        case UI_TIMER:
        case UI_SEARCH:
        case UI_COUNTDOWN:
        case UI_TWIST:
            // return to menu
            ui = UI_MENU;
 80030fa:	4b09      	ldr	r3, [pc, #36]	@ (8003120 <menu_reset+0x94>)
 80030fc:	2202      	movs	r2, #2
 80030fe:	701a      	strb	r2, [r3, #0]
            break;
 8003100:	e008      	b.n	8003114 <menu_reset+0x88>
        case UI_SEARCH_EDIT_DRY:
        case UI_COUNTDOWN_EDIT_MIN:
        case UI_TWIST_EDIT_ON:
        case UI_TWIST_EDIT_OFF:
            // cancel edits, go to parent screen (menu for simplicity)
            ui = UI_MENU;
 8003102:	4b07      	ldr	r3, [pc, #28]	@ (8003120 <menu_reset+0x94>)
 8003104:	2202      	movs	r2, #2
 8003106:	701a      	strb	r2, [r3, #0]
            break;
 8003108:	e004      	b.n	8003114 <menu_reset+0x88>
        default:
            ui = UI_DASH;
 800310a:	4b05      	ldr	r3, [pc, #20]	@ (8003120 <menu_reset+0x94>)
 800310c:	2201      	movs	r2, #1
 800310e:	701a      	strb	r2, [r3, #0]
            break;
 8003110:	e000      	b.n	8003114 <menu_reset+0x88>
            break;
 8003112:	bf00      	nop
    }
    screenNeedsRefresh = true;
 8003114:	4b04      	ldr	r3, [pc, #16]	@ (8003128 <menu_reset+0x9c>)
 8003116:	2201      	movs	r2, #1
 8003118:	701a      	strb	r2, [r3, #0]
}
 800311a:	bf00      	nop
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	200003e4 	.word	0x200003e4
 8003124:	00035bc0 	.word	0x00035bc0
 8003128:	200003e5 	.word	0x200003e5

0800312c <Screen_HandleButton>:

/* Public button handler used by switch polling */
void Screen_HandleButton(UiButton b){
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	4603      	mov	r3, r0
 8003134:	71fb      	strb	r3, [r7, #7]
    if (b == BTN_RESET){ menu_reset(); return; }
 8003136:	79fb      	ldrb	r3, [r7, #7]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d102      	bne.n	8003142 <Screen_HandleButton+0x16>
 800313c:	f7ff ffa6 	bl	800308c <menu_reset>
 8003140:	e011      	b.n	8003166 <Screen_HandleButton+0x3a>
    if (b == BTN_UP) { menu_move_up(); return; }
 8003142:	79fb      	ldrb	r3, [r7, #7]
 8003144:	2b03      	cmp	r3, #3
 8003146:	d102      	bne.n	800314e <Screen_HandleButton+0x22>
 8003148:	f7ff fcf2 	bl	8002b30 <menu_move_up>
 800314c:	e00b      	b.n	8003166 <Screen_HandleButton+0x3a>
    if (b == BTN_DOWN) { menu_move_down(); return; }
 800314e:	79fb      	ldrb	r3, [r7, #7]
 8003150:	2b04      	cmp	r3, #4
 8003152:	d102      	bne.n	800315a <Screen_HandleButton+0x2e>
 8003154:	f7ff fdce 	bl	8002cf4 <menu_move_down>
 8003158:	e005      	b.n	8003166 <Screen_HandleButton+0x3a>
    if (b == BTN_SELECT) { menu_select(); return; }
 800315a:	79fb      	ldrb	r3, [r7, #7]
 800315c:	2b02      	cmp	r3, #2
 800315e:	d102      	bne.n	8003166 <Screen_HandleButton+0x3a>
 8003160:	f7ff fea0 	bl	8002ea4 <menu_select>
 8003164:	bf00      	nop
}
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <Screen_HandleSwitches>:

/* Generic switch handler - keeps your previous mapping style (change ports/pins if different) */
void Screen_HandleSwitches(void){
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
        {SWITCH3_GPIO_Port, SWITCH3_Pin, BTN_UP, LED3_Pin},
        {SWITCH4_GPIO_Port, SWITCH4_Pin, BTN_DOWN, LED4_Pin}
    };
    static bool prev[4] = {true,true,true,true};

    for (int i=0; i<4; i++){
 8003172:	2300      	movs	r3, #0
 8003174:	607b      	str	r3, [r7, #4]
 8003176:	e056      	b.n	8003226 <Screen_HandleSwitches+0xba>
        bool pressed = (HAL_GPIO_ReadPin(switchMap[i].port, switchMap[i].pin) == GPIO_PIN_RESET);
 8003178:	492f      	ldr	r1, [pc, #188]	@ (8003238 <Screen_HandleSwitches+0xcc>)
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	4613      	mov	r3, r2
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	4413      	add	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	440b      	add	r3, r1
 8003186:	6818      	ldr	r0, [r3, #0]
 8003188:	492b      	ldr	r1, [pc, #172]	@ (8003238 <Screen_HandleSwitches+0xcc>)
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	4613      	mov	r3, r2
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	4413      	add	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	440b      	add	r3, r1
 8003196:	3304      	adds	r3, #4
 8003198:	881b      	ldrh	r3, [r3, #0]
 800319a:	4619      	mov	r1, r3
 800319c:	f001 fb5a 	bl	8004854 <HAL_GPIO_ReadPin>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	bf0c      	ite	eq
 80031a6:	2301      	moveq	r3, #1
 80031a8:	2300      	movne	r3, #0
 80031aa:	70fb      	strb	r3, [r7, #3]
        if (pressed && prev[i]) {
 80031ac:	78fb      	ldrb	r3, [r7, #3]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d02b      	beq.n	800320a <Screen_HandleSwitches+0x9e>
 80031b2:	4a22      	ldr	r2, [pc, #136]	@ (800323c <Screen_HandleSwitches+0xd0>)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4413      	add	r3, r2
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d025      	beq.n	800320a <Screen_HandleSwitches+0x9e>
            prev[i] = false;
 80031be:	4a1f      	ldr	r2, [pc, #124]	@ (800323c <Screen_HandleSwitches+0xd0>)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4413      	add	r3, r2
 80031c4:	2200      	movs	r2, #0
 80031c6:	701a      	strb	r2, [r3, #0]
            // toggle corresponding indicator LED (assuming LED pin is on same port)
            HAL_GPIO_TogglePin(switchMap[i].port, switchMap[i].ledPin);
 80031c8:	491b      	ldr	r1, [pc, #108]	@ (8003238 <Screen_HandleSwitches+0xcc>)
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	4613      	mov	r3, r2
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	4413      	add	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	6818      	ldr	r0, [r3, #0]
 80031d8:	4917      	ldr	r1, [pc, #92]	@ (8003238 <Screen_HandleSwitches+0xcc>)
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	4613      	mov	r3, r2
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	4413      	add	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	440b      	add	r3, r1
 80031e6:	3308      	adds	r3, #8
 80031e8:	881b      	ldrh	r3, [r3, #0]
 80031ea:	4619      	mov	r1, r3
 80031ec:	f001 fb61 	bl	80048b2 <HAL_GPIO_TogglePin>
            Screen_HandleButton(switchMap[i].btn);
 80031f0:	4911      	ldr	r1, [pc, #68]	@ (8003238 <Screen_HandleSwitches+0xcc>)
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	4613      	mov	r3, r2
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	4413      	add	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	440b      	add	r3, r1
 80031fe:	3306      	adds	r3, #6
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f7ff ff92 	bl	800312c <Screen_HandleButton>
 8003208:	e00a      	b.n	8003220 <Screen_HandleSwitches+0xb4>
        } else if (!pressed) prev[i] = true;
 800320a:	78fb      	ldrb	r3, [r7, #3]
 800320c:	f083 0301 	eor.w	r3, r3, #1
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d004      	beq.n	8003220 <Screen_HandleSwitches+0xb4>
 8003216:	4a09      	ldr	r2, [pc, #36]	@ (800323c <Screen_HandleSwitches+0xd0>)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4413      	add	r3, r2
 800321c:	2201      	movs	r2, #1
 800321e:	701a      	strb	r2, [r3, #0]
    for (int i=0; i<4; i++){
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	3301      	adds	r3, #1
 8003224:	607b      	str	r3, [r7, #4]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b03      	cmp	r3, #3
 800322a:	dda5      	ble.n	8003178 <Screen_HandleSwitches+0xc>
    }
}
 800322c:	bf00      	nop
 800322e:	bf00      	nop
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	08007e98 	.word	0x08007e98
 800323c:	20000064 	.word	0x20000064

08003240 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003246:	4b15      	ldr	r3, [pc, #84]	@ (800329c <HAL_MspInit+0x5c>)
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	4a14      	ldr	r2, [pc, #80]	@ (800329c <HAL_MspInit+0x5c>)
 800324c:	f043 0301 	orr.w	r3, r3, #1
 8003250:	6193      	str	r3, [r2, #24]
 8003252:	4b12      	ldr	r3, [pc, #72]	@ (800329c <HAL_MspInit+0x5c>)
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	60bb      	str	r3, [r7, #8]
 800325c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800325e:	4b0f      	ldr	r3, [pc, #60]	@ (800329c <HAL_MspInit+0x5c>)
 8003260:	69db      	ldr	r3, [r3, #28]
 8003262:	4a0e      	ldr	r2, [pc, #56]	@ (800329c <HAL_MspInit+0x5c>)
 8003264:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003268:	61d3      	str	r3, [r2, #28]
 800326a:	4b0c      	ldr	r3, [pc, #48]	@ (800329c <HAL_MspInit+0x5c>)
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003272:	607b      	str	r3, [r7, #4]
 8003274:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003276:	4b0a      	ldr	r3, [pc, #40]	@ (80032a0 <HAL_MspInit+0x60>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	60fb      	str	r3, [r7, #12]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003282:	60fb      	str	r3, [r7, #12]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800328a:	60fb      	str	r3, [r7, #12]
 800328c:	4a04      	ldr	r2, [pc, #16]	@ (80032a0 <HAL_MspInit+0x60>)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003292:	bf00      	nop
 8003294:	3714      	adds	r7, #20
 8003296:	46bd      	mov	sp, r7
 8003298:	bc80      	pop	{r7}
 800329a:	4770      	bx	lr
 800329c:	40021000 	.word	0x40021000
 80032a0:	40010000 	.word	0x40010000

080032a4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b088      	sub	sp, #32
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032ac:	f107 0310 	add.w	r3, r7, #16
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	605a      	str	r2, [r3, #4]
 80032b6:	609a      	str	r2, [r3, #8]
 80032b8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a14      	ldr	r2, [pc, #80]	@ (8003310 <HAL_ADC_MspInit+0x6c>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d121      	bne.n	8003308 <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80032c4:	4b13      	ldr	r3, [pc, #76]	@ (8003314 <HAL_ADC_MspInit+0x70>)
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	4a12      	ldr	r2, [pc, #72]	@ (8003314 <HAL_ADC_MspInit+0x70>)
 80032ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032ce:	6193      	str	r3, [r2, #24]
 80032d0:	4b10      	ldr	r3, [pc, #64]	@ (8003314 <HAL_ADC_MspInit+0x70>)
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032d8:	60fb      	str	r3, [r7, #12]
 80032da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032dc:	4b0d      	ldr	r3, [pc, #52]	@ (8003314 <HAL_ADC_MspInit+0x70>)
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	4a0c      	ldr	r2, [pc, #48]	@ (8003314 <HAL_ADC_MspInit+0x70>)
 80032e2:	f043 0304 	orr.w	r3, r3, #4
 80032e6:	6193      	str	r3, [r2, #24]
 80032e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003314 <HAL_ADC_MspInit+0x70>)
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	f003 0304 	and.w	r3, r3, #4
 80032f0:	60bb      	str	r3, [r7, #8]
 80032f2:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80032f4:	233f      	movs	r3, #63	@ 0x3f
 80032f6:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032f8:	2303      	movs	r3, #3
 80032fa:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032fc:	f107 0310 	add.w	r3, r7, #16
 8003300:	4619      	mov	r1, r3
 8003302:	4805      	ldr	r0, [pc, #20]	@ (8003318 <HAL_ADC_MspInit+0x74>)
 8003304:	f001 f922 	bl	800454c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003308:	bf00      	nop
 800330a:	3720      	adds	r7, #32
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	40012400 	.word	0x40012400
 8003314:	40021000 	.word	0x40021000
 8003318:	40010800 	.word	0x40010800

0800331c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b088      	sub	sp, #32
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003324:	f107 0310 	add.w	r3, r7, #16
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	605a      	str	r2, [r3, #4]
 800332e:	609a      	str	r2, [r3, #8]
 8003330:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a16      	ldr	r2, [pc, #88]	@ (8003390 <HAL_I2C_MspInit+0x74>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d124      	bne.n	8003386 <HAL_I2C_MspInit+0x6a>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800333c:	4b15      	ldr	r3, [pc, #84]	@ (8003394 <HAL_I2C_MspInit+0x78>)
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	4a14      	ldr	r2, [pc, #80]	@ (8003394 <HAL_I2C_MspInit+0x78>)
 8003342:	f043 0308 	orr.w	r3, r3, #8
 8003346:	6193      	str	r3, [r2, #24]
 8003348:	4b12      	ldr	r3, [pc, #72]	@ (8003394 <HAL_I2C_MspInit+0x78>)
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	f003 0308 	and.w	r3, r3, #8
 8003350:	60fb      	str	r3, [r7, #12]
 8003352:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003354:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003358:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800335a:	2312      	movs	r3, #18
 800335c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800335e:	2303      	movs	r3, #3
 8003360:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003362:	f107 0310 	add.w	r3, r7, #16
 8003366:	4619      	mov	r1, r3
 8003368:	480b      	ldr	r0, [pc, #44]	@ (8003398 <HAL_I2C_MspInit+0x7c>)
 800336a:	f001 f8ef 	bl	800454c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800336e:	4b09      	ldr	r3, [pc, #36]	@ (8003394 <HAL_I2C_MspInit+0x78>)
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	4a08      	ldr	r2, [pc, #32]	@ (8003394 <HAL_I2C_MspInit+0x78>)
 8003374:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003378:	61d3      	str	r3, [r2, #28]
 800337a:	4b06      	ldr	r3, [pc, #24]	@ (8003394 <HAL_I2C_MspInit+0x78>)
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003382:	60bb      	str	r3, [r7, #8]
 8003384:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8003386:	bf00      	nop
 8003388:	3720      	adds	r7, #32
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	40005800 	.word	0x40005800
 8003394:	40021000 	.word	0x40021000
 8003398:	40010c00 	.word	0x40010c00

0800339c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a0f      	ldr	r2, [pc, #60]	@ (80033e8 <HAL_RTC_MspInit+0x4c>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d118      	bne.n	80033e0 <HAL_RTC_MspInit+0x44>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80033ae:	f001 ff35 	bl	800521c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80033b2:	4b0e      	ldr	r3, [pc, #56]	@ (80033ec <HAL_RTC_MspInit+0x50>)
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	4a0d      	ldr	r2, [pc, #52]	@ (80033ec <HAL_RTC_MspInit+0x50>)
 80033b8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80033bc:	61d3      	str	r3, [r2, #28]
 80033be:	4b0b      	ldr	r3, [pc, #44]	@ (80033ec <HAL_RTC_MspInit+0x50>)
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80033c6:	60fb      	str	r3, [r7, #12]
 80033c8:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80033ca:	4b09      	ldr	r3, [pc, #36]	@ (80033f0 <HAL_RTC_MspInit+0x54>)
 80033cc:	2201      	movs	r2, #1
 80033ce:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80033d0:	2200      	movs	r2, #0
 80033d2:	2100      	movs	r1, #0
 80033d4:	2029      	movs	r0, #41	@ 0x29
 80033d6:	f001 f882 	bl	80044de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80033da:	2029      	movs	r0, #41	@ 0x29
 80033dc:	f001 f89b 	bl	8004516 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80033e0:	bf00      	nop
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	40002800 	.word	0x40002800
 80033ec:	40021000 	.word	0x40021000
 80033f0:	4242043c 	.word	0x4242043c

080033f4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b08a      	sub	sp, #40	@ 0x28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033fc:	f107 0314 	add.w	r3, r7, #20
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	605a      	str	r2, [r3, #4]
 8003406:	609a      	str	r2, [r3, #8]
 8003408:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a22      	ldr	r2, [pc, #136]	@ (8003498 <HAL_SPI_MspInit+0xa4>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d13d      	bne.n	8003490 <HAL_SPI_MspInit+0x9c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003414:	4b21      	ldr	r3, [pc, #132]	@ (800349c <HAL_SPI_MspInit+0xa8>)
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	4a20      	ldr	r2, [pc, #128]	@ (800349c <HAL_SPI_MspInit+0xa8>)
 800341a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800341e:	6193      	str	r3, [r2, #24]
 8003420:	4b1e      	ldr	r3, [pc, #120]	@ (800349c <HAL_SPI_MspInit+0xa8>)
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003428:	613b      	str	r3, [r7, #16]
 800342a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800342c:	4b1b      	ldr	r3, [pc, #108]	@ (800349c <HAL_SPI_MspInit+0xa8>)
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	4a1a      	ldr	r2, [pc, #104]	@ (800349c <HAL_SPI_MspInit+0xa8>)
 8003432:	f043 0308 	orr.w	r3, r3, #8
 8003436:	6193      	str	r3, [r2, #24]
 8003438:	4b18      	ldr	r3, [pc, #96]	@ (800349c <HAL_SPI_MspInit+0xa8>)
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	f003 0308 	and.w	r3, r3, #8
 8003440:	60fb      	str	r3, [r7, #12]
 8003442:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8003444:	2328      	movs	r3, #40	@ 0x28
 8003446:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003448:	2302      	movs	r3, #2
 800344a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800344c:	2303      	movs	r3, #3
 800344e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003450:	f107 0314 	add.w	r3, r7, #20
 8003454:	4619      	mov	r1, r3
 8003456:	4812      	ldr	r0, [pc, #72]	@ (80034a0 <HAL_SPI_MspInit+0xac>)
 8003458:	f001 f878 	bl	800454c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800345c:	2310      	movs	r3, #16
 800345e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003460:	2300      	movs	r3, #0
 8003462:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003464:	2300      	movs	r3, #0
 8003466:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003468:	f107 0314 	add.w	r3, r7, #20
 800346c:	4619      	mov	r1, r3
 800346e:	480c      	ldr	r0, [pc, #48]	@ (80034a0 <HAL_SPI_MspInit+0xac>)
 8003470:	f001 f86c 	bl	800454c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8003474:	4b0b      	ldr	r3, [pc, #44]	@ (80034a4 <HAL_SPI_MspInit+0xb0>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	627b      	str	r3, [r7, #36]	@ 0x24
 800347a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800347c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8003480:	627b      	str	r3, [r7, #36]	@ 0x24
 8003482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003484:	f043 0301 	orr.w	r3, r3, #1
 8003488:	627b      	str	r3, [r7, #36]	@ 0x24
 800348a:	4a06      	ldr	r2, [pc, #24]	@ (80034a4 <HAL_SPI_MspInit+0xb0>)
 800348c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800348e:	6053      	str	r3, [r2, #4]

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003490:	bf00      	nop
 8003492:	3728      	adds	r7, #40	@ 0x28
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	40013000 	.word	0x40013000
 800349c:	40021000 	.word	0x40021000
 80034a0:	40010c00 	.word	0x40010c00
 80034a4:	40010000 	.word	0x40010000

080034a8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b088      	sub	sp, #32
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b0:	f107 0310 	add.w	r3, r7, #16
 80034b4:	2200      	movs	r2, #0
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	605a      	str	r2, [r3, #4]
 80034ba:	609a      	str	r2, [r3, #8]
 80034bc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a1c      	ldr	r2, [pc, #112]	@ (8003534 <HAL_UART_MspInit+0x8c>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d131      	bne.n	800352c <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80034c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003538 <HAL_UART_MspInit+0x90>)
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	4a1a      	ldr	r2, [pc, #104]	@ (8003538 <HAL_UART_MspInit+0x90>)
 80034ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034d2:	6193      	str	r3, [r2, #24]
 80034d4:	4b18      	ldr	r3, [pc, #96]	@ (8003538 <HAL_UART_MspInit+0x90>)
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034dc:	60fb      	str	r3, [r7, #12]
 80034de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034e0:	4b15      	ldr	r3, [pc, #84]	@ (8003538 <HAL_UART_MspInit+0x90>)
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	4a14      	ldr	r2, [pc, #80]	@ (8003538 <HAL_UART_MspInit+0x90>)
 80034e6:	f043 0304 	orr.w	r3, r3, #4
 80034ea:	6193      	str	r3, [r2, #24]
 80034ec:	4b12      	ldr	r3, [pc, #72]	@ (8003538 <HAL_UART_MspInit+0x90>)
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	60bb      	str	r3, [r7, #8]
 80034f6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80034f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80034fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034fe:	2302      	movs	r3, #2
 8003500:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003502:	2303      	movs	r3, #3
 8003504:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003506:	f107 0310 	add.w	r3, r7, #16
 800350a:	4619      	mov	r1, r3
 800350c:	480b      	ldr	r0, [pc, #44]	@ (800353c <HAL_UART_MspInit+0x94>)
 800350e:	f001 f81d 	bl	800454c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003512:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003516:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003518:	2300      	movs	r3, #0
 800351a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351c:	2300      	movs	r3, #0
 800351e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003520:	f107 0310 	add.w	r3, r7, #16
 8003524:	4619      	mov	r1, r3
 8003526:	4805      	ldr	r0, [pc, #20]	@ (800353c <HAL_UART_MspInit+0x94>)
 8003528:	f001 f810 	bl	800454c <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800352c:	bf00      	nop
 800352e:	3720      	adds	r7, #32
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	40013800 	.word	0x40013800
 8003538:	40021000 	.word	0x40021000
 800353c:	40010800 	.word	0x40010800

08003540 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003544:	bf00      	nop
 8003546:	e7fd      	b.n	8003544 <NMI_Handler+0x4>

08003548 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800354c:	bf00      	nop
 800354e:	e7fd      	b.n	800354c <HardFault_Handler+0x4>

08003550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003554:	bf00      	nop
 8003556:	e7fd      	b.n	8003554 <MemManage_Handler+0x4>

08003558 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800355c:	bf00      	nop
 800355e:	e7fd      	b.n	800355c <BusFault_Handler+0x4>

08003560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003564:	bf00      	nop
 8003566:	e7fd      	b.n	8003564 <UsageFault_Handler+0x4>

08003568 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800356c:	bf00      	nop
 800356e:	46bd      	mov	sp, r7
 8003570:	bc80      	pop	{r7}
 8003572:	4770      	bx	lr

08003574 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003578:	bf00      	nop
 800357a:	46bd      	mov	sp, r7
 800357c:	bc80      	pop	{r7}
 800357e:	4770      	bx	lr

08003580 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003584:	bf00      	nop
 8003586:	46bd      	mov	sp, r7
 8003588:	bc80      	pop	{r7}
 800358a:	4770      	bx	lr

0800358c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003590:	f000 f988 	bl	80038a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003594:	bf00      	nop
 8003596:	bd80      	pop	{r7, pc}

08003598 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800359c:	4802      	ldr	r0, [pc, #8]	@ (80035a8 <RTC_Alarm_IRQHandler+0x10>)
 800359e:	f002 fd7d 	bl	800609c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80035a2:	bf00      	nop
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	200001f0 	.word	0x200001f0

080035ac <now_ms>:
static GPIO_PinState last_raw[SWITCH_COUNT];       // last sampled raw pin

static uint32_t      press_start_ms[SWITCH_COUNT]; // for long press
static bool          long_fired[SWITCH_COUNT];

static inline uint32_t now_ms(void) { return HAL_GetTick(); }
 80035ac:	b580      	push	{r7, lr}
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	f000 f98a 	bl	80038c8 <HAL_GetTick>
 80035b4:	4603      	mov	r3, r0
 80035b6:	4618      	mov	r0, r3
 80035b8:	bd80      	pop	{r7, pc}
	...

080035bc <Switches_Init>:
    }
}

/* --- Init all switches as input pullup --- */
void Switches_Init(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035c2:	1d3b      	adds	r3, r7, #4
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	605a      	str	r2, [r3, #4]
 80035ca:	609a      	str	r2, [r3, #8]
 80035cc:	60da      	str	r2, [r3, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ce:	4b20      	ldr	r3, [pc, #128]	@ (8003650 <Switches_Init+0x94>)
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	4a1f      	ldr	r2, [pc, #124]	@ (8003650 <Switches_Init+0x94>)
 80035d4:	f043 0308 	orr.w	r3, r3, #8
 80035d8:	6193      	str	r3, [r2, #24]
 80035da:	4b1d      	ldr	r3, [pc, #116]	@ (8003650 <Switches_Init+0x94>)
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	f003 0308 	and.w	r3, r3, #8
 80035e2:	603b      	str	r3, [r7, #0]
 80035e4:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035e6:	2300      	movs	r3, #0
 80035e8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035ea:	2301      	movs	r3, #1
 80035ec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pin  = SWITCH1_Pin|SWITCH2_Pin|SWITCH3_Pin|SWITCH4_Pin;
 80035ee:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80035f2:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(SWITCH1_GPIO_Port, &GPIO_InitStruct);
 80035f4:	1d3b      	adds	r3, r7, #4
 80035f6:	4619      	mov	r1, r3
 80035f8:	4816      	ldr	r0, [pc, #88]	@ (8003654 <Switches_Init+0x98>)
 80035fa:	f000 ffa7 	bl	800454c <HAL_GPIO_Init>

    for (int i = 0; i < SWITCH_COUNT; ++i) {
 80035fe:	2300      	movs	r3, #0
 8003600:	617b      	str	r3, [r7, #20]
 8003602:	e01d      	b.n	8003640 <Switches_Init+0x84>
        stable_state[i]   = GPIO_PIN_SET;  // released
 8003604:	4a14      	ldr	r2, [pc, #80]	@ (8003658 <Switches_Init+0x9c>)
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	4413      	add	r3, r2
 800360a:	2201      	movs	r2, #1
 800360c:	701a      	strb	r2, [r3, #0]
        last_raw[i]       = GPIO_PIN_SET;
 800360e:	4a13      	ldr	r2, [pc, #76]	@ (800365c <Switches_Init+0xa0>)
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	4413      	add	r3, r2
 8003614:	2201      	movs	r2, #1
 8003616:	701a      	strb	r2, [r3, #0]
        last_change[i]    = now_ms();
 8003618:	f7ff ffc8 	bl	80035ac <now_ms>
 800361c:	4602      	mov	r2, r0
 800361e:	4910      	ldr	r1, [pc, #64]	@ (8003660 <Switches_Init+0xa4>)
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        press_start_ms[i] = 0;
 8003626:	4a0f      	ldr	r2, [pc, #60]	@ (8003664 <Switches_Init+0xa8>)
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	2100      	movs	r1, #0
 800362c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        long_fired[i]     = false;
 8003630:	4a0d      	ldr	r2, [pc, #52]	@ (8003668 <Switches_Init+0xac>)
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	4413      	add	r3, r2
 8003636:	2200      	movs	r2, #0
 8003638:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < SWITCH_COUNT; ++i) {
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	3301      	adds	r3, #1
 800363e:	617b      	str	r3, [r7, #20]
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	2b03      	cmp	r3, #3
 8003644:	ddde      	ble.n	8003604 <Switches_Init+0x48>
    }
}
 8003646:	bf00      	nop
 8003648:	bf00      	nop
 800364a:	3718      	adds	r7, #24
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	40021000 	.word	0x40021000
 8003654:	40010c00 	.word	0x40010c00
 8003658:	200003fc 	.word	0x200003fc
 800365c:	20000410 	.word	0x20000410
 8003660:	20000400 	.word	0x20000400
 8003664:	20000414 	.word	0x20000414
 8003668:	20000424 	.word	0x20000424

0800366c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003674:	4a14      	ldr	r2, [pc, #80]	@ (80036c8 <_sbrk+0x5c>)
 8003676:	4b15      	ldr	r3, [pc, #84]	@ (80036cc <_sbrk+0x60>)
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003680:	4b13      	ldr	r3, [pc, #76]	@ (80036d0 <_sbrk+0x64>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d102      	bne.n	800368e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003688:	4b11      	ldr	r3, [pc, #68]	@ (80036d0 <_sbrk+0x64>)
 800368a:	4a12      	ldr	r2, [pc, #72]	@ (80036d4 <_sbrk+0x68>)
 800368c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800368e:	4b10      	ldr	r3, [pc, #64]	@ (80036d0 <_sbrk+0x64>)
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4413      	add	r3, r2
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	429a      	cmp	r2, r3
 800369a:	d207      	bcs.n	80036ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800369c:	f003 fd4a 	bl	8007134 <__errno>
 80036a0:	4603      	mov	r3, r0
 80036a2:	220c      	movs	r2, #12
 80036a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036a6:	f04f 33ff 	mov.w	r3, #4294967295
 80036aa:	e009      	b.n	80036c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036ac:	4b08      	ldr	r3, [pc, #32]	@ (80036d0 <_sbrk+0x64>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036b2:	4b07      	ldr	r3, [pc, #28]	@ (80036d0 <_sbrk+0x64>)
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4413      	add	r3, r2
 80036ba:	4a05      	ldr	r2, [pc, #20]	@ (80036d0 <_sbrk+0x64>)
 80036bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036be:	68fb      	ldr	r3, [r7, #12]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3718      	adds	r7, #24
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	20005000 	.word	0x20005000
 80036cc:	00000400 	.word	0x00000400
 80036d0:	20000428 	.word	0x20000428
 80036d4:	200005c0 	.word	0x200005c0

080036d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80036d8:	b480      	push	{r7}
 80036da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036dc:	bf00      	nop
 80036de:	46bd      	mov	sp, r7
 80036e0:	bc80      	pop	{r7}
 80036e2:	4770      	bx	lr

080036e4 <UART_Init>:

/**
  * @brief Initialize UART reception (interrupt mode, one byte at a time).
  */
void UART_Init(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	af00      	add	r7, sp, #0
    // Clear the buffer and reset index
    memset(rxBuffer, 0, sizeof(rxBuffer));
 80036e8:	2240      	movs	r2, #64	@ 0x40
 80036ea:	2100      	movs	r1, #0
 80036ec:	4807      	ldr	r0, [pc, #28]	@ (800370c <UART_Init+0x28>)
 80036ee:	f003 fd05 	bl	80070fc <memset>
    rxIndex = 0;
 80036f2:	4b07      	ldr	r3, [pc, #28]	@ (8003710 <UART_Init+0x2c>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	801a      	strh	r2, [r3, #0]
    packetReady = false;
 80036f8:	4b06      	ldr	r3, [pc, #24]	@ (8003714 <UART_Init+0x30>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	701a      	strb	r2, [r3, #0]

    // Start UART reception (non-blocking)
    HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 80036fe:	2201      	movs	r2, #1
 8003700:	4905      	ldr	r1, [pc, #20]	@ (8003718 <UART_Init+0x34>)
 8003702:	4806      	ldr	r0, [pc, #24]	@ (800371c <UART_Init+0x38>)
 8003704:	f003 fafa 	bl	8006cfc <HAL_UART_Receive_IT>
}
 8003708:	bf00      	nop
 800370a:	bd80      	pop	{r7, pc}
 800370c:	20000430 	.word	0x20000430
 8003710:	20000470 	.word	0x20000470
 8003714:	20000472 	.word	0x20000472
 8003718:	2000042c 	.word	0x2000042c
 800371c:	2000025c 	.word	0x2000025c

08003720 <UART_TransmitString>:

/**
  * @brief Transmit a null-terminated string.
  */
void UART_TransmitString(UART_HandleTypeDef *huart, const char *str)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 800372a:	6838      	ldr	r0, [r7, #0]
 800372c:	f7fc fd18 	bl	8000160 <strlen>
 8003730:	4603      	mov	r3, r0
 8003732:	b29a      	uxth	r2, r3
 8003734:	f04f 33ff 	mov.w	r3, #4294967295
 8003738:	6839      	ldr	r1, [r7, #0]
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f003 fa53 	bl	8006be6 <HAL_UART_Transmit>
}
 8003740:	bf00      	nop
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <UART_GetReceivedPacket>:
        HAL_UART_Receive_IT(&huart1, &rxByte, 1);
    }
}

bool UART_GetReceivedPacket(char *buffer, size_t buffer_size)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
    if (packetReady)
 8003752:	4b1b      	ldr	r3, [pc, #108]	@ (80037c0 <UART_GetReceivedPacket+0x78>)
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d02c      	beq.n	80037b4 <UART_GetReceivedPacket+0x6c>
    {
        // Ensure destination buffer is large enough
        size_t len = strlen(rxBuffer);
 800375a:	481a      	ldr	r0, [pc, #104]	@ (80037c4 <UART_GetReceivedPacket+0x7c>)
 800375c:	f7fc fd00 	bl	8000160 <strlen>
 8003760:	60f8      	str	r0, [r7, #12]
        if (len < buffer_size)
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	429a      	cmp	r2, r3
 8003768:	d219      	bcs.n	800379e <UART_GetReceivedPacket+0x56>
        {
            strncpy(buffer, rxBuffer, buffer_size - 1);
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	3b01      	subs	r3, #1
 800376e:	461a      	mov	r2, r3
 8003770:	4914      	ldr	r1, [pc, #80]	@ (80037c4 <UART_GetReceivedPacket+0x7c>)
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f003 fcca 	bl	800710c <strncpy>
            buffer[buffer_size - 1] = '\0'; // Ensure null-termination
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	3b01      	subs	r3, #1
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	4413      	add	r3, r2
 8003780:	2200      	movs	r2, #0
 8003782:	701a      	strb	r2, [r3, #0]

            // Reset internal buffer for next packet
            memset(rxBuffer, 0, sizeof(rxBuffer));
 8003784:	2240      	movs	r2, #64	@ 0x40
 8003786:	2100      	movs	r1, #0
 8003788:	480e      	ldr	r0, [pc, #56]	@ (80037c4 <UART_GetReceivedPacket+0x7c>)
 800378a:	f003 fcb7 	bl	80070fc <memset>
            rxIndex = 0;
 800378e:	4b0e      	ldr	r3, [pc, #56]	@ (80037c8 <UART_GetReceivedPacket+0x80>)
 8003790:	2200      	movs	r2, #0
 8003792:	801a      	strh	r2, [r3, #0]
            packetReady = false;
 8003794:	4b0a      	ldr	r3, [pc, #40]	@ (80037c0 <UART_GetReceivedPacket+0x78>)
 8003796:	2200      	movs	r2, #0
 8003798:	701a      	strb	r2, [r3, #0]
            return true;
 800379a:	2301      	movs	r3, #1
 800379c:	e00b      	b.n	80037b6 <UART_GetReceivedPacket+0x6e>
        }
        else
        {
            // Destination buffer too small, discard internal packet
            memset(rxBuffer, 0, sizeof(rxBuffer));
 800379e:	2240      	movs	r2, #64	@ 0x40
 80037a0:	2100      	movs	r1, #0
 80037a2:	4808      	ldr	r0, [pc, #32]	@ (80037c4 <UART_GetReceivedPacket+0x7c>)
 80037a4:	f003 fcaa 	bl	80070fc <memset>
            rxIndex = 0;
 80037a8:	4b07      	ldr	r3, [pc, #28]	@ (80037c8 <UART_GetReceivedPacket+0x80>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	801a      	strh	r2, [r3, #0]
            packetReady = false;
 80037ae:	4b04      	ldr	r3, [pc, #16]	@ (80037c0 <UART_GetReceivedPacket+0x78>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	701a      	strb	r2, [r3, #0]
            // Optionally, log an error
        }
    }
    return false; // Ensure to return false if no packet is ready
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	20000472 	.word	0x20000472
 80037c4:	20000430 	.word	0x20000430
 80037c8:	20000470 	.word	0x20000470

080037cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80037cc:	f7ff ff84 	bl	80036d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80037d0:	480b      	ldr	r0, [pc, #44]	@ (8003800 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80037d2:	490c      	ldr	r1, [pc, #48]	@ (8003804 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80037d4:	4a0c      	ldr	r2, [pc, #48]	@ (8003808 <LoopFillZerobss+0x16>)
  movs r3, #0
 80037d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037d8:	e002      	b.n	80037e0 <LoopCopyDataInit>

080037da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037de:	3304      	adds	r3, #4

080037e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037e4:	d3f9      	bcc.n	80037da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037e6:	4a09      	ldr	r2, [pc, #36]	@ (800380c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80037e8:	4c09      	ldr	r4, [pc, #36]	@ (8003810 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80037ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037ec:	e001      	b.n	80037f2 <LoopFillZerobss>

080037ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037f0:	3204      	adds	r2, #4

080037f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037f4:	d3fb      	bcc.n	80037ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80037f6:	f003 fca3 	bl	8007140 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80037fa:	f7fd fe8b 	bl	8001514 <main>
  bx lr
 80037fe:	4770      	bx	lr
  ldr r0, =_sdata
 8003800:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003804:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 8003808:	08007f4c 	.word	0x08007f4c
  ldr r2, =_sbss
 800380c:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 8003810:	200005c0 	.word	0x200005c0

08003814 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003814:	e7fe      	b.n	8003814 <ADC1_2_IRQHandler>
	...

08003818 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800381c:	4b08      	ldr	r3, [pc, #32]	@ (8003840 <HAL_Init+0x28>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a07      	ldr	r2, [pc, #28]	@ (8003840 <HAL_Init+0x28>)
 8003822:	f043 0310 	orr.w	r3, r3, #16
 8003826:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003828:	2003      	movs	r0, #3
 800382a:	f000 fe4d 	bl	80044c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800382e:	2000      	movs	r0, #0
 8003830:	f000 f808 	bl	8003844 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003834:	f7ff fd04 	bl	8003240 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	40022000 	.word	0x40022000

08003844 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800384c:	4b12      	ldr	r3, [pc, #72]	@ (8003898 <HAL_InitTick+0x54>)
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	4b12      	ldr	r3, [pc, #72]	@ (800389c <HAL_InitTick+0x58>)
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	4619      	mov	r1, r3
 8003856:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800385a:	fbb3 f3f1 	udiv	r3, r3, r1
 800385e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003862:	4618      	mov	r0, r3
 8003864:	f000 fe65 	bl	8004532 <HAL_SYSTICK_Config>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e00e      	b.n	8003890 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2b0f      	cmp	r3, #15
 8003876:	d80a      	bhi.n	800388e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003878:	2200      	movs	r2, #0
 800387a:	6879      	ldr	r1, [r7, #4]
 800387c:	f04f 30ff 	mov.w	r0, #4294967295
 8003880:	f000 fe2d 	bl	80044de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003884:	4a06      	ldr	r2, [pc, #24]	@ (80038a0 <HAL_InitTick+0x5c>)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800388a:	2300      	movs	r3, #0
 800388c:	e000      	b.n	8003890 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
}
 8003890:	4618      	mov	r0, r3
 8003892:	3708      	adds	r7, #8
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	20000068 	.word	0x20000068
 800389c:	20000070 	.word	0x20000070
 80038a0:	2000006c 	.word	0x2000006c

080038a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038a8:	4b05      	ldr	r3, [pc, #20]	@ (80038c0 <HAL_IncTick+0x1c>)
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	461a      	mov	r2, r3
 80038ae:	4b05      	ldr	r3, [pc, #20]	@ (80038c4 <HAL_IncTick+0x20>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4413      	add	r3, r2
 80038b4:	4a03      	ldr	r2, [pc, #12]	@ (80038c4 <HAL_IncTick+0x20>)
 80038b6:	6013      	str	r3, [r2, #0]
}
 80038b8:	bf00      	nop
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bc80      	pop	{r7}
 80038be:	4770      	bx	lr
 80038c0:	20000070 	.word	0x20000070
 80038c4:	20000474 	.word	0x20000474

080038c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038c8:	b480      	push	{r7}
 80038ca:	af00      	add	r7, sp, #0
  return uwTick;
 80038cc:	4b02      	ldr	r3, [pc, #8]	@ (80038d8 <HAL_GetTick+0x10>)
 80038ce:	681b      	ldr	r3, [r3, #0]
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bc80      	pop	{r7}
 80038d6:	4770      	bx	lr
 80038d8:	20000474 	.word	0x20000474

080038dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038e4:	f7ff fff0 	bl	80038c8 <HAL_GetTick>
 80038e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f4:	d005      	beq.n	8003902 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003920 <HAL_Delay+0x44>)
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	461a      	mov	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	4413      	add	r3, r2
 8003900:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003902:	bf00      	nop
 8003904:	f7ff ffe0 	bl	80038c8 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	429a      	cmp	r2, r3
 8003912:	d8f7      	bhi.n	8003904 <HAL_Delay+0x28>
  {
  }
}
 8003914:	bf00      	nop
 8003916:	bf00      	nop
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	20000070 	.word	0x20000070

08003924 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b086      	sub	sp, #24
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800392c:	2300      	movs	r3, #0
 800392e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003930:	2300      	movs	r3, #0
 8003932:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003934:	2300      	movs	r3, #0
 8003936:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003938:	2300      	movs	r3, #0
 800393a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e0be      	b.n	8003ac4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003950:	2b00      	cmp	r3, #0
 8003952:	d109      	bne.n	8003968 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f7ff fc9e 	bl	80032a4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 fbf1 	bl	8004150 <ADC_ConversionStop_Disable>
 800396e:	4603      	mov	r3, r0
 8003970:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003976:	f003 0310 	and.w	r3, r3, #16
 800397a:	2b00      	cmp	r3, #0
 800397c:	f040 8099 	bne.w	8003ab2 <HAL_ADC_Init+0x18e>
 8003980:	7dfb      	ldrb	r3, [r7, #23]
 8003982:	2b00      	cmp	r3, #0
 8003984:	f040 8095 	bne.w	8003ab2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800398c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003990:	f023 0302 	bic.w	r3, r3, #2
 8003994:	f043 0202 	orr.w	r2, r3, #2
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80039a4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	7b1b      	ldrb	r3, [r3, #12]
 80039aa:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80039ac:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80039ae:	68ba      	ldr	r2, [r7, #8]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039bc:	d003      	beq.n	80039c6 <HAL_ADC_Init+0xa2>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d102      	bne.n	80039cc <HAL_ADC_Init+0xa8>
 80039c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80039ca:	e000      	b.n	80039ce <HAL_ADC_Init+0xaa>
 80039cc:	2300      	movs	r3, #0
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	7d1b      	ldrb	r3, [r3, #20]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d119      	bne.n	8003a10 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	7b1b      	ldrb	r3, [r3, #12]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d109      	bne.n	80039f8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	3b01      	subs	r3, #1
 80039ea:	035a      	lsls	r2, r3, #13
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80039f4:	613b      	str	r3, [r7, #16]
 80039f6:	e00b      	b.n	8003a10 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039fc:	f043 0220 	orr.w	r2, r3, #32
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a08:	f043 0201 	orr.w	r2, r3, #1
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	430a      	orrs	r2, r1
 8003a22:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689a      	ldr	r2, [r3, #8]
 8003a2a:	4b28      	ldr	r3, [pc, #160]	@ (8003acc <HAL_ADC_Init+0x1a8>)
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	6812      	ldr	r2, [r2, #0]
 8003a32:	68b9      	ldr	r1, [r7, #8]
 8003a34:	430b      	orrs	r3, r1
 8003a36:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a40:	d003      	beq.n	8003a4a <HAL_ADC_Init+0x126>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d104      	bne.n	8003a54 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	051b      	lsls	r3, r3, #20
 8003a52:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a5a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	430a      	orrs	r2, r1
 8003a66:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689a      	ldr	r2, [r3, #8]
 8003a6e:	4b18      	ldr	r3, [pc, #96]	@ (8003ad0 <HAL_ADC_Init+0x1ac>)
 8003a70:	4013      	ands	r3, r2
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d10b      	bne.n	8003a90 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a82:	f023 0303 	bic.w	r3, r3, #3
 8003a86:	f043 0201 	orr.w	r2, r3, #1
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003a8e:	e018      	b.n	8003ac2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a94:	f023 0312 	bic.w	r3, r3, #18
 8003a98:	f043 0210 	orr.w	r2, r3, #16
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa4:	f043 0201 	orr.w	r2, r3, #1
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003ab0:	e007      	b.n	8003ac2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ab6:	f043 0210 	orr.w	r2, r3, #16
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003ac2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3718      	adds	r7, #24
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	ffe1f7fd 	.word	0xffe1f7fd
 8003ad0:	ff1f0efe 	.word	0xff1f0efe

08003ad4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003adc:	2300      	movs	r3, #0
 8003ade:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d101      	bne.n	8003aee <HAL_ADC_Start+0x1a>
 8003aea:	2302      	movs	r3, #2
 8003aec:	e098      	b.n	8003c20 <HAL_ADC_Start+0x14c>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 fad0 	bl	800409c <ADC_Enable>
 8003afc:	4603      	mov	r3, r0
 8003afe:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003b00:	7bfb      	ldrb	r3, [r7, #15]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	f040 8087 	bne.w	8003c16 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b10:	f023 0301 	bic.w	r3, r3, #1
 8003b14:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a41      	ldr	r2, [pc, #260]	@ (8003c28 <HAL_ADC_Start+0x154>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d105      	bne.n	8003b32 <HAL_ADC_Start+0x5e>
 8003b26:	4b41      	ldr	r3, [pc, #260]	@ (8003c2c <HAL_ADC_Start+0x158>)
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d115      	bne.n	8003b5e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b36:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d026      	beq.n	8003b9a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b50:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003b54:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003b5c:	e01d      	b.n	8003b9a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b62:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a2f      	ldr	r2, [pc, #188]	@ (8003c2c <HAL_ADC_Start+0x158>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d004      	beq.n	8003b7e <HAL_ADC_Start+0xaa>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a2b      	ldr	r2, [pc, #172]	@ (8003c28 <HAL_ADC_Start+0x154>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d10d      	bne.n	8003b9a <HAL_ADC_Start+0xc6>
 8003b7e:	4b2b      	ldr	r3, [pc, #172]	@ (8003c2c <HAL_ADC_Start+0x158>)
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d007      	beq.n	8003b9a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b8e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003b92:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d006      	beq.n	8003bb4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003baa:	f023 0206 	bic.w	r2, r3, #6
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003bb2:	e002      	b.n	8003bba <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f06f 0202 	mvn.w	r2, #2
 8003bca:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003bd6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003bda:	d113      	bne.n	8003c04 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003be0:	4a11      	ldr	r2, [pc, #68]	@ (8003c28 <HAL_ADC_Start+0x154>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d105      	bne.n	8003bf2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003be6:	4b11      	ldr	r3, [pc, #68]	@ (8003c2c <HAL_ADC_Start+0x158>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d108      	bne.n	8003c04 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	689a      	ldr	r2, [r3, #8]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8003c00:	609a      	str	r2, [r3, #8]
 8003c02:	e00c      	b.n	8003c1e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	689a      	ldr	r2, [r3, #8]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003c12:	609a      	str	r2, [r3, #8]
 8003c14:	e003      	b.n	8003c1e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	40012800 	.word	0x40012800
 8003c2c:	40012400 	.word	0x40012400

08003c30 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d101      	bne.n	8003c4a <HAL_ADC_Stop+0x1a>
 8003c46:	2302      	movs	r3, #2
 8003c48:	e01a      	b.n	8003c80 <HAL_ADC_Stop+0x50>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 fa7c 	bl	8004150 <ADC_ConversionStop_Disable>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003c5c:	7bfb      	ldrb	r3, [r7, #15]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d109      	bne.n	8003c76 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c66:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003c6a:	f023 0301 	bic.w	r3, r3, #1
 8003c6e:	f043 0201 	orr.w	r2, r3, #1
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003c88:	b590      	push	{r4, r7, lr}
 8003c8a:	b087      	sub	sp, #28
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003c92:	2300      	movs	r3, #0
 8003c94:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003c96:	2300      	movs	r3, #0
 8003c98:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8003c9e:	f7ff fe13 	bl	80038c8 <HAL_GetTick>
 8003ca2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00b      	beq.n	8003cca <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cb6:	f043 0220 	orr.w	r2, r3, #32
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e0d3      	b.n	8003e72 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d131      	bne.n	8003d3c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cde:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d12a      	bne.n	8003d3c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003ce6:	e021      	b.n	8003d2c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cee:	d01d      	beq.n	8003d2c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d007      	beq.n	8003d06 <HAL_ADC_PollForConversion+0x7e>
 8003cf6:	f7ff fde7 	bl	80038c8 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d212      	bcs.n	8003d2c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d10b      	bne.n	8003d2c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d18:	f043 0204 	orr.w	r2, r3, #4
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e0a2      	b.n	8003e72 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0d6      	beq.n	8003ce8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003d3a:	e070      	b.n	8003e1e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003d3c:	4b4f      	ldr	r3, [pc, #316]	@ (8003e7c <HAL_ADC_PollForConversion+0x1f4>)
 8003d3e:	681c      	ldr	r4, [r3, #0]
 8003d40:	2002      	movs	r0, #2
 8003d42:	f001 ff3d 	bl	8005bc0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003d46:	4603      	mov	r3, r0
 8003d48:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6919      	ldr	r1, [r3, #16]
 8003d52:	4b4b      	ldr	r3, [pc, #300]	@ (8003e80 <HAL_ADC_PollForConversion+0x1f8>)
 8003d54:	400b      	ands	r3, r1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d118      	bne.n	8003d8c <HAL_ADC_PollForConversion+0x104>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68d9      	ldr	r1, [r3, #12]
 8003d60:	4b48      	ldr	r3, [pc, #288]	@ (8003e84 <HAL_ADC_PollForConversion+0x1fc>)
 8003d62:	400b      	ands	r3, r1
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d111      	bne.n	8003d8c <HAL_ADC_PollForConversion+0x104>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	6919      	ldr	r1, [r3, #16]
 8003d6e:	4b46      	ldr	r3, [pc, #280]	@ (8003e88 <HAL_ADC_PollForConversion+0x200>)
 8003d70:	400b      	ands	r3, r1
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d108      	bne.n	8003d88 <HAL_ADC_PollForConversion+0x100>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68d9      	ldr	r1, [r3, #12]
 8003d7c:	4b43      	ldr	r3, [pc, #268]	@ (8003e8c <HAL_ADC_PollForConversion+0x204>)
 8003d7e:	400b      	ands	r3, r1
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d101      	bne.n	8003d88 <HAL_ADC_PollForConversion+0x100>
 8003d84:	2314      	movs	r3, #20
 8003d86:	e020      	b.n	8003dca <HAL_ADC_PollForConversion+0x142>
 8003d88:	2329      	movs	r3, #41	@ 0x29
 8003d8a:	e01e      	b.n	8003dca <HAL_ADC_PollForConversion+0x142>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6919      	ldr	r1, [r3, #16]
 8003d92:	4b3d      	ldr	r3, [pc, #244]	@ (8003e88 <HAL_ADC_PollForConversion+0x200>)
 8003d94:	400b      	ands	r3, r1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d106      	bne.n	8003da8 <HAL_ADC_PollForConversion+0x120>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68d9      	ldr	r1, [r3, #12]
 8003da0:	4b3a      	ldr	r3, [pc, #232]	@ (8003e8c <HAL_ADC_PollForConversion+0x204>)
 8003da2:	400b      	ands	r3, r1
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00d      	beq.n	8003dc4 <HAL_ADC_PollForConversion+0x13c>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6919      	ldr	r1, [r3, #16]
 8003dae:	4b38      	ldr	r3, [pc, #224]	@ (8003e90 <HAL_ADC_PollForConversion+0x208>)
 8003db0:	400b      	ands	r3, r1
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d108      	bne.n	8003dc8 <HAL_ADC_PollForConversion+0x140>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68d9      	ldr	r1, [r3, #12]
 8003dbc:	4b34      	ldr	r3, [pc, #208]	@ (8003e90 <HAL_ADC_PollForConversion+0x208>)
 8003dbe:	400b      	ands	r3, r1
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d101      	bne.n	8003dc8 <HAL_ADC_PollForConversion+0x140>
 8003dc4:	2354      	movs	r3, #84	@ 0x54
 8003dc6:	e000      	b.n	8003dca <HAL_ADC_PollForConversion+0x142>
 8003dc8:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8003dca:	fb02 f303 	mul.w	r3, r2, r3
 8003dce:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003dd0:	e021      	b.n	8003e16 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd8:	d01a      	beq.n	8003e10 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d007      	beq.n	8003df0 <HAL_ADC_PollForConversion+0x168>
 8003de0:	f7ff fd72 	bl	80038c8 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d20f      	bcs.n	8003e10 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d90b      	bls.n	8003e10 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dfc:	f043 0204 	orr.w	r2, r3, #4
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e030      	b.n	8003e72 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	3301      	adds	r3, #1
 8003e14:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d8d9      	bhi.n	8003dd2 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f06f 0212 	mvn.w	r2, #18
 8003e26:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e2c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003e3e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003e42:	d115      	bne.n	8003e70 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d111      	bne.n	8003e70 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d105      	bne.n	8003e70 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e68:	f043 0201 	orr.w	r2, r3, #1
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	371c      	adds	r7, #28
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd90      	pop	{r4, r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	20000068 	.word	0x20000068
 8003e80:	24924924 	.word	0x24924924
 8003e84:	00924924 	.word	0x00924924
 8003e88:	12492492 	.word	0x12492492
 8003e8c:	00492492 	.word	0x00492492
 8003e90:	00249249 	.word	0x00249249

08003e94 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bc80      	pop	{r7}
 8003eaa:	4770      	bx	lr

08003eac <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d101      	bne.n	8003ecc <HAL_ADC_ConfigChannel+0x20>
 8003ec8:	2302      	movs	r3, #2
 8003eca:	e0dc      	b.n	8004086 <HAL_ADC_ConfigChannel+0x1da>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	2b06      	cmp	r3, #6
 8003eda:	d81c      	bhi.n	8003f16 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685a      	ldr	r2, [r3, #4]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4413      	add	r3, r2
 8003eec:	3b05      	subs	r3, #5
 8003eee:	221f      	movs	r2, #31
 8003ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef4:	43db      	mvns	r3, r3
 8003ef6:	4019      	ands	r1, r3
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	6818      	ldr	r0, [r3, #0]
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	685a      	ldr	r2, [r3, #4]
 8003f00:	4613      	mov	r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	4413      	add	r3, r2
 8003f06:	3b05      	subs	r3, #5
 8003f08:	fa00 f203 	lsl.w	r2, r0, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	430a      	orrs	r2, r1
 8003f12:	635a      	str	r2, [r3, #52]	@ 0x34
 8003f14:	e03c      	b.n	8003f90 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	2b0c      	cmp	r3, #12
 8003f1c:	d81c      	bhi.n	8003f58 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685a      	ldr	r2, [r3, #4]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	4413      	add	r3, r2
 8003f2e:	3b23      	subs	r3, #35	@ 0x23
 8003f30:	221f      	movs	r2, #31
 8003f32:	fa02 f303 	lsl.w	r3, r2, r3
 8003f36:	43db      	mvns	r3, r3
 8003f38:	4019      	ands	r1, r3
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	6818      	ldr	r0, [r3, #0]
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	4613      	mov	r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	4413      	add	r3, r2
 8003f48:	3b23      	subs	r3, #35	@ 0x23
 8003f4a:	fa00 f203 	lsl.w	r2, r0, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	430a      	orrs	r2, r1
 8003f54:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f56:	e01b      	b.n	8003f90 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	685a      	ldr	r2, [r3, #4]
 8003f62:	4613      	mov	r3, r2
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	4413      	add	r3, r2
 8003f68:	3b41      	subs	r3, #65	@ 0x41
 8003f6a:	221f      	movs	r2, #31
 8003f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f70:	43db      	mvns	r3, r3
 8003f72:	4019      	ands	r1, r3
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	6818      	ldr	r0, [r3, #0]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	4413      	add	r3, r2
 8003f82:	3b41      	subs	r3, #65	@ 0x41
 8003f84:	fa00 f203 	lsl.w	r2, r0, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2b09      	cmp	r3, #9
 8003f96:	d91c      	bls.n	8003fd2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68d9      	ldr	r1, [r3, #12]
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	005b      	lsls	r3, r3, #1
 8003fa6:	4413      	add	r3, r2
 8003fa8:	3b1e      	subs	r3, #30
 8003faa:	2207      	movs	r2, #7
 8003fac:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb0:	43db      	mvns	r3, r3
 8003fb2:	4019      	ands	r1, r3
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	6898      	ldr	r0, [r3, #8]
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	005b      	lsls	r3, r3, #1
 8003fc0:	4413      	add	r3, r2
 8003fc2:	3b1e      	subs	r3, #30
 8003fc4:	fa00 f203 	lsl.w	r2, r0, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	60da      	str	r2, [r3, #12]
 8003fd0:	e019      	b.n	8004006 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	6919      	ldr	r1, [r3, #16]
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	005b      	lsls	r3, r3, #1
 8003fe0:	4413      	add	r3, r2
 8003fe2:	2207      	movs	r2, #7
 8003fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe8:	43db      	mvns	r3, r3
 8003fea:	4019      	ands	r1, r3
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	6898      	ldr	r0, [r3, #8]
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	005b      	lsls	r3, r3, #1
 8003ff8:	4413      	add	r3, r2
 8003ffa:	fa00 f203 	lsl.w	r2, r0, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	430a      	orrs	r2, r1
 8004004:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2b10      	cmp	r3, #16
 800400c:	d003      	beq.n	8004016 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004012:	2b11      	cmp	r3, #17
 8004014:	d132      	bne.n	800407c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a1d      	ldr	r2, [pc, #116]	@ (8004090 <HAL_ADC_ConfigChannel+0x1e4>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d125      	bne.n	800406c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d126      	bne.n	800407c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689a      	ldr	r2, [r3, #8]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800403c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2b10      	cmp	r3, #16
 8004044:	d11a      	bne.n	800407c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004046:	4b13      	ldr	r3, [pc, #76]	@ (8004094 <HAL_ADC_ConfigChannel+0x1e8>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a13      	ldr	r2, [pc, #76]	@ (8004098 <HAL_ADC_ConfigChannel+0x1ec>)
 800404c:	fba2 2303 	umull	r2, r3, r2, r3
 8004050:	0c9a      	lsrs	r2, r3, #18
 8004052:	4613      	mov	r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	4413      	add	r3, r2
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800405c:	e002      	b.n	8004064 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	3b01      	subs	r3, #1
 8004062:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1f9      	bne.n	800405e <HAL_ADC_ConfigChannel+0x1b2>
 800406a:	e007      	b.n	800407c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004070:	f043 0220 	orr.w	r2, r3, #32
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004084:	7bfb      	ldrb	r3, [r7, #15]
}
 8004086:	4618      	mov	r0, r3
 8004088:	3714      	adds	r7, #20
 800408a:	46bd      	mov	sp, r7
 800408c:	bc80      	pop	{r7}
 800408e:	4770      	bx	lr
 8004090:	40012400 	.word	0x40012400
 8004094:	20000068 	.word	0x20000068
 8004098:	431bde83 	.word	0x431bde83

0800409c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040a4:	2300      	movs	r3, #0
 80040a6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80040a8:	2300      	movs	r3, #0
 80040aa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d040      	beq.n	800413c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	689a      	ldr	r2, [r3, #8]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f042 0201 	orr.w	r2, r2, #1
 80040c8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80040ca:	4b1f      	ldr	r3, [pc, #124]	@ (8004148 <ADC_Enable+0xac>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a1f      	ldr	r2, [pc, #124]	@ (800414c <ADC_Enable+0xb0>)
 80040d0:	fba2 2303 	umull	r2, r3, r2, r3
 80040d4:	0c9b      	lsrs	r3, r3, #18
 80040d6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80040d8:	e002      	b.n	80040e0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	3b01      	subs	r3, #1
 80040de:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1f9      	bne.n	80040da <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80040e6:	f7ff fbef 	bl	80038c8 <HAL_GetTick>
 80040ea:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80040ec:	e01f      	b.n	800412e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80040ee:	f7ff fbeb 	bl	80038c8 <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d918      	bls.n	800412e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b01      	cmp	r3, #1
 8004108:	d011      	beq.n	800412e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800410e:	f043 0210 	orr.w	r2, r3, #16
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800411a:	f043 0201 	orr.w	r2, r3, #1
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e007      	b.n	800413e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	2b01      	cmp	r3, #1
 800413a:	d1d8      	bne.n	80040ee <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	20000068 	.word	0x20000068
 800414c:	431bde83 	.word	0x431bde83

08004150 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004158:	2300      	movs	r3, #0
 800415a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b01      	cmp	r3, #1
 8004168:	d12e      	bne.n	80041c8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	689a      	ldr	r2, [r3, #8]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f022 0201 	bic.w	r2, r2, #1
 8004178:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800417a:	f7ff fba5 	bl	80038c8 <HAL_GetTick>
 800417e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004180:	e01b      	b.n	80041ba <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004182:	f7ff fba1 	bl	80038c8 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	2b02      	cmp	r3, #2
 800418e:	d914      	bls.n	80041ba <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b01      	cmp	r3, #1
 800419c:	d10d      	bne.n	80041ba <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a2:	f043 0210 	orr.w	r2, r3, #16
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ae:	f043 0201 	orr.w	r2, r3, #1
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e007      	b.n	80041ca <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d0dc      	beq.n	8004182 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
	...

080041d4 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80041d4:	b590      	push	{r4, r7, lr}
 80041d6:	b087      	sub	sp, #28
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041dc:	2300      	movs	r3, #0
 80041de:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80041e0:	2300      	movs	r3, #0
 80041e2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d101      	bne.n	80041f2 <HAL_ADCEx_Calibration_Start+0x1e>
 80041ee:	2302      	movs	r3, #2
 80041f0:	e097      	b.n	8004322 <HAL_ADCEx_Calibration_Start+0x14e>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2201      	movs	r2, #1
 80041f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7ff ffa8 	bl	8004150 <ADC_ConversionStop_Disable>
 8004200:	4603      	mov	r3, r0
 8004202:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f7ff ff49 	bl	800409c <ADC_Enable>
 800420a:	4603      	mov	r3, r0
 800420c:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 800420e:	7dfb      	ldrb	r3, [r7, #23]
 8004210:	2b00      	cmp	r3, #0
 8004212:	f040 8081 	bne.w	8004318 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800421a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800421e:	f023 0302 	bic.w	r3, r3, #2
 8004222:	f043 0202 	orr.w	r2, r3, #2
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800422a:	4b40      	ldr	r3, [pc, #256]	@ (800432c <HAL_ADCEx_Calibration_Start+0x158>)
 800422c:	681c      	ldr	r4, [r3, #0]
 800422e:	2002      	movs	r0, #2
 8004230:	f001 fcc6 	bl	8005bc0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004234:	4603      	mov	r3, r0
 8004236:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800423a:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 800423c:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800423e:	e002      	b.n	8004246 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	3b01      	subs	r3, #1
 8004244:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1f9      	bne.n	8004240 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689a      	ldr	r2, [r3, #8]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f042 0208 	orr.w	r2, r2, #8
 800425a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800425c:	f7ff fb34 	bl	80038c8 <HAL_GetTick>
 8004260:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004262:	e01b      	b.n	800429c <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004264:	f7ff fb30 	bl	80038c8 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	2b0a      	cmp	r3, #10
 8004270:	d914      	bls.n	800429c <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f003 0308 	and.w	r3, r3, #8
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00d      	beq.n	800429c <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004284:	f023 0312 	bic.w	r3, r3, #18
 8004288:	f043 0210 	orr.w	r2, r3, #16
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e042      	b.n	8004322 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f003 0308 	and.w	r3, r3, #8
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1dc      	bne.n	8004264 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	689a      	ldr	r2, [r3, #8]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f042 0204 	orr.w	r2, r2, #4
 80042b8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80042ba:	f7ff fb05 	bl	80038c8 <HAL_GetTick>
 80042be:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80042c0:	e01b      	b.n	80042fa <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80042c2:	f7ff fb01 	bl	80038c8 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	2b0a      	cmp	r3, #10
 80042ce:	d914      	bls.n	80042fa <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f003 0304 	and.w	r3, r3, #4
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00d      	beq.n	80042fa <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042e2:	f023 0312 	bic.w	r3, r3, #18
 80042e6:	f043 0210 	orr.w	r2, r3, #16
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e013      	b.n	8004322 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f003 0304 	and.w	r3, r3, #4
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1dc      	bne.n	80042c2 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800430c:	f023 0303 	bic.w	r3, r3, #3
 8004310:	f043 0201 	orr.w	r2, r3, #1
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004320:	7dfb      	ldrb	r3, [r7, #23]
}
 8004322:	4618      	mov	r0, r3
 8004324:	371c      	adds	r7, #28
 8004326:	46bd      	mov	sp, r7
 8004328:	bd90      	pop	{r4, r7, pc}
 800432a:	bf00      	nop
 800432c:	20000068 	.word	0x20000068

08004330 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f003 0307 	and.w	r3, r3, #7
 800433e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004340:	4b0c      	ldr	r3, [pc, #48]	@ (8004374 <__NVIC_SetPriorityGrouping+0x44>)
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004346:	68ba      	ldr	r2, [r7, #8]
 8004348:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800434c:	4013      	ands	r3, r2
 800434e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004358:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800435c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004362:	4a04      	ldr	r2, [pc, #16]	@ (8004374 <__NVIC_SetPriorityGrouping+0x44>)
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	60d3      	str	r3, [r2, #12]
}
 8004368:	bf00      	nop
 800436a:	3714      	adds	r7, #20
 800436c:	46bd      	mov	sp, r7
 800436e:	bc80      	pop	{r7}
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	e000ed00 	.word	0xe000ed00

08004378 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004378:	b480      	push	{r7}
 800437a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800437c:	4b04      	ldr	r3, [pc, #16]	@ (8004390 <__NVIC_GetPriorityGrouping+0x18>)
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	0a1b      	lsrs	r3, r3, #8
 8004382:	f003 0307 	and.w	r3, r3, #7
}
 8004386:	4618      	mov	r0, r3
 8004388:	46bd      	mov	sp, r7
 800438a:	bc80      	pop	{r7}
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	e000ed00 	.word	0xe000ed00

08004394 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	4603      	mov	r3, r0
 800439c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800439e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	db0b      	blt.n	80043be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043a6:	79fb      	ldrb	r3, [r7, #7]
 80043a8:	f003 021f 	and.w	r2, r3, #31
 80043ac:	4906      	ldr	r1, [pc, #24]	@ (80043c8 <__NVIC_EnableIRQ+0x34>)
 80043ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043b2:	095b      	lsrs	r3, r3, #5
 80043b4:	2001      	movs	r0, #1
 80043b6:	fa00 f202 	lsl.w	r2, r0, r2
 80043ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80043be:	bf00      	nop
 80043c0:	370c      	adds	r7, #12
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bc80      	pop	{r7}
 80043c6:	4770      	bx	lr
 80043c8:	e000e100 	.word	0xe000e100

080043cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	4603      	mov	r3, r0
 80043d4:	6039      	str	r1, [r7, #0]
 80043d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	db0a      	blt.n	80043f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	b2da      	uxtb	r2, r3
 80043e4:	490c      	ldr	r1, [pc, #48]	@ (8004418 <__NVIC_SetPriority+0x4c>)
 80043e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ea:	0112      	lsls	r2, r2, #4
 80043ec:	b2d2      	uxtb	r2, r2
 80043ee:	440b      	add	r3, r1
 80043f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043f4:	e00a      	b.n	800440c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	4908      	ldr	r1, [pc, #32]	@ (800441c <__NVIC_SetPriority+0x50>)
 80043fc:	79fb      	ldrb	r3, [r7, #7]
 80043fe:	f003 030f 	and.w	r3, r3, #15
 8004402:	3b04      	subs	r3, #4
 8004404:	0112      	lsls	r2, r2, #4
 8004406:	b2d2      	uxtb	r2, r2
 8004408:	440b      	add	r3, r1
 800440a:	761a      	strb	r2, [r3, #24]
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	bc80      	pop	{r7}
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	e000e100 	.word	0xe000e100
 800441c:	e000ed00 	.word	0xe000ed00

08004420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004420:	b480      	push	{r7}
 8004422:	b089      	sub	sp, #36	@ 0x24
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f003 0307 	and.w	r3, r3, #7
 8004432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	f1c3 0307 	rsb	r3, r3, #7
 800443a:	2b04      	cmp	r3, #4
 800443c:	bf28      	it	cs
 800443e:	2304      	movcs	r3, #4
 8004440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	3304      	adds	r3, #4
 8004446:	2b06      	cmp	r3, #6
 8004448:	d902      	bls.n	8004450 <NVIC_EncodePriority+0x30>
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	3b03      	subs	r3, #3
 800444e:	e000      	b.n	8004452 <NVIC_EncodePriority+0x32>
 8004450:	2300      	movs	r3, #0
 8004452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004454:	f04f 32ff 	mov.w	r2, #4294967295
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	fa02 f303 	lsl.w	r3, r2, r3
 800445e:	43da      	mvns	r2, r3
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	401a      	ands	r2, r3
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004468:	f04f 31ff 	mov.w	r1, #4294967295
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	fa01 f303 	lsl.w	r3, r1, r3
 8004472:	43d9      	mvns	r1, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004478:	4313      	orrs	r3, r2
         );
}
 800447a:	4618      	mov	r0, r3
 800447c:	3724      	adds	r7, #36	@ 0x24
 800447e:	46bd      	mov	sp, r7
 8004480:	bc80      	pop	{r7}
 8004482:	4770      	bx	lr

08004484 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	3b01      	subs	r3, #1
 8004490:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004494:	d301      	bcc.n	800449a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004496:	2301      	movs	r3, #1
 8004498:	e00f      	b.n	80044ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800449a:	4a0a      	ldr	r2, [pc, #40]	@ (80044c4 <SysTick_Config+0x40>)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	3b01      	subs	r3, #1
 80044a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044a2:	210f      	movs	r1, #15
 80044a4:	f04f 30ff 	mov.w	r0, #4294967295
 80044a8:	f7ff ff90 	bl	80043cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044ac:	4b05      	ldr	r3, [pc, #20]	@ (80044c4 <SysTick_Config+0x40>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044b2:	4b04      	ldr	r3, [pc, #16]	@ (80044c4 <SysTick_Config+0x40>)
 80044b4:	2207      	movs	r2, #7
 80044b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	e000e010 	.word	0xe000e010

080044c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f7ff ff2d 	bl	8004330 <__NVIC_SetPriorityGrouping>
}
 80044d6:	bf00      	nop
 80044d8:	3708      	adds	r7, #8
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044de:	b580      	push	{r7, lr}
 80044e0:	b086      	sub	sp, #24
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	4603      	mov	r3, r0
 80044e6:	60b9      	str	r1, [r7, #8]
 80044e8:	607a      	str	r2, [r7, #4]
 80044ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044ec:	2300      	movs	r3, #0
 80044ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044f0:	f7ff ff42 	bl	8004378 <__NVIC_GetPriorityGrouping>
 80044f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	68b9      	ldr	r1, [r7, #8]
 80044fa:	6978      	ldr	r0, [r7, #20]
 80044fc:	f7ff ff90 	bl	8004420 <NVIC_EncodePriority>
 8004500:	4602      	mov	r2, r0
 8004502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004506:	4611      	mov	r1, r2
 8004508:	4618      	mov	r0, r3
 800450a:	f7ff ff5f 	bl	80043cc <__NVIC_SetPriority>
}
 800450e:	bf00      	nop
 8004510:	3718      	adds	r7, #24
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b082      	sub	sp, #8
 800451a:	af00      	add	r7, sp, #0
 800451c:	4603      	mov	r3, r0
 800451e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004524:	4618      	mov	r0, r3
 8004526:	f7ff ff35 	bl	8004394 <__NVIC_EnableIRQ>
}
 800452a:	bf00      	nop
 800452c:	3708      	adds	r7, #8
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	b082      	sub	sp, #8
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7ff ffa2 	bl	8004484 <SysTick_Config>
 8004540:	4603      	mov	r3, r0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3708      	adds	r7, #8
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
	...

0800454c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800454c:	b480      	push	{r7}
 800454e:	b08b      	sub	sp, #44	@ 0x2c
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004556:	2300      	movs	r3, #0
 8004558:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800455a:	2300      	movs	r3, #0
 800455c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800455e:	e169      	b.n	8004834 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004560:	2201      	movs	r2, #1
 8004562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004564:	fa02 f303 	lsl.w	r3, r2, r3
 8004568:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	69fa      	ldr	r2, [r7, #28]
 8004570:	4013      	ands	r3, r2
 8004572:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	429a      	cmp	r2, r3
 800457a:	f040 8158 	bne.w	800482e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	4a9a      	ldr	r2, [pc, #616]	@ (80047ec <HAL_GPIO_Init+0x2a0>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d05e      	beq.n	8004646 <HAL_GPIO_Init+0xfa>
 8004588:	4a98      	ldr	r2, [pc, #608]	@ (80047ec <HAL_GPIO_Init+0x2a0>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d875      	bhi.n	800467a <HAL_GPIO_Init+0x12e>
 800458e:	4a98      	ldr	r2, [pc, #608]	@ (80047f0 <HAL_GPIO_Init+0x2a4>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d058      	beq.n	8004646 <HAL_GPIO_Init+0xfa>
 8004594:	4a96      	ldr	r2, [pc, #600]	@ (80047f0 <HAL_GPIO_Init+0x2a4>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d86f      	bhi.n	800467a <HAL_GPIO_Init+0x12e>
 800459a:	4a96      	ldr	r2, [pc, #600]	@ (80047f4 <HAL_GPIO_Init+0x2a8>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d052      	beq.n	8004646 <HAL_GPIO_Init+0xfa>
 80045a0:	4a94      	ldr	r2, [pc, #592]	@ (80047f4 <HAL_GPIO_Init+0x2a8>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d869      	bhi.n	800467a <HAL_GPIO_Init+0x12e>
 80045a6:	4a94      	ldr	r2, [pc, #592]	@ (80047f8 <HAL_GPIO_Init+0x2ac>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d04c      	beq.n	8004646 <HAL_GPIO_Init+0xfa>
 80045ac:	4a92      	ldr	r2, [pc, #584]	@ (80047f8 <HAL_GPIO_Init+0x2ac>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d863      	bhi.n	800467a <HAL_GPIO_Init+0x12e>
 80045b2:	4a92      	ldr	r2, [pc, #584]	@ (80047fc <HAL_GPIO_Init+0x2b0>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d046      	beq.n	8004646 <HAL_GPIO_Init+0xfa>
 80045b8:	4a90      	ldr	r2, [pc, #576]	@ (80047fc <HAL_GPIO_Init+0x2b0>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d85d      	bhi.n	800467a <HAL_GPIO_Init+0x12e>
 80045be:	2b12      	cmp	r3, #18
 80045c0:	d82a      	bhi.n	8004618 <HAL_GPIO_Init+0xcc>
 80045c2:	2b12      	cmp	r3, #18
 80045c4:	d859      	bhi.n	800467a <HAL_GPIO_Init+0x12e>
 80045c6:	a201      	add	r2, pc, #4	@ (adr r2, 80045cc <HAL_GPIO_Init+0x80>)
 80045c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045cc:	08004647 	.word	0x08004647
 80045d0:	08004621 	.word	0x08004621
 80045d4:	08004633 	.word	0x08004633
 80045d8:	08004675 	.word	0x08004675
 80045dc:	0800467b 	.word	0x0800467b
 80045e0:	0800467b 	.word	0x0800467b
 80045e4:	0800467b 	.word	0x0800467b
 80045e8:	0800467b 	.word	0x0800467b
 80045ec:	0800467b 	.word	0x0800467b
 80045f0:	0800467b 	.word	0x0800467b
 80045f4:	0800467b 	.word	0x0800467b
 80045f8:	0800467b 	.word	0x0800467b
 80045fc:	0800467b 	.word	0x0800467b
 8004600:	0800467b 	.word	0x0800467b
 8004604:	0800467b 	.word	0x0800467b
 8004608:	0800467b 	.word	0x0800467b
 800460c:	0800467b 	.word	0x0800467b
 8004610:	08004629 	.word	0x08004629
 8004614:	0800463d 	.word	0x0800463d
 8004618:	4a79      	ldr	r2, [pc, #484]	@ (8004800 <HAL_GPIO_Init+0x2b4>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d013      	beq.n	8004646 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800461e:	e02c      	b.n	800467a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	623b      	str	r3, [r7, #32]
          break;
 8004626:	e029      	b.n	800467c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	3304      	adds	r3, #4
 800462e:	623b      	str	r3, [r7, #32]
          break;
 8004630:	e024      	b.n	800467c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	3308      	adds	r3, #8
 8004638:	623b      	str	r3, [r7, #32]
          break;
 800463a:	e01f      	b.n	800467c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	330c      	adds	r3, #12
 8004642:	623b      	str	r3, [r7, #32]
          break;
 8004644:	e01a      	b.n	800467c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d102      	bne.n	8004654 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800464e:	2304      	movs	r3, #4
 8004650:	623b      	str	r3, [r7, #32]
          break;
 8004652:	e013      	b.n	800467c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d105      	bne.n	8004668 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800465c:	2308      	movs	r3, #8
 800465e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	69fa      	ldr	r2, [r7, #28]
 8004664:	611a      	str	r2, [r3, #16]
          break;
 8004666:	e009      	b.n	800467c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004668:	2308      	movs	r3, #8
 800466a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	69fa      	ldr	r2, [r7, #28]
 8004670:	615a      	str	r2, [r3, #20]
          break;
 8004672:	e003      	b.n	800467c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004674:	2300      	movs	r3, #0
 8004676:	623b      	str	r3, [r7, #32]
          break;
 8004678:	e000      	b.n	800467c <HAL_GPIO_Init+0x130>
          break;
 800467a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	2bff      	cmp	r3, #255	@ 0xff
 8004680:	d801      	bhi.n	8004686 <HAL_GPIO_Init+0x13a>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	e001      	b.n	800468a <HAL_GPIO_Init+0x13e>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	3304      	adds	r3, #4
 800468a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	2bff      	cmp	r3, #255	@ 0xff
 8004690:	d802      	bhi.n	8004698 <HAL_GPIO_Init+0x14c>
 8004692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	e002      	b.n	800469e <HAL_GPIO_Init+0x152>
 8004698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800469a:	3b08      	subs	r3, #8
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	210f      	movs	r1, #15
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	fa01 f303 	lsl.w	r3, r1, r3
 80046ac:	43db      	mvns	r3, r3
 80046ae:	401a      	ands	r2, r3
 80046b0:	6a39      	ldr	r1, [r7, #32]
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	fa01 f303 	lsl.w	r3, r1, r3
 80046b8:	431a      	orrs	r2, r3
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f000 80b1 	beq.w	800482e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80046cc:	4b4d      	ldr	r3, [pc, #308]	@ (8004804 <HAL_GPIO_Init+0x2b8>)
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	4a4c      	ldr	r2, [pc, #304]	@ (8004804 <HAL_GPIO_Init+0x2b8>)
 80046d2:	f043 0301 	orr.w	r3, r3, #1
 80046d6:	6193      	str	r3, [r2, #24]
 80046d8:	4b4a      	ldr	r3, [pc, #296]	@ (8004804 <HAL_GPIO_Init+0x2b8>)
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	60bb      	str	r3, [r7, #8]
 80046e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80046e4:	4a48      	ldr	r2, [pc, #288]	@ (8004808 <HAL_GPIO_Init+0x2bc>)
 80046e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e8:	089b      	lsrs	r3, r3, #2
 80046ea:	3302      	adds	r3, #2
 80046ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80046f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f4:	f003 0303 	and.w	r3, r3, #3
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	220f      	movs	r2, #15
 80046fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004700:	43db      	mvns	r3, r3
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	4013      	ands	r3, r2
 8004706:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a40      	ldr	r2, [pc, #256]	@ (800480c <HAL_GPIO_Init+0x2c0>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d013      	beq.n	8004738 <HAL_GPIO_Init+0x1ec>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a3f      	ldr	r2, [pc, #252]	@ (8004810 <HAL_GPIO_Init+0x2c4>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d00d      	beq.n	8004734 <HAL_GPIO_Init+0x1e8>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a3e      	ldr	r2, [pc, #248]	@ (8004814 <HAL_GPIO_Init+0x2c8>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d007      	beq.n	8004730 <HAL_GPIO_Init+0x1e4>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a3d      	ldr	r2, [pc, #244]	@ (8004818 <HAL_GPIO_Init+0x2cc>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d101      	bne.n	800472c <HAL_GPIO_Init+0x1e0>
 8004728:	2303      	movs	r3, #3
 800472a:	e006      	b.n	800473a <HAL_GPIO_Init+0x1ee>
 800472c:	2304      	movs	r3, #4
 800472e:	e004      	b.n	800473a <HAL_GPIO_Init+0x1ee>
 8004730:	2302      	movs	r3, #2
 8004732:	e002      	b.n	800473a <HAL_GPIO_Init+0x1ee>
 8004734:	2301      	movs	r3, #1
 8004736:	e000      	b.n	800473a <HAL_GPIO_Init+0x1ee>
 8004738:	2300      	movs	r3, #0
 800473a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800473c:	f002 0203 	and.w	r2, r2, #3
 8004740:	0092      	lsls	r2, r2, #2
 8004742:	4093      	lsls	r3, r2
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	4313      	orrs	r3, r2
 8004748:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800474a:	492f      	ldr	r1, [pc, #188]	@ (8004808 <HAL_GPIO_Init+0x2bc>)
 800474c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800474e:	089b      	lsrs	r3, r3, #2
 8004750:	3302      	adds	r3, #2
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d006      	beq.n	8004772 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004764:	4b2d      	ldr	r3, [pc, #180]	@ (800481c <HAL_GPIO_Init+0x2d0>)
 8004766:	689a      	ldr	r2, [r3, #8]
 8004768:	492c      	ldr	r1, [pc, #176]	@ (800481c <HAL_GPIO_Init+0x2d0>)
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	4313      	orrs	r3, r2
 800476e:	608b      	str	r3, [r1, #8]
 8004770:	e006      	b.n	8004780 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004772:	4b2a      	ldr	r3, [pc, #168]	@ (800481c <HAL_GPIO_Init+0x2d0>)
 8004774:	689a      	ldr	r2, [r3, #8]
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	43db      	mvns	r3, r3
 800477a:	4928      	ldr	r1, [pc, #160]	@ (800481c <HAL_GPIO_Init+0x2d0>)
 800477c:	4013      	ands	r3, r2
 800477e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d006      	beq.n	800479a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800478c:	4b23      	ldr	r3, [pc, #140]	@ (800481c <HAL_GPIO_Init+0x2d0>)
 800478e:	68da      	ldr	r2, [r3, #12]
 8004790:	4922      	ldr	r1, [pc, #136]	@ (800481c <HAL_GPIO_Init+0x2d0>)
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	4313      	orrs	r3, r2
 8004796:	60cb      	str	r3, [r1, #12]
 8004798:	e006      	b.n	80047a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800479a:	4b20      	ldr	r3, [pc, #128]	@ (800481c <HAL_GPIO_Init+0x2d0>)
 800479c:	68da      	ldr	r2, [r3, #12]
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	43db      	mvns	r3, r3
 80047a2:	491e      	ldr	r1, [pc, #120]	@ (800481c <HAL_GPIO_Init+0x2d0>)
 80047a4:	4013      	ands	r3, r2
 80047a6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d006      	beq.n	80047c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80047b4:	4b19      	ldr	r3, [pc, #100]	@ (800481c <HAL_GPIO_Init+0x2d0>)
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	4918      	ldr	r1, [pc, #96]	@ (800481c <HAL_GPIO_Init+0x2d0>)
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	4313      	orrs	r3, r2
 80047be:	604b      	str	r3, [r1, #4]
 80047c0:	e006      	b.n	80047d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80047c2:	4b16      	ldr	r3, [pc, #88]	@ (800481c <HAL_GPIO_Init+0x2d0>)
 80047c4:	685a      	ldr	r2, [r3, #4]
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	43db      	mvns	r3, r3
 80047ca:	4914      	ldr	r1, [pc, #80]	@ (800481c <HAL_GPIO_Init+0x2d0>)
 80047cc:	4013      	ands	r3, r2
 80047ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d021      	beq.n	8004820 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80047dc:	4b0f      	ldr	r3, [pc, #60]	@ (800481c <HAL_GPIO_Init+0x2d0>)
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	490e      	ldr	r1, [pc, #56]	@ (800481c <HAL_GPIO_Init+0x2d0>)
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	600b      	str	r3, [r1, #0]
 80047e8:	e021      	b.n	800482e <HAL_GPIO_Init+0x2e2>
 80047ea:	bf00      	nop
 80047ec:	10320000 	.word	0x10320000
 80047f0:	10310000 	.word	0x10310000
 80047f4:	10220000 	.word	0x10220000
 80047f8:	10210000 	.word	0x10210000
 80047fc:	10120000 	.word	0x10120000
 8004800:	10110000 	.word	0x10110000
 8004804:	40021000 	.word	0x40021000
 8004808:	40010000 	.word	0x40010000
 800480c:	40010800 	.word	0x40010800
 8004810:	40010c00 	.word	0x40010c00
 8004814:	40011000 	.word	0x40011000
 8004818:	40011400 	.word	0x40011400
 800481c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004820:	4b0b      	ldr	r3, [pc, #44]	@ (8004850 <HAL_GPIO_Init+0x304>)
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	43db      	mvns	r3, r3
 8004828:	4909      	ldr	r1, [pc, #36]	@ (8004850 <HAL_GPIO_Init+0x304>)
 800482a:	4013      	ands	r3, r2
 800482c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800482e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004830:	3301      	adds	r3, #1
 8004832:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483a:	fa22 f303 	lsr.w	r3, r2, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	f47f ae8e 	bne.w	8004560 <HAL_GPIO_Init+0x14>
  }
}
 8004844:	bf00      	nop
 8004846:	bf00      	nop
 8004848:	372c      	adds	r7, #44	@ 0x2c
 800484a:	46bd      	mov	sp, r7
 800484c:	bc80      	pop	{r7}
 800484e:	4770      	bx	lr
 8004850:	40010400 	.word	0x40010400

08004854 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	460b      	mov	r3, r1
 800485e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	689a      	ldr	r2, [r3, #8]
 8004864:	887b      	ldrh	r3, [r7, #2]
 8004866:	4013      	ands	r3, r2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d002      	beq.n	8004872 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800486c:	2301      	movs	r3, #1
 800486e:	73fb      	strb	r3, [r7, #15]
 8004870:	e001      	b.n	8004876 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004872:	2300      	movs	r3, #0
 8004874:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004876:	7bfb      	ldrb	r3, [r7, #15]
}
 8004878:	4618      	mov	r0, r3
 800487a:	3714      	adds	r7, #20
 800487c:	46bd      	mov	sp, r7
 800487e:	bc80      	pop	{r7}
 8004880:	4770      	bx	lr

08004882 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004882:	b480      	push	{r7}
 8004884:	b083      	sub	sp, #12
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
 800488a:	460b      	mov	r3, r1
 800488c:	807b      	strh	r3, [r7, #2]
 800488e:	4613      	mov	r3, r2
 8004890:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004892:	787b      	ldrb	r3, [r7, #1]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d003      	beq.n	80048a0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004898:	887a      	ldrh	r2, [r7, #2]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800489e:	e003      	b.n	80048a8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80048a0:	887b      	ldrh	r3, [r7, #2]
 80048a2:	041a      	lsls	r2, r3, #16
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	611a      	str	r2, [r3, #16]
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bc80      	pop	{r7}
 80048b0:	4770      	bx	lr

080048b2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80048b2:	b480      	push	{r7}
 80048b4:	b085      	sub	sp, #20
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
 80048ba:	460b      	mov	r3, r1
 80048bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80048c4:	887a      	ldrh	r2, [r7, #2]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	4013      	ands	r3, r2
 80048ca:	041a      	lsls	r2, r3, #16
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	43d9      	mvns	r1, r3
 80048d0:	887b      	ldrh	r3, [r7, #2]
 80048d2:	400b      	ands	r3, r1
 80048d4:	431a      	orrs	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	611a      	str	r2, [r3, #16]
}
 80048da:	bf00      	nop
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	bc80      	pop	{r7}
 80048e2:	4770      	bx	lr

080048e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d101      	bne.n	80048f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e12b      	b.n	8004b4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d106      	bne.n	8004910 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f7fe fd06 	bl	800331c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2224      	movs	r2, #36	@ 0x24
 8004914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f022 0201 	bic.w	r2, r2, #1
 8004926:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004936:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004946:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004948:	f001 f83e 	bl	80059c8 <HAL_RCC_GetPCLK1Freq>
 800494c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	4a81      	ldr	r2, [pc, #516]	@ (8004b58 <HAL_I2C_Init+0x274>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d807      	bhi.n	8004968 <HAL_I2C_Init+0x84>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	4a80      	ldr	r2, [pc, #512]	@ (8004b5c <HAL_I2C_Init+0x278>)
 800495c:	4293      	cmp	r3, r2
 800495e:	bf94      	ite	ls
 8004960:	2301      	movls	r3, #1
 8004962:	2300      	movhi	r3, #0
 8004964:	b2db      	uxtb	r3, r3
 8004966:	e006      	b.n	8004976 <HAL_I2C_Init+0x92>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	4a7d      	ldr	r2, [pc, #500]	@ (8004b60 <HAL_I2C_Init+0x27c>)
 800496c:	4293      	cmp	r3, r2
 800496e:	bf94      	ite	ls
 8004970:	2301      	movls	r3, #1
 8004972:	2300      	movhi	r3, #0
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e0e7      	b.n	8004b4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	4a78      	ldr	r2, [pc, #480]	@ (8004b64 <HAL_I2C_Init+0x280>)
 8004982:	fba2 2303 	umull	r2, r3, r2, r3
 8004986:	0c9b      	lsrs	r3, r3, #18
 8004988:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68ba      	ldr	r2, [r7, #8]
 800499a:	430a      	orrs	r2, r1
 800499c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	6a1b      	ldr	r3, [r3, #32]
 80049a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	4a6a      	ldr	r2, [pc, #424]	@ (8004b58 <HAL_I2C_Init+0x274>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d802      	bhi.n	80049b8 <HAL_I2C_Init+0xd4>
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	3301      	adds	r3, #1
 80049b6:	e009      	b.n	80049cc <HAL_I2C_Init+0xe8>
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80049be:	fb02 f303 	mul.w	r3, r2, r3
 80049c2:	4a69      	ldr	r2, [pc, #420]	@ (8004b68 <HAL_I2C_Init+0x284>)
 80049c4:	fba2 2303 	umull	r2, r3, r2, r3
 80049c8:	099b      	lsrs	r3, r3, #6
 80049ca:	3301      	adds	r3, #1
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	6812      	ldr	r2, [r2, #0]
 80049d0:	430b      	orrs	r3, r1
 80049d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	69db      	ldr	r3, [r3, #28]
 80049da:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80049de:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	495c      	ldr	r1, [pc, #368]	@ (8004b58 <HAL_I2C_Init+0x274>)
 80049e8:	428b      	cmp	r3, r1
 80049ea:	d819      	bhi.n	8004a20 <HAL_I2C_Init+0x13c>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	1e59      	subs	r1, r3, #1
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80049fa:	1c59      	adds	r1, r3, #1
 80049fc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004a00:	400b      	ands	r3, r1
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00a      	beq.n	8004a1c <HAL_I2C_Init+0x138>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	1e59      	subs	r1, r3, #1
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	005b      	lsls	r3, r3, #1
 8004a10:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a14:	3301      	adds	r3, #1
 8004a16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a1a:	e051      	b.n	8004ac0 <HAL_I2C_Init+0x1dc>
 8004a1c:	2304      	movs	r3, #4
 8004a1e:	e04f      	b.n	8004ac0 <HAL_I2C_Init+0x1dc>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d111      	bne.n	8004a4c <HAL_I2C_Init+0x168>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	1e58      	subs	r0, r3, #1
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6859      	ldr	r1, [r3, #4]
 8004a30:	460b      	mov	r3, r1
 8004a32:	005b      	lsls	r3, r3, #1
 8004a34:	440b      	add	r3, r1
 8004a36:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	bf0c      	ite	eq
 8004a44:	2301      	moveq	r3, #1
 8004a46:	2300      	movne	r3, #0
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	e012      	b.n	8004a72 <HAL_I2C_Init+0x18e>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	1e58      	subs	r0, r3, #1
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6859      	ldr	r1, [r3, #4]
 8004a54:	460b      	mov	r3, r1
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	440b      	add	r3, r1
 8004a5a:	0099      	lsls	r1, r3, #2
 8004a5c:	440b      	add	r3, r1
 8004a5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a62:	3301      	adds	r3, #1
 8004a64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	bf0c      	ite	eq
 8004a6c:	2301      	moveq	r3, #1
 8004a6e:	2300      	movne	r3, #0
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d001      	beq.n	8004a7a <HAL_I2C_Init+0x196>
 8004a76:	2301      	movs	r3, #1
 8004a78:	e022      	b.n	8004ac0 <HAL_I2C_Init+0x1dc>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10e      	bne.n	8004aa0 <HAL_I2C_Init+0x1bc>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	1e58      	subs	r0, r3, #1
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6859      	ldr	r1, [r3, #4]
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	005b      	lsls	r3, r3, #1
 8004a8e:	440b      	add	r3, r1
 8004a90:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a94:	3301      	adds	r3, #1
 8004a96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a9e:	e00f      	b.n	8004ac0 <HAL_I2C_Init+0x1dc>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	1e58      	subs	r0, r3, #1
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6859      	ldr	r1, [r3, #4]
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	440b      	add	r3, r1
 8004aae:	0099      	lsls	r1, r3, #2
 8004ab0:	440b      	add	r3, r1
 8004ab2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004abc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ac0:	6879      	ldr	r1, [r7, #4]
 8004ac2:	6809      	ldr	r1, [r1, #0]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	69da      	ldr	r2, [r3, #28]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	431a      	orrs	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004aee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	6911      	ldr	r1, [r2, #16]
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	68d2      	ldr	r2, [r2, #12]
 8004afa:	4311      	orrs	r1, r2
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	6812      	ldr	r2, [r2, #0]
 8004b00:	430b      	orrs	r3, r1
 8004b02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	695a      	ldr	r2, [r3, #20]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	431a      	orrs	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f042 0201 	orr.w	r2, r2, #1
 8004b2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2220      	movs	r2, #32
 8004b3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	000186a0 	.word	0x000186a0
 8004b5c:	001e847f 	.word	0x001e847f
 8004b60:	003d08ff 	.word	0x003d08ff
 8004b64:	431bde83 	.word	0x431bde83
 8004b68:	10624dd3 	.word	0x10624dd3

08004b6c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b088      	sub	sp, #32
 8004b70:	af02      	add	r7, sp, #8
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	607a      	str	r2, [r7, #4]
 8004b76:	461a      	mov	r2, r3
 8004b78:	460b      	mov	r3, r1
 8004b7a:	817b      	strh	r3, [r7, #10]
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b80:	f7fe fea2 	bl	80038c8 <HAL_GetTick>
 8004b84:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b20      	cmp	r3, #32
 8004b90:	f040 80e0 	bne.w	8004d54 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	9300      	str	r3, [sp, #0]
 8004b98:	2319      	movs	r3, #25
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	4970      	ldr	r1, [pc, #448]	@ (8004d60 <HAL_I2C_Master_Transmit+0x1f4>)
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f000 f964 	bl	8004e6c <I2C_WaitOnFlagUntilTimeout>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004baa:	2302      	movs	r3, #2
 8004bac:	e0d3      	b.n	8004d56 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d101      	bne.n	8004bbc <HAL_I2C_Master_Transmit+0x50>
 8004bb8:	2302      	movs	r3, #2
 8004bba:	e0cc      	b.n	8004d56 <HAL_I2C_Master_Transmit+0x1ea>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d007      	beq.n	8004be2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f042 0201 	orr.w	r2, r2, #1
 8004be0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004bf0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2221      	movs	r2, #33	@ 0x21
 8004bf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2210      	movs	r2, #16
 8004bfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	893a      	ldrh	r2, [r7, #8]
 8004c12:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c18:	b29a      	uxth	r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	4a50      	ldr	r2, [pc, #320]	@ (8004d64 <HAL_I2C_Master_Transmit+0x1f8>)
 8004c22:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004c24:	8979      	ldrh	r1, [r7, #10]
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	6a3a      	ldr	r2, [r7, #32]
 8004c2a:	68f8      	ldr	r0, [r7, #12]
 8004c2c:	f000 f89c 	bl	8004d68 <I2C_MasterRequestWrite>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d001      	beq.n	8004c3a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e08d      	b.n	8004d56 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	613b      	str	r3, [r7, #16]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	695b      	ldr	r3, [r3, #20]
 8004c44:	613b      	str	r3, [r7, #16]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	613b      	str	r3, [r7, #16]
 8004c4e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004c50:	e066      	b.n	8004d20 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c52:	697a      	ldr	r2, [r7, #20]
 8004c54:	6a39      	ldr	r1, [r7, #32]
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f000 fa22 	bl	80050a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00d      	beq.n	8004c7e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c66:	2b04      	cmp	r3, #4
 8004c68:	d107      	bne.n	8004c7a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c78:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e06b      	b.n	8004d56 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c82:	781a      	ldrb	r2, [r3, #0]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8e:	1c5a      	adds	r2, r3, #1
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	f003 0304 	and.w	r3, r3, #4
 8004cb8:	2b04      	cmp	r3, #4
 8004cba:	d11b      	bne.n	8004cf4 <HAL_I2C_Master_Transmit+0x188>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d017      	beq.n	8004cf4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc8:	781a      	ldrb	r2, [r3, #0]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd4:	1c5a      	adds	r2, r3, #1
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cec:	3b01      	subs	r3, #1
 8004cee:	b29a      	uxth	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cf4:	697a      	ldr	r2, [r7, #20]
 8004cf6:	6a39      	ldr	r1, [r7, #32]
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f000 fa19 	bl	8005130 <I2C_WaitOnBTFFlagUntilTimeout>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00d      	beq.n	8004d20 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d08:	2b04      	cmp	r3, #4
 8004d0a:	d107      	bne.n	8004d1c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d1a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e01a      	b.n	8004d56 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d194      	bne.n	8004c52 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004d50:	2300      	movs	r3, #0
 8004d52:	e000      	b.n	8004d56 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004d54:	2302      	movs	r3, #2
  }
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3718      	adds	r7, #24
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	00100002 	.word	0x00100002
 8004d64:	ffff0000 	.word	0xffff0000

08004d68 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b088      	sub	sp, #32
 8004d6c:	af02      	add	r7, sp, #8
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	607a      	str	r2, [r7, #4]
 8004d72:	603b      	str	r3, [r7, #0]
 8004d74:	460b      	mov	r3, r1
 8004d76:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d7c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	2b08      	cmp	r3, #8
 8004d82:	d006      	beq.n	8004d92 <I2C_MasterRequestWrite+0x2a>
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d003      	beq.n	8004d92 <I2C_MasterRequestWrite+0x2a>
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004d90:	d108      	bne.n	8004da4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004da0:	601a      	str	r2, [r3, #0]
 8004da2:	e00b      	b.n	8004dbc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004da8:	2b12      	cmp	r3, #18
 8004daa:	d107      	bne.n	8004dbc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004dba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	9300      	str	r3, [sp, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004dc8:	68f8      	ldr	r0, [r7, #12]
 8004dca:	f000 f84f 	bl	8004e6c <I2C_WaitOnFlagUntilTimeout>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00d      	beq.n	8004df0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004de2:	d103      	bne.n	8004dec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004dea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e035      	b.n	8004e5c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004df8:	d108      	bne.n	8004e0c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004dfa:	897b      	ldrh	r3, [r7, #10]
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	461a      	mov	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004e08:	611a      	str	r2, [r3, #16]
 8004e0a:	e01b      	b.n	8004e44 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004e0c:	897b      	ldrh	r3, [r7, #10]
 8004e0e:	11db      	asrs	r3, r3, #7
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	f003 0306 	and.w	r3, r3, #6
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	f063 030f 	orn	r3, r3, #15
 8004e1c:	b2da      	uxtb	r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	490e      	ldr	r1, [pc, #56]	@ (8004e64 <I2C_MasterRequestWrite+0xfc>)
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f000 f898 	bl	8004f60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d001      	beq.n	8004e3a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e010      	b.n	8004e5c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004e3a:	897b      	ldrh	r3, [r7, #10]
 8004e3c:	b2da      	uxtb	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	4907      	ldr	r1, [pc, #28]	@ (8004e68 <I2C_MasterRequestWrite+0x100>)
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f000 f888 	bl	8004f60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d001      	beq.n	8004e5a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e000      	b.n	8004e5c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3718      	adds	r7, #24
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	00010008 	.word	0x00010008
 8004e68:	00010002 	.word	0x00010002

08004e6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	603b      	str	r3, [r7, #0]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e7c:	e048      	b.n	8004f10 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e84:	d044      	beq.n	8004f10 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e86:	f7fe fd1f 	bl	80038c8 <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	683a      	ldr	r2, [r7, #0]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d302      	bcc.n	8004e9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d139      	bne.n	8004f10 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	0c1b      	lsrs	r3, r3, #16
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d10d      	bne.n	8004ec2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	695b      	ldr	r3, [r3, #20]
 8004eac:	43da      	mvns	r2, r3
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	bf0c      	ite	eq
 8004eb8:	2301      	moveq	r3, #1
 8004eba:	2300      	movne	r3, #0
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	e00c      	b.n	8004edc <I2C_WaitOnFlagUntilTimeout+0x70>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	43da      	mvns	r2, r3
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	4013      	ands	r3, r2
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	bf0c      	ite	eq
 8004ed4:	2301      	moveq	r3, #1
 8004ed6:	2300      	movne	r3, #0
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	461a      	mov	r2, r3
 8004edc:	79fb      	ldrb	r3, [r7, #7]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d116      	bne.n	8004f10 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2220      	movs	r2, #32
 8004eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004efc:	f043 0220 	orr.w	r2, r3, #32
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e023      	b.n	8004f58 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	0c1b      	lsrs	r3, r3, #16
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d10d      	bne.n	8004f36 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	695b      	ldr	r3, [r3, #20]
 8004f20:	43da      	mvns	r2, r3
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	4013      	ands	r3, r2
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	bf0c      	ite	eq
 8004f2c:	2301      	moveq	r3, #1
 8004f2e:	2300      	movne	r3, #0
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	461a      	mov	r2, r3
 8004f34:	e00c      	b.n	8004f50 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	43da      	mvns	r2, r3
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	4013      	ands	r3, r2
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	bf0c      	ite	eq
 8004f48:	2301      	moveq	r3, #1
 8004f4a:	2300      	movne	r3, #0
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	461a      	mov	r2, r3
 8004f50:	79fb      	ldrb	r3, [r7, #7]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d093      	beq.n	8004e7e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3710      	adds	r7, #16
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
 8004f6c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f6e:	e071      	b.n	8005054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f7e:	d123      	bne.n	8004fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f8e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004f98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb4:	f043 0204 	orr.w	r2, r3, #4
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e067      	b.n	8005098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fce:	d041      	beq.n	8005054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fd0:	f7fe fc7a 	bl	80038c8 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d302      	bcc.n	8004fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d136      	bne.n	8005054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	0c1b      	lsrs	r3, r3, #16
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d10c      	bne.n	800500a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	43da      	mvns	r2, r3
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	bf14      	ite	ne
 8005002:	2301      	movne	r3, #1
 8005004:	2300      	moveq	r3, #0
 8005006:	b2db      	uxtb	r3, r3
 8005008:	e00b      	b.n	8005022 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	43da      	mvns	r2, r3
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	4013      	ands	r3, r2
 8005016:	b29b      	uxth	r3, r3
 8005018:	2b00      	cmp	r3, #0
 800501a:	bf14      	ite	ne
 800501c:	2301      	movne	r3, #1
 800501e:	2300      	moveq	r3, #0
 8005020:	b2db      	uxtb	r3, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	d016      	beq.n	8005054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2200      	movs	r2, #0
 800502a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2220      	movs	r2, #32
 8005030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005040:	f043 0220 	orr.w	r2, r3, #32
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e021      	b.n	8005098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	0c1b      	lsrs	r3, r3, #16
 8005058:	b2db      	uxtb	r3, r3
 800505a:	2b01      	cmp	r3, #1
 800505c:	d10c      	bne.n	8005078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	695b      	ldr	r3, [r3, #20]
 8005064:	43da      	mvns	r2, r3
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	4013      	ands	r3, r2
 800506a:	b29b      	uxth	r3, r3
 800506c:	2b00      	cmp	r3, #0
 800506e:	bf14      	ite	ne
 8005070:	2301      	movne	r3, #1
 8005072:	2300      	moveq	r3, #0
 8005074:	b2db      	uxtb	r3, r3
 8005076:	e00b      	b.n	8005090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	43da      	mvns	r2, r3
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	4013      	ands	r3, r2
 8005084:	b29b      	uxth	r3, r3
 8005086:	2b00      	cmp	r3, #0
 8005088:	bf14      	ite	ne
 800508a:	2301      	movne	r3, #1
 800508c:	2300      	moveq	r3, #0
 800508e:	b2db      	uxtb	r3, r3
 8005090:	2b00      	cmp	r3, #0
 8005092:	f47f af6d 	bne.w	8004f70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3710      	adds	r7, #16
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050ac:	e034      	b.n	8005118 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f000 f886 	bl	80051c0 <I2C_IsAcknowledgeFailed>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d001      	beq.n	80050be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e034      	b.n	8005128 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c4:	d028      	beq.n	8005118 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050c6:	f7fe fbff 	bl	80038c8 <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	68ba      	ldr	r2, [r7, #8]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d302      	bcc.n	80050dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d11d      	bne.n	8005118 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050e6:	2b80      	cmp	r3, #128	@ 0x80
 80050e8:	d016      	beq.n	8005118 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2200      	movs	r2, #0
 80050ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2220      	movs	r2, #32
 80050f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005104:	f043 0220 	orr.w	r2, r3, #32
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2200      	movs	r2, #0
 8005110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e007      	b.n	8005128 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005122:	2b80      	cmp	r3, #128	@ 0x80
 8005124:	d1c3      	bne.n	80050ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3710      	adds	r7, #16
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800513c:	e034      	b.n	80051a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	f000 f83e 	bl	80051c0 <I2C_IsAcknowledgeFailed>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d001      	beq.n	800514e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e034      	b.n	80051b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005154:	d028      	beq.n	80051a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005156:	f7fe fbb7 	bl	80038c8 <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	68ba      	ldr	r2, [r7, #8]
 8005162:	429a      	cmp	r2, r3
 8005164:	d302      	bcc.n	800516c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d11d      	bne.n	80051a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	f003 0304 	and.w	r3, r3, #4
 8005176:	2b04      	cmp	r3, #4
 8005178:	d016      	beq.n	80051a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2200      	movs	r2, #0
 800517e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2220      	movs	r2, #32
 8005184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005194:	f043 0220 	orr.w	r2, r3, #32
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e007      	b.n	80051b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	f003 0304 	and.w	r3, r3, #4
 80051b2:	2b04      	cmp	r3, #4
 80051b4:	d1c3      	bne.n	800513e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3710      	adds	r7, #16
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051d6:	d11b      	bne.n	8005210 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80051e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2220      	movs	r2, #32
 80051ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051fc:	f043 0204 	orr.w	r2, r3, #4
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e000      	b.n	8005212 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	370c      	adds	r7, #12
 8005216:	46bd      	mov	sp, r7
 8005218:	bc80      	pop	{r7}
 800521a:	4770      	bx	lr

0800521c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800521c:	b480      	push	{r7}
 800521e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8005220:	4b03      	ldr	r3, [pc, #12]	@ (8005230 <HAL_PWR_EnableBkUpAccess+0x14>)
 8005222:	2201      	movs	r2, #1
 8005224:	601a      	str	r2, [r3, #0]
}
 8005226:	bf00      	nop
 8005228:	46bd      	mov	sp, r7
 800522a:	bc80      	pop	{r7}
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	420e0020 	.word	0x420e0020

08005234 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b086      	sub	sp, #24
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d101      	bne.n	8005246 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e272      	b.n	800572c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	2b00      	cmp	r3, #0
 8005250:	f000 8087 	beq.w	8005362 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005254:	4b92      	ldr	r3, [pc, #584]	@ (80054a0 <HAL_RCC_OscConfig+0x26c>)
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f003 030c 	and.w	r3, r3, #12
 800525c:	2b04      	cmp	r3, #4
 800525e:	d00c      	beq.n	800527a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005260:	4b8f      	ldr	r3, [pc, #572]	@ (80054a0 <HAL_RCC_OscConfig+0x26c>)
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f003 030c 	and.w	r3, r3, #12
 8005268:	2b08      	cmp	r3, #8
 800526a:	d112      	bne.n	8005292 <HAL_RCC_OscConfig+0x5e>
 800526c:	4b8c      	ldr	r3, [pc, #560]	@ (80054a0 <HAL_RCC_OscConfig+0x26c>)
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005274:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005278:	d10b      	bne.n	8005292 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800527a:	4b89      	ldr	r3, [pc, #548]	@ (80054a0 <HAL_RCC_OscConfig+0x26c>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d06c      	beq.n	8005360 <HAL_RCC_OscConfig+0x12c>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d168      	bne.n	8005360 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e24c      	b.n	800572c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800529a:	d106      	bne.n	80052aa <HAL_RCC_OscConfig+0x76>
 800529c:	4b80      	ldr	r3, [pc, #512]	@ (80054a0 <HAL_RCC_OscConfig+0x26c>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a7f      	ldr	r2, [pc, #508]	@ (80054a0 <HAL_RCC_OscConfig+0x26c>)
 80052a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052a6:	6013      	str	r3, [r2, #0]
 80052a8:	e02e      	b.n	8005308 <HAL_RCC_OscConfig+0xd4>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10c      	bne.n	80052cc <HAL_RCC_OscConfig+0x98>
 80052b2:	4b7b      	ldr	r3, [pc, #492]	@ (80054a0 <HAL_RCC_OscConfig+0x26c>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a7a      	ldr	r2, [pc, #488]	@ (80054a0 <HAL_RCC_OscConfig+0x26c>)
 80052b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052bc:	6013      	str	r3, [r2, #0]
 80052be:	4b78      	ldr	r3, [pc, #480]	@ (80054a0 <HAL_RCC_OscConfig+0x26c>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a77      	ldr	r2, [pc, #476]	@ (80054a0 <HAL_RCC_OscConfig+0x26c>)
 80052c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052c8:	6013      	str	r3, [r2, #0]
 80052ca:	e01d      	b.n	8005308 <HAL_RCC_OscConfig+0xd4>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80052d4:	d10c      	bne.n	80052f0 <HAL_RCC_OscConfig+0xbc>
 80052d6:	4b72      	ldr	r3, [pc, #456]	@ (80054a0 <HAL_RCC_OscConfig+0x26c>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a71      	ldr	r2, [pc, #452]	@ (80054a0 <HAL_RCC_OscConfig+0x26c>)
 80052dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80052e0:	6013      	str	r3, [r2, #0]
 80052e2:	4b6f      	ldr	r3, [pc, #444]	@ (80054a0 <HAL_RCC_OscConfig+0x26c>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a6e      	ldr	r2, [pc, #440]	@ (80054a0 <HAL_RCC_OscConfig+0x26c>)
 80052e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052ec:	6013      	str	r3, [r2, #0]
 80052ee:	e00b      	b.n	8005308 <HAL_RCC_OscConfig+0xd4>
 80052f0:	4b6b      	ldr	r3, [pc, #428]	@ (80054a0 <HAL_RCC_OscConfig+0x26c>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a6a      	ldr	r2, [pc, #424]	@ (80054a0 <HAL_RCC_OscConfig+0x26c>)
 80052f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052fa:	6013      	str	r3, [r2, #0]
 80052fc:	4b68      	ldr	r3, [pc, #416]	@ (80054a0 <HAL_RCC_OscConfig+0x26c>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a67      	ldr	r2, [pc, #412]	@ (80054a0 <HAL_RCC_OscConfig+0x26c>)
 8005302:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005306:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d013      	beq.n	8005338 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005310:	f7fe fada 	bl	80038c8 <HAL_GetTick>
 8005314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005316:	e008      	b.n	800532a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005318:	f7fe fad6 	bl	80038c8 <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	2b64      	cmp	r3, #100	@ 0x64
 8005324:	d901      	bls.n	800532a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	e200      	b.n	800572c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800532a:	4b5d      	ldr	r3, [pc, #372]	@ (80054a0 <HAL_RCC_OscConfig+0x26c>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d0f0      	beq.n	8005318 <HAL_RCC_OscConfig+0xe4>
 8005336:	e014      	b.n	8005362 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005338:	f7fe fac6 	bl	80038c8 <HAL_GetTick>
 800533c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800533e:	e008      	b.n	8005352 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005340:	f7fe fac2 	bl	80038c8 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	2b64      	cmp	r3, #100	@ 0x64
 800534c:	d901      	bls.n	8005352 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e1ec      	b.n	800572c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005352:	4b53      	ldr	r3, [pc, #332]	@ (80054a0 <HAL_RCC_OscConfig+0x26c>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1f0      	bne.n	8005340 <HAL_RCC_OscConfig+0x10c>
 800535e:	e000      	b.n	8005362 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005360:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0302 	and.w	r3, r3, #2
 800536a:	2b00      	cmp	r3, #0
 800536c:	d063      	beq.n	8005436 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800536e:	4b4c      	ldr	r3, [pc, #304]	@ (80054a0 <HAL_RCC_OscConfig+0x26c>)
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	f003 030c 	and.w	r3, r3, #12
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00b      	beq.n	8005392 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800537a:	4b49      	ldr	r3, [pc, #292]	@ (80054a0 <HAL_RCC_OscConfig+0x26c>)
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	f003 030c 	and.w	r3, r3, #12
 8005382:	2b08      	cmp	r3, #8
 8005384:	d11c      	bne.n	80053c0 <HAL_RCC_OscConfig+0x18c>
 8005386:	4b46      	ldr	r3, [pc, #280]	@ (80054a0 <HAL_RCC_OscConfig+0x26c>)
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d116      	bne.n	80053c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005392:	4b43      	ldr	r3, [pc, #268]	@ (80054a0 <HAL_RCC_OscConfig+0x26c>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0302 	and.w	r3, r3, #2
 800539a:	2b00      	cmp	r3, #0
 800539c:	d005      	beq.n	80053aa <HAL_RCC_OscConfig+0x176>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d001      	beq.n	80053aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e1c0      	b.n	800572c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053aa:	4b3d      	ldr	r3, [pc, #244]	@ (80054a0 <HAL_RCC_OscConfig+0x26c>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	00db      	lsls	r3, r3, #3
 80053b8:	4939      	ldr	r1, [pc, #228]	@ (80054a0 <HAL_RCC_OscConfig+0x26c>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053be:	e03a      	b.n	8005436 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d020      	beq.n	800540a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053c8:	4b36      	ldr	r3, [pc, #216]	@ (80054a4 <HAL_RCC_OscConfig+0x270>)
 80053ca:	2201      	movs	r2, #1
 80053cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ce:	f7fe fa7b 	bl	80038c8 <HAL_GetTick>
 80053d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053d4:	e008      	b.n	80053e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053d6:	f7fe fa77 	bl	80038c8 <HAL_GetTick>
 80053da:	4602      	mov	r2, r0
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d901      	bls.n	80053e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e1a1      	b.n	800572c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053e8:	4b2d      	ldr	r3, [pc, #180]	@ (80054a0 <HAL_RCC_OscConfig+0x26c>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0302 	and.w	r3, r3, #2
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d0f0      	beq.n	80053d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053f4:	4b2a      	ldr	r3, [pc, #168]	@ (80054a0 <HAL_RCC_OscConfig+0x26c>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	695b      	ldr	r3, [r3, #20]
 8005400:	00db      	lsls	r3, r3, #3
 8005402:	4927      	ldr	r1, [pc, #156]	@ (80054a0 <HAL_RCC_OscConfig+0x26c>)
 8005404:	4313      	orrs	r3, r2
 8005406:	600b      	str	r3, [r1, #0]
 8005408:	e015      	b.n	8005436 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800540a:	4b26      	ldr	r3, [pc, #152]	@ (80054a4 <HAL_RCC_OscConfig+0x270>)
 800540c:	2200      	movs	r2, #0
 800540e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005410:	f7fe fa5a 	bl	80038c8 <HAL_GetTick>
 8005414:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005416:	e008      	b.n	800542a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005418:	f7fe fa56 	bl	80038c8 <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	2b02      	cmp	r3, #2
 8005424:	d901      	bls.n	800542a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e180      	b.n	800572c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800542a:	4b1d      	ldr	r3, [pc, #116]	@ (80054a0 <HAL_RCC_OscConfig+0x26c>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	2b00      	cmp	r3, #0
 8005434:	d1f0      	bne.n	8005418 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0308 	and.w	r3, r3, #8
 800543e:	2b00      	cmp	r3, #0
 8005440:	d03a      	beq.n	80054b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	699b      	ldr	r3, [r3, #24]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d019      	beq.n	800547e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800544a:	4b17      	ldr	r3, [pc, #92]	@ (80054a8 <HAL_RCC_OscConfig+0x274>)
 800544c:	2201      	movs	r2, #1
 800544e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005450:	f7fe fa3a 	bl	80038c8 <HAL_GetTick>
 8005454:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005456:	e008      	b.n	800546a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005458:	f7fe fa36 	bl	80038c8 <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	2b02      	cmp	r3, #2
 8005464:	d901      	bls.n	800546a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e160      	b.n	800572c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800546a:	4b0d      	ldr	r3, [pc, #52]	@ (80054a0 <HAL_RCC_OscConfig+0x26c>)
 800546c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800546e:	f003 0302 	and.w	r3, r3, #2
 8005472:	2b00      	cmp	r3, #0
 8005474:	d0f0      	beq.n	8005458 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005476:	2001      	movs	r0, #1
 8005478:	f000 face 	bl	8005a18 <RCC_Delay>
 800547c:	e01c      	b.n	80054b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800547e:	4b0a      	ldr	r3, [pc, #40]	@ (80054a8 <HAL_RCC_OscConfig+0x274>)
 8005480:	2200      	movs	r2, #0
 8005482:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005484:	f7fe fa20 	bl	80038c8 <HAL_GetTick>
 8005488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800548a:	e00f      	b.n	80054ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800548c:	f7fe fa1c 	bl	80038c8 <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	2b02      	cmp	r3, #2
 8005498:	d908      	bls.n	80054ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e146      	b.n	800572c <HAL_RCC_OscConfig+0x4f8>
 800549e:	bf00      	nop
 80054a0:	40021000 	.word	0x40021000
 80054a4:	42420000 	.word	0x42420000
 80054a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054ac:	4b92      	ldr	r3, [pc, #584]	@ (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 80054ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b0:	f003 0302 	and.w	r3, r3, #2
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1e9      	bne.n	800548c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0304 	and.w	r3, r3, #4
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	f000 80a6 	beq.w	8005612 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054c6:	2300      	movs	r3, #0
 80054c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054ca:	4b8b      	ldr	r3, [pc, #556]	@ (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 80054cc:	69db      	ldr	r3, [r3, #28]
 80054ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d10d      	bne.n	80054f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054d6:	4b88      	ldr	r3, [pc, #544]	@ (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 80054d8:	69db      	ldr	r3, [r3, #28]
 80054da:	4a87      	ldr	r2, [pc, #540]	@ (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 80054dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054e0:	61d3      	str	r3, [r2, #28]
 80054e2:	4b85      	ldr	r3, [pc, #532]	@ (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 80054e4:	69db      	ldr	r3, [r3, #28]
 80054e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054ea:	60bb      	str	r3, [r7, #8]
 80054ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054ee:	2301      	movs	r3, #1
 80054f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054f2:	4b82      	ldr	r3, [pc, #520]	@ (80056fc <HAL_RCC_OscConfig+0x4c8>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d118      	bne.n	8005530 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054fe:	4b7f      	ldr	r3, [pc, #508]	@ (80056fc <HAL_RCC_OscConfig+0x4c8>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a7e      	ldr	r2, [pc, #504]	@ (80056fc <HAL_RCC_OscConfig+0x4c8>)
 8005504:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005508:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800550a:	f7fe f9dd 	bl	80038c8 <HAL_GetTick>
 800550e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005510:	e008      	b.n	8005524 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005512:	f7fe f9d9 	bl	80038c8 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	2b64      	cmp	r3, #100	@ 0x64
 800551e:	d901      	bls.n	8005524 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e103      	b.n	800572c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005524:	4b75      	ldr	r3, [pc, #468]	@ (80056fc <HAL_RCC_OscConfig+0x4c8>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800552c:	2b00      	cmp	r3, #0
 800552e:	d0f0      	beq.n	8005512 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d106      	bne.n	8005546 <HAL_RCC_OscConfig+0x312>
 8005538:	4b6f      	ldr	r3, [pc, #444]	@ (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 800553a:	6a1b      	ldr	r3, [r3, #32]
 800553c:	4a6e      	ldr	r2, [pc, #440]	@ (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 800553e:	f043 0301 	orr.w	r3, r3, #1
 8005542:	6213      	str	r3, [r2, #32]
 8005544:	e02d      	b.n	80055a2 <HAL_RCC_OscConfig+0x36e>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10c      	bne.n	8005568 <HAL_RCC_OscConfig+0x334>
 800554e:	4b6a      	ldr	r3, [pc, #424]	@ (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 8005550:	6a1b      	ldr	r3, [r3, #32]
 8005552:	4a69      	ldr	r2, [pc, #420]	@ (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 8005554:	f023 0301 	bic.w	r3, r3, #1
 8005558:	6213      	str	r3, [r2, #32]
 800555a:	4b67      	ldr	r3, [pc, #412]	@ (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	4a66      	ldr	r2, [pc, #408]	@ (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 8005560:	f023 0304 	bic.w	r3, r3, #4
 8005564:	6213      	str	r3, [r2, #32]
 8005566:	e01c      	b.n	80055a2 <HAL_RCC_OscConfig+0x36e>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	2b05      	cmp	r3, #5
 800556e:	d10c      	bne.n	800558a <HAL_RCC_OscConfig+0x356>
 8005570:	4b61      	ldr	r3, [pc, #388]	@ (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 8005572:	6a1b      	ldr	r3, [r3, #32]
 8005574:	4a60      	ldr	r2, [pc, #384]	@ (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 8005576:	f043 0304 	orr.w	r3, r3, #4
 800557a:	6213      	str	r3, [r2, #32]
 800557c:	4b5e      	ldr	r3, [pc, #376]	@ (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 800557e:	6a1b      	ldr	r3, [r3, #32]
 8005580:	4a5d      	ldr	r2, [pc, #372]	@ (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 8005582:	f043 0301 	orr.w	r3, r3, #1
 8005586:	6213      	str	r3, [r2, #32]
 8005588:	e00b      	b.n	80055a2 <HAL_RCC_OscConfig+0x36e>
 800558a:	4b5b      	ldr	r3, [pc, #364]	@ (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	4a5a      	ldr	r2, [pc, #360]	@ (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 8005590:	f023 0301 	bic.w	r3, r3, #1
 8005594:	6213      	str	r3, [r2, #32]
 8005596:	4b58      	ldr	r3, [pc, #352]	@ (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	4a57      	ldr	r2, [pc, #348]	@ (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 800559c:	f023 0304 	bic.w	r3, r3, #4
 80055a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d015      	beq.n	80055d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055aa:	f7fe f98d 	bl	80038c8 <HAL_GetTick>
 80055ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055b0:	e00a      	b.n	80055c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055b2:	f7fe f989 	bl	80038c8 <HAL_GetTick>
 80055b6:	4602      	mov	r2, r0
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d901      	bls.n	80055c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80055c4:	2303      	movs	r3, #3
 80055c6:	e0b1      	b.n	800572c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055c8:	4b4b      	ldr	r3, [pc, #300]	@ (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 80055ca:	6a1b      	ldr	r3, [r3, #32]
 80055cc:	f003 0302 	and.w	r3, r3, #2
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d0ee      	beq.n	80055b2 <HAL_RCC_OscConfig+0x37e>
 80055d4:	e014      	b.n	8005600 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055d6:	f7fe f977 	bl	80038c8 <HAL_GetTick>
 80055da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055dc:	e00a      	b.n	80055f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055de:	f7fe f973 	bl	80038c8 <HAL_GetTick>
 80055e2:	4602      	mov	r2, r0
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d901      	bls.n	80055f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80055f0:	2303      	movs	r3, #3
 80055f2:	e09b      	b.n	800572c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055f4:	4b40      	ldr	r3, [pc, #256]	@ (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 80055f6:	6a1b      	ldr	r3, [r3, #32]
 80055f8:	f003 0302 	and.w	r3, r3, #2
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d1ee      	bne.n	80055de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005600:	7dfb      	ldrb	r3, [r7, #23]
 8005602:	2b01      	cmp	r3, #1
 8005604:	d105      	bne.n	8005612 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005606:	4b3c      	ldr	r3, [pc, #240]	@ (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	4a3b      	ldr	r2, [pc, #236]	@ (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 800560c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005610:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	69db      	ldr	r3, [r3, #28]
 8005616:	2b00      	cmp	r3, #0
 8005618:	f000 8087 	beq.w	800572a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800561c:	4b36      	ldr	r3, [pc, #216]	@ (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	f003 030c 	and.w	r3, r3, #12
 8005624:	2b08      	cmp	r3, #8
 8005626:	d061      	beq.n	80056ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	69db      	ldr	r3, [r3, #28]
 800562c:	2b02      	cmp	r3, #2
 800562e:	d146      	bne.n	80056be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005630:	4b33      	ldr	r3, [pc, #204]	@ (8005700 <HAL_RCC_OscConfig+0x4cc>)
 8005632:	2200      	movs	r2, #0
 8005634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005636:	f7fe f947 	bl	80038c8 <HAL_GetTick>
 800563a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800563c:	e008      	b.n	8005650 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800563e:	f7fe f943 	bl	80038c8 <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	2b02      	cmp	r3, #2
 800564a:	d901      	bls.n	8005650 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e06d      	b.n	800572c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005650:	4b29      	ldr	r3, [pc, #164]	@ (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1f0      	bne.n	800563e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a1b      	ldr	r3, [r3, #32]
 8005660:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005664:	d108      	bne.n	8005678 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005666:	4b24      	ldr	r3, [pc, #144]	@ (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	4921      	ldr	r1, [pc, #132]	@ (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 8005674:	4313      	orrs	r3, r2
 8005676:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005678:	4b1f      	ldr	r3, [pc, #124]	@ (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a19      	ldr	r1, [r3, #32]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005688:	430b      	orrs	r3, r1
 800568a:	491b      	ldr	r1, [pc, #108]	@ (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 800568c:	4313      	orrs	r3, r2
 800568e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005690:	4b1b      	ldr	r3, [pc, #108]	@ (8005700 <HAL_RCC_OscConfig+0x4cc>)
 8005692:	2201      	movs	r2, #1
 8005694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005696:	f7fe f917 	bl	80038c8 <HAL_GetTick>
 800569a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800569c:	e008      	b.n	80056b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800569e:	f7fe f913 	bl	80038c8 <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d901      	bls.n	80056b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e03d      	b.n	800572c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80056b0:	4b11      	ldr	r3, [pc, #68]	@ (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d0f0      	beq.n	800569e <HAL_RCC_OscConfig+0x46a>
 80056bc:	e035      	b.n	800572a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056be:	4b10      	ldr	r3, [pc, #64]	@ (8005700 <HAL_RCC_OscConfig+0x4cc>)
 80056c0:	2200      	movs	r2, #0
 80056c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056c4:	f7fe f900 	bl	80038c8 <HAL_GetTick>
 80056c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056ca:	e008      	b.n	80056de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056cc:	f7fe f8fc 	bl	80038c8 <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d901      	bls.n	80056de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e026      	b.n	800572c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056de:	4b06      	ldr	r3, [pc, #24]	@ (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1f0      	bne.n	80056cc <HAL_RCC_OscConfig+0x498>
 80056ea:	e01e      	b.n	800572a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	69db      	ldr	r3, [r3, #28]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d107      	bne.n	8005704 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e019      	b.n	800572c <HAL_RCC_OscConfig+0x4f8>
 80056f8:	40021000 	.word	0x40021000
 80056fc:	40007000 	.word	0x40007000
 8005700:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005704:	4b0b      	ldr	r3, [pc, #44]	@ (8005734 <HAL_RCC_OscConfig+0x500>)
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a1b      	ldr	r3, [r3, #32]
 8005714:	429a      	cmp	r2, r3
 8005716:	d106      	bne.n	8005726 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005722:	429a      	cmp	r2, r3
 8005724:	d001      	beq.n	800572a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e000      	b.n	800572c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3718      	adds	r7, #24
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	40021000 	.word	0x40021000

08005738 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d101      	bne.n	800574c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e0d0      	b.n	80058ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800574c:	4b6a      	ldr	r3, [pc, #424]	@ (80058f8 <HAL_RCC_ClockConfig+0x1c0>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0307 	and.w	r3, r3, #7
 8005754:	683a      	ldr	r2, [r7, #0]
 8005756:	429a      	cmp	r2, r3
 8005758:	d910      	bls.n	800577c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800575a:	4b67      	ldr	r3, [pc, #412]	@ (80058f8 <HAL_RCC_ClockConfig+0x1c0>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f023 0207 	bic.w	r2, r3, #7
 8005762:	4965      	ldr	r1, [pc, #404]	@ (80058f8 <HAL_RCC_ClockConfig+0x1c0>)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	4313      	orrs	r3, r2
 8005768:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800576a:	4b63      	ldr	r3, [pc, #396]	@ (80058f8 <HAL_RCC_ClockConfig+0x1c0>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0307 	and.w	r3, r3, #7
 8005772:	683a      	ldr	r2, [r7, #0]
 8005774:	429a      	cmp	r2, r3
 8005776:	d001      	beq.n	800577c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e0b8      	b.n	80058ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0302 	and.w	r3, r3, #2
 8005784:	2b00      	cmp	r3, #0
 8005786:	d020      	beq.n	80057ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0304 	and.w	r3, r3, #4
 8005790:	2b00      	cmp	r3, #0
 8005792:	d005      	beq.n	80057a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005794:	4b59      	ldr	r3, [pc, #356]	@ (80058fc <HAL_RCC_ClockConfig+0x1c4>)
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	4a58      	ldr	r2, [pc, #352]	@ (80058fc <HAL_RCC_ClockConfig+0x1c4>)
 800579a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800579e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0308 	and.w	r3, r3, #8
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d005      	beq.n	80057b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057ac:	4b53      	ldr	r3, [pc, #332]	@ (80058fc <HAL_RCC_ClockConfig+0x1c4>)
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	4a52      	ldr	r2, [pc, #328]	@ (80058fc <HAL_RCC_ClockConfig+0x1c4>)
 80057b2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80057b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057b8:	4b50      	ldr	r3, [pc, #320]	@ (80058fc <HAL_RCC_ClockConfig+0x1c4>)
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	494d      	ldr	r1, [pc, #308]	@ (80058fc <HAL_RCC_ClockConfig+0x1c4>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 0301 	and.w	r3, r3, #1
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d040      	beq.n	8005858 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d107      	bne.n	80057ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057de:	4b47      	ldr	r3, [pc, #284]	@ (80058fc <HAL_RCC_ClockConfig+0x1c4>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d115      	bne.n	8005816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e07f      	b.n	80058ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d107      	bne.n	8005806 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057f6:	4b41      	ldr	r3, [pc, #260]	@ (80058fc <HAL_RCC_ClockConfig+0x1c4>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d109      	bne.n	8005816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e073      	b.n	80058ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005806:	4b3d      	ldr	r3, [pc, #244]	@ (80058fc <HAL_RCC_ClockConfig+0x1c4>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0302 	and.w	r3, r3, #2
 800580e:	2b00      	cmp	r3, #0
 8005810:	d101      	bne.n	8005816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e06b      	b.n	80058ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005816:	4b39      	ldr	r3, [pc, #228]	@ (80058fc <HAL_RCC_ClockConfig+0x1c4>)
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f023 0203 	bic.w	r2, r3, #3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	4936      	ldr	r1, [pc, #216]	@ (80058fc <HAL_RCC_ClockConfig+0x1c4>)
 8005824:	4313      	orrs	r3, r2
 8005826:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005828:	f7fe f84e 	bl	80038c8 <HAL_GetTick>
 800582c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800582e:	e00a      	b.n	8005846 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005830:	f7fe f84a 	bl	80038c8 <HAL_GetTick>
 8005834:	4602      	mov	r2, r0
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800583e:	4293      	cmp	r3, r2
 8005840:	d901      	bls.n	8005846 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e053      	b.n	80058ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005846:	4b2d      	ldr	r3, [pc, #180]	@ (80058fc <HAL_RCC_ClockConfig+0x1c4>)
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f003 020c 	and.w	r2, r3, #12
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	429a      	cmp	r2, r3
 8005856:	d1eb      	bne.n	8005830 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005858:	4b27      	ldr	r3, [pc, #156]	@ (80058f8 <HAL_RCC_ClockConfig+0x1c0>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 0307 	and.w	r3, r3, #7
 8005860:	683a      	ldr	r2, [r7, #0]
 8005862:	429a      	cmp	r2, r3
 8005864:	d210      	bcs.n	8005888 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005866:	4b24      	ldr	r3, [pc, #144]	@ (80058f8 <HAL_RCC_ClockConfig+0x1c0>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f023 0207 	bic.w	r2, r3, #7
 800586e:	4922      	ldr	r1, [pc, #136]	@ (80058f8 <HAL_RCC_ClockConfig+0x1c0>)
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	4313      	orrs	r3, r2
 8005874:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005876:	4b20      	ldr	r3, [pc, #128]	@ (80058f8 <HAL_RCC_ClockConfig+0x1c0>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 0307 	and.w	r3, r3, #7
 800587e:	683a      	ldr	r2, [r7, #0]
 8005880:	429a      	cmp	r2, r3
 8005882:	d001      	beq.n	8005888 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e032      	b.n	80058ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 0304 	and.w	r3, r3, #4
 8005890:	2b00      	cmp	r3, #0
 8005892:	d008      	beq.n	80058a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005894:	4b19      	ldr	r3, [pc, #100]	@ (80058fc <HAL_RCC_ClockConfig+0x1c4>)
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	4916      	ldr	r1, [pc, #88]	@ (80058fc <HAL_RCC_ClockConfig+0x1c4>)
 80058a2:	4313      	orrs	r3, r2
 80058a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0308 	and.w	r3, r3, #8
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d009      	beq.n	80058c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80058b2:	4b12      	ldr	r3, [pc, #72]	@ (80058fc <HAL_RCC_ClockConfig+0x1c4>)
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	00db      	lsls	r3, r3, #3
 80058c0:	490e      	ldr	r1, [pc, #56]	@ (80058fc <HAL_RCC_ClockConfig+0x1c4>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80058c6:	f000 f821 	bl	800590c <HAL_RCC_GetSysClockFreq>
 80058ca:	4602      	mov	r2, r0
 80058cc:	4b0b      	ldr	r3, [pc, #44]	@ (80058fc <HAL_RCC_ClockConfig+0x1c4>)
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	091b      	lsrs	r3, r3, #4
 80058d2:	f003 030f 	and.w	r3, r3, #15
 80058d6:	490a      	ldr	r1, [pc, #40]	@ (8005900 <HAL_RCC_ClockConfig+0x1c8>)
 80058d8:	5ccb      	ldrb	r3, [r1, r3]
 80058da:	fa22 f303 	lsr.w	r3, r2, r3
 80058de:	4a09      	ldr	r2, [pc, #36]	@ (8005904 <HAL_RCC_ClockConfig+0x1cc>)
 80058e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80058e2:	4b09      	ldr	r3, [pc, #36]	@ (8005908 <HAL_RCC_ClockConfig+0x1d0>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4618      	mov	r0, r3
 80058e8:	f7fd ffac 	bl	8003844 <HAL_InitTick>

  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3710      	adds	r7, #16
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	40022000 	.word	0x40022000
 80058fc:	40021000 	.word	0x40021000
 8005900:	08007ec8 	.word	0x08007ec8
 8005904:	20000068 	.word	0x20000068
 8005908:	2000006c 	.word	0x2000006c

0800590c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800590c:	b480      	push	{r7}
 800590e:	b087      	sub	sp, #28
 8005910:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005912:	2300      	movs	r3, #0
 8005914:	60fb      	str	r3, [r7, #12]
 8005916:	2300      	movs	r3, #0
 8005918:	60bb      	str	r3, [r7, #8]
 800591a:	2300      	movs	r3, #0
 800591c:	617b      	str	r3, [r7, #20]
 800591e:	2300      	movs	r3, #0
 8005920:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005922:	2300      	movs	r3, #0
 8005924:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005926:	4b1e      	ldr	r3, [pc, #120]	@ (80059a0 <HAL_RCC_GetSysClockFreq+0x94>)
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f003 030c 	and.w	r3, r3, #12
 8005932:	2b04      	cmp	r3, #4
 8005934:	d002      	beq.n	800593c <HAL_RCC_GetSysClockFreq+0x30>
 8005936:	2b08      	cmp	r3, #8
 8005938:	d003      	beq.n	8005942 <HAL_RCC_GetSysClockFreq+0x36>
 800593a:	e027      	b.n	800598c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800593c:	4b19      	ldr	r3, [pc, #100]	@ (80059a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800593e:	613b      	str	r3, [r7, #16]
      break;
 8005940:	e027      	b.n	8005992 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	0c9b      	lsrs	r3, r3, #18
 8005946:	f003 030f 	and.w	r3, r3, #15
 800594a:	4a17      	ldr	r2, [pc, #92]	@ (80059a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800594c:	5cd3      	ldrb	r3, [r2, r3]
 800594e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d010      	beq.n	800597c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800595a:	4b11      	ldr	r3, [pc, #68]	@ (80059a0 <HAL_RCC_GetSysClockFreq+0x94>)
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	0c5b      	lsrs	r3, r3, #17
 8005960:	f003 0301 	and.w	r3, r3, #1
 8005964:	4a11      	ldr	r2, [pc, #68]	@ (80059ac <HAL_RCC_GetSysClockFreq+0xa0>)
 8005966:	5cd3      	ldrb	r3, [r2, r3]
 8005968:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a0d      	ldr	r2, [pc, #52]	@ (80059a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800596e:	fb03 f202 	mul.w	r2, r3, r2
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	fbb2 f3f3 	udiv	r3, r2, r3
 8005978:	617b      	str	r3, [r7, #20]
 800597a:	e004      	b.n	8005986 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a0c      	ldr	r2, [pc, #48]	@ (80059b0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005980:	fb02 f303 	mul.w	r3, r2, r3
 8005984:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	613b      	str	r3, [r7, #16]
      break;
 800598a:	e002      	b.n	8005992 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800598c:	4b05      	ldr	r3, [pc, #20]	@ (80059a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800598e:	613b      	str	r3, [r7, #16]
      break;
 8005990:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005992:	693b      	ldr	r3, [r7, #16]
}
 8005994:	4618      	mov	r0, r3
 8005996:	371c      	adds	r7, #28
 8005998:	46bd      	mov	sp, r7
 800599a:	bc80      	pop	{r7}
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	40021000 	.word	0x40021000
 80059a4:	007a1200 	.word	0x007a1200
 80059a8:	08007ee0 	.word	0x08007ee0
 80059ac:	08007ef0 	.word	0x08007ef0
 80059b0:	003d0900 	.word	0x003d0900

080059b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059b4:	b480      	push	{r7}
 80059b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059b8:	4b02      	ldr	r3, [pc, #8]	@ (80059c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80059ba:	681b      	ldr	r3, [r3, #0]
}
 80059bc:	4618      	mov	r0, r3
 80059be:	46bd      	mov	sp, r7
 80059c0:	bc80      	pop	{r7}
 80059c2:	4770      	bx	lr
 80059c4:	20000068 	.word	0x20000068

080059c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80059cc:	f7ff fff2 	bl	80059b4 <HAL_RCC_GetHCLKFreq>
 80059d0:	4602      	mov	r2, r0
 80059d2:	4b05      	ldr	r3, [pc, #20]	@ (80059e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	0a1b      	lsrs	r3, r3, #8
 80059d8:	f003 0307 	and.w	r3, r3, #7
 80059dc:	4903      	ldr	r1, [pc, #12]	@ (80059ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80059de:	5ccb      	ldrb	r3, [r1, r3]
 80059e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	40021000 	.word	0x40021000
 80059ec:	08007ed8 	.word	0x08007ed8

080059f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80059f4:	f7ff ffde 	bl	80059b4 <HAL_RCC_GetHCLKFreq>
 80059f8:	4602      	mov	r2, r0
 80059fa:	4b05      	ldr	r3, [pc, #20]	@ (8005a10 <HAL_RCC_GetPCLK2Freq+0x20>)
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	0adb      	lsrs	r3, r3, #11
 8005a00:	f003 0307 	and.w	r3, r3, #7
 8005a04:	4903      	ldr	r1, [pc, #12]	@ (8005a14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a06:	5ccb      	ldrb	r3, [r1, r3]
 8005a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	40021000 	.word	0x40021000
 8005a14:	08007ed8 	.word	0x08007ed8

08005a18 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005a20:	4b0a      	ldr	r3, [pc, #40]	@ (8005a4c <RCC_Delay+0x34>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a0a      	ldr	r2, [pc, #40]	@ (8005a50 <RCC_Delay+0x38>)
 8005a26:	fba2 2303 	umull	r2, r3, r2, r3
 8005a2a:	0a5b      	lsrs	r3, r3, #9
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	fb02 f303 	mul.w	r3, r2, r3
 8005a32:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005a34:	bf00      	nop
  }
  while (Delay --);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	1e5a      	subs	r2, r3, #1
 8005a3a:	60fa      	str	r2, [r7, #12]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1f9      	bne.n	8005a34 <RCC_Delay+0x1c>
}
 8005a40:	bf00      	nop
 8005a42:	bf00      	nop
 8005a44:	3714      	adds	r7, #20
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bc80      	pop	{r7}
 8005a4a:	4770      	bx	lr
 8005a4c:	20000068 	.word	0x20000068
 8005a50:	10624dd3 	.word	0x10624dd3

08005a54 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b086      	sub	sp, #24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	613b      	str	r3, [r7, #16]
 8005a60:	2300      	movs	r3, #0
 8005a62:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d07d      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005a70:	2300      	movs	r3, #0
 8005a72:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a74:	4b4f      	ldr	r3, [pc, #316]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a76:	69db      	ldr	r3, [r3, #28]
 8005a78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d10d      	bne.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a80:	4b4c      	ldr	r3, [pc, #304]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a82:	69db      	ldr	r3, [r3, #28]
 8005a84:	4a4b      	ldr	r2, [pc, #300]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a8a:	61d3      	str	r3, [r2, #28]
 8005a8c:	4b49      	ldr	r3, [pc, #292]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a8e:	69db      	ldr	r3, [r3, #28]
 8005a90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a94:	60bb      	str	r3, [r7, #8]
 8005a96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a9c:	4b46      	ldr	r3, [pc, #280]	@ (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d118      	bne.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005aa8:	4b43      	ldr	r3, [pc, #268]	@ (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a42      	ldr	r2, [pc, #264]	@ (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005aae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ab2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ab4:	f7fd ff08 	bl	80038c8 <HAL_GetTick>
 8005ab8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005aba:	e008      	b.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005abc:	f7fd ff04 	bl	80038c8 <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	2b64      	cmp	r3, #100	@ 0x64
 8005ac8:	d901      	bls.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e06d      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ace:	4b3a      	ldr	r3, [pc, #232]	@ (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d0f0      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ada:	4b36      	ldr	r3, [pc, #216]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005adc:	6a1b      	ldr	r3, [r3, #32]
 8005ade:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ae2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d02e      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d027      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005af8:	4b2e      	ldr	r3, [pc, #184]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005afa:	6a1b      	ldr	r3, [r3, #32]
 8005afc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b00:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b02:	4b2e      	ldr	r3, [pc, #184]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005b04:	2201      	movs	r2, #1
 8005b06:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b08:	4b2c      	ldr	r3, [pc, #176]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005b0e:	4a29      	ldr	r2, [pc, #164]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d014      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b1e:	f7fd fed3 	bl	80038c8 <HAL_GetTick>
 8005b22:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b24:	e00a      	b.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b26:	f7fd fecf 	bl	80038c8 <HAL_GetTick>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d901      	bls.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e036      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b3c:	4b1d      	ldr	r3, [pc, #116]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b3e:	6a1b      	ldr	r3, [r3, #32]
 8005b40:	f003 0302 	and.w	r3, r3, #2
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d0ee      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b48:	4b1a      	ldr	r3, [pc, #104]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b4a:	6a1b      	ldr	r3, [r3, #32]
 8005b4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	4917      	ldr	r1, [pc, #92]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b56:	4313      	orrs	r3, r2
 8005b58:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005b5a:	7dfb      	ldrb	r3, [r7, #23]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d105      	bne.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b60:	4b14      	ldr	r3, [pc, #80]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b62:	69db      	ldr	r3, [r3, #28]
 8005b64:	4a13      	ldr	r2, [pc, #76]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b6a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0302 	and.w	r3, r3, #2
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d008      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b78:	4b0e      	ldr	r3, [pc, #56]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	490b      	ldr	r1, [pc, #44]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b86:	4313      	orrs	r3, r2
 8005b88:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 0310 	and.w	r3, r3, #16
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d008      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b96:	4b07      	ldr	r3, [pc, #28]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	4904      	ldr	r1, [pc, #16]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3718      	adds	r7, #24
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	40021000 	.word	0x40021000
 8005bb8:	40007000 	.word	0x40007000
 8005bbc:	42420440 	.word	0x42420440

08005bc0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b088      	sub	sp, #32
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	617b      	str	r3, [r7, #20]
 8005bcc:	2300      	movs	r3, #0
 8005bce:	61fb      	str	r3, [r7, #28]
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	60fb      	str	r3, [r7, #12]
 8005bd8:	2300      	movs	r3, #0
 8005bda:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2b10      	cmp	r3, #16
 8005be0:	d00a      	beq.n	8005bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2b10      	cmp	r3, #16
 8005be6:	f200 808a 	bhi.w	8005cfe <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d045      	beq.n	8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d075      	beq.n	8005ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005bf6:	e082      	b.n	8005cfe <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8005bf8:	4b46      	ldr	r3, [pc, #280]	@ (8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005bfe:	4b45      	ldr	r3, [pc, #276]	@ (8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d07b      	beq.n	8005d02 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	0c9b      	lsrs	r3, r3, #18
 8005c0e:	f003 030f 	and.w	r3, r3, #15
 8005c12:	4a41      	ldr	r2, [pc, #260]	@ (8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8005c14:	5cd3      	ldrb	r3, [r2, r3]
 8005c16:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d015      	beq.n	8005c4e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005c22:	4b3c      	ldr	r3, [pc, #240]	@ (8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	0c5b      	lsrs	r3, r3, #17
 8005c28:	f003 0301 	and.w	r3, r3, #1
 8005c2c:	4a3b      	ldr	r2, [pc, #236]	@ (8005d1c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8005c2e:	5cd3      	ldrb	r3, [r2, r3]
 8005c30:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00d      	beq.n	8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005c3c:	4a38      	ldr	r2, [pc, #224]	@ (8005d20 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	fb02 f303 	mul.w	r3, r2, r3
 8005c4a:	61fb      	str	r3, [r7, #28]
 8005c4c:	e004      	b.n	8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	4a34      	ldr	r2, [pc, #208]	@ (8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005c52:	fb02 f303 	mul.w	r3, r2, r3
 8005c56:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005c58:	4b2e      	ldr	r3, [pc, #184]	@ (8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c64:	d102      	bne.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	61bb      	str	r3, [r7, #24]
      break;
 8005c6a:	e04a      	b.n	8005d02 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	005b      	lsls	r3, r3, #1
 8005c70:	4a2d      	ldr	r2, [pc, #180]	@ (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005c72:	fba2 2303 	umull	r2, r3, r2, r3
 8005c76:	085b      	lsrs	r3, r3, #1
 8005c78:	61bb      	str	r3, [r7, #24]
      break;
 8005c7a:	e042      	b.n	8005d02 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8005c7c:	4b25      	ldr	r3, [pc, #148]	@ (8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005c7e:	6a1b      	ldr	r3, [r3, #32]
 8005c80:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c8c:	d108      	bne.n	8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f003 0302 	and.w	r3, r3, #2
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d003      	beq.n	8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8005c98:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c9c:	61bb      	str	r3, [r7, #24]
 8005c9e:	e01f      	b.n	8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ca6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005caa:	d109      	bne.n	8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005cac:	4b19      	ldr	r3, [pc, #100]	@ (8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cb0:	f003 0302 	and.w	r3, r3, #2
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d003      	beq.n	8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8005cb8:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8005cbc:	61bb      	str	r3, [r7, #24]
 8005cbe:	e00f      	b.n	8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005cca:	d11c      	bne.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005ccc:	4b11      	ldr	r3, [pc, #68]	@ (8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d016      	beq.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8005cd8:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8005cdc:	61bb      	str	r3, [r7, #24]
      break;
 8005cde:	e012      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005ce0:	e011      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005ce2:	f7ff fe85 	bl	80059f0 <HAL_RCC_GetPCLK2Freq>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	0b9b      	lsrs	r3, r3, #14
 8005cee:	f003 0303 	and.w	r3, r3, #3
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	005b      	lsls	r3, r3, #1
 8005cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cfa:	61bb      	str	r3, [r7, #24]
      break;
 8005cfc:	e004      	b.n	8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005cfe:	bf00      	nop
 8005d00:	e002      	b.n	8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005d02:	bf00      	nop
 8005d04:	e000      	b.n	8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005d06:	bf00      	nop
    }
  }
  return (frequency);
 8005d08:	69bb      	ldr	r3, [r7, #24]
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3720      	adds	r7, #32
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	40021000 	.word	0x40021000
 8005d18:	08007ef4 	.word	0x08007ef4
 8005d1c:	08007f04 	.word	0x08007f04
 8005d20:	007a1200 	.word	0x007a1200
 8005d24:	003d0900 	.word	0x003d0900
 8005d28:	aaaaaaab 	.word	0xaaaaaaab

08005d2c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8005d34:	2300      	movs	r3, #0
 8005d36:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d101      	bne.n	8005d42 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e07a      	b.n	8005e38 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	7c5b      	ldrb	r3, [r3, #17]
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d105      	bne.n	8005d58 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f7fd fb22 	bl	800339c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2202      	movs	r2, #2
 8005d5c:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 f9cf 	bl	8006102 <HAL_RTC_WaitForSynchro>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d004      	beq.n	8005d74 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2204      	movs	r2, #4
 8005d6e:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e061      	b.n	8005e38 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 fa88 	bl	800628a <RTC_EnterInitMode>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d004      	beq.n	8005d8a <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2204      	movs	r2, #4
 8005d84:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e056      	b.n	8005e38 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	685a      	ldr	r2, [r3, #4]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f022 0207 	bic.w	r2, r2, #7
 8005d98:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d005      	beq.n	8005dae <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8005da2:	4b27      	ldr	r3, [pc, #156]	@ (8005e40 <HAL_RTC_Init+0x114>)
 8005da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005da6:	4a26      	ldr	r2, [pc, #152]	@ (8005e40 <HAL_RTC_Init+0x114>)
 8005da8:	f023 0301 	bic.w	r3, r3, #1
 8005dac:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8005dae:	4b24      	ldr	r3, [pc, #144]	@ (8005e40 <HAL_RTC_Init+0x114>)
 8005db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005db2:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	4921      	ldr	r1, [pc, #132]	@ (8005e40 <HAL_RTC_Init+0x114>)
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc8:	d003      	beq.n	8005dd2 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	60fb      	str	r3, [r7, #12]
 8005dd0:	e00e      	b.n	8005df0 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8005dd2:	2001      	movs	r0, #1
 8005dd4:	f7ff fef4 	bl	8005bc0 <HAL_RCCEx_GetPeriphCLKFreq>
 8005dd8:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d104      	bne.n	8005dea <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2204      	movs	r2, #4
 8005de4:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e026      	b.n	8005e38 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	3b01      	subs	r3, #1
 8005dee:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	0c1a      	lsrs	r2, r3, #16
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f002 020f 	and.w	r2, r2, #15
 8005dfc:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	b292      	uxth	r2, r2
 8005e06:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f000 fa66 	bl	80062da <RTC_ExitInitMode>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d004      	beq.n	8005e1e <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2204      	movs	r2, #4
 8005e18:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e00c      	b.n	8005e38 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8005e36:	2300      	movs	r3, #0
  }
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3710      	adds	r7, #16
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	40006c00 	.word	0x40006c00

08005e44 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b088      	sub	sp, #32
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8005e50:	2300      	movs	r3, #0
 8005e52:	61bb      	str	r3, [r7, #24]
 8005e54:	2300      	movs	r3, #0
 8005e56:	61fb      	str	r3, [r7, #28]
 8005e58:	2300      	movs	r3, #0
 8005e5a:	617b      	str	r3, [r7, #20]
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d002      	beq.n	8005e6c <HAL_RTC_GetTime+0x28>
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d101      	bne.n	8005e70 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e0b5      	b.n	8005fdc <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	f003 0304 	and.w	r3, r3, #4
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d001      	beq.n	8005e82 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e0ac      	b.n	8005fdc <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8005e82:	68f8      	ldr	r0, [r7, #12]
 8005e84:	f000 f96a 	bl	800615c <RTC_ReadTimeCounter>
 8005e88:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	4a55      	ldr	r2, [pc, #340]	@ (8005fe4 <HAL_RTC_GetTime+0x1a0>)
 8005e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e92:	0adb      	lsrs	r3, r3, #11
 8005e94:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8005e96:	69ba      	ldr	r2, [r7, #24]
 8005e98:	4b52      	ldr	r3, [pc, #328]	@ (8005fe4 <HAL_RTC_GetTime+0x1a0>)
 8005e9a:	fba3 1302 	umull	r1, r3, r3, r2
 8005e9e:	0adb      	lsrs	r3, r3, #11
 8005ea0:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8005ea4:	fb01 f303 	mul.w	r3, r1, r3
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	4a4f      	ldr	r2, [pc, #316]	@ (8005fe8 <HAL_RTC_GetTime+0x1a4>)
 8005eac:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb0:	095b      	lsrs	r3, r3, #5
 8005eb2:	b2da      	uxtb	r2, r3
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	4a4a      	ldr	r2, [pc, #296]	@ (8005fe4 <HAL_RTC_GetTime+0x1a0>)
 8005ebc:	fba2 1203 	umull	r1, r2, r2, r3
 8005ec0:	0ad2      	lsrs	r2, r2, #11
 8005ec2:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8005ec6:	fb01 f202 	mul.w	r2, r1, r2
 8005eca:	1a9a      	subs	r2, r3, r2
 8005ecc:	4b46      	ldr	r3, [pc, #280]	@ (8005fe8 <HAL_RTC_GetTime+0x1a4>)
 8005ece:	fba3 1302 	umull	r1, r3, r3, r2
 8005ed2:	0959      	lsrs	r1, r3, #5
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	011b      	lsls	r3, r3, #4
 8005ed8:	1a5b      	subs	r3, r3, r1
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	1ad1      	subs	r1, r2, r3
 8005ede:	b2ca      	uxtb	r2, r1
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	2b17      	cmp	r3, #23
 8005ee8:	d955      	bls.n	8005f96 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	4a3f      	ldr	r2, [pc, #252]	@ (8005fec <HAL_RTC_GetTime+0x1a8>)
 8005eee:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef2:	091b      	lsrs	r3, r3, #4
 8005ef4:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8005ef6:	6939      	ldr	r1, [r7, #16]
 8005ef8:	4b3c      	ldr	r3, [pc, #240]	@ (8005fec <HAL_RTC_GetTime+0x1a8>)
 8005efa:	fba3 2301 	umull	r2, r3, r3, r1
 8005efe:	091a      	lsrs	r2, r3, #4
 8005f00:	4613      	mov	r3, r2
 8005f02:	005b      	lsls	r3, r3, #1
 8005f04:	4413      	add	r3, r2
 8005f06:	00db      	lsls	r3, r3, #3
 8005f08:	1aca      	subs	r2, r1, r3
 8005f0a:	b2d2      	uxtb	r2, r2
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005f10:	68f8      	ldr	r0, [r7, #12]
 8005f12:	f000 f97a 	bl	800620a <RTC_ReadAlarmCounter>
 8005f16:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f1e:	d008      	beq.n	8005f32 <HAL_RTC_GetTime+0xee>
 8005f20:	69fa      	ldr	r2, [r7, #28]
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d904      	bls.n	8005f32 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8005f28:	69fa      	ldr	r2, [r7, #28]
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	61fb      	str	r3, [r7, #28]
 8005f30:	e002      	b.n	8005f38 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8005f32:	f04f 33ff 	mov.w	r3, #4294967295
 8005f36:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	4a2d      	ldr	r2, [pc, #180]	@ (8005ff0 <HAL_RTC_GetTime+0x1ac>)
 8005f3c:	fb02 f303 	mul.w	r3, r2, r3
 8005f40:	69ba      	ldr	r2, [r7, #24]
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005f46:	69b9      	ldr	r1, [r7, #24]
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	f000 f937 	bl	80061bc <RTC_WriteTimeCounter>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d001      	beq.n	8005f58 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e041      	b.n	8005fdc <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f5e:	d00c      	beq.n	8005f7a <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8005f60:	69fa      	ldr	r2, [r7, #28]
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	4413      	add	r3, r2
 8005f66:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005f68:	69f9      	ldr	r1, [r7, #28]
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	f000 f966 	bl	800623c <RTC_WriteAlarmCounter>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00a      	beq.n	8005f8c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e030      	b.n	8005fdc <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005f7a:	69f9      	ldr	r1, [r7, #28]
 8005f7c:	68f8      	ldr	r0, [r7, #12]
 8005f7e:	f000 f95d 	bl	800623c <RTC_WriteAlarmCounter>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d001      	beq.n	8005f8c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e027      	b.n	8005fdc <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8005f8c:	6979      	ldr	r1, [r7, #20]
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f000 f9e8 	bl	8006364 <RTC_DateUpdate>
 8005f94:	e003      	b.n	8005f9e <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	b2da      	uxtb	r2, r3
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d01a      	beq.n	8005fda <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f000 f9be 	bl	800632a <RTC_ByteToBcd2>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	785b      	ldrb	r3, [r3, #1]
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f000 f9b5 	bl	800632a <RTC_ByteToBcd2>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	789b      	ldrb	r3, [r3, #2]
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f000 f9ac 	bl	800632a <RTC_ByteToBcd2>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3720      	adds	r7, #32
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	91a2b3c5 	.word	0x91a2b3c5
 8005fe8:	88888889 	.word	0x88888889
 8005fec:	aaaaaaab 	.word	0xaaaaaaab
 8005ff0:	00015180 	.word	0x00015180

08005ff4 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b086      	sub	sp, #24
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8006000:	f107 0314 	add.w	r3, r7, #20
 8006004:	2100      	movs	r1, #0
 8006006:	460a      	mov	r2, r1
 8006008:	801a      	strh	r2, [r3, #0]
 800600a:	460a      	mov	r2, r1
 800600c:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d002      	beq.n	800601a <HAL_RTC_GetDate+0x26>
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d101      	bne.n	800601e <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e03a      	b.n	8006094 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 800601e:	f107 0314 	add.w	r3, r7, #20
 8006022:	2200      	movs	r2, #0
 8006024:	4619      	mov	r1, r3
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	f7ff ff0c 	bl	8005e44 <HAL_RTC_GetTime>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d001      	beq.n	8006036 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e02e      	b.n	8006094 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	7b1a      	ldrb	r2, [r3, #12]
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	7bda      	ldrb	r2, [r3, #15]
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	7b5a      	ldrb	r2, [r3, #13]
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	7b9a      	ldrb	r2, [r3, #14]
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d01a      	beq.n	8006092 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	78db      	ldrb	r3, [r3, #3]
 8006060:	4618      	mov	r0, r3
 8006062:	f000 f962 	bl	800632a <RTC_ByteToBcd2>
 8006066:	4603      	mov	r3, r0
 8006068:	461a      	mov	r2, r3
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	785b      	ldrb	r3, [r3, #1]
 8006072:	4618      	mov	r0, r3
 8006074:	f000 f959 	bl	800632a <RTC_ByteToBcd2>
 8006078:	4603      	mov	r3, r0
 800607a:	461a      	mov	r2, r3
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	789b      	ldrb	r3, [r3, #2]
 8006084:	4618      	mov	r0, r3
 8006086:	f000 f950 	bl	800632a <RTC_ByteToBcd2>
 800608a:	4603      	mov	r3, r0
 800608c:	461a      	mov	r2, r3
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3718      	adds	r7, #24
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f003 0302 	and.w	r3, r3, #2
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d011      	beq.n	80060d6 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	f003 0302 	and.w	r3, r3, #2
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00a      	beq.n	80060d6 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 f815 	bl	80060f0 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	685a      	ldr	r2, [r3, #4]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f022 0202 	bic.w	r2, r2, #2
 80060d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80060d6:	4b05      	ldr	r3, [pc, #20]	@ (80060ec <HAL_RTC_AlarmIRQHandler+0x50>)
 80060d8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80060dc:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2201      	movs	r2, #1
 80060e2:	745a      	strb	r2, [r3, #17]
}
 80060e4:	bf00      	nop
 80060e6:	3708      	adds	r7, #8
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	40010400 	.word	0x40010400

080060f0 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80060f8:	bf00      	nop
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bc80      	pop	{r7}
 8006100:	4770      	bx	lr

08006102 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006102:	b580      	push	{r7, lr}
 8006104:	b084      	sub	sp, #16
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800610a:	2300      	movs	r3, #0
 800610c:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d101      	bne.n	8006118 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	e01d      	b.n	8006154 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	685a      	ldr	r2, [r3, #4]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f022 0208 	bic.w	r2, r2, #8
 8006126:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8006128:	f7fd fbce 	bl	80038c8 <HAL_GetTick>
 800612c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800612e:	e009      	b.n	8006144 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006130:	f7fd fbca 	bl	80038c8 <HAL_GetTick>
 8006134:	4602      	mov	r2, r0
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800613e:	d901      	bls.n	8006144 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8006140:	2303      	movs	r3, #3
 8006142:	e007      	b.n	8006154 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	f003 0308 	and.w	r3, r3, #8
 800614e:	2b00      	cmp	r3, #0
 8006150:	d0ee      	beq.n	8006130 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	3710      	adds	r7, #16
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800615c:	b480      	push	{r7}
 800615e:	b087      	sub	sp, #28
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8006164:	2300      	movs	r3, #0
 8006166:	827b      	strh	r3, [r7, #18]
 8006168:	2300      	movs	r3, #0
 800616a:	823b      	strh	r3, [r7, #16]
 800616c:	2300      	movs	r3, #0
 800616e:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8006170:	2300      	movs	r3, #0
 8006172:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	699b      	ldr	r3, [r3, #24]
 800617a:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800618c:	8a7a      	ldrh	r2, [r7, #18]
 800618e:	8a3b      	ldrh	r3, [r7, #16]
 8006190:	429a      	cmp	r2, r3
 8006192:	d008      	beq.n	80061a6 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8006194:	8a3b      	ldrh	r3, [r7, #16]
 8006196:	041a      	lsls	r2, r3, #16
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	69db      	ldr	r3, [r3, #28]
 800619e:	b29b      	uxth	r3, r3
 80061a0:	4313      	orrs	r3, r2
 80061a2:	617b      	str	r3, [r7, #20]
 80061a4:	e004      	b.n	80061b0 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80061a6:	8a7b      	ldrh	r3, [r7, #18]
 80061a8:	041a      	lsls	r2, r3, #16
 80061aa:	89fb      	ldrh	r3, [r7, #14]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80061b0:	697b      	ldr	r3, [r7, #20]
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	371c      	adds	r7, #28
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bc80      	pop	{r7}
 80061ba:	4770      	bx	lr

080061bc <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061c6:	2300      	movs	r3, #0
 80061c8:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 f85d 	bl	800628a <RTC_EnterInitMode>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d002      	beq.n	80061dc <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	73fb      	strb	r3, [r7, #15]
 80061da:	e011      	b.n	8006200 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	683a      	ldr	r2, [r7, #0]
 80061e2:	0c12      	lsrs	r2, r2, #16
 80061e4:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	683a      	ldr	r2, [r7, #0]
 80061ec:	b292      	uxth	r2, r2
 80061ee:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 f872 	bl	80062da <RTC_ExitInitMode>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d001      	beq.n	8006200 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006200:	7bfb      	ldrb	r3, [r7, #15]
}
 8006202:	4618      	mov	r0, r3
 8006204:	3710      	adds	r7, #16
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 800620a:	b480      	push	{r7}
 800620c:	b085      	sub	sp, #20
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8006212:	2300      	movs	r3, #0
 8006214:	81fb      	strh	r3, [r7, #14]
 8006216:	2300      	movs	r3, #0
 8006218:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	6a1b      	ldr	r3, [r3, #32]
 8006220:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006228:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 800622a:	89fb      	ldrh	r3, [r7, #14]
 800622c:	041a      	lsls	r2, r3, #16
 800622e:	89bb      	ldrh	r3, [r7, #12]
 8006230:	4313      	orrs	r3, r2
}
 8006232:	4618      	mov	r0, r3
 8006234:	3714      	adds	r7, #20
 8006236:	46bd      	mov	sp, r7
 8006238:	bc80      	pop	{r7}
 800623a:	4770      	bx	lr

0800623c <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006246:	2300      	movs	r3, #0
 8006248:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 f81d 	bl	800628a <RTC_EnterInitMode>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d002      	beq.n	800625c <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	73fb      	strb	r3, [r7, #15]
 800625a:	e011      	b.n	8006280 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	683a      	ldr	r2, [r7, #0]
 8006262:	0c12      	lsrs	r2, r2, #16
 8006264:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	683a      	ldr	r2, [r7, #0]
 800626c:	b292      	uxth	r2, r2
 800626e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 f832 	bl	80062da <RTC_ExitInitMode>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d001      	beq.n	8006280 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006280:	7bfb      	ldrb	r3, [r7, #15]
}
 8006282:	4618      	mov	r0, r3
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b084      	sub	sp, #16
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006292:	2300      	movs	r3, #0
 8006294:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8006296:	f7fd fb17 	bl	80038c8 <HAL_GetTick>
 800629a:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800629c:	e009      	b.n	80062b2 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800629e:	f7fd fb13 	bl	80038c8 <HAL_GetTick>
 80062a2:	4602      	mov	r2, r0
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	1ad3      	subs	r3, r2, r3
 80062a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80062ac:	d901      	bls.n	80062b2 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80062ae:	2303      	movs	r3, #3
 80062b0:	e00f      	b.n	80062d2 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	f003 0320 	and.w	r3, r3, #32
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d0ee      	beq.n	800629e <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	685a      	ldr	r2, [r3, #4]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f042 0210 	orr.w	r2, r2, #16
 80062ce:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3710      	adds	r7, #16
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}

080062da <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80062da:	b580      	push	{r7, lr}
 80062dc:	b084      	sub	sp, #16
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80062e2:	2300      	movs	r3, #0
 80062e4:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	685a      	ldr	r2, [r3, #4]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f022 0210 	bic.w	r2, r2, #16
 80062f4:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80062f6:	f7fd fae7 	bl	80038c8 <HAL_GetTick>
 80062fa:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80062fc:	e009      	b.n	8006312 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80062fe:	f7fd fae3 	bl	80038c8 <HAL_GetTick>
 8006302:	4602      	mov	r2, r0
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800630c:	d901      	bls.n	8006312 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800630e:	2303      	movs	r3, #3
 8006310:	e007      	b.n	8006322 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	f003 0320 	and.w	r3, r3, #32
 800631c:	2b00      	cmp	r3, #0
 800631e:	d0ee      	beq.n	80062fe <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}

0800632a <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800632a:	b480      	push	{r7}
 800632c:	b085      	sub	sp, #20
 800632e:	af00      	add	r7, sp, #0
 8006330:	4603      	mov	r3, r0
 8006332:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006334:	2300      	movs	r3, #0
 8006336:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8006338:	e005      	b.n	8006346 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	3301      	adds	r3, #1
 800633e:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8006340:	79fb      	ldrb	r3, [r7, #7]
 8006342:	3b0a      	subs	r3, #10
 8006344:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8006346:	79fb      	ldrb	r3, [r7, #7]
 8006348:	2b09      	cmp	r3, #9
 800634a:	d8f6      	bhi.n	800633a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	b2db      	uxtb	r3, r3
 8006350:	011b      	lsls	r3, r3, #4
 8006352:	b2da      	uxtb	r2, r3
 8006354:	79fb      	ldrb	r3, [r7, #7]
 8006356:	4313      	orrs	r3, r2
 8006358:	b2db      	uxtb	r3, r3
}
 800635a:	4618      	mov	r0, r3
 800635c:	3714      	adds	r7, #20
 800635e:	46bd      	mov	sp, r7
 8006360:	bc80      	pop	{r7}
 8006362:	4770      	bx	lr

08006364 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b086      	sub	sp, #24
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 800636e:	2300      	movs	r3, #0
 8006370:	617b      	str	r3, [r7, #20]
 8006372:	2300      	movs	r3, #0
 8006374:	613b      	str	r3, [r7, #16]
 8006376:	2300      	movs	r3, #0
 8006378:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 800637a:	2300      	movs	r3, #0
 800637c:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	7bdb      	ldrb	r3, [r3, #15]
 8006382:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	7b5b      	ldrb	r3, [r3, #13]
 8006388:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	7b9b      	ldrb	r3, [r3, #14]
 800638e:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8006390:	2300      	movs	r3, #0
 8006392:	60bb      	str	r3, [r7, #8]
 8006394:	e06f      	b.n	8006476 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	2b01      	cmp	r3, #1
 800639a:	d011      	beq.n	80063c0 <RTC_DateUpdate+0x5c>
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	2b03      	cmp	r3, #3
 80063a0:	d00e      	beq.n	80063c0 <RTC_DateUpdate+0x5c>
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	2b05      	cmp	r3, #5
 80063a6:	d00b      	beq.n	80063c0 <RTC_DateUpdate+0x5c>
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	2b07      	cmp	r3, #7
 80063ac:	d008      	beq.n	80063c0 <RTC_DateUpdate+0x5c>
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	2b08      	cmp	r3, #8
 80063b2:	d005      	beq.n	80063c0 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	2b0a      	cmp	r3, #10
 80063b8:	d002      	beq.n	80063c0 <RTC_DateUpdate+0x5c>
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	2b0c      	cmp	r3, #12
 80063be:	d117      	bne.n	80063f0 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2b1e      	cmp	r3, #30
 80063c4:	d803      	bhi.n	80063ce <RTC_DateUpdate+0x6a>
      {
        day++;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	3301      	adds	r3, #1
 80063ca:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80063cc:	e050      	b.n	8006470 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	2b0c      	cmp	r3, #12
 80063d2:	d005      	beq.n	80063e0 <RTC_DateUpdate+0x7c>
        {
          month++;
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	3301      	adds	r3, #1
 80063d8:	613b      	str	r3, [r7, #16]
          day = 1U;
 80063da:	2301      	movs	r3, #1
 80063dc:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80063de:	e047      	b.n	8006470 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 80063e0:	2301      	movs	r3, #1
 80063e2:	613b      	str	r3, [r7, #16]
          day = 1U;
 80063e4:	2301      	movs	r3, #1
 80063e6:	60fb      	str	r3, [r7, #12]
          year++;
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	3301      	adds	r3, #1
 80063ec:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 80063ee:	e03f      	b.n	8006470 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	2b04      	cmp	r3, #4
 80063f4:	d008      	beq.n	8006408 <RTC_DateUpdate+0xa4>
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	2b06      	cmp	r3, #6
 80063fa:	d005      	beq.n	8006408 <RTC_DateUpdate+0xa4>
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	2b09      	cmp	r3, #9
 8006400:	d002      	beq.n	8006408 <RTC_DateUpdate+0xa4>
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	2b0b      	cmp	r3, #11
 8006406:	d10c      	bne.n	8006422 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2b1d      	cmp	r3, #29
 800640c:	d803      	bhi.n	8006416 <RTC_DateUpdate+0xb2>
      {
        day++;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	3301      	adds	r3, #1
 8006412:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8006414:	e02c      	b.n	8006470 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	3301      	adds	r3, #1
 800641a:	613b      	str	r3, [r7, #16]
        day = 1U;
 800641c:	2301      	movs	r3, #1
 800641e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8006420:	e026      	b.n	8006470 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	2b02      	cmp	r3, #2
 8006426:	d123      	bne.n	8006470 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2b1b      	cmp	r3, #27
 800642c:	d803      	bhi.n	8006436 <RTC_DateUpdate+0xd2>
      {
        day++;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	3301      	adds	r3, #1
 8006432:	60fb      	str	r3, [r7, #12]
 8006434:	e01c      	b.n	8006470 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2b1c      	cmp	r3, #28
 800643a:	d111      	bne.n	8006460 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	b29b      	uxth	r3, r3
 8006440:	4618      	mov	r0, r3
 8006442:	f000 f839 	bl	80064b8 <RTC_IsLeapYear>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d003      	beq.n	8006454 <RTC_DateUpdate+0xf0>
        {
          day++;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	3301      	adds	r3, #1
 8006450:	60fb      	str	r3, [r7, #12]
 8006452:	e00d      	b.n	8006470 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	3301      	adds	r3, #1
 8006458:	613b      	str	r3, [r7, #16]
          day = 1U;
 800645a:	2301      	movs	r3, #1
 800645c:	60fb      	str	r3, [r7, #12]
 800645e:	e007      	b.n	8006470 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2b1d      	cmp	r3, #29
 8006464:	d104      	bne.n	8006470 <RTC_DateUpdate+0x10c>
      {
        month++;
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	3301      	adds	r3, #1
 800646a:	613b      	str	r3, [r7, #16]
        day = 1U;
 800646c:	2301      	movs	r3, #1
 800646e:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	3301      	adds	r3, #1
 8006474:	60bb      	str	r3, [r7, #8]
 8006476:	68ba      	ldr	r2, [r7, #8]
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	429a      	cmp	r2, r3
 800647c:	d38b      	bcc.n	8006396 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	b2da      	uxtb	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	b2da      	uxtb	r2, r3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	b2da      	uxtb	r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	b2db      	uxtb	r3, r3
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	b2d2      	uxtb	r2, r2
 800649e:	4619      	mov	r1, r3
 80064a0:	6978      	ldr	r0, [r7, #20]
 80064a2:	f000 f83b 	bl	800651c <RTC_WeekDayNum>
 80064a6:	4603      	mov	r3, r0
 80064a8:	461a      	mov	r2, r3
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	731a      	strb	r2, [r3, #12]
}
 80064ae:	bf00      	nop
 80064b0:	3718      	adds	r7, #24
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
	...

080064b8 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	4603      	mov	r3, r0
 80064c0:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 80064c2:	88fb      	ldrh	r3, [r7, #6]
 80064c4:	f003 0303 	and.w	r3, r3, #3
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d001      	beq.n	80064d2 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 80064ce:	2300      	movs	r3, #0
 80064d0:	e01d      	b.n	800650e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 80064d2:	88fb      	ldrh	r3, [r7, #6]
 80064d4:	4a10      	ldr	r2, [pc, #64]	@ (8006518 <RTC_IsLeapYear+0x60>)
 80064d6:	fba2 1203 	umull	r1, r2, r2, r3
 80064da:	0952      	lsrs	r2, r2, #5
 80064dc:	2164      	movs	r1, #100	@ 0x64
 80064de:	fb01 f202 	mul.w	r2, r1, r2
 80064e2:	1a9b      	subs	r3, r3, r2
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d001      	beq.n	80064ee <RTC_IsLeapYear+0x36>
  {
    return 1U;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e00f      	b.n	800650e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 80064ee:	88fb      	ldrh	r3, [r7, #6]
 80064f0:	4a09      	ldr	r2, [pc, #36]	@ (8006518 <RTC_IsLeapYear+0x60>)
 80064f2:	fba2 1203 	umull	r1, r2, r2, r3
 80064f6:	09d2      	lsrs	r2, r2, #7
 80064f8:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80064fc:	fb01 f202 	mul.w	r2, r1, r2
 8006500:	1a9b      	subs	r3, r3, r2
 8006502:	b29b      	uxth	r3, r3
 8006504:	2b00      	cmp	r3, #0
 8006506:	d101      	bne.n	800650c <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8006508:	2301      	movs	r3, #1
 800650a:	e000      	b.n	800650e <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 800650c:	2300      	movs	r3, #0
  }
}
 800650e:	4618      	mov	r0, r3
 8006510:	370c      	adds	r7, #12
 8006512:	46bd      	mov	sp, r7
 8006514:	bc80      	pop	{r7}
 8006516:	4770      	bx	lr
 8006518:	51eb851f 	.word	0x51eb851f

0800651c <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 800651c:	b480      	push	{r7}
 800651e:	b085      	sub	sp, #20
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	460b      	mov	r3, r1
 8006526:	70fb      	strb	r3, [r7, #3]
 8006528:	4613      	mov	r3, r2
 800652a:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 800652c:	2300      	movs	r3, #0
 800652e:	60bb      	str	r3, [r7, #8]
 8006530:	2300      	movs	r3, #0
 8006532:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800653a:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 800653c:	78fb      	ldrb	r3, [r7, #3]
 800653e:	2b02      	cmp	r3, #2
 8006540:	d82d      	bhi.n	800659e <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8006542:	78fa      	ldrb	r2, [r7, #3]
 8006544:	4613      	mov	r3, r2
 8006546:	005b      	lsls	r3, r3, #1
 8006548:	4413      	add	r3, r2
 800654a:	00db      	lsls	r3, r3, #3
 800654c:	1a9b      	subs	r3, r3, r2
 800654e:	4a2c      	ldr	r2, [pc, #176]	@ (8006600 <RTC_WeekDayNum+0xe4>)
 8006550:	fba2 2303 	umull	r2, r3, r2, r3
 8006554:	085a      	lsrs	r2, r3, #1
 8006556:	78bb      	ldrb	r3, [r7, #2]
 8006558:	441a      	add	r2, r3
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	441a      	add	r2, r3
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	3b01      	subs	r3, #1
 8006562:	089b      	lsrs	r3, r3, #2
 8006564:	441a      	add	r2, r3
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	3b01      	subs	r3, #1
 800656a:	4926      	ldr	r1, [pc, #152]	@ (8006604 <RTC_WeekDayNum+0xe8>)
 800656c:	fba1 1303 	umull	r1, r3, r1, r3
 8006570:	095b      	lsrs	r3, r3, #5
 8006572:	1ad2      	subs	r2, r2, r3
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	3b01      	subs	r3, #1
 8006578:	4922      	ldr	r1, [pc, #136]	@ (8006604 <RTC_WeekDayNum+0xe8>)
 800657a:	fba1 1303 	umull	r1, r3, r1, r3
 800657e:	09db      	lsrs	r3, r3, #7
 8006580:	4413      	add	r3, r2
 8006582:	1d1a      	adds	r2, r3, #4
 8006584:	4b20      	ldr	r3, [pc, #128]	@ (8006608 <RTC_WeekDayNum+0xec>)
 8006586:	fba3 1302 	umull	r1, r3, r3, r2
 800658a:	1ad1      	subs	r1, r2, r3
 800658c:	0849      	lsrs	r1, r1, #1
 800658e:	440b      	add	r3, r1
 8006590:	0899      	lsrs	r1, r3, #2
 8006592:	460b      	mov	r3, r1
 8006594:	00db      	lsls	r3, r3, #3
 8006596:	1a5b      	subs	r3, r3, r1
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	60fb      	str	r3, [r7, #12]
 800659c:	e029      	b.n	80065f2 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800659e:	78fa      	ldrb	r2, [r7, #3]
 80065a0:	4613      	mov	r3, r2
 80065a2:	005b      	lsls	r3, r3, #1
 80065a4:	4413      	add	r3, r2
 80065a6:	00db      	lsls	r3, r3, #3
 80065a8:	1a9b      	subs	r3, r3, r2
 80065aa:	4a15      	ldr	r2, [pc, #84]	@ (8006600 <RTC_WeekDayNum+0xe4>)
 80065ac:	fba2 2303 	umull	r2, r3, r2, r3
 80065b0:	085a      	lsrs	r2, r3, #1
 80065b2:	78bb      	ldrb	r3, [r7, #2]
 80065b4:	441a      	add	r2, r3
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	441a      	add	r2, r3
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	089b      	lsrs	r3, r3, #2
 80065be:	441a      	add	r2, r3
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	4910      	ldr	r1, [pc, #64]	@ (8006604 <RTC_WeekDayNum+0xe8>)
 80065c4:	fba1 1303 	umull	r1, r3, r1, r3
 80065c8:	095b      	lsrs	r3, r3, #5
 80065ca:	1ad2      	subs	r2, r2, r3
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	490d      	ldr	r1, [pc, #52]	@ (8006604 <RTC_WeekDayNum+0xe8>)
 80065d0:	fba1 1303 	umull	r1, r3, r1, r3
 80065d4:	09db      	lsrs	r3, r3, #7
 80065d6:	4413      	add	r3, r2
 80065d8:	1c9a      	adds	r2, r3, #2
 80065da:	4b0b      	ldr	r3, [pc, #44]	@ (8006608 <RTC_WeekDayNum+0xec>)
 80065dc:	fba3 1302 	umull	r1, r3, r3, r2
 80065e0:	1ad1      	subs	r1, r2, r3
 80065e2:	0849      	lsrs	r1, r1, #1
 80065e4:	440b      	add	r3, r1
 80065e6:	0899      	lsrs	r1, r3, #2
 80065e8:	460b      	mov	r3, r1
 80065ea:	00db      	lsls	r3, r3, #3
 80065ec:	1a5b      	subs	r3, r3, r1
 80065ee:	1ad3      	subs	r3, r2, r3
 80065f0:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	b2db      	uxtb	r3, r3
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3714      	adds	r7, #20
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bc80      	pop	{r7}
 80065fe:	4770      	bx	lr
 8006600:	38e38e39 	.word	0x38e38e39
 8006604:	51eb851f 	.word	0x51eb851f
 8006608:	24924925 	.word	0x24924925

0800660c <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800660c:	b480      	push	{r7}
 800660e:	b085      	sub	sp, #20
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 8006616:	2300      	movs	r3, #0
 8006618:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 800661a:	2300      	movs	r3, #0
 800661c:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
 800661e:	4b08      	ldr	r3, [pc, #32]	@ (8006640 <HAL_RTCEx_BKUPRead+0x34>)
 8006620:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	4413      	add	r3, r2
 800662a:	60fb      	str	r3, [r7, #12]

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	b29b      	uxth	r3, r3
 8006632:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 8006634:	68bb      	ldr	r3, [r7, #8]
}
 8006636:	4618      	mov	r0, r3
 8006638:	3714      	adds	r7, #20
 800663a:	46bd      	mov	sp, r7
 800663c:	bc80      	pop	{r7}
 800663e:	4770      	bx	lr
 8006640:	40006c00 	.word	0x40006c00

08006644 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d101      	bne.n	8006656 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e076      	b.n	8006744 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800665a:	2b00      	cmp	r3, #0
 800665c:	d108      	bne.n	8006670 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006666:	d009      	beq.n	800667c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	61da      	str	r2, [r3, #28]
 800666e:	e005      	b.n	800667c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006688:	b2db      	uxtb	r3, r3
 800668a:	2b00      	cmp	r3, #0
 800668c:	d106      	bne.n	800669c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f7fc feac 	bl	80033f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2202      	movs	r2, #2
 80066a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80066c4:	431a      	orrs	r2, r3
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80066ce:	431a      	orrs	r2, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	691b      	ldr	r3, [r3, #16]
 80066d4:	f003 0302 	and.w	r3, r3, #2
 80066d8:	431a      	orrs	r2, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	695b      	ldr	r3, [r3, #20]
 80066de:	f003 0301 	and.w	r3, r3, #1
 80066e2:	431a      	orrs	r2, r3
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	699b      	ldr	r3, [r3, #24]
 80066e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066ec:	431a      	orrs	r2, r3
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	69db      	ldr	r3, [r3, #28]
 80066f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80066f6:	431a      	orrs	r2, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6a1b      	ldr	r3, [r3, #32]
 80066fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006700:	ea42 0103 	orr.w	r1, r2, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006708:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	430a      	orrs	r2, r1
 8006712:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	699b      	ldr	r3, [r3, #24]
 8006718:	0c1a      	lsrs	r2, r3, #16
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f002 0204 	and.w	r2, r2, #4
 8006722:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	69da      	ldr	r2, [r3, #28]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006732:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2201      	movs	r2, #1
 800673e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	3708      	adds	r7, #8
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b088      	sub	sp, #32
 8006750:	af00      	add	r7, sp, #0
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	603b      	str	r3, [r7, #0]
 8006758:	4613      	mov	r3, r2
 800675a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800675c:	f7fd f8b4 	bl	80038c8 <HAL_GetTick>
 8006760:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006762:	88fb      	ldrh	r3, [r7, #6]
 8006764:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800676c:	b2db      	uxtb	r3, r3
 800676e:	2b01      	cmp	r3, #1
 8006770:	d001      	beq.n	8006776 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006772:	2302      	movs	r3, #2
 8006774:	e12a      	b.n	80069cc <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d002      	beq.n	8006782 <HAL_SPI_Transmit+0x36>
 800677c:	88fb      	ldrh	r3, [r7, #6]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d101      	bne.n	8006786 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e122      	b.n	80069cc <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800678c:	2b01      	cmp	r3, #1
 800678e:	d101      	bne.n	8006794 <HAL_SPI_Transmit+0x48>
 8006790:	2302      	movs	r3, #2
 8006792:	e11b      	b.n	80069cc <HAL_SPI_Transmit+0x280>
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2203      	movs	r2, #3
 80067a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2200      	movs	r2, #0
 80067a8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	68ba      	ldr	r2, [r7, #8]
 80067ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	88fa      	ldrh	r2, [r7, #6]
 80067b4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	88fa      	ldrh	r2, [r7, #6]
 80067ba:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2200      	movs	r2, #0
 80067c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2200      	movs	r2, #0
 80067c6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2200      	movs	r2, #0
 80067cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2200      	movs	r2, #0
 80067d2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2200      	movs	r2, #0
 80067d8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067e2:	d10f      	bne.n	8006804 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80067f2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006802:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800680e:	2b40      	cmp	r3, #64	@ 0x40
 8006810:	d007      	beq.n	8006822 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006820:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800682a:	d152      	bne.n	80068d2 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d002      	beq.n	800683a <HAL_SPI_Transmit+0xee>
 8006834:	8b7b      	ldrh	r3, [r7, #26]
 8006836:	2b01      	cmp	r3, #1
 8006838:	d145      	bne.n	80068c6 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800683e:	881a      	ldrh	r2, [r3, #0]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800684a:	1c9a      	adds	r2, r3, #2
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006854:	b29b      	uxth	r3, r3
 8006856:	3b01      	subs	r3, #1
 8006858:	b29a      	uxth	r2, r3
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800685e:	e032      	b.n	80068c6 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	f003 0302 	and.w	r3, r3, #2
 800686a:	2b02      	cmp	r3, #2
 800686c:	d112      	bne.n	8006894 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006872:	881a      	ldrh	r2, [r3, #0]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800687e:	1c9a      	adds	r2, r3, #2
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006888:	b29b      	uxth	r3, r3
 800688a:	3b01      	subs	r3, #1
 800688c:	b29a      	uxth	r2, r3
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006892:	e018      	b.n	80068c6 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006894:	f7fd f818 	bl	80038c8 <HAL_GetTick>
 8006898:	4602      	mov	r2, r0
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	683a      	ldr	r2, [r7, #0]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d803      	bhi.n	80068ac <HAL_SPI_Transmit+0x160>
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068aa:	d102      	bne.n	80068b2 <HAL_SPI_Transmit+0x166>
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d109      	bne.n	80068c6 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80068c2:	2303      	movs	r3, #3
 80068c4:	e082      	b.n	80069cc <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d1c7      	bne.n	8006860 <HAL_SPI_Transmit+0x114>
 80068d0:	e053      	b.n	800697a <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d002      	beq.n	80068e0 <HAL_SPI_Transmit+0x194>
 80068da:	8b7b      	ldrh	r3, [r7, #26]
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d147      	bne.n	8006970 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	330c      	adds	r3, #12
 80068ea:	7812      	ldrb	r2, [r2, #0]
 80068ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068f2:	1c5a      	adds	r2, r3, #1
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	3b01      	subs	r3, #1
 8006900:	b29a      	uxth	r2, r3
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006906:	e033      	b.n	8006970 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	f003 0302 	and.w	r3, r3, #2
 8006912:	2b02      	cmp	r3, #2
 8006914:	d113      	bne.n	800693e <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	330c      	adds	r3, #12
 8006920:	7812      	ldrb	r2, [r2, #0]
 8006922:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006928:	1c5a      	adds	r2, r3, #1
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006932:	b29b      	uxth	r3, r3
 8006934:	3b01      	subs	r3, #1
 8006936:	b29a      	uxth	r2, r3
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800693c:	e018      	b.n	8006970 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800693e:	f7fc ffc3 	bl	80038c8 <HAL_GetTick>
 8006942:	4602      	mov	r2, r0
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	683a      	ldr	r2, [r7, #0]
 800694a:	429a      	cmp	r2, r3
 800694c:	d803      	bhi.n	8006956 <HAL_SPI_Transmit+0x20a>
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006954:	d102      	bne.n	800695c <HAL_SPI_Transmit+0x210>
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d109      	bne.n	8006970 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2200      	movs	r2, #0
 8006968:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800696c:	2303      	movs	r3, #3
 800696e:	e02d      	b.n	80069cc <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006974:	b29b      	uxth	r3, r3
 8006976:	2b00      	cmp	r3, #0
 8006978:	d1c6      	bne.n	8006908 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800697a:	69fa      	ldr	r2, [r7, #28]
 800697c:	6839      	ldr	r1, [r7, #0]
 800697e:	68f8      	ldr	r0, [r7, #12]
 8006980:	f000 f8b0 	bl	8006ae4 <SPI_EndRxTxTransaction>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d002      	beq.n	8006990 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2220      	movs	r2, #32
 800698e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d10a      	bne.n	80069ae <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006998:	2300      	movs	r3, #0
 800699a:	617b      	str	r3, [r7, #20]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	617b      	str	r3, [r7, #20]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	617b      	str	r3, [r7, #20]
 80069ac:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2201      	movs	r2, #1
 80069b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d001      	beq.n	80069ca <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	e000      	b.n	80069cc <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80069ca:	2300      	movs	r3, #0
  }
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3720      	adds	r7, #32
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b088      	sub	sp, #32
 80069d8:	af00      	add	r7, sp, #0
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	60b9      	str	r1, [r7, #8]
 80069de:	603b      	str	r3, [r7, #0]
 80069e0:	4613      	mov	r3, r2
 80069e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80069e4:	f7fc ff70 	bl	80038c8 <HAL_GetTick>
 80069e8:	4602      	mov	r2, r0
 80069ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ec:	1a9b      	subs	r3, r3, r2
 80069ee:	683a      	ldr	r2, [r7, #0]
 80069f0:	4413      	add	r3, r2
 80069f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80069f4:	f7fc ff68 	bl	80038c8 <HAL_GetTick>
 80069f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80069fa:	4b39      	ldr	r3, [pc, #228]	@ (8006ae0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	015b      	lsls	r3, r3, #5
 8006a00:	0d1b      	lsrs	r3, r3, #20
 8006a02:	69fa      	ldr	r2, [r7, #28]
 8006a04:	fb02 f303 	mul.w	r3, r2, r3
 8006a08:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a0a:	e054      	b.n	8006ab6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a12:	d050      	beq.n	8006ab6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a14:	f7fc ff58 	bl	80038c8 <HAL_GetTick>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	69fa      	ldr	r2, [r7, #28]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d902      	bls.n	8006a2a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006a24:	69fb      	ldr	r3, [r7, #28]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d13d      	bne.n	8006aa6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	685a      	ldr	r2, [r3, #4]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006a38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a42:	d111      	bne.n	8006a68 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a4c:	d004      	beq.n	8006a58 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a56:	d107      	bne.n	8006a68 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a70:	d10f      	bne.n	8006a92 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006a80:	601a      	str	r2, [r3, #0]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006a90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2201      	movs	r2, #1
 8006a96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	e017      	b.n	8006ad6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d101      	bne.n	8006ab0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006aac:	2300      	movs	r3, #0
 8006aae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	3b01      	subs	r3, #1
 8006ab4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	689a      	ldr	r2, [r3, #8]
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	4013      	ands	r3, r2
 8006ac0:	68ba      	ldr	r2, [r7, #8]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	bf0c      	ite	eq
 8006ac6:	2301      	moveq	r3, #1
 8006ac8:	2300      	movne	r3, #0
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	461a      	mov	r2, r3
 8006ace:	79fb      	ldrb	r3, [r7, #7]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d19b      	bne.n	8006a0c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3720      	adds	r7, #32
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	20000068 	.word	0x20000068

08006ae4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b086      	sub	sp, #24
 8006ae8:	af02      	add	r7, sp, #8
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	9300      	str	r3, [sp, #0]
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	2201      	movs	r2, #1
 8006af8:	2102      	movs	r1, #2
 8006afa:	68f8      	ldr	r0, [r7, #12]
 8006afc:	f7ff ff6a 	bl	80069d4 <SPI_WaitFlagStateUntilTimeout>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d007      	beq.n	8006b16 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b0a:	f043 0220 	orr.w	r2, r3, #32
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006b12:	2303      	movs	r3, #3
 8006b14:	e013      	b.n	8006b3e <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	9300      	str	r3, [sp, #0]
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	2180      	movs	r1, #128	@ 0x80
 8006b20:	68f8      	ldr	r0, [r7, #12]
 8006b22:	f7ff ff57 	bl	80069d4 <SPI_WaitFlagStateUntilTimeout>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d007      	beq.n	8006b3c <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b30:	f043 0220 	orr.w	r2, r3, #32
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	e000      	b.n	8006b3e <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3710      	adds	r7, #16
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b082      	sub	sp, #8
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d101      	bne.n	8006b58 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	e042      	b.n	8006bde <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d106      	bne.n	8006b72 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f7fc fc9b 	bl	80034a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2224      	movs	r2, #36	@ 0x24
 8006b76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	68da      	ldr	r2, [r3, #12]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006b88:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 f9d0 	bl	8006f30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	691a      	ldr	r2, [r3, #16]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006b9e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	695a      	ldr	r2, [r3, #20]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006bae:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	68da      	ldr	r2, [r3, #12]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006bbe:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2220      	movs	r2, #32
 8006bca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2220      	movs	r2, #32
 8006bd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3708      	adds	r7, #8
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}

08006be6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b08a      	sub	sp, #40	@ 0x28
 8006bea:	af02      	add	r7, sp, #8
 8006bec:	60f8      	str	r0, [r7, #12]
 8006bee:	60b9      	str	r1, [r7, #8]
 8006bf0:	603b      	str	r3, [r7, #0]
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	2b20      	cmp	r3, #32
 8006c04:	d175      	bne.n	8006cf2 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d002      	beq.n	8006c12 <HAL_UART_Transmit+0x2c>
 8006c0c:	88fb      	ldrh	r3, [r7, #6]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d101      	bne.n	8006c16 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e06e      	b.n	8006cf4 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2221      	movs	r2, #33	@ 0x21
 8006c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c24:	f7fc fe50 	bl	80038c8 <HAL_GetTick>
 8006c28:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	88fa      	ldrh	r2, [r7, #6]
 8006c2e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	88fa      	ldrh	r2, [r7, #6]
 8006c34:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c3e:	d108      	bne.n	8006c52 <HAL_UART_Transmit+0x6c>
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	691b      	ldr	r3, [r3, #16]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d104      	bne.n	8006c52 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	61bb      	str	r3, [r7, #24]
 8006c50:	e003      	b.n	8006c5a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c56:	2300      	movs	r3, #0
 8006c58:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c5a:	e02e      	b.n	8006cba <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	9300      	str	r3, [sp, #0]
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	2200      	movs	r2, #0
 8006c64:	2180      	movs	r1, #128	@ 0x80
 8006c66:	68f8      	ldr	r0, [r7, #12]
 8006c68:	f000 f86d 	bl	8006d46 <UART_WaitOnFlagUntilTimeout>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d005      	beq.n	8006c7e <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2220      	movs	r2, #32
 8006c76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	e03a      	b.n	8006cf4 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d10b      	bne.n	8006c9c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	881b      	ldrh	r3, [r3, #0]
 8006c88:	461a      	mov	r2, r3
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c92:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	3302      	adds	r3, #2
 8006c98:	61bb      	str	r3, [r7, #24]
 8006c9a:	e007      	b.n	8006cac <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	781a      	ldrb	r2, [r3, #0]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	3301      	adds	r3, #1
 8006caa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	b29a      	uxth	r2, r3
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d1cb      	bne.n	8006c5c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	9300      	str	r3, [sp, #0]
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	2140      	movs	r1, #64	@ 0x40
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	f000 f839 	bl	8006d46 <UART_WaitOnFlagUntilTimeout>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d005      	beq.n	8006ce6 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2220      	movs	r2, #32
 8006cde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006ce2:	2303      	movs	r3, #3
 8006ce4:	e006      	b.n	8006cf4 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2220      	movs	r2, #32
 8006cea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	e000      	b.n	8006cf4 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006cf2:	2302      	movs	r3, #2
  }
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3720      	adds	r7, #32
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	4613      	mov	r3, r2
 8006d08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	2b20      	cmp	r3, #32
 8006d14:	d112      	bne.n	8006d3c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d002      	beq.n	8006d22 <HAL_UART_Receive_IT+0x26>
 8006d1c:	88fb      	ldrh	r3, [r7, #6]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d101      	bne.n	8006d26 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	e00b      	b.n	8006d3e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006d2c:	88fb      	ldrh	r3, [r7, #6]
 8006d2e:	461a      	mov	r2, r3
 8006d30:	68b9      	ldr	r1, [r7, #8]
 8006d32:	68f8      	ldr	r0, [r7, #12]
 8006d34:	f000 f860 	bl	8006df8 <UART_Start_Receive_IT>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	e000      	b.n	8006d3e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006d3c:	2302      	movs	r3, #2
  }
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3710      	adds	r7, #16
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}

08006d46 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b086      	sub	sp, #24
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	60f8      	str	r0, [r7, #12]
 8006d4e:	60b9      	str	r1, [r7, #8]
 8006d50:	603b      	str	r3, [r7, #0]
 8006d52:	4613      	mov	r3, r2
 8006d54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d56:	e03b      	b.n	8006dd0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d58:	6a3b      	ldr	r3, [r7, #32]
 8006d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d5e:	d037      	beq.n	8006dd0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d60:	f7fc fdb2 	bl	80038c8 <HAL_GetTick>
 8006d64:	4602      	mov	r2, r0
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	1ad3      	subs	r3, r2, r3
 8006d6a:	6a3a      	ldr	r2, [r7, #32]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d302      	bcc.n	8006d76 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d70:	6a3b      	ldr	r3, [r7, #32]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d101      	bne.n	8006d7a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006d76:	2303      	movs	r3, #3
 8006d78:	e03a      	b.n	8006df0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	f003 0304 	and.w	r3, r3, #4
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d023      	beq.n	8006dd0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	2b80      	cmp	r3, #128	@ 0x80
 8006d8c:	d020      	beq.n	8006dd0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	2b40      	cmp	r3, #64	@ 0x40
 8006d92:	d01d      	beq.n	8006dd0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f003 0308 	and.w	r3, r3, #8
 8006d9e:	2b08      	cmp	r3, #8
 8006da0:	d116      	bne.n	8006dd0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006da2:	2300      	movs	r3, #0
 8006da4:	617b      	str	r3, [r7, #20]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	617b      	str	r3, [r7, #20]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	617b      	str	r3, [r7, #20]
 8006db6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006db8:	68f8      	ldr	r0, [r7, #12]
 8006dba:	f000 f856 	bl	8006e6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2208      	movs	r2, #8
 8006dc2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e00f      	b.n	8006df0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	4013      	ands	r3, r2
 8006dda:	68ba      	ldr	r2, [r7, #8]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	bf0c      	ite	eq
 8006de0:	2301      	moveq	r3, #1
 8006de2:	2300      	movne	r3, #0
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	461a      	mov	r2, r3
 8006de8:	79fb      	ldrb	r3, [r7, #7]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d0b4      	beq.n	8006d58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3718      	adds	r7, #24
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b085      	sub	sp, #20
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	4613      	mov	r3, r2
 8006e04:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	68ba      	ldr	r2, [r7, #8]
 8006e0a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	88fa      	ldrh	r2, [r7, #6]
 8006e10:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	88fa      	ldrh	r2, [r7, #6]
 8006e16:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2222      	movs	r2, #34	@ 0x22
 8006e22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d007      	beq.n	8006e3e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	68da      	ldr	r2, [r3, #12]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e3c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	695a      	ldr	r2, [r3, #20]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f042 0201 	orr.w	r2, r2, #1
 8006e4c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	68da      	ldr	r2, [r3, #12]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f042 0220 	orr.w	r2, r2, #32
 8006e5c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3714      	adds	r7, #20
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bc80      	pop	{r7}
 8006e68:	4770      	bx	lr

08006e6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e6a:	b480      	push	{r7}
 8006e6c:	b095      	sub	sp, #84	@ 0x54
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	330c      	adds	r3, #12
 8006e78:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e7c:	e853 3f00 	ldrex	r3, [r3]
 8006e80:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	330c      	adds	r3, #12
 8006e90:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e92:	643a      	str	r2, [r7, #64]	@ 0x40
 8006e94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e96:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e98:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e9a:	e841 2300 	strex	r3, r2, [r1]
 8006e9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1e5      	bne.n	8006e72 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	3314      	adds	r3, #20
 8006eac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eae:	6a3b      	ldr	r3, [r7, #32]
 8006eb0:	e853 3f00 	ldrex	r3, [r3]
 8006eb4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	f023 0301 	bic.w	r3, r3, #1
 8006ebc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	3314      	adds	r3, #20
 8006ec4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ec6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ecc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ece:	e841 2300 	strex	r3, r2, [r1]
 8006ed2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d1e5      	bne.n	8006ea6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d119      	bne.n	8006f16 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	330c      	adds	r3, #12
 8006ee8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	e853 3f00 	ldrex	r3, [r3]
 8006ef0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	f023 0310 	bic.w	r3, r3, #16
 8006ef8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	330c      	adds	r3, #12
 8006f00:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f02:	61ba      	str	r2, [r7, #24]
 8006f04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f06:	6979      	ldr	r1, [r7, #20]
 8006f08:	69ba      	ldr	r2, [r7, #24]
 8006f0a:	e841 2300 	strex	r3, r2, [r1]
 8006f0e:	613b      	str	r3, [r7, #16]
   return(result);
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1e5      	bne.n	8006ee2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2220      	movs	r2, #32
 8006f1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006f24:	bf00      	nop
 8006f26:	3754      	adds	r7, #84	@ 0x54
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bc80      	pop	{r7}
 8006f2c:	4770      	bx	lr
	...

08006f30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	68da      	ldr	r2, [r3, #12]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	430a      	orrs	r2, r1
 8006f4c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	689a      	ldr	r2, [r3, #8]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	431a      	orrs	r2, r3
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	695b      	ldr	r3, [r3, #20]
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006f6a:	f023 030c 	bic.w	r3, r3, #12
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	6812      	ldr	r2, [r2, #0]
 8006f72:	68b9      	ldr	r1, [r7, #8]
 8006f74:	430b      	orrs	r3, r1
 8006f76:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	695b      	ldr	r3, [r3, #20]
 8006f7e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	699a      	ldr	r2, [r3, #24]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	430a      	orrs	r2, r1
 8006f8c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a2c      	ldr	r2, [pc, #176]	@ (8007044 <UART_SetConfig+0x114>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d103      	bne.n	8006fa0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006f98:	f7fe fd2a 	bl	80059f0 <HAL_RCC_GetPCLK2Freq>
 8006f9c:	60f8      	str	r0, [r7, #12]
 8006f9e:	e002      	b.n	8006fa6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006fa0:	f7fe fd12 	bl	80059c8 <HAL_RCC_GetPCLK1Freq>
 8006fa4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006fa6:	68fa      	ldr	r2, [r7, #12]
 8006fa8:	4613      	mov	r3, r2
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	4413      	add	r3, r2
 8006fae:	009a      	lsls	r2, r3, #2
 8006fb0:	441a      	add	r2, r3
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fbc:	4a22      	ldr	r2, [pc, #136]	@ (8007048 <UART_SetConfig+0x118>)
 8006fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8006fc2:	095b      	lsrs	r3, r3, #5
 8006fc4:	0119      	lsls	r1, r3, #4
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	4613      	mov	r3, r2
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	4413      	add	r3, r2
 8006fce:	009a      	lsls	r2, r3, #2
 8006fd0:	441a      	add	r2, r3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8006fdc:	4b1a      	ldr	r3, [pc, #104]	@ (8007048 <UART_SetConfig+0x118>)
 8006fde:	fba3 0302 	umull	r0, r3, r3, r2
 8006fe2:	095b      	lsrs	r3, r3, #5
 8006fe4:	2064      	movs	r0, #100	@ 0x64
 8006fe6:	fb00 f303 	mul.w	r3, r0, r3
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	011b      	lsls	r3, r3, #4
 8006fee:	3332      	adds	r3, #50	@ 0x32
 8006ff0:	4a15      	ldr	r2, [pc, #84]	@ (8007048 <UART_SetConfig+0x118>)
 8006ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ff6:	095b      	lsrs	r3, r3, #5
 8006ff8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006ffc:	4419      	add	r1, r3
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	4613      	mov	r3, r2
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	4413      	add	r3, r2
 8007006:	009a      	lsls	r2, r3, #2
 8007008:	441a      	add	r2, r3
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	fbb2 f2f3 	udiv	r2, r2, r3
 8007014:	4b0c      	ldr	r3, [pc, #48]	@ (8007048 <UART_SetConfig+0x118>)
 8007016:	fba3 0302 	umull	r0, r3, r3, r2
 800701a:	095b      	lsrs	r3, r3, #5
 800701c:	2064      	movs	r0, #100	@ 0x64
 800701e:	fb00 f303 	mul.w	r3, r0, r3
 8007022:	1ad3      	subs	r3, r2, r3
 8007024:	011b      	lsls	r3, r3, #4
 8007026:	3332      	adds	r3, #50	@ 0x32
 8007028:	4a07      	ldr	r2, [pc, #28]	@ (8007048 <UART_SetConfig+0x118>)
 800702a:	fba2 2303 	umull	r2, r3, r2, r3
 800702e:	095b      	lsrs	r3, r3, #5
 8007030:	f003 020f 	and.w	r2, r3, #15
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	440a      	add	r2, r1
 800703a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800703c:	bf00      	nop
 800703e:	3710      	adds	r7, #16
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}
 8007044:	40013800 	.word	0x40013800
 8007048:	51eb851f 	.word	0x51eb851f

0800704c <sniprintf>:
 800704c:	b40c      	push	{r2, r3}
 800704e:	b530      	push	{r4, r5, lr}
 8007050:	4b18      	ldr	r3, [pc, #96]	@ (80070b4 <sniprintf+0x68>)
 8007052:	1e0c      	subs	r4, r1, #0
 8007054:	681d      	ldr	r5, [r3, #0]
 8007056:	b09d      	sub	sp, #116	@ 0x74
 8007058:	da08      	bge.n	800706c <sniprintf+0x20>
 800705a:	238b      	movs	r3, #139	@ 0x8b
 800705c:	f04f 30ff 	mov.w	r0, #4294967295
 8007060:	602b      	str	r3, [r5, #0]
 8007062:	b01d      	add	sp, #116	@ 0x74
 8007064:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007068:	b002      	add	sp, #8
 800706a:	4770      	bx	lr
 800706c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007070:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007074:	f04f 0300 	mov.w	r3, #0
 8007078:	931b      	str	r3, [sp, #108]	@ 0x6c
 800707a:	bf0c      	ite	eq
 800707c:	4623      	moveq	r3, r4
 800707e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007082:	9304      	str	r3, [sp, #16]
 8007084:	9307      	str	r3, [sp, #28]
 8007086:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800708a:	9002      	str	r0, [sp, #8]
 800708c:	9006      	str	r0, [sp, #24]
 800708e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007092:	4628      	mov	r0, r5
 8007094:	ab21      	add	r3, sp, #132	@ 0x84
 8007096:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007098:	a902      	add	r1, sp, #8
 800709a:	9301      	str	r3, [sp, #4]
 800709c:	f000 f9c8 	bl	8007430 <_svfiprintf_r>
 80070a0:	1c43      	adds	r3, r0, #1
 80070a2:	bfbc      	itt	lt
 80070a4:	238b      	movlt	r3, #139	@ 0x8b
 80070a6:	602b      	strlt	r3, [r5, #0]
 80070a8:	2c00      	cmp	r4, #0
 80070aa:	d0da      	beq.n	8007062 <sniprintf+0x16>
 80070ac:	2200      	movs	r2, #0
 80070ae:	9b02      	ldr	r3, [sp, #8]
 80070b0:	701a      	strb	r2, [r3, #0]
 80070b2:	e7d6      	b.n	8007062 <sniprintf+0x16>
 80070b4:	20000074 	.word	0x20000074

080070b8 <siprintf>:
 80070b8:	b40e      	push	{r1, r2, r3}
 80070ba:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80070be:	b510      	push	{r4, lr}
 80070c0:	2400      	movs	r4, #0
 80070c2:	b09d      	sub	sp, #116	@ 0x74
 80070c4:	ab1f      	add	r3, sp, #124	@ 0x7c
 80070c6:	9002      	str	r0, [sp, #8]
 80070c8:	9006      	str	r0, [sp, #24]
 80070ca:	9107      	str	r1, [sp, #28]
 80070cc:	9104      	str	r1, [sp, #16]
 80070ce:	4809      	ldr	r0, [pc, #36]	@ (80070f4 <siprintf+0x3c>)
 80070d0:	4909      	ldr	r1, [pc, #36]	@ (80070f8 <siprintf+0x40>)
 80070d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80070d6:	9105      	str	r1, [sp, #20]
 80070d8:	6800      	ldr	r0, [r0, #0]
 80070da:	a902      	add	r1, sp, #8
 80070dc:	9301      	str	r3, [sp, #4]
 80070de:	941b      	str	r4, [sp, #108]	@ 0x6c
 80070e0:	f000 f9a6 	bl	8007430 <_svfiprintf_r>
 80070e4:	9b02      	ldr	r3, [sp, #8]
 80070e6:	701c      	strb	r4, [r3, #0]
 80070e8:	b01d      	add	sp, #116	@ 0x74
 80070ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070ee:	b003      	add	sp, #12
 80070f0:	4770      	bx	lr
 80070f2:	bf00      	nop
 80070f4:	20000074 	.word	0x20000074
 80070f8:	ffff0208 	.word	0xffff0208

080070fc <memset>:
 80070fc:	4603      	mov	r3, r0
 80070fe:	4402      	add	r2, r0
 8007100:	4293      	cmp	r3, r2
 8007102:	d100      	bne.n	8007106 <memset+0xa>
 8007104:	4770      	bx	lr
 8007106:	f803 1b01 	strb.w	r1, [r3], #1
 800710a:	e7f9      	b.n	8007100 <memset+0x4>

0800710c <strncpy>:
 800710c:	4603      	mov	r3, r0
 800710e:	b510      	push	{r4, lr}
 8007110:	3901      	subs	r1, #1
 8007112:	b132      	cbz	r2, 8007122 <strncpy+0x16>
 8007114:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007118:	3a01      	subs	r2, #1
 800711a:	f803 4b01 	strb.w	r4, [r3], #1
 800711e:	2c00      	cmp	r4, #0
 8007120:	d1f7      	bne.n	8007112 <strncpy+0x6>
 8007122:	2100      	movs	r1, #0
 8007124:	441a      	add	r2, r3
 8007126:	4293      	cmp	r3, r2
 8007128:	d100      	bne.n	800712c <strncpy+0x20>
 800712a:	bd10      	pop	{r4, pc}
 800712c:	f803 1b01 	strb.w	r1, [r3], #1
 8007130:	e7f9      	b.n	8007126 <strncpy+0x1a>
	...

08007134 <__errno>:
 8007134:	4b01      	ldr	r3, [pc, #4]	@ (800713c <__errno+0x8>)
 8007136:	6818      	ldr	r0, [r3, #0]
 8007138:	4770      	bx	lr
 800713a:	bf00      	nop
 800713c:	20000074 	.word	0x20000074

08007140 <__libc_init_array>:
 8007140:	b570      	push	{r4, r5, r6, lr}
 8007142:	2600      	movs	r6, #0
 8007144:	4d0c      	ldr	r5, [pc, #48]	@ (8007178 <__libc_init_array+0x38>)
 8007146:	4c0d      	ldr	r4, [pc, #52]	@ (800717c <__libc_init_array+0x3c>)
 8007148:	1b64      	subs	r4, r4, r5
 800714a:	10a4      	asrs	r4, r4, #2
 800714c:	42a6      	cmp	r6, r4
 800714e:	d109      	bne.n	8007164 <__libc_init_array+0x24>
 8007150:	f000 fc76 	bl	8007a40 <_init>
 8007154:	2600      	movs	r6, #0
 8007156:	4d0a      	ldr	r5, [pc, #40]	@ (8007180 <__libc_init_array+0x40>)
 8007158:	4c0a      	ldr	r4, [pc, #40]	@ (8007184 <__libc_init_array+0x44>)
 800715a:	1b64      	subs	r4, r4, r5
 800715c:	10a4      	asrs	r4, r4, #2
 800715e:	42a6      	cmp	r6, r4
 8007160:	d105      	bne.n	800716e <__libc_init_array+0x2e>
 8007162:	bd70      	pop	{r4, r5, r6, pc}
 8007164:	f855 3b04 	ldr.w	r3, [r5], #4
 8007168:	4798      	blx	r3
 800716a:	3601      	adds	r6, #1
 800716c:	e7ee      	b.n	800714c <__libc_init_array+0xc>
 800716e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007172:	4798      	blx	r3
 8007174:	3601      	adds	r6, #1
 8007176:	e7f2      	b.n	800715e <__libc_init_array+0x1e>
 8007178:	08007f44 	.word	0x08007f44
 800717c:	08007f44 	.word	0x08007f44
 8007180:	08007f44 	.word	0x08007f44
 8007184:	08007f48 	.word	0x08007f48

08007188 <__retarget_lock_acquire_recursive>:
 8007188:	4770      	bx	lr

0800718a <__retarget_lock_release_recursive>:
 800718a:	4770      	bx	lr

0800718c <_free_r>:
 800718c:	b538      	push	{r3, r4, r5, lr}
 800718e:	4605      	mov	r5, r0
 8007190:	2900      	cmp	r1, #0
 8007192:	d040      	beq.n	8007216 <_free_r+0x8a>
 8007194:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007198:	1f0c      	subs	r4, r1, #4
 800719a:	2b00      	cmp	r3, #0
 800719c:	bfb8      	it	lt
 800719e:	18e4      	addlt	r4, r4, r3
 80071a0:	f000 f8de 	bl	8007360 <__malloc_lock>
 80071a4:	4a1c      	ldr	r2, [pc, #112]	@ (8007218 <_free_r+0x8c>)
 80071a6:	6813      	ldr	r3, [r2, #0]
 80071a8:	b933      	cbnz	r3, 80071b8 <_free_r+0x2c>
 80071aa:	6063      	str	r3, [r4, #4]
 80071ac:	6014      	str	r4, [r2, #0]
 80071ae:	4628      	mov	r0, r5
 80071b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071b4:	f000 b8da 	b.w	800736c <__malloc_unlock>
 80071b8:	42a3      	cmp	r3, r4
 80071ba:	d908      	bls.n	80071ce <_free_r+0x42>
 80071bc:	6820      	ldr	r0, [r4, #0]
 80071be:	1821      	adds	r1, r4, r0
 80071c0:	428b      	cmp	r3, r1
 80071c2:	bf01      	itttt	eq
 80071c4:	6819      	ldreq	r1, [r3, #0]
 80071c6:	685b      	ldreq	r3, [r3, #4]
 80071c8:	1809      	addeq	r1, r1, r0
 80071ca:	6021      	streq	r1, [r4, #0]
 80071cc:	e7ed      	b.n	80071aa <_free_r+0x1e>
 80071ce:	461a      	mov	r2, r3
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	b10b      	cbz	r3, 80071d8 <_free_r+0x4c>
 80071d4:	42a3      	cmp	r3, r4
 80071d6:	d9fa      	bls.n	80071ce <_free_r+0x42>
 80071d8:	6811      	ldr	r1, [r2, #0]
 80071da:	1850      	adds	r0, r2, r1
 80071dc:	42a0      	cmp	r0, r4
 80071de:	d10b      	bne.n	80071f8 <_free_r+0x6c>
 80071e0:	6820      	ldr	r0, [r4, #0]
 80071e2:	4401      	add	r1, r0
 80071e4:	1850      	adds	r0, r2, r1
 80071e6:	4283      	cmp	r3, r0
 80071e8:	6011      	str	r1, [r2, #0]
 80071ea:	d1e0      	bne.n	80071ae <_free_r+0x22>
 80071ec:	6818      	ldr	r0, [r3, #0]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	4408      	add	r0, r1
 80071f2:	6010      	str	r0, [r2, #0]
 80071f4:	6053      	str	r3, [r2, #4]
 80071f6:	e7da      	b.n	80071ae <_free_r+0x22>
 80071f8:	d902      	bls.n	8007200 <_free_r+0x74>
 80071fa:	230c      	movs	r3, #12
 80071fc:	602b      	str	r3, [r5, #0]
 80071fe:	e7d6      	b.n	80071ae <_free_r+0x22>
 8007200:	6820      	ldr	r0, [r4, #0]
 8007202:	1821      	adds	r1, r4, r0
 8007204:	428b      	cmp	r3, r1
 8007206:	bf01      	itttt	eq
 8007208:	6819      	ldreq	r1, [r3, #0]
 800720a:	685b      	ldreq	r3, [r3, #4]
 800720c:	1809      	addeq	r1, r1, r0
 800720e:	6021      	streq	r1, [r4, #0]
 8007210:	6063      	str	r3, [r4, #4]
 8007212:	6054      	str	r4, [r2, #4]
 8007214:	e7cb      	b.n	80071ae <_free_r+0x22>
 8007216:	bd38      	pop	{r3, r4, r5, pc}
 8007218:	200005bc 	.word	0x200005bc

0800721c <sbrk_aligned>:
 800721c:	b570      	push	{r4, r5, r6, lr}
 800721e:	4e0f      	ldr	r6, [pc, #60]	@ (800725c <sbrk_aligned+0x40>)
 8007220:	460c      	mov	r4, r1
 8007222:	6831      	ldr	r1, [r6, #0]
 8007224:	4605      	mov	r5, r0
 8007226:	b911      	cbnz	r1, 800722e <sbrk_aligned+0x12>
 8007228:	f000 fba8 	bl	800797c <_sbrk_r>
 800722c:	6030      	str	r0, [r6, #0]
 800722e:	4621      	mov	r1, r4
 8007230:	4628      	mov	r0, r5
 8007232:	f000 fba3 	bl	800797c <_sbrk_r>
 8007236:	1c43      	adds	r3, r0, #1
 8007238:	d103      	bne.n	8007242 <sbrk_aligned+0x26>
 800723a:	f04f 34ff 	mov.w	r4, #4294967295
 800723e:	4620      	mov	r0, r4
 8007240:	bd70      	pop	{r4, r5, r6, pc}
 8007242:	1cc4      	adds	r4, r0, #3
 8007244:	f024 0403 	bic.w	r4, r4, #3
 8007248:	42a0      	cmp	r0, r4
 800724a:	d0f8      	beq.n	800723e <sbrk_aligned+0x22>
 800724c:	1a21      	subs	r1, r4, r0
 800724e:	4628      	mov	r0, r5
 8007250:	f000 fb94 	bl	800797c <_sbrk_r>
 8007254:	3001      	adds	r0, #1
 8007256:	d1f2      	bne.n	800723e <sbrk_aligned+0x22>
 8007258:	e7ef      	b.n	800723a <sbrk_aligned+0x1e>
 800725a:	bf00      	nop
 800725c:	200005b8 	.word	0x200005b8

08007260 <_malloc_r>:
 8007260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007264:	1ccd      	adds	r5, r1, #3
 8007266:	f025 0503 	bic.w	r5, r5, #3
 800726a:	3508      	adds	r5, #8
 800726c:	2d0c      	cmp	r5, #12
 800726e:	bf38      	it	cc
 8007270:	250c      	movcc	r5, #12
 8007272:	2d00      	cmp	r5, #0
 8007274:	4606      	mov	r6, r0
 8007276:	db01      	blt.n	800727c <_malloc_r+0x1c>
 8007278:	42a9      	cmp	r1, r5
 800727a:	d904      	bls.n	8007286 <_malloc_r+0x26>
 800727c:	230c      	movs	r3, #12
 800727e:	6033      	str	r3, [r6, #0]
 8007280:	2000      	movs	r0, #0
 8007282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007286:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800735c <_malloc_r+0xfc>
 800728a:	f000 f869 	bl	8007360 <__malloc_lock>
 800728e:	f8d8 3000 	ldr.w	r3, [r8]
 8007292:	461c      	mov	r4, r3
 8007294:	bb44      	cbnz	r4, 80072e8 <_malloc_r+0x88>
 8007296:	4629      	mov	r1, r5
 8007298:	4630      	mov	r0, r6
 800729a:	f7ff ffbf 	bl	800721c <sbrk_aligned>
 800729e:	1c43      	adds	r3, r0, #1
 80072a0:	4604      	mov	r4, r0
 80072a2:	d158      	bne.n	8007356 <_malloc_r+0xf6>
 80072a4:	f8d8 4000 	ldr.w	r4, [r8]
 80072a8:	4627      	mov	r7, r4
 80072aa:	2f00      	cmp	r7, #0
 80072ac:	d143      	bne.n	8007336 <_malloc_r+0xd6>
 80072ae:	2c00      	cmp	r4, #0
 80072b0:	d04b      	beq.n	800734a <_malloc_r+0xea>
 80072b2:	6823      	ldr	r3, [r4, #0]
 80072b4:	4639      	mov	r1, r7
 80072b6:	4630      	mov	r0, r6
 80072b8:	eb04 0903 	add.w	r9, r4, r3
 80072bc:	f000 fb5e 	bl	800797c <_sbrk_r>
 80072c0:	4581      	cmp	r9, r0
 80072c2:	d142      	bne.n	800734a <_malloc_r+0xea>
 80072c4:	6821      	ldr	r1, [r4, #0]
 80072c6:	4630      	mov	r0, r6
 80072c8:	1a6d      	subs	r5, r5, r1
 80072ca:	4629      	mov	r1, r5
 80072cc:	f7ff ffa6 	bl	800721c <sbrk_aligned>
 80072d0:	3001      	adds	r0, #1
 80072d2:	d03a      	beq.n	800734a <_malloc_r+0xea>
 80072d4:	6823      	ldr	r3, [r4, #0]
 80072d6:	442b      	add	r3, r5
 80072d8:	6023      	str	r3, [r4, #0]
 80072da:	f8d8 3000 	ldr.w	r3, [r8]
 80072de:	685a      	ldr	r2, [r3, #4]
 80072e0:	bb62      	cbnz	r2, 800733c <_malloc_r+0xdc>
 80072e2:	f8c8 7000 	str.w	r7, [r8]
 80072e6:	e00f      	b.n	8007308 <_malloc_r+0xa8>
 80072e8:	6822      	ldr	r2, [r4, #0]
 80072ea:	1b52      	subs	r2, r2, r5
 80072ec:	d420      	bmi.n	8007330 <_malloc_r+0xd0>
 80072ee:	2a0b      	cmp	r2, #11
 80072f0:	d917      	bls.n	8007322 <_malloc_r+0xc2>
 80072f2:	1961      	adds	r1, r4, r5
 80072f4:	42a3      	cmp	r3, r4
 80072f6:	6025      	str	r5, [r4, #0]
 80072f8:	bf18      	it	ne
 80072fa:	6059      	strne	r1, [r3, #4]
 80072fc:	6863      	ldr	r3, [r4, #4]
 80072fe:	bf08      	it	eq
 8007300:	f8c8 1000 	streq.w	r1, [r8]
 8007304:	5162      	str	r2, [r4, r5]
 8007306:	604b      	str	r3, [r1, #4]
 8007308:	4630      	mov	r0, r6
 800730a:	f000 f82f 	bl	800736c <__malloc_unlock>
 800730e:	f104 000b 	add.w	r0, r4, #11
 8007312:	1d23      	adds	r3, r4, #4
 8007314:	f020 0007 	bic.w	r0, r0, #7
 8007318:	1ac2      	subs	r2, r0, r3
 800731a:	bf1c      	itt	ne
 800731c:	1a1b      	subne	r3, r3, r0
 800731e:	50a3      	strne	r3, [r4, r2]
 8007320:	e7af      	b.n	8007282 <_malloc_r+0x22>
 8007322:	6862      	ldr	r2, [r4, #4]
 8007324:	42a3      	cmp	r3, r4
 8007326:	bf0c      	ite	eq
 8007328:	f8c8 2000 	streq.w	r2, [r8]
 800732c:	605a      	strne	r2, [r3, #4]
 800732e:	e7eb      	b.n	8007308 <_malloc_r+0xa8>
 8007330:	4623      	mov	r3, r4
 8007332:	6864      	ldr	r4, [r4, #4]
 8007334:	e7ae      	b.n	8007294 <_malloc_r+0x34>
 8007336:	463c      	mov	r4, r7
 8007338:	687f      	ldr	r7, [r7, #4]
 800733a:	e7b6      	b.n	80072aa <_malloc_r+0x4a>
 800733c:	461a      	mov	r2, r3
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	42a3      	cmp	r3, r4
 8007342:	d1fb      	bne.n	800733c <_malloc_r+0xdc>
 8007344:	2300      	movs	r3, #0
 8007346:	6053      	str	r3, [r2, #4]
 8007348:	e7de      	b.n	8007308 <_malloc_r+0xa8>
 800734a:	230c      	movs	r3, #12
 800734c:	4630      	mov	r0, r6
 800734e:	6033      	str	r3, [r6, #0]
 8007350:	f000 f80c 	bl	800736c <__malloc_unlock>
 8007354:	e794      	b.n	8007280 <_malloc_r+0x20>
 8007356:	6005      	str	r5, [r0, #0]
 8007358:	e7d6      	b.n	8007308 <_malloc_r+0xa8>
 800735a:	bf00      	nop
 800735c:	200005bc 	.word	0x200005bc

08007360 <__malloc_lock>:
 8007360:	4801      	ldr	r0, [pc, #4]	@ (8007368 <__malloc_lock+0x8>)
 8007362:	f7ff bf11 	b.w	8007188 <__retarget_lock_acquire_recursive>
 8007366:	bf00      	nop
 8007368:	200005b4 	.word	0x200005b4

0800736c <__malloc_unlock>:
 800736c:	4801      	ldr	r0, [pc, #4]	@ (8007374 <__malloc_unlock+0x8>)
 800736e:	f7ff bf0c 	b.w	800718a <__retarget_lock_release_recursive>
 8007372:	bf00      	nop
 8007374:	200005b4 	.word	0x200005b4

08007378 <__ssputs_r>:
 8007378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800737c:	461f      	mov	r7, r3
 800737e:	688e      	ldr	r6, [r1, #8]
 8007380:	4682      	mov	sl, r0
 8007382:	42be      	cmp	r6, r7
 8007384:	460c      	mov	r4, r1
 8007386:	4690      	mov	r8, r2
 8007388:	680b      	ldr	r3, [r1, #0]
 800738a:	d82d      	bhi.n	80073e8 <__ssputs_r+0x70>
 800738c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007390:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007394:	d026      	beq.n	80073e4 <__ssputs_r+0x6c>
 8007396:	6965      	ldr	r5, [r4, #20]
 8007398:	6909      	ldr	r1, [r1, #16]
 800739a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800739e:	eba3 0901 	sub.w	r9, r3, r1
 80073a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80073a6:	1c7b      	adds	r3, r7, #1
 80073a8:	444b      	add	r3, r9
 80073aa:	106d      	asrs	r5, r5, #1
 80073ac:	429d      	cmp	r5, r3
 80073ae:	bf38      	it	cc
 80073b0:	461d      	movcc	r5, r3
 80073b2:	0553      	lsls	r3, r2, #21
 80073b4:	d527      	bpl.n	8007406 <__ssputs_r+0x8e>
 80073b6:	4629      	mov	r1, r5
 80073b8:	f7ff ff52 	bl	8007260 <_malloc_r>
 80073bc:	4606      	mov	r6, r0
 80073be:	b360      	cbz	r0, 800741a <__ssputs_r+0xa2>
 80073c0:	464a      	mov	r2, r9
 80073c2:	6921      	ldr	r1, [r4, #16]
 80073c4:	f000 faf8 	bl	80079b8 <memcpy>
 80073c8:	89a3      	ldrh	r3, [r4, #12]
 80073ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80073ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073d2:	81a3      	strh	r3, [r4, #12]
 80073d4:	6126      	str	r6, [r4, #16]
 80073d6:	444e      	add	r6, r9
 80073d8:	6026      	str	r6, [r4, #0]
 80073da:	463e      	mov	r6, r7
 80073dc:	6165      	str	r5, [r4, #20]
 80073de:	eba5 0509 	sub.w	r5, r5, r9
 80073e2:	60a5      	str	r5, [r4, #8]
 80073e4:	42be      	cmp	r6, r7
 80073e6:	d900      	bls.n	80073ea <__ssputs_r+0x72>
 80073e8:	463e      	mov	r6, r7
 80073ea:	4632      	mov	r2, r6
 80073ec:	4641      	mov	r1, r8
 80073ee:	6820      	ldr	r0, [r4, #0]
 80073f0:	f000 faaa 	bl	8007948 <memmove>
 80073f4:	2000      	movs	r0, #0
 80073f6:	68a3      	ldr	r3, [r4, #8]
 80073f8:	1b9b      	subs	r3, r3, r6
 80073fa:	60a3      	str	r3, [r4, #8]
 80073fc:	6823      	ldr	r3, [r4, #0]
 80073fe:	4433      	add	r3, r6
 8007400:	6023      	str	r3, [r4, #0]
 8007402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007406:	462a      	mov	r2, r5
 8007408:	f000 fae4 	bl	80079d4 <_realloc_r>
 800740c:	4606      	mov	r6, r0
 800740e:	2800      	cmp	r0, #0
 8007410:	d1e0      	bne.n	80073d4 <__ssputs_r+0x5c>
 8007412:	4650      	mov	r0, sl
 8007414:	6921      	ldr	r1, [r4, #16]
 8007416:	f7ff feb9 	bl	800718c <_free_r>
 800741a:	230c      	movs	r3, #12
 800741c:	f8ca 3000 	str.w	r3, [sl]
 8007420:	89a3      	ldrh	r3, [r4, #12]
 8007422:	f04f 30ff 	mov.w	r0, #4294967295
 8007426:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800742a:	81a3      	strh	r3, [r4, #12]
 800742c:	e7e9      	b.n	8007402 <__ssputs_r+0x8a>
	...

08007430 <_svfiprintf_r>:
 8007430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007434:	4698      	mov	r8, r3
 8007436:	898b      	ldrh	r3, [r1, #12]
 8007438:	4607      	mov	r7, r0
 800743a:	061b      	lsls	r3, r3, #24
 800743c:	460d      	mov	r5, r1
 800743e:	4614      	mov	r4, r2
 8007440:	b09d      	sub	sp, #116	@ 0x74
 8007442:	d510      	bpl.n	8007466 <_svfiprintf_r+0x36>
 8007444:	690b      	ldr	r3, [r1, #16]
 8007446:	b973      	cbnz	r3, 8007466 <_svfiprintf_r+0x36>
 8007448:	2140      	movs	r1, #64	@ 0x40
 800744a:	f7ff ff09 	bl	8007260 <_malloc_r>
 800744e:	6028      	str	r0, [r5, #0]
 8007450:	6128      	str	r0, [r5, #16]
 8007452:	b930      	cbnz	r0, 8007462 <_svfiprintf_r+0x32>
 8007454:	230c      	movs	r3, #12
 8007456:	603b      	str	r3, [r7, #0]
 8007458:	f04f 30ff 	mov.w	r0, #4294967295
 800745c:	b01d      	add	sp, #116	@ 0x74
 800745e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007462:	2340      	movs	r3, #64	@ 0x40
 8007464:	616b      	str	r3, [r5, #20]
 8007466:	2300      	movs	r3, #0
 8007468:	9309      	str	r3, [sp, #36]	@ 0x24
 800746a:	2320      	movs	r3, #32
 800746c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007470:	2330      	movs	r3, #48	@ 0x30
 8007472:	f04f 0901 	mov.w	r9, #1
 8007476:	f8cd 800c 	str.w	r8, [sp, #12]
 800747a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007614 <_svfiprintf_r+0x1e4>
 800747e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007482:	4623      	mov	r3, r4
 8007484:	469a      	mov	sl, r3
 8007486:	f813 2b01 	ldrb.w	r2, [r3], #1
 800748a:	b10a      	cbz	r2, 8007490 <_svfiprintf_r+0x60>
 800748c:	2a25      	cmp	r2, #37	@ 0x25
 800748e:	d1f9      	bne.n	8007484 <_svfiprintf_r+0x54>
 8007490:	ebba 0b04 	subs.w	fp, sl, r4
 8007494:	d00b      	beq.n	80074ae <_svfiprintf_r+0x7e>
 8007496:	465b      	mov	r3, fp
 8007498:	4622      	mov	r2, r4
 800749a:	4629      	mov	r1, r5
 800749c:	4638      	mov	r0, r7
 800749e:	f7ff ff6b 	bl	8007378 <__ssputs_r>
 80074a2:	3001      	adds	r0, #1
 80074a4:	f000 80a7 	beq.w	80075f6 <_svfiprintf_r+0x1c6>
 80074a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074aa:	445a      	add	r2, fp
 80074ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80074ae:	f89a 3000 	ldrb.w	r3, [sl]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	f000 809f 	beq.w	80075f6 <_svfiprintf_r+0x1c6>
 80074b8:	2300      	movs	r3, #0
 80074ba:	f04f 32ff 	mov.w	r2, #4294967295
 80074be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074c2:	f10a 0a01 	add.w	sl, sl, #1
 80074c6:	9304      	str	r3, [sp, #16]
 80074c8:	9307      	str	r3, [sp, #28]
 80074ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80074ce:	931a      	str	r3, [sp, #104]	@ 0x68
 80074d0:	4654      	mov	r4, sl
 80074d2:	2205      	movs	r2, #5
 80074d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074d8:	484e      	ldr	r0, [pc, #312]	@ (8007614 <_svfiprintf_r+0x1e4>)
 80074da:	f000 fa5f 	bl	800799c <memchr>
 80074de:	9a04      	ldr	r2, [sp, #16]
 80074e0:	b9d8      	cbnz	r0, 800751a <_svfiprintf_r+0xea>
 80074e2:	06d0      	lsls	r0, r2, #27
 80074e4:	bf44      	itt	mi
 80074e6:	2320      	movmi	r3, #32
 80074e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074ec:	0711      	lsls	r1, r2, #28
 80074ee:	bf44      	itt	mi
 80074f0:	232b      	movmi	r3, #43	@ 0x2b
 80074f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074f6:	f89a 3000 	ldrb.w	r3, [sl]
 80074fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80074fc:	d015      	beq.n	800752a <_svfiprintf_r+0xfa>
 80074fe:	4654      	mov	r4, sl
 8007500:	2000      	movs	r0, #0
 8007502:	f04f 0c0a 	mov.w	ip, #10
 8007506:	9a07      	ldr	r2, [sp, #28]
 8007508:	4621      	mov	r1, r4
 800750a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800750e:	3b30      	subs	r3, #48	@ 0x30
 8007510:	2b09      	cmp	r3, #9
 8007512:	d94b      	bls.n	80075ac <_svfiprintf_r+0x17c>
 8007514:	b1b0      	cbz	r0, 8007544 <_svfiprintf_r+0x114>
 8007516:	9207      	str	r2, [sp, #28]
 8007518:	e014      	b.n	8007544 <_svfiprintf_r+0x114>
 800751a:	eba0 0308 	sub.w	r3, r0, r8
 800751e:	fa09 f303 	lsl.w	r3, r9, r3
 8007522:	4313      	orrs	r3, r2
 8007524:	46a2      	mov	sl, r4
 8007526:	9304      	str	r3, [sp, #16]
 8007528:	e7d2      	b.n	80074d0 <_svfiprintf_r+0xa0>
 800752a:	9b03      	ldr	r3, [sp, #12]
 800752c:	1d19      	adds	r1, r3, #4
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	9103      	str	r1, [sp, #12]
 8007532:	2b00      	cmp	r3, #0
 8007534:	bfbb      	ittet	lt
 8007536:	425b      	neglt	r3, r3
 8007538:	f042 0202 	orrlt.w	r2, r2, #2
 800753c:	9307      	strge	r3, [sp, #28]
 800753e:	9307      	strlt	r3, [sp, #28]
 8007540:	bfb8      	it	lt
 8007542:	9204      	strlt	r2, [sp, #16]
 8007544:	7823      	ldrb	r3, [r4, #0]
 8007546:	2b2e      	cmp	r3, #46	@ 0x2e
 8007548:	d10a      	bne.n	8007560 <_svfiprintf_r+0x130>
 800754a:	7863      	ldrb	r3, [r4, #1]
 800754c:	2b2a      	cmp	r3, #42	@ 0x2a
 800754e:	d132      	bne.n	80075b6 <_svfiprintf_r+0x186>
 8007550:	9b03      	ldr	r3, [sp, #12]
 8007552:	3402      	adds	r4, #2
 8007554:	1d1a      	adds	r2, r3, #4
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	9203      	str	r2, [sp, #12]
 800755a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800755e:	9305      	str	r3, [sp, #20]
 8007560:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007618 <_svfiprintf_r+0x1e8>
 8007564:	2203      	movs	r2, #3
 8007566:	4650      	mov	r0, sl
 8007568:	7821      	ldrb	r1, [r4, #0]
 800756a:	f000 fa17 	bl	800799c <memchr>
 800756e:	b138      	cbz	r0, 8007580 <_svfiprintf_r+0x150>
 8007570:	2240      	movs	r2, #64	@ 0x40
 8007572:	9b04      	ldr	r3, [sp, #16]
 8007574:	eba0 000a 	sub.w	r0, r0, sl
 8007578:	4082      	lsls	r2, r0
 800757a:	4313      	orrs	r3, r2
 800757c:	3401      	adds	r4, #1
 800757e:	9304      	str	r3, [sp, #16]
 8007580:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007584:	2206      	movs	r2, #6
 8007586:	4825      	ldr	r0, [pc, #148]	@ (800761c <_svfiprintf_r+0x1ec>)
 8007588:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800758c:	f000 fa06 	bl	800799c <memchr>
 8007590:	2800      	cmp	r0, #0
 8007592:	d036      	beq.n	8007602 <_svfiprintf_r+0x1d2>
 8007594:	4b22      	ldr	r3, [pc, #136]	@ (8007620 <_svfiprintf_r+0x1f0>)
 8007596:	bb1b      	cbnz	r3, 80075e0 <_svfiprintf_r+0x1b0>
 8007598:	9b03      	ldr	r3, [sp, #12]
 800759a:	3307      	adds	r3, #7
 800759c:	f023 0307 	bic.w	r3, r3, #7
 80075a0:	3308      	adds	r3, #8
 80075a2:	9303      	str	r3, [sp, #12]
 80075a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075a6:	4433      	add	r3, r6
 80075a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80075aa:	e76a      	b.n	8007482 <_svfiprintf_r+0x52>
 80075ac:	460c      	mov	r4, r1
 80075ae:	2001      	movs	r0, #1
 80075b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80075b4:	e7a8      	b.n	8007508 <_svfiprintf_r+0xd8>
 80075b6:	2300      	movs	r3, #0
 80075b8:	f04f 0c0a 	mov.w	ip, #10
 80075bc:	4619      	mov	r1, r3
 80075be:	3401      	adds	r4, #1
 80075c0:	9305      	str	r3, [sp, #20]
 80075c2:	4620      	mov	r0, r4
 80075c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075c8:	3a30      	subs	r2, #48	@ 0x30
 80075ca:	2a09      	cmp	r2, #9
 80075cc:	d903      	bls.n	80075d6 <_svfiprintf_r+0x1a6>
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d0c6      	beq.n	8007560 <_svfiprintf_r+0x130>
 80075d2:	9105      	str	r1, [sp, #20]
 80075d4:	e7c4      	b.n	8007560 <_svfiprintf_r+0x130>
 80075d6:	4604      	mov	r4, r0
 80075d8:	2301      	movs	r3, #1
 80075da:	fb0c 2101 	mla	r1, ip, r1, r2
 80075de:	e7f0      	b.n	80075c2 <_svfiprintf_r+0x192>
 80075e0:	ab03      	add	r3, sp, #12
 80075e2:	9300      	str	r3, [sp, #0]
 80075e4:	462a      	mov	r2, r5
 80075e6:	4638      	mov	r0, r7
 80075e8:	4b0e      	ldr	r3, [pc, #56]	@ (8007624 <_svfiprintf_r+0x1f4>)
 80075ea:	a904      	add	r1, sp, #16
 80075ec:	f3af 8000 	nop.w
 80075f0:	1c42      	adds	r2, r0, #1
 80075f2:	4606      	mov	r6, r0
 80075f4:	d1d6      	bne.n	80075a4 <_svfiprintf_r+0x174>
 80075f6:	89ab      	ldrh	r3, [r5, #12]
 80075f8:	065b      	lsls	r3, r3, #25
 80075fa:	f53f af2d 	bmi.w	8007458 <_svfiprintf_r+0x28>
 80075fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007600:	e72c      	b.n	800745c <_svfiprintf_r+0x2c>
 8007602:	ab03      	add	r3, sp, #12
 8007604:	9300      	str	r3, [sp, #0]
 8007606:	462a      	mov	r2, r5
 8007608:	4638      	mov	r0, r7
 800760a:	4b06      	ldr	r3, [pc, #24]	@ (8007624 <_svfiprintf_r+0x1f4>)
 800760c:	a904      	add	r1, sp, #16
 800760e:	f000 f87d 	bl	800770c <_printf_i>
 8007612:	e7ed      	b.n	80075f0 <_svfiprintf_r+0x1c0>
 8007614:	08007f06 	.word	0x08007f06
 8007618:	08007f0c 	.word	0x08007f0c
 800761c:	08007f10 	.word	0x08007f10
 8007620:	00000000 	.word	0x00000000
 8007624:	08007379 	.word	0x08007379

08007628 <_printf_common>:
 8007628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800762c:	4616      	mov	r6, r2
 800762e:	4698      	mov	r8, r3
 8007630:	688a      	ldr	r2, [r1, #8]
 8007632:	690b      	ldr	r3, [r1, #16]
 8007634:	4607      	mov	r7, r0
 8007636:	4293      	cmp	r3, r2
 8007638:	bfb8      	it	lt
 800763a:	4613      	movlt	r3, r2
 800763c:	6033      	str	r3, [r6, #0]
 800763e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007642:	460c      	mov	r4, r1
 8007644:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007648:	b10a      	cbz	r2, 800764e <_printf_common+0x26>
 800764a:	3301      	adds	r3, #1
 800764c:	6033      	str	r3, [r6, #0]
 800764e:	6823      	ldr	r3, [r4, #0]
 8007650:	0699      	lsls	r1, r3, #26
 8007652:	bf42      	ittt	mi
 8007654:	6833      	ldrmi	r3, [r6, #0]
 8007656:	3302      	addmi	r3, #2
 8007658:	6033      	strmi	r3, [r6, #0]
 800765a:	6825      	ldr	r5, [r4, #0]
 800765c:	f015 0506 	ands.w	r5, r5, #6
 8007660:	d106      	bne.n	8007670 <_printf_common+0x48>
 8007662:	f104 0a19 	add.w	sl, r4, #25
 8007666:	68e3      	ldr	r3, [r4, #12]
 8007668:	6832      	ldr	r2, [r6, #0]
 800766a:	1a9b      	subs	r3, r3, r2
 800766c:	42ab      	cmp	r3, r5
 800766e:	dc2b      	bgt.n	80076c8 <_printf_common+0xa0>
 8007670:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007674:	6822      	ldr	r2, [r4, #0]
 8007676:	3b00      	subs	r3, #0
 8007678:	bf18      	it	ne
 800767a:	2301      	movne	r3, #1
 800767c:	0692      	lsls	r2, r2, #26
 800767e:	d430      	bmi.n	80076e2 <_printf_common+0xba>
 8007680:	4641      	mov	r1, r8
 8007682:	4638      	mov	r0, r7
 8007684:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007688:	47c8      	blx	r9
 800768a:	3001      	adds	r0, #1
 800768c:	d023      	beq.n	80076d6 <_printf_common+0xae>
 800768e:	6823      	ldr	r3, [r4, #0]
 8007690:	6922      	ldr	r2, [r4, #16]
 8007692:	f003 0306 	and.w	r3, r3, #6
 8007696:	2b04      	cmp	r3, #4
 8007698:	bf14      	ite	ne
 800769a:	2500      	movne	r5, #0
 800769c:	6833      	ldreq	r3, [r6, #0]
 800769e:	f04f 0600 	mov.w	r6, #0
 80076a2:	bf08      	it	eq
 80076a4:	68e5      	ldreq	r5, [r4, #12]
 80076a6:	f104 041a 	add.w	r4, r4, #26
 80076aa:	bf08      	it	eq
 80076ac:	1aed      	subeq	r5, r5, r3
 80076ae:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80076b2:	bf08      	it	eq
 80076b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076b8:	4293      	cmp	r3, r2
 80076ba:	bfc4      	itt	gt
 80076bc:	1a9b      	subgt	r3, r3, r2
 80076be:	18ed      	addgt	r5, r5, r3
 80076c0:	42b5      	cmp	r5, r6
 80076c2:	d11a      	bne.n	80076fa <_printf_common+0xd2>
 80076c4:	2000      	movs	r0, #0
 80076c6:	e008      	b.n	80076da <_printf_common+0xb2>
 80076c8:	2301      	movs	r3, #1
 80076ca:	4652      	mov	r2, sl
 80076cc:	4641      	mov	r1, r8
 80076ce:	4638      	mov	r0, r7
 80076d0:	47c8      	blx	r9
 80076d2:	3001      	adds	r0, #1
 80076d4:	d103      	bne.n	80076de <_printf_common+0xb6>
 80076d6:	f04f 30ff 	mov.w	r0, #4294967295
 80076da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076de:	3501      	adds	r5, #1
 80076e0:	e7c1      	b.n	8007666 <_printf_common+0x3e>
 80076e2:	2030      	movs	r0, #48	@ 0x30
 80076e4:	18e1      	adds	r1, r4, r3
 80076e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80076ea:	1c5a      	adds	r2, r3, #1
 80076ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80076f0:	4422      	add	r2, r4
 80076f2:	3302      	adds	r3, #2
 80076f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80076f8:	e7c2      	b.n	8007680 <_printf_common+0x58>
 80076fa:	2301      	movs	r3, #1
 80076fc:	4622      	mov	r2, r4
 80076fe:	4641      	mov	r1, r8
 8007700:	4638      	mov	r0, r7
 8007702:	47c8      	blx	r9
 8007704:	3001      	adds	r0, #1
 8007706:	d0e6      	beq.n	80076d6 <_printf_common+0xae>
 8007708:	3601      	adds	r6, #1
 800770a:	e7d9      	b.n	80076c0 <_printf_common+0x98>

0800770c <_printf_i>:
 800770c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007710:	7e0f      	ldrb	r7, [r1, #24]
 8007712:	4691      	mov	r9, r2
 8007714:	2f78      	cmp	r7, #120	@ 0x78
 8007716:	4680      	mov	r8, r0
 8007718:	460c      	mov	r4, r1
 800771a:	469a      	mov	sl, r3
 800771c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800771e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007722:	d807      	bhi.n	8007734 <_printf_i+0x28>
 8007724:	2f62      	cmp	r7, #98	@ 0x62
 8007726:	d80a      	bhi.n	800773e <_printf_i+0x32>
 8007728:	2f00      	cmp	r7, #0
 800772a:	f000 80d1 	beq.w	80078d0 <_printf_i+0x1c4>
 800772e:	2f58      	cmp	r7, #88	@ 0x58
 8007730:	f000 80b8 	beq.w	80078a4 <_printf_i+0x198>
 8007734:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007738:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800773c:	e03a      	b.n	80077b4 <_printf_i+0xa8>
 800773e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007742:	2b15      	cmp	r3, #21
 8007744:	d8f6      	bhi.n	8007734 <_printf_i+0x28>
 8007746:	a101      	add	r1, pc, #4	@ (adr r1, 800774c <_printf_i+0x40>)
 8007748:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800774c:	080077a5 	.word	0x080077a5
 8007750:	080077b9 	.word	0x080077b9
 8007754:	08007735 	.word	0x08007735
 8007758:	08007735 	.word	0x08007735
 800775c:	08007735 	.word	0x08007735
 8007760:	08007735 	.word	0x08007735
 8007764:	080077b9 	.word	0x080077b9
 8007768:	08007735 	.word	0x08007735
 800776c:	08007735 	.word	0x08007735
 8007770:	08007735 	.word	0x08007735
 8007774:	08007735 	.word	0x08007735
 8007778:	080078b7 	.word	0x080078b7
 800777c:	080077e3 	.word	0x080077e3
 8007780:	08007871 	.word	0x08007871
 8007784:	08007735 	.word	0x08007735
 8007788:	08007735 	.word	0x08007735
 800778c:	080078d9 	.word	0x080078d9
 8007790:	08007735 	.word	0x08007735
 8007794:	080077e3 	.word	0x080077e3
 8007798:	08007735 	.word	0x08007735
 800779c:	08007735 	.word	0x08007735
 80077a0:	08007879 	.word	0x08007879
 80077a4:	6833      	ldr	r3, [r6, #0]
 80077a6:	1d1a      	adds	r2, r3, #4
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	6032      	str	r2, [r6, #0]
 80077ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80077b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80077b4:	2301      	movs	r3, #1
 80077b6:	e09c      	b.n	80078f2 <_printf_i+0x1e6>
 80077b8:	6833      	ldr	r3, [r6, #0]
 80077ba:	6820      	ldr	r0, [r4, #0]
 80077bc:	1d19      	adds	r1, r3, #4
 80077be:	6031      	str	r1, [r6, #0]
 80077c0:	0606      	lsls	r6, r0, #24
 80077c2:	d501      	bpl.n	80077c8 <_printf_i+0xbc>
 80077c4:	681d      	ldr	r5, [r3, #0]
 80077c6:	e003      	b.n	80077d0 <_printf_i+0xc4>
 80077c8:	0645      	lsls	r5, r0, #25
 80077ca:	d5fb      	bpl.n	80077c4 <_printf_i+0xb8>
 80077cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80077d0:	2d00      	cmp	r5, #0
 80077d2:	da03      	bge.n	80077dc <_printf_i+0xd0>
 80077d4:	232d      	movs	r3, #45	@ 0x2d
 80077d6:	426d      	negs	r5, r5
 80077d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077dc:	230a      	movs	r3, #10
 80077de:	4858      	ldr	r0, [pc, #352]	@ (8007940 <_printf_i+0x234>)
 80077e0:	e011      	b.n	8007806 <_printf_i+0xfa>
 80077e2:	6821      	ldr	r1, [r4, #0]
 80077e4:	6833      	ldr	r3, [r6, #0]
 80077e6:	0608      	lsls	r0, r1, #24
 80077e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80077ec:	d402      	bmi.n	80077f4 <_printf_i+0xe8>
 80077ee:	0649      	lsls	r1, r1, #25
 80077f0:	bf48      	it	mi
 80077f2:	b2ad      	uxthmi	r5, r5
 80077f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80077f6:	6033      	str	r3, [r6, #0]
 80077f8:	bf14      	ite	ne
 80077fa:	230a      	movne	r3, #10
 80077fc:	2308      	moveq	r3, #8
 80077fe:	4850      	ldr	r0, [pc, #320]	@ (8007940 <_printf_i+0x234>)
 8007800:	2100      	movs	r1, #0
 8007802:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007806:	6866      	ldr	r6, [r4, #4]
 8007808:	2e00      	cmp	r6, #0
 800780a:	60a6      	str	r6, [r4, #8]
 800780c:	db05      	blt.n	800781a <_printf_i+0x10e>
 800780e:	6821      	ldr	r1, [r4, #0]
 8007810:	432e      	orrs	r6, r5
 8007812:	f021 0104 	bic.w	r1, r1, #4
 8007816:	6021      	str	r1, [r4, #0]
 8007818:	d04b      	beq.n	80078b2 <_printf_i+0x1a6>
 800781a:	4616      	mov	r6, r2
 800781c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007820:	fb03 5711 	mls	r7, r3, r1, r5
 8007824:	5dc7      	ldrb	r7, [r0, r7]
 8007826:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800782a:	462f      	mov	r7, r5
 800782c:	42bb      	cmp	r3, r7
 800782e:	460d      	mov	r5, r1
 8007830:	d9f4      	bls.n	800781c <_printf_i+0x110>
 8007832:	2b08      	cmp	r3, #8
 8007834:	d10b      	bne.n	800784e <_printf_i+0x142>
 8007836:	6823      	ldr	r3, [r4, #0]
 8007838:	07df      	lsls	r7, r3, #31
 800783a:	d508      	bpl.n	800784e <_printf_i+0x142>
 800783c:	6923      	ldr	r3, [r4, #16]
 800783e:	6861      	ldr	r1, [r4, #4]
 8007840:	4299      	cmp	r1, r3
 8007842:	bfde      	ittt	le
 8007844:	2330      	movle	r3, #48	@ 0x30
 8007846:	f806 3c01 	strble.w	r3, [r6, #-1]
 800784a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800784e:	1b92      	subs	r2, r2, r6
 8007850:	6122      	str	r2, [r4, #16]
 8007852:	464b      	mov	r3, r9
 8007854:	4621      	mov	r1, r4
 8007856:	4640      	mov	r0, r8
 8007858:	f8cd a000 	str.w	sl, [sp]
 800785c:	aa03      	add	r2, sp, #12
 800785e:	f7ff fee3 	bl	8007628 <_printf_common>
 8007862:	3001      	adds	r0, #1
 8007864:	d14a      	bne.n	80078fc <_printf_i+0x1f0>
 8007866:	f04f 30ff 	mov.w	r0, #4294967295
 800786a:	b004      	add	sp, #16
 800786c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007870:	6823      	ldr	r3, [r4, #0]
 8007872:	f043 0320 	orr.w	r3, r3, #32
 8007876:	6023      	str	r3, [r4, #0]
 8007878:	2778      	movs	r7, #120	@ 0x78
 800787a:	4832      	ldr	r0, [pc, #200]	@ (8007944 <_printf_i+0x238>)
 800787c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007880:	6823      	ldr	r3, [r4, #0]
 8007882:	6831      	ldr	r1, [r6, #0]
 8007884:	061f      	lsls	r7, r3, #24
 8007886:	f851 5b04 	ldr.w	r5, [r1], #4
 800788a:	d402      	bmi.n	8007892 <_printf_i+0x186>
 800788c:	065f      	lsls	r7, r3, #25
 800788e:	bf48      	it	mi
 8007890:	b2ad      	uxthmi	r5, r5
 8007892:	6031      	str	r1, [r6, #0]
 8007894:	07d9      	lsls	r1, r3, #31
 8007896:	bf44      	itt	mi
 8007898:	f043 0320 	orrmi.w	r3, r3, #32
 800789c:	6023      	strmi	r3, [r4, #0]
 800789e:	b11d      	cbz	r5, 80078a8 <_printf_i+0x19c>
 80078a0:	2310      	movs	r3, #16
 80078a2:	e7ad      	b.n	8007800 <_printf_i+0xf4>
 80078a4:	4826      	ldr	r0, [pc, #152]	@ (8007940 <_printf_i+0x234>)
 80078a6:	e7e9      	b.n	800787c <_printf_i+0x170>
 80078a8:	6823      	ldr	r3, [r4, #0]
 80078aa:	f023 0320 	bic.w	r3, r3, #32
 80078ae:	6023      	str	r3, [r4, #0]
 80078b0:	e7f6      	b.n	80078a0 <_printf_i+0x194>
 80078b2:	4616      	mov	r6, r2
 80078b4:	e7bd      	b.n	8007832 <_printf_i+0x126>
 80078b6:	6833      	ldr	r3, [r6, #0]
 80078b8:	6825      	ldr	r5, [r4, #0]
 80078ba:	1d18      	adds	r0, r3, #4
 80078bc:	6961      	ldr	r1, [r4, #20]
 80078be:	6030      	str	r0, [r6, #0]
 80078c0:	062e      	lsls	r6, r5, #24
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	d501      	bpl.n	80078ca <_printf_i+0x1be>
 80078c6:	6019      	str	r1, [r3, #0]
 80078c8:	e002      	b.n	80078d0 <_printf_i+0x1c4>
 80078ca:	0668      	lsls	r0, r5, #25
 80078cc:	d5fb      	bpl.n	80078c6 <_printf_i+0x1ba>
 80078ce:	8019      	strh	r1, [r3, #0]
 80078d0:	2300      	movs	r3, #0
 80078d2:	4616      	mov	r6, r2
 80078d4:	6123      	str	r3, [r4, #16]
 80078d6:	e7bc      	b.n	8007852 <_printf_i+0x146>
 80078d8:	6833      	ldr	r3, [r6, #0]
 80078da:	2100      	movs	r1, #0
 80078dc:	1d1a      	adds	r2, r3, #4
 80078de:	6032      	str	r2, [r6, #0]
 80078e0:	681e      	ldr	r6, [r3, #0]
 80078e2:	6862      	ldr	r2, [r4, #4]
 80078e4:	4630      	mov	r0, r6
 80078e6:	f000 f859 	bl	800799c <memchr>
 80078ea:	b108      	cbz	r0, 80078f0 <_printf_i+0x1e4>
 80078ec:	1b80      	subs	r0, r0, r6
 80078ee:	6060      	str	r0, [r4, #4]
 80078f0:	6863      	ldr	r3, [r4, #4]
 80078f2:	6123      	str	r3, [r4, #16]
 80078f4:	2300      	movs	r3, #0
 80078f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078fa:	e7aa      	b.n	8007852 <_printf_i+0x146>
 80078fc:	4632      	mov	r2, r6
 80078fe:	4649      	mov	r1, r9
 8007900:	4640      	mov	r0, r8
 8007902:	6923      	ldr	r3, [r4, #16]
 8007904:	47d0      	blx	sl
 8007906:	3001      	adds	r0, #1
 8007908:	d0ad      	beq.n	8007866 <_printf_i+0x15a>
 800790a:	6823      	ldr	r3, [r4, #0]
 800790c:	079b      	lsls	r3, r3, #30
 800790e:	d413      	bmi.n	8007938 <_printf_i+0x22c>
 8007910:	68e0      	ldr	r0, [r4, #12]
 8007912:	9b03      	ldr	r3, [sp, #12]
 8007914:	4298      	cmp	r0, r3
 8007916:	bfb8      	it	lt
 8007918:	4618      	movlt	r0, r3
 800791a:	e7a6      	b.n	800786a <_printf_i+0x15e>
 800791c:	2301      	movs	r3, #1
 800791e:	4632      	mov	r2, r6
 8007920:	4649      	mov	r1, r9
 8007922:	4640      	mov	r0, r8
 8007924:	47d0      	blx	sl
 8007926:	3001      	adds	r0, #1
 8007928:	d09d      	beq.n	8007866 <_printf_i+0x15a>
 800792a:	3501      	adds	r5, #1
 800792c:	68e3      	ldr	r3, [r4, #12]
 800792e:	9903      	ldr	r1, [sp, #12]
 8007930:	1a5b      	subs	r3, r3, r1
 8007932:	42ab      	cmp	r3, r5
 8007934:	dcf2      	bgt.n	800791c <_printf_i+0x210>
 8007936:	e7eb      	b.n	8007910 <_printf_i+0x204>
 8007938:	2500      	movs	r5, #0
 800793a:	f104 0619 	add.w	r6, r4, #25
 800793e:	e7f5      	b.n	800792c <_printf_i+0x220>
 8007940:	08007f17 	.word	0x08007f17
 8007944:	08007f28 	.word	0x08007f28

08007948 <memmove>:
 8007948:	4288      	cmp	r0, r1
 800794a:	b510      	push	{r4, lr}
 800794c:	eb01 0402 	add.w	r4, r1, r2
 8007950:	d902      	bls.n	8007958 <memmove+0x10>
 8007952:	4284      	cmp	r4, r0
 8007954:	4623      	mov	r3, r4
 8007956:	d807      	bhi.n	8007968 <memmove+0x20>
 8007958:	1e43      	subs	r3, r0, #1
 800795a:	42a1      	cmp	r1, r4
 800795c:	d008      	beq.n	8007970 <memmove+0x28>
 800795e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007962:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007966:	e7f8      	b.n	800795a <memmove+0x12>
 8007968:	4601      	mov	r1, r0
 800796a:	4402      	add	r2, r0
 800796c:	428a      	cmp	r2, r1
 800796e:	d100      	bne.n	8007972 <memmove+0x2a>
 8007970:	bd10      	pop	{r4, pc}
 8007972:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007976:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800797a:	e7f7      	b.n	800796c <memmove+0x24>

0800797c <_sbrk_r>:
 800797c:	b538      	push	{r3, r4, r5, lr}
 800797e:	2300      	movs	r3, #0
 8007980:	4d05      	ldr	r5, [pc, #20]	@ (8007998 <_sbrk_r+0x1c>)
 8007982:	4604      	mov	r4, r0
 8007984:	4608      	mov	r0, r1
 8007986:	602b      	str	r3, [r5, #0]
 8007988:	f7fb fe70 	bl	800366c <_sbrk>
 800798c:	1c43      	adds	r3, r0, #1
 800798e:	d102      	bne.n	8007996 <_sbrk_r+0x1a>
 8007990:	682b      	ldr	r3, [r5, #0]
 8007992:	b103      	cbz	r3, 8007996 <_sbrk_r+0x1a>
 8007994:	6023      	str	r3, [r4, #0]
 8007996:	bd38      	pop	{r3, r4, r5, pc}
 8007998:	200005b0 	.word	0x200005b0

0800799c <memchr>:
 800799c:	4603      	mov	r3, r0
 800799e:	b510      	push	{r4, lr}
 80079a0:	b2c9      	uxtb	r1, r1
 80079a2:	4402      	add	r2, r0
 80079a4:	4293      	cmp	r3, r2
 80079a6:	4618      	mov	r0, r3
 80079a8:	d101      	bne.n	80079ae <memchr+0x12>
 80079aa:	2000      	movs	r0, #0
 80079ac:	e003      	b.n	80079b6 <memchr+0x1a>
 80079ae:	7804      	ldrb	r4, [r0, #0]
 80079b0:	3301      	adds	r3, #1
 80079b2:	428c      	cmp	r4, r1
 80079b4:	d1f6      	bne.n	80079a4 <memchr+0x8>
 80079b6:	bd10      	pop	{r4, pc}

080079b8 <memcpy>:
 80079b8:	440a      	add	r2, r1
 80079ba:	4291      	cmp	r1, r2
 80079bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80079c0:	d100      	bne.n	80079c4 <memcpy+0xc>
 80079c2:	4770      	bx	lr
 80079c4:	b510      	push	{r4, lr}
 80079c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079ca:	4291      	cmp	r1, r2
 80079cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079d0:	d1f9      	bne.n	80079c6 <memcpy+0xe>
 80079d2:	bd10      	pop	{r4, pc}

080079d4 <_realloc_r>:
 80079d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079d8:	4607      	mov	r7, r0
 80079da:	4614      	mov	r4, r2
 80079dc:	460d      	mov	r5, r1
 80079de:	b921      	cbnz	r1, 80079ea <_realloc_r+0x16>
 80079e0:	4611      	mov	r1, r2
 80079e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079e6:	f7ff bc3b 	b.w	8007260 <_malloc_r>
 80079ea:	b92a      	cbnz	r2, 80079f8 <_realloc_r+0x24>
 80079ec:	f7ff fbce 	bl	800718c <_free_r>
 80079f0:	4625      	mov	r5, r4
 80079f2:	4628      	mov	r0, r5
 80079f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079f8:	f000 f81a 	bl	8007a30 <_malloc_usable_size_r>
 80079fc:	4284      	cmp	r4, r0
 80079fe:	4606      	mov	r6, r0
 8007a00:	d802      	bhi.n	8007a08 <_realloc_r+0x34>
 8007a02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007a06:	d8f4      	bhi.n	80079f2 <_realloc_r+0x1e>
 8007a08:	4621      	mov	r1, r4
 8007a0a:	4638      	mov	r0, r7
 8007a0c:	f7ff fc28 	bl	8007260 <_malloc_r>
 8007a10:	4680      	mov	r8, r0
 8007a12:	b908      	cbnz	r0, 8007a18 <_realloc_r+0x44>
 8007a14:	4645      	mov	r5, r8
 8007a16:	e7ec      	b.n	80079f2 <_realloc_r+0x1e>
 8007a18:	42b4      	cmp	r4, r6
 8007a1a:	4622      	mov	r2, r4
 8007a1c:	4629      	mov	r1, r5
 8007a1e:	bf28      	it	cs
 8007a20:	4632      	movcs	r2, r6
 8007a22:	f7ff ffc9 	bl	80079b8 <memcpy>
 8007a26:	4629      	mov	r1, r5
 8007a28:	4638      	mov	r0, r7
 8007a2a:	f7ff fbaf 	bl	800718c <_free_r>
 8007a2e:	e7f1      	b.n	8007a14 <_realloc_r+0x40>

08007a30 <_malloc_usable_size_r>:
 8007a30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a34:	1f18      	subs	r0, r3, #4
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	bfbc      	itt	lt
 8007a3a:	580b      	ldrlt	r3, [r1, r0]
 8007a3c:	18c0      	addlt	r0, r0, r3
 8007a3e:	4770      	bx	lr

08007a40 <_init>:
 8007a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a42:	bf00      	nop
 8007a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a46:	bc08      	pop	{r3}
 8007a48:	469e      	mov	lr, r3
 8007a4a:	4770      	bx	lr

08007a4c <_fini>:
 8007a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a4e:	bf00      	nop
 8007a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a52:	bc08      	pop	{r3}
 8007a54:	469e      	mov	lr, r3
 8007a56:	4770      	bx	lr
