
WT1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000964c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  08009760  08009760  0000a760  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b84  08009b84  0000b208  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009b84  08009b84  0000ab84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b8c  08009b8c  0000b208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b8c  08009b8c  0000ab8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009b90  08009b90  0000ab90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000208  20000000  08009b94  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e0  20000208  08009d9c  0000b208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005e8  08009d9c  0000b5e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b208  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019198  00000000  00000000  0000b231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004559  00000000  00000000  000243c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001930  00000000  00000000  00028928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013b1  00000000  00000000  0002a258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c6d1  00000000  00000000  0002b609  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f1fd  00000000  00000000  00047cda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000999b9  00000000  00000000  00066ed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00100890  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ab0  00000000  00000000  001008d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00108384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000208 	.word	0x20000208
 800012c:	00000000 	.word	0x00000000
 8000130:	08009744 	.word	0x08009744

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000020c 	.word	0x2000020c
 800014c:	08009744 	.word	0x08009744

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_uldivmod>:
 8001030:	b953      	cbnz	r3, 8001048 <__aeabi_uldivmod+0x18>
 8001032:	b94a      	cbnz	r2, 8001048 <__aeabi_uldivmod+0x18>
 8001034:	2900      	cmp	r1, #0
 8001036:	bf08      	it	eq
 8001038:	2800      	cmpeq	r0, #0
 800103a:	bf1c      	itt	ne
 800103c:	f04f 31ff 	movne.w	r1, #4294967295
 8001040:	f04f 30ff 	movne.w	r0, #4294967295
 8001044:	f000 b98c 	b.w	8001360 <__aeabi_idiv0>
 8001048:	f1ad 0c08 	sub.w	ip, sp, #8
 800104c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001050:	f000 f806 	bl	8001060 <__udivmoddi4>
 8001054:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001058:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800105c:	b004      	add	sp, #16
 800105e:	4770      	bx	lr

08001060 <__udivmoddi4>:
 8001060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001064:	9d08      	ldr	r5, [sp, #32]
 8001066:	468e      	mov	lr, r1
 8001068:	4604      	mov	r4, r0
 800106a:	4688      	mov	r8, r1
 800106c:	2b00      	cmp	r3, #0
 800106e:	d14a      	bne.n	8001106 <__udivmoddi4+0xa6>
 8001070:	428a      	cmp	r2, r1
 8001072:	4617      	mov	r7, r2
 8001074:	d962      	bls.n	800113c <__udivmoddi4+0xdc>
 8001076:	fab2 f682 	clz	r6, r2
 800107a:	b14e      	cbz	r6, 8001090 <__udivmoddi4+0x30>
 800107c:	f1c6 0320 	rsb	r3, r6, #32
 8001080:	fa01 f806 	lsl.w	r8, r1, r6
 8001084:	fa20 f303 	lsr.w	r3, r0, r3
 8001088:	40b7      	lsls	r7, r6
 800108a:	ea43 0808 	orr.w	r8, r3, r8
 800108e:	40b4      	lsls	r4, r6
 8001090:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001094:	fbb8 f1fe 	udiv	r1, r8, lr
 8001098:	fa1f fc87 	uxth.w	ip, r7
 800109c:	fb0e 8811 	mls	r8, lr, r1, r8
 80010a0:	fb01 f20c 	mul.w	r2, r1, ip
 80010a4:	0c23      	lsrs	r3, r4, #16
 80010a6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d909      	bls.n	80010c2 <__udivmoddi4+0x62>
 80010ae:	18fb      	adds	r3, r7, r3
 80010b0:	f101 30ff 	add.w	r0, r1, #4294967295
 80010b4:	f080 80eb 	bcs.w	800128e <__udivmoddi4+0x22e>
 80010b8:	429a      	cmp	r2, r3
 80010ba:	f240 80e8 	bls.w	800128e <__udivmoddi4+0x22e>
 80010be:	3902      	subs	r1, #2
 80010c0:	443b      	add	r3, r7
 80010c2:	1a9a      	subs	r2, r3, r2
 80010c4:	fbb2 f0fe 	udiv	r0, r2, lr
 80010c8:	fb0e 2210 	mls	r2, lr, r0, r2
 80010cc:	fb00 fc0c 	mul.w	ip, r0, ip
 80010d0:	b2a3      	uxth	r3, r4
 80010d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80010d6:	459c      	cmp	ip, r3
 80010d8:	d909      	bls.n	80010ee <__udivmoddi4+0x8e>
 80010da:	18fb      	adds	r3, r7, r3
 80010dc:	f100 32ff 	add.w	r2, r0, #4294967295
 80010e0:	f080 80d7 	bcs.w	8001292 <__udivmoddi4+0x232>
 80010e4:	459c      	cmp	ip, r3
 80010e6:	f240 80d4 	bls.w	8001292 <__udivmoddi4+0x232>
 80010ea:	443b      	add	r3, r7
 80010ec:	3802      	subs	r0, #2
 80010ee:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80010f2:	2100      	movs	r1, #0
 80010f4:	eba3 030c 	sub.w	r3, r3, ip
 80010f8:	b11d      	cbz	r5, 8001102 <__udivmoddi4+0xa2>
 80010fa:	2200      	movs	r2, #0
 80010fc:	40f3      	lsrs	r3, r6
 80010fe:	e9c5 3200 	strd	r3, r2, [r5]
 8001102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001106:	428b      	cmp	r3, r1
 8001108:	d905      	bls.n	8001116 <__udivmoddi4+0xb6>
 800110a:	b10d      	cbz	r5, 8001110 <__udivmoddi4+0xb0>
 800110c:	e9c5 0100 	strd	r0, r1, [r5]
 8001110:	2100      	movs	r1, #0
 8001112:	4608      	mov	r0, r1
 8001114:	e7f5      	b.n	8001102 <__udivmoddi4+0xa2>
 8001116:	fab3 f183 	clz	r1, r3
 800111a:	2900      	cmp	r1, #0
 800111c:	d146      	bne.n	80011ac <__udivmoddi4+0x14c>
 800111e:	4573      	cmp	r3, lr
 8001120:	d302      	bcc.n	8001128 <__udivmoddi4+0xc8>
 8001122:	4282      	cmp	r2, r0
 8001124:	f200 8108 	bhi.w	8001338 <__udivmoddi4+0x2d8>
 8001128:	1a84      	subs	r4, r0, r2
 800112a:	eb6e 0203 	sbc.w	r2, lr, r3
 800112e:	2001      	movs	r0, #1
 8001130:	4690      	mov	r8, r2
 8001132:	2d00      	cmp	r5, #0
 8001134:	d0e5      	beq.n	8001102 <__udivmoddi4+0xa2>
 8001136:	e9c5 4800 	strd	r4, r8, [r5]
 800113a:	e7e2      	b.n	8001102 <__udivmoddi4+0xa2>
 800113c:	2a00      	cmp	r2, #0
 800113e:	f000 8091 	beq.w	8001264 <__udivmoddi4+0x204>
 8001142:	fab2 f682 	clz	r6, r2
 8001146:	2e00      	cmp	r6, #0
 8001148:	f040 80a5 	bne.w	8001296 <__udivmoddi4+0x236>
 800114c:	1a8a      	subs	r2, r1, r2
 800114e:	2101      	movs	r1, #1
 8001150:	0c03      	lsrs	r3, r0, #16
 8001152:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001156:	b280      	uxth	r0, r0
 8001158:	b2bc      	uxth	r4, r7
 800115a:	fbb2 fcfe 	udiv	ip, r2, lr
 800115e:	fb0e 221c 	mls	r2, lr, ip, r2
 8001162:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001166:	fb04 f20c 	mul.w	r2, r4, ip
 800116a:	429a      	cmp	r2, r3
 800116c:	d907      	bls.n	800117e <__udivmoddi4+0x11e>
 800116e:	18fb      	adds	r3, r7, r3
 8001170:	f10c 38ff 	add.w	r8, ip, #4294967295
 8001174:	d202      	bcs.n	800117c <__udivmoddi4+0x11c>
 8001176:	429a      	cmp	r2, r3
 8001178:	f200 80e3 	bhi.w	8001342 <__udivmoddi4+0x2e2>
 800117c:	46c4      	mov	ip, r8
 800117e:	1a9b      	subs	r3, r3, r2
 8001180:	fbb3 f2fe 	udiv	r2, r3, lr
 8001184:	fb0e 3312 	mls	r3, lr, r2, r3
 8001188:	fb02 f404 	mul.w	r4, r2, r4
 800118c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8001190:	429c      	cmp	r4, r3
 8001192:	d907      	bls.n	80011a4 <__udivmoddi4+0x144>
 8001194:	18fb      	adds	r3, r7, r3
 8001196:	f102 30ff 	add.w	r0, r2, #4294967295
 800119a:	d202      	bcs.n	80011a2 <__udivmoddi4+0x142>
 800119c:	429c      	cmp	r4, r3
 800119e:	f200 80cd 	bhi.w	800133c <__udivmoddi4+0x2dc>
 80011a2:	4602      	mov	r2, r0
 80011a4:	1b1b      	subs	r3, r3, r4
 80011a6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80011aa:	e7a5      	b.n	80010f8 <__udivmoddi4+0x98>
 80011ac:	f1c1 0620 	rsb	r6, r1, #32
 80011b0:	408b      	lsls	r3, r1
 80011b2:	fa22 f706 	lsr.w	r7, r2, r6
 80011b6:	431f      	orrs	r7, r3
 80011b8:	fa2e fa06 	lsr.w	sl, lr, r6
 80011bc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80011c0:	fbba f8f9 	udiv	r8, sl, r9
 80011c4:	fa0e fe01 	lsl.w	lr, lr, r1
 80011c8:	fa20 f306 	lsr.w	r3, r0, r6
 80011cc:	fb09 aa18 	mls	sl, r9, r8, sl
 80011d0:	fa1f fc87 	uxth.w	ip, r7
 80011d4:	ea43 030e 	orr.w	r3, r3, lr
 80011d8:	fa00 fe01 	lsl.w	lr, r0, r1
 80011dc:	fb08 f00c 	mul.w	r0, r8, ip
 80011e0:	0c1c      	lsrs	r4, r3, #16
 80011e2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80011e6:	42a0      	cmp	r0, r4
 80011e8:	fa02 f201 	lsl.w	r2, r2, r1
 80011ec:	d90a      	bls.n	8001204 <__udivmoddi4+0x1a4>
 80011ee:	193c      	adds	r4, r7, r4
 80011f0:	f108 3aff 	add.w	sl, r8, #4294967295
 80011f4:	f080 809e 	bcs.w	8001334 <__udivmoddi4+0x2d4>
 80011f8:	42a0      	cmp	r0, r4
 80011fa:	f240 809b 	bls.w	8001334 <__udivmoddi4+0x2d4>
 80011fe:	f1a8 0802 	sub.w	r8, r8, #2
 8001202:	443c      	add	r4, r7
 8001204:	1a24      	subs	r4, r4, r0
 8001206:	b298      	uxth	r0, r3
 8001208:	fbb4 f3f9 	udiv	r3, r4, r9
 800120c:	fb09 4413 	mls	r4, r9, r3, r4
 8001210:	fb03 fc0c 	mul.w	ip, r3, ip
 8001214:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8001218:	45a4      	cmp	ip, r4
 800121a:	d909      	bls.n	8001230 <__udivmoddi4+0x1d0>
 800121c:	193c      	adds	r4, r7, r4
 800121e:	f103 30ff 	add.w	r0, r3, #4294967295
 8001222:	f080 8085 	bcs.w	8001330 <__udivmoddi4+0x2d0>
 8001226:	45a4      	cmp	ip, r4
 8001228:	f240 8082 	bls.w	8001330 <__udivmoddi4+0x2d0>
 800122c:	3b02      	subs	r3, #2
 800122e:	443c      	add	r4, r7
 8001230:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001234:	eba4 040c 	sub.w	r4, r4, ip
 8001238:	fba0 8c02 	umull	r8, ip, r0, r2
 800123c:	4564      	cmp	r4, ip
 800123e:	4643      	mov	r3, r8
 8001240:	46e1      	mov	r9, ip
 8001242:	d364      	bcc.n	800130e <__udivmoddi4+0x2ae>
 8001244:	d061      	beq.n	800130a <__udivmoddi4+0x2aa>
 8001246:	b15d      	cbz	r5, 8001260 <__udivmoddi4+0x200>
 8001248:	ebbe 0203 	subs.w	r2, lr, r3
 800124c:	eb64 0409 	sbc.w	r4, r4, r9
 8001250:	fa04 f606 	lsl.w	r6, r4, r6
 8001254:	fa22 f301 	lsr.w	r3, r2, r1
 8001258:	431e      	orrs	r6, r3
 800125a:	40cc      	lsrs	r4, r1
 800125c:	e9c5 6400 	strd	r6, r4, [r5]
 8001260:	2100      	movs	r1, #0
 8001262:	e74e      	b.n	8001102 <__udivmoddi4+0xa2>
 8001264:	fbb1 fcf2 	udiv	ip, r1, r2
 8001268:	0c01      	lsrs	r1, r0, #16
 800126a:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800126e:	b280      	uxth	r0, r0
 8001270:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001274:	463b      	mov	r3, r7
 8001276:	fbb1 f1f7 	udiv	r1, r1, r7
 800127a:	4638      	mov	r0, r7
 800127c:	463c      	mov	r4, r7
 800127e:	46b8      	mov	r8, r7
 8001280:	46be      	mov	lr, r7
 8001282:	2620      	movs	r6, #32
 8001284:	eba2 0208 	sub.w	r2, r2, r8
 8001288:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800128c:	e765      	b.n	800115a <__udivmoddi4+0xfa>
 800128e:	4601      	mov	r1, r0
 8001290:	e717      	b.n	80010c2 <__udivmoddi4+0x62>
 8001292:	4610      	mov	r0, r2
 8001294:	e72b      	b.n	80010ee <__udivmoddi4+0x8e>
 8001296:	f1c6 0120 	rsb	r1, r6, #32
 800129a:	fa2e fc01 	lsr.w	ip, lr, r1
 800129e:	40b7      	lsls	r7, r6
 80012a0:	fa0e fe06 	lsl.w	lr, lr, r6
 80012a4:	fa20 f101 	lsr.w	r1, r0, r1
 80012a8:	ea41 010e 	orr.w	r1, r1, lr
 80012ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80012b0:	fbbc f8fe 	udiv	r8, ip, lr
 80012b4:	b2bc      	uxth	r4, r7
 80012b6:	fb0e cc18 	mls	ip, lr, r8, ip
 80012ba:	fb08 f904 	mul.w	r9, r8, r4
 80012be:	0c0a      	lsrs	r2, r1, #16
 80012c0:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80012c4:	40b0      	lsls	r0, r6
 80012c6:	4591      	cmp	r9, r2
 80012c8:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80012cc:	b280      	uxth	r0, r0
 80012ce:	d93e      	bls.n	800134e <__udivmoddi4+0x2ee>
 80012d0:	18ba      	adds	r2, r7, r2
 80012d2:	f108 3cff 	add.w	ip, r8, #4294967295
 80012d6:	d201      	bcs.n	80012dc <__udivmoddi4+0x27c>
 80012d8:	4591      	cmp	r9, r2
 80012da:	d81f      	bhi.n	800131c <__udivmoddi4+0x2bc>
 80012dc:	eba2 0209 	sub.w	r2, r2, r9
 80012e0:	fbb2 f9fe 	udiv	r9, r2, lr
 80012e4:	fb09 f804 	mul.w	r8, r9, r4
 80012e8:	fb0e 2a19 	mls	sl, lr, r9, r2
 80012ec:	b28a      	uxth	r2, r1
 80012ee:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 80012f2:	4542      	cmp	r2, r8
 80012f4:	d229      	bcs.n	800134a <__udivmoddi4+0x2ea>
 80012f6:	18ba      	adds	r2, r7, r2
 80012f8:	f109 31ff 	add.w	r1, r9, #4294967295
 80012fc:	d2c2      	bcs.n	8001284 <__udivmoddi4+0x224>
 80012fe:	4542      	cmp	r2, r8
 8001300:	d2c0      	bcs.n	8001284 <__udivmoddi4+0x224>
 8001302:	f1a9 0102 	sub.w	r1, r9, #2
 8001306:	443a      	add	r2, r7
 8001308:	e7bc      	b.n	8001284 <__udivmoddi4+0x224>
 800130a:	45c6      	cmp	lr, r8
 800130c:	d29b      	bcs.n	8001246 <__udivmoddi4+0x1e6>
 800130e:	ebb8 0302 	subs.w	r3, r8, r2
 8001312:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001316:	3801      	subs	r0, #1
 8001318:	46e1      	mov	r9, ip
 800131a:	e794      	b.n	8001246 <__udivmoddi4+0x1e6>
 800131c:	eba7 0909 	sub.w	r9, r7, r9
 8001320:	444a      	add	r2, r9
 8001322:	fbb2 f9fe 	udiv	r9, r2, lr
 8001326:	f1a8 0c02 	sub.w	ip, r8, #2
 800132a:	fb09 f804 	mul.w	r8, r9, r4
 800132e:	e7db      	b.n	80012e8 <__udivmoddi4+0x288>
 8001330:	4603      	mov	r3, r0
 8001332:	e77d      	b.n	8001230 <__udivmoddi4+0x1d0>
 8001334:	46d0      	mov	r8, sl
 8001336:	e765      	b.n	8001204 <__udivmoddi4+0x1a4>
 8001338:	4608      	mov	r0, r1
 800133a:	e6fa      	b.n	8001132 <__udivmoddi4+0xd2>
 800133c:	443b      	add	r3, r7
 800133e:	3a02      	subs	r2, #2
 8001340:	e730      	b.n	80011a4 <__udivmoddi4+0x144>
 8001342:	f1ac 0c02 	sub.w	ip, ip, #2
 8001346:	443b      	add	r3, r7
 8001348:	e719      	b.n	800117e <__udivmoddi4+0x11e>
 800134a:	4649      	mov	r1, r9
 800134c:	e79a      	b.n	8001284 <__udivmoddi4+0x224>
 800134e:	eba2 0209 	sub.w	r2, r2, r9
 8001352:	fbb2 f9fe 	udiv	r9, r2, lr
 8001356:	46c4      	mov	ip, r8
 8001358:	fb09 f804 	mul.w	r8, r9, r4
 800135c:	e7c4      	b.n	80012e8 <__udivmoddi4+0x288>
 800135e:	bf00      	nop

08001360 <__aeabi_idiv0>:
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop

08001364 <ReadAverageVoltage>:

/* ---------------------------------------------------------------
 * Helper: read average ADC voltage for a given channel
 * --------------------------------------------------------------- */
static float ReadAverageVoltage(uint32_t channel, uint8_t samples)
{
 8001364:	b590      	push	{r4, r7, lr}
 8001366:	b089      	sub	sp, #36	@ 0x24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	460b      	mov	r3, r1
 800136e:	70fb      	strb	r3, [r7, #3]
    ADC_ChannelConfTypeDef sConfig = {0};
 8001370:	f107 0308 	add.w	r3, r7, #8
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
    sConfig.Channel = channel;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8001380:	2301      	movs	r3, #1
 8001382:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8001384:	2304      	movs	r3, #4
 8001386:	613b      	str	r3, [r7, #16]
    HAL_ADC_ConfigChannel(hAdc, &sConfig);
 8001388:	4b25      	ldr	r3, [pc, #148]	@ (8001420 <ReadAverageVoltage+0xbc>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f107 0208 	add.w	r2, r7, #8
 8001390:	4611      	mov	r1, r2
 8001392:	4618      	mov	r0, r3
 8001394:	f001 ff8e 	bl	80032b4 <HAL_ADC_ConfigChannel>

    uint32_t sum = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < samples; i++) {
 800139c:	2300      	movs	r3, #0
 800139e:	76fb      	strb	r3, [r7, #27]
 80013a0:	e01c      	b.n	80013dc <ReadAverageVoltage+0x78>
        HAL_ADC_Start(hAdc);
 80013a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001420 <ReadAverageVoltage+0xbc>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f001 fcd0 	bl	8002d4c <HAL_ADC_Start>
        HAL_ADC_PollForConversion(hAdc, HAL_MAX_DELAY);
 80013ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001420 <ReadAverageVoltage+0xbc>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f04f 31ff 	mov.w	r1, #4294967295
 80013b4:	4618      	mov	r0, r3
 80013b6:	f001 fda3 	bl	8002f00 <HAL_ADC_PollForConversion>
        sum += HAL_ADC_GetValue(hAdc);
 80013ba:	4b19      	ldr	r3, [pc, #100]	@ (8001420 <ReadAverageVoltage+0xbc>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f001 fea4 	bl	800310c <HAL_ADC_GetValue>
 80013c4:	4602      	mov	r2, r0
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	4413      	add	r3, r2
 80013ca:	61fb      	str	r3, [r7, #28]
        HAL_ADC_Stop(hAdc);
 80013cc:	4b14      	ldr	r3, [pc, #80]	@ (8001420 <ReadAverageVoltage+0xbc>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f001 fd69 	bl	8002ea8 <HAL_ADC_Stop>
    for (uint8_t i = 0; i < samples; i++) {
 80013d6:	7efb      	ldrb	r3, [r7, #27]
 80013d8:	3301      	adds	r3, #1
 80013da:	76fb      	strb	r3, [r7, #27]
 80013dc:	7efa      	ldrb	r2, [r7, #27]
 80013de:	78fb      	ldrb	r3, [r7, #3]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d3de      	bcc.n	80013a2 <ReadAverageVoltage+0x3e>
    }

    float avg = (float)sum / samples;
 80013e4:	69f8      	ldr	r0, [r7, #28]
 80013e6:	f7ff fc05 	bl	8000bf4 <__aeabi_ui2f>
 80013ea:	4604      	mov	r4, r0
 80013ec:	78fb      	ldrb	r3, [r7, #3]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff fc04 	bl	8000bfc <__aeabi_i2f>
 80013f4:	4603      	mov	r3, r0
 80013f6:	4619      	mov	r1, r3
 80013f8:	4620      	mov	r0, r4
 80013fa:	f7ff fd07 	bl	8000e0c <__aeabi_fdiv>
 80013fe:	4603      	mov	r3, r0
 8001400:	617b      	str	r3, [r7, #20]
    return (avg * ACS712_VREF_ADC) / ACS712_ADC_RESOLUTION;  // in Volts
 8001402:	4908      	ldr	r1, [pc, #32]	@ (8001424 <ReadAverageVoltage+0xc0>)
 8001404:	6978      	ldr	r0, [r7, #20]
 8001406:	f7ff fc4d 	bl	8000ca4 <__aeabi_fmul>
 800140a:	4603      	mov	r3, r0
 800140c:	4906      	ldr	r1, [pc, #24]	@ (8001428 <ReadAverageVoltage+0xc4>)
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff fcfc 	bl	8000e0c <__aeabi_fdiv>
 8001414:	4603      	mov	r3, r0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3724      	adds	r7, #36	@ 0x24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd90      	pop	{r4, r7, pc}
 800141e:	bf00      	nop
 8001420:	2000022c 	.word	0x2000022c
 8001424:	40533333 	.word	0x40533333
 8001428:	457ff000 	.word	0x457ff000

0800142c <ACS712_Init>:

/* ---------------------------------------------------------------
 * Init + zero-offset calibration
 * --------------------------------------------------------------- */
void ACS712_Init(ADC_HandleTypeDef *hadc)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
    hAdc = hadc;
 8001434:	4a06      	ldr	r2, [pc, #24]	@ (8001450 <ACS712_Init+0x24>)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6013      	str	r3, [r2, #0]
    HAL_Delay(500);   // let voltage settle (~0.5 s)
 800143a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800143e:	f001 fb89 	bl	8002b54 <HAL_Delay>
    ACS712_CalibrateZero();
 8001442:	f000 f807 	bl	8001454 <ACS712_CalibrateZero>
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	2000022c 	.word	0x2000022c

08001454 <ACS712_CalibrateZero>:

/* ---------------------------------------------------------------
 * Calibrate sensor at 0 A (no load)
 * --------------------------------------------------------------- */
void ACS712_CalibrateZero(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
    const uint16_t samples = 500;
 800145a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800145e:	803b      	strh	r3, [r7, #0]
    float sum = 0;
 8001460:	f04f 0300 	mov.w	r3, #0
 8001464:	607b      	str	r3, [r7, #4]
    for (uint16_t i = 0; i < samples; i++) {
 8001466:	2300      	movs	r3, #0
 8001468:	807b      	strh	r3, [r7, #2]
 800146a:	e00d      	b.n	8001488 <ACS712_CalibrateZero+0x34>
        sum += ReadAverageVoltage(ACS712_ADC_CHANNEL, 1);
 800146c:	2101      	movs	r1, #1
 800146e:	2007      	movs	r0, #7
 8001470:	f7ff ff78 	bl	8001364 <ReadAverageVoltage>
 8001474:	4603      	mov	r3, r0
 8001476:	4619      	mov	r1, r3
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7ff fb0b 	bl	8000a94 <__addsf3>
 800147e:	4603      	mov	r3, r0
 8001480:	607b      	str	r3, [r7, #4]
    for (uint16_t i = 0; i < samples; i++) {
 8001482:	887b      	ldrh	r3, [r7, #2]
 8001484:	3301      	adds	r3, #1
 8001486:	807b      	strh	r3, [r7, #2]
 8001488:	887a      	ldrh	r2, [r7, #2]
 800148a:	883b      	ldrh	r3, [r7, #0]
 800148c:	429a      	cmp	r2, r3
 800148e:	d3ed      	bcc.n	800146c <ACS712_CalibrateZero+0x18>
    }
    zeroOffset = sum / samples;   // midpoint voltage (≈ 2.5 V typical)
 8001490:	883b      	ldrh	r3, [r7, #0]
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff fbb2 	bl	8000bfc <__aeabi_i2f>
 8001498:	4603      	mov	r3, r0
 800149a:	4619      	mov	r1, r3
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f7ff fcb5 	bl	8000e0c <__aeabi_fdiv>
 80014a2:	4603      	mov	r3, r0
 80014a4:	461a      	mov	r2, r3
 80014a6:	4b03      	ldr	r3, [pc, #12]	@ (80014b4 <ACS712_CalibrateZero+0x60>)
 80014a8:	601a      	str	r2, [r3, #0]
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000230 	.word	0x20000230

080014b8 <ACS712_ReadCurrent>:
//    g_currentA = lastCurrent;
//    return lastCurrent;
//}

float ACS712_ReadCurrent(void)
{
 80014b8:	b590      	push	{r4, r7, lr}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
    float voltage = ReadAverageVoltage(ACS712_ADC_CHANNEL, ACS712_NUM_SAMPLES);
 80014be:	210a      	movs	r1, #10
 80014c0:	2007      	movs	r0, #7
 80014c2:	f7ff ff4f 	bl	8001364 <ReadAverageVoltage>
 80014c6:	6038      	str	r0, [r7, #0]
    float current = (voltage - zeroOffset) / ACS712_SENSITIVITY_RAW;
 80014c8:	4b1c      	ldr	r3, [pc, #112]	@ (800153c <ACS712_ReadCurrent+0x84>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4619      	mov	r1, r3
 80014ce:	6838      	ldr	r0, [r7, #0]
 80014d0:	f7ff fade 	bl	8000a90 <__aeabi_fsub>
 80014d4:	4603      	mov	r3, r0
 80014d6:	491a      	ldr	r1, [pc, #104]	@ (8001540 <ACS712_ReadCurrent+0x88>)
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff fc97 	bl	8000e0c <__aeabi_fdiv>
 80014de:	4603      	mov	r3, r0
 80014e0:	607b      	str	r3, [r7, #4]

    // Dead-zone filter
    if (fabsf(current) < ACS712_NOISE_DEADZONE)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80014e8:	4916      	ldr	r1, [pc, #88]	@ (8001544 <ACS712_ReadCurrent+0x8c>)
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff fd78 	bl	8000fe0 <__aeabi_fcmplt>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d002      	beq.n	80014fc <ACS712_ReadCurrent+0x44>
        current = 0.0f;
 80014f6:	f04f 0300 	mov.w	r3, #0
 80014fa:	607b      	str	r3, [r7, #4]

    // Low-pass filter
    lastCurrent = (1.0f - ACS712_FILTER_ALPHA) * lastCurrent +
 80014fc:	4b12      	ldr	r3, [pc, #72]	@ (8001548 <ACS712_ReadCurrent+0x90>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4912      	ldr	r1, [pc, #72]	@ (800154c <ACS712_ReadCurrent+0x94>)
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff fbce 	bl	8000ca4 <__aeabi_fmul>
 8001508:	4603      	mov	r3, r0
 800150a:	461c      	mov	r4, r3
                  ACS712_FILTER_ALPHA * current;
 800150c:	4910      	ldr	r1, [pc, #64]	@ (8001550 <ACS712_ReadCurrent+0x98>)
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff fbc8 	bl	8000ca4 <__aeabi_fmul>
 8001514:	4603      	mov	r3, r0
    lastCurrent = (1.0f - ACS712_FILTER_ALPHA) * lastCurrent +
 8001516:	4619      	mov	r1, r3
 8001518:	4620      	mov	r0, r4
 800151a:	f7ff fabb 	bl	8000a94 <__addsf3>
 800151e:	4603      	mov	r3, r0
 8001520:	461a      	mov	r2, r3
 8001522:	4b09      	ldr	r3, [pc, #36]	@ (8001548 <ACS712_ReadCurrent+0x90>)
 8001524:	601a      	str	r2, [r3, #0]

    g_currentA = lastCurrent;    // ✅ store globally for external access
 8001526:	4b08      	ldr	r3, [pc, #32]	@ (8001548 <ACS712_ReadCurrent+0x90>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a0a      	ldr	r2, [pc, #40]	@ (8001554 <ACS712_ReadCurrent+0x9c>)
 800152c:	6013      	str	r3, [r2, #0]
    return lastCurrent;
 800152e:	4b06      	ldr	r3, [pc, #24]	@ (8001548 <ACS712_ReadCurrent+0x90>)
 8001530:	681b      	ldr	r3, [r3, #0]
}
 8001532:	4618      	mov	r0, r3
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	bd90      	pop	{r4, r7, pc}
 800153a:	bf00      	nop
 800153c:	20000230 	.word	0x20000230
 8001540:	3d872b02 	.word	0x3d872b02
 8001544:	3cf5c28f 	.word	0x3cf5c28f
 8001548:	20000234 	.word	0x20000234
 800154c:	3f333333 	.word	0x3f333333
 8001550:	3e99999a 	.word	0x3e99999a
 8001554:	20000224 	.word	0x20000224

08001558 <Voltage_ReadInput>:

/* ---------------------------------------------------------------
 * Read input voltage (from divider) in Volts
 * --------------------------------------------------------------- */
float Voltage_ReadInput(void)
{
 8001558:	b590      	push	{r4, r7, lr}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
    float vAdc = ReadAverageVoltage(VOLTAGE_ADC_CHANNEL, 5);   // read scaled ADC voltage
 800155e:	2105      	movs	r1, #5
 8001560:	2006      	movs	r0, #6
 8001562:	f7ff feff 	bl	8001364 <ReadAverageVoltage>
 8001566:	6078      	str	r0, [r7, #4]
    float vInput = vAdc / VOLT_DIVIDER_RATIO;                  // undo divider (R2/(R1+R2))
 8001568:	4912      	ldr	r1, [pc, #72]	@ (80015b4 <Voltage_ReadInput+0x5c>)
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f7ff fc4e 	bl	8000e0c <__aeabi_fdiv>
 8001570:	4603      	mov	r3, r0
 8001572:	603b      	str	r3, [r7, #0]

    // Optional low-pass filter for stability
    lastVoltage = (1.0f - ACS712_FILTER_ALPHA) * lastVoltage +
 8001574:	4b10      	ldr	r3, [pc, #64]	@ (80015b8 <Voltage_ReadInput+0x60>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4910      	ldr	r1, [pc, #64]	@ (80015bc <Voltage_ReadInput+0x64>)
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff fb92 	bl	8000ca4 <__aeabi_fmul>
 8001580:	4603      	mov	r3, r0
 8001582:	461c      	mov	r4, r3
                  ACS712_FILTER_ALPHA * vInput;
 8001584:	490e      	ldr	r1, [pc, #56]	@ (80015c0 <Voltage_ReadInput+0x68>)
 8001586:	6838      	ldr	r0, [r7, #0]
 8001588:	f7ff fb8c 	bl	8000ca4 <__aeabi_fmul>
 800158c:	4603      	mov	r3, r0
    lastVoltage = (1.0f - ACS712_FILTER_ALPHA) * lastVoltage +
 800158e:	4619      	mov	r1, r3
 8001590:	4620      	mov	r0, r4
 8001592:	f7ff fa7f 	bl	8000a94 <__addsf3>
 8001596:	4603      	mov	r3, r0
 8001598:	461a      	mov	r2, r3
 800159a:	4b07      	ldr	r3, [pc, #28]	@ (80015b8 <Voltage_ReadInput+0x60>)
 800159c:	601a      	str	r2, [r3, #0]

    g_voltageV = lastVoltage;
 800159e:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <Voltage_ReadInput+0x60>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a08      	ldr	r2, [pc, #32]	@ (80015c4 <Voltage_ReadInput+0x6c>)
 80015a4:	6013      	str	r3, [r2, #0]
    return lastVoltage;
 80015a6:	4b04      	ldr	r3, [pc, #16]	@ (80015b8 <Voltage_ReadInput+0x60>)
 80015a8:	681b      	ldr	r3, [r3, #0]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd90      	pop	{r4, r7, pc}
 80015b2:	bf00      	nop
 80015b4:	3f58f2fb 	.word	0x3f58f2fb
 80015b8:	20000238 	.word	0x20000238
 80015bc:	3f333333 	.word	0x3f333333
 80015c0:	3e99999a 	.word	0x3e99999a
 80015c4:	20000228 	.word	0x20000228

080015c8 <ACS712_Update>:

/* ---------------------------------------------------------------
 * Combined update (for periodic tasks)
 * --------------------------------------------------------------- */
void ACS712_Update(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
    g_currentA = ACS712_ReadCurrent();
 80015cc:	f7ff ff74 	bl	80014b8 <ACS712_ReadCurrent>
 80015d0:	4603      	mov	r3, r0
 80015d2:	4a04      	ldr	r2, [pc, #16]	@ (80015e4 <ACS712_Update+0x1c>)
 80015d4:	6013      	str	r3, [r2, #0]
    g_voltageV = Voltage_ReadInput();
 80015d6:	f7ff ffbf 	bl	8001558 <Voltage_ReadInput>
 80015da:	4603      	mov	r3, r0
 80015dc:	4a02      	ldr	r2, [pc, #8]	@ (80015e8 <ACS712_Update+0x20>)
 80015de:	6013      	str	r3, [r2, #0]
}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000224 	.word	0x20000224
 80015e8:	20000228 	.word	0x20000228

080015ec <ADC_Init>:
    return sum / samples;
}

/* --- Public API --- */
void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
    if (HAL_ADCEx_Calibration_Start(hadc) != HAL_OK) {
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f001 fff1 	bl	80035dc <HAL_ADCEx_Calibration_Start>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <ADC_Init+0x18>
        Error_Handler();
 8001600:	f000 fe42 	bl	8002288 <Error_Handler>
    }
}
 8001604:	bf00      	nop
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <map_nibble_ctrl>:
   Build a PCF8574 byte from a 4-bit data nibble and RS/EN flags according to LCD_PINMAP.
*/

static inline uint8_t map_nibble_ctrl(uint8_t nibble /*D7..D4 or D4..D7 per map*/,
                                      uint8_t rs, uint8_t en, uint8_t bl_on)
{
 800160c:	b490      	push	{r4, r7}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	4604      	mov	r4, r0
 8001614:	4608      	mov	r0, r1
 8001616:	4611      	mov	r1, r2
 8001618:	461a      	mov	r2, r3
 800161a:	4623      	mov	r3, r4
 800161c:	71fb      	strb	r3, [r7, #7]
 800161e:	4603      	mov	r3, r0
 8001620:	71bb      	strb	r3, [r7, #6]
 8001622:	460b      	mov	r3, r1
 8001624:	717b      	strb	r3, [r7, #5]
 8001626:	4613      	mov	r3, r2
 8001628:	713b      	strb	r3, [r7, #4]
#if (LCD_PINMAP == LCD_PINMAP_A)
    /* Map A: D7..D4 -> P7..P4, EN=P2, RW=P1(0), RS=P0, BL=P3
       Byte: [D7 D6 D5 D4 BL EN RW RS] */
    uint8_t b = 0;
 800162a:	2300      	movs	r3, #0
 800162c:	73fb      	strb	r3, [r7, #15]
    b |= (nibble & 0xF0);           // D7..D4 already in high nibble
 800162e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001632:	f023 030f 	bic.w	r3, r3, #15
 8001636:	b25a      	sxtb	r2, r3
 8001638:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800163c:	4313      	orrs	r3, r2
 800163e:	b25b      	sxtb	r3, r3
 8001640:	73fb      	strb	r3, [r7, #15]
    b |= (bl_on ? 0x08 : 0x00);     // BL=P3
 8001642:	793b      	ldrb	r3, [r7, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <map_nibble_ctrl+0x40>
 8001648:	2208      	movs	r2, #8
 800164a:	e000      	b.n	800164e <map_nibble_ctrl+0x42>
 800164c:	2200      	movs	r2, #0
 800164e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001652:	4313      	orrs	r3, r2
 8001654:	b25b      	sxtb	r3, r3
 8001656:	73fb      	strb	r3, [r7, #15]
    b |= (en ? 0x04 : 0x00);        // EN=P2
 8001658:	797b      	ldrb	r3, [r7, #5]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <map_nibble_ctrl+0x56>
 800165e:	2204      	movs	r2, #4
 8001660:	e000      	b.n	8001664 <map_nibble_ctrl+0x58>
 8001662:	2200      	movs	r2, #0
 8001664:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001668:	4313      	orrs	r3, r2
 800166a:	b25b      	sxtb	r3, r3
 800166c:	73fb      	strb	r3, [r7, #15]
    b |= 0x00;                      // RW=P1 forced 0 (write)
    b |= (rs ? 0x01 : 0x00);        // RS=P0
 800166e:	79bb      	ldrb	r3, [r7, #6]
 8001670:	2b00      	cmp	r3, #0
 8001672:	bf14      	ite	ne
 8001674:	2301      	movne	r3, #1
 8001676:	2300      	moveq	r3, #0
 8001678:	b2db      	uxtb	r3, r3
 800167a:	b25a      	sxtb	r2, r3
 800167c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001680:	4313      	orrs	r3, r2
 8001682:	b25b      	sxtb	r3, r3
 8001684:	73fb      	strb	r3, [r7, #15]
    return b;
 8001686:	7bfb      	ldrb	r3, [r7, #15]
    b |= (bl_on ? 0x80 : 0x00);           // BL=P7
    return b;
#else
# error "Unsupported LCD_PINMAP selection"
#endif
}
 8001688:	4618      	mov	r0, r3
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bc90      	pop	{r4, r7}
 8001690:	4770      	bx	lr
	...

08001694 <expander_write>:

static void expander_write(uint8_t data)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af02      	add	r7, sp, #8
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Master_Transmit(&hi2c2, SLAVE_ADDRESS_LCD, &data, 1, 100);
 800169e:	1dfa      	adds	r2, r7, #7
 80016a0:	2364      	movs	r3, #100	@ 0x64
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	2301      	movs	r3, #1
 80016a6:	214e      	movs	r1, #78	@ 0x4e
 80016a8:	4803      	ldr	r0, [pc, #12]	@ (80016b8 <expander_write+0x24>)
 80016aa:	f002 fc3d 	bl	8003f28 <HAL_I2C_Master_Transmit>
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	200002c0 	.word	0x200002c0

080016bc <pulse_enable>:

static void pulse_enable(uint8_t data)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	71fb      	strb	r3, [r7, #7]
#if (LCD_PINMAP == LCD_PINMAP_A)
    expander_write(data | 0x04);  // EN=1
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	f043 0304 	orr.w	r3, r3, #4
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff ffe0 	bl	8001694 <expander_write>
    HAL_Delay(1);
 80016d4:	2001      	movs	r0, #1
 80016d6:	f001 fa3d 	bl	8002b54 <HAL_Delay>
    expander_write(data & ~0x04); // EN=0
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	f023 0304 	bic.w	r3, r3, #4
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff ffd6 	bl	8001694 <expander_write>
#elif (LCD_PINMAP == LCD_PINMAP_B)
    expander_write(data | 0x10);  // EN=1
    HAL_Delay(1);
    expander_write(data & ~0x10); // EN=0
#endif
    HAL_Delay(1);
 80016e8:	2001      	movs	r0, #1
 80016ea:	f001 fa33 	bl	8002b54 <HAL_Delay>
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <write4bits>:

static void write4bits(uint8_t nibble /*D7..D4 in high nibble*/, uint8_t rs, uint8_t bl_on)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b084      	sub	sp, #16
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	4603      	mov	r3, r0
 80016fe:	71fb      	strb	r3, [r7, #7]
 8001700:	460b      	mov	r3, r1
 8001702:	71bb      	strb	r3, [r7, #6]
 8001704:	4613      	mov	r3, r2
 8001706:	717b      	strb	r3, [r7, #5]
    uint8_t x = map_nibble_ctrl(nibble, rs, 1 /*en edge*/, bl_on);
 8001708:	797b      	ldrb	r3, [r7, #5]
 800170a:	79b9      	ldrb	r1, [r7, #6]
 800170c:	79f8      	ldrb	r0, [r7, #7]
 800170e:	2201      	movs	r2, #1
 8001710:	f7ff ff7c 	bl	800160c <map_nibble_ctrl>
 8001714:	4603      	mov	r3, r0
 8001716:	73fb      	strb	r3, [r7, #15]
    expander_write(x);
 8001718:	7bfb      	ldrb	r3, [r7, #15]
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff ffba 	bl	8001694 <expander_write>
    pulse_enable(x);
 8001720:	7bfb      	ldrb	r3, [r7, #15]
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff ffca 	bl	80016bc <pulse_enable>
}
 8001728:	bf00      	nop
 800172a:	3710      	adds	r7, #16
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <lcd_backlight_on>:

/* -------- Public API -------- */

void lcd_backlight_on(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
#if (LCD_PINMAP == LCD_PINMAP_A)
    uint8_t b = 0x08; // BL=1, others 0
 8001736:	2308      	movs	r3, #8
 8001738:	71fb      	strb	r3, [r7, #7]
#elif (LCD_PINMAP == LCD_PINMAP_B)
    uint8_t b = 0x80; // BL=1, others 0
#endif
    expander_write(b);
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff ffa9 	bl	8001694 <expander_write>
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <lcd_send_cmd>:
    uint8_t b = 0x00;
    expander_write(b);
}

void lcd_send_cmd(uint8_t cmd)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
 8001750:	4603      	mov	r3, r0
 8001752:	71fb      	strb	r3, [r7, #7]
    /* high then low nibble, RS=0 */
    write4bits(cmd & 0xF0, 0, 1);
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	f023 030f 	bic.w	r3, r3, #15
 800175a:	b2db      	uxtb	r3, r3
 800175c:	2201      	movs	r2, #1
 800175e:	2100      	movs	r1, #0
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff ffc8 	bl	80016f6 <write4bits>
    write4bits((cmd << 4) & 0xF0, 0, 1);
 8001766:	79fb      	ldrb	r3, [r7, #7]
 8001768:	011b      	lsls	r3, r3, #4
 800176a:	b2db      	uxtb	r3, r3
 800176c:	2201      	movs	r2, #1
 800176e:	2100      	movs	r1, #0
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ffc0 	bl	80016f6 <write4bits>
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <lcd_send_data>:

void lcd_send_data(uint8_t data)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	4603      	mov	r3, r0
 8001786:	71fb      	strb	r3, [r7, #7]
    /* high then low nibble, RS=1 */
    write4bits(data & 0xF0, 1, 1);
 8001788:	79fb      	ldrb	r3, [r7, #7]
 800178a:	f023 030f 	bic.w	r3, r3, #15
 800178e:	b2db      	uxtb	r3, r3
 8001790:	2201      	movs	r2, #1
 8001792:	2101      	movs	r1, #1
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff ffae 	bl	80016f6 <write4bits>
    write4bits((data << 4) & 0xF0, 1, 1);
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	011b      	lsls	r3, r3, #4
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	2201      	movs	r2, #1
 80017a2:	2101      	movs	r1, #1
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff ffa6 	bl	80016f6 <write4bits>
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <lcd_clear>:

void lcd_clear(void)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	af00      	add	r7, sp, #0
    lcd_send_cmd(0x01);
 80017b6:	2001      	movs	r0, #1
 80017b8:	f7ff ffc7 	bl	800174a <lcd_send_cmd>
    HAL_Delay(2);
 80017bc:	2002      	movs	r0, #2
 80017be:	f001 f9c9 	bl	8002b54 <HAL_Delay>
    lcd_send_cmd(0x80);
 80017c2:	2080      	movs	r0, #128	@ 0x80
 80017c4:	f7ff ffc1 	bl	800174a <lcd_send_cmd>
}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}

080017cc <lcd_put_cur>:

void lcd_put_cur(uint8_t row, uint8_t col)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	460a      	mov	r2, r1
 80017d6:	71fb      	strb	r3, [r7, #7]
 80017d8:	4613      	mov	r3, r2
 80017da:	71bb      	strb	r3, [r7, #6]
    static const uint8_t row_offsets[] = {0x00, 0x40};
    if (row > 1) row = 1;
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d901      	bls.n	80017e6 <lcd_put_cur+0x1a>
 80017e2:	2301      	movs	r3, #1
 80017e4:	71fb      	strb	r3, [r7, #7]
    lcd_send_cmd(0x80 | (row_offsets[row] + col));
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	4a08      	ldr	r2, [pc, #32]	@ (800180c <lcd_put_cur+0x40>)
 80017ea:	5cd2      	ldrb	r2, [r2, r3]
 80017ec:	79bb      	ldrb	r3, [r7, #6]
 80017ee:	4413      	add	r3, r2
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	b25b      	sxtb	r3, r3
 80017f4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80017f8:	b25b      	sxtb	r3, r3
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff ffa4 	bl	800174a <lcd_send_cmd>
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	080097b4 	.word	0x080097b4

08001810 <lcd_send_string>:

void lcd_send_string(char *str)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
    while (*str) lcd_send_data((uint8_t)*str++);
 8001818:	e006      	b.n	8001828 <lcd_send_string+0x18>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	1c5a      	adds	r2, r3, #1
 800181e:	607a      	str	r2, [r7, #4]
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff ffab 	bl	800177e <lcd_send_data>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1f4      	bne.n	800181a <lcd_send_string+0xa>
}
 8001830:	bf00      	nop
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <lcd_init>:

void lcd_init(void)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	af00      	add	r7, sp, #0
    HAL_Delay(50);
 800183e:	2032      	movs	r0, #50	@ 0x32
 8001840:	f001 f988 	bl	8002b54 <HAL_Delay>
    lcd_backlight_on();
 8001844:	f7ff ff74 	bl	8001730 <lcd_backlight_on>

    /* Force 8-bit mode (send only high-nibble pattern) */
    write4bits(0x30, 0, 1); HAL_Delay(5);
 8001848:	2201      	movs	r2, #1
 800184a:	2100      	movs	r1, #0
 800184c:	2030      	movs	r0, #48	@ 0x30
 800184e:	f7ff ff52 	bl	80016f6 <write4bits>
 8001852:	2005      	movs	r0, #5
 8001854:	f001 f97e 	bl	8002b54 <HAL_Delay>
    write4bits(0x30, 0, 1); HAL_Delay(1);
 8001858:	2201      	movs	r2, #1
 800185a:	2100      	movs	r1, #0
 800185c:	2030      	movs	r0, #48	@ 0x30
 800185e:	f7ff ff4a 	bl	80016f6 <write4bits>
 8001862:	2001      	movs	r0, #1
 8001864:	f001 f976 	bl	8002b54 <HAL_Delay>
    write4bits(0x30, 0, 1); HAL_Delay(1);
 8001868:	2201      	movs	r2, #1
 800186a:	2100      	movs	r1, #0
 800186c:	2030      	movs	r0, #48	@ 0x30
 800186e:	f7ff ff42 	bl	80016f6 <write4bits>
 8001872:	2001      	movs	r0, #1
 8001874:	f001 f96e 	bl	8002b54 <HAL_Delay>

    /* Switch to 4-bit mode */
    write4bits(0x20, 0, 1); HAL_Delay(1);
 8001878:	2201      	movs	r2, #1
 800187a:	2100      	movs	r1, #0
 800187c:	2020      	movs	r0, #32
 800187e:	f7ff ff3a 	bl	80016f6 <write4bits>
 8001882:	2001      	movs	r0, #1
 8001884:	f001 f966 	bl	8002b54 <HAL_Delay>

    /* Function set: 4-bit, 2 lines, 5x8 */
    lcd_send_cmd(0x28); HAL_Delay(1);
 8001888:	2028      	movs	r0, #40	@ 0x28
 800188a:	f7ff ff5e 	bl	800174a <lcd_send_cmd>
 800188e:	2001      	movs	r0, #1
 8001890:	f001 f960 	bl	8002b54 <HAL_Delay>
    /* Display off */
    lcd_send_cmd(0x08); HAL_Delay(1);
 8001894:	2008      	movs	r0, #8
 8001896:	f7ff ff58 	bl	800174a <lcd_send_cmd>
 800189a:	2001      	movs	r0, #1
 800189c:	f001 f95a 	bl	8002b54 <HAL_Delay>
    /* Clear */
    lcd_clear();        HAL_Delay(2);
 80018a0:	f7ff ff87 	bl	80017b2 <lcd_clear>
 80018a4:	2002      	movs	r0, #2
 80018a6:	f001 f955 	bl	8002b54 <HAL_Delay>
    /* Entry mode: increment, no shift */
    lcd_send_cmd(0x06); HAL_Delay(1);
 80018aa:	2006      	movs	r0, #6
 80018ac:	f7ff ff4d 	bl	800174a <lcd_send_cmd>
 80018b0:	2001      	movs	r0, #1
 80018b2:	f001 f94f 	bl	8002b54 <HAL_Delay>
    /* Display on, cursor off, blink off */
    lcd_send_cmd(0x0C); HAL_Delay(1);
 80018b6:	200c      	movs	r0, #12
 80018b8:	f7ff ff47 	bl	800174a <lcd_send_cmd>
 80018bc:	2001      	movs	r0, #1
 80018be:	f001 f949 	bl	8002b54 <HAL_Delay>
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
	...

080018c8 <led_write>:
static uint8_t   s_activeBlink[LED_COLOR_COUNT];
static uint32_t  s_nextToggleAt[LED_COLOR_COUNT];

static inline uint32_t now_ms(void) { return HAL_GetTick(); }

static void led_write(LedColor c, GPIO_PinState st) {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	460a      	mov	r2, r1
 80018d2:	71fb      	strb	r3, [r7, #7]
 80018d4:	4613      	mov	r3, r2
 80018d6:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(LED_PORTS[c], LED_PINS[c], st);
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	4a07      	ldr	r2, [pc, #28]	@ (80018f8 <led_write+0x30>)
 80018dc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80018e0:	79fb      	ldrb	r3, [r7, #7]
 80018e2:	4a06      	ldr	r2, [pc, #24]	@ (80018fc <led_write+0x34>)
 80018e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018e8:	79ba      	ldrb	r2, [r7, #6]
 80018ea:	4619      	mov	r1, r3
 80018ec:	f002 f9c0 	bl	8003c70 <HAL_GPIO_WritePin>
}
 80018f0:	bf00      	nop
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	20000000 	.word	0x20000000
 80018fc:	20000010 	.word	0x20000010

08001900 <led_off>:
static void led_on(LedColor c)  { led_write(c, GPIO_PIN_SET); }
static void led_off(LedColor c) { led_write(c, GPIO_PIN_RESET); }
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	71fb      	strb	r3, [r7, #7]
 800190a:	79fb      	ldrb	r3, [r7, #7]
 800190c:	2100      	movs	r1, #0
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff ffda 	bl	80018c8 <led_write>
 8001914:	bf00      	nop
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <LED_Init>:

void LED_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
    memset(s_intent, 0, sizeof(s_intent));
 8001922:	2210      	movs	r2, #16
 8001924:	2100      	movs	r1, #0
 8001926:	4815      	ldr	r0, [pc, #84]	@ (800197c <LED_Init+0x60>)
 8001928:	f005 fec6 	bl	80076b8 <memset>
    memset(s_activeBlink, 0, sizeof(s_activeBlink));
 800192c:	2204      	movs	r2, #4
 800192e:	2100      	movs	r1, #0
 8001930:	4813      	ldr	r0, [pc, #76]	@ (8001980 <LED_Init+0x64>)
 8001932:	f005 fec1 	bl	80076b8 <memset>
    memset(s_nextToggleAt, 0, sizeof(s_nextToggleAt));
 8001936:	2210      	movs	r2, #16
 8001938:	2100      	movs	r1, #0
 800193a:	4812      	ldr	r0, [pc, #72]	@ (8001984 <LED_Init+0x68>)
 800193c:	f005 febc 	bl	80076b8 <memset>

    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 8001940:	2300      	movs	r3, #0
 8001942:	607b      	str	r3, [r7, #4]
 8001944:	e012      	b.n	800196c <LED_Init+0x50>
        led_off((LedColor)i);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	b2db      	uxtb	r3, r3
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff ffd8 	bl	8001900 <led_off>
        s_intent[i].mode = LED_MODE_OFF;
 8001950:	4a0a      	ldr	r2, [pc, #40]	@ (800197c <LED_Init+0x60>)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2100      	movs	r1, #0
 8001956:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
        s_intent[i].period_ms = 0;
 800195a:	4a08      	ldr	r2, [pc, #32]	@ (800197c <LED_Init+0x60>)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	4413      	add	r3, r2
 8001962:	2200      	movs	r2, #0
 8001964:	805a      	strh	r2, [r3, #2]
    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	3301      	adds	r3, #1
 800196a:	607b      	str	r3, [r7, #4]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2b03      	cmp	r3, #3
 8001970:	dde9      	ble.n	8001946 <LED_Init+0x2a>
    }
}
 8001972:	bf00      	nop
 8001974:	bf00      	nop
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	2000023c 	.word	0x2000023c
 8001980:	2000024c 	.word	0x2000024c
 8001984:	20000250 	.word	0x20000250

08001988 <LoRa_WriteReg>:

uint8_t rxBuffer[64]; // RX
uint8_t txBuffer[64]; // TX

/* ---------------- Low-level SPI helpers ---------------- */
void LoRa_WriteReg(uint8_t addr, uint8_t data) {
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	460a      	mov	r2, r1
 8001992:	71fb      	strb	r3, [r7, #7]
 8001994:	4613      	mov	r3, r2
 8001996:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2] = { (uint8_t)(addr | 0x80), data };
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	733b      	strb	r3, [r7, #12]
 80019a2:	79bb      	ldrb	r3, [r7, #6]
 80019a4:	737b      	strb	r3, [r7, #13]
    NSS_LOW();
 80019a6:	2200      	movs	r2, #0
 80019a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019ac:	480a      	ldr	r0, [pc, #40]	@ (80019d8 <LoRa_WriteReg+0x50>)
 80019ae:	f002 f95f 	bl	8003c70 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, buf, 2, HAL_MAX_DELAY);
 80019b2:	f107 010c 	add.w	r1, r7, #12
 80019b6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ba:	2202      	movs	r2, #2
 80019bc:	4807      	ldr	r0, [pc, #28]	@ (80019dc <LoRa_WriteReg+0x54>)
 80019be:	f004 fa55 	bl	8005e6c <HAL_SPI_Transmit>
    NSS_HIGH();
 80019c2:	2201      	movs	r2, #1
 80019c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019c8:	4803      	ldr	r0, [pc, #12]	@ (80019d8 <LoRa_WriteReg+0x50>)
 80019ca:	f002 f951 	bl	8003c70 <HAL_GPIO_WritePin>
}
 80019ce:	bf00      	nop
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40010800 	.word	0x40010800
 80019dc:	20000328 	.word	0x20000328

080019e0 <LoRa_Reset>:
    HAL_SPI_Receive(&hspi1, buffer, size, HAL_MAX_DELAY);
    NSS_HIGH();
}

/* ---------------- Reset ---------------- */
void LoRa_Reset(void) {
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LORA_RESET_PORT, LORA_RESET_PIN, GPIO_PIN_RESET);
 80019e4:	2200      	movs	r2, #0
 80019e6:	2140      	movs	r1, #64	@ 0x40
 80019e8:	4807      	ldr	r0, [pc, #28]	@ (8001a08 <LoRa_Reset+0x28>)
 80019ea:	f002 f941 	bl	8003c70 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 80019ee:	2002      	movs	r0, #2
 80019f0:	f001 f8b0 	bl	8002b54 <HAL_Delay>
    HAL_GPIO_WritePin(LORA_RESET_PORT, LORA_RESET_PIN, GPIO_PIN_SET);
 80019f4:	2201      	movs	r2, #1
 80019f6:	2140      	movs	r1, #64	@ 0x40
 80019f8:	4803      	ldr	r0, [pc, #12]	@ (8001a08 <LoRa_Reset+0x28>)
 80019fa:	f002 f939 	bl	8003c70 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 80019fe:	2002      	movs	r0, #2
 8001a00:	f001 f8a8 	bl	8002b54 <HAL_Delay>
}
 8001a04:	bf00      	nop
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40010c00 	.word	0x40010c00

08001a0c <LoRa_SetFrequency>:

/* ---------------- Set frequency ---------------- */
void LoRa_SetFrequency(uint32_t freqHz) {
 8001a0c:	b5b0      	push	{r4, r5, r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
    uint64_t frf = ((uint64_t)freqHz << 19) / 32000000ULL;
 8001a14:	6879      	ldr	r1, [r7, #4]
 8001a16:	2000      	movs	r0, #0
 8001a18:	460a      	mov	r2, r1
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	0b55      	lsrs	r5, r2, #13
 8001a1e:	04d4      	lsls	r4, r2, #19
 8001a20:	4a18      	ldr	r2, [pc, #96]	@ (8001a84 <LoRa_SetFrequency+0x78>)
 8001a22:	f04f 0300 	mov.w	r3, #0
 8001a26:	4620      	mov	r0, r4
 8001a28:	4629      	mov	r1, r5
 8001a2a:	f7ff fb01 	bl	8001030 <__aeabi_uldivmod>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	460b      	mov	r3, r1
 8001a32:	e9c7 2302 	strd	r2, r3, [r7, #8]
    LoRa_WriteReg(0x06, (uint8_t)(frf >> 16));
 8001a36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	f04f 0300 	mov.w	r3, #0
 8001a42:	0c02      	lsrs	r2, r0, #16
 8001a44:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001a48:	0c0b      	lsrs	r3, r1, #16
 8001a4a:	b2d3      	uxtb	r3, r2
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	2006      	movs	r0, #6
 8001a50:	f7ff ff9a 	bl	8001988 <LoRa_WriteReg>
    LoRa_WriteReg(0x07, (uint8_t)(frf >> 8));
 8001a54:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a58:	f04f 0200 	mov.w	r2, #0
 8001a5c:	f04f 0300 	mov.w	r3, #0
 8001a60:	0a02      	lsrs	r2, r0, #8
 8001a62:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001a66:	0a0b      	lsrs	r3, r1, #8
 8001a68:	b2d3      	uxtb	r3, r2
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	2007      	movs	r0, #7
 8001a6e:	f7ff ff8b 	bl	8001988 <LoRa_WriteReg>
    LoRa_WriteReg(0x08, (uint8_t)(frf >> 0));
 8001a72:	7a3b      	ldrb	r3, [r7, #8]
 8001a74:	4619      	mov	r1, r3
 8001a76:	2008      	movs	r0, #8
 8001a78:	f7ff ff86 	bl	8001988 <LoRa_WriteReg>
}
 8001a7c:	bf00      	nop
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bdb0      	pop	{r4, r5, r7, pc}
 8001a84:	01e84800 	.word	0x01e84800

08001a88 <LoRa_Init>:

/* ---------------- Init ---------------- */
void LoRa_Init(void) {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
    LoRa_Reset();
 8001a8c:	f7ff ffa8 	bl	80019e0 <LoRa_Reset>

    // Sleep → LoRa sleep
    LoRa_WriteReg(0x01, 0x00);
 8001a90:	2100      	movs	r1, #0
 8001a92:	2001      	movs	r0, #1
 8001a94:	f7ff ff78 	bl	8001988 <LoRa_WriteReg>
    HAL_Delay(2);
 8001a98:	2002      	movs	r0, #2
 8001a9a:	f001 f85b 	bl	8002b54 <HAL_Delay>
    LoRa_WriteReg(0x01, 0x80);
 8001a9e:	2180      	movs	r1, #128	@ 0x80
 8001aa0:	2001      	movs	r0, #1
 8001aa2:	f7ff ff71 	bl	8001988 <LoRa_WriteReg>
    HAL_Delay(2);
 8001aa6:	2002      	movs	r0, #2
 8001aa8:	f001 f854 	bl	8002b54 <HAL_Delay>

    // Frequency
    LoRa_SetFrequency(LORA_FREQUENCY);
 8001aac:	4819      	ldr	r0, [pc, #100]	@ (8001b14 <LoRa_Init+0x8c>)
 8001aae:	f7ff ffad 	bl	8001a0c <LoRa_SetFrequency>

    // PA config
    LoRa_WriteReg(0x09, 0x8F); // PA_BOOST
 8001ab2:	218f      	movs	r1, #143	@ 0x8f
 8001ab4:	2009      	movs	r0, #9
 8001ab6:	f7ff ff67 	bl	8001988 <LoRa_WriteReg>
    LoRa_WriteReg(0x4D, 0x87); // RegPaDac
 8001aba:	2187      	movs	r1, #135	@ 0x87
 8001abc:	204d      	movs	r0, #77	@ 0x4d
 8001abe:	f7ff ff63 	bl	8001988 <LoRa_WriteReg>

    // LNA
    LoRa_WriteReg(0x0C, 0x23);
 8001ac2:	2123      	movs	r1, #35	@ 0x23
 8001ac4:	200c      	movs	r0, #12
 8001ac6:	f7ff ff5f 	bl	8001988 <LoRa_WriteReg>

    // Modem config
    LoRa_WriteReg(0x1D, 0x72);
 8001aca:	2172      	movs	r1, #114	@ 0x72
 8001acc:	201d      	movs	r0, #29
 8001ace:	f7ff ff5b 	bl	8001988 <LoRa_WriteReg>
    LoRa_WriteReg(0x1E, 0x74);
 8001ad2:	2174      	movs	r1, #116	@ 0x74
 8001ad4:	201e      	movs	r0, #30
 8001ad6:	f7ff ff57 	bl	8001988 <LoRa_WriteReg>
    LoRa_WriteReg(0x26, 0x04);
 8001ada:	2104      	movs	r1, #4
 8001adc:	2026      	movs	r0, #38	@ 0x26
 8001ade:	f7ff ff53 	bl	8001988 <LoRa_WriteReg>

    // Preamble
    LoRa_WriteReg(0x20, 0x00);
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	2020      	movs	r0, #32
 8001ae6:	f7ff ff4f 	bl	8001988 <LoRa_WriteReg>
    LoRa_WriteReg(0x21, 0x08);
 8001aea:	2108      	movs	r1, #8
 8001aec:	2021      	movs	r0, #33	@ 0x21
 8001aee:	f7ff ff4b 	bl	8001988 <LoRa_WriteReg>

    // SyncWord
    LoRa_WriteReg(0x39, 0x22);
 8001af2:	2122      	movs	r1, #34	@ 0x22
 8001af4:	2039      	movs	r0, #57	@ 0x39
 8001af6:	f7ff ff47 	bl	8001988 <LoRa_WriteReg>

    // DIO mapping
    LoRa_WriteReg(0x40, 0x00);
 8001afa:	2100      	movs	r1, #0
 8001afc:	2040      	movs	r0, #64	@ 0x40
 8001afe:	f7ff ff43 	bl	8001988 <LoRa_WriteReg>

    // Clear IRQs
    LoRa_WriteReg(0x12, 0xFF);
 8001b02:	21ff      	movs	r1, #255	@ 0xff
 8001b04:	2012      	movs	r0, #18
 8001b06:	f7ff ff3f 	bl	8001988 <LoRa_WriteReg>

    // Start RX by default
    LoRa_SetRxContinuous();
 8001b0a:	f000 f805 	bl	8001b18 <LoRa_SetRxContinuous>
}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	19cf0e40 	.word	0x19cf0e40

08001b18 <LoRa_SetRxContinuous>:

/* ---------------- Mode control ---------------- */
void LoRa_SetStandby(void) { LoRa_WriteReg(0x01, 0x81); }
void LoRa_SetRxContinuous(void) { LoRa_WriteReg(0x01, 0x85); }
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	2185      	movs	r1, #133	@ 0x85
 8001b1e:	2001      	movs	r0, #1
 8001b20:	f7ff ff32 	bl	8001988 <LoRa_WriteReg>
 8001b24:	bf00      	nop
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <HAL_ADC_ConvCpltCallback>:
	  lcd_send_string(line2);
}


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b28:	b590      	push	{r4, r7, lr}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a1f      	ldr	r2, [pc, #124]	@ (8001bb4 <HAL_ADC_ConvCpltCallback+0x8c>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d138      	bne.n	8001bac <HAL_ADC_ConvCpltCallback+0x84>
    {
        for (int i = 0; i < ADC_CHANNEL_COUNT; i++)
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	e02e      	b.n	8001b9e <HAL_ADC_ConvCpltCallback+0x76>
        {
            float v = (adcBuffer[i] * ACS712_VREF_ADC) / ACS712_ADC_RESOLUTION;
 8001b40:	4a1d      	ldr	r2, [pc, #116]	@ (8001bb8 <HAL_ADC_ConvCpltCallback+0x90>)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff f857 	bl	8000bfc <__aeabi_i2f>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	491a      	ldr	r1, [pc, #104]	@ (8001bbc <HAL_ADC_ConvCpltCallback+0x94>)
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff f8a6 	bl	8000ca4 <__aeabi_fmul>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	4919      	ldr	r1, [pc, #100]	@ (8001bc0 <HAL_ADC_ConvCpltCallback+0x98>)
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff f955 	bl	8000e0c <__aeabi_fdiv>
 8001b62:	4603      	mov	r3, r0
 8001b64:	60bb      	str	r3, [r7, #8]
            g_adcAvg[i] = 0.9f * g_adcAvg[i] + 0.1f * v;
 8001b66:	4a17      	ldr	r2, [pc, #92]	@ (8001bc4 <HAL_ADC_ConvCpltCallback+0x9c>)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b6e:	4916      	ldr	r1, [pc, #88]	@ (8001bc8 <HAL_ADC_ConvCpltCallback+0xa0>)
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff f897 	bl	8000ca4 <__aeabi_fmul>
 8001b76:	4603      	mov	r3, r0
 8001b78:	461c      	mov	r4, r3
 8001b7a:	4914      	ldr	r1, [pc, #80]	@ (8001bcc <HAL_ADC_ConvCpltCallback+0xa4>)
 8001b7c:	68b8      	ldr	r0, [r7, #8]
 8001b7e:	f7ff f891 	bl	8000ca4 <__aeabi_fmul>
 8001b82:	4603      	mov	r3, r0
 8001b84:	4619      	mov	r1, r3
 8001b86:	4620      	mov	r0, r4
 8001b88:	f7fe ff84 	bl	8000a94 <__addsf3>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4a0c      	ldr	r2, [pc, #48]	@ (8001bc4 <HAL_ADC_ConvCpltCallback+0x9c>)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (int i = 0; i < ADC_CHANNEL_COUNT; i++)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2b06      	cmp	r3, #6
 8001ba2:	ddcd      	ble.n	8001b40 <HAL_ADC_ConvCpltCallback+0x18>
        }

        // CH7 is last (index 6 if ranks = 0–5 + 7)
        g_vADC_ACS = g_adcAvg[6];
 8001ba4:	4b07      	ldr	r3, [pc, #28]	@ (8001bc4 <HAL_ADC_ConvCpltCallback+0x9c>)
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	4a09      	ldr	r2, [pc, #36]	@ (8001bd0 <HAL_ADC_ConvCpltCallback+0xa8>)
 8001baa:	6013      	str	r3, [r2, #0]
    }
}
 8001bac:	bf00      	nop
 8001bae:	3714      	adds	r7, #20
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd90      	pop	{r4, r7, pc}
 8001bb4:	40012400 	.word	0x40012400
 8001bb8:	20000260 	.word	0x20000260
 8001bbc:	40533333 	.word	0x40533333
 8001bc0:	457ff000 	.word	0x457ff000
 8001bc4:	20000270 	.word	0x20000270
 8001bc8:	3f666666 	.word	0x3f666666
 8001bcc:	3dcccccd 	.word	0x3dcccccd
 8001bd0:	2000028c 	.word	0x2000028c

08001bd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b08c      	sub	sp, #48	@ 0x30
 8001bd8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bda:	f000 ff59 	bl	8002a90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bde:	f000 f897 	bl	8001d10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001be2:	f000 fad3 	bl	800218c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001be6:	f000 f8ef 	bl	8001dc8 <MX_ADC1_Init>
  MX_RTC_Init();
 8001bea:	f000 f9bd 	bl	8001f68 <MX_RTC_Init>
  MX_SPI1_Init();
 8001bee:	f000 fa1f 	bl	8002030 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001bf2:	f000 faa1 	bl	8002138 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8001bf6:	f000 f989 	bl	8001f0c <MX_I2C2_Init>
  MX_TIM3_Init();
 8001bfa:	f000 fa4f 	bl	800209c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim3);
 8001bfe:	483b      	ldr	r0, [pc, #236]	@ (8001cec <main+0x118>)
 8001c00:	f004 fb80 	bl	8006304 <HAL_TIM_Base_Start>
  RF_Init();
 8001c04:	f000 fb90 	bl	8002328 <RF_Init>
  lcd_init();
 8001c08:	f7ff fe17 	bl	800183a <lcd_init>
  ADC_Init(&hadc1);
 8001c0c:	4838      	ldr	r0, [pc, #224]	@ (8001cf0 <main+0x11c>)
 8001c0e:	f7ff fced 	bl	80015ec <ADC_Init>
  LoRa_Init();
 8001c12:	f7ff ff39 	bl	8001a88 <LoRa_Init>
  Screen_Init();
 8001c16:	f000 fb9f 	bl	8002358 <Screen_Init>
  UART_Init();
 8001c1a:	f000 fef5 	bl	8002a08 <UART_Init>
  Switches_Init();
 8001c1e:	f000 fdd3 	bl	80027c8 <Switches_Init>
  Relay_Init();
 8001c22:	f000 fb37 	bl	8002294 <Relay_Init>
  LED_Init();
 8001c26:	f7ff fe79 	bl	800191c <LED_Init>
//  RTC_GetTimeDate();            /* read once */
//    RTC_SetTimeDate_AutoDOW(0, 14, 13, 29, 9, 2025);

//  Debug_Print("System Initialized\r\n");

  uint8_t lastSecond = 255;
 8001c2a:	23ff      	movs	r3, #255	@ 0xff
 8001c2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  // Initialize LCD

  ACS712_Init(&hadc1);
 8001c30:	482f      	ldr	r0, [pc, #188]	@ (8001cf0 <main+0x11c>)
 8001c32:	f7ff fbfb 	bl	800142c <ACS712_Init>
  lcd_init();
 8001c36:	f7ff fe00 	bl	800183a <lcd_init>
  lcd_clear();
 8001c3a:	f7ff fdba 	bl	80017b2 <lcd_clear>
  lcd_put_cur(0,0);
 8001c3e:	2100      	movs	r1, #0
 8001c40:	2000      	movs	r0, #0
 8001c42:	f7ff fdc3 	bl	80017cc <lcd_put_cur>
  lcd_send_string("AC Monitor Init");
 8001c46:	482b      	ldr	r0, [pc, #172]	@ (8001cf4 <main+0x120>)
 8001c48:	f7ff fde2 	bl	8001810 <lcd_send_string>

  HAL_Delay(1000);
 8001c4c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c50:	f000 ff80 	bl	8002b54 <HAL_Delay>
  lcd_clear();
 8001c54:	f7ff fdad 	bl	80017b2 <lcd_clear>
  char line2[17];

//  float acCurrent, acVoltage;
//  HAL_ADC_Start(&hadc1);

	  HAL_GPIO_WritePin(Relay1_GPIO_Port, Relay1_Pin, 1);
 8001c58:	2201      	movs	r2, #1
 8001c5a:	2101      	movs	r1, #1
 8001c5c:	4826      	ldr	r0, [pc, #152]	@ (8001cf8 <main+0x124>)
 8001c5e:	f002 f807 	bl	8003c70 <HAL_GPIO_WritePin>
  while (1)
  {


	  // --- Update ACS712 readings (both current & voltage) ---
	  ACS712_Update();    // updates g_currentA and g_voltageV automatically
 8001c62:	f7ff fcb1 	bl	80015c8 <ACS712_Update>

	  // --- Prepare display strings ---
	  snprintf(line1, sizeof(line1), "I:%5.2f A", g_currentA);  // e.g., "I: 12.45 A"
 8001c66:	4b25      	ldr	r3, [pc, #148]	@ (8001cfc <main+0x128>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7fe fbdc 	bl	8000428 <__aeabi_f2d>
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	f107 0014 	add.w	r0, r7, #20
 8001c78:	e9cd 2300 	strd	r2, r3, [sp]
 8001c7c:	4a20      	ldr	r2, [pc, #128]	@ (8001d00 <main+0x12c>)
 8001c7e:	2111      	movs	r1, #17
 8001c80:	f005 fc0c 	bl	800749c <sniprintf>
	  snprintf(line2, sizeof(line2), "V:%5.1f V", g_voltageV);  // e.g., "V: 11.9 V"
 8001c84:	4b1f      	ldr	r3, [pc, #124]	@ (8001d04 <main+0x130>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7fe fbcd 	bl	8000428 <__aeabi_f2d>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	4638      	mov	r0, r7
 8001c94:	e9cd 2300 	strd	r2, r3, [sp]
 8001c98:	4a1b      	ldr	r2, [pc, #108]	@ (8001d08 <main+0x134>)
 8001c9a:	2111      	movs	r1, #17
 8001c9c:	f005 fbfe 	bl	800749c <sniprintf>

	  // --- Clear and Display on LCD ---
	  lcd_put_cur(0, 0);
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	2000      	movs	r0, #0
 8001ca4:	f7ff fd92 	bl	80017cc <lcd_put_cur>
	  lcd_send_string("                ");  // clear line 1
 8001ca8:	4818      	ldr	r0, [pc, #96]	@ (8001d0c <main+0x138>)
 8001caa:	f7ff fdb1 	bl	8001810 <lcd_send_string>
	  lcd_put_cur(0, 0);
 8001cae:	2100      	movs	r1, #0
 8001cb0:	2000      	movs	r0, #0
 8001cb2:	f7ff fd8b 	bl	80017cc <lcd_put_cur>
	  lcd_send_string(line1);
 8001cb6:	f107 0314 	add.w	r3, r7, #20
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff fda8 	bl	8001810 <lcd_send_string>

	  lcd_put_cur(1, 0);
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	2001      	movs	r0, #1
 8001cc4:	f7ff fd82 	bl	80017cc <lcd_put_cur>
	  lcd_send_string("                ");  // clear line 2
 8001cc8:	4810      	ldr	r0, [pc, #64]	@ (8001d0c <main+0x138>)
 8001cca:	f7ff fda1 	bl	8001810 <lcd_send_string>
	  lcd_put_cur(1, 0);
 8001cce:	2100      	movs	r1, #0
 8001cd0:	2001      	movs	r0, #1
 8001cd2:	f7ff fd7b 	bl	80017cc <lcd_put_cur>
	  lcd_send_string(line2);
 8001cd6:	463b      	mov	r3, r7
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff fd99 	bl	8001810 <lcd_send_string>

	  // --- Update interval ---
	  HAL_Delay(300);  // update every 0.3 seconds
 8001cde:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001ce2:	f000 ff37 	bl	8002b54 <HAL_Delay>
	  ACS712_Update();    // updates g_currentA and g_voltageV automatically
 8001ce6:	bf00      	nop
 8001ce8:	e7bb      	b.n	8001c62 <main+0x8e>
 8001cea:	bf00      	nop
 8001cec:	20000380 	.word	0x20000380
 8001cf0:	20000290 	.word	0x20000290
 8001cf4:	08009778 	.word	0x08009778
 8001cf8:	40010c00 	.word	0x40010c00
 8001cfc:	20000224 	.word	0x20000224
 8001d00:	08009788 	.word	0x08009788
 8001d04:	20000228 	.word	0x20000228
 8001d08:	08009794 	.word	0x08009794
 8001d0c:	080097a0 	.word	0x080097a0

08001d10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b094      	sub	sp, #80	@ 0x50
 8001d14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d16:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d1a:	2228      	movs	r2, #40	@ 0x28
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f005 fcca 	bl	80076b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d24:	f107 0314 	add.w	r3, r7, #20
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d34:	1d3b      	adds	r3, r7, #4
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	605a      	str	r2, [r3, #4]
 8001d3c:	609a      	str	r2, [r3, #8]
 8001d3e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001d40:	230a      	movs	r3, #10
 8001d42:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d44:	2301      	movs	r3, #1
 8001d46:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d48:	2310      	movs	r3, #16
 8001d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d50:	2302      	movs	r3, #2
 8001d52:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001d54:	2300      	movs	r3, #0
 8001d56:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001d58:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8001d5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d5e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d62:	4618      	mov	r0, r3
 8001d64:	f002 fc44 	bl	80045f0 <HAL_RCC_OscConfig>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001d6e:	f000 fa8b 	bl	8002288 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d72:	230f      	movs	r3, #15
 8001d74:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d76:	2302      	movs	r3, #2
 8001d78:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d82:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d84:	2300      	movs	r3, #0
 8001d86:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d88:	f107 0314 	add.w	r3, r7, #20
 8001d8c:	2102      	movs	r1, #2
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f002 feb0 	bl	8004af4 <HAL_RCC_ClockConfig>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001d9a:	f000 fa75 	bl	8002288 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001da2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001da6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001da8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001dac:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dae:	1d3b      	adds	r3, r7, #4
 8001db0:	4618      	mov	r0, r3
 8001db2:	f003 f82d 	bl	8004e10 <HAL_RCCEx_PeriphCLKConfig>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001dbc:	f000 fa64 	bl	8002288 <Error_Handler>
  }
}
 8001dc0:	bf00      	nop
 8001dc2:	3750      	adds	r7, #80	@ 0x50
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001dce:	1d3b      	adds	r3, r7, #4
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001dd8:	4b4a      	ldr	r3, [pc, #296]	@ (8001f04 <MX_ADC1_Init+0x13c>)
 8001dda:	4a4b      	ldr	r2, [pc, #300]	@ (8001f08 <MX_ADC1_Init+0x140>)
 8001ddc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001dde:	4b49      	ldr	r3, [pc, #292]	@ (8001f04 <MX_ADC1_Init+0x13c>)
 8001de0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001de4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001de6:	4b47      	ldr	r3, [pc, #284]	@ (8001f04 <MX_ADC1_Init+0x13c>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001dec:	4b45      	ldr	r3, [pc, #276]	@ (8001f04 <MX_ADC1_Init+0x13c>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001df2:	4b44      	ldr	r3, [pc, #272]	@ (8001f04 <MX_ADC1_Init+0x13c>)
 8001df4:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001df8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001dfa:	4b42      	ldr	r3, [pc, #264]	@ (8001f04 <MX_ADC1_Init+0x13c>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 8001e00:	4b40      	ldr	r3, [pc, #256]	@ (8001f04 <MX_ADC1_Init+0x13c>)
 8001e02:	2208      	movs	r2, #8
 8001e04:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e06:	483f      	ldr	r0, [pc, #252]	@ (8001f04 <MX_ADC1_Init+0x13c>)
 8001e08:	f000 fec8 	bl	8002b9c <HAL_ADC_Init>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001e12:	f000 fa39 	bl	8002288 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001e16:	2300      	movs	r3, #0
 8001e18:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e22:	1d3b      	adds	r3, r7, #4
 8001e24:	4619      	mov	r1, r3
 8001e26:	4837      	ldr	r0, [pc, #220]	@ (8001f04 <MX_ADC1_Init+0x13c>)
 8001e28:	f001 fa44 	bl	80032b4 <HAL_ADC_ConfigChannel>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001e32:	f000 fa29 	bl	8002288 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001e36:	2301      	movs	r3, #1
 8001e38:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e3e:	1d3b      	adds	r3, r7, #4
 8001e40:	4619      	mov	r1, r3
 8001e42:	4830      	ldr	r0, [pc, #192]	@ (8001f04 <MX_ADC1_Init+0x13c>)
 8001e44:	f001 fa36 	bl	80032b4 <HAL_ADC_ConfigChannel>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001e4e:	f000 fa1b 	bl	8002288 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001e52:	2302      	movs	r3, #2
 8001e54:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001e56:	2303      	movs	r3, #3
 8001e58:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e5a:	1d3b      	adds	r3, r7, #4
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4829      	ldr	r0, [pc, #164]	@ (8001f04 <MX_ADC1_Init+0x13c>)
 8001e60:	f001 fa28 	bl	80032b4 <HAL_ADC_ConfigChannel>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001e6a:	f000 fa0d 	bl	8002288 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001e72:	2304      	movs	r3, #4
 8001e74:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e76:	1d3b      	adds	r3, r7, #4
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4822      	ldr	r0, [pc, #136]	@ (8001f04 <MX_ADC1_Init+0x13c>)
 8001e7c:	f001 fa1a 	bl	80032b4 <HAL_ADC_ConfigChannel>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001e86:	f000 f9ff 	bl	8002288 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001e8a:	2304      	movs	r3, #4
 8001e8c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001e8e:	2305      	movs	r3, #5
 8001e90:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e92:	1d3b      	adds	r3, r7, #4
 8001e94:	4619      	mov	r1, r3
 8001e96:	481b      	ldr	r0, [pc, #108]	@ (8001f04 <MX_ADC1_Init+0x13c>)
 8001e98:	f001 fa0c 	bl	80032b4 <HAL_ADC_ConfigChannel>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001ea2:	f000 f9f1 	bl	8002288 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001ea6:	2305      	movs	r3, #5
 8001ea8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001eaa:	2306      	movs	r3, #6
 8001eac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001eae:	1d3b      	adds	r3, r7, #4
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4814      	ldr	r0, [pc, #80]	@ (8001f04 <MX_ADC1_Init+0x13c>)
 8001eb4:	f001 f9fe 	bl	80032b4 <HAL_ADC_ConfigChannel>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001ebe:	f000 f9e3 	bl	8002288 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001ec2:	2307      	movs	r3, #7
 8001ec4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001ec6:	2307      	movs	r3, #7
 8001ec8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001eca:	1d3b      	adds	r3, r7, #4
 8001ecc:	4619      	mov	r1, r3
 8001ece:	480d      	ldr	r0, [pc, #52]	@ (8001f04 <MX_ADC1_Init+0x13c>)
 8001ed0:	f001 f9f0 	bl	80032b4 <HAL_ADC_ConfigChannel>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8001eda:	f000 f9d5 	bl	8002288 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001ede:	2306      	movs	r3, #6
 8001ee0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001ee2:	2308      	movs	r3, #8
 8001ee4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ee6:	1d3b      	adds	r3, r7, #4
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4806      	ldr	r0, [pc, #24]	@ (8001f04 <MX_ADC1_Init+0x13c>)
 8001eec:	f001 f9e2 	bl	80032b4 <HAL_ADC_ConfigChannel>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8001ef6:	f000 f9c7 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001efa:	bf00      	nop
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000290 	.word	0x20000290
 8001f08:	40012400 	.word	0x40012400

08001f0c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001f10:	4b12      	ldr	r3, [pc, #72]	@ (8001f5c <MX_I2C2_Init+0x50>)
 8001f12:	4a13      	ldr	r2, [pc, #76]	@ (8001f60 <MX_I2C2_Init+0x54>)
 8001f14:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001f16:	4b11      	ldr	r3, [pc, #68]	@ (8001f5c <MX_I2C2_Init+0x50>)
 8001f18:	4a12      	ldr	r2, [pc, #72]	@ (8001f64 <MX_I2C2_Init+0x58>)
 8001f1a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f5c <MX_I2C2_Init+0x50>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001f22:	4b0e      	ldr	r3, [pc, #56]	@ (8001f5c <MX_I2C2_Init+0x50>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f28:	4b0c      	ldr	r3, [pc, #48]	@ (8001f5c <MX_I2C2_Init+0x50>)
 8001f2a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f2e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f30:	4b0a      	ldr	r3, [pc, #40]	@ (8001f5c <MX_I2C2_Init+0x50>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001f36:	4b09      	ldr	r3, [pc, #36]	@ (8001f5c <MX_I2C2_Init+0x50>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f3c:	4b07      	ldr	r3, [pc, #28]	@ (8001f5c <MX_I2C2_Init+0x50>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f42:	4b06      	ldr	r3, [pc, #24]	@ (8001f5c <MX_I2C2_Init+0x50>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001f48:	4804      	ldr	r0, [pc, #16]	@ (8001f5c <MX_I2C2_Init+0x50>)
 8001f4a:	f001 fea9 	bl	8003ca0 <HAL_I2C_Init>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001f54:	f000 f998 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001f58:	bf00      	nop
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	200002c0 	.word	0x200002c0
 8001f60:	40005800 	.word	0x40005800
 8001f64:	000186a0 	.word	0x000186a0

08001f68 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */
//
  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001f6e:	f107 030c 	add.w	r3, r7, #12
 8001f72:	2100      	movs	r1, #0
 8001f74:	460a      	mov	r2, r1
 8001f76:	801a      	strh	r2, [r3, #0]
 8001f78:	460a      	mov	r2, r1
 8001f7a:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 8001f80:	463b      	mov	r3, r7
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	605a      	str	r2, [r3, #4]
//
  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001f88:	4b27      	ldr	r3, [pc, #156]	@ (8002028 <MX_RTC_Init+0xc0>)
 8001f8a:	4a28      	ldr	r2, [pc, #160]	@ (800202c <MX_RTC_Init+0xc4>)
 8001f8c:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001f8e:	4b26      	ldr	r3, [pc, #152]	@ (8002028 <MX_RTC_Init+0xc0>)
 8001f90:	f04f 32ff 	mov.w	r2, #4294967295
 8001f94:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001f96:	4b24      	ldr	r3, [pc, #144]	@ (8002028 <MX_RTC_Init+0xc0>)
 8001f98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f9c:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001f9e:	4822      	ldr	r0, [pc, #136]	@ (8002028 <MX_RTC_Init+0xc0>)
 8001fa0:	f003 f8a2 	bl	80050e8 <HAL_RTC_Init>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001faa:	f000 f96d 	bl	8002288 <Error_Handler>
//
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x13;
 8001fae:	2313      	movs	r3, #19
 8001fb0:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x0;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001fba:	f107 030c 	add.w	r3, r7, #12
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4819      	ldr	r0, [pc, #100]	@ (8002028 <MX_RTC_Init+0xc0>)
 8001fc4:	f003 f91c 	bl	8005200 <HAL_RTC_SetTime>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 8001fce:	f000 f95b 	bl	8002288 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 0x1;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0x0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001fe2:	f107 0308 	add.w	r3, r7, #8
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	4619      	mov	r1, r3
 8001fea:	480f      	ldr	r0, [pc, #60]	@ (8002028 <MX_RTC_Init+0xc0>)
 8001fec:	f003 fa78 	bl	80054e0 <HAL_RTC_SetDate>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001ff6:	f000 f947 	bl	8002288 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x13;
 8001ffa:	2313      	movs	r3, #19
 8001ffc:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001ffe:	2300      	movs	r3, #0
 8002000:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002002:	2300      	movs	r3, #0
 8002004:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 8002006:	2300      	movs	r3, #0
 8002008:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800200a:	463b      	mov	r3, r7
 800200c:	2201      	movs	r2, #1
 800200e:	4619      	mov	r1, r3
 8002010:	4805      	ldr	r0, [pc, #20]	@ (8002028 <MX_RTC_Init+0xc0>)
 8002012:	f003 fb1b 	bl	800564c <HAL_RTC_SetAlarm_IT>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 800201c:	f000 f934 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
//
  /* USER CODE END RTC_Init 2 */

}
 8002020:	bf00      	nop
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	20000314 	.word	0x20000314
 800202c:	40002800 	.word	0x40002800

08002030 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002034:	4b17      	ldr	r3, [pc, #92]	@ (8002094 <MX_SPI1_Init+0x64>)
 8002036:	4a18      	ldr	r2, [pc, #96]	@ (8002098 <MX_SPI1_Init+0x68>)
 8002038:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800203a:	4b16      	ldr	r3, [pc, #88]	@ (8002094 <MX_SPI1_Init+0x64>)
 800203c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002040:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002042:	4b14      	ldr	r3, [pc, #80]	@ (8002094 <MX_SPI1_Init+0x64>)
 8002044:	2200      	movs	r2, #0
 8002046:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002048:	4b12      	ldr	r3, [pc, #72]	@ (8002094 <MX_SPI1_Init+0x64>)
 800204a:	2200      	movs	r2, #0
 800204c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800204e:	4b11      	ldr	r3, [pc, #68]	@ (8002094 <MX_SPI1_Init+0x64>)
 8002050:	2200      	movs	r2, #0
 8002052:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002054:	4b0f      	ldr	r3, [pc, #60]	@ (8002094 <MX_SPI1_Init+0x64>)
 8002056:	2200      	movs	r2, #0
 8002058:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800205a:	4b0e      	ldr	r3, [pc, #56]	@ (8002094 <MX_SPI1_Init+0x64>)
 800205c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002060:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002062:	4b0c      	ldr	r3, [pc, #48]	@ (8002094 <MX_SPI1_Init+0x64>)
 8002064:	2218      	movs	r2, #24
 8002066:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002068:	4b0a      	ldr	r3, [pc, #40]	@ (8002094 <MX_SPI1_Init+0x64>)
 800206a:	2200      	movs	r2, #0
 800206c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800206e:	4b09      	ldr	r3, [pc, #36]	@ (8002094 <MX_SPI1_Init+0x64>)
 8002070:	2200      	movs	r2, #0
 8002072:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002074:	4b07      	ldr	r3, [pc, #28]	@ (8002094 <MX_SPI1_Init+0x64>)
 8002076:	2200      	movs	r2, #0
 8002078:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800207a:	4b06      	ldr	r3, [pc, #24]	@ (8002094 <MX_SPI1_Init+0x64>)
 800207c:	220a      	movs	r2, #10
 800207e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002080:	4804      	ldr	r0, [pc, #16]	@ (8002094 <MX_SPI1_Init+0x64>)
 8002082:	f003 fe6f 	bl	8005d64 <HAL_SPI_Init>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800208c:	f000 f8fc 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002090:	bf00      	nop
 8002092:	bd80      	pop	{r7, pc}
 8002094:	20000328 	.word	0x20000328
 8002098:	40013000 	.word	0x40013000

0800209c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020a2:	f107 0308 	add.w	r3, r7, #8
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	605a      	str	r2, [r3, #4]
 80020ac:	609a      	str	r2, [r3, #8]
 80020ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020b0:	463b      	mov	r3, r7
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80020b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002130 <MX_TIM3_Init+0x94>)
 80020ba:	4a1e      	ldr	r2, [pc, #120]	@ (8002134 <MX_TIM3_Init+0x98>)
 80020bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80020be:	4b1c      	ldr	r3, [pc, #112]	@ (8002130 <MX_TIM3_Init+0x94>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002130 <MX_TIM3_Init+0x94>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff;
 80020ca:	4b19      	ldr	r3, [pc, #100]	@ (8002130 <MX_TIM3_Init+0x94>)
 80020cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020d0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020d2:	4b17      	ldr	r3, [pc, #92]	@ (8002130 <MX_TIM3_Init+0x94>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020d8:	4b15      	ldr	r3, [pc, #84]	@ (8002130 <MX_TIM3_Init+0x94>)
 80020da:	2200      	movs	r2, #0
 80020dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80020de:	4814      	ldr	r0, [pc, #80]	@ (8002130 <MX_TIM3_Init+0x94>)
 80020e0:	f004 f8c1 	bl	8006266 <HAL_TIM_Base_Init>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80020ea:	f000 f8cd 	bl	8002288 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80020f4:	f107 0308 	add.w	r3, r7, #8
 80020f8:	4619      	mov	r1, r3
 80020fa:	480d      	ldr	r0, [pc, #52]	@ (8002130 <MX_TIM3_Init+0x94>)
 80020fc:	f004 f94c 	bl	8006398 <HAL_TIM_ConfigClockSource>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002106:	f000 f8bf 	bl	8002288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800210a:	2300      	movs	r3, #0
 800210c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800210e:	2300      	movs	r3, #0
 8002110:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002112:	463b      	mov	r3, r7
 8002114:	4619      	mov	r1, r3
 8002116:	4806      	ldr	r0, [pc, #24]	@ (8002130 <MX_TIM3_Init+0x94>)
 8002118:	f004 fb0a 	bl	8006730 <HAL_TIMEx_MasterConfigSynchronization>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002122:	f000 f8b1 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002126:	bf00      	nop
 8002128:	3718      	adds	r7, #24
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	20000380 	.word	0x20000380
 8002134:	40000400 	.word	0x40000400

08002138 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800213c:	4b11      	ldr	r3, [pc, #68]	@ (8002184 <MX_USART1_UART_Init+0x4c>)
 800213e:	4a12      	ldr	r2, [pc, #72]	@ (8002188 <MX_USART1_UART_Init+0x50>)
 8002140:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002142:	4b10      	ldr	r3, [pc, #64]	@ (8002184 <MX_USART1_UART_Init+0x4c>)
 8002144:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002148:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800214a:	4b0e      	ldr	r3, [pc, #56]	@ (8002184 <MX_USART1_UART_Init+0x4c>)
 800214c:	2200      	movs	r2, #0
 800214e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002150:	4b0c      	ldr	r3, [pc, #48]	@ (8002184 <MX_USART1_UART_Init+0x4c>)
 8002152:	2200      	movs	r2, #0
 8002154:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002156:	4b0b      	ldr	r3, [pc, #44]	@ (8002184 <MX_USART1_UART_Init+0x4c>)
 8002158:	2200      	movs	r2, #0
 800215a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800215c:	4b09      	ldr	r3, [pc, #36]	@ (8002184 <MX_USART1_UART_Init+0x4c>)
 800215e:	220c      	movs	r2, #12
 8002160:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002162:	4b08      	ldr	r3, [pc, #32]	@ (8002184 <MX_USART1_UART_Init+0x4c>)
 8002164:	2200      	movs	r2, #0
 8002166:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002168:	4b06      	ldr	r3, [pc, #24]	@ (8002184 <MX_USART1_UART_Init+0x4c>)
 800216a:	2200      	movs	r2, #0
 800216c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800216e:	4805      	ldr	r0, [pc, #20]	@ (8002184 <MX_USART1_UART_Init+0x4c>)
 8002170:	f004 fb3c 	bl	80067ec <HAL_UART_Init>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800217a:	f000 f885 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	200003c8 	.word	0x200003c8
 8002188:	40013800 	.word	0x40013800

0800218c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b088      	sub	sp, #32
 8002190:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002192:	f107 0310 	add.w	r3, r7, #16
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	605a      	str	r2, [r3, #4]
 800219c:	609a      	str	r2, [r3, #8]
 800219e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021a0:	4b35      	ldr	r3, [pc, #212]	@ (8002278 <MX_GPIO_Init+0xec>)
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	4a34      	ldr	r2, [pc, #208]	@ (8002278 <MX_GPIO_Init+0xec>)
 80021a6:	f043 0310 	orr.w	r3, r3, #16
 80021aa:	6193      	str	r3, [r2, #24]
 80021ac:	4b32      	ldr	r3, [pc, #200]	@ (8002278 <MX_GPIO_Init+0xec>)
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	f003 0310 	and.w	r3, r3, #16
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b8:	4b2f      	ldr	r3, [pc, #188]	@ (8002278 <MX_GPIO_Init+0xec>)
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	4a2e      	ldr	r2, [pc, #184]	@ (8002278 <MX_GPIO_Init+0xec>)
 80021be:	f043 0304 	orr.w	r3, r3, #4
 80021c2:	6193      	str	r3, [r2, #24]
 80021c4:	4b2c      	ldr	r3, [pc, #176]	@ (8002278 <MX_GPIO_Init+0xec>)
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	f003 0304 	and.w	r3, r3, #4
 80021cc:	60bb      	str	r3, [r7, #8]
 80021ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021d0:	4b29      	ldr	r3, [pc, #164]	@ (8002278 <MX_GPIO_Init+0xec>)
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	4a28      	ldr	r2, [pc, #160]	@ (8002278 <MX_GPIO_Init+0xec>)
 80021d6:	f043 0308 	orr.w	r3, r3, #8
 80021da:	6193      	str	r3, [r2, #24]
 80021dc:	4b26      	ldr	r3, [pc, #152]	@ (8002278 <MX_GPIO_Init+0xec>)
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	f003 0308 	and.w	r3, r3, #8
 80021e4:	607b      	str	r3, [r7, #4]
 80021e6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Relay1_Pin|Relay2_Pin|Relay3_Pin|LORA_STATUS_Pin
 80021e8:	2200      	movs	r2, #0
 80021ea:	f240 3147 	movw	r1, #839	@ 0x347
 80021ee:	4823      	ldr	r0, [pc, #140]	@ (800227c <MX_GPIO_Init+0xf0>)
 80021f0:	f001 fd3e 	bl	8003c70 <HAL_GPIO_WritePin>
                          |LED4_Pin|LED5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LORA_SELECT_Pin, GPIO_PIN_RESET);
 80021f4:	2200      	movs	r2, #0
 80021f6:	f44f 4119 	mov.w	r1, #39168	@ 0x9900
 80021fa:	4821      	ldr	r0, [pc, #132]	@ (8002280 <MX_GPIO_Init+0xf4>)
 80021fc:	f001 fd38 	bl	8003c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Relay1_Pin Relay2_Pin Relay3_Pin LORA_STATUS_Pin
                           LED4_Pin LED5_Pin */
  GPIO_InitStruct.Pin = Relay1_Pin|Relay2_Pin|Relay3_Pin|LORA_STATUS_Pin
 8002200:	f240 3347 	movw	r3, #839	@ 0x347
 8002204:	613b      	str	r3, [r7, #16]
                          |LED4_Pin|LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002206:	2301      	movs	r3, #1
 8002208:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220a:	2300      	movs	r3, #0
 800220c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220e:	2302      	movs	r3, #2
 8002210:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002212:	f107 0310 	add.w	r3, r7, #16
 8002216:	4619      	mov	r1, r3
 8002218:	4818      	ldr	r0, [pc, #96]	@ (800227c <MX_GPIO_Init+0xf0>)
 800221a:	f001 fba5 	bl	8003968 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWITCH1_Pin SWITCH2_Pin SWITCH3_Pin SWITCH4_Pin */
  GPIO_InitStruct.Pin = SWITCH1_Pin|SWITCH2_Pin|SWITCH3_Pin|SWITCH4_Pin;
 800221e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8002222:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002224:	4b17      	ldr	r3, [pc, #92]	@ (8002284 <MX_GPIO_Init+0xf8>)
 8002226:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002228:	2301      	movs	r3, #1
 800222a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800222c:	f107 0310 	add.w	r3, r7, #16
 8002230:	4619      	mov	r1, r3
 8002232:	4812      	ldr	r0, [pc, #72]	@ (800227c <MX_GPIO_Init+0xf0>)
 8002234:	f001 fb98 	bl	8003968 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LORA_SELECT_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LORA_SELECT_Pin;
 8002238:	f44f 4319 	mov.w	r3, #39168	@ 0x9900
 800223c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800223e:	2301      	movs	r3, #1
 8002240:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002242:	2300      	movs	r3, #0
 8002244:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002246:	2302      	movs	r3, #2
 8002248:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800224a:	f107 0310 	add.w	r3, r7, #16
 800224e:	4619      	mov	r1, r3
 8002250:	480b      	ldr	r0, [pc, #44]	@ (8002280 <MX_GPIO_Init+0xf4>)
 8002252:	f001 fb89 	bl	8003968 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_DATA_Pin */
  GPIO_InitStruct.Pin = RF_DATA_Pin;
 8002256:	2380      	movs	r3, #128	@ 0x80
 8002258:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800225a:	2300      	movs	r3, #0
 800225c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225e:	2300      	movs	r3, #0
 8002260:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RF_DATA_GPIO_Port, &GPIO_InitStruct);
 8002262:	f107 0310 	add.w	r3, r7, #16
 8002266:	4619      	mov	r1, r3
 8002268:	4804      	ldr	r0, [pc, #16]	@ (800227c <MX_GPIO_Init+0xf0>)
 800226a:	f001 fb7d 	bl	8003968 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800226e:	bf00      	nop
 8002270:	3720      	adds	r7, #32
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40021000 	.word	0x40021000
 800227c:	40010c00 	.word	0x40010c00
 8002280:	40010800 	.word	0x40010800
 8002284:	10310000 	.word	0x10310000

08002288 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800228c:	b672      	cpsid	i
}
 800228e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002290:	bf00      	nop
 8002292:	e7fd      	b.n	8002290 <Error_Handler+0x8>

08002294 <Relay_Init>:
    { Relay2_GPIO_Port, Relay2_Pin },
    { Relay3_GPIO_Port, Relay3_Pin }
};

void Relay_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800229a:	1d3b      	adds	r3, r7, #4
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	60da      	str	r2, [r3, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002320 <Relay_Init+0x8c>)
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	4a1d      	ldr	r2, [pc, #116]	@ (8002320 <Relay_Init+0x8c>)
 80022ac:	f043 0308 	orr.w	r3, r3, #8
 80022b0:	6193      	str	r3, [r2, #24]
 80022b2:	4b1b      	ldr	r3, [pc, #108]	@ (8002320 <Relay_Init+0x8c>)
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	f003 0308 	and.w	r3, r3, #8
 80022ba:	603b      	str	r3, [r7, #0]
 80022bc:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80022be:	2301      	movs	r3, #1
 80022c0:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 80022c2:	2300      	movs	r3, #0
 80022c4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c6:	2302      	movs	r3, #2
 80022c8:	613b      	str	r3, [r7, #16]

    for (int i = 0; i < NUM_RELAYS; i++) {
 80022ca:	2300      	movs	r3, #0
 80022cc:	617b      	str	r3, [r7, #20]
 80022ce:	e01e      	b.n	800230e <Relay_Init+0x7a>
        GPIO_InitStruct.Pin = relays[i].pin;
 80022d0:	4a14      	ldr	r2, [pc, #80]	@ (8002324 <Relay_Init+0x90>)
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	4413      	add	r3, r2
 80022d8:	889b      	ldrh	r3, [r3, #4]
 80022da:	607b      	str	r3, [r7, #4]
        HAL_GPIO_Init(relays[i].port, &GPIO_InitStruct);
 80022dc:	4a11      	ldr	r2, [pc, #68]	@ (8002324 <Relay_Init+0x90>)
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80022e4:	1d3a      	adds	r2, r7, #4
 80022e6:	4611      	mov	r1, r2
 80022e8:	4618      	mov	r0, r3
 80022ea:	f001 fb3d 	bl	8003968 <HAL_GPIO_Init>
        // Ensure relays are off initially
        HAL_GPIO_WritePin(relays[i].port, relays[i].pin,
 80022ee:	4a0d      	ldr	r2, [pc, #52]	@ (8002324 <Relay_Init+0x90>)
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80022f6:	4a0b      	ldr	r2, [pc, #44]	@ (8002324 <Relay_Init+0x90>)
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	4413      	add	r3, r2
 80022fe:	889b      	ldrh	r3, [r3, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	4619      	mov	r1, r3
 8002304:	f001 fcb4 	bl	8003c70 <HAL_GPIO_WritePin>
    for (int i = 0; i < NUM_RELAYS; i++) {
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	3301      	adds	r3, #1
 800230c:	617b      	str	r3, [r7, #20]
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	2b02      	cmp	r3, #2
 8002312:	dddd      	ble.n	80022d0 <Relay_Init+0x3c>
                          (RELAY_ACTIVE_STATE == GPIO_PIN_SET) ? GPIO_PIN_RESET : GPIO_PIN_SET);
    }
}
 8002314:	bf00      	nop
 8002316:	bf00      	nop
 8002318:	3718      	adds	r7, #24
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40021000 	.word	0x40021000
 8002324:	080097b8 	.word	0x080097b8

08002328 <RF_Init>:
    __HAL_TIM_SET_COUNTER(&htim3, 0);
    while (__HAL_TIM_GET_COUNTER(&htim3) < us);
}

// --- init RF pin (set low) ---
void RF_Init(void) {
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RF_DATA_GPIO_Port, RF_DATA_Pin, GPIO_PIN_RESET);
 800232c:	2200      	movs	r2, #0
 800232e:	2180      	movs	r1, #128	@ 0x80
 8002330:	4802      	ldr	r0, [pc, #8]	@ (800233c <RF_Init+0x14>)
 8002332:	f001 fc9d 	bl	8003c70 <HAL_GPIO_WritePin>
}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40010c00 	.word	0x40010c00

08002340 <refreshInactivityTimer>:
}
static inline void lcd_line0(const char* s){ lcd_line(0,s); }
static inline void lcd_line1(const char* s){ lcd_line(1,s); }

/* ===== Utilities ===== */
static void refreshInactivityTimer(void){ lastUserAction = HAL_GetTick(); }
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
 8002344:	f000 fbfc 	bl	8002b40 <HAL_GetTick>
 8002348:	4603      	mov	r3, r0
 800234a:	4a02      	ldr	r2, [pc, #8]	@ (8002354 <refreshInactivityTimer+0x14>)
 800234c:	6013      	str	r3, [r2, #0]
 800234e:	bf00      	nop
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	2000041c 	.word	0x2000041c

08002358 <Screen_Init>:
        }
    }
}

/* ===== Initialization / Reset ===== */
void Screen_Init(void){
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
    lcd_init();
 800235c:	f7ff fa6d 	bl	800183a <lcd_init>
    ui = UI_WELCOME;
 8002360:	4b15      	ldr	r3, [pc, #84]	@ (80023b8 <Screen_Init+0x60>)
 8002362:	2200      	movs	r2, #0
 8002364:	701a      	strb	r2, [r3, #0]
    last_ui = UI_MAX_;
 8002366:	4b15      	ldr	r3, [pc, #84]	@ (80023bc <Screen_Init+0x64>)
 8002368:	2212      	movs	r2, #18
 800236a:	701a      	strb	r2, [r3, #0]
    screenNeedsRefresh = true;
 800236c:	4b14      	ldr	r3, [pc, #80]	@ (80023c0 <Screen_Init+0x68>)
 800236e:	2201      	movs	r2, #1
 8002370:	701a      	strb	r2, [r3, #0]
    lastLcdUpdateTime = HAL_GetTick();
 8002372:	f000 fbe5 	bl	8002b40 <HAL_GetTick>
 8002376:	4603      	mov	r3, r0
 8002378:	4a12      	ldr	r2, [pc, #72]	@ (80023c4 <Screen_Init+0x6c>)
 800237a:	6013      	str	r3, [r2, #0]
    refreshInactivityTimer();
 800237c:	f7ff ffe0 	bl	8002340 <refreshInactivityTimer>

    edit_search_gap_s = searchSettings.testingGapSeconds;
 8002380:	4b11      	ldr	r3, [pc, #68]	@ (80023c8 <Screen_Init+0x70>)
 8002382:	885a      	ldrh	r2, [r3, #2]
 8002384:	4b11      	ldr	r3, [pc, #68]	@ (80023cc <Screen_Init+0x74>)
 8002386:	801a      	strh	r2, [r3, #0]
    edit_search_dry_s = searchSettings.dryRunTimeSeconds;
 8002388:	4b0f      	ldr	r3, [pc, #60]	@ (80023c8 <Screen_Init+0x70>)
 800238a:	889a      	ldrh	r2, [r3, #4]
 800238c:	4b10      	ldr	r3, [pc, #64]	@ (80023d0 <Screen_Init+0x78>)
 800238e:	801a      	strh	r2, [r3, #0]
    edit_twist_on_s = twistSettings.onDurationSeconds;
 8002390:	4b10      	ldr	r3, [pc, #64]	@ (80023d4 <Screen_Init+0x7c>)
 8002392:	885a      	ldrh	r2, [r3, #2]
 8002394:	4b10      	ldr	r3, [pc, #64]	@ (80023d8 <Screen_Init+0x80>)
 8002396:	801a      	strh	r2, [r3, #0]
    edit_twist_off_s = twistSettings.offDurationSeconds;
 8002398:	4b0e      	ldr	r3, [pc, #56]	@ (80023d4 <Screen_Init+0x7c>)
 800239a:	889a      	ldrh	r2, [r3, #4]
 800239c:	4b0f      	ldr	r3, [pc, #60]	@ (80023dc <Screen_Init+0x84>)
 800239e:	801a      	strh	r2, [r3, #0]
    edit_countdown_min = (uint16_t)(countdownDuration / 60u);
 80023a0:	4b0f      	ldr	r3, [pc, #60]	@ (80023e0 <Screen_Init+0x88>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a0f      	ldr	r2, [pc, #60]	@ (80023e4 <Screen_Init+0x8c>)
 80023a6:	fba2 2303 	umull	r2, r3, r2, r3
 80023aa:	095b      	lsrs	r3, r3, #5
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	4b0e      	ldr	r3, [pc, #56]	@ (80023e8 <Screen_Init+0x90>)
 80023b0:	801a      	strh	r2, [r3, #0]
}
 80023b2:	bf00      	nop
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20000418 	.word	0x20000418
 80023bc:	20000026 	.word	0x20000026
 80023c0:	20000419 	.word	0x20000419
 80023c4:	20000414 	.word	0x20000414
 80023c8:	20000018 	.word	0x20000018
 80023cc:	20000028 	.word	0x20000028
 80023d0:	2000002a 	.word	0x2000002a
 80023d4:	20000020 	.word	0x20000020
 80023d8:	2000002c 	.word	0x2000002c
 80023dc:	2000002e 	.word	0x2000002e
 80023e0:	20000410 	.word	0x20000410
 80023e4:	88888889 	.word	0x88888889
 80023e8:	20000030 	.word	0x20000030

080023ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80023f2:	4b15      	ldr	r3, [pc, #84]	@ (8002448 <HAL_MspInit+0x5c>)
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	4a14      	ldr	r2, [pc, #80]	@ (8002448 <HAL_MspInit+0x5c>)
 80023f8:	f043 0301 	orr.w	r3, r3, #1
 80023fc:	6193      	str	r3, [r2, #24]
 80023fe:	4b12      	ldr	r3, [pc, #72]	@ (8002448 <HAL_MspInit+0x5c>)
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	60bb      	str	r3, [r7, #8]
 8002408:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800240a:	4b0f      	ldr	r3, [pc, #60]	@ (8002448 <HAL_MspInit+0x5c>)
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	4a0e      	ldr	r2, [pc, #56]	@ (8002448 <HAL_MspInit+0x5c>)
 8002410:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002414:	61d3      	str	r3, [r2, #28]
 8002416:	4b0c      	ldr	r3, [pc, #48]	@ (8002448 <HAL_MspInit+0x5c>)
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800241e:	607b      	str	r3, [r7, #4]
 8002420:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002422:	4b0a      	ldr	r3, [pc, #40]	@ (800244c <HAL_MspInit+0x60>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	4a04      	ldr	r2, [pc, #16]	@ (800244c <HAL_MspInit+0x60>)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800243e:	bf00      	nop
 8002440:	3714      	adds	r7, #20
 8002442:	46bd      	mov	sp, r7
 8002444:	bc80      	pop	{r7}
 8002446:	4770      	bx	lr
 8002448:	40021000 	.word	0x40021000
 800244c:	40010000 	.word	0x40010000

08002450 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b088      	sub	sp, #32
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002458:	f107 0310 	add.w	r3, r7, #16
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	605a      	str	r2, [r3, #4]
 8002462:	609a      	str	r2, [r3, #8]
 8002464:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a18      	ldr	r2, [pc, #96]	@ (80024cc <HAL_ADC_MspInit+0x7c>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d129      	bne.n	80024c4 <HAL_ADC_MspInit+0x74>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002470:	4b17      	ldr	r3, [pc, #92]	@ (80024d0 <HAL_ADC_MspInit+0x80>)
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	4a16      	ldr	r2, [pc, #88]	@ (80024d0 <HAL_ADC_MspInit+0x80>)
 8002476:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800247a:	6193      	str	r3, [r2, #24]
 800247c:	4b14      	ldr	r3, [pc, #80]	@ (80024d0 <HAL_ADC_MspInit+0x80>)
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002488:	4b11      	ldr	r3, [pc, #68]	@ (80024d0 <HAL_ADC_MspInit+0x80>)
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	4a10      	ldr	r2, [pc, #64]	@ (80024d0 <HAL_ADC_MspInit+0x80>)
 800248e:	f043 0304 	orr.w	r3, r3, #4
 8002492:	6193      	str	r3, [r2, #24]
 8002494:	4b0e      	ldr	r3, [pc, #56]	@ (80024d0 <HAL_ADC_MspInit+0x80>)
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	f003 0304 	and.w	r3, r3, #4
 800249c:	60bb      	str	r3, [r7, #8]
 800249e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80024a0:	23ff      	movs	r3, #255	@ 0xff
 80024a2:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024a4:	2303      	movs	r3, #3
 80024a6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a8:	f107 0310 	add.w	r3, r7, #16
 80024ac:	4619      	mov	r1, r3
 80024ae:	4809      	ldr	r0, [pc, #36]	@ (80024d4 <HAL_ADC_MspInit+0x84>)
 80024b0:	f001 fa5a 	bl	8003968 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80024b4:	2200      	movs	r2, #0
 80024b6:	2100      	movs	r1, #0
 80024b8:	2012      	movs	r0, #18
 80024ba:	f001 fa1e 	bl	80038fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80024be:	2012      	movs	r0, #18
 80024c0:	f001 fa37 	bl	8003932 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80024c4:	bf00      	nop
 80024c6:	3720      	adds	r7, #32
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40012400 	.word	0x40012400
 80024d0:	40021000 	.word	0x40021000
 80024d4:	40010800 	.word	0x40010800

080024d8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b088      	sub	sp, #32
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e0:	f107 0310 	add.w	r3, r7, #16
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	605a      	str	r2, [r3, #4]
 80024ea:	609a      	str	r2, [r3, #8]
 80024ec:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a16      	ldr	r2, [pc, #88]	@ (800254c <HAL_I2C_MspInit+0x74>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d124      	bne.n	8002542 <HAL_I2C_MspInit+0x6a>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024f8:	4b15      	ldr	r3, [pc, #84]	@ (8002550 <HAL_I2C_MspInit+0x78>)
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	4a14      	ldr	r2, [pc, #80]	@ (8002550 <HAL_I2C_MspInit+0x78>)
 80024fe:	f043 0308 	orr.w	r3, r3, #8
 8002502:	6193      	str	r3, [r2, #24]
 8002504:	4b12      	ldr	r3, [pc, #72]	@ (8002550 <HAL_I2C_MspInit+0x78>)
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	f003 0308 	and.w	r3, r3, #8
 800250c:	60fb      	str	r3, [r7, #12]
 800250e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002510:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002514:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002516:	2312      	movs	r3, #18
 8002518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800251a:	2303      	movs	r3, #3
 800251c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800251e:	f107 0310 	add.w	r3, r7, #16
 8002522:	4619      	mov	r1, r3
 8002524:	480b      	ldr	r0, [pc, #44]	@ (8002554 <HAL_I2C_MspInit+0x7c>)
 8002526:	f001 fa1f 	bl	8003968 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800252a:	4b09      	ldr	r3, [pc, #36]	@ (8002550 <HAL_I2C_MspInit+0x78>)
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	4a08      	ldr	r2, [pc, #32]	@ (8002550 <HAL_I2C_MspInit+0x78>)
 8002530:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002534:	61d3      	str	r3, [r2, #28]
 8002536:	4b06      	ldr	r3, [pc, #24]	@ (8002550 <HAL_I2C_MspInit+0x78>)
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800253e:	60bb      	str	r3, [r7, #8]
 8002540:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002542:	bf00      	nop
 8002544:	3720      	adds	r7, #32
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40005800 	.word	0x40005800
 8002550:	40021000 	.word	0x40021000
 8002554:	40010c00 	.word	0x40010c00

08002558 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a0f      	ldr	r2, [pc, #60]	@ (80025a4 <HAL_RTC_MspInit+0x4c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d118      	bne.n	800259c <HAL_RTC_MspInit+0x44>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800256a:	f002 f835 	bl	80045d8 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800256e:	4b0e      	ldr	r3, [pc, #56]	@ (80025a8 <HAL_RTC_MspInit+0x50>)
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	4a0d      	ldr	r2, [pc, #52]	@ (80025a8 <HAL_RTC_MspInit+0x50>)
 8002574:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002578:	61d3      	str	r3, [r2, #28]
 800257a:	4b0b      	ldr	r3, [pc, #44]	@ (80025a8 <HAL_RTC_MspInit+0x50>)
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002586:	4b09      	ldr	r3, [pc, #36]	@ (80025ac <HAL_RTC_MspInit+0x54>)
 8002588:	2201      	movs	r2, #1
 800258a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800258c:	2200      	movs	r2, #0
 800258e:	2100      	movs	r1, #0
 8002590:	2029      	movs	r0, #41	@ 0x29
 8002592:	f001 f9b2 	bl	80038fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002596:	2029      	movs	r0, #41	@ 0x29
 8002598:	f001 f9cb 	bl	8003932 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 800259c:	bf00      	nop
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40002800 	.word	0x40002800
 80025a8:	40021000 	.word	0x40021000
 80025ac:	4242043c 	.word	0x4242043c

080025b0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08a      	sub	sp, #40	@ 0x28
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b8:	f107 0314 	add.w	r3, r7, #20
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	605a      	str	r2, [r3, #4]
 80025c2:	609a      	str	r2, [r3, #8]
 80025c4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a22      	ldr	r2, [pc, #136]	@ (8002654 <HAL_SPI_MspInit+0xa4>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d13d      	bne.n	800264c <HAL_SPI_MspInit+0x9c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025d0:	4b21      	ldr	r3, [pc, #132]	@ (8002658 <HAL_SPI_MspInit+0xa8>)
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	4a20      	ldr	r2, [pc, #128]	@ (8002658 <HAL_SPI_MspInit+0xa8>)
 80025d6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80025da:	6193      	str	r3, [r2, #24]
 80025dc:	4b1e      	ldr	r3, [pc, #120]	@ (8002658 <HAL_SPI_MspInit+0xa8>)
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025e4:	613b      	str	r3, [r7, #16]
 80025e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002658 <HAL_SPI_MspInit+0xa8>)
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	4a1a      	ldr	r2, [pc, #104]	@ (8002658 <HAL_SPI_MspInit+0xa8>)
 80025ee:	f043 0308 	orr.w	r3, r3, #8
 80025f2:	6193      	str	r3, [r2, #24]
 80025f4:	4b18      	ldr	r3, [pc, #96]	@ (8002658 <HAL_SPI_MspInit+0xa8>)
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	f003 0308 	and.w	r3, r3, #8
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8002600:	2328      	movs	r3, #40	@ 0x28
 8002602:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002604:	2302      	movs	r3, #2
 8002606:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002608:	2303      	movs	r3, #3
 800260a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800260c:	f107 0314 	add.w	r3, r7, #20
 8002610:	4619      	mov	r1, r3
 8002612:	4812      	ldr	r0, [pc, #72]	@ (800265c <HAL_SPI_MspInit+0xac>)
 8002614:	f001 f9a8 	bl	8003968 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002618:	2310      	movs	r3, #16
 800261a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800261c:	2300      	movs	r3, #0
 800261e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002620:	2300      	movs	r3, #0
 8002622:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002624:	f107 0314 	add.w	r3, r7, #20
 8002628:	4619      	mov	r1, r3
 800262a:	480c      	ldr	r0, [pc, #48]	@ (800265c <HAL_SPI_MspInit+0xac>)
 800262c:	f001 f99c 	bl	8003968 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8002630:	4b0b      	ldr	r3, [pc, #44]	@ (8002660 <HAL_SPI_MspInit+0xb0>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	627b      	str	r3, [r7, #36]	@ 0x24
 8002636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002638:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800263c:	627b      	str	r3, [r7, #36]	@ 0x24
 800263e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002640:	f043 0301 	orr.w	r3, r3, #1
 8002644:	627b      	str	r3, [r7, #36]	@ 0x24
 8002646:	4a06      	ldr	r2, [pc, #24]	@ (8002660 <HAL_SPI_MspInit+0xb0>)
 8002648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264a:	6053      	str	r3, [r2, #4]

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800264c:	bf00      	nop
 800264e:	3728      	adds	r7, #40	@ 0x28
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40013000 	.word	0x40013000
 8002658:	40021000 	.word	0x40021000
 800265c:	40010c00 	.word	0x40010c00
 8002660:	40010000 	.word	0x40010000

08002664 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a09      	ldr	r2, [pc, #36]	@ (8002698 <HAL_TIM_Base_MspInit+0x34>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d10b      	bne.n	800268e <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002676:	4b09      	ldr	r3, [pc, #36]	@ (800269c <HAL_TIM_Base_MspInit+0x38>)
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	4a08      	ldr	r2, [pc, #32]	@ (800269c <HAL_TIM_Base_MspInit+0x38>)
 800267c:	f043 0302 	orr.w	r3, r3, #2
 8002680:	61d3      	str	r3, [r2, #28]
 8002682:	4b06      	ldr	r3, [pc, #24]	@ (800269c <HAL_TIM_Base_MspInit+0x38>)
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 800268e:	bf00      	nop
 8002690:	3714      	adds	r7, #20
 8002692:	46bd      	mov	sp, r7
 8002694:	bc80      	pop	{r7}
 8002696:	4770      	bx	lr
 8002698:	40000400 	.word	0x40000400
 800269c:	40021000 	.word	0x40021000

080026a0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b088      	sub	sp, #32
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a8:	f107 0310 	add.w	r3, r7, #16
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	605a      	str	r2, [r3, #4]
 80026b2:	609a      	str	r2, [r3, #8]
 80026b4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a1c      	ldr	r2, [pc, #112]	@ (800272c <HAL_UART_MspInit+0x8c>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d131      	bne.n	8002724 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002730 <HAL_UART_MspInit+0x90>)
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	4a1a      	ldr	r2, [pc, #104]	@ (8002730 <HAL_UART_MspInit+0x90>)
 80026c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026ca:	6193      	str	r3, [r2, #24]
 80026cc:	4b18      	ldr	r3, [pc, #96]	@ (8002730 <HAL_UART_MspInit+0x90>)
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026d4:	60fb      	str	r3, [r7, #12]
 80026d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d8:	4b15      	ldr	r3, [pc, #84]	@ (8002730 <HAL_UART_MspInit+0x90>)
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	4a14      	ldr	r2, [pc, #80]	@ (8002730 <HAL_UART_MspInit+0x90>)
 80026de:	f043 0304 	orr.w	r3, r3, #4
 80026e2:	6193      	str	r3, [r2, #24]
 80026e4:	4b12      	ldr	r3, [pc, #72]	@ (8002730 <HAL_UART_MspInit+0x90>)
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	60bb      	str	r3, [r7, #8]
 80026ee:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80026f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80026f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f6:	2302      	movs	r3, #2
 80026f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026fa:	2303      	movs	r3, #3
 80026fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026fe:	f107 0310 	add.w	r3, r7, #16
 8002702:	4619      	mov	r1, r3
 8002704:	480b      	ldr	r0, [pc, #44]	@ (8002734 <HAL_UART_MspInit+0x94>)
 8002706:	f001 f92f 	bl	8003968 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800270a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800270e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002710:	2300      	movs	r3, #0
 8002712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002714:	2300      	movs	r3, #0
 8002716:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002718:	f107 0310 	add.w	r3, r7, #16
 800271c:	4619      	mov	r1, r3
 800271e:	4805      	ldr	r0, [pc, #20]	@ (8002734 <HAL_UART_MspInit+0x94>)
 8002720:	f001 f922 	bl	8003968 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002724:	bf00      	nop
 8002726:	3720      	adds	r7, #32
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40013800 	.word	0x40013800
 8002730:	40021000 	.word	0x40021000
 8002734:	40010800 	.word	0x40010800

08002738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800273c:	bf00      	nop
 800273e:	e7fd      	b.n	800273c <NMI_Handler+0x4>

08002740 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002744:	bf00      	nop
 8002746:	e7fd      	b.n	8002744 <HardFault_Handler+0x4>

08002748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800274c:	bf00      	nop
 800274e:	e7fd      	b.n	800274c <MemManage_Handler+0x4>

08002750 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002754:	bf00      	nop
 8002756:	e7fd      	b.n	8002754 <BusFault_Handler+0x4>

08002758 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800275c:	bf00      	nop
 800275e:	e7fd      	b.n	800275c <UsageFault_Handler+0x4>

08002760 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002764:	bf00      	nop
 8002766:	46bd      	mov	sp, r7
 8002768:	bc80      	pop	{r7}
 800276a:	4770      	bx	lr

0800276c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002770:	bf00      	nop
 8002772:	46bd      	mov	sp, r7
 8002774:	bc80      	pop	{r7}
 8002776:	4770      	bx	lr

08002778 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800277c:	bf00      	nop
 800277e:	46bd      	mov	sp, r7
 8002780:	bc80      	pop	{r7}
 8002782:	4770      	bx	lr

08002784 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002788:	f000 f9c8 	bl	8002b1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800278c:	bf00      	nop
 800278e:	bd80      	pop	{r7, pc}

08002790 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002794:	4802      	ldr	r0, [pc, #8]	@ (80027a0 <ADC1_2_IRQHandler+0x10>)
 8002796:	f000 fcc5 	bl	8003124 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20000290 	.word	0x20000290

080027a4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80027a8:	4802      	ldr	r0, [pc, #8]	@ (80027b4 <RTC_Alarm_IRQHandler+0x10>)
 80027aa:	f003 f807 	bl	80057bc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80027ae:	bf00      	nop
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	20000314 	.word	0x20000314

080027b8 <now_ms>:
static GPIO_PinState last_raw[SWITCH_COUNT];       // last sampled raw pin

static uint32_t      press_start_ms[SWITCH_COUNT]; // for long press
static bool          long_fired[SWITCH_COUNT];

static inline uint32_t now_ms(void) { return HAL_GetTick(); }
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	f000 f9c0 	bl	8002b40 <HAL_GetTick>
 80027c0:	4603      	mov	r3, r0
 80027c2:	4618      	mov	r0, r3
 80027c4:	bd80      	pop	{r7, pc}
	...

080027c8 <Switches_Init>:
    }
}

/* --- Init all switches as input pullup --- */
void Switches_Init(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ce:	1d3b      	adds	r3, r7, #4
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	605a      	str	r2, [r3, #4]
 80027d6:	609a      	str	r2, [r3, #8]
 80027d8:	60da      	str	r2, [r3, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027da:	4b20      	ldr	r3, [pc, #128]	@ (800285c <Switches_Init+0x94>)
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	4a1f      	ldr	r2, [pc, #124]	@ (800285c <Switches_Init+0x94>)
 80027e0:	f043 0308 	orr.w	r3, r3, #8
 80027e4:	6193      	str	r3, [r2, #24]
 80027e6:	4b1d      	ldr	r3, [pc, #116]	@ (800285c <Switches_Init+0x94>)
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	f003 0308 	and.w	r3, r3, #8
 80027ee:	603b      	str	r3, [r7, #0]
 80027f0:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027f2:	2300      	movs	r3, #0
 80027f4:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027f6:	2301      	movs	r3, #1
 80027f8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pin  = SWITCH1_Pin|SWITCH2_Pin|SWITCH3_Pin|SWITCH4_Pin;
 80027fa:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80027fe:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(SWITCH1_GPIO_Port, &GPIO_InitStruct);
 8002800:	1d3b      	adds	r3, r7, #4
 8002802:	4619      	mov	r1, r3
 8002804:	4816      	ldr	r0, [pc, #88]	@ (8002860 <Switches_Init+0x98>)
 8002806:	f001 f8af 	bl	8003968 <HAL_GPIO_Init>

    for (int i = 0; i < SWITCH_COUNT; ++i) {
 800280a:	2300      	movs	r3, #0
 800280c:	617b      	str	r3, [r7, #20]
 800280e:	e01d      	b.n	800284c <Switches_Init+0x84>
        stable_state[i]   = GPIO_PIN_SET;  // released
 8002810:	4a14      	ldr	r2, [pc, #80]	@ (8002864 <Switches_Init+0x9c>)
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	4413      	add	r3, r2
 8002816:	2201      	movs	r2, #1
 8002818:	701a      	strb	r2, [r3, #0]
        last_raw[i]       = GPIO_PIN_SET;
 800281a:	4a13      	ldr	r2, [pc, #76]	@ (8002868 <Switches_Init+0xa0>)
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	4413      	add	r3, r2
 8002820:	2201      	movs	r2, #1
 8002822:	701a      	strb	r2, [r3, #0]
        last_change[i]    = now_ms();
 8002824:	f7ff ffc8 	bl	80027b8 <now_ms>
 8002828:	4602      	mov	r2, r0
 800282a:	4910      	ldr	r1, [pc, #64]	@ (800286c <Switches_Init+0xa4>)
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        press_start_ms[i] = 0;
 8002832:	4a0f      	ldr	r2, [pc, #60]	@ (8002870 <Switches_Init+0xa8>)
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	2100      	movs	r1, #0
 8002838:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        long_fired[i]     = false;
 800283c:	4a0d      	ldr	r2, [pc, #52]	@ (8002874 <Switches_Init+0xac>)
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	4413      	add	r3, r2
 8002842:	2200      	movs	r2, #0
 8002844:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < SWITCH_COUNT; ++i) {
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	3301      	adds	r3, #1
 800284a:	617b      	str	r3, [r7, #20]
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	2b03      	cmp	r3, #3
 8002850:	ddde      	ble.n	8002810 <Switches_Init+0x48>
    }
}
 8002852:	bf00      	nop
 8002854:	bf00      	nop
 8002856:	3718      	adds	r7, #24
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40021000 	.word	0x40021000
 8002860:	40010c00 	.word	0x40010c00
 8002864:	20000420 	.word	0x20000420
 8002868:	20000434 	.word	0x20000434
 800286c:	20000424 	.word	0x20000424
 8002870:	20000438 	.word	0x20000438
 8002874:	20000448 	.word	0x20000448

08002878 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  return 1;
 800287c:	2301      	movs	r3, #1
}
 800287e:	4618      	mov	r0, r3
 8002880:	46bd      	mov	sp, r7
 8002882:	bc80      	pop	{r7}
 8002884:	4770      	bx	lr

08002886 <_kill>:

int _kill(int pid, int sig)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b082      	sub	sp, #8
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
 800288e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002890:	f004 ff64 	bl	800775c <__errno>
 8002894:	4603      	mov	r3, r0
 8002896:	2216      	movs	r2, #22
 8002898:	601a      	str	r2, [r3, #0]
  return -1;
 800289a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <_exit>:

void _exit (int status)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b082      	sub	sp, #8
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80028ae:	f04f 31ff 	mov.w	r1, #4294967295
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7ff ffe7 	bl	8002886 <_kill>
  while (1) {}    /* Make sure we hang here */
 80028b8:	bf00      	nop
 80028ba:	e7fd      	b.n	80028b8 <_exit+0x12>

080028bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028c8:	2300      	movs	r3, #0
 80028ca:	617b      	str	r3, [r7, #20]
 80028cc:	e00a      	b.n	80028e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028ce:	f3af 8000 	nop.w
 80028d2:	4601      	mov	r1, r0
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	1c5a      	adds	r2, r3, #1
 80028d8:	60ba      	str	r2, [r7, #8]
 80028da:	b2ca      	uxtb	r2, r1
 80028dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	3301      	adds	r3, #1
 80028e2:	617b      	str	r3, [r7, #20]
 80028e4:	697a      	ldr	r2, [r7, #20]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	dbf0      	blt.n	80028ce <_read+0x12>
  }

  return len;
 80028ec:	687b      	ldr	r3, [r7, #4]
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3718      	adds	r7, #24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b086      	sub	sp, #24
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	60f8      	str	r0, [r7, #12]
 80028fe:	60b9      	str	r1, [r7, #8]
 8002900:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002902:	2300      	movs	r3, #0
 8002904:	617b      	str	r3, [r7, #20]
 8002906:	e009      	b.n	800291c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	1c5a      	adds	r2, r3, #1
 800290c:	60ba      	str	r2, [r7, #8]
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	4618      	mov	r0, r3
 8002912:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	3301      	adds	r3, #1
 800291a:	617b      	str	r3, [r7, #20]
 800291c:	697a      	ldr	r2, [r7, #20]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	429a      	cmp	r2, r3
 8002922:	dbf1      	blt.n	8002908 <_write+0x12>
  }
  return len;
 8002924:	687b      	ldr	r3, [r7, #4]
}
 8002926:	4618      	mov	r0, r3
 8002928:	3718      	adds	r7, #24
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <_close>:

int _close(int file)
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002936:	f04f 33ff 	mov.w	r3, #4294967295
}
 800293a:	4618      	mov	r0, r3
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr

08002944 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002954:	605a      	str	r2, [r3, #4]
  return 0;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	bc80      	pop	{r7}
 8002960:	4770      	bx	lr

08002962 <_isatty>:

int _isatty(int file)
{
 8002962:	b480      	push	{r7}
 8002964:	b083      	sub	sp, #12
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800296a:	2301      	movs	r3, #1
}
 800296c:	4618      	mov	r0, r3
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	bc80      	pop	{r7}
 8002974:	4770      	bx	lr

08002976 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002976:	b480      	push	{r7}
 8002978:	b085      	sub	sp, #20
 800297a:	af00      	add	r7, sp, #0
 800297c:	60f8      	str	r0, [r7, #12]
 800297e:	60b9      	str	r1, [r7, #8]
 8002980:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3714      	adds	r7, #20
 8002988:	46bd      	mov	sp, r7
 800298a:	bc80      	pop	{r7}
 800298c:	4770      	bx	lr
	...

08002990 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002998:	4a14      	ldr	r2, [pc, #80]	@ (80029ec <_sbrk+0x5c>)
 800299a:	4b15      	ldr	r3, [pc, #84]	@ (80029f0 <_sbrk+0x60>)
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029a4:	4b13      	ldr	r3, [pc, #76]	@ (80029f4 <_sbrk+0x64>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d102      	bne.n	80029b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029ac:	4b11      	ldr	r3, [pc, #68]	@ (80029f4 <_sbrk+0x64>)
 80029ae:	4a12      	ldr	r2, [pc, #72]	@ (80029f8 <_sbrk+0x68>)
 80029b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029b2:	4b10      	ldr	r3, [pc, #64]	@ (80029f4 <_sbrk+0x64>)
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4413      	add	r3, r2
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d207      	bcs.n	80029d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029c0:	f004 fecc 	bl	800775c <__errno>
 80029c4:	4603      	mov	r3, r0
 80029c6:	220c      	movs	r2, #12
 80029c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029ca:	f04f 33ff 	mov.w	r3, #4294967295
 80029ce:	e009      	b.n	80029e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029d0:	4b08      	ldr	r3, [pc, #32]	@ (80029f4 <_sbrk+0x64>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029d6:	4b07      	ldr	r3, [pc, #28]	@ (80029f4 <_sbrk+0x64>)
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4413      	add	r3, r2
 80029de:	4a05      	ldr	r2, [pc, #20]	@ (80029f4 <_sbrk+0x64>)
 80029e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029e2:	68fb      	ldr	r3, [r7, #12]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3718      	adds	r7, #24
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	20005000 	.word	0x20005000
 80029f0:	00000400 	.word	0x00000400
 80029f4:	2000044c 	.word	0x2000044c
 80029f8:	200005e8 	.word	0x200005e8

080029fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a00:	bf00      	nop
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr

08002a08 <UART_Init>:

/**
  * @brief Initialize UART reception (interrupt mode, one byte at a time).
  */
void UART_Init(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
    // Clear the buffer and reset index
    memset(rxBuffer, 0, sizeof(rxBuffer));
 8002a0c:	2240      	movs	r2, #64	@ 0x40
 8002a0e:	2100      	movs	r1, #0
 8002a10:	4807      	ldr	r0, [pc, #28]	@ (8002a30 <UART_Init+0x28>)
 8002a12:	f004 fe51 	bl	80076b8 <memset>
    rxIndex = 0;
 8002a16:	4b07      	ldr	r3, [pc, #28]	@ (8002a34 <UART_Init+0x2c>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	801a      	strh	r2, [r3, #0]
    packetReady = false;
 8002a1c:	4b06      	ldr	r3, [pc, #24]	@ (8002a38 <UART_Init+0x30>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	701a      	strb	r2, [r3, #0]

    // Start UART reception (non-blocking)
    HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 8002a22:	2201      	movs	r2, #1
 8002a24:	4905      	ldr	r1, [pc, #20]	@ (8002a3c <UART_Init+0x34>)
 8002a26:	4806      	ldr	r0, [pc, #24]	@ (8002a40 <UART_Init+0x38>)
 8002a28:	f003 ff30 	bl	800688c <HAL_UART_Receive_IT>
}
 8002a2c:	bf00      	nop
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	20000454 	.word	0x20000454
 8002a34:	20000494 	.word	0x20000494
 8002a38:	20000496 	.word	0x20000496
 8002a3c:	20000450 	.word	0x20000450
 8002a40:	200003c8 	.word	0x200003c8

08002a44 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a44:	f7ff ffda 	bl	80029fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a48:	480b      	ldr	r0, [pc, #44]	@ (8002a78 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002a4a:	490c      	ldr	r1, [pc, #48]	@ (8002a7c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002a4c:	4a0c      	ldr	r2, [pc, #48]	@ (8002a80 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002a4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a50:	e002      	b.n	8002a58 <LoopCopyDataInit>

08002a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a56:	3304      	adds	r3, #4

08002a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a5c:	d3f9      	bcc.n	8002a52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a5e:	4a09      	ldr	r2, [pc, #36]	@ (8002a84 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002a60:	4c09      	ldr	r4, [pc, #36]	@ (8002a88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a64:	e001      	b.n	8002a6a <LoopFillZerobss>

08002a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a68:	3204      	adds	r2, #4

08002a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a6c:	d3fb      	bcc.n	8002a66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a6e:	f004 fe7b 	bl	8007768 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a72:	f7ff f8af 	bl	8001bd4 <main>
  bx lr
 8002a76:	4770      	bx	lr
  ldr r0, =_sdata
 8002a78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a7c:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8002a80:	08009b94 	.word	0x08009b94
  ldr r2, =_sbss
 8002a84:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8002a88:	200005e8 	.word	0x200005e8

08002a8c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a8c:	e7fe      	b.n	8002a8c <CAN1_RX1_IRQHandler>
	...

08002a90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a94:	4b08      	ldr	r3, [pc, #32]	@ (8002ab8 <HAL_Init+0x28>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a07      	ldr	r2, [pc, #28]	@ (8002ab8 <HAL_Init+0x28>)
 8002a9a:	f043 0310 	orr.w	r3, r3, #16
 8002a9e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002aa0:	2003      	movs	r0, #3
 8002aa2:	f000 ff1f 	bl	80038e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	f000 f808 	bl	8002abc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002aac:	f7ff fc9e 	bl	80023ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40022000 	.word	0x40022000

08002abc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ac4:	4b12      	ldr	r3, [pc, #72]	@ (8002b10 <HAL_InitTick+0x54>)
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	4b12      	ldr	r3, [pc, #72]	@ (8002b14 <HAL_InitTick+0x58>)
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	4619      	mov	r1, r3
 8002ace:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ad2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ada:	4618      	mov	r0, r3
 8002adc:	f000 ff37 	bl	800394e <HAL_SYSTICK_Config>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e00e      	b.n	8002b08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b0f      	cmp	r3, #15
 8002aee:	d80a      	bhi.n	8002b06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002af0:	2200      	movs	r2, #0
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	f04f 30ff 	mov.w	r0, #4294967295
 8002af8:	f000 feff 	bl	80038fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002afc:	4a06      	ldr	r2, [pc, #24]	@ (8002b18 <HAL_InitTick+0x5c>)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	e000      	b.n	8002b08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3708      	adds	r7, #8
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	20000034 	.word	0x20000034
 8002b14:	2000003c 	.word	0x2000003c
 8002b18:	20000038 	.word	0x20000038

08002b1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b20:	4b05      	ldr	r3, [pc, #20]	@ (8002b38 <HAL_IncTick+0x1c>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	461a      	mov	r2, r3
 8002b26:	4b05      	ldr	r3, [pc, #20]	@ (8002b3c <HAL_IncTick+0x20>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	4a03      	ldr	r2, [pc, #12]	@ (8002b3c <HAL_IncTick+0x20>)
 8002b2e:	6013      	str	r3, [r2, #0]
}
 8002b30:	bf00      	nop
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bc80      	pop	{r7}
 8002b36:	4770      	bx	lr
 8002b38:	2000003c 	.word	0x2000003c
 8002b3c:	20000498 	.word	0x20000498

08002b40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  return uwTick;
 8002b44:	4b02      	ldr	r3, [pc, #8]	@ (8002b50 <HAL_GetTick+0x10>)
 8002b46:	681b      	ldr	r3, [r3, #0]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr
 8002b50:	20000498 	.word	0x20000498

08002b54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b5c:	f7ff fff0 	bl	8002b40 <HAL_GetTick>
 8002b60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b6c:	d005      	beq.n	8002b7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b98 <HAL_Delay+0x44>)
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	461a      	mov	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	4413      	add	r3, r2
 8002b78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b7a:	bf00      	nop
 8002b7c:	f7ff ffe0 	bl	8002b40 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d8f7      	bhi.n	8002b7c <HAL_Delay+0x28>
  {
  }
}
 8002b8c:	bf00      	nop
 8002b8e:	bf00      	nop
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	2000003c 	.word	0x2000003c

08002b9c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002bac:	2300      	movs	r3, #0
 8002bae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e0be      	b.n	8002d3c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d109      	bne.n	8002be0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7ff fc38 	bl	8002450 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 fcb9 	bl	8003558 <ADC_ConversionStop_Disable>
 8002be6:	4603      	mov	r3, r0
 8002be8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bee:	f003 0310 	and.w	r3, r3, #16
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f040 8099 	bne.w	8002d2a <HAL_ADC_Init+0x18e>
 8002bf8:	7dfb      	ldrb	r3, [r7, #23]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f040 8095 	bne.w	8002d2a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c04:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002c08:	f023 0302 	bic.w	r3, r3, #2
 8002c0c:	f043 0202 	orr.w	r2, r3, #2
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002c1c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	7b1b      	ldrb	r3, [r3, #12]
 8002c22:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002c24:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c34:	d003      	beq.n	8002c3e <HAL_ADC_Init+0xa2>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d102      	bne.n	8002c44 <HAL_ADC_Init+0xa8>
 8002c3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c42:	e000      	b.n	8002c46 <HAL_ADC_Init+0xaa>
 8002c44:	2300      	movs	r3, #0
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	7d1b      	ldrb	r3, [r3, #20]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d119      	bne.n	8002c88 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	7b1b      	ldrb	r3, [r3, #12]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d109      	bne.n	8002c70 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	3b01      	subs	r3, #1
 8002c62:	035a      	lsls	r2, r3, #13
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002c6c:	613b      	str	r3, [r7, #16]
 8002c6e:	e00b      	b.n	8002c88 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c74:	f043 0220 	orr.w	r2, r3, #32
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c80:	f043 0201 	orr.w	r2, r3, #1
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689a      	ldr	r2, [r3, #8]
 8002ca2:	4b28      	ldr	r3, [pc, #160]	@ (8002d44 <HAL_ADC_Init+0x1a8>)
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	6812      	ldr	r2, [r2, #0]
 8002caa:	68b9      	ldr	r1, [r7, #8]
 8002cac:	430b      	orrs	r3, r1
 8002cae:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cb8:	d003      	beq.n	8002cc2 <HAL_ADC_Init+0x126>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d104      	bne.n	8002ccc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	051b      	lsls	r3, r3, #20
 8002cca:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689a      	ldr	r2, [r3, #8]
 8002ce6:	4b18      	ldr	r3, [pc, #96]	@ (8002d48 <HAL_ADC_Init+0x1ac>)
 8002ce8:	4013      	ands	r3, r2
 8002cea:	68ba      	ldr	r2, [r7, #8]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d10b      	bne.n	8002d08 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cfa:	f023 0303 	bic.w	r3, r3, #3
 8002cfe:	f043 0201 	orr.w	r2, r3, #1
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002d06:	e018      	b.n	8002d3a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d0c:	f023 0312 	bic.w	r3, r3, #18
 8002d10:	f043 0210 	orr.w	r2, r3, #16
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d1c:	f043 0201 	orr.w	r2, r3, #1
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002d28:	e007      	b.n	8002d3a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d2e:	f043 0210 	orr.w	r2, r3, #16
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002d3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3718      	adds	r7, #24
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	ffe1f7fd 	.word	0xffe1f7fd
 8002d48:	ff1f0efe 	.word	0xff1f0efe

08002d4c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d54:	2300      	movs	r3, #0
 8002d56:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d101      	bne.n	8002d66 <HAL_ADC_Start+0x1a>
 8002d62:	2302      	movs	r3, #2
 8002d64:	e098      	b.n	8002e98 <HAL_ADC_Start+0x14c>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 fb98 	bl	80034a4 <ADC_Enable>
 8002d74:	4603      	mov	r3, r0
 8002d76:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002d78:	7bfb      	ldrb	r3, [r7, #15]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f040 8087 	bne.w	8002e8e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d88:	f023 0301 	bic.w	r3, r3, #1
 8002d8c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a41      	ldr	r2, [pc, #260]	@ (8002ea0 <HAL_ADC_Start+0x154>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d105      	bne.n	8002daa <HAL_ADC_Start+0x5e>
 8002d9e:	4b41      	ldr	r3, [pc, #260]	@ (8002ea4 <HAL_ADC_Start+0x158>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d115      	bne.n	8002dd6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dae:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d026      	beq.n	8002e12 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002dcc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002dd4:	e01d      	b.n	8002e12 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dda:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a2f      	ldr	r2, [pc, #188]	@ (8002ea4 <HAL_ADC_Start+0x158>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d004      	beq.n	8002df6 <HAL_ADC_Start+0xaa>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a2b      	ldr	r2, [pc, #172]	@ (8002ea0 <HAL_ADC_Start+0x154>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d10d      	bne.n	8002e12 <HAL_ADC_Start+0xc6>
 8002df6:	4b2b      	ldr	r3, [pc, #172]	@ (8002ea4 <HAL_ADC_Start+0x158>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d007      	beq.n	8002e12 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e06:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002e0a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d006      	beq.n	8002e2c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e22:	f023 0206 	bic.w	r2, r3, #6
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002e2a:	e002      	b.n	8002e32 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f06f 0202 	mvn.w	r2, #2
 8002e42:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002e4e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002e52:	d113      	bne.n	8002e7c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002e58:	4a11      	ldr	r2, [pc, #68]	@ (8002ea0 <HAL_ADC_Start+0x154>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d105      	bne.n	8002e6a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002e5e:	4b11      	ldr	r3, [pc, #68]	@ (8002ea4 <HAL_ADC_Start+0x158>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d108      	bne.n	8002e7c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002e78:	609a      	str	r2, [r3, #8]
 8002e7a:	e00c      	b.n	8002e96 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689a      	ldr	r2, [r3, #8]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002e8a:	609a      	str	r2, [r3, #8]
 8002e8c:	e003      	b.n	8002e96 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40012800 	.word	0x40012800
 8002ea4:	40012400 	.word	0x40012400

08002ea8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d101      	bne.n	8002ec2 <HAL_ADC_Stop+0x1a>
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	e01a      	b.n	8002ef8 <HAL_ADC_Stop+0x50>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 fb44 	bl	8003558 <ADC_ConversionStop_Disable>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002ed4:	7bfb      	ldrb	r3, [r7, #15]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d109      	bne.n	8002eee <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ede:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002ee2:	f023 0301 	bic.w	r3, r3, #1
 8002ee6:	f043 0201 	orr.w	r2, r3, #1
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002f00:	b590      	push	{r4, r7, lr}
 8002f02:	b087      	sub	sp, #28
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002f12:	2300      	movs	r3, #0
 8002f14:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002f16:	f7ff fe13 	bl	8002b40 <HAL_GetTick>
 8002f1a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00b      	beq.n	8002f42 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f2e:	f043 0220 	orr.w	r2, r3, #32
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e0d3      	b.n	80030ea <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d131      	bne.n	8002fb4 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f56:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d12a      	bne.n	8002fb4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002f5e:	e021      	b.n	8002fa4 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f66:	d01d      	beq.n	8002fa4 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d007      	beq.n	8002f7e <HAL_ADC_PollForConversion+0x7e>
 8002f6e:	f7ff fde7 	bl	8002b40 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d212      	bcs.n	8002fa4 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d10b      	bne.n	8002fa4 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f90:	f043 0204 	orr.w	r2, r3, #4
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e0a2      	b.n	80030ea <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d0d6      	beq.n	8002f60 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002fb2:	e070      	b.n	8003096 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002fb4:	4b4f      	ldr	r3, [pc, #316]	@ (80030f4 <HAL_ADC_PollForConversion+0x1f4>)
 8002fb6:	681c      	ldr	r4, [r3, #0]
 8002fb8:	2002      	movs	r0, #2
 8002fba:	f001 ffdf 	bl	8004f7c <HAL_RCCEx_GetPeriphCLKFreq>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6919      	ldr	r1, [r3, #16]
 8002fca:	4b4b      	ldr	r3, [pc, #300]	@ (80030f8 <HAL_ADC_PollForConversion+0x1f8>)
 8002fcc:	400b      	ands	r3, r1
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d118      	bne.n	8003004 <HAL_ADC_PollForConversion+0x104>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68d9      	ldr	r1, [r3, #12]
 8002fd8:	4b48      	ldr	r3, [pc, #288]	@ (80030fc <HAL_ADC_PollForConversion+0x1fc>)
 8002fda:	400b      	ands	r3, r1
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d111      	bne.n	8003004 <HAL_ADC_PollForConversion+0x104>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6919      	ldr	r1, [r3, #16]
 8002fe6:	4b46      	ldr	r3, [pc, #280]	@ (8003100 <HAL_ADC_PollForConversion+0x200>)
 8002fe8:	400b      	ands	r3, r1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d108      	bne.n	8003000 <HAL_ADC_PollForConversion+0x100>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68d9      	ldr	r1, [r3, #12]
 8002ff4:	4b43      	ldr	r3, [pc, #268]	@ (8003104 <HAL_ADC_PollForConversion+0x204>)
 8002ff6:	400b      	ands	r3, r1
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <HAL_ADC_PollForConversion+0x100>
 8002ffc:	2314      	movs	r3, #20
 8002ffe:	e020      	b.n	8003042 <HAL_ADC_PollForConversion+0x142>
 8003000:	2329      	movs	r3, #41	@ 0x29
 8003002:	e01e      	b.n	8003042 <HAL_ADC_PollForConversion+0x142>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6919      	ldr	r1, [r3, #16]
 800300a:	4b3d      	ldr	r3, [pc, #244]	@ (8003100 <HAL_ADC_PollForConversion+0x200>)
 800300c:	400b      	ands	r3, r1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d106      	bne.n	8003020 <HAL_ADC_PollForConversion+0x120>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68d9      	ldr	r1, [r3, #12]
 8003018:	4b3a      	ldr	r3, [pc, #232]	@ (8003104 <HAL_ADC_PollForConversion+0x204>)
 800301a:	400b      	ands	r3, r1
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00d      	beq.n	800303c <HAL_ADC_PollForConversion+0x13c>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6919      	ldr	r1, [r3, #16]
 8003026:	4b38      	ldr	r3, [pc, #224]	@ (8003108 <HAL_ADC_PollForConversion+0x208>)
 8003028:	400b      	ands	r3, r1
 800302a:	2b00      	cmp	r3, #0
 800302c:	d108      	bne.n	8003040 <HAL_ADC_PollForConversion+0x140>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68d9      	ldr	r1, [r3, #12]
 8003034:	4b34      	ldr	r3, [pc, #208]	@ (8003108 <HAL_ADC_PollForConversion+0x208>)
 8003036:	400b      	ands	r3, r1
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <HAL_ADC_PollForConversion+0x140>
 800303c:	2354      	movs	r3, #84	@ 0x54
 800303e:	e000      	b.n	8003042 <HAL_ADC_PollForConversion+0x142>
 8003040:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8003042:	fb02 f303 	mul.w	r3, r2, r3
 8003046:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003048:	e021      	b.n	800308e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003050:	d01a      	beq.n	8003088 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d007      	beq.n	8003068 <HAL_ADC_PollForConversion+0x168>
 8003058:	f7ff fd72 	bl	8002b40 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	429a      	cmp	r2, r3
 8003066:	d20f      	bcs.n	8003088 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	693a      	ldr	r2, [r7, #16]
 800306c:	429a      	cmp	r2, r3
 800306e:	d90b      	bls.n	8003088 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003074:	f043 0204 	orr.w	r2, r3, #4
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e030      	b.n	80030ea <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	3301      	adds	r3, #1
 800308c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	429a      	cmp	r2, r3
 8003094:	d8d9      	bhi.n	800304a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f06f 0212 	mvn.w	r2, #18
 800309e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80030b6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80030ba:	d115      	bne.n	80030e8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d111      	bne.n	80030e8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d105      	bne.n	80030e8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030e0:	f043 0201 	orr.w	r2, r3, #1
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	371c      	adds	r7, #28
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd90      	pop	{r4, r7, pc}
 80030f2:	bf00      	nop
 80030f4:	20000034 	.word	0x20000034
 80030f8:	24924924 	.word	0x24924924
 80030fc:	00924924 	.word	0x00924924
 8003100:	12492492 	.word	0x12492492
 8003104:	00492492 	.word	0x00492492
 8003108:	00249249 	.word	0x00249249

0800310c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800311a:	4618      	mov	r0, r3
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	bc80      	pop	{r7}
 8003122:	4770      	bx	lr

08003124 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	f003 0320 	and.w	r3, r3, #32
 8003142:	2b00      	cmp	r3, #0
 8003144:	d03e      	beq.n	80031c4 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d039      	beq.n	80031c4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003154:	f003 0310 	and.w	r3, r3, #16
 8003158:	2b00      	cmp	r3, #0
 800315a:	d105      	bne.n	8003168 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003160:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003172:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003176:	d11d      	bne.n	80031b4 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800317c:	2b00      	cmp	r3, #0
 800317e:	d119      	bne.n	80031b4 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 0220 	bic.w	r2, r2, #32
 800318e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003194:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d105      	bne.n	80031b4 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ac:	f043 0201 	orr.w	r2, r3, #1
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f7fe fcb7 	bl	8001b28 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f06f 0212 	mvn.w	r2, #18
 80031c2:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d04d      	beq.n	800326a <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f003 0304 	and.w	r3, r3, #4
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d048      	beq.n	800326a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031dc:	f003 0310 	and.w	r3, r3, #16
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d105      	bne.n	80031f0 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031e8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80031fa:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 80031fe:	d012      	beq.n	8003226 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800320a:	2b00      	cmp	r3, #0
 800320c:	d125      	bne.n	800325a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003218:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800321c:	d11d      	bne.n	800325a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003222:	2b00      	cmp	r3, #0
 8003224:	d119      	bne.n	800325a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003234:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800323a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800324a:	2b00      	cmp	r3, #0
 800324c:	d105      	bne.n	800325a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003252:	f043 0201 	orr.w	r2, r3, #1
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 fa6c 	bl	8003738 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f06f 020c 	mvn.w	r2, #12
 8003268:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003270:	2b00      	cmp	r3, #0
 8003272:	d012      	beq.n	800329a <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00d      	beq.n	800329a <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003282:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f809 	bl	80032a2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f06f 0201 	mvn.w	r2, #1
 8003298:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800329a:	bf00      	nop
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80032a2:	b480      	push	{r7}
 80032a4:	b083      	sub	sp, #12
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80032aa:	bf00      	nop
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bc80      	pop	{r7}
 80032b2:	4770      	bx	lr

080032b4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032be:	2300      	movs	r3, #0
 80032c0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80032c2:	2300      	movs	r3, #0
 80032c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d101      	bne.n	80032d4 <HAL_ADC_ConfigChannel+0x20>
 80032d0:	2302      	movs	r3, #2
 80032d2:	e0dc      	b.n	800348e <HAL_ADC_ConfigChannel+0x1da>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	2b06      	cmp	r3, #6
 80032e2:	d81c      	bhi.n	800331e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	3b05      	subs	r3, #5
 80032f6:	221f      	movs	r2, #31
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	43db      	mvns	r3, r3
 80032fe:	4019      	ands	r1, r3
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	6818      	ldr	r0, [r3, #0]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	4613      	mov	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	3b05      	subs	r3, #5
 8003310:	fa00 f203 	lsl.w	r2, r0, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	430a      	orrs	r2, r1
 800331a:	635a      	str	r2, [r3, #52]	@ 0x34
 800331c:	e03c      	b.n	8003398 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	2b0c      	cmp	r3, #12
 8003324:	d81c      	bhi.n	8003360 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	4613      	mov	r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	4413      	add	r3, r2
 8003336:	3b23      	subs	r3, #35	@ 0x23
 8003338:	221f      	movs	r2, #31
 800333a:	fa02 f303 	lsl.w	r3, r2, r3
 800333e:	43db      	mvns	r3, r3
 8003340:	4019      	ands	r1, r3
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	6818      	ldr	r0, [r3, #0]
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	4613      	mov	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	4413      	add	r3, r2
 8003350:	3b23      	subs	r3, #35	@ 0x23
 8003352:	fa00 f203 	lsl.w	r2, r0, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	430a      	orrs	r2, r1
 800335c:	631a      	str	r2, [r3, #48]	@ 0x30
 800335e:	e01b      	b.n	8003398 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	4613      	mov	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4413      	add	r3, r2
 8003370:	3b41      	subs	r3, #65	@ 0x41
 8003372:	221f      	movs	r2, #31
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	43db      	mvns	r3, r3
 800337a:	4019      	ands	r1, r3
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	6818      	ldr	r0, [r3, #0]
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685a      	ldr	r2, [r3, #4]
 8003384:	4613      	mov	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	3b41      	subs	r3, #65	@ 0x41
 800338c:	fa00 f203 	lsl.w	r2, r0, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	430a      	orrs	r2, r1
 8003396:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2b09      	cmp	r3, #9
 800339e:	d91c      	bls.n	80033da <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68d9      	ldr	r1, [r3, #12]
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	4613      	mov	r3, r2
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	4413      	add	r3, r2
 80033b0:	3b1e      	subs	r3, #30
 80033b2:	2207      	movs	r2, #7
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	43db      	mvns	r3, r3
 80033ba:	4019      	ands	r1, r3
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	6898      	ldr	r0, [r3, #8]
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	4613      	mov	r3, r2
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	4413      	add	r3, r2
 80033ca:	3b1e      	subs	r3, #30
 80033cc:	fa00 f203 	lsl.w	r2, r0, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	60da      	str	r2, [r3, #12]
 80033d8:	e019      	b.n	800340e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	6919      	ldr	r1, [r3, #16]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	4613      	mov	r3, r2
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	4413      	add	r3, r2
 80033ea:	2207      	movs	r2, #7
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	43db      	mvns	r3, r3
 80033f2:	4019      	ands	r1, r3
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	6898      	ldr	r0, [r3, #8]
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	4613      	mov	r3, r2
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	4413      	add	r3, r2
 8003402:	fa00 f203 	lsl.w	r2, r0, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2b10      	cmp	r3, #16
 8003414:	d003      	beq.n	800341e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800341a:	2b11      	cmp	r3, #17
 800341c:	d132      	bne.n	8003484 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a1d      	ldr	r2, [pc, #116]	@ (8003498 <HAL_ADC_ConfigChannel+0x1e4>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d125      	bne.n	8003474 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d126      	bne.n	8003484 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003444:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2b10      	cmp	r3, #16
 800344c:	d11a      	bne.n	8003484 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800344e:	4b13      	ldr	r3, [pc, #76]	@ (800349c <HAL_ADC_ConfigChannel+0x1e8>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a13      	ldr	r2, [pc, #76]	@ (80034a0 <HAL_ADC_ConfigChannel+0x1ec>)
 8003454:	fba2 2303 	umull	r2, r3, r2, r3
 8003458:	0c9a      	lsrs	r2, r3, #18
 800345a:	4613      	mov	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4413      	add	r3, r2
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003464:	e002      	b.n	800346c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	3b01      	subs	r3, #1
 800346a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1f9      	bne.n	8003466 <HAL_ADC_ConfigChannel+0x1b2>
 8003472:	e007      	b.n	8003484 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003478:	f043 0220 	orr.w	r2, r3, #32
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800348c:	7bfb      	ldrb	r3, [r7, #15]
}
 800348e:	4618      	mov	r0, r3
 8003490:	3714      	adds	r7, #20
 8003492:	46bd      	mov	sp, r7
 8003494:	bc80      	pop	{r7}
 8003496:	4770      	bx	lr
 8003498:	40012400 	.word	0x40012400
 800349c:	20000034 	.word	0x20000034
 80034a0:	431bde83 	.word	0x431bde83

080034a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034ac:	2300      	movs	r3, #0
 80034ae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80034b0:	2300      	movs	r3, #0
 80034b2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d040      	beq.n	8003544 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	689a      	ldr	r2, [r3, #8]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f042 0201 	orr.w	r2, r2, #1
 80034d0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80034d2:	4b1f      	ldr	r3, [pc, #124]	@ (8003550 <ADC_Enable+0xac>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a1f      	ldr	r2, [pc, #124]	@ (8003554 <ADC_Enable+0xb0>)
 80034d8:	fba2 2303 	umull	r2, r3, r2, r3
 80034dc:	0c9b      	lsrs	r3, r3, #18
 80034de:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80034e0:	e002      	b.n	80034e8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	3b01      	subs	r3, #1
 80034e6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1f9      	bne.n	80034e2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80034ee:	f7ff fb27 	bl	8002b40 <HAL_GetTick>
 80034f2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80034f4:	e01f      	b.n	8003536 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80034f6:	f7ff fb23 	bl	8002b40 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d918      	bls.n	8003536 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b01      	cmp	r3, #1
 8003510:	d011      	beq.n	8003536 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003516:	f043 0210 	orr.w	r2, r3, #16
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003522:	f043 0201 	orr.w	r2, r3, #1
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e007      	b.n	8003546 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	2b01      	cmp	r3, #1
 8003542:	d1d8      	bne.n	80034f6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	20000034 	.word	0x20000034
 8003554:	431bde83 	.word	0x431bde83

08003558 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003560:	2300      	movs	r3, #0
 8003562:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b01      	cmp	r3, #1
 8003570:	d12e      	bne.n	80035d0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 0201 	bic.w	r2, r2, #1
 8003580:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003582:	f7ff fadd 	bl	8002b40 <HAL_GetTick>
 8003586:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003588:	e01b      	b.n	80035c2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800358a:	f7ff fad9 	bl	8002b40 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	2b02      	cmp	r3, #2
 8003596:	d914      	bls.n	80035c2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d10d      	bne.n	80035c2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035aa:	f043 0210 	orr.w	r2, r3, #16
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b6:	f043 0201 	orr.w	r2, r3, #1
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e007      	b.n	80035d2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d0dc      	beq.n	800358a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
	...

080035dc <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80035dc:	b590      	push	{r4, r7, lr}
 80035de:	b087      	sub	sp, #28
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035e4:	2300      	movs	r3, #0
 80035e6:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80035e8:	2300      	movs	r3, #0
 80035ea:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d101      	bne.n	80035fa <HAL_ADCEx_Calibration_Start+0x1e>
 80035f6:	2302      	movs	r3, #2
 80035f8:	e097      	b.n	800372a <HAL_ADCEx_Calibration_Start+0x14e>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7ff ffa8 	bl	8003558 <ADC_ConversionStop_Disable>
 8003608:	4603      	mov	r3, r0
 800360a:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f7ff ff49 	bl	80034a4 <ADC_Enable>
 8003612:	4603      	mov	r3, r0
 8003614:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8003616:	7dfb      	ldrb	r3, [r7, #23]
 8003618:	2b00      	cmp	r3, #0
 800361a:	f040 8081 	bne.w	8003720 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003622:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003626:	f023 0302 	bic.w	r3, r3, #2
 800362a:	f043 0202 	orr.w	r2, r3, #2
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003632:	4b40      	ldr	r3, [pc, #256]	@ (8003734 <HAL_ADCEx_Calibration_Start+0x158>)
 8003634:	681c      	ldr	r4, [r3, #0]
 8003636:	2002      	movs	r0, #2
 8003638:	f001 fca0 	bl	8004f7c <HAL_RCCEx_GetPeriphCLKFreq>
 800363c:	4603      	mov	r3, r0
 800363e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8003642:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8003644:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8003646:	e002      	b.n	800364e <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	3b01      	subs	r3, #1
 800364c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1f9      	bne.n	8003648 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689a      	ldr	r2, [r3, #8]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f042 0208 	orr.w	r2, r2, #8
 8003662:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003664:	f7ff fa6c 	bl	8002b40 <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800366a:	e01b      	b.n	80036a4 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800366c:	f7ff fa68 	bl	8002b40 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b0a      	cmp	r3, #10
 8003678:	d914      	bls.n	80036a4 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f003 0308 	and.w	r3, r3, #8
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00d      	beq.n	80036a4 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800368c:	f023 0312 	bic.w	r3, r3, #18
 8003690:	f043 0210 	orr.w	r2, r3, #16
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e042      	b.n	800372a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 0308 	and.w	r3, r3, #8
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1dc      	bne.n	800366c <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689a      	ldr	r2, [r3, #8]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f042 0204 	orr.w	r2, r2, #4
 80036c0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80036c2:	f7ff fa3d 	bl	8002b40 <HAL_GetTick>
 80036c6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80036c8:	e01b      	b.n	8003702 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80036ca:	f7ff fa39 	bl	8002b40 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	2b0a      	cmp	r3, #10
 80036d6:	d914      	bls.n	8003702 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f003 0304 	and.w	r3, r3, #4
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00d      	beq.n	8003702 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ea:	f023 0312 	bic.w	r3, r3, #18
 80036ee:	f043 0210 	orr.w	r2, r3, #16
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e013      	b.n	800372a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f003 0304 	and.w	r3, r3, #4
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1dc      	bne.n	80036ca <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003714:	f023 0303 	bic.w	r3, r3, #3
 8003718:	f043 0201 	orr.w	r2, r3, #1
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003728:	7dfb      	ldrb	r3, [r7, #23]
}
 800372a:	4618      	mov	r0, r3
 800372c:	371c      	adds	r7, #28
 800372e:	46bd      	mov	sp, r7
 8003730:	bd90      	pop	{r4, r7, pc}
 8003732:	bf00      	nop
 8003734:	20000034 	.word	0x20000034

08003738 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	bc80      	pop	{r7}
 8003748:	4770      	bx	lr
	...

0800374c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f003 0307 	and.w	r3, r3, #7
 800375a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800375c:	4b0c      	ldr	r3, [pc, #48]	@ (8003790 <__NVIC_SetPriorityGrouping+0x44>)
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003762:	68ba      	ldr	r2, [r7, #8]
 8003764:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003768:	4013      	ands	r3, r2
 800376a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003774:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003778:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800377c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800377e:	4a04      	ldr	r2, [pc, #16]	@ (8003790 <__NVIC_SetPriorityGrouping+0x44>)
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	60d3      	str	r3, [r2, #12]
}
 8003784:	bf00      	nop
 8003786:	3714      	adds	r7, #20
 8003788:	46bd      	mov	sp, r7
 800378a:	bc80      	pop	{r7}
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	e000ed00 	.word	0xe000ed00

08003794 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003798:	4b04      	ldr	r3, [pc, #16]	@ (80037ac <__NVIC_GetPriorityGrouping+0x18>)
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	0a1b      	lsrs	r3, r3, #8
 800379e:	f003 0307 	and.w	r3, r3, #7
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bc80      	pop	{r7}
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	e000ed00 	.word	0xe000ed00

080037b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	4603      	mov	r3, r0
 80037b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	db0b      	blt.n	80037da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037c2:	79fb      	ldrb	r3, [r7, #7]
 80037c4:	f003 021f 	and.w	r2, r3, #31
 80037c8:	4906      	ldr	r1, [pc, #24]	@ (80037e4 <__NVIC_EnableIRQ+0x34>)
 80037ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ce:	095b      	lsrs	r3, r3, #5
 80037d0:	2001      	movs	r0, #1
 80037d2:	fa00 f202 	lsl.w	r2, r0, r2
 80037d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037da:	bf00      	nop
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	bc80      	pop	{r7}
 80037e2:	4770      	bx	lr
 80037e4:	e000e100 	.word	0xe000e100

080037e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	4603      	mov	r3, r0
 80037f0:	6039      	str	r1, [r7, #0]
 80037f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	db0a      	blt.n	8003812 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	b2da      	uxtb	r2, r3
 8003800:	490c      	ldr	r1, [pc, #48]	@ (8003834 <__NVIC_SetPriority+0x4c>)
 8003802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003806:	0112      	lsls	r2, r2, #4
 8003808:	b2d2      	uxtb	r2, r2
 800380a:	440b      	add	r3, r1
 800380c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003810:	e00a      	b.n	8003828 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	b2da      	uxtb	r2, r3
 8003816:	4908      	ldr	r1, [pc, #32]	@ (8003838 <__NVIC_SetPriority+0x50>)
 8003818:	79fb      	ldrb	r3, [r7, #7]
 800381a:	f003 030f 	and.w	r3, r3, #15
 800381e:	3b04      	subs	r3, #4
 8003820:	0112      	lsls	r2, r2, #4
 8003822:	b2d2      	uxtb	r2, r2
 8003824:	440b      	add	r3, r1
 8003826:	761a      	strb	r2, [r3, #24]
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	bc80      	pop	{r7}
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	e000e100 	.word	0xe000e100
 8003838:	e000ed00 	.word	0xe000ed00

0800383c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800383c:	b480      	push	{r7}
 800383e:	b089      	sub	sp, #36	@ 0x24
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f003 0307 	and.w	r3, r3, #7
 800384e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	f1c3 0307 	rsb	r3, r3, #7
 8003856:	2b04      	cmp	r3, #4
 8003858:	bf28      	it	cs
 800385a:	2304      	movcs	r3, #4
 800385c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	3304      	adds	r3, #4
 8003862:	2b06      	cmp	r3, #6
 8003864:	d902      	bls.n	800386c <NVIC_EncodePriority+0x30>
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	3b03      	subs	r3, #3
 800386a:	e000      	b.n	800386e <NVIC_EncodePriority+0x32>
 800386c:	2300      	movs	r3, #0
 800386e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003870:	f04f 32ff 	mov.w	r2, #4294967295
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	fa02 f303 	lsl.w	r3, r2, r3
 800387a:	43da      	mvns	r2, r3
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	401a      	ands	r2, r3
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003884:	f04f 31ff 	mov.w	r1, #4294967295
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	fa01 f303 	lsl.w	r3, r1, r3
 800388e:	43d9      	mvns	r1, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003894:	4313      	orrs	r3, r2
         );
}
 8003896:	4618      	mov	r0, r3
 8003898:	3724      	adds	r7, #36	@ 0x24
 800389a:	46bd      	mov	sp, r7
 800389c:	bc80      	pop	{r7}
 800389e:	4770      	bx	lr

080038a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	3b01      	subs	r3, #1
 80038ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038b0:	d301      	bcc.n	80038b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038b2:	2301      	movs	r3, #1
 80038b4:	e00f      	b.n	80038d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038b6:	4a0a      	ldr	r2, [pc, #40]	@ (80038e0 <SysTick_Config+0x40>)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	3b01      	subs	r3, #1
 80038bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038be:	210f      	movs	r1, #15
 80038c0:	f04f 30ff 	mov.w	r0, #4294967295
 80038c4:	f7ff ff90 	bl	80037e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038c8:	4b05      	ldr	r3, [pc, #20]	@ (80038e0 <SysTick_Config+0x40>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038ce:	4b04      	ldr	r3, [pc, #16]	@ (80038e0 <SysTick_Config+0x40>)
 80038d0:	2207      	movs	r2, #7
 80038d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3708      	adds	r7, #8
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	e000e010 	.word	0xe000e010

080038e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f7ff ff2d 	bl	800374c <__NVIC_SetPriorityGrouping>
}
 80038f2:	bf00      	nop
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b086      	sub	sp, #24
 80038fe:	af00      	add	r7, sp, #0
 8003900:	4603      	mov	r3, r0
 8003902:	60b9      	str	r1, [r7, #8]
 8003904:	607a      	str	r2, [r7, #4]
 8003906:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003908:	2300      	movs	r3, #0
 800390a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800390c:	f7ff ff42 	bl	8003794 <__NVIC_GetPriorityGrouping>
 8003910:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	68b9      	ldr	r1, [r7, #8]
 8003916:	6978      	ldr	r0, [r7, #20]
 8003918:	f7ff ff90 	bl	800383c <NVIC_EncodePriority>
 800391c:	4602      	mov	r2, r0
 800391e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003922:	4611      	mov	r1, r2
 8003924:	4618      	mov	r0, r3
 8003926:	f7ff ff5f 	bl	80037e8 <__NVIC_SetPriority>
}
 800392a:	bf00      	nop
 800392c:	3718      	adds	r7, #24
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b082      	sub	sp, #8
 8003936:	af00      	add	r7, sp, #0
 8003938:	4603      	mov	r3, r0
 800393a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800393c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003940:	4618      	mov	r0, r3
 8003942:	f7ff ff35 	bl	80037b0 <__NVIC_EnableIRQ>
}
 8003946:	bf00      	nop
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b082      	sub	sp, #8
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7ff ffa2 	bl	80038a0 <SysTick_Config>
 800395c:	4603      	mov	r3, r0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
	...

08003968 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003968:	b480      	push	{r7}
 800396a:	b08b      	sub	sp, #44	@ 0x2c
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003972:	2300      	movs	r3, #0
 8003974:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003976:	2300      	movs	r3, #0
 8003978:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800397a:	e169      	b.n	8003c50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800397c:	2201      	movs	r2, #1
 800397e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003980:	fa02 f303 	lsl.w	r3, r2, r3
 8003984:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	69fa      	ldr	r2, [r7, #28]
 800398c:	4013      	ands	r3, r2
 800398e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	429a      	cmp	r2, r3
 8003996:	f040 8158 	bne.w	8003c4a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	4a9a      	ldr	r2, [pc, #616]	@ (8003c08 <HAL_GPIO_Init+0x2a0>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d05e      	beq.n	8003a62 <HAL_GPIO_Init+0xfa>
 80039a4:	4a98      	ldr	r2, [pc, #608]	@ (8003c08 <HAL_GPIO_Init+0x2a0>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d875      	bhi.n	8003a96 <HAL_GPIO_Init+0x12e>
 80039aa:	4a98      	ldr	r2, [pc, #608]	@ (8003c0c <HAL_GPIO_Init+0x2a4>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d058      	beq.n	8003a62 <HAL_GPIO_Init+0xfa>
 80039b0:	4a96      	ldr	r2, [pc, #600]	@ (8003c0c <HAL_GPIO_Init+0x2a4>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d86f      	bhi.n	8003a96 <HAL_GPIO_Init+0x12e>
 80039b6:	4a96      	ldr	r2, [pc, #600]	@ (8003c10 <HAL_GPIO_Init+0x2a8>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d052      	beq.n	8003a62 <HAL_GPIO_Init+0xfa>
 80039bc:	4a94      	ldr	r2, [pc, #592]	@ (8003c10 <HAL_GPIO_Init+0x2a8>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d869      	bhi.n	8003a96 <HAL_GPIO_Init+0x12e>
 80039c2:	4a94      	ldr	r2, [pc, #592]	@ (8003c14 <HAL_GPIO_Init+0x2ac>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d04c      	beq.n	8003a62 <HAL_GPIO_Init+0xfa>
 80039c8:	4a92      	ldr	r2, [pc, #584]	@ (8003c14 <HAL_GPIO_Init+0x2ac>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d863      	bhi.n	8003a96 <HAL_GPIO_Init+0x12e>
 80039ce:	4a92      	ldr	r2, [pc, #584]	@ (8003c18 <HAL_GPIO_Init+0x2b0>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d046      	beq.n	8003a62 <HAL_GPIO_Init+0xfa>
 80039d4:	4a90      	ldr	r2, [pc, #576]	@ (8003c18 <HAL_GPIO_Init+0x2b0>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d85d      	bhi.n	8003a96 <HAL_GPIO_Init+0x12e>
 80039da:	2b12      	cmp	r3, #18
 80039dc:	d82a      	bhi.n	8003a34 <HAL_GPIO_Init+0xcc>
 80039de:	2b12      	cmp	r3, #18
 80039e0:	d859      	bhi.n	8003a96 <HAL_GPIO_Init+0x12e>
 80039e2:	a201      	add	r2, pc, #4	@ (adr r2, 80039e8 <HAL_GPIO_Init+0x80>)
 80039e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e8:	08003a63 	.word	0x08003a63
 80039ec:	08003a3d 	.word	0x08003a3d
 80039f0:	08003a4f 	.word	0x08003a4f
 80039f4:	08003a91 	.word	0x08003a91
 80039f8:	08003a97 	.word	0x08003a97
 80039fc:	08003a97 	.word	0x08003a97
 8003a00:	08003a97 	.word	0x08003a97
 8003a04:	08003a97 	.word	0x08003a97
 8003a08:	08003a97 	.word	0x08003a97
 8003a0c:	08003a97 	.word	0x08003a97
 8003a10:	08003a97 	.word	0x08003a97
 8003a14:	08003a97 	.word	0x08003a97
 8003a18:	08003a97 	.word	0x08003a97
 8003a1c:	08003a97 	.word	0x08003a97
 8003a20:	08003a97 	.word	0x08003a97
 8003a24:	08003a97 	.word	0x08003a97
 8003a28:	08003a97 	.word	0x08003a97
 8003a2c:	08003a45 	.word	0x08003a45
 8003a30:	08003a59 	.word	0x08003a59
 8003a34:	4a79      	ldr	r2, [pc, #484]	@ (8003c1c <HAL_GPIO_Init+0x2b4>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d013      	beq.n	8003a62 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003a3a:	e02c      	b.n	8003a96 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	623b      	str	r3, [r7, #32]
          break;
 8003a42:	e029      	b.n	8003a98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	3304      	adds	r3, #4
 8003a4a:	623b      	str	r3, [r7, #32]
          break;
 8003a4c:	e024      	b.n	8003a98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	3308      	adds	r3, #8
 8003a54:	623b      	str	r3, [r7, #32]
          break;
 8003a56:	e01f      	b.n	8003a98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	330c      	adds	r3, #12
 8003a5e:	623b      	str	r3, [r7, #32]
          break;
 8003a60:	e01a      	b.n	8003a98 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d102      	bne.n	8003a70 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003a6a:	2304      	movs	r3, #4
 8003a6c:	623b      	str	r3, [r7, #32]
          break;
 8003a6e:	e013      	b.n	8003a98 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d105      	bne.n	8003a84 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003a78:	2308      	movs	r3, #8
 8003a7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	69fa      	ldr	r2, [r7, #28]
 8003a80:	611a      	str	r2, [r3, #16]
          break;
 8003a82:	e009      	b.n	8003a98 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003a84:	2308      	movs	r3, #8
 8003a86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	69fa      	ldr	r2, [r7, #28]
 8003a8c:	615a      	str	r2, [r3, #20]
          break;
 8003a8e:	e003      	b.n	8003a98 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003a90:	2300      	movs	r3, #0
 8003a92:	623b      	str	r3, [r7, #32]
          break;
 8003a94:	e000      	b.n	8003a98 <HAL_GPIO_Init+0x130>
          break;
 8003a96:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	2bff      	cmp	r3, #255	@ 0xff
 8003a9c:	d801      	bhi.n	8003aa2 <HAL_GPIO_Init+0x13a>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	e001      	b.n	8003aa6 <HAL_GPIO_Init+0x13e>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	3304      	adds	r3, #4
 8003aa6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	2bff      	cmp	r3, #255	@ 0xff
 8003aac:	d802      	bhi.n	8003ab4 <HAL_GPIO_Init+0x14c>
 8003aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	e002      	b.n	8003aba <HAL_GPIO_Init+0x152>
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab6:	3b08      	subs	r3, #8
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	210f      	movs	r1, #15
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac8:	43db      	mvns	r3, r3
 8003aca:	401a      	ands	r2, r3
 8003acc:	6a39      	ldr	r1, [r7, #32]
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad4:	431a      	orrs	r2, r3
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	f000 80b1 	beq.w	8003c4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003ae8:	4b4d      	ldr	r3, [pc, #308]	@ (8003c20 <HAL_GPIO_Init+0x2b8>)
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	4a4c      	ldr	r2, [pc, #304]	@ (8003c20 <HAL_GPIO_Init+0x2b8>)
 8003aee:	f043 0301 	orr.w	r3, r3, #1
 8003af2:	6193      	str	r3, [r2, #24]
 8003af4:	4b4a      	ldr	r3, [pc, #296]	@ (8003c20 <HAL_GPIO_Init+0x2b8>)
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	60bb      	str	r3, [r7, #8]
 8003afe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003b00:	4a48      	ldr	r2, [pc, #288]	@ (8003c24 <HAL_GPIO_Init+0x2bc>)
 8003b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b04:	089b      	lsrs	r3, r3, #2
 8003b06:	3302      	adds	r3, #2
 8003b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b0c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b10:	f003 0303 	and.w	r3, r3, #3
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	220f      	movs	r2, #15
 8003b18:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1c:	43db      	mvns	r3, r3
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	4013      	ands	r3, r2
 8003b22:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a40      	ldr	r2, [pc, #256]	@ (8003c28 <HAL_GPIO_Init+0x2c0>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d013      	beq.n	8003b54 <HAL_GPIO_Init+0x1ec>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a3f      	ldr	r2, [pc, #252]	@ (8003c2c <HAL_GPIO_Init+0x2c4>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d00d      	beq.n	8003b50 <HAL_GPIO_Init+0x1e8>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a3e      	ldr	r2, [pc, #248]	@ (8003c30 <HAL_GPIO_Init+0x2c8>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d007      	beq.n	8003b4c <HAL_GPIO_Init+0x1e4>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a3d      	ldr	r2, [pc, #244]	@ (8003c34 <HAL_GPIO_Init+0x2cc>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d101      	bne.n	8003b48 <HAL_GPIO_Init+0x1e0>
 8003b44:	2303      	movs	r3, #3
 8003b46:	e006      	b.n	8003b56 <HAL_GPIO_Init+0x1ee>
 8003b48:	2304      	movs	r3, #4
 8003b4a:	e004      	b.n	8003b56 <HAL_GPIO_Init+0x1ee>
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	e002      	b.n	8003b56 <HAL_GPIO_Init+0x1ee>
 8003b50:	2301      	movs	r3, #1
 8003b52:	e000      	b.n	8003b56 <HAL_GPIO_Init+0x1ee>
 8003b54:	2300      	movs	r3, #0
 8003b56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b58:	f002 0203 	and.w	r2, r2, #3
 8003b5c:	0092      	lsls	r2, r2, #2
 8003b5e:	4093      	lsls	r3, r2
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003b66:	492f      	ldr	r1, [pc, #188]	@ (8003c24 <HAL_GPIO_Init+0x2bc>)
 8003b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6a:	089b      	lsrs	r3, r3, #2
 8003b6c:	3302      	adds	r3, #2
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d006      	beq.n	8003b8e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003b80:	4b2d      	ldr	r3, [pc, #180]	@ (8003c38 <HAL_GPIO_Init+0x2d0>)
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	492c      	ldr	r1, [pc, #176]	@ (8003c38 <HAL_GPIO_Init+0x2d0>)
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	608b      	str	r3, [r1, #8]
 8003b8c:	e006      	b.n	8003b9c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003b8e:	4b2a      	ldr	r3, [pc, #168]	@ (8003c38 <HAL_GPIO_Init+0x2d0>)
 8003b90:	689a      	ldr	r2, [r3, #8]
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	43db      	mvns	r3, r3
 8003b96:	4928      	ldr	r1, [pc, #160]	@ (8003c38 <HAL_GPIO_Init+0x2d0>)
 8003b98:	4013      	ands	r3, r2
 8003b9a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d006      	beq.n	8003bb6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003ba8:	4b23      	ldr	r3, [pc, #140]	@ (8003c38 <HAL_GPIO_Init+0x2d0>)
 8003baa:	68da      	ldr	r2, [r3, #12]
 8003bac:	4922      	ldr	r1, [pc, #136]	@ (8003c38 <HAL_GPIO_Init+0x2d0>)
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	60cb      	str	r3, [r1, #12]
 8003bb4:	e006      	b.n	8003bc4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003bb6:	4b20      	ldr	r3, [pc, #128]	@ (8003c38 <HAL_GPIO_Init+0x2d0>)
 8003bb8:	68da      	ldr	r2, [r3, #12]
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	43db      	mvns	r3, r3
 8003bbe:	491e      	ldr	r1, [pc, #120]	@ (8003c38 <HAL_GPIO_Init+0x2d0>)
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d006      	beq.n	8003bde <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003bd0:	4b19      	ldr	r3, [pc, #100]	@ (8003c38 <HAL_GPIO_Init+0x2d0>)
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	4918      	ldr	r1, [pc, #96]	@ (8003c38 <HAL_GPIO_Init+0x2d0>)
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	604b      	str	r3, [r1, #4]
 8003bdc:	e006      	b.n	8003bec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003bde:	4b16      	ldr	r3, [pc, #88]	@ (8003c38 <HAL_GPIO_Init+0x2d0>)
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	43db      	mvns	r3, r3
 8003be6:	4914      	ldr	r1, [pc, #80]	@ (8003c38 <HAL_GPIO_Init+0x2d0>)
 8003be8:	4013      	ands	r3, r2
 8003bea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d021      	beq.n	8003c3c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8003c38 <HAL_GPIO_Init+0x2d0>)
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	490e      	ldr	r1, [pc, #56]	@ (8003c38 <HAL_GPIO_Init+0x2d0>)
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	600b      	str	r3, [r1, #0]
 8003c04:	e021      	b.n	8003c4a <HAL_GPIO_Init+0x2e2>
 8003c06:	bf00      	nop
 8003c08:	10320000 	.word	0x10320000
 8003c0c:	10310000 	.word	0x10310000
 8003c10:	10220000 	.word	0x10220000
 8003c14:	10210000 	.word	0x10210000
 8003c18:	10120000 	.word	0x10120000
 8003c1c:	10110000 	.word	0x10110000
 8003c20:	40021000 	.word	0x40021000
 8003c24:	40010000 	.word	0x40010000
 8003c28:	40010800 	.word	0x40010800
 8003c2c:	40010c00 	.word	0x40010c00
 8003c30:	40011000 	.word	0x40011000
 8003c34:	40011400 	.word	0x40011400
 8003c38:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c6c <HAL_GPIO_Init+0x304>)
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	43db      	mvns	r3, r3
 8003c44:	4909      	ldr	r1, [pc, #36]	@ (8003c6c <HAL_GPIO_Init+0x304>)
 8003c46:	4013      	ands	r3, r2
 8003c48:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c56:	fa22 f303 	lsr.w	r3, r2, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f47f ae8e 	bne.w	800397c <HAL_GPIO_Init+0x14>
  }
}
 8003c60:	bf00      	nop
 8003c62:	bf00      	nop
 8003c64:	372c      	adds	r7, #44	@ 0x2c
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bc80      	pop	{r7}
 8003c6a:	4770      	bx	lr
 8003c6c:	40010400 	.word	0x40010400

08003c70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	460b      	mov	r3, r1
 8003c7a:	807b      	strh	r3, [r7, #2]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c80:	787b      	ldrb	r3, [r7, #1]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d003      	beq.n	8003c8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c86:	887a      	ldrh	r2, [r7, #2]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003c8c:	e003      	b.n	8003c96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003c8e:	887b      	ldrh	r3, [r7, #2]
 8003c90:	041a      	lsls	r2, r3, #16
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	611a      	str	r2, [r3, #16]
}
 8003c96:	bf00      	nop
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bc80      	pop	{r7}
 8003c9e:	4770      	bx	lr

08003ca0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e12b      	b.n	8003f0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d106      	bne.n	8003ccc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f7fe fc06 	bl	80024d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2224      	movs	r2, #36	@ 0x24
 8003cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f022 0201 	bic.w	r2, r2, #1
 8003ce2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003cf2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d04:	f001 f83e 	bl	8004d84 <HAL_RCC_GetPCLK1Freq>
 8003d08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	4a81      	ldr	r2, [pc, #516]	@ (8003f14 <HAL_I2C_Init+0x274>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d807      	bhi.n	8003d24 <HAL_I2C_Init+0x84>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	4a80      	ldr	r2, [pc, #512]	@ (8003f18 <HAL_I2C_Init+0x278>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	bf94      	ite	ls
 8003d1c:	2301      	movls	r3, #1
 8003d1e:	2300      	movhi	r3, #0
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	e006      	b.n	8003d32 <HAL_I2C_Init+0x92>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	4a7d      	ldr	r2, [pc, #500]	@ (8003f1c <HAL_I2C_Init+0x27c>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	bf94      	ite	ls
 8003d2c:	2301      	movls	r3, #1
 8003d2e:	2300      	movhi	r3, #0
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e0e7      	b.n	8003f0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	4a78      	ldr	r2, [pc, #480]	@ (8003f20 <HAL_I2C_Init+0x280>)
 8003d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d42:	0c9b      	lsrs	r3, r3, #18
 8003d44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68ba      	ldr	r2, [r7, #8]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	4a6a      	ldr	r2, [pc, #424]	@ (8003f14 <HAL_I2C_Init+0x274>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d802      	bhi.n	8003d74 <HAL_I2C_Init+0xd4>
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	3301      	adds	r3, #1
 8003d72:	e009      	b.n	8003d88 <HAL_I2C_Init+0xe8>
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003d7a:	fb02 f303 	mul.w	r3, r2, r3
 8003d7e:	4a69      	ldr	r2, [pc, #420]	@ (8003f24 <HAL_I2C_Init+0x284>)
 8003d80:	fba2 2303 	umull	r2, r3, r2, r3
 8003d84:	099b      	lsrs	r3, r3, #6
 8003d86:	3301      	adds	r3, #1
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	6812      	ldr	r2, [r2, #0]
 8003d8c:	430b      	orrs	r3, r1
 8003d8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	69db      	ldr	r3, [r3, #28]
 8003d96:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003d9a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	495c      	ldr	r1, [pc, #368]	@ (8003f14 <HAL_I2C_Init+0x274>)
 8003da4:	428b      	cmp	r3, r1
 8003da6:	d819      	bhi.n	8003ddc <HAL_I2C_Init+0x13c>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	1e59      	subs	r1, r3, #1
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003db6:	1c59      	adds	r1, r3, #1
 8003db8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003dbc:	400b      	ands	r3, r1
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00a      	beq.n	8003dd8 <HAL_I2C_Init+0x138>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	1e59      	subs	r1, r3, #1
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	005b      	lsls	r3, r3, #1
 8003dcc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dd6:	e051      	b.n	8003e7c <HAL_I2C_Init+0x1dc>
 8003dd8:	2304      	movs	r3, #4
 8003dda:	e04f      	b.n	8003e7c <HAL_I2C_Init+0x1dc>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d111      	bne.n	8003e08 <HAL_I2C_Init+0x168>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	1e58      	subs	r0, r3, #1
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6859      	ldr	r1, [r3, #4]
 8003dec:	460b      	mov	r3, r1
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	440b      	add	r3, r1
 8003df2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003df6:	3301      	adds	r3, #1
 8003df8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	bf0c      	ite	eq
 8003e00:	2301      	moveq	r3, #1
 8003e02:	2300      	movne	r3, #0
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	e012      	b.n	8003e2e <HAL_I2C_Init+0x18e>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	1e58      	subs	r0, r3, #1
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6859      	ldr	r1, [r3, #4]
 8003e10:	460b      	mov	r3, r1
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	440b      	add	r3, r1
 8003e16:	0099      	lsls	r1, r3, #2
 8003e18:	440b      	add	r3, r1
 8003e1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e1e:	3301      	adds	r3, #1
 8003e20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	bf0c      	ite	eq
 8003e28:	2301      	moveq	r3, #1
 8003e2a:	2300      	movne	r3, #0
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <HAL_I2C_Init+0x196>
 8003e32:	2301      	movs	r3, #1
 8003e34:	e022      	b.n	8003e7c <HAL_I2C_Init+0x1dc>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10e      	bne.n	8003e5c <HAL_I2C_Init+0x1bc>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	1e58      	subs	r0, r3, #1
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6859      	ldr	r1, [r3, #4]
 8003e46:	460b      	mov	r3, r1
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	440b      	add	r3, r1
 8003e4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e50:	3301      	adds	r3, #1
 8003e52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e5a:	e00f      	b.n	8003e7c <HAL_I2C_Init+0x1dc>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	1e58      	subs	r0, r3, #1
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6859      	ldr	r1, [r3, #4]
 8003e64:	460b      	mov	r3, r1
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	440b      	add	r3, r1
 8003e6a:	0099      	lsls	r1, r3, #2
 8003e6c:	440b      	add	r3, r1
 8003e6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e72:	3301      	adds	r3, #1
 8003e74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e78:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e7c:	6879      	ldr	r1, [r7, #4]
 8003e7e:	6809      	ldr	r1, [r1, #0]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	69da      	ldr	r2, [r3, #28]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	431a      	orrs	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003eaa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	6911      	ldr	r1, [r2, #16]
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	68d2      	ldr	r2, [r2, #12]
 8003eb6:	4311      	orrs	r1, r2
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	6812      	ldr	r2, [r2, #0]
 8003ebc:	430b      	orrs	r3, r1
 8003ebe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	695a      	ldr	r2, [r3, #20]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f042 0201 	orr.w	r2, r2, #1
 8003eea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2220      	movs	r2, #32
 8003ef6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	000186a0 	.word	0x000186a0
 8003f18:	001e847f 	.word	0x001e847f
 8003f1c:	003d08ff 	.word	0x003d08ff
 8003f20:	431bde83 	.word	0x431bde83
 8003f24:	10624dd3 	.word	0x10624dd3

08003f28 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b088      	sub	sp, #32
 8003f2c:	af02      	add	r7, sp, #8
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	607a      	str	r2, [r7, #4]
 8003f32:	461a      	mov	r2, r3
 8003f34:	460b      	mov	r3, r1
 8003f36:	817b      	strh	r3, [r7, #10]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f3c:	f7fe fe00 	bl	8002b40 <HAL_GetTick>
 8003f40:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b20      	cmp	r3, #32
 8003f4c:	f040 80e0 	bne.w	8004110 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	9300      	str	r3, [sp, #0]
 8003f54:	2319      	movs	r3, #25
 8003f56:	2201      	movs	r2, #1
 8003f58:	4970      	ldr	r1, [pc, #448]	@ (800411c <HAL_I2C_Master_Transmit+0x1f4>)
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f000 f964 	bl	8004228 <I2C_WaitOnFlagUntilTimeout>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003f66:	2302      	movs	r3, #2
 8003f68:	e0d3      	b.n	8004112 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d101      	bne.n	8003f78 <HAL_I2C_Master_Transmit+0x50>
 8003f74:	2302      	movs	r3, #2
 8003f76:	e0cc      	b.n	8004112 <HAL_I2C_Master_Transmit+0x1ea>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d007      	beq.n	8003f9e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f042 0201 	orr.w	r2, r2, #1
 8003f9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2221      	movs	r2, #33	@ 0x21
 8003fb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2210      	movs	r2, #16
 8003fba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	893a      	ldrh	r2, [r7, #8]
 8003fce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	4a50      	ldr	r2, [pc, #320]	@ (8004120 <HAL_I2C_Master_Transmit+0x1f8>)
 8003fde:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003fe0:	8979      	ldrh	r1, [r7, #10]
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	6a3a      	ldr	r2, [r7, #32]
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f000 f89c 	bl	8004124 <I2C_MasterRequestWrite>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e08d      	b.n	8004112 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	613b      	str	r3, [r7, #16]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	613b      	str	r3, [r7, #16]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	613b      	str	r3, [r7, #16]
 800400a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800400c:	e066      	b.n	80040dc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	6a39      	ldr	r1, [r7, #32]
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f000 fa22 	bl	800445c <I2C_WaitOnTXEFlagUntilTimeout>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00d      	beq.n	800403a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004022:	2b04      	cmp	r3, #4
 8004024:	d107      	bne.n	8004036 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004034:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e06b      	b.n	8004112 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403e:	781a      	ldrb	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404a:	1c5a      	adds	r2, r3, #1
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004054:	b29b      	uxth	r3, r3
 8004056:	3b01      	subs	r3, #1
 8004058:	b29a      	uxth	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004062:	3b01      	subs	r3, #1
 8004064:	b29a      	uxth	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	695b      	ldr	r3, [r3, #20]
 8004070:	f003 0304 	and.w	r3, r3, #4
 8004074:	2b04      	cmp	r3, #4
 8004076:	d11b      	bne.n	80040b0 <HAL_I2C_Master_Transmit+0x188>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800407c:	2b00      	cmp	r3, #0
 800407e:	d017      	beq.n	80040b0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004084:	781a      	ldrb	r2, [r3, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004090:	1c5a      	adds	r2, r3, #1
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800409a:	b29b      	uxth	r3, r3
 800409c:	3b01      	subs	r3, #1
 800409e:	b29a      	uxth	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040a8:	3b01      	subs	r3, #1
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	6a39      	ldr	r1, [r7, #32]
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f000 fa19 	bl	80044ec <I2C_WaitOnBTFFlagUntilTimeout>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00d      	beq.n	80040dc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c4:	2b04      	cmp	r3, #4
 80040c6:	d107      	bne.n	80040d8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040d6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e01a      	b.n	8004112 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d194      	bne.n	800400e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2220      	movs	r2, #32
 80040f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800410c:	2300      	movs	r3, #0
 800410e:	e000      	b.n	8004112 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004110:	2302      	movs	r3, #2
  }
}
 8004112:	4618      	mov	r0, r3
 8004114:	3718      	adds	r7, #24
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	00100002 	.word	0x00100002
 8004120:	ffff0000 	.word	0xffff0000

08004124 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b088      	sub	sp, #32
 8004128:	af02      	add	r7, sp, #8
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	607a      	str	r2, [r7, #4]
 800412e:	603b      	str	r3, [r7, #0]
 8004130:	460b      	mov	r3, r1
 8004132:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004138:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	2b08      	cmp	r3, #8
 800413e:	d006      	beq.n	800414e <I2C_MasterRequestWrite+0x2a>
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d003      	beq.n	800414e <I2C_MasterRequestWrite+0x2a>
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800414c:	d108      	bne.n	8004160 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800415c:	601a      	str	r2, [r3, #0]
 800415e:	e00b      	b.n	8004178 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004164:	2b12      	cmp	r3, #18
 8004166:	d107      	bne.n	8004178 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004176:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	f000 f84f 	bl	8004228 <I2C_WaitOnFlagUntilTimeout>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00d      	beq.n	80041ac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800419a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800419e:	d103      	bne.n	80041a8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041a6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e035      	b.n	8004218 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041b4:	d108      	bne.n	80041c8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041b6:	897b      	ldrh	r3, [r7, #10]
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	461a      	mov	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80041c4:	611a      	str	r2, [r3, #16]
 80041c6:	e01b      	b.n	8004200 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80041c8:	897b      	ldrh	r3, [r7, #10]
 80041ca:	11db      	asrs	r3, r3, #7
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	f003 0306 	and.w	r3, r3, #6
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	f063 030f 	orn	r3, r3, #15
 80041d8:	b2da      	uxtb	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	490e      	ldr	r1, [pc, #56]	@ (8004220 <I2C_MasterRequestWrite+0xfc>)
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f000 f898 	bl	800431c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e010      	b.n	8004218 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80041f6:	897b      	ldrh	r3, [r7, #10]
 80041f8:	b2da      	uxtb	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	4907      	ldr	r1, [pc, #28]	@ (8004224 <I2C_MasterRequestWrite+0x100>)
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f000 f888 	bl	800431c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e000      	b.n	8004218 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	3718      	adds	r7, #24
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	00010008 	.word	0x00010008
 8004224:	00010002 	.word	0x00010002

08004228 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	603b      	str	r3, [r7, #0]
 8004234:	4613      	mov	r3, r2
 8004236:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004238:	e048      	b.n	80042cc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004240:	d044      	beq.n	80042cc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004242:	f7fe fc7d 	bl	8002b40 <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	683a      	ldr	r2, [r7, #0]
 800424e:	429a      	cmp	r2, r3
 8004250:	d302      	bcc.n	8004258 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d139      	bne.n	80042cc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	0c1b      	lsrs	r3, r3, #16
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b01      	cmp	r3, #1
 8004260:	d10d      	bne.n	800427e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	43da      	mvns	r2, r3
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	4013      	ands	r3, r2
 800426e:	b29b      	uxth	r3, r3
 8004270:	2b00      	cmp	r3, #0
 8004272:	bf0c      	ite	eq
 8004274:	2301      	moveq	r3, #1
 8004276:	2300      	movne	r3, #0
 8004278:	b2db      	uxtb	r3, r3
 800427a:	461a      	mov	r2, r3
 800427c:	e00c      	b.n	8004298 <I2C_WaitOnFlagUntilTimeout+0x70>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	43da      	mvns	r2, r3
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	4013      	ands	r3, r2
 800428a:	b29b      	uxth	r3, r3
 800428c:	2b00      	cmp	r3, #0
 800428e:	bf0c      	ite	eq
 8004290:	2301      	moveq	r3, #1
 8004292:	2300      	movne	r3, #0
 8004294:	b2db      	uxtb	r3, r3
 8004296:	461a      	mov	r2, r3
 8004298:	79fb      	ldrb	r3, [r7, #7]
 800429a:	429a      	cmp	r2, r3
 800429c:	d116      	bne.n	80042cc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2220      	movs	r2, #32
 80042a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b8:	f043 0220 	orr.w	r2, r3, #32
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e023      	b.n	8004314 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	0c1b      	lsrs	r3, r3, #16
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d10d      	bne.n	80042f2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	43da      	mvns	r2, r3
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	4013      	ands	r3, r2
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	bf0c      	ite	eq
 80042e8:	2301      	moveq	r3, #1
 80042ea:	2300      	movne	r3, #0
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	461a      	mov	r2, r3
 80042f0:	e00c      	b.n	800430c <I2C_WaitOnFlagUntilTimeout+0xe4>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	43da      	mvns	r2, r3
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	4013      	ands	r3, r2
 80042fe:	b29b      	uxth	r3, r3
 8004300:	2b00      	cmp	r3, #0
 8004302:	bf0c      	ite	eq
 8004304:	2301      	moveq	r3, #1
 8004306:	2300      	movne	r3, #0
 8004308:	b2db      	uxtb	r3, r3
 800430a:	461a      	mov	r2, r3
 800430c:	79fb      	ldrb	r3, [r7, #7]
 800430e:	429a      	cmp	r2, r3
 8004310:	d093      	beq.n	800423a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
 8004328:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800432a:	e071      	b.n	8004410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004336:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800433a:	d123      	bne.n	8004384 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800434a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004354:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2220      	movs	r2, #32
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004370:	f043 0204 	orr.w	r2, r3, #4
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e067      	b.n	8004454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800438a:	d041      	beq.n	8004410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800438c:	f7fe fbd8 	bl	8002b40 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	429a      	cmp	r2, r3
 800439a:	d302      	bcc.n	80043a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d136      	bne.n	8004410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	0c1b      	lsrs	r3, r3, #16
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d10c      	bne.n	80043c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	43da      	mvns	r2, r3
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	4013      	ands	r3, r2
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	bf14      	ite	ne
 80043be:	2301      	movne	r3, #1
 80043c0:	2300      	moveq	r3, #0
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	e00b      	b.n	80043de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	43da      	mvns	r2, r3
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	4013      	ands	r3, r2
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	bf14      	ite	ne
 80043d8:	2301      	movne	r3, #1
 80043da:	2300      	moveq	r3, #0
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d016      	beq.n	8004410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2220      	movs	r2, #32
 80043ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043fc:	f043 0220 	orr.w	r2, r3, #32
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e021      	b.n	8004454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	0c1b      	lsrs	r3, r3, #16
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b01      	cmp	r3, #1
 8004418:	d10c      	bne.n	8004434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	43da      	mvns	r2, r3
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	4013      	ands	r3, r2
 8004426:	b29b      	uxth	r3, r3
 8004428:	2b00      	cmp	r3, #0
 800442a:	bf14      	ite	ne
 800442c:	2301      	movne	r3, #1
 800442e:	2300      	moveq	r3, #0
 8004430:	b2db      	uxtb	r3, r3
 8004432:	e00b      	b.n	800444c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	43da      	mvns	r2, r3
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	4013      	ands	r3, r2
 8004440:	b29b      	uxth	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	bf14      	ite	ne
 8004446:	2301      	movne	r3, #1
 8004448:	2300      	moveq	r3, #0
 800444a:	b2db      	uxtb	r3, r3
 800444c:	2b00      	cmp	r3, #0
 800444e:	f47f af6d 	bne.w	800432c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004468:	e034      	b.n	80044d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 f886 	bl	800457c <I2C_IsAcknowledgeFailed>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e034      	b.n	80044e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004480:	d028      	beq.n	80044d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004482:	f7fe fb5d 	bl	8002b40 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	68ba      	ldr	r2, [r7, #8]
 800448e:	429a      	cmp	r2, r3
 8004490:	d302      	bcc.n	8004498 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d11d      	bne.n	80044d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044a2:	2b80      	cmp	r3, #128	@ 0x80
 80044a4:	d016      	beq.n	80044d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2220      	movs	r2, #32
 80044b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c0:	f043 0220 	orr.w	r2, r3, #32
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e007      	b.n	80044e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044de:	2b80      	cmp	r3, #128	@ 0x80
 80044e0:	d1c3      	bne.n	800446a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044f8:	e034      	b.n	8004564 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f000 f83e 	bl	800457c <I2C_IsAcknowledgeFailed>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d001      	beq.n	800450a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e034      	b.n	8004574 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004510:	d028      	beq.n	8004564 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004512:	f7fe fb15 	bl	8002b40 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	429a      	cmp	r2, r3
 8004520:	d302      	bcc.n	8004528 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d11d      	bne.n	8004564 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	f003 0304 	and.w	r3, r3, #4
 8004532:	2b04      	cmp	r3, #4
 8004534:	d016      	beq.n	8004564 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2220      	movs	r2, #32
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004550:	f043 0220 	orr.w	r2, r3, #32
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e007      	b.n	8004574 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	f003 0304 	and.w	r3, r3, #4
 800456e:	2b04      	cmp	r3, #4
 8004570:	d1c3      	bne.n	80044fa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800458e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004592:	d11b      	bne.n	80045cc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800459c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2220      	movs	r2, #32
 80045a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b8:	f043 0204 	orr.w	r2, r3, #4
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e000      	b.n	80045ce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bc80      	pop	{r7}
 80045d6:	4770      	bx	lr

080045d8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80045d8:	b480      	push	{r7}
 80045da:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80045dc:	4b03      	ldr	r3, [pc, #12]	@ (80045ec <HAL_PWR_EnableBkUpAccess+0x14>)
 80045de:	2201      	movs	r2, #1
 80045e0:	601a      	str	r2, [r3, #0]
}
 80045e2:	bf00      	nop
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bc80      	pop	{r7}
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	420e0020 	.word	0x420e0020

080045f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e272      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 8087 	beq.w	800471e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004610:	4b92      	ldr	r3, [pc, #584]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f003 030c 	and.w	r3, r3, #12
 8004618:	2b04      	cmp	r3, #4
 800461a:	d00c      	beq.n	8004636 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800461c:	4b8f      	ldr	r3, [pc, #572]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f003 030c 	and.w	r3, r3, #12
 8004624:	2b08      	cmp	r3, #8
 8004626:	d112      	bne.n	800464e <HAL_RCC_OscConfig+0x5e>
 8004628:	4b8c      	ldr	r3, [pc, #560]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004630:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004634:	d10b      	bne.n	800464e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004636:	4b89      	ldr	r3, [pc, #548]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d06c      	beq.n	800471c <HAL_RCC_OscConfig+0x12c>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d168      	bne.n	800471c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e24c      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004656:	d106      	bne.n	8004666 <HAL_RCC_OscConfig+0x76>
 8004658:	4b80      	ldr	r3, [pc, #512]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a7f      	ldr	r2, [pc, #508]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 800465e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004662:	6013      	str	r3, [r2, #0]
 8004664:	e02e      	b.n	80046c4 <HAL_RCC_OscConfig+0xd4>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10c      	bne.n	8004688 <HAL_RCC_OscConfig+0x98>
 800466e:	4b7b      	ldr	r3, [pc, #492]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a7a      	ldr	r2, [pc, #488]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 8004674:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004678:	6013      	str	r3, [r2, #0]
 800467a:	4b78      	ldr	r3, [pc, #480]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a77      	ldr	r2, [pc, #476]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 8004680:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004684:	6013      	str	r3, [r2, #0]
 8004686:	e01d      	b.n	80046c4 <HAL_RCC_OscConfig+0xd4>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004690:	d10c      	bne.n	80046ac <HAL_RCC_OscConfig+0xbc>
 8004692:	4b72      	ldr	r3, [pc, #456]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a71      	ldr	r2, [pc, #452]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 8004698:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800469c:	6013      	str	r3, [r2, #0]
 800469e:	4b6f      	ldr	r3, [pc, #444]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a6e      	ldr	r2, [pc, #440]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 80046a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046a8:	6013      	str	r3, [r2, #0]
 80046aa:	e00b      	b.n	80046c4 <HAL_RCC_OscConfig+0xd4>
 80046ac:	4b6b      	ldr	r3, [pc, #428]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a6a      	ldr	r2, [pc, #424]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 80046b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046b6:	6013      	str	r3, [r2, #0]
 80046b8:	4b68      	ldr	r3, [pc, #416]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a67      	ldr	r2, [pc, #412]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 80046be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d013      	beq.n	80046f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046cc:	f7fe fa38 	bl	8002b40 <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046d4:	f7fe fa34 	bl	8002b40 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b64      	cmp	r3, #100	@ 0x64
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e200      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046e6:	4b5d      	ldr	r3, [pc, #372]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d0f0      	beq.n	80046d4 <HAL_RCC_OscConfig+0xe4>
 80046f2:	e014      	b.n	800471e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f4:	f7fe fa24 	bl	8002b40 <HAL_GetTick>
 80046f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046fa:	e008      	b.n	800470e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046fc:	f7fe fa20 	bl	8002b40 <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b64      	cmp	r3, #100	@ 0x64
 8004708:	d901      	bls.n	800470e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e1ec      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800470e:	4b53      	ldr	r3, [pc, #332]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1f0      	bne.n	80046fc <HAL_RCC_OscConfig+0x10c>
 800471a:	e000      	b.n	800471e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800471c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b00      	cmp	r3, #0
 8004728:	d063      	beq.n	80047f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800472a:	4b4c      	ldr	r3, [pc, #304]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f003 030c 	and.w	r3, r3, #12
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00b      	beq.n	800474e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004736:	4b49      	ldr	r3, [pc, #292]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f003 030c 	and.w	r3, r3, #12
 800473e:	2b08      	cmp	r3, #8
 8004740:	d11c      	bne.n	800477c <HAL_RCC_OscConfig+0x18c>
 8004742:	4b46      	ldr	r3, [pc, #280]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d116      	bne.n	800477c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800474e:	4b43      	ldr	r3, [pc, #268]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b00      	cmp	r3, #0
 8004758:	d005      	beq.n	8004766 <HAL_RCC_OscConfig+0x176>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	2b01      	cmp	r3, #1
 8004760:	d001      	beq.n	8004766 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e1c0      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004766:	4b3d      	ldr	r3, [pc, #244]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	00db      	lsls	r3, r3, #3
 8004774:	4939      	ldr	r1, [pc, #228]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 8004776:	4313      	orrs	r3, r2
 8004778:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800477a:	e03a      	b.n	80047f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d020      	beq.n	80047c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004784:	4b36      	ldr	r3, [pc, #216]	@ (8004860 <HAL_RCC_OscConfig+0x270>)
 8004786:	2201      	movs	r2, #1
 8004788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800478a:	f7fe f9d9 	bl	8002b40 <HAL_GetTick>
 800478e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004790:	e008      	b.n	80047a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004792:	f7fe f9d5 	bl	8002b40 <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d901      	bls.n	80047a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e1a1      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047a4:	4b2d      	ldr	r3, [pc, #180]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0302 	and.w	r3, r3, #2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d0f0      	beq.n	8004792 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047b0:	4b2a      	ldr	r3, [pc, #168]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	00db      	lsls	r3, r3, #3
 80047be:	4927      	ldr	r1, [pc, #156]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	600b      	str	r3, [r1, #0]
 80047c4:	e015      	b.n	80047f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047c6:	4b26      	ldr	r3, [pc, #152]	@ (8004860 <HAL_RCC_OscConfig+0x270>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047cc:	f7fe f9b8 	bl	8002b40 <HAL_GetTick>
 80047d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047d2:	e008      	b.n	80047e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047d4:	f7fe f9b4 	bl	8002b40 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e180      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047e6:	4b1d      	ldr	r3, [pc, #116]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1f0      	bne.n	80047d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0308 	and.w	r3, r3, #8
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d03a      	beq.n	8004874 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d019      	beq.n	800483a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004806:	4b17      	ldr	r3, [pc, #92]	@ (8004864 <HAL_RCC_OscConfig+0x274>)
 8004808:	2201      	movs	r2, #1
 800480a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800480c:	f7fe f998 	bl	8002b40 <HAL_GetTick>
 8004810:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004812:	e008      	b.n	8004826 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004814:	f7fe f994 	bl	8002b40 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b02      	cmp	r3, #2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e160      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004826:	4b0d      	ldr	r3, [pc, #52]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 8004828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d0f0      	beq.n	8004814 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004832:	2001      	movs	r0, #1
 8004834:	f000 face 	bl	8004dd4 <RCC_Delay>
 8004838:	e01c      	b.n	8004874 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800483a:	4b0a      	ldr	r3, [pc, #40]	@ (8004864 <HAL_RCC_OscConfig+0x274>)
 800483c:	2200      	movs	r2, #0
 800483e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004840:	f7fe f97e 	bl	8002b40 <HAL_GetTick>
 8004844:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004846:	e00f      	b.n	8004868 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004848:	f7fe f97a 	bl	8002b40 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	2b02      	cmp	r3, #2
 8004854:	d908      	bls.n	8004868 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e146      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4f8>
 800485a:	bf00      	nop
 800485c:	40021000 	.word	0x40021000
 8004860:	42420000 	.word	0x42420000
 8004864:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004868:	4b92      	ldr	r3, [pc, #584]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 800486a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1e9      	bne.n	8004848 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0304 	and.w	r3, r3, #4
 800487c:	2b00      	cmp	r3, #0
 800487e:	f000 80a6 	beq.w	80049ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004882:	2300      	movs	r3, #0
 8004884:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004886:	4b8b      	ldr	r3, [pc, #556]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 8004888:	69db      	ldr	r3, [r3, #28]
 800488a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10d      	bne.n	80048ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004892:	4b88      	ldr	r3, [pc, #544]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 8004894:	69db      	ldr	r3, [r3, #28]
 8004896:	4a87      	ldr	r2, [pc, #540]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 8004898:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800489c:	61d3      	str	r3, [r2, #28]
 800489e:	4b85      	ldr	r3, [pc, #532]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 80048a0:	69db      	ldr	r3, [r3, #28]
 80048a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048a6:	60bb      	str	r3, [r7, #8]
 80048a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048aa:	2301      	movs	r3, #1
 80048ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ae:	4b82      	ldr	r3, [pc, #520]	@ (8004ab8 <HAL_RCC_OscConfig+0x4c8>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d118      	bne.n	80048ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048ba:	4b7f      	ldr	r3, [pc, #508]	@ (8004ab8 <HAL_RCC_OscConfig+0x4c8>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a7e      	ldr	r2, [pc, #504]	@ (8004ab8 <HAL_RCC_OscConfig+0x4c8>)
 80048c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048c6:	f7fe f93b 	bl	8002b40 <HAL_GetTick>
 80048ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048cc:	e008      	b.n	80048e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048ce:	f7fe f937 	bl	8002b40 <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	2b64      	cmp	r3, #100	@ 0x64
 80048da:	d901      	bls.n	80048e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e103      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048e0:	4b75      	ldr	r3, [pc, #468]	@ (8004ab8 <HAL_RCC_OscConfig+0x4c8>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d0f0      	beq.n	80048ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d106      	bne.n	8004902 <HAL_RCC_OscConfig+0x312>
 80048f4:	4b6f      	ldr	r3, [pc, #444]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	4a6e      	ldr	r2, [pc, #440]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 80048fa:	f043 0301 	orr.w	r3, r3, #1
 80048fe:	6213      	str	r3, [r2, #32]
 8004900:	e02d      	b.n	800495e <HAL_RCC_OscConfig+0x36e>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d10c      	bne.n	8004924 <HAL_RCC_OscConfig+0x334>
 800490a:	4b6a      	ldr	r3, [pc, #424]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	4a69      	ldr	r2, [pc, #420]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 8004910:	f023 0301 	bic.w	r3, r3, #1
 8004914:	6213      	str	r3, [r2, #32]
 8004916:	4b67      	ldr	r3, [pc, #412]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	4a66      	ldr	r2, [pc, #408]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 800491c:	f023 0304 	bic.w	r3, r3, #4
 8004920:	6213      	str	r3, [r2, #32]
 8004922:	e01c      	b.n	800495e <HAL_RCC_OscConfig+0x36e>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	2b05      	cmp	r3, #5
 800492a:	d10c      	bne.n	8004946 <HAL_RCC_OscConfig+0x356>
 800492c:	4b61      	ldr	r3, [pc, #388]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 800492e:	6a1b      	ldr	r3, [r3, #32]
 8004930:	4a60      	ldr	r2, [pc, #384]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 8004932:	f043 0304 	orr.w	r3, r3, #4
 8004936:	6213      	str	r3, [r2, #32]
 8004938:	4b5e      	ldr	r3, [pc, #376]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 800493a:	6a1b      	ldr	r3, [r3, #32]
 800493c:	4a5d      	ldr	r2, [pc, #372]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 800493e:	f043 0301 	orr.w	r3, r3, #1
 8004942:	6213      	str	r3, [r2, #32]
 8004944:	e00b      	b.n	800495e <HAL_RCC_OscConfig+0x36e>
 8004946:	4b5b      	ldr	r3, [pc, #364]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	4a5a      	ldr	r2, [pc, #360]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 800494c:	f023 0301 	bic.w	r3, r3, #1
 8004950:	6213      	str	r3, [r2, #32]
 8004952:	4b58      	ldr	r3, [pc, #352]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 8004954:	6a1b      	ldr	r3, [r3, #32]
 8004956:	4a57      	ldr	r2, [pc, #348]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 8004958:	f023 0304 	bic.w	r3, r3, #4
 800495c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d015      	beq.n	8004992 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004966:	f7fe f8eb 	bl	8002b40 <HAL_GetTick>
 800496a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800496c:	e00a      	b.n	8004984 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800496e:	f7fe f8e7 	bl	8002b40 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	f241 3288 	movw	r2, #5000	@ 0x1388
 800497c:	4293      	cmp	r3, r2
 800497e:	d901      	bls.n	8004984 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e0b1      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004984:	4b4b      	ldr	r3, [pc, #300]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	f003 0302 	and.w	r3, r3, #2
 800498c:	2b00      	cmp	r3, #0
 800498e:	d0ee      	beq.n	800496e <HAL_RCC_OscConfig+0x37e>
 8004990:	e014      	b.n	80049bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004992:	f7fe f8d5 	bl	8002b40 <HAL_GetTick>
 8004996:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004998:	e00a      	b.n	80049b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800499a:	f7fe f8d1 	bl	8002b40 <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d901      	bls.n	80049b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	e09b      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049b0:	4b40      	ldr	r3, [pc, #256]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 80049b2:	6a1b      	ldr	r3, [r3, #32]
 80049b4:	f003 0302 	and.w	r3, r3, #2
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d1ee      	bne.n	800499a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80049bc:	7dfb      	ldrb	r3, [r7, #23]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d105      	bne.n	80049ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049c2:	4b3c      	ldr	r3, [pc, #240]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	4a3b      	ldr	r2, [pc, #236]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 80049c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	f000 8087 	beq.w	8004ae6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049d8:	4b36      	ldr	r3, [pc, #216]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f003 030c 	and.w	r3, r3, #12
 80049e0:	2b08      	cmp	r3, #8
 80049e2:	d061      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	69db      	ldr	r3, [r3, #28]
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d146      	bne.n	8004a7a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ec:	4b33      	ldr	r3, [pc, #204]	@ (8004abc <HAL_RCC_OscConfig+0x4cc>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f2:	f7fe f8a5 	bl	8002b40 <HAL_GetTick>
 80049f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049f8:	e008      	b.n	8004a0c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049fa:	f7fe f8a1 	bl	8002b40 <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d901      	bls.n	8004a0c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e06d      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a0c:	4b29      	ldr	r3, [pc, #164]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1f0      	bne.n	80049fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a1b      	ldr	r3, [r3, #32]
 8004a1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a20:	d108      	bne.n	8004a34 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004a22:	4b24      	ldr	r3, [pc, #144]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	4921      	ldr	r1, [pc, #132]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a34:	4b1f      	ldr	r3, [pc, #124]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a19      	ldr	r1, [r3, #32]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a44:	430b      	orrs	r3, r1
 8004a46:	491b      	ldr	r1, [pc, #108]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a4c:	4b1b      	ldr	r3, [pc, #108]	@ (8004abc <HAL_RCC_OscConfig+0x4cc>)
 8004a4e:	2201      	movs	r2, #1
 8004a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a52:	f7fe f875 	bl	8002b40 <HAL_GetTick>
 8004a56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a58:	e008      	b.n	8004a6c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a5a:	f7fe f871 	bl	8002b40 <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d901      	bls.n	8004a6c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e03d      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a6c:	4b11      	ldr	r3, [pc, #68]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d0f0      	beq.n	8004a5a <HAL_RCC_OscConfig+0x46a>
 8004a78:	e035      	b.n	8004ae6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a7a:	4b10      	ldr	r3, [pc, #64]	@ (8004abc <HAL_RCC_OscConfig+0x4cc>)
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a80:	f7fe f85e 	bl	8002b40 <HAL_GetTick>
 8004a84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a86:	e008      	b.n	8004a9a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a88:	f7fe f85a 	bl	8002b40 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d901      	bls.n	8004a9a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e026      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a9a:	4b06      	ldr	r3, [pc, #24]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1f0      	bne.n	8004a88 <HAL_RCC_OscConfig+0x498>
 8004aa6:	e01e      	b.n	8004ae6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	69db      	ldr	r3, [r3, #28]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d107      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e019      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4f8>
 8004ab4:	40021000 	.word	0x40021000
 8004ab8:	40007000 	.word	0x40007000
 8004abc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8004af0 <HAL_RCC_OscConfig+0x500>)
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a1b      	ldr	r3, [r3, #32]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d106      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d001      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e000      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3718      	adds	r7, #24
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	40021000 	.word	0x40021000

08004af4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d101      	bne.n	8004b08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e0d0      	b.n	8004caa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b08:	4b6a      	ldr	r3, [pc, #424]	@ (8004cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0307 	and.w	r3, r3, #7
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d910      	bls.n	8004b38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b16:	4b67      	ldr	r3, [pc, #412]	@ (8004cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f023 0207 	bic.w	r2, r3, #7
 8004b1e:	4965      	ldr	r1, [pc, #404]	@ (8004cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b26:	4b63      	ldr	r3, [pc, #396]	@ (8004cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0307 	and.w	r3, r3, #7
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d001      	beq.n	8004b38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e0b8      	b.n	8004caa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0302 	and.w	r3, r3, #2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d020      	beq.n	8004b86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0304 	and.w	r3, r3, #4
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d005      	beq.n	8004b5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b50:	4b59      	ldr	r3, [pc, #356]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	4a58      	ldr	r2, [pc, #352]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b56:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004b5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0308 	and.w	r3, r3, #8
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d005      	beq.n	8004b74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b68:	4b53      	ldr	r3, [pc, #332]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	4a52      	ldr	r2, [pc, #328]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b6e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004b72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b74:	4b50      	ldr	r3, [pc, #320]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	494d      	ldr	r1, [pc, #308]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d040      	beq.n	8004c14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d107      	bne.n	8004baa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b9a:	4b47      	ldr	r3, [pc, #284]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d115      	bne.n	8004bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e07f      	b.n	8004caa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d107      	bne.n	8004bc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bb2:	4b41      	ldr	r3, [pc, #260]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d109      	bne.n	8004bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e073      	b.n	8004caa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bc2:	4b3d      	ldr	r3, [pc, #244]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0302 	and.w	r3, r3, #2
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d101      	bne.n	8004bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e06b      	b.n	8004caa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bd2:	4b39      	ldr	r3, [pc, #228]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f023 0203 	bic.w	r2, r3, #3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	4936      	ldr	r1, [pc, #216]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004be4:	f7fd ffac 	bl	8002b40 <HAL_GetTick>
 8004be8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bea:	e00a      	b.n	8004c02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bec:	f7fd ffa8 	bl	8002b40 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d901      	bls.n	8004c02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e053      	b.n	8004caa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c02:	4b2d      	ldr	r3, [pc, #180]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f003 020c 	and.w	r2, r3, #12
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d1eb      	bne.n	8004bec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c14:	4b27      	ldr	r3, [pc, #156]	@ (8004cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0307 	and.w	r3, r3, #7
 8004c1c:	683a      	ldr	r2, [r7, #0]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d210      	bcs.n	8004c44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c22:	4b24      	ldr	r3, [pc, #144]	@ (8004cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f023 0207 	bic.w	r2, r3, #7
 8004c2a:	4922      	ldr	r1, [pc, #136]	@ (8004cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c32:	4b20      	ldr	r3, [pc, #128]	@ (8004cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0307 	and.w	r3, r3, #7
 8004c3a:	683a      	ldr	r2, [r7, #0]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d001      	beq.n	8004c44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e032      	b.n	8004caa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0304 	and.w	r3, r3, #4
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d008      	beq.n	8004c62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c50:	4b19      	ldr	r3, [pc, #100]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	4916      	ldr	r1, [pc, #88]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0308 	and.w	r3, r3, #8
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d009      	beq.n	8004c82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004c6e:	4b12      	ldr	r3, [pc, #72]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	00db      	lsls	r3, r3, #3
 8004c7c:	490e      	ldr	r1, [pc, #56]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c82:	f000 f821 	bl	8004cc8 <HAL_RCC_GetSysClockFreq>
 8004c86:	4602      	mov	r2, r0
 8004c88:	4b0b      	ldr	r3, [pc, #44]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	091b      	lsrs	r3, r3, #4
 8004c8e:	f003 030f 	and.w	r3, r3, #15
 8004c92:	490a      	ldr	r1, [pc, #40]	@ (8004cbc <HAL_RCC_ClockConfig+0x1c8>)
 8004c94:	5ccb      	ldrb	r3, [r1, r3]
 8004c96:	fa22 f303 	lsr.w	r3, r2, r3
 8004c9a:	4a09      	ldr	r2, [pc, #36]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1cc>)
 8004c9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004c9e:	4b09      	ldr	r3, [pc, #36]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1d0>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7fd ff0a 	bl	8002abc <HAL_InitTick>

  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	40022000 	.word	0x40022000
 8004cb8:	40021000 	.word	0x40021000
 8004cbc:	080097d0 	.word	0x080097d0
 8004cc0:	20000034 	.word	0x20000034
 8004cc4:	20000038 	.word	0x20000038

08004cc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b087      	sub	sp, #28
 8004ccc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	60fb      	str	r3, [r7, #12]
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	60bb      	str	r3, [r7, #8]
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	617b      	str	r3, [r7, #20]
 8004cda:	2300      	movs	r3, #0
 8004cdc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004ce2:	4b1e      	ldr	r3, [pc, #120]	@ (8004d5c <HAL_RCC_GetSysClockFreq+0x94>)
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f003 030c 	and.w	r3, r3, #12
 8004cee:	2b04      	cmp	r3, #4
 8004cf0:	d002      	beq.n	8004cf8 <HAL_RCC_GetSysClockFreq+0x30>
 8004cf2:	2b08      	cmp	r3, #8
 8004cf4:	d003      	beq.n	8004cfe <HAL_RCC_GetSysClockFreq+0x36>
 8004cf6:	e027      	b.n	8004d48 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004cf8:	4b19      	ldr	r3, [pc, #100]	@ (8004d60 <HAL_RCC_GetSysClockFreq+0x98>)
 8004cfa:	613b      	str	r3, [r7, #16]
      break;
 8004cfc:	e027      	b.n	8004d4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	0c9b      	lsrs	r3, r3, #18
 8004d02:	f003 030f 	and.w	r3, r3, #15
 8004d06:	4a17      	ldr	r2, [pc, #92]	@ (8004d64 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004d08:	5cd3      	ldrb	r3, [r2, r3]
 8004d0a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d010      	beq.n	8004d38 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004d16:	4b11      	ldr	r3, [pc, #68]	@ (8004d5c <HAL_RCC_GetSysClockFreq+0x94>)
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	0c5b      	lsrs	r3, r3, #17
 8004d1c:	f003 0301 	and.w	r3, r3, #1
 8004d20:	4a11      	ldr	r2, [pc, #68]	@ (8004d68 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004d22:	5cd3      	ldrb	r3, [r2, r3]
 8004d24:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a0d      	ldr	r2, [pc, #52]	@ (8004d60 <HAL_RCC_GetSysClockFreq+0x98>)
 8004d2a:	fb03 f202 	mul.w	r2, r3, r2
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d34:	617b      	str	r3, [r7, #20]
 8004d36:	e004      	b.n	8004d42 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a0c      	ldr	r2, [pc, #48]	@ (8004d6c <HAL_RCC_GetSysClockFreq+0xa4>)
 8004d3c:	fb02 f303 	mul.w	r3, r2, r3
 8004d40:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	613b      	str	r3, [r7, #16]
      break;
 8004d46:	e002      	b.n	8004d4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004d48:	4b05      	ldr	r3, [pc, #20]	@ (8004d60 <HAL_RCC_GetSysClockFreq+0x98>)
 8004d4a:	613b      	str	r3, [r7, #16]
      break;
 8004d4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d4e:	693b      	ldr	r3, [r7, #16]
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	371c      	adds	r7, #28
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bc80      	pop	{r7}
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	40021000 	.word	0x40021000
 8004d60:	007a1200 	.word	0x007a1200
 8004d64:	080097e8 	.word	0x080097e8
 8004d68:	080097f8 	.word	0x080097f8
 8004d6c:	003d0900 	.word	0x003d0900

08004d70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d70:	b480      	push	{r7}
 8004d72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d74:	4b02      	ldr	r3, [pc, #8]	@ (8004d80 <HAL_RCC_GetHCLKFreq+0x10>)
 8004d76:	681b      	ldr	r3, [r3, #0]
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bc80      	pop	{r7}
 8004d7e:	4770      	bx	lr
 8004d80:	20000034 	.word	0x20000034

08004d84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d88:	f7ff fff2 	bl	8004d70 <HAL_RCC_GetHCLKFreq>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	4b05      	ldr	r3, [pc, #20]	@ (8004da4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	0a1b      	lsrs	r3, r3, #8
 8004d94:	f003 0307 	and.w	r3, r3, #7
 8004d98:	4903      	ldr	r1, [pc, #12]	@ (8004da8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d9a:	5ccb      	ldrb	r3, [r1, r3]
 8004d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	40021000 	.word	0x40021000
 8004da8:	080097e0 	.word	0x080097e0

08004dac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004db0:	f7ff ffde 	bl	8004d70 <HAL_RCC_GetHCLKFreq>
 8004db4:	4602      	mov	r2, r0
 8004db6:	4b05      	ldr	r3, [pc, #20]	@ (8004dcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	0adb      	lsrs	r3, r3, #11
 8004dbc:	f003 0307 	and.w	r3, r3, #7
 8004dc0:	4903      	ldr	r1, [pc, #12]	@ (8004dd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dc2:	5ccb      	ldrb	r3, [r1, r3]
 8004dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	40021000 	.word	0x40021000
 8004dd0:	080097e0 	.word	0x080097e0

08004dd4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8004e08 <RCC_Delay+0x34>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a0a      	ldr	r2, [pc, #40]	@ (8004e0c <RCC_Delay+0x38>)
 8004de2:	fba2 2303 	umull	r2, r3, r2, r3
 8004de6:	0a5b      	lsrs	r3, r3, #9
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	fb02 f303 	mul.w	r3, r2, r3
 8004dee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004df0:	bf00      	nop
  }
  while (Delay --);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	1e5a      	subs	r2, r3, #1
 8004df6:	60fa      	str	r2, [r7, #12]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1f9      	bne.n	8004df0 <RCC_Delay+0x1c>
}
 8004dfc:	bf00      	nop
 8004dfe:	bf00      	nop
 8004e00:	3714      	adds	r7, #20
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bc80      	pop	{r7}
 8004e06:	4770      	bx	lr
 8004e08:	20000034 	.word	0x20000034
 8004e0c:	10624dd3 	.word	0x10624dd3

08004e10 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b086      	sub	sp, #24
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	613b      	str	r3, [r7, #16]
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0301 	and.w	r3, r3, #1
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d07d      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e30:	4b4f      	ldr	r3, [pc, #316]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e32:	69db      	ldr	r3, [r3, #28]
 8004e34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d10d      	bne.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e3c:	4b4c      	ldr	r3, [pc, #304]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e3e:	69db      	ldr	r3, [r3, #28]
 8004e40:	4a4b      	ldr	r2, [pc, #300]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e46:	61d3      	str	r3, [r2, #28]
 8004e48:	4b49      	ldr	r3, [pc, #292]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e4a:	69db      	ldr	r3, [r3, #28]
 8004e4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e50:	60bb      	str	r3, [r7, #8]
 8004e52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e54:	2301      	movs	r3, #1
 8004e56:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e58:	4b46      	ldr	r3, [pc, #280]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d118      	bne.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e64:	4b43      	ldr	r3, [pc, #268]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a42      	ldr	r2, [pc, #264]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e70:	f7fd fe66 	bl	8002b40 <HAL_GetTick>
 8004e74:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e76:	e008      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e78:	f7fd fe62 	bl	8002b40 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	2b64      	cmp	r3, #100	@ 0x64
 8004e84:	d901      	bls.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e06d      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e8a:	4b3a      	ldr	r3, [pc, #232]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d0f0      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e96:	4b36      	ldr	r3, [pc, #216]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e9e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d02e      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d027      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004eb4:	4b2e      	ldr	r3, [pc, #184]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eb6:	6a1b      	ldr	r3, [r3, #32]
 8004eb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ebc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ebe:	4b2e      	ldr	r3, [pc, #184]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ec4:	4b2c      	ldr	r3, [pc, #176]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004eca:	4a29      	ldr	r2, [pc, #164]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d014      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eda:	f7fd fe31 	bl	8002b40 <HAL_GetTick>
 8004ede:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ee0:	e00a      	b.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ee2:	f7fd fe2d 	bl	8002b40 <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d901      	bls.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e036      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ef8:	4b1d      	ldr	r3, [pc, #116]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004efa:	6a1b      	ldr	r3, [r3, #32]
 8004efc:	f003 0302 	and.w	r3, r3, #2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d0ee      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f04:	4b1a      	ldr	r3, [pc, #104]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f06:	6a1b      	ldr	r3, [r3, #32]
 8004f08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	4917      	ldr	r1, [pc, #92]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f16:	7dfb      	ldrb	r3, [r7, #23]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d105      	bne.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f1c:	4b14      	ldr	r3, [pc, #80]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f1e:	69db      	ldr	r3, [r3, #28]
 8004f20:	4a13      	ldr	r2, [pc, #76]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f26:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0302 	and.w	r3, r3, #2
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d008      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f34:	4b0e      	ldr	r3, [pc, #56]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	490b      	ldr	r1, [pc, #44]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0310 	and.w	r3, r3, #16
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d008      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f52:	4b07      	ldr	r3, [pc, #28]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	4904      	ldr	r1, [pc, #16]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3718      	adds	r7, #24
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	40021000 	.word	0x40021000
 8004f74:	40007000 	.word	0x40007000
 8004f78:	42420440 	.word	0x42420440

08004f7c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b088      	sub	sp, #32
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004f84:	2300      	movs	r3, #0
 8004f86:	617b      	str	r3, [r7, #20]
 8004f88:	2300      	movs	r3, #0
 8004f8a:	61fb      	str	r3, [r7, #28]
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004f90:	2300      	movs	r3, #0
 8004f92:	60fb      	str	r3, [r7, #12]
 8004f94:	2300      	movs	r3, #0
 8004f96:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b10      	cmp	r3, #16
 8004f9c:	d00a      	beq.n	8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2b10      	cmp	r3, #16
 8004fa2:	f200 808a 	bhi.w	80050ba <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d045      	beq.n	8005038 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d075      	beq.n	800509e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004fb2:	e082      	b.n	80050ba <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004fb4:	4b46      	ldr	r3, [pc, #280]	@ (80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004fba:	4b45      	ldr	r3, [pc, #276]	@ (80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d07b      	beq.n	80050be <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	0c9b      	lsrs	r3, r3, #18
 8004fca:	f003 030f 	and.w	r3, r3, #15
 8004fce:	4a41      	ldr	r2, [pc, #260]	@ (80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004fd0:	5cd3      	ldrb	r3, [r2, r3]
 8004fd2:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d015      	beq.n	800500a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004fde:	4b3c      	ldr	r3, [pc, #240]	@ (80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	0c5b      	lsrs	r3, r3, #17
 8004fe4:	f003 0301 	and.w	r3, r3, #1
 8004fe8:	4a3b      	ldr	r2, [pc, #236]	@ (80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004fea:	5cd3      	ldrb	r3, [r2, r3]
 8004fec:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00d      	beq.n	8005014 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004ff8:	4a38      	ldr	r2, [pc, #224]	@ (80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	fb02 f303 	mul.w	r3, r2, r3
 8005006:	61fb      	str	r3, [r7, #28]
 8005008:	e004      	b.n	8005014 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	4a34      	ldr	r2, [pc, #208]	@ (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800500e:	fb02 f303 	mul.w	r3, r2, r3
 8005012:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005014:	4b2e      	ldr	r3, [pc, #184]	@ (80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800501c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005020:	d102      	bne.n	8005028 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	61bb      	str	r3, [r7, #24]
      break;
 8005026:	e04a      	b.n	80050be <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	005b      	lsls	r3, r3, #1
 800502c:	4a2d      	ldr	r2, [pc, #180]	@ (80050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800502e:	fba2 2303 	umull	r2, r3, r2, r3
 8005032:	085b      	lsrs	r3, r3, #1
 8005034:	61bb      	str	r3, [r7, #24]
      break;
 8005036:	e042      	b.n	80050be <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8005038:	4b25      	ldr	r3, [pc, #148]	@ (80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800503a:	6a1b      	ldr	r3, [r3, #32]
 800503c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005044:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005048:	d108      	bne.n	800505c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f003 0302 	and.w	r3, r3, #2
 8005050:	2b00      	cmp	r3, #0
 8005052:	d003      	beq.n	800505c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8005054:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005058:	61bb      	str	r3, [r7, #24]
 800505a:	e01f      	b.n	800509c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005062:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005066:	d109      	bne.n	800507c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005068:	4b19      	ldr	r3, [pc, #100]	@ (80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800506a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800506c:	f003 0302 	and.w	r3, r3, #2
 8005070:	2b00      	cmp	r3, #0
 8005072:	d003      	beq.n	800507c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8005074:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8005078:	61bb      	str	r3, [r7, #24]
 800507a:	e00f      	b.n	800509c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005082:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005086:	d11c      	bne.n	80050c2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005088:	4b11      	ldr	r3, [pc, #68]	@ (80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d016      	beq.n	80050c2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8005094:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8005098:	61bb      	str	r3, [r7, #24]
      break;
 800509a:	e012      	b.n	80050c2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800509c:	e011      	b.n	80050c2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800509e:	f7ff fe85 	bl	8004dac <HAL_RCC_GetPCLK2Freq>
 80050a2:	4602      	mov	r2, r0
 80050a4:	4b0a      	ldr	r3, [pc, #40]	@ (80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	0b9b      	lsrs	r3, r3, #14
 80050aa:	f003 0303 	and.w	r3, r3, #3
 80050ae:	3301      	adds	r3, #1
 80050b0:	005b      	lsls	r3, r3, #1
 80050b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b6:	61bb      	str	r3, [r7, #24]
      break;
 80050b8:	e004      	b.n	80050c4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80050ba:	bf00      	nop
 80050bc:	e002      	b.n	80050c4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80050be:	bf00      	nop
 80050c0:	e000      	b.n	80050c4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80050c2:	bf00      	nop
    }
  }
  return (frequency);
 80050c4:	69bb      	ldr	r3, [r7, #24]
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3720      	adds	r7, #32
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	40021000 	.word	0x40021000
 80050d4:	080097fc 	.word	0x080097fc
 80050d8:	0800980c 	.word	0x0800980c
 80050dc:	007a1200 	.word	0x007a1200
 80050e0:	003d0900 	.word	0x003d0900
 80050e4:	aaaaaaab 	.word	0xaaaaaaab

080050e8 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80050f0:	2300      	movs	r3, #0
 80050f2:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e07a      	b.n	80051f4 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	7c5b      	ldrb	r3, [r3, #17]
 8005102:	b2db      	uxtb	r3, r3
 8005104:	2b00      	cmp	r3, #0
 8005106:	d105      	bne.n	8005114 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f7fd fa22 	bl	8002558 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 fb81 	bl	8005822 <HAL_RTC_WaitForSynchro>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d004      	beq.n	8005130 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2204      	movs	r2, #4
 800512a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e061      	b.n	80051f4 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 fc3a 	bl	80059aa <RTC_EnterInitMode>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d004      	beq.n	8005146 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2204      	movs	r2, #4
 8005140:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e056      	b.n	80051f4 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	685a      	ldr	r2, [r3, #4]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f022 0207 	bic.w	r2, r2, #7
 8005154:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d005      	beq.n	800516a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800515e:	4b27      	ldr	r3, [pc, #156]	@ (80051fc <HAL_RTC_Init+0x114>)
 8005160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005162:	4a26      	ldr	r2, [pc, #152]	@ (80051fc <HAL_RTC_Init+0x114>)
 8005164:	f023 0301 	bic.w	r3, r3, #1
 8005168:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800516a:	4b24      	ldr	r3, [pc, #144]	@ (80051fc <HAL_RTC_Init+0x114>)
 800516c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800516e:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	4921      	ldr	r1, [pc, #132]	@ (80051fc <HAL_RTC_Init+0x114>)
 8005178:	4313      	orrs	r3, r2
 800517a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005184:	d003      	beq.n	800518e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	60fb      	str	r3, [r7, #12]
 800518c:	e00e      	b.n	80051ac <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800518e:	2001      	movs	r0, #1
 8005190:	f7ff fef4 	bl	8004f7c <HAL_RCCEx_GetPeriphCLKFreq>
 8005194:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d104      	bne.n	80051a6 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2204      	movs	r2, #4
 80051a0:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e026      	b.n	80051f4 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	3b01      	subs	r3, #1
 80051aa:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	0c1a      	lsrs	r2, r3, #16
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f002 020f 	and.w	r2, r2, #15
 80051b8:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	b292      	uxth	r2, r2
 80051c2:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 fc18 	bl	80059fa <RTC_ExitInitMode>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d004      	beq.n	80051da <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2204      	movs	r2, #4
 80051d4:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e00c      	b.n	80051f4 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2201      	movs	r2, #1
 80051ea:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80051f2:	2300      	movs	r3, #0
  }
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	40006c00 	.word	0x40006c00

08005200 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005200:	b590      	push	{r4, r7, lr}
 8005202:	b087      	sub	sp, #28
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 800520c:	2300      	movs	r3, #0
 800520e:	617b      	str	r3, [r7, #20]
 8005210:	2300      	movs	r3, #0
 8005212:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d002      	beq.n	8005220 <HAL_RTC_SetTime+0x20>
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d101      	bne.n	8005224 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e080      	b.n	8005326 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	7c1b      	ldrb	r3, [r3, #16]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d101      	bne.n	8005230 <HAL_RTC_SetTime+0x30>
 800522c:	2302      	movs	r3, #2
 800522e:	e07a      	b.n	8005326 <HAL_RTC_SetTime+0x126>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2201      	movs	r2, #1
 8005234:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2202      	movs	r2, #2
 800523a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d113      	bne.n	800526a <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	461a      	mov	r2, r3
 8005248:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800524c:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	785b      	ldrb	r3, [r3, #1]
 8005254:	4619      	mov	r1, r3
 8005256:	460b      	mov	r3, r1
 8005258:	011b      	lsls	r3, r3, #4
 800525a:	1a5b      	subs	r3, r3, r1
 800525c:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800525e:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8005260:	68ba      	ldr	r2, [r7, #8]
 8005262:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005264:	4413      	add	r3, r2
 8005266:	617b      	str	r3, [r7, #20]
 8005268:	e01e      	b.n	80052a8 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	4618      	mov	r0, r3
 8005270:	f000 fc08 	bl	8005a84 <RTC_Bcd2ToByte>
 8005274:	4603      	mov	r3, r0
 8005276:	461a      	mov	r2, r3
 8005278:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800527c:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	785b      	ldrb	r3, [r3, #1]
 8005284:	4618      	mov	r0, r3
 8005286:	f000 fbfd 	bl	8005a84 <RTC_Bcd2ToByte>
 800528a:	4603      	mov	r3, r0
 800528c:	461a      	mov	r2, r3
 800528e:	4613      	mov	r3, r2
 8005290:	011b      	lsls	r3, r3, #4
 8005292:	1a9b      	subs	r3, r3, r2
 8005294:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005296:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	789b      	ldrb	r3, [r3, #2]
 800529c:	4618      	mov	r0, r3
 800529e:	f000 fbf1 	bl	8005a84 <RTC_Bcd2ToByte>
 80052a2:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80052a4:	4423      	add	r3, r4
 80052a6:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80052a8:	6979      	ldr	r1, [r7, #20]
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f000 fb16 	bl	80058dc <RTC_WriteTimeCounter>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d007      	beq.n	80052c6 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2204      	movs	r2, #4
 80052ba:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e02f      	b.n	8005326 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f022 0205 	bic.w	r2, r2, #5
 80052d4:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80052d6:	68f8      	ldr	r0, [r7, #12]
 80052d8:	f000 fb27 	bl	800592a <RTC_ReadAlarmCounter>
 80052dc:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e4:	d018      	beq.n	8005318 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d214      	bcs.n	8005318 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 80052f4:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80052f8:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80052fa:	6939      	ldr	r1, [r7, #16]
 80052fc:	68f8      	ldr	r0, [r7, #12]
 80052fe:	f000 fb2d 	bl	800595c <RTC_WriteAlarmCounter>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d007      	beq.n	8005318 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2204      	movs	r2, #4
 800530c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e006      	b.n	8005326 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2201      	movs	r2, #1
 800531c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2200      	movs	r2, #0
 8005322:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8005324:	2300      	movs	r3, #0
  }
}
 8005326:	4618      	mov	r0, r3
 8005328:	371c      	adds	r7, #28
 800532a:	46bd      	mov	sp, r7
 800532c:	bd90      	pop	{r4, r7, pc}
	...

08005330 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b088      	sub	sp, #32
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 800533c:	2300      	movs	r3, #0
 800533e:	61bb      	str	r3, [r7, #24]
 8005340:	2300      	movs	r3, #0
 8005342:	61fb      	str	r3, [r7, #28]
 8005344:	2300      	movs	r3, #0
 8005346:	617b      	str	r3, [r7, #20]
 8005348:	2300      	movs	r3, #0
 800534a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d002      	beq.n	8005358 <HAL_RTC_GetTime+0x28>
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d101      	bne.n	800535c <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e0b5      	b.n	80054c8 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	f003 0304 	and.w	r3, r3, #4
 8005366:	2b00      	cmp	r3, #0
 8005368:	d001      	beq.n	800536e <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e0ac      	b.n	80054c8 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	f000 fa84 	bl	800587c <RTC_ReadTimeCounter>
 8005374:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	4a55      	ldr	r2, [pc, #340]	@ (80054d0 <HAL_RTC_GetTime+0x1a0>)
 800537a:	fba2 2303 	umull	r2, r3, r2, r3
 800537e:	0adb      	lsrs	r3, r3, #11
 8005380:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8005382:	69ba      	ldr	r2, [r7, #24]
 8005384:	4b52      	ldr	r3, [pc, #328]	@ (80054d0 <HAL_RTC_GetTime+0x1a0>)
 8005386:	fba3 1302 	umull	r1, r3, r3, r2
 800538a:	0adb      	lsrs	r3, r3, #11
 800538c:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8005390:	fb01 f303 	mul.w	r3, r1, r3
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	4a4f      	ldr	r2, [pc, #316]	@ (80054d4 <HAL_RTC_GetTime+0x1a4>)
 8005398:	fba2 2303 	umull	r2, r3, r2, r3
 800539c:	095b      	lsrs	r3, r3, #5
 800539e:	b2da      	uxtb	r2, r3
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	4a4a      	ldr	r2, [pc, #296]	@ (80054d0 <HAL_RTC_GetTime+0x1a0>)
 80053a8:	fba2 1203 	umull	r1, r2, r2, r3
 80053ac:	0ad2      	lsrs	r2, r2, #11
 80053ae:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 80053b2:	fb01 f202 	mul.w	r2, r1, r2
 80053b6:	1a9a      	subs	r2, r3, r2
 80053b8:	4b46      	ldr	r3, [pc, #280]	@ (80054d4 <HAL_RTC_GetTime+0x1a4>)
 80053ba:	fba3 1302 	umull	r1, r3, r3, r2
 80053be:	0959      	lsrs	r1, r3, #5
 80053c0:	460b      	mov	r3, r1
 80053c2:	011b      	lsls	r3, r3, #4
 80053c4:	1a5b      	subs	r3, r3, r1
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	1ad1      	subs	r1, r2, r3
 80053ca:	b2ca      	uxtb	r2, r1
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	2b17      	cmp	r3, #23
 80053d4:	d955      	bls.n	8005482 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	4a3f      	ldr	r2, [pc, #252]	@ (80054d8 <HAL_RTC_GetTime+0x1a8>)
 80053da:	fba2 2303 	umull	r2, r3, r2, r3
 80053de:	091b      	lsrs	r3, r3, #4
 80053e0:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80053e2:	6939      	ldr	r1, [r7, #16]
 80053e4:	4b3c      	ldr	r3, [pc, #240]	@ (80054d8 <HAL_RTC_GetTime+0x1a8>)
 80053e6:	fba3 2301 	umull	r2, r3, r3, r1
 80053ea:	091a      	lsrs	r2, r3, #4
 80053ec:	4613      	mov	r3, r2
 80053ee:	005b      	lsls	r3, r3, #1
 80053f0:	4413      	add	r3, r2
 80053f2:	00db      	lsls	r3, r3, #3
 80053f4:	1aca      	subs	r2, r1, r3
 80053f6:	b2d2      	uxtb	r2, r2
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80053fc:	68f8      	ldr	r0, [r7, #12]
 80053fe:	f000 fa94 	bl	800592a <RTC_ReadAlarmCounter>
 8005402:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800540a:	d008      	beq.n	800541e <HAL_RTC_GetTime+0xee>
 800540c:	69fa      	ldr	r2, [r7, #28]
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	429a      	cmp	r2, r3
 8005412:	d904      	bls.n	800541e <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8005414:	69fa      	ldr	r2, [r7, #28]
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	61fb      	str	r3, [r7, #28]
 800541c:	e002      	b.n	8005424 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800541e:	f04f 33ff 	mov.w	r3, #4294967295
 8005422:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	4a2d      	ldr	r2, [pc, #180]	@ (80054dc <HAL_RTC_GetTime+0x1ac>)
 8005428:	fb02 f303 	mul.w	r3, r2, r3
 800542c:	69ba      	ldr	r2, [r7, #24]
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005432:	69b9      	ldr	r1, [r7, #24]
 8005434:	68f8      	ldr	r0, [r7, #12]
 8005436:	f000 fa51 	bl	80058dc <RTC_WriteTimeCounter>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d001      	beq.n	8005444 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e041      	b.n	80054c8 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800544a:	d00c      	beq.n	8005466 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 800544c:	69fa      	ldr	r2, [r7, #28]
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	4413      	add	r3, r2
 8005452:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005454:	69f9      	ldr	r1, [r7, #28]
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f000 fa80 	bl	800595c <RTC_WriteAlarmCounter>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00a      	beq.n	8005478 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e030      	b.n	80054c8 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005466:	69f9      	ldr	r1, [r7, #28]
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	f000 fa77 	bl	800595c <RTC_WriteAlarmCounter>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d001      	beq.n	8005478 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e027      	b.n	80054c8 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8005478:	6979      	ldr	r1, [r7, #20]
 800547a:	68f8      	ldr	r0, [r7, #12]
 800547c:	f000 fb1f 	bl	8005abe <RTC_DateUpdate>
 8005480:	e003      	b.n	800548a <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	b2da      	uxtb	r2, r3
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d01a      	beq.n	80054c6 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	4618      	mov	r0, r3
 8005496:	f000 fad8 	bl	8005a4a <RTC_ByteToBcd2>
 800549a:	4603      	mov	r3, r0
 800549c:	461a      	mov	r2, r3
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	785b      	ldrb	r3, [r3, #1]
 80054a6:	4618      	mov	r0, r3
 80054a8:	f000 facf 	bl	8005a4a <RTC_ByteToBcd2>
 80054ac:	4603      	mov	r3, r0
 80054ae:	461a      	mov	r2, r3
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	789b      	ldrb	r3, [r3, #2]
 80054b8:	4618      	mov	r0, r3
 80054ba:	f000 fac6 	bl	8005a4a <RTC_ByteToBcd2>
 80054be:	4603      	mov	r3, r0
 80054c0:	461a      	mov	r2, r3
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3720      	adds	r7, #32
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	91a2b3c5 	.word	0x91a2b3c5
 80054d4:	88888889 	.word	0x88888889
 80054d8:	aaaaaaab 	.word	0xaaaaaaab
 80054dc:	00015180 	.word	0x00015180

080054e0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b088      	sub	sp, #32
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80054ec:	2300      	movs	r3, #0
 80054ee:	61fb      	str	r3, [r7, #28]
 80054f0:	2300      	movs	r3, #0
 80054f2:	61bb      	str	r3, [r7, #24]
 80054f4:	2300      	movs	r3, #0
 80054f6:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d002      	beq.n	8005504 <HAL_RTC_SetDate+0x24>
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d101      	bne.n	8005508 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e097      	b.n	8005638 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	7c1b      	ldrb	r3, [r3, #16]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d101      	bne.n	8005514 <HAL_RTC_SetDate+0x34>
 8005510:	2302      	movs	r3, #2
 8005512:	e091      	b.n	8005638 <HAL_RTC_SetDate+0x158>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2201      	movs	r2, #1
 8005518:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2202      	movs	r2, #2
 800551e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d10c      	bne.n	8005540 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	78da      	ldrb	r2, [r3, #3]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	785a      	ldrb	r2, [r3, #1]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	789a      	ldrb	r2, [r3, #2]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	739a      	strb	r2, [r3, #14]
 800553e:	e01a      	b.n	8005576 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	78db      	ldrb	r3, [r3, #3]
 8005544:	4618      	mov	r0, r3
 8005546:	f000 fa9d 	bl	8005a84 <RTC_Bcd2ToByte>
 800554a:	4603      	mov	r3, r0
 800554c:	461a      	mov	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	785b      	ldrb	r3, [r3, #1]
 8005556:	4618      	mov	r0, r3
 8005558:	f000 fa94 	bl	8005a84 <RTC_Bcd2ToByte>
 800555c:	4603      	mov	r3, r0
 800555e:	461a      	mov	r2, r3
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	789b      	ldrb	r3, [r3, #2]
 8005568:	4618      	mov	r0, r3
 800556a:	f000 fa8b 	bl	8005a84 <RTC_Bcd2ToByte>
 800556e:	4603      	mov	r3, r0
 8005570:	461a      	mov	r2, r3
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	7bdb      	ldrb	r3, [r3, #15]
 800557a:	4618      	mov	r0, r3
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	7b59      	ldrb	r1, [r3, #13]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	7b9b      	ldrb	r3, [r3, #14]
 8005584:	461a      	mov	r2, r3
 8005586:	f000 fb75 	bl	8005c74 <RTC_WeekDayNum>
 800558a:	4603      	mov	r3, r0
 800558c:	461a      	mov	r2, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	7b1a      	ldrb	r2, [r3, #12]
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800559a:	68f8      	ldr	r0, [r7, #12]
 800559c:	f000 f96e 	bl	800587c <RTC_ReadTimeCounter>
 80055a0:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	4a26      	ldr	r2, [pc, #152]	@ (8005640 <HAL_RTC_SetDate+0x160>)
 80055a6:	fba2 2303 	umull	r2, r3, r2, r3
 80055aa:	0adb      	lsrs	r3, r3, #11
 80055ac:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	2b18      	cmp	r3, #24
 80055b2:	d93a      	bls.n	800562a <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	4a23      	ldr	r2, [pc, #140]	@ (8005644 <HAL_RTC_SetDate+0x164>)
 80055b8:	fba2 2303 	umull	r2, r3, r2, r3
 80055bc:	091b      	lsrs	r3, r3, #4
 80055be:	4a22      	ldr	r2, [pc, #136]	@ (8005648 <HAL_RTC_SetDate+0x168>)
 80055c0:	fb02 f303 	mul.w	r3, r2, r3
 80055c4:	69fa      	ldr	r2, [r7, #28]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80055ca:	69f9      	ldr	r1, [r7, #28]
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f000 f985 	bl	80058dc <RTC_WriteTimeCounter>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d007      	beq.n	80055e8 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2204      	movs	r2, #4
 80055dc:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e027      	b.n	8005638 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f000 f99e 	bl	800592a <RTC_ReadAlarmCounter>
 80055ee:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f6:	d018      	beq.n	800562a <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80055f8:	69ba      	ldr	r2, [r7, #24]
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d214      	bcs.n	800562a <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8005606:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800560a:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800560c:	69b9      	ldr	r1, [r7, #24]
 800560e:	68f8      	ldr	r0, [r7, #12]
 8005610:	f000 f9a4 	bl	800595c <RTC_WriteAlarmCounter>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d007      	beq.n	800562a <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2204      	movs	r2, #4
 800561e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2200      	movs	r2, #0
 8005624:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e006      	b.n	8005638 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2201      	movs	r2, #1
 800562e:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3720      	adds	r7, #32
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	91a2b3c5 	.word	0x91a2b3c5
 8005644:	aaaaaaab 	.word	0xaaaaaaab
 8005648:	00015180 	.word	0x00015180

0800564c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800564c:	b590      	push	{r4, r7, lr}
 800564e:	b089      	sub	sp, #36	@ 0x24
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8005658:	2300      	movs	r3, #0
 800565a:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 800565c:	f107 0314 	add.w	r3, r7, #20
 8005660:	2100      	movs	r1, #0
 8005662:	460a      	mov	r2, r1
 8005664:	801a      	strh	r2, [r3, #0]
 8005666:	460a      	mov	r2, r1
 8005668:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d002      	beq.n	8005676 <HAL_RTC_SetAlarm_IT+0x2a>
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d101      	bne.n	800567a <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e099      	b.n	80057ae <HAL_RTC_SetAlarm_IT+0x162>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	7c1b      	ldrb	r3, [r3, #16]
 800567e:	2b01      	cmp	r3, #1
 8005680:	d101      	bne.n	8005686 <HAL_RTC_SetAlarm_IT+0x3a>
 8005682:	2302      	movs	r3, #2
 8005684:	e093      	b.n	80057ae <HAL_RTC_SetAlarm_IT+0x162>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2201      	movs	r2, #1
 800568a:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2202      	movs	r2, #2
 8005690:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8005692:	f107 0314 	add.w	r3, r7, #20
 8005696:	2200      	movs	r2, #0
 8005698:	4619      	mov	r1, r3
 800569a:	68f8      	ldr	r0, [r7, #12]
 800569c:	f7ff fe48 	bl	8005330 <HAL_RTC_GetTime>
 80056a0:	4603      	mov	r3, r0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d001      	beq.n	80056aa <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e081      	b.n	80057ae <HAL_RTC_SetAlarm_IT+0x162>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80056aa:	7d3b      	ldrb	r3, [r7, #20]
 80056ac:	461a      	mov	r2, r3
 80056ae:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80056b2:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 80056b6:	7d7b      	ldrb	r3, [r7, #21]
 80056b8:	4619      	mov	r1, r3
 80056ba:	460b      	mov	r3, r1
 80056bc:	011b      	lsls	r3, r3, #4
 80056be:	1a5b      	subs	r3, r3, r1
 80056c0:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80056c2:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 80056c4:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80056c6:	4413      	add	r3, r2
 80056c8:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d113      	bne.n	80056f8 <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	461a      	mov	r2, r3
 80056d6:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80056da:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	785b      	ldrb	r3, [r3, #1]
 80056e2:	4619      	mov	r1, r3
 80056e4:	460b      	mov	r3, r1
 80056e6:	011b      	lsls	r3, r3, #4
 80056e8:	1a5b      	subs	r3, r3, r1
 80056ea:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80056ec:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80056f2:	4413      	add	r3, r2
 80056f4:	61fb      	str	r3, [r7, #28]
 80056f6:	e01e      	b.n	8005736 <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	4618      	mov	r0, r3
 80056fe:	f000 f9c1 	bl	8005a84 <RTC_Bcd2ToByte>
 8005702:	4603      	mov	r3, r0
 8005704:	461a      	mov	r2, r3
 8005706:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800570a:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	785b      	ldrb	r3, [r3, #1]
 8005712:	4618      	mov	r0, r3
 8005714:	f000 f9b6 	bl	8005a84 <RTC_Bcd2ToByte>
 8005718:	4603      	mov	r3, r0
 800571a:	461a      	mov	r2, r3
 800571c:	4613      	mov	r3, r2
 800571e:	011b      	lsls	r3, r3, #4
 8005720:	1a9b      	subs	r3, r3, r2
 8005722:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8005724:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	789b      	ldrb	r3, [r3, #2]
 800572a:	4618      	mov	r0, r3
 800572c:	f000 f9aa 	bl	8005a84 <RTC_Bcd2ToByte>
 8005730:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8005732:	4423      	add	r3, r4
 8005734:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8005736:	69fa      	ldr	r2, [r7, #28]
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	429a      	cmp	r2, r3
 800573c:	d205      	bcs.n	800574a <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8005744:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8005748:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800574a:	69f9      	ldr	r1, [r7, #28]
 800574c:	68f8      	ldr	r0, [r7, #12]
 800574e:	f000 f905 	bl	800595c <RTC_WriteAlarmCounter>
 8005752:	4603      	mov	r3, r0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d007      	beq.n	8005768 <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2204      	movs	r2, #4
 800575c:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e022      	b.n	80057ae <HAL_RTC_SetAlarm_IT+0x162>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	685a      	ldr	r2, [r3, #4]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f022 0202 	bic.w	r2, r2, #2
 8005776:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f042 0202 	orr.w	r2, r2, #2
 8005786:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005788:	4b0b      	ldr	r3, [pc, #44]	@ (80057b8 <HAL_RTC_SetAlarm_IT+0x16c>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a0a      	ldr	r2, [pc, #40]	@ (80057b8 <HAL_RTC_SetAlarm_IT+0x16c>)
 800578e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005792:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8005794:	4b08      	ldr	r3, [pc, #32]	@ (80057b8 <HAL_RTC_SetAlarm_IT+0x16c>)
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	4a07      	ldr	r2, [pc, #28]	@ (80057b8 <HAL_RTC_SetAlarm_IT+0x16c>)
 800579a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800579e:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2201      	movs	r2, #1
 80057a4:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80057ac:	2300      	movs	r3, #0
  }
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3724      	adds	r7, #36	@ 0x24
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd90      	pop	{r4, r7, pc}
 80057b6:	bf00      	nop
 80057b8:	40010400 	.word	0x40010400

080057bc <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0302 	and.w	r3, r3, #2
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d011      	beq.n	80057f6 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	f003 0302 	and.w	r3, r3, #2
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00a      	beq.n	80057f6 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 f815 	bl	8005810 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	685a      	ldr	r2, [r3, #4]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f022 0202 	bic.w	r2, r2, #2
 80057f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80057f6:	4b05      	ldr	r3, [pc, #20]	@ (800580c <HAL_RTC_AlarmIRQHandler+0x50>)
 80057f8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80057fc:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2201      	movs	r2, #1
 8005802:	745a      	strb	r2, [r3, #17]
}
 8005804:	bf00      	nop
 8005806:	3708      	adds	r7, #8
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	40010400 	.word	0x40010400

08005810 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8005818:	bf00      	nop
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	bc80      	pop	{r7}
 8005820:	4770      	bx	lr

08005822 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005822:	b580      	push	{r7, lr}
 8005824:	b084      	sub	sp, #16
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800582a:	2300      	movs	r3, #0
 800582c:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d101      	bne.n	8005838 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e01d      	b.n	8005874 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	685a      	ldr	r2, [r3, #4]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f022 0208 	bic.w	r2, r2, #8
 8005846:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005848:	f7fd f97a 	bl	8002b40 <HAL_GetTick>
 800584c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800584e:	e009      	b.n	8005864 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005850:	f7fd f976 	bl	8002b40 <HAL_GetTick>
 8005854:	4602      	mov	r2, r0
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800585e:	d901      	bls.n	8005864 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e007      	b.n	8005874 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	f003 0308 	and.w	r3, r3, #8
 800586e:	2b00      	cmp	r3, #0
 8005870:	d0ee      	beq.n	8005850 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8005872:	2300      	movs	r3, #0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800587c:	b480      	push	{r7}
 800587e:	b087      	sub	sp, #28
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8005884:	2300      	movs	r3, #0
 8005886:	827b      	strh	r3, [r7, #18]
 8005888:	2300      	movs	r3, #0
 800588a:	823b      	strh	r3, [r7, #16]
 800588c:	2300      	movs	r3, #0
 800588e:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8005890:	2300      	movs	r3, #0
 8005892:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	69db      	ldr	r3, [r3, #28]
 80058a2:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80058ac:	8a7a      	ldrh	r2, [r7, #18]
 80058ae:	8a3b      	ldrh	r3, [r7, #16]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d008      	beq.n	80058c6 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80058b4:	8a3b      	ldrh	r3, [r7, #16]
 80058b6:	041a      	lsls	r2, r3, #16
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	69db      	ldr	r3, [r3, #28]
 80058be:	b29b      	uxth	r3, r3
 80058c0:	4313      	orrs	r3, r2
 80058c2:	617b      	str	r3, [r7, #20]
 80058c4:	e004      	b.n	80058d0 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80058c6:	8a7b      	ldrh	r3, [r7, #18]
 80058c8:	041a      	lsls	r2, r3, #16
 80058ca:	89fb      	ldrh	r3, [r7, #14]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80058d0:	697b      	ldr	r3, [r7, #20]
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	371c      	adds	r7, #28
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bc80      	pop	{r7}
 80058da:	4770      	bx	lr

080058dc <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058e6:	2300      	movs	r3, #0
 80058e8:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 f85d 	bl	80059aa <RTC_EnterInitMode>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d002      	beq.n	80058fc <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	73fb      	strb	r3, [r7, #15]
 80058fa:	e011      	b.n	8005920 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	683a      	ldr	r2, [r7, #0]
 8005902:	0c12      	lsrs	r2, r2, #16
 8005904:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	683a      	ldr	r2, [r7, #0]
 800590c:	b292      	uxth	r2, r2
 800590e:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 f872 	bl	80059fa <RTC_ExitInitMode>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d001      	beq.n	8005920 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005920:	7bfb      	ldrb	r3, [r7, #15]
}
 8005922:	4618      	mov	r0, r3
 8005924:	3710      	adds	r7, #16
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 800592a:	b480      	push	{r7}
 800592c:	b085      	sub	sp, #20
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8005932:	2300      	movs	r3, #0
 8005934:	81fb      	strh	r3, [r7, #14]
 8005936:	2300      	movs	r3, #0
 8005938:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	6a1b      	ldr	r3, [r3, #32]
 8005940:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005948:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 800594a:	89fb      	ldrh	r3, [r7, #14]
 800594c:	041a      	lsls	r2, r3, #16
 800594e:	89bb      	ldrh	r3, [r7, #12]
 8005950:	4313      	orrs	r3, r2
}
 8005952:	4618      	mov	r0, r3
 8005954:	3714      	adds	r7, #20
 8005956:	46bd      	mov	sp, r7
 8005958:	bc80      	pop	{r7}
 800595a:	4770      	bx	lr

0800595c <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005966:	2300      	movs	r3, #0
 8005968:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 f81d 	bl	80059aa <RTC_EnterInitMode>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d002      	beq.n	800597c <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	73fb      	strb	r3, [r7, #15]
 800597a:	e011      	b.n	80059a0 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	683a      	ldr	r2, [r7, #0]
 8005982:	0c12      	lsrs	r2, r2, #16
 8005984:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	683a      	ldr	r2, [r7, #0]
 800598c:	b292      	uxth	r2, r2
 800598e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 f832 	bl	80059fa <RTC_ExitInitMode>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d001      	beq.n	80059a0 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80059a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3710      	adds	r7, #16
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}

080059aa <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80059aa:	b580      	push	{r7, lr}
 80059ac:	b084      	sub	sp, #16
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80059b2:	2300      	movs	r3, #0
 80059b4:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80059b6:	f7fd f8c3 	bl	8002b40 <HAL_GetTick>
 80059ba:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80059bc:	e009      	b.n	80059d2 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80059be:	f7fd f8bf 	bl	8002b40 <HAL_GetTick>
 80059c2:	4602      	mov	r2, r0
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80059cc:	d901      	bls.n	80059d2 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e00f      	b.n	80059f2 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f003 0320 	and.w	r3, r3, #32
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d0ee      	beq.n	80059be <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	685a      	ldr	r2, [r3, #4]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f042 0210 	orr.w	r2, r2, #16
 80059ee:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3710      	adds	r7, #16
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}

080059fa <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b084      	sub	sp, #16
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a02:	2300      	movs	r3, #0
 8005a04:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	685a      	ldr	r2, [r3, #4]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f022 0210 	bic.w	r2, r2, #16
 8005a14:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005a16:	f7fd f893 	bl	8002b40 <HAL_GetTick>
 8005a1a:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005a1c:	e009      	b.n	8005a32 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005a1e:	f7fd f88f 	bl	8002b40 <HAL_GetTick>
 8005a22:	4602      	mov	r2, r0
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005a2c:	d901      	bls.n	8005a32 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e007      	b.n	8005a42 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	f003 0320 	and.w	r3, r3, #32
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d0ee      	beq.n	8005a1e <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3710      	adds	r7, #16
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}

08005a4a <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005a4a:	b480      	push	{r7}
 8005a4c:	b085      	sub	sp, #20
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	4603      	mov	r3, r0
 8005a52:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005a54:	2300      	movs	r3, #0
 8005a56:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8005a58:	e005      	b.n	8005a66 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005a60:	79fb      	ldrb	r3, [r7, #7]
 8005a62:	3b0a      	subs	r3, #10
 8005a64:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8005a66:	79fb      	ldrb	r3, [r7, #7]
 8005a68:	2b09      	cmp	r3, #9
 8005a6a:	d8f6      	bhi.n	8005a5a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	011b      	lsls	r3, r3, #4
 8005a72:	b2da      	uxtb	r2, r3
 8005a74:	79fb      	ldrb	r3, [r7, #7]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	b2db      	uxtb	r3, r3
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3714      	adds	r7, #20
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bc80      	pop	{r7}
 8005a82:	4770      	bx	lr

08005a84 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8005a92:	79fb      	ldrb	r3, [r7, #7]
 8005a94:	091b      	lsrs	r3, r3, #4
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	461a      	mov	r2, r3
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	4413      	add	r3, r2
 8005aa0:	005b      	lsls	r3, r3, #1
 8005aa2:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005aa4:	79fb      	ldrb	r3, [r7, #7]
 8005aa6:	f003 030f 	and.w	r3, r3, #15
 8005aaa:	b2da      	uxtb	r2, r3
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	4413      	add	r3, r2
 8005ab2:	b2db      	uxtb	r3, r3
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3714      	adds	r7, #20
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bc80      	pop	{r7}
 8005abc:	4770      	bx	lr

08005abe <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b086      	sub	sp, #24
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
 8005ac6:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	617b      	str	r3, [r7, #20]
 8005acc:	2300      	movs	r3, #0
 8005ace:	613b      	str	r3, [r7, #16]
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	7bdb      	ldrb	r3, [r3, #15]
 8005adc:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	7b5b      	ldrb	r3, [r3, #13]
 8005ae2:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	7b9b      	ldrb	r3, [r3, #14]
 8005ae8:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8005aea:	2300      	movs	r3, #0
 8005aec:	60bb      	str	r3, [r7, #8]
 8005aee:	e06f      	b.n	8005bd0 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d011      	beq.n	8005b1a <RTC_DateUpdate+0x5c>
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	2b03      	cmp	r3, #3
 8005afa:	d00e      	beq.n	8005b1a <RTC_DateUpdate+0x5c>
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	2b05      	cmp	r3, #5
 8005b00:	d00b      	beq.n	8005b1a <RTC_DateUpdate+0x5c>
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	2b07      	cmp	r3, #7
 8005b06:	d008      	beq.n	8005b1a <RTC_DateUpdate+0x5c>
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	2b08      	cmp	r3, #8
 8005b0c:	d005      	beq.n	8005b1a <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	2b0a      	cmp	r3, #10
 8005b12:	d002      	beq.n	8005b1a <RTC_DateUpdate+0x5c>
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	2b0c      	cmp	r3, #12
 8005b18:	d117      	bne.n	8005b4a <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2b1e      	cmp	r3, #30
 8005b1e:	d803      	bhi.n	8005b28 <RTC_DateUpdate+0x6a>
      {
        day++;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	3301      	adds	r3, #1
 8005b24:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005b26:	e050      	b.n	8005bca <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	2b0c      	cmp	r3, #12
 8005b2c:	d005      	beq.n	8005b3a <RTC_DateUpdate+0x7c>
        {
          month++;
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	3301      	adds	r3, #1
 8005b32:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005b34:	2301      	movs	r3, #1
 8005b36:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005b38:	e047      	b.n	8005bca <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	60fb      	str	r3, [r7, #12]
          year++;
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	3301      	adds	r3, #1
 8005b46:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8005b48:	e03f      	b.n	8005bca <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	2b04      	cmp	r3, #4
 8005b4e:	d008      	beq.n	8005b62 <RTC_DateUpdate+0xa4>
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	2b06      	cmp	r3, #6
 8005b54:	d005      	beq.n	8005b62 <RTC_DateUpdate+0xa4>
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	2b09      	cmp	r3, #9
 8005b5a:	d002      	beq.n	8005b62 <RTC_DateUpdate+0xa4>
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	2b0b      	cmp	r3, #11
 8005b60:	d10c      	bne.n	8005b7c <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2b1d      	cmp	r3, #29
 8005b66:	d803      	bhi.n	8005b70 <RTC_DateUpdate+0xb2>
      {
        day++;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005b6e:	e02c      	b.n	8005bca <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	3301      	adds	r3, #1
 8005b74:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005b76:	2301      	movs	r3, #1
 8005b78:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005b7a:	e026      	b.n	8005bca <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d123      	bne.n	8005bca <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2b1b      	cmp	r3, #27
 8005b86:	d803      	bhi.n	8005b90 <RTC_DateUpdate+0xd2>
      {
        day++;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	60fb      	str	r3, [r7, #12]
 8005b8e:	e01c      	b.n	8005bca <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2b1c      	cmp	r3, #28
 8005b94:	d111      	bne.n	8005bba <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f000 f838 	bl	8005c10 <RTC_IsLeapYear>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d003      	beq.n	8005bae <RTC_DateUpdate+0xf0>
        {
          day++;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	3301      	adds	r3, #1
 8005baa:	60fb      	str	r3, [r7, #12]
 8005bac:	e00d      	b.n	8005bca <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	60fb      	str	r3, [r7, #12]
 8005bb8:	e007      	b.n	8005bca <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2b1d      	cmp	r3, #29
 8005bbe:	d104      	bne.n	8005bca <RTC_DateUpdate+0x10c>
      {
        month++;
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	3301      	adds	r3, #1
 8005bce:	60bb      	str	r3, [r7, #8]
 8005bd0:	68ba      	ldr	r2, [r7, #8]
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d38b      	bcc.n	8005af0 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	b2da      	uxtb	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	b2da      	uxtb	r2, r3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	b2da      	uxtb	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	b2d2      	uxtb	r2, r2
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	6978      	ldr	r0, [r7, #20]
 8005bfc:	f000 f83a 	bl	8005c74 <RTC_WeekDayNum>
 8005c00:	4603      	mov	r3, r0
 8005c02:	461a      	mov	r2, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	731a      	strb	r2, [r3, #12]
}
 8005c08:	bf00      	nop
 8005c0a:	3718      	adds	r7, #24
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	4603      	mov	r3, r0
 8005c18:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8005c1a:	88fb      	ldrh	r3, [r7, #6]
 8005c1c:	f003 0303 	and.w	r3, r3, #3
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d001      	beq.n	8005c2a <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8005c26:	2300      	movs	r3, #0
 8005c28:	e01d      	b.n	8005c66 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8005c2a:	88fb      	ldrh	r3, [r7, #6]
 8005c2c:	4a10      	ldr	r2, [pc, #64]	@ (8005c70 <RTC_IsLeapYear+0x60>)
 8005c2e:	fba2 1203 	umull	r1, r2, r2, r3
 8005c32:	0952      	lsrs	r2, r2, #5
 8005c34:	2164      	movs	r1, #100	@ 0x64
 8005c36:	fb01 f202 	mul.w	r2, r1, r2
 8005c3a:	1a9b      	subs	r3, r3, r2
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d001      	beq.n	8005c46 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e00f      	b.n	8005c66 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8005c46:	88fb      	ldrh	r3, [r7, #6]
 8005c48:	4a09      	ldr	r2, [pc, #36]	@ (8005c70 <RTC_IsLeapYear+0x60>)
 8005c4a:	fba2 1203 	umull	r1, r2, r2, r3
 8005c4e:	09d2      	lsrs	r2, r2, #7
 8005c50:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8005c54:	fb01 f202 	mul.w	r2, r1, r2
 8005c58:	1a9b      	subs	r3, r3, r2
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d101      	bne.n	8005c64 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e000      	b.n	8005c66 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8005c64:	2300      	movs	r3, #0
  }
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	370c      	adds	r7, #12
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bc80      	pop	{r7}
 8005c6e:	4770      	bx	lr
 8005c70:	51eb851f 	.word	0x51eb851f

08005c74 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	70fb      	strb	r3, [r7, #3]
 8005c80:	4613      	mov	r3, r2
 8005c82:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8005c84:	2300      	movs	r3, #0
 8005c86:	60bb      	str	r3, [r7, #8]
 8005c88:	2300      	movs	r3, #0
 8005c8a:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8005c92:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8005c94:	78fb      	ldrb	r3, [r7, #3]
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d82d      	bhi.n	8005cf6 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8005c9a:	78fa      	ldrb	r2, [r7, #3]
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	005b      	lsls	r3, r3, #1
 8005ca0:	4413      	add	r3, r2
 8005ca2:	00db      	lsls	r3, r3, #3
 8005ca4:	1a9b      	subs	r3, r3, r2
 8005ca6:	4a2c      	ldr	r2, [pc, #176]	@ (8005d58 <RTC_WeekDayNum+0xe4>)
 8005ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cac:	085a      	lsrs	r2, r3, #1
 8005cae:	78bb      	ldrb	r3, [r7, #2]
 8005cb0:	441a      	add	r2, r3
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	441a      	add	r2, r3
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	089b      	lsrs	r3, r3, #2
 8005cbc:	441a      	add	r2, r3
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	3b01      	subs	r3, #1
 8005cc2:	4926      	ldr	r1, [pc, #152]	@ (8005d5c <RTC_WeekDayNum+0xe8>)
 8005cc4:	fba1 1303 	umull	r1, r3, r1, r3
 8005cc8:	095b      	lsrs	r3, r3, #5
 8005cca:	1ad2      	subs	r2, r2, r3
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	4922      	ldr	r1, [pc, #136]	@ (8005d5c <RTC_WeekDayNum+0xe8>)
 8005cd2:	fba1 1303 	umull	r1, r3, r1, r3
 8005cd6:	09db      	lsrs	r3, r3, #7
 8005cd8:	4413      	add	r3, r2
 8005cda:	1d1a      	adds	r2, r3, #4
 8005cdc:	4b20      	ldr	r3, [pc, #128]	@ (8005d60 <RTC_WeekDayNum+0xec>)
 8005cde:	fba3 1302 	umull	r1, r3, r3, r2
 8005ce2:	1ad1      	subs	r1, r2, r3
 8005ce4:	0849      	lsrs	r1, r1, #1
 8005ce6:	440b      	add	r3, r1
 8005ce8:	0899      	lsrs	r1, r3, #2
 8005cea:	460b      	mov	r3, r1
 8005cec:	00db      	lsls	r3, r3, #3
 8005cee:	1a5b      	subs	r3, r3, r1
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	60fb      	str	r3, [r7, #12]
 8005cf4:	e029      	b.n	8005d4a <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8005cf6:	78fa      	ldrb	r2, [r7, #3]
 8005cf8:	4613      	mov	r3, r2
 8005cfa:	005b      	lsls	r3, r3, #1
 8005cfc:	4413      	add	r3, r2
 8005cfe:	00db      	lsls	r3, r3, #3
 8005d00:	1a9b      	subs	r3, r3, r2
 8005d02:	4a15      	ldr	r2, [pc, #84]	@ (8005d58 <RTC_WeekDayNum+0xe4>)
 8005d04:	fba2 2303 	umull	r2, r3, r2, r3
 8005d08:	085a      	lsrs	r2, r3, #1
 8005d0a:	78bb      	ldrb	r3, [r7, #2]
 8005d0c:	441a      	add	r2, r3
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	441a      	add	r2, r3
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	089b      	lsrs	r3, r3, #2
 8005d16:	441a      	add	r2, r3
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	4910      	ldr	r1, [pc, #64]	@ (8005d5c <RTC_WeekDayNum+0xe8>)
 8005d1c:	fba1 1303 	umull	r1, r3, r1, r3
 8005d20:	095b      	lsrs	r3, r3, #5
 8005d22:	1ad2      	subs	r2, r2, r3
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	490d      	ldr	r1, [pc, #52]	@ (8005d5c <RTC_WeekDayNum+0xe8>)
 8005d28:	fba1 1303 	umull	r1, r3, r1, r3
 8005d2c:	09db      	lsrs	r3, r3, #7
 8005d2e:	4413      	add	r3, r2
 8005d30:	1c9a      	adds	r2, r3, #2
 8005d32:	4b0b      	ldr	r3, [pc, #44]	@ (8005d60 <RTC_WeekDayNum+0xec>)
 8005d34:	fba3 1302 	umull	r1, r3, r3, r2
 8005d38:	1ad1      	subs	r1, r2, r3
 8005d3a:	0849      	lsrs	r1, r1, #1
 8005d3c:	440b      	add	r3, r1
 8005d3e:	0899      	lsrs	r1, r3, #2
 8005d40:	460b      	mov	r3, r1
 8005d42:	00db      	lsls	r3, r3, #3
 8005d44:	1a5b      	subs	r3, r3, r1
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	b2db      	uxtb	r3, r3
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3714      	adds	r7, #20
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bc80      	pop	{r7}
 8005d56:	4770      	bx	lr
 8005d58:	38e38e39 	.word	0x38e38e39
 8005d5c:	51eb851f 	.word	0x51eb851f
 8005d60:	24924925 	.word	0x24924925

08005d64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d101      	bne.n	8005d76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e076      	b.n	8005e64 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d108      	bne.n	8005d90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d86:	d009      	beq.n	8005d9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	61da      	str	r2, [r3, #28]
 8005d8e:	e005      	b.n	8005d9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d106      	bne.n	8005dbc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f7fc fbfa 	bl	80025b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2202      	movs	r2, #2
 8005dc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005dd2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005de4:	431a      	orrs	r2, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005dee:	431a      	orrs	r2, r3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	f003 0302 	and.w	r3, r3, #2
 8005df8:	431a      	orrs	r2, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	f003 0301 	and.w	r3, r3, #1
 8005e02:	431a      	orrs	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	699b      	ldr	r3, [r3, #24]
 8005e08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e0c:	431a      	orrs	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	69db      	ldr	r3, [r3, #28]
 8005e12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e16:	431a      	orrs	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6a1b      	ldr	r3, [r3, #32]
 8005e1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e20:	ea42 0103 	orr.w	r1, r2, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e28:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	430a      	orrs	r2, r1
 8005e32:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	0c1a      	lsrs	r2, r3, #16
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f002 0204 	and.w	r2, r2, #4
 8005e42:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	69da      	ldr	r2, [r3, #28]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e52:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005e62:	2300      	movs	r3, #0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3708      	adds	r7, #8
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b088      	sub	sp, #32
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	603b      	str	r3, [r7, #0]
 8005e78:	4613      	mov	r3, r2
 8005e7a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e7c:	f7fc fe60 	bl	8002b40 <HAL_GetTick>
 8005e80:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005e82:	88fb      	ldrh	r3, [r7, #6]
 8005e84:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d001      	beq.n	8005e96 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005e92:	2302      	movs	r3, #2
 8005e94:	e12a      	b.n	80060ec <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d002      	beq.n	8005ea2 <HAL_SPI_Transmit+0x36>
 8005e9c:	88fb      	ldrh	r3, [r7, #6]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d101      	bne.n	8005ea6 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e122      	b.n	80060ec <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d101      	bne.n	8005eb4 <HAL_SPI_Transmit+0x48>
 8005eb0:	2302      	movs	r3, #2
 8005eb2:	e11b      	b.n	80060ec <HAL_SPI_Transmit+0x280>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2203      	movs	r2, #3
 8005ec0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	68ba      	ldr	r2, [r7, #8]
 8005ece:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	88fa      	ldrh	r2, [r7, #6]
 8005ed4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	88fa      	ldrh	r2, [r7, #6]
 8005eda:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f02:	d10f      	bne.n	8005f24 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f12:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f22:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f2e:	2b40      	cmp	r3, #64	@ 0x40
 8005f30:	d007      	beq.n	8005f42 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f40:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f4a:	d152      	bne.n	8005ff2 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d002      	beq.n	8005f5a <HAL_SPI_Transmit+0xee>
 8005f54:	8b7b      	ldrh	r3, [r7, #26]
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d145      	bne.n	8005fe6 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f5e:	881a      	ldrh	r2, [r3, #0]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f6a:	1c9a      	adds	r2, r3, #2
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	3b01      	subs	r3, #1
 8005f78:	b29a      	uxth	r2, r3
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005f7e:	e032      	b.n	8005fe6 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	f003 0302 	and.w	r3, r3, #2
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	d112      	bne.n	8005fb4 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f92:	881a      	ldrh	r2, [r3, #0]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f9e:	1c9a      	adds	r2, r3, #2
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	3b01      	subs	r3, #1
 8005fac:	b29a      	uxth	r2, r3
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005fb2:	e018      	b.n	8005fe6 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fb4:	f7fc fdc4 	bl	8002b40 <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	683a      	ldr	r2, [r7, #0]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d803      	bhi.n	8005fcc <HAL_SPI_Transmit+0x160>
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fca:	d102      	bne.n	8005fd2 <HAL_SPI_Transmit+0x166>
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d109      	bne.n	8005fe6 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e082      	b.n	80060ec <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d1c7      	bne.n	8005f80 <HAL_SPI_Transmit+0x114>
 8005ff0:	e053      	b.n	800609a <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d002      	beq.n	8006000 <HAL_SPI_Transmit+0x194>
 8005ffa:	8b7b      	ldrh	r3, [r7, #26]
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d147      	bne.n	8006090 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	330c      	adds	r3, #12
 800600a:	7812      	ldrb	r2, [r2, #0]
 800600c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006012:	1c5a      	adds	r2, r3, #1
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800601c:	b29b      	uxth	r3, r3
 800601e:	3b01      	subs	r3, #1
 8006020:	b29a      	uxth	r2, r3
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006026:	e033      	b.n	8006090 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	f003 0302 	and.w	r3, r3, #2
 8006032:	2b02      	cmp	r3, #2
 8006034:	d113      	bne.n	800605e <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	330c      	adds	r3, #12
 8006040:	7812      	ldrb	r2, [r2, #0]
 8006042:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006048:	1c5a      	adds	r2, r3, #1
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006052:	b29b      	uxth	r3, r3
 8006054:	3b01      	subs	r3, #1
 8006056:	b29a      	uxth	r2, r3
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800605c:	e018      	b.n	8006090 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800605e:	f7fc fd6f 	bl	8002b40 <HAL_GetTick>
 8006062:	4602      	mov	r2, r0
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	683a      	ldr	r2, [r7, #0]
 800606a:	429a      	cmp	r2, r3
 800606c:	d803      	bhi.n	8006076 <HAL_SPI_Transmit+0x20a>
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006074:	d102      	bne.n	800607c <HAL_SPI_Transmit+0x210>
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d109      	bne.n	8006090 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800608c:	2303      	movs	r3, #3
 800608e:	e02d      	b.n	80060ec <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006094:	b29b      	uxth	r3, r3
 8006096:	2b00      	cmp	r3, #0
 8006098:	d1c6      	bne.n	8006028 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800609a:	69fa      	ldr	r2, [r7, #28]
 800609c:	6839      	ldr	r1, [r7, #0]
 800609e:	68f8      	ldr	r0, [r7, #12]
 80060a0:	f000 f8b0 	bl	8006204 <SPI_EndRxTxTransaction>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d002      	beq.n	80060b0 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2220      	movs	r2, #32
 80060ae:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d10a      	bne.n	80060ce <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060b8:	2300      	movs	r3, #0
 80060ba:	617b      	str	r3, [r7, #20]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	617b      	str	r3, [r7, #20]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	617b      	str	r3, [r7, #20]
 80060cc:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d001      	beq.n	80060ea <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e000      	b.n	80060ec <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80060ea:	2300      	movs	r3, #0
  }
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3720      	adds	r7, #32
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b088      	sub	sp, #32
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	603b      	str	r3, [r7, #0]
 8006100:	4613      	mov	r3, r2
 8006102:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006104:	f7fc fd1c 	bl	8002b40 <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800610c:	1a9b      	subs	r3, r3, r2
 800610e:	683a      	ldr	r2, [r7, #0]
 8006110:	4413      	add	r3, r2
 8006112:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006114:	f7fc fd14 	bl	8002b40 <HAL_GetTick>
 8006118:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800611a:	4b39      	ldr	r3, [pc, #228]	@ (8006200 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	015b      	lsls	r3, r3, #5
 8006120:	0d1b      	lsrs	r3, r3, #20
 8006122:	69fa      	ldr	r2, [r7, #28]
 8006124:	fb02 f303 	mul.w	r3, r2, r3
 8006128:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800612a:	e054      	b.n	80061d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006132:	d050      	beq.n	80061d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006134:	f7fc fd04 	bl	8002b40 <HAL_GetTick>
 8006138:	4602      	mov	r2, r0
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	69fa      	ldr	r2, [r7, #28]
 8006140:	429a      	cmp	r2, r3
 8006142:	d902      	bls.n	800614a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d13d      	bne.n	80061c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	685a      	ldr	r2, [r3, #4]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006158:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006162:	d111      	bne.n	8006188 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800616c:	d004      	beq.n	8006178 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006176:	d107      	bne.n	8006188 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006186:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800618c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006190:	d10f      	bne.n	80061b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80061a0:	601a      	str	r2, [r3, #0]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80061b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	e017      	b.n	80061f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d101      	bne.n	80061d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80061cc:	2300      	movs	r3, #0
 80061ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	3b01      	subs	r3, #1
 80061d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	689a      	ldr	r2, [r3, #8]
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	4013      	ands	r3, r2
 80061e0:	68ba      	ldr	r2, [r7, #8]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	bf0c      	ite	eq
 80061e6:	2301      	moveq	r3, #1
 80061e8:	2300      	movne	r3, #0
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	461a      	mov	r2, r3
 80061ee:	79fb      	ldrb	r3, [r7, #7]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d19b      	bne.n	800612c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3720      	adds	r7, #32
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	20000034 	.word	0x20000034

08006204 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b086      	sub	sp, #24
 8006208:	af02      	add	r7, sp, #8
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	9300      	str	r3, [sp, #0]
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	2201      	movs	r2, #1
 8006218:	2102      	movs	r1, #2
 800621a:	68f8      	ldr	r0, [r7, #12]
 800621c:	f7ff ff6a 	bl	80060f4 <SPI_WaitFlagStateUntilTimeout>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d007      	beq.n	8006236 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800622a:	f043 0220 	orr.w	r2, r3, #32
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e013      	b.n	800625e <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	9300      	str	r3, [sp, #0]
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	2200      	movs	r2, #0
 800623e:	2180      	movs	r1, #128	@ 0x80
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f7ff ff57 	bl	80060f4 <SPI_WaitFlagStateUntilTimeout>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d007      	beq.n	800625c <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006250:	f043 0220 	orr.w	r2, r3, #32
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006258:	2303      	movs	r3, #3
 800625a:	e000      	b.n	800625e <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3710      	adds	r7, #16
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006266:	b580      	push	{r7, lr}
 8006268:	b082      	sub	sp, #8
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d101      	bne.n	8006278 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e041      	b.n	80062fc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800627e:	b2db      	uxtb	r3, r3
 8006280:	2b00      	cmp	r3, #0
 8006282:	d106      	bne.n	8006292 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f7fc f9e9 	bl	8002664 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2202      	movs	r2, #2
 8006296:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	3304      	adds	r3, #4
 80062a2:	4619      	mov	r1, r3
 80062a4:	4610      	mov	r0, r2
 80062a6:	f000 f93f 	bl	8006528 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2201      	movs	r2, #1
 80062ae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2201      	movs	r2, #1
 80062be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2201      	movs	r2, #1
 80062c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2201      	movs	r2, #1
 80062ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2201      	movs	r2, #1
 80062d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2201      	movs	r2, #1
 80062de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2201      	movs	r2, #1
 80062e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2201      	movs	r2, #1
 80062ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2201      	movs	r2, #1
 80062f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3708      	adds	r7, #8
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006312:	b2db      	uxtb	r3, r3
 8006314:	2b01      	cmp	r3, #1
 8006316:	d001      	beq.n	800631c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e032      	b.n	8006382 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2202      	movs	r2, #2
 8006320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a18      	ldr	r2, [pc, #96]	@ (800638c <HAL_TIM_Base_Start+0x88>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d00e      	beq.n	800634c <HAL_TIM_Base_Start+0x48>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006336:	d009      	beq.n	800634c <HAL_TIM_Base_Start+0x48>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a14      	ldr	r2, [pc, #80]	@ (8006390 <HAL_TIM_Base_Start+0x8c>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d004      	beq.n	800634c <HAL_TIM_Base_Start+0x48>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a13      	ldr	r2, [pc, #76]	@ (8006394 <HAL_TIM_Base_Start+0x90>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d111      	bne.n	8006370 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	f003 0307 	and.w	r3, r3, #7
 8006356:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2b06      	cmp	r3, #6
 800635c:	d010      	beq.n	8006380 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f042 0201 	orr.w	r2, r2, #1
 800636c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800636e:	e007      	b.n	8006380 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f042 0201 	orr.w	r2, r2, #1
 800637e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3714      	adds	r7, #20
 8006386:	46bd      	mov	sp, r7
 8006388:	bc80      	pop	{r7}
 800638a:	4770      	bx	lr
 800638c:	40012c00 	.word	0x40012c00
 8006390:	40000400 	.word	0x40000400
 8006394:	40000800 	.word	0x40000800

08006398 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063a2:	2300      	movs	r3, #0
 80063a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d101      	bne.n	80063b4 <HAL_TIM_ConfigClockSource+0x1c>
 80063b0:	2302      	movs	r3, #2
 80063b2:	e0b4      	b.n	800651e <HAL_TIM_ConfigClockSource+0x186>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2202      	movs	r2, #2
 80063c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80063d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80063da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68ba      	ldr	r2, [r7, #8]
 80063e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063ec:	d03e      	beq.n	800646c <HAL_TIM_ConfigClockSource+0xd4>
 80063ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063f2:	f200 8087 	bhi.w	8006504 <HAL_TIM_ConfigClockSource+0x16c>
 80063f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063fa:	f000 8086 	beq.w	800650a <HAL_TIM_ConfigClockSource+0x172>
 80063fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006402:	d87f      	bhi.n	8006504 <HAL_TIM_ConfigClockSource+0x16c>
 8006404:	2b70      	cmp	r3, #112	@ 0x70
 8006406:	d01a      	beq.n	800643e <HAL_TIM_ConfigClockSource+0xa6>
 8006408:	2b70      	cmp	r3, #112	@ 0x70
 800640a:	d87b      	bhi.n	8006504 <HAL_TIM_ConfigClockSource+0x16c>
 800640c:	2b60      	cmp	r3, #96	@ 0x60
 800640e:	d050      	beq.n	80064b2 <HAL_TIM_ConfigClockSource+0x11a>
 8006410:	2b60      	cmp	r3, #96	@ 0x60
 8006412:	d877      	bhi.n	8006504 <HAL_TIM_ConfigClockSource+0x16c>
 8006414:	2b50      	cmp	r3, #80	@ 0x50
 8006416:	d03c      	beq.n	8006492 <HAL_TIM_ConfigClockSource+0xfa>
 8006418:	2b50      	cmp	r3, #80	@ 0x50
 800641a:	d873      	bhi.n	8006504 <HAL_TIM_ConfigClockSource+0x16c>
 800641c:	2b40      	cmp	r3, #64	@ 0x40
 800641e:	d058      	beq.n	80064d2 <HAL_TIM_ConfigClockSource+0x13a>
 8006420:	2b40      	cmp	r3, #64	@ 0x40
 8006422:	d86f      	bhi.n	8006504 <HAL_TIM_ConfigClockSource+0x16c>
 8006424:	2b30      	cmp	r3, #48	@ 0x30
 8006426:	d064      	beq.n	80064f2 <HAL_TIM_ConfigClockSource+0x15a>
 8006428:	2b30      	cmp	r3, #48	@ 0x30
 800642a:	d86b      	bhi.n	8006504 <HAL_TIM_ConfigClockSource+0x16c>
 800642c:	2b20      	cmp	r3, #32
 800642e:	d060      	beq.n	80064f2 <HAL_TIM_ConfigClockSource+0x15a>
 8006430:	2b20      	cmp	r3, #32
 8006432:	d867      	bhi.n	8006504 <HAL_TIM_ConfigClockSource+0x16c>
 8006434:	2b00      	cmp	r3, #0
 8006436:	d05c      	beq.n	80064f2 <HAL_TIM_ConfigClockSource+0x15a>
 8006438:	2b10      	cmp	r3, #16
 800643a:	d05a      	beq.n	80064f2 <HAL_TIM_ConfigClockSource+0x15a>
 800643c:	e062      	b.n	8006504 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800644e:	f000 f950 	bl	80066f2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006460:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68ba      	ldr	r2, [r7, #8]
 8006468:	609a      	str	r2, [r3, #8]
      break;
 800646a:	e04f      	b.n	800650c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800647c:	f000 f939 	bl	80066f2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	689a      	ldr	r2, [r3, #8]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800648e:	609a      	str	r2, [r3, #8]
      break;
 8006490:	e03c      	b.n	800650c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800649e:	461a      	mov	r2, r3
 80064a0:	f000 f8b0 	bl	8006604 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2150      	movs	r1, #80	@ 0x50
 80064aa:	4618      	mov	r0, r3
 80064ac:	f000 f907 	bl	80066be <TIM_ITRx_SetConfig>
      break;
 80064b0:	e02c      	b.n	800650c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064be:	461a      	mov	r2, r3
 80064c0:	f000 f8ce 	bl	8006660 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2160      	movs	r1, #96	@ 0x60
 80064ca:	4618      	mov	r0, r3
 80064cc:	f000 f8f7 	bl	80066be <TIM_ITRx_SetConfig>
      break;
 80064d0:	e01c      	b.n	800650c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064de:	461a      	mov	r2, r3
 80064e0:	f000 f890 	bl	8006604 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2140      	movs	r1, #64	@ 0x40
 80064ea:	4618      	mov	r0, r3
 80064ec:	f000 f8e7 	bl	80066be <TIM_ITRx_SetConfig>
      break;
 80064f0:	e00c      	b.n	800650c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4619      	mov	r1, r3
 80064fc:	4610      	mov	r0, r2
 80064fe:	f000 f8de 	bl	80066be <TIM_ITRx_SetConfig>
      break;
 8006502:	e003      	b.n	800650c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	73fb      	strb	r3, [r7, #15]
      break;
 8006508:	e000      	b.n	800650c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800650a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800651c:	7bfb      	ldrb	r3, [r7, #15]
}
 800651e:	4618      	mov	r0, r3
 8006520:	3710      	adds	r7, #16
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
	...

08006528 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a2f      	ldr	r2, [pc, #188]	@ (80065f8 <TIM_Base_SetConfig+0xd0>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d00b      	beq.n	8006558 <TIM_Base_SetConfig+0x30>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006546:	d007      	beq.n	8006558 <TIM_Base_SetConfig+0x30>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a2c      	ldr	r2, [pc, #176]	@ (80065fc <TIM_Base_SetConfig+0xd4>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d003      	beq.n	8006558 <TIM_Base_SetConfig+0x30>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a2b      	ldr	r2, [pc, #172]	@ (8006600 <TIM_Base_SetConfig+0xd8>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d108      	bne.n	800656a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800655e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	4313      	orrs	r3, r2
 8006568:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a22      	ldr	r2, [pc, #136]	@ (80065f8 <TIM_Base_SetConfig+0xd0>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d00b      	beq.n	800658a <TIM_Base_SetConfig+0x62>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006578:	d007      	beq.n	800658a <TIM_Base_SetConfig+0x62>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a1f      	ldr	r2, [pc, #124]	@ (80065fc <TIM_Base_SetConfig+0xd4>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d003      	beq.n	800658a <TIM_Base_SetConfig+0x62>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a1e      	ldr	r2, [pc, #120]	@ (8006600 <TIM_Base_SetConfig+0xd8>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d108      	bne.n	800659c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006590:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	4313      	orrs	r3, r2
 800659a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	695b      	ldr	r3, [r3, #20]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	689a      	ldr	r2, [r3, #8]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a0d      	ldr	r2, [pc, #52]	@ (80065f8 <TIM_Base_SetConfig+0xd0>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d103      	bne.n	80065d0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	691a      	ldr	r2, [r3, #16]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	f003 0301 	and.w	r3, r3, #1
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d005      	beq.n	80065ee <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	f023 0201 	bic.w	r2, r3, #1
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	611a      	str	r2, [r3, #16]
  }
}
 80065ee:	bf00      	nop
 80065f0:	3714      	adds	r7, #20
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bc80      	pop	{r7}
 80065f6:	4770      	bx	lr
 80065f8:	40012c00 	.word	0x40012c00
 80065fc:	40000400 	.word	0x40000400
 8006600:	40000800 	.word	0x40000800

08006604 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006604:	b480      	push	{r7}
 8006606:	b087      	sub	sp, #28
 8006608:	af00      	add	r7, sp, #0
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	60b9      	str	r1, [r7, #8]
 800660e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6a1b      	ldr	r3, [r3, #32]
 8006614:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	f023 0201 	bic.w	r2, r3, #1
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	699b      	ldr	r3, [r3, #24]
 8006626:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800662e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	011b      	lsls	r3, r3, #4
 8006634:	693a      	ldr	r2, [r7, #16]
 8006636:	4313      	orrs	r3, r2
 8006638:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	f023 030a 	bic.w	r3, r3, #10
 8006640:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	4313      	orrs	r3, r2
 8006648:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	693a      	ldr	r2, [r7, #16]
 800664e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	697a      	ldr	r2, [r7, #20]
 8006654:	621a      	str	r2, [r3, #32]
}
 8006656:	bf00      	nop
 8006658:	371c      	adds	r7, #28
 800665a:	46bd      	mov	sp, r7
 800665c:	bc80      	pop	{r7}
 800665e:	4770      	bx	lr

08006660 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006660:	b480      	push	{r7}
 8006662:	b087      	sub	sp, #28
 8006664:	af00      	add	r7, sp, #0
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6a1b      	ldr	r3, [r3, #32]
 8006670:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6a1b      	ldr	r3, [r3, #32]
 8006676:	f023 0210 	bic.w	r2, r3, #16
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	699b      	ldr	r3, [r3, #24]
 8006682:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800668a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	031b      	lsls	r3, r3, #12
 8006690:	693a      	ldr	r2, [r7, #16]
 8006692:	4313      	orrs	r3, r2
 8006694:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800669c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	011b      	lsls	r3, r3, #4
 80066a2:	697a      	ldr	r2, [r7, #20]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	693a      	ldr	r2, [r7, #16]
 80066ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	697a      	ldr	r2, [r7, #20]
 80066b2:	621a      	str	r2, [r3, #32]
}
 80066b4:	bf00      	nop
 80066b6:	371c      	adds	r7, #28
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bc80      	pop	{r7}
 80066bc:	4770      	bx	lr

080066be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80066be:	b480      	push	{r7}
 80066c0:	b085      	sub	sp, #20
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
 80066c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066d6:	683a      	ldr	r2, [r7, #0]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	4313      	orrs	r3, r2
 80066dc:	f043 0307 	orr.w	r3, r3, #7
 80066e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	609a      	str	r2, [r3, #8]
}
 80066e8:	bf00      	nop
 80066ea:	3714      	adds	r7, #20
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bc80      	pop	{r7}
 80066f0:	4770      	bx	lr

080066f2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066f2:	b480      	push	{r7}
 80066f4:	b087      	sub	sp, #28
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	60f8      	str	r0, [r7, #12]
 80066fa:	60b9      	str	r1, [r7, #8]
 80066fc:	607a      	str	r2, [r7, #4]
 80066fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800670c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	021a      	lsls	r2, r3, #8
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	431a      	orrs	r2, r3
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	4313      	orrs	r3, r2
 800671a:	697a      	ldr	r2, [r7, #20]
 800671c:	4313      	orrs	r3, r2
 800671e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	697a      	ldr	r2, [r7, #20]
 8006724:	609a      	str	r2, [r3, #8]
}
 8006726:	bf00      	nop
 8006728:	371c      	adds	r7, #28
 800672a:	46bd      	mov	sp, r7
 800672c:	bc80      	pop	{r7}
 800672e:	4770      	bx	lr

08006730 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006730:	b480      	push	{r7}
 8006732:	b085      	sub	sp, #20
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006740:	2b01      	cmp	r3, #1
 8006742:	d101      	bne.n	8006748 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006744:	2302      	movs	r3, #2
 8006746:	e046      	b.n	80067d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2202      	movs	r2, #2
 8006754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800676e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	4313      	orrs	r3, r2
 8006778:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a16      	ldr	r2, [pc, #88]	@ (80067e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d00e      	beq.n	80067aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006794:	d009      	beq.n	80067aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a12      	ldr	r2, [pc, #72]	@ (80067e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d004      	beq.n	80067aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a10      	ldr	r2, [pc, #64]	@ (80067e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d10c      	bne.n	80067c4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	68ba      	ldr	r2, [r7, #8]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	68ba      	ldr	r2, [r7, #8]
 80067c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3714      	adds	r7, #20
 80067da:	46bd      	mov	sp, r7
 80067dc:	bc80      	pop	{r7}
 80067de:	4770      	bx	lr
 80067e0:	40012c00 	.word	0x40012c00
 80067e4:	40000400 	.word	0x40000400
 80067e8:	40000800 	.word	0x40000800

080067ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d101      	bne.n	80067fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e042      	b.n	8006884 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006804:	b2db      	uxtb	r3, r3
 8006806:	2b00      	cmp	r3, #0
 8006808:	d106      	bne.n	8006818 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f7fb ff44 	bl	80026a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2224      	movs	r2, #36	@ 0x24
 800681c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68da      	ldr	r2, [r3, #12]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800682e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 f889 	bl	8006948 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	691a      	ldr	r2, [r3, #16]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006844:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	695a      	ldr	r2, [r3, #20]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006854:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68da      	ldr	r2, [r3, #12]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006864:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2220      	movs	r2, #32
 8006870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2220      	movs	r2, #32
 8006878:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	3708      	adds	r7, #8
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	4613      	mov	r3, r2
 8006898:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	2b20      	cmp	r3, #32
 80068a4:	d112      	bne.n	80068cc <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d002      	beq.n	80068b2 <HAL_UART_Receive_IT+0x26>
 80068ac:	88fb      	ldrh	r3, [r7, #6]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d101      	bne.n	80068b6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	e00b      	b.n	80068ce <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80068bc:	88fb      	ldrh	r3, [r7, #6]
 80068be:	461a      	mov	r2, r3
 80068c0:	68b9      	ldr	r1, [r7, #8]
 80068c2:	68f8      	ldr	r0, [r7, #12]
 80068c4:	f000 f807 	bl	80068d6 <UART_Start_Receive_IT>
 80068c8:	4603      	mov	r3, r0
 80068ca:	e000      	b.n	80068ce <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80068cc:	2302      	movs	r3, #2
  }
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3710      	adds	r7, #16
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068d6:	b480      	push	{r7}
 80068d8:	b085      	sub	sp, #20
 80068da:	af00      	add	r7, sp, #0
 80068dc:	60f8      	str	r0, [r7, #12]
 80068de:	60b9      	str	r1, [r7, #8]
 80068e0:	4613      	mov	r3, r2
 80068e2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	68ba      	ldr	r2, [r7, #8]
 80068e8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	88fa      	ldrh	r2, [r7, #6]
 80068ee:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	88fa      	ldrh	r2, [r7, #6]
 80068f4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2200      	movs	r2, #0
 80068fa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2222      	movs	r2, #34	@ 0x22
 8006900:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d007      	beq.n	800691c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68da      	ldr	r2, [r3, #12]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800691a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	695a      	ldr	r2, [r3, #20]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f042 0201 	orr.w	r2, r2, #1
 800692a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68da      	ldr	r2, [r3, #12]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f042 0220 	orr.w	r2, r2, #32
 800693a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	3714      	adds	r7, #20
 8006942:	46bd      	mov	sp, r7
 8006944:	bc80      	pop	{r7}
 8006946:	4770      	bx	lr

08006948 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	68da      	ldr	r2, [r3, #12]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	430a      	orrs	r2, r1
 8006964:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	689a      	ldr	r2, [r3, #8]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	431a      	orrs	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	695b      	ldr	r3, [r3, #20]
 8006974:	4313      	orrs	r3, r2
 8006976:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006982:	f023 030c 	bic.w	r3, r3, #12
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	6812      	ldr	r2, [r2, #0]
 800698a:	68b9      	ldr	r1, [r7, #8]
 800698c:	430b      	orrs	r3, r1
 800698e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	695b      	ldr	r3, [r3, #20]
 8006996:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	699a      	ldr	r2, [r3, #24]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	430a      	orrs	r2, r1
 80069a4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a2c      	ldr	r2, [pc, #176]	@ (8006a5c <UART_SetConfig+0x114>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d103      	bne.n	80069b8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80069b0:	f7fe f9fc 	bl	8004dac <HAL_RCC_GetPCLK2Freq>
 80069b4:	60f8      	str	r0, [r7, #12]
 80069b6:	e002      	b.n	80069be <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80069b8:	f7fe f9e4 	bl	8004d84 <HAL_RCC_GetPCLK1Freq>
 80069bc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80069be:	68fa      	ldr	r2, [r7, #12]
 80069c0:	4613      	mov	r3, r2
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	4413      	add	r3, r2
 80069c6:	009a      	lsls	r2, r3, #2
 80069c8:	441a      	add	r2, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069d4:	4a22      	ldr	r2, [pc, #136]	@ (8006a60 <UART_SetConfig+0x118>)
 80069d6:	fba2 2303 	umull	r2, r3, r2, r3
 80069da:	095b      	lsrs	r3, r3, #5
 80069dc:	0119      	lsls	r1, r3, #4
 80069de:	68fa      	ldr	r2, [r7, #12]
 80069e0:	4613      	mov	r3, r2
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	4413      	add	r3, r2
 80069e6:	009a      	lsls	r2, r3, #2
 80069e8:	441a      	add	r2, r3
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80069f4:	4b1a      	ldr	r3, [pc, #104]	@ (8006a60 <UART_SetConfig+0x118>)
 80069f6:	fba3 0302 	umull	r0, r3, r3, r2
 80069fa:	095b      	lsrs	r3, r3, #5
 80069fc:	2064      	movs	r0, #100	@ 0x64
 80069fe:	fb00 f303 	mul.w	r3, r0, r3
 8006a02:	1ad3      	subs	r3, r2, r3
 8006a04:	011b      	lsls	r3, r3, #4
 8006a06:	3332      	adds	r3, #50	@ 0x32
 8006a08:	4a15      	ldr	r2, [pc, #84]	@ (8006a60 <UART_SetConfig+0x118>)
 8006a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a0e:	095b      	lsrs	r3, r3, #5
 8006a10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006a14:	4419      	add	r1, r3
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	4613      	mov	r3, r2
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	4413      	add	r3, r2
 8006a1e:	009a      	lsls	r2, r3, #2
 8006a20:	441a      	add	r2, r3
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8006a60 <UART_SetConfig+0x118>)
 8006a2e:	fba3 0302 	umull	r0, r3, r3, r2
 8006a32:	095b      	lsrs	r3, r3, #5
 8006a34:	2064      	movs	r0, #100	@ 0x64
 8006a36:	fb00 f303 	mul.w	r3, r0, r3
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	011b      	lsls	r3, r3, #4
 8006a3e:	3332      	adds	r3, #50	@ 0x32
 8006a40:	4a07      	ldr	r2, [pc, #28]	@ (8006a60 <UART_SetConfig+0x118>)
 8006a42:	fba2 2303 	umull	r2, r3, r2, r3
 8006a46:	095b      	lsrs	r3, r3, #5
 8006a48:	f003 020f 	and.w	r2, r3, #15
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	440a      	add	r2, r1
 8006a52:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006a54:	bf00      	nop
 8006a56:	3710      	adds	r7, #16
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}
 8006a5c:	40013800 	.word	0x40013800
 8006a60:	51eb851f 	.word	0x51eb851f

08006a64 <__cvt>:
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a6a:	461d      	mov	r5, r3
 8006a6c:	bfbb      	ittet	lt
 8006a6e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8006a72:	461d      	movlt	r5, r3
 8006a74:	2300      	movge	r3, #0
 8006a76:	232d      	movlt	r3, #45	@ 0x2d
 8006a78:	b088      	sub	sp, #32
 8006a7a:	4614      	mov	r4, r2
 8006a7c:	bfb8      	it	lt
 8006a7e:	4614      	movlt	r4, r2
 8006a80:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006a82:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006a84:	7013      	strb	r3, [r2, #0]
 8006a86:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006a88:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006a8c:	f023 0820 	bic.w	r8, r3, #32
 8006a90:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006a94:	d005      	beq.n	8006aa2 <__cvt+0x3e>
 8006a96:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006a9a:	d100      	bne.n	8006a9e <__cvt+0x3a>
 8006a9c:	3601      	adds	r6, #1
 8006a9e:	2302      	movs	r3, #2
 8006aa0:	e000      	b.n	8006aa4 <__cvt+0x40>
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	aa07      	add	r2, sp, #28
 8006aa6:	9204      	str	r2, [sp, #16]
 8006aa8:	aa06      	add	r2, sp, #24
 8006aaa:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006aae:	e9cd 3600 	strd	r3, r6, [sp]
 8006ab2:	4622      	mov	r2, r4
 8006ab4:	462b      	mov	r3, r5
 8006ab6:	f000 ff17 	bl	80078e8 <_dtoa_r>
 8006aba:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006abe:	4607      	mov	r7, r0
 8006ac0:	d119      	bne.n	8006af6 <__cvt+0x92>
 8006ac2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006ac4:	07db      	lsls	r3, r3, #31
 8006ac6:	d50e      	bpl.n	8006ae6 <__cvt+0x82>
 8006ac8:	eb00 0906 	add.w	r9, r0, r6
 8006acc:	2200      	movs	r2, #0
 8006ace:	2300      	movs	r3, #0
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	4629      	mov	r1, r5
 8006ad4:	f7f9 ff68 	bl	80009a8 <__aeabi_dcmpeq>
 8006ad8:	b108      	cbz	r0, 8006ade <__cvt+0x7a>
 8006ada:	f8cd 901c 	str.w	r9, [sp, #28]
 8006ade:	2230      	movs	r2, #48	@ 0x30
 8006ae0:	9b07      	ldr	r3, [sp, #28]
 8006ae2:	454b      	cmp	r3, r9
 8006ae4:	d31e      	bcc.n	8006b24 <__cvt+0xc0>
 8006ae6:	4638      	mov	r0, r7
 8006ae8:	9b07      	ldr	r3, [sp, #28]
 8006aea:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006aec:	1bdb      	subs	r3, r3, r7
 8006aee:	6013      	str	r3, [r2, #0]
 8006af0:	b008      	add	sp, #32
 8006af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006af6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006afa:	eb00 0906 	add.w	r9, r0, r6
 8006afe:	d1e5      	bne.n	8006acc <__cvt+0x68>
 8006b00:	7803      	ldrb	r3, [r0, #0]
 8006b02:	2b30      	cmp	r3, #48	@ 0x30
 8006b04:	d10a      	bne.n	8006b1c <__cvt+0xb8>
 8006b06:	2200      	movs	r2, #0
 8006b08:	2300      	movs	r3, #0
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	4629      	mov	r1, r5
 8006b0e:	f7f9 ff4b 	bl	80009a8 <__aeabi_dcmpeq>
 8006b12:	b918      	cbnz	r0, 8006b1c <__cvt+0xb8>
 8006b14:	f1c6 0601 	rsb	r6, r6, #1
 8006b18:	f8ca 6000 	str.w	r6, [sl]
 8006b1c:	f8da 3000 	ldr.w	r3, [sl]
 8006b20:	4499      	add	r9, r3
 8006b22:	e7d3      	b.n	8006acc <__cvt+0x68>
 8006b24:	1c59      	adds	r1, r3, #1
 8006b26:	9107      	str	r1, [sp, #28]
 8006b28:	701a      	strb	r2, [r3, #0]
 8006b2a:	e7d9      	b.n	8006ae0 <__cvt+0x7c>

08006b2c <__exponent>:
 8006b2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b2e:	2900      	cmp	r1, #0
 8006b30:	bfb6      	itet	lt
 8006b32:	232d      	movlt	r3, #45	@ 0x2d
 8006b34:	232b      	movge	r3, #43	@ 0x2b
 8006b36:	4249      	neglt	r1, r1
 8006b38:	2909      	cmp	r1, #9
 8006b3a:	7002      	strb	r2, [r0, #0]
 8006b3c:	7043      	strb	r3, [r0, #1]
 8006b3e:	dd29      	ble.n	8006b94 <__exponent+0x68>
 8006b40:	f10d 0307 	add.w	r3, sp, #7
 8006b44:	461d      	mov	r5, r3
 8006b46:	270a      	movs	r7, #10
 8006b48:	fbb1 f6f7 	udiv	r6, r1, r7
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	fb07 1416 	mls	r4, r7, r6, r1
 8006b52:	3430      	adds	r4, #48	@ 0x30
 8006b54:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006b58:	460c      	mov	r4, r1
 8006b5a:	2c63      	cmp	r4, #99	@ 0x63
 8006b5c:	4631      	mov	r1, r6
 8006b5e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006b62:	dcf1      	bgt.n	8006b48 <__exponent+0x1c>
 8006b64:	3130      	adds	r1, #48	@ 0x30
 8006b66:	1e94      	subs	r4, r2, #2
 8006b68:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006b6c:	4623      	mov	r3, r4
 8006b6e:	1c41      	adds	r1, r0, #1
 8006b70:	42ab      	cmp	r3, r5
 8006b72:	d30a      	bcc.n	8006b8a <__exponent+0x5e>
 8006b74:	f10d 0309 	add.w	r3, sp, #9
 8006b78:	1a9b      	subs	r3, r3, r2
 8006b7a:	42ac      	cmp	r4, r5
 8006b7c:	bf88      	it	hi
 8006b7e:	2300      	movhi	r3, #0
 8006b80:	3302      	adds	r3, #2
 8006b82:	4403      	add	r3, r0
 8006b84:	1a18      	subs	r0, r3, r0
 8006b86:	b003      	add	sp, #12
 8006b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b8a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006b8e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006b92:	e7ed      	b.n	8006b70 <__exponent+0x44>
 8006b94:	2330      	movs	r3, #48	@ 0x30
 8006b96:	3130      	adds	r1, #48	@ 0x30
 8006b98:	7083      	strb	r3, [r0, #2]
 8006b9a:	70c1      	strb	r1, [r0, #3]
 8006b9c:	1d03      	adds	r3, r0, #4
 8006b9e:	e7f1      	b.n	8006b84 <__exponent+0x58>

08006ba0 <_printf_float>:
 8006ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ba4:	b091      	sub	sp, #68	@ 0x44
 8006ba6:	460c      	mov	r4, r1
 8006ba8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006bac:	4616      	mov	r6, r2
 8006bae:	461f      	mov	r7, r3
 8006bb0:	4605      	mov	r5, r0
 8006bb2:	f000 fd89 	bl	80076c8 <_localeconv_r>
 8006bb6:	6803      	ldr	r3, [r0, #0]
 8006bb8:	4618      	mov	r0, r3
 8006bba:	9308      	str	r3, [sp, #32]
 8006bbc:	f7f9 fac8 	bl	8000150 <strlen>
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	930e      	str	r3, [sp, #56]	@ 0x38
 8006bc4:	f8d8 3000 	ldr.w	r3, [r8]
 8006bc8:	9009      	str	r0, [sp, #36]	@ 0x24
 8006bca:	3307      	adds	r3, #7
 8006bcc:	f023 0307 	bic.w	r3, r3, #7
 8006bd0:	f103 0208 	add.w	r2, r3, #8
 8006bd4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006bd8:	f8d4 b000 	ldr.w	fp, [r4]
 8006bdc:	f8c8 2000 	str.w	r2, [r8]
 8006be0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006be4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006be8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006bea:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006bee:	f04f 32ff 	mov.w	r2, #4294967295
 8006bf2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006bf6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006bfa:	4b9c      	ldr	r3, [pc, #624]	@ (8006e6c <_printf_float+0x2cc>)
 8006bfc:	f7f9 ff06 	bl	8000a0c <__aeabi_dcmpun>
 8006c00:	bb70      	cbnz	r0, 8006c60 <_printf_float+0xc0>
 8006c02:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006c06:	f04f 32ff 	mov.w	r2, #4294967295
 8006c0a:	4b98      	ldr	r3, [pc, #608]	@ (8006e6c <_printf_float+0x2cc>)
 8006c0c:	f7f9 fee0 	bl	80009d0 <__aeabi_dcmple>
 8006c10:	bb30      	cbnz	r0, 8006c60 <_printf_float+0xc0>
 8006c12:	2200      	movs	r2, #0
 8006c14:	2300      	movs	r3, #0
 8006c16:	4640      	mov	r0, r8
 8006c18:	4649      	mov	r1, r9
 8006c1a:	f7f9 fecf 	bl	80009bc <__aeabi_dcmplt>
 8006c1e:	b110      	cbz	r0, 8006c26 <_printf_float+0x86>
 8006c20:	232d      	movs	r3, #45	@ 0x2d
 8006c22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c26:	4a92      	ldr	r2, [pc, #584]	@ (8006e70 <_printf_float+0x2d0>)
 8006c28:	4b92      	ldr	r3, [pc, #584]	@ (8006e74 <_printf_float+0x2d4>)
 8006c2a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006c2e:	bf8c      	ite	hi
 8006c30:	4690      	movhi	r8, r2
 8006c32:	4698      	movls	r8, r3
 8006c34:	2303      	movs	r3, #3
 8006c36:	f04f 0900 	mov.w	r9, #0
 8006c3a:	6123      	str	r3, [r4, #16]
 8006c3c:	f02b 0304 	bic.w	r3, fp, #4
 8006c40:	6023      	str	r3, [r4, #0]
 8006c42:	4633      	mov	r3, r6
 8006c44:	4621      	mov	r1, r4
 8006c46:	4628      	mov	r0, r5
 8006c48:	9700      	str	r7, [sp, #0]
 8006c4a:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006c4c:	f000 f9d4 	bl	8006ff8 <_printf_common>
 8006c50:	3001      	adds	r0, #1
 8006c52:	f040 8090 	bne.w	8006d76 <_printf_float+0x1d6>
 8006c56:	f04f 30ff 	mov.w	r0, #4294967295
 8006c5a:	b011      	add	sp, #68	@ 0x44
 8006c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c60:	4642      	mov	r2, r8
 8006c62:	464b      	mov	r3, r9
 8006c64:	4640      	mov	r0, r8
 8006c66:	4649      	mov	r1, r9
 8006c68:	f7f9 fed0 	bl	8000a0c <__aeabi_dcmpun>
 8006c6c:	b148      	cbz	r0, 8006c82 <_printf_float+0xe2>
 8006c6e:	464b      	mov	r3, r9
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	bfb8      	it	lt
 8006c74:	232d      	movlt	r3, #45	@ 0x2d
 8006c76:	4a80      	ldr	r2, [pc, #512]	@ (8006e78 <_printf_float+0x2d8>)
 8006c78:	bfb8      	it	lt
 8006c7a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006c7e:	4b7f      	ldr	r3, [pc, #508]	@ (8006e7c <_printf_float+0x2dc>)
 8006c80:	e7d3      	b.n	8006c2a <_printf_float+0x8a>
 8006c82:	6863      	ldr	r3, [r4, #4]
 8006c84:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006c88:	1c5a      	adds	r2, r3, #1
 8006c8a:	d13f      	bne.n	8006d0c <_printf_float+0x16c>
 8006c8c:	2306      	movs	r3, #6
 8006c8e:	6063      	str	r3, [r4, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006c96:	6023      	str	r3, [r4, #0]
 8006c98:	9206      	str	r2, [sp, #24]
 8006c9a:	aa0e      	add	r2, sp, #56	@ 0x38
 8006c9c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006ca0:	aa0d      	add	r2, sp, #52	@ 0x34
 8006ca2:	9203      	str	r2, [sp, #12]
 8006ca4:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006ca8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006cac:	6863      	ldr	r3, [r4, #4]
 8006cae:	4642      	mov	r2, r8
 8006cb0:	9300      	str	r3, [sp, #0]
 8006cb2:	4628      	mov	r0, r5
 8006cb4:	464b      	mov	r3, r9
 8006cb6:	910a      	str	r1, [sp, #40]	@ 0x28
 8006cb8:	f7ff fed4 	bl	8006a64 <__cvt>
 8006cbc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006cbe:	4680      	mov	r8, r0
 8006cc0:	2947      	cmp	r1, #71	@ 0x47
 8006cc2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006cc4:	d128      	bne.n	8006d18 <_printf_float+0x178>
 8006cc6:	1cc8      	adds	r0, r1, #3
 8006cc8:	db02      	blt.n	8006cd0 <_printf_float+0x130>
 8006cca:	6863      	ldr	r3, [r4, #4]
 8006ccc:	4299      	cmp	r1, r3
 8006cce:	dd40      	ble.n	8006d52 <_printf_float+0x1b2>
 8006cd0:	f1aa 0a02 	sub.w	sl, sl, #2
 8006cd4:	fa5f fa8a 	uxtb.w	sl, sl
 8006cd8:	4652      	mov	r2, sl
 8006cda:	3901      	subs	r1, #1
 8006cdc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006ce0:	910d      	str	r1, [sp, #52]	@ 0x34
 8006ce2:	f7ff ff23 	bl	8006b2c <__exponent>
 8006ce6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006ce8:	4681      	mov	r9, r0
 8006cea:	1813      	adds	r3, r2, r0
 8006cec:	2a01      	cmp	r2, #1
 8006cee:	6123      	str	r3, [r4, #16]
 8006cf0:	dc02      	bgt.n	8006cf8 <_printf_float+0x158>
 8006cf2:	6822      	ldr	r2, [r4, #0]
 8006cf4:	07d2      	lsls	r2, r2, #31
 8006cf6:	d501      	bpl.n	8006cfc <_printf_float+0x15c>
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	6123      	str	r3, [r4, #16]
 8006cfc:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d09e      	beq.n	8006c42 <_printf_float+0xa2>
 8006d04:	232d      	movs	r3, #45	@ 0x2d
 8006d06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d0a:	e79a      	b.n	8006c42 <_printf_float+0xa2>
 8006d0c:	2947      	cmp	r1, #71	@ 0x47
 8006d0e:	d1bf      	bne.n	8006c90 <_printf_float+0xf0>
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d1bd      	bne.n	8006c90 <_printf_float+0xf0>
 8006d14:	2301      	movs	r3, #1
 8006d16:	e7ba      	b.n	8006c8e <_printf_float+0xee>
 8006d18:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006d1c:	d9dc      	bls.n	8006cd8 <_printf_float+0x138>
 8006d1e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006d22:	d118      	bne.n	8006d56 <_printf_float+0x1b6>
 8006d24:	2900      	cmp	r1, #0
 8006d26:	6863      	ldr	r3, [r4, #4]
 8006d28:	dd0b      	ble.n	8006d42 <_printf_float+0x1a2>
 8006d2a:	6121      	str	r1, [r4, #16]
 8006d2c:	b913      	cbnz	r3, 8006d34 <_printf_float+0x194>
 8006d2e:	6822      	ldr	r2, [r4, #0]
 8006d30:	07d0      	lsls	r0, r2, #31
 8006d32:	d502      	bpl.n	8006d3a <_printf_float+0x19a>
 8006d34:	3301      	adds	r3, #1
 8006d36:	440b      	add	r3, r1
 8006d38:	6123      	str	r3, [r4, #16]
 8006d3a:	f04f 0900 	mov.w	r9, #0
 8006d3e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006d40:	e7dc      	b.n	8006cfc <_printf_float+0x15c>
 8006d42:	b913      	cbnz	r3, 8006d4a <_printf_float+0x1aa>
 8006d44:	6822      	ldr	r2, [r4, #0]
 8006d46:	07d2      	lsls	r2, r2, #31
 8006d48:	d501      	bpl.n	8006d4e <_printf_float+0x1ae>
 8006d4a:	3302      	adds	r3, #2
 8006d4c:	e7f4      	b.n	8006d38 <_printf_float+0x198>
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e7f2      	b.n	8006d38 <_printf_float+0x198>
 8006d52:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006d56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d58:	4299      	cmp	r1, r3
 8006d5a:	db05      	blt.n	8006d68 <_printf_float+0x1c8>
 8006d5c:	6823      	ldr	r3, [r4, #0]
 8006d5e:	6121      	str	r1, [r4, #16]
 8006d60:	07d8      	lsls	r0, r3, #31
 8006d62:	d5ea      	bpl.n	8006d3a <_printf_float+0x19a>
 8006d64:	1c4b      	adds	r3, r1, #1
 8006d66:	e7e7      	b.n	8006d38 <_printf_float+0x198>
 8006d68:	2900      	cmp	r1, #0
 8006d6a:	bfcc      	ite	gt
 8006d6c:	2201      	movgt	r2, #1
 8006d6e:	f1c1 0202 	rsble	r2, r1, #2
 8006d72:	4413      	add	r3, r2
 8006d74:	e7e0      	b.n	8006d38 <_printf_float+0x198>
 8006d76:	6823      	ldr	r3, [r4, #0]
 8006d78:	055a      	lsls	r2, r3, #21
 8006d7a:	d407      	bmi.n	8006d8c <_printf_float+0x1ec>
 8006d7c:	6923      	ldr	r3, [r4, #16]
 8006d7e:	4642      	mov	r2, r8
 8006d80:	4631      	mov	r1, r6
 8006d82:	4628      	mov	r0, r5
 8006d84:	47b8      	blx	r7
 8006d86:	3001      	adds	r0, #1
 8006d88:	d12b      	bne.n	8006de2 <_printf_float+0x242>
 8006d8a:	e764      	b.n	8006c56 <_printf_float+0xb6>
 8006d8c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006d90:	f240 80dc 	bls.w	8006f4c <_printf_float+0x3ac>
 8006d94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006d98:	2200      	movs	r2, #0
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	f7f9 fe04 	bl	80009a8 <__aeabi_dcmpeq>
 8006da0:	2800      	cmp	r0, #0
 8006da2:	d033      	beq.n	8006e0c <_printf_float+0x26c>
 8006da4:	2301      	movs	r3, #1
 8006da6:	4631      	mov	r1, r6
 8006da8:	4628      	mov	r0, r5
 8006daa:	4a35      	ldr	r2, [pc, #212]	@ (8006e80 <_printf_float+0x2e0>)
 8006dac:	47b8      	blx	r7
 8006dae:	3001      	adds	r0, #1
 8006db0:	f43f af51 	beq.w	8006c56 <_printf_float+0xb6>
 8006db4:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006db8:	4543      	cmp	r3, r8
 8006dba:	db02      	blt.n	8006dc2 <_printf_float+0x222>
 8006dbc:	6823      	ldr	r3, [r4, #0]
 8006dbe:	07d8      	lsls	r0, r3, #31
 8006dc0:	d50f      	bpl.n	8006de2 <_printf_float+0x242>
 8006dc2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006dc6:	4631      	mov	r1, r6
 8006dc8:	4628      	mov	r0, r5
 8006dca:	47b8      	blx	r7
 8006dcc:	3001      	adds	r0, #1
 8006dce:	f43f af42 	beq.w	8006c56 <_printf_float+0xb6>
 8006dd2:	f04f 0900 	mov.w	r9, #0
 8006dd6:	f108 38ff 	add.w	r8, r8, #4294967295
 8006dda:	f104 0a1a 	add.w	sl, r4, #26
 8006dde:	45c8      	cmp	r8, r9
 8006de0:	dc09      	bgt.n	8006df6 <_printf_float+0x256>
 8006de2:	6823      	ldr	r3, [r4, #0]
 8006de4:	079b      	lsls	r3, r3, #30
 8006de6:	f100 8102 	bmi.w	8006fee <_printf_float+0x44e>
 8006dea:	68e0      	ldr	r0, [r4, #12]
 8006dec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006dee:	4298      	cmp	r0, r3
 8006df0:	bfb8      	it	lt
 8006df2:	4618      	movlt	r0, r3
 8006df4:	e731      	b.n	8006c5a <_printf_float+0xba>
 8006df6:	2301      	movs	r3, #1
 8006df8:	4652      	mov	r2, sl
 8006dfa:	4631      	mov	r1, r6
 8006dfc:	4628      	mov	r0, r5
 8006dfe:	47b8      	blx	r7
 8006e00:	3001      	adds	r0, #1
 8006e02:	f43f af28 	beq.w	8006c56 <_printf_float+0xb6>
 8006e06:	f109 0901 	add.w	r9, r9, #1
 8006e0a:	e7e8      	b.n	8006dde <_printf_float+0x23e>
 8006e0c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	dc38      	bgt.n	8006e84 <_printf_float+0x2e4>
 8006e12:	2301      	movs	r3, #1
 8006e14:	4631      	mov	r1, r6
 8006e16:	4628      	mov	r0, r5
 8006e18:	4a19      	ldr	r2, [pc, #100]	@ (8006e80 <_printf_float+0x2e0>)
 8006e1a:	47b8      	blx	r7
 8006e1c:	3001      	adds	r0, #1
 8006e1e:	f43f af1a 	beq.w	8006c56 <_printf_float+0xb6>
 8006e22:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006e26:	ea59 0303 	orrs.w	r3, r9, r3
 8006e2a:	d102      	bne.n	8006e32 <_printf_float+0x292>
 8006e2c:	6823      	ldr	r3, [r4, #0]
 8006e2e:	07d9      	lsls	r1, r3, #31
 8006e30:	d5d7      	bpl.n	8006de2 <_printf_float+0x242>
 8006e32:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006e36:	4631      	mov	r1, r6
 8006e38:	4628      	mov	r0, r5
 8006e3a:	47b8      	blx	r7
 8006e3c:	3001      	adds	r0, #1
 8006e3e:	f43f af0a 	beq.w	8006c56 <_printf_float+0xb6>
 8006e42:	f04f 0a00 	mov.w	sl, #0
 8006e46:	f104 0b1a 	add.w	fp, r4, #26
 8006e4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006e4c:	425b      	negs	r3, r3
 8006e4e:	4553      	cmp	r3, sl
 8006e50:	dc01      	bgt.n	8006e56 <_printf_float+0x2b6>
 8006e52:	464b      	mov	r3, r9
 8006e54:	e793      	b.n	8006d7e <_printf_float+0x1de>
 8006e56:	2301      	movs	r3, #1
 8006e58:	465a      	mov	r2, fp
 8006e5a:	4631      	mov	r1, r6
 8006e5c:	4628      	mov	r0, r5
 8006e5e:	47b8      	blx	r7
 8006e60:	3001      	adds	r0, #1
 8006e62:	f43f aef8 	beq.w	8006c56 <_printf_float+0xb6>
 8006e66:	f10a 0a01 	add.w	sl, sl, #1
 8006e6a:	e7ee      	b.n	8006e4a <_printf_float+0x2aa>
 8006e6c:	7fefffff 	.word	0x7fefffff
 8006e70:	08009812 	.word	0x08009812
 8006e74:	0800980e 	.word	0x0800980e
 8006e78:	0800981a 	.word	0x0800981a
 8006e7c:	08009816 	.word	0x08009816
 8006e80:	0800981e 	.word	0x0800981e
 8006e84:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006e86:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006e8a:	4553      	cmp	r3, sl
 8006e8c:	bfa8      	it	ge
 8006e8e:	4653      	movge	r3, sl
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	4699      	mov	r9, r3
 8006e94:	dc36      	bgt.n	8006f04 <_printf_float+0x364>
 8006e96:	f04f 0b00 	mov.w	fp, #0
 8006e9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e9e:	f104 021a 	add.w	r2, r4, #26
 8006ea2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006ea4:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ea6:	eba3 0309 	sub.w	r3, r3, r9
 8006eaa:	455b      	cmp	r3, fp
 8006eac:	dc31      	bgt.n	8006f12 <_printf_float+0x372>
 8006eae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006eb0:	459a      	cmp	sl, r3
 8006eb2:	dc3a      	bgt.n	8006f2a <_printf_float+0x38a>
 8006eb4:	6823      	ldr	r3, [r4, #0]
 8006eb6:	07da      	lsls	r2, r3, #31
 8006eb8:	d437      	bmi.n	8006f2a <_printf_float+0x38a>
 8006eba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ebc:	ebaa 0903 	sub.w	r9, sl, r3
 8006ec0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ec2:	ebaa 0303 	sub.w	r3, sl, r3
 8006ec6:	4599      	cmp	r9, r3
 8006ec8:	bfa8      	it	ge
 8006eca:	4699      	movge	r9, r3
 8006ecc:	f1b9 0f00 	cmp.w	r9, #0
 8006ed0:	dc33      	bgt.n	8006f3a <_printf_float+0x39a>
 8006ed2:	f04f 0800 	mov.w	r8, #0
 8006ed6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006eda:	f104 0b1a 	add.w	fp, r4, #26
 8006ede:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ee0:	ebaa 0303 	sub.w	r3, sl, r3
 8006ee4:	eba3 0309 	sub.w	r3, r3, r9
 8006ee8:	4543      	cmp	r3, r8
 8006eea:	f77f af7a 	ble.w	8006de2 <_printf_float+0x242>
 8006eee:	2301      	movs	r3, #1
 8006ef0:	465a      	mov	r2, fp
 8006ef2:	4631      	mov	r1, r6
 8006ef4:	4628      	mov	r0, r5
 8006ef6:	47b8      	blx	r7
 8006ef8:	3001      	adds	r0, #1
 8006efa:	f43f aeac 	beq.w	8006c56 <_printf_float+0xb6>
 8006efe:	f108 0801 	add.w	r8, r8, #1
 8006f02:	e7ec      	b.n	8006ede <_printf_float+0x33e>
 8006f04:	4642      	mov	r2, r8
 8006f06:	4631      	mov	r1, r6
 8006f08:	4628      	mov	r0, r5
 8006f0a:	47b8      	blx	r7
 8006f0c:	3001      	adds	r0, #1
 8006f0e:	d1c2      	bne.n	8006e96 <_printf_float+0x2f6>
 8006f10:	e6a1      	b.n	8006c56 <_printf_float+0xb6>
 8006f12:	2301      	movs	r3, #1
 8006f14:	4631      	mov	r1, r6
 8006f16:	4628      	mov	r0, r5
 8006f18:	920a      	str	r2, [sp, #40]	@ 0x28
 8006f1a:	47b8      	blx	r7
 8006f1c:	3001      	adds	r0, #1
 8006f1e:	f43f ae9a 	beq.w	8006c56 <_printf_float+0xb6>
 8006f22:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006f24:	f10b 0b01 	add.w	fp, fp, #1
 8006f28:	e7bb      	b.n	8006ea2 <_printf_float+0x302>
 8006f2a:	4631      	mov	r1, r6
 8006f2c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006f30:	4628      	mov	r0, r5
 8006f32:	47b8      	blx	r7
 8006f34:	3001      	adds	r0, #1
 8006f36:	d1c0      	bne.n	8006eba <_printf_float+0x31a>
 8006f38:	e68d      	b.n	8006c56 <_printf_float+0xb6>
 8006f3a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006f3c:	464b      	mov	r3, r9
 8006f3e:	4631      	mov	r1, r6
 8006f40:	4628      	mov	r0, r5
 8006f42:	4442      	add	r2, r8
 8006f44:	47b8      	blx	r7
 8006f46:	3001      	adds	r0, #1
 8006f48:	d1c3      	bne.n	8006ed2 <_printf_float+0x332>
 8006f4a:	e684      	b.n	8006c56 <_printf_float+0xb6>
 8006f4c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006f50:	f1ba 0f01 	cmp.w	sl, #1
 8006f54:	dc01      	bgt.n	8006f5a <_printf_float+0x3ba>
 8006f56:	07db      	lsls	r3, r3, #31
 8006f58:	d536      	bpl.n	8006fc8 <_printf_float+0x428>
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	4642      	mov	r2, r8
 8006f5e:	4631      	mov	r1, r6
 8006f60:	4628      	mov	r0, r5
 8006f62:	47b8      	blx	r7
 8006f64:	3001      	adds	r0, #1
 8006f66:	f43f ae76 	beq.w	8006c56 <_printf_float+0xb6>
 8006f6a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006f6e:	4631      	mov	r1, r6
 8006f70:	4628      	mov	r0, r5
 8006f72:	47b8      	blx	r7
 8006f74:	3001      	adds	r0, #1
 8006f76:	f43f ae6e 	beq.w	8006c56 <_printf_float+0xb6>
 8006f7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006f7e:	2200      	movs	r2, #0
 8006f80:	2300      	movs	r3, #0
 8006f82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f86:	f7f9 fd0f 	bl	80009a8 <__aeabi_dcmpeq>
 8006f8a:	b9c0      	cbnz	r0, 8006fbe <_printf_float+0x41e>
 8006f8c:	4653      	mov	r3, sl
 8006f8e:	f108 0201 	add.w	r2, r8, #1
 8006f92:	4631      	mov	r1, r6
 8006f94:	4628      	mov	r0, r5
 8006f96:	47b8      	blx	r7
 8006f98:	3001      	adds	r0, #1
 8006f9a:	d10c      	bne.n	8006fb6 <_printf_float+0x416>
 8006f9c:	e65b      	b.n	8006c56 <_printf_float+0xb6>
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	465a      	mov	r2, fp
 8006fa2:	4631      	mov	r1, r6
 8006fa4:	4628      	mov	r0, r5
 8006fa6:	47b8      	blx	r7
 8006fa8:	3001      	adds	r0, #1
 8006faa:	f43f ae54 	beq.w	8006c56 <_printf_float+0xb6>
 8006fae:	f108 0801 	add.w	r8, r8, #1
 8006fb2:	45d0      	cmp	r8, sl
 8006fb4:	dbf3      	blt.n	8006f9e <_printf_float+0x3fe>
 8006fb6:	464b      	mov	r3, r9
 8006fb8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006fbc:	e6e0      	b.n	8006d80 <_printf_float+0x1e0>
 8006fbe:	f04f 0800 	mov.w	r8, #0
 8006fc2:	f104 0b1a 	add.w	fp, r4, #26
 8006fc6:	e7f4      	b.n	8006fb2 <_printf_float+0x412>
 8006fc8:	2301      	movs	r3, #1
 8006fca:	4642      	mov	r2, r8
 8006fcc:	e7e1      	b.n	8006f92 <_printf_float+0x3f2>
 8006fce:	2301      	movs	r3, #1
 8006fd0:	464a      	mov	r2, r9
 8006fd2:	4631      	mov	r1, r6
 8006fd4:	4628      	mov	r0, r5
 8006fd6:	47b8      	blx	r7
 8006fd8:	3001      	adds	r0, #1
 8006fda:	f43f ae3c 	beq.w	8006c56 <_printf_float+0xb6>
 8006fde:	f108 0801 	add.w	r8, r8, #1
 8006fe2:	68e3      	ldr	r3, [r4, #12]
 8006fe4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006fe6:	1a5b      	subs	r3, r3, r1
 8006fe8:	4543      	cmp	r3, r8
 8006fea:	dcf0      	bgt.n	8006fce <_printf_float+0x42e>
 8006fec:	e6fd      	b.n	8006dea <_printf_float+0x24a>
 8006fee:	f04f 0800 	mov.w	r8, #0
 8006ff2:	f104 0919 	add.w	r9, r4, #25
 8006ff6:	e7f4      	b.n	8006fe2 <_printf_float+0x442>

08006ff8 <_printf_common>:
 8006ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ffc:	4616      	mov	r6, r2
 8006ffe:	4698      	mov	r8, r3
 8007000:	688a      	ldr	r2, [r1, #8]
 8007002:	690b      	ldr	r3, [r1, #16]
 8007004:	4607      	mov	r7, r0
 8007006:	4293      	cmp	r3, r2
 8007008:	bfb8      	it	lt
 800700a:	4613      	movlt	r3, r2
 800700c:	6033      	str	r3, [r6, #0]
 800700e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007012:	460c      	mov	r4, r1
 8007014:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007018:	b10a      	cbz	r2, 800701e <_printf_common+0x26>
 800701a:	3301      	adds	r3, #1
 800701c:	6033      	str	r3, [r6, #0]
 800701e:	6823      	ldr	r3, [r4, #0]
 8007020:	0699      	lsls	r1, r3, #26
 8007022:	bf42      	ittt	mi
 8007024:	6833      	ldrmi	r3, [r6, #0]
 8007026:	3302      	addmi	r3, #2
 8007028:	6033      	strmi	r3, [r6, #0]
 800702a:	6825      	ldr	r5, [r4, #0]
 800702c:	f015 0506 	ands.w	r5, r5, #6
 8007030:	d106      	bne.n	8007040 <_printf_common+0x48>
 8007032:	f104 0a19 	add.w	sl, r4, #25
 8007036:	68e3      	ldr	r3, [r4, #12]
 8007038:	6832      	ldr	r2, [r6, #0]
 800703a:	1a9b      	subs	r3, r3, r2
 800703c:	42ab      	cmp	r3, r5
 800703e:	dc2b      	bgt.n	8007098 <_printf_common+0xa0>
 8007040:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007044:	6822      	ldr	r2, [r4, #0]
 8007046:	3b00      	subs	r3, #0
 8007048:	bf18      	it	ne
 800704a:	2301      	movne	r3, #1
 800704c:	0692      	lsls	r2, r2, #26
 800704e:	d430      	bmi.n	80070b2 <_printf_common+0xba>
 8007050:	4641      	mov	r1, r8
 8007052:	4638      	mov	r0, r7
 8007054:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007058:	47c8      	blx	r9
 800705a:	3001      	adds	r0, #1
 800705c:	d023      	beq.n	80070a6 <_printf_common+0xae>
 800705e:	6823      	ldr	r3, [r4, #0]
 8007060:	6922      	ldr	r2, [r4, #16]
 8007062:	f003 0306 	and.w	r3, r3, #6
 8007066:	2b04      	cmp	r3, #4
 8007068:	bf14      	ite	ne
 800706a:	2500      	movne	r5, #0
 800706c:	6833      	ldreq	r3, [r6, #0]
 800706e:	f04f 0600 	mov.w	r6, #0
 8007072:	bf08      	it	eq
 8007074:	68e5      	ldreq	r5, [r4, #12]
 8007076:	f104 041a 	add.w	r4, r4, #26
 800707a:	bf08      	it	eq
 800707c:	1aed      	subeq	r5, r5, r3
 800707e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007082:	bf08      	it	eq
 8007084:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007088:	4293      	cmp	r3, r2
 800708a:	bfc4      	itt	gt
 800708c:	1a9b      	subgt	r3, r3, r2
 800708e:	18ed      	addgt	r5, r5, r3
 8007090:	42b5      	cmp	r5, r6
 8007092:	d11a      	bne.n	80070ca <_printf_common+0xd2>
 8007094:	2000      	movs	r0, #0
 8007096:	e008      	b.n	80070aa <_printf_common+0xb2>
 8007098:	2301      	movs	r3, #1
 800709a:	4652      	mov	r2, sl
 800709c:	4641      	mov	r1, r8
 800709e:	4638      	mov	r0, r7
 80070a0:	47c8      	blx	r9
 80070a2:	3001      	adds	r0, #1
 80070a4:	d103      	bne.n	80070ae <_printf_common+0xb6>
 80070a6:	f04f 30ff 	mov.w	r0, #4294967295
 80070aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070ae:	3501      	adds	r5, #1
 80070b0:	e7c1      	b.n	8007036 <_printf_common+0x3e>
 80070b2:	2030      	movs	r0, #48	@ 0x30
 80070b4:	18e1      	adds	r1, r4, r3
 80070b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80070ba:	1c5a      	adds	r2, r3, #1
 80070bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80070c0:	4422      	add	r2, r4
 80070c2:	3302      	adds	r3, #2
 80070c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80070c8:	e7c2      	b.n	8007050 <_printf_common+0x58>
 80070ca:	2301      	movs	r3, #1
 80070cc:	4622      	mov	r2, r4
 80070ce:	4641      	mov	r1, r8
 80070d0:	4638      	mov	r0, r7
 80070d2:	47c8      	blx	r9
 80070d4:	3001      	adds	r0, #1
 80070d6:	d0e6      	beq.n	80070a6 <_printf_common+0xae>
 80070d8:	3601      	adds	r6, #1
 80070da:	e7d9      	b.n	8007090 <_printf_common+0x98>

080070dc <_printf_i>:
 80070dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070e0:	7e0f      	ldrb	r7, [r1, #24]
 80070e2:	4691      	mov	r9, r2
 80070e4:	2f78      	cmp	r7, #120	@ 0x78
 80070e6:	4680      	mov	r8, r0
 80070e8:	460c      	mov	r4, r1
 80070ea:	469a      	mov	sl, r3
 80070ec:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80070ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80070f2:	d807      	bhi.n	8007104 <_printf_i+0x28>
 80070f4:	2f62      	cmp	r7, #98	@ 0x62
 80070f6:	d80a      	bhi.n	800710e <_printf_i+0x32>
 80070f8:	2f00      	cmp	r7, #0
 80070fa:	f000 80d1 	beq.w	80072a0 <_printf_i+0x1c4>
 80070fe:	2f58      	cmp	r7, #88	@ 0x58
 8007100:	f000 80b8 	beq.w	8007274 <_printf_i+0x198>
 8007104:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007108:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800710c:	e03a      	b.n	8007184 <_printf_i+0xa8>
 800710e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007112:	2b15      	cmp	r3, #21
 8007114:	d8f6      	bhi.n	8007104 <_printf_i+0x28>
 8007116:	a101      	add	r1, pc, #4	@ (adr r1, 800711c <_printf_i+0x40>)
 8007118:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800711c:	08007175 	.word	0x08007175
 8007120:	08007189 	.word	0x08007189
 8007124:	08007105 	.word	0x08007105
 8007128:	08007105 	.word	0x08007105
 800712c:	08007105 	.word	0x08007105
 8007130:	08007105 	.word	0x08007105
 8007134:	08007189 	.word	0x08007189
 8007138:	08007105 	.word	0x08007105
 800713c:	08007105 	.word	0x08007105
 8007140:	08007105 	.word	0x08007105
 8007144:	08007105 	.word	0x08007105
 8007148:	08007287 	.word	0x08007287
 800714c:	080071b3 	.word	0x080071b3
 8007150:	08007241 	.word	0x08007241
 8007154:	08007105 	.word	0x08007105
 8007158:	08007105 	.word	0x08007105
 800715c:	080072a9 	.word	0x080072a9
 8007160:	08007105 	.word	0x08007105
 8007164:	080071b3 	.word	0x080071b3
 8007168:	08007105 	.word	0x08007105
 800716c:	08007105 	.word	0x08007105
 8007170:	08007249 	.word	0x08007249
 8007174:	6833      	ldr	r3, [r6, #0]
 8007176:	1d1a      	adds	r2, r3, #4
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	6032      	str	r2, [r6, #0]
 800717c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007180:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007184:	2301      	movs	r3, #1
 8007186:	e09c      	b.n	80072c2 <_printf_i+0x1e6>
 8007188:	6833      	ldr	r3, [r6, #0]
 800718a:	6820      	ldr	r0, [r4, #0]
 800718c:	1d19      	adds	r1, r3, #4
 800718e:	6031      	str	r1, [r6, #0]
 8007190:	0606      	lsls	r6, r0, #24
 8007192:	d501      	bpl.n	8007198 <_printf_i+0xbc>
 8007194:	681d      	ldr	r5, [r3, #0]
 8007196:	e003      	b.n	80071a0 <_printf_i+0xc4>
 8007198:	0645      	lsls	r5, r0, #25
 800719a:	d5fb      	bpl.n	8007194 <_printf_i+0xb8>
 800719c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80071a0:	2d00      	cmp	r5, #0
 80071a2:	da03      	bge.n	80071ac <_printf_i+0xd0>
 80071a4:	232d      	movs	r3, #45	@ 0x2d
 80071a6:	426d      	negs	r5, r5
 80071a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071ac:	230a      	movs	r3, #10
 80071ae:	4858      	ldr	r0, [pc, #352]	@ (8007310 <_printf_i+0x234>)
 80071b0:	e011      	b.n	80071d6 <_printf_i+0xfa>
 80071b2:	6821      	ldr	r1, [r4, #0]
 80071b4:	6833      	ldr	r3, [r6, #0]
 80071b6:	0608      	lsls	r0, r1, #24
 80071b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80071bc:	d402      	bmi.n	80071c4 <_printf_i+0xe8>
 80071be:	0649      	lsls	r1, r1, #25
 80071c0:	bf48      	it	mi
 80071c2:	b2ad      	uxthmi	r5, r5
 80071c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80071c6:	6033      	str	r3, [r6, #0]
 80071c8:	bf14      	ite	ne
 80071ca:	230a      	movne	r3, #10
 80071cc:	2308      	moveq	r3, #8
 80071ce:	4850      	ldr	r0, [pc, #320]	@ (8007310 <_printf_i+0x234>)
 80071d0:	2100      	movs	r1, #0
 80071d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80071d6:	6866      	ldr	r6, [r4, #4]
 80071d8:	2e00      	cmp	r6, #0
 80071da:	60a6      	str	r6, [r4, #8]
 80071dc:	db05      	blt.n	80071ea <_printf_i+0x10e>
 80071de:	6821      	ldr	r1, [r4, #0]
 80071e0:	432e      	orrs	r6, r5
 80071e2:	f021 0104 	bic.w	r1, r1, #4
 80071e6:	6021      	str	r1, [r4, #0]
 80071e8:	d04b      	beq.n	8007282 <_printf_i+0x1a6>
 80071ea:	4616      	mov	r6, r2
 80071ec:	fbb5 f1f3 	udiv	r1, r5, r3
 80071f0:	fb03 5711 	mls	r7, r3, r1, r5
 80071f4:	5dc7      	ldrb	r7, [r0, r7]
 80071f6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80071fa:	462f      	mov	r7, r5
 80071fc:	42bb      	cmp	r3, r7
 80071fe:	460d      	mov	r5, r1
 8007200:	d9f4      	bls.n	80071ec <_printf_i+0x110>
 8007202:	2b08      	cmp	r3, #8
 8007204:	d10b      	bne.n	800721e <_printf_i+0x142>
 8007206:	6823      	ldr	r3, [r4, #0]
 8007208:	07df      	lsls	r7, r3, #31
 800720a:	d508      	bpl.n	800721e <_printf_i+0x142>
 800720c:	6923      	ldr	r3, [r4, #16]
 800720e:	6861      	ldr	r1, [r4, #4]
 8007210:	4299      	cmp	r1, r3
 8007212:	bfde      	ittt	le
 8007214:	2330      	movle	r3, #48	@ 0x30
 8007216:	f806 3c01 	strble.w	r3, [r6, #-1]
 800721a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800721e:	1b92      	subs	r2, r2, r6
 8007220:	6122      	str	r2, [r4, #16]
 8007222:	464b      	mov	r3, r9
 8007224:	4621      	mov	r1, r4
 8007226:	4640      	mov	r0, r8
 8007228:	f8cd a000 	str.w	sl, [sp]
 800722c:	aa03      	add	r2, sp, #12
 800722e:	f7ff fee3 	bl	8006ff8 <_printf_common>
 8007232:	3001      	adds	r0, #1
 8007234:	d14a      	bne.n	80072cc <_printf_i+0x1f0>
 8007236:	f04f 30ff 	mov.w	r0, #4294967295
 800723a:	b004      	add	sp, #16
 800723c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007240:	6823      	ldr	r3, [r4, #0]
 8007242:	f043 0320 	orr.w	r3, r3, #32
 8007246:	6023      	str	r3, [r4, #0]
 8007248:	2778      	movs	r7, #120	@ 0x78
 800724a:	4832      	ldr	r0, [pc, #200]	@ (8007314 <_printf_i+0x238>)
 800724c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007250:	6823      	ldr	r3, [r4, #0]
 8007252:	6831      	ldr	r1, [r6, #0]
 8007254:	061f      	lsls	r7, r3, #24
 8007256:	f851 5b04 	ldr.w	r5, [r1], #4
 800725a:	d402      	bmi.n	8007262 <_printf_i+0x186>
 800725c:	065f      	lsls	r7, r3, #25
 800725e:	bf48      	it	mi
 8007260:	b2ad      	uxthmi	r5, r5
 8007262:	6031      	str	r1, [r6, #0]
 8007264:	07d9      	lsls	r1, r3, #31
 8007266:	bf44      	itt	mi
 8007268:	f043 0320 	orrmi.w	r3, r3, #32
 800726c:	6023      	strmi	r3, [r4, #0]
 800726e:	b11d      	cbz	r5, 8007278 <_printf_i+0x19c>
 8007270:	2310      	movs	r3, #16
 8007272:	e7ad      	b.n	80071d0 <_printf_i+0xf4>
 8007274:	4826      	ldr	r0, [pc, #152]	@ (8007310 <_printf_i+0x234>)
 8007276:	e7e9      	b.n	800724c <_printf_i+0x170>
 8007278:	6823      	ldr	r3, [r4, #0]
 800727a:	f023 0320 	bic.w	r3, r3, #32
 800727e:	6023      	str	r3, [r4, #0]
 8007280:	e7f6      	b.n	8007270 <_printf_i+0x194>
 8007282:	4616      	mov	r6, r2
 8007284:	e7bd      	b.n	8007202 <_printf_i+0x126>
 8007286:	6833      	ldr	r3, [r6, #0]
 8007288:	6825      	ldr	r5, [r4, #0]
 800728a:	1d18      	adds	r0, r3, #4
 800728c:	6961      	ldr	r1, [r4, #20]
 800728e:	6030      	str	r0, [r6, #0]
 8007290:	062e      	lsls	r6, r5, #24
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	d501      	bpl.n	800729a <_printf_i+0x1be>
 8007296:	6019      	str	r1, [r3, #0]
 8007298:	e002      	b.n	80072a0 <_printf_i+0x1c4>
 800729a:	0668      	lsls	r0, r5, #25
 800729c:	d5fb      	bpl.n	8007296 <_printf_i+0x1ba>
 800729e:	8019      	strh	r1, [r3, #0]
 80072a0:	2300      	movs	r3, #0
 80072a2:	4616      	mov	r6, r2
 80072a4:	6123      	str	r3, [r4, #16]
 80072a6:	e7bc      	b.n	8007222 <_printf_i+0x146>
 80072a8:	6833      	ldr	r3, [r6, #0]
 80072aa:	2100      	movs	r1, #0
 80072ac:	1d1a      	adds	r2, r3, #4
 80072ae:	6032      	str	r2, [r6, #0]
 80072b0:	681e      	ldr	r6, [r3, #0]
 80072b2:	6862      	ldr	r2, [r4, #4]
 80072b4:	4630      	mov	r0, r6
 80072b6:	f000 fa7e 	bl	80077b6 <memchr>
 80072ba:	b108      	cbz	r0, 80072c0 <_printf_i+0x1e4>
 80072bc:	1b80      	subs	r0, r0, r6
 80072be:	6060      	str	r0, [r4, #4]
 80072c0:	6863      	ldr	r3, [r4, #4]
 80072c2:	6123      	str	r3, [r4, #16]
 80072c4:	2300      	movs	r3, #0
 80072c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072ca:	e7aa      	b.n	8007222 <_printf_i+0x146>
 80072cc:	4632      	mov	r2, r6
 80072ce:	4649      	mov	r1, r9
 80072d0:	4640      	mov	r0, r8
 80072d2:	6923      	ldr	r3, [r4, #16]
 80072d4:	47d0      	blx	sl
 80072d6:	3001      	adds	r0, #1
 80072d8:	d0ad      	beq.n	8007236 <_printf_i+0x15a>
 80072da:	6823      	ldr	r3, [r4, #0]
 80072dc:	079b      	lsls	r3, r3, #30
 80072de:	d413      	bmi.n	8007308 <_printf_i+0x22c>
 80072e0:	68e0      	ldr	r0, [r4, #12]
 80072e2:	9b03      	ldr	r3, [sp, #12]
 80072e4:	4298      	cmp	r0, r3
 80072e6:	bfb8      	it	lt
 80072e8:	4618      	movlt	r0, r3
 80072ea:	e7a6      	b.n	800723a <_printf_i+0x15e>
 80072ec:	2301      	movs	r3, #1
 80072ee:	4632      	mov	r2, r6
 80072f0:	4649      	mov	r1, r9
 80072f2:	4640      	mov	r0, r8
 80072f4:	47d0      	blx	sl
 80072f6:	3001      	adds	r0, #1
 80072f8:	d09d      	beq.n	8007236 <_printf_i+0x15a>
 80072fa:	3501      	adds	r5, #1
 80072fc:	68e3      	ldr	r3, [r4, #12]
 80072fe:	9903      	ldr	r1, [sp, #12]
 8007300:	1a5b      	subs	r3, r3, r1
 8007302:	42ab      	cmp	r3, r5
 8007304:	dcf2      	bgt.n	80072ec <_printf_i+0x210>
 8007306:	e7eb      	b.n	80072e0 <_printf_i+0x204>
 8007308:	2500      	movs	r5, #0
 800730a:	f104 0619 	add.w	r6, r4, #25
 800730e:	e7f5      	b.n	80072fc <_printf_i+0x220>
 8007310:	08009820 	.word	0x08009820
 8007314:	08009831 	.word	0x08009831

08007318 <std>:
 8007318:	2300      	movs	r3, #0
 800731a:	b510      	push	{r4, lr}
 800731c:	4604      	mov	r4, r0
 800731e:	e9c0 3300 	strd	r3, r3, [r0]
 8007322:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007326:	6083      	str	r3, [r0, #8]
 8007328:	8181      	strh	r1, [r0, #12]
 800732a:	6643      	str	r3, [r0, #100]	@ 0x64
 800732c:	81c2      	strh	r2, [r0, #14]
 800732e:	6183      	str	r3, [r0, #24]
 8007330:	4619      	mov	r1, r3
 8007332:	2208      	movs	r2, #8
 8007334:	305c      	adds	r0, #92	@ 0x5c
 8007336:	f000 f9bf 	bl	80076b8 <memset>
 800733a:	4b0d      	ldr	r3, [pc, #52]	@ (8007370 <std+0x58>)
 800733c:	6224      	str	r4, [r4, #32]
 800733e:	6263      	str	r3, [r4, #36]	@ 0x24
 8007340:	4b0c      	ldr	r3, [pc, #48]	@ (8007374 <std+0x5c>)
 8007342:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007344:	4b0c      	ldr	r3, [pc, #48]	@ (8007378 <std+0x60>)
 8007346:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007348:	4b0c      	ldr	r3, [pc, #48]	@ (800737c <std+0x64>)
 800734a:	6323      	str	r3, [r4, #48]	@ 0x30
 800734c:	4b0c      	ldr	r3, [pc, #48]	@ (8007380 <std+0x68>)
 800734e:	429c      	cmp	r4, r3
 8007350:	d006      	beq.n	8007360 <std+0x48>
 8007352:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007356:	4294      	cmp	r4, r2
 8007358:	d002      	beq.n	8007360 <std+0x48>
 800735a:	33d0      	adds	r3, #208	@ 0xd0
 800735c:	429c      	cmp	r4, r3
 800735e:	d105      	bne.n	800736c <std+0x54>
 8007360:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007368:	f000 ba22 	b.w	80077b0 <__retarget_lock_init_recursive>
 800736c:	bd10      	pop	{r4, pc}
 800736e:	bf00      	nop
 8007370:	08007509 	.word	0x08007509
 8007374:	0800752b 	.word	0x0800752b
 8007378:	08007563 	.word	0x08007563
 800737c:	08007587 	.word	0x08007587
 8007380:	2000049c 	.word	0x2000049c

08007384 <stdio_exit_handler>:
 8007384:	4a02      	ldr	r2, [pc, #8]	@ (8007390 <stdio_exit_handler+0xc>)
 8007386:	4903      	ldr	r1, [pc, #12]	@ (8007394 <stdio_exit_handler+0x10>)
 8007388:	4803      	ldr	r0, [pc, #12]	@ (8007398 <stdio_exit_handler+0x14>)
 800738a:	f000 b869 	b.w	8007460 <_fwalk_sglue>
 800738e:	bf00      	nop
 8007390:	20000040 	.word	0x20000040
 8007394:	080093b1 	.word	0x080093b1
 8007398:	20000050 	.word	0x20000050

0800739c <cleanup_stdio>:
 800739c:	6841      	ldr	r1, [r0, #4]
 800739e:	4b0c      	ldr	r3, [pc, #48]	@ (80073d0 <cleanup_stdio+0x34>)
 80073a0:	b510      	push	{r4, lr}
 80073a2:	4299      	cmp	r1, r3
 80073a4:	4604      	mov	r4, r0
 80073a6:	d001      	beq.n	80073ac <cleanup_stdio+0x10>
 80073a8:	f002 f802 	bl	80093b0 <_fflush_r>
 80073ac:	68a1      	ldr	r1, [r4, #8]
 80073ae:	4b09      	ldr	r3, [pc, #36]	@ (80073d4 <cleanup_stdio+0x38>)
 80073b0:	4299      	cmp	r1, r3
 80073b2:	d002      	beq.n	80073ba <cleanup_stdio+0x1e>
 80073b4:	4620      	mov	r0, r4
 80073b6:	f001 fffb 	bl	80093b0 <_fflush_r>
 80073ba:	68e1      	ldr	r1, [r4, #12]
 80073bc:	4b06      	ldr	r3, [pc, #24]	@ (80073d8 <cleanup_stdio+0x3c>)
 80073be:	4299      	cmp	r1, r3
 80073c0:	d004      	beq.n	80073cc <cleanup_stdio+0x30>
 80073c2:	4620      	mov	r0, r4
 80073c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073c8:	f001 bff2 	b.w	80093b0 <_fflush_r>
 80073cc:	bd10      	pop	{r4, pc}
 80073ce:	bf00      	nop
 80073d0:	2000049c 	.word	0x2000049c
 80073d4:	20000504 	.word	0x20000504
 80073d8:	2000056c 	.word	0x2000056c

080073dc <global_stdio_init.part.0>:
 80073dc:	b510      	push	{r4, lr}
 80073de:	4b0b      	ldr	r3, [pc, #44]	@ (800740c <global_stdio_init.part.0+0x30>)
 80073e0:	4c0b      	ldr	r4, [pc, #44]	@ (8007410 <global_stdio_init.part.0+0x34>)
 80073e2:	4a0c      	ldr	r2, [pc, #48]	@ (8007414 <global_stdio_init.part.0+0x38>)
 80073e4:	4620      	mov	r0, r4
 80073e6:	601a      	str	r2, [r3, #0]
 80073e8:	2104      	movs	r1, #4
 80073ea:	2200      	movs	r2, #0
 80073ec:	f7ff ff94 	bl	8007318 <std>
 80073f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80073f4:	2201      	movs	r2, #1
 80073f6:	2109      	movs	r1, #9
 80073f8:	f7ff ff8e 	bl	8007318 <std>
 80073fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007400:	2202      	movs	r2, #2
 8007402:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007406:	2112      	movs	r1, #18
 8007408:	f7ff bf86 	b.w	8007318 <std>
 800740c:	200005d4 	.word	0x200005d4
 8007410:	2000049c 	.word	0x2000049c
 8007414:	08007385 	.word	0x08007385

08007418 <__sfp_lock_acquire>:
 8007418:	4801      	ldr	r0, [pc, #4]	@ (8007420 <__sfp_lock_acquire+0x8>)
 800741a:	f000 b9ca 	b.w	80077b2 <__retarget_lock_acquire_recursive>
 800741e:	bf00      	nop
 8007420:	200005dd 	.word	0x200005dd

08007424 <__sfp_lock_release>:
 8007424:	4801      	ldr	r0, [pc, #4]	@ (800742c <__sfp_lock_release+0x8>)
 8007426:	f000 b9c5 	b.w	80077b4 <__retarget_lock_release_recursive>
 800742a:	bf00      	nop
 800742c:	200005dd 	.word	0x200005dd

08007430 <__sinit>:
 8007430:	b510      	push	{r4, lr}
 8007432:	4604      	mov	r4, r0
 8007434:	f7ff fff0 	bl	8007418 <__sfp_lock_acquire>
 8007438:	6a23      	ldr	r3, [r4, #32]
 800743a:	b11b      	cbz	r3, 8007444 <__sinit+0x14>
 800743c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007440:	f7ff bff0 	b.w	8007424 <__sfp_lock_release>
 8007444:	4b04      	ldr	r3, [pc, #16]	@ (8007458 <__sinit+0x28>)
 8007446:	6223      	str	r3, [r4, #32]
 8007448:	4b04      	ldr	r3, [pc, #16]	@ (800745c <__sinit+0x2c>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d1f5      	bne.n	800743c <__sinit+0xc>
 8007450:	f7ff ffc4 	bl	80073dc <global_stdio_init.part.0>
 8007454:	e7f2      	b.n	800743c <__sinit+0xc>
 8007456:	bf00      	nop
 8007458:	0800739d 	.word	0x0800739d
 800745c:	200005d4 	.word	0x200005d4

08007460 <_fwalk_sglue>:
 8007460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007464:	4607      	mov	r7, r0
 8007466:	4688      	mov	r8, r1
 8007468:	4614      	mov	r4, r2
 800746a:	2600      	movs	r6, #0
 800746c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007470:	f1b9 0901 	subs.w	r9, r9, #1
 8007474:	d505      	bpl.n	8007482 <_fwalk_sglue+0x22>
 8007476:	6824      	ldr	r4, [r4, #0]
 8007478:	2c00      	cmp	r4, #0
 800747a:	d1f7      	bne.n	800746c <_fwalk_sglue+0xc>
 800747c:	4630      	mov	r0, r6
 800747e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007482:	89ab      	ldrh	r3, [r5, #12]
 8007484:	2b01      	cmp	r3, #1
 8007486:	d907      	bls.n	8007498 <_fwalk_sglue+0x38>
 8007488:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800748c:	3301      	adds	r3, #1
 800748e:	d003      	beq.n	8007498 <_fwalk_sglue+0x38>
 8007490:	4629      	mov	r1, r5
 8007492:	4638      	mov	r0, r7
 8007494:	47c0      	blx	r8
 8007496:	4306      	orrs	r6, r0
 8007498:	3568      	adds	r5, #104	@ 0x68
 800749a:	e7e9      	b.n	8007470 <_fwalk_sglue+0x10>

0800749c <sniprintf>:
 800749c:	b40c      	push	{r2, r3}
 800749e:	b530      	push	{r4, r5, lr}
 80074a0:	4b18      	ldr	r3, [pc, #96]	@ (8007504 <sniprintf+0x68>)
 80074a2:	1e0c      	subs	r4, r1, #0
 80074a4:	681d      	ldr	r5, [r3, #0]
 80074a6:	b09d      	sub	sp, #116	@ 0x74
 80074a8:	da08      	bge.n	80074bc <sniprintf+0x20>
 80074aa:	238b      	movs	r3, #139	@ 0x8b
 80074ac:	f04f 30ff 	mov.w	r0, #4294967295
 80074b0:	602b      	str	r3, [r5, #0]
 80074b2:	b01d      	add	sp, #116	@ 0x74
 80074b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80074b8:	b002      	add	sp, #8
 80074ba:	4770      	bx	lr
 80074bc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80074c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80074c4:	f04f 0300 	mov.w	r3, #0
 80074c8:	931b      	str	r3, [sp, #108]	@ 0x6c
 80074ca:	bf0c      	ite	eq
 80074cc:	4623      	moveq	r3, r4
 80074ce:	f104 33ff 	addne.w	r3, r4, #4294967295
 80074d2:	9304      	str	r3, [sp, #16]
 80074d4:	9307      	str	r3, [sp, #28]
 80074d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80074da:	9002      	str	r0, [sp, #8]
 80074dc:	9006      	str	r0, [sp, #24]
 80074de:	f8ad 3016 	strh.w	r3, [sp, #22]
 80074e2:	4628      	mov	r0, r5
 80074e4:	ab21      	add	r3, sp, #132	@ 0x84
 80074e6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80074e8:	a902      	add	r1, sp, #8
 80074ea:	9301      	str	r3, [sp, #4]
 80074ec:	f001 fca4 	bl	8008e38 <_svfiprintf_r>
 80074f0:	1c43      	adds	r3, r0, #1
 80074f2:	bfbc      	itt	lt
 80074f4:	238b      	movlt	r3, #139	@ 0x8b
 80074f6:	602b      	strlt	r3, [r5, #0]
 80074f8:	2c00      	cmp	r4, #0
 80074fa:	d0da      	beq.n	80074b2 <sniprintf+0x16>
 80074fc:	2200      	movs	r2, #0
 80074fe:	9b02      	ldr	r3, [sp, #8]
 8007500:	701a      	strb	r2, [r3, #0]
 8007502:	e7d6      	b.n	80074b2 <sniprintf+0x16>
 8007504:	2000004c 	.word	0x2000004c

08007508 <__sread>:
 8007508:	b510      	push	{r4, lr}
 800750a:	460c      	mov	r4, r1
 800750c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007510:	f000 f900 	bl	8007714 <_read_r>
 8007514:	2800      	cmp	r0, #0
 8007516:	bfab      	itete	ge
 8007518:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800751a:	89a3      	ldrhlt	r3, [r4, #12]
 800751c:	181b      	addge	r3, r3, r0
 800751e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007522:	bfac      	ite	ge
 8007524:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007526:	81a3      	strhlt	r3, [r4, #12]
 8007528:	bd10      	pop	{r4, pc}

0800752a <__swrite>:
 800752a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800752e:	461f      	mov	r7, r3
 8007530:	898b      	ldrh	r3, [r1, #12]
 8007532:	4605      	mov	r5, r0
 8007534:	05db      	lsls	r3, r3, #23
 8007536:	460c      	mov	r4, r1
 8007538:	4616      	mov	r6, r2
 800753a:	d505      	bpl.n	8007548 <__swrite+0x1e>
 800753c:	2302      	movs	r3, #2
 800753e:	2200      	movs	r2, #0
 8007540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007544:	f000 f8d4 	bl	80076f0 <_lseek_r>
 8007548:	89a3      	ldrh	r3, [r4, #12]
 800754a:	4632      	mov	r2, r6
 800754c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007550:	81a3      	strh	r3, [r4, #12]
 8007552:	4628      	mov	r0, r5
 8007554:	463b      	mov	r3, r7
 8007556:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800755a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800755e:	f000 b8eb 	b.w	8007738 <_write_r>

08007562 <__sseek>:
 8007562:	b510      	push	{r4, lr}
 8007564:	460c      	mov	r4, r1
 8007566:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800756a:	f000 f8c1 	bl	80076f0 <_lseek_r>
 800756e:	1c43      	adds	r3, r0, #1
 8007570:	89a3      	ldrh	r3, [r4, #12]
 8007572:	bf15      	itete	ne
 8007574:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007576:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800757a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800757e:	81a3      	strheq	r3, [r4, #12]
 8007580:	bf18      	it	ne
 8007582:	81a3      	strhne	r3, [r4, #12]
 8007584:	bd10      	pop	{r4, pc}

08007586 <__sclose>:
 8007586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800758a:	f000 b8a1 	b.w	80076d0 <_close_r>

0800758e <__swbuf_r>:
 800758e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007590:	460e      	mov	r6, r1
 8007592:	4614      	mov	r4, r2
 8007594:	4605      	mov	r5, r0
 8007596:	b118      	cbz	r0, 80075a0 <__swbuf_r+0x12>
 8007598:	6a03      	ldr	r3, [r0, #32]
 800759a:	b90b      	cbnz	r3, 80075a0 <__swbuf_r+0x12>
 800759c:	f7ff ff48 	bl	8007430 <__sinit>
 80075a0:	69a3      	ldr	r3, [r4, #24]
 80075a2:	60a3      	str	r3, [r4, #8]
 80075a4:	89a3      	ldrh	r3, [r4, #12]
 80075a6:	071a      	lsls	r2, r3, #28
 80075a8:	d501      	bpl.n	80075ae <__swbuf_r+0x20>
 80075aa:	6923      	ldr	r3, [r4, #16]
 80075ac:	b943      	cbnz	r3, 80075c0 <__swbuf_r+0x32>
 80075ae:	4621      	mov	r1, r4
 80075b0:	4628      	mov	r0, r5
 80075b2:	f000 f82b 	bl	800760c <__swsetup_r>
 80075b6:	b118      	cbz	r0, 80075c0 <__swbuf_r+0x32>
 80075b8:	f04f 37ff 	mov.w	r7, #4294967295
 80075bc:	4638      	mov	r0, r7
 80075be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075c0:	6823      	ldr	r3, [r4, #0]
 80075c2:	6922      	ldr	r2, [r4, #16]
 80075c4:	b2f6      	uxtb	r6, r6
 80075c6:	1a98      	subs	r0, r3, r2
 80075c8:	6963      	ldr	r3, [r4, #20]
 80075ca:	4637      	mov	r7, r6
 80075cc:	4283      	cmp	r3, r0
 80075ce:	dc05      	bgt.n	80075dc <__swbuf_r+0x4e>
 80075d0:	4621      	mov	r1, r4
 80075d2:	4628      	mov	r0, r5
 80075d4:	f001 feec 	bl	80093b0 <_fflush_r>
 80075d8:	2800      	cmp	r0, #0
 80075da:	d1ed      	bne.n	80075b8 <__swbuf_r+0x2a>
 80075dc:	68a3      	ldr	r3, [r4, #8]
 80075de:	3b01      	subs	r3, #1
 80075e0:	60a3      	str	r3, [r4, #8]
 80075e2:	6823      	ldr	r3, [r4, #0]
 80075e4:	1c5a      	adds	r2, r3, #1
 80075e6:	6022      	str	r2, [r4, #0]
 80075e8:	701e      	strb	r6, [r3, #0]
 80075ea:	6962      	ldr	r2, [r4, #20]
 80075ec:	1c43      	adds	r3, r0, #1
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d004      	beq.n	80075fc <__swbuf_r+0x6e>
 80075f2:	89a3      	ldrh	r3, [r4, #12]
 80075f4:	07db      	lsls	r3, r3, #31
 80075f6:	d5e1      	bpl.n	80075bc <__swbuf_r+0x2e>
 80075f8:	2e0a      	cmp	r6, #10
 80075fa:	d1df      	bne.n	80075bc <__swbuf_r+0x2e>
 80075fc:	4621      	mov	r1, r4
 80075fe:	4628      	mov	r0, r5
 8007600:	f001 fed6 	bl	80093b0 <_fflush_r>
 8007604:	2800      	cmp	r0, #0
 8007606:	d0d9      	beq.n	80075bc <__swbuf_r+0x2e>
 8007608:	e7d6      	b.n	80075b8 <__swbuf_r+0x2a>
	...

0800760c <__swsetup_r>:
 800760c:	b538      	push	{r3, r4, r5, lr}
 800760e:	4b29      	ldr	r3, [pc, #164]	@ (80076b4 <__swsetup_r+0xa8>)
 8007610:	4605      	mov	r5, r0
 8007612:	6818      	ldr	r0, [r3, #0]
 8007614:	460c      	mov	r4, r1
 8007616:	b118      	cbz	r0, 8007620 <__swsetup_r+0x14>
 8007618:	6a03      	ldr	r3, [r0, #32]
 800761a:	b90b      	cbnz	r3, 8007620 <__swsetup_r+0x14>
 800761c:	f7ff ff08 	bl	8007430 <__sinit>
 8007620:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007624:	0719      	lsls	r1, r3, #28
 8007626:	d422      	bmi.n	800766e <__swsetup_r+0x62>
 8007628:	06da      	lsls	r2, r3, #27
 800762a:	d407      	bmi.n	800763c <__swsetup_r+0x30>
 800762c:	2209      	movs	r2, #9
 800762e:	602a      	str	r2, [r5, #0]
 8007630:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007634:	f04f 30ff 	mov.w	r0, #4294967295
 8007638:	81a3      	strh	r3, [r4, #12]
 800763a:	e033      	b.n	80076a4 <__swsetup_r+0x98>
 800763c:	0758      	lsls	r0, r3, #29
 800763e:	d512      	bpl.n	8007666 <__swsetup_r+0x5a>
 8007640:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007642:	b141      	cbz	r1, 8007656 <__swsetup_r+0x4a>
 8007644:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007648:	4299      	cmp	r1, r3
 800764a:	d002      	beq.n	8007652 <__swsetup_r+0x46>
 800764c:	4628      	mov	r0, r5
 800764e:	f000 ff1f 	bl	8008490 <_free_r>
 8007652:	2300      	movs	r3, #0
 8007654:	6363      	str	r3, [r4, #52]	@ 0x34
 8007656:	89a3      	ldrh	r3, [r4, #12]
 8007658:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800765c:	81a3      	strh	r3, [r4, #12]
 800765e:	2300      	movs	r3, #0
 8007660:	6063      	str	r3, [r4, #4]
 8007662:	6923      	ldr	r3, [r4, #16]
 8007664:	6023      	str	r3, [r4, #0]
 8007666:	89a3      	ldrh	r3, [r4, #12]
 8007668:	f043 0308 	orr.w	r3, r3, #8
 800766c:	81a3      	strh	r3, [r4, #12]
 800766e:	6923      	ldr	r3, [r4, #16]
 8007670:	b94b      	cbnz	r3, 8007686 <__swsetup_r+0x7a>
 8007672:	89a3      	ldrh	r3, [r4, #12]
 8007674:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007678:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800767c:	d003      	beq.n	8007686 <__swsetup_r+0x7a>
 800767e:	4621      	mov	r1, r4
 8007680:	4628      	mov	r0, r5
 8007682:	f001 fee2 	bl	800944a <__smakebuf_r>
 8007686:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800768a:	f013 0201 	ands.w	r2, r3, #1
 800768e:	d00a      	beq.n	80076a6 <__swsetup_r+0x9a>
 8007690:	2200      	movs	r2, #0
 8007692:	60a2      	str	r2, [r4, #8]
 8007694:	6962      	ldr	r2, [r4, #20]
 8007696:	4252      	negs	r2, r2
 8007698:	61a2      	str	r2, [r4, #24]
 800769a:	6922      	ldr	r2, [r4, #16]
 800769c:	b942      	cbnz	r2, 80076b0 <__swsetup_r+0xa4>
 800769e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80076a2:	d1c5      	bne.n	8007630 <__swsetup_r+0x24>
 80076a4:	bd38      	pop	{r3, r4, r5, pc}
 80076a6:	0799      	lsls	r1, r3, #30
 80076a8:	bf58      	it	pl
 80076aa:	6962      	ldrpl	r2, [r4, #20]
 80076ac:	60a2      	str	r2, [r4, #8]
 80076ae:	e7f4      	b.n	800769a <__swsetup_r+0x8e>
 80076b0:	2000      	movs	r0, #0
 80076b2:	e7f7      	b.n	80076a4 <__swsetup_r+0x98>
 80076b4:	2000004c 	.word	0x2000004c

080076b8 <memset>:
 80076b8:	4603      	mov	r3, r0
 80076ba:	4402      	add	r2, r0
 80076bc:	4293      	cmp	r3, r2
 80076be:	d100      	bne.n	80076c2 <memset+0xa>
 80076c0:	4770      	bx	lr
 80076c2:	f803 1b01 	strb.w	r1, [r3], #1
 80076c6:	e7f9      	b.n	80076bc <memset+0x4>

080076c8 <_localeconv_r>:
 80076c8:	4800      	ldr	r0, [pc, #0]	@ (80076cc <_localeconv_r+0x4>)
 80076ca:	4770      	bx	lr
 80076cc:	2000018c 	.word	0x2000018c

080076d0 <_close_r>:
 80076d0:	b538      	push	{r3, r4, r5, lr}
 80076d2:	2300      	movs	r3, #0
 80076d4:	4d05      	ldr	r5, [pc, #20]	@ (80076ec <_close_r+0x1c>)
 80076d6:	4604      	mov	r4, r0
 80076d8:	4608      	mov	r0, r1
 80076da:	602b      	str	r3, [r5, #0]
 80076dc:	f7fb f927 	bl	800292e <_close>
 80076e0:	1c43      	adds	r3, r0, #1
 80076e2:	d102      	bne.n	80076ea <_close_r+0x1a>
 80076e4:	682b      	ldr	r3, [r5, #0]
 80076e6:	b103      	cbz	r3, 80076ea <_close_r+0x1a>
 80076e8:	6023      	str	r3, [r4, #0]
 80076ea:	bd38      	pop	{r3, r4, r5, pc}
 80076ec:	200005d8 	.word	0x200005d8

080076f0 <_lseek_r>:
 80076f0:	b538      	push	{r3, r4, r5, lr}
 80076f2:	4604      	mov	r4, r0
 80076f4:	4608      	mov	r0, r1
 80076f6:	4611      	mov	r1, r2
 80076f8:	2200      	movs	r2, #0
 80076fa:	4d05      	ldr	r5, [pc, #20]	@ (8007710 <_lseek_r+0x20>)
 80076fc:	602a      	str	r2, [r5, #0]
 80076fe:	461a      	mov	r2, r3
 8007700:	f7fb f939 	bl	8002976 <_lseek>
 8007704:	1c43      	adds	r3, r0, #1
 8007706:	d102      	bne.n	800770e <_lseek_r+0x1e>
 8007708:	682b      	ldr	r3, [r5, #0]
 800770a:	b103      	cbz	r3, 800770e <_lseek_r+0x1e>
 800770c:	6023      	str	r3, [r4, #0]
 800770e:	bd38      	pop	{r3, r4, r5, pc}
 8007710:	200005d8 	.word	0x200005d8

08007714 <_read_r>:
 8007714:	b538      	push	{r3, r4, r5, lr}
 8007716:	4604      	mov	r4, r0
 8007718:	4608      	mov	r0, r1
 800771a:	4611      	mov	r1, r2
 800771c:	2200      	movs	r2, #0
 800771e:	4d05      	ldr	r5, [pc, #20]	@ (8007734 <_read_r+0x20>)
 8007720:	602a      	str	r2, [r5, #0]
 8007722:	461a      	mov	r2, r3
 8007724:	f7fb f8ca 	bl	80028bc <_read>
 8007728:	1c43      	adds	r3, r0, #1
 800772a:	d102      	bne.n	8007732 <_read_r+0x1e>
 800772c:	682b      	ldr	r3, [r5, #0]
 800772e:	b103      	cbz	r3, 8007732 <_read_r+0x1e>
 8007730:	6023      	str	r3, [r4, #0]
 8007732:	bd38      	pop	{r3, r4, r5, pc}
 8007734:	200005d8 	.word	0x200005d8

08007738 <_write_r>:
 8007738:	b538      	push	{r3, r4, r5, lr}
 800773a:	4604      	mov	r4, r0
 800773c:	4608      	mov	r0, r1
 800773e:	4611      	mov	r1, r2
 8007740:	2200      	movs	r2, #0
 8007742:	4d05      	ldr	r5, [pc, #20]	@ (8007758 <_write_r+0x20>)
 8007744:	602a      	str	r2, [r5, #0]
 8007746:	461a      	mov	r2, r3
 8007748:	f7fb f8d5 	bl	80028f6 <_write>
 800774c:	1c43      	adds	r3, r0, #1
 800774e:	d102      	bne.n	8007756 <_write_r+0x1e>
 8007750:	682b      	ldr	r3, [r5, #0]
 8007752:	b103      	cbz	r3, 8007756 <_write_r+0x1e>
 8007754:	6023      	str	r3, [r4, #0]
 8007756:	bd38      	pop	{r3, r4, r5, pc}
 8007758:	200005d8 	.word	0x200005d8

0800775c <__errno>:
 800775c:	4b01      	ldr	r3, [pc, #4]	@ (8007764 <__errno+0x8>)
 800775e:	6818      	ldr	r0, [r3, #0]
 8007760:	4770      	bx	lr
 8007762:	bf00      	nop
 8007764:	2000004c 	.word	0x2000004c

08007768 <__libc_init_array>:
 8007768:	b570      	push	{r4, r5, r6, lr}
 800776a:	2600      	movs	r6, #0
 800776c:	4d0c      	ldr	r5, [pc, #48]	@ (80077a0 <__libc_init_array+0x38>)
 800776e:	4c0d      	ldr	r4, [pc, #52]	@ (80077a4 <__libc_init_array+0x3c>)
 8007770:	1b64      	subs	r4, r4, r5
 8007772:	10a4      	asrs	r4, r4, #2
 8007774:	42a6      	cmp	r6, r4
 8007776:	d109      	bne.n	800778c <__libc_init_array+0x24>
 8007778:	f001 ffe4 	bl	8009744 <_init>
 800777c:	2600      	movs	r6, #0
 800777e:	4d0a      	ldr	r5, [pc, #40]	@ (80077a8 <__libc_init_array+0x40>)
 8007780:	4c0a      	ldr	r4, [pc, #40]	@ (80077ac <__libc_init_array+0x44>)
 8007782:	1b64      	subs	r4, r4, r5
 8007784:	10a4      	asrs	r4, r4, #2
 8007786:	42a6      	cmp	r6, r4
 8007788:	d105      	bne.n	8007796 <__libc_init_array+0x2e>
 800778a:	bd70      	pop	{r4, r5, r6, pc}
 800778c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007790:	4798      	blx	r3
 8007792:	3601      	adds	r6, #1
 8007794:	e7ee      	b.n	8007774 <__libc_init_array+0xc>
 8007796:	f855 3b04 	ldr.w	r3, [r5], #4
 800779a:	4798      	blx	r3
 800779c:	3601      	adds	r6, #1
 800779e:	e7f2      	b.n	8007786 <__libc_init_array+0x1e>
 80077a0:	08009b8c 	.word	0x08009b8c
 80077a4:	08009b8c 	.word	0x08009b8c
 80077a8:	08009b8c 	.word	0x08009b8c
 80077ac:	08009b90 	.word	0x08009b90

080077b0 <__retarget_lock_init_recursive>:
 80077b0:	4770      	bx	lr

080077b2 <__retarget_lock_acquire_recursive>:
 80077b2:	4770      	bx	lr

080077b4 <__retarget_lock_release_recursive>:
 80077b4:	4770      	bx	lr

080077b6 <memchr>:
 80077b6:	4603      	mov	r3, r0
 80077b8:	b510      	push	{r4, lr}
 80077ba:	b2c9      	uxtb	r1, r1
 80077bc:	4402      	add	r2, r0
 80077be:	4293      	cmp	r3, r2
 80077c0:	4618      	mov	r0, r3
 80077c2:	d101      	bne.n	80077c8 <memchr+0x12>
 80077c4:	2000      	movs	r0, #0
 80077c6:	e003      	b.n	80077d0 <memchr+0x1a>
 80077c8:	7804      	ldrb	r4, [r0, #0]
 80077ca:	3301      	adds	r3, #1
 80077cc:	428c      	cmp	r4, r1
 80077ce:	d1f6      	bne.n	80077be <memchr+0x8>
 80077d0:	bd10      	pop	{r4, pc}

080077d2 <quorem>:
 80077d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077d6:	6903      	ldr	r3, [r0, #16]
 80077d8:	690c      	ldr	r4, [r1, #16]
 80077da:	4607      	mov	r7, r0
 80077dc:	42a3      	cmp	r3, r4
 80077de:	db7e      	blt.n	80078de <quorem+0x10c>
 80077e0:	3c01      	subs	r4, #1
 80077e2:	00a3      	lsls	r3, r4, #2
 80077e4:	f100 0514 	add.w	r5, r0, #20
 80077e8:	f101 0814 	add.w	r8, r1, #20
 80077ec:	9300      	str	r3, [sp, #0]
 80077ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80077f2:	9301      	str	r3, [sp, #4]
 80077f4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80077f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80077fc:	3301      	adds	r3, #1
 80077fe:	429a      	cmp	r2, r3
 8007800:	fbb2 f6f3 	udiv	r6, r2, r3
 8007804:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007808:	d32e      	bcc.n	8007868 <quorem+0x96>
 800780a:	f04f 0a00 	mov.w	sl, #0
 800780e:	46c4      	mov	ip, r8
 8007810:	46ae      	mov	lr, r5
 8007812:	46d3      	mov	fp, sl
 8007814:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007818:	b298      	uxth	r0, r3
 800781a:	fb06 a000 	mla	r0, r6, r0, sl
 800781e:	0c1b      	lsrs	r3, r3, #16
 8007820:	0c02      	lsrs	r2, r0, #16
 8007822:	fb06 2303 	mla	r3, r6, r3, r2
 8007826:	f8de 2000 	ldr.w	r2, [lr]
 800782a:	b280      	uxth	r0, r0
 800782c:	b292      	uxth	r2, r2
 800782e:	1a12      	subs	r2, r2, r0
 8007830:	445a      	add	r2, fp
 8007832:	f8de 0000 	ldr.w	r0, [lr]
 8007836:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800783a:	b29b      	uxth	r3, r3
 800783c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007840:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007844:	b292      	uxth	r2, r2
 8007846:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800784a:	45e1      	cmp	r9, ip
 800784c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007850:	f84e 2b04 	str.w	r2, [lr], #4
 8007854:	d2de      	bcs.n	8007814 <quorem+0x42>
 8007856:	9b00      	ldr	r3, [sp, #0]
 8007858:	58eb      	ldr	r3, [r5, r3]
 800785a:	b92b      	cbnz	r3, 8007868 <quorem+0x96>
 800785c:	9b01      	ldr	r3, [sp, #4]
 800785e:	3b04      	subs	r3, #4
 8007860:	429d      	cmp	r5, r3
 8007862:	461a      	mov	r2, r3
 8007864:	d32f      	bcc.n	80078c6 <quorem+0xf4>
 8007866:	613c      	str	r4, [r7, #16]
 8007868:	4638      	mov	r0, r7
 800786a:	f001 f981 	bl	8008b70 <__mcmp>
 800786e:	2800      	cmp	r0, #0
 8007870:	db25      	blt.n	80078be <quorem+0xec>
 8007872:	4629      	mov	r1, r5
 8007874:	2000      	movs	r0, #0
 8007876:	f858 2b04 	ldr.w	r2, [r8], #4
 800787a:	f8d1 c000 	ldr.w	ip, [r1]
 800787e:	fa1f fe82 	uxth.w	lr, r2
 8007882:	fa1f f38c 	uxth.w	r3, ip
 8007886:	eba3 030e 	sub.w	r3, r3, lr
 800788a:	4403      	add	r3, r0
 800788c:	0c12      	lsrs	r2, r2, #16
 800788e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007892:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007896:	b29b      	uxth	r3, r3
 8007898:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800789c:	45c1      	cmp	r9, r8
 800789e:	ea4f 4022 	mov.w	r0, r2, asr #16
 80078a2:	f841 3b04 	str.w	r3, [r1], #4
 80078a6:	d2e6      	bcs.n	8007876 <quorem+0xa4>
 80078a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80078ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80078b0:	b922      	cbnz	r2, 80078bc <quorem+0xea>
 80078b2:	3b04      	subs	r3, #4
 80078b4:	429d      	cmp	r5, r3
 80078b6:	461a      	mov	r2, r3
 80078b8:	d30b      	bcc.n	80078d2 <quorem+0x100>
 80078ba:	613c      	str	r4, [r7, #16]
 80078bc:	3601      	adds	r6, #1
 80078be:	4630      	mov	r0, r6
 80078c0:	b003      	add	sp, #12
 80078c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078c6:	6812      	ldr	r2, [r2, #0]
 80078c8:	3b04      	subs	r3, #4
 80078ca:	2a00      	cmp	r2, #0
 80078cc:	d1cb      	bne.n	8007866 <quorem+0x94>
 80078ce:	3c01      	subs	r4, #1
 80078d0:	e7c6      	b.n	8007860 <quorem+0x8e>
 80078d2:	6812      	ldr	r2, [r2, #0]
 80078d4:	3b04      	subs	r3, #4
 80078d6:	2a00      	cmp	r2, #0
 80078d8:	d1ef      	bne.n	80078ba <quorem+0xe8>
 80078da:	3c01      	subs	r4, #1
 80078dc:	e7ea      	b.n	80078b4 <quorem+0xe2>
 80078de:	2000      	movs	r0, #0
 80078e0:	e7ee      	b.n	80078c0 <quorem+0xee>
 80078e2:	0000      	movs	r0, r0
 80078e4:	0000      	movs	r0, r0
	...

080078e8 <_dtoa_r>:
 80078e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ec:	4614      	mov	r4, r2
 80078ee:	461d      	mov	r5, r3
 80078f0:	69c7      	ldr	r7, [r0, #28]
 80078f2:	b097      	sub	sp, #92	@ 0x5c
 80078f4:	4681      	mov	r9, r0
 80078f6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80078fa:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80078fc:	b97f      	cbnz	r7, 800791e <_dtoa_r+0x36>
 80078fe:	2010      	movs	r0, #16
 8007900:	f000 fe0e 	bl	8008520 <malloc>
 8007904:	4602      	mov	r2, r0
 8007906:	f8c9 001c 	str.w	r0, [r9, #28]
 800790a:	b920      	cbnz	r0, 8007916 <_dtoa_r+0x2e>
 800790c:	21ef      	movs	r1, #239	@ 0xef
 800790e:	4bac      	ldr	r3, [pc, #688]	@ (8007bc0 <_dtoa_r+0x2d8>)
 8007910:	48ac      	ldr	r0, [pc, #688]	@ (8007bc4 <_dtoa_r+0x2dc>)
 8007912:	f001 fe31 	bl	8009578 <__assert_func>
 8007916:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800791a:	6007      	str	r7, [r0, #0]
 800791c:	60c7      	str	r7, [r0, #12]
 800791e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007922:	6819      	ldr	r1, [r3, #0]
 8007924:	b159      	cbz	r1, 800793e <_dtoa_r+0x56>
 8007926:	685a      	ldr	r2, [r3, #4]
 8007928:	2301      	movs	r3, #1
 800792a:	4093      	lsls	r3, r2
 800792c:	604a      	str	r2, [r1, #4]
 800792e:	608b      	str	r3, [r1, #8]
 8007930:	4648      	mov	r0, r9
 8007932:	f000 feeb 	bl	800870c <_Bfree>
 8007936:	2200      	movs	r2, #0
 8007938:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800793c:	601a      	str	r2, [r3, #0]
 800793e:	1e2b      	subs	r3, r5, #0
 8007940:	bfaf      	iteee	ge
 8007942:	2300      	movge	r3, #0
 8007944:	2201      	movlt	r2, #1
 8007946:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800794a:	9307      	strlt	r3, [sp, #28]
 800794c:	bfa8      	it	ge
 800794e:	6033      	strge	r3, [r6, #0]
 8007950:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8007954:	4b9c      	ldr	r3, [pc, #624]	@ (8007bc8 <_dtoa_r+0x2e0>)
 8007956:	bfb8      	it	lt
 8007958:	6032      	strlt	r2, [r6, #0]
 800795a:	ea33 0308 	bics.w	r3, r3, r8
 800795e:	d112      	bne.n	8007986 <_dtoa_r+0x9e>
 8007960:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007964:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007966:	6013      	str	r3, [r2, #0]
 8007968:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800796c:	4323      	orrs	r3, r4
 800796e:	f000 855e 	beq.w	800842e <_dtoa_r+0xb46>
 8007972:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007974:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007bcc <_dtoa_r+0x2e4>
 8007978:	2b00      	cmp	r3, #0
 800797a:	f000 8560 	beq.w	800843e <_dtoa_r+0xb56>
 800797e:	f10a 0303 	add.w	r3, sl, #3
 8007982:	f000 bd5a 	b.w	800843a <_dtoa_r+0xb52>
 8007986:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800798a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800798e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007992:	2200      	movs	r2, #0
 8007994:	2300      	movs	r3, #0
 8007996:	f7f9 f807 	bl	80009a8 <__aeabi_dcmpeq>
 800799a:	4607      	mov	r7, r0
 800799c:	b158      	cbz	r0, 80079b6 <_dtoa_r+0xce>
 800799e:	2301      	movs	r3, #1
 80079a0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80079a2:	6013      	str	r3, [r2, #0]
 80079a4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80079a6:	b113      	cbz	r3, 80079ae <_dtoa_r+0xc6>
 80079a8:	4b89      	ldr	r3, [pc, #548]	@ (8007bd0 <_dtoa_r+0x2e8>)
 80079aa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80079ac:	6013      	str	r3, [r2, #0]
 80079ae:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8007bd4 <_dtoa_r+0x2ec>
 80079b2:	f000 bd44 	b.w	800843e <_dtoa_r+0xb56>
 80079b6:	ab14      	add	r3, sp, #80	@ 0x50
 80079b8:	9301      	str	r3, [sp, #4]
 80079ba:	ab15      	add	r3, sp, #84	@ 0x54
 80079bc:	9300      	str	r3, [sp, #0]
 80079be:	4648      	mov	r0, r9
 80079c0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80079c4:	f001 f984 	bl	8008cd0 <__d2b>
 80079c8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80079cc:	9003      	str	r0, [sp, #12]
 80079ce:	2e00      	cmp	r6, #0
 80079d0:	d078      	beq.n	8007ac4 <_dtoa_r+0x1dc>
 80079d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80079d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80079d8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80079dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079e0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80079e4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80079e8:	9712      	str	r7, [sp, #72]	@ 0x48
 80079ea:	4619      	mov	r1, r3
 80079ec:	2200      	movs	r2, #0
 80079ee:	4b7a      	ldr	r3, [pc, #488]	@ (8007bd8 <_dtoa_r+0x2f0>)
 80079f0:	f7f8 fbba 	bl	8000168 <__aeabi_dsub>
 80079f4:	a36c      	add	r3, pc, #432	@ (adr r3, 8007ba8 <_dtoa_r+0x2c0>)
 80079f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079fa:	f7f8 fd6d 	bl	80004d8 <__aeabi_dmul>
 80079fe:	a36c      	add	r3, pc, #432	@ (adr r3, 8007bb0 <_dtoa_r+0x2c8>)
 8007a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a04:	f7f8 fbb2 	bl	800016c <__adddf3>
 8007a08:	4604      	mov	r4, r0
 8007a0a:	4630      	mov	r0, r6
 8007a0c:	460d      	mov	r5, r1
 8007a0e:	f7f8 fcf9 	bl	8000404 <__aeabi_i2d>
 8007a12:	a369      	add	r3, pc, #420	@ (adr r3, 8007bb8 <_dtoa_r+0x2d0>)
 8007a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a18:	f7f8 fd5e 	bl	80004d8 <__aeabi_dmul>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	460b      	mov	r3, r1
 8007a20:	4620      	mov	r0, r4
 8007a22:	4629      	mov	r1, r5
 8007a24:	f7f8 fba2 	bl	800016c <__adddf3>
 8007a28:	4604      	mov	r4, r0
 8007a2a:	460d      	mov	r5, r1
 8007a2c:	f7f9 f804 	bl	8000a38 <__aeabi_d2iz>
 8007a30:	2200      	movs	r2, #0
 8007a32:	4607      	mov	r7, r0
 8007a34:	2300      	movs	r3, #0
 8007a36:	4620      	mov	r0, r4
 8007a38:	4629      	mov	r1, r5
 8007a3a:	f7f8 ffbf 	bl	80009bc <__aeabi_dcmplt>
 8007a3e:	b140      	cbz	r0, 8007a52 <_dtoa_r+0x16a>
 8007a40:	4638      	mov	r0, r7
 8007a42:	f7f8 fcdf 	bl	8000404 <__aeabi_i2d>
 8007a46:	4622      	mov	r2, r4
 8007a48:	462b      	mov	r3, r5
 8007a4a:	f7f8 ffad 	bl	80009a8 <__aeabi_dcmpeq>
 8007a4e:	b900      	cbnz	r0, 8007a52 <_dtoa_r+0x16a>
 8007a50:	3f01      	subs	r7, #1
 8007a52:	2f16      	cmp	r7, #22
 8007a54:	d854      	bhi.n	8007b00 <_dtoa_r+0x218>
 8007a56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a5a:	4b60      	ldr	r3, [pc, #384]	@ (8007bdc <_dtoa_r+0x2f4>)
 8007a5c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a64:	f7f8 ffaa 	bl	80009bc <__aeabi_dcmplt>
 8007a68:	2800      	cmp	r0, #0
 8007a6a:	d04b      	beq.n	8007b04 <_dtoa_r+0x21c>
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	3f01      	subs	r7, #1
 8007a70:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007a72:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007a74:	1b9b      	subs	r3, r3, r6
 8007a76:	1e5a      	subs	r2, r3, #1
 8007a78:	bf49      	itett	mi
 8007a7a:	f1c3 0301 	rsbmi	r3, r3, #1
 8007a7e:	2300      	movpl	r3, #0
 8007a80:	9304      	strmi	r3, [sp, #16]
 8007a82:	2300      	movmi	r3, #0
 8007a84:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a86:	bf54      	ite	pl
 8007a88:	9304      	strpl	r3, [sp, #16]
 8007a8a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8007a8c:	2f00      	cmp	r7, #0
 8007a8e:	db3b      	blt.n	8007b08 <_dtoa_r+0x220>
 8007a90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a92:	970e      	str	r7, [sp, #56]	@ 0x38
 8007a94:	443b      	add	r3, r7
 8007a96:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a98:	2300      	movs	r3, #0
 8007a9a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a9c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007a9e:	2b09      	cmp	r3, #9
 8007aa0:	d865      	bhi.n	8007b6e <_dtoa_r+0x286>
 8007aa2:	2b05      	cmp	r3, #5
 8007aa4:	bfc4      	itt	gt
 8007aa6:	3b04      	subgt	r3, #4
 8007aa8:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007aaa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007aac:	bfc8      	it	gt
 8007aae:	2400      	movgt	r4, #0
 8007ab0:	f1a3 0302 	sub.w	r3, r3, #2
 8007ab4:	bfd8      	it	le
 8007ab6:	2401      	movle	r4, #1
 8007ab8:	2b03      	cmp	r3, #3
 8007aba:	d864      	bhi.n	8007b86 <_dtoa_r+0x29e>
 8007abc:	e8df f003 	tbb	[pc, r3]
 8007ac0:	2c385553 	.word	0x2c385553
 8007ac4:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007ac8:	441e      	add	r6, r3
 8007aca:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007ace:	2b20      	cmp	r3, #32
 8007ad0:	bfc1      	itttt	gt
 8007ad2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007ad6:	fa08 f803 	lslgt.w	r8, r8, r3
 8007ada:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007ade:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007ae2:	bfd6      	itet	le
 8007ae4:	f1c3 0320 	rsble	r3, r3, #32
 8007ae8:	ea48 0003 	orrgt.w	r0, r8, r3
 8007aec:	fa04 f003 	lslle.w	r0, r4, r3
 8007af0:	f7f8 fc78 	bl	80003e4 <__aeabi_ui2d>
 8007af4:	2201      	movs	r2, #1
 8007af6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007afa:	3e01      	subs	r6, #1
 8007afc:	9212      	str	r2, [sp, #72]	@ 0x48
 8007afe:	e774      	b.n	80079ea <_dtoa_r+0x102>
 8007b00:	2301      	movs	r3, #1
 8007b02:	e7b5      	b.n	8007a70 <_dtoa_r+0x188>
 8007b04:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007b06:	e7b4      	b.n	8007a72 <_dtoa_r+0x18a>
 8007b08:	9b04      	ldr	r3, [sp, #16]
 8007b0a:	1bdb      	subs	r3, r3, r7
 8007b0c:	9304      	str	r3, [sp, #16]
 8007b0e:	427b      	negs	r3, r7
 8007b10:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b12:	2300      	movs	r3, #0
 8007b14:	930e      	str	r3, [sp, #56]	@ 0x38
 8007b16:	e7c1      	b.n	8007a9c <_dtoa_r+0x1b4>
 8007b18:	2301      	movs	r3, #1
 8007b1a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b1c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007b1e:	eb07 0b03 	add.w	fp, r7, r3
 8007b22:	f10b 0301 	add.w	r3, fp, #1
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	9308      	str	r3, [sp, #32]
 8007b2a:	bfb8      	it	lt
 8007b2c:	2301      	movlt	r3, #1
 8007b2e:	e006      	b.n	8007b3e <_dtoa_r+0x256>
 8007b30:	2301      	movs	r3, #1
 8007b32:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b34:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	dd28      	ble.n	8007b8c <_dtoa_r+0x2a4>
 8007b3a:	469b      	mov	fp, r3
 8007b3c:	9308      	str	r3, [sp, #32]
 8007b3e:	2100      	movs	r1, #0
 8007b40:	2204      	movs	r2, #4
 8007b42:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007b46:	f102 0514 	add.w	r5, r2, #20
 8007b4a:	429d      	cmp	r5, r3
 8007b4c:	d926      	bls.n	8007b9c <_dtoa_r+0x2b4>
 8007b4e:	6041      	str	r1, [r0, #4]
 8007b50:	4648      	mov	r0, r9
 8007b52:	f000 fd9b 	bl	800868c <_Balloc>
 8007b56:	4682      	mov	sl, r0
 8007b58:	2800      	cmp	r0, #0
 8007b5a:	d143      	bne.n	8007be4 <_dtoa_r+0x2fc>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007b62:	4b1f      	ldr	r3, [pc, #124]	@ (8007be0 <_dtoa_r+0x2f8>)
 8007b64:	e6d4      	b.n	8007910 <_dtoa_r+0x28>
 8007b66:	2300      	movs	r3, #0
 8007b68:	e7e3      	b.n	8007b32 <_dtoa_r+0x24a>
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	e7d5      	b.n	8007b1a <_dtoa_r+0x232>
 8007b6e:	2401      	movs	r4, #1
 8007b70:	2300      	movs	r3, #0
 8007b72:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007b74:	9320      	str	r3, [sp, #128]	@ 0x80
 8007b76:	f04f 3bff 	mov.w	fp, #4294967295
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	2312      	movs	r3, #18
 8007b7e:	f8cd b020 	str.w	fp, [sp, #32]
 8007b82:	9221      	str	r2, [sp, #132]	@ 0x84
 8007b84:	e7db      	b.n	8007b3e <_dtoa_r+0x256>
 8007b86:	2301      	movs	r3, #1
 8007b88:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b8a:	e7f4      	b.n	8007b76 <_dtoa_r+0x28e>
 8007b8c:	f04f 0b01 	mov.w	fp, #1
 8007b90:	465b      	mov	r3, fp
 8007b92:	f8cd b020 	str.w	fp, [sp, #32]
 8007b96:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8007b9a:	e7d0      	b.n	8007b3e <_dtoa_r+0x256>
 8007b9c:	3101      	adds	r1, #1
 8007b9e:	0052      	lsls	r2, r2, #1
 8007ba0:	e7d1      	b.n	8007b46 <_dtoa_r+0x25e>
 8007ba2:	bf00      	nop
 8007ba4:	f3af 8000 	nop.w
 8007ba8:	636f4361 	.word	0x636f4361
 8007bac:	3fd287a7 	.word	0x3fd287a7
 8007bb0:	8b60c8b3 	.word	0x8b60c8b3
 8007bb4:	3fc68a28 	.word	0x3fc68a28
 8007bb8:	509f79fb 	.word	0x509f79fb
 8007bbc:	3fd34413 	.word	0x3fd34413
 8007bc0:	0800984f 	.word	0x0800984f
 8007bc4:	08009866 	.word	0x08009866
 8007bc8:	7ff00000 	.word	0x7ff00000
 8007bcc:	0800984b 	.word	0x0800984b
 8007bd0:	0800981f 	.word	0x0800981f
 8007bd4:	0800981e 	.word	0x0800981e
 8007bd8:	3ff80000 	.word	0x3ff80000
 8007bdc:	080099b8 	.word	0x080099b8
 8007be0:	080098be 	.word	0x080098be
 8007be4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007be8:	6018      	str	r0, [r3, #0]
 8007bea:	9b08      	ldr	r3, [sp, #32]
 8007bec:	2b0e      	cmp	r3, #14
 8007bee:	f200 80a1 	bhi.w	8007d34 <_dtoa_r+0x44c>
 8007bf2:	2c00      	cmp	r4, #0
 8007bf4:	f000 809e 	beq.w	8007d34 <_dtoa_r+0x44c>
 8007bf8:	2f00      	cmp	r7, #0
 8007bfa:	dd33      	ble.n	8007c64 <_dtoa_r+0x37c>
 8007bfc:	4b9c      	ldr	r3, [pc, #624]	@ (8007e70 <_dtoa_r+0x588>)
 8007bfe:	f007 020f 	and.w	r2, r7, #15
 8007c02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c06:	05f8      	lsls	r0, r7, #23
 8007c08:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007c0c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8007c10:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007c14:	d516      	bpl.n	8007c44 <_dtoa_r+0x35c>
 8007c16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c1a:	4b96      	ldr	r3, [pc, #600]	@ (8007e74 <_dtoa_r+0x58c>)
 8007c1c:	2603      	movs	r6, #3
 8007c1e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007c22:	f7f8 fd83 	bl	800072c <__aeabi_ddiv>
 8007c26:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007c2a:	f004 040f 	and.w	r4, r4, #15
 8007c2e:	4d91      	ldr	r5, [pc, #580]	@ (8007e74 <_dtoa_r+0x58c>)
 8007c30:	b954      	cbnz	r4, 8007c48 <_dtoa_r+0x360>
 8007c32:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007c36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c3a:	f7f8 fd77 	bl	800072c <__aeabi_ddiv>
 8007c3e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007c42:	e028      	b.n	8007c96 <_dtoa_r+0x3ae>
 8007c44:	2602      	movs	r6, #2
 8007c46:	e7f2      	b.n	8007c2e <_dtoa_r+0x346>
 8007c48:	07e1      	lsls	r1, r4, #31
 8007c4a:	d508      	bpl.n	8007c5e <_dtoa_r+0x376>
 8007c4c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007c50:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007c54:	f7f8 fc40 	bl	80004d8 <__aeabi_dmul>
 8007c58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007c5c:	3601      	adds	r6, #1
 8007c5e:	1064      	asrs	r4, r4, #1
 8007c60:	3508      	adds	r5, #8
 8007c62:	e7e5      	b.n	8007c30 <_dtoa_r+0x348>
 8007c64:	f000 80af 	beq.w	8007dc6 <_dtoa_r+0x4de>
 8007c68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c6c:	427c      	negs	r4, r7
 8007c6e:	4b80      	ldr	r3, [pc, #512]	@ (8007e70 <_dtoa_r+0x588>)
 8007c70:	f004 020f 	and.w	r2, r4, #15
 8007c74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7c:	f7f8 fc2c 	bl	80004d8 <__aeabi_dmul>
 8007c80:	2602      	movs	r6, #2
 8007c82:	2300      	movs	r3, #0
 8007c84:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007c88:	4d7a      	ldr	r5, [pc, #488]	@ (8007e74 <_dtoa_r+0x58c>)
 8007c8a:	1124      	asrs	r4, r4, #4
 8007c8c:	2c00      	cmp	r4, #0
 8007c8e:	f040 808f 	bne.w	8007db0 <_dtoa_r+0x4c8>
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d1d3      	bne.n	8007c3e <_dtoa_r+0x356>
 8007c96:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8007c9a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	f000 8094 	beq.w	8007dca <_dtoa_r+0x4e2>
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	4620      	mov	r0, r4
 8007ca6:	4629      	mov	r1, r5
 8007ca8:	4b73      	ldr	r3, [pc, #460]	@ (8007e78 <_dtoa_r+0x590>)
 8007caa:	f7f8 fe87 	bl	80009bc <__aeabi_dcmplt>
 8007cae:	2800      	cmp	r0, #0
 8007cb0:	f000 808b 	beq.w	8007dca <_dtoa_r+0x4e2>
 8007cb4:	9b08      	ldr	r3, [sp, #32]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	f000 8087 	beq.w	8007dca <_dtoa_r+0x4e2>
 8007cbc:	f1bb 0f00 	cmp.w	fp, #0
 8007cc0:	dd34      	ble.n	8007d2c <_dtoa_r+0x444>
 8007cc2:	4620      	mov	r0, r4
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	4629      	mov	r1, r5
 8007cc8:	4b6c      	ldr	r3, [pc, #432]	@ (8007e7c <_dtoa_r+0x594>)
 8007cca:	f7f8 fc05 	bl	80004d8 <__aeabi_dmul>
 8007cce:	465c      	mov	r4, fp
 8007cd0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007cd4:	f107 38ff 	add.w	r8, r7, #4294967295
 8007cd8:	3601      	adds	r6, #1
 8007cda:	4630      	mov	r0, r6
 8007cdc:	f7f8 fb92 	bl	8000404 <__aeabi_i2d>
 8007ce0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ce4:	f7f8 fbf8 	bl	80004d8 <__aeabi_dmul>
 8007ce8:	2200      	movs	r2, #0
 8007cea:	4b65      	ldr	r3, [pc, #404]	@ (8007e80 <_dtoa_r+0x598>)
 8007cec:	f7f8 fa3e 	bl	800016c <__adddf3>
 8007cf0:	4605      	mov	r5, r0
 8007cf2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007cf6:	2c00      	cmp	r4, #0
 8007cf8:	d16a      	bne.n	8007dd0 <_dtoa_r+0x4e8>
 8007cfa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	4b60      	ldr	r3, [pc, #384]	@ (8007e84 <_dtoa_r+0x59c>)
 8007d02:	f7f8 fa31 	bl	8000168 <__aeabi_dsub>
 8007d06:	4602      	mov	r2, r0
 8007d08:	460b      	mov	r3, r1
 8007d0a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007d0e:	462a      	mov	r2, r5
 8007d10:	4633      	mov	r3, r6
 8007d12:	f7f8 fe71 	bl	80009f8 <__aeabi_dcmpgt>
 8007d16:	2800      	cmp	r0, #0
 8007d18:	f040 8298 	bne.w	800824c <_dtoa_r+0x964>
 8007d1c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d20:	462a      	mov	r2, r5
 8007d22:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007d26:	f7f8 fe49 	bl	80009bc <__aeabi_dcmplt>
 8007d2a:	bb38      	cbnz	r0, 8007d7c <_dtoa_r+0x494>
 8007d2c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007d30:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007d34:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	f2c0 8157 	blt.w	8007fea <_dtoa_r+0x702>
 8007d3c:	2f0e      	cmp	r7, #14
 8007d3e:	f300 8154 	bgt.w	8007fea <_dtoa_r+0x702>
 8007d42:	4b4b      	ldr	r3, [pc, #300]	@ (8007e70 <_dtoa_r+0x588>)
 8007d44:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007d48:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007d4c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007d50:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	f280 80e5 	bge.w	8007f22 <_dtoa_r+0x63a>
 8007d58:	9b08      	ldr	r3, [sp, #32]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	f300 80e1 	bgt.w	8007f22 <_dtoa_r+0x63a>
 8007d60:	d10c      	bne.n	8007d7c <_dtoa_r+0x494>
 8007d62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d66:	2200      	movs	r2, #0
 8007d68:	4b46      	ldr	r3, [pc, #280]	@ (8007e84 <_dtoa_r+0x59c>)
 8007d6a:	f7f8 fbb5 	bl	80004d8 <__aeabi_dmul>
 8007d6e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d72:	f7f8 fe37 	bl	80009e4 <__aeabi_dcmpge>
 8007d76:	2800      	cmp	r0, #0
 8007d78:	f000 8266 	beq.w	8008248 <_dtoa_r+0x960>
 8007d7c:	2400      	movs	r4, #0
 8007d7e:	4625      	mov	r5, r4
 8007d80:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007d82:	4656      	mov	r6, sl
 8007d84:	ea6f 0803 	mvn.w	r8, r3
 8007d88:	2700      	movs	r7, #0
 8007d8a:	4621      	mov	r1, r4
 8007d8c:	4648      	mov	r0, r9
 8007d8e:	f000 fcbd 	bl	800870c <_Bfree>
 8007d92:	2d00      	cmp	r5, #0
 8007d94:	f000 80bd 	beq.w	8007f12 <_dtoa_r+0x62a>
 8007d98:	b12f      	cbz	r7, 8007da6 <_dtoa_r+0x4be>
 8007d9a:	42af      	cmp	r7, r5
 8007d9c:	d003      	beq.n	8007da6 <_dtoa_r+0x4be>
 8007d9e:	4639      	mov	r1, r7
 8007da0:	4648      	mov	r0, r9
 8007da2:	f000 fcb3 	bl	800870c <_Bfree>
 8007da6:	4629      	mov	r1, r5
 8007da8:	4648      	mov	r0, r9
 8007daa:	f000 fcaf 	bl	800870c <_Bfree>
 8007dae:	e0b0      	b.n	8007f12 <_dtoa_r+0x62a>
 8007db0:	07e2      	lsls	r2, r4, #31
 8007db2:	d505      	bpl.n	8007dc0 <_dtoa_r+0x4d8>
 8007db4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007db8:	f7f8 fb8e 	bl	80004d8 <__aeabi_dmul>
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	3601      	adds	r6, #1
 8007dc0:	1064      	asrs	r4, r4, #1
 8007dc2:	3508      	adds	r5, #8
 8007dc4:	e762      	b.n	8007c8c <_dtoa_r+0x3a4>
 8007dc6:	2602      	movs	r6, #2
 8007dc8:	e765      	b.n	8007c96 <_dtoa_r+0x3ae>
 8007dca:	46b8      	mov	r8, r7
 8007dcc:	9c08      	ldr	r4, [sp, #32]
 8007dce:	e784      	b.n	8007cda <_dtoa_r+0x3f2>
 8007dd0:	4b27      	ldr	r3, [pc, #156]	@ (8007e70 <_dtoa_r+0x588>)
 8007dd2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007dd4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007dd8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007ddc:	4454      	add	r4, sl
 8007dde:	2900      	cmp	r1, #0
 8007de0:	d054      	beq.n	8007e8c <_dtoa_r+0x5a4>
 8007de2:	2000      	movs	r0, #0
 8007de4:	4928      	ldr	r1, [pc, #160]	@ (8007e88 <_dtoa_r+0x5a0>)
 8007de6:	f7f8 fca1 	bl	800072c <__aeabi_ddiv>
 8007dea:	4633      	mov	r3, r6
 8007dec:	462a      	mov	r2, r5
 8007dee:	f7f8 f9bb 	bl	8000168 <__aeabi_dsub>
 8007df2:	4656      	mov	r6, sl
 8007df4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007df8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007dfc:	f7f8 fe1c 	bl	8000a38 <__aeabi_d2iz>
 8007e00:	4605      	mov	r5, r0
 8007e02:	f7f8 faff 	bl	8000404 <__aeabi_i2d>
 8007e06:	4602      	mov	r2, r0
 8007e08:	460b      	mov	r3, r1
 8007e0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e0e:	f7f8 f9ab 	bl	8000168 <__aeabi_dsub>
 8007e12:	4602      	mov	r2, r0
 8007e14:	460b      	mov	r3, r1
 8007e16:	3530      	adds	r5, #48	@ 0x30
 8007e18:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007e1c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007e20:	f806 5b01 	strb.w	r5, [r6], #1
 8007e24:	f7f8 fdca 	bl	80009bc <__aeabi_dcmplt>
 8007e28:	2800      	cmp	r0, #0
 8007e2a:	d172      	bne.n	8007f12 <_dtoa_r+0x62a>
 8007e2c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e30:	2000      	movs	r0, #0
 8007e32:	4911      	ldr	r1, [pc, #68]	@ (8007e78 <_dtoa_r+0x590>)
 8007e34:	f7f8 f998 	bl	8000168 <__aeabi_dsub>
 8007e38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007e3c:	f7f8 fdbe 	bl	80009bc <__aeabi_dcmplt>
 8007e40:	2800      	cmp	r0, #0
 8007e42:	f040 80b4 	bne.w	8007fae <_dtoa_r+0x6c6>
 8007e46:	42a6      	cmp	r6, r4
 8007e48:	f43f af70 	beq.w	8007d2c <_dtoa_r+0x444>
 8007e4c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007e50:	2200      	movs	r2, #0
 8007e52:	4b0a      	ldr	r3, [pc, #40]	@ (8007e7c <_dtoa_r+0x594>)
 8007e54:	f7f8 fb40 	bl	80004d8 <__aeabi_dmul>
 8007e58:	2200      	movs	r2, #0
 8007e5a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007e5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e62:	4b06      	ldr	r3, [pc, #24]	@ (8007e7c <_dtoa_r+0x594>)
 8007e64:	f7f8 fb38 	bl	80004d8 <__aeabi_dmul>
 8007e68:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007e6c:	e7c4      	b.n	8007df8 <_dtoa_r+0x510>
 8007e6e:	bf00      	nop
 8007e70:	080099b8 	.word	0x080099b8
 8007e74:	08009990 	.word	0x08009990
 8007e78:	3ff00000 	.word	0x3ff00000
 8007e7c:	40240000 	.word	0x40240000
 8007e80:	401c0000 	.word	0x401c0000
 8007e84:	40140000 	.word	0x40140000
 8007e88:	3fe00000 	.word	0x3fe00000
 8007e8c:	4631      	mov	r1, r6
 8007e8e:	4628      	mov	r0, r5
 8007e90:	f7f8 fb22 	bl	80004d8 <__aeabi_dmul>
 8007e94:	4656      	mov	r6, sl
 8007e96:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007e9a:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007e9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ea0:	f7f8 fdca 	bl	8000a38 <__aeabi_d2iz>
 8007ea4:	4605      	mov	r5, r0
 8007ea6:	f7f8 faad 	bl	8000404 <__aeabi_i2d>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	460b      	mov	r3, r1
 8007eae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007eb2:	f7f8 f959 	bl	8000168 <__aeabi_dsub>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	460b      	mov	r3, r1
 8007eba:	3530      	adds	r5, #48	@ 0x30
 8007ebc:	f806 5b01 	strb.w	r5, [r6], #1
 8007ec0:	42a6      	cmp	r6, r4
 8007ec2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007ec6:	f04f 0200 	mov.w	r2, #0
 8007eca:	d124      	bne.n	8007f16 <_dtoa_r+0x62e>
 8007ecc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007ed0:	4bae      	ldr	r3, [pc, #696]	@ (800818c <_dtoa_r+0x8a4>)
 8007ed2:	f7f8 f94b 	bl	800016c <__adddf3>
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	460b      	mov	r3, r1
 8007eda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ede:	f7f8 fd8b 	bl	80009f8 <__aeabi_dcmpgt>
 8007ee2:	2800      	cmp	r0, #0
 8007ee4:	d163      	bne.n	8007fae <_dtoa_r+0x6c6>
 8007ee6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007eea:	2000      	movs	r0, #0
 8007eec:	49a7      	ldr	r1, [pc, #668]	@ (800818c <_dtoa_r+0x8a4>)
 8007eee:	f7f8 f93b 	bl	8000168 <__aeabi_dsub>
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007efa:	f7f8 fd5f 	bl	80009bc <__aeabi_dcmplt>
 8007efe:	2800      	cmp	r0, #0
 8007f00:	f43f af14 	beq.w	8007d2c <_dtoa_r+0x444>
 8007f04:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007f06:	1e73      	subs	r3, r6, #1
 8007f08:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007f0a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007f0e:	2b30      	cmp	r3, #48	@ 0x30
 8007f10:	d0f8      	beq.n	8007f04 <_dtoa_r+0x61c>
 8007f12:	4647      	mov	r7, r8
 8007f14:	e03b      	b.n	8007f8e <_dtoa_r+0x6a6>
 8007f16:	4b9e      	ldr	r3, [pc, #632]	@ (8008190 <_dtoa_r+0x8a8>)
 8007f18:	f7f8 fade 	bl	80004d8 <__aeabi_dmul>
 8007f1c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007f20:	e7bc      	b.n	8007e9c <_dtoa_r+0x5b4>
 8007f22:	4656      	mov	r6, sl
 8007f24:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8007f28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f2c:	4620      	mov	r0, r4
 8007f2e:	4629      	mov	r1, r5
 8007f30:	f7f8 fbfc 	bl	800072c <__aeabi_ddiv>
 8007f34:	f7f8 fd80 	bl	8000a38 <__aeabi_d2iz>
 8007f38:	4680      	mov	r8, r0
 8007f3a:	f7f8 fa63 	bl	8000404 <__aeabi_i2d>
 8007f3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f42:	f7f8 fac9 	bl	80004d8 <__aeabi_dmul>
 8007f46:	4602      	mov	r2, r0
 8007f48:	460b      	mov	r3, r1
 8007f4a:	4620      	mov	r0, r4
 8007f4c:	4629      	mov	r1, r5
 8007f4e:	f7f8 f90b 	bl	8000168 <__aeabi_dsub>
 8007f52:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007f56:	9d08      	ldr	r5, [sp, #32]
 8007f58:	f806 4b01 	strb.w	r4, [r6], #1
 8007f5c:	eba6 040a 	sub.w	r4, r6, sl
 8007f60:	42a5      	cmp	r5, r4
 8007f62:	4602      	mov	r2, r0
 8007f64:	460b      	mov	r3, r1
 8007f66:	d133      	bne.n	8007fd0 <_dtoa_r+0x6e8>
 8007f68:	f7f8 f900 	bl	800016c <__adddf3>
 8007f6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f70:	4604      	mov	r4, r0
 8007f72:	460d      	mov	r5, r1
 8007f74:	f7f8 fd40 	bl	80009f8 <__aeabi_dcmpgt>
 8007f78:	b9c0      	cbnz	r0, 8007fac <_dtoa_r+0x6c4>
 8007f7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f7e:	4620      	mov	r0, r4
 8007f80:	4629      	mov	r1, r5
 8007f82:	f7f8 fd11 	bl	80009a8 <__aeabi_dcmpeq>
 8007f86:	b110      	cbz	r0, 8007f8e <_dtoa_r+0x6a6>
 8007f88:	f018 0f01 	tst.w	r8, #1
 8007f8c:	d10e      	bne.n	8007fac <_dtoa_r+0x6c4>
 8007f8e:	4648      	mov	r0, r9
 8007f90:	9903      	ldr	r1, [sp, #12]
 8007f92:	f000 fbbb 	bl	800870c <_Bfree>
 8007f96:	2300      	movs	r3, #0
 8007f98:	7033      	strb	r3, [r6, #0]
 8007f9a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007f9c:	3701      	adds	r7, #1
 8007f9e:	601f      	str	r7, [r3, #0]
 8007fa0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	f000 824b 	beq.w	800843e <_dtoa_r+0xb56>
 8007fa8:	601e      	str	r6, [r3, #0]
 8007faa:	e248      	b.n	800843e <_dtoa_r+0xb56>
 8007fac:	46b8      	mov	r8, r7
 8007fae:	4633      	mov	r3, r6
 8007fb0:	461e      	mov	r6, r3
 8007fb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007fb6:	2a39      	cmp	r2, #57	@ 0x39
 8007fb8:	d106      	bne.n	8007fc8 <_dtoa_r+0x6e0>
 8007fba:	459a      	cmp	sl, r3
 8007fbc:	d1f8      	bne.n	8007fb0 <_dtoa_r+0x6c8>
 8007fbe:	2230      	movs	r2, #48	@ 0x30
 8007fc0:	f108 0801 	add.w	r8, r8, #1
 8007fc4:	f88a 2000 	strb.w	r2, [sl]
 8007fc8:	781a      	ldrb	r2, [r3, #0]
 8007fca:	3201      	adds	r2, #1
 8007fcc:	701a      	strb	r2, [r3, #0]
 8007fce:	e7a0      	b.n	8007f12 <_dtoa_r+0x62a>
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	4b6f      	ldr	r3, [pc, #444]	@ (8008190 <_dtoa_r+0x8a8>)
 8007fd4:	f7f8 fa80 	bl	80004d8 <__aeabi_dmul>
 8007fd8:	2200      	movs	r2, #0
 8007fda:	2300      	movs	r3, #0
 8007fdc:	4604      	mov	r4, r0
 8007fde:	460d      	mov	r5, r1
 8007fe0:	f7f8 fce2 	bl	80009a8 <__aeabi_dcmpeq>
 8007fe4:	2800      	cmp	r0, #0
 8007fe6:	d09f      	beq.n	8007f28 <_dtoa_r+0x640>
 8007fe8:	e7d1      	b.n	8007f8e <_dtoa_r+0x6a6>
 8007fea:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007fec:	2a00      	cmp	r2, #0
 8007fee:	f000 80ea 	beq.w	80081c6 <_dtoa_r+0x8de>
 8007ff2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007ff4:	2a01      	cmp	r2, #1
 8007ff6:	f300 80cd 	bgt.w	8008194 <_dtoa_r+0x8ac>
 8007ffa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007ffc:	2a00      	cmp	r2, #0
 8007ffe:	f000 80c1 	beq.w	8008184 <_dtoa_r+0x89c>
 8008002:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008006:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008008:	9e04      	ldr	r6, [sp, #16]
 800800a:	9a04      	ldr	r2, [sp, #16]
 800800c:	2101      	movs	r1, #1
 800800e:	441a      	add	r2, r3
 8008010:	9204      	str	r2, [sp, #16]
 8008012:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008014:	4648      	mov	r0, r9
 8008016:	441a      	add	r2, r3
 8008018:	9209      	str	r2, [sp, #36]	@ 0x24
 800801a:	f000 fc2b 	bl	8008874 <__i2b>
 800801e:	4605      	mov	r5, r0
 8008020:	b166      	cbz	r6, 800803c <_dtoa_r+0x754>
 8008022:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008024:	2b00      	cmp	r3, #0
 8008026:	dd09      	ble.n	800803c <_dtoa_r+0x754>
 8008028:	42b3      	cmp	r3, r6
 800802a:	bfa8      	it	ge
 800802c:	4633      	movge	r3, r6
 800802e:	9a04      	ldr	r2, [sp, #16]
 8008030:	1af6      	subs	r6, r6, r3
 8008032:	1ad2      	subs	r2, r2, r3
 8008034:	9204      	str	r2, [sp, #16]
 8008036:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008038:	1ad3      	subs	r3, r2, r3
 800803a:	9309      	str	r3, [sp, #36]	@ 0x24
 800803c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800803e:	b30b      	cbz	r3, 8008084 <_dtoa_r+0x79c>
 8008040:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008042:	2b00      	cmp	r3, #0
 8008044:	f000 80c6 	beq.w	80081d4 <_dtoa_r+0x8ec>
 8008048:	2c00      	cmp	r4, #0
 800804a:	f000 80c0 	beq.w	80081ce <_dtoa_r+0x8e6>
 800804e:	4629      	mov	r1, r5
 8008050:	4622      	mov	r2, r4
 8008052:	4648      	mov	r0, r9
 8008054:	f000 fcc6 	bl	80089e4 <__pow5mult>
 8008058:	9a03      	ldr	r2, [sp, #12]
 800805a:	4601      	mov	r1, r0
 800805c:	4605      	mov	r5, r0
 800805e:	4648      	mov	r0, r9
 8008060:	f000 fc1e 	bl	80088a0 <__multiply>
 8008064:	9903      	ldr	r1, [sp, #12]
 8008066:	4680      	mov	r8, r0
 8008068:	4648      	mov	r0, r9
 800806a:	f000 fb4f 	bl	800870c <_Bfree>
 800806e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008070:	1b1b      	subs	r3, r3, r4
 8008072:	930a      	str	r3, [sp, #40]	@ 0x28
 8008074:	f000 80b1 	beq.w	80081da <_dtoa_r+0x8f2>
 8008078:	4641      	mov	r1, r8
 800807a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800807c:	4648      	mov	r0, r9
 800807e:	f000 fcb1 	bl	80089e4 <__pow5mult>
 8008082:	9003      	str	r0, [sp, #12]
 8008084:	2101      	movs	r1, #1
 8008086:	4648      	mov	r0, r9
 8008088:	f000 fbf4 	bl	8008874 <__i2b>
 800808c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800808e:	4604      	mov	r4, r0
 8008090:	2b00      	cmp	r3, #0
 8008092:	f000 81d8 	beq.w	8008446 <_dtoa_r+0xb5e>
 8008096:	461a      	mov	r2, r3
 8008098:	4601      	mov	r1, r0
 800809a:	4648      	mov	r0, r9
 800809c:	f000 fca2 	bl	80089e4 <__pow5mult>
 80080a0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80080a2:	4604      	mov	r4, r0
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	f300 809f 	bgt.w	80081e8 <_dtoa_r+0x900>
 80080aa:	9b06      	ldr	r3, [sp, #24]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	f040 8097 	bne.w	80081e0 <_dtoa_r+0x8f8>
 80080b2:	9b07      	ldr	r3, [sp, #28]
 80080b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	f040 8093 	bne.w	80081e4 <_dtoa_r+0x8fc>
 80080be:	9b07      	ldr	r3, [sp, #28]
 80080c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80080c4:	0d1b      	lsrs	r3, r3, #20
 80080c6:	051b      	lsls	r3, r3, #20
 80080c8:	b133      	cbz	r3, 80080d8 <_dtoa_r+0x7f0>
 80080ca:	9b04      	ldr	r3, [sp, #16]
 80080cc:	3301      	adds	r3, #1
 80080ce:	9304      	str	r3, [sp, #16]
 80080d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080d2:	3301      	adds	r3, #1
 80080d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80080d6:	2301      	movs	r3, #1
 80080d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80080da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80080dc:	2b00      	cmp	r3, #0
 80080de:	f000 81b8 	beq.w	8008452 <_dtoa_r+0xb6a>
 80080e2:	6923      	ldr	r3, [r4, #16]
 80080e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80080e8:	6918      	ldr	r0, [r3, #16]
 80080ea:	f000 fb77 	bl	80087dc <__hi0bits>
 80080ee:	f1c0 0020 	rsb	r0, r0, #32
 80080f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080f4:	4418      	add	r0, r3
 80080f6:	f010 001f 	ands.w	r0, r0, #31
 80080fa:	f000 8082 	beq.w	8008202 <_dtoa_r+0x91a>
 80080fe:	f1c0 0320 	rsb	r3, r0, #32
 8008102:	2b04      	cmp	r3, #4
 8008104:	dd73      	ble.n	80081ee <_dtoa_r+0x906>
 8008106:	9b04      	ldr	r3, [sp, #16]
 8008108:	f1c0 001c 	rsb	r0, r0, #28
 800810c:	4403      	add	r3, r0
 800810e:	9304      	str	r3, [sp, #16]
 8008110:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008112:	4406      	add	r6, r0
 8008114:	4403      	add	r3, r0
 8008116:	9309      	str	r3, [sp, #36]	@ 0x24
 8008118:	9b04      	ldr	r3, [sp, #16]
 800811a:	2b00      	cmp	r3, #0
 800811c:	dd05      	ble.n	800812a <_dtoa_r+0x842>
 800811e:	461a      	mov	r2, r3
 8008120:	4648      	mov	r0, r9
 8008122:	9903      	ldr	r1, [sp, #12]
 8008124:	f000 fcb8 	bl	8008a98 <__lshift>
 8008128:	9003      	str	r0, [sp, #12]
 800812a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800812c:	2b00      	cmp	r3, #0
 800812e:	dd05      	ble.n	800813c <_dtoa_r+0x854>
 8008130:	4621      	mov	r1, r4
 8008132:	461a      	mov	r2, r3
 8008134:	4648      	mov	r0, r9
 8008136:	f000 fcaf 	bl	8008a98 <__lshift>
 800813a:	4604      	mov	r4, r0
 800813c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800813e:	2b00      	cmp	r3, #0
 8008140:	d061      	beq.n	8008206 <_dtoa_r+0x91e>
 8008142:	4621      	mov	r1, r4
 8008144:	9803      	ldr	r0, [sp, #12]
 8008146:	f000 fd13 	bl	8008b70 <__mcmp>
 800814a:	2800      	cmp	r0, #0
 800814c:	da5b      	bge.n	8008206 <_dtoa_r+0x91e>
 800814e:	2300      	movs	r3, #0
 8008150:	220a      	movs	r2, #10
 8008152:	4648      	mov	r0, r9
 8008154:	9903      	ldr	r1, [sp, #12]
 8008156:	f000 fafb 	bl	8008750 <__multadd>
 800815a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800815c:	f107 38ff 	add.w	r8, r7, #4294967295
 8008160:	9003      	str	r0, [sp, #12]
 8008162:	2b00      	cmp	r3, #0
 8008164:	f000 8177 	beq.w	8008456 <_dtoa_r+0xb6e>
 8008168:	4629      	mov	r1, r5
 800816a:	2300      	movs	r3, #0
 800816c:	220a      	movs	r2, #10
 800816e:	4648      	mov	r0, r9
 8008170:	f000 faee 	bl	8008750 <__multadd>
 8008174:	f1bb 0f00 	cmp.w	fp, #0
 8008178:	4605      	mov	r5, r0
 800817a:	dc6f      	bgt.n	800825c <_dtoa_r+0x974>
 800817c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800817e:	2b02      	cmp	r3, #2
 8008180:	dc49      	bgt.n	8008216 <_dtoa_r+0x92e>
 8008182:	e06b      	b.n	800825c <_dtoa_r+0x974>
 8008184:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008186:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800818a:	e73c      	b.n	8008006 <_dtoa_r+0x71e>
 800818c:	3fe00000 	.word	0x3fe00000
 8008190:	40240000 	.word	0x40240000
 8008194:	9b08      	ldr	r3, [sp, #32]
 8008196:	1e5c      	subs	r4, r3, #1
 8008198:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800819a:	42a3      	cmp	r3, r4
 800819c:	db09      	blt.n	80081b2 <_dtoa_r+0x8ca>
 800819e:	1b1c      	subs	r4, r3, r4
 80081a0:	9b08      	ldr	r3, [sp, #32]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	f6bf af30 	bge.w	8008008 <_dtoa_r+0x720>
 80081a8:	9b04      	ldr	r3, [sp, #16]
 80081aa:	9a08      	ldr	r2, [sp, #32]
 80081ac:	1a9e      	subs	r6, r3, r2
 80081ae:	2300      	movs	r3, #0
 80081b0:	e72b      	b.n	800800a <_dtoa_r+0x722>
 80081b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80081b6:	1ae3      	subs	r3, r4, r3
 80081b8:	441a      	add	r2, r3
 80081ba:	940a      	str	r4, [sp, #40]	@ 0x28
 80081bc:	9e04      	ldr	r6, [sp, #16]
 80081be:	2400      	movs	r4, #0
 80081c0:	9b08      	ldr	r3, [sp, #32]
 80081c2:	920e      	str	r2, [sp, #56]	@ 0x38
 80081c4:	e721      	b.n	800800a <_dtoa_r+0x722>
 80081c6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80081c8:	9e04      	ldr	r6, [sp, #16]
 80081ca:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80081cc:	e728      	b.n	8008020 <_dtoa_r+0x738>
 80081ce:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80081d2:	e751      	b.n	8008078 <_dtoa_r+0x790>
 80081d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80081d6:	9903      	ldr	r1, [sp, #12]
 80081d8:	e750      	b.n	800807c <_dtoa_r+0x794>
 80081da:	f8cd 800c 	str.w	r8, [sp, #12]
 80081de:	e751      	b.n	8008084 <_dtoa_r+0x79c>
 80081e0:	2300      	movs	r3, #0
 80081e2:	e779      	b.n	80080d8 <_dtoa_r+0x7f0>
 80081e4:	9b06      	ldr	r3, [sp, #24]
 80081e6:	e777      	b.n	80080d8 <_dtoa_r+0x7f0>
 80081e8:	2300      	movs	r3, #0
 80081ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80081ec:	e779      	b.n	80080e2 <_dtoa_r+0x7fa>
 80081ee:	d093      	beq.n	8008118 <_dtoa_r+0x830>
 80081f0:	9a04      	ldr	r2, [sp, #16]
 80081f2:	331c      	adds	r3, #28
 80081f4:	441a      	add	r2, r3
 80081f6:	9204      	str	r2, [sp, #16]
 80081f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081fa:	441e      	add	r6, r3
 80081fc:	441a      	add	r2, r3
 80081fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8008200:	e78a      	b.n	8008118 <_dtoa_r+0x830>
 8008202:	4603      	mov	r3, r0
 8008204:	e7f4      	b.n	80081f0 <_dtoa_r+0x908>
 8008206:	9b08      	ldr	r3, [sp, #32]
 8008208:	46b8      	mov	r8, r7
 800820a:	2b00      	cmp	r3, #0
 800820c:	dc20      	bgt.n	8008250 <_dtoa_r+0x968>
 800820e:	469b      	mov	fp, r3
 8008210:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008212:	2b02      	cmp	r3, #2
 8008214:	dd1e      	ble.n	8008254 <_dtoa_r+0x96c>
 8008216:	f1bb 0f00 	cmp.w	fp, #0
 800821a:	f47f adb1 	bne.w	8007d80 <_dtoa_r+0x498>
 800821e:	4621      	mov	r1, r4
 8008220:	465b      	mov	r3, fp
 8008222:	2205      	movs	r2, #5
 8008224:	4648      	mov	r0, r9
 8008226:	f000 fa93 	bl	8008750 <__multadd>
 800822a:	4601      	mov	r1, r0
 800822c:	4604      	mov	r4, r0
 800822e:	9803      	ldr	r0, [sp, #12]
 8008230:	f000 fc9e 	bl	8008b70 <__mcmp>
 8008234:	2800      	cmp	r0, #0
 8008236:	f77f ada3 	ble.w	8007d80 <_dtoa_r+0x498>
 800823a:	4656      	mov	r6, sl
 800823c:	2331      	movs	r3, #49	@ 0x31
 800823e:	f108 0801 	add.w	r8, r8, #1
 8008242:	f806 3b01 	strb.w	r3, [r6], #1
 8008246:	e59f      	b.n	8007d88 <_dtoa_r+0x4a0>
 8008248:	46b8      	mov	r8, r7
 800824a:	9c08      	ldr	r4, [sp, #32]
 800824c:	4625      	mov	r5, r4
 800824e:	e7f4      	b.n	800823a <_dtoa_r+0x952>
 8008250:	f8dd b020 	ldr.w	fp, [sp, #32]
 8008254:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008256:	2b00      	cmp	r3, #0
 8008258:	f000 8101 	beq.w	800845e <_dtoa_r+0xb76>
 800825c:	2e00      	cmp	r6, #0
 800825e:	dd05      	ble.n	800826c <_dtoa_r+0x984>
 8008260:	4629      	mov	r1, r5
 8008262:	4632      	mov	r2, r6
 8008264:	4648      	mov	r0, r9
 8008266:	f000 fc17 	bl	8008a98 <__lshift>
 800826a:	4605      	mov	r5, r0
 800826c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800826e:	2b00      	cmp	r3, #0
 8008270:	d05c      	beq.n	800832c <_dtoa_r+0xa44>
 8008272:	4648      	mov	r0, r9
 8008274:	6869      	ldr	r1, [r5, #4]
 8008276:	f000 fa09 	bl	800868c <_Balloc>
 800827a:	4606      	mov	r6, r0
 800827c:	b928      	cbnz	r0, 800828a <_dtoa_r+0x9a2>
 800827e:	4602      	mov	r2, r0
 8008280:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008284:	4b80      	ldr	r3, [pc, #512]	@ (8008488 <_dtoa_r+0xba0>)
 8008286:	f7ff bb43 	b.w	8007910 <_dtoa_r+0x28>
 800828a:	692a      	ldr	r2, [r5, #16]
 800828c:	f105 010c 	add.w	r1, r5, #12
 8008290:	3202      	adds	r2, #2
 8008292:	0092      	lsls	r2, r2, #2
 8008294:	300c      	adds	r0, #12
 8008296:	f001 f961 	bl	800955c <memcpy>
 800829a:	2201      	movs	r2, #1
 800829c:	4631      	mov	r1, r6
 800829e:	4648      	mov	r0, r9
 80082a0:	f000 fbfa 	bl	8008a98 <__lshift>
 80082a4:	462f      	mov	r7, r5
 80082a6:	4605      	mov	r5, r0
 80082a8:	f10a 0301 	add.w	r3, sl, #1
 80082ac:	9304      	str	r3, [sp, #16]
 80082ae:	eb0a 030b 	add.w	r3, sl, fp
 80082b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80082b4:	9b06      	ldr	r3, [sp, #24]
 80082b6:	f003 0301 	and.w	r3, r3, #1
 80082ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80082bc:	9b04      	ldr	r3, [sp, #16]
 80082be:	4621      	mov	r1, r4
 80082c0:	9803      	ldr	r0, [sp, #12]
 80082c2:	f103 3bff 	add.w	fp, r3, #4294967295
 80082c6:	f7ff fa84 	bl	80077d2 <quorem>
 80082ca:	4603      	mov	r3, r0
 80082cc:	4639      	mov	r1, r7
 80082ce:	3330      	adds	r3, #48	@ 0x30
 80082d0:	9006      	str	r0, [sp, #24]
 80082d2:	9803      	ldr	r0, [sp, #12]
 80082d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80082d6:	f000 fc4b 	bl	8008b70 <__mcmp>
 80082da:	462a      	mov	r2, r5
 80082dc:	9008      	str	r0, [sp, #32]
 80082de:	4621      	mov	r1, r4
 80082e0:	4648      	mov	r0, r9
 80082e2:	f000 fc61 	bl	8008ba8 <__mdiff>
 80082e6:	68c2      	ldr	r2, [r0, #12]
 80082e8:	4606      	mov	r6, r0
 80082ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80082ec:	bb02      	cbnz	r2, 8008330 <_dtoa_r+0xa48>
 80082ee:	4601      	mov	r1, r0
 80082f0:	9803      	ldr	r0, [sp, #12]
 80082f2:	f000 fc3d 	bl	8008b70 <__mcmp>
 80082f6:	4602      	mov	r2, r0
 80082f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80082fa:	4631      	mov	r1, r6
 80082fc:	4648      	mov	r0, r9
 80082fe:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8008302:	f000 fa03 	bl	800870c <_Bfree>
 8008306:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008308:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800830a:	9e04      	ldr	r6, [sp, #16]
 800830c:	ea42 0103 	orr.w	r1, r2, r3
 8008310:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008312:	4319      	orrs	r1, r3
 8008314:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008316:	d10d      	bne.n	8008334 <_dtoa_r+0xa4c>
 8008318:	2b39      	cmp	r3, #57	@ 0x39
 800831a:	d027      	beq.n	800836c <_dtoa_r+0xa84>
 800831c:	9a08      	ldr	r2, [sp, #32]
 800831e:	2a00      	cmp	r2, #0
 8008320:	dd01      	ble.n	8008326 <_dtoa_r+0xa3e>
 8008322:	9b06      	ldr	r3, [sp, #24]
 8008324:	3331      	adds	r3, #49	@ 0x31
 8008326:	f88b 3000 	strb.w	r3, [fp]
 800832a:	e52e      	b.n	8007d8a <_dtoa_r+0x4a2>
 800832c:	4628      	mov	r0, r5
 800832e:	e7b9      	b.n	80082a4 <_dtoa_r+0x9bc>
 8008330:	2201      	movs	r2, #1
 8008332:	e7e2      	b.n	80082fa <_dtoa_r+0xa12>
 8008334:	9908      	ldr	r1, [sp, #32]
 8008336:	2900      	cmp	r1, #0
 8008338:	db04      	blt.n	8008344 <_dtoa_r+0xa5c>
 800833a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800833c:	4301      	orrs	r1, r0
 800833e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008340:	4301      	orrs	r1, r0
 8008342:	d120      	bne.n	8008386 <_dtoa_r+0xa9e>
 8008344:	2a00      	cmp	r2, #0
 8008346:	ddee      	ble.n	8008326 <_dtoa_r+0xa3e>
 8008348:	2201      	movs	r2, #1
 800834a:	9903      	ldr	r1, [sp, #12]
 800834c:	4648      	mov	r0, r9
 800834e:	9304      	str	r3, [sp, #16]
 8008350:	f000 fba2 	bl	8008a98 <__lshift>
 8008354:	4621      	mov	r1, r4
 8008356:	9003      	str	r0, [sp, #12]
 8008358:	f000 fc0a 	bl	8008b70 <__mcmp>
 800835c:	2800      	cmp	r0, #0
 800835e:	9b04      	ldr	r3, [sp, #16]
 8008360:	dc02      	bgt.n	8008368 <_dtoa_r+0xa80>
 8008362:	d1e0      	bne.n	8008326 <_dtoa_r+0xa3e>
 8008364:	07da      	lsls	r2, r3, #31
 8008366:	d5de      	bpl.n	8008326 <_dtoa_r+0xa3e>
 8008368:	2b39      	cmp	r3, #57	@ 0x39
 800836a:	d1da      	bne.n	8008322 <_dtoa_r+0xa3a>
 800836c:	2339      	movs	r3, #57	@ 0x39
 800836e:	f88b 3000 	strb.w	r3, [fp]
 8008372:	4633      	mov	r3, r6
 8008374:	461e      	mov	r6, r3
 8008376:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800837a:	3b01      	subs	r3, #1
 800837c:	2a39      	cmp	r2, #57	@ 0x39
 800837e:	d04e      	beq.n	800841e <_dtoa_r+0xb36>
 8008380:	3201      	adds	r2, #1
 8008382:	701a      	strb	r2, [r3, #0]
 8008384:	e501      	b.n	8007d8a <_dtoa_r+0x4a2>
 8008386:	2a00      	cmp	r2, #0
 8008388:	dd03      	ble.n	8008392 <_dtoa_r+0xaaa>
 800838a:	2b39      	cmp	r3, #57	@ 0x39
 800838c:	d0ee      	beq.n	800836c <_dtoa_r+0xa84>
 800838e:	3301      	adds	r3, #1
 8008390:	e7c9      	b.n	8008326 <_dtoa_r+0xa3e>
 8008392:	9a04      	ldr	r2, [sp, #16]
 8008394:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008396:	f802 3c01 	strb.w	r3, [r2, #-1]
 800839a:	428a      	cmp	r2, r1
 800839c:	d028      	beq.n	80083f0 <_dtoa_r+0xb08>
 800839e:	2300      	movs	r3, #0
 80083a0:	220a      	movs	r2, #10
 80083a2:	9903      	ldr	r1, [sp, #12]
 80083a4:	4648      	mov	r0, r9
 80083a6:	f000 f9d3 	bl	8008750 <__multadd>
 80083aa:	42af      	cmp	r7, r5
 80083ac:	9003      	str	r0, [sp, #12]
 80083ae:	f04f 0300 	mov.w	r3, #0
 80083b2:	f04f 020a 	mov.w	r2, #10
 80083b6:	4639      	mov	r1, r7
 80083b8:	4648      	mov	r0, r9
 80083ba:	d107      	bne.n	80083cc <_dtoa_r+0xae4>
 80083bc:	f000 f9c8 	bl	8008750 <__multadd>
 80083c0:	4607      	mov	r7, r0
 80083c2:	4605      	mov	r5, r0
 80083c4:	9b04      	ldr	r3, [sp, #16]
 80083c6:	3301      	adds	r3, #1
 80083c8:	9304      	str	r3, [sp, #16]
 80083ca:	e777      	b.n	80082bc <_dtoa_r+0x9d4>
 80083cc:	f000 f9c0 	bl	8008750 <__multadd>
 80083d0:	4629      	mov	r1, r5
 80083d2:	4607      	mov	r7, r0
 80083d4:	2300      	movs	r3, #0
 80083d6:	220a      	movs	r2, #10
 80083d8:	4648      	mov	r0, r9
 80083da:	f000 f9b9 	bl	8008750 <__multadd>
 80083de:	4605      	mov	r5, r0
 80083e0:	e7f0      	b.n	80083c4 <_dtoa_r+0xadc>
 80083e2:	f1bb 0f00 	cmp.w	fp, #0
 80083e6:	bfcc      	ite	gt
 80083e8:	465e      	movgt	r6, fp
 80083ea:	2601      	movle	r6, #1
 80083ec:	2700      	movs	r7, #0
 80083ee:	4456      	add	r6, sl
 80083f0:	2201      	movs	r2, #1
 80083f2:	9903      	ldr	r1, [sp, #12]
 80083f4:	4648      	mov	r0, r9
 80083f6:	9304      	str	r3, [sp, #16]
 80083f8:	f000 fb4e 	bl	8008a98 <__lshift>
 80083fc:	4621      	mov	r1, r4
 80083fe:	9003      	str	r0, [sp, #12]
 8008400:	f000 fbb6 	bl	8008b70 <__mcmp>
 8008404:	2800      	cmp	r0, #0
 8008406:	dcb4      	bgt.n	8008372 <_dtoa_r+0xa8a>
 8008408:	d102      	bne.n	8008410 <_dtoa_r+0xb28>
 800840a:	9b04      	ldr	r3, [sp, #16]
 800840c:	07db      	lsls	r3, r3, #31
 800840e:	d4b0      	bmi.n	8008372 <_dtoa_r+0xa8a>
 8008410:	4633      	mov	r3, r6
 8008412:	461e      	mov	r6, r3
 8008414:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008418:	2a30      	cmp	r2, #48	@ 0x30
 800841a:	d0fa      	beq.n	8008412 <_dtoa_r+0xb2a>
 800841c:	e4b5      	b.n	8007d8a <_dtoa_r+0x4a2>
 800841e:	459a      	cmp	sl, r3
 8008420:	d1a8      	bne.n	8008374 <_dtoa_r+0xa8c>
 8008422:	2331      	movs	r3, #49	@ 0x31
 8008424:	f108 0801 	add.w	r8, r8, #1
 8008428:	f88a 3000 	strb.w	r3, [sl]
 800842c:	e4ad      	b.n	8007d8a <_dtoa_r+0x4a2>
 800842e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008430:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800848c <_dtoa_r+0xba4>
 8008434:	b11b      	cbz	r3, 800843e <_dtoa_r+0xb56>
 8008436:	f10a 0308 	add.w	r3, sl, #8
 800843a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800843c:	6013      	str	r3, [r2, #0]
 800843e:	4650      	mov	r0, sl
 8008440:	b017      	add	sp, #92	@ 0x5c
 8008442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008446:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008448:	2b01      	cmp	r3, #1
 800844a:	f77f ae2e 	ble.w	80080aa <_dtoa_r+0x7c2>
 800844e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008450:	930a      	str	r3, [sp, #40]	@ 0x28
 8008452:	2001      	movs	r0, #1
 8008454:	e64d      	b.n	80080f2 <_dtoa_r+0x80a>
 8008456:	f1bb 0f00 	cmp.w	fp, #0
 800845a:	f77f aed9 	ble.w	8008210 <_dtoa_r+0x928>
 800845e:	4656      	mov	r6, sl
 8008460:	4621      	mov	r1, r4
 8008462:	9803      	ldr	r0, [sp, #12]
 8008464:	f7ff f9b5 	bl	80077d2 <quorem>
 8008468:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800846c:	f806 3b01 	strb.w	r3, [r6], #1
 8008470:	eba6 020a 	sub.w	r2, r6, sl
 8008474:	4593      	cmp	fp, r2
 8008476:	ddb4      	ble.n	80083e2 <_dtoa_r+0xafa>
 8008478:	2300      	movs	r3, #0
 800847a:	220a      	movs	r2, #10
 800847c:	4648      	mov	r0, r9
 800847e:	9903      	ldr	r1, [sp, #12]
 8008480:	f000 f966 	bl	8008750 <__multadd>
 8008484:	9003      	str	r0, [sp, #12]
 8008486:	e7eb      	b.n	8008460 <_dtoa_r+0xb78>
 8008488:	080098be 	.word	0x080098be
 800848c:	08009842 	.word	0x08009842

08008490 <_free_r>:
 8008490:	b538      	push	{r3, r4, r5, lr}
 8008492:	4605      	mov	r5, r0
 8008494:	2900      	cmp	r1, #0
 8008496:	d040      	beq.n	800851a <_free_r+0x8a>
 8008498:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800849c:	1f0c      	subs	r4, r1, #4
 800849e:	2b00      	cmp	r3, #0
 80084a0:	bfb8      	it	lt
 80084a2:	18e4      	addlt	r4, r4, r3
 80084a4:	f000 f8e6 	bl	8008674 <__malloc_lock>
 80084a8:	4a1c      	ldr	r2, [pc, #112]	@ (800851c <_free_r+0x8c>)
 80084aa:	6813      	ldr	r3, [r2, #0]
 80084ac:	b933      	cbnz	r3, 80084bc <_free_r+0x2c>
 80084ae:	6063      	str	r3, [r4, #4]
 80084b0:	6014      	str	r4, [r2, #0]
 80084b2:	4628      	mov	r0, r5
 80084b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084b8:	f000 b8e2 	b.w	8008680 <__malloc_unlock>
 80084bc:	42a3      	cmp	r3, r4
 80084be:	d908      	bls.n	80084d2 <_free_r+0x42>
 80084c0:	6820      	ldr	r0, [r4, #0]
 80084c2:	1821      	adds	r1, r4, r0
 80084c4:	428b      	cmp	r3, r1
 80084c6:	bf01      	itttt	eq
 80084c8:	6819      	ldreq	r1, [r3, #0]
 80084ca:	685b      	ldreq	r3, [r3, #4]
 80084cc:	1809      	addeq	r1, r1, r0
 80084ce:	6021      	streq	r1, [r4, #0]
 80084d0:	e7ed      	b.n	80084ae <_free_r+0x1e>
 80084d2:	461a      	mov	r2, r3
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	b10b      	cbz	r3, 80084dc <_free_r+0x4c>
 80084d8:	42a3      	cmp	r3, r4
 80084da:	d9fa      	bls.n	80084d2 <_free_r+0x42>
 80084dc:	6811      	ldr	r1, [r2, #0]
 80084de:	1850      	adds	r0, r2, r1
 80084e0:	42a0      	cmp	r0, r4
 80084e2:	d10b      	bne.n	80084fc <_free_r+0x6c>
 80084e4:	6820      	ldr	r0, [r4, #0]
 80084e6:	4401      	add	r1, r0
 80084e8:	1850      	adds	r0, r2, r1
 80084ea:	4283      	cmp	r3, r0
 80084ec:	6011      	str	r1, [r2, #0]
 80084ee:	d1e0      	bne.n	80084b2 <_free_r+0x22>
 80084f0:	6818      	ldr	r0, [r3, #0]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	4408      	add	r0, r1
 80084f6:	6010      	str	r0, [r2, #0]
 80084f8:	6053      	str	r3, [r2, #4]
 80084fa:	e7da      	b.n	80084b2 <_free_r+0x22>
 80084fc:	d902      	bls.n	8008504 <_free_r+0x74>
 80084fe:	230c      	movs	r3, #12
 8008500:	602b      	str	r3, [r5, #0]
 8008502:	e7d6      	b.n	80084b2 <_free_r+0x22>
 8008504:	6820      	ldr	r0, [r4, #0]
 8008506:	1821      	adds	r1, r4, r0
 8008508:	428b      	cmp	r3, r1
 800850a:	bf01      	itttt	eq
 800850c:	6819      	ldreq	r1, [r3, #0]
 800850e:	685b      	ldreq	r3, [r3, #4]
 8008510:	1809      	addeq	r1, r1, r0
 8008512:	6021      	streq	r1, [r4, #0]
 8008514:	6063      	str	r3, [r4, #4]
 8008516:	6054      	str	r4, [r2, #4]
 8008518:	e7cb      	b.n	80084b2 <_free_r+0x22>
 800851a:	bd38      	pop	{r3, r4, r5, pc}
 800851c:	200005e4 	.word	0x200005e4

08008520 <malloc>:
 8008520:	4b02      	ldr	r3, [pc, #8]	@ (800852c <malloc+0xc>)
 8008522:	4601      	mov	r1, r0
 8008524:	6818      	ldr	r0, [r3, #0]
 8008526:	f000 b825 	b.w	8008574 <_malloc_r>
 800852a:	bf00      	nop
 800852c:	2000004c 	.word	0x2000004c

08008530 <sbrk_aligned>:
 8008530:	b570      	push	{r4, r5, r6, lr}
 8008532:	4e0f      	ldr	r6, [pc, #60]	@ (8008570 <sbrk_aligned+0x40>)
 8008534:	460c      	mov	r4, r1
 8008536:	6831      	ldr	r1, [r6, #0]
 8008538:	4605      	mov	r5, r0
 800853a:	b911      	cbnz	r1, 8008542 <sbrk_aligned+0x12>
 800853c:	f000 fffe 	bl	800953c <_sbrk_r>
 8008540:	6030      	str	r0, [r6, #0]
 8008542:	4621      	mov	r1, r4
 8008544:	4628      	mov	r0, r5
 8008546:	f000 fff9 	bl	800953c <_sbrk_r>
 800854a:	1c43      	adds	r3, r0, #1
 800854c:	d103      	bne.n	8008556 <sbrk_aligned+0x26>
 800854e:	f04f 34ff 	mov.w	r4, #4294967295
 8008552:	4620      	mov	r0, r4
 8008554:	bd70      	pop	{r4, r5, r6, pc}
 8008556:	1cc4      	adds	r4, r0, #3
 8008558:	f024 0403 	bic.w	r4, r4, #3
 800855c:	42a0      	cmp	r0, r4
 800855e:	d0f8      	beq.n	8008552 <sbrk_aligned+0x22>
 8008560:	1a21      	subs	r1, r4, r0
 8008562:	4628      	mov	r0, r5
 8008564:	f000 ffea 	bl	800953c <_sbrk_r>
 8008568:	3001      	adds	r0, #1
 800856a:	d1f2      	bne.n	8008552 <sbrk_aligned+0x22>
 800856c:	e7ef      	b.n	800854e <sbrk_aligned+0x1e>
 800856e:	bf00      	nop
 8008570:	200005e0 	.word	0x200005e0

08008574 <_malloc_r>:
 8008574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008578:	1ccd      	adds	r5, r1, #3
 800857a:	f025 0503 	bic.w	r5, r5, #3
 800857e:	3508      	adds	r5, #8
 8008580:	2d0c      	cmp	r5, #12
 8008582:	bf38      	it	cc
 8008584:	250c      	movcc	r5, #12
 8008586:	2d00      	cmp	r5, #0
 8008588:	4606      	mov	r6, r0
 800858a:	db01      	blt.n	8008590 <_malloc_r+0x1c>
 800858c:	42a9      	cmp	r1, r5
 800858e:	d904      	bls.n	800859a <_malloc_r+0x26>
 8008590:	230c      	movs	r3, #12
 8008592:	6033      	str	r3, [r6, #0]
 8008594:	2000      	movs	r0, #0
 8008596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800859a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008670 <_malloc_r+0xfc>
 800859e:	f000 f869 	bl	8008674 <__malloc_lock>
 80085a2:	f8d8 3000 	ldr.w	r3, [r8]
 80085a6:	461c      	mov	r4, r3
 80085a8:	bb44      	cbnz	r4, 80085fc <_malloc_r+0x88>
 80085aa:	4629      	mov	r1, r5
 80085ac:	4630      	mov	r0, r6
 80085ae:	f7ff ffbf 	bl	8008530 <sbrk_aligned>
 80085b2:	1c43      	adds	r3, r0, #1
 80085b4:	4604      	mov	r4, r0
 80085b6:	d158      	bne.n	800866a <_malloc_r+0xf6>
 80085b8:	f8d8 4000 	ldr.w	r4, [r8]
 80085bc:	4627      	mov	r7, r4
 80085be:	2f00      	cmp	r7, #0
 80085c0:	d143      	bne.n	800864a <_malloc_r+0xd6>
 80085c2:	2c00      	cmp	r4, #0
 80085c4:	d04b      	beq.n	800865e <_malloc_r+0xea>
 80085c6:	6823      	ldr	r3, [r4, #0]
 80085c8:	4639      	mov	r1, r7
 80085ca:	4630      	mov	r0, r6
 80085cc:	eb04 0903 	add.w	r9, r4, r3
 80085d0:	f000 ffb4 	bl	800953c <_sbrk_r>
 80085d4:	4581      	cmp	r9, r0
 80085d6:	d142      	bne.n	800865e <_malloc_r+0xea>
 80085d8:	6821      	ldr	r1, [r4, #0]
 80085da:	4630      	mov	r0, r6
 80085dc:	1a6d      	subs	r5, r5, r1
 80085de:	4629      	mov	r1, r5
 80085e0:	f7ff ffa6 	bl	8008530 <sbrk_aligned>
 80085e4:	3001      	adds	r0, #1
 80085e6:	d03a      	beq.n	800865e <_malloc_r+0xea>
 80085e8:	6823      	ldr	r3, [r4, #0]
 80085ea:	442b      	add	r3, r5
 80085ec:	6023      	str	r3, [r4, #0]
 80085ee:	f8d8 3000 	ldr.w	r3, [r8]
 80085f2:	685a      	ldr	r2, [r3, #4]
 80085f4:	bb62      	cbnz	r2, 8008650 <_malloc_r+0xdc>
 80085f6:	f8c8 7000 	str.w	r7, [r8]
 80085fa:	e00f      	b.n	800861c <_malloc_r+0xa8>
 80085fc:	6822      	ldr	r2, [r4, #0]
 80085fe:	1b52      	subs	r2, r2, r5
 8008600:	d420      	bmi.n	8008644 <_malloc_r+0xd0>
 8008602:	2a0b      	cmp	r2, #11
 8008604:	d917      	bls.n	8008636 <_malloc_r+0xc2>
 8008606:	1961      	adds	r1, r4, r5
 8008608:	42a3      	cmp	r3, r4
 800860a:	6025      	str	r5, [r4, #0]
 800860c:	bf18      	it	ne
 800860e:	6059      	strne	r1, [r3, #4]
 8008610:	6863      	ldr	r3, [r4, #4]
 8008612:	bf08      	it	eq
 8008614:	f8c8 1000 	streq.w	r1, [r8]
 8008618:	5162      	str	r2, [r4, r5]
 800861a:	604b      	str	r3, [r1, #4]
 800861c:	4630      	mov	r0, r6
 800861e:	f000 f82f 	bl	8008680 <__malloc_unlock>
 8008622:	f104 000b 	add.w	r0, r4, #11
 8008626:	1d23      	adds	r3, r4, #4
 8008628:	f020 0007 	bic.w	r0, r0, #7
 800862c:	1ac2      	subs	r2, r0, r3
 800862e:	bf1c      	itt	ne
 8008630:	1a1b      	subne	r3, r3, r0
 8008632:	50a3      	strne	r3, [r4, r2]
 8008634:	e7af      	b.n	8008596 <_malloc_r+0x22>
 8008636:	6862      	ldr	r2, [r4, #4]
 8008638:	42a3      	cmp	r3, r4
 800863a:	bf0c      	ite	eq
 800863c:	f8c8 2000 	streq.w	r2, [r8]
 8008640:	605a      	strne	r2, [r3, #4]
 8008642:	e7eb      	b.n	800861c <_malloc_r+0xa8>
 8008644:	4623      	mov	r3, r4
 8008646:	6864      	ldr	r4, [r4, #4]
 8008648:	e7ae      	b.n	80085a8 <_malloc_r+0x34>
 800864a:	463c      	mov	r4, r7
 800864c:	687f      	ldr	r7, [r7, #4]
 800864e:	e7b6      	b.n	80085be <_malloc_r+0x4a>
 8008650:	461a      	mov	r2, r3
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	42a3      	cmp	r3, r4
 8008656:	d1fb      	bne.n	8008650 <_malloc_r+0xdc>
 8008658:	2300      	movs	r3, #0
 800865a:	6053      	str	r3, [r2, #4]
 800865c:	e7de      	b.n	800861c <_malloc_r+0xa8>
 800865e:	230c      	movs	r3, #12
 8008660:	4630      	mov	r0, r6
 8008662:	6033      	str	r3, [r6, #0]
 8008664:	f000 f80c 	bl	8008680 <__malloc_unlock>
 8008668:	e794      	b.n	8008594 <_malloc_r+0x20>
 800866a:	6005      	str	r5, [r0, #0]
 800866c:	e7d6      	b.n	800861c <_malloc_r+0xa8>
 800866e:	bf00      	nop
 8008670:	200005e4 	.word	0x200005e4

08008674 <__malloc_lock>:
 8008674:	4801      	ldr	r0, [pc, #4]	@ (800867c <__malloc_lock+0x8>)
 8008676:	f7ff b89c 	b.w	80077b2 <__retarget_lock_acquire_recursive>
 800867a:	bf00      	nop
 800867c:	200005dc 	.word	0x200005dc

08008680 <__malloc_unlock>:
 8008680:	4801      	ldr	r0, [pc, #4]	@ (8008688 <__malloc_unlock+0x8>)
 8008682:	f7ff b897 	b.w	80077b4 <__retarget_lock_release_recursive>
 8008686:	bf00      	nop
 8008688:	200005dc 	.word	0x200005dc

0800868c <_Balloc>:
 800868c:	b570      	push	{r4, r5, r6, lr}
 800868e:	69c6      	ldr	r6, [r0, #28]
 8008690:	4604      	mov	r4, r0
 8008692:	460d      	mov	r5, r1
 8008694:	b976      	cbnz	r6, 80086b4 <_Balloc+0x28>
 8008696:	2010      	movs	r0, #16
 8008698:	f7ff ff42 	bl	8008520 <malloc>
 800869c:	4602      	mov	r2, r0
 800869e:	61e0      	str	r0, [r4, #28]
 80086a0:	b920      	cbnz	r0, 80086ac <_Balloc+0x20>
 80086a2:	216b      	movs	r1, #107	@ 0x6b
 80086a4:	4b17      	ldr	r3, [pc, #92]	@ (8008704 <_Balloc+0x78>)
 80086a6:	4818      	ldr	r0, [pc, #96]	@ (8008708 <_Balloc+0x7c>)
 80086a8:	f000 ff66 	bl	8009578 <__assert_func>
 80086ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086b0:	6006      	str	r6, [r0, #0]
 80086b2:	60c6      	str	r6, [r0, #12]
 80086b4:	69e6      	ldr	r6, [r4, #28]
 80086b6:	68f3      	ldr	r3, [r6, #12]
 80086b8:	b183      	cbz	r3, 80086dc <_Balloc+0x50>
 80086ba:	69e3      	ldr	r3, [r4, #28]
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80086c2:	b9b8      	cbnz	r0, 80086f4 <_Balloc+0x68>
 80086c4:	2101      	movs	r1, #1
 80086c6:	fa01 f605 	lsl.w	r6, r1, r5
 80086ca:	1d72      	adds	r2, r6, #5
 80086cc:	4620      	mov	r0, r4
 80086ce:	0092      	lsls	r2, r2, #2
 80086d0:	f000 ff70 	bl	80095b4 <_calloc_r>
 80086d4:	b160      	cbz	r0, 80086f0 <_Balloc+0x64>
 80086d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80086da:	e00e      	b.n	80086fa <_Balloc+0x6e>
 80086dc:	2221      	movs	r2, #33	@ 0x21
 80086de:	2104      	movs	r1, #4
 80086e0:	4620      	mov	r0, r4
 80086e2:	f000 ff67 	bl	80095b4 <_calloc_r>
 80086e6:	69e3      	ldr	r3, [r4, #28]
 80086e8:	60f0      	str	r0, [r6, #12]
 80086ea:	68db      	ldr	r3, [r3, #12]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d1e4      	bne.n	80086ba <_Balloc+0x2e>
 80086f0:	2000      	movs	r0, #0
 80086f2:	bd70      	pop	{r4, r5, r6, pc}
 80086f4:	6802      	ldr	r2, [r0, #0]
 80086f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80086fa:	2300      	movs	r3, #0
 80086fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008700:	e7f7      	b.n	80086f2 <_Balloc+0x66>
 8008702:	bf00      	nop
 8008704:	0800984f 	.word	0x0800984f
 8008708:	080098cf 	.word	0x080098cf

0800870c <_Bfree>:
 800870c:	b570      	push	{r4, r5, r6, lr}
 800870e:	69c6      	ldr	r6, [r0, #28]
 8008710:	4605      	mov	r5, r0
 8008712:	460c      	mov	r4, r1
 8008714:	b976      	cbnz	r6, 8008734 <_Bfree+0x28>
 8008716:	2010      	movs	r0, #16
 8008718:	f7ff ff02 	bl	8008520 <malloc>
 800871c:	4602      	mov	r2, r0
 800871e:	61e8      	str	r0, [r5, #28]
 8008720:	b920      	cbnz	r0, 800872c <_Bfree+0x20>
 8008722:	218f      	movs	r1, #143	@ 0x8f
 8008724:	4b08      	ldr	r3, [pc, #32]	@ (8008748 <_Bfree+0x3c>)
 8008726:	4809      	ldr	r0, [pc, #36]	@ (800874c <_Bfree+0x40>)
 8008728:	f000 ff26 	bl	8009578 <__assert_func>
 800872c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008730:	6006      	str	r6, [r0, #0]
 8008732:	60c6      	str	r6, [r0, #12]
 8008734:	b13c      	cbz	r4, 8008746 <_Bfree+0x3a>
 8008736:	69eb      	ldr	r3, [r5, #28]
 8008738:	6862      	ldr	r2, [r4, #4]
 800873a:	68db      	ldr	r3, [r3, #12]
 800873c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008740:	6021      	str	r1, [r4, #0]
 8008742:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008746:	bd70      	pop	{r4, r5, r6, pc}
 8008748:	0800984f 	.word	0x0800984f
 800874c:	080098cf 	.word	0x080098cf

08008750 <__multadd>:
 8008750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008754:	4607      	mov	r7, r0
 8008756:	460c      	mov	r4, r1
 8008758:	461e      	mov	r6, r3
 800875a:	2000      	movs	r0, #0
 800875c:	690d      	ldr	r5, [r1, #16]
 800875e:	f101 0c14 	add.w	ip, r1, #20
 8008762:	f8dc 3000 	ldr.w	r3, [ip]
 8008766:	3001      	adds	r0, #1
 8008768:	b299      	uxth	r1, r3
 800876a:	fb02 6101 	mla	r1, r2, r1, r6
 800876e:	0c1e      	lsrs	r6, r3, #16
 8008770:	0c0b      	lsrs	r3, r1, #16
 8008772:	fb02 3306 	mla	r3, r2, r6, r3
 8008776:	b289      	uxth	r1, r1
 8008778:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800877c:	4285      	cmp	r5, r0
 800877e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008782:	f84c 1b04 	str.w	r1, [ip], #4
 8008786:	dcec      	bgt.n	8008762 <__multadd+0x12>
 8008788:	b30e      	cbz	r6, 80087ce <__multadd+0x7e>
 800878a:	68a3      	ldr	r3, [r4, #8]
 800878c:	42ab      	cmp	r3, r5
 800878e:	dc19      	bgt.n	80087c4 <__multadd+0x74>
 8008790:	6861      	ldr	r1, [r4, #4]
 8008792:	4638      	mov	r0, r7
 8008794:	3101      	adds	r1, #1
 8008796:	f7ff ff79 	bl	800868c <_Balloc>
 800879a:	4680      	mov	r8, r0
 800879c:	b928      	cbnz	r0, 80087aa <__multadd+0x5a>
 800879e:	4602      	mov	r2, r0
 80087a0:	21ba      	movs	r1, #186	@ 0xba
 80087a2:	4b0c      	ldr	r3, [pc, #48]	@ (80087d4 <__multadd+0x84>)
 80087a4:	480c      	ldr	r0, [pc, #48]	@ (80087d8 <__multadd+0x88>)
 80087a6:	f000 fee7 	bl	8009578 <__assert_func>
 80087aa:	6922      	ldr	r2, [r4, #16]
 80087ac:	f104 010c 	add.w	r1, r4, #12
 80087b0:	3202      	adds	r2, #2
 80087b2:	0092      	lsls	r2, r2, #2
 80087b4:	300c      	adds	r0, #12
 80087b6:	f000 fed1 	bl	800955c <memcpy>
 80087ba:	4621      	mov	r1, r4
 80087bc:	4638      	mov	r0, r7
 80087be:	f7ff ffa5 	bl	800870c <_Bfree>
 80087c2:	4644      	mov	r4, r8
 80087c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80087c8:	3501      	adds	r5, #1
 80087ca:	615e      	str	r6, [r3, #20]
 80087cc:	6125      	str	r5, [r4, #16]
 80087ce:	4620      	mov	r0, r4
 80087d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087d4:	080098be 	.word	0x080098be
 80087d8:	080098cf 	.word	0x080098cf

080087dc <__hi0bits>:
 80087dc:	4603      	mov	r3, r0
 80087de:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80087e2:	bf3a      	itte	cc
 80087e4:	0403      	lslcc	r3, r0, #16
 80087e6:	2010      	movcc	r0, #16
 80087e8:	2000      	movcs	r0, #0
 80087ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80087ee:	bf3c      	itt	cc
 80087f0:	021b      	lslcc	r3, r3, #8
 80087f2:	3008      	addcc	r0, #8
 80087f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80087f8:	bf3c      	itt	cc
 80087fa:	011b      	lslcc	r3, r3, #4
 80087fc:	3004      	addcc	r0, #4
 80087fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008802:	bf3c      	itt	cc
 8008804:	009b      	lslcc	r3, r3, #2
 8008806:	3002      	addcc	r0, #2
 8008808:	2b00      	cmp	r3, #0
 800880a:	db05      	blt.n	8008818 <__hi0bits+0x3c>
 800880c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008810:	f100 0001 	add.w	r0, r0, #1
 8008814:	bf08      	it	eq
 8008816:	2020      	moveq	r0, #32
 8008818:	4770      	bx	lr

0800881a <__lo0bits>:
 800881a:	6803      	ldr	r3, [r0, #0]
 800881c:	4602      	mov	r2, r0
 800881e:	f013 0007 	ands.w	r0, r3, #7
 8008822:	d00b      	beq.n	800883c <__lo0bits+0x22>
 8008824:	07d9      	lsls	r1, r3, #31
 8008826:	d421      	bmi.n	800886c <__lo0bits+0x52>
 8008828:	0798      	lsls	r0, r3, #30
 800882a:	bf49      	itett	mi
 800882c:	085b      	lsrmi	r3, r3, #1
 800882e:	089b      	lsrpl	r3, r3, #2
 8008830:	2001      	movmi	r0, #1
 8008832:	6013      	strmi	r3, [r2, #0]
 8008834:	bf5c      	itt	pl
 8008836:	2002      	movpl	r0, #2
 8008838:	6013      	strpl	r3, [r2, #0]
 800883a:	4770      	bx	lr
 800883c:	b299      	uxth	r1, r3
 800883e:	b909      	cbnz	r1, 8008844 <__lo0bits+0x2a>
 8008840:	2010      	movs	r0, #16
 8008842:	0c1b      	lsrs	r3, r3, #16
 8008844:	b2d9      	uxtb	r1, r3
 8008846:	b909      	cbnz	r1, 800884c <__lo0bits+0x32>
 8008848:	3008      	adds	r0, #8
 800884a:	0a1b      	lsrs	r3, r3, #8
 800884c:	0719      	lsls	r1, r3, #28
 800884e:	bf04      	itt	eq
 8008850:	091b      	lsreq	r3, r3, #4
 8008852:	3004      	addeq	r0, #4
 8008854:	0799      	lsls	r1, r3, #30
 8008856:	bf04      	itt	eq
 8008858:	089b      	lsreq	r3, r3, #2
 800885a:	3002      	addeq	r0, #2
 800885c:	07d9      	lsls	r1, r3, #31
 800885e:	d403      	bmi.n	8008868 <__lo0bits+0x4e>
 8008860:	085b      	lsrs	r3, r3, #1
 8008862:	f100 0001 	add.w	r0, r0, #1
 8008866:	d003      	beq.n	8008870 <__lo0bits+0x56>
 8008868:	6013      	str	r3, [r2, #0]
 800886a:	4770      	bx	lr
 800886c:	2000      	movs	r0, #0
 800886e:	4770      	bx	lr
 8008870:	2020      	movs	r0, #32
 8008872:	4770      	bx	lr

08008874 <__i2b>:
 8008874:	b510      	push	{r4, lr}
 8008876:	460c      	mov	r4, r1
 8008878:	2101      	movs	r1, #1
 800887a:	f7ff ff07 	bl	800868c <_Balloc>
 800887e:	4602      	mov	r2, r0
 8008880:	b928      	cbnz	r0, 800888e <__i2b+0x1a>
 8008882:	f240 1145 	movw	r1, #325	@ 0x145
 8008886:	4b04      	ldr	r3, [pc, #16]	@ (8008898 <__i2b+0x24>)
 8008888:	4804      	ldr	r0, [pc, #16]	@ (800889c <__i2b+0x28>)
 800888a:	f000 fe75 	bl	8009578 <__assert_func>
 800888e:	2301      	movs	r3, #1
 8008890:	6144      	str	r4, [r0, #20]
 8008892:	6103      	str	r3, [r0, #16]
 8008894:	bd10      	pop	{r4, pc}
 8008896:	bf00      	nop
 8008898:	080098be 	.word	0x080098be
 800889c:	080098cf 	.word	0x080098cf

080088a0 <__multiply>:
 80088a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088a4:	4617      	mov	r7, r2
 80088a6:	690a      	ldr	r2, [r1, #16]
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	4689      	mov	r9, r1
 80088ac:	429a      	cmp	r2, r3
 80088ae:	bfa2      	ittt	ge
 80088b0:	463b      	movge	r3, r7
 80088b2:	460f      	movge	r7, r1
 80088b4:	4699      	movge	r9, r3
 80088b6:	693d      	ldr	r5, [r7, #16]
 80088b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	6879      	ldr	r1, [r7, #4]
 80088c0:	eb05 060a 	add.w	r6, r5, sl
 80088c4:	42b3      	cmp	r3, r6
 80088c6:	b085      	sub	sp, #20
 80088c8:	bfb8      	it	lt
 80088ca:	3101      	addlt	r1, #1
 80088cc:	f7ff fede 	bl	800868c <_Balloc>
 80088d0:	b930      	cbnz	r0, 80088e0 <__multiply+0x40>
 80088d2:	4602      	mov	r2, r0
 80088d4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80088d8:	4b40      	ldr	r3, [pc, #256]	@ (80089dc <__multiply+0x13c>)
 80088da:	4841      	ldr	r0, [pc, #260]	@ (80089e0 <__multiply+0x140>)
 80088dc:	f000 fe4c 	bl	8009578 <__assert_func>
 80088e0:	f100 0414 	add.w	r4, r0, #20
 80088e4:	4623      	mov	r3, r4
 80088e6:	2200      	movs	r2, #0
 80088e8:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80088ec:	4573      	cmp	r3, lr
 80088ee:	d320      	bcc.n	8008932 <__multiply+0x92>
 80088f0:	f107 0814 	add.w	r8, r7, #20
 80088f4:	f109 0114 	add.w	r1, r9, #20
 80088f8:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80088fc:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008900:	9302      	str	r3, [sp, #8]
 8008902:	1beb      	subs	r3, r5, r7
 8008904:	3b15      	subs	r3, #21
 8008906:	f023 0303 	bic.w	r3, r3, #3
 800890a:	3304      	adds	r3, #4
 800890c:	3715      	adds	r7, #21
 800890e:	42bd      	cmp	r5, r7
 8008910:	bf38      	it	cc
 8008912:	2304      	movcc	r3, #4
 8008914:	9301      	str	r3, [sp, #4]
 8008916:	9b02      	ldr	r3, [sp, #8]
 8008918:	9103      	str	r1, [sp, #12]
 800891a:	428b      	cmp	r3, r1
 800891c:	d80c      	bhi.n	8008938 <__multiply+0x98>
 800891e:	2e00      	cmp	r6, #0
 8008920:	dd03      	ble.n	800892a <__multiply+0x8a>
 8008922:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008926:	2b00      	cmp	r3, #0
 8008928:	d055      	beq.n	80089d6 <__multiply+0x136>
 800892a:	6106      	str	r6, [r0, #16]
 800892c:	b005      	add	sp, #20
 800892e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008932:	f843 2b04 	str.w	r2, [r3], #4
 8008936:	e7d9      	b.n	80088ec <__multiply+0x4c>
 8008938:	f8b1 a000 	ldrh.w	sl, [r1]
 800893c:	f1ba 0f00 	cmp.w	sl, #0
 8008940:	d01f      	beq.n	8008982 <__multiply+0xe2>
 8008942:	46c4      	mov	ip, r8
 8008944:	46a1      	mov	r9, r4
 8008946:	2700      	movs	r7, #0
 8008948:	f85c 2b04 	ldr.w	r2, [ip], #4
 800894c:	f8d9 3000 	ldr.w	r3, [r9]
 8008950:	fa1f fb82 	uxth.w	fp, r2
 8008954:	b29b      	uxth	r3, r3
 8008956:	fb0a 330b 	mla	r3, sl, fp, r3
 800895a:	443b      	add	r3, r7
 800895c:	f8d9 7000 	ldr.w	r7, [r9]
 8008960:	0c12      	lsrs	r2, r2, #16
 8008962:	0c3f      	lsrs	r7, r7, #16
 8008964:	fb0a 7202 	mla	r2, sl, r2, r7
 8008968:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800896c:	b29b      	uxth	r3, r3
 800896e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008972:	4565      	cmp	r5, ip
 8008974:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008978:	f849 3b04 	str.w	r3, [r9], #4
 800897c:	d8e4      	bhi.n	8008948 <__multiply+0xa8>
 800897e:	9b01      	ldr	r3, [sp, #4]
 8008980:	50e7      	str	r7, [r4, r3]
 8008982:	9b03      	ldr	r3, [sp, #12]
 8008984:	3104      	adds	r1, #4
 8008986:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800898a:	f1b9 0f00 	cmp.w	r9, #0
 800898e:	d020      	beq.n	80089d2 <__multiply+0x132>
 8008990:	4647      	mov	r7, r8
 8008992:	46a4      	mov	ip, r4
 8008994:	f04f 0a00 	mov.w	sl, #0
 8008998:	6823      	ldr	r3, [r4, #0]
 800899a:	f8b7 b000 	ldrh.w	fp, [r7]
 800899e:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	fb09 220b 	mla	r2, r9, fp, r2
 80089a8:	4452      	add	r2, sl
 80089aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80089ae:	f84c 3b04 	str.w	r3, [ip], #4
 80089b2:	f857 3b04 	ldr.w	r3, [r7], #4
 80089b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80089ba:	f8bc 3000 	ldrh.w	r3, [ip]
 80089be:	42bd      	cmp	r5, r7
 80089c0:	fb09 330a 	mla	r3, r9, sl, r3
 80089c4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80089c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80089cc:	d8e5      	bhi.n	800899a <__multiply+0xfa>
 80089ce:	9a01      	ldr	r2, [sp, #4]
 80089d0:	50a3      	str	r3, [r4, r2]
 80089d2:	3404      	adds	r4, #4
 80089d4:	e79f      	b.n	8008916 <__multiply+0x76>
 80089d6:	3e01      	subs	r6, #1
 80089d8:	e7a1      	b.n	800891e <__multiply+0x7e>
 80089da:	bf00      	nop
 80089dc:	080098be 	.word	0x080098be
 80089e0:	080098cf 	.word	0x080098cf

080089e4 <__pow5mult>:
 80089e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089e8:	4615      	mov	r5, r2
 80089ea:	f012 0203 	ands.w	r2, r2, #3
 80089ee:	4607      	mov	r7, r0
 80089f0:	460e      	mov	r6, r1
 80089f2:	d007      	beq.n	8008a04 <__pow5mult+0x20>
 80089f4:	4c25      	ldr	r4, [pc, #148]	@ (8008a8c <__pow5mult+0xa8>)
 80089f6:	3a01      	subs	r2, #1
 80089f8:	2300      	movs	r3, #0
 80089fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80089fe:	f7ff fea7 	bl	8008750 <__multadd>
 8008a02:	4606      	mov	r6, r0
 8008a04:	10ad      	asrs	r5, r5, #2
 8008a06:	d03d      	beq.n	8008a84 <__pow5mult+0xa0>
 8008a08:	69fc      	ldr	r4, [r7, #28]
 8008a0a:	b97c      	cbnz	r4, 8008a2c <__pow5mult+0x48>
 8008a0c:	2010      	movs	r0, #16
 8008a0e:	f7ff fd87 	bl	8008520 <malloc>
 8008a12:	4602      	mov	r2, r0
 8008a14:	61f8      	str	r0, [r7, #28]
 8008a16:	b928      	cbnz	r0, 8008a24 <__pow5mult+0x40>
 8008a18:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008a1c:	4b1c      	ldr	r3, [pc, #112]	@ (8008a90 <__pow5mult+0xac>)
 8008a1e:	481d      	ldr	r0, [pc, #116]	@ (8008a94 <__pow5mult+0xb0>)
 8008a20:	f000 fdaa 	bl	8009578 <__assert_func>
 8008a24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008a28:	6004      	str	r4, [r0, #0]
 8008a2a:	60c4      	str	r4, [r0, #12]
 8008a2c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008a30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008a34:	b94c      	cbnz	r4, 8008a4a <__pow5mult+0x66>
 8008a36:	f240 2171 	movw	r1, #625	@ 0x271
 8008a3a:	4638      	mov	r0, r7
 8008a3c:	f7ff ff1a 	bl	8008874 <__i2b>
 8008a40:	2300      	movs	r3, #0
 8008a42:	4604      	mov	r4, r0
 8008a44:	f8c8 0008 	str.w	r0, [r8, #8]
 8008a48:	6003      	str	r3, [r0, #0]
 8008a4a:	f04f 0900 	mov.w	r9, #0
 8008a4e:	07eb      	lsls	r3, r5, #31
 8008a50:	d50a      	bpl.n	8008a68 <__pow5mult+0x84>
 8008a52:	4631      	mov	r1, r6
 8008a54:	4622      	mov	r2, r4
 8008a56:	4638      	mov	r0, r7
 8008a58:	f7ff ff22 	bl	80088a0 <__multiply>
 8008a5c:	4680      	mov	r8, r0
 8008a5e:	4631      	mov	r1, r6
 8008a60:	4638      	mov	r0, r7
 8008a62:	f7ff fe53 	bl	800870c <_Bfree>
 8008a66:	4646      	mov	r6, r8
 8008a68:	106d      	asrs	r5, r5, #1
 8008a6a:	d00b      	beq.n	8008a84 <__pow5mult+0xa0>
 8008a6c:	6820      	ldr	r0, [r4, #0]
 8008a6e:	b938      	cbnz	r0, 8008a80 <__pow5mult+0x9c>
 8008a70:	4622      	mov	r2, r4
 8008a72:	4621      	mov	r1, r4
 8008a74:	4638      	mov	r0, r7
 8008a76:	f7ff ff13 	bl	80088a0 <__multiply>
 8008a7a:	6020      	str	r0, [r4, #0]
 8008a7c:	f8c0 9000 	str.w	r9, [r0]
 8008a80:	4604      	mov	r4, r0
 8008a82:	e7e4      	b.n	8008a4e <__pow5mult+0x6a>
 8008a84:	4630      	mov	r0, r6
 8008a86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a8a:	bf00      	nop
 8008a8c:	08009980 	.word	0x08009980
 8008a90:	0800984f 	.word	0x0800984f
 8008a94:	080098cf 	.word	0x080098cf

08008a98 <__lshift>:
 8008a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a9c:	460c      	mov	r4, r1
 8008a9e:	4607      	mov	r7, r0
 8008aa0:	4691      	mov	r9, r2
 8008aa2:	6923      	ldr	r3, [r4, #16]
 8008aa4:	6849      	ldr	r1, [r1, #4]
 8008aa6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008aaa:	68a3      	ldr	r3, [r4, #8]
 8008aac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008ab0:	f108 0601 	add.w	r6, r8, #1
 8008ab4:	42b3      	cmp	r3, r6
 8008ab6:	db0b      	blt.n	8008ad0 <__lshift+0x38>
 8008ab8:	4638      	mov	r0, r7
 8008aba:	f7ff fde7 	bl	800868c <_Balloc>
 8008abe:	4605      	mov	r5, r0
 8008ac0:	b948      	cbnz	r0, 8008ad6 <__lshift+0x3e>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008ac8:	4b27      	ldr	r3, [pc, #156]	@ (8008b68 <__lshift+0xd0>)
 8008aca:	4828      	ldr	r0, [pc, #160]	@ (8008b6c <__lshift+0xd4>)
 8008acc:	f000 fd54 	bl	8009578 <__assert_func>
 8008ad0:	3101      	adds	r1, #1
 8008ad2:	005b      	lsls	r3, r3, #1
 8008ad4:	e7ee      	b.n	8008ab4 <__lshift+0x1c>
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	f100 0114 	add.w	r1, r0, #20
 8008adc:	f100 0210 	add.w	r2, r0, #16
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	4553      	cmp	r3, sl
 8008ae4:	db33      	blt.n	8008b4e <__lshift+0xb6>
 8008ae6:	6920      	ldr	r0, [r4, #16]
 8008ae8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008aec:	f104 0314 	add.w	r3, r4, #20
 8008af0:	f019 091f 	ands.w	r9, r9, #31
 8008af4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008af8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008afc:	d02b      	beq.n	8008b56 <__lshift+0xbe>
 8008afe:	468a      	mov	sl, r1
 8008b00:	2200      	movs	r2, #0
 8008b02:	f1c9 0e20 	rsb	lr, r9, #32
 8008b06:	6818      	ldr	r0, [r3, #0]
 8008b08:	fa00 f009 	lsl.w	r0, r0, r9
 8008b0c:	4310      	orrs	r0, r2
 8008b0e:	f84a 0b04 	str.w	r0, [sl], #4
 8008b12:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b16:	459c      	cmp	ip, r3
 8008b18:	fa22 f20e 	lsr.w	r2, r2, lr
 8008b1c:	d8f3      	bhi.n	8008b06 <__lshift+0x6e>
 8008b1e:	ebac 0304 	sub.w	r3, ip, r4
 8008b22:	3b15      	subs	r3, #21
 8008b24:	f023 0303 	bic.w	r3, r3, #3
 8008b28:	3304      	adds	r3, #4
 8008b2a:	f104 0015 	add.w	r0, r4, #21
 8008b2e:	4560      	cmp	r0, ip
 8008b30:	bf88      	it	hi
 8008b32:	2304      	movhi	r3, #4
 8008b34:	50ca      	str	r2, [r1, r3]
 8008b36:	b10a      	cbz	r2, 8008b3c <__lshift+0xa4>
 8008b38:	f108 0602 	add.w	r6, r8, #2
 8008b3c:	3e01      	subs	r6, #1
 8008b3e:	4638      	mov	r0, r7
 8008b40:	4621      	mov	r1, r4
 8008b42:	612e      	str	r6, [r5, #16]
 8008b44:	f7ff fde2 	bl	800870c <_Bfree>
 8008b48:	4628      	mov	r0, r5
 8008b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b4e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008b52:	3301      	adds	r3, #1
 8008b54:	e7c5      	b.n	8008ae2 <__lshift+0x4a>
 8008b56:	3904      	subs	r1, #4
 8008b58:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b5c:	459c      	cmp	ip, r3
 8008b5e:	f841 2f04 	str.w	r2, [r1, #4]!
 8008b62:	d8f9      	bhi.n	8008b58 <__lshift+0xc0>
 8008b64:	e7ea      	b.n	8008b3c <__lshift+0xa4>
 8008b66:	bf00      	nop
 8008b68:	080098be 	.word	0x080098be
 8008b6c:	080098cf 	.word	0x080098cf

08008b70 <__mcmp>:
 8008b70:	4603      	mov	r3, r0
 8008b72:	690a      	ldr	r2, [r1, #16]
 8008b74:	6900      	ldr	r0, [r0, #16]
 8008b76:	b530      	push	{r4, r5, lr}
 8008b78:	1a80      	subs	r0, r0, r2
 8008b7a:	d10e      	bne.n	8008b9a <__mcmp+0x2a>
 8008b7c:	3314      	adds	r3, #20
 8008b7e:	3114      	adds	r1, #20
 8008b80:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008b84:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008b88:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008b8c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008b90:	4295      	cmp	r5, r2
 8008b92:	d003      	beq.n	8008b9c <__mcmp+0x2c>
 8008b94:	d205      	bcs.n	8008ba2 <__mcmp+0x32>
 8008b96:	f04f 30ff 	mov.w	r0, #4294967295
 8008b9a:	bd30      	pop	{r4, r5, pc}
 8008b9c:	42a3      	cmp	r3, r4
 8008b9e:	d3f3      	bcc.n	8008b88 <__mcmp+0x18>
 8008ba0:	e7fb      	b.n	8008b9a <__mcmp+0x2a>
 8008ba2:	2001      	movs	r0, #1
 8008ba4:	e7f9      	b.n	8008b9a <__mcmp+0x2a>
	...

08008ba8 <__mdiff>:
 8008ba8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bac:	4689      	mov	r9, r1
 8008bae:	4606      	mov	r6, r0
 8008bb0:	4611      	mov	r1, r2
 8008bb2:	4648      	mov	r0, r9
 8008bb4:	4614      	mov	r4, r2
 8008bb6:	f7ff ffdb 	bl	8008b70 <__mcmp>
 8008bba:	1e05      	subs	r5, r0, #0
 8008bbc:	d112      	bne.n	8008be4 <__mdiff+0x3c>
 8008bbe:	4629      	mov	r1, r5
 8008bc0:	4630      	mov	r0, r6
 8008bc2:	f7ff fd63 	bl	800868c <_Balloc>
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	b928      	cbnz	r0, 8008bd6 <__mdiff+0x2e>
 8008bca:	f240 2137 	movw	r1, #567	@ 0x237
 8008bce:	4b3e      	ldr	r3, [pc, #248]	@ (8008cc8 <__mdiff+0x120>)
 8008bd0:	483e      	ldr	r0, [pc, #248]	@ (8008ccc <__mdiff+0x124>)
 8008bd2:	f000 fcd1 	bl	8009578 <__assert_func>
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008bdc:	4610      	mov	r0, r2
 8008bde:	b003      	add	sp, #12
 8008be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008be4:	bfbc      	itt	lt
 8008be6:	464b      	movlt	r3, r9
 8008be8:	46a1      	movlt	r9, r4
 8008bea:	4630      	mov	r0, r6
 8008bec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008bf0:	bfba      	itte	lt
 8008bf2:	461c      	movlt	r4, r3
 8008bf4:	2501      	movlt	r5, #1
 8008bf6:	2500      	movge	r5, #0
 8008bf8:	f7ff fd48 	bl	800868c <_Balloc>
 8008bfc:	4602      	mov	r2, r0
 8008bfe:	b918      	cbnz	r0, 8008c08 <__mdiff+0x60>
 8008c00:	f240 2145 	movw	r1, #581	@ 0x245
 8008c04:	4b30      	ldr	r3, [pc, #192]	@ (8008cc8 <__mdiff+0x120>)
 8008c06:	e7e3      	b.n	8008bd0 <__mdiff+0x28>
 8008c08:	f100 0b14 	add.w	fp, r0, #20
 8008c0c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008c10:	f109 0310 	add.w	r3, r9, #16
 8008c14:	60c5      	str	r5, [r0, #12]
 8008c16:	f04f 0c00 	mov.w	ip, #0
 8008c1a:	f109 0514 	add.w	r5, r9, #20
 8008c1e:	46d9      	mov	r9, fp
 8008c20:	6926      	ldr	r6, [r4, #16]
 8008c22:	f104 0e14 	add.w	lr, r4, #20
 8008c26:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008c2a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008c2e:	9301      	str	r3, [sp, #4]
 8008c30:	9b01      	ldr	r3, [sp, #4]
 8008c32:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008c36:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008c3a:	b281      	uxth	r1, r0
 8008c3c:	9301      	str	r3, [sp, #4]
 8008c3e:	fa1f f38a 	uxth.w	r3, sl
 8008c42:	1a5b      	subs	r3, r3, r1
 8008c44:	0c00      	lsrs	r0, r0, #16
 8008c46:	4463      	add	r3, ip
 8008c48:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008c4c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008c56:	4576      	cmp	r6, lr
 8008c58:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008c5c:	f849 3b04 	str.w	r3, [r9], #4
 8008c60:	d8e6      	bhi.n	8008c30 <__mdiff+0x88>
 8008c62:	1b33      	subs	r3, r6, r4
 8008c64:	3b15      	subs	r3, #21
 8008c66:	f023 0303 	bic.w	r3, r3, #3
 8008c6a:	3415      	adds	r4, #21
 8008c6c:	3304      	adds	r3, #4
 8008c6e:	42a6      	cmp	r6, r4
 8008c70:	bf38      	it	cc
 8008c72:	2304      	movcc	r3, #4
 8008c74:	441d      	add	r5, r3
 8008c76:	445b      	add	r3, fp
 8008c78:	461e      	mov	r6, r3
 8008c7a:	462c      	mov	r4, r5
 8008c7c:	4544      	cmp	r4, r8
 8008c7e:	d30e      	bcc.n	8008c9e <__mdiff+0xf6>
 8008c80:	f108 0103 	add.w	r1, r8, #3
 8008c84:	1b49      	subs	r1, r1, r5
 8008c86:	f021 0103 	bic.w	r1, r1, #3
 8008c8a:	3d03      	subs	r5, #3
 8008c8c:	45a8      	cmp	r8, r5
 8008c8e:	bf38      	it	cc
 8008c90:	2100      	movcc	r1, #0
 8008c92:	440b      	add	r3, r1
 8008c94:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008c98:	b199      	cbz	r1, 8008cc2 <__mdiff+0x11a>
 8008c9a:	6117      	str	r7, [r2, #16]
 8008c9c:	e79e      	b.n	8008bdc <__mdiff+0x34>
 8008c9e:	46e6      	mov	lr, ip
 8008ca0:	f854 1b04 	ldr.w	r1, [r4], #4
 8008ca4:	fa1f fc81 	uxth.w	ip, r1
 8008ca8:	44f4      	add	ip, lr
 8008caa:	0c08      	lsrs	r0, r1, #16
 8008cac:	4471      	add	r1, lr
 8008cae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008cb2:	b289      	uxth	r1, r1
 8008cb4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008cb8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008cbc:	f846 1b04 	str.w	r1, [r6], #4
 8008cc0:	e7dc      	b.n	8008c7c <__mdiff+0xd4>
 8008cc2:	3f01      	subs	r7, #1
 8008cc4:	e7e6      	b.n	8008c94 <__mdiff+0xec>
 8008cc6:	bf00      	nop
 8008cc8:	080098be 	.word	0x080098be
 8008ccc:	080098cf 	.word	0x080098cf

08008cd0 <__d2b>:
 8008cd0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008cd4:	2101      	movs	r1, #1
 8008cd6:	4690      	mov	r8, r2
 8008cd8:	4699      	mov	r9, r3
 8008cda:	9e08      	ldr	r6, [sp, #32]
 8008cdc:	f7ff fcd6 	bl	800868c <_Balloc>
 8008ce0:	4604      	mov	r4, r0
 8008ce2:	b930      	cbnz	r0, 8008cf2 <__d2b+0x22>
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	f240 310f 	movw	r1, #783	@ 0x30f
 8008cea:	4b23      	ldr	r3, [pc, #140]	@ (8008d78 <__d2b+0xa8>)
 8008cec:	4823      	ldr	r0, [pc, #140]	@ (8008d7c <__d2b+0xac>)
 8008cee:	f000 fc43 	bl	8009578 <__assert_func>
 8008cf2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008cf6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008cfa:	b10d      	cbz	r5, 8008d00 <__d2b+0x30>
 8008cfc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008d00:	9301      	str	r3, [sp, #4]
 8008d02:	f1b8 0300 	subs.w	r3, r8, #0
 8008d06:	d024      	beq.n	8008d52 <__d2b+0x82>
 8008d08:	4668      	mov	r0, sp
 8008d0a:	9300      	str	r3, [sp, #0]
 8008d0c:	f7ff fd85 	bl	800881a <__lo0bits>
 8008d10:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008d14:	b1d8      	cbz	r0, 8008d4e <__d2b+0x7e>
 8008d16:	f1c0 0320 	rsb	r3, r0, #32
 8008d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d1e:	430b      	orrs	r3, r1
 8008d20:	40c2      	lsrs	r2, r0
 8008d22:	6163      	str	r3, [r4, #20]
 8008d24:	9201      	str	r2, [sp, #4]
 8008d26:	9b01      	ldr	r3, [sp, #4]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	bf0c      	ite	eq
 8008d2c:	2201      	moveq	r2, #1
 8008d2e:	2202      	movne	r2, #2
 8008d30:	61a3      	str	r3, [r4, #24]
 8008d32:	6122      	str	r2, [r4, #16]
 8008d34:	b1ad      	cbz	r5, 8008d62 <__d2b+0x92>
 8008d36:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008d3a:	4405      	add	r5, r0
 8008d3c:	6035      	str	r5, [r6, #0]
 8008d3e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008d42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d44:	6018      	str	r0, [r3, #0]
 8008d46:	4620      	mov	r0, r4
 8008d48:	b002      	add	sp, #8
 8008d4a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008d4e:	6161      	str	r1, [r4, #20]
 8008d50:	e7e9      	b.n	8008d26 <__d2b+0x56>
 8008d52:	a801      	add	r0, sp, #4
 8008d54:	f7ff fd61 	bl	800881a <__lo0bits>
 8008d58:	9b01      	ldr	r3, [sp, #4]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	6163      	str	r3, [r4, #20]
 8008d5e:	3020      	adds	r0, #32
 8008d60:	e7e7      	b.n	8008d32 <__d2b+0x62>
 8008d62:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008d66:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008d6a:	6030      	str	r0, [r6, #0]
 8008d6c:	6918      	ldr	r0, [r3, #16]
 8008d6e:	f7ff fd35 	bl	80087dc <__hi0bits>
 8008d72:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008d76:	e7e4      	b.n	8008d42 <__d2b+0x72>
 8008d78:	080098be 	.word	0x080098be
 8008d7c:	080098cf 	.word	0x080098cf

08008d80 <__ssputs_r>:
 8008d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d84:	461f      	mov	r7, r3
 8008d86:	688e      	ldr	r6, [r1, #8]
 8008d88:	4682      	mov	sl, r0
 8008d8a:	42be      	cmp	r6, r7
 8008d8c:	460c      	mov	r4, r1
 8008d8e:	4690      	mov	r8, r2
 8008d90:	680b      	ldr	r3, [r1, #0]
 8008d92:	d82d      	bhi.n	8008df0 <__ssputs_r+0x70>
 8008d94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008d98:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008d9c:	d026      	beq.n	8008dec <__ssputs_r+0x6c>
 8008d9e:	6965      	ldr	r5, [r4, #20]
 8008da0:	6909      	ldr	r1, [r1, #16]
 8008da2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008da6:	eba3 0901 	sub.w	r9, r3, r1
 8008daa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008dae:	1c7b      	adds	r3, r7, #1
 8008db0:	444b      	add	r3, r9
 8008db2:	106d      	asrs	r5, r5, #1
 8008db4:	429d      	cmp	r5, r3
 8008db6:	bf38      	it	cc
 8008db8:	461d      	movcc	r5, r3
 8008dba:	0553      	lsls	r3, r2, #21
 8008dbc:	d527      	bpl.n	8008e0e <__ssputs_r+0x8e>
 8008dbe:	4629      	mov	r1, r5
 8008dc0:	f7ff fbd8 	bl	8008574 <_malloc_r>
 8008dc4:	4606      	mov	r6, r0
 8008dc6:	b360      	cbz	r0, 8008e22 <__ssputs_r+0xa2>
 8008dc8:	464a      	mov	r2, r9
 8008dca:	6921      	ldr	r1, [r4, #16]
 8008dcc:	f000 fbc6 	bl	800955c <memcpy>
 8008dd0:	89a3      	ldrh	r3, [r4, #12]
 8008dd2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008dd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008dda:	81a3      	strh	r3, [r4, #12]
 8008ddc:	6126      	str	r6, [r4, #16]
 8008dde:	444e      	add	r6, r9
 8008de0:	6026      	str	r6, [r4, #0]
 8008de2:	463e      	mov	r6, r7
 8008de4:	6165      	str	r5, [r4, #20]
 8008de6:	eba5 0509 	sub.w	r5, r5, r9
 8008dea:	60a5      	str	r5, [r4, #8]
 8008dec:	42be      	cmp	r6, r7
 8008dee:	d900      	bls.n	8008df2 <__ssputs_r+0x72>
 8008df0:	463e      	mov	r6, r7
 8008df2:	4632      	mov	r2, r6
 8008df4:	4641      	mov	r1, r8
 8008df6:	6820      	ldr	r0, [r4, #0]
 8008df8:	f000 fb63 	bl	80094c2 <memmove>
 8008dfc:	2000      	movs	r0, #0
 8008dfe:	68a3      	ldr	r3, [r4, #8]
 8008e00:	1b9b      	subs	r3, r3, r6
 8008e02:	60a3      	str	r3, [r4, #8]
 8008e04:	6823      	ldr	r3, [r4, #0]
 8008e06:	4433      	add	r3, r6
 8008e08:	6023      	str	r3, [r4, #0]
 8008e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e0e:	462a      	mov	r2, r5
 8008e10:	f000 fbf6 	bl	8009600 <_realloc_r>
 8008e14:	4606      	mov	r6, r0
 8008e16:	2800      	cmp	r0, #0
 8008e18:	d1e0      	bne.n	8008ddc <__ssputs_r+0x5c>
 8008e1a:	4650      	mov	r0, sl
 8008e1c:	6921      	ldr	r1, [r4, #16]
 8008e1e:	f7ff fb37 	bl	8008490 <_free_r>
 8008e22:	230c      	movs	r3, #12
 8008e24:	f8ca 3000 	str.w	r3, [sl]
 8008e28:	89a3      	ldrh	r3, [r4, #12]
 8008e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e32:	81a3      	strh	r3, [r4, #12]
 8008e34:	e7e9      	b.n	8008e0a <__ssputs_r+0x8a>
	...

08008e38 <_svfiprintf_r>:
 8008e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e3c:	4698      	mov	r8, r3
 8008e3e:	898b      	ldrh	r3, [r1, #12]
 8008e40:	4607      	mov	r7, r0
 8008e42:	061b      	lsls	r3, r3, #24
 8008e44:	460d      	mov	r5, r1
 8008e46:	4614      	mov	r4, r2
 8008e48:	b09d      	sub	sp, #116	@ 0x74
 8008e4a:	d510      	bpl.n	8008e6e <_svfiprintf_r+0x36>
 8008e4c:	690b      	ldr	r3, [r1, #16]
 8008e4e:	b973      	cbnz	r3, 8008e6e <_svfiprintf_r+0x36>
 8008e50:	2140      	movs	r1, #64	@ 0x40
 8008e52:	f7ff fb8f 	bl	8008574 <_malloc_r>
 8008e56:	6028      	str	r0, [r5, #0]
 8008e58:	6128      	str	r0, [r5, #16]
 8008e5a:	b930      	cbnz	r0, 8008e6a <_svfiprintf_r+0x32>
 8008e5c:	230c      	movs	r3, #12
 8008e5e:	603b      	str	r3, [r7, #0]
 8008e60:	f04f 30ff 	mov.w	r0, #4294967295
 8008e64:	b01d      	add	sp, #116	@ 0x74
 8008e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e6a:	2340      	movs	r3, #64	@ 0x40
 8008e6c:	616b      	str	r3, [r5, #20]
 8008e6e:	2300      	movs	r3, #0
 8008e70:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e72:	2320      	movs	r3, #32
 8008e74:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008e78:	2330      	movs	r3, #48	@ 0x30
 8008e7a:	f04f 0901 	mov.w	r9, #1
 8008e7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e82:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800901c <_svfiprintf_r+0x1e4>
 8008e86:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008e8a:	4623      	mov	r3, r4
 8008e8c:	469a      	mov	sl, r3
 8008e8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e92:	b10a      	cbz	r2, 8008e98 <_svfiprintf_r+0x60>
 8008e94:	2a25      	cmp	r2, #37	@ 0x25
 8008e96:	d1f9      	bne.n	8008e8c <_svfiprintf_r+0x54>
 8008e98:	ebba 0b04 	subs.w	fp, sl, r4
 8008e9c:	d00b      	beq.n	8008eb6 <_svfiprintf_r+0x7e>
 8008e9e:	465b      	mov	r3, fp
 8008ea0:	4622      	mov	r2, r4
 8008ea2:	4629      	mov	r1, r5
 8008ea4:	4638      	mov	r0, r7
 8008ea6:	f7ff ff6b 	bl	8008d80 <__ssputs_r>
 8008eaa:	3001      	adds	r0, #1
 8008eac:	f000 80a7 	beq.w	8008ffe <_svfiprintf_r+0x1c6>
 8008eb0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008eb2:	445a      	add	r2, fp
 8008eb4:	9209      	str	r2, [sp, #36]	@ 0x24
 8008eb6:	f89a 3000 	ldrb.w	r3, [sl]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	f000 809f 	beq.w	8008ffe <_svfiprintf_r+0x1c6>
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ec6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008eca:	f10a 0a01 	add.w	sl, sl, #1
 8008ece:	9304      	str	r3, [sp, #16]
 8008ed0:	9307      	str	r3, [sp, #28]
 8008ed2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008ed6:	931a      	str	r3, [sp, #104]	@ 0x68
 8008ed8:	4654      	mov	r4, sl
 8008eda:	2205      	movs	r2, #5
 8008edc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ee0:	484e      	ldr	r0, [pc, #312]	@ (800901c <_svfiprintf_r+0x1e4>)
 8008ee2:	f7fe fc68 	bl	80077b6 <memchr>
 8008ee6:	9a04      	ldr	r2, [sp, #16]
 8008ee8:	b9d8      	cbnz	r0, 8008f22 <_svfiprintf_r+0xea>
 8008eea:	06d0      	lsls	r0, r2, #27
 8008eec:	bf44      	itt	mi
 8008eee:	2320      	movmi	r3, #32
 8008ef0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ef4:	0711      	lsls	r1, r2, #28
 8008ef6:	bf44      	itt	mi
 8008ef8:	232b      	movmi	r3, #43	@ 0x2b
 8008efa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008efe:	f89a 3000 	ldrb.w	r3, [sl]
 8008f02:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f04:	d015      	beq.n	8008f32 <_svfiprintf_r+0xfa>
 8008f06:	4654      	mov	r4, sl
 8008f08:	2000      	movs	r0, #0
 8008f0a:	f04f 0c0a 	mov.w	ip, #10
 8008f0e:	9a07      	ldr	r2, [sp, #28]
 8008f10:	4621      	mov	r1, r4
 8008f12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f16:	3b30      	subs	r3, #48	@ 0x30
 8008f18:	2b09      	cmp	r3, #9
 8008f1a:	d94b      	bls.n	8008fb4 <_svfiprintf_r+0x17c>
 8008f1c:	b1b0      	cbz	r0, 8008f4c <_svfiprintf_r+0x114>
 8008f1e:	9207      	str	r2, [sp, #28]
 8008f20:	e014      	b.n	8008f4c <_svfiprintf_r+0x114>
 8008f22:	eba0 0308 	sub.w	r3, r0, r8
 8008f26:	fa09 f303 	lsl.w	r3, r9, r3
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	46a2      	mov	sl, r4
 8008f2e:	9304      	str	r3, [sp, #16]
 8008f30:	e7d2      	b.n	8008ed8 <_svfiprintf_r+0xa0>
 8008f32:	9b03      	ldr	r3, [sp, #12]
 8008f34:	1d19      	adds	r1, r3, #4
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	9103      	str	r1, [sp, #12]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	bfbb      	ittet	lt
 8008f3e:	425b      	neglt	r3, r3
 8008f40:	f042 0202 	orrlt.w	r2, r2, #2
 8008f44:	9307      	strge	r3, [sp, #28]
 8008f46:	9307      	strlt	r3, [sp, #28]
 8008f48:	bfb8      	it	lt
 8008f4a:	9204      	strlt	r2, [sp, #16]
 8008f4c:	7823      	ldrb	r3, [r4, #0]
 8008f4e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f50:	d10a      	bne.n	8008f68 <_svfiprintf_r+0x130>
 8008f52:	7863      	ldrb	r3, [r4, #1]
 8008f54:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f56:	d132      	bne.n	8008fbe <_svfiprintf_r+0x186>
 8008f58:	9b03      	ldr	r3, [sp, #12]
 8008f5a:	3402      	adds	r4, #2
 8008f5c:	1d1a      	adds	r2, r3, #4
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	9203      	str	r2, [sp, #12]
 8008f62:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008f66:	9305      	str	r3, [sp, #20]
 8008f68:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009020 <_svfiprintf_r+0x1e8>
 8008f6c:	2203      	movs	r2, #3
 8008f6e:	4650      	mov	r0, sl
 8008f70:	7821      	ldrb	r1, [r4, #0]
 8008f72:	f7fe fc20 	bl	80077b6 <memchr>
 8008f76:	b138      	cbz	r0, 8008f88 <_svfiprintf_r+0x150>
 8008f78:	2240      	movs	r2, #64	@ 0x40
 8008f7a:	9b04      	ldr	r3, [sp, #16]
 8008f7c:	eba0 000a 	sub.w	r0, r0, sl
 8008f80:	4082      	lsls	r2, r0
 8008f82:	4313      	orrs	r3, r2
 8008f84:	3401      	adds	r4, #1
 8008f86:	9304      	str	r3, [sp, #16]
 8008f88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f8c:	2206      	movs	r2, #6
 8008f8e:	4825      	ldr	r0, [pc, #148]	@ (8009024 <_svfiprintf_r+0x1ec>)
 8008f90:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008f94:	f7fe fc0f 	bl	80077b6 <memchr>
 8008f98:	2800      	cmp	r0, #0
 8008f9a:	d036      	beq.n	800900a <_svfiprintf_r+0x1d2>
 8008f9c:	4b22      	ldr	r3, [pc, #136]	@ (8009028 <_svfiprintf_r+0x1f0>)
 8008f9e:	bb1b      	cbnz	r3, 8008fe8 <_svfiprintf_r+0x1b0>
 8008fa0:	9b03      	ldr	r3, [sp, #12]
 8008fa2:	3307      	adds	r3, #7
 8008fa4:	f023 0307 	bic.w	r3, r3, #7
 8008fa8:	3308      	adds	r3, #8
 8008faa:	9303      	str	r3, [sp, #12]
 8008fac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fae:	4433      	add	r3, r6
 8008fb0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fb2:	e76a      	b.n	8008e8a <_svfiprintf_r+0x52>
 8008fb4:	460c      	mov	r4, r1
 8008fb6:	2001      	movs	r0, #1
 8008fb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fbc:	e7a8      	b.n	8008f10 <_svfiprintf_r+0xd8>
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	f04f 0c0a 	mov.w	ip, #10
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	3401      	adds	r4, #1
 8008fc8:	9305      	str	r3, [sp, #20]
 8008fca:	4620      	mov	r0, r4
 8008fcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fd0:	3a30      	subs	r2, #48	@ 0x30
 8008fd2:	2a09      	cmp	r2, #9
 8008fd4:	d903      	bls.n	8008fde <_svfiprintf_r+0x1a6>
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d0c6      	beq.n	8008f68 <_svfiprintf_r+0x130>
 8008fda:	9105      	str	r1, [sp, #20]
 8008fdc:	e7c4      	b.n	8008f68 <_svfiprintf_r+0x130>
 8008fde:	4604      	mov	r4, r0
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	fb0c 2101 	mla	r1, ip, r1, r2
 8008fe6:	e7f0      	b.n	8008fca <_svfiprintf_r+0x192>
 8008fe8:	ab03      	add	r3, sp, #12
 8008fea:	9300      	str	r3, [sp, #0]
 8008fec:	462a      	mov	r2, r5
 8008fee:	4638      	mov	r0, r7
 8008ff0:	4b0e      	ldr	r3, [pc, #56]	@ (800902c <_svfiprintf_r+0x1f4>)
 8008ff2:	a904      	add	r1, sp, #16
 8008ff4:	f7fd fdd4 	bl	8006ba0 <_printf_float>
 8008ff8:	1c42      	adds	r2, r0, #1
 8008ffa:	4606      	mov	r6, r0
 8008ffc:	d1d6      	bne.n	8008fac <_svfiprintf_r+0x174>
 8008ffe:	89ab      	ldrh	r3, [r5, #12]
 8009000:	065b      	lsls	r3, r3, #25
 8009002:	f53f af2d 	bmi.w	8008e60 <_svfiprintf_r+0x28>
 8009006:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009008:	e72c      	b.n	8008e64 <_svfiprintf_r+0x2c>
 800900a:	ab03      	add	r3, sp, #12
 800900c:	9300      	str	r3, [sp, #0]
 800900e:	462a      	mov	r2, r5
 8009010:	4638      	mov	r0, r7
 8009012:	4b06      	ldr	r3, [pc, #24]	@ (800902c <_svfiprintf_r+0x1f4>)
 8009014:	a904      	add	r1, sp, #16
 8009016:	f7fe f861 	bl	80070dc <_printf_i>
 800901a:	e7ed      	b.n	8008ff8 <_svfiprintf_r+0x1c0>
 800901c:	08009928 	.word	0x08009928
 8009020:	0800992e 	.word	0x0800992e
 8009024:	08009932 	.word	0x08009932
 8009028:	08006ba1 	.word	0x08006ba1
 800902c:	08008d81 	.word	0x08008d81

08009030 <__sfputc_r>:
 8009030:	6893      	ldr	r3, [r2, #8]
 8009032:	b410      	push	{r4}
 8009034:	3b01      	subs	r3, #1
 8009036:	2b00      	cmp	r3, #0
 8009038:	6093      	str	r3, [r2, #8]
 800903a:	da07      	bge.n	800904c <__sfputc_r+0x1c>
 800903c:	6994      	ldr	r4, [r2, #24]
 800903e:	42a3      	cmp	r3, r4
 8009040:	db01      	blt.n	8009046 <__sfputc_r+0x16>
 8009042:	290a      	cmp	r1, #10
 8009044:	d102      	bne.n	800904c <__sfputc_r+0x1c>
 8009046:	bc10      	pop	{r4}
 8009048:	f7fe baa1 	b.w	800758e <__swbuf_r>
 800904c:	6813      	ldr	r3, [r2, #0]
 800904e:	1c58      	adds	r0, r3, #1
 8009050:	6010      	str	r0, [r2, #0]
 8009052:	7019      	strb	r1, [r3, #0]
 8009054:	4608      	mov	r0, r1
 8009056:	bc10      	pop	{r4}
 8009058:	4770      	bx	lr

0800905a <__sfputs_r>:
 800905a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800905c:	4606      	mov	r6, r0
 800905e:	460f      	mov	r7, r1
 8009060:	4614      	mov	r4, r2
 8009062:	18d5      	adds	r5, r2, r3
 8009064:	42ac      	cmp	r4, r5
 8009066:	d101      	bne.n	800906c <__sfputs_r+0x12>
 8009068:	2000      	movs	r0, #0
 800906a:	e007      	b.n	800907c <__sfputs_r+0x22>
 800906c:	463a      	mov	r2, r7
 800906e:	4630      	mov	r0, r6
 8009070:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009074:	f7ff ffdc 	bl	8009030 <__sfputc_r>
 8009078:	1c43      	adds	r3, r0, #1
 800907a:	d1f3      	bne.n	8009064 <__sfputs_r+0xa>
 800907c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009080 <_vfiprintf_r>:
 8009080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009084:	460d      	mov	r5, r1
 8009086:	4614      	mov	r4, r2
 8009088:	4698      	mov	r8, r3
 800908a:	4606      	mov	r6, r0
 800908c:	b09d      	sub	sp, #116	@ 0x74
 800908e:	b118      	cbz	r0, 8009098 <_vfiprintf_r+0x18>
 8009090:	6a03      	ldr	r3, [r0, #32]
 8009092:	b90b      	cbnz	r3, 8009098 <_vfiprintf_r+0x18>
 8009094:	f7fe f9cc 	bl	8007430 <__sinit>
 8009098:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800909a:	07d9      	lsls	r1, r3, #31
 800909c:	d405      	bmi.n	80090aa <_vfiprintf_r+0x2a>
 800909e:	89ab      	ldrh	r3, [r5, #12]
 80090a0:	059a      	lsls	r2, r3, #22
 80090a2:	d402      	bmi.n	80090aa <_vfiprintf_r+0x2a>
 80090a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80090a6:	f7fe fb84 	bl	80077b2 <__retarget_lock_acquire_recursive>
 80090aa:	89ab      	ldrh	r3, [r5, #12]
 80090ac:	071b      	lsls	r3, r3, #28
 80090ae:	d501      	bpl.n	80090b4 <_vfiprintf_r+0x34>
 80090b0:	692b      	ldr	r3, [r5, #16]
 80090b2:	b99b      	cbnz	r3, 80090dc <_vfiprintf_r+0x5c>
 80090b4:	4629      	mov	r1, r5
 80090b6:	4630      	mov	r0, r6
 80090b8:	f7fe faa8 	bl	800760c <__swsetup_r>
 80090bc:	b170      	cbz	r0, 80090dc <_vfiprintf_r+0x5c>
 80090be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80090c0:	07dc      	lsls	r4, r3, #31
 80090c2:	d504      	bpl.n	80090ce <_vfiprintf_r+0x4e>
 80090c4:	f04f 30ff 	mov.w	r0, #4294967295
 80090c8:	b01d      	add	sp, #116	@ 0x74
 80090ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090ce:	89ab      	ldrh	r3, [r5, #12]
 80090d0:	0598      	lsls	r0, r3, #22
 80090d2:	d4f7      	bmi.n	80090c4 <_vfiprintf_r+0x44>
 80090d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80090d6:	f7fe fb6d 	bl	80077b4 <__retarget_lock_release_recursive>
 80090da:	e7f3      	b.n	80090c4 <_vfiprintf_r+0x44>
 80090dc:	2300      	movs	r3, #0
 80090de:	9309      	str	r3, [sp, #36]	@ 0x24
 80090e0:	2320      	movs	r3, #32
 80090e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80090e6:	2330      	movs	r3, #48	@ 0x30
 80090e8:	f04f 0901 	mov.w	r9, #1
 80090ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80090f0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800929c <_vfiprintf_r+0x21c>
 80090f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80090f8:	4623      	mov	r3, r4
 80090fa:	469a      	mov	sl, r3
 80090fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009100:	b10a      	cbz	r2, 8009106 <_vfiprintf_r+0x86>
 8009102:	2a25      	cmp	r2, #37	@ 0x25
 8009104:	d1f9      	bne.n	80090fa <_vfiprintf_r+0x7a>
 8009106:	ebba 0b04 	subs.w	fp, sl, r4
 800910a:	d00b      	beq.n	8009124 <_vfiprintf_r+0xa4>
 800910c:	465b      	mov	r3, fp
 800910e:	4622      	mov	r2, r4
 8009110:	4629      	mov	r1, r5
 8009112:	4630      	mov	r0, r6
 8009114:	f7ff ffa1 	bl	800905a <__sfputs_r>
 8009118:	3001      	adds	r0, #1
 800911a:	f000 80a7 	beq.w	800926c <_vfiprintf_r+0x1ec>
 800911e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009120:	445a      	add	r2, fp
 8009122:	9209      	str	r2, [sp, #36]	@ 0x24
 8009124:	f89a 3000 	ldrb.w	r3, [sl]
 8009128:	2b00      	cmp	r3, #0
 800912a:	f000 809f 	beq.w	800926c <_vfiprintf_r+0x1ec>
 800912e:	2300      	movs	r3, #0
 8009130:	f04f 32ff 	mov.w	r2, #4294967295
 8009134:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009138:	f10a 0a01 	add.w	sl, sl, #1
 800913c:	9304      	str	r3, [sp, #16]
 800913e:	9307      	str	r3, [sp, #28]
 8009140:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009144:	931a      	str	r3, [sp, #104]	@ 0x68
 8009146:	4654      	mov	r4, sl
 8009148:	2205      	movs	r2, #5
 800914a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800914e:	4853      	ldr	r0, [pc, #332]	@ (800929c <_vfiprintf_r+0x21c>)
 8009150:	f7fe fb31 	bl	80077b6 <memchr>
 8009154:	9a04      	ldr	r2, [sp, #16]
 8009156:	b9d8      	cbnz	r0, 8009190 <_vfiprintf_r+0x110>
 8009158:	06d1      	lsls	r1, r2, #27
 800915a:	bf44      	itt	mi
 800915c:	2320      	movmi	r3, #32
 800915e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009162:	0713      	lsls	r3, r2, #28
 8009164:	bf44      	itt	mi
 8009166:	232b      	movmi	r3, #43	@ 0x2b
 8009168:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800916c:	f89a 3000 	ldrb.w	r3, [sl]
 8009170:	2b2a      	cmp	r3, #42	@ 0x2a
 8009172:	d015      	beq.n	80091a0 <_vfiprintf_r+0x120>
 8009174:	4654      	mov	r4, sl
 8009176:	2000      	movs	r0, #0
 8009178:	f04f 0c0a 	mov.w	ip, #10
 800917c:	9a07      	ldr	r2, [sp, #28]
 800917e:	4621      	mov	r1, r4
 8009180:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009184:	3b30      	subs	r3, #48	@ 0x30
 8009186:	2b09      	cmp	r3, #9
 8009188:	d94b      	bls.n	8009222 <_vfiprintf_r+0x1a2>
 800918a:	b1b0      	cbz	r0, 80091ba <_vfiprintf_r+0x13a>
 800918c:	9207      	str	r2, [sp, #28]
 800918e:	e014      	b.n	80091ba <_vfiprintf_r+0x13a>
 8009190:	eba0 0308 	sub.w	r3, r0, r8
 8009194:	fa09 f303 	lsl.w	r3, r9, r3
 8009198:	4313      	orrs	r3, r2
 800919a:	46a2      	mov	sl, r4
 800919c:	9304      	str	r3, [sp, #16]
 800919e:	e7d2      	b.n	8009146 <_vfiprintf_r+0xc6>
 80091a0:	9b03      	ldr	r3, [sp, #12]
 80091a2:	1d19      	adds	r1, r3, #4
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	9103      	str	r1, [sp, #12]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	bfbb      	ittet	lt
 80091ac:	425b      	neglt	r3, r3
 80091ae:	f042 0202 	orrlt.w	r2, r2, #2
 80091b2:	9307      	strge	r3, [sp, #28]
 80091b4:	9307      	strlt	r3, [sp, #28]
 80091b6:	bfb8      	it	lt
 80091b8:	9204      	strlt	r2, [sp, #16]
 80091ba:	7823      	ldrb	r3, [r4, #0]
 80091bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80091be:	d10a      	bne.n	80091d6 <_vfiprintf_r+0x156>
 80091c0:	7863      	ldrb	r3, [r4, #1]
 80091c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80091c4:	d132      	bne.n	800922c <_vfiprintf_r+0x1ac>
 80091c6:	9b03      	ldr	r3, [sp, #12]
 80091c8:	3402      	adds	r4, #2
 80091ca:	1d1a      	adds	r2, r3, #4
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	9203      	str	r2, [sp, #12]
 80091d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80091d4:	9305      	str	r3, [sp, #20]
 80091d6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80092a0 <_vfiprintf_r+0x220>
 80091da:	2203      	movs	r2, #3
 80091dc:	4650      	mov	r0, sl
 80091de:	7821      	ldrb	r1, [r4, #0]
 80091e0:	f7fe fae9 	bl	80077b6 <memchr>
 80091e4:	b138      	cbz	r0, 80091f6 <_vfiprintf_r+0x176>
 80091e6:	2240      	movs	r2, #64	@ 0x40
 80091e8:	9b04      	ldr	r3, [sp, #16]
 80091ea:	eba0 000a 	sub.w	r0, r0, sl
 80091ee:	4082      	lsls	r2, r0
 80091f0:	4313      	orrs	r3, r2
 80091f2:	3401      	adds	r4, #1
 80091f4:	9304      	str	r3, [sp, #16]
 80091f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091fa:	2206      	movs	r2, #6
 80091fc:	4829      	ldr	r0, [pc, #164]	@ (80092a4 <_vfiprintf_r+0x224>)
 80091fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009202:	f7fe fad8 	bl	80077b6 <memchr>
 8009206:	2800      	cmp	r0, #0
 8009208:	d03f      	beq.n	800928a <_vfiprintf_r+0x20a>
 800920a:	4b27      	ldr	r3, [pc, #156]	@ (80092a8 <_vfiprintf_r+0x228>)
 800920c:	bb1b      	cbnz	r3, 8009256 <_vfiprintf_r+0x1d6>
 800920e:	9b03      	ldr	r3, [sp, #12]
 8009210:	3307      	adds	r3, #7
 8009212:	f023 0307 	bic.w	r3, r3, #7
 8009216:	3308      	adds	r3, #8
 8009218:	9303      	str	r3, [sp, #12]
 800921a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800921c:	443b      	add	r3, r7
 800921e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009220:	e76a      	b.n	80090f8 <_vfiprintf_r+0x78>
 8009222:	460c      	mov	r4, r1
 8009224:	2001      	movs	r0, #1
 8009226:	fb0c 3202 	mla	r2, ip, r2, r3
 800922a:	e7a8      	b.n	800917e <_vfiprintf_r+0xfe>
 800922c:	2300      	movs	r3, #0
 800922e:	f04f 0c0a 	mov.w	ip, #10
 8009232:	4619      	mov	r1, r3
 8009234:	3401      	adds	r4, #1
 8009236:	9305      	str	r3, [sp, #20]
 8009238:	4620      	mov	r0, r4
 800923a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800923e:	3a30      	subs	r2, #48	@ 0x30
 8009240:	2a09      	cmp	r2, #9
 8009242:	d903      	bls.n	800924c <_vfiprintf_r+0x1cc>
 8009244:	2b00      	cmp	r3, #0
 8009246:	d0c6      	beq.n	80091d6 <_vfiprintf_r+0x156>
 8009248:	9105      	str	r1, [sp, #20]
 800924a:	e7c4      	b.n	80091d6 <_vfiprintf_r+0x156>
 800924c:	4604      	mov	r4, r0
 800924e:	2301      	movs	r3, #1
 8009250:	fb0c 2101 	mla	r1, ip, r1, r2
 8009254:	e7f0      	b.n	8009238 <_vfiprintf_r+0x1b8>
 8009256:	ab03      	add	r3, sp, #12
 8009258:	9300      	str	r3, [sp, #0]
 800925a:	462a      	mov	r2, r5
 800925c:	4630      	mov	r0, r6
 800925e:	4b13      	ldr	r3, [pc, #76]	@ (80092ac <_vfiprintf_r+0x22c>)
 8009260:	a904      	add	r1, sp, #16
 8009262:	f7fd fc9d 	bl	8006ba0 <_printf_float>
 8009266:	4607      	mov	r7, r0
 8009268:	1c78      	adds	r0, r7, #1
 800926a:	d1d6      	bne.n	800921a <_vfiprintf_r+0x19a>
 800926c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800926e:	07d9      	lsls	r1, r3, #31
 8009270:	d405      	bmi.n	800927e <_vfiprintf_r+0x1fe>
 8009272:	89ab      	ldrh	r3, [r5, #12]
 8009274:	059a      	lsls	r2, r3, #22
 8009276:	d402      	bmi.n	800927e <_vfiprintf_r+0x1fe>
 8009278:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800927a:	f7fe fa9b 	bl	80077b4 <__retarget_lock_release_recursive>
 800927e:	89ab      	ldrh	r3, [r5, #12]
 8009280:	065b      	lsls	r3, r3, #25
 8009282:	f53f af1f 	bmi.w	80090c4 <_vfiprintf_r+0x44>
 8009286:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009288:	e71e      	b.n	80090c8 <_vfiprintf_r+0x48>
 800928a:	ab03      	add	r3, sp, #12
 800928c:	9300      	str	r3, [sp, #0]
 800928e:	462a      	mov	r2, r5
 8009290:	4630      	mov	r0, r6
 8009292:	4b06      	ldr	r3, [pc, #24]	@ (80092ac <_vfiprintf_r+0x22c>)
 8009294:	a904      	add	r1, sp, #16
 8009296:	f7fd ff21 	bl	80070dc <_printf_i>
 800929a:	e7e4      	b.n	8009266 <_vfiprintf_r+0x1e6>
 800929c:	08009928 	.word	0x08009928
 80092a0:	0800992e 	.word	0x0800992e
 80092a4:	08009932 	.word	0x08009932
 80092a8:	08006ba1 	.word	0x08006ba1
 80092ac:	0800905b 	.word	0x0800905b

080092b0 <__sflush_r>:
 80092b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80092b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092b6:	0716      	lsls	r6, r2, #28
 80092b8:	4605      	mov	r5, r0
 80092ba:	460c      	mov	r4, r1
 80092bc:	d454      	bmi.n	8009368 <__sflush_r+0xb8>
 80092be:	684b      	ldr	r3, [r1, #4]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	dc02      	bgt.n	80092ca <__sflush_r+0x1a>
 80092c4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	dd48      	ble.n	800935c <__sflush_r+0xac>
 80092ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80092cc:	2e00      	cmp	r6, #0
 80092ce:	d045      	beq.n	800935c <__sflush_r+0xac>
 80092d0:	2300      	movs	r3, #0
 80092d2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80092d6:	682f      	ldr	r7, [r5, #0]
 80092d8:	6a21      	ldr	r1, [r4, #32]
 80092da:	602b      	str	r3, [r5, #0]
 80092dc:	d030      	beq.n	8009340 <__sflush_r+0x90>
 80092de:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80092e0:	89a3      	ldrh	r3, [r4, #12]
 80092e2:	0759      	lsls	r1, r3, #29
 80092e4:	d505      	bpl.n	80092f2 <__sflush_r+0x42>
 80092e6:	6863      	ldr	r3, [r4, #4]
 80092e8:	1ad2      	subs	r2, r2, r3
 80092ea:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80092ec:	b10b      	cbz	r3, 80092f2 <__sflush_r+0x42>
 80092ee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80092f0:	1ad2      	subs	r2, r2, r3
 80092f2:	2300      	movs	r3, #0
 80092f4:	4628      	mov	r0, r5
 80092f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80092f8:	6a21      	ldr	r1, [r4, #32]
 80092fa:	47b0      	blx	r6
 80092fc:	1c43      	adds	r3, r0, #1
 80092fe:	89a3      	ldrh	r3, [r4, #12]
 8009300:	d106      	bne.n	8009310 <__sflush_r+0x60>
 8009302:	6829      	ldr	r1, [r5, #0]
 8009304:	291d      	cmp	r1, #29
 8009306:	d82b      	bhi.n	8009360 <__sflush_r+0xb0>
 8009308:	4a28      	ldr	r2, [pc, #160]	@ (80093ac <__sflush_r+0xfc>)
 800930a:	40ca      	lsrs	r2, r1
 800930c:	07d6      	lsls	r6, r2, #31
 800930e:	d527      	bpl.n	8009360 <__sflush_r+0xb0>
 8009310:	2200      	movs	r2, #0
 8009312:	6062      	str	r2, [r4, #4]
 8009314:	6922      	ldr	r2, [r4, #16]
 8009316:	04d9      	lsls	r1, r3, #19
 8009318:	6022      	str	r2, [r4, #0]
 800931a:	d504      	bpl.n	8009326 <__sflush_r+0x76>
 800931c:	1c42      	adds	r2, r0, #1
 800931e:	d101      	bne.n	8009324 <__sflush_r+0x74>
 8009320:	682b      	ldr	r3, [r5, #0]
 8009322:	b903      	cbnz	r3, 8009326 <__sflush_r+0x76>
 8009324:	6560      	str	r0, [r4, #84]	@ 0x54
 8009326:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009328:	602f      	str	r7, [r5, #0]
 800932a:	b1b9      	cbz	r1, 800935c <__sflush_r+0xac>
 800932c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009330:	4299      	cmp	r1, r3
 8009332:	d002      	beq.n	800933a <__sflush_r+0x8a>
 8009334:	4628      	mov	r0, r5
 8009336:	f7ff f8ab 	bl	8008490 <_free_r>
 800933a:	2300      	movs	r3, #0
 800933c:	6363      	str	r3, [r4, #52]	@ 0x34
 800933e:	e00d      	b.n	800935c <__sflush_r+0xac>
 8009340:	2301      	movs	r3, #1
 8009342:	4628      	mov	r0, r5
 8009344:	47b0      	blx	r6
 8009346:	4602      	mov	r2, r0
 8009348:	1c50      	adds	r0, r2, #1
 800934a:	d1c9      	bne.n	80092e0 <__sflush_r+0x30>
 800934c:	682b      	ldr	r3, [r5, #0]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d0c6      	beq.n	80092e0 <__sflush_r+0x30>
 8009352:	2b1d      	cmp	r3, #29
 8009354:	d001      	beq.n	800935a <__sflush_r+0xaa>
 8009356:	2b16      	cmp	r3, #22
 8009358:	d11d      	bne.n	8009396 <__sflush_r+0xe6>
 800935a:	602f      	str	r7, [r5, #0]
 800935c:	2000      	movs	r0, #0
 800935e:	e021      	b.n	80093a4 <__sflush_r+0xf4>
 8009360:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009364:	b21b      	sxth	r3, r3
 8009366:	e01a      	b.n	800939e <__sflush_r+0xee>
 8009368:	690f      	ldr	r7, [r1, #16]
 800936a:	2f00      	cmp	r7, #0
 800936c:	d0f6      	beq.n	800935c <__sflush_r+0xac>
 800936e:	0793      	lsls	r3, r2, #30
 8009370:	bf18      	it	ne
 8009372:	2300      	movne	r3, #0
 8009374:	680e      	ldr	r6, [r1, #0]
 8009376:	bf08      	it	eq
 8009378:	694b      	ldreq	r3, [r1, #20]
 800937a:	1bf6      	subs	r6, r6, r7
 800937c:	600f      	str	r7, [r1, #0]
 800937e:	608b      	str	r3, [r1, #8]
 8009380:	2e00      	cmp	r6, #0
 8009382:	ddeb      	ble.n	800935c <__sflush_r+0xac>
 8009384:	4633      	mov	r3, r6
 8009386:	463a      	mov	r2, r7
 8009388:	4628      	mov	r0, r5
 800938a:	6a21      	ldr	r1, [r4, #32]
 800938c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009390:	47e0      	blx	ip
 8009392:	2800      	cmp	r0, #0
 8009394:	dc07      	bgt.n	80093a6 <__sflush_r+0xf6>
 8009396:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800939a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800939e:	f04f 30ff 	mov.w	r0, #4294967295
 80093a2:	81a3      	strh	r3, [r4, #12]
 80093a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093a6:	4407      	add	r7, r0
 80093a8:	1a36      	subs	r6, r6, r0
 80093aa:	e7e9      	b.n	8009380 <__sflush_r+0xd0>
 80093ac:	20400001 	.word	0x20400001

080093b0 <_fflush_r>:
 80093b0:	b538      	push	{r3, r4, r5, lr}
 80093b2:	690b      	ldr	r3, [r1, #16]
 80093b4:	4605      	mov	r5, r0
 80093b6:	460c      	mov	r4, r1
 80093b8:	b913      	cbnz	r3, 80093c0 <_fflush_r+0x10>
 80093ba:	2500      	movs	r5, #0
 80093bc:	4628      	mov	r0, r5
 80093be:	bd38      	pop	{r3, r4, r5, pc}
 80093c0:	b118      	cbz	r0, 80093ca <_fflush_r+0x1a>
 80093c2:	6a03      	ldr	r3, [r0, #32]
 80093c4:	b90b      	cbnz	r3, 80093ca <_fflush_r+0x1a>
 80093c6:	f7fe f833 	bl	8007430 <__sinit>
 80093ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d0f3      	beq.n	80093ba <_fflush_r+0xa>
 80093d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80093d4:	07d0      	lsls	r0, r2, #31
 80093d6:	d404      	bmi.n	80093e2 <_fflush_r+0x32>
 80093d8:	0599      	lsls	r1, r3, #22
 80093da:	d402      	bmi.n	80093e2 <_fflush_r+0x32>
 80093dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80093de:	f7fe f9e8 	bl	80077b2 <__retarget_lock_acquire_recursive>
 80093e2:	4628      	mov	r0, r5
 80093e4:	4621      	mov	r1, r4
 80093e6:	f7ff ff63 	bl	80092b0 <__sflush_r>
 80093ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80093ec:	4605      	mov	r5, r0
 80093ee:	07da      	lsls	r2, r3, #31
 80093f0:	d4e4      	bmi.n	80093bc <_fflush_r+0xc>
 80093f2:	89a3      	ldrh	r3, [r4, #12]
 80093f4:	059b      	lsls	r3, r3, #22
 80093f6:	d4e1      	bmi.n	80093bc <_fflush_r+0xc>
 80093f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80093fa:	f7fe f9db 	bl	80077b4 <__retarget_lock_release_recursive>
 80093fe:	e7dd      	b.n	80093bc <_fflush_r+0xc>

08009400 <__swhatbuf_r>:
 8009400:	b570      	push	{r4, r5, r6, lr}
 8009402:	460c      	mov	r4, r1
 8009404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009408:	4615      	mov	r5, r2
 800940a:	2900      	cmp	r1, #0
 800940c:	461e      	mov	r6, r3
 800940e:	b096      	sub	sp, #88	@ 0x58
 8009410:	da0c      	bge.n	800942c <__swhatbuf_r+0x2c>
 8009412:	89a3      	ldrh	r3, [r4, #12]
 8009414:	2100      	movs	r1, #0
 8009416:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800941a:	bf14      	ite	ne
 800941c:	2340      	movne	r3, #64	@ 0x40
 800941e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009422:	2000      	movs	r0, #0
 8009424:	6031      	str	r1, [r6, #0]
 8009426:	602b      	str	r3, [r5, #0]
 8009428:	b016      	add	sp, #88	@ 0x58
 800942a:	bd70      	pop	{r4, r5, r6, pc}
 800942c:	466a      	mov	r2, sp
 800942e:	f000 f863 	bl	80094f8 <_fstat_r>
 8009432:	2800      	cmp	r0, #0
 8009434:	dbed      	blt.n	8009412 <__swhatbuf_r+0x12>
 8009436:	9901      	ldr	r1, [sp, #4]
 8009438:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800943c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009440:	4259      	negs	r1, r3
 8009442:	4159      	adcs	r1, r3
 8009444:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009448:	e7eb      	b.n	8009422 <__swhatbuf_r+0x22>

0800944a <__smakebuf_r>:
 800944a:	898b      	ldrh	r3, [r1, #12]
 800944c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800944e:	079d      	lsls	r5, r3, #30
 8009450:	4606      	mov	r6, r0
 8009452:	460c      	mov	r4, r1
 8009454:	d507      	bpl.n	8009466 <__smakebuf_r+0x1c>
 8009456:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800945a:	6023      	str	r3, [r4, #0]
 800945c:	6123      	str	r3, [r4, #16]
 800945e:	2301      	movs	r3, #1
 8009460:	6163      	str	r3, [r4, #20]
 8009462:	b003      	add	sp, #12
 8009464:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009466:	466a      	mov	r2, sp
 8009468:	ab01      	add	r3, sp, #4
 800946a:	f7ff ffc9 	bl	8009400 <__swhatbuf_r>
 800946e:	9f00      	ldr	r7, [sp, #0]
 8009470:	4605      	mov	r5, r0
 8009472:	4639      	mov	r1, r7
 8009474:	4630      	mov	r0, r6
 8009476:	f7ff f87d 	bl	8008574 <_malloc_r>
 800947a:	b948      	cbnz	r0, 8009490 <__smakebuf_r+0x46>
 800947c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009480:	059a      	lsls	r2, r3, #22
 8009482:	d4ee      	bmi.n	8009462 <__smakebuf_r+0x18>
 8009484:	f023 0303 	bic.w	r3, r3, #3
 8009488:	f043 0302 	orr.w	r3, r3, #2
 800948c:	81a3      	strh	r3, [r4, #12]
 800948e:	e7e2      	b.n	8009456 <__smakebuf_r+0xc>
 8009490:	89a3      	ldrh	r3, [r4, #12]
 8009492:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009496:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800949a:	81a3      	strh	r3, [r4, #12]
 800949c:	9b01      	ldr	r3, [sp, #4]
 800949e:	6020      	str	r0, [r4, #0]
 80094a0:	b15b      	cbz	r3, 80094ba <__smakebuf_r+0x70>
 80094a2:	4630      	mov	r0, r6
 80094a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094a8:	f000 f838 	bl	800951c <_isatty_r>
 80094ac:	b128      	cbz	r0, 80094ba <__smakebuf_r+0x70>
 80094ae:	89a3      	ldrh	r3, [r4, #12]
 80094b0:	f023 0303 	bic.w	r3, r3, #3
 80094b4:	f043 0301 	orr.w	r3, r3, #1
 80094b8:	81a3      	strh	r3, [r4, #12]
 80094ba:	89a3      	ldrh	r3, [r4, #12]
 80094bc:	431d      	orrs	r5, r3
 80094be:	81a5      	strh	r5, [r4, #12]
 80094c0:	e7cf      	b.n	8009462 <__smakebuf_r+0x18>

080094c2 <memmove>:
 80094c2:	4288      	cmp	r0, r1
 80094c4:	b510      	push	{r4, lr}
 80094c6:	eb01 0402 	add.w	r4, r1, r2
 80094ca:	d902      	bls.n	80094d2 <memmove+0x10>
 80094cc:	4284      	cmp	r4, r0
 80094ce:	4623      	mov	r3, r4
 80094d0:	d807      	bhi.n	80094e2 <memmove+0x20>
 80094d2:	1e43      	subs	r3, r0, #1
 80094d4:	42a1      	cmp	r1, r4
 80094d6:	d008      	beq.n	80094ea <memmove+0x28>
 80094d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094dc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094e0:	e7f8      	b.n	80094d4 <memmove+0x12>
 80094e2:	4601      	mov	r1, r0
 80094e4:	4402      	add	r2, r0
 80094e6:	428a      	cmp	r2, r1
 80094e8:	d100      	bne.n	80094ec <memmove+0x2a>
 80094ea:	bd10      	pop	{r4, pc}
 80094ec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094f0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094f4:	e7f7      	b.n	80094e6 <memmove+0x24>
	...

080094f8 <_fstat_r>:
 80094f8:	b538      	push	{r3, r4, r5, lr}
 80094fa:	2300      	movs	r3, #0
 80094fc:	4d06      	ldr	r5, [pc, #24]	@ (8009518 <_fstat_r+0x20>)
 80094fe:	4604      	mov	r4, r0
 8009500:	4608      	mov	r0, r1
 8009502:	4611      	mov	r1, r2
 8009504:	602b      	str	r3, [r5, #0]
 8009506:	f7f9 fa1d 	bl	8002944 <_fstat>
 800950a:	1c43      	adds	r3, r0, #1
 800950c:	d102      	bne.n	8009514 <_fstat_r+0x1c>
 800950e:	682b      	ldr	r3, [r5, #0]
 8009510:	b103      	cbz	r3, 8009514 <_fstat_r+0x1c>
 8009512:	6023      	str	r3, [r4, #0]
 8009514:	bd38      	pop	{r3, r4, r5, pc}
 8009516:	bf00      	nop
 8009518:	200005d8 	.word	0x200005d8

0800951c <_isatty_r>:
 800951c:	b538      	push	{r3, r4, r5, lr}
 800951e:	2300      	movs	r3, #0
 8009520:	4d05      	ldr	r5, [pc, #20]	@ (8009538 <_isatty_r+0x1c>)
 8009522:	4604      	mov	r4, r0
 8009524:	4608      	mov	r0, r1
 8009526:	602b      	str	r3, [r5, #0]
 8009528:	f7f9 fa1b 	bl	8002962 <_isatty>
 800952c:	1c43      	adds	r3, r0, #1
 800952e:	d102      	bne.n	8009536 <_isatty_r+0x1a>
 8009530:	682b      	ldr	r3, [r5, #0]
 8009532:	b103      	cbz	r3, 8009536 <_isatty_r+0x1a>
 8009534:	6023      	str	r3, [r4, #0]
 8009536:	bd38      	pop	{r3, r4, r5, pc}
 8009538:	200005d8 	.word	0x200005d8

0800953c <_sbrk_r>:
 800953c:	b538      	push	{r3, r4, r5, lr}
 800953e:	2300      	movs	r3, #0
 8009540:	4d05      	ldr	r5, [pc, #20]	@ (8009558 <_sbrk_r+0x1c>)
 8009542:	4604      	mov	r4, r0
 8009544:	4608      	mov	r0, r1
 8009546:	602b      	str	r3, [r5, #0]
 8009548:	f7f9 fa22 	bl	8002990 <_sbrk>
 800954c:	1c43      	adds	r3, r0, #1
 800954e:	d102      	bne.n	8009556 <_sbrk_r+0x1a>
 8009550:	682b      	ldr	r3, [r5, #0]
 8009552:	b103      	cbz	r3, 8009556 <_sbrk_r+0x1a>
 8009554:	6023      	str	r3, [r4, #0]
 8009556:	bd38      	pop	{r3, r4, r5, pc}
 8009558:	200005d8 	.word	0x200005d8

0800955c <memcpy>:
 800955c:	440a      	add	r2, r1
 800955e:	4291      	cmp	r1, r2
 8009560:	f100 33ff 	add.w	r3, r0, #4294967295
 8009564:	d100      	bne.n	8009568 <memcpy+0xc>
 8009566:	4770      	bx	lr
 8009568:	b510      	push	{r4, lr}
 800956a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800956e:	4291      	cmp	r1, r2
 8009570:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009574:	d1f9      	bne.n	800956a <memcpy+0xe>
 8009576:	bd10      	pop	{r4, pc}

08009578 <__assert_func>:
 8009578:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800957a:	4614      	mov	r4, r2
 800957c:	461a      	mov	r2, r3
 800957e:	4b09      	ldr	r3, [pc, #36]	@ (80095a4 <__assert_func+0x2c>)
 8009580:	4605      	mov	r5, r0
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	68d8      	ldr	r0, [r3, #12]
 8009586:	b14c      	cbz	r4, 800959c <__assert_func+0x24>
 8009588:	4b07      	ldr	r3, [pc, #28]	@ (80095a8 <__assert_func+0x30>)
 800958a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800958e:	9100      	str	r1, [sp, #0]
 8009590:	462b      	mov	r3, r5
 8009592:	4906      	ldr	r1, [pc, #24]	@ (80095ac <__assert_func+0x34>)
 8009594:	f000 f870 	bl	8009678 <fiprintf>
 8009598:	f000 f880 	bl	800969c <abort>
 800959c:	4b04      	ldr	r3, [pc, #16]	@ (80095b0 <__assert_func+0x38>)
 800959e:	461c      	mov	r4, r3
 80095a0:	e7f3      	b.n	800958a <__assert_func+0x12>
 80095a2:	bf00      	nop
 80095a4:	2000004c 	.word	0x2000004c
 80095a8:	08009943 	.word	0x08009943
 80095ac:	08009950 	.word	0x08009950
 80095b0:	0800997e 	.word	0x0800997e

080095b4 <_calloc_r>:
 80095b4:	b570      	push	{r4, r5, r6, lr}
 80095b6:	fba1 5402 	umull	r5, r4, r1, r2
 80095ba:	b934      	cbnz	r4, 80095ca <_calloc_r+0x16>
 80095bc:	4629      	mov	r1, r5
 80095be:	f7fe ffd9 	bl	8008574 <_malloc_r>
 80095c2:	4606      	mov	r6, r0
 80095c4:	b928      	cbnz	r0, 80095d2 <_calloc_r+0x1e>
 80095c6:	4630      	mov	r0, r6
 80095c8:	bd70      	pop	{r4, r5, r6, pc}
 80095ca:	220c      	movs	r2, #12
 80095cc:	2600      	movs	r6, #0
 80095ce:	6002      	str	r2, [r0, #0]
 80095d0:	e7f9      	b.n	80095c6 <_calloc_r+0x12>
 80095d2:	462a      	mov	r2, r5
 80095d4:	4621      	mov	r1, r4
 80095d6:	f7fe f86f 	bl	80076b8 <memset>
 80095da:	e7f4      	b.n	80095c6 <_calloc_r+0x12>

080095dc <__ascii_mbtowc>:
 80095dc:	b082      	sub	sp, #8
 80095de:	b901      	cbnz	r1, 80095e2 <__ascii_mbtowc+0x6>
 80095e0:	a901      	add	r1, sp, #4
 80095e2:	b142      	cbz	r2, 80095f6 <__ascii_mbtowc+0x1a>
 80095e4:	b14b      	cbz	r3, 80095fa <__ascii_mbtowc+0x1e>
 80095e6:	7813      	ldrb	r3, [r2, #0]
 80095e8:	600b      	str	r3, [r1, #0]
 80095ea:	7812      	ldrb	r2, [r2, #0]
 80095ec:	1e10      	subs	r0, r2, #0
 80095ee:	bf18      	it	ne
 80095f0:	2001      	movne	r0, #1
 80095f2:	b002      	add	sp, #8
 80095f4:	4770      	bx	lr
 80095f6:	4610      	mov	r0, r2
 80095f8:	e7fb      	b.n	80095f2 <__ascii_mbtowc+0x16>
 80095fa:	f06f 0001 	mvn.w	r0, #1
 80095fe:	e7f8      	b.n	80095f2 <__ascii_mbtowc+0x16>

08009600 <_realloc_r>:
 8009600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009604:	4607      	mov	r7, r0
 8009606:	4614      	mov	r4, r2
 8009608:	460d      	mov	r5, r1
 800960a:	b921      	cbnz	r1, 8009616 <_realloc_r+0x16>
 800960c:	4611      	mov	r1, r2
 800960e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009612:	f7fe bfaf 	b.w	8008574 <_malloc_r>
 8009616:	b92a      	cbnz	r2, 8009624 <_realloc_r+0x24>
 8009618:	f7fe ff3a 	bl	8008490 <_free_r>
 800961c:	4625      	mov	r5, r4
 800961e:	4628      	mov	r0, r5
 8009620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009624:	f000 f841 	bl	80096aa <_malloc_usable_size_r>
 8009628:	4284      	cmp	r4, r0
 800962a:	4606      	mov	r6, r0
 800962c:	d802      	bhi.n	8009634 <_realloc_r+0x34>
 800962e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009632:	d8f4      	bhi.n	800961e <_realloc_r+0x1e>
 8009634:	4621      	mov	r1, r4
 8009636:	4638      	mov	r0, r7
 8009638:	f7fe ff9c 	bl	8008574 <_malloc_r>
 800963c:	4680      	mov	r8, r0
 800963e:	b908      	cbnz	r0, 8009644 <_realloc_r+0x44>
 8009640:	4645      	mov	r5, r8
 8009642:	e7ec      	b.n	800961e <_realloc_r+0x1e>
 8009644:	42b4      	cmp	r4, r6
 8009646:	4622      	mov	r2, r4
 8009648:	4629      	mov	r1, r5
 800964a:	bf28      	it	cs
 800964c:	4632      	movcs	r2, r6
 800964e:	f7ff ff85 	bl	800955c <memcpy>
 8009652:	4629      	mov	r1, r5
 8009654:	4638      	mov	r0, r7
 8009656:	f7fe ff1b 	bl	8008490 <_free_r>
 800965a:	e7f1      	b.n	8009640 <_realloc_r+0x40>

0800965c <__ascii_wctomb>:
 800965c:	4603      	mov	r3, r0
 800965e:	4608      	mov	r0, r1
 8009660:	b141      	cbz	r1, 8009674 <__ascii_wctomb+0x18>
 8009662:	2aff      	cmp	r2, #255	@ 0xff
 8009664:	d904      	bls.n	8009670 <__ascii_wctomb+0x14>
 8009666:	228a      	movs	r2, #138	@ 0x8a
 8009668:	f04f 30ff 	mov.w	r0, #4294967295
 800966c:	601a      	str	r2, [r3, #0]
 800966e:	4770      	bx	lr
 8009670:	2001      	movs	r0, #1
 8009672:	700a      	strb	r2, [r1, #0]
 8009674:	4770      	bx	lr
	...

08009678 <fiprintf>:
 8009678:	b40e      	push	{r1, r2, r3}
 800967a:	b503      	push	{r0, r1, lr}
 800967c:	4601      	mov	r1, r0
 800967e:	ab03      	add	r3, sp, #12
 8009680:	4805      	ldr	r0, [pc, #20]	@ (8009698 <fiprintf+0x20>)
 8009682:	f853 2b04 	ldr.w	r2, [r3], #4
 8009686:	6800      	ldr	r0, [r0, #0]
 8009688:	9301      	str	r3, [sp, #4]
 800968a:	f7ff fcf9 	bl	8009080 <_vfiprintf_r>
 800968e:	b002      	add	sp, #8
 8009690:	f85d eb04 	ldr.w	lr, [sp], #4
 8009694:	b003      	add	sp, #12
 8009696:	4770      	bx	lr
 8009698:	2000004c 	.word	0x2000004c

0800969c <abort>:
 800969c:	2006      	movs	r0, #6
 800969e:	b508      	push	{r3, lr}
 80096a0:	f000 f834 	bl	800970c <raise>
 80096a4:	2001      	movs	r0, #1
 80096a6:	f7f9 f8fe 	bl	80028a6 <_exit>

080096aa <_malloc_usable_size_r>:
 80096aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096ae:	1f18      	subs	r0, r3, #4
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	bfbc      	itt	lt
 80096b4:	580b      	ldrlt	r3, [r1, r0]
 80096b6:	18c0      	addlt	r0, r0, r3
 80096b8:	4770      	bx	lr

080096ba <_raise_r>:
 80096ba:	291f      	cmp	r1, #31
 80096bc:	b538      	push	{r3, r4, r5, lr}
 80096be:	4605      	mov	r5, r0
 80096c0:	460c      	mov	r4, r1
 80096c2:	d904      	bls.n	80096ce <_raise_r+0x14>
 80096c4:	2316      	movs	r3, #22
 80096c6:	6003      	str	r3, [r0, #0]
 80096c8:	f04f 30ff 	mov.w	r0, #4294967295
 80096cc:	bd38      	pop	{r3, r4, r5, pc}
 80096ce:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80096d0:	b112      	cbz	r2, 80096d8 <_raise_r+0x1e>
 80096d2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80096d6:	b94b      	cbnz	r3, 80096ec <_raise_r+0x32>
 80096d8:	4628      	mov	r0, r5
 80096da:	f000 f831 	bl	8009740 <_getpid_r>
 80096de:	4622      	mov	r2, r4
 80096e0:	4601      	mov	r1, r0
 80096e2:	4628      	mov	r0, r5
 80096e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096e8:	f000 b818 	b.w	800971c <_kill_r>
 80096ec:	2b01      	cmp	r3, #1
 80096ee:	d00a      	beq.n	8009706 <_raise_r+0x4c>
 80096f0:	1c59      	adds	r1, r3, #1
 80096f2:	d103      	bne.n	80096fc <_raise_r+0x42>
 80096f4:	2316      	movs	r3, #22
 80096f6:	6003      	str	r3, [r0, #0]
 80096f8:	2001      	movs	r0, #1
 80096fa:	e7e7      	b.n	80096cc <_raise_r+0x12>
 80096fc:	2100      	movs	r1, #0
 80096fe:	4620      	mov	r0, r4
 8009700:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009704:	4798      	blx	r3
 8009706:	2000      	movs	r0, #0
 8009708:	e7e0      	b.n	80096cc <_raise_r+0x12>
	...

0800970c <raise>:
 800970c:	4b02      	ldr	r3, [pc, #8]	@ (8009718 <raise+0xc>)
 800970e:	4601      	mov	r1, r0
 8009710:	6818      	ldr	r0, [r3, #0]
 8009712:	f7ff bfd2 	b.w	80096ba <_raise_r>
 8009716:	bf00      	nop
 8009718:	2000004c 	.word	0x2000004c

0800971c <_kill_r>:
 800971c:	b538      	push	{r3, r4, r5, lr}
 800971e:	2300      	movs	r3, #0
 8009720:	4d06      	ldr	r5, [pc, #24]	@ (800973c <_kill_r+0x20>)
 8009722:	4604      	mov	r4, r0
 8009724:	4608      	mov	r0, r1
 8009726:	4611      	mov	r1, r2
 8009728:	602b      	str	r3, [r5, #0]
 800972a:	f7f9 f8ac 	bl	8002886 <_kill>
 800972e:	1c43      	adds	r3, r0, #1
 8009730:	d102      	bne.n	8009738 <_kill_r+0x1c>
 8009732:	682b      	ldr	r3, [r5, #0]
 8009734:	b103      	cbz	r3, 8009738 <_kill_r+0x1c>
 8009736:	6023      	str	r3, [r4, #0]
 8009738:	bd38      	pop	{r3, r4, r5, pc}
 800973a:	bf00      	nop
 800973c:	200005d8 	.word	0x200005d8

08009740 <_getpid_r>:
 8009740:	f7f9 b89a 	b.w	8002878 <_getpid>

08009744 <_init>:
 8009744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009746:	bf00      	nop
 8009748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800974a:	bc08      	pop	{r3}
 800974c:	469e      	mov	lr, r3
 800974e:	4770      	bx	lr

08009750 <_fini>:
 8009750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009752:	bf00      	nop
 8009754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009756:	bc08      	pop	{r3}
 8009758:	469e      	mov	lr, r3
 800975a:	4770      	bx	lr
