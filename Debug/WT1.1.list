
WT1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d6d8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000984  0800d7e8  0800d7e8  0000e7e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e16c  0800e16c  00010234  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e16c  0800e16c  0000f16c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e174  0800e174  00010234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e174  0800e174  0000f174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e178  0800e178  0000f178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000234  20000000  0800e17c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005dc  20000234  0800e3b0  00010234  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000810  0800e3b0  00010810  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010234  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d9a  00000000  00000000  0001025d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046db  00000000  00000000  00029ff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001978  00000000  00000000  0002e6d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013fc  00000000  00000000  00030050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c7a7  00000000  00000000  0003144c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fd25  00000000  00000000  0004dbf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099a2c  00000000  00000000  0006d918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00107344  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007de0  00000000  00000000  00107388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0010f168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000234 	.word	0x20000234
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d7d0 	.word	0x0800d7d0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000238 	.word	0x20000238
 800014c:	0800d7d0 	.word	0x0800d7d0

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_frsub>:
 8000a9c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000aa0:	e002      	b.n	8000aa8 <__addsf3>
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_fsub>:
 8000aa4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000aa8 <__addsf3>:
 8000aa8:	0042      	lsls	r2, r0, #1
 8000aaa:	bf1f      	itttt	ne
 8000aac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ab0:	ea92 0f03 	teqne	r2, r3
 8000ab4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ab8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000abc:	d06a      	beq.n	8000b94 <__addsf3+0xec>
 8000abe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ac2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ac6:	bfc1      	itttt	gt
 8000ac8:	18d2      	addgt	r2, r2, r3
 8000aca:	4041      	eorgt	r1, r0
 8000acc:	4048      	eorgt	r0, r1
 8000ace:	4041      	eorgt	r1, r0
 8000ad0:	bfb8      	it	lt
 8000ad2:	425b      	neglt	r3, r3
 8000ad4:	2b19      	cmp	r3, #25
 8000ad6:	bf88      	it	hi
 8000ad8:	4770      	bxhi	lr
 8000ada:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000ade:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ae6:	bf18      	it	ne
 8000ae8:	4240      	negne	r0, r0
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aee:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000af2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000af6:	bf18      	it	ne
 8000af8:	4249      	negne	r1, r1
 8000afa:	ea92 0f03 	teq	r2, r3
 8000afe:	d03f      	beq.n	8000b80 <__addsf3+0xd8>
 8000b00:	f1a2 0201 	sub.w	r2, r2, #1
 8000b04:	fa41 fc03 	asr.w	ip, r1, r3
 8000b08:	eb10 000c 	adds.w	r0, r0, ip
 8000b0c:	f1c3 0320 	rsb	r3, r3, #32
 8000b10:	fa01 f103 	lsl.w	r1, r1, r3
 8000b14:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b18:	d502      	bpl.n	8000b20 <__addsf3+0x78>
 8000b1a:	4249      	negs	r1, r1
 8000b1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b20:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b24:	d313      	bcc.n	8000b4e <__addsf3+0xa6>
 8000b26:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b2a:	d306      	bcc.n	8000b3a <__addsf3+0x92>
 8000b2c:	0840      	lsrs	r0, r0, #1
 8000b2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b32:	f102 0201 	add.w	r2, r2, #1
 8000b36:	2afe      	cmp	r2, #254	@ 0xfe
 8000b38:	d251      	bcs.n	8000bde <__addsf3+0x136>
 8000b3a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b42:	bf08      	it	eq
 8000b44:	f020 0001 	biceq.w	r0, r0, #1
 8000b48:	ea40 0003 	orr.w	r0, r0, r3
 8000b4c:	4770      	bx	lr
 8000b4e:	0049      	lsls	r1, r1, #1
 8000b50:	eb40 0000 	adc.w	r0, r0, r0
 8000b54:	3a01      	subs	r2, #1
 8000b56:	bf28      	it	cs
 8000b58:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b5c:	d2ed      	bcs.n	8000b3a <__addsf3+0x92>
 8000b5e:	fab0 fc80 	clz	ip, r0
 8000b62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b66:	ebb2 020c 	subs.w	r2, r2, ip
 8000b6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b6e:	bfaa      	itet	ge
 8000b70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b74:	4252      	neglt	r2, r2
 8000b76:	4318      	orrge	r0, r3
 8000b78:	bfbc      	itt	lt
 8000b7a:	40d0      	lsrlt	r0, r2
 8000b7c:	4318      	orrlt	r0, r3
 8000b7e:	4770      	bx	lr
 8000b80:	f092 0f00 	teq	r2, #0
 8000b84:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b88:	bf06      	itte	eq
 8000b8a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b8e:	3201      	addeq	r2, #1
 8000b90:	3b01      	subne	r3, #1
 8000b92:	e7b5      	b.n	8000b00 <__addsf3+0x58>
 8000b94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b9c:	bf18      	it	ne
 8000b9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba2:	d021      	beq.n	8000be8 <__addsf3+0x140>
 8000ba4:	ea92 0f03 	teq	r2, r3
 8000ba8:	d004      	beq.n	8000bb4 <__addsf3+0x10c>
 8000baa:	f092 0f00 	teq	r2, #0
 8000bae:	bf08      	it	eq
 8000bb0:	4608      	moveq	r0, r1
 8000bb2:	4770      	bx	lr
 8000bb4:	ea90 0f01 	teq	r0, r1
 8000bb8:	bf1c      	itt	ne
 8000bba:	2000      	movne	r0, #0
 8000bbc:	4770      	bxne	lr
 8000bbe:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bc2:	d104      	bne.n	8000bce <__addsf3+0x126>
 8000bc4:	0040      	lsls	r0, r0, #1
 8000bc6:	bf28      	it	cs
 8000bc8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bcc:	4770      	bx	lr
 8000bce:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bd2:	bf3c      	itt	cc
 8000bd4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bd8:	4770      	bxcc	lr
 8000bda:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bde:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000be6:	4770      	bx	lr
 8000be8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bec:	bf16      	itet	ne
 8000bee:	4608      	movne	r0, r1
 8000bf0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bf4:	4601      	movne	r1, r0
 8000bf6:	0242      	lsls	r2, r0, #9
 8000bf8:	bf06      	itte	eq
 8000bfa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bfe:	ea90 0f01 	teqeq	r0, r1
 8000c02:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_ui2f>:
 8000c08:	f04f 0300 	mov.w	r3, #0
 8000c0c:	e004      	b.n	8000c18 <__aeabi_i2f+0x8>
 8000c0e:	bf00      	nop

08000c10 <__aeabi_i2f>:
 8000c10:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c14:	bf48      	it	mi
 8000c16:	4240      	negmi	r0, r0
 8000c18:	ea5f 0c00 	movs.w	ip, r0
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c24:	4601      	mov	r1, r0
 8000c26:	f04f 0000 	mov.w	r0, #0
 8000c2a:	e01c      	b.n	8000c66 <__aeabi_l2f+0x2a>

08000c2c <__aeabi_ul2f>:
 8000c2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c30:	bf08      	it	eq
 8000c32:	4770      	bxeq	lr
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e00a      	b.n	8000c50 <__aeabi_l2f+0x14>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_l2f>:
 8000c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c48:	d502      	bpl.n	8000c50 <__aeabi_l2f+0x14>
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	ea5f 0c01 	movs.w	ip, r1
 8000c54:	bf02      	ittt	eq
 8000c56:	4684      	moveq	ip, r0
 8000c58:	4601      	moveq	r1, r0
 8000c5a:	2000      	moveq	r0, #0
 8000c5c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c60:	bf08      	it	eq
 8000c62:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c66:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c6a:	fabc f28c 	clz	r2, ip
 8000c6e:	3a08      	subs	r2, #8
 8000c70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c74:	db10      	blt.n	8000c98 <__aeabi_l2f+0x5c>
 8000c76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c80:	f1c2 0220 	rsb	r2, r2, #32
 8000c84:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c88:	fa20 f202 	lsr.w	r2, r0, r2
 8000c8c:	eb43 0002 	adc.w	r0, r3, r2
 8000c90:	bf08      	it	eq
 8000c92:	f020 0001 	biceq.w	r0, r0, #1
 8000c96:	4770      	bx	lr
 8000c98:	f102 0220 	add.w	r2, r2, #32
 8000c9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca0:	f1c2 0220 	rsb	r2, r2, #32
 8000ca4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ca8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cac:	eb43 0002 	adc.w	r0, r3, r2
 8000cb0:	bf08      	it	eq
 8000cb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_fmul>:
 8000cb8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000cbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cc0:	bf1e      	ittt	ne
 8000cc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cc6:	ea92 0f0c 	teqne	r2, ip
 8000cca:	ea93 0f0c 	teqne	r3, ip
 8000cce:	d06f      	beq.n	8000db0 <__aeabi_fmul+0xf8>
 8000cd0:	441a      	add	r2, r3
 8000cd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000cd6:	0240      	lsls	r0, r0, #9
 8000cd8:	bf18      	it	ne
 8000cda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cde:	d01e      	beq.n	8000d1e <__aeabi_fmul+0x66>
 8000ce0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000ce4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ce8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cec:	fba0 3101 	umull	r3, r1, r0, r1
 8000cf0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000cf4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000cf8:	bf3e      	ittt	cc
 8000cfa:	0049      	lslcc	r1, r1, #1
 8000cfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d00:	005b      	lslcc	r3, r3, #1
 8000d02:	ea40 0001 	orr.w	r0, r0, r1
 8000d06:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d0a:	2afd      	cmp	r2, #253	@ 0xfd
 8000d0c:	d81d      	bhi.n	8000d4a <__aeabi_fmul+0x92>
 8000d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d16:	bf08      	it	eq
 8000d18:	f020 0001 	biceq.w	r0, r0, #1
 8000d1c:	4770      	bx	lr
 8000d1e:	f090 0f00 	teq	r0, #0
 8000d22:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d26:	bf08      	it	eq
 8000d28:	0249      	lsleq	r1, r1, #9
 8000d2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d32:	3a7f      	subs	r2, #127	@ 0x7f
 8000d34:	bfc2      	ittt	gt
 8000d36:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d3e:	4770      	bxgt	lr
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	dc5d      	bgt.n	8000e08 <__aeabi_fmul+0x150>
 8000d4c:	f112 0f19 	cmn.w	r2, #25
 8000d50:	bfdc      	itt	le
 8000d52:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d56:	4770      	bxle	lr
 8000d58:	f1c2 0200 	rsb	r2, r2, #0
 8000d5c:	0041      	lsls	r1, r0, #1
 8000d5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d62:	f1c2 0220 	rsb	r2, r2, #32
 8000d66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d6e:	f140 0000 	adc.w	r0, r0, #0
 8000d72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d76:	bf08      	it	eq
 8000d78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7c:	4770      	bx	lr
 8000d7e:	f092 0f00 	teq	r2, #0
 8000d82:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d86:	bf02      	ittt	eq
 8000d88:	0040      	lsleq	r0, r0, #1
 8000d8a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d8e:	3a01      	subeq	r2, #1
 8000d90:	d0f9      	beq.n	8000d86 <__aeabi_fmul+0xce>
 8000d92:	ea40 000c 	orr.w	r0, r0, ip
 8000d96:	f093 0f00 	teq	r3, #0
 8000d9a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d9e:	bf02      	ittt	eq
 8000da0:	0049      	lsleq	r1, r1, #1
 8000da2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000da6:	3b01      	subeq	r3, #1
 8000da8:	d0f9      	beq.n	8000d9e <__aeabi_fmul+0xe6>
 8000daa:	ea41 010c 	orr.w	r1, r1, ip
 8000dae:	e78f      	b.n	8000cd0 <__aeabi_fmul+0x18>
 8000db0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000db4:	ea92 0f0c 	teq	r2, ip
 8000db8:	bf18      	it	ne
 8000dba:	ea93 0f0c 	teqne	r3, ip
 8000dbe:	d00a      	beq.n	8000dd6 <__aeabi_fmul+0x11e>
 8000dc0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000dc4:	bf18      	it	ne
 8000dc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000dca:	d1d8      	bne.n	8000d7e <__aeabi_fmul+0xc6>
 8000dcc:	ea80 0001 	eor.w	r0, r0, r1
 8000dd0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dd4:	4770      	bx	lr
 8000dd6:	f090 0f00 	teq	r0, #0
 8000dda:	bf17      	itett	ne
 8000ddc:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000de0:	4608      	moveq	r0, r1
 8000de2:	f091 0f00 	teqne	r1, #0
 8000de6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dea:	d014      	beq.n	8000e16 <__aeabi_fmul+0x15e>
 8000dec:	ea92 0f0c 	teq	r2, ip
 8000df0:	d101      	bne.n	8000df6 <__aeabi_fmul+0x13e>
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	d10f      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000df6:	ea93 0f0c 	teq	r3, ip
 8000dfa:	d103      	bne.n	8000e04 <__aeabi_fmul+0x14c>
 8000dfc:	024b      	lsls	r3, r1, #9
 8000dfe:	bf18      	it	ne
 8000e00:	4608      	movne	r0, r1
 8000e02:	d108      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000e04:	ea80 0001 	eor.w	r0, r0, r1
 8000e08:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e0c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e10:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e14:	4770      	bx	lr
 8000e16:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e1a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e1e:	4770      	bx	lr

08000e20 <__aeabi_fdiv>:
 8000e20:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e28:	bf1e      	ittt	ne
 8000e2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e2e:	ea92 0f0c 	teqne	r2, ip
 8000e32:	ea93 0f0c 	teqne	r3, ip
 8000e36:	d069      	beq.n	8000f0c <__aeabi_fdiv+0xec>
 8000e38:	eba2 0203 	sub.w	r2, r2, r3
 8000e3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e40:	0249      	lsls	r1, r1, #9
 8000e42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e46:	d037      	beq.n	8000eb8 <__aeabi_fdiv+0x98>
 8000e48:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e54:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	bf38      	it	cc
 8000e5c:	005b      	lslcc	r3, r3, #1
 8000e5e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e62:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e66:	428b      	cmp	r3, r1
 8000e68:	bf24      	itt	cs
 8000e6a:	1a5b      	subcs	r3, r3, r1
 8000e6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e74:	bf24      	itt	cs
 8000e76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e82:	bf24      	itt	cs
 8000e84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e9a:	011b      	lsls	r3, r3, #4
 8000e9c:	bf18      	it	ne
 8000e9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ea2:	d1e0      	bne.n	8000e66 <__aeabi_fdiv+0x46>
 8000ea4:	2afd      	cmp	r2, #253	@ 0xfd
 8000ea6:	f63f af50 	bhi.w	8000d4a <__aeabi_fmul+0x92>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eb0:	bf08      	it	eq
 8000eb2:	f020 0001 	biceq.w	r0, r0, #1
 8000eb6:	4770      	bx	lr
 8000eb8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ebc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ec0:	327f      	adds	r2, #127	@ 0x7f
 8000ec2:	bfc2      	ittt	gt
 8000ec4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ec8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ecc:	4770      	bxgt	lr
 8000ece:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ed2:	f04f 0300 	mov.w	r3, #0
 8000ed6:	3a01      	subs	r2, #1
 8000ed8:	e737      	b.n	8000d4a <__aeabi_fmul+0x92>
 8000eda:	f092 0f00 	teq	r2, #0
 8000ede:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0040      	lsleq	r0, r0, #1
 8000ee6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000eea:	3a01      	subeq	r2, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fdiv+0xc2>
 8000eee:	ea40 000c 	orr.w	r0, r0, ip
 8000ef2:	f093 0f00 	teq	r3, #0
 8000ef6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000efa:	bf02      	ittt	eq
 8000efc:	0049      	lsleq	r1, r1, #1
 8000efe:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f02:	3b01      	subeq	r3, #1
 8000f04:	d0f9      	beq.n	8000efa <__aeabi_fdiv+0xda>
 8000f06:	ea41 010c 	orr.w	r1, r1, ip
 8000f0a:	e795      	b.n	8000e38 <__aeabi_fdiv+0x18>
 8000f0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f10:	ea92 0f0c 	teq	r2, ip
 8000f14:	d108      	bne.n	8000f28 <__aeabi_fdiv+0x108>
 8000f16:	0242      	lsls	r2, r0, #9
 8000f18:	f47f af7d 	bne.w	8000e16 <__aeabi_fmul+0x15e>
 8000f1c:	ea93 0f0c 	teq	r3, ip
 8000f20:	f47f af70 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f24:	4608      	mov	r0, r1
 8000f26:	e776      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f28:	ea93 0f0c 	teq	r3, ip
 8000f2c:	d104      	bne.n	8000f38 <__aeabi_fdiv+0x118>
 8000f2e:	024b      	lsls	r3, r1, #9
 8000f30:	f43f af4c 	beq.w	8000dcc <__aeabi_fmul+0x114>
 8000f34:	4608      	mov	r0, r1
 8000f36:	e76e      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f38:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f3c:	bf18      	it	ne
 8000f3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f42:	d1ca      	bne.n	8000eda <__aeabi_fdiv+0xba>
 8000f44:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f48:	f47f af5c 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f4c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f50:	f47f af3c 	bne.w	8000dcc <__aeabi_fmul+0x114>
 8000f54:	e75f      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f56:	bf00      	nop

08000f58 <__gesf2>:
 8000f58:	f04f 3cff 	mov.w	ip, #4294967295
 8000f5c:	e006      	b.n	8000f6c <__cmpsf2+0x4>
 8000f5e:	bf00      	nop

08000f60 <__lesf2>:
 8000f60:	f04f 0c01 	mov.w	ip, #1
 8000f64:	e002      	b.n	8000f6c <__cmpsf2+0x4>
 8000f66:	bf00      	nop

08000f68 <__cmpsf2>:
 8000f68:	f04f 0c01 	mov.w	ip, #1
 8000f6c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f70:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f7c:	bf18      	it	ne
 8000f7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f82:	d011      	beq.n	8000fa8 <__cmpsf2+0x40>
 8000f84:	b001      	add	sp, #4
 8000f86:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f8a:	bf18      	it	ne
 8000f8c:	ea90 0f01 	teqne	r0, r1
 8000f90:	bf58      	it	pl
 8000f92:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f96:	bf88      	it	hi
 8000f98:	17c8      	asrhi	r0, r1, #31
 8000f9a:	bf38      	it	cc
 8000f9c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fa0:	bf18      	it	ne
 8000fa2:	f040 0001 	orrne.w	r0, r0, #1
 8000fa6:	4770      	bx	lr
 8000fa8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fac:	d102      	bne.n	8000fb4 <__cmpsf2+0x4c>
 8000fae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fb2:	d105      	bne.n	8000fc0 <__cmpsf2+0x58>
 8000fb4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fb8:	d1e4      	bne.n	8000f84 <__cmpsf2+0x1c>
 8000fba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fbe:	d0e1      	beq.n	8000f84 <__cmpsf2+0x1c>
 8000fc0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <__aeabi_cfrcmple>:
 8000fc8:	4684      	mov	ip, r0
 8000fca:	4608      	mov	r0, r1
 8000fcc:	4661      	mov	r1, ip
 8000fce:	e7ff      	b.n	8000fd0 <__aeabi_cfcmpeq>

08000fd0 <__aeabi_cfcmpeq>:
 8000fd0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fd2:	f7ff ffc9 	bl	8000f68 <__cmpsf2>
 8000fd6:	2800      	cmp	r0, #0
 8000fd8:	bf48      	it	mi
 8000fda:	f110 0f00 	cmnmi.w	r0, #0
 8000fde:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fe0 <__aeabi_fcmpeq>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff fff4 	bl	8000fd0 <__aeabi_cfcmpeq>
 8000fe8:	bf0c      	ite	eq
 8000fea:	2001      	moveq	r0, #1
 8000fec:	2000      	movne	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmplt>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffea 	bl	8000fd0 <__aeabi_cfcmpeq>
 8000ffc:	bf34      	ite	cc
 8000ffe:	2001      	movcc	r0, #1
 8001000:	2000      	movcs	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmple>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffe0 	bl	8000fd0 <__aeabi_cfcmpeq>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpge>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffd2 	bl	8000fc8 <__aeabi_cfrcmple>
 8001024:	bf94      	ite	ls
 8001026:	2001      	movls	r0, #1
 8001028:	2000      	movhi	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_fcmpgt>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff ffc8 	bl	8000fc8 <__aeabi_cfrcmple>
 8001038:	bf34      	ite	cc
 800103a:	2001      	movcc	r0, #1
 800103c:	2000      	movcs	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_fcmpun>:
 8001044:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001048:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800104c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001050:	d102      	bne.n	8001058 <__aeabi_fcmpun+0x14>
 8001052:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001056:	d108      	bne.n	800106a <__aeabi_fcmpun+0x26>
 8001058:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800105c:	d102      	bne.n	8001064 <__aeabi_fcmpun+0x20>
 800105e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001062:	d102      	bne.n	800106a <__aeabi_fcmpun+0x26>
 8001064:	f04f 0000 	mov.w	r0, #0
 8001068:	4770      	bx	lr
 800106a:	f04f 0001 	mov.w	r0, #1
 800106e:	4770      	bx	lr

08001070 <__aeabi_f2uiz>:
 8001070:	0042      	lsls	r2, r0, #1
 8001072:	d20e      	bcs.n	8001092 <__aeabi_f2uiz+0x22>
 8001074:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001078:	d30b      	bcc.n	8001092 <__aeabi_f2uiz+0x22>
 800107a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800107e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001082:	d409      	bmi.n	8001098 <__aeabi_f2uiz+0x28>
 8001084:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001088:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800108c:	fa23 f002 	lsr.w	r0, r3, r2
 8001090:	4770      	bx	lr
 8001092:	f04f 0000 	mov.w	r0, #0
 8001096:	4770      	bx	lr
 8001098:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800109c:	d101      	bne.n	80010a2 <__aeabi_f2uiz+0x32>
 800109e:	0242      	lsls	r2, r0, #9
 80010a0:	d102      	bne.n	80010a8 <__aeabi_f2uiz+0x38>
 80010a2:	f04f 30ff 	mov.w	r0, #4294967295
 80010a6:	4770      	bx	lr
 80010a8:	f04f 0000 	mov.w	r0, #0
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop

080010b0 <__aeabi_uldivmod>:
 80010b0:	b953      	cbnz	r3, 80010c8 <__aeabi_uldivmod+0x18>
 80010b2:	b94a      	cbnz	r2, 80010c8 <__aeabi_uldivmod+0x18>
 80010b4:	2900      	cmp	r1, #0
 80010b6:	bf08      	it	eq
 80010b8:	2800      	cmpeq	r0, #0
 80010ba:	bf1c      	itt	ne
 80010bc:	f04f 31ff 	movne.w	r1, #4294967295
 80010c0:	f04f 30ff 	movne.w	r0, #4294967295
 80010c4:	f000 b98c 	b.w	80013e0 <__aeabi_idiv0>
 80010c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80010cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010d0:	f000 f806 	bl	80010e0 <__udivmoddi4>
 80010d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010dc:	b004      	add	sp, #16
 80010de:	4770      	bx	lr

080010e0 <__udivmoddi4>:
 80010e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010e4:	9d08      	ldr	r5, [sp, #32]
 80010e6:	468e      	mov	lr, r1
 80010e8:	4604      	mov	r4, r0
 80010ea:	4688      	mov	r8, r1
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d14a      	bne.n	8001186 <__udivmoddi4+0xa6>
 80010f0:	428a      	cmp	r2, r1
 80010f2:	4617      	mov	r7, r2
 80010f4:	d962      	bls.n	80011bc <__udivmoddi4+0xdc>
 80010f6:	fab2 f682 	clz	r6, r2
 80010fa:	b14e      	cbz	r6, 8001110 <__udivmoddi4+0x30>
 80010fc:	f1c6 0320 	rsb	r3, r6, #32
 8001100:	fa01 f806 	lsl.w	r8, r1, r6
 8001104:	fa20 f303 	lsr.w	r3, r0, r3
 8001108:	40b7      	lsls	r7, r6
 800110a:	ea43 0808 	orr.w	r8, r3, r8
 800110e:	40b4      	lsls	r4, r6
 8001110:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001114:	fbb8 f1fe 	udiv	r1, r8, lr
 8001118:	fa1f fc87 	uxth.w	ip, r7
 800111c:	fb0e 8811 	mls	r8, lr, r1, r8
 8001120:	fb01 f20c 	mul.w	r2, r1, ip
 8001124:	0c23      	lsrs	r3, r4, #16
 8001126:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800112a:	429a      	cmp	r2, r3
 800112c:	d909      	bls.n	8001142 <__udivmoddi4+0x62>
 800112e:	18fb      	adds	r3, r7, r3
 8001130:	f101 30ff 	add.w	r0, r1, #4294967295
 8001134:	f080 80eb 	bcs.w	800130e <__udivmoddi4+0x22e>
 8001138:	429a      	cmp	r2, r3
 800113a:	f240 80e8 	bls.w	800130e <__udivmoddi4+0x22e>
 800113e:	3902      	subs	r1, #2
 8001140:	443b      	add	r3, r7
 8001142:	1a9a      	subs	r2, r3, r2
 8001144:	fbb2 f0fe 	udiv	r0, r2, lr
 8001148:	fb0e 2210 	mls	r2, lr, r0, r2
 800114c:	fb00 fc0c 	mul.w	ip, r0, ip
 8001150:	b2a3      	uxth	r3, r4
 8001152:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001156:	459c      	cmp	ip, r3
 8001158:	d909      	bls.n	800116e <__udivmoddi4+0x8e>
 800115a:	18fb      	adds	r3, r7, r3
 800115c:	f100 32ff 	add.w	r2, r0, #4294967295
 8001160:	f080 80d7 	bcs.w	8001312 <__udivmoddi4+0x232>
 8001164:	459c      	cmp	ip, r3
 8001166:	f240 80d4 	bls.w	8001312 <__udivmoddi4+0x232>
 800116a:	443b      	add	r3, r7
 800116c:	3802      	subs	r0, #2
 800116e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001172:	2100      	movs	r1, #0
 8001174:	eba3 030c 	sub.w	r3, r3, ip
 8001178:	b11d      	cbz	r5, 8001182 <__udivmoddi4+0xa2>
 800117a:	2200      	movs	r2, #0
 800117c:	40f3      	lsrs	r3, r6
 800117e:	e9c5 3200 	strd	r3, r2, [r5]
 8001182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001186:	428b      	cmp	r3, r1
 8001188:	d905      	bls.n	8001196 <__udivmoddi4+0xb6>
 800118a:	b10d      	cbz	r5, 8001190 <__udivmoddi4+0xb0>
 800118c:	e9c5 0100 	strd	r0, r1, [r5]
 8001190:	2100      	movs	r1, #0
 8001192:	4608      	mov	r0, r1
 8001194:	e7f5      	b.n	8001182 <__udivmoddi4+0xa2>
 8001196:	fab3 f183 	clz	r1, r3
 800119a:	2900      	cmp	r1, #0
 800119c:	d146      	bne.n	800122c <__udivmoddi4+0x14c>
 800119e:	4573      	cmp	r3, lr
 80011a0:	d302      	bcc.n	80011a8 <__udivmoddi4+0xc8>
 80011a2:	4282      	cmp	r2, r0
 80011a4:	f200 8108 	bhi.w	80013b8 <__udivmoddi4+0x2d8>
 80011a8:	1a84      	subs	r4, r0, r2
 80011aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80011ae:	2001      	movs	r0, #1
 80011b0:	4690      	mov	r8, r2
 80011b2:	2d00      	cmp	r5, #0
 80011b4:	d0e5      	beq.n	8001182 <__udivmoddi4+0xa2>
 80011b6:	e9c5 4800 	strd	r4, r8, [r5]
 80011ba:	e7e2      	b.n	8001182 <__udivmoddi4+0xa2>
 80011bc:	2a00      	cmp	r2, #0
 80011be:	f000 8091 	beq.w	80012e4 <__udivmoddi4+0x204>
 80011c2:	fab2 f682 	clz	r6, r2
 80011c6:	2e00      	cmp	r6, #0
 80011c8:	f040 80a5 	bne.w	8001316 <__udivmoddi4+0x236>
 80011cc:	1a8a      	subs	r2, r1, r2
 80011ce:	2101      	movs	r1, #1
 80011d0:	0c03      	lsrs	r3, r0, #16
 80011d2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80011d6:	b280      	uxth	r0, r0
 80011d8:	b2bc      	uxth	r4, r7
 80011da:	fbb2 fcfe 	udiv	ip, r2, lr
 80011de:	fb0e 221c 	mls	r2, lr, ip, r2
 80011e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80011e6:	fb04 f20c 	mul.w	r2, r4, ip
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d907      	bls.n	80011fe <__udivmoddi4+0x11e>
 80011ee:	18fb      	adds	r3, r7, r3
 80011f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80011f4:	d202      	bcs.n	80011fc <__udivmoddi4+0x11c>
 80011f6:	429a      	cmp	r2, r3
 80011f8:	f200 80e3 	bhi.w	80013c2 <__udivmoddi4+0x2e2>
 80011fc:	46c4      	mov	ip, r8
 80011fe:	1a9b      	subs	r3, r3, r2
 8001200:	fbb3 f2fe 	udiv	r2, r3, lr
 8001204:	fb0e 3312 	mls	r3, lr, r2, r3
 8001208:	fb02 f404 	mul.w	r4, r2, r4
 800120c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8001210:	429c      	cmp	r4, r3
 8001212:	d907      	bls.n	8001224 <__udivmoddi4+0x144>
 8001214:	18fb      	adds	r3, r7, r3
 8001216:	f102 30ff 	add.w	r0, r2, #4294967295
 800121a:	d202      	bcs.n	8001222 <__udivmoddi4+0x142>
 800121c:	429c      	cmp	r4, r3
 800121e:	f200 80cd 	bhi.w	80013bc <__udivmoddi4+0x2dc>
 8001222:	4602      	mov	r2, r0
 8001224:	1b1b      	subs	r3, r3, r4
 8001226:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800122a:	e7a5      	b.n	8001178 <__udivmoddi4+0x98>
 800122c:	f1c1 0620 	rsb	r6, r1, #32
 8001230:	408b      	lsls	r3, r1
 8001232:	fa22 f706 	lsr.w	r7, r2, r6
 8001236:	431f      	orrs	r7, r3
 8001238:	fa2e fa06 	lsr.w	sl, lr, r6
 800123c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8001240:	fbba f8f9 	udiv	r8, sl, r9
 8001244:	fa0e fe01 	lsl.w	lr, lr, r1
 8001248:	fa20 f306 	lsr.w	r3, r0, r6
 800124c:	fb09 aa18 	mls	sl, r9, r8, sl
 8001250:	fa1f fc87 	uxth.w	ip, r7
 8001254:	ea43 030e 	orr.w	r3, r3, lr
 8001258:	fa00 fe01 	lsl.w	lr, r0, r1
 800125c:	fb08 f00c 	mul.w	r0, r8, ip
 8001260:	0c1c      	lsrs	r4, r3, #16
 8001262:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001266:	42a0      	cmp	r0, r4
 8001268:	fa02 f201 	lsl.w	r2, r2, r1
 800126c:	d90a      	bls.n	8001284 <__udivmoddi4+0x1a4>
 800126e:	193c      	adds	r4, r7, r4
 8001270:	f108 3aff 	add.w	sl, r8, #4294967295
 8001274:	f080 809e 	bcs.w	80013b4 <__udivmoddi4+0x2d4>
 8001278:	42a0      	cmp	r0, r4
 800127a:	f240 809b 	bls.w	80013b4 <__udivmoddi4+0x2d4>
 800127e:	f1a8 0802 	sub.w	r8, r8, #2
 8001282:	443c      	add	r4, r7
 8001284:	1a24      	subs	r4, r4, r0
 8001286:	b298      	uxth	r0, r3
 8001288:	fbb4 f3f9 	udiv	r3, r4, r9
 800128c:	fb09 4413 	mls	r4, r9, r3, r4
 8001290:	fb03 fc0c 	mul.w	ip, r3, ip
 8001294:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8001298:	45a4      	cmp	ip, r4
 800129a:	d909      	bls.n	80012b0 <__udivmoddi4+0x1d0>
 800129c:	193c      	adds	r4, r7, r4
 800129e:	f103 30ff 	add.w	r0, r3, #4294967295
 80012a2:	f080 8085 	bcs.w	80013b0 <__udivmoddi4+0x2d0>
 80012a6:	45a4      	cmp	ip, r4
 80012a8:	f240 8082 	bls.w	80013b0 <__udivmoddi4+0x2d0>
 80012ac:	3b02      	subs	r3, #2
 80012ae:	443c      	add	r4, r7
 80012b0:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80012b4:	eba4 040c 	sub.w	r4, r4, ip
 80012b8:	fba0 8c02 	umull	r8, ip, r0, r2
 80012bc:	4564      	cmp	r4, ip
 80012be:	4643      	mov	r3, r8
 80012c0:	46e1      	mov	r9, ip
 80012c2:	d364      	bcc.n	800138e <__udivmoddi4+0x2ae>
 80012c4:	d061      	beq.n	800138a <__udivmoddi4+0x2aa>
 80012c6:	b15d      	cbz	r5, 80012e0 <__udivmoddi4+0x200>
 80012c8:	ebbe 0203 	subs.w	r2, lr, r3
 80012cc:	eb64 0409 	sbc.w	r4, r4, r9
 80012d0:	fa04 f606 	lsl.w	r6, r4, r6
 80012d4:	fa22 f301 	lsr.w	r3, r2, r1
 80012d8:	431e      	orrs	r6, r3
 80012da:	40cc      	lsrs	r4, r1
 80012dc:	e9c5 6400 	strd	r6, r4, [r5]
 80012e0:	2100      	movs	r1, #0
 80012e2:	e74e      	b.n	8001182 <__udivmoddi4+0xa2>
 80012e4:	fbb1 fcf2 	udiv	ip, r1, r2
 80012e8:	0c01      	lsrs	r1, r0, #16
 80012ea:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80012ee:	b280      	uxth	r0, r0
 80012f0:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80012f4:	463b      	mov	r3, r7
 80012f6:	fbb1 f1f7 	udiv	r1, r1, r7
 80012fa:	4638      	mov	r0, r7
 80012fc:	463c      	mov	r4, r7
 80012fe:	46b8      	mov	r8, r7
 8001300:	46be      	mov	lr, r7
 8001302:	2620      	movs	r6, #32
 8001304:	eba2 0208 	sub.w	r2, r2, r8
 8001308:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800130c:	e765      	b.n	80011da <__udivmoddi4+0xfa>
 800130e:	4601      	mov	r1, r0
 8001310:	e717      	b.n	8001142 <__udivmoddi4+0x62>
 8001312:	4610      	mov	r0, r2
 8001314:	e72b      	b.n	800116e <__udivmoddi4+0x8e>
 8001316:	f1c6 0120 	rsb	r1, r6, #32
 800131a:	fa2e fc01 	lsr.w	ip, lr, r1
 800131e:	40b7      	lsls	r7, r6
 8001320:	fa0e fe06 	lsl.w	lr, lr, r6
 8001324:	fa20 f101 	lsr.w	r1, r0, r1
 8001328:	ea41 010e 	orr.w	r1, r1, lr
 800132c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001330:	fbbc f8fe 	udiv	r8, ip, lr
 8001334:	b2bc      	uxth	r4, r7
 8001336:	fb0e cc18 	mls	ip, lr, r8, ip
 800133a:	fb08 f904 	mul.w	r9, r8, r4
 800133e:	0c0a      	lsrs	r2, r1, #16
 8001340:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8001344:	40b0      	lsls	r0, r6
 8001346:	4591      	cmp	r9, r2
 8001348:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800134c:	b280      	uxth	r0, r0
 800134e:	d93e      	bls.n	80013ce <__udivmoddi4+0x2ee>
 8001350:	18ba      	adds	r2, r7, r2
 8001352:	f108 3cff 	add.w	ip, r8, #4294967295
 8001356:	d201      	bcs.n	800135c <__udivmoddi4+0x27c>
 8001358:	4591      	cmp	r9, r2
 800135a:	d81f      	bhi.n	800139c <__udivmoddi4+0x2bc>
 800135c:	eba2 0209 	sub.w	r2, r2, r9
 8001360:	fbb2 f9fe 	udiv	r9, r2, lr
 8001364:	fb09 f804 	mul.w	r8, r9, r4
 8001368:	fb0e 2a19 	mls	sl, lr, r9, r2
 800136c:	b28a      	uxth	r2, r1
 800136e:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 8001372:	4542      	cmp	r2, r8
 8001374:	d229      	bcs.n	80013ca <__udivmoddi4+0x2ea>
 8001376:	18ba      	adds	r2, r7, r2
 8001378:	f109 31ff 	add.w	r1, r9, #4294967295
 800137c:	d2c2      	bcs.n	8001304 <__udivmoddi4+0x224>
 800137e:	4542      	cmp	r2, r8
 8001380:	d2c0      	bcs.n	8001304 <__udivmoddi4+0x224>
 8001382:	f1a9 0102 	sub.w	r1, r9, #2
 8001386:	443a      	add	r2, r7
 8001388:	e7bc      	b.n	8001304 <__udivmoddi4+0x224>
 800138a:	45c6      	cmp	lr, r8
 800138c:	d29b      	bcs.n	80012c6 <__udivmoddi4+0x1e6>
 800138e:	ebb8 0302 	subs.w	r3, r8, r2
 8001392:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001396:	3801      	subs	r0, #1
 8001398:	46e1      	mov	r9, ip
 800139a:	e794      	b.n	80012c6 <__udivmoddi4+0x1e6>
 800139c:	eba7 0909 	sub.w	r9, r7, r9
 80013a0:	444a      	add	r2, r9
 80013a2:	fbb2 f9fe 	udiv	r9, r2, lr
 80013a6:	f1a8 0c02 	sub.w	ip, r8, #2
 80013aa:	fb09 f804 	mul.w	r8, r9, r4
 80013ae:	e7db      	b.n	8001368 <__udivmoddi4+0x288>
 80013b0:	4603      	mov	r3, r0
 80013b2:	e77d      	b.n	80012b0 <__udivmoddi4+0x1d0>
 80013b4:	46d0      	mov	r8, sl
 80013b6:	e765      	b.n	8001284 <__udivmoddi4+0x1a4>
 80013b8:	4608      	mov	r0, r1
 80013ba:	e6fa      	b.n	80011b2 <__udivmoddi4+0xd2>
 80013bc:	443b      	add	r3, r7
 80013be:	3a02      	subs	r2, #2
 80013c0:	e730      	b.n	8001224 <__udivmoddi4+0x144>
 80013c2:	f1ac 0c02 	sub.w	ip, ip, #2
 80013c6:	443b      	add	r3, r7
 80013c8:	e719      	b.n	80011fe <__udivmoddi4+0x11e>
 80013ca:	4649      	mov	r1, r9
 80013cc:	e79a      	b.n	8001304 <__udivmoddi4+0x224>
 80013ce:	eba2 0209 	sub.w	r2, r2, r9
 80013d2:	fbb2 f9fe 	udiv	r9, r2, lr
 80013d6:	46c4      	mov	ip, r8
 80013d8:	fb09 f804 	mul.w	r8, r9, r4
 80013dc:	e7c4      	b.n	8001368 <__udivmoddi4+0x288>
 80013de:	bf00      	nop

080013e0 <__aeabi_idiv0>:
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop

080013e4 <median3>:
static uint8_t s_haveExtFeed   = 0;
static float   s_extVadcVolts  = 0.0f;

/* ============ Helpers ============ */
static float median3(float a, float b, float c)
{
 80013e4:	b590      	push	{r4, r7, lr}
 80013e6:	b089      	sub	sp, #36	@ 0x24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
    // branchless median-of-3
    float ab = (a + b - fabsf(a - b)) * 0.5f; // min(a,b)
 80013f0:	68b9      	ldr	r1, [r7, #8]
 80013f2:	68f8      	ldr	r0, [r7, #12]
 80013f4:	f7ff fb58 	bl	8000aa8 <__addsf3>
 80013f8:	4603      	mov	r3, r0
 80013fa:	461c      	mov	r4, r3
 80013fc:	68b9      	ldr	r1, [r7, #8]
 80013fe:	68f8      	ldr	r0, [r7, #12]
 8001400:	f7ff fb50 	bl	8000aa4 <__aeabi_fsub>
 8001404:	4603      	mov	r3, r0
 8001406:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800140a:	4619      	mov	r1, r3
 800140c:	4620      	mov	r0, r4
 800140e:	f7ff fb49 	bl	8000aa4 <__aeabi_fsub>
 8001412:	4603      	mov	r3, r0
 8001414:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff fc4d 	bl	8000cb8 <__aeabi_fmul>
 800141e:	4603      	mov	r3, r0
 8001420:	61fb      	str	r3, [r7, #28]
    float AB = (a + b + fabsf(a - b)) * 0.5f; // max(a,b)
 8001422:	68b9      	ldr	r1, [r7, #8]
 8001424:	68f8      	ldr	r0, [r7, #12]
 8001426:	f7ff fb3f 	bl	8000aa8 <__addsf3>
 800142a:	4603      	mov	r3, r0
 800142c:	461c      	mov	r4, r3
 800142e:	68b9      	ldr	r1, [r7, #8]
 8001430:	68f8      	ldr	r0, [r7, #12]
 8001432:	f7ff fb37 	bl	8000aa4 <__aeabi_fsub>
 8001436:	4603      	mov	r3, r0
 8001438:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800143c:	4619      	mov	r1, r3
 800143e:	4620      	mov	r0, r4
 8001440:	f7ff fb32 	bl	8000aa8 <__addsf3>
 8001444:	4603      	mov	r3, r0
 8001446:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff fc34 	bl	8000cb8 <__aeabi_fmul>
 8001450:	4603      	mov	r3, r0
 8001452:	61bb      	str	r3, [r7, #24]
    float m  = (AB + c - fabsf(AB - c)) * 0.5f; // min(max(a,b), c)
 8001454:	6879      	ldr	r1, [r7, #4]
 8001456:	69b8      	ldr	r0, [r7, #24]
 8001458:	f7ff fb26 	bl	8000aa8 <__addsf3>
 800145c:	4603      	mov	r3, r0
 800145e:	461c      	mov	r4, r3
 8001460:	6879      	ldr	r1, [r7, #4]
 8001462:	69b8      	ldr	r0, [r7, #24]
 8001464:	f7ff fb1e 	bl	8000aa4 <__aeabi_fsub>
 8001468:	4603      	mov	r3, r0
 800146a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800146e:	4619      	mov	r1, r3
 8001470:	4620      	mov	r0, r4
 8001472:	f7ff fb17 	bl	8000aa4 <__aeabi_fsub>
 8001476:	4603      	mov	r3, r0
 8001478:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff fc1b 	bl	8000cb8 <__aeabi_fmul>
 8001482:	4603      	mov	r3, r0
 8001484:	617b      	str	r3, [r7, #20]
    // max(min(a,b), min(max(a,b), c))
    return (ab + m + fabsf(ab - m)) * 0.5f;
 8001486:	6979      	ldr	r1, [r7, #20]
 8001488:	69f8      	ldr	r0, [r7, #28]
 800148a:	f7ff fb0d 	bl	8000aa8 <__addsf3>
 800148e:	4603      	mov	r3, r0
 8001490:	461c      	mov	r4, r3
 8001492:	6979      	ldr	r1, [r7, #20]
 8001494:	69f8      	ldr	r0, [r7, #28]
 8001496:	f7ff fb05 	bl	8000aa4 <__aeabi_fsub>
 800149a:	4603      	mov	r3, r0
 800149c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80014a0:	4619      	mov	r1, r3
 80014a2:	4620      	mov	r0, r4
 80014a4:	f7ff fb00 	bl	8000aa8 <__addsf3>
 80014a8:	4603      	mov	r3, r0
 80014aa:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff fc02 	bl	8000cb8 <__aeabi_fmul>
 80014b4:	4603      	mov	r3, r0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3724      	adds	r7, #36	@ 0x24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd90      	pop	{r4, r7, pc}
	...

080014c0 <ReadAverageVoltage>:

static float ReadAverageVoltage(uint32_t channel, uint8_t samples)
{
 80014c0:	b590      	push	{r4, r7, lr}
 80014c2:	b089      	sub	sp, #36	@ 0x24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	70fb      	strb	r3, [r7, #3]
    ADC_ChannelConfTypeDef sConfig = {0};
 80014cc:	f107 0308 	add.w	r3, r7, #8
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
    sConfig.Channel      = channel;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	60bb      	str	r3, [r7, #8]
    sConfig.Rank         = ADC_REGULAR_RANK_1;
 80014dc:	2301      	movs	r3, #1
 80014de:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = ADC_POLL_SAMPLETIME;
 80014e0:	2304      	movs	r3, #4
 80014e2:	613b      	str	r3, [r7, #16]
    HAL_ADC_ConfigChannel(s_hadc, &sConfig);
 80014e4:	4b25      	ldr	r3, [pc, #148]	@ (800157c <ReadAverageVoltage+0xbc>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f107 0208 	add.w	r2, r7, #8
 80014ec:	4611      	mov	r1, r2
 80014ee:	4618      	mov	r0, r3
 80014f0:	f005 f91c 	bl	800672c <HAL_ADC_ConfigChannel>

    uint32_t sum = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < samples; i++) {
 80014f8:	2300      	movs	r3, #0
 80014fa:	76fb      	strb	r3, [r7, #27]
 80014fc:	e01c      	b.n	8001538 <ReadAverageVoltage+0x78>
        HAL_ADC_Start(s_hadc);
 80014fe:	4b1f      	ldr	r3, [pc, #124]	@ (800157c <ReadAverageVoltage+0xbc>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f004 fe5e 	bl	80061c4 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(s_hadc, HAL_MAX_DELAY);
 8001508:	4b1c      	ldr	r3, [pc, #112]	@ (800157c <ReadAverageVoltage+0xbc>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f04f 31ff 	mov.w	r1, #4294967295
 8001510:	4618      	mov	r0, r3
 8001512:	f004 ff31 	bl	8006378 <HAL_ADC_PollForConversion>
        sum += HAL_ADC_GetValue(s_hadc);
 8001516:	4b19      	ldr	r3, [pc, #100]	@ (800157c <ReadAverageVoltage+0xbc>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4618      	mov	r0, r3
 800151c:	f005 f832 	bl	8006584 <HAL_ADC_GetValue>
 8001520:	4602      	mov	r2, r0
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	4413      	add	r3, r2
 8001526:	61fb      	str	r3, [r7, #28]
        HAL_ADC_Stop(s_hadc);
 8001528:	4b14      	ldr	r3, [pc, #80]	@ (800157c <ReadAverageVoltage+0xbc>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f004 fef7 	bl	8006320 <HAL_ADC_Stop>
    for (uint8_t i = 0; i < samples; i++) {
 8001532:	7efb      	ldrb	r3, [r7, #27]
 8001534:	3301      	adds	r3, #1
 8001536:	76fb      	strb	r3, [r7, #27]
 8001538:	7efa      	ldrb	r2, [r7, #27]
 800153a:	78fb      	ldrb	r3, [r7, #3]
 800153c:	429a      	cmp	r2, r3
 800153e:	d3de      	bcc.n	80014fe <ReadAverageVoltage+0x3e>
    }
    float avg = (float)sum / samples;
 8001540:	69f8      	ldr	r0, [r7, #28]
 8001542:	f7ff fb61 	bl	8000c08 <__aeabi_ui2f>
 8001546:	4604      	mov	r4, r0
 8001548:	78fb      	ldrb	r3, [r7, #3]
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff fb60 	bl	8000c10 <__aeabi_i2f>
 8001550:	4603      	mov	r3, r0
 8001552:	4619      	mov	r1, r3
 8001554:	4620      	mov	r0, r4
 8001556:	f7ff fc63 	bl	8000e20 <__aeabi_fdiv>
 800155a:	4603      	mov	r3, r0
 800155c:	617b      	str	r3, [r7, #20]
    return (avg * ACS712_VREF_ADC) / ACS712_ADC_RESOLUTION;  // Volts
 800155e:	4908      	ldr	r1, [pc, #32]	@ (8001580 <ReadAverageVoltage+0xc0>)
 8001560:	6978      	ldr	r0, [r7, #20]
 8001562:	f7ff fba9 	bl	8000cb8 <__aeabi_fmul>
 8001566:	4603      	mov	r3, r0
 8001568:	4906      	ldr	r1, [pc, #24]	@ (8001584 <ReadAverageVoltage+0xc4>)
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff fc58 	bl	8000e20 <__aeabi_fdiv>
 8001570:	4603      	mov	r3, r0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3724      	adds	r7, #36	@ 0x24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd90      	pop	{r4, r7, pc}
 800157a:	bf00      	nop
 800157c:	20000258 	.word	0x20000258
 8001580:	40533333 	.word	0x40533333
 8001584:	457ff000 	.word	0x457ff000

08001588 <instant_current_A_fromV>:

static float instant_current_A_fromV(float v_adc)
{
 8001588:	b590      	push	{r4, r7, lr}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
    float dv = v_adc - s_zeroOffset_V;
 8001590:	4b1c      	ldr	r3, [pc, #112]	@ (8001604 <instant_current_A_fromV+0x7c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4619      	mov	r1, r3
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7ff fa84 	bl	8000aa4 <__aeabi_fsub>
 800159c:	4603      	mov	r3, r0
 800159e:	60fb      	str	r3, [r7, #12]
    float iA = (dv / ACS712_SENSITIVITY_RAW) * s_gain_A_per_A;  // <-- your formula + gain
 80015a0:	4919      	ldr	r1, [pc, #100]	@ (8001608 <instant_current_A_fromV+0x80>)
 80015a2:	68f8      	ldr	r0, [r7, #12]
 80015a4:	f7ff fc3c 	bl	8000e20 <__aeabi_fdiv>
 80015a8:	4603      	mov	r3, r0
 80015aa:	461a      	mov	r2, r3
 80015ac:	4b17      	ldr	r3, [pc, #92]	@ (800160c <instant_current_A_fromV+0x84>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4619      	mov	r1, r3
 80015b2:	4610      	mov	r0, r2
 80015b4:	f7ff fb80 	bl	8000cb8 <__aeabi_fmul>
 80015b8:	4603      	mov	r3, r0
 80015ba:	60bb      	str	r3, [r7, #8]

    // slow zero tracking only when near zero current
    if (fabsf(iA) < ZERO_TRACK_THRESH_A) {
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80015c2:	4913      	ldr	r1, [pc, #76]	@ (8001610 <instant_current_A_fromV+0x88>)
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff fd15 	bl	8000ff4 <__aeabi_fcmplt>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d014      	beq.n	80015fa <instant_current_A_fromV+0x72>
        s_zeroOffset_V = (1.0f - ZERO_TRACK_ALPHA)*s_zeroOffset_V + ZERO_TRACK_ALPHA*v_adc;
 80015d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001604 <instant_current_A_fromV+0x7c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	490f      	ldr	r1, [pc, #60]	@ (8001614 <instant_current_A_fromV+0x8c>)
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff fb6e 	bl	8000cb8 <__aeabi_fmul>
 80015dc:	4603      	mov	r3, r0
 80015de:	461c      	mov	r4, r3
 80015e0:	490d      	ldr	r1, [pc, #52]	@ (8001618 <instant_current_A_fromV+0x90>)
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7ff fb68 	bl	8000cb8 <__aeabi_fmul>
 80015e8:	4603      	mov	r3, r0
 80015ea:	4619      	mov	r1, r3
 80015ec:	4620      	mov	r0, r4
 80015ee:	f7ff fa5b 	bl	8000aa8 <__addsf3>
 80015f2:	4603      	mov	r3, r0
 80015f4:	461a      	mov	r2, r3
 80015f6:	4b03      	ldr	r3, [pc, #12]	@ (8001604 <instant_current_A_fromV+0x7c>)
 80015f8:	601a      	str	r2, [r3, #0]
        // don’t force to zero here; let the filters handle it
    }
    return iA;
 80015fa:	68bb      	ldr	r3, [r7, #8]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	bd90      	pop	{r4, r7, pc}
 8001604:	2000025c 	.word	0x2000025c
 8001608:	3dcccccd 	.word	0x3dcccccd
 800160c:	20000000 	.word	0x20000000
 8001610:	3e19999a 	.word	0x3e19999a
 8001614:	3f7f9db2 	.word	0x3f7f9db2
 8001618:	3ac49ba6 	.word	0x3ac49ba6

0800161c <ACS712_Init>:

/* ============ Public API ============ */
void ACS712_Init(ADC_HandleTypeDef *hadc)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
    s_hadc = hadc;
 8001624:	4a0e      	ldr	r2, [pc, #56]	@ (8001660 <ACS712_Init+0x44>)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6013      	str	r3, [r2, #0]
    HAL_Delay(300);
 800162a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800162e:	f004 fccd 	bl	8005fcc <HAL_Delay>
    ACS712_CalibrateZero();
 8001632:	f000 f81f 	bl	8001674 <ACS712_CalibrateZero>
    s_gain_A_per_A = 1.0f;
 8001636:	4b0b      	ldr	r3, [pc, #44]	@ (8001664 <ACS712_Init+0x48>)
 8001638:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800163c:	601a      	str	r2, [r3, #0]
    s_rms2_iir     = 0.0f;
 800163e:	4b0a      	ldr	r3, [pc, #40]	@ (8001668 <ACS712_Init+0x4c>)
 8001640:	f04f 0200 	mov.w	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
    s_lastCurrent_A= 0.0f;
 8001646:	4b09      	ldr	r3, [pc, #36]	@ (800166c <ACS712_Init+0x50>)
 8001648:	f04f 0200 	mov.w	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
    g_currentA     = 0.0f;
 800164e:	4b08      	ldr	r3, [pc, #32]	@ (8001670 <ACS712_Init+0x54>)
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000258 	.word	0x20000258
 8001664:	20000000 	.word	0x20000000
 8001668:	20000264 	.word	0x20000264
 800166c:	20000260 	.word	0x20000260
 8001670:	20000250 	.word	0x20000250

08001674 <ACS712_CalibrateZero>:

void ACS712_CalibrateZero(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
    // No-load calibration
    const uint16_t samples = 300;
 800167a:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800167e:	813b      	strh	r3, [r7, #8]
    float sum = 0.0f;
 8001680:	f04f 0300 	mov.w	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
    for (uint16_t i = 0; i < samples; i++) {
 8001686:	2300      	movs	r3, #0
 8001688:	817b      	strh	r3, [r7, #10]
 800168a:	e015      	b.n	80016b8 <ACS712_CalibrateZero+0x44>
#ifdef ACS712_ADC_CHANNEL
        float v = s_haveExtFeed ? s_extVadcVolts : ReadAverageVoltage(ACS712_ADC_CHANNEL, POLL_SAMPLES);
 800168c:	4b1b      	ldr	r3, [pc, #108]	@ (80016fc <ACS712_CalibrateZero+0x88>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d105      	bne.n	80016a0 <ACS712_CalibrateZero+0x2c>
 8001694:	2101      	movs	r1, #1
 8001696:	2007      	movs	r0, #7
 8001698:	f7ff ff12 	bl	80014c0 <ReadAverageVoltage>
 800169c:	4603      	mov	r3, r0
 800169e:	e001      	b.n	80016a4 <ACS712_CalibrateZero+0x30>
 80016a0:	4b17      	ldr	r3, [pc, #92]	@ (8001700 <ACS712_CalibrateZero+0x8c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	607b      	str	r3, [r7, #4]
#else
        float v = s_extVadcVolts;
#endif
        sum += v;
 80016a6:	6879      	ldr	r1, [r7, #4]
 80016a8:	68f8      	ldr	r0, [r7, #12]
 80016aa:	f7ff f9fd 	bl	8000aa8 <__addsf3>
 80016ae:	4603      	mov	r3, r0
 80016b0:	60fb      	str	r3, [r7, #12]
    for (uint16_t i = 0; i < samples; i++) {
 80016b2:	897b      	ldrh	r3, [r7, #10]
 80016b4:	3301      	adds	r3, #1
 80016b6:	817b      	strh	r3, [r7, #10]
 80016b8:	897a      	ldrh	r2, [r7, #10]
 80016ba:	893b      	ldrh	r3, [r7, #8]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d3e5      	bcc.n	800168c <ACS712_CalibrateZero+0x18>
    }
    s_zeroOffset_V = sum / samples;
 80016c0:	893b      	ldrh	r3, [r7, #8]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff faa4 	bl	8000c10 <__aeabi_i2f>
 80016c8:	4603      	mov	r3, r0
 80016ca:	4619      	mov	r1, r3
 80016cc:	68f8      	ldr	r0, [r7, #12]
 80016ce:	f7ff fba7 	bl	8000e20 <__aeabi_fdiv>
 80016d2:	4603      	mov	r3, r0
 80016d4:	461a      	mov	r2, r3
 80016d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001704 <ACS712_CalibrateZero+0x90>)
 80016d8:	601a      	str	r2, [r3, #0]

    // reset filters
    s_rms2_iir      = 0.0f;
 80016da:	4b0b      	ldr	r3, [pc, #44]	@ (8001708 <ACS712_CalibrateZero+0x94>)
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
    s_lastCurrent_A = 0.0f;
 80016e2:	4b0a      	ldr	r3, [pc, #40]	@ (800170c <ACS712_CalibrateZero+0x98>)
 80016e4:	f04f 0200 	mov.w	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
    g_currentA      = 0.0f;
 80016ea:	4b09      	ldr	r3, [pc, #36]	@ (8001710 <ACS712_CalibrateZero+0x9c>)
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
}
 80016f2:	bf00      	nop
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000268 	.word	0x20000268
 8001700:	2000026c 	.word	0x2000026c
 8001704:	2000025c 	.word	0x2000025c
 8001708:	20000264 	.word	0x20000264
 800170c:	20000260 	.word	0x20000260
 8001710:	20000250 	.word	0x20000250

08001714 <ACS712_ReadCurrent>:
    s_haveExtFeed  = 1;
}

/* Fast, low-latency current read */
float ACS712_ReadCurrent(void)
{
 8001714:	b590      	push	{r4, r7, lr}
 8001716:	b089      	sub	sp, #36	@ 0x24
 8001718:	af00      	add	r7, sp, #0
#ifdef ACS712_ADC_CHANNEL
    float v0 = s_haveExtFeed ? s_extVadcVolts : ReadAverageVoltage(ACS712_ADC_CHANNEL, POLL_SAMPLES);
 800171a:	4b3f      	ldr	r3, [pc, #252]	@ (8001818 <ACS712_ReadCurrent+0x104>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d105      	bne.n	800172e <ACS712_ReadCurrent+0x1a>
 8001722:	2101      	movs	r1, #1
 8001724:	2007      	movs	r0, #7
 8001726:	f7ff fecb 	bl	80014c0 <ReadAverageVoltage>
 800172a:	4603      	mov	r3, r0
 800172c:	e001      	b.n	8001732 <ACS712_ReadCurrent+0x1e>
 800172e:	4b3b      	ldr	r3, [pc, #236]	@ (800181c <ACS712_ReadCurrent+0x108>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	61bb      	str	r3, [r7, #24]
    float v1 = s_haveExtFeed ? s_extVadcVolts : ReadAverageVoltage(ACS712_ADC_CHANNEL, POLL_SAMPLES);
 8001734:	4b38      	ldr	r3, [pc, #224]	@ (8001818 <ACS712_ReadCurrent+0x104>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d105      	bne.n	8001748 <ACS712_ReadCurrent+0x34>
 800173c:	2101      	movs	r1, #1
 800173e:	2007      	movs	r0, #7
 8001740:	f7ff febe 	bl	80014c0 <ReadAverageVoltage>
 8001744:	4603      	mov	r3, r0
 8001746:	e001      	b.n	800174c <ACS712_ReadCurrent+0x38>
 8001748:	4b34      	ldr	r3, [pc, #208]	@ (800181c <ACS712_ReadCurrent+0x108>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	617b      	str	r3, [r7, #20]
    float v2 = s_haveExtFeed ? s_extVadcVolts : ReadAverageVoltage(ACS712_ADC_CHANNEL, POLL_SAMPLES);
 800174e:	4b32      	ldr	r3, [pc, #200]	@ (8001818 <ACS712_ReadCurrent+0x104>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d105      	bne.n	8001762 <ACS712_ReadCurrent+0x4e>
 8001756:	2101      	movs	r1, #1
 8001758:	2007      	movs	r0, #7
 800175a:	f7ff feb1 	bl	80014c0 <ReadAverageVoltage>
 800175e:	4603      	mov	r3, r0
 8001760:	e001      	b.n	8001766 <ACS712_ReadCurrent+0x52>
 8001762:	4b2e      	ldr	r3, [pc, #184]	@ (800181c <ACS712_ReadCurrent+0x108>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	613b      	str	r3, [r7, #16]
#else
    float v0 = s_extVadcVolts, v1 = s_extVadcVolts, v2 = s_extVadcVolts;
#endif
    float v_med = median3(v0, v1, v2);
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	6979      	ldr	r1, [r7, #20]
 800176c:	69b8      	ldr	r0, [r7, #24]
 800176e:	f7ff fe39 	bl	80013e4 <median3>
 8001772:	60f8      	str	r0, [r7, #12]

    // Instantaneous A (formula + gain)
    float i_inst = instant_current_A_fromV(v_med);
 8001774:	68f8      	ldr	r0, [r7, #12]
 8001776:	f7ff ff07 	bl	8001588 <instant_current_A_fromV>
 800177a:	60b8      	str	r0, [r7, #8]

    // IIR RMS on squared current (fast & stable), then light EMA
    s_rms2_iir = (1.0f - IIR_RMS_BETA) * s_rms2_iir + IIR_RMS_BETA * (i_inst * i_inst);
 800177c:	4b28      	ldr	r3, [pc, #160]	@ (8001820 <ACS712_ReadCurrent+0x10c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f04f 517d 	mov.w	r1, #1061158912	@ 0x3f400000
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff fa97 	bl	8000cb8 <__aeabi_fmul>
 800178a:	4603      	mov	r3, r0
 800178c:	461c      	mov	r4, r3
 800178e:	68b9      	ldr	r1, [r7, #8]
 8001790:	68b8      	ldr	r0, [r7, #8]
 8001792:	f7ff fa91 	bl	8000cb8 <__aeabi_fmul>
 8001796:	4603      	mov	r3, r0
 8001798:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff fa8b 	bl	8000cb8 <__aeabi_fmul>
 80017a2:	4603      	mov	r3, r0
 80017a4:	4619      	mov	r1, r3
 80017a6:	4620      	mov	r0, r4
 80017a8:	f7ff f97e 	bl	8000aa8 <__addsf3>
 80017ac:	4603      	mov	r3, r0
 80017ae:	461a      	mov	r2, r3
 80017b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001820 <ACS712_ReadCurrent+0x10c>)
 80017b2:	601a      	str	r2, [r3, #0]
    float i_rms = sqrtf(s_rms2_iir);
 80017b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001820 <ACS712_ReadCurrent+0x10c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f00b ff7f 	bl	800d6bc <sqrtf>
 80017be:	6078      	str	r0, [r7, #4]

    float i_out = (1.0f - EMA_ALPHA_FINAL) * s_lastCurrent_A + EMA_ALPHA_FINAL * i_rms;
 80017c0:	4b18      	ldr	r3, [pc, #96]	@ (8001824 <ACS712_ReadCurrent+0x110>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4918      	ldr	r1, [pc, #96]	@ (8001828 <ACS712_ReadCurrent+0x114>)
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff fa76 	bl	8000cb8 <__aeabi_fmul>
 80017cc:	4603      	mov	r3, r0
 80017ce:	461c      	mov	r4, r3
 80017d0:	4916      	ldr	r1, [pc, #88]	@ (800182c <ACS712_ReadCurrent+0x118>)
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff fa70 	bl	8000cb8 <__aeabi_fmul>
 80017d8:	4603      	mov	r3, r0
 80017da:	4619      	mov	r1, r3
 80017dc:	4620      	mov	r0, r4
 80017de:	f7ff f963 	bl	8000aa8 <__addsf3>
 80017e2:	4603      	mov	r3, r0
 80017e4:	61fb      	str	r3, [r7, #28]

    // Dead-zone clamp for tiny residuals
    if (fabsf(i_out) < NOISE_DEADZONE_A) i_out = 0.0f;
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80017ec:	4910      	ldr	r1, [pc, #64]	@ (8001830 <ACS712_ReadCurrent+0x11c>)
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff fc00 	bl	8000ff4 <__aeabi_fcmplt>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d002      	beq.n	8001800 <ACS712_ReadCurrent+0xec>
 80017fa:	f04f 0300 	mov.w	r3, #0
 80017fe:	61fb      	str	r3, [r7, #28]

    s_lastCurrent_A = i_out;
 8001800:	4a08      	ldr	r2, [pc, #32]	@ (8001824 <ACS712_ReadCurrent+0x110>)
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	6013      	str	r3, [r2, #0]
    g_currentA      = i_out;
 8001806:	4a0b      	ldr	r2, [pc, #44]	@ (8001834 <ACS712_ReadCurrent+0x120>)
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	6013      	str	r3, [r2, #0]
    return i_out;
 800180c:	69fb      	ldr	r3, [r7, #28]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3724      	adds	r7, #36	@ 0x24
 8001812:	46bd      	mov	sp, r7
 8001814:	bd90      	pop	{r4, r7, pc}
 8001816:	bf00      	nop
 8001818:	20000268 	.word	0x20000268
 800181c:	2000026c 	.word	0x2000026c
 8001820:	20000264 	.word	0x20000264
 8001824:	20000260 	.word	0x20000260
 8001828:	3f3851ec 	.word	0x3f3851ec
 800182c:	3e8f5c29 	.word	0x3e8f5c29
 8001830:	3cf5c28f 	.word	0x3cf5c28f
 8001834:	20000250 	.word	0x20000250

08001838 <Voltage_ReadInput>:

/* Optional voltage divider read */
float Voltage_ReadInput(void)
{
 8001838:	b590      	push	{r4, r7, lr}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
#ifdef VOLTAGE_ADC_CHANNEL
    float vAdc = ReadAverageVoltage(VOLTAGE_ADC_CHANNEL, 3);
 800183e:	2103      	movs	r1, #3
 8001840:	2006      	movs	r0, #6
 8001842:	f7ff fe3d 	bl	80014c0 <ReadAverageVoltage>
 8001846:	6078      	str	r0, [r7, #4]
    float vIn  = vAdc / VOLT_DIVIDER_RATIO;
 8001848:	4910      	ldr	r1, [pc, #64]	@ (800188c <Voltage_ReadInput+0x54>)
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f7ff fae8 	bl	8000e20 <__aeabi_fdiv>
 8001850:	4603      	mov	r3, r0
 8001852:	603b      	str	r3, [r7, #0]
    // Light EMA reuse
    g_voltageV = (1.0f - EMA_ALPHA_FINAL) * g_voltageV + EMA_ALPHA_FINAL * vIn;
 8001854:	4b0e      	ldr	r3, [pc, #56]	@ (8001890 <Voltage_ReadInput+0x58>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	490e      	ldr	r1, [pc, #56]	@ (8001894 <Voltage_ReadInput+0x5c>)
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff fa2c 	bl	8000cb8 <__aeabi_fmul>
 8001860:	4603      	mov	r3, r0
 8001862:	461c      	mov	r4, r3
 8001864:	490c      	ldr	r1, [pc, #48]	@ (8001898 <Voltage_ReadInput+0x60>)
 8001866:	6838      	ldr	r0, [r7, #0]
 8001868:	f7ff fa26 	bl	8000cb8 <__aeabi_fmul>
 800186c:	4603      	mov	r3, r0
 800186e:	4619      	mov	r1, r3
 8001870:	4620      	mov	r0, r4
 8001872:	f7ff f919 	bl	8000aa8 <__addsf3>
 8001876:	4603      	mov	r3, r0
 8001878:	461a      	mov	r2, r3
 800187a:	4b05      	ldr	r3, [pc, #20]	@ (8001890 <Voltage_ReadInput+0x58>)
 800187c:	601a      	str	r2, [r3, #0]
    return g_voltageV;
 800187e:	4b04      	ldr	r3, [pc, #16]	@ (8001890 <Voltage_ReadInput+0x58>)
 8001880:	681b      	ldr	r3, [r3, #0]
#else
    return 0.0f;
#endif
}
 8001882:	4618      	mov	r0, r3
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	bd90      	pop	{r4, r7, pc}
 800188a:	bf00      	nop
 800188c:	3f58f2fb 	.word	0x3f58f2fb
 8001890:	20000254 	.word	0x20000254
 8001894:	3f3851ec 	.word	0x3f3851ec
 8001898:	3e8f5c29 	.word	0x3e8f5c29

0800189c <ACS712_Update>:

void ACS712_Update(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
    g_currentA = ACS712_ReadCurrent();
 80018a0:	f7ff ff38 	bl	8001714 <ACS712_ReadCurrent>
 80018a4:	4603      	mov	r3, r0
 80018a6:	4a04      	ldr	r2, [pc, #16]	@ (80018b8 <ACS712_Update+0x1c>)
 80018a8:	6013      	str	r3, [r2, #0]
#ifdef VOLTAGE_ADC_CHANNEL
    g_voltageV = Voltage_ReadInput();
 80018aa:	f7ff ffc5 	bl	8001838 <Voltage_ReadInput>
 80018ae:	4603      	mov	r3, r0
 80018b0:	4a02      	ldr	r2, [pc, #8]	@ (80018bc <ACS712_Update+0x20>)
 80018b2:	6013      	str	r3, [r2, #0]
#endif
}
 80018b4:	bf00      	nop
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20000250 	.word	0x20000250
 80018bc:	20000254 	.word	0x20000254

080018c0 <readChannelVoltage>:

static char dataPacketTx[16];

/* --- helper: sample one channel --- */
static float readChannelVoltage(ADC_HandleTypeDef *hadc, uint32_t channel)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b088      	sub	sp, #32
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
    ADC_ChannelConfTypeDef sConfig = {0};
 80018ca:	f107 030c 	add.w	r3, r7, #12
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	605a      	str	r2, [r3, #4]
 80018d4:	609a      	str	r2, [r3, #8]
    sConfig.Channel = channel;
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	60fb      	str	r3, [r7, #12]
    sConfig.Rank = 1;
 80018da:	2301      	movs	r3, #1
 80018dc:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80018de:	2306      	movs	r3, #6
 80018e0:	617b      	str	r3, [r7, #20]

    if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 80018e2:	f107 030c 	add.w	r3, r7, #12
 80018e6:	4619      	mov	r1, r3
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f004 ff1f 	bl	800672c <HAL_ADC_ConfigChannel>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d002      	beq.n	80018fa <readChannelVoltage+0x3a>
        return 0.0f;
 80018f4:	f04f 0300 	mov.w	r3, #0
 80018f8:	e029      	b.n	800194e <readChannelVoltage+0x8e>
    if (HAL_ADC_Start(hadc) != HAL_OK)
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f004 fc62 	bl	80061c4 <HAL_ADC_Start>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d002      	beq.n	800190c <readChannelVoltage+0x4c>
        return 0.0f;
 8001906:	f04f 0300 	mov.w	r3, #0
 800190a:	e020      	b.n	800194e <readChannelVoltage+0x8e>

    float v = 0.0f;
 800190c:	f04f 0300 	mov.w	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
    if (HAL_ADC_PollForConversion(hadc, 10) == HAL_OK) {
 8001912:	210a      	movs	r1, #10
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f004 fd2f 	bl	8006378 <HAL_ADC_PollForConversion>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d112      	bne.n	8001946 <readChannelVoltage+0x86>
        uint32_t raw = HAL_ADC_GetValue(hadc);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f004 fe2f 	bl	8006584 <HAL_ADC_GetValue>
 8001926:	61b8      	str	r0, [r7, #24]
        v = (raw * VREF) / ADC_RES;
 8001928:	69b8      	ldr	r0, [r7, #24]
 800192a:	f7ff f96d 	bl	8000c08 <__aeabi_ui2f>
 800192e:	4603      	mov	r3, r0
 8001930:	4909      	ldr	r1, [pc, #36]	@ (8001958 <readChannelVoltage+0x98>)
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff f9c0 	bl	8000cb8 <__aeabi_fmul>
 8001938:	4603      	mov	r3, r0
 800193a:	4908      	ldr	r1, [pc, #32]	@ (800195c <readChannelVoltage+0x9c>)
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff fa6f 	bl	8000e20 <__aeabi_fdiv>
 8001942:	4603      	mov	r3, r0
 8001944:	61fb      	str	r3, [r7, #28]
    }
    HAL_ADC_Stop(hadc);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f004 fcea 	bl	8006320 <HAL_ADC_Stop>
    return v;
 800194c:	69fb      	ldr	r3, [r7, #28]
}
 800194e:	4618      	mov	r0, r3
 8001950:	3720      	adds	r7, #32
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40533333 	.word	0x40533333
 800195c:	457ff000 	.word	0x457ff000

08001960 <ADC_Init>:
    return sum / samples;
}

/* --- Public API --- */
void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
    if (HAL_ADCEx_Calibration_Start(hadc) != HAL_OK) {
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f005 f873 	bl	8006a54 <HAL_ADCEx_Calibration_Start>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <ADC_Init+0x18>
        Error_Handler();
 8001974:	f001 f946 	bl	8002c04 <Error_Handler>
    }
}
 8001978:	bf00      	nop
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <ADC_ReadAllChannels>:

void ADC_ReadAllChannels(ADC_HandleTypeDef* hadc, ADC_Data* data)
{
 8001980:	b5b0      	push	{r4, r5, r7, lr}
 8001982:	b08c      	sub	sp, #48	@ 0x30
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
    bool changed = false;
 800198a:	2300      	movs	r3, #0
 800198c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    char loraPacket[32];   // buffer for LoRa payload
    loraPacket[0] = '\0';
 8001990:	2300      	movs	r3, #0
 8001992:	723b      	strb	r3, [r7, #8]

    // === Process water sensor channels ===
    for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++)
 8001994:	2300      	movs	r3, #0
 8001996:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800199a:	e154      	b.n	8001c46 <ADC_ReadAllChannels+0x2c6>
    {
        float v = readChannelVoltage(hadc, adcChannels[i]);
 800199c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80019a0:	4ab7      	ldr	r2, [pc, #732]	@ (8001c80 <ADC_ReadAllChannels+0x300>)
 80019a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a6:	4619      	mov	r1, r3
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f7ff ff89 	bl	80018c0 <readChannelVoltage>
 80019ae:	62b8      	str	r0, [r7, #40]	@ 0x28

        if (s_filtered[i] == 0.0f)
 80019b0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80019b4:	4ab3      	ldr	r2, [pc, #716]	@ (8001c84 <ADC_ReadAllChannels+0x304>)
 80019b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ba:	f04f 0100 	mov.w	r1, #0
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff fb0e 	bl	8000fe0 <__aeabi_fcmpeq>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d006      	beq.n	80019d8 <ADC_ReadAllChannels+0x58>
            s_filtered[i] = v;
 80019ca:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80019ce:	49ad      	ldr	r1, [pc, #692]	@ (8001c84 <ADC_ReadAllChannels+0x304>)
 80019d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80019d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80019d6:	e01a      	b.n	8001a0e <ADC_ReadAllChannels+0x8e>
        else
            s_filtered[i] = EMA_ALPHA * v + (1 - EMA_ALPHA) * s_filtered[i];
 80019d8:	49ab      	ldr	r1, [pc, #684]	@ (8001c88 <ADC_ReadAllChannels+0x308>)
 80019da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80019dc:	f7ff f96c 	bl	8000cb8 <__aeabi_fmul>
 80019e0:	4603      	mov	r3, r0
 80019e2:	461d      	mov	r5, r3
 80019e4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80019e8:	4aa6      	ldr	r2, [pc, #664]	@ (8001c84 <ADC_ReadAllChannels+0x304>)
 80019ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ee:	49a7      	ldr	r1, [pc, #668]	@ (8001c8c <ADC_ReadAllChannels+0x30c>)
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff f961 	bl	8000cb8 <__aeabi_fmul>
 80019f6:	4603      	mov	r3, r0
 80019f8:	f897 402e 	ldrb.w	r4, [r7, #46]	@ 0x2e
 80019fc:	4619      	mov	r1, r3
 80019fe:	4628      	mov	r0, r5
 8001a00:	f7ff f852 	bl	8000aa8 <__addsf3>
 8001a04:	4603      	mov	r3, r0
 8001a06:	461a      	mov	r2, r3
 8001a08:	4b9e      	ldr	r3, [pc, #632]	@ (8001c84 <ADC_ReadAllChannels+0x304>)
 8001a0a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]

        v = s_filtered[i];
 8001a0e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001a12:	4a9c      	ldr	r2, [pc, #624]	@ (8001c84 <ADC_ReadAllChannels+0x304>)
 8001a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a18:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (v < GROUND_THRESHOLD)
 8001a1a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001a1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001a20:	f7ff fae8 	bl	8000ff4 <__aeabi_fcmplt>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d002      	beq.n	8001a30 <ADC_ReadAllChannels+0xb0>
            v = 0.0f;
 8001a2a:	f04f 0300 	mov.w	r3, #0
 8001a2e:	62bb      	str	r3, [r7, #40]	@ 0x28

        data->voltages[i]   = v;
 8001a30:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	3302      	adds	r3, #2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	4413      	add	r3, r2
 8001a3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001a3e:	605a      	str	r2, [r3, #4]
        data->rawValues[i]  = (uint16_t)((v * ADC_RES) / VREF);
 8001a40:	4993      	ldr	r1, [pc, #588]	@ (8001c90 <ADC_ReadAllChannels+0x310>)
 8001a42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001a44:	f7ff f938 	bl	8000cb8 <__aeabi_fmul>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	4992      	ldr	r1, [pc, #584]	@ (8001c94 <ADC_ReadAllChannels+0x314>)
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff f9e7 	bl	8000e20 <__aeabi_fdiv>
 8001a52:	4603      	mov	r3, r0
 8001a54:	f897 402e 	ldrb.w	r4, [r7, #46]	@ 0x2e
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff fb09 	bl	8001070 <__aeabi_f2uiz>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
        data->maxReached[i] = (v >= 3.2f);
 8001a68:	2301      	movs	r3, #1
 8001a6a:	461c      	mov	r4, r3
 8001a6c:	498a      	ldr	r1, [pc, #552]	@ (8001c98 <ADC_ReadAllChannels+0x318>)
 8001a6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001a70:	f7ff fad4 	bl	800101c <__aeabi_fcmpge>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <ADC_ReadAllChannels+0xfe>
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	461c      	mov	r4, r3
 8001a7e:	b2e2      	uxtb	r2, r4
 8001a80:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001a84:	4611      	mov	r1, r2
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	4413      	add	r3, r2
 8001a8a:	460a      	mov	r2, r1
 8001a8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        g_adcVoltages[i]    = v;
 8001a90:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001a94:	4981      	ldr	r1, [pc, #516]	@ (8001c9c <ADC_ReadAllChannels+0x31c>)
 8001a96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001a98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        // Detect meaningful change
        if (fabsf(v - s_prev_volt[i]) > PRINT_DELTA) {
 8001a9c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001aa0:	4a7f      	ldr	r2, [pc, #508]	@ (8001ca0 <ADC_ReadAllChannels+0x320>)
 8001aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001aaa:	f7fe fffb 	bl	8000aa4 <__aeabi_fsub>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ab4:	497b      	ldr	r1, [pc, #492]	@ (8001ca4 <ADC_ReadAllChannels+0x324>)
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff faba 	bl	8001030 <__aeabi_fcmpgt>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d008      	beq.n	8001ad4 <ADC_ReadAllChannels+0x154>
            changed = true;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            s_prev_volt[i] = v;
 8001ac8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001acc:	4974      	ldr	r1, [pc, #464]	@ (8001ca0 <ADC_ReadAllChannels+0x320>)
 8001ace:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ad0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }

        // Normal threshold logic (sets motorStatus, etc.)
        if (!s_level_flags[i] && v >= THR) {
 8001ad4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001ad8:	4a73      	ldr	r2, [pc, #460]	@ (8001ca8 <ADC_ReadAllChannels+0x328>)
 8001ada:	5cd3      	ldrb	r3, [r2, r3]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d165      	bne.n	8001bac <ADC_ReadAllChannels+0x22c>
 8001ae0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001ae4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001ae6:	f7ff fa99 	bl	800101c <__aeabi_fcmpge>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d05d      	beq.n	8001bac <ADC_ReadAllChannels+0x22c>
            s_level_flags[i] = 1;
 8001af0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001af4:	4a6c      	ldr	r2, [pc, #432]	@ (8001ca8 <ADC_ReadAllChannels+0x328>)
 8001af6:	2101      	movs	r1, #1
 8001af8:	54d1      	strb	r1, [r2, r3]
            switch (i) {
 8001afa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	d82a      	bhi.n	8001b58 <ADC_ReadAllChannels+0x1d8>
 8001b02:	a201      	add	r2, pc, #4	@ (adr r2, 8001b08 <ADC_ReadAllChannels+0x188>)
 8001b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b08:	08001b1d 	.word	0x08001b1d
 8001b0c:	08001b29 	.word	0x08001b29
 8001b10:	08001b35 	.word	0x08001b35
 8001b14:	08001b41 	.word	0x08001b41
 8001b18:	08001b4d 	.word	0x08001b4d
                case 0: snprintf(dataPacketTx, sizeof(dataPacketTx), "@10W#"); break;
 8001b1c:	4a63      	ldr	r2, [pc, #396]	@ (8001cac <ADC_ReadAllChannels+0x32c>)
 8001b1e:	2110      	movs	r1, #16
 8001b20:	4863      	ldr	r0, [pc, #396]	@ (8001cb0 <ADC_ReadAllChannels+0x330>)
 8001b22:	f009 fc53 	bl	800b3cc <sniprintf>
 8001b26:	e01b      	b.n	8001b60 <ADC_ReadAllChannels+0x1e0>
                case 1: snprintf(dataPacketTx, sizeof(dataPacketTx), "@30W#"); break;
 8001b28:	4a62      	ldr	r2, [pc, #392]	@ (8001cb4 <ADC_ReadAllChannels+0x334>)
 8001b2a:	2110      	movs	r1, #16
 8001b2c:	4860      	ldr	r0, [pc, #384]	@ (8001cb0 <ADC_ReadAllChannels+0x330>)
 8001b2e:	f009 fc4d 	bl	800b3cc <sniprintf>
 8001b32:	e015      	b.n	8001b60 <ADC_ReadAllChannels+0x1e0>
                case 2: snprintf(dataPacketTx, sizeof(dataPacketTx), "@70W#"); break;
 8001b34:	4a60      	ldr	r2, [pc, #384]	@ (8001cb8 <ADC_ReadAllChannels+0x338>)
 8001b36:	2110      	movs	r1, #16
 8001b38:	485d      	ldr	r0, [pc, #372]	@ (8001cb0 <ADC_ReadAllChannels+0x330>)
 8001b3a:	f009 fc47 	bl	800b3cc <sniprintf>
 8001b3e:	e00f      	b.n	8001b60 <ADC_ReadAllChannels+0x1e0>
                case 3: snprintf(dataPacketTx, sizeof(dataPacketTx), "@1:W#"); break;
 8001b40:	4a5e      	ldr	r2, [pc, #376]	@ (8001cbc <ADC_ReadAllChannels+0x33c>)
 8001b42:	2110      	movs	r1, #16
 8001b44:	485a      	ldr	r0, [pc, #360]	@ (8001cb0 <ADC_ReadAllChannels+0x330>)
 8001b46:	f009 fc41 	bl	800b3cc <sniprintf>
 8001b4a:	e009      	b.n	8001b60 <ADC_ReadAllChannels+0x1e0>
                case 4: snprintf(dataPacketTx, sizeof(dataPacketTx), "@DRY#"); break;
 8001b4c:	4a5c      	ldr	r2, [pc, #368]	@ (8001cc0 <ADC_ReadAllChannels+0x340>)
 8001b4e:	2110      	movs	r1, #16
 8001b50:	4857      	ldr	r0, [pc, #348]	@ (8001cb0 <ADC_ReadAllChannels+0x330>)
 8001b52:	f009 fc3b 	bl	800b3cc <sniprintf>
 8001b56:	e003      	b.n	8001b60 <ADC_ReadAllChannels+0x1e0>
                default: dataPacketTx[0] = '\0'; break;
 8001b58:	4b55      	ldr	r3, [pc, #340]	@ (8001cb0 <ADC_ReadAllChannels+0x330>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	701a      	strb	r2, [r3, #0]
 8001b5e:	bf00      	nop
            }
//            motorStatus = 1;
            s_low_counts[i] = 0;
 8001b60:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001b64:	4a57      	ldr	r2, [pc, #348]	@ (8001cc4 <ADC_ReadAllChannels+0x344>)
 8001b66:	2100      	movs	r1, #0
 8001b68:	54d1      	strb	r1, [r2, r3]

            // append to LoRa packet buffer
            if (dataPacketTx[0]) {
 8001b6a:	4b51      	ldr	r3, [pc, #324]	@ (8001cb0 <ADC_ReadAllChannels+0x330>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d02e      	beq.n	8001bd0 <ADC_ReadAllChannels+0x250>
                strncat(loraPacket, dataPacketTx, sizeof(loraPacket)-strlen(loraPacket)-1);
 8001b72:	f107 0308 	add.w	r3, r7, #8
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7fe faf4 	bl	8000164 <strlen>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	f1c3 021f 	rsb	r2, r3, #31
 8001b82:	f107 0308 	add.w	r3, r7, #8
 8001b86:	494a      	ldr	r1, [pc, #296]	@ (8001cb0 <ADC_ReadAllChannels+0x330>)
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f009 fd35 	bl	800b5f8 <strncat>
                strncat(loraPacket, ";", sizeof(loraPacket)-strlen(loraPacket)-1);
 8001b8e:	f107 0308 	add.w	r3, r7, #8
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7fe fae6 	bl	8000164 <strlen>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	f1c3 021f 	rsb	r2, r3, #31
 8001b9e:	f107 0308 	add.w	r3, r7, #8
 8001ba2:	4949      	ldr	r1, [pc, #292]	@ (8001cc8 <ADC_ReadAllChannels+0x348>)
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f009 fd27 	bl	800b5f8 <strncat>
            if (dataPacketTx[0]) {
 8001baa:	e011      	b.n	8001bd0 <ADC_ReadAllChannels+0x250>
            }
        }
        else if (s_level_flags[i] && v < (THR - HYST_DELTA)) {
 8001bac:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001bb0:	4a3d      	ldr	r2, [pc, #244]	@ (8001ca8 <ADC_ReadAllChannels+0x328>)
 8001bb2:	5cd3      	ldrb	r3, [r2, r3]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d00b      	beq.n	8001bd0 <ADC_ReadAllChannels+0x250>
 8001bb8:	4944      	ldr	r1, [pc, #272]	@ (8001ccc <ADC_ReadAllChannels+0x34c>)
 8001bba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001bbc:	f7ff fa1a 	bl	8000ff4 <__aeabi_fcmplt>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d004      	beq.n	8001bd0 <ADC_ReadAllChannels+0x250>
            s_level_flags[i] = 0;
 8001bc6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001bca:	4a37      	ldr	r2, [pc, #220]	@ (8001ca8 <ADC_ReadAllChannels+0x328>)
 8001bcc:	2100      	movs	r1, #0
 8001bce:	54d1      	strb	r1, [r2, r3]
        }

        // dry run debounce
        if (v < DRY_VOLTAGE_THRESHOLD) {
 8001bd0:	4934      	ldr	r1, [pc, #208]	@ (8001ca4 <ADC_ReadAllChannels+0x324>)
 8001bd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001bd4:	f7ff fa0e 	bl	8000ff4 <__aeabi_fcmplt>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d00e      	beq.n	8001bfc <ADC_ReadAllChannels+0x27c>
            if (s_low_counts[i] < 0xFF) s_low_counts[i]++;
 8001bde:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001be2:	4a38      	ldr	r2, [pc, #224]	@ (8001cc4 <ADC_ReadAllChannels+0x344>)
 8001be4:	5cd3      	ldrb	r3, [r2, r3]
 8001be6:	2bff      	cmp	r3, #255	@ 0xff
 8001be8:	d00d      	beq.n	8001c06 <ADC_ReadAllChannels+0x286>
 8001bea:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001bee:	4a35      	ldr	r2, [pc, #212]	@ (8001cc4 <ADC_ReadAllChannels+0x344>)
 8001bf0:	5cd2      	ldrb	r2, [r2, r3]
 8001bf2:	3201      	adds	r2, #1
 8001bf4:	b2d1      	uxtb	r1, r2
 8001bf6:	4a33      	ldr	r2, [pc, #204]	@ (8001cc4 <ADC_ReadAllChannels+0x344>)
 8001bf8:	54d1      	strb	r1, [r2, r3]
 8001bfa:	e004      	b.n	8001c06 <ADC_ReadAllChannels+0x286>
        } else {
            s_low_counts[i] = 0;
 8001bfc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001c00:	4a30      	ldr	r2, [pc, #192]	@ (8001cc4 <ADC_ReadAllChannels+0x344>)
 8001c02:	2100      	movs	r1, #0
 8001c04:	54d1      	strb	r1, [r2, r3]
        }

        if (!manualOverride) {
 8001c06:	4b32      	ldr	r3, [pc, #200]	@ (8001cd0 <ADC_ReadAllChannels+0x350>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	f083 0301 	eor.w	r3, r3, #1
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d012      	beq.n	8001c3c <ADC_ReadAllChannels+0x2bc>
            if (motorStatus == 1 && s_low_counts[i] >= DRY_COUNT_THRESHOLD) {
 8001c16:	4b2f      	ldr	r3, [pc, #188]	@ (8001cd4 <ADC_ReadAllChannels+0x354>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d10d      	bne.n	8001c3c <ADC_ReadAllChannels+0x2bc>
 8001c20:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001c24:	4a27      	ldr	r2, [pc, #156]	@ (8001cc4 <ADC_ReadAllChannels+0x344>)
 8001c26:	5cd3      	ldrb	r3, [r2, r3]
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d907      	bls.n	8001c3c <ADC_ReadAllChannels+0x2bc>
                motorStatus = 0;
 8001c2c:	4b29      	ldr	r3, [pc, #164]	@ (8001cd4 <ADC_ReadAllChannels+0x354>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	701a      	strb	r2, [r3, #0]
                memset(s_low_counts, 0, sizeof(s_low_counts));
 8001c32:	2206      	movs	r2, #6
 8001c34:	2100      	movs	r1, #0
 8001c36:	4823      	ldr	r0, [pc, #140]	@ (8001cc4 <ADC_ReadAllChannels+0x344>)
 8001c38:	f009 fcd6 	bl	800b5e8 <memset>
    for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++)
 8001c3c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001c40:	3301      	adds	r3, #1
 8001c42:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001c46:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001c4a:	2b05      	cmp	r3, #5
 8001c4c:	f67f aea6 	bls.w	800199c <ADC_ReadAllChannels+0x1c>
            }
        }
    }

    // === Send LoRa packet only if ADC changed ===
    if (changed && loraPacket[0] != '\0') {
 8001c50:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d00e      	beq.n	8001c76 <ADC_ReadAllChannels+0x2f6>
 8001c58:	7a3b      	ldrb	r3, [r7, #8]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d00b      	beq.n	8001c76 <ADC_ReadAllChannels+0x2f6>
        LoRa_SendPacket((uint8_t*)loraPacket, strlen(loraPacket));
 8001c5e:	f107 0308 	add.w	r3, r7, #8
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7fe fa7e 	bl	8000164 <strlen>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	f107 0308 	add.w	r3, r7, #8
 8001c6e:	4611      	mov	r1, r2
 8001c70:	4618      	mov	r0, r3
 8001c72:	f000 fc09 	bl	8002488 <LoRa_SendPacket>
    }
}
 8001c76:	bf00      	nop
 8001c78:	3730      	adds	r7, #48	@ 0x30
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	0800dd50 	.word	0x0800dd50
 8001c84:	20000288 	.word	0x20000288
 8001c88:	3e99999a 	.word	0x3e99999a
 8001c8c:	3f333333 	.word	0x3f333333
 8001c90:	457ff000 	.word	0x457ff000
 8001c94:	40533333 	.word	0x40533333
 8001c98:	404ccccd 	.word	0x404ccccd
 8001c9c:	20000270 	.word	0x20000270
 8001ca0:	200002b0 	.word	0x200002b0
 8001ca4:	3d4ccccd 	.word	0x3d4ccccd
 8001ca8:	200002a0 	.word	0x200002a0
 8001cac:	0800d7e8 	.word	0x0800d7e8
 8001cb0:	200002c8 	.word	0x200002c8
 8001cb4:	0800d7f0 	.word	0x0800d7f0
 8001cb8:	0800d7f8 	.word	0x0800d7f8
 8001cbc:	0800d800 	.word	0x0800d800
 8001cc0:	0800d808 	.word	0x0800d808
 8001cc4:	200002a8 	.word	0x200002a8
 8001cc8:	0800d810 	.word	0x0800d810
 8001ccc:	3f666666 	.word	0x3f666666
 8001cd0:	20000587 	.word	0x20000587
 8001cd4:	2000057c 	.word	0x2000057c

08001cd8 <map_nibble_ctrl>:
   Build a PCF8574 byte from a 4-bit data nibble and RS/EN flags according to LCD_PINMAP.
*/

static inline uint8_t map_nibble_ctrl(uint8_t nibble /*D7..D4 or D4..D7 per map*/,
                                      uint8_t rs, uint8_t en, uint8_t bl_on)
{
 8001cd8:	b490      	push	{r4, r7}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4604      	mov	r4, r0
 8001ce0:	4608      	mov	r0, r1
 8001ce2:	4611      	mov	r1, r2
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4623      	mov	r3, r4
 8001ce8:	71fb      	strb	r3, [r7, #7]
 8001cea:	4603      	mov	r3, r0
 8001cec:	71bb      	strb	r3, [r7, #6]
 8001cee:	460b      	mov	r3, r1
 8001cf0:	717b      	strb	r3, [r7, #5]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	713b      	strb	r3, [r7, #4]
#if (LCD_PINMAP == LCD_PINMAP_A)
    /* Map A: D7..D4 -> P7..P4, EN=P2, RW=P1(0), RS=P0, BL=P3
       Byte: [D7 D6 D5 D4 BL EN RW RS] */
    uint8_t b = 0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	73fb      	strb	r3, [r7, #15]
    b |= (nibble & 0xF0);           // D7..D4 already in high nibble
 8001cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfe:	f023 030f 	bic.w	r3, r3, #15
 8001d02:	b25a      	sxtb	r2, r3
 8001d04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	b25b      	sxtb	r3, r3
 8001d0c:	73fb      	strb	r3, [r7, #15]
    b |= (bl_on ? 0x08 : 0x00);     // BL=P3
 8001d0e:	793b      	ldrb	r3, [r7, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <map_nibble_ctrl+0x40>
 8001d14:	2208      	movs	r2, #8
 8001d16:	e000      	b.n	8001d1a <map_nibble_ctrl+0x42>
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	b25b      	sxtb	r3, r3
 8001d22:	73fb      	strb	r3, [r7, #15]
    b |= (en ? 0x04 : 0x00);        // EN=P2
 8001d24:	797b      	ldrb	r3, [r7, #5]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <map_nibble_ctrl+0x56>
 8001d2a:	2204      	movs	r2, #4
 8001d2c:	e000      	b.n	8001d30 <map_nibble_ctrl+0x58>
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	b25b      	sxtb	r3, r3
 8001d38:	73fb      	strb	r3, [r7, #15]
    b |= 0x00;                      // RW=P1 forced 0 (write)
    b |= (rs ? 0x01 : 0x00);        // RS=P0
 8001d3a:	79bb      	ldrb	r3, [r7, #6]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	bf14      	ite	ne
 8001d40:	2301      	movne	r3, #1
 8001d42:	2300      	moveq	r3, #0
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	b25a      	sxtb	r2, r3
 8001d48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	b25b      	sxtb	r3, r3
 8001d50:	73fb      	strb	r3, [r7, #15]
    return b;
 8001d52:	7bfb      	ldrb	r3, [r7, #15]
    b |= (bl_on ? 0x80 : 0x00);           // BL=P7
    return b;
#else
# error "Unsupported LCD_PINMAP selection"
#endif
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bc90      	pop	{r4, r7}
 8001d5c:	4770      	bx	lr
	...

08001d60 <expander_write>:

static void expander_write(uint8_t data)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af02      	add	r7, sp, #8
 8001d66:	4603      	mov	r3, r0
 8001d68:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Master_Transmit(&hi2c2, SLAVE_ADDRESS_LCD, &data, 1, 100);
 8001d6a:	1dfa      	adds	r2, r7, #7
 8001d6c:	2364      	movs	r3, #100	@ 0x64
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	2301      	movs	r3, #1
 8001d72:	214e      	movs	r1, #78	@ 0x4e
 8001d74:	4803      	ldr	r0, [pc, #12]	@ (8001d84 <expander_write+0x24>)
 8001d76:	f005 fb43 	bl	8007400 <HAL_I2C_Master_Transmit>
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	2000035c 	.word	0x2000035c

08001d88 <pulse_enable>:

static void pulse_enable(uint8_t data)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	71fb      	strb	r3, [r7, #7]
#if (LCD_PINMAP == LCD_PINMAP_A)
    expander_write(data | 0x04);  // EN=1
 8001d92:	79fb      	ldrb	r3, [r7, #7]
 8001d94:	f043 0304 	orr.w	r3, r3, #4
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff ffe0 	bl	8001d60 <expander_write>
    HAL_Delay(1);
 8001da0:	2001      	movs	r0, #1
 8001da2:	f004 f913 	bl	8005fcc <HAL_Delay>
    expander_write(data & ~0x04); // EN=0
 8001da6:	79fb      	ldrb	r3, [r7, #7]
 8001da8:	f023 0304 	bic.w	r3, r3, #4
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff ffd6 	bl	8001d60 <expander_write>
#elif (LCD_PINMAP == LCD_PINMAP_B)
    expander_write(data | 0x10);  // EN=1
    HAL_Delay(1);
    expander_write(data & ~0x10); // EN=0
#endif
    HAL_Delay(1);
 8001db4:	2001      	movs	r0, #1
 8001db6:	f004 f909 	bl	8005fcc <HAL_Delay>
}
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <write4bits>:

static void write4bits(uint8_t nibble /*D7..D4 in high nibble*/, uint8_t rs, uint8_t bl_on)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b084      	sub	sp, #16
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	4603      	mov	r3, r0
 8001dca:	71fb      	strb	r3, [r7, #7]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	71bb      	strb	r3, [r7, #6]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	717b      	strb	r3, [r7, #5]
    uint8_t x = map_nibble_ctrl(nibble, rs, 1 /*en edge*/, bl_on);
 8001dd4:	797b      	ldrb	r3, [r7, #5]
 8001dd6:	79b9      	ldrb	r1, [r7, #6]
 8001dd8:	79f8      	ldrb	r0, [r7, #7]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f7ff ff7c 	bl	8001cd8 <map_nibble_ctrl>
 8001de0:	4603      	mov	r3, r0
 8001de2:	73fb      	strb	r3, [r7, #15]
    expander_write(x);
 8001de4:	7bfb      	ldrb	r3, [r7, #15]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff ffba 	bl	8001d60 <expander_write>
    pulse_enable(x);
 8001dec:	7bfb      	ldrb	r3, [r7, #15]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff ffca 	bl	8001d88 <pulse_enable>
}
 8001df4:	bf00      	nop
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <lcd_backlight_on>:

/* -------- Public API -------- */

void lcd_backlight_on(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
#if (LCD_PINMAP == LCD_PINMAP_A)
    uint8_t b = 0x08; // BL=1, others 0
 8001e02:	2308      	movs	r3, #8
 8001e04:	71fb      	strb	r3, [r7, #7]
#elif (LCD_PINMAP == LCD_PINMAP_B)
    uint8_t b = 0x80; // BL=1, others 0
#endif
    expander_write(b);
 8001e06:	79fb      	ldrb	r3, [r7, #7]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff ffa9 	bl	8001d60 <expander_write>
}
 8001e0e:	bf00      	nop
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <lcd_send_cmd>:
    uint8_t b = 0x00;
    expander_write(b);
}

void lcd_send_cmd(uint8_t cmd)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b082      	sub	sp, #8
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	71fb      	strb	r3, [r7, #7]
    /* high then low nibble, RS=0 */
    write4bits(cmd & 0xF0, 0, 1);
 8001e20:	79fb      	ldrb	r3, [r7, #7]
 8001e22:	f023 030f 	bic.w	r3, r3, #15
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2201      	movs	r2, #1
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff ffc8 	bl	8001dc2 <write4bits>
    write4bits((cmd << 4) & 0xF0, 0, 1);
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	011b      	lsls	r3, r3, #4
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2201      	movs	r2, #1
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff ffc0 	bl	8001dc2 <write4bits>
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <lcd_send_data>:

void lcd_send_data(uint8_t data)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	4603      	mov	r3, r0
 8001e52:	71fb      	strb	r3, [r7, #7]
    /* high then low nibble, RS=1 */
    write4bits(data & 0xF0, 1, 1);
 8001e54:	79fb      	ldrb	r3, [r7, #7]
 8001e56:	f023 030f 	bic.w	r3, r3, #15
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	2101      	movs	r1, #1
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff ffae 	bl	8001dc2 <write4bits>
    write4bits((data << 4) & 0xF0, 1, 1);
 8001e66:	79fb      	ldrb	r3, [r7, #7]
 8001e68:	011b      	lsls	r3, r3, #4
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	2101      	movs	r1, #1
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff ffa6 	bl	8001dc2 <write4bits>
}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <lcd_clear>:

void lcd_clear(void)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	af00      	add	r7, sp, #0
    lcd_send_cmd(0x01);
 8001e82:	2001      	movs	r0, #1
 8001e84:	f7ff ffc7 	bl	8001e16 <lcd_send_cmd>
    HAL_Delay(2);
 8001e88:	2002      	movs	r0, #2
 8001e8a:	f004 f89f 	bl	8005fcc <HAL_Delay>
    lcd_send_cmd(0x80);
 8001e8e:	2080      	movs	r0, #128	@ 0x80
 8001e90:	f7ff ffc1 	bl	8001e16 <lcd_send_cmd>
}
 8001e94:	bf00      	nop
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <lcd_put_cur>:

void lcd_put_cur(uint8_t row, uint8_t col)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	460a      	mov	r2, r1
 8001ea2:	71fb      	strb	r3, [r7, #7]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	71bb      	strb	r3, [r7, #6]
    static const uint8_t row_offsets[] = {0x00, 0x40};
    if (row > 1) row = 1;
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d901      	bls.n	8001eb2 <lcd_put_cur+0x1a>
 8001eae:	2301      	movs	r3, #1
 8001eb0:	71fb      	strb	r3, [r7, #7]
    lcd_send_cmd(0x80 | (row_offsets[row] + col));
 8001eb2:	79fb      	ldrb	r3, [r7, #7]
 8001eb4:	4a08      	ldr	r2, [pc, #32]	@ (8001ed8 <lcd_put_cur+0x40>)
 8001eb6:	5cd2      	ldrb	r2, [r2, r3]
 8001eb8:	79bb      	ldrb	r3, [r7, #6]
 8001eba:	4413      	add	r3, r2
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	b25b      	sxtb	r3, r3
 8001ec0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001ec4:	b25b      	sxtb	r3, r3
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff ffa4 	bl	8001e16 <lcd_send_cmd>
}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	0800dd68 	.word	0x0800dd68

08001edc <lcd_send_string>:

void lcd_send_string(char *str)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
    while (*str) lcd_send_data((uint8_t)*str++);
 8001ee4:	e006      	b.n	8001ef4 <lcd_send_string+0x18>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	1c5a      	adds	r2, r3, #1
 8001eea:	607a      	str	r2, [r7, #4]
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff ffab 	bl	8001e4a <lcd_send_data>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1f4      	bne.n	8001ee6 <lcd_send_string+0xa>
}
 8001efc:	bf00      	nop
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <lcd_init>:

void lcd_init(void)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	af00      	add	r7, sp, #0
    HAL_Delay(50);
 8001f0a:	2032      	movs	r0, #50	@ 0x32
 8001f0c:	f004 f85e 	bl	8005fcc <HAL_Delay>
    lcd_backlight_on();
 8001f10:	f7ff ff74 	bl	8001dfc <lcd_backlight_on>

    /* Force 8-bit mode (send only high-nibble pattern) */
    write4bits(0x30, 0, 1); HAL_Delay(5);
 8001f14:	2201      	movs	r2, #1
 8001f16:	2100      	movs	r1, #0
 8001f18:	2030      	movs	r0, #48	@ 0x30
 8001f1a:	f7ff ff52 	bl	8001dc2 <write4bits>
 8001f1e:	2005      	movs	r0, #5
 8001f20:	f004 f854 	bl	8005fcc <HAL_Delay>
    write4bits(0x30, 0, 1); HAL_Delay(1);
 8001f24:	2201      	movs	r2, #1
 8001f26:	2100      	movs	r1, #0
 8001f28:	2030      	movs	r0, #48	@ 0x30
 8001f2a:	f7ff ff4a 	bl	8001dc2 <write4bits>
 8001f2e:	2001      	movs	r0, #1
 8001f30:	f004 f84c 	bl	8005fcc <HAL_Delay>
    write4bits(0x30, 0, 1); HAL_Delay(1);
 8001f34:	2201      	movs	r2, #1
 8001f36:	2100      	movs	r1, #0
 8001f38:	2030      	movs	r0, #48	@ 0x30
 8001f3a:	f7ff ff42 	bl	8001dc2 <write4bits>
 8001f3e:	2001      	movs	r0, #1
 8001f40:	f004 f844 	bl	8005fcc <HAL_Delay>

    /* Switch to 4-bit mode */
    write4bits(0x20, 0, 1); HAL_Delay(1);
 8001f44:	2201      	movs	r2, #1
 8001f46:	2100      	movs	r1, #0
 8001f48:	2020      	movs	r0, #32
 8001f4a:	f7ff ff3a 	bl	8001dc2 <write4bits>
 8001f4e:	2001      	movs	r0, #1
 8001f50:	f004 f83c 	bl	8005fcc <HAL_Delay>

    /* Function set: 4-bit, 2 lines, 5x8 */
    lcd_send_cmd(0x28); HAL_Delay(1);
 8001f54:	2028      	movs	r0, #40	@ 0x28
 8001f56:	f7ff ff5e 	bl	8001e16 <lcd_send_cmd>
 8001f5a:	2001      	movs	r0, #1
 8001f5c:	f004 f836 	bl	8005fcc <HAL_Delay>
    /* Display off */
    lcd_send_cmd(0x08); HAL_Delay(1);
 8001f60:	2008      	movs	r0, #8
 8001f62:	f7ff ff58 	bl	8001e16 <lcd_send_cmd>
 8001f66:	2001      	movs	r0, #1
 8001f68:	f004 f830 	bl	8005fcc <HAL_Delay>
    /* Clear */
    lcd_clear();        HAL_Delay(2);
 8001f6c:	f7ff ff87 	bl	8001e7e <lcd_clear>
 8001f70:	2002      	movs	r0, #2
 8001f72:	f004 f82b 	bl	8005fcc <HAL_Delay>
    /* Entry mode: increment, no shift */
    lcd_send_cmd(0x06); HAL_Delay(1);
 8001f76:	2006      	movs	r0, #6
 8001f78:	f7ff ff4d 	bl	8001e16 <lcd_send_cmd>
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	f004 f825 	bl	8005fcc <HAL_Delay>
    /* Display on, cursor off, blink off */
    lcd_send_cmd(0x0C); HAL_Delay(1);
 8001f82:	200c      	movs	r0, #12
 8001f84:	f7ff ff47 	bl	8001e16 <lcd_send_cmd>
 8001f88:	2001      	movs	r0, #1
 8001f8a:	f004 f81f 	bl	8005fcc <HAL_Delay>
}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <now_ms>:

static LedIntent s_intent[LED_COLOR_COUNT];
static uint8_t   s_activeBlink[LED_COLOR_COUNT];
static uint32_t  s_nextToggleAt[LED_COLOR_COUNT];

static inline uint32_t now_ms(void) { return HAL_GetTick(); }
 8001f92:	b580      	push	{r7, lr}
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	f004 f80f 	bl	8005fb8 <HAL_GetTick>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <led_write>:

static void led_write(LedColor c, GPIO_PinState st) {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	460a      	mov	r2, r1
 8001faa:	71fb      	strb	r3, [r7, #7]
 8001fac:	4613      	mov	r3, r2
 8001fae:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(LED_PORTS[c], LED_PINS[c], st);
 8001fb0:	79fb      	ldrb	r3, [r7, #7]
 8001fb2:	4a07      	ldr	r2, [pc, #28]	@ (8001fd0 <led_write+0x30>)
 8001fb4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001fb8:	79fb      	ldrb	r3, [r7, #7]
 8001fba:	4a06      	ldr	r2, [pc, #24]	@ (8001fd4 <led_write+0x34>)
 8001fbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001fc0:	79ba      	ldrb	r2, [r7, #6]
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	f005 f8a7 	bl	8007116 <HAL_GPIO_WritePin>
}
 8001fc8:	bf00      	nop
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20000004 	.word	0x20000004
 8001fd4:	20000014 	.word	0x20000014

08001fd8 <led_on>:
static void led_on(LedColor c)  { led_write(c, GPIO_PIN_SET); }
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	71fb      	strb	r3, [r7, #7]
 8001fe2:	79fb      	ldrb	r3, [r7, #7]
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff ffda 	bl	8001fa0 <led_write>
 8001fec:	bf00      	nop
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <led_off>:
static void led_off(LedColor c) { led_write(c, GPIO_PIN_RESET); }
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	71fb      	strb	r3, [r7, #7]
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	2100      	movs	r1, #0
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff ffcc 	bl	8001fa0 <led_write>
 8002008:	bf00      	nop
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <LED_Init>:

void LED_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
    memset(s_intent, 0, sizeof(s_intent));
 8002016:	2210      	movs	r2, #16
 8002018:	2100      	movs	r1, #0
 800201a:	4815      	ldr	r0, [pc, #84]	@ (8002070 <LED_Init+0x60>)
 800201c:	f009 fae4 	bl	800b5e8 <memset>
    memset(s_activeBlink, 0, sizeof(s_activeBlink));
 8002020:	2204      	movs	r2, #4
 8002022:	2100      	movs	r1, #0
 8002024:	4813      	ldr	r0, [pc, #76]	@ (8002074 <LED_Init+0x64>)
 8002026:	f009 fadf 	bl	800b5e8 <memset>
    memset(s_nextToggleAt, 0, sizeof(s_nextToggleAt));
 800202a:	2210      	movs	r2, #16
 800202c:	2100      	movs	r1, #0
 800202e:	4812      	ldr	r0, [pc, #72]	@ (8002078 <LED_Init+0x68>)
 8002030:	f009 fada 	bl	800b5e8 <memset>

    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 8002034:	2300      	movs	r3, #0
 8002036:	607b      	str	r3, [r7, #4]
 8002038:	e012      	b.n	8002060 <LED_Init+0x50>
        led_off((LedColor)i);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	b2db      	uxtb	r3, r3
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff ffd8 	bl	8001ff4 <led_off>
        s_intent[i].mode = LED_MODE_OFF;
 8002044:	4a0a      	ldr	r2, [pc, #40]	@ (8002070 <LED_Init+0x60>)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2100      	movs	r1, #0
 800204a:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
        s_intent[i].period_ms = 0;
 800204e:	4a08      	ldr	r2, [pc, #32]	@ (8002070 <LED_Init+0x60>)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	2200      	movs	r2, #0
 8002058:	805a      	strh	r2, [r3, #2]
    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	3301      	adds	r3, #1
 800205e:	607b      	str	r3, [r7, #4]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b03      	cmp	r3, #3
 8002064:	dde9      	ble.n	800203a <LED_Init+0x2a>
    }
}
 8002066:	bf00      	nop
 8002068:	bf00      	nop
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	200002d8 	.word	0x200002d8
 8002074:	200002e8 	.word	0x200002e8
 8002078:	200002ec 	.word	0x200002ec

0800207c <LED_Task>:

/* call this every loop (or from a 10–20ms tick) */
void LED_Task(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
    uint32_t t = now_ms();
 8002082:	f7ff ff86 	bl	8001f92 <now_ms>
 8002086:	6038      	str	r0, [r7, #0]

    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 8002088:	2300      	movs	r3, #0
 800208a:	607b      	str	r3, [r7, #4]
 800208c:	e064      	b.n	8002158 <LED_Task+0xdc>
        switch (s_intent[i].mode) {
 800208e:	4a36      	ldr	r2, [pc, #216]	@ (8002168 <LED_Task+0xec>)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d002      	beq.n	80020a0 <LED_Task+0x24>
 800209a:	2b01      	cmp	r3, #1
 800209c:	d00b      	beq.n	80020b6 <LED_Task+0x3a>
 800209e:	e015      	b.n	80020cc <LED_Task+0x50>
        case LED_MODE_OFF:
            s_activeBlink[i] = 0;
 80020a0:	4a32      	ldr	r2, [pc, #200]	@ (800216c <LED_Task+0xf0>)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4413      	add	r3, r2
 80020a6:	2200      	movs	r2, #0
 80020a8:	701a      	strb	r2, [r3, #0]
            led_off((LedColor)i);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff ffa0 	bl	8001ff4 <led_off>
            break;
 80020b4:	e04d      	b.n	8002152 <LED_Task+0xd6>

        case LED_MODE_STEADY:
            s_activeBlink[i] = 1;
 80020b6:	4a2d      	ldr	r2, [pc, #180]	@ (800216c <LED_Task+0xf0>)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4413      	add	r3, r2
 80020bc:	2201      	movs	r2, #1
 80020be:	701a      	strb	r2, [r3, #0]
            led_on((LedColor)i);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff ff87 	bl	8001fd8 <led_on>
            break;
 80020ca:	e042      	b.n	8002152 <LED_Task+0xd6>

        case LED_MODE_BLINK:
        default:
            if (s_intent[i].period_ms == 0) s_intent[i].period_ms = 500;
 80020cc:	4a26      	ldr	r2, [pc, #152]	@ (8002168 <LED_Task+0xec>)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	885b      	ldrh	r3, [r3, #2]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d106      	bne.n	80020e8 <LED_Task+0x6c>
 80020da:	4a23      	ldr	r2, [pc, #140]	@ (8002168 <LED_Task+0xec>)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4413      	add	r3, r2
 80020e2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80020e6:	805a      	strh	r2, [r3, #2]
            if ((int32_t)(s_nextToggleAt[i] - t) <= 0) {
 80020e8:	4a21      	ldr	r2, [pc, #132]	@ (8002170 <LED_Task+0xf4>)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	dc2b      	bgt.n	8002150 <LED_Task+0xd4>
                s_activeBlink[i] = !s_activeBlink[i];
 80020f8:	4a1c      	ldr	r2, [pc, #112]	@ (800216c <LED_Task+0xf0>)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4413      	add	r3, r2
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	bf0c      	ite	eq
 8002104:	2301      	moveq	r3, #1
 8002106:	2300      	movne	r3, #0
 8002108:	b2db      	uxtb	r3, r3
 800210a:	4619      	mov	r1, r3
 800210c:	4a17      	ldr	r2, [pc, #92]	@ (800216c <LED_Task+0xf0>)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4413      	add	r3, r2
 8002112:	460a      	mov	r2, r1
 8002114:	701a      	strb	r2, [r3, #0]
                if (s_activeBlink[i]) led_on((LedColor)i);
 8002116:	4a15      	ldr	r2, [pc, #84]	@ (800216c <LED_Task+0xf0>)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4413      	add	r3, r2
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d005      	beq.n	800212e <LED_Task+0xb2>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	b2db      	uxtb	r3, r3
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff ff56 	bl	8001fd8 <led_on>
 800212c:	e004      	b.n	8002138 <LED_Task+0xbc>
                else                  led_off((LedColor)i);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	b2db      	uxtb	r3, r3
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff ff5e 	bl	8001ff4 <led_off>
                s_nextToggleAt[i] = t + s_intent[i].period_ms;
 8002138:	4a0b      	ldr	r2, [pc, #44]	@ (8002168 <LED_Task+0xec>)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4413      	add	r3, r2
 8002140:	885b      	ldrh	r3, [r3, #2]
 8002142:	461a      	mov	r2, r3
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	441a      	add	r2, r3
 8002148:	4909      	ldr	r1, [pc, #36]	@ (8002170 <LED_Task+0xf4>)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            }
            break;
 8002150:	bf00      	nop
    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	3301      	adds	r3, #1
 8002156:	607b      	str	r3, [r7, #4]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b03      	cmp	r3, #3
 800215c:	dd97      	ble.n	800208e <LED_Task+0x12>
        }
    }
}
 800215e:	bf00      	nop
 8002160:	bf00      	nop
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	200002d8 	.word	0x200002d8
 800216c:	200002e8 	.word	0x200002e8
 8002170:	200002ec 	.word	0x200002ec

08002174 <LED_ClearAllIntents>:

void LED_ClearAllIntents(void)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 800217a:	2300      	movs	r3, #0
 800217c:	607b      	str	r3, [r7, #4]
 800217e:	e00d      	b.n	800219c <LED_ClearAllIntents+0x28>
        s_intent[i].mode = LED_MODE_OFF;
 8002180:	4a0b      	ldr	r2, [pc, #44]	@ (80021b0 <LED_ClearAllIntents+0x3c>)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2100      	movs	r1, #0
 8002186:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
        s_intent[i].period_ms = 0;
 800218a:	4a09      	ldr	r2, [pc, #36]	@ (80021b0 <LED_ClearAllIntents+0x3c>)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	2200      	movs	r2, #0
 8002194:	805a      	strh	r2, [r3, #2]
    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	3301      	adds	r3, #1
 800219a:	607b      	str	r3, [r7, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b03      	cmp	r3, #3
 80021a0:	ddee      	ble.n	8002180 <LED_ClearAllIntents+0xc>
    }
}
 80021a2:	bf00      	nop
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bc80      	pop	{r7}
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	200002d8 	.word	0x200002d8

080021b4 <LED_SetIntent>:

void LED_SetIntent(LedColor color, LedMode mode, uint16_t period_ms)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	71fb      	strb	r3, [r7, #7]
 80021be:	460b      	mov	r3, r1
 80021c0:	71bb      	strb	r3, [r7, #6]
 80021c2:	4613      	mov	r3, r2
 80021c4:	80bb      	strh	r3, [r7, #4]
    if ((int)color < 0 || color >= LED_COLOR_COUNT) return;
 80021c6:	79fb      	ldrb	r3, [r7, #7]
 80021c8:	2b03      	cmp	r3, #3
 80021ca:	d80b      	bhi.n	80021e4 <LED_SetIntent+0x30>
    s_intent[color].mode = mode;
 80021cc:	79fb      	ldrb	r3, [r7, #7]
 80021ce:	4908      	ldr	r1, [pc, #32]	@ (80021f0 <LED_SetIntent+0x3c>)
 80021d0:	79ba      	ldrb	r2, [r7, #6]
 80021d2:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
    s_intent[color].period_ms = period_ms;
 80021d6:	79fb      	ldrb	r3, [r7, #7]
 80021d8:	4a05      	ldr	r2, [pc, #20]	@ (80021f0 <LED_SetIntent+0x3c>)
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	4413      	add	r3, r2
 80021de:	88ba      	ldrh	r2, [r7, #4]
 80021e0:	805a      	strh	r2, [r3, #2]
 80021e2:	e000      	b.n	80021e6 <LED_SetIntent+0x32>
    if ((int)color < 0 || color >= LED_COLOR_COUNT) return;
 80021e4:	bf00      	nop
}
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bc80      	pop	{r7}
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	200002d8 	.word	0x200002d8

080021f4 <LED_ApplyIntents>:

/* current implementation uses intents directly in LED_Task() */
void LED_ApplyIntents(void) { /* no-op, reserved for future resolve rules */ }
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr

08002200 <LoRa_WriteReg>:

uint8_t rxBuffer[64]; // RX
uint8_t txBuffer[64]; // TX

/* ---------------- Low-level SPI helpers ---------------- */
void LoRa_WriteReg(uint8_t addr, uint8_t data) {
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	4603      	mov	r3, r0
 8002208:	460a      	mov	r2, r1
 800220a:	71fb      	strb	r3, [r7, #7]
 800220c:	4613      	mov	r3, r2
 800220e:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2] = { (uint8_t)(addr | 0x80), data };
 8002210:	79fb      	ldrb	r3, [r7, #7]
 8002212:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002216:	b2db      	uxtb	r3, r3
 8002218:	733b      	strb	r3, [r7, #12]
 800221a:	79bb      	ldrb	r3, [r7, #6]
 800221c:	737b      	strb	r3, [r7, #13]
    NSS_LOW();
 800221e:	2200      	movs	r2, #0
 8002220:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002224:	480a      	ldr	r0, [pc, #40]	@ (8002250 <LoRa_WriteReg+0x50>)
 8002226:	f004 ff76 	bl	8007116 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, buf, 2, HAL_MAX_DELAY);
 800222a:	f107 010c 	add.w	r1, r7, #12
 800222e:	f04f 33ff 	mov.w	r3, #4294967295
 8002232:	2202      	movs	r2, #2
 8002234:	4807      	ldr	r0, [pc, #28]	@ (8002254 <LoRa_WriteReg+0x54>)
 8002236:	f007 f8e6 	bl	8009406 <HAL_SPI_Transmit>
    NSS_HIGH();
 800223a:	2201      	movs	r2, #1
 800223c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002240:	4803      	ldr	r0, [pc, #12]	@ (8002250 <LoRa_WriteReg+0x50>)
 8002242:	f004 ff68 	bl	8007116 <HAL_GPIO_WritePin>
}
 8002246:	bf00      	nop
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40010800 	.word	0x40010800
 8002254:	200003c4 	.word	0x200003c4

08002258 <LoRa_ReadReg>:

uint8_t LoRa_ReadReg(uint8_t addr) {
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	71fb      	strb	r3, [r7, #7]
    uint8_t tx = addr & 0x7F;
 8002262:	79fb      	ldrb	r3, [r7, #7]
 8002264:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002268:	b2db      	uxtb	r3, r3
 800226a:	73fb      	strb	r3, [r7, #15]
    uint8_t rx = 0;
 800226c:	2300      	movs	r3, #0
 800226e:	73bb      	strb	r3, [r7, #14]
    NSS_LOW();
 8002270:	2200      	movs	r2, #0
 8002272:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002276:	480f      	ldr	r0, [pc, #60]	@ (80022b4 <LoRa_ReadReg+0x5c>)
 8002278:	f004 ff4d 	bl	8007116 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &tx, 1, HAL_MAX_DELAY);
 800227c:	f107 010f 	add.w	r1, r7, #15
 8002280:	f04f 33ff 	mov.w	r3, #4294967295
 8002284:	2201      	movs	r2, #1
 8002286:	480c      	ldr	r0, [pc, #48]	@ (80022b8 <LoRa_ReadReg+0x60>)
 8002288:	f007 f8bd 	bl	8009406 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, &rx, 1, HAL_MAX_DELAY);
 800228c:	f107 010e 	add.w	r1, r7, #14
 8002290:	f04f 33ff 	mov.w	r3, #4294967295
 8002294:	2201      	movs	r2, #1
 8002296:	4808      	ldr	r0, [pc, #32]	@ (80022b8 <LoRa_ReadReg+0x60>)
 8002298:	f007 f9f9 	bl	800968e <HAL_SPI_Receive>
    NSS_HIGH();
 800229c:	2201      	movs	r2, #1
 800229e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80022a2:	4804      	ldr	r0, [pc, #16]	@ (80022b4 <LoRa_ReadReg+0x5c>)
 80022a4:	f004 ff37 	bl	8007116 <HAL_GPIO_WritePin>
    return rx;
 80022a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40010800 	.word	0x40010800
 80022b8:	200003c4 	.word	0x200003c4

080022bc <LoRa_WriteBuffer>:

void LoRa_WriteBuffer(uint8_t addr, const uint8_t *buffer, uint8_t size) {
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	6039      	str	r1, [r7, #0]
 80022c6:	71fb      	strb	r3, [r7, #7]
 80022c8:	4613      	mov	r3, r2
 80022ca:	71bb      	strb	r3, [r7, #6]
    uint8_t a = addr | 0x80;
 80022cc:	79fb      	ldrb	r3, [r7, #7]
 80022ce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	73fb      	strb	r3, [r7, #15]
    NSS_LOW();
 80022d6:	2200      	movs	r2, #0
 80022d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80022dc:	480e      	ldr	r0, [pc, #56]	@ (8002318 <LoRa_WriteBuffer+0x5c>)
 80022de:	f004 ff1a 	bl	8007116 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &a, 1, HAL_MAX_DELAY);
 80022e2:	f107 010f 	add.w	r1, r7, #15
 80022e6:	f04f 33ff 	mov.w	r3, #4294967295
 80022ea:	2201      	movs	r2, #1
 80022ec:	480b      	ldr	r0, [pc, #44]	@ (800231c <LoRa_WriteBuffer+0x60>)
 80022ee:	f007 f88a 	bl	8009406 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)buffer, size, HAL_MAX_DELAY);
 80022f2:	79bb      	ldrb	r3, [r7, #6]
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	f04f 33ff 	mov.w	r3, #4294967295
 80022fa:	6839      	ldr	r1, [r7, #0]
 80022fc:	4807      	ldr	r0, [pc, #28]	@ (800231c <LoRa_WriteBuffer+0x60>)
 80022fe:	f007 f882 	bl	8009406 <HAL_SPI_Transmit>
    NSS_HIGH();
 8002302:	2201      	movs	r2, #1
 8002304:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002308:	4803      	ldr	r0, [pc, #12]	@ (8002318 <LoRa_WriteBuffer+0x5c>)
 800230a:	f004 ff04 	bl	8007116 <HAL_GPIO_WritePin>
}
 800230e:	bf00      	nop
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40010800 	.word	0x40010800
 800231c:	200003c4 	.word	0x200003c4

08002320 <LoRa_Reset>:
    HAL_SPI_Receive(&hspi1, buffer, size, HAL_MAX_DELAY);
    NSS_HIGH();
}

/* ---------------- Reset ---------------- */
void LoRa_Reset(void) {
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LORA_RESET_PORT, LORA_RESET_PIN, GPIO_PIN_RESET);
 8002324:	2200      	movs	r2, #0
 8002326:	2140      	movs	r1, #64	@ 0x40
 8002328:	4807      	ldr	r0, [pc, #28]	@ (8002348 <LoRa_Reset+0x28>)
 800232a:	f004 fef4 	bl	8007116 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 800232e:	2002      	movs	r0, #2
 8002330:	f003 fe4c 	bl	8005fcc <HAL_Delay>
    HAL_GPIO_WritePin(LORA_RESET_PORT, LORA_RESET_PIN, GPIO_PIN_SET);
 8002334:	2201      	movs	r2, #1
 8002336:	2140      	movs	r1, #64	@ 0x40
 8002338:	4803      	ldr	r0, [pc, #12]	@ (8002348 <LoRa_Reset+0x28>)
 800233a:	f004 feec 	bl	8007116 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 800233e:	2002      	movs	r0, #2
 8002340:	f003 fe44 	bl	8005fcc <HAL_Delay>
}
 8002344:	bf00      	nop
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40010c00 	.word	0x40010c00

0800234c <LoRa_SetFrequency>:

/* ---------------- Set frequency ---------------- */
void LoRa_SetFrequency(uint32_t freqHz) {
 800234c:	b5b0      	push	{r4, r5, r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
    uint64_t frf = ((uint64_t)freqHz << 19) / 32000000ULL;
 8002354:	6879      	ldr	r1, [r7, #4]
 8002356:	2000      	movs	r0, #0
 8002358:	460a      	mov	r2, r1
 800235a:	4603      	mov	r3, r0
 800235c:	0b55      	lsrs	r5, r2, #13
 800235e:	04d4      	lsls	r4, r2, #19
 8002360:	4a18      	ldr	r2, [pc, #96]	@ (80023c4 <LoRa_SetFrequency+0x78>)
 8002362:	f04f 0300 	mov.w	r3, #0
 8002366:	4620      	mov	r0, r4
 8002368:	4629      	mov	r1, r5
 800236a:	f7fe fea1 	bl	80010b0 <__aeabi_uldivmod>
 800236e:	4602      	mov	r2, r0
 8002370:	460b      	mov	r3, r1
 8002372:	e9c7 2302 	strd	r2, r3, [r7, #8]
    LoRa_WriteReg(0x06, (uint8_t)(frf >> 16));
 8002376:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800237a:	f04f 0200 	mov.w	r2, #0
 800237e:	f04f 0300 	mov.w	r3, #0
 8002382:	0c02      	lsrs	r2, r0, #16
 8002384:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002388:	0c0b      	lsrs	r3, r1, #16
 800238a:	b2d3      	uxtb	r3, r2
 800238c:	4619      	mov	r1, r3
 800238e:	2006      	movs	r0, #6
 8002390:	f7ff ff36 	bl	8002200 <LoRa_WriteReg>
    LoRa_WriteReg(0x07, (uint8_t)(frf >> 8));
 8002394:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002398:	f04f 0200 	mov.w	r2, #0
 800239c:	f04f 0300 	mov.w	r3, #0
 80023a0:	0a02      	lsrs	r2, r0, #8
 80023a2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80023a6:	0a0b      	lsrs	r3, r1, #8
 80023a8:	b2d3      	uxtb	r3, r2
 80023aa:	4619      	mov	r1, r3
 80023ac:	2007      	movs	r0, #7
 80023ae:	f7ff ff27 	bl	8002200 <LoRa_WriteReg>
    LoRa_WriteReg(0x08, (uint8_t)(frf >> 0));
 80023b2:	7a3b      	ldrb	r3, [r7, #8]
 80023b4:	4619      	mov	r1, r3
 80023b6:	2008      	movs	r0, #8
 80023b8:	f7ff ff22 	bl	8002200 <LoRa_WriteReg>
}
 80023bc:	bf00      	nop
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bdb0      	pop	{r4, r5, r7, pc}
 80023c4:	01e84800 	.word	0x01e84800

080023c8 <LoRa_Init>:

/* ---------------- Init ---------------- */
void LoRa_Init(void) {
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
    LoRa_Reset();
 80023cc:	f7ff ffa8 	bl	8002320 <LoRa_Reset>

    // Sleep → LoRa sleep
    LoRa_WriteReg(0x01, 0x00);
 80023d0:	2100      	movs	r1, #0
 80023d2:	2001      	movs	r0, #1
 80023d4:	f7ff ff14 	bl	8002200 <LoRa_WriteReg>
    HAL_Delay(2);
 80023d8:	2002      	movs	r0, #2
 80023da:	f003 fdf7 	bl	8005fcc <HAL_Delay>
    LoRa_WriteReg(0x01, 0x80);
 80023de:	2180      	movs	r1, #128	@ 0x80
 80023e0:	2001      	movs	r0, #1
 80023e2:	f7ff ff0d 	bl	8002200 <LoRa_WriteReg>
    HAL_Delay(2);
 80023e6:	2002      	movs	r0, #2
 80023e8:	f003 fdf0 	bl	8005fcc <HAL_Delay>

    // Frequency
    LoRa_SetFrequency(LORA_FREQUENCY);
 80023ec:	4819      	ldr	r0, [pc, #100]	@ (8002454 <LoRa_Init+0x8c>)
 80023ee:	f7ff ffad 	bl	800234c <LoRa_SetFrequency>

    // PA config
    LoRa_WriteReg(0x09, 0x8F); // PA_BOOST
 80023f2:	218f      	movs	r1, #143	@ 0x8f
 80023f4:	2009      	movs	r0, #9
 80023f6:	f7ff ff03 	bl	8002200 <LoRa_WriteReg>
    LoRa_WriteReg(0x4D, 0x87); // RegPaDac
 80023fa:	2187      	movs	r1, #135	@ 0x87
 80023fc:	204d      	movs	r0, #77	@ 0x4d
 80023fe:	f7ff feff 	bl	8002200 <LoRa_WriteReg>

    // LNA
    LoRa_WriteReg(0x0C, 0x23);
 8002402:	2123      	movs	r1, #35	@ 0x23
 8002404:	200c      	movs	r0, #12
 8002406:	f7ff fefb 	bl	8002200 <LoRa_WriteReg>

    // Modem config
    LoRa_WriteReg(0x1D, 0x72);
 800240a:	2172      	movs	r1, #114	@ 0x72
 800240c:	201d      	movs	r0, #29
 800240e:	f7ff fef7 	bl	8002200 <LoRa_WriteReg>
    LoRa_WriteReg(0x1E, 0x74);
 8002412:	2174      	movs	r1, #116	@ 0x74
 8002414:	201e      	movs	r0, #30
 8002416:	f7ff fef3 	bl	8002200 <LoRa_WriteReg>
    LoRa_WriteReg(0x26, 0x04);
 800241a:	2104      	movs	r1, #4
 800241c:	2026      	movs	r0, #38	@ 0x26
 800241e:	f7ff feef 	bl	8002200 <LoRa_WriteReg>

    // Preamble
    LoRa_WriteReg(0x20, 0x00);
 8002422:	2100      	movs	r1, #0
 8002424:	2020      	movs	r0, #32
 8002426:	f7ff feeb 	bl	8002200 <LoRa_WriteReg>
    LoRa_WriteReg(0x21, 0x08);
 800242a:	2108      	movs	r1, #8
 800242c:	2021      	movs	r0, #33	@ 0x21
 800242e:	f7ff fee7 	bl	8002200 <LoRa_WriteReg>

    // SyncWord
    LoRa_WriteReg(0x39, 0x22);
 8002432:	2122      	movs	r1, #34	@ 0x22
 8002434:	2039      	movs	r0, #57	@ 0x39
 8002436:	f7ff fee3 	bl	8002200 <LoRa_WriteReg>

    // DIO mapping
    LoRa_WriteReg(0x40, 0x00);
 800243a:	2100      	movs	r1, #0
 800243c:	2040      	movs	r0, #64	@ 0x40
 800243e:	f7ff fedf 	bl	8002200 <LoRa_WriteReg>

    // Clear IRQs
    LoRa_WriteReg(0x12, 0xFF);
 8002442:	21ff      	movs	r1, #255	@ 0xff
 8002444:	2012      	movs	r0, #18
 8002446:	f7ff fedb 	bl	8002200 <LoRa_WriteReg>

    // Start RX by default
    LoRa_SetRxContinuous();
 800244a:	f000 f80d 	bl	8002468 <LoRa_SetRxContinuous>
}
 800244e:	bf00      	nop
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	19cf0e40 	.word	0x19cf0e40

08002458 <LoRa_SetStandby>:

/* ---------------- Mode control ---------------- */
void LoRa_SetStandby(void) { LoRa_WriteReg(0x01, 0x81); }
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
 800245c:	2181      	movs	r1, #129	@ 0x81
 800245e:	2001      	movs	r0, #1
 8002460:	f7ff fece 	bl	8002200 <LoRa_WriteReg>
 8002464:	bf00      	nop
 8002466:	bd80      	pop	{r7, pc}

08002468 <LoRa_SetRxContinuous>:
void LoRa_SetRxContinuous(void) { LoRa_WriteReg(0x01, 0x85); }
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
 800246c:	2185      	movs	r1, #133	@ 0x85
 800246e:	2001      	movs	r0, #1
 8002470:	f7ff fec6 	bl	8002200 <LoRa_WriteReg>
 8002474:	bf00      	nop
 8002476:	bd80      	pop	{r7, pc}

08002478 <LoRa_SetTx>:
void LoRa_SetTx(void) { LoRa_WriteReg(0x01, 0x83); }
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
 800247c:	2183      	movs	r1, #131	@ 0x83
 800247e:	2001      	movs	r0, #1
 8002480:	f7ff febe 	bl	8002200 <LoRa_WriteReg>
 8002484:	bf00      	nop
 8002486:	bd80      	pop	{r7, pc}

08002488 <LoRa_SendPacket>:

/* ---------------- Send packet ---------------- */
void LoRa_SendPacket(const uint8_t *buffer, uint8_t size) {
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	460b      	mov	r3, r1
 8002492:	70fb      	strb	r3, [r7, #3]
    if (loraMode == LORA_MODE_RECEIVER) return; // RX-only → don't send
 8002494:	4b22      	ldr	r3, [pc, #136]	@ (8002520 <LoRa_SendPacket+0x98>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b02      	cmp	r3, #2
 800249a:	d03c      	beq.n	8002516 <LoRa_SendPacket+0x8e>

    LoRa_SetStandby();
 800249c:	f7ff ffdc 	bl	8002458 <LoRa_SetStandby>

    // FIFO reset
    LoRa_WriteReg(0x0E, 0x00);
 80024a0:	2100      	movs	r1, #0
 80024a2:	200e      	movs	r0, #14
 80024a4:	f7ff feac 	bl	8002200 <LoRa_WriteReg>
    LoRa_WriteReg(0x0D, 0x00);
 80024a8:	2100      	movs	r1, #0
 80024aa:	200d      	movs	r0, #13
 80024ac:	f7ff fea8 	bl	8002200 <LoRa_WriteReg>

    // Write payload
    LoRa_WriteBuffer(0x00, buffer, size);
 80024b0:	78fb      	ldrb	r3, [r7, #3]
 80024b2:	461a      	mov	r2, r3
 80024b4:	6879      	ldr	r1, [r7, #4]
 80024b6:	2000      	movs	r0, #0
 80024b8:	f7ff ff00 	bl	80022bc <LoRa_WriteBuffer>
    LoRa_WriteReg(0x22, size);
 80024bc:	78fb      	ldrb	r3, [r7, #3]
 80024be:	4619      	mov	r1, r3
 80024c0:	2022      	movs	r0, #34	@ 0x22
 80024c2:	f7ff fe9d 	bl	8002200 <LoRa_WriteReg>

    // Clear IRQs
    LoRa_WriteReg(0x12, 0xFF);
 80024c6:	21ff      	movs	r1, #255	@ 0xff
 80024c8:	2012      	movs	r0, #18
 80024ca:	f7ff fe99 	bl	8002200 <LoRa_WriteReg>

    LoRa_SetTx();
 80024ce:	f7ff ffd3 	bl	8002478 <LoRa_SetTx>

    // Wait for TxDone
    uint32_t start = HAL_GetTick();
 80024d2:	f003 fd71 	bl	8005fb8 <HAL_GetTick>
 80024d6:	60f8      	str	r0, [r7, #12]
    while (!(LoRa_ReadReg(0x12) & 0x08)) {
 80024d8:	e00e      	b.n	80024f8 <LoRa_SendPacket+0x70>
        if (HAL_GetTick() - start > LORA_TIMEOUT) {
 80024da:	f003 fd6d 	bl	8005fb8 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80024e8:	d906      	bls.n	80024f8 <LoRa_SendPacket+0x70>
            LoRa_WriteReg(0x12, 0xFF);
 80024ea:	21ff      	movs	r1, #255	@ 0xff
 80024ec:	2012      	movs	r0, #18
 80024ee:	f7ff fe87 	bl	8002200 <LoRa_WriteReg>
            LoRa_SetRxContinuous();
 80024f2:	f7ff ffb9 	bl	8002468 <LoRa_SetRxContinuous>
            return;
 80024f6:	e00f      	b.n	8002518 <LoRa_SendPacket+0x90>
    while (!(LoRa_ReadReg(0x12) & 0x08)) {
 80024f8:	2012      	movs	r0, #18
 80024fa:	f7ff fead 	bl	8002258 <LoRa_ReadReg>
 80024fe:	4603      	mov	r3, r0
 8002500:	f003 0308 	and.w	r3, r3, #8
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0e8      	beq.n	80024da <LoRa_SendPacket+0x52>
        }
    }

    LoRa_WriteReg(0x12, 0x08); // Clear TxDone
 8002508:	2108      	movs	r1, #8
 800250a:	2012      	movs	r0, #18
 800250c:	f7ff fe78 	bl	8002200 <LoRa_WriteReg>
    LoRa_SetRxContinuous();
 8002510:	f7ff ffaa 	bl	8002468 <LoRa_SetRxContinuous>
 8002514:	e000      	b.n	8002518 <LoRa_SendPacket+0x90>
    if (loraMode == LORA_MODE_RECEIVER) return; // RX-only → don't send
 8002516:	bf00      	nop
}
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	2000001c 	.word	0x2000001c

08002524 <Debug_Print>:
static void MX_USART1_UART_Init(void);
static void MX_I2C2_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */

void Debug_Print(char *msg) {
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
    UART_TransmitString(&huart1, msg);
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	4803      	ldr	r0, [pc, #12]	@ (800253c <Debug_Print+0x18>)
 8002530:	f003 fc6e 	bl	8005e10 <UART_TransmitString>
}
 8002534:	bf00      	nop
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	20000464 	.word	0x20000464

08002540 <HAL_ADC_ConvCpltCallback>:
	  lcd_send_string(line2);
}


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002540:	b590      	push	{r4, r7, lr}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a1f      	ldr	r2, [pc, #124]	@ (80025cc <HAL_ADC_ConvCpltCallback+0x8c>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d138      	bne.n	80025c4 <HAL_ADC_ConvCpltCallback+0x84>
    {
        for (int i = 0; i < ADC_CHANNEL_COUNT; i++)
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	e02e      	b.n	80025b6 <HAL_ADC_ConvCpltCallback+0x76>
        {
            float v = (adcBuffer[i] * ACS712_VREF_ADC) / ACS712_ADC_RESOLUTION;
 8002558:	4a1d      	ldr	r2, [pc, #116]	@ (80025d0 <HAL_ADC_ConvCpltCallback+0x90>)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002560:	4618      	mov	r0, r3
 8002562:	f7fe fb55 	bl	8000c10 <__aeabi_i2f>
 8002566:	4603      	mov	r3, r0
 8002568:	491a      	ldr	r1, [pc, #104]	@ (80025d4 <HAL_ADC_ConvCpltCallback+0x94>)
 800256a:	4618      	mov	r0, r3
 800256c:	f7fe fba4 	bl	8000cb8 <__aeabi_fmul>
 8002570:	4603      	mov	r3, r0
 8002572:	4919      	ldr	r1, [pc, #100]	@ (80025d8 <HAL_ADC_ConvCpltCallback+0x98>)
 8002574:	4618      	mov	r0, r3
 8002576:	f7fe fc53 	bl	8000e20 <__aeabi_fdiv>
 800257a:	4603      	mov	r3, r0
 800257c:	60bb      	str	r3, [r7, #8]
            g_adcAvg[i] = 0.9f * g_adcAvg[i] + 0.1f * v;
 800257e:	4a17      	ldr	r2, [pc, #92]	@ (80025dc <HAL_ADC_ConvCpltCallback+0x9c>)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002586:	4916      	ldr	r1, [pc, #88]	@ (80025e0 <HAL_ADC_ConvCpltCallback+0xa0>)
 8002588:	4618      	mov	r0, r3
 800258a:	f7fe fb95 	bl	8000cb8 <__aeabi_fmul>
 800258e:	4603      	mov	r3, r0
 8002590:	461c      	mov	r4, r3
 8002592:	4914      	ldr	r1, [pc, #80]	@ (80025e4 <HAL_ADC_ConvCpltCallback+0xa4>)
 8002594:	68b8      	ldr	r0, [r7, #8]
 8002596:	f7fe fb8f 	bl	8000cb8 <__aeabi_fmul>
 800259a:	4603      	mov	r3, r0
 800259c:	4619      	mov	r1, r3
 800259e:	4620      	mov	r0, r4
 80025a0:	f7fe fa82 	bl	8000aa8 <__addsf3>
 80025a4:	4603      	mov	r3, r0
 80025a6:	4619      	mov	r1, r3
 80025a8:	4a0c      	ldr	r2, [pc, #48]	@ (80025dc <HAL_ADC_ConvCpltCallback+0x9c>)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (int i = 0; i < ADC_CHANNEL_COUNT; i++)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	3301      	adds	r3, #1
 80025b4:	60fb      	str	r3, [r7, #12]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2b06      	cmp	r3, #6
 80025ba:	ddcd      	ble.n	8002558 <HAL_ADC_ConvCpltCallback+0x18>
        }

        // CH7 is last (index 6 if ranks = 0–5 + 7)
        g_vADC_ACS = g_adcAvg[6];
 80025bc:	4b07      	ldr	r3, [pc, #28]	@ (80025dc <HAL_ADC_ConvCpltCallback+0x9c>)
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	4a09      	ldr	r2, [pc, #36]	@ (80025e8 <HAL_ADC_ConvCpltCallback+0xa8>)
 80025c2:	6013      	str	r3, [r2, #0]
    }
}
 80025c4:	bf00      	nop
 80025c6:	3714      	adds	r7, #20
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd90      	pop	{r4, r7, pc}
 80025cc:	40012400 	.word	0x40012400
 80025d0:	200002fc 	.word	0x200002fc
 80025d4:	40533333 	.word	0x40533333
 80025d8:	457ff000 	.word	0x457ff000
 80025dc:	2000030c 	.word	0x2000030c
 80025e0:	3f666666 	.word	0x3f666666
 80025e4:	3dcccccd 	.word	0x3dcccccd
 80025e8:	20000328 	.word	0x20000328

080025ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025ee:	b08b      	sub	sp, #44	@ 0x2c
 80025f0:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025f2:	f003 fc89 	bl	8005f08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025f6:	f000 f8af 	bl	8002758 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025fa:	f000 fa85 	bl	8002b08 <MX_GPIO_Init>
  MX_ADC1_Init();
 80025fe:	f000 f907 	bl	8002810 <MX_ADC1_Init>
//  MX_RTC_Init();
  MX_SPI1_Init();
 8002602:	f000 f9d3 	bl	80029ac <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002606:	f000 fa55 	bl	8002ab4 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 800260a:	f000 f9a1 	bl	8002950 <MX_I2C2_Init>
  MX_TIM3_Init();
 800260e:	f000 fa03 	bl	8002a18 <MX_TIM3_Init>
  UART_Init();
 8002612:	f003 fbdf 	bl	8005dd4 <UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim3);
 8002616:	4847      	ldr	r0, [pc, #284]	@ (8002734 <main+0x148>)
 8002618:	f007 fc56 	bl	8009ec8 <HAL_TIM_Base_Start>
  RF_Init();
 800261c:	f001 fbf6 	bl	8003e0c <RF_Init>
  lcd_init();
 8002620:	f7ff fc71 	bl	8001f06 <lcd_init>
  ADC_Init(&hadc1);
 8002624:	4844      	ldr	r0, [pc, #272]	@ (8002738 <main+0x14c>)
 8002626:	f7ff f99b 	bl	8001960 <ADC_Init>
  LoRa_Init();
 800262a:	f7ff fecd 	bl	80023c8 <LoRa_Init>
  Screen_Init();
 800262e:	f002 fb91 	bl	8004d54 <Screen_Init>
  UART_Init();
 8002632:	f003 fbcf 	bl	8005dd4 <UART_Init>
  Switches_Init();
 8002636:	f003 faad 	bl	8005b94 <Switches_Init>
  Relay_Init();
 800263a:	f001 fb37 	bl	8003cac <Relay_Init>
  LED_Init();
 800263e:	f7ff fce7 	bl	8002010 <LED_Init>


  ACS712_Init(&hadc1);
 8002642:	483d      	ldr	r0, [pc, #244]	@ (8002738 <main+0x14c>)
 8002644:	f7fe ffea 	bl	800161c <ACS712_Init>
  /* === RTC Initialization === */
  RTC_Init();                   /* probe + clear CH */
 8002648:	f001 fc7c 	bl	8003f44 <RTC_Init>
  RTC_GetTimeDate();            /* read once */
 800264c:	f001 fcca 	bl	8003fe4 <RTC_GetTimeDate>
//    RTC_SetTimeDate_AutoDOW(0, 14, 13, 29, 9, 2025);

  Debug_Print("System Initialized\r\n");
 8002650:	483a      	ldr	r0, [pc, #232]	@ (800273c <main+0x150>)
 8002652:	f7ff ff67 	bl	8002524 <Debug_Print>
  ModelHandle_ResetAll();
 8002656:	f000 fb23 	bl	8002ca0 <ModelHandle_ResetAll>
  uint8_t lastSecond = 255;
 800265a:	23ff      	movs	r3, #255	@ 0xff
 800265c:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  ACS712_Update();
 800265e:	f7ff f91d 	bl	800189c <ACS712_Update>
	  RF_SendCode(1766904, 24);
 8002662:	2118      	movs	r1, #24
 8002664:	4836      	ldr	r0, [pc, #216]	@ (8002740 <main+0x154>)
 8002666:	f001 fc12 	bl	8003e8e <RF_SendCode>
      /* App tasks */
      Screen_HandleSwitches();
 800266a:	f003 f803 	bl	8005674 <Screen_HandleSwitches>
      Screen_Update();
 800266e:	f002 f905 	bl	800487c <Screen_Update>
      ADC_ReadAllChannels(&hadc1, &adcData);
 8002672:	4934      	ldr	r1, [pc, #208]	@ (8002744 <main+0x158>)
 8002674:	4830      	ldr	r0, [pc, #192]	@ (8002738 <main+0x14c>)
 8002676:	f7ff f983 	bl	8001980 <ADC_ReadAllChannels>

      /* === Update time once per second === */
      RTC_GetTimeDate();
 800267a:	f001 fcb3 	bl	8003fe4 <RTC_GetTimeDate>
      if (time.seconds != lastSecond) {
 800267e:	4b32      	ldr	r3, [pc, #200]	@ (8002748 <main+0x15c>)
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	7bfa      	ldrb	r2, [r7, #15]
 8002684:	429a      	cmp	r2, r3
 8002686:	d025      	beq.n	80026d4 <main+0xe8>
          lastSecond = time.seconds;
 8002688:	4b2f      	ldr	r3, [pc, #188]	@ (8002748 <main+0x15c>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	73fb      	strb	r3, [r7, #15]

          snprintf(dbg, sizeof(dbg),
                   "⏰ %02d:%02d:%02d 📅 %02d-%02d-%04d (DOW=%d)\r\n",
                   time.hour, time.minutes, time.seconds,
 800268e:	4b2e      	ldr	r3, [pc, #184]	@ (8002748 <main+0x15c>)
 8002690:	789b      	ldrb	r3, [r3, #2]
          snprintf(dbg, sizeof(dbg),
 8002692:	461e      	mov	r6, r3
                   time.hour, time.minutes, time.seconds,
 8002694:	4b2c      	ldr	r3, [pc, #176]	@ (8002748 <main+0x15c>)
 8002696:	785b      	ldrb	r3, [r3, #1]
          snprintf(dbg, sizeof(dbg),
 8002698:	461a      	mov	r2, r3
                   time.hour, time.minutes, time.seconds,
 800269a:	4b2b      	ldr	r3, [pc, #172]	@ (8002748 <main+0x15c>)
 800269c:	781b      	ldrb	r3, [r3, #0]
          snprintf(dbg, sizeof(dbg),
 800269e:	4619      	mov	r1, r3
                   time.dayofmonth, time.month, time.year,
 80026a0:	4b29      	ldr	r3, [pc, #164]	@ (8002748 <main+0x15c>)
 80026a2:	791b      	ldrb	r3, [r3, #4]
          snprintf(dbg, sizeof(dbg),
 80026a4:	4618      	mov	r0, r3
                   time.dayofmonth, time.month, time.year,
 80026a6:	4b28      	ldr	r3, [pc, #160]	@ (8002748 <main+0x15c>)
 80026a8:	795b      	ldrb	r3, [r3, #5]
          snprintf(dbg, sizeof(dbg),
 80026aa:	461c      	mov	r4, r3
                   time.dayofmonth, time.month, time.year,
 80026ac:	4b26      	ldr	r3, [pc, #152]	@ (8002748 <main+0x15c>)
 80026ae:	88db      	ldrh	r3, [r3, #6]
          snprintf(dbg, sizeof(dbg),
 80026b0:	461d      	mov	r5, r3
                   time.dayofweek);
 80026b2:	4b25      	ldr	r3, [pc, #148]	@ (8002748 <main+0x15c>)
 80026b4:	78db      	ldrb	r3, [r3, #3]
          snprintf(dbg, sizeof(dbg),
 80026b6:	9305      	str	r3, [sp, #20]
 80026b8:	9504      	str	r5, [sp, #16]
 80026ba:	9403      	str	r4, [sp, #12]
 80026bc:	9002      	str	r0, [sp, #8]
 80026be:	9101      	str	r1, [sp, #4]
 80026c0:	9200      	str	r2, [sp, #0]
 80026c2:	4633      	mov	r3, r6
 80026c4:	4a21      	ldr	r2, [pc, #132]	@ (800274c <main+0x160>)
 80026c6:	2164      	movs	r1, #100	@ 0x64
 80026c8:	4821      	ldr	r0, [pc, #132]	@ (8002750 <main+0x164>)
 80026ca:	f008 fe7f 	bl	800b3cc <sniprintf>
          Debug_Print(dbg);
 80026ce:	4820      	ldr	r0, [pc, #128]	@ (8002750 <main+0x164>)
 80026d0:	f7ff ff28 	bl	8002524 <Debug_Print>
      }

      /* UART command handling */
      if (UART_GetReceivedPacket(receivedUartPacket, sizeof(receivedUartPacket))) {
 80026d4:	2140      	movs	r1, #64	@ 0x40
 80026d6:	481f      	ldr	r0, [pc, #124]	@ (8002754 <main+0x168>)
 80026d8:	f003 fbae 	bl	8005e38 <UART_GetReceivedPacket>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d01f      	beq.n	8002722 <main+0x136>
          char *p = receivedUartPacket;
 80026e2:	4b1c      	ldr	r3, [pc, #112]	@ (8002754 <main+0x168>)
 80026e4:	60bb      	str	r3, [r7, #8]
          size_t n = strlen(receivedUartPacket);
 80026e6:	481b      	ldr	r0, [pc, #108]	@ (8002754 <main+0x168>)
 80026e8:	f7fd fd3c 	bl	8000164 <strlen>
 80026ec:	6078      	str	r0, [r7, #4]
          if (n >= 2 && p[0] == '@' && p[n-1] == '#') { p[n-1] = '\0'; p++; }
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d913      	bls.n	800271c <main+0x130>
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	2b40      	cmp	r3, #64	@ 0x40
 80026fa:	d10f      	bne.n	800271c <main+0x130>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3b01      	subs	r3, #1
 8002700:	68ba      	ldr	r2, [r7, #8]
 8002702:	4413      	add	r3, r2
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	2b23      	cmp	r3, #35	@ 0x23
 8002708:	d108      	bne.n	800271c <main+0x130>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	3b01      	subs	r3, #1
 800270e:	68ba      	ldr	r2, [r7, #8]
 8002710:	4413      	add	r3, r2
 8002712:	2200      	movs	r2, #0
 8002714:	701a      	strb	r2, [r3, #0]
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	3301      	adds	r3, #1
 800271a:	60bb      	str	r3, [r7, #8]
          ModelHandle_ProcessUartCommand(p);
 800271c:	68b8      	ldr	r0, [r7, #8]
 800271e:	f001 fa2d 	bl	8003b7c <ModelHandle_ProcessUartCommand>
      }

      /* Other tasks */
      ModelHandle_Process();
 8002722:	f001 f9f9 	bl	8003b18 <ModelHandle_Process>
      // ❌ Relay_All(false);  <-- removed, was overriding relay control
      LED_Task();
 8002726:	f7ff fca9 	bl	800207c <LED_Task>

      HAL_Delay(20);  // faster responsiveness (was 50)
 800272a:	2014      	movs	r0, #20
 800272c:	f003 fc4e 	bl	8005fcc <HAL_Delay>
  {
 8002730:	e795      	b.n	800265e <main+0x72>
 8002732:	bf00      	nop
 8002734:	2000041c 	.word	0x2000041c
 8002738:	2000032c 	.word	0x2000032c
 800273c:	0800d82c 	.word	0x0800d82c
 8002740:	001af5f8 	.word	0x001af5f8
 8002744:	200004ac 	.word	0x200004ac
 8002748:	20000610 	.word	0x20000610
 800274c:	0800d844 	.word	0x0800d844
 8002750:	20000518 	.word	0x20000518
 8002754:	200004d8 	.word	0x200004d8

08002758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b094      	sub	sp, #80	@ 0x50
 800275c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800275e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002762:	2228      	movs	r2, #40	@ 0x28
 8002764:	2100      	movs	r1, #0
 8002766:	4618      	mov	r0, r3
 8002768:	f008 ff3e 	bl	800b5e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800276c:	f107 0314 	add.w	r3, r7, #20
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	605a      	str	r2, [r3, #4]
 8002776:	609a      	str	r2, [r3, #8]
 8002778:	60da      	str	r2, [r3, #12]
 800277a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800277c:	1d3b      	adds	r3, r7, #4
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	605a      	str	r2, [r3, #4]
 8002784:	609a      	str	r2, [r3, #8]
 8002786:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002788:	230a      	movs	r3, #10
 800278a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800278c:	2301      	movs	r3, #1
 800278e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002790:	2310      	movs	r3, #16
 8002792:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002794:	2301      	movs	r3, #1
 8002796:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002798:	2302      	movs	r3, #2
 800279a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800279c:	2300      	movs	r3, #0
 800279e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80027a0:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80027a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80027aa:	4618      	mov	r0, r3
 80027ac:	f005 fff8 	bl	80087a0 <HAL_RCC_OscConfig>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <SystemClock_Config+0x62>
  {
    Error_Handler();
 80027b6:	f000 fa25 	bl	8002c04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027ba:	230f      	movs	r3, #15
 80027bc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027be:	2302      	movs	r3, #2
 80027c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027c2:	2300      	movs	r3, #0
 80027c4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80027c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027ca:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027cc:	2300      	movs	r3, #0
 80027ce:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80027d0:	f107 0314 	add.w	r3, r7, #20
 80027d4:	2102      	movs	r1, #2
 80027d6:	4618      	mov	r0, r3
 80027d8:	f006 fa64 	bl	8008ca4 <HAL_RCC_ClockConfig>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80027e2:	f000 fa0f 	bl	8002c04 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 80027e6:	2303      	movs	r3, #3
 80027e8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80027ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027ee:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80027f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80027f4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027f6:	1d3b      	adds	r3, r7, #4
 80027f8:	4618      	mov	r0, r3
 80027fa:	f006 fbe1 	bl	8008fc0 <HAL_RCCEx_PeriphCLKConfig>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002804:	f000 f9fe 	bl	8002c04 <Error_Handler>
  }
}
 8002808:	bf00      	nop
 800280a:	3750      	adds	r7, #80	@ 0x50
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002816:	1d3b      	adds	r3, r7, #4
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]
 800281c:	605a      	str	r2, [r3, #4]
 800281e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002820:	4b49      	ldr	r3, [pc, #292]	@ (8002948 <MX_ADC1_Init+0x138>)
 8002822:	4a4a      	ldr	r2, [pc, #296]	@ (800294c <MX_ADC1_Init+0x13c>)
 8002824:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;//ENABLE;//problem
 8002826:	4b48      	ldr	r3, [pc, #288]	@ (8002948 <MX_ADC1_Init+0x138>)
 8002828:	2200      	movs	r2, #0
 800282a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800282c:	4b46      	ldr	r3, [pc, #280]	@ (8002948 <MX_ADC1_Init+0x138>)
 800282e:	2200      	movs	r2, #0
 8002830:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002832:	4b45      	ldr	r3, [pc, #276]	@ (8002948 <MX_ADC1_Init+0x138>)
 8002834:	2200      	movs	r2, #0
 8002836:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002838:	4b43      	ldr	r3, [pc, #268]	@ (8002948 <MX_ADC1_Init+0x138>)
 800283a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800283e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002840:	4b41      	ldr	r3, [pc, #260]	@ (8002948 <MX_ADC1_Init+0x138>)
 8002842:	2200      	movs	r2, #0
 8002844:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 8002846:	4b40      	ldr	r3, [pc, #256]	@ (8002948 <MX_ADC1_Init+0x138>)
 8002848:	2208      	movs	r2, #8
 800284a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800284c:	483e      	ldr	r0, [pc, #248]	@ (8002948 <MX_ADC1_Init+0x138>)
 800284e:	f003 fbe1 	bl	8006014 <HAL_ADC_Init>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002858:	f000 f9d4 	bl	8002c04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800285c:	2300      	movs	r3, #0
 800285e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002860:	2301      	movs	r3, #1
 8002862:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002864:	2300      	movs	r3, #0
 8002866:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002868:	1d3b      	adds	r3, r7, #4
 800286a:	4619      	mov	r1, r3
 800286c:	4836      	ldr	r0, [pc, #216]	@ (8002948 <MX_ADC1_Init+0x138>)
 800286e:	f003 ff5d 	bl	800672c <HAL_ADC_ConfigChannel>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002878:	f000 f9c4 	bl	8002c04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800287c:	2301      	movs	r3, #1
 800287e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002880:	2302      	movs	r3, #2
 8002882:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002884:	1d3b      	adds	r3, r7, #4
 8002886:	4619      	mov	r1, r3
 8002888:	482f      	ldr	r0, [pc, #188]	@ (8002948 <MX_ADC1_Init+0x138>)
 800288a:	f003 ff4f 	bl	800672c <HAL_ADC_ConfigChannel>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8002894:	f000 f9b6 	bl	8002c04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002898:	2302      	movs	r3, #2
 800289a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800289c:	2303      	movs	r3, #3
 800289e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028a0:	1d3b      	adds	r3, r7, #4
 80028a2:	4619      	mov	r1, r3
 80028a4:	4828      	ldr	r0, [pc, #160]	@ (8002948 <MX_ADC1_Init+0x138>)
 80028a6:	f003 ff41 	bl	800672c <HAL_ADC_ConfigChannel>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <MX_ADC1_Init+0xa4>
  {
    Error_Handler();
 80028b0:	f000 f9a8 	bl	8002c04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80028b4:	2303      	movs	r3, #3
 80028b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80028b8:	2304      	movs	r3, #4
 80028ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028bc:	1d3b      	adds	r3, r7, #4
 80028be:	4619      	mov	r1, r3
 80028c0:	4821      	ldr	r0, [pc, #132]	@ (8002948 <MX_ADC1_Init+0x138>)
 80028c2:	f003 ff33 	bl	800672c <HAL_ADC_ConfigChannel>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 80028cc:	f000 f99a 	bl	8002c04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80028d0:	2304      	movs	r3, #4
 80028d2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80028d4:	2305      	movs	r3, #5
 80028d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028d8:	1d3b      	adds	r3, r7, #4
 80028da:	4619      	mov	r1, r3
 80028dc:	481a      	ldr	r0, [pc, #104]	@ (8002948 <MX_ADC1_Init+0x138>)
 80028de:	f003 ff25 	bl	800672c <HAL_ADC_ConfigChannel>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80028e8:	f000 f98c 	bl	8002c04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80028ec:	2305      	movs	r3, #5
 80028ee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80028f0:	2306      	movs	r3, #6
 80028f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028f4:	1d3b      	adds	r3, r7, #4
 80028f6:	4619      	mov	r1, r3
 80028f8:	4813      	ldr	r0, [pc, #76]	@ (8002948 <MX_ADC1_Init+0x138>)
 80028fa:	f003 ff17 	bl	800672c <HAL_ADC_ConfigChannel>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8002904:	f000 f97e 	bl	8002c04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002908:	2307      	movs	r3, #7
 800290a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800290c:	2307      	movs	r3, #7
 800290e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002910:	1d3b      	adds	r3, r7, #4
 8002912:	4619      	mov	r1, r3
 8002914:	480c      	ldr	r0, [pc, #48]	@ (8002948 <MX_ADC1_Init+0x138>)
 8002916:	f003 ff09 	bl	800672c <HAL_ADC_ConfigChannel>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 8002920:	f000 f970 	bl	8002c04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002924:	2306      	movs	r3, #6
 8002926:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8002928:	2308      	movs	r3, #8
 800292a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800292c:	1d3b      	adds	r3, r7, #4
 800292e:	4619      	mov	r1, r3
 8002930:	4805      	ldr	r0, [pc, #20]	@ (8002948 <MX_ADC1_Init+0x138>)
 8002932:	f003 fefb 	bl	800672c <HAL_ADC_ConfigChannel>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <MX_ADC1_Init+0x130>
  {
    Error_Handler();
 800293c:	f000 f962 	bl	8002c04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002940:	bf00      	nop
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	2000032c 	.word	0x2000032c
 800294c:	40012400 	.word	0x40012400

08002950 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002954:	4b12      	ldr	r3, [pc, #72]	@ (80029a0 <MX_I2C2_Init+0x50>)
 8002956:	4a13      	ldr	r2, [pc, #76]	@ (80029a4 <MX_I2C2_Init+0x54>)
 8002958:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800295a:	4b11      	ldr	r3, [pc, #68]	@ (80029a0 <MX_I2C2_Init+0x50>)
 800295c:	4a12      	ldr	r2, [pc, #72]	@ (80029a8 <MX_I2C2_Init+0x58>)
 800295e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002960:	4b0f      	ldr	r3, [pc, #60]	@ (80029a0 <MX_I2C2_Init+0x50>)
 8002962:	2200      	movs	r2, #0
 8002964:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002966:	4b0e      	ldr	r3, [pc, #56]	@ (80029a0 <MX_I2C2_Init+0x50>)
 8002968:	2200      	movs	r2, #0
 800296a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800296c:	4b0c      	ldr	r3, [pc, #48]	@ (80029a0 <MX_I2C2_Init+0x50>)
 800296e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002972:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002974:	4b0a      	ldr	r3, [pc, #40]	@ (80029a0 <MX_I2C2_Init+0x50>)
 8002976:	2200      	movs	r2, #0
 8002978:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800297a:	4b09      	ldr	r3, [pc, #36]	@ (80029a0 <MX_I2C2_Init+0x50>)
 800297c:	2200      	movs	r2, #0
 800297e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002980:	4b07      	ldr	r3, [pc, #28]	@ (80029a0 <MX_I2C2_Init+0x50>)
 8002982:	2200      	movs	r2, #0
 8002984:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002986:	4b06      	ldr	r3, [pc, #24]	@ (80029a0 <MX_I2C2_Init+0x50>)
 8002988:	2200      	movs	r2, #0
 800298a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800298c:	4804      	ldr	r0, [pc, #16]	@ (80029a0 <MX_I2C2_Init+0x50>)
 800298e:	f004 fbf3 	bl	8007178 <HAL_I2C_Init>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002998:	f000 f934 	bl	8002c04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800299c:	bf00      	nop
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	2000035c 	.word	0x2000035c
 80029a4:	40005800 	.word	0x40005800
 80029a8:	000186a0 	.word	0x000186a0

080029ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80029b0:	4b17      	ldr	r3, [pc, #92]	@ (8002a10 <MX_SPI1_Init+0x64>)
 80029b2:	4a18      	ldr	r2, [pc, #96]	@ (8002a14 <MX_SPI1_Init+0x68>)
 80029b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80029b6:	4b16      	ldr	r3, [pc, #88]	@ (8002a10 <MX_SPI1_Init+0x64>)
 80029b8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80029bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80029be:	4b14      	ldr	r3, [pc, #80]	@ (8002a10 <MX_SPI1_Init+0x64>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80029c4:	4b12      	ldr	r3, [pc, #72]	@ (8002a10 <MX_SPI1_Init+0x64>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029ca:	4b11      	ldr	r3, [pc, #68]	@ (8002a10 <MX_SPI1_Init+0x64>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002a10 <MX_SPI1_Init+0x64>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80029d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002a10 <MX_SPI1_Init+0x64>)
 80029d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80029de:	4b0c      	ldr	r3, [pc, #48]	@ (8002a10 <MX_SPI1_Init+0x64>)
 80029e0:	2218      	movs	r2, #24
 80029e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002a10 <MX_SPI1_Init+0x64>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80029ea:	4b09      	ldr	r3, [pc, #36]	@ (8002a10 <MX_SPI1_Init+0x64>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029f0:	4b07      	ldr	r3, [pc, #28]	@ (8002a10 <MX_SPI1_Init+0x64>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80029f6:	4b06      	ldr	r3, [pc, #24]	@ (8002a10 <MX_SPI1_Init+0x64>)
 80029f8:	220a      	movs	r2, #10
 80029fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80029fc:	4804      	ldr	r0, [pc, #16]	@ (8002a10 <MX_SPI1_Init+0x64>)
 80029fe:	f006 fc7e 	bl	80092fe <HAL_SPI_Init>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002a08:	f000 f8fc 	bl	8002c04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a0c:	bf00      	nop
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	200003c4 	.word	0x200003c4
 8002a14:	40013000 	.word	0x40013000

08002a18 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a1e:	f107 0308 	add.w	r3, r7, #8
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	605a      	str	r2, [r3, #4]
 8002a28:	609a      	str	r2, [r3, #8]
 8002a2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a2c:	463b      	mov	r3, r7
 8002a2e:	2200      	movs	r2, #0
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a34:	4b1d      	ldr	r3, [pc, #116]	@ (8002aac <MX_TIM3_Init+0x94>)
 8002a36:	4a1e      	ldr	r2, [pc, #120]	@ (8002ab0 <MX_TIM3_Init+0x98>)
 8002a38:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002a3a:	4b1c      	ldr	r3, [pc, #112]	@ (8002aac <MX_TIM3_Init+0x94>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a40:	4b1a      	ldr	r3, [pc, #104]	@ (8002aac <MX_TIM3_Init+0x94>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff;
 8002a46:	4b19      	ldr	r3, [pc, #100]	@ (8002aac <MX_TIM3_Init+0x94>)
 8002a48:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a4c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a4e:	4b17      	ldr	r3, [pc, #92]	@ (8002aac <MX_TIM3_Init+0x94>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a54:	4b15      	ldr	r3, [pc, #84]	@ (8002aac <MX_TIM3_Init+0x94>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002a5a:	4814      	ldr	r0, [pc, #80]	@ (8002aac <MX_TIM3_Init+0x94>)
 8002a5c:	f007 f9e5 	bl	8009e2a <HAL_TIM_Base_Init>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002a66:	f000 f8cd 	bl	8002c04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a6e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002a70:	f107 0308 	add.w	r3, r7, #8
 8002a74:	4619      	mov	r1, r3
 8002a76:	480d      	ldr	r0, [pc, #52]	@ (8002aac <MX_TIM3_Init+0x94>)
 8002a78:	f007 fa70 	bl	8009f5c <HAL_TIM_ConfigClockSource>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002a82:	f000 f8bf 	bl	8002c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a86:	2300      	movs	r3, #0
 8002a88:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a8e:	463b      	mov	r3, r7
 8002a90:	4619      	mov	r1, r3
 8002a92:	4806      	ldr	r0, [pc, #24]	@ (8002aac <MX_TIM3_Init+0x94>)
 8002a94:	f007 fc2e 	bl	800a2f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002a9e:	f000 f8b1 	bl	8002c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002aa2:	bf00      	nop
 8002aa4:	3718      	adds	r7, #24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	2000041c 	.word	0x2000041c
 8002ab0:	40000400 	.word	0x40000400

08002ab4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ab8:	4b11      	ldr	r3, [pc, #68]	@ (8002b00 <MX_USART1_UART_Init+0x4c>)
 8002aba:	4a12      	ldr	r2, [pc, #72]	@ (8002b04 <MX_USART1_UART_Init+0x50>)
 8002abc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002abe:	4b10      	ldr	r3, [pc, #64]	@ (8002b00 <MX_USART1_UART_Init+0x4c>)
 8002ac0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ac4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8002b00 <MX_USART1_UART_Init+0x4c>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002acc:	4b0c      	ldr	r3, [pc, #48]	@ (8002b00 <MX_USART1_UART_Init+0x4c>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8002b00 <MX_USART1_UART_Init+0x4c>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ad8:	4b09      	ldr	r3, [pc, #36]	@ (8002b00 <MX_USART1_UART_Init+0x4c>)
 8002ada:	220c      	movs	r2, #12
 8002adc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ade:	4b08      	ldr	r3, [pc, #32]	@ (8002b00 <MX_USART1_UART_Init+0x4c>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ae4:	4b06      	ldr	r3, [pc, #24]	@ (8002b00 <MX_USART1_UART_Init+0x4c>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002aea:	4805      	ldr	r0, [pc, #20]	@ (8002b00 <MX_USART1_UART_Init+0x4c>)
 8002aec:	f007 fc60 	bl	800a3b0 <HAL_UART_Init>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002af6:	f000 f885 	bl	8002c04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002afa:	bf00      	nop
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	20000464 	.word	0x20000464
 8002b04:	40013800 	.word	0x40013800

08002b08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b088      	sub	sp, #32
 8002b0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b0e:	f107 0310 	add.w	r3, r7, #16
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	605a      	str	r2, [r3, #4]
 8002b18:	609a      	str	r2, [r3, #8]
 8002b1a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b1c:	4b35      	ldr	r3, [pc, #212]	@ (8002bf4 <MX_GPIO_Init+0xec>)
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	4a34      	ldr	r2, [pc, #208]	@ (8002bf4 <MX_GPIO_Init+0xec>)
 8002b22:	f043 0310 	orr.w	r3, r3, #16
 8002b26:	6193      	str	r3, [r2, #24]
 8002b28:	4b32      	ldr	r3, [pc, #200]	@ (8002bf4 <MX_GPIO_Init+0xec>)
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	f003 0310 	and.w	r3, r3, #16
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b34:	4b2f      	ldr	r3, [pc, #188]	@ (8002bf4 <MX_GPIO_Init+0xec>)
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	4a2e      	ldr	r2, [pc, #184]	@ (8002bf4 <MX_GPIO_Init+0xec>)
 8002b3a:	f043 0304 	orr.w	r3, r3, #4
 8002b3e:	6193      	str	r3, [r2, #24]
 8002b40:	4b2c      	ldr	r3, [pc, #176]	@ (8002bf4 <MX_GPIO_Init+0xec>)
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	60bb      	str	r3, [r7, #8]
 8002b4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b4c:	4b29      	ldr	r3, [pc, #164]	@ (8002bf4 <MX_GPIO_Init+0xec>)
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	4a28      	ldr	r2, [pc, #160]	@ (8002bf4 <MX_GPIO_Init+0xec>)
 8002b52:	f043 0308 	orr.w	r3, r3, #8
 8002b56:	6193      	str	r3, [r2, #24]
 8002b58:	4b26      	ldr	r3, [pc, #152]	@ (8002bf4 <MX_GPIO_Init+0xec>)
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	f003 0308 	and.w	r3, r3, #8
 8002b60:	607b      	str	r3, [r7, #4]
 8002b62:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Relay1_Pin|Relay2_Pin|Relay3_Pin|LORA_STATUS_Pin
 8002b64:	2200      	movs	r2, #0
 8002b66:	f240 3147 	movw	r1, #839	@ 0x347
 8002b6a:	4823      	ldr	r0, [pc, #140]	@ (8002bf8 <MX_GPIO_Init+0xf0>)
 8002b6c:	f004 fad3 	bl	8007116 <HAL_GPIO_WritePin>
                          |LED4_Pin|LED5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LORA_SELECT_Pin, GPIO_PIN_RESET);
 8002b70:	2200      	movs	r2, #0
 8002b72:	f44f 4119 	mov.w	r1, #39168	@ 0x9900
 8002b76:	4821      	ldr	r0, [pc, #132]	@ (8002bfc <MX_GPIO_Init+0xf4>)
 8002b78:	f004 facd 	bl	8007116 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Relay1_Pin Relay2_Pin Relay3_Pin LORA_STATUS_Pin
                           LED4_Pin LED5_Pin */
  GPIO_InitStruct.Pin = Relay1_Pin|Relay2_Pin|Relay3_Pin|LORA_STATUS_Pin
 8002b7c:	f240 3347 	movw	r3, #839	@ 0x347
 8002b80:	613b      	str	r3, [r7, #16]
                          |LED4_Pin|LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b82:	2301      	movs	r3, #1
 8002b84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b86:	2300      	movs	r3, #0
 8002b88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b8e:	f107 0310 	add.w	r3, r7, #16
 8002b92:	4619      	mov	r1, r3
 8002b94:	4818      	ldr	r0, [pc, #96]	@ (8002bf8 <MX_GPIO_Init+0xf0>)
 8002b96:	f004 f923 	bl	8006de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWITCH1_Pin SWITCH2_Pin SWITCH3_Pin SWITCH4_Pin */
  GPIO_InitStruct.Pin = SWITCH1_Pin|SWITCH2_Pin|SWITCH3_Pin|SWITCH4_Pin;
 8002b9a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8002b9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002ba0:	4b17      	ldr	r3, [pc, #92]	@ (8002c00 <MX_GPIO_Init+0xf8>)
 8002ba2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ba8:	f107 0310 	add.w	r3, r7, #16
 8002bac:	4619      	mov	r1, r3
 8002bae:	4812      	ldr	r0, [pc, #72]	@ (8002bf8 <MX_GPIO_Init+0xf0>)
 8002bb0:	f004 f916 	bl	8006de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LORA_SELECT_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LORA_SELECT_Pin;
 8002bb4:	f44f 4319 	mov.w	r3, #39168	@ 0x9900
 8002bb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bc6:	f107 0310 	add.w	r3, r7, #16
 8002bca:	4619      	mov	r1, r3
 8002bcc:	480b      	ldr	r0, [pc, #44]	@ (8002bfc <MX_GPIO_Init+0xf4>)
 8002bce:	f004 f907 	bl	8006de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_DATA_Pin */
  GPIO_InitStruct.Pin = RF_DATA_Pin;
 8002bd2:	2380      	movs	r3, #128	@ 0x80
 8002bd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RF_DATA_GPIO_Port, &GPIO_InitStruct);
 8002bde:	f107 0310 	add.w	r3, r7, #16
 8002be2:	4619      	mov	r1, r3
 8002be4:	4804      	ldr	r0, [pc, #16]	@ (8002bf8 <MX_GPIO_Init+0xf0>)
 8002be6:	f004 f8fb 	bl	8006de0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002bea:	bf00      	nop
 8002bec:	3720      	adds	r7, #32
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	40010c00 	.word	0x40010c00
 8002bfc:	40010800 	.word	0x40010800
 8002c00:	10310000 	.word	0x10310000

08002c04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c08:	b672      	cpsid	i
}
 8002c0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c0c:	bf00      	nop
 8002c0e:	e7fd      	b.n	8002c0c <Error_Handler+0x8>

08002c10 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002c14:	f3bf 8f4f 	dsb	sy
}
 8002c18:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002c1a:	4b06      	ldr	r3, [pc, #24]	@ (8002c34 <__NVIC_SystemReset+0x24>)
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002c22:	4904      	ldr	r1, [pc, #16]	@ (8002c34 <__NVIC_SystemReset+0x24>)
 8002c24:	4b04      	ldr	r3, [pc, #16]	@ (8002c38 <__NVIC_SystemReset+0x28>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002c2a:	f3bf 8f4f 	dsb	sy
}
 8002c2e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002c30:	bf00      	nop
 8002c32:	e7fd      	b.n	8002c30 <__NVIC_SystemReset+0x20>
 8002c34:	e000ed00 	.word	0xe000ed00
 8002c38:	05fa0004 	.word	0x05fa0004

08002c3c <now_ms>:
static uint32_t dryStopDeadline  = 0;

/* =========================
   Utilities
   ========================= */
static inline uint32_t now_ms(void) { return HAL_GetTick(); }
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	f003 f9ba 	bl	8005fb8 <HAL_GetTick>
 8002c44:	4603      	mov	r3, r0
 8002c46:	4618      	mov	r0, r3
 8002c48:	bd80      	pop	{r7, pc}
	...

08002c4c <clear_all_modes>:

static inline void clear_all_modes(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
    manualActive    = false;
 8002c50:	4b0c      	ldr	r3, [pc, #48]	@ (8002c84 <clear_all_modes+0x38>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	701a      	strb	r2, [r3, #0]
    countdownActive = false;
 8002c56:	4b0c      	ldr	r3, [pc, #48]	@ (8002c88 <clear_all_modes+0x3c>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	701a      	strb	r2, [r3, #0]
    twistActive     = false;
 8002c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c8c <clear_all_modes+0x40>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	701a      	strb	r2, [r3, #0]
    searchActive    = false;
 8002c62:	4b0b      	ldr	r3, [pc, #44]	@ (8002c90 <clear_all_modes+0x44>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	701a      	strb	r2, [r3, #0]
    timerActive     = false;
 8002c68:	4b0a      	ldr	r3, [pc, #40]	@ (8002c94 <clear_all_modes+0x48>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	701a      	strb	r2, [r3, #0]
    semiAutoActive  = false;
 8002c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c98 <clear_all_modes+0x4c>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	701a      	strb	r2, [r3, #0]
    manualOverride  = false;
 8002c74:	4b09      	ldr	r3, [pc, #36]	@ (8002c9c <clear_all_modes+0x50>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	701a      	strb	r2, [r3, #0]
}
 8002c7a:	bf00      	nop
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bc80      	pop	{r7}
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	2000057d 	.word	0x2000057d
 8002c88:	2000057e 	.word	0x2000057e
 8002c8c:	2000057f 	.word	0x2000057f
 8002c90:	20000580 	.word	0x20000580
 8002c94:	20000581 	.word	0x20000581
 8002c98:	20000582 	.word	0x20000582
 8002c9c:	20000587 	.word	0x20000587

08002ca0 <ModelHandle_ResetAll>:

void ModelHandle_ResetAll(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
    clear_all_modes();
 8002ca4:	f7ff ffd2 	bl	8002c4c <clear_all_modes>

    // Clear protections & timers
    senseDryRun = senseOverLoad = senseOverUnderVolt = senseMaxRunReached = false;
 8002ca8:	2200      	movs	r2, #0
 8002caa:	4b17      	ldr	r3, [pc, #92]	@ (8002d08 <ModelHandle_ResetAll+0x68>)
 8002cac:	4611      	mov	r1, r2
 8002cae:	7019      	strb	r1, [r3, #0]
 8002cb0:	4b16      	ldr	r3, [pc, #88]	@ (8002d0c <ModelHandle_ResetAll+0x6c>)
 8002cb2:	4611      	mov	r1, r2
 8002cb4:	7019      	strb	r1, [r3, #0]
 8002cb6:	4b16      	ldr	r3, [pc, #88]	@ (8002d10 <ModelHandle_ResetAll+0x70>)
 8002cb8:	4611      	mov	r1, r2
 8002cba:	7019      	strb	r1, [r3, #0]
 8002cbc:	4b15      	ldr	r3, [pc, #84]	@ (8002d14 <ModelHandle_ResetAll+0x74>)
 8002cbe:	701a      	strb	r2, [r3, #0]
    maxRunTimerArmed = false;
 8002cc0:	4b15      	ldr	r3, [pc, #84]	@ (8002d18 <ModelHandle_ResetAll+0x78>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	701a      	strb	r2, [r3, #0]
    maxRunStartTick  = 0;
 8002cc6:	4b15      	ldr	r3, [pc, #84]	@ (8002d1c <ModelHandle_ResetAll+0x7c>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
    dryTimerArmed    = false;
 8002ccc:	4b14      	ldr	r3, [pc, #80]	@ (8002d20 <ModelHandle_ResetAll+0x80>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	701a      	strb	r2, [r3, #0]
    dryStopDeadline  = 0;
 8002cd2:	4b14      	ldr	r3, [pc, #80]	@ (8002d24 <ModelHandle_ResetAll+0x84>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]

    // Ensure ALL relays OFF (safety first at boot/reset)
    Relay_Set(1, false);
 8002cd8:	2100      	movs	r1, #0
 8002cda:	2001      	movs	r0, #1
 8002cdc:	f001 f830 	bl	8003d40 <Relay_Set>
    Relay_Set(2, false);
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	2002      	movs	r0, #2
 8002ce4:	f001 f82c 	bl	8003d40 <Relay_Set>
    Relay_Set(3, false);
 8002ce8:	2100      	movs	r1, #0
 8002cea:	2003      	movs	r0, #3
 8002cec:	f001 f828 	bl	8003d40 <Relay_Set>
    motorStatus = 0;
 8002cf0:	4b0d      	ldr	r3, [pc, #52]	@ (8002d28 <ModelHandle_ResetAll+0x88>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	701a      	strb	r2, [r3, #0]

    LED_ClearAllIntents();
 8002cf6:	f7ff fa3d 	bl	8002174 <LED_ClearAllIntents>
    LED_ApplyIntents();
 8002cfa:	f7ff fa7b 	bl	80021f4 <LED_ApplyIntents>
    printf("Model Reset: All modes OFF, motor OFF\r\n");
 8002cfe:	480b      	ldr	r0, [pc, #44]	@ (8002d2c <ModelHandle_ResetAll+0x8c>)
 8002d00:	f008 fb5c 	bl	800b3bc <puts>
}
 8002d04:	bf00      	nop
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	20000586 	.word	0x20000586
 8002d0c:	20000585 	.word	0x20000585
 8002d10:	20000584 	.word	0x20000584
 8002d14:	20000583 	.word	0x20000583
 8002d18:	20000588 	.word	0x20000588
 8002d1c:	2000058c 	.word	0x2000058c
 8002d20:	20000590 	.word	0x20000590
 8002d24:	20000594 	.word	0x20000594
 8002d28:	2000057c 	.word	0x2000057c
 8002d2c:	0800d878 	.word	0x0800d878

08002d30 <ModelHandle_TimeToSeconds>:

uint32_t ModelHandle_TimeToSeconds(uint8_t hh, uint8_t mm) {
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	4603      	mov	r3, r0
 8002d38:	460a      	mov	r2, r1
 8002d3a:	71fb      	strb	r3, [r7, #7]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	71bb      	strb	r3, [r7, #6]
    return ((uint32_t)hh * 3600UL) + ((uint32_t)mm * 60UL);
 8002d40:	79fb      	ldrb	r3, [r7, #7]
 8002d42:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8002d46:	fb02 f103 	mul.w	r1, r2, r3
 8002d4a:	79ba      	ldrb	r2, [r7, #6]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	011b      	lsls	r3, r3, #4
 8002d50:	1a9b      	subs	r3, r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	440b      	add	r3, r1
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr

08002d60 <motor_apply>:

/* =========================
   Motor Control
   ========================= */
static inline void motor_apply(bool on)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	4603      	mov	r3, r0
 8002d68:	71fb      	strb	r3, [r7, #7]
    Relay_Set(1, on);
 8002d6a:	79fb      	ldrb	r3, [r7, #7]
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	2001      	movs	r0, #1
 8002d70:	f000 ffe6 	bl	8003d40 <Relay_Set>
    motorStatus = on ? 1U : 0U;
 8002d74:	79fb      	ldrb	r3, [r7, #7]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <motor_apply+0x1e>
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	e000      	b.n	8002d80 <motor_apply+0x20>
 8002d7e:	2200      	movs	r2, #0
 8002d80:	4b10      	ldr	r3, [pc, #64]	@ (8002dc4 <motor_apply+0x64>)
 8002d82:	701a      	strb	r2, [r3, #0]

    if (on) {
 8002d84:	79fb      	ldrb	r3, [r7, #7]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00f      	beq.n	8002daa <motor_apply+0x4a>
        if (!maxRunTimerArmed) {
 8002d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8002dc8 <motor_apply+0x68>)
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	f083 0301 	eor.w	r3, r3, #1
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d011      	beq.n	8002dbc <motor_apply+0x5c>
            maxRunTimerArmed = true;
 8002d98:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc8 <motor_apply+0x68>)
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	701a      	strb	r2, [r3, #0]
            maxRunStartTick  = now_ms();
 8002d9e:	f7ff ff4d 	bl	8002c3c <now_ms>
 8002da2:	4603      	mov	r3, r0
 8002da4:	4a09      	ldr	r2, [pc, #36]	@ (8002dcc <motor_apply+0x6c>)
 8002da6:	6013      	str	r3, [r2, #0]
        maxRunTimerArmed = false;
        // When motor turns OFF, cancel pending dry timer
        dryTimerArmed = false;
        dryStopDeadline = 0;
    }
}
 8002da8:	e008      	b.n	8002dbc <motor_apply+0x5c>
        maxRunTimerArmed = false;
 8002daa:	4b07      	ldr	r3, [pc, #28]	@ (8002dc8 <motor_apply+0x68>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	701a      	strb	r2, [r3, #0]
        dryTimerArmed = false;
 8002db0:	4b07      	ldr	r3, [pc, #28]	@ (8002dd0 <motor_apply+0x70>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	701a      	strb	r2, [r3, #0]
        dryStopDeadline = 0;
 8002db6:	4b07      	ldr	r3, [pc, #28]	@ (8002dd4 <motor_apply+0x74>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]
}
 8002dbc:	bf00      	nop
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	2000057c 	.word	0x2000057c
 8002dc8:	20000588 	.word	0x20000588
 8002dcc:	2000058c 	.word	0x2000058c
 8002dd0:	20000590 	.word	0x20000590
 8002dd4:	20000594 	.word	0x20000594

08002dd8 <start_motor>:

static inline void start_motor(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
    motor_apply(true);
 8002ddc:	2001      	movs	r0, #1
 8002dde:	f7ff ffbf 	bl	8002d60 <motor_apply>
    printf("Relay1 -> %s\r\n", Relay_Get(1) ? "ON" : "OFF");
 8002de2:	2001      	movs	r0, #1
 8002de4:	f000 ffd0 	bl	8003d88 <Relay_Get>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <start_motor+0x1a>
 8002dee:	4b04      	ldr	r3, [pc, #16]	@ (8002e00 <start_motor+0x28>)
 8002df0:	e000      	b.n	8002df4 <start_motor+0x1c>
 8002df2:	4b04      	ldr	r3, [pc, #16]	@ (8002e04 <start_motor+0x2c>)
 8002df4:	4619      	mov	r1, r3
 8002df6:	4804      	ldr	r0, [pc, #16]	@ (8002e08 <start_motor+0x30>)
 8002df8:	f008 fa78 	bl	800b2ec <iprintf>
}
 8002dfc:	bf00      	nop
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	0800d8a0 	.word	0x0800d8a0
 8002e04:	0800d8a4 	.word	0x0800d8a4
 8002e08:	0800d8a8 	.word	0x0800d8a8

08002e0c <stop_motor_keep_modes>:
static inline void stop_motor_keep_modes(void)  { motor_apply(false); }
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	2000      	movs	r0, #0
 8002e12:	f7ff ffa5 	bl	8002d60 <motor_apply>
 8002e16:	bf00      	nop
 8002e18:	bd80      	pop	{r7, pc}
	...

08002e1c <ModelHandle_StopAllModesAndMotor>:

/* Hard OFF: stop and clear every mode flag (used for terminal OFF or external OFF) */
void ModelHandle_StopAllModesAndMotor(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
    clear_all_modes();
 8002e20:	f7ff ff14 	bl	8002c4c <clear_all_modes>
    stop_motor_keep_modes();
 8002e24:	f7ff fff2 	bl	8002e0c <stop_motor_keep_modes>
    printf("ALL MODES OFF + MOTOR OFF\r\n");
 8002e28:	4802      	ldr	r0, [pc, #8]	@ (8002e34 <ModelHandle_StopAllModesAndMotor+0x18>)
 8002e2a:	f008 fac7 	bl	800b3bc <puts>
}
 8002e2e:	bf00      	nop
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	0800d8b8 	.word	0x0800d8b8

08002e38 <isTankFull>:

/* =========================
   Tank Check (4/5 submerged)
   ========================= */
static bool isTankFull(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
    int submergedCount = 0;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 5; i++) {
 8002e42:	2300      	movs	r3, #0
 8002e44:	603b      	str	r3, [r7, #0]
 8002e46:	e012      	b.n	8002e6e <isTankFull+0x36>
        if (adcData.voltages[i] < 0.1f) submergedCount++;
 8002e48:	4a0f      	ldr	r2, [pc, #60]	@ (8002e88 <isTankFull+0x50>)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	3302      	adds	r3, #2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4413      	add	r3, r2
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	490d      	ldr	r1, [pc, #52]	@ (8002e8c <isTankFull+0x54>)
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fe f8cc 	bl	8000ff4 <__aeabi_fcmplt>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d002      	beq.n	8002e68 <isTankFull+0x30>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	3301      	adds	r3, #1
 8002e66:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 5; i++) {
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	603b      	str	r3, [r7, #0]
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	2b04      	cmp	r3, #4
 8002e72:	dde9      	ble.n	8002e48 <isTankFull+0x10>
    }
    return (submergedCount >= 4);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b03      	cmp	r3, #3
 8002e78:	bfcc      	ite	gt
 8002e7a:	2301      	movgt	r3, #1
 8002e7c:	2300      	movle	r3, #0
 8002e7e:	b2db      	uxtb	r3, r3
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	200004ac 	.word	0x200004ac
 8002e8c:	3dcccccd 	.word	0x3dcccccd

08002e90 <ModelHandle_TriggerAuxBurst>:

/* ===== Aux burst public API ===== */
void ModelHandle_TriggerAuxBurst(uint16_t seconds)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	4603      	mov	r3, r0
 8002e98:	80fb      	strh	r3, [r7, #6]
    if (seconds == 0) seconds = 1;
 8002e9a:	88fb      	ldrh	r3, [r7, #6]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d101      	bne.n	8002ea4 <ModelHandle_TriggerAuxBurst+0x14>
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	80fb      	strh	r3, [r7, #6]
    Relay_Set(2, true);
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	2002      	movs	r0, #2
 8002ea8:	f000 ff4a 	bl	8003d40 <Relay_Set>
    Relay_Set(3, true);
 8002eac:	2101      	movs	r1, #1
 8002eae:	2003      	movs	r0, #3
 8002eb0:	f000 ff46 	bl	8003d40 <Relay_Set>
    auxBurstActive     = true;
 8002eb4:	4b08      	ldr	r3, [pc, #32]	@ (8002ed8 <ModelHandle_TriggerAuxBurst+0x48>)
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	701a      	strb	r2, [r3, #0]
    auxBurstDeadlineMs = HAL_GetTick() + ((uint32_t)seconds * 1000UL);
 8002eba:	f003 f87d 	bl	8005fb8 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	88fb      	ldrh	r3, [r7, #6]
 8002ec2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002ec6:	fb01 f303 	mul.w	r3, r1, r3
 8002eca:	4413      	add	r3, r2
 8002ecc:	4a03      	ldr	r2, [pc, #12]	@ (8002edc <ModelHandle_TriggerAuxBurst+0x4c>)
 8002ece:	6013      	str	r3, [r2, #0]
}
 8002ed0:	bf00      	nop
 8002ed2:	3708      	adds	r7, #8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	2000059c 	.word	0x2000059c
 8002edc:	200005a0 	.word	0x200005a0

08002ee0 <dry_raw_is_dry>:

/* =========================
   DRY helpers (shared)
   ========================= */
static inline bool dry_raw_is_dry(void)
{
 8002ee0:	b590      	push	{r4, r7, lr}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
    float v = adcData.voltages[0];
 8002ee6:	4b09      	ldr	r3, [pc, #36]	@ (8002f0c <dry_raw_is_dry+0x2c>)
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	607b      	str	r3, [r7, #4]
    if (DRY_ACTIVE_LOW) return (v < DRY_THRESHOLD_V);
 8002eec:	2301      	movs	r3, #1
 8002eee:	461c      	mov	r4, r3
 8002ef0:	4907      	ldr	r1, [pc, #28]	@ (8002f10 <dry_raw_is_dry+0x30>)
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7fe f87e 	bl	8000ff4 <__aeabi_fcmplt>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <dry_raw_is_dry+0x22>
 8002efe:	2300      	movs	r3, #0
 8002f00:	461c      	mov	r4, r3
 8002f02:	b2e3      	uxtb	r3, r4
    else                return (v > DRY_THRESHOLD_V);
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd90      	pop	{r4, r7, pc}
 8002f0c:	200004ac 	.word	0x200004ac
 8002f10:	3dcccccd 	.word	0x3dcccccd

08002f14 <ModelHandle_ToggleManual>:

/* =========================
   Manual Mode
   ========================= */
void ModelHandle_ToggleManual(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
    // toggling manual should dominate and clear other modes
    bool will_on = !manualActive;
 8002f1a:	4b15      	ldr	r3, [pc, #84]	@ (8002f70 <ModelHandle_ToggleManual+0x5c>)
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	bf14      	ite	ne
 8002f24:	2301      	movne	r3, #1
 8002f26:	2300      	moveq	r3, #0
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	f083 0301 	eor.w	r3, r3, #1
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	71fb      	strb	r3, [r7, #7]
 8002f32:	79fb      	ldrb	r3, [r7, #7]
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	71fb      	strb	r3, [r7, #7]

    if (will_on) {
 8002f3a:	79fb      	ldrb	r3, [r7, #7]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00d      	beq.n	8002f5c <ModelHandle_ToggleManual+0x48>
        clear_all_modes();
 8002f40:	f7ff fe84 	bl	8002c4c <clear_all_modes>
        manualOverride = true;
 8002f44:	4b0b      	ldr	r3, [pc, #44]	@ (8002f74 <ModelHandle_ToggleManual+0x60>)
 8002f46:	2201      	movs	r2, #1
 8002f48:	701a      	strb	r2, [r3, #0]
        manualActive   = true;
 8002f4a:	4b09      	ldr	r3, [pc, #36]	@ (8002f70 <ModelHandle_ToggleManual+0x5c>)
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	701a      	strb	r2, [r3, #0]
        start_motor();
 8002f50:	f7ff ff42 	bl	8002dd8 <start_motor>
        printf("Manual ON\r\n");
 8002f54:	4808      	ldr	r0, [pc, #32]	@ (8002f78 <ModelHandle_ToggleManual+0x64>)
 8002f56:	f008 fa31 	bl	800b3bc <puts>
    } else {
        ModelHandle_StopAllModesAndMotor(); // OFF should clear everything
        printf("Manual OFF\r\n");
    }
}
 8002f5a:	e004      	b.n	8002f66 <ModelHandle_ToggleManual+0x52>
        ModelHandle_StopAllModesAndMotor(); // OFF should clear everything
 8002f5c:	f7ff ff5e 	bl	8002e1c <ModelHandle_StopAllModesAndMotor>
        printf("Manual OFF\r\n");
 8002f60:	4806      	ldr	r0, [pc, #24]	@ (8002f7c <ModelHandle_ToggleManual+0x68>)
 8002f62:	f008 fa2b 	bl	800b3bc <puts>
}
 8002f66:	bf00      	nop
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	2000057d 	.word	0x2000057d
 8002f74:	20000587 	.word	0x20000587
 8002f78:	0800d8d4 	.word	0x0800d8d4
 8002f7c:	0800d8e0 	.word	0x0800d8e0

08002f80 <ModelHandle_ManualLongPress>:

void ModelHandle_ManualLongPress(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
    printf("Manual Long Press → System Reset\r\n");
 8002f84:	4803      	ldr	r0, [pc, #12]	@ (8002f94 <ModelHandle_ManualLongPress+0x14>)
 8002f86:	f008 fa19 	bl	800b3bc <puts>
    HAL_Delay(100);
 8002f8a:	2064      	movs	r0, #100	@ 0x64
 8002f8c:	f003 f81e 	bl	8005fcc <HAL_Delay>
    NVIC_SystemReset();
 8002f90:	f7ff fe3e 	bl	8002c10 <__NVIC_SystemReset>
 8002f94:	0800d8ec 	.word	0x0800d8ec

08002f98 <ModelHandle_StopCountdown>:
static uint32_t cd_run_seconds      = 0;
static bool     cd_in_rest          = false;
static const uint32_t CD_REST_MS    = 3000;

void ModelHandle_StopCountdown(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
    stop_motor_keep_modes();
 8002f9c:	f7ff ff36 	bl	8002e0c <stop_motor_keep_modes>
    countdownActive        = false;
 8002fa0:	4b09      	ldr	r3, [pc, #36]	@ (8002fc8 <ModelHandle_StopCountdown+0x30>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	701a      	strb	r2, [r3, #0]
    countdownMode          = false;
 8002fa6:	4b09      	ldr	r3, [pc, #36]	@ (8002fcc <ModelHandle_StopCountdown+0x34>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	701a      	strb	r2, [r3, #0]
    countdownRemainingRuns = 0;
 8002fac:	4b08      	ldr	r3, [pc, #32]	@ (8002fd0 <ModelHandle_StopCountdown+0x38>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	801a      	strh	r2, [r3, #0]
    cd_run_seconds         = 0;
 8002fb2:	4b08      	ldr	r3, [pc, #32]	@ (8002fd4 <ModelHandle_StopCountdown+0x3c>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]
    cd_in_rest             = false;
 8002fb8:	4b07      	ldr	r3, [pc, #28]	@ (8002fd8 <ModelHandle_StopCountdown+0x40>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	701a      	strb	r2, [r3, #0]
    countdownDuration      = 0;
 8002fbe:	4b07      	ldr	r3, [pc, #28]	@ (8002fdc <ModelHandle_StopCountdown+0x44>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]
}
 8002fc4:	bf00      	nop
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	2000057e 	.word	0x2000057e
 8002fcc:	2000001d 	.word	0x2000001d
 8002fd0:	200005e0 	.word	0x200005e0
 8002fd4:	200005ec 	.word	0x200005ec
 8002fd8:	200005f0 	.word	0x200005f0
 8002fdc:	20000598 	.word	0x20000598

08002fe0 <countdown_start_one_run>:
static void countdown_start_one_run(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
    cd_deadline_ms    = now_ms() + (cd_run_seconds * 1000UL);
 8002fe4:	f7ff fe2a 	bl	8002c3c <now_ms>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	4b0a      	ldr	r3, [pc, #40]	@ (8003014 <countdown_start_one_run+0x34>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002ff2:	fb01 f303 	mul.w	r3, r1, r3
 8002ff6:	4413      	add	r3, r2
 8002ff8:	4a07      	ldr	r2, [pc, #28]	@ (8003018 <countdown_start_one_run+0x38>)
 8002ffa:	6013      	str	r3, [r2, #0]
    countdownDuration = cd_run_seconds;
 8002ffc:	4b05      	ldr	r3, [pc, #20]	@ (8003014 <countdown_start_one_run+0x34>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a06      	ldr	r2, [pc, #24]	@ (800301c <countdown_start_one_run+0x3c>)
 8003002:	6013      	str	r3, [r2, #0]
    cd_in_rest        = false;
 8003004:	4b06      	ldr	r3, [pc, #24]	@ (8003020 <countdown_start_one_run+0x40>)
 8003006:	2200      	movs	r2, #0
 8003008:	701a      	strb	r2, [r3, #0]
    start_motor();
 800300a:	f7ff fee5 	bl	8002dd8 <start_motor>
}
 800300e:	bf00      	nop
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	200005ec 	.word	0x200005ec
 8003018:	200005e4 	.word	0x200005e4
 800301c:	20000598 	.word	0x20000598
 8003020:	200005f0 	.word	0x200005f0

08003024 <ModelHandle_StartCountdown>:
void ModelHandle_StartCountdown(uint32_t seconds_per_run, uint16_t repeats)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	460b      	mov	r3, r1
 800302e:	807b      	strh	r3, [r7, #2]
    if (seconds_per_run == 0 || repeats == 0) {
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d002      	beq.n	800303c <ModelHandle_StartCountdown+0x18>
 8003036:	887b      	ldrh	r3, [r7, #2]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d102      	bne.n	8003042 <ModelHandle_StartCountdown+0x1e>
        ModelHandle_StopCountdown();
 800303c:	f7ff ffac 	bl	8002f98 <ModelHandle_StopCountdown>
        return;
 8003040:	e012      	b.n	8003068 <ModelHandle_StartCountdown+0x44>
    }

    clear_all_modes();
 8003042:	f7ff fe03 	bl	8002c4c <clear_all_modes>
    countdownMode          = true;
 8003046:	4b0a      	ldr	r3, [pc, #40]	@ (8003070 <ModelHandle_StartCountdown+0x4c>)
 8003048:	2201      	movs	r2, #1
 800304a:	701a      	strb	r2, [r3, #0]
    countdownActive        = true;
 800304c:	4b09      	ldr	r3, [pc, #36]	@ (8003074 <ModelHandle_StartCountdown+0x50>)
 800304e:	2201      	movs	r2, #1
 8003050:	701a      	strb	r2, [r3, #0]
    cd_run_seconds         = seconds_per_run;
 8003052:	4a09      	ldr	r2, [pc, #36]	@ (8003078 <ModelHandle_StartCountdown+0x54>)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6013      	str	r3, [r2, #0]
    countdownRemainingRuns = repeats;
 8003058:	4a08      	ldr	r2, [pc, #32]	@ (800307c <ModelHandle_StartCountdown+0x58>)
 800305a:	887b      	ldrh	r3, [r7, #2]
 800305c:	8013      	strh	r3, [r2, #0]
    cd_in_rest             = false;
 800305e:	4b08      	ldr	r3, [pc, #32]	@ (8003080 <ModelHandle_StartCountdown+0x5c>)
 8003060:	2200      	movs	r2, #0
 8003062:	701a      	strb	r2, [r3, #0]

    countdown_start_one_run();
 8003064:	f7ff ffbc 	bl	8002fe0 <countdown_start_one_run>
}
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	2000001d 	.word	0x2000001d
 8003074:	2000057e 	.word	0x2000057e
 8003078:	200005ec 	.word	0x200005ec
 800307c:	200005e0 	.word	0x200005e0
 8003080:	200005f0 	.word	0x200005f0

08003084 <countdown_tick>:
static void countdown_tick(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
    if (!countdownActive) return;
 800308a:	4b33      	ldr	r3, [pc, #204]	@ (8003158 <countdown_tick+0xd4>)
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	b2db      	uxtb	r3, r3
 8003090:	f083 0301 	eor.w	r3, r3, #1
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d156      	bne.n	8003148 <countdown_tick+0xc4>
    uint32_t now = now_ms();
 800309a:	f7ff fdcf 	bl	8002c3c <now_ms>
 800309e:	6078      	str	r0, [r7, #4]

    if (cd_in_rest) {
 80030a0:	4b2e      	ldr	r3, [pc, #184]	@ (800315c <countdown_tick+0xd8>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d010      	beq.n	80030ca <countdown_tick+0x46>
        if ((int32_t)(cd_rest_deadline_ms - now) <= 0) {
 80030a8:	4b2d      	ldr	r3, [pc, #180]	@ (8003160 <countdown_tick+0xdc>)
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	dc4b      	bgt.n	800314c <countdown_tick+0xc8>
            if (countdownRemainingRuns > 0) {
 80030b4:	4b2b      	ldr	r3, [pc, #172]	@ (8003164 <countdown_tick+0xe0>)
 80030b6:	881b      	ldrh	r3, [r3, #0]
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d002      	beq.n	80030c4 <countdown_tick+0x40>
                countdown_start_one_run();
 80030be:	f7ff ff8f 	bl	8002fe0 <countdown_start_one_run>
            } else {
                ModelHandle_StopCountdown();
            }
        }
        return;
 80030c2:	e043      	b.n	800314c <countdown_tick+0xc8>
                ModelHandle_StopCountdown();
 80030c4:	f7ff ff68 	bl	8002f98 <ModelHandle_StopCountdown>
        return;
 80030c8:	e040      	b.n	800314c <countdown_tick+0xc8>
    }

    if ((int32_t)(cd_deadline_ms - now) > 0) {
 80030ca:	4b27      	ldr	r3, [pc, #156]	@ (8003168 <countdown_tick+0xe4>)
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	dd15      	ble.n	8003102 <countdown_tick+0x7e>
        uint32_t rem_ms = cd_deadline_ms - now;
 80030d6:	4b24      	ldr	r3, [pc, #144]	@ (8003168 <countdown_tick+0xe4>)
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	603b      	str	r3, [r7, #0]
        countdownDuration = (rem_ms + 999U) / 1000U;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 80030e6:	4a21      	ldr	r2, [pc, #132]	@ (800316c <countdown_tick+0xe8>)
 80030e8:	fba2 2303 	umull	r2, r3, r2, r3
 80030ec:	099b      	lsrs	r3, r3, #6
 80030ee:	4a20      	ldr	r2, [pc, #128]	@ (8003170 <countdown_tick+0xec>)
 80030f0:	6013      	str	r3, [r2, #0]

        if (isTankFull()) {
 80030f2:	f7ff fea1 	bl	8002e38 <isTankFull>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d029      	beq.n	8003150 <countdown_tick+0xcc>
            ModelHandle_StopAllModesAndMotor(); // terminal condition -> clear all modes
 80030fc:	f7ff fe8e 	bl	8002e1c <ModelHandle_StopAllModesAndMotor>
        }
        return;
 8003100:	e026      	b.n	8003150 <countdown_tick+0xcc>
    }

    stop_motor_keep_modes();
 8003102:	f7ff fe83 	bl	8002e0c <stop_motor_keep_modes>
    if (countdownRemainingRuns > 0) countdownRemainingRuns--;
 8003106:	4b17      	ldr	r3, [pc, #92]	@ (8003164 <countdown_tick+0xe0>)
 8003108:	881b      	ldrh	r3, [r3, #0]
 800310a:	b29b      	uxth	r3, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	d006      	beq.n	800311e <countdown_tick+0x9a>
 8003110:	4b14      	ldr	r3, [pc, #80]	@ (8003164 <countdown_tick+0xe0>)
 8003112:	881b      	ldrh	r3, [r3, #0]
 8003114:	b29b      	uxth	r3, r3
 8003116:	3b01      	subs	r3, #1
 8003118:	b29a      	uxth	r2, r3
 800311a:	4b12      	ldr	r3, [pc, #72]	@ (8003164 <countdown_tick+0xe0>)
 800311c:	801a      	strh	r2, [r3, #0]
    if (countdownRemainingRuns == 0) {
 800311e:	4b11      	ldr	r3, [pc, #68]	@ (8003164 <countdown_tick+0xe0>)
 8003120:	881b      	ldrh	r3, [r3, #0]
 8003122:	b29b      	uxth	r3, r3
 8003124:	2b00      	cmp	r3, #0
 8003126:	d102      	bne.n	800312e <countdown_tick+0xaa>
        ModelHandle_StopCountdown();
 8003128:	f7ff ff36 	bl	8002f98 <ModelHandle_StopCountdown>
        return;
 800312c:	e011      	b.n	8003152 <countdown_tick+0xce>
    }

    cd_in_rest          = true;
 800312e:	4b0b      	ldr	r3, [pc, #44]	@ (800315c <countdown_tick+0xd8>)
 8003130:	2201      	movs	r2, #1
 8003132:	701a      	strb	r2, [r3, #0]
    cd_rest_deadline_ms = now + CD_REST_MS;
 8003134:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4413      	add	r3, r2
 800313c:	4a08      	ldr	r2, [pc, #32]	@ (8003160 <countdown_tick+0xdc>)
 800313e:	6013      	str	r3, [r2, #0]
    countdownDuration   = 0;
 8003140:	4b0b      	ldr	r3, [pc, #44]	@ (8003170 <countdown_tick+0xec>)
 8003142:	2200      	movs	r2, #0
 8003144:	601a      	str	r2, [r3, #0]
 8003146:	e004      	b.n	8003152 <countdown_tick+0xce>
    if (!countdownActive) return;
 8003148:	bf00      	nop
 800314a:	e002      	b.n	8003152 <countdown_tick+0xce>
        return;
 800314c:	bf00      	nop
 800314e:	e000      	b.n	8003152 <countdown_tick+0xce>
        return;
 8003150:	bf00      	nop
}
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	2000057e 	.word	0x2000057e
 800315c:	200005f0 	.word	0x200005f0
 8003160:	200005e8 	.word	0x200005e8
 8003164:	200005e0 	.word	0x200005e0
 8003168:	200005e4 	.word	0x200005e4
 800316c:	10624dd3 	.word	0x10624dd3
 8003170:	20000598 	.word	0x20000598

08003174 <twist_arm_priming>:
        twist_dry_cnt = 0;
    }
    return (twist_dry_cnt >= 3);
}
static inline void twist_arm_priming(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
    if (TWIST_PRIME_SECONDS > 0) {
        twist_priming        = true;
 8003178:	4b06      	ldr	r3, [pc, #24]	@ (8003194 <twist_arm_priming+0x20>)
 800317a:	2201      	movs	r2, #1
 800317c:	701a      	strb	r2, [r3, #0]
        twist_prime_deadline = now_ms() + (uint32_t)TWIST_PRIME_SECONDS * 1000UL;
 800317e:	f7ff fd5d 	bl	8002c3c <now_ms>
 8003182:	4603      	mov	r3, r0
 8003184:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8003188:	3308      	adds	r3, #8
 800318a:	4a03      	ldr	r2, [pc, #12]	@ (8003198 <twist_arm_priming+0x24>)
 800318c:	6013      	str	r3, [r2, #0]
    } else {
        twist_priming        = false;
        twist_prime_deadline = 0;
    }
}
 800318e:	bf00      	nop
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	200005f9 	.word	0x200005f9
 8003198:	200005fc 	.word	0x200005fc

0800319c <ModelHandle_StartTwist>:

void ModelHandle_StartTwist(uint16_t on_s, uint16_t off_s)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	4603      	mov	r3, r0
 80031a4:	460a      	mov	r2, r1
 80031a6:	80fb      	strh	r3, [r7, #6]
 80031a8:	4613      	mov	r3, r2
 80031aa:	80bb      	strh	r3, [r7, #4]
    clear_all_modes();
 80031ac:	f7ff fd4e 	bl	8002c4c <clear_all_modes>
    if (on_s == 0)  on_s  = 1;
 80031b0:	88fb      	ldrh	r3, [r7, #6]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <ModelHandle_StartTwist+0x1e>
 80031b6:	2301      	movs	r3, #1
 80031b8:	80fb      	strh	r3, [r7, #6]
    if (off_s == 0) off_s = 1;
 80031ba:	88bb      	ldrh	r3, [r7, #4]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d101      	bne.n	80031c4 <ModelHandle_StartTwist+0x28>
 80031c0:	2301      	movs	r3, #1
 80031c2:	80bb      	strh	r3, [r7, #4]

    twistSettings.onDurationSeconds  = on_s;
 80031c4:	4a12      	ldr	r2, [pc, #72]	@ (8003210 <ModelHandle_StartTwist+0x74>)
 80031c6:	88fb      	ldrh	r3, [r7, #6]
 80031c8:	8053      	strh	r3, [r2, #2]
    twistSettings.offDurationSeconds = off_s;
 80031ca:	4a11      	ldr	r2, [pc, #68]	@ (8003210 <ModelHandle_StartTwist+0x74>)
 80031cc:	88bb      	ldrh	r3, [r7, #4]
 80031ce:	8093      	strh	r3, [r2, #4]
    twistSettings.twistActive  = true;
 80031d0:	4b0f      	ldr	r3, [pc, #60]	@ (8003210 <ModelHandle_StartTwist+0x74>)
 80031d2:	2201      	movs	r2, #1
 80031d4:	701a      	strb	r2, [r3, #0]
    twistActive                = true;
 80031d6:	4b0f      	ldr	r3, [pc, #60]	@ (8003214 <ModelHandle_StartTwist+0x78>)
 80031d8:	2201      	movs	r2, #1
 80031da:	701a      	strb	r2, [r3, #0]
    twist_on_phase       = false;
 80031dc:	4b0e      	ldr	r3, [pc, #56]	@ (8003218 <ModelHandle_StartTwist+0x7c>)
 80031de:	2200      	movs	r2, #0
 80031e0:	701a      	strb	r2, [r3, #0]
    twist_phase_deadline = now_ms() + (uint32_t)twistSettings.offDurationSeconds * 1000UL;
 80031e2:	f7ff fd2b 	bl	8002c3c <now_ms>
 80031e6:	4602      	mov	r2, r0
 80031e8:	4b09      	ldr	r3, [pc, #36]	@ (8003210 <ModelHandle_StartTwist+0x74>)
 80031ea:	889b      	ldrh	r3, [r3, #4]
 80031ec:	4619      	mov	r1, r3
 80031ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80031f2:	fb01 f303 	mul.w	r3, r1, r3
 80031f6:	4413      	add	r3, r2
 80031f8:	4a08      	ldr	r2, [pc, #32]	@ (800321c <ModelHandle_StartTwist+0x80>)
 80031fa:	6013      	str	r3, [r2, #0]
    twist_dry_cnt        = 0;
 80031fc:	4b08      	ldr	r3, [pc, #32]	@ (8003220 <ModelHandle_StartTwist+0x84>)
 80031fe:	2200      	movs	r2, #0
 8003200:	701a      	strb	r2, [r3, #0]
    // Do NOT arm priming here; it's armed when ON actually starts.

    twist_arm_priming();
 8003202:	f7ff ffb7 	bl	8003174 <twist_arm_priming>
}
 8003206:	bf00      	nop
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	20000028 	.word	0x20000028
 8003214:	2000057f 	.word	0x2000057f
 8003218:	200005f1 	.word	0x200005f1
 800321c:	200005f4 	.word	0x200005f4
 8003220:	200005f8 	.word	0x200005f8

08003224 <ModelHandle_StopTwist>:

void ModelHandle_StopTwist(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
    twistSettings.twistActive = false;
 8003228:	4b07      	ldr	r3, [pc, #28]	@ (8003248 <ModelHandle_StopTwist+0x24>)
 800322a:	2200      	movs	r2, #0
 800322c:	701a      	strb	r2, [r3, #0]
    twistActive = false;
 800322e:	4b07      	ldr	r3, [pc, #28]	@ (800324c <ModelHandle_StopTwist+0x28>)
 8003230:	2200      	movs	r2, #0
 8003232:	701a      	strb	r2, [r3, #0]
    twist_priming  = false;
 8003234:	4b06      	ldr	r3, [pc, #24]	@ (8003250 <ModelHandle_StopTwist+0x2c>)
 8003236:	2200      	movs	r2, #0
 8003238:	701a      	strb	r2, [r3, #0]
    twist_dry_cnt  = 0;
 800323a:	4b06      	ldr	r3, [pc, #24]	@ (8003254 <ModelHandle_StopTwist+0x30>)
 800323c:	2200      	movs	r2, #0
 800323e:	701a      	strb	r2, [r3, #0]
    stop_motor_keep_modes();
 8003240:	f7ff fde4 	bl	8002e0c <stop_motor_keep_modes>
}
 8003244:	bf00      	nop
 8003246:	bd80      	pop	{r7, pc}
 8003248:	20000028 	.word	0x20000028
 800324c:	2000057f 	.word	0x2000057f
 8003250:	200005f9 	.word	0x200005f9
 8003254:	200005f8 	.word	0x200005f8

08003258 <twist_tick>:
// Call this from your main scheduler at ~10–100ms rate
// Call ~every 10–100 ms from your main loop/scheduler
void twist_tick(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
    // 0) Inert unless explicitly enabled by the user
    if (!twistSettings.twistActive) {
 800325e:	4b63      	ldr	r3, [pc, #396]	@ (80033ec <twist_tick+0x194>)
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	f083 0301 	eor.w	r3, r3, #1
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2b00      	cmp	r3, #0
 800326a:	f040 80b8 	bne.w	80033de <twist_tick+0x186>
        // Defensive: never force motor here—other modes own it.
        return;
    }

    uint32_t tnow = now_ms();
 800326e:	f7ff fce5 	bl	8002c3c <now_ms>
 8003272:	6078      	str	r0, [r7, #4]

    // 1) Global safety gates (if your project uses these flags)
    //    If any protection is latched, keep Twist "enabled" but stop driving the motor.
    if (senseOverLoad || senseOverUnderVolt || senseMaxRunReached) {
 8003274:	4b5e      	ldr	r3, [pc, #376]	@ (80033f0 <twist_tick+0x198>)
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d109      	bne.n	8003292 <twist_tick+0x3a>
 800327e:	4b5d      	ldr	r3, [pc, #372]	@ (80033f4 <twist_tick+0x19c>)
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b00      	cmp	r3, #0
 8003286:	d104      	bne.n	8003292 <twist_tick+0x3a>
 8003288:	4b5b      	ldr	r3, [pc, #364]	@ (80033f8 <twist_tick+0x1a0>)
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d002      	beq.n	8003298 <twist_tick+0x40>
        stop_motor_keep_modes();   // do not clear modes; just stop motor output
 8003292:	f7ff fdbb 	bl	8002e0c <stop_motor_keep_modes>
        return;
 8003296:	e0a5      	b.n	80033e4 <twist_tick+0x18c>
    }

    // 2) Priming window logic:
    //    When we first enter an ON phase we allow a short "prime" even if the sensor reads dry,
    //    to build initial pressure. This DOES NOT move the phase deadline.
    if (twist_priming) {
 8003298:	4b58      	ldr	r3, [pc, #352]	@ (80033fc <twist_tick+0x1a4>)
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d014      	beq.n	80032ca <twist_tick+0x72>
        if ((int32_t)(twist_prime_deadline - tnow) > 0) {
 80032a0:	4b57      	ldr	r3, [pc, #348]	@ (8003400 <twist_tick+0x1a8>)
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	dd0b      	ble.n	80032c4 <twist_tick+0x6c>
            if (!Motor_GetStatus()) start_motor();   // stay ON during priming
 80032ac:	f000 fc24 	bl	8003af8 <Motor_GetStatus>
 80032b0:	4603      	mov	r3, r0
 80032b2:	f083 0301 	eor.w	r3, r3, #1
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f000 8092 	beq.w	80033e2 <twist_tick+0x18a>
 80032be:	f7ff fd8b 	bl	8002dd8 <start_motor>
            return;                                  // do not touch phase deadline
 80032c2:	e08e      	b.n	80033e2 <twist_tick+0x18a>
        } else {
            twist_priming = false;                   // priming finished
 80032c4:	4b4d      	ldr	r3, [pc, #308]	@ (80033fc <twist_tick+0x1a4>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	701a      	strb	r2, [r3, #0]

    // 3) While in ON phase, you may optionally gate on "dry" (if your design wants this).
    //    We DON’T toggle the motor from ADC elsewhere; we only *observe* a dry flag here.
    //    If you don’t want dry handling in Twist, you can remove this block.
#if defined(DRY_STOP_DELAY_SECONDS) && (DRY_STOP_DELAY_SECONDS > 0)
    if (twist_on_phase) {
 80032ca:	4b4e      	ldr	r3, [pc, #312]	@ (8003404 <twist_tick+0x1ac>)
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d02a      	beq.n	8003328 <twist_tick+0xd0>
        // If a dry condition is being signaled by the sensing layer, count it.
        if (senseDryRun) {
 80032d2:	4b4d      	ldr	r3, [pc, #308]	@ (8003408 <twist_tick+0x1b0>)
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00a      	beq.n	80032f2 <twist_tick+0x9a>
            if (twist_dry_cnt < 0xFF) twist_dry_cnt++;
 80032dc:	4b4b      	ldr	r3, [pc, #300]	@ (800340c <twist_tick+0x1b4>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	2bff      	cmp	r3, #255	@ 0xff
 80032e2:	d009      	beq.n	80032f8 <twist_tick+0xa0>
 80032e4:	4b49      	ldr	r3, [pc, #292]	@ (800340c <twist_tick+0x1b4>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	3301      	adds	r3, #1
 80032ea:	b2da      	uxtb	r2, r3
 80032ec:	4b47      	ldr	r3, [pc, #284]	@ (800340c <twist_tick+0x1b4>)
 80032ee:	701a      	strb	r2, [r3, #0]
 80032f0:	e002      	b.n	80032f8 <twist_tick+0xa0>
        } else {
            twist_dry_cnt = 0;
 80032f2:	4b46      	ldr	r3, [pc, #280]	@ (800340c <twist_tick+0x1b4>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	701a      	strb	r2, [r3, #0]
        }

        // If dry persisted long enough, end the ON phase early and jump to OFF.
        if (twist_dry_cnt >= (uint8_t)DRY_STOP_DELAY_SECONDS) {
 80032f8:	4b44      	ldr	r3, [pc, #272]	@ (800340c <twist_tick+0x1b4>)
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	2b1d      	cmp	r3, #29
 80032fe:	d913      	bls.n	8003328 <twist_tick+0xd0>
            stop_motor_keep_modes();
 8003300:	f7ff fd84 	bl	8002e0c <stop_motor_keep_modes>
            twist_on_phase       = false;
 8003304:	4b3f      	ldr	r3, [pc, #252]	@ (8003404 <twist_tick+0x1ac>)
 8003306:	2200      	movs	r2, #0
 8003308:	701a      	strb	r2, [r3, #0]
            twist_dry_cnt        = 0;
 800330a:	4b40      	ldr	r3, [pc, #256]	@ (800340c <twist_tick+0x1b4>)
 800330c:	2200      	movs	r2, #0
 800330e:	701a      	strb	r2, [r3, #0]
            twist_phase_deadline = tnow + (uint32_t)twistSettings.offDurationSeconds * 1000UL;
 8003310:	4b36      	ldr	r3, [pc, #216]	@ (80033ec <twist_tick+0x194>)
 8003312:	889b      	ldrh	r3, [r3, #4]
 8003314:	461a      	mov	r2, r3
 8003316:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800331a:	fb03 f202 	mul.w	r2, r3, r2
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4413      	add	r3, r2
 8003322:	4a3b      	ldr	r2, [pc, #236]	@ (8003410 <twist_tick+0x1b8>)
 8003324:	6013      	str	r3, [r2, #0]
            return;
 8003326:	e05d      	b.n	80033e4 <twist_tick+0x18c>
        }
    }
#endif

    // 4) Phase timing: flip when deadline elapses (signed compare prevents wrap issues).
    if ((int32_t)(twist_phase_deadline - tnow) <= 0) {
 8003328:	4b39      	ldr	r3, [pc, #228]	@ (8003410 <twist_tick+0x1b8>)
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b00      	cmp	r3, #0
 8003332:	dc3d      	bgt.n	80033b0 <twist_tick+0x158>
        twist_on_phase = !twist_on_phase;
 8003334:	4b33      	ldr	r3, [pc, #204]	@ (8003404 <twist_tick+0x1ac>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	bf14      	ite	ne
 800333c:	2301      	movne	r3, #1
 800333e:	2300      	moveq	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	f083 0301 	eor.w	r3, r3, #1
 8003346:	b2db      	uxtb	r3, r3
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	b2da      	uxtb	r2, r3
 800334e:	4b2d      	ldr	r3, [pc, #180]	@ (8003404 <twist_tick+0x1ac>)
 8003350:	701a      	strb	r2, [r3, #0]

        if (twist_on_phase) {
 8003352:	4b2c      	ldr	r3, [pc, #176]	@ (8003404 <twist_tick+0x1ac>)
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d019      	beq.n	800338e <twist_tick+0x136>
            // Entering ON phase
            twist_dry_cnt        = 0;
 800335a:	4b2c      	ldr	r3, [pc, #176]	@ (800340c <twist_tick+0x1b4>)
 800335c:	2200      	movs	r2, #0
 800335e:	701a      	strb	r2, [r3, #0]
            start_motor();
 8003360:	f7ff fd3a 	bl	8002dd8 <start_motor>
            twist_phase_deadline = tnow + (uint32_t)twistSettings.onDurationSeconds * 1000UL;
 8003364:	4b21      	ldr	r3, [pc, #132]	@ (80033ec <twist_tick+0x194>)
 8003366:	885b      	ldrh	r3, [r3, #2]
 8003368:	461a      	mov	r2, r3
 800336a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800336e:	fb03 f202 	mul.w	r2, r3, r2
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4413      	add	r3, r2
 8003376:	4a26      	ldr	r2, [pc, #152]	@ (8003410 <twist_tick+0x1b8>)
 8003378:	6013      	str	r3, [r2, #0]

            // Arm priming exactly when ON begins (once per ON phase).
#if defined(TWIST_PRIME_SECONDS) && (TWIST_PRIME_SECONDS > 0)
            twist_priming        = true;
 800337a:	4b20      	ldr	r3, [pc, #128]	@ (80033fc <twist_tick+0x1a4>)
 800337c:	2201      	movs	r2, #1
 800337e:	701a      	strb	r2, [r3, #0]
            twist_prime_deadline = tnow + (uint32_t)TWIST_PRIME_SECONDS * 1000UL;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8003386:	3308      	adds	r3, #8
 8003388:	4a1d      	ldr	r2, [pc, #116]	@ (8003400 <twist_tick+0x1a8>)
 800338a:	6013      	str	r3, [r2, #0]
 800338c:	e02a      	b.n	80033e4 <twist_tick+0x18c>
#endif
        } else {
            // Entering OFF phase
            stop_motor_keep_modes();
 800338e:	f7ff fd3d 	bl	8002e0c <stop_motor_keep_modes>
            twist_dry_cnt        = 0;
 8003392:	4b1e      	ldr	r3, [pc, #120]	@ (800340c <twist_tick+0x1b4>)
 8003394:	2200      	movs	r2, #0
 8003396:	701a      	strb	r2, [r3, #0]
            twist_phase_deadline = tnow + (uint32_t)twistSettings.offDurationSeconds * 1000UL;
 8003398:	4b14      	ldr	r3, [pc, #80]	@ (80033ec <twist_tick+0x194>)
 800339a:	889b      	ldrh	r3, [r3, #4]
 800339c:	461a      	mov	r2, r3
 800339e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033a2:	fb03 f202 	mul.w	r2, r3, r2
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4413      	add	r3, r2
 80033aa:	4a19      	ldr	r2, [pc, #100]	@ (8003410 <twist_tick+0x1b8>)
 80033ac:	6013      	str	r3, [r2, #0]
 80033ae:	e019      	b.n	80033e4 <twist_tick+0x18c>
        }
    } else {
        // 5) Maintain current phase outputs until the deadline arrives
        if (twist_on_phase) {
 80033b0:	4b14      	ldr	r3, [pc, #80]	@ (8003404 <twist_tick+0x1ac>)
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00a      	beq.n	80033ce <twist_tick+0x176>
            if (!Motor_GetStatus()) start_motor();
 80033b8:	f000 fb9e 	bl	8003af8 <Motor_GetStatus>
 80033bc:	4603      	mov	r3, r0
 80033be:	f083 0301 	eor.w	r3, r3, #1
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00d      	beq.n	80033e4 <twist_tick+0x18c>
 80033c8:	f7ff fd06 	bl	8002dd8 <start_motor>
 80033cc:	e00a      	b.n	80033e4 <twist_tick+0x18c>
        } else {
            if (Motor_GetStatus())  stop_motor_keep_modes();
 80033ce:	f000 fb93 	bl	8003af8 <Motor_GetStatus>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d005      	beq.n	80033e4 <twist_tick+0x18c>
 80033d8:	f7ff fd18 	bl	8002e0c <stop_motor_keep_modes>
 80033dc:	e002      	b.n	80033e4 <twist_tick+0x18c>
        return;
 80033de:	bf00      	nop
 80033e0:	e000      	b.n	80033e4 <twist_tick+0x18c>
            return;                                  // do not touch phase deadline
 80033e2:	bf00      	nop
        }
    }
}
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	20000028 	.word	0x20000028
 80033f0:	20000584 	.word	0x20000584
 80033f4:	20000585 	.word	0x20000585
 80033f8:	20000586 	.word	0x20000586
 80033fc:	200005f9 	.word	0x200005f9
 8003400:	200005fc 	.word	0x200005fc
 8003404:	200005f1 	.word	0x200005f1
 8003408:	20000583 	.word	0x20000583
 800340c:	200005f8 	.word	0x200005f8
 8003410:	200005f4 	.word	0x200005f4

08003414 <ModelHandle_StartSearch>:
static SearchState search_state = SEARCH_GAP_WAIT;
static uint32_t    search_deadline_ms = 0;
static uint8_t     search_dry_cnt = 0;

void ModelHandle_StartSearch(uint16_t gap_s, uint16_t probe_s)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	4603      	mov	r3, r0
 800341c:	460a      	mov	r2, r1
 800341e:	80fb      	strh	r3, [r7, #6]
 8003420:	4613      	mov	r3, r2
 8003422:	80bb      	strh	r3, [r7, #4]
    clear_all_modes();
 8003424:	f7ff fc12 	bl	8002c4c <clear_all_modes>

    if (gap_s   == 0) gap_s   = 5;
 8003428:	88fb      	ldrh	r3, [r7, #6]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <ModelHandle_StartSearch+0x1e>
 800342e:	2305      	movs	r3, #5
 8003430:	80fb      	strh	r3, [r7, #6]
    if (probe_s == 0) probe_s = 3;
 8003432:	88bb      	ldrh	r3, [r7, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d101      	bne.n	800343c <ModelHandle_StartSearch+0x28>
 8003438:	2303      	movs	r3, #3
 800343a:	80bb      	strh	r3, [r7, #4]

    searchSettings.testingGapSeconds = gap_s;
 800343c:	4a12      	ldr	r2, [pc, #72]	@ (8003488 <ModelHandle_StartSearch+0x74>)
 800343e:	88fb      	ldrh	r3, [r7, #6]
 8003440:	8053      	strh	r3, [r2, #2]
    searchSettings.dryRunTimeSeconds = probe_s;
 8003442:	4a11      	ldr	r2, [pc, #68]	@ (8003488 <ModelHandle_StartSearch+0x74>)
 8003444:	88bb      	ldrh	r3, [r7, #4]
 8003446:	8093      	strh	r3, [r2, #4]

    searchSettings.searchActive = true;
 8003448:	4b0f      	ldr	r3, [pc, #60]	@ (8003488 <ModelHandle_StartSearch+0x74>)
 800344a:	2201      	movs	r2, #1
 800344c:	701a      	strb	r2, [r3, #0]
    searchActive = true;
 800344e:	4b0f      	ldr	r3, [pc, #60]	@ (800348c <ModelHandle_StartSearch+0x78>)
 8003450:	2201      	movs	r2, #1
 8003452:	701a      	strb	r2, [r3, #0]

    stop_motor_keep_modes();
 8003454:	f7ff fcda 	bl	8002e0c <stop_motor_keep_modes>
    search_state       = SEARCH_GAP_WAIT;
 8003458:	4b0d      	ldr	r3, [pc, #52]	@ (8003490 <ModelHandle_StartSearch+0x7c>)
 800345a:	2200      	movs	r2, #0
 800345c:	701a      	strb	r2, [r3, #0]
    search_deadline_ms = now_ms() + (uint32_t)searchSettings.testingGapSeconds * 1000UL;
 800345e:	f7ff fbed 	bl	8002c3c <now_ms>
 8003462:	4602      	mov	r2, r0
 8003464:	4b08      	ldr	r3, [pc, #32]	@ (8003488 <ModelHandle_StartSearch+0x74>)
 8003466:	885b      	ldrh	r3, [r3, #2]
 8003468:	4619      	mov	r1, r3
 800346a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800346e:	fb01 f303 	mul.w	r3, r1, r3
 8003472:	4413      	add	r3, r2
 8003474:	4a07      	ldr	r2, [pc, #28]	@ (8003494 <ModelHandle_StartSearch+0x80>)
 8003476:	6013      	str	r3, [r2, #0]
    search_dry_cnt     = 0;
 8003478:	4b07      	ldr	r3, [pc, #28]	@ (8003498 <ModelHandle_StartSearch+0x84>)
 800347a:	2200      	movs	r2, #0
 800347c:	701a      	strb	r2, [r3, #0]
}
 800347e:	bf00      	nop
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	20000020 	.word	0x20000020
 800348c:	20000580 	.word	0x20000580
 8003490:	20000600 	.word	0x20000600
 8003494:	20000604 	.word	0x20000604
 8003498:	20000608 	.word	0x20000608

0800349c <ModelHandle_StopSearch>:
void ModelHandle_StopSearch(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
    searchSettings.searchActive = false;
 80034a0:	4b06      	ldr	r3, [pc, #24]	@ (80034bc <ModelHandle_StopSearch+0x20>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	701a      	strb	r2, [r3, #0]
    searchActive = false;
 80034a6:	4b06      	ldr	r3, [pc, #24]	@ (80034c0 <ModelHandle_StopSearch+0x24>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	701a      	strb	r2, [r3, #0]
    search_state = SEARCH_GAP_WAIT;
 80034ac:	4b05      	ldr	r3, [pc, #20]	@ (80034c4 <ModelHandle_StopSearch+0x28>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	701a      	strb	r2, [r3, #0]
    stop_motor_keep_modes();
 80034b2:	f7ff fcab 	bl	8002e0c <stop_motor_keep_modes>
}
 80034b6:	bf00      	nop
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	20000020 	.word	0x20000020
 80034c0:	20000580 	.word	0x20000580
 80034c4:	20000600 	.word	0x20000600

080034c8 <isDryDebounced_RUN>:
static inline bool isDryDebounced_RUN(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
    if (dry_raw_is_dry()) {
 80034cc:	f7ff fd08 	bl	8002ee0 <dry_raw_is_dry>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00a      	beq.n	80034ec <isDryDebounced_RUN+0x24>
        if (search_dry_cnt < 255) search_dry_cnt++;
 80034d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003504 <isDryDebounced_RUN+0x3c>)
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	2bff      	cmp	r3, #255	@ 0xff
 80034dc:	d009      	beq.n	80034f2 <isDryDebounced_RUN+0x2a>
 80034de:	4b09      	ldr	r3, [pc, #36]	@ (8003504 <isDryDebounced_RUN+0x3c>)
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	3301      	adds	r3, #1
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	4b07      	ldr	r3, [pc, #28]	@ (8003504 <isDryDebounced_RUN+0x3c>)
 80034e8:	701a      	strb	r2, [r3, #0]
 80034ea:	e002      	b.n	80034f2 <isDryDebounced_RUN+0x2a>
    } else {
        search_dry_cnt = 0;
 80034ec:	4b05      	ldr	r3, [pc, #20]	@ (8003504 <isDryDebounced_RUN+0x3c>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	701a      	strb	r2, [r3, #0]
    }
    return (search_dry_cnt >= 3);
 80034f2:	4b04      	ldr	r3, [pc, #16]	@ (8003504 <isDryDebounced_RUN+0x3c>)
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	bf8c      	ite	hi
 80034fa:	2301      	movhi	r3, #1
 80034fc:	2300      	movls	r3, #0
 80034fe:	b2db      	uxtb	r3, r3
}
 8003500:	4618      	mov	r0, r3
 8003502:	bd80      	pop	{r7, pc}
 8003504:	20000608 	.word	0x20000608

08003508 <search_tick>:
static void search_tick(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
    if (!searchSettings.searchActive) { searchActive = false; return; }
 800350e:	4b44      	ldr	r3, [pc, #272]	@ (8003620 <search_tick+0x118>)
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	f083 0301 	eor.w	r3, r3, #1
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b00      	cmp	r3, #0
 800351a:	d003      	beq.n	8003524 <search_tick+0x1c>
 800351c:	4b41      	ldr	r3, [pc, #260]	@ (8003624 <search_tick+0x11c>)
 800351e:	2200      	movs	r2, #0
 8003520:	701a      	strb	r2, [r3, #0]
 8003522:	e07a      	b.n	800361a <search_tick+0x112>
    searchActive = true;
 8003524:	4b3f      	ldr	r3, [pc, #252]	@ (8003624 <search_tick+0x11c>)
 8003526:	2201      	movs	r2, #1
 8003528:	701a      	strb	r2, [r3, #0]

    uint32_t nowt = now_ms();
 800352a:	f7ff fb87 	bl	8002c3c <now_ms>
 800352e:	6078      	str	r0, [r7, #4]

    if (isTankFull()) {
 8003530:	f7ff fc82 	bl	8002e38 <isTankFull>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d002      	beq.n	8003540 <search_tick+0x38>
        ModelHandle_StopAllModesAndMotor();
 800353a:	f7ff fc6f 	bl	8002e1c <ModelHandle_StopAllModesAndMotor>
        return;
 800353e:	e06c      	b.n	800361a <search_tick+0x112>
    }

    switch (search_state)
 8003540:	4b39      	ldr	r3, [pc, #228]	@ (8003628 <search_tick+0x120>)
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	2b02      	cmp	r3, #2
 8003546:	d050      	beq.n	80035ea <search_tick+0xe2>
 8003548:	2b02      	cmp	r3, #2
 800354a:	dc66      	bgt.n	800361a <search_tick+0x112>
 800354c:	2b00      	cmp	r3, #0
 800354e:	d002      	beq.n	8003556 <search_tick+0x4e>
 8003550:	2b01      	cmp	r3, #1
 8003552:	d021      	beq.n	8003598 <search_tick+0x90>
 8003554:	e061      	b.n	800361a <search_tick+0x112>
    {
        case SEARCH_GAP_WAIT:
            if (Motor_GetStatus()) stop_motor_keep_modes();
 8003556:	f000 facf 	bl	8003af8 <Motor_GetStatus>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <search_tick+0x5c>
 8003560:	f7ff fc54 	bl	8002e0c <stop_motor_keep_modes>
            if ((int32_t)(search_deadline_ms - nowt) <= 0) {
 8003564:	4b31      	ldr	r3, [pc, #196]	@ (800362c <search_tick+0x124>)
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b00      	cmp	r3, #0
 800356e:	dc4f      	bgt.n	8003610 <search_tick+0x108>
                start_motor(); // probe ON
 8003570:	f7ff fc32 	bl	8002dd8 <start_motor>
                search_state       = SEARCH_PROBE;
 8003574:	4b2c      	ldr	r3, [pc, #176]	@ (8003628 <search_tick+0x120>)
 8003576:	2201      	movs	r2, #1
 8003578:	701a      	strb	r2, [r3, #0]
                search_deadline_ms = nowt + (uint32_t)searchSettings.dryRunTimeSeconds * 1000UL;
 800357a:	4b29      	ldr	r3, [pc, #164]	@ (8003620 <search_tick+0x118>)
 800357c:	889b      	ldrh	r3, [r3, #4]
 800357e:	461a      	mov	r2, r3
 8003580:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003584:	fb03 f202 	mul.w	r2, r3, r2
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4413      	add	r3, r2
 800358c:	4a27      	ldr	r2, [pc, #156]	@ (800362c <search_tick+0x124>)
 800358e:	6013      	str	r3, [r2, #0]
                search_dry_cnt     = 0;
 8003590:	4b27      	ldr	r3, [pc, #156]	@ (8003630 <search_tick+0x128>)
 8003592:	2200      	movs	r2, #0
 8003594:	701a      	strb	r2, [r3, #0]
            }
            break;
 8003596:	e03b      	b.n	8003610 <search_tick+0x108>

        case SEARCH_PROBE:
            if (!dry_raw_is_dry()) {
 8003598:	f7ff fca2 	bl	8002ee0 <dry_raw_is_dry>
 800359c:	4603      	mov	r3, r0
 800359e:	f083 0301 	eor.w	r3, r3, #1
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d009      	beq.n	80035bc <search_tick+0xb4>
                // Water detected → RUN
                search_state       = SEARCH_RUN;
 80035a8:	4b1f      	ldr	r3, [pc, #124]	@ (8003628 <search_tick+0x120>)
 80035aa:	2202      	movs	r2, #2
 80035ac:	701a      	strb	r2, [r3, #0]
                search_deadline_ms = 0;
 80035ae:	4b1f      	ldr	r3, [pc, #124]	@ (800362c <search_tick+0x124>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	601a      	str	r2, [r3, #0]
                search_dry_cnt     = 0;
 80035b4:	4b1e      	ldr	r3, [pc, #120]	@ (8003630 <search_tick+0x128>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	701a      	strb	r2, [r3, #0]
                break;
 80035ba:	e02e      	b.n	800361a <search_tick+0x112>
            }
            if ((int32_t)(search_deadline_ms - nowt) <= 0) {
 80035bc:	4b1b      	ldr	r3, [pc, #108]	@ (800362c <search_tick+0x124>)
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	dc25      	bgt.n	8003614 <search_tick+0x10c>
                // Still dry after probe
                stop_motor_keep_modes();
 80035c8:	f7ff fc20 	bl	8002e0c <stop_motor_keep_modes>
                search_state       = SEARCH_GAP_WAIT;
 80035cc:	4b16      	ldr	r3, [pc, #88]	@ (8003628 <search_tick+0x120>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	701a      	strb	r2, [r3, #0]
                search_deadline_ms = nowt + (uint32_t)searchSettings.testingGapSeconds * 1000UL;
 80035d2:	4b13      	ldr	r3, [pc, #76]	@ (8003620 <search_tick+0x118>)
 80035d4:	885b      	ldrh	r3, [r3, #2]
 80035d6:	461a      	mov	r2, r3
 80035d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80035dc:	fb03 f202 	mul.w	r2, r3, r2
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4413      	add	r3, r2
 80035e4:	4a11      	ldr	r2, [pc, #68]	@ (800362c <search_tick+0x124>)
 80035e6:	6013      	str	r3, [r2, #0]
            }
            break;
 80035e8:	e014      	b.n	8003614 <search_tick+0x10c>

        case SEARCH_RUN:
            if (isDryDebounced_RUN()) {
 80035ea:	f7ff ff6d 	bl	80034c8 <isDryDebounced_RUN>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d002      	beq.n	80035fa <search_tick+0xf2>
                ModelHandle_StopAllModesAndMotor(); // terminal dry -> clear modes
 80035f4:	f7ff fc12 	bl	8002e1c <ModelHandle_StopAllModesAndMotor>
                break;
 80035f8:	e00f      	b.n	800361a <search_tick+0x112>
            }
            if (!Motor_GetStatus()) start_motor(); // keep asserted
 80035fa:	f000 fa7d 	bl	8003af8 <Motor_GetStatus>
 80035fe:	4603      	mov	r3, r0
 8003600:	f083 0301 	eor.w	r3, r3, #1
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d006      	beq.n	8003618 <search_tick+0x110>
 800360a:	f7ff fbe5 	bl	8002dd8 <start_motor>
            break;
 800360e:	e003      	b.n	8003618 <search_tick+0x110>
            break;
 8003610:	bf00      	nop
 8003612:	e002      	b.n	800361a <search_tick+0x112>
            break;
 8003614:	bf00      	nop
 8003616:	e000      	b.n	800361a <search_tick+0x112>
            break;
 8003618:	bf00      	nop
    }
}
 800361a:	3708      	adds	r7, #8
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	20000020 	.word	0x20000020
 8003624:	20000580 	.word	0x20000580
 8003628:	20000600 	.word	0x20000600
 800362c:	20000604 	.word	0x20000604
 8003630:	20000608 	.word	0x20000608

08003634 <seconds_since_midnight>:

/* =======================
   TIMER (RTC based)
   ======================= */
static uint32_t seconds_since_midnight(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	af00      	add	r7, sp, #0
    RTC_GetTimeDate();
 8003638:	f000 fcd4 	bl	8003fe4 <RTC_GetTimeDate>
    return ((uint32_t)time.hour * 3600UL) +
 800363c:	4b09      	ldr	r3, [pc, #36]	@ (8003664 <seconds_since_midnight+0x30>)
 800363e:	789b      	ldrb	r3, [r3, #2]
 8003640:	461a      	mov	r2, r3
 8003642:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8003646:	fb03 f202 	mul.w	r2, r3, r2
           ((uint32_t)time.minutes * 60UL) +
 800364a:	4b06      	ldr	r3, [pc, #24]	@ (8003664 <seconds_since_midnight+0x30>)
 800364c:	785b      	ldrb	r3, [r3, #1]
 800364e:	4619      	mov	r1, r3
 8003650:	460b      	mov	r3, r1
 8003652:	011b      	lsls	r3, r3, #4
 8003654:	1a5b      	subs	r3, r3, r1
 8003656:	009b      	lsls	r3, r3, #2
    return ((uint32_t)time.hour * 3600UL) +
 8003658:	4413      	add	r3, r2
           (uint32_t)time.seconds;
 800365a:	4a02      	ldr	r2, [pc, #8]	@ (8003664 <seconds_since_midnight+0x30>)
 800365c:	7812      	ldrb	r2, [r2, #0]
           ((uint32_t)time.minutes * 60UL) +
 800365e:	4413      	add	r3, r2
}
 8003660:	4618      	mov	r0, r3
 8003662:	bd80      	pop	{r7, pc}
 8003664:	20000610 	.word	0x20000610

08003668 <timer_tick>:
static void timer_tick(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
    /* NEW: Timer yields to all other active modes */
    if (manualOverride && manualActive) { timerActive = false; return; }
 800366e:	4b58      	ldr	r3, [pc, #352]	@ (80037d0 <timer_tick+0x168>)
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b00      	cmp	r3, #0
 8003676:	d008      	beq.n	800368a <timer_tick+0x22>
 8003678:	4b56      	ldr	r3, [pc, #344]	@ (80037d4 <timer_tick+0x16c>)
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b00      	cmp	r3, #0
 8003680:	d003      	beq.n	800368a <timer_tick+0x22>
 8003682:	4b55      	ldr	r3, [pc, #340]	@ (80037d8 <timer_tick+0x170>)
 8003684:	2200      	movs	r2, #0
 8003686:	701a      	strb	r2, [r3, #0]
 8003688:	e09f      	b.n	80037ca <timer_tick+0x162>
    if (countdownActive || twistSettings.twistActive ||
 800368a:	4b54      	ldr	r3, [pc, #336]	@ (80037dc <timer_tick+0x174>)
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b00      	cmp	r3, #0
 8003692:	d10c      	bne.n	80036ae <timer_tick+0x46>
 8003694:	4b52      	ldr	r3, [pc, #328]	@ (80037e0 <timer_tick+0x178>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d108      	bne.n	80036ae <timer_tick+0x46>
        searchSettings.searchActive || semiAutoActive) {
 800369c:	4b51      	ldr	r3, [pc, #324]	@ (80037e4 <timer_tick+0x17c>)
 800369e:	781b      	ldrb	r3, [r3, #0]
    if (countdownActive || twistSettings.twistActive ||
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d104      	bne.n	80036ae <timer_tick+0x46>
        searchSettings.searchActive || semiAutoActive) {
 80036a4:	4b50      	ldr	r3, [pc, #320]	@ (80037e8 <timer_tick+0x180>)
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <timer_tick+0x4e>
        timerActive = false;
 80036ae:	4b4a      	ldr	r3, [pc, #296]	@ (80037d8 <timer_tick+0x170>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	701a      	strb	r2, [r3, #0]
        return;
 80036b4:	e089      	b.n	80037ca <timer_tick+0x162>
    }

    timerActive = false;
 80036b6:	4b48      	ldr	r3, [pc, #288]	@ (80037d8 <timer_tick+0x170>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	701a      	strb	r2, [r3, #0]
    uint32_t nowS = seconds_since_midnight();
 80036bc:	f7ff ffba 	bl	8003634 <seconds_since_midnight>
 80036c0:	60b8      	str	r0, [r7, #8]

    static uint32_t timerRetryDeadline = 0;
    bool anySlotActive = false;
 80036c2:	2300      	movs	r3, #0
 80036c4:	75fb      	strb	r3, [r7, #23]

    for (int i = 0; i < 3; i++) {
 80036c6:	2300      	movs	r3, #0
 80036c8:	613b      	str	r3, [r7, #16]
 80036ca:	e06c      	b.n	80037a6 <timer_tick+0x13e>
        TimerSlot* s = &timerSlots[i];
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	4613      	mov	r3, r2
 80036d0:	005b      	lsls	r3, r3, #1
 80036d2:	4413      	add	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4a45      	ldr	r2, [pc, #276]	@ (80037ec <timer_tick+0x184>)
 80036d8:	4413      	add	r3, r2
 80036da:	607b      	str	r3, [r7, #4]
        if (!s->active) continue;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	f083 0301 	eor.w	r3, r3, #1
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d159      	bne.n	800379e <timer_tick+0x136>
        anySlotActive = true;
 80036ea:	2301      	movs	r3, #1
 80036ec:	75fb      	strb	r3, [r7, #23]

        bool inWindow;
        if (s->onTimeSeconds <= s->offTimeSeconds) {
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d812      	bhi.n	8003720 <timer_tick+0xb8>
            inWindow = (nowS >= s->onTimeSeconds) && (nowS < s->offTimeSeconds);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	68ba      	ldr	r2, [r7, #8]
 8003700:	429a      	cmp	r2, r3
 8003702:	d306      	bcc.n	8003712 <timer_tick+0xaa>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	68ba      	ldr	r2, [r7, #8]
 800370a:	429a      	cmp	r2, r3
 800370c:	d201      	bcs.n	8003712 <timer_tick+0xaa>
 800370e:	2301      	movs	r3, #1
 8003710:	e000      	b.n	8003714 <timer_tick+0xac>
 8003712:	2300      	movs	r3, #0
 8003714:	73fb      	strb	r3, [r7, #15]
 8003716:	7bfb      	ldrb	r3, [r7, #15]
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	73fb      	strb	r3, [r7, #15]
 800371e:	e011      	b.n	8003744 <timer_tick+0xdc>
        } else {
            inWindow = (nowS >= s->onTimeSeconds) || (nowS < s->offTimeSeconds);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	68ba      	ldr	r2, [r7, #8]
 8003726:	429a      	cmp	r2, r3
 8003728:	d204      	bcs.n	8003734 <timer_tick+0xcc>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	68ba      	ldr	r2, [r7, #8]
 8003730:	429a      	cmp	r2, r3
 8003732:	d201      	bcs.n	8003738 <timer_tick+0xd0>
 8003734:	2301      	movs	r3, #1
 8003736:	e000      	b.n	800373a <timer_tick+0xd2>
 8003738:	2300      	movs	r3, #0
 800373a:	73fb      	strb	r3, [r7, #15]
 800373c:	7bfb      	ldrb	r3, [r7, #15]
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	73fb      	strb	r3, [r7, #15]
        }

        if (inWindow) {
 8003744:	7bfb      	ldrb	r3, [r7, #15]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d02a      	beq.n	80037a0 <timer_tick+0x138>
            timerActive = true;
 800374a:	4b23      	ldr	r3, [pc, #140]	@ (80037d8 <timer_tick+0x170>)
 800374c:	2201      	movs	r2, #1
 800374e:	701a      	strb	r2, [r3, #0]

            if (now_ms() < timerRetryDeadline) return;
 8003750:	f7ff fa74 	bl	8002c3c <now_ms>
 8003754:	4602      	mov	r2, r0
 8003756:	4b26      	ldr	r3, [pc, #152]	@ (80037f0 <timer_tick+0x188>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	429a      	cmp	r2, r3
 800375c:	d332      	bcc.n	80037c4 <timer_tick+0x15c>

            if (dry_raw_is_dry()) {
 800375e:	f7ff fbbf 	bl	8002ee0 <dry_raw_is_dry>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00f      	beq.n	8003788 <timer_tick+0x120>
                stop_motor_keep_modes();
 8003768:	f7ff fb50 	bl	8002e0c <stop_motor_keep_modes>
                timerRetryDeadline = now_ms() + (uint32_t)searchSettings.testingGapSeconds * 1000UL;
 800376c:	f7ff fa66 	bl	8002c3c <now_ms>
 8003770:	4602      	mov	r2, r0
 8003772:	4b1c      	ldr	r3, [pc, #112]	@ (80037e4 <timer_tick+0x17c>)
 8003774:	885b      	ldrh	r3, [r3, #2]
 8003776:	4619      	mov	r1, r3
 8003778:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800377c:	fb01 f303 	mul.w	r3, r1, r3
 8003780:	4413      	add	r3, r2
 8003782:	4a1b      	ldr	r2, [pc, #108]	@ (80037f0 <timer_tick+0x188>)
 8003784:	6013      	str	r3, [r2, #0]
                return;
 8003786:	e020      	b.n	80037ca <timer_tick+0x162>
            }

            if (isTankFull()) {
 8003788:	f7ff fb56 	bl	8002e38 <isTankFull>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d002      	beq.n	8003798 <timer_tick+0x130>
                ModelHandle_StopAllModesAndMotor(); // terminal -> clear
 8003792:	f7ff fb43 	bl	8002e1c <ModelHandle_StopAllModesAndMotor>
                return;
 8003796:	e018      	b.n	80037ca <timer_tick+0x162>
            }

            start_motor();
 8003798:	f7ff fb1e 	bl	8002dd8 <start_motor>
            return;
 800379c:	e015      	b.n	80037ca <timer_tick+0x162>
        if (!s->active) continue;
 800379e:	bf00      	nop
    for (int i = 0; i < 3; i++) {
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	3301      	adds	r3, #1
 80037a4:	613b      	str	r3, [r7, #16]
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	dd8f      	ble.n	80036cc <timer_tick+0x64>
        }
    }

    if (!anySlotActive) return; // do not touch motor if no timers configured
 80037ac:	7dfb      	ldrb	r3, [r7, #23]
 80037ae:	f083 0301 	eor.w	r3, r3, #1
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d107      	bne.n	80037c8 <timer_tick+0x160>

    // Outside any window -> ensure OFF (but keep timers configured)
    stop_motor_keep_modes();
 80037b8:	f7ff fb28 	bl	8002e0c <stop_motor_keep_modes>
    timerRetryDeadline = 0;
 80037bc:	4b0c      	ldr	r3, [pc, #48]	@ (80037f0 <timer_tick+0x188>)
 80037be:	2200      	movs	r2, #0
 80037c0:	601a      	str	r2, [r3, #0]
 80037c2:	e002      	b.n	80037ca <timer_tick+0x162>
            if (now_ms() < timerRetryDeadline) return;
 80037c4:	bf00      	nop
 80037c6:	e000      	b.n	80037ca <timer_tick+0x162>
    if (!anySlotActive) return; // do not touch motor if no timers configured
 80037c8:	bf00      	nop
}
 80037ca:	3718      	adds	r7, #24
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	20000587 	.word	0x20000587
 80037d4:	2000057d 	.word	0x2000057d
 80037d8:	20000581 	.word	0x20000581
 80037dc:	2000057e 	.word	0x2000057e
 80037e0:	20000028 	.word	0x20000028
 80037e4:	20000020 	.word	0x20000020
 80037e8:	20000582 	.word	0x20000582
 80037ec:	200005a4 	.word	0x200005a4
 80037f0:	2000060c 	.word	0x2000060c

080037f4 <ModelHandle_StartSemiAuto>:

/* =======================
   SEMI-AUTO
   ======================= */
void ModelHandle_StartSemiAuto(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0
    clear_all_modes();
 80037f8:	f7ff fa28 	bl	8002c4c <clear_all_modes>
    semiAutoActive = true;
 80037fc:	4b0b      	ldr	r3, [pc, #44]	@ (800382c <ModelHandle_StartSemiAuto+0x38>)
 80037fe:	2201      	movs	r2, #1
 8003800:	701a      	strb	r2, [r3, #0]

    if (!isTankFull()) {
 8003802:	f7ff fb19 	bl	8002e38 <isTankFull>
 8003806:	4603      	mov	r3, r0
 8003808:	f083 0301 	eor.w	r3, r3, #1
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d005      	beq.n	800381e <ModelHandle_StartSemiAuto+0x2a>
        start_motor();
 8003812:	f7ff fae1 	bl	8002dd8 <start_motor>
        printf("Semi-Auto Started\r\n");
 8003816:	4806      	ldr	r0, [pc, #24]	@ (8003830 <ModelHandle_StartSemiAuto+0x3c>)
 8003818:	f007 fdd0 	bl	800b3bc <puts>
    } else {
        ModelHandle_StopAllModesAndMotor();
        printf("Semi-Auto Not Started: Already Full\r\n");
    }
}
 800381c:	e004      	b.n	8003828 <ModelHandle_StartSemiAuto+0x34>
        ModelHandle_StopAllModesAndMotor();
 800381e:	f7ff fafd 	bl	8002e1c <ModelHandle_StopAllModesAndMotor>
        printf("Semi-Auto Not Started: Already Full\r\n");
 8003822:	4804      	ldr	r0, [pc, #16]	@ (8003834 <ModelHandle_StartSemiAuto+0x40>)
 8003824:	f007 fdca 	bl	800b3bc <puts>
}
 8003828:	bf00      	nop
 800382a:	bd80      	pop	{r7, pc}
 800382c:	20000582 	.word	0x20000582
 8003830:	0800d910 	.word	0x0800d910
 8003834:	0800d924 	.word	0x0800d924

08003838 <ModelHandle_StopSemiAuto>:
void ModelHandle_StopSemiAuto(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	af00      	add	r7, sp, #0
    semiAutoActive   = false;
 800383c:	4b04      	ldr	r3, [pc, #16]	@ (8003850 <ModelHandle_StopSemiAuto+0x18>)
 800383e:	2200      	movs	r2, #0
 8003840:	701a      	strb	r2, [r3, #0]
    ModelHandle_StopAllModesAndMotor();
 8003842:	f7ff faeb 	bl	8002e1c <ModelHandle_StopAllModesAndMotor>
    printf("Semi-Auto Stopped\r\n");
 8003846:	4803      	ldr	r0, [pc, #12]	@ (8003854 <ModelHandle_StopSemiAuto+0x1c>)
 8003848:	f007 fdb8 	bl	800b3bc <puts>
}
 800384c:	bf00      	nop
 800384e:	bd80      	pop	{r7, pc}
 8003850:	20000582 	.word	0x20000582
 8003854:	0800d94c 	.word	0x0800d94c

08003858 <semi_auto_tick>:
static void semi_auto_tick(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
    if (!semiAutoActive) return;
 800385c:	4b11      	ldr	r3, [pc, #68]	@ (80038a4 <semi_auto_tick+0x4c>)
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	b2db      	uxtb	r3, r3
 8003862:	f083 0301 	eor.w	r3, r3, #1
 8003866:	b2db      	uxtb	r3, r3
 8003868:	2b00      	cmp	r3, #0
 800386a:	d118      	bne.n	800389e <semi_auto_tick+0x46>

    // Only complete on full; keep asserting motor otherwise
    if (isTankFull()) {
 800386c:	f7ff fae4 	bl	8002e38 <isTankFull>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d008      	beq.n	8003888 <semi_auto_tick+0x30>
        semiAutoActive = false;
 8003876:	4b0b      	ldr	r3, [pc, #44]	@ (80038a4 <semi_auto_tick+0x4c>)
 8003878:	2200      	movs	r2, #0
 800387a:	701a      	strb	r2, [r3, #0]
        ModelHandle_StopAllModesAndMotor();
 800387c:	f7ff face 	bl	8002e1c <ModelHandle_StopAllModesAndMotor>
        printf("Semi-Auto Complete: Tank Full\r\n");
 8003880:	4809      	ldr	r0, [pc, #36]	@ (80038a8 <semi_auto_tick+0x50>)
 8003882:	f007 fd9b 	bl	800b3bc <puts>
        return;
 8003886:	e00b      	b.n	80038a0 <semi_auto_tick+0x48>
    }

    // Keep motor ON during semi-auto (protections may still cut it)
    if (!Motor_GetStatus()) start_motor();
 8003888:	f000 f936 	bl	8003af8 <Motor_GetStatus>
 800388c:	4603      	mov	r3, r0
 800388e:	f083 0301 	eor.w	r3, r3, #1
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b00      	cmp	r3, #0
 8003896:	d003      	beq.n	80038a0 <semi_auto_tick+0x48>
 8003898:	f7ff fa9e 	bl	8002dd8 <start_motor>
 800389c:	e000      	b.n	80038a0 <semi_auto_tick+0x48>
    if (!semiAutoActive) return;
 800389e:	bf00      	nop
}
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	20000582 	.word	0x20000582
 80038a8:	0800d960 	.word	0x0800d960

080038ac <protections_tick>:

/* =======================
   PROTECTIONS
   ======================= */
static void protections_tick(void)
{
 80038ac:	b598      	push	{r3, r4, r7, lr}
 80038ae:	af00      	add	r7, sp, #0
    /* Manual override → only hard protections */
    if (manualOverride && manualActive) {
 80038b0:	4b49      	ldr	r3, [pc, #292]	@ (80039d8 <protections_tick+0x12c>)
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d02a      	beq.n	8003910 <protections_tick+0x64>
 80038ba:	4b48      	ldr	r3, [pc, #288]	@ (80039dc <protections_tick+0x130>)
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d025      	beq.n	8003910 <protections_tick+0x64>
        if (senseOverLoad && motorStatus == 1U) ModelHandle_StopAllModesAndMotor();
 80038c4:	4b46      	ldr	r3, [pc, #280]	@ (80039e0 <protections_tick+0x134>)
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d006      	beq.n	80038dc <protections_tick+0x30>
 80038ce:	4b45      	ldr	r3, [pc, #276]	@ (80039e4 <protections_tick+0x138>)
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d101      	bne.n	80038dc <protections_tick+0x30>
 80038d8:	f7ff faa0 	bl	8002e1c <ModelHandle_StopAllModesAndMotor>
        if (senseOverUnderVolt) ModelHandle_StopAllModesAndMotor();
 80038dc:	4b42      	ldr	r3, [pc, #264]	@ (80039e8 <protections_tick+0x13c>)
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <protections_tick+0x3e>
 80038e6:	f7ff fa99 	bl	8002e1c <ModelHandle_StopAllModesAndMotor>
        if (maxRunTimerArmed && (now_ms() - maxRunStartTick) >= MAX_CONT_RUN_MS) {
 80038ea:	4b40      	ldr	r3, [pc, #256]	@ (80039ec <protections_tick+0x140>)
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d06f      	beq.n	80039d2 <protections_tick+0x126>
 80038f2:	f7ff f9a3 	bl	8002c3c <now_ms>
 80038f6:	4602      	mov	r2, r0
 80038f8:	4b3d      	ldr	r3, [pc, #244]	@ (80039f0 <protections_tick+0x144>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	4a3d      	ldr	r2, [pc, #244]	@ (80039f4 <protections_tick+0x148>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d366      	bcc.n	80039d2 <protections_tick+0x126>
            ModelHandle_StopAllModesAndMotor();
 8003904:	f7ff fa8a 	bl	8002e1c <ModelHandle_StopAllModesAndMotor>
            senseMaxRunReached = true;
 8003908:	4b3b      	ldr	r3, [pc, #236]	@ (80039f8 <protections_tick+0x14c>)
 800390a:	2201      	movs	r2, #1
 800390c:	701a      	strb	r2, [r3, #0]
        }
        return;
 800390e:	e060      	b.n	80039d2 <protections_tick+0x126>
    }

    /* DRY-RUN: delayed stop */
    if (motorStatus == 1U) {
 8003910:	4b34      	ldr	r3, [pc, #208]	@ (80039e4 <protections_tick+0x138>)
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b01      	cmp	r3, #1
 8003918:	d12f      	bne.n	800397a <protections_tick+0xce>
        if (dry_raw_is_dry()) {
 800391a:	f7ff fae1 	bl	8002ee0 <dry_raw_is_dry>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d020      	beq.n	8003966 <protections_tick+0xba>
            senseDryRun = true; // show on UI while counting
 8003924:	4b35      	ldr	r3, [pc, #212]	@ (80039fc <protections_tick+0x150>)
 8003926:	2201      	movs	r2, #1
 8003928:	701a      	strb	r2, [r3, #0]
            if (!dryTimerArmed) {
 800392a:	4b35      	ldr	r3, [pc, #212]	@ (8003a00 <protections_tick+0x154>)
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	f083 0301 	eor.w	r3, r3, #1
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00b      	beq.n	8003950 <protections_tick+0xa4>
                dryTimerArmed   = true;
 8003938:	4b31      	ldr	r3, [pc, #196]	@ (8003a00 <protections_tick+0x154>)
 800393a:	2201      	movs	r2, #1
 800393c:	701a      	strb	r2, [r3, #0]
                dryStopDeadline = now_ms() + (uint32_t)DRY_STOP_DELAY_SECONDS * 1000UL;
 800393e:	f7ff f97d 	bl	8002c3c <now_ms>
 8003942:	4603      	mov	r3, r0
 8003944:	f503 43ea 	add.w	r3, r3, #29952	@ 0x7500
 8003948:	3330      	adds	r3, #48	@ 0x30
 800394a:	4a2e      	ldr	r2, [pc, #184]	@ (8003a04 <protections_tick+0x158>)
 800394c:	6013      	str	r3, [r2, #0]
 800394e:	e01a      	b.n	8003986 <protections_tick+0xda>
            } else {
                if ((int32_t)(dryStopDeadline - now_ms()) <= 0) {
 8003950:	4b2c      	ldr	r3, [pc, #176]	@ (8003a04 <protections_tick+0x158>)
 8003952:	681c      	ldr	r4, [r3, #0]
 8003954:	f7ff f972 	bl	8002c3c <now_ms>
 8003958:	4603      	mov	r3, r0
 800395a:	1ae3      	subs	r3, r4, r3
 800395c:	2b00      	cmp	r3, #0
 800395e:	dc12      	bgt.n	8003986 <protections_tick+0xda>
                    ModelHandle_StopAllModesAndMotor();
 8003960:	f7ff fa5c 	bl	8002e1c <ModelHandle_StopAllModesAndMotor>
 8003964:	e00f      	b.n	8003986 <protections_tick+0xda>
                    // Keep flag true until user action clears (or water returns and motor restarts)
                }
            }
        } else {
            // water found => cancel dry timer & flag
            dryTimerArmed   = false;
 8003966:	4b26      	ldr	r3, [pc, #152]	@ (8003a00 <protections_tick+0x154>)
 8003968:	2200      	movs	r2, #0
 800396a:	701a      	strb	r2, [r3, #0]
            dryStopDeadline = 0;
 800396c:	4b25      	ldr	r3, [pc, #148]	@ (8003a04 <protections_tick+0x158>)
 800396e:	2200      	movs	r2, #0
 8003970:	601a      	str	r2, [r3, #0]
            senseDryRun     = false;
 8003972:	4b22      	ldr	r3, [pc, #136]	@ (80039fc <protections_tick+0x150>)
 8003974:	2200      	movs	r2, #0
 8003976:	701a      	strb	r2, [r3, #0]
 8003978:	e005      	b.n	8003986 <protections_tick+0xda>
        }
    } else {
        // motor is off; reset dry timing
        dryTimerArmed   = false;
 800397a:	4b21      	ldr	r3, [pc, #132]	@ (8003a00 <protections_tick+0x154>)
 800397c:	2200      	movs	r2, #0
 800397e:	701a      	strb	r2, [r3, #0]
        dryStopDeadline = 0;
 8003980:	4b20      	ldr	r3, [pc, #128]	@ (8003a04 <protections_tick+0x158>)
 8003982:	2200      	movs	r2, #0
 8003984:	601a      	str	r2, [r3, #0]
        // keep senseDryRun as-is for UI; it will clear on next water detection
    }

    /* Other protections -> hard clear */
    if (senseOverLoad && motorStatus == 1U) ModelHandle_StopAllModesAndMotor();
 8003986:	4b16      	ldr	r3, [pc, #88]	@ (80039e0 <protections_tick+0x134>)
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	b2db      	uxtb	r3, r3
 800398c:	2b00      	cmp	r3, #0
 800398e:	d006      	beq.n	800399e <protections_tick+0xf2>
 8003990:	4b14      	ldr	r3, [pc, #80]	@ (80039e4 <protections_tick+0x138>)
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b01      	cmp	r3, #1
 8003998:	d101      	bne.n	800399e <protections_tick+0xf2>
 800399a:	f7ff fa3f 	bl	8002e1c <ModelHandle_StopAllModesAndMotor>
    if (senseOverUnderVolt) ModelHandle_StopAllModesAndMotor();
 800399e:	4b12      	ldr	r3, [pc, #72]	@ (80039e8 <protections_tick+0x13c>)
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <protections_tick+0x100>
 80039a8:	f7ff fa38 	bl	8002e1c <ModelHandle_StopAllModesAndMotor>

    if (maxRunTimerArmed && (now_ms() - maxRunStartTick) >= MAX_CONT_RUN_MS) {
 80039ac:	4b0f      	ldr	r3, [pc, #60]	@ (80039ec <protections_tick+0x140>)
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00f      	beq.n	80039d4 <protections_tick+0x128>
 80039b4:	f7ff f942 	bl	8002c3c <now_ms>
 80039b8:	4602      	mov	r2, r0
 80039ba:	4b0d      	ldr	r3, [pc, #52]	@ (80039f0 <protections_tick+0x144>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	4a0c      	ldr	r2, [pc, #48]	@ (80039f4 <protections_tick+0x148>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d306      	bcc.n	80039d4 <protections_tick+0x128>
        ModelHandle_StopAllModesAndMotor();
 80039c6:	f7ff fa29 	bl	8002e1c <ModelHandle_StopAllModesAndMotor>
        senseMaxRunReached = true;
 80039ca:	4b0b      	ldr	r3, [pc, #44]	@ (80039f8 <protections_tick+0x14c>)
 80039cc:	2201      	movs	r2, #1
 80039ce:	701a      	strb	r2, [r3, #0]
 80039d0:	e000      	b.n	80039d4 <protections_tick+0x128>
        return;
 80039d2:	bf00      	nop
    }
}
 80039d4:	bd98      	pop	{r3, r4, r7, pc}
 80039d6:	bf00      	nop
 80039d8:	20000587 	.word	0x20000587
 80039dc:	2000057d 	.word	0x2000057d
 80039e0:	20000584 	.word	0x20000584
 80039e4:	2000057c 	.word	0x2000057c
 80039e8:	20000585 	.word	0x20000585
 80039ec:	20000588 	.word	0x20000588
 80039f0:	2000058c 	.word	0x2000058c
 80039f4:	006ddd00 	.word	0x006ddd00
 80039f8:	20000586 	.word	0x20000586
 80039fc:	20000583 	.word	0x20000583
 8003a00:	20000590 	.word	0x20000590
 8003a04:	20000594 	.word	0x20000594

08003a08 <leds_from_model>:

/* =======================
   LEDs
   ======================= */
static void leds_from_model(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
    LED_ClearAllIntents();
 8003a0c:	f7fe fbb2 	bl	8002174 <LED_ClearAllIntents>

    if (motorStatus == 1U) {
 8003a10:	4b21      	ldr	r3, [pc, #132]	@ (8003a98 <leds_from_model+0x90>)
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d104      	bne.n	8003a24 <leds_from_model+0x1c>
        LED_SetIntent(LED_COLOR_GREEN, LED_MODE_STEADY, 0);
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	2000      	movs	r0, #0
 8003a20:	f7fe fbc8 	bl	80021b4 <LED_SetIntent>
    }
    if (countdownActive) {
 8003a24:	4b1d      	ldr	r3, [pc, #116]	@ (8003a9c <leds_from_model+0x94>)
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d005      	beq.n	8003a3a <leds_from_model+0x32>
        LED_SetIntent(LED_COLOR_GREEN, LED_MODE_BLINK, 500);
 8003a2e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003a32:	2102      	movs	r1, #2
 8003a34:	2000      	movs	r0, #0
 8003a36:	f7fe fbbd 	bl	80021b4 <LED_SetIntent>
    }
    if (senseDryRun) {
 8003a3a:	4b19      	ldr	r3, [pc, #100]	@ (8003aa0 <leds_from_model+0x98>)
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d004      	beq.n	8003a4e <leds_from_model+0x46>
        LED_SetIntent(LED_COLOR_RED, LED_MODE_STEADY, 0);
 8003a44:	2200      	movs	r2, #0
 8003a46:	2101      	movs	r1, #1
 8003a48:	2001      	movs	r0, #1
 8003a4a:	f7fe fbb3 	bl	80021b4 <LED_SetIntent>
    }
    if (senseMaxRunReached) {
 8003a4e:	4b15      	ldr	r3, [pc, #84]	@ (8003aa4 <leds_from_model+0x9c>)
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d005      	beq.n	8003a64 <leds_from_model+0x5c>
        LED_SetIntent(LED_COLOR_RED, LED_MODE_BLINK, 400);
 8003a58:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8003a5c:	2102      	movs	r1, #2
 8003a5e:	2001      	movs	r0, #1
 8003a60:	f7fe fba8 	bl	80021b4 <LED_SetIntent>
    }
    if (senseOverLoad) {
 8003a64:	4b10      	ldr	r3, [pc, #64]	@ (8003aa8 <leds_from_model+0xa0>)
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d005      	beq.n	8003a7a <leds_from_model+0x72>
        LED_SetIntent(LED_COLOR_BLUE, LED_MODE_BLINK, 350);
 8003a6e:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8003a72:	2102      	movs	r1, #2
 8003a74:	2002      	movs	r0, #2
 8003a76:	f7fe fb9d 	bl	80021b4 <LED_SetIntent>
    }
    if (senseOverUnderVolt) {
 8003a7a:	4b0c      	ldr	r3, [pc, #48]	@ (8003aac <leds_from_model+0xa4>)
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d005      	beq.n	8003a90 <leds_from_model+0x88>
        LED_SetIntent(LED_COLOR_PURPLE, LED_MODE_BLINK, 350);
 8003a84:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8003a88:	2102      	movs	r1, #2
 8003a8a:	2003      	movs	r0, #3
 8003a8c:	f7fe fb92 	bl	80021b4 <LED_SetIntent>
    }

    LED_ApplyIntents();
 8003a90:	f7fe fbb0 	bl	80021f4 <LED_ApplyIntents>
}
 8003a94:	bf00      	nop
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	2000057c 	.word	0x2000057c
 8003a9c:	2000057e 	.word	0x2000057e
 8003aa0:	20000583 	.word	0x20000583
 8003aa4:	20000586 	.word	0x20000586
 8003aa8:	20000584 	.word	0x20000584
 8003aac:	20000585 	.word	0x20000585

08003ab0 <ModelHandle_SetMotor>:

/* =======================
   Public Motor APIs
   ======================= */
void ModelHandle_SetMotor(bool on)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	71fb      	strb	r3, [r7, #7]
    if (on) {
 8003aba:	79fb      	ldrb	r3, [r7, #7]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d007      	beq.n	8003ad0 <ModelHandle_SetMotor+0x20>
        clear_all_modes();         // turning ON directly should not have stray modes
 8003ac0:	f7ff f8c4 	bl	8002c4c <clear_all_modes>
        manualOverride = true;
 8003ac4:	4b05      	ldr	r3, [pc, #20]	@ (8003adc <ModelHandle_SetMotor+0x2c>)
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	701a      	strb	r2, [r3, #0]
        start_motor();
 8003aca:	f7ff f985 	bl	8002dd8 <start_motor>
    } else {
        ModelHandle_StopAllModesAndMotor();
    }
}
 8003ace:	e001      	b.n	8003ad4 <ModelHandle_SetMotor+0x24>
        ModelHandle_StopAllModesAndMotor();
 8003ad0:	f7ff f9a4 	bl	8002e1c <ModelHandle_StopAllModesAndMotor>
}
 8003ad4:	bf00      	nop
 8003ad6:	3708      	adds	r7, #8
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	20000587 	.word	0x20000587

08003ae0 <ModelHandle_ClearManualOverride>:
void ModelHandle_ClearManualOverride(void) { manualOverride = false; }
 8003ae0:	b480      	push	{r7}
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	4b03      	ldr	r3, [pc, #12]	@ (8003af4 <ModelHandle_ClearManualOverride+0x14>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	701a      	strb	r2, [r3, #0]
 8003aea:	bf00      	nop
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bc80      	pop	{r7}
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	20000587 	.word	0x20000587

08003af8 <Motor_GetStatus>:
bool Motor_GetStatus(void) { return (motorStatus == 1U); }
 8003af8:	b480      	push	{r7}
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	4b05      	ldr	r3, [pc, #20]	@ (8003b14 <Motor_GetStatus+0x1c>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	bf0c      	ite	eq
 8003b06:	2301      	moveq	r3, #1
 8003b08:	2300      	movne	r3, #0
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bc80      	pop	{r7}
 8003b12:	4770      	bx	lr
 8003b14:	2000057c 	.word	0x2000057c

08003b18 <ModelHandle_Process>:

/* =======================
   Main pump
   ======================= */
void ModelHandle_Process(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
    /* keep your original order of tickers */
    countdown_tick();
 8003b1e:	f7ff fab1 	bl	8003084 <countdown_tick>
    twist_tick();     // critical for Twist mode
 8003b22:	f7ff fb99 	bl	8003258 <twist_tick>
    search_tick();
 8003b26:	f7ff fcef 	bl	8003508 <search_tick>
    timer_tick();
 8003b2a:	f7ff fd9d 	bl	8003668 <timer_tick>
    semi_auto_tick();
 8003b2e:	f7ff fe93 	bl	8003858 <semi_auto_tick>

    /* --- Aux Burst auto-OFF (Relays 2 & 3) --- */
    if (auxBurstActive) {
 8003b32:	4b10      	ldr	r3, [pc, #64]	@ (8003b74 <ModelHandle_Process+0x5c>)
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d013      	beq.n	8003b62 <ModelHandle_Process+0x4a>
        uint32_t nowt = HAL_GetTick();
 8003b3a:	f002 fa3d 	bl	8005fb8 <HAL_GetTick>
 8003b3e:	6078      	str	r0, [r7, #4]
        if ((int32_t)(auxBurstDeadlineMs - nowt) <= 0) {
 8003b40:	4b0d      	ldr	r3, [pc, #52]	@ (8003b78 <ModelHandle_Process+0x60>)
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	dc0a      	bgt.n	8003b62 <ModelHandle_Process+0x4a>
            Relay_Set(2, false);
 8003b4c:	2100      	movs	r1, #0
 8003b4e:	2002      	movs	r0, #2
 8003b50:	f000 f8f6 	bl	8003d40 <Relay_Set>
            Relay_Set(3, false);
 8003b54:	2100      	movs	r1, #0
 8003b56:	2003      	movs	r0, #3
 8003b58:	f000 f8f2 	bl	8003d40 <Relay_Set>
            auxBurstActive = false;
 8003b5c:	4b05      	ldr	r3, [pc, #20]	@ (8003b74 <ModelHandle_Process+0x5c>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	701a      	strb	r2, [r3, #0]
        }
    }

    protections_tick();
 8003b62:	f7ff fea3 	bl	80038ac <protections_tick>
    leds_from_model();
 8003b66:	f7ff ff4f 	bl	8003a08 <leds_from_model>
}
 8003b6a:	bf00      	nop
 8003b6c:	3708      	adds	r7, #8
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	2000059c 	.word	0x2000059c
 8003b78:	200005a0 	.word	0x200005a0

08003b7c <ModelHandle_ProcessUartCommand>:

/* =======================
   UART commands
   ======================= */
void ModelHandle_ProcessUartCommand(const char* cmd)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
    if (!cmd || !*cmd) return;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d071      	beq.n	8003c6e <ModelHandle_ProcessUartCommand+0xf2>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d06d      	beq.n	8003c6e <ModelHandle_ProcessUartCommand+0xf2>

    if      (strcmp(cmd, "MOTOR_ON") == 0)  { ModelHandle_SetMotor(true);  printf("Manual ON (UART)\r\n"); }
 8003b92:	4939      	ldr	r1, [pc, #228]	@ (8003c78 <ModelHandle_ProcessUartCommand+0xfc>)
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f7fc fadb 	bl	8000150 <strcmp>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d106      	bne.n	8003bae <ModelHandle_ProcessUartCommand+0x32>
 8003ba0:	2001      	movs	r0, #1
 8003ba2:	f7ff ff85 	bl	8003ab0 <ModelHandle_SetMotor>
 8003ba6:	4835      	ldr	r0, [pc, #212]	@ (8003c7c <ModelHandle_ProcessUartCommand+0x100>)
 8003ba8:	f007 fc08 	bl	800b3bc <puts>
 8003bac:	e060      	b.n	8003c70 <ModelHandle_ProcessUartCommand+0xf4>
    else if (strcmp(cmd, "MOTOR_OFF")== 0)  { ModelHandle_SetMotor(false); printf("Manual OFF (UART)\r\n"); }
 8003bae:	4934      	ldr	r1, [pc, #208]	@ (8003c80 <ModelHandle_ProcessUartCommand+0x104>)
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f7fc facd 	bl	8000150 <strcmp>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d106      	bne.n	8003bca <ModelHandle_ProcessUartCommand+0x4e>
 8003bbc:	2000      	movs	r0, #0
 8003bbe:	f7ff ff77 	bl	8003ab0 <ModelHandle_SetMotor>
 8003bc2:	4830      	ldr	r0, [pc, #192]	@ (8003c84 <ModelHandle_ProcessUartCommand+0x108>)
 8003bc4:	f007 fbfa 	bl	800b3bc <puts>
 8003bc8:	e052      	b.n	8003c70 <ModelHandle_ProcessUartCommand+0xf4>
    else if (strcmp(cmd, "SEMI_AUTO_START")==0) { ModelHandle_StartSemiAuto(); }
 8003bca:	492f      	ldr	r1, [pc, #188]	@ (8003c88 <ModelHandle_ProcessUartCommand+0x10c>)
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f7fc fabf 	bl	8000150 <strcmp>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d102      	bne.n	8003bde <ModelHandle_ProcessUartCommand+0x62>
 8003bd8:	f7ff fe0c 	bl	80037f4 <ModelHandle_StartSemiAuto>
 8003bdc:	e048      	b.n	8003c70 <ModelHandle_ProcessUartCommand+0xf4>
    else if (strcmp(cmd, "SEMI_AUTO_STOP")==0)  { ModelHandle_StopSemiAuto(); }
 8003bde:	492b      	ldr	r1, [pc, #172]	@ (8003c8c <ModelHandle_ProcessUartCommand+0x110>)
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f7fc fab5 	bl	8000150 <strcmp>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d102      	bne.n	8003bf2 <ModelHandle_ProcessUartCommand+0x76>
 8003bec:	f7ff fe24 	bl	8003838 <ModelHandle_StopSemiAuto>
 8003bf0:	e03e      	b.n	8003c70 <ModelHandle_ProcessUartCommand+0xf4>
    else if (strcmp(cmd, "TWIST_START")==0)     { ModelHandle_StartTwist(twistSettings.onDurationSeconds, twistSettings.offDurationSeconds); }
 8003bf2:	4927      	ldr	r1, [pc, #156]	@ (8003c90 <ModelHandle_ProcessUartCommand+0x114>)
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f7fc faab 	bl	8000150 <strcmp>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d108      	bne.n	8003c12 <ModelHandle_ProcessUartCommand+0x96>
 8003c00:	4b24      	ldr	r3, [pc, #144]	@ (8003c94 <ModelHandle_ProcessUartCommand+0x118>)
 8003c02:	885b      	ldrh	r3, [r3, #2]
 8003c04:	4a23      	ldr	r2, [pc, #140]	@ (8003c94 <ModelHandle_ProcessUartCommand+0x118>)
 8003c06:	8892      	ldrh	r2, [r2, #4]
 8003c08:	4611      	mov	r1, r2
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7ff fac6 	bl	800319c <ModelHandle_StartTwist>
 8003c10:	e02e      	b.n	8003c70 <ModelHandle_ProcessUartCommand+0xf4>
    else if (strcmp(cmd, "TWIST_STOP")==0)      { ModelHandle_StopTwist(); }
 8003c12:	4921      	ldr	r1, [pc, #132]	@ (8003c98 <ModelHandle_ProcessUartCommand+0x11c>)
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f7fc fa9b 	bl	8000150 <strcmp>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d102      	bne.n	8003c26 <ModelHandle_ProcessUartCommand+0xaa>
 8003c20:	f7ff fb00 	bl	8003224 <ModelHandle_StopTwist>
 8003c24:	e024      	b.n	8003c70 <ModelHandle_ProcessUartCommand+0xf4>
    else if (strcmp(cmd, "SEARCH_START")==0)    { ModelHandle_StartSearch(searchSettings.testingGapSeconds, searchSettings.dryRunTimeSeconds); }
 8003c26:	491d      	ldr	r1, [pc, #116]	@ (8003c9c <ModelHandle_ProcessUartCommand+0x120>)
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f7fc fa91 	bl	8000150 <strcmp>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d108      	bne.n	8003c46 <ModelHandle_ProcessUartCommand+0xca>
 8003c34:	4b1a      	ldr	r3, [pc, #104]	@ (8003ca0 <ModelHandle_ProcessUartCommand+0x124>)
 8003c36:	885b      	ldrh	r3, [r3, #2]
 8003c38:	4a19      	ldr	r2, [pc, #100]	@ (8003ca0 <ModelHandle_ProcessUartCommand+0x124>)
 8003c3a:	8892      	ldrh	r2, [r2, #4]
 8003c3c:	4611      	mov	r1, r2
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7ff fbe8 	bl	8003414 <ModelHandle_StartSearch>
 8003c44:	e014      	b.n	8003c70 <ModelHandle_ProcessUartCommand+0xf4>
    else if (strcmp(cmd, "SEARCH_STOP")==0)     { ModelHandle_StopSearch(); }
 8003c46:	4917      	ldr	r1, [pc, #92]	@ (8003ca4 <ModelHandle_ProcessUartCommand+0x128>)
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f7fc fa81 	bl	8000150 <strcmp>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d102      	bne.n	8003c5a <ModelHandle_ProcessUartCommand+0xde>
 8003c54:	f7ff fc22 	bl	800349c <ModelHandle_StopSearch>
 8003c58:	e00a      	b.n	8003c70 <ModelHandle_ProcessUartCommand+0xf4>
    else if (strcmp(cmd, "RESET_ALL")==0)       { ModelHandle_ResetAll(); }
 8003c5a:	4913      	ldr	r1, [pc, #76]	@ (8003ca8 <ModelHandle_ProcessUartCommand+0x12c>)
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f7fc fa77 	bl	8000150 <strcmp>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d103      	bne.n	8003c70 <ModelHandle_ProcessUartCommand+0xf4>
 8003c68:	f7ff f81a 	bl	8002ca0 <ModelHandle_ResetAll>
 8003c6c:	e000      	b.n	8003c70 <ModelHandle_ProcessUartCommand+0xf4>
    if (!cmd || !*cmd) return;
 8003c6e:	bf00      	nop
}
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	0800d980 	.word	0x0800d980
 8003c7c:	0800d98c 	.word	0x0800d98c
 8003c80:	0800d9a0 	.word	0x0800d9a0
 8003c84:	0800d9ac 	.word	0x0800d9ac
 8003c88:	0800d9c0 	.word	0x0800d9c0
 8003c8c:	0800d9d0 	.word	0x0800d9d0
 8003c90:	0800d9e0 	.word	0x0800d9e0
 8003c94:	20000028 	.word	0x20000028
 8003c98:	0800d9ec 	.word	0x0800d9ec
 8003c9c:	0800d9f8 	.word	0x0800d9f8
 8003ca0:	20000020 	.word	0x20000020
 8003ca4:	0800da08 	.word	0x0800da08
 8003ca8:	0800da14 	.word	0x0800da14

08003cac <Relay_Init>:
    { Relay2_GPIO_Port, Relay2_Pin },
    { Relay3_GPIO_Port, Relay3_Pin }
};

void Relay_Init(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cb2:	1d3b      	adds	r3, r7, #4
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	605a      	str	r2, [r3, #4]
 8003cba:	609a      	str	r2, [r3, #8]
 8003cbc:	60da      	str	r2, [r3, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cbe:	4b1e      	ldr	r3, [pc, #120]	@ (8003d38 <Relay_Init+0x8c>)
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	4a1d      	ldr	r2, [pc, #116]	@ (8003d38 <Relay_Init+0x8c>)
 8003cc4:	f043 0308 	orr.w	r3, r3, #8
 8003cc8:	6193      	str	r3, [r2, #24]
 8003cca:	4b1b      	ldr	r3, [pc, #108]	@ (8003d38 <Relay_Init+0x8c>)
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	f003 0308 	and.w	r3, r3, #8
 8003cd2:	603b      	str	r3, [r7, #0]
 8003cd4:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cde:	2302      	movs	r3, #2
 8003ce0:	613b      	str	r3, [r7, #16]

    for (int i = 0; i < NUM_RELAYS; i++) {
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	617b      	str	r3, [r7, #20]
 8003ce6:	e01e      	b.n	8003d26 <Relay_Init+0x7a>
        GPIO_InitStruct.Pin = relays[i].pin;
 8003ce8:	4a14      	ldr	r2, [pc, #80]	@ (8003d3c <Relay_Init+0x90>)
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	00db      	lsls	r3, r3, #3
 8003cee:	4413      	add	r3, r2
 8003cf0:	889b      	ldrh	r3, [r3, #4]
 8003cf2:	607b      	str	r3, [r7, #4]
        HAL_GPIO_Init(relays[i].port, &GPIO_InitStruct);
 8003cf4:	4a11      	ldr	r2, [pc, #68]	@ (8003d3c <Relay_Init+0x90>)
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003cfc:	1d3a      	adds	r2, r7, #4
 8003cfe:	4611      	mov	r1, r2
 8003d00:	4618      	mov	r0, r3
 8003d02:	f003 f86d 	bl	8006de0 <HAL_GPIO_Init>
        // Ensure relays are off initially
        HAL_GPIO_WritePin(relays[i].port, relays[i].pin,
 8003d06:	4a0d      	ldr	r2, [pc, #52]	@ (8003d3c <Relay_Init+0x90>)
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8003d0e:	4a0b      	ldr	r2, [pc, #44]	@ (8003d3c <Relay_Init+0x90>)
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	4413      	add	r3, r2
 8003d16:	889b      	ldrh	r3, [r3, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	f003 f9fb 	bl	8007116 <HAL_GPIO_WritePin>
    for (int i = 0; i < NUM_RELAYS; i++) {
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	3301      	adds	r3, #1
 8003d24:	617b      	str	r3, [r7, #20]
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	dddd      	ble.n	8003ce8 <Relay_Init+0x3c>
                          (RELAY_ACTIVE_STATE == GPIO_PIN_SET) ? GPIO_PIN_RESET : GPIO_PIN_SET);
    }
}
 8003d2c:	bf00      	nop
 8003d2e:	bf00      	nop
 8003d30:	3718      	adds	r7, #24
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	40021000 	.word	0x40021000
 8003d3c:	0800dd6c 	.word	0x0800dd6c

08003d40 <Relay_Set>:

void Relay_Set(uint8_t relay_no, bool on)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	4603      	mov	r3, r0
 8003d48:	460a      	mov	r2, r1
 8003d4a:	71fb      	strb	r3, [r7, #7]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	71bb      	strb	r3, [r7, #6]
    if (relay_no == 0 || relay_no > NUM_RELAYS) return;
 8003d50:	79fb      	ldrb	r3, [r7, #7]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d012      	beq.n	8003d7c <Relay_Set+0x3c>
 8003d56:	79fb      	ldrb	r3, [r7, #7]
 8003d58:	2b03      	cmp	r3, #3
 8003d5a:	d80f      	bhi.n	8003d7c <Relay_Set+0x3c>

    HAL_GPIO_WritePin(relays[relay_no - 1].port,
 8003d5c:	79fb      	ldrb	r3, [r7, #7]
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	4a08      	ldr	r2, [pc, #32]	@ (8003d84 <Relay_Set+0x44>)
 8003d62:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
                      relays[relay_no - 1].pin,
 8003d66:	79fb      	ldrb	r3, [r7, #7]
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	4a06      	ldr	r2, [pc, #24]	@ (8003d84 <Relay_Set+0x44>)
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	4413      	add	r3, r2
 8003d70:	889b      	ldrh	r3, [r3, #4]
    HAL_GPIO_WritePin(relays[relay_no - 1].port,
 8003d72:	79ba      	ldrb	r2, [r7, #6]
 8003d74:	4619      	mov	r1, r3
 8003d76:	f003 f9ce 	bl	8007116 <HAL_GPIO_WritePin>
 8003d7a:	e000      	b.n	8003d7e <Relay_Set+0x3e>
    if (relay_no == 0 || relay_no > NUM_RELAYS) return;
 8003d7c:	bf00      	nop
                      on ? RELAY_ACTIVE_STATE :
                           (RELAY_ACTIVE_STATE == GPIO_PIN_SET ? GPIO_PIN_RESET : GPIO_PIN_SET));
}
 8003d7e:	3708      	adds	r7, #8
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	0800dd6c 	.word	0x0800dd6c

08003d88 <Relay_Get>:

bool Relay_Get(uint8_t relay_no)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	4603      	mov	r3, r0
 8003d90:	71fb      	strb	r3, [r7, #7]
    if (relay_no == 0 || relay_no > NUM_RELAYS) return false;
 8003d92:	79fb      	ldrb	r3, [r7, #7]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d002      	beq.n	8003d9e <Relay_Get+0x16>
 8003d98:	79fb      	ldrb	r3, [r7, #7]
 8003d9a:	2b03      	cmp	r3, #3
 8003d9c:	d901      	bls.n	8003da2 <Relay_Get+0x1a>
 8003d9e:	2300      	movs	r3, #0
 8003da0:	e016      	b.n	8003dd0 <Relay_Get+0x48>

    GPIO_PinState s = HAL_GPIO_ReadPin(relays[relay_no - 1].port,
 8003da2:	79fb      	ldrb	r3, [r7, #7]
 8003da4:	3b01      	subs	r3, #1
 8003da6:	4a0c      	ldr	r2, [pc, #48]	@ (8003dd8 <Relay_Get+0x50>)
 8003da8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
                                       relays[relay_no - 1].pin);
 8003dac:	79fb      	ldrb	r3, [r7, #7]
 8003dae:	3b01      	subs	r3, #1
 8003db0:	4909      	ldr	r1, [pc, #36]	@ (8003dd8 <Relay_Get+0x50>)
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	440b      	add	r3, r1
 8003db6:	889b      	ldrh	r3, [r3, #4]
    GPIO_PinState s = HAL_GPIO_ReadPin(relays[relay_no - 1].port,
 8003db8:	4619      	mov	r1, r3
 8003dba:	4610      	mov	r0, r2
 8003dbc:	f003 f994 	bl	80070e8 <HAL_GPIO_ReadPin>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	73fb      	strb	r3, [r7, #15]

    return (s == RELAY_ACTIVE_STATE);
 8003dc4:	7bfb      	ldrb	r3, [r7, #15]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	bf0c      	ite	eq
 8003dca:	2301      	moveq	r3, #1
 8003dcc:	2300      	movne	r3, #0
 8003dce:	b2db      	uxtb	r3, r3
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	0800dd6c 	.word	0x0800dd6c

08003ddc <rf_delay_us>:
#include "stm32f1xx_hal.h"   // or stm32f0xx_hal.h depending on your MCU

extern TIM_HandleTypeDef htim3;  // Timer3 must be initialized in main.c

// --- private microsecond delay using TIM3 ---
static void rf_delay_us(uint32_t us) {
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COUNTER(&htim3, 0);
 8003de4:	4b08      	ldr	r3, [pc, #32]	@ (8003e08 <rf_delay_us+0x2c>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2200      	movs	r2, #0
 8003dea:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(&htim3) < us);
 8003dec:	bf00      	nop
 8003dee:	4b06      	ldr	r3, [pc, #24]	@ (8003e08 <rf_delay_us+0x2c>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d8f9      	bhi.n	8003dee <rf_delay_us+0x12>
}
 8003dfa:	bf00      	nop
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bc80      	pop	{r7}
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	2000041c 	.word	0x2000041c

08003e0c <RF_Init>:

// --- init RF pin (set low) ---
void RF_Init(void) {
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RF_DATA_GPIO_Port, RF_DATA_Pin, GPIO_PIN_RESET);
 8003e10:	2200      	movs	r2, #0
 8003e12:	2180      	movs	r1, #128	@ 0x80
 8003e14:	4802      	ldr	r0, [pc, #8]	@ (8003e20 <RF_Init+0x14>)
 8003e16:	f003 f97e 	bl	8007116 <HAL_GPIO_WritePin>
}
 8003e1a:	bf00      	nop
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	40010c00 	.word	0x40010c00

08003e24 <send_high_low>:

// --- helper: high + low pulse ---
static void send_high_low(uint32_t high_us, uint32_t low_us) {
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(RF_DATA_GPIO_Port, RF_DATA_Pin, GPIO_PIN_SET);
 8003e2e:	2201      	movs	r2, #1
 8003e30:	2180      	movs	r1, #128	@ 0x80
 8003e32:	4809      	ldr	r0, [pc, #36]	@ (8003e58 <send_high_low+0x34>)
 8003e34:	f003 f96f 	bl	8007116 <HAL_GPIO_WritePin>
    rf_delay_us(high_us);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f7ff ffcf 	bl	8003ddc <rf_delay_us>
    HAL_GPIO_WritePin(RF_DATA_GPIO_Port, RF_DATA_Pin, GPIO_PIN_RESET);
 8003e3e:	2200      	movs	r2, #0
 8003e40:	2180      	movs	r1, #128	@ 0x80
 8003e42:	4805      	ldr	r0, [pc, #20]	@ (8003e58 <send_high_low+0x34>)
 8003e44:	f003 f967 	bl	8007116 <HAL_GPIO_WritePin>
    rf_delay_us(low_us);
 8003e48:	6838      	ldr	r0, [r7, #0]
 8003e4a:	f7ff ffc7 	bl	8003ddc <rf_delay_us>
}
 8003e4e:	bf00      	nop
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	40010c00 	.word	0x40010c00

08003e5c <send_bit>:

// --- send one bit (protocol encoding) ---
static void send_bit(uint8_t bit) {
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	4603      	mov	r3, r0
 8003e64:	71fb      	strb	r3, [r7, #7]
    if (bit) {
 8003e66:	79fb      	ldrb	r3, [r7, #7]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d006      	beq.n	8003e7a <send_bit+0x1e>
        // logical 1 = short HIGH, long LOW
        send_high_low(300, 900);
 8003e6c:	f44f 7161 	mov.w	r1, #900	@ 0x384
 8003e70:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8003e74:	f7ff ffd6 	bl	8003e24 <send_high_low>
    } else {
        // logical 0 = long HIGH, short LOW
        send_high_low(900, 300);
    }
}
 8003e78:	e005      	b.n	8003e86 <send_bit+0x2a>
        send_high_low(900, 300);
 8003e7a:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8003e7e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8003e82:	f7ff ffcf 	bl	8003e24 <send_high_low>
}
 8003e86:	bf00      	nop
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <RF_SendCode>:

// --- send full RF code (repeated for reliability) ---
void RF_SendCode(uint32_t code, uint8_t bits) {
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b084      	sub	sp, #16
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
 8003e96:	460b      	mov	r3, r1
 8003e98:	70fb      	strb	r3, [r7, #3]
    for (int repeat = 0; repeat < 4; repeat++) {
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	60fb      	str	r3, [r7, #12]
 8003e9e:	e031      	b.n	8003f04 <RF_SendCode+0x76>
        // Sync pulse
        send_high_low(275, 9900);
 8003ea0:	f242 61ac 	movw	r1, #9900	@ 0x26ac
 8003ea4:	f240 1013 	movw	r0, #275	@ 0x113
 8003ea8:	f7ff ffbc 	bl	8003e24 <send_high_low>
        rf_delay_us(1000);
 8003eac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003eb0:	f7ff ff94 	bl	8003ddc <rf_delay_us>

        // Send data bits MSB → LSB
        for (int8_t i = bits - 1; i >= 0; i--) {
 8003eb4:	78fb      	ldrb	r3, [r7, #3]
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	72fb      	strb	r3, [r7, #11]
 8003ebc:	e011      	b.n	8003ee2 <RF_SendCode+0x54>
            send_bit((code >> i) & 1);
 8003ebe:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7ff ffc3 	bl	8003e5c <send_bit>
        for (int8_t i = bits - 1; i >= 0; i--) {
 8003ed6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	3b01      	subs	r3, #1
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	72fb      	strb	r3, [r7, #11]
 8003ee2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	dae9      	bge.n	8003ebe <RF_SendCode+0x30>
        }

        // End marker
        send_high_low(300, 900);
 8003eea:	f44f 7161 	mov.w	r1, #900	@ 0x384
 8003eee:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8003ef2:	f7ff ff97 	bl	8003e24 <send_high_low>

        // Gap before repeat
        rf_delay_us(10000);
 8003ef6:	f242 7010 	movw	r0, #10000	@ 0x2710
 8003efa:	f7ff ff6f 	bl	8003ddc <rf_delay_us>
    for (int repeat = 0; repeat < 4; repeat++) {
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	3301      	adds	r3, #1
 8003f02:	60fb      	str	r3, [r7, #12]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2b03      	cmp	r3, #3
 8003f08:	ddca      	ble.n	8003ea0 <RF_SendCode+0x12>
    }
}
 8003f0a:	bf00      	nop
 8003f0c:	bf00      	nop
 8003f0e:	3710      	adds	r7, #16
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <bcd2dec>:
/* Selected I2C address (HAL 8-bit) after probe */
static uint16_t s_rtc_addr = 0;

/* ---------- helpers ---------- */
static uint8_t dec2bcd(uint8_t v) { return (uint8_t)(((v / 10) << 4) | (v % 10)); }
static uint8_t bcd2dec(uint8_t v) { return (uint8_t)(((v >> 4) * 10) + (v & 0x0F)); }
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	71fb      	strb	r3, [r7, #7]
 8003f1e:	79fb      	ldrb	r3, [r7, #7]
 8003f20:	091b      	lsrs	r3, r3, #4
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	461a      	mov	r2, r3
 8003f26:	0092      	lsls	r2, r2, #2
 8003f28:	4413      	add	r3, r2
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	b2da      	uxtb	r2, r3
 8003f2e:	79fb      	ldrb	r3, [r7, #7]
 8003f30:	f003 030f 	and.w	r3, r3, #15
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	4413      	add	r3, r2
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bc80      	pop	{r7}
 8003f42:	4770      	bx	lr

08003f44 <RTC_Init>:
    return (w == 0) ? 7 : w;          /* 7=Sunday */
}

/* ---------- probe + init ---------- */
void RTC_Init(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b086      	sub	sp, #24
 8003f48:	af04      	add	r7, sp, #16
    /* Probe 0x68 first, then 0x57 */
    if (HAL_I2C_IsDeviceReady(&hi2c2, DS3231_ADDR_68, 2, 50) == HAL_OK) {
 8003f4a:	2332      	movs	r3, #50	@ 0x32
 8003f4c:	2202      	movs	r2, #2
 8003f4e:	21d0      	movs	r1, #208	@ 0xd0
 8003f50:	4822      	ldr	r0, [pc, #136]	@ (8003fdc <RTC_Init+0x98>)
 8003f52:	f003 fec1 	bl	8007cd8 <HAL_I2C_IsDeviceReady>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d103      	bne.n	8003f64 <RTC_Init+0x20>
        s_rtc_addr = DS3231_ADDR_68;
 8003f5c:	4b20      	ldr	r3, [pc, #128]	@ (8003fe0 <RTC_Init+0x9c>)
 8003f5e:	22d0      	movs	r2, #208	@ 0xd0
 8003f60:	801a      	strh	r2, [r3, #0]
 8003f62:	e010      	b.n	8003f86 <RTC_Init+0x42>
    } else if (HAL_I2C_IsDeviceReady(&hi2c2, DS3231_ADDR_57, 2, 50) == HAL_OK) {
 8003f64:	2332      	movs	r3, #50	@ 0x32
 8003f66:	2202      	movs	r2, #2
 8003f68:	21ae      	movs	r1, #174	@ 0xae
 8003f6a:	481c      	ldr	r0, [pc, #112]	@ (8003fdc <RTC_Init+0x98>)
 8003f6c:	f003 feb4 	bl	8007cd8 <HAL_I2C_IsDeviceReady>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d103      	bne.n	8003f7e <RTC_Init+0x3a>
        s_rtc_addr = DS3231_ADDR_57;
 8003f76:	4b1a      	ldr	r3, [pc, #104]	@ (8003fe0 <RTC_Init+0x9c>)
 8003f78:	22ae      	movs	r2, #174	@ 0xae
 8003f7a:	801a      	strh	r2, [r3, #0]
 8003f7c:	e003      	b.n	8003f86 <RTC_Init+0x42>
    } else {
        s_rtc_addr = 0; /* not found */
 8003f7e:	4b18      	ldr	r3, [pc, #96]	@ (8003fe0 <RTC_Init+0x9c>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	801a      	strh	r2, [r3, #0]
 8003f84:	e027      	b.n	8003fd6 <RTC_Init+0x92>
        return;
    }

    /* Clear CH (clock halt) bit if set (seconds @ reg 0x00, bit7) */
    uint8_t sec;
    if (HAL_I2C_Mem_Read(&hi2c2, s_rtc_addr, 0x00, 1, &sec, 1, HAL_MAX_DELAY) == HAL_OK) {
 8003f86:	4b16      	ldr	r3, [pc, #88]	@ (8003fe0 <RTC_Init+0x9c>)
 8003f88:	8819      	ldrh	r1, [r3, #0]
 8003f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f8e:	9302      	str	r3, [sp, #8]
 8003f90:	2301      	movs	r3, #1
 8003f92:	9301      	str	r3, [sp, #4]
 8003f94:	1dfb      	adds	r3, r7, #7
 8003f96:	9300      	str	r3, [sp, #0]
 8003f98:	2301      	movs	r3, #1
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	480f      	ldr	r0, [pc, #60]	@ (8003fdc <RTC_Init+0x98>)
 8003f9e:	f003 fc27 	bl	80077f0 <HAL_I2C_Mem_Read>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d116      	bne.n	8003fd6 <RTC_Init+0x92>
        if (sec & 0x80u) {
 8003fa8:	79fb      	ldrb	r3, [r7, #7]
 8003faa:	b25b      	sxtb	r3, r3
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	da12      	bge.n	8003fd6 <RTC_Init+0x92>
            sec &= 0x7Fu;
 8003fb0:	79fb      	ldrb	r3, [r7, #7]
 8003fb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	71fb      	strb	r3, [r7, #7]
            (void)HAL_I2C_Mem_Write(&hi2c2, s_rtc_addr, 0x00, 1, &sec, 1, HAL_MAX_DELAY);
 8003fba:	4b09      	ldr	r3, [pc, #36]	@ (8003fe0 <RTC_Init+0x9c>)
 8003fbc:	8819      	ldrh	r1, [r3, #0]
 8003fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8003fc2:	9302      	str	r3, [sp, #8]
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	9301      	str	r3, [sp, #4]
 8003fc8:	1dfb      	adds	r3, r7, #7
 8003fca:	9300      	str	r3, [sp, #0]
 8003fcc:	2301      	movs	r3, #1
 8003fce:	2200      	movs	r2, #0
 8003fd0:	4802      	ldr	r0, [pc, #8]	@ (8003fdc <RTC_Init+0x98>)
 8003fd2:	f003 fb13 	bl	80075fc <HAL_I2C_Mem_Write>
        }
    }
}
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	2000035c 	.word	0x2000035c
 8003fe0:	20000618 	.word	0x20000618

08003fe4 <RTC_GetTimeDate>:
    RTC_SetTimeDate(sec, min, hour, dow, dom, month, year);
}

/* ---------- read time/date ---------- */
void RTC_GetTimeDate(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b088      	sub	sp, #32
 8003fe8:	af04      	add	r7, sp, #16
    if (!s_rtc_addr) return;
 8003fea:	4b4a      	ldr	r3, [pc, #296]	@ (8004114 <RTC_GetTimeDate+0x130>)
 8003fec:	881b      	ldrh	r3, [r3, #0]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	f000 8089 	beq.w	8004106 <RTC_GetTimeDate+0x122>

    uint8_t r[7];
    if (HAL_I2C_Mem_Read(&hi2c2, s_rtc_addr, 0x00, 1, r, 7, HAL_MAX_DELAY) != HAL_OK) {
 8003ff4:	4b47      	ldr	r3, [pc, #284]	@ (8004114 <RTC_GetTimeDate+0x130>)
 8003ff6:	8819      	ldrh	r1, [r3, #0]
 8003ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8003ffc:	9302      	str	r3, [sp, #8]
 8003ffe:	2307      	movs	r3, #7
 8004000:	9301      	str	r3, [sp, #4]
 8004002:	1d3b      	adds	r3, r7, #4
 8004004:	9300      	str	r3, [sp, #0]
 8004006:	2301      	movs	r3, #1
 8004008:	2200      	movs	r2, #0
 800400a:	4843      	ldr	r0, [pc, #268]	@ (8004118 <RTC_GetTimeDate+0x134>)
 800400c:	f003 fbf0 	bl	80077f0 <HAL_I2C_Mem_Read>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d179      	bne.n	800410a <RTC_GetTimeDate+0x126>
        return;
    }

    /* Seconds / Minutes */
    time.seconds = bcd2dec(r[0] & 0x7Fu);
 8004016:	793b      	ldrb	r3, [r7, #4]
 8004018:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800401c:	b2db      	uxtb	r3, r3
 800401e:	4618      	mov	r0, r3
 8004020:	f7ff ff78 	bl	8003f14 <bcd2dec>
 8004024:	4603      	mov	r3, r0
 8004026:	461a      	mov	r2, r3
 8004028:	4b3c      	ldr	r3, [pc, #240]	@ (800411c <RTC_GetTimeDate+0x138>)
 800402a:	701a      	strb	r2, [r3, #0]
    time.minutes = bcd2dec(r[1] & 0x7Fu);
 800402c:	797b      	ldrb	r3, [r7, #5]
 800402e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004032:	b2db      	uxtb	r3, r3
 8004034:	4618      	mov	r0, r3
 8004036:	f7ff ff6d 	bl	8003f14 <bcd2dec>
 800403a:	4603      	mov	r3, r0
 800403c:	461a      	mov	r2, r3
 800403e:	4b37      	ldr	r3, [pc, #220]	@ (800411c <RTC_GetTimeDate+0x138>)
 8004040:	705a      	strb	r2, [r3, #1]

    /* Hours: handle 12h or 24h formats robustly */
    if (r[2] & 0x40u) {
 8004042:	79bb      	ldrb	r3, [r7, #6]
 8004044:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004048:	2b00      	cmp	r3, #0
 800404a:	d025      	beq.n	8004098 <RTC_GetTimeDate+0xb4>
        /* 12-hour mode: bit5 = AM/PM (1=PM), bits4..0 = 1..12 */
        uint8_t hr12 = bcd2dec(r[2] & 0x1Fu);
 800404c:	79bb      	ldrb	r3, [r7, #6]
 800404e:	f003 031f 	and.w	r3, r3, #31
 8004052:	b2db      	uxtb	r3, r3
 8004054:	4618      	mov	r0, r3
 8004056:	f7ff ff5d 	bl	8003f14 <bcd2dec>
 800405a:	4603      	mov	r3, r0
 800405c:	73fb      	strb	r3, [r7, #15]
        uint8_t pm   = (r[2] & 0x20u) ? 1u : 0u;
 800405e:	79bb      	ldrb	r3, [r7, #6]
 8004060:	095b      	lsrs	r3, r3, #5
 8004062:	b2db      	uxtb	r3, r3
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	73bb      	strb	r3, [r7, #14]
        if (hr12 == 12) {
 800406a:	7bfb      	ldrb	r3, [r7, #15]
 800406c:	2b0c      	cmp	r3, #12
 800406e:	d108      	bne.n	8004082 <RTC_GetTimeDate+0x9e>
            time.hour = pm ? 12 : 0;      /* 12AM -> 0, 12PM -> 12 */
 8004070:	7bbb      	ldrb	r3, [r7, #14]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <RTC_GetTimeDate+0x96>
 8004076:	220c      	movs	r2, #12
 8004078:	e000      	b.n	800407c <RTC_GetTimeDate+0x98>
 800407a:	2200      	movs	r2, #0
 800407c:	4b27      	ldr	r3, [pc, #156]	@ (800411c <RTC_GetTimeDate+0x138>)
 800407e:	709a      	strb	r2, [r3, #2]
 8004080:	e015      	b.n	80040ae <RTC_GetTimeDate+0xca>
        } else {
            time.hour = pm ? (hr12 + 12) : hr12;
 8004082:	7bbb      	ldrb	r3, [r7, #14]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d003      	beq.n	8004090 <RTC_GetTimeDate+0xac>
 8004088:	7bfb      	ldrb	r3, [r7, #15]
 800408a:	330c      	adds	r3, #12
 800408c:	b2db      	uxtb	r3, r3
 800408e:	e000      	b.n	8004092 <RTC_GetTimeDate+0xae>
 8004090:	7bfb      	ldrb	r3, [r7, #15]
 8004092:	4a22      	ldr	r2, [pc, #136]	@ (800411c <RTC_GetTimeDate+0x138>)
 8004094:	7093      	strb	r3, [r2, #2]
 8004096:	e00a      	b.n	80040ae <RTC_GetTimeDate+0xca>
        }
    } else {
        /* 24-hour mode: bits5..0 are BCD hour */
        time.hour = bcd2dec(r[2] & 0x3Fu);
 8004098:	79bb      	ldrb	r3, [r7, #6]
 800409a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7ff ff37 	bl	8003f14 <bcd2dec>
 80040a6:	4603      	mov	r3, r0
 80040a8:	461a      	mov	r2, r3
 80040aa:	4b1c      	ldr	r3, [pc, #112]	@ (800411c <RTC_GetTimeDate+0x138>)
 80040ac:	709a      	strb	r2, [r3, #2]
    }

    /* DOW / Date / Month / Year */
    time.dayofweek  = bcd2dec(r[3] & 0x07u);              /* 1..7 */
 80040ae:	79fb      	ldrb	r3, [r7, #7]
 80040b0:	f003 0307 	and.w	r3, r3, #7
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7ff ff2c 	bl	8003f14 <bcd2dec>
 80040bc:	4603      	mov	r3, r0
 80040be:	461a      	mov	r2, r3
 80040c0:	4b16      	ldr	r3, [pc, #88]	@ (800411c <RTC_GetTimeDate+0x138>)
 80040c2:	70da      	strb	r2, [r3, #3]
    time.dayofmonth = bcd2dec(r[4] & 0x3Fu);              /* 1..31 */
 80040c4:	7a3b      	ldrb	r3, [r7, #8]
 80040c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7ff ff21 	bl	8003f14 <bcd2dec>
 80040d2:	4603      	mov	r3, r0
 80040d4:	461a      	mov	r2, r3
 80040d6:	4b11      	ldr	r3, [pc, #68]	@ (800411c <RTC_GetTimeDate+0x138>)
 80040d8:	711a      	strb	r2, [r3, #4]
    time.month      = bcd2dec(r[5] & 0x1Fu);              /* 1..12 (ignore century) */
 80040da:	7a7b      	ldrb	r3, [r7, #9]
 80040dc:	f003 031f 	and.w	r3, r3, #31
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7ff ff16 	bl	8003f14 <bcd2dec>
 80040e8:	4603      	mov	r3, r0
 80040ea:	461a      	mov	r2, r3
 80040ec:	4b0b      	ldr	r3, [pc, #44]	@ (800411c <RTC_GetTimeDate+0x138>)
 80040ee:	715a      	strb	r2, [r3, #5]
    time.year       = 2000u + bcd2dec(r[6]);              /* 2000..2099 */
 80040f0:	7abb      	ldrb	r3, [r7, #10]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7ff ff0e 	bl	8003f14 <bcd2dec>
 80040f8:	4603      	mov	r3, r0
 80040fa:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80040fe:	b29a      	uxth	r2, r3
 8004100:	4b06      	ldr	r3, [pc, #24]	@ (800411c <RTC_GetTimeDate+0x138>)
 8004102:	80da      	strh	r2, [r3, #6]
 8004104:	e002      	b.n	800410c <RTC_GetTimeDate+0x128>
    if (!s_rtc_addr) return;
 8004106:	bf00      	nop
 8004108:	e000      	b.n	800410c <RTC_GetTimeDate+0x128>
        return;
 800410a:	bf00      	nop
}
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	20000618 	.word	0x20000618
 8004118:	2000035c 	.word	0x2000035c
 800411c:	20000610 	.word	0x20000610

08004120 <lcd_line>:
static uint16_t edit_twist_on_s = 5, edit_twist_off_s = 5;
static uint16_t edit_countdown_min = 5;
static uint16_t edit_countdown_rep = 1;   // NEW

/* ===== LCD Helpers ===== */
static inline void lcd_line(uint8_t row, const char* s) {
 8004120:	b580      	push	{r7, lr}
 8004122:	b088      	sub	sp, #32
 8004124:	af00      	add	r7, sp, #0
 8004126:	4603      	mov	r3, r0
 8004128:	6039      	str	r1, [r7, #0]
 800412a:	71fb      	strb	r3, [r7, #7]
    char ln[17];
    snprintf(ln, sizeof(ln), "%-16.16s", s);
 800412c:	f107 000c 	add.w	r0, r7, #12
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	4a09      	ldr	r2, [pc, #36]	@ (8004158 <lcd_line+0x38>)
 8004134:	2111      	movs	r1, #17
 8004136:	f007 f949 	bl	800b3cc <sniprintf>
    lcd_put_cur(row, 0);
 800413a:	79fb      	ldrb	r3, [r7, #7]
 800413c:	2100      	movs	r1, #0
 800413e:	4618      	mov	r0, r3
 8004140:	f7fd feaa 	bl	8001e98 <lcd_put_cur>
    lcd_send_string(ln);
 8004144:	f107 030c 	add.w	r3, r7, #12
 8004148:	4618      	mov	r0, r3
 800414a:	f7fd fec7 	bl	8001edc <lcd_send_string>
}
 800414e:	bf00      	nop
 8004150:	3720      	adds	r7, #32
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	0800da7c 	.word	0x0800da7c

0800415c <lcd_line0>:
static inline void lcd_line0(const char* s){ lcd_line(0,s); }
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6879      	ldr	r1, [r7, #4]
 8004166:	2000      	movs	r0, #0
 8004168:	f7ff ffda 	bl	8004120 <lcd_line>
 800416c:	bf00      	nop
 800416e:	3708      	adds	r7, #8
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <lcd_line1>:
static inline void lcd_line1(const char* s){ lcd_line(1,s); }
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6879      	ldr	r1, [r7, #4]
 800417e:	2001      	movs	r0, #1
 8004180:	f7ff ffce 	bl	8004120 <lcd_line>
 8004184:	bf00      	nop
 8004186:	3708      	adds	r7, #8
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <refreshInactivityTimer>:

/* ===== Utilities ===== */
static void refreshInactivityTimer(void){ lastUserAction = HAL_GetTick(); }
 800418c:	b580      	push	{r7, lr}
 800418e:	af00      	add	r7, sp, #0
 8004190:	f001 ff12 	bl	8005fb8 <HAL_GetTick>
 8004194:	4603      	mov	r3, r0
 8004196:	4a02      	ldr	r2, [pc, #8]	@ (80041a0 <refreshInactivityTimer+0x14>)
 8004198:	6013      	str	r3, [r2, #0]
 800419a:	bf00      	nop
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	20000628 	.word	0x20000628

080041a4 <goto_menu_top>:
static void goto_menu_top(void){ menu_idx = 0; menu_view_top = 0; }
 80041a4:	b480      	push	{r7}
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	4b04      	ldr	r3, [pc, #16]	@ (80041bc <goto_menu_top+0x18>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	4b04      	ldr	r3, [pc, #16]	@ (80041c0 <goto_menu_top+0x1c>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	601a      	str	r2, [r3, #0]
 80041b4:	bf00      	nop
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bc80      	pop	{r7}
 80041ba:	4770      	bx	lr
 80041bc:	20000630 	.word	0x20000630
 80041c0:	20000634 	.word	0x20000634

080041c4 <format_menu_line>:

/* ===== Helper: format menu line ===== */
static void format_menu_line(char* buf, size_t bufsize, int idx, bool selected){
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b08c      	sub	sp, #48	@ 0x30
 80041c8:	af02      	add	r7, sp, #8
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
 80041d0:	70fb      	strb	r3, [r7, #3]
    if (idx < (int)MAIN_MENU_COUNT && idx >= 0) {
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2b06      	cmp	r3, #6
 80041d6:	dc20      	bgt.n	800421a <format_menu_line+0x56>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	db1d      	blt.n	800421a <format_menu_line+0x56>
        char prefix = selected ? '>' : ' ';
 80041de:	78fb      	ldrb	r3, [r7, #3]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <format_menu_line+0x24>
 80041e4:	233e      	movs	r3, #62	@ 0x3e
 80041e6:	e000      	b.n	80041ea <format_menu_line+0x26>
 80041e8:	2320      	movs	r3, #32
 80041ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        char item[16];
        snprintf(item, sizeof(item), "%-15.15s", main_menu[idx]);
 80041ee:	4a10      	ldr	r2, [pc, #64]	@ (8004230 <format_menu_line+0x6c>)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041f6:	f107 0014 	add.w	r0, r7, #20
 80041fa:	4a0e      	ldr	r2, [pc, #56]	@ (8004234 <format_menu_line+0x70>)
 80041fc:	2110      	movs	r1, #16
 80041fe:	f007 f8e5 	bl	800b3cc <sniprintf>
        snprintf(buf, bufsize, "%c%s", prefix, item);
 8004202:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8004206:	f107 0314 	add.w	r3, r7, #20
 800420a:	9300      	str	r3, [sp, #0]
 800420c:	4613      	mov	r3, r2
 800420e:	4a0a      	ldr	r2, [pc, #40]	@ (8004238 <format_menu_line+0x74>)
 8004210:	68b9      	ldr	r1, [r7, #8]
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f007 f8da 	bl	800b3cc <sniprintf>
    if (idx < (int)MAIN_MENU_COUNT && idx >= 0) {
 8004218:	e005      	b.n	8004226 <format_menu_line+0x62>
    } else {
        snprintf(buf, bufsize, "                ");
 800421a:	4a08      	ldr	r2, [pc, #32]	@ (800423c <format_menu_line+0x78>)
 800421c:	68b9      	ldr	r1, [r7, #8]
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f007 f8d4 	bl	800b3cc <sniprintf>
    }
}
 8004224:	bf00      	nop
 8004226:	bf00      	nop
 8004228:	3728      	adds	r7, #40	@ 0x28
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	20000030 	.word	0x20000030
 8004234:	0800da88 	.word	0x0800da88
 8004238:	0800da94 	.word	0x0800da94
 800423c:	0800da9c 	.word	0x0800da9c

08004240 <show_welcome>:

/* ===== Render functions ===== */
static void show_welcome(void){
 8004240:	b580      	push	{r7, lr}
 8004242:	af00      	add	r7, sp, #0
    lcd_clear();
 8004244:	f7fd fe1b 	bl	8001e7e <lcd_clear>
    lcd_line0("  Welcome to ");
 8004248:	4803      	ldr	r0, [pc, #12]	@ (8004258 <show_welcome+0x18>)
 800424a:	f7ff ff87 	bl	800415c <lcd_line0>
    lcd_line1("   HELONIX   ");
 800424e:	4803      	ldr	r0, [pc, #12]	@ (800425c <show_welcome+0x1c>)
 8004250:	f7ff ff90 	bl	8004174 <lcd_line1>
}
 8004254:	bf00      	nop
 8004256:	bd80      	pop	{r7, pc}
 8004258:	0800dab0 	.word	0x0800dab0
 800425c:	0800dac0 	.word	0x0800dac0

08004260 <show_dash>:

static void show_dash(void) {
 8004260:	b580      	push	{r7, lr}
 8004262:	b092      	sub	sp, #72	@ 0x48
 8004264:	af02      	add	r7, sp, #8
    char line0[17], line1[17];
    const char *motor = Motor_GetStatus() ? "ON " : "OFF";
 8004266:	f7ff fc47 	bl	8003af8 <Motor_GetStatus>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d001      	beq.n	8004274 <show_dash+0x14>
 8004270:	4b44      	ldr	r3, [pc, #272]	@ (8004384 <show_dash+0x124>)
 8004272:	e000      	b.n	8004276 <show_dash+0x16>
 8004274:	4b44      	ldr	r3, [pc, #272]	@ (8004388 <show_dash+0x128>)
 8004276:	62fb      	str	r3, [r7, #44]	@ 0x2c

    const char *mode = "IDLE";
 8004278:	4b44      	ldr	r3, [pc, #272]	@ (800438c <show_dash+0x12c>)
 800427a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (manualActive)        mode = "Manual";
 800427c:	4b44      	ldr	r3, [pc, #272]	@ (8004390 <show_dash+0x130>)
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d002      	beq.n	800428c <show_dash+0x2c>
 8004286:	4b43      	ldr	r3, [pc, #268]	@ (8004394 <show_dash+0x134>)
 8004288:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800428a:	e026      	b.n	80042da <show_dash+0x7a>
    else if (semiAutoActive) mode = "SemiAuto";
 800428c:	4b42      	ldr	r3, [pc, #264]	@ (8004398 <show_dash+0x138>)
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d002      	beq.n	800429c <show_dash+0x3c>
 8004296:	4b41      	ldr	r3, [pc, #260]	@ (800439c <show_dash+0x13c>)
 8004298:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800429a:	e01e      	b.n	80042da <show_dash+0x7a>
    else if (timerActive)    mode = "Timer";
 800429c:	4b40      	ldr	r3, [pc, #256]	@ (80043a0 <show_dash+0x140>)
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d002      	beq.n	80042ac <show_dash+0x4c>
 80042a6:	4b3f      	ldr	r3, [pc, #252]	@ (80043a4 <show_dash+0x144>)
 80042a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042aa:	e016      	b.n	80042da <show_dash+0x7a>
    else if (searchActive)   mode = "Search";
 80042ac:	4b3e      	ldr	r3, [pc, #248]	@ (80043a8 <show_dash+0x148>)
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d002      	beq.n	80042bc <show_dash+0x5c>
 80042b6:	4b3d      	ldr	r3, [pc, #244]	@ (80043ac <show_dash+0x14c>)
 80042b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042ba:	e00e      	b.n	80042da <show_dash+0x7a>
    else if (countdownActive)mode = "Cntdwn";
 80042bc:	4b3c      	ldr	r3, [pc, #240]	@ (80043b0 <show_dash+0x150>)
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d002      	beq.n	80042cc <show_dash+0x6c>
 80042c6:	4b3b      	ldr	r3, [pc, #236]	@ (80043b4 <show_dash+0x154>)
 80042c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042ca:	e006      	b.n	80042da <show_dash+0x7a>
    else if (twistActive)    mode = "Twist";
 80042cc:	4b3a      	ldr	r3, [pc, #232]	@ (80043b8 <show_dash+0x158>)
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <show_dash+0x7a>
 80042d6:	4b39      	ldr	r3, [pc, #228]	@ (80043bc <show_dash+0x15c>)
 80042d8:	63fb      	str	r3, [r7, #60]	@ 0x3c

    snprintf(line0,sizeof(line0),"M:%s %s",motor,mode);
 80042da:	f107 0018 	add.w	r0, r7, #24
 80042de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042e0:	9300      	str	r3, [sp, #0]
 80042e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042e4:	4a36      	ldr	r2, [pc, #216]	@ (80043c0 <show_dash+0x160>)
 80042e6:	2111      	movs	r1, #17
 80042e8:	f007 f870 	bl	800b3cc <sniprintf>

    int submergedCount = 0;
 80042ec:	2300      	movs	r3, #0
 80042ee:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (int i=0; i<5; i++) {
 80042f0:	2300      	movs	r3, #0
 80042f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80042f4:	e012      	b.n	800431c <show_dash+0xbc>
        if (adcData.voltages[i] < 0.1f) submergedCount++;
 80042f6:	4a33      	ldr	r2, [pc, #204]	@ (80043c4 <show_dash+0x164>)
 80042f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042fa:	3302      	adds	r3, #2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4413      	add	r3, r2
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	4931      	ldr	r1, [pc, #196]	@ (80043c8 <show_dash+0x168>)
 8004304:	4618      	mov	r0, r3
 8004306:	f7fc fe75 	bl	8000ff4 <__aeabi_fcmplt>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d002      	beq.n	8004316 <show_dash+0xb6>
 8004310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004312:	3301      	adds	r3, #1
 8004314:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (int i=0; i<5; i++) {
 8004316:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004318:	3301      	adds	r3, #1
 800431a:	637b      	str	r3, [r7, #52]	@ 0x34
 800431c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800431e:	2b04      	cmp	r3, #4
 8004320:	dde9      	ble.n	80042f6 <show_dash+0x96>
    }

    const char *level;
    switch (submergedCount) {
 8004322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004324:	2b03      	cmp	r3, #3
 8004326:	d817      	bhi.n	8004358 <show_dash+0xf8>
 8004328:	a201      	add	r2, pc, #4	@ (adr r2, 8004330 <show_dash+0xd0>)
 800432a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800432e:	bf00      	nop
 8004330:	08004341 	.word	0x08004341
 8004334:	08004347 	.word	0x08004347
 8004338:	0800434d 	.word	0x0800434d
 800433c:	08004353 	.word	0x08004353
        case 0:  level = "EMPTY"; break;
 8004340:	4b22      	ldr	r3, [pc, #136]	@ (80043cc <show_dash+0x16c>)
 8004342:	633b      	str	r3, [r7, #48]	@ 0x30
 8004344:	e00b      	b.n	800435e <show_dash+0xfe>
        case 1:  level = "LOW";   break;
 8004346:	4b22      	ldr	r3, [pc, #136]	@ (80043d0 <show_dash+0x170>)
 8004348:	633b      	str	r3, [r7, #48]	@ 0x30
 800434a:	e008      	b.n	800435e <show_dash+0xfe>
        case 2:  level = "HALF";  break;
 800434c:	4b21      	ldr	r3, [pc, #132]	@ (80043d4 <show_dash+0x174>)
 800434e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004350:	e005      	b.n	800435e <show_dash+0xfe>
        case 3:  level = "3/4";   break;
 8004352:	4b21      	ldr	r3, [pc, #132]	@ (80043d8 <show_dash+0x178>)
 8004354:	633b      	str	r3, [r7, #48]	@ 0x30
 8004356:	e002      	b.n	800435e <show_dash+0xfe>
        default: level = "FULL";  break;
 8004358:	4b20      	ldr	r3, [pc, #128]	@ (80043dc <show_dash+0x17c>)
 800435a:	633b      	str	r3, [r7, #48]	@ 0x30
 800435c:	bf00      	nop
    }

    snprintf(line1,sizeof(line1),"Water:%-5s",level);
 800435e:	1d38      	adds	r0, r7, #4
 8004360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004362:	4a1f      	ldr	r2, [pc, #124]	@ (80043e0 <show_dash+0x180>)
 8004364:	2111      	movs	r1, #17
 8004366:	f007 f831 	bl	800b3cc <sniprintf>

    lcd_line0(line0);
 800436a:	f107 0318 	add.w	r3, r7, #24
 800436e:	4618      	mov	r0, r3
 8004370:	f7ff fef4 	bl	800415c <lcd_line0>
    lcd_line1(line1);
 8004374:	1d3b      	adds	r3, r7, #4
 8004376:	4618      	mov	r0, r3
 8004378:	f7ff fefc 	bl	8004174 <lcd_line1>
}
 800437c:	bf00      	nop
 800437e:	3740      	adds	r7, #64	@ 0x40
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	0800dad0 	.word	0x0800dad0
 8004388:	0800dad4 	.word	0x0800dad4
 800438c:	0800dad8 	.word	0x0800dad8
 8004390:	2000057d 	.word	0x2000057d
 8004394:	0800dae0 	.word	0x0800dae0
 8004398:	20000582 	.word	0x20000582
 800439c:	0800dae8 	.word	0x0800dae8
 80043a0:	20000581 	.word	0x20000581
 80043a4:	0800daf4 	.word	0x0800daf4
 80043a8:	20000580 	.word	0x20000580
 80043ac:	0800dafc 	.word	0x0800dafc
 80043b0:	2000057e 	.word	0x2000057e
 80043b4:	0800db04 	.word	0x0800db04
 80043b8:	2000057f 	.word	0x2000057f
 80043bc:	0800db0c 	.word	0x0800db0c
 80043c0:	0800db14 	.word	0x0800db14
 80043c4:	200004ac 	.word	0x200004ac
 80043c8:	3dcccccd 	.word	0x3dcccccd
 80043cc:	0800db1c 	.word	0x0800db1c
 80043d0:	0800db24 	.word	0x0800db24
 80043d4:	0800db28 	.word	0x0800db28
 80043d8:	0800db30 	.word	0x0800db30
 80043dc:	0800db34 	.word	0x0800db34
 80043e0:	0800db3c 	.word	0x0800db3c

080043e4 <show_menu>:

static void show_menu(void){
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b08a      	sub	sp, #40	@ 0x28
 80043e8:	af00      	add	r7, sp, #0
    char line0[17], line1[17];
    if (menu_idx < menu_view_top) menu_view_top = menu_idx;
 80043ea:	4b2a      	ldr	r3, [pc, #168]	@ (8004494 <show_menu+0xb0>)
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	4b2a      	ldr	r3, [pc, #168]	@ (8004498 <show_menu+0xb4>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	da04      	bge.n	8004400 <show_menu+0x1c>
 80043f6:	4b27      	ldr	r3, [pc, #156]	@ (8004494 <show_menu+0xb0>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a27      	ldr	r2, [pc, #156]	@ (8004498 <show_menu+0xb4>)
 80043fc:	6013      	str	r3, [r2, #0]
 80043fe:	e00b      	b.n	8004418 <show_menu+0x34>
    else if (menu_idx > menu_view_top+1) menu_view_top = menu_idx-1;
 8004400:	4b25      	ldr	r3, [pc, #148]	@ (8004498 <show_menu+0xb4>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	1c5a      	adds	r2, r3, #1
 8004406:	4b23      	ldr	r3, [pc, #140]	@ (8004494 <show_menu+0xb0>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	429a      	cmp	r2, r3
 800440c:	da04      	bge.n	8004418 <show_menu+0x34>
 800440e:	4b21      	ldr	r3, [pc, #132]	@ (8004494 <show_menu+0xb0>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	3b01      	subs	r3, #1
 8004414:	4a20      	ldr	r2, [pc, #128]	@ (8004498 <show_menu+0xb4>)
 8004416:	6013      	str	r3, [r2, #0]
    format_menu_line(line0,sizeof(line0),menu_view_top,menu_idx==menu_view_top && cursorVisible);
 8004418:	4b1f      	ldr	r3, [pc, #124]	@ (8004498 <show_menu+0xb4>)
 800441a:	6819      	ldr	r1, [r3, #0]
 800441c:	4b1d      	ldr	r3, [pc, #116]	@ (8004494 <show_menu+0xb0>)
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	4b1d      	ldr	r3, [pc, #116]	@ (8004498 <show_menu+0xb4>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	429a      	cmp	r2, r3
 8004426:	d105      	bne.n	8004434 <show_menu+0x50>
 8004428:	4b1c      	ldr	r3, [pc, #112]	@ (800449c <show_menu+0xb8>)
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d001      	beq.n	8004434 <show_menu+0x50>
 8004430:	2301      	movs	r3, #1
 8004432:	e000      	b.n	8004436 <show_menu+0x52>
 8004434:	2300      	movs	r3, #0
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	b2db      	uxtb	r3, r3
 800443c:	f107 0014 	add.w	r0, r7, #20
 8004440:	460a      	mov	r2, r1
 8004442:	2111      	movs	r1, #17
 8004444:	f7ff febe 	bl	80041c4 <format_menu_line>
    format_menu_line(line1,sizeof(line1),menu_view_top+1,menu_idx==(menu_view_top+1) && cursorVisible);
 8004448:	4b13      	ldr	r3, [pc, #76]	@ (8004498 <show_menu+0xb4>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	1c59      	adds	r1, r3, #1
 800444e:	4b12      	ldr	r3, [pc, #72]	@ (8004498 <show_menu+0xb4>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	1c5a      	adds	r2, r3, #1
 8004454:	4b0f      	ldr	r3, [pc, #60]	@ (8004494 <show_menu+0xb0>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	429a      	cmp	r2, r3
 800445a:	d105      	bne.n	8004468 <show_menu+0x84>
 800445c:	4b0f      	ldr	r3, [pc, #60]	@ (800449c <show_menu+0xb8>)
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <show_menu+0x84>
 8004464:	2301      	movs	r3, #1
 8004466:	e000      	b.n	800446a <show_menu+0x86>
 8004468:	2300      	movs	r3, #0
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	b2db      	uxtb	r3, r3
 8004470:	4638      	mov	r0, r7
 8004472:	460a      	mov	r2, r1
 8004474:	2111      	movs	r1, #17
 8004476:	f7ff fea5 	bl	80041c4 <format_menu_line>
    lcd_line0(line0);
 800447a:	f107 0314 	add.w	r3, r7, #20
 800447e:	4618      	mov	r0, r3
 8004480:	f7ff fe6c 	bl	800415c <lcd_line0>
    lcd_line1(line1);
 8004484:	463b      	mov	r3, r7
 8004486:	4618      	mov	r0, r3
 8004488:	f7ff fe74 	bl	8004174 <lcd_line1>
}
 800448c:	bf00      	nop
 800448e:	3728      	adds	r7, #40	@ 0x28
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	20000630 	.word	0x20000630
 8004498:	20000634 	.word	0x20000634
 800449c:	2000002f 	.word	0x2000002f

080044a0 <show_manual>:

static void show_manual(void){
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b08a      	sub	sp, #40	@ 0x28
 80044a4:	af00      	add	r7, sp, #0
    char line0[17], line1[17];
    snprintf(line0,sizeof(line0),"Manual Mode");
 80044a6:	f107 0314 	add.w	r3, r7, #20
 80044aa:	4a12      	ldr	r2, [pc, #72]	@ (80044f4 <show_manual+0x54>)
 80044ac:	2111      	movs	r1, #17
 80044ae:	4618      	mov	r0, r3
 80044b0:	f006 ff8c 	bl	800b3cc <sniprintf>
    if (Motor_GetStatus()) snprintf(line1,sizeof(line1),">Stop     Back");
 80044b4:	f7ff fb20 	bl	8003af8 <Motor_GetStatus>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d006      	beq.n	80044cc <show_manual+0x2c>
 80044be:	463b      	mov	r3, r7
 80044c0:	4a0d      	ldr	r2, [pc, #52]	@ (80044f8 <show_manual+0x58>)
 80044c2:	2111      	movs	r1, #17
 80044c4:	4618      	mov	r0, r3
 80044c6:	f006 ff81 	bl	800b3cc <sniprintf>
 80044ca:	e005      	b.n	80044d8 <show_manual+0x38>
    else snprintf(line1,sizeof(line1),">Start    Back");
 80044cc:	463b      	mov	r3, r7
 80044ce:	4a0b      	ldr	r2, [pc, #44]	@ (80044fc <show_manual+0x5c>)
 80044d0:	2111      	movs	r1, #17
 80044d2:	4618      	mov	r0, r3
 80044d4:	f006 ff7a 	bl	800b3cc <sniprintf>
    lcd_line0(line0);
 80044d8:	f107 0314 	add.w	r3, r7, #20
 80044dc:	4618      	mov	r0, r3
 80044de:	f7ff fe3d 	bl	800415c <lcd_line0>
    lcd_line1(line1);
 80044e2:	463b      	mov	r3, r7
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7ff fe45 	bl	8004174 <lcd_line1>
}
 80044ea:	bf00      	nop
 80044ec:	3728      	adds	r7, #40	@ 0x28
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	0800da20 	.word	0x0800da20
 80044f8:	0800db48 	.word	0x0800db48
 80044fc:	0800db58 	.word	0x0800db58

08004500 <show_semi_auto>:

static void show_semi_auto(void){
 8004500:	b580      	push	{r7, lr}
 8004502:	b08a      	sub	sp, #40	@ 0x28
 8004504:	af00      	add	r7, sp, #0
    char line0[17], line1[17];
    snprintf(line0,sizeof(line0),"Semi-Auto Mode");
 8004506:	f107 0314 	add.w	r3, r7, #20
 800450a:	4a11      	ldr	r2, [pc, #68]	@ (8004550 <show_semi_auto+0x50>)
 800450c:	2111      	movs	r1, #17
 800450e:	4618      	mov	r0, r3
 8004510:	f006 ff5c 	bl	800b3cc <sniprintf>
    if (semiAutoEnabled) snprintf(line1,sizeof(line1),">Disable  Back");
 8004514:	4b0f      	ldr	r3, [pc, #60]	@ (8004554 <show_semi_auto+0x54>)
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d006      	beq.n	800452a <show_semi_auto+0x2a>
 800451c:	463b      	mov	r3, r7
 800451e:	4a0e      	ldr	r2, [pc, #56]	@ (8004558 <show_semi_auto+0x58>)
 8004520:	2111      	movs	r1, #17
 8004522:	4618      	mov	r0, r3
 8004524:	f006 ff52 	bl	800b3cc <sniprintf>
 8004528:	e005      	b.n	8004536 <show_semi_auto+0x36>
    else snprintf(line1,sizeof(line1),">Enable   Back");
 800452a:	463b      	mov	r3, r7
 800452c:	4a0b      	ldr	r2, [pc, #44]	@ (800455c <show_semi_auto+0x5c>)
 800452e:	2111      	movs	r1, #17
 8004530:	4618      	mov	r0, r3
 8004532:	f006 ff4b 	bl	800b3cc <sniprintf>
    lcd_line0(line0);
 8004536:	f107 0314 	add.w	r3, r7, #20
 800453a:	4618      	mov	r0, r3
 800453c:	f7ff fe0e 	bl	800415c <lcd_line0>
    lcd_line1(line1);
 8004540:	463b      	mov	r3, r7
 8004542:	4618      	mov	r0, r3
 8004544:	f7ff fe16 	bl	8004174 <lcd_line1>
}
 8004548:	bf00      	nop
 800454a:	3728      	adds	r7, #40	@ 0x28
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	0800da2c 	.word	0x0800da2c
 8004554:	2000062c 	.word	0x2000062c
 8004558:	0800db68 	.word	0x0800db68
 800455c:	0800db78 	.word	0x0800db78

08004560 <show_timer>:

static void show_timer(void){
 8004560:	b580      	push	{r7, lr}
 8004562:	b08c      	sub	sp, #48	@ 0x30
 8004564:	af02      	add	r7, sp, #8
    char l0[17], l1[17];
    snprintf(l0,sizeof(l0),"T1 ON %02d:%02d",edit_timer_on_h,edit_timer_on_m);
 8004566:	4b13      	ldr	r3, [pc, #76]	@ (80045b4 <show_timer+0x54>)
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	461a      	mov	r2, r3
 800456c:	4b12      	ldr	r3, [pc, #72]	@ (80045b8 <show_timer+0x58>)
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	f107 0014 	add.w	r0, r7, #20
 8004574:	9300      	str	r3, [sp, #0]
 8004576:	4613      	mov	r3, r2
 8004578:	4a10      	ldr	r2, [pc, #64]	@ (80045bc <show_timer+0x5c>)
 800457a:	2111      	movs	r1, #17
 800457c:	f006 ff26 	bl	800b3cc <sniprintf>
    snprintf(l1,sizeof(l1),"T1 OFF %02d:%02d",edit_timer_off_h,edit_timer_off_m);
 8004580:	4b0f      	ldr	r3, [pc, #60]	@ (80045c0 <show_timer+0x60>)
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	461a      	mov	r2, r3
 8004586:	4b0f      	ldr	r3, [pc, #60]	@ (80045c4 <show_timer+0x64>)
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	4638      	mov	r0, r7
 800458c:	9300      	str	r3, [sp, #0]
 800458e:	4613      	mov	r3, r2
 8004590:	4a0d      	ldr	r2, [pc, #52]	@ (80045c8 <show_timer+0x68>)
 8004592:	2111      	movs	r1, #17
 8004594:	f006 ff1a 	bl	800b3cc <sniprintf>
    lcd_line0(l0);
 8004598:	f107 0314 	add.w	r3, r7, #20
 800459c:	4618      	mov	r0, r3
 800459e:	f7ff fddd 	bl	800415c <lcd_line0>
    lcd_line1(l1);
 80045a2:	463b      	mov	r3, r7
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7ff fde5 	bl	8004174 <lcd_line1>
}
 80045aa:	bf00      	nop
 80045ac:	3728      	adds	r7, #40	@ 0x28
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	2000004c 	.word	0x2000004c
 80045b8:	2000004d 	.word	0x2000004d
 80045bc:	0800db88 	.word	0x0800db88
 80045c0:	2000004e 	.word	0x2000004e
 80045c4:	2000004f 	.word	0x2000004f
 80045c8:	0800db98 	.word	0x0800db98

080045cc <show_search>:

static void show_search(void){
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b08c      	sub	sp, #48	@ 0x30
 80045d0:	af02      	add	r7, sp, #8
    char l0[17], l1[17];
    snprintf(l0,sizeof(l0),"Sr %s G%us P%us",
             searchSettings.searchActive ? "ON " : "OFF",
 80045d2:	4b16      	ldr	r3, [pc, #88]	@ (800462c <show_search+0x60>)
 80045d4:	781b      	ldrb	r3, [r3, #0]
    snprintf(l0,sizeof(l0),"Sr %s G%us P%us",
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <show_search+0x12>
 80045da:	4b15      	ldr	r3, [pc, #84]	@ (8004630 <show_search+0x64>)
 80045dc:	e000      	b.n	80045e0 <show_search+0x14>
 80045de:	4b15      	ldr	r3, [pc, #84]	@ (8004634 <show_search+0x68>)
             (unsigned)searchSettings.testingGapSeconds,
 80045e0:	4a12      	ldr	r2, [pc, #72]	@ (800462c <show_search+0x60>)
 80045e2:	8852      	ldrh	r2, [r2, #2]
    snprintf(l0,sizeof(l0),"Sr %s G%us P%us",
 80045e4:	4611      	mov	r1, r2
             (unsigned)searchSettings.dryRunTimeSeconds);
 80045e6:	4a11      	ldr	r2, [pc, #68]	@ (800462c <show_search+0x60>)
 80045e8:	8892      	ldrh	r2, [r2, #4]
    snprintf(l0,sizeof(l0),"Sr %s G%us P%us",
 80045ea:	f107 0014 	add.w	r0, r7, #20
 80045ee:	9201      	str	r2, [sp, #4]
 80045f0:	9100      	str	r1, [sp, #0]
 80045f2:	4a11      	ldr	r2, [pc, #68]	@ (8004638 <show_search+0x6c>)
 80045f4:	2111      	movs	r1, #17
 80045f6:	f006 fee9 	bl	800b3cc <sniprintf>
    snprintf(l1,sizeof(l1),">%s   Edit",
             searchSettings.searchActive ? "Stop" : "Enable");
 80045fa:	4b0c      	ldr	r3, [pc, #48]	@ (800462c <show_search+0x60>)
 80045fc:	781b      	ldrb	r3, [r3, #0]
    snprintf(l1,sizeof(l1),">%s   Edit",
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d001      	beq.n	8004606 <show_search+0x3a>
 8004602:	4b0e      	ldr	r3, [pc, #56]	@ (800463c <show_search+0x70>)
 8004604:	e000      	b.n	8004608 <show_search+0x3c>
 8004606:	4b0e      	ldr	r3, [pc, #56]	@ (8004640 <show_search+0x74>)
 8004608:	4638      	mov	r0, r7
 800460a:	4a0e      	ldr	r2, [pc, #56]	@ (8004644 <show_search+0x78>)
 800460c:	2111      	movs	r1, #17
 800460e:	f006 fedd 	bl	800b3cc <sniprintf>
    lcd_line0(l0);
 8004612:	f107 0314 	add.w	r3, r7, #20
 8004616:	4618      	mov	r0, r3
 8004618:	f7ff fda0 	bl	800415c <lcd_line0>
    lcd_line1(l1);
 800461c:	463b      	mov	r3, r7
 800461e:	4618      	mov	r0, r3
 8004620:	f7ff fda8 	bl	8004174 <lcd_line1>
}
 8004624:	bf00      	nop
 8004626:	3728      	adds	r7, #40	@ 0x28
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	20000020 	.word	0x20000020
 8004630:	0800dad0 	.word	0x0800dad0
 8004634:	0800dad4 	.word	0x0800dad4
 8004638:	0800dbac 	.word	0x0800dbac
 800463c:	0800dbbc 	.word	0x0800dbbc
 8004640:	0800dbc4 	.word	0x0800dbc4
 8004644:	0800dbcc 	.word	0x0800dbcc

08004648 <show_countdown>:

static void show_countdown(void){
 8004648:	b580      	push	{r7, lr}
 800464a:	b090      	sub	sp, #64	@ 0x40
 800464c:	af02      	add	r7, sp, #8
    char l0[17], l1[17];
    extern volatile uint16_t countdownRemainingRuns;
    if (countdownActive) {
 800464e:	4b24      	ldr	r3, [pc, #144]	@ (80046e0 <show_countdown+0x98>)
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	b2db      	uxtb	r3, r3
 8004654:	2b00      	cmp	r3, #0
 8004656:	d029      	beq.n	80046ac <show_countdown+0x64>
        uint32_t sec = countdownDuration;
 8004658:	4b22      	ldr	r3, [pc, #136]	@ (80046e4 <show_countdown+0x9c>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	637b      	str	r3, [r7, #52]	@ 0x34
        uint32_t min = sec/60;
 800465e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004660:	4a21      	ldr	r2, [pc, #132]	@ (80046e8 <show_countdown+0xa0>)
 8004662:	fba2 2303 	umull	r2, r3, r2, r3
 8004666:	095b      	lsrs	r3, r3, #5
 8004668:	633b      	str	r3, [r7, #48]	@ 0x30
        uint32_t s   = sec%60;
 800466a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800466c:	4b1e      	ldr	r3, [pc, #120]	@ (80046e8 <show_countdown+0xa0>)
 800466e:	fba3 1302 	umull	r1, r3, r3, r2
 8004672:	0959      	lsrs	r1, r3, #5
 8004674:	460b      	mov	r3, r1
 8004676:	011b      	lsls	r3, r3, #4
 8004678:	1a5b      	subs	r3, r3, r1
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        snprintf(l0,sizeof(l0),"Run %02u %02d:%02d",
 8004680:	4b1a      	ldr	r3, [pc, #104]	@ (80046ec <show_countdown+0xa4>)
 8004682:	881b      	ldrh	r3, [r3, #0]
 8004684:	b29b      	uxth	r3, r3
 8004686:	4619      	mov	r1, r3
 8004688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800468a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800468c:	f107 0018 	add.w	r0, r7, #24
 8004690:	9201      	str	r2, [sp, #4]
 8004692:	9300      	str	r3, [sp, #0]
 8004694:	460b      	mov	r3, r1
 8004696:	4a16      	ldr	r2, [pc, #88]	@ (80046f0 <show_countdown+0xa8>)
 8004698:	2111      	movs	r1, #17
 800469a:	f006 fe97 	bl	800b3cc <sniprintf>
                 (unsigned)countdownRemainingRuns,(int)min,(int)s);
        snprintf(l1,sizeof(l1),">Stop     Back");
 800469e:	1d3b      	adds	r3, r7, #4
 80046a0:	4a14      	ldr	r2, [pc, #80]	@ (80046f4 <show_countdown+0xac>)
 80046a2:	2111      	movs	r1, #17
 80046a4:	4618      	mov	r0, r3
 80046a6:	f006 fe91 	bl	800b3cc <sniprintf>
 80046aa:	e00c      	b.n	80046c6 <show_countdown+0x7e>
    } else {
        snprintf(l0,sizeof(l0),"Countdown Inact");
 80046ac:	f107 0318 	add.w	r3, r7, #24
 80046b0:	4a11      	ldr	r2, [pc, #68]	@ (80046f8 <show_countdown+0xb0>)
 80046b2:	2111      	movs	r1, #17
 80046b4:	4618      	mov	r0, r3
 80046b6:	f006 fe89 	bl	800b3cc <sniprintf>
        snprintf(l1,sizeof(l1),">Set Start Back");
 80046ba:	1d3b      	adds	r3, r7, #4
 80046bc:	4a0f      	ldr	r2, [pc, #60]	@ (80046fc <show_countdown+0xb4>)
 80046be:	2111      	movs	r1, #17
 80046c0:	4618      	mov	r0, r3
 80046c2:	f006 fe83 	bl	800b3cc <sniprintf>
    }
    lcd_line0(l0);
 80046c6:	f107 0318 	add.w	r3, r7, #24
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7ff fd46 	bl	800415c <lcd_line0>
    lcd_line1(l1);
 80046d0:	1d3b      	adds	r3, r7, #4
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7ff fd4e 	bl	8004174 <lcd_line1>
}
 80046d8:	bf00      	nop
 80046da:	3738      	adds	r7, #56	@ 0x38
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	2000057e 	.word	0x2000057e
 80046e4:	20000598 	.word	0x20000598
 80046e8:	88888889 	.word	0x88888889
 80046ec:	200005e0 	.word	0x200005e0
 80046f0:	0800dbd8 	.word	0x0800dbd8
 80046f4:	0800db48 	.word	0x0800db48
 80046f8:	0800dbec 	.word	0x0800dbec
 80046fc:	0800dbfc 	.word	0x0800dbfc

08004700 <show_twist>:


static void show_twist(void){
 8004700:	b580      	push	{r7, lr}
 8004702:	b08e      	sub	sp, #56	@ 0x38
 8004704:	af02      	add	r7, sp, #8
    char l0[17], l1[17];

    const char* status = twistSettings.twistActive ? "ON " : "OFF";
 8004706:	4b17      	ldr	r3, [pc, #92]	@ (8004764 <show_twist+0x64>)
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d001      	beq.n	8004712 <show_twist+0x12>
 800470e:	4b16      	ldr	r3, [pc, #88]	@ (8004768 <show_twist+0x68>)
 8004710:	e000      	b.n	8004714 <show_twist+0x14>
 8004712:	4b16      	ldr	r3, [pc, #88]	@ (800476c <show_twist+0x6c>)
 8004714:	62fb      	str	r3, [r7, #44]	@ 0x2c
    snprintf(l0,sizeof(l0),"Tw %s %2ds/%2ds", status,
             (int)twistSettings.onDurationSeconds,
 8004716:	4b13      	ldr	r3, [pc, #76]	@ (8004764 <show_twist+0x64>)
 8004718:	885b      	ldrh	r3, [r3, #2]
    snprintf(l0,sizeof(l0),"Tw %s %2ds/%2ds", status,
 800471a:	461a      	mov	r2, r3
             (int)twistSettings.offDurationSeconds);
 800471c:	4b11      	ldr	r3, [pc, #68]	@ (8004764 <show_twist+0x64>)
 800471e:	889b      	ldrh	r3, [r3, #4]
    snprintf(l0,sizeof(l0),"Tw %s %2ds/%2ds", status,
 8004720:	f107 0018 	add.w	r0, r7, #24
 8004724:	9301      	str	r3, [sp, #4]
 8004726:	9200      	str	r2, [sp, #0]
 8004728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800472a:	4a11      	ldr	r2, [pc, #68]	@ (8004770 <show_twist+0x70>)
 800472c:	2111      	movs	r1, #17
 800472e:	f006 fe4d 	bl	800b3cc <sniprintf>

    // primary action on SELECT is Enable/Stop; UP/DOWN goes to edit
    snprintf(l1,sizeof(l1),">%s   Edit",
             twistSettings.twistActive ? "Stop" : "Enable");
 8004732:	4b0c      	ldr	r3, [pc, #48]	@ (8004764 <show_twist+0x64>)
 8004734:	781b      	ldrb	r3, [r3, #0]
    snprintf(l1,sizeof(l1),">%s   Edit",
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <show_twist+0x3e>
 800473a:	4b0e      	ldr	r3, [pc, #56]	@ (8004774 <show_twist+0x74>)
 800473c:	e000      	b.n	8004740 <show_twist+0x40>
 800473e:	4b0e      	ldr	r3, [pc, #56]	@ (8004778 <show_twist+0x78>)
 8004740:	1d38      	adds	r0, r7, #4
 8004742:	4a0e      	ldr	r2, [pc, #56]	@ (800477c <show_twist+0x7c>)
 8004744:	2111      	movs	r1, #17
 8004746:	f006 fe41 	bl	800b3cc <sniprintf>

    lcd_line0(l0);
 800474a:	f107 0318 	add.w	r3, r7, #24
 800474e:	4618      	mov	r0, r3
 8004750:	f7ff fd04 	bl	800415c <lcd_line0>
    lcd_line1(l1);
 8004754:	1d3b      	adds	r3, r7, #4
 8004756:	4618      	mov	r0, r3
 8004758:	f7ff fd0c 	bl	8004174 <lcd_line1>
}
 800475c:	bf00      	nop
 800475e:	3730      	adds	r7, #48	@ 0x30
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	20000028 	.word	0x20000028
 8004768:	0800dad0 	.word	0x0800dad0
 800476c:	0800dad4 	.word	0x0800dad4
 8004770:	0800dc0c 	.word	0x0800dc0c
 8004774:	0800dbbc 	.word	0x0800dbbc
 8004778:	0800dbc4 	.word	0x0800dbc4
 800477c:	0800dbcc 	.word	0x0800dbcc

08004780 <apply_search_settings>:


/* ===== Apply functions ===== */
static void apply_search_settings(void){
 8004780:	b480      	push	{r7}
 8004782:	af00      	add	r7, sp, #0
    searchSettings.testingGapSeconds = edit_search_gap_s;
 8004784:	4b05      	ldr	r3, [pc, #20]	@ (800479c <apply_search_settings+0x1c>)
 8004786:	881a      	ldrh	r2, [r3, #0]
 8004788:	4b05      	ldr	r3, [pc, #20]	@ (80047a0 <apply_search_settings+0x20>)
 800478a:	805a      	strh	r2, [r3, #2]
    searchSettings.dryRunTimeSeconds = edit_search_dry_s;
 800478c:	4b05      	ldr	r3, [pc, #20]	@ (80047a4 <apply_search_settings+0x24>)
 800478e:	881a      	ldrh	r2, [r3, #0]
 8004790:	4b03      	ldr	r3, [pc, #12]	@ (80047a0 <apply_search_settings+0x20>)
 8004792:	809a      	strh	r2, [r3, #4]
}
 8004794:	bf00      	nop
 8004796:	46bd      	mov	sp, r7
 8004798:	bc80      	pop	{r7}
 800479a:	4770      	bx	lr
 800479c:	20000050 	.word	0x20000050
 80047a0:	20000020 	.word	0x20000020
 80047a4:	20000052 	.word	0x20000052

080047a8 <apply_twist_settings>:

static void apply_twist_settings(void){
 80047a8:	b480      	push	{r7}
 80047aa:	af00      	add	r7, sp, #0
    twistSettings.onDurationSeconds = edit_twist_on_s;
 80047ac:	4b05      	ldr	r3, [pc, #20]	@ (80047c4 <apply_twist_settings+0x1c>)
 80047ae:	881a      	ldrh	r2, [r3, #0]
 80047b0:	4b05      	ldr	r3, [pc, #20]	@ (80047c8 <apply_twist_settings+0x20>)
 80047b2:	805a      	strh	r2, [r3, #2]
    twistSettings.offDurationSeconds = edit_twist_off_s;
 80047b4:	4b05      	ldr	r3, [pc, #20]	@ (80047cc <apply_twist_settings+0x24>)
 80047b6:	881a      	ldrh	r2, [r3, #0]
 80047b8:	4b03      	ldr	r3, [pc, #12]	@ (80047c8 <apply_twist_settings+0x20>)
 80047ba:	809a      	strh	r2, [r3, #4]
}
 80047bc:	bf00      	nop
 80047be:	46bd      	mov	sp, r7
 80047c0:	bc80      	pop	{r7}
 80047c2:	4770      	bx	lr
 80047c4:	20000054 	.word	0x20000054
 80047c8:	20000028 	.word	0x20000028
 80047cc:	20000056 	.word	0x20000056

080047d0 <apply_countdown_settings>:

static void apply_countdown_settings(void){
 80047d0:	b480      	push	{r7}
 80047d2:	af00      	add	r7, sp, #0
    // kept for compatibility if other code depends on countdownDuration mirror
    countdownDuration = (uint32_t)edit_countdown_min * 60u;
 80047d4:	4b06      	ldr	r3, [pc, #24]	@ (80047f0 <apply_countdown_settings+0x20>)
 80047d6:	881b      	ldrh	r3, [r3, #0]
 80047d8:	461a      	mov	r2, r3
 80047da:	4613      	mov	r3, r2
 80047dc:	011b      	lsls	r3, r3, #4
 80047de:	1a9b      	subs	r3, r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	461a      	mov	r2, r3
 80047e4:	4b03      	ldr	r3, [pc, #12]	@ (80047f4 <apply_countdown_settings+0x24>)
 80047e6:	601a      	str	r2, [r3, #0]
}
 80047e8:	bf00      	nop
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bc80      	pop	{r7}
 80047ee:	4770      	bx	lr
 80047f0:	20000058 	.word	0x20000058
 80047f4:	20000598 	.word	0x20000598

080047f8 <enable_semi_auto>:

static void enable_semi_auto(void){
 80047f8:	b580      	push	{r7, lr}
 80047fa:	af00      	add	r7, sp, #0
    ModelHandle_ClearManualOverride();
 80047fc:	f7ff f970 	bl	8003ae0 <ModelHandle_ClearManualOverride>
    ModelHandle_StartSemiAuto();
 8004800:	f7fe fff8 	bl	80037f4 <ModelHandle_StartSemiAuto>
    semiAutoEnabled = true;
 8004804:	4b02      	ldr	r3, [pc, #8]	@ (8004810 <enable_semi_auto+0x18>)
 8004806:	2201      	movs	r2, #1
 8004808:	701a      	strb	r2, [r3, #0]
}
 800480a:	bf00      	nop
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	2000062c 	.word	0x2000062c

08004814 <disable_semi_auto>:
static void disable_semi_auto(void){
 8004814:	b580      	push	{r7, lr}
 8004816:	af00      	add	r7, sp, #0
    ModelHandle_SetMotor(false);
 8004818:	2000      	movs	r0, #0
 800481a:	f7ff f949 	bl	8003ab0 <ModelHandle_SetMotor>
    semiAutoEnabled = false;
 800481e:	4b02      	ldr	r3, [pc, #8]	@ (8004828 <disable_semi_auto+0x14>)
 8004820:	2200      	movs	r2, #0
 8004822:	701a      	strb	r2, [r3, #0]
}
 8004824:	bf00      	nop
 8004826:	bd80      	pop	{r7, pc}
 8004828:	2000062c 	.word	0x2000062c

0800482c <apply_timer_settings>:

static void apply_timer_settings(void){
 800482c:	b580      	push	{r7, lr}
 800482e:	af00      	add	r7, sp, #0
    timerSlots[0].active = true;
 8004830:	4b0d      	ldr	r3, [pc, #52]	@ (8004868 <apply_timer_settings+0x3c>)
 8004832:	2201      	movs	r2, #1
 8004834:	701a      	strb	r2, [r3, #0]
    timerSlots[0].onTimeSeconds  = ModelHandle_TimeToSeconds(edit_timer_on_h, edit_timer_on_m);
 8004836:	4b0d      	ldr	r3, [pc, #52]	@ (800486c <apply_timer_settings+0x40>)
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	4a0d      	ldr	r2, [pc, #52]	@ (8004870 <apply_timer_settings+0x44>)
 800483c:	7812      	ldrb	r2, [r2, #0]
 800483e:	4611      	mov	r1, r2
 8004840:	4618      	mov	r0, r3
 8004842:	f7fe fa75 	bl	8002d30 <ModelHandle_TimeToSeconds>
 8004846:	4603      	mov	r3, r0
 8004848:	4a07      	ldr	r2, [pc, #28]	@ (8004868 <apply_timer_settings+0x3c>)
 800484a:	6053      	str	r3, [r2, #4]
    timerSlots[0].offTimeSeconds = ModelHandle_TimeToSeconds(edit_timer_off_h, edit_timer_off_m);
 800484c:	4b09      	ldr	r3, [pc, #36]	@ (8004874 <apply_timer_settings+0x48>)
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	4a09      	ldr	r2, [pc, #36]	@ (8004878 <apply_timer_settings+0x4c>)
 8004852:	7812      	ldrb	r2, [r2, #0]
 8004854:	4611      	mov	r1, r2
 8004856:	4618      	mov	r0, r3
 8004858:	f7fe fa6a 	bl	8002d30 <ModelHandle_TimeToSeconds>
 800485c:	4603      	mov	r3, r0
 800485e:	4a02      	ldr	r2, [pc, #8]	@ (8004868 <apply_timer_settings+0x3c>)
 8004860:	6093      	str	r3, [r2, #8]
}
 8004862:	bf00      	nop
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	200005a4 	.word	0x200005a4
 800486c:	2000004c 	.word	0x2000004c
 8004870:	2000004d 	.word	0x2000004d
 8004874:	2000004e 	.word	0x2000004e
 8004878:	2000004f 	.word	0x2000004f

0800487c <Screen_Update>:

/* ===== Core Update Loop ===== */
void Screen_Update(void){
 800487c:	b580      	push	{r7, lr}
 800487e:	b0f0      	sub	sp, #448	@ 0x1c0
 8004880:	af00      	add	r7, sp, #0
    uint32_t now = HAL_GetTick();
 8004882:	f001 fb99 	bl	8005fb8 <HAL_GetTick>
 8004886:	f8c7 01b8 	str.w	r0, [r7, #440]	@ 0x1b8

    bool cursorBlinkActive = false;
 800488a:	2300      	movs	r3, #0
 800488c:	f887 31bf 	strb.w	r3, [r7, #447]	@ 0x1bf
    switch (ui) {
 8004890:	4bb9      	ldr	r3, [pc, #740]	@ (8004b78 <Screen_Update+0x2fc>)
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	2b13      	cmp	r3, #19
 8004896:	bf8c      	ite	hi
 8004898:	2201      	movhi	r2, #1
 800489a:	2200      	movls	r2, #0
 800489c:	b2d2      	uxtb	r2, r2
 800489e:	2a00      	cmp	r2, #0
 80048a0:	d10f      	bne.n	80048c2 <Screen_Update+0x46>
 80048a2:	4ab6      	ldr	r2, [pc, #728]	@ (8004b7c <Screen_Update+0x300>)
 80048a4:	fa22 f303 	lsr.w	r3, r2, r3
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	bf14      	ite	ne
 80048b0:	2301      	movne	r3, #1
 80048b2:	2300      	moveq	r3, #0
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d003      	beq.n	80048c2 <Screen_Update+0x46>
        case UI_SEARCH_EDIT_DRY:
        case UI_COUNTDOWN_EDIT_MIN:
        case UI_COUNTDOWN_EDIT_REP:   // NEW: blink on repeats editor
        case UI_TWIST_EDIT_ON:
        case UI_TWIST_EDIT_OFF:
            cursorBlinkActive = true;
 80048ba:	2301      	movs	r3, #1
 80048bc:	f887 31bf 	strb.w	r3, [r7, #447]	@ 0x1bf
            break;
 80048c0:	e006      	b.n	80048d0 <Screen_Update+0x54>
        default:
            cursorBlinkActive = false;
 80048c2:	2300      	movs	r3, #0
 80048c4:	f887 31bf 	strb.w	r3, [r7, #447]	@ 0x1bf
            cursorVisible = true;
 80048c8:	4bad      	ldr	r3, [pc, #692]	@ (8004b80 <Screen_Update+0x304>)
 80048ca:	2201      	movs	r2, #1
 80048cc:	701a      	strb	r2, [r3, #0]
            break;
 80048ce:	bf00      	nop
    }

    if (cursorBlinkActive && (now - lastCursorToggle >= CURSOR_BLINK_MS)) {
 80048d0:	f897 31bf 	ldrb.w	r3, [r7, #447]	@ 0x1bf
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d01e      	beq.n	8004916 <Screen_Update+0x9a>
 80048d8:	4baa      	ldr	r3, [pc, #680]	@ (8004b84 <Screen_Update+0x308>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d315      	bcc.n	8004916 <Screen_Update+0x9a>
        cursorVisible = !cursorVisible;
 80048ea:	4ba5      	ldr	r3, [pc, #660]	@ (8004b80 <Screen_Update+0x304>)
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	bf14      	ite	ne
 80048f2:	2301      	movne	r3, #1
 80048f4:	2300      	moveq	r3, #0
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	f083 0301 	eor.w	r3, r3, #1
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	b2da      	uxtb	r2, r3
 8004904:	4b9e      	ldr	r3, [pc, #632]	@ (8004b80 <Screen_Update+0x304>)
 8004906:	701a      	strb	r2, [r3, #0]
        lastCursorToggle = now;
 8004908:	4a9e      	ldr	r2, [pc, #632]	@ (8004b84 <Screen_Update+0x308>)
 800490a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 800490e:	6013      	str	r3, [r2, #0]
        screenNeedsRefresh = true;
 8004910:	4b9d      	ldr	r3, [pc, #628]	@ (8004b88 <Screen_Update+0x30c>)
 8004912:	2201      	movs	r2, #1
 8004914:	701a      	strb	r2, [r3, #0]
    }

    if (ui == UI_WELCOME && now - lastLcdUpdateTime >= WELCOME_MS) {
 8004916:	4b98      	ldr	r3, [pc, #608]	@ (8004b78 <Screen_Update+0x2fc>)
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d112      	bne.n	8004944 <Screen_Update+0xc8>
 800491e:	4b9b      	ldr	r3, [pc, #620]	@ (8004b8c <Screen_Update+0x310>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800492c:	4293      	cmp	r3, r2
 800492e:	d309      	bcc.n	8004944 <Screen_Update+0xc8>
        ui = UI_DASH;
 8004930:	4b91      	ldr	r3, [pc, #580]	@ (8004b78 <Screen_Update+0x2fc>)
 8004932:	2201      	movs	r2, #1
 8004934:	701a      	strb	r2, [r3, #0]
        lastLcdUpdateTime = now;
 8004936:	4a95      	ldr	r2, [pc, #596]	@ (8004b8c <Screen_Update+0x310>)
 8004938:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 800493c:	6013      	str	r3, [r2, #0]
        screenNeedsRefresh = true;
 800493e:	4b92      	ldr	r3, [pc, #584]	@ (8004b88 <Screen_Update+0x30c>)
 8004940:	2201      	movs	r2, #1
 8004942:	701a      	strb	r2, [r3, #0]
    }

    if (ui != UI_WELCOME && ui != UI_DASH && (now - lastUserAction >= AUTO_BACK_MS)) {
 8004944:	4b8c      	ldr	r3, [pc, #560]	@ (8004b78 <Screen_Update+0x2fc>)
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d012      	beq.n	8004972 <Screen_Update+0xf6>
 800494c:	4b8a      	ldr	r3, [pc, #552]	@ (8004b78 <Screen_Update+0x2fc>)
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d00e      	beq.n	8004972 <Screen_Update+0xf6>
 8004954:	4b8e      	ldr	r3, [pc, #568]	@ (8004b90 <Screen_Update+0x314>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8004962:	4293      	cmp	r3, r2
 8004964:	d305      	bcc.n	8004972 <Screen_Update+0xf6>
        ui = UI_DASH;
 8004966:	4b84      	ldr	r3, [pc, #528]	@ (8004b78 <Screen_Update+0x2fc>)
 8004968:	2201      	movs	r2, #1
 800496a:	701a      	strb	r2, [r3, #0]
        screenNeedsRefresh = true;
 800496c:	4b86      	ldr	r3, [pc, #536]	@ (8004b88 <Screen_Update+0x30c>)
 800496e:	2201      	movs	r2, #1
 8004970:	701a      	strb	r2, [r3, #0]
    }

    if (ui == UI_DASH && (now - lastLcdUpdateTime >= 1000)) {
 8004972:	4b81      	ldr	r3, [pc, #516]	@ (8004b78 <Screen_Update+0x2fc>)
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d10e      	bne.n	8004998 <Screen_Update+0x11c>
 800497a:	4b84      	ldr	r3, [pc, #528]	@ (8004b8c <Screen_Update+0x310>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004988:	d306      	bcc.n	8004998 <Screen_Update+0x11c>
        screenNeedsRefresh = true;
 800498a:	4b7f      	ldr	r3, [pc, #508]	@ (8004b88 <Screen_Update+0x30c>)
 800498c:	2201      	movs	r2, #1
 800498e:	701a      	strb	r2, [r3, #0]
        lastLcdUpdateTime = now;
 8004990:	4a7e      	ldr	r2, [pc, #504]	@ (8004b8c <Screen_Update+0x310>)
 8004992:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8004996:	6013      	str	r3, [r2, #0]
    }

    if (screenNeedsRefresh || ui != last_ui) {
 8004998:	4b7b      	ldr	r3, [pc, #492]	@ (8004b88 <Screen_Update+0x30c>)
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d106      	bne.n	80049ae <Screen_Update+0x132>
 80049a0:	4b75      	ldr	r3, [pc, #468]	@ (8004b78 <Screen_Update+0x2fc>)
 80049a2:	781a      	ldrb	r2, [r3, #0]
 80049a4:	4b7b      	ldr	r3, [pc, #492]	@ (8004b94 <Screen_Update+0x318>)
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	f000 81ab 	beq.w	8004d04 <Screen_Update+0x488>
        bool fullRedraw = (ui != last_ui);
 80049ae:	4b72      	ldr	r3, [pc, #456]	@ (8004b78 <Screen_Update+0x2fc>)
 80049b0:	781a      	ldrb	r2, [r3, #0]
 80049b2:	4b78      	ldr	r3, [pc, #480]	@ (8004b94 <Screen_Update+0x318>)
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	bf14      	ite	ne
 80049ba:	2301      	movne	r3, #1
 80049bc:	2300      	moveq	r3, #0
 80049be:	f887 31b7 	strb.w	r3, [r7, #439]	@ 0x1b7
        last_ui = ui;
 80049c2:	4b6d      	ldr	r3, [pc, #436]	@ (8004b78 <Screen_Update+0x2fc>)
 80049c4:	781a      	ldrb	r2, [r3, #0]
 80049c6:	4b73      	ldr	r3, [pc, #460]	@ (8004b94 <Screen_Update+0x318>)
 80049c8:	701a      	strb	r2, [r3, #0]
        screenNeedsRefresh = false;
 80049ca:	4b6f      	ldr	r3, [pc, #444]	@ (8004b88 <Screen_Update+0x30c>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	701a      	strb	r2, [r3, #0]

        if (fullRedraw) lcd_clear();
 80049d0:	f897 31b7 	ldrb.w	r3, [r7, #439]	@ 0x1b7
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d001      	beq.n	80049dc <Screen_Update+0x160>
 80049d8:	f7fd fa51 	bl	8001e7e <lcd_clear>

        switch (ui) {
 80049dc:	4b66      	ldr	r3, [pc, #408]	@ (8004b78 <Screen_Update+0x2fc>)
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	2b13      	cmp	r3, #19
 80049e2:	f200 8188 	bhi.w	8004cf6 <Screen_Update+0x47a>
 80049e6:	a201      	add	r2, pc, #4	@ (adr r2, 80049ec <Screen_Update+0x170>)
 80049e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ec:	08004a3d 	.word	0x08004a3d
 80049f0:	08004a43 	.word	0x08004a43
 80049f4:	08004a49 	.word	0x08004a49
 80049f8:	08004a4f 	.word	0x08004a4f
 80049fc:	08004a55 	.word	0x08004a55
 8004a00:	08004a5b 	.word	0x08004a5b
 8004a04:	08004a73 	.word	0x08004a73
 8004a08:	08004aa7 	.word	0x08004aa7
 8004a0c:	08004adb 	.word	0x08004adb
 8004a10:	08004b0f 	.word	0x08004b0f
 8004a14:	08004a61 	.word	0x08004a61
 8004a18:	08004b43 	.word	0x08004b43
 8004a1c:	08004bc5 	.word	0x08004bc5
 8004a20:	08004a67 	.word	0x08004a67
 8004a24:	08004bf9 	.word	0x08004bf9
 8004a28:	08004c2d 	.word	0x08004c2d
 8004a2c:	08004c61 	.word	0x08004c61
 8004a30:	08004a6d 	.word	0x08004a6d
 8004a34:	08004c93 	.word	0x08004c93
 8004a38:	08004cc7 	.word	0x08004cc7
            case UI_WELCOME: show_welcome(); break;
 8004a3c:	f7ff fc00 	bl	8004240 <show_welcome>
 8004a40:	e160      	b.n	8004d04 <Screen_Update+0x488>
            case UI_DASH: show_dash(); break;
 8004a42:	f7ff fc0d 	bl	8004260 <show_dash>
 8004a46:	e15d      	b.n	8004d04 <Screen_Update+0x488>
            case UI_MENU: show_menu(); break;
 8004a48:	f7ff fccc 	bl	80043e4 <show_menu>
 8004a4c:	e15a      	b.n	8004d04 <Screen_Update+0x488>
            case UI_MANUAL: show_manual(); break;
 8004a4e:	f7ff fd27 	bl	80044a0 <show_manual>
 8004a52:	e157      	b.n	8004d04 <Screen_Update+0x488>
            case UI_SEMI_AUTO: show_semi_auto(); break;
 8004a54:	f7ff fd54 	bl	8004500 <show_semi_auto>
 8004a58:	e154      	b.n	8004d04 <Screen_Update+0x488>
            case UI_TIMER: show_timer(); break;
 8004a5a:	f7ff fd81 	bl	8004560 <show_timer>
 8004a5e:	e151      	b.n	8004d04 <Screen_Update+0x488>
            case UI_SEARCH: show_search(); break;
 8004a60:	f7ff fdb4 	bl	80045cc <show_search>
 8004a64:	e14e      	b.n	8004d04 <Screen_Update+0x488>
            case UI_COUNTDOWN: show_countdown(); break;
 8004a66:	f7ff fdef 	bl	8004648 <show_countdown>
 8004a6a:	e14b      	b.n	8004d04 <Screen_Update+0x488>
            case UI_TWIST: show_twist(); break;
 8004a6c:	f7ff fe48 	bl	8004700 <show_twist>
 8004a70:	e148      	b.n	8004d04 <Screen_Update+0x488>

            case UI_TIMER_EDIT_ON_H: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit ON Hour: %02d", edit_timer_on_h);
 8004a72:	4b49      	ldr	r3, [pc, #292]	@ (8004b98 <Screen_Update+0x31c>)
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	f507 70d2 	add.w	r0, r7, #420	@ 0x1a4
 8004a7a:	4a48      	ldr	r2, [pc, #288]	@ (8004b9c <Screen_Update+0x320>)
 8004a7c:	2111      	movs	r1, #17
 8004a7e:	f006 fca5 	bl	800b3cc <sniprintf>
                snprintf(l1,sizeof(l1),">Up + Dn - SelOK");
 8004a82:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8004a86:	4a46      	ldr	r2, [pc, #280]	@ (8004ba0 <Screen_Update+0x324>)
 8004a88:	2111      	movs	r1, #17
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f006 fc9e 	bl	800b3cc <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 8004a90:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 8004a94:	4618      	mov	r0, r3
 8004a96:	f7ff fb61 	bl	800415c <lcd_line0>
 8004a9a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7ff fb68 	bl	8004174 <lcd_line1>
 8004aa4:	e12e      	b.n	8004d04 <Screen_Update+0x488>
            }
            case UI_TIMER_EDIT_ON_M: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit ON Min: %02d", edit_timer_on_m);
 8004aa6:	4b3f      	ldr	r3, [pc, #252]	@ (8004ba4 <Screen_Update+0x328>)
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	f507 70be 	add.w	r0, r7, #380	@ 0x17c
 8004aae:	4a3e      	ldr	r2, [pc, #248]	@ (8004ba8 <Screen_Update+0x32c>)
 8004ab0:	2111      	movs	r1, #17
 8004ab2:	f006 fc8b 	bl	800b3cc <sniprintf>
                snprintf(l1,sizeof(l1),">Up + Dn - SelOK");
 8004ab6:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8004aba:	4a39      	ldr	r2, [pc, #228]	@ (8004ba0 <Screen_Update+0x324>)
 8004abc:	2111      	movs	r1, #17
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f006 fc84 	bl	800b3cc <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 8004ac4:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f7ff fb47 	bl	800415c <lcd_line0>
 8004ace:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7ff fb4e 	bl	8004174 <lcd_line1>
 8004ad8:	e114      	b.n	8004d04 <Screen_Update+0x488>
            }
            case UI_TIMER_EDIT_OFF_H: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit OFF Hr: %02d", edit_timer_off_h);
 8004ada:	4b34      	ldr	r3, [pc, #208]	@ (8004bac <Screen_Update+0x330>)
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	f507 70aa 	add.w	r0, r7, #340	@ 0x154
 8004ae2:	4a33      	ldr	r2, [pc, #204]	@ (8004bb0 <Screen_Update+0x334>)
 8004ae4:	2111      	movs	r1, #17
 8004ae6:	f006 fc71 	bl	800b3cc <sniprintf>
                snprintf(l1,sizeof(l1),">Up + Dn - SelOK");
 8004aea:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004aee:	4a2c      	ldr	r2, [pc, #176]	@ (8004ba0 <Screen_Update+0x324>)
 8004af0:	2111      	movs	r1, #17
 8004af2:	4618      	mov	r0, r3
 8004af4:	f006 fc6a 	bl	800b3cc <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 8004af8:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8004afc:	4618      	mov	r0, r3
 8004afe:	f7ff fb2d 	bl	800415c <lcd_line0>
 8004b02:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7ff fb34 	bl	8004174 <lcd_line1>
 8004b0c:	e0fa      	b.n	8004d04 <Screen_Update+0x488>
            }
            case UI_TIMER_EDIT_OFF_M: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit OFF Mn: %02d", edit_timer_off_m);
 8004b0e:	4b29      	ldr	r3, [pc, #164]	@ (8004bb4 <Screen_Update+0x338>)
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	f507 7096 	add.w	r0, r7, #300	@ 0x12c
 8004b16:	4a28      	ldr	r2, [pc, #160]	@ (8004bb8 <Screen_Update+0x33c>)
 8004b18:	2111      	movs	r1, #17
 8004b1a:	f006 fc57 	bl	800b3cc <sniprintf>
                snprintf(l1,sizeof(l1),">Up + Dn - SelOK");
 8004b1e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004b22:	4a1f      	ldr	r2, [pc, #124]	@ (8004ba0 <Screen_Update+0x324>)
 8004b24:	2111      	movs	r1, #17
 8004b26:	4618      	mov	r0, r3
 8004b28:	f006 fc50 	bl	800b3cc <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 8004b2c:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7ff fb13 	bl	800415c <lcd_line0>
 8004b36:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7ff fb1a 	bl	8004174 <lcd_line1>
 8004b40:	e0e0      	b.n	8004d04 <Screen_Update+0x488>
            }
            case UI_SEARCH_EDIT_GAP: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit Gap: %3ds", edit_search_gap_s);
 8004b42:	4b1e      	ldr	r3, [pc, #120]	@ (8004bbc <Screen_Update+0x340>)
 8004b44:	881b      	ldrh	r3, [r3, #0]
 8004b46:	f507 7082 	add.w	r0, r7, #260	@ 0x104
 8004b4a:	4a1d      	ldr	r2, [pc, #116]	@ (8004bc0 <Screen_Update+0x344>)
 8004b4c:	2111      	movs	r1, #17
 8004b4e:	f006 fc3d 	bl	800b3cc <sniprintf>
                snprintf(l1,sizeof(l1),">Up + Dn - SelOK");
 8004b52:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8004b56:	4a12      	ldr	r2, [pc, #72]	@ (8004ba0 <Screen_Update+0x324>)
 8004b58:	2111      	movs	r1, #17
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f006 fc36 	bl	800b3cc <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 8004b60:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7ff faf9 	bl	800415c <lcd_line0>
 8004b6a:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7ff fb00 	bl	8004174 <lcd_line1>
 8004b74:	e0c6      	b.n	8004d04 <Screen_Update+0x488>
 8004b76:	bf00      	nop
 8004b78:	20000620 	.word	0x20000620
 8004b7c:	000cdbc4 	.word	0x000cdbc4
 8004b80:	2000002f 	.word	0x2000002f
 8004b84:	20000624 	.word	0x20000624
 8004b88:	20000621 	.word	0x20000621
 8004b8c:	2000061c 	.word	0x2000061c
 8004b90:	20000628 	.word	0x20000628
 8004b94:	2000002e 	.word	0x2000002e
 8004b98:	2000004c 	.word	0x2000004c
 8004b9c:	0800dc1c 	.word	0x0800dc1c
 8004ba0:	0800dc30 	.word	0x0800dc30
 8004ba4:	2000004d 	.word	0x2000004d
 8004ba8:	0800dc44 	.word	0x0800dc44
 8004bac:	2000004e 	.word	0x2000004e
 8004bb0:	0800dc58 	.word	0x0800dc58
 8004bb4:	2000004f 	.word	0x2000004f
 8004bb8:	0800dc6c 	.word	0x0800dc6c
 8004bbc:	20000050 	.word	0x20000050
 8004bc0:	0800dc80 	.word	0x0800dc80
            }
            case UI_SEARCH_EDIT_DRY: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit Dry: %3ds", edit_search_dry_s);
 8004bc4:	4b52      	ldr	r3, [pc, #328]	@ (8004d10 <Screen_Update+0x494>)
 8004bc6:	881b      	ldrh	r3, [r3, #0]
 8004bc8:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 8004bcc:	4a51      	ldr	r2, [pc, #324]	@ (8004d14 <Screen_Update+0x498>)
 8004bce:	2111      	movs	r1, #17
 8004bd0:	f006 fbfc 	bl	800b3cc <sniprintf>
                snprintf(l1,sizeof(l1),">Up + Dn - SelOK");
 8004bd4:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8004bd8:	4a4f      	ldr	r2, [pc, #316]	@ (8004d18 <Screen_Update+0x49c>)
 8004bda:	2111      	movs	r1, #17
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f006 fbf5 	bl	800b3cc <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 8004be2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7ff fab8 	bl	800415c <lcd_line0>
 8004bec:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f7ff fabf 	bl	8004174 <lcd_line1>
 8004bf6:	e085      	b.n	8004d04 <Screen_Update+0x488>
            }
            case UI_COUNTDOWN_EDIT_MIN: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Set Min: %3u", edit_countdown_min);
 8004bf8:	4b48      	ldr	r3, [pc, #288]	@ (8004d1c <Screen_Update+0x4a0>)
 8004bfa:	881b      	ldrh	r3, [r3, #0]
 8004bfc:	f107 00b4 	add.w	r0, r7, #180	@ 0xb4
 8004c00:	4a47      	ldr	r2, [pc, #284]	@ (8004d20 <Screen_Update+0x4a4>)
 8004c02:	2111      	movs	r1, #17
 8004c04:	f006 fbe2 	bl	800b3cc <sniprintf>
                snprintf(l1,sizeof(l1),">Up+Dn- SelNext");
 8004c08:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8004c0c:	4a45      	ldr	r2, [pc, #276]	@ (8004d24 <Screen_Update+0x4a8>)
 8004c0e:	2111      	movs	r1, #17
 8004c10:	4618      	mov	r0, r3
 8004c12:	f006 fbdb 	bl	800b3cc <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 8004c16:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7ff fa9e 	bl	800415c <lcd_line0>
 8004c20:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7ff faa5 	bl	8004174 <lcd_line1>
 8004c2a:	e06b      	b.n	8004d04 <Screen_Update+0x488>
            }
            case UI_COUNTDOWN_EDIT_REP: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Set Reps: %3u", edit_countdown_rep);
 8004c2c:	4b3e      	ldr	r3, [pc, #248]	@ (8004d28 <Screen_Update+0x4ac>)
 8004c2e:	881b      	ldrh	r3, [r3, #0]
 8004c30:	f107 008c 	add.w	r0, r7, #140	@ 0x8c
 8004c34:	4a3d      	ldr	r2, [pc, #244]	@ (8004d2c <Screen_Update+0x4b0>)
 8004c36:	2111      	movs	r1, #17
 8004c38:	f006 fbc8 	bl	800b3cc <sniprintf>
                snprintf(l1,sizeof(l1),">Up+Dn- Start");
 8004c3c:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8004c40:	4a3b      	ldr	r2, [pc, #236]	@ (8004d30 <Screen_Update+0x4b4>)
 8004c42:	2111      	movs	r1, #17
 8004c44:	4618      	mov	r0, r3
 8004c46:	f006 fbc1 	bl	800b3cc <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 8004c4a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7ff fa84 	bl	800415c <lcd_line0>
 8004c54:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7ff fa8b 	bl	8004174 <lcd_line1>
 8004c5e:	e051      	b.n	8004d04 <Screen_Update+0x488>
            }

            case UI_COUNTDOWN_TOGGLE: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Countdown Setup");
 8004c60:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004c64:	4a33      	ldr	r2, [pc, #204]	@ (8004d34 <Screen_Update+0x4b8>)
 8004c66:	2111      	movs	r1, #17
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f006 fbaf 	bl	800b3cc <sniprintf>
                snprintf(l1,sizeof(l1),">Enable   Edit");
 8004c6e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8004c72:	4a31      	ldr	r2, [pc, #196]	@ (8004d38 <Screen_Update+0x4bc>)
 8004c74:	2111      	movs	r1, #17
 8004c76:	4618      	mov	r0, r3
 8004c78:	f006 fba8 	bl	800b3cc <sniprintf>
                lcd_line0(l0); lcd_line1(l1);
 8004c7c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7ff fa6b 	bl	800415c <lcd_line0>
 8004c86:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7ff fa72 	bl	8004174 <lcd_line1>
                break;
 8004c90:	e038      	b.n	8004d04 <Screen_Update+0x488>
            }

            case UI_TWIST_EDIT_ON: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit T ON: %3ds", edit_twist_on_s);
 8004c92:	4b2a      	ldr	r3, [pc, #168]	@ (8004d3c <Screen_Update+0x4c0>)
 8004c94:	881b      	ldrh	r3, [r3, #0]
 8004c96:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8004c9a:	4a29      	ldr	r2, [pc, #164]	@ (8004d40 <Screen_Update+0x4c4>)
 8004c9c:	2111      	movs	r1, #17
 8004c9e:	f006 fb95 	bl	800b3cc <sniprintf>
                snprintf(l1,sizeof(l1),">Up + Dn - SelOK");
 8004ca2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004ca6:	4a1c      	ldr	r2, [pc, #112]	@ (8004d18 <Screen_Update+0x49c>)
 8004ca8:	2111      	movs	r1, #17
 8004caa:	4618      	mov	r0, r3
 8004cac:	f006 fb8e 	bl	800b3cc <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 8004cb0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7ff fa51 	bl	800415c <lcd_line0>
 8004cba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7ff fa58 	bl	8004174 <lcd_line1>
 8004cc4:	e01e      	b.n	8004d04 <Screen_Update+0x488>
            }
            case UI_TWIST_EDIT_OFF: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit T OFF:%3ds", edit_twist_off_s);
 8004cc6:	4b1f      	ldr	r3, [pc, #124]	@ (8004d44 <Screen_Update+0x4c8>)
 8004cc8:	881b      	ldrh	r3, [r3, #0]
 8004cca:	f107 0014 	add.w	r0, r7, #20
 8004cce:	4a1e      	ldr	r2, [pc, #120]	@ (8004d48 <Screen_Update+0x4cc>)
 8004cd0:	2111      	movs	r1, #17
 8004cd2:	f006 fb7b 	bl	800b3cc <sniprintf>
                snprintf(l1,sizeof(l1),">Up + Dn - SelOK");
 8004cd6:	463b      	mov	r3, r7
 8004cd8:	4a0f      	ldr	r2, [pc, #60]	@ (8004d18 <Screen_Update+0x49c>)
 8004cda:	2111      	movs	r1, #17
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f006 fb75 	bl	800b3cc <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 8004ce2:	f107 0314 	add.w	r3, r7, #20
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7ff fa38 	bl	800415c <lcd_line0>
 8004cec:	463b      	mov	r3, r7
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7ff fa40 	bl	8004174 <lcd_line1>
 8004cf4:	e006      	b.n	8004d04 <Screen_Update+0x488>
            }
            default:
                lcd_line0("Not Implemented");
 8004cf6:	4815      	ldr	r0, [pc, #84]	@ (8004d4c <Screen_Update+0x4d0>)
 8004cf8:	f7ff fa30 	bl	800415c <lcd_line0>
                lcd_line1("                ");
 8004cfc:	4814      	ldr	r0, [pc, #80]	@ (8004d50 <Screen_Update+0x4d4>)
 8004cfe:	f7ff fa39 	bl	8004174 <lcd_line1>
                break;
 8004d02:	bf00      	nop
        }
    }
}
 8004d04:	bf00      	nop
 8004d06:	f507 77e0 	add.w	r7, r7, #448	@ 0x1c0
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	20000052 	.word	0x20000052
 8004d14:	0800dc90 	.word	0x0800dc90
 8004d18:	0800dc30 	.word	0x0800dc30
 8004d1c:	20000058 	.word	0x20000058
 8004d20:	0800dca0 	.word	0x0800dca0
 8004d24:	0800dcb0 	.word	0x0800dcb0
 8004d28:	2000005a 	.word	0x2000005a
 8004d2c:	0800dcc0 	.word	0x0800dcc0
 8004d30:	0800dcd0 	.word	0x0800dcd0
 8004d34:	0800dce0 	.word	0x0800dce0
 8004d38:	0800dcf0 	.word	0x0800dcf0
 8004d3c:	20000054 	.word	0x20000054
 8004d40:	0800dd00 	.word	0x0800dd00
 8004d44:	20000056 	.word	0x20000056
 8004d48:	0800dd10 	.word	0x0800dd10
 8004d4c:	0800dd20 	.word	0x0800dd20
 8004d50:	0800da9c 	.word	0x0800da9c

08004d54 <Screen_Init>:

/* ===== Initialization / Reset ===== */
void Screen_Init(void){
 8004d54:	b580      	push	{r7, lr}
 8004d56:	af00      	add	r7, sp, #0
    lcd_init();
 8004d58:	f7fd f8d5 	bl	8001f06 <lcd_init>
    ui = UI_WELCOME;
 8004d5c:	4b1c      	ldr	r3, [pc, #112]	@ (8004dd0 <Screen_Init+0x7c>)
 8004d5e:	2200      	movs	r2, #0
 8004d60:	701a      	strb	r2, [r3, #0]
    last_ui = UI_MAX_;
 8004d62:	4b1c      	ldr	r3, [pc, #112]	@ (8004dd4 <Screen_Init+0x80>)
 8004d64:	2214      	movs	r2, #20
 8004d66:	701a      	strb	r2, [r3, #0]
    screenNeedsRefresh = true;
 8004d68:	4b1b      	ldr	r3, [pc, #108]	@ (8004dd8 <Screen_Init+0x84>)
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	701a      	strb	r2, [r3, #0]
    lastLcdUpdateTime = HAL_GetTick();
 8004d6e:	f001 f923 	bl	8005fb8 <HAL_GetTick>
 8004d72:	4603      	mov	r3, r0
 8004d74:	4a19      	ldr	r2, [pc, #100]	@ (8004ddc <Screen_Init+0x88>)
 8004d76:	6013      	str	r3, [r2, #0]
    refreshInactivityTimer();
 8004d78:	f7ff fa08 	bl	800418c <refreshInactivityTimer>

    edit_search_gap_s = searchSettings.testingGapSeconds;
 8004d7c:	4b18      	ldr	r3, [pc, #96]	@ (8004de0 <Screen_Init+0x8c>)
 8004d7e:	885a      	ldrh	r2, [r3, #2]
 8004d80:	4b18      	ldr	r3, [pc, #96]	@ (8004de4 <Screen_Init+0x90>)
 8004d82:	801a      	strh	r2, [r3, #0]
    edit_search_dry_s = searchSettings.dryRunTimeSeconds;
 8004d84:	4b16      	ldr	r3, [pc, #88]	@ (8004de0 <Screen_Init+0x8c>)
 8004d86:	889a      	ldrh	r2, [r3, #4]
 8004d88:	4b17      	ldr	r3, [pc, #92]	@ (8004de8 <Screen_Init+0x94>)
 8004d8a:	801a      	strh	r2, [r3, #0]
    edit_twist_on_s   = twistSettings.onDurationSeconds;
 8004d8c:	4b17      	ldr	r3, [pc, #92]	@ (8004dec <Screen_Init+0x98>)
 8004d8e:	885a      	ldrh	r2, [r3, #2]
 8004d90:	4b17      	ldr	r3, [pc, #92]	@ (8004df0 <Screen_Init+0x9c>)
 8004d92:	801a      	strh	r2, [r3, #0]
    edit_twist_off_s  = twistSettings.offDurationSeconds;
 8004d94:	4b15      	ldr	r3, [pc, #84]	@ (8004dec <Screen_Init+0x98>)
 8004d96:	889a      	ldrh	r2, [r3, #4]
 8004d98:	4b16      	ldr	r3, [pc, #88]	@ (8004df4 <Screen_Init+0xa0>)
 8004d9a:	801a      	strh	r2, [r3, #0]
    edit_countdown_min = (uint16_t)(countdownDuration / 60u);
 8004d9c:	4b16      	ldr	r3, [pc, #88]	@ (8004df8 <Screen_Init+0xa4>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a16      	ldr	r2, [pc, #88]	@ (8004dfc <Screen_Init+0xa8>)
 8004da2:	fba2 2303 	umull	r2, r3, r2, r3
 8004da6:	095b      	lsrs	r3, r3, #5
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	4b15      	ldr	r3, [pc, #84]	@ (8004e00 <Screen_Init+0xac>)
 8004dac:	801a      	strh	r2, [r3, #0]
    if (edit_countdown_min == 0) edit_countdown_min = 5; // sane default
 8004dae:	4b14      	ldr	r3, [pc, #80]	@ (8004e00 <Screen_Init+0xac>)
 8004db0:	881b      	ldrh	r3, [r3, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d102      	bne.n	8004dbc <Screen_Init+0x68>
 8004db6:	4b12      	ldr	r3, [pc, #72]	@ (8004e00 <Screen_Init+0xac>)
 8004db8:	2205      	movs	r2, #5
 8004dba:	801a      	strh	r2, [r3, #0]
    if (edit_countdown_rep == 0) edit_countdown_rep = 1;
 8004dbc:	4b11      	ldr	r3, [pc, #68]	@ (8004e04 <Screen_Init+0xb0>)
 8004dbe:	881b      	ldrh	r3, [r3, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d102      	bne.n	8004dca <Screen_Init+0x76>
 8004dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8004e04 <Screen_Init+0xb0>)
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	801a      	strh	r2, [r3, #0]
}
 8004dca:	bf00      	nop
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	20000620 	.word	0x20000620
 8004dd4:	2000002e 	.word	0x2000002e
 8004dd8:	20000621 	.word	0x20000621
 8004ddc:	2000061c 	.word	0x2000061c
 8004de0:	20000020 	.word	0x20000020
 8004de4:	20000050 	.word	0x20000050
 8004de8:	20000052 	.word	0x20000052
 8004dec:	20000028 	.word	0x20000028
 8004df0:	20000054 	.word	0x20000054
 8004df4:	20000056 	.word	0x20000056
 8004df8:	20000598 	.word	0x20000598
 8004dfc:	88888889 	.word	0x88888889
 8004e00:	20000058 	.word	0x20000058
 8004e04:	2000005a 	.word	0x2000005a

08004e08 <menu_select>:
    lastLcdUpdateTime = HAL_GetTick();
    refreshInactivityTimer();
}

/* ===== Menu actions ===== */
static void menu_select(void){
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
    refreshInactivityTimer();
 8004e0e:	f7ff f9bd 	bl	800418c <refreshInactivityTimer>

    switch (ui){
 8004e12:	4b8b      	ldr	r3, [pc, #556]	@ (8005040 <menu_select+0x238>)
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	2b13      	cmp	r3, #19
 8004e18:	f200 8109 	bhi.w	800502e <menu_select+0x226>
 8004e1c:	a201      	add	r2, pc, #4	@ (adr r2, 8004e24 <menu_select+0x1c>)
 8004e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e22:	bf00      	nop
 8004e24:	08004e75 	.word	0x08004e75
 8004e28:	08004e7d 	.word	0x08004e7d
 8004e2c:	08004e89 	.word	0x08004e89
 8004e30:	08004ef7 	.word	0x08004ef7
 8004e34:	08004f03 	.word	0x08004f03
 8004e38:	08004f23 	.word	0x08004f23
 8004e3c:	08004f2b 	.word	0x08004f2b
 8004e40:	08004f33 	.word	0x08004f33
 8004e44:	08004f3b 	.word	0x08004f3b
 8004e48:	08004f43 	.word	0x08004f43
 8004e4c:	08004f4f 	.word	0x08004f4f
 8004e50:	08004f57 	.word	0x08004f57
 8004e54:	08004f5f 	.word	0x08004f5f
 8004e58:	08004f6b 	.word	0x08004f6b
 8004e5c:	08004f89 	.word	0x08004f89
 8004e60:	08004f91 	.word	0x08004f91
 8004e64:	08004f99 	.word	0x08004f99
 8004e68:	08004fd9 	.word	0x08004fd9
 8004e6c:	08005001 	.word	0x08005001
 8004e70:	08005009 	.word	0x08005009
        case UI_WELCOME: ui = UI_DASH; break;
 8004e74:	4b72      	ldr	r3, [pc, #456]	@ (8005040 <menu_select+0x238>)
 8004e76:	2201      	movs	r2, #1
 8004e78:	701a      	strb	r2, [r3, #0]
 8004e7a:	e0d9      	b.n	8005030 <menu_select+0x228>
        case UI_DASH: ui = UI_MENU; goto_menu_top(); break;
 8004e7c:	4b70      	ldr	r3, [pc, #448]	@ (8005040 <menu_select+0x238>)
 8004e7e:	2202      	movs	r2, #2
 8004e80:	701a      	strb	r2, [r3, #0]
 8004e82:	f7ff f98f 	bl	80041a4 <goto_menu_top>
 8004e86:	e0d3      	b.n	8005030 <menu_select+0x228>

        case UI_MENU:
            switch (menu_idx){
 8004e88:	4b6e      	ldr	r3, [pc, #440]	@ (8005044 <menu_select+0x23c>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2b06      	cmp	r3, #6
 8004e8e:	d82d      	bhi.n	8004eec <menu_select+0xe4>
 8004e90:	a201      	add	r2, pc, #4	@ (adr r2, 8004e98 <menu_select+0x90>)
 8004e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e96:	bf00      	nop
 8004e98:	08004eb5 	.word	0x08004eb5
 8004e9c:	08004ebd 	.word	0x08004ebd
 8004ea0:	08004ec5 	.word	0x08004ec5
 8004ea4:	08004ecd 	.word	0x08004ecd
 8004ea8:	08004ed5 	.word	0x08004ed5
 8004eac:	08004edd 	.word	0x08004edd
 8004eb0:	08004ee5 	.word	0x08004ee5
                case 0: ui = UI_MANUAL; break;
 8004eb4:	4b62      	ldr	r3, [pc, #392]	@ (8005040 <menu_select+0x238>)
 8004eb6:	2203      	movs	r2, #3
 8004eb8:	701a      	strb	r2, [r3, #0]
 8004eba:	e01b      	b.n	8004ef4 <menu_select+0xec>
                case 1: ui = UI_SEMI_AUTO; break;
 8004ebc:	4b60      	ldr	r3, [pc, #384]	@ (8005040 <menu_select+0x238>)
 8004ebe:	2204      	movs	r2, #4
 8004ec0:	701a      	strb	r2, [r3, #0]
 8004ec2:	e017      	b.n	8004ef4 <menu_select+0xec>
                case 2: ui = UI_TIMER; break;
 8004ec4:	4b5e      	ldr	r3, [pc, #376]	@ (8005040 <menu_select+0x238>)
 8004ec6:	2205      	movs	r2, #5
 8004ec8:	701a      	strb	r2, [r3, #0]
 8004eca:	e013      	b.n	8004ef4 <menu_select+0xec>
                case 3: ui = UI_SEARCH; break;
 8004ecc:	4b5c      	ldr	r3, [pc, #368]	@ (8005040 <menu_select+0x238>)
 8004ece:	220a      	movs	r2, #10
 8004ed0:	701a      	strb	r2, [r3, #0]
 8004ed2:	e00f      	b.n	8004ef4 <menu_select+0xec>
                case 4: ui = UI_COUNTDOWN; break;
 8004ed4:	4b5a      	ldr	r3, [pc, #360]	@ (8005040 <menu_select+0x238>)
 8004ed6:	220d      	movs	r2, #13
 8004ed8:	701a      	strb	r2, [r3, #0]
 8004eda:	e00b      	b.n	8004ef4 <menu_select+0xec>
                case 5: ui = UI_TWIST; break;
 8004edc:	4b58      	ldr	r3, [pc, #352]	@ (8005040 <menu_select+0x238>)
 8004ede:	2211      	movs	r2, #17
 8004ee0:	701a      	strb	r2, [r3, #0]
 8004ee2:	e007      	b.n	8004ef4 <menu_select+0xec>
                case 6: ui = UI_DASH; break;
 8004ee4:	4b56      	ldr	r3, [pc, #344]	@ (8005040 <menu_select+0x238>)
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	701a      	strb	r2, [r3, #0]
 8004eea:	e003      	b.n	8004ef4 <menu_select+0xec>
                default: ui = UI_DASH; break;
 8004eec:	4b54      	ldr	r3, [pc, #336]	@ (8005040 <menu_select+0x238>)
 8004eee:	2201      	movs	r2, #1
 8004ef0:	701a      	strb	r2, [r3, #0]
 8004ef2:	bf00      	nop
            }
            break;
 8004ef4:	e09c      	b.n	8005030 <menu_select+0x228>

        case UI_MANUAL:
            ModelHandle_ToggleManual();
 8004ef6:	f7fe f80d 	bl	8002f14 <ModelHandle_ToggleManual>
            screenNeedsRefresh = true;
 8004efa:	4b53      	ldr	r3, [pc, #332]	@ (8005048 <menu_select+0x240>)
 8004efc:	2201      	movs	r2, #1
 8004efe:	701a      	strb	r2, [r3, #0]
            break;
 8004f00:	e096      	b.n	8005030 <menu_select+0x228>

        case UI_SEMI_AUTO:
            if (!semiAutoEnabled) enable_semi_auto();
 8004f02:	4b52      	ldr	r3, [pc, #328]	@ (800504c <menu_select+0x244>)
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	f083 0301 	eor.w	r3, r3, #1
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d002      	beq.n	8004f16 <menu_select+0x10e>
 8004f10:	f7ff fc72 	bl	80047f8 <enable_semi_auto>
 8004f14:	e001      	b.n	8004f1a <menu_select+0x112>
            else disable_semi_auto();
 8004f16:	f7ff fc7d 	bl	8004814 <disable_semi_auto>
            ui = UI_DASH;
 8004f1a:	4b49      	ldr	r3, [pc, #292]	@ (8005040 <menu_select+0x238>)
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	701a      	strb	r2, [r3, #0]
            break;
 8004f20:	e086      	b.n	8005030 <menu_select+0x228>

        case UI_TIMER: ui = UI_TIMER_EDIT_ON_H; break;
 8004f22:	4b47      	ldr	r3, [pc, #284]	@ (8005040 <menu_select+0x238>)
 8004f24:	2206      	movs	r2, #6
 8004f26:	701a      	strb	r2, [r3, #0]
 8004f28:	e082      	b.n	8005030 <menu_select+0x228>
        case UI_TIMER_EDIT_ON_H: ui = UI_TIMER_EDIT_ON_M; break;
 8004f2a:	4b45      	ldr	r3, [pc, #276]	@ (8005040 <menu_select+0x238>)
 8004f2c:	2207      	movs	r2, #7
 8004f2e:	701a      	strb	r2, [r3, #0]
 8004f30:	e07e      	b.n	8005030 <menu_select+0x228>
        case UI_TIMER_EDIT_ON_M: ui = UI_TIMER_EDIT_OFF_H; break;
 8004f32:	4b43      	ldr	r3, [pc, #268]	@ (8005040 <menu_select+0x238>)
 8004f34:	2208      	movs	r2, #8
 8004f36:	701a      	strb	r2, [r3, #0]
 8004f38:	e07a      	b.n	8005030 <menu_select+0x228>
        case UI_TIMER_EDIT_OFF_H: ui = UI_TIMER_EDIT_OFF_M; break;
 8004f3a:	4b41      	ldr	r3, [pc, #260]	@ (8005040 <menu_select+0x238>)
 8004f3c:	2209      	movs	r2, #9
 8004f3e:	701a      	strb	r2, [r3, #0]
 8004f40:	e076      	b.n	8005030 <menu_select+0x228>
        case UI_TIMER_EDIT_OFF_M:
            apply_timer_settings();
 8004f42:	f7ff fc73 	bl	800482c <apply_timer_settings>
            ui = UI_TIMER;
 8004f46:	4b3e      	ldr	r3, [pc, #248]	@ (8005040 <menu_select+0x238>)
 8004f48:	2205      	movs	r2, #5
 8004f4a:	701a      	strb	r2, [r3, #0]
            break;
 8004f4c:	e070      	b.n	8005030 <menu_select+0x228>

        case UI_SEARCH: ui = UI_SEARCH_EDIT_GAP; break;
 8004f4e:	4b3c      	ldr	r3, [pc, #240]	@ (8005040 <menu_select+0x238>)
 8004f50:	220b      	movs	r2, #11
 8004f52:	701a      	strb	r2, [r3, #0]
 8004f54:	e06c      	b.n	8005030 <menu_select+0x228>
        case UI_SEARCH_EDIT_GAP: ui = UI_SEARCH_EDIT_DRY; break;
 8004f56:	4b3a      	ldr	r3, [pc, #232]	@ (8005040 <menu_select+0x238>)
 8004f58:	220c      	movs	r2, #12
 8004f5a:	701a      	strb	r2, [r3, #0]
 8004f5c:	e068      	b.n	8005030 <menu_select+0x228>
        case UI_SEARCH_EDIT_DRY:
            apply_search_settings();
 8004f5e:	f7ff fc0f 	bl	8004780 <apply_search_settings>
            ui = UI_SEARCH; break;
 8004f62:	4b37      	ldr	r3, [pc, #220]	@ (8005040 <menu_select+0x238>)
 8004f64:	220a      	movs	r2, #10
 8004f66:	701a      	strb	r2, [r3, #0]
 8004f68:	e062      	b.n	8005030 <menu_select+0x228>

        case UI_COUNTDOWN:
            if (countdownActive) {
 8004f6a:	4b39      	ldr	r3, [pc, #228]	@ (8005050 <menu_select+0x248>)
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d005      	beq.n	8004f80 <menu_select+0x178>
                ModelHandle_StopCountdown();
 8004f74:	f7fe f810 	bl	8002f98 <ModelHandle_StopCountdown>
                screenNeedsRefresh = true;
 8004f78:	4b33      	ldr	r3, [pc, #204]	@ (8005048 <menu_select+0x240>)
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	701a      	strb	r2, [r3, #0]
            } else {
                ui = UI_COUNTDOWN_EDIT_MIN;
            }
            break;
 8004f7e:	e057      	b.n	8005030 <menu_select+0x228>
                ui = UI_COUNTDOWN_EDIT_MIN;
 8004f80:	4b2f      	ldr	r3, [pc, #188]	@ (8005040 <menu_select+0x238>)
 8004f82:	220e      	movs	r2, #14
 8004f84:	701a      	strb	r2, [r3, #0]
            break;
 8004f86:	e053      	b.n	8005030 <menu_select+0x228>


        case UI_COUNTDOWN_EDIT_MIN:
            ui = UI_COUNTDOWN_EDIT_REP;
 8004f88:	4b2d      	ldr	r3, [pc, #180]	@ (8005040 <menu_select+0x238>)
 8004f8a:	220f      	movs	r2, #15
 8004f8c:	701a      	strb	r2, [r3, #0]
            break;
 8004f8e:	e04f      	b.n	8005030 <menu_select+0x228>

        case UI_COUNTDOWN_EDIT_REP:
            // after repeats, go to enable/edit screen
            ui = UI_COUNTDOWN_TOGGLE;
 8004f90:	4b2b      	ldr	r3, [pc, #172]	@ (8005040 <menu_select+0x238>)
 8004f92:	2210      	movs	r2, #16
 8004f94:	701a      	strb	r2, [r3, #0]
            break;
 8004f96:	e04b      	b.n	8005030 <menu_select+0x228>

        case UI_COUNTDOWN_TOGGLE:
            // Enable or Edit based on menu index
            // For simplicity, SELECT always means "Enable"
            {
                uint32_t seconds = (uint32_t)edit_countdown_min * 60u;
 8004f98:	4b2e      	ldr	r3, [pc, #184]	@ (8005054 <menu_select+0x24c>)
 8004f9a:	881b      	ldrh	r3, [r3, #0]
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	011b      	lsls	r3, r3, #4
 8004fa2:	1a9b      	subs	r3, r3, r2
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	607b      	str	r3, [r7, #4]
                if (seconds == 0) seconds = 60;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d101      	bne.n	8004fb2 <menu_select+0x1aa>
 8004fae:	233c      	movs	r3, #60	@ 0x3c
 8004fb0:	607b      	str	r3, [r7, #4]
                if (edit_countdown_rep == 0) edit_countdown_rep = 1;
 8004fb2:	4b29      	ldr	r3, [pc, #164]	@ (8005058 <menu_select+0x250>)
 8004fb4:	881b      	ldrh	r3, [r3, #0]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d102      	bne.n	8004fc0 <menu_select+0x1b8>
 8004fba:	4b27      	ldr	r3, [pc, #156]	@ (8005058 <menu_select+0x250>)
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	801a      	strh	r2, [r3, #0]
                apply_countdown_settings();
 8004fc0:	f7ff fc06 	bl	80047d0 <apply_countdown_settings>
                ModelHandle_StartCountdown(seconds, (uint16_t)edit_countdown_rep);
 8004fc4:	4b24      	ldr	r3, [pc, #144]	@ (8005058 <menu_select+0x250>)
 8004fc6:	881b      	ldrh	r3, [r3, #0]
 8004fc8:	4619      	mov	r1, r3
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7fe f82a 	bl	8003024 <ModelHandle_StartCountdown>
                ui = UI_COUNTDOWN;
 8004fd0:	4b1b      	ldr	r3, [pc, #108]	@ (8005040 <menu_select+0x238>)
 8004fd2:	220d      	movs	r2, #13
 8004fd4:	701a      	strb	r2, [r3, #0]
            }
            break;
 8004fd6:	e02b      	b.n	8005030 <menu_select+0x228>


        case UI_TWIST:
            // SELECT toggles enable/stop; UP/DOWN will switch to edit states
            if (twistSettings.twistActive) {
 8004fd8:	4b20      	ldr	r3, [pc, #128]	@ (800505c <menu_select+0x254>)
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d002      	beq.n	8004fe6 <menu_select+0x1de>
                ModelHandle_StopTwist();
 8004fe0:	f7fe f920 	bl	8003224 <ModelHandle_StopTwist>
 8004fe4:	e008      	b.n	8004ff8 <menu_select+0x1f0>
            } else {
                // use current edit buffers (or the applied values) to start
                ModelHandle_StartTwist(edit_twist_on_s, edit_twist_off_s);
 8004fe6:	4b1e      	ldr	r3, [pc, #120]	@ (8005060 <menu_select+0x258>)
 8004fe8:	881b      	ldrh	r3, [r3, #0]
 8004fea:	461a      	mov	r2, r3
 8004fec:	4b1d      	ldr	r3, [pc, #116]	@ (8005064 <menu_select+0x25c>)
 8004fee:	881b      	ldrh	r3, [r3, #0]
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	4610      	mov	r0, r2
 8004ff4:	f7fe f8d2 	bl	800319c <ModelHandle_StartTwist>
            }
            screenNeedsRefresh = true;
 8004ff8:	4b13      	ldr	r3, [pc, #76]	@ (8005048 <menu_select+0x240>)
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	701a      	strb	r2, [r3, #0]
            break;
 8004ffe:	e017      	b.n	8005030 <menu_select+0x228>

        case UI_TWIST_EDIT_ON:      ui = UI_TWIST_EDIT_OFF; break;
 8005000:	4b0f      	ldr	r3, [pc, #60]	@ (8005040 <menu_select+0x238>)
 8005002:	2213      	movs	r2, #19
 8005004:	701a      	strb	r2, [r3, #0]
 8005006:	e013      	b.n	8005030 <menu_select+0x228>
        case UI_TWIST_EDIT_OFF:
            apply_twist_settings();   // writes into twistSettings
 8005008:	f7ff fbce 	bl	80047a8 <apply_twist_settings>
            // If active, apply live (optional, keeps running with new values)
            if (twistSettings.twistActive) {
 800500c:	4b13      	ldr	r3, [pc, #76]	@ (800505c <menu_select+0x254>)
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d008      	beq.n	8005026 <menu_select+0x21e>
                ModelHandle_StartTwist(twistSettings.onDurationSeconds,
 8005014:	4b11      	ldr	r3, [pc, #68]	@ (800505c <menu_select+0x254>)
 8005016:	885b      	ldrh	r3, [r3, #2]
 8005018:	461a      	mov	r2, r3
                                       twistSettings.offDurationSeconds);
 800501a:	4b10      	ldr	r3, [pc, #64]	@ (800505c <menu_select+0x254>)
 800501c:	889b      	ldrh	r3, [r3, #4]
                ModelHandle_StartTwist(twistSettings.onDurationSeconds,
 800501e:	4619      	mov	r1, r3
 8005020:	4610      	mov	r0, r2
 8005022:	f7fe f8bb 	bl	800319c <ModelHandle_StartTwist>
            }
            ui = UI_TWIST; break;
 8005026:	4b06      	ldr	r3, [pc, #24]	@ (8005040 <menu_select+0x238>)
 8005028:	2211      	movs	r2, #17
 800502a:	701a      	strb	r2, [r3, #0]
 800502c:	e000      	b.n	8005030 <menu_select+0x228>


        default: break;
 800502e:	bf00      	nop
    }
    screenNeedsRefresh = true;
 8005030:	4b05      	ldr	r3, [pc, #20]	@ (8005048 <menu_select+0x240>)
 8005032:	2201      	movs	r2, #1
 8005034:	701a      	strb	r2, [r3, #0]
}
 8005036:	bf00      	nop
 8005038:	3708      	adds	r7, #8
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	20000620 	.word	0x20000620
 8005044:	20000630 	.word	0x20000630
 8005048:	20000621 	.word	0x20000621
 800504c:	2000062c 	.word	0x2000062c
 8005050:	2000057e 	.word	0x2000057e
 8005054:	20000058 	.word	0x20000058
 8005058:	2000005a 	.word	0x2000005a
 800505c:	20000028 	.word	0x20000028
 8005060:	20000054 	.word	0x20000054
 8005064:	20000056 	.word	0x20000056

08005068 <menu_reset>:

static void menu_reset(void){
 8005068:	b580      	push	{r7, lr}
 800506a:	af00      	add	r7, sp, #0
    refreshInactivityTimer();
 800506c:	f7ff f88e 	bl	800418c <refreshInactivityTimer>

    switch (ui) {
 8005070:	4b29      	ldr	r3, [pc, #164]	@ (8005118 <menu_reset+0xb0>)
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	3b01      	subs	r3, #1
 8005076:	2b12      	cmp	r3, #18
 8005078:	d844      	bhi.n	8005104 <menu_reset+0x9c>
 800507a:	a201      	add	r2, pc, #4	@ (adr r2, 8005080 <menu_reset+0x18>)
 800507c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005080:	080050dd 	.word	0x080050dd
 8005084:	080050d5 	.word	0x080050d5
 8005088:	080050cd 	.word	0x080050cd
 800508c:	080050cd 	.word	0x080050cd
 8005090:	080050cd 	.word	0x080050cd
 8005094:	080050e5 	.word	0x080050e5
 8005098:	080050e5 	.word	0x080050e5
 800509c:	080050e5 	.word	0x080050e5
 80050a0:	080050e5 	.word	0x080050e5
 80050a4:	080050cd 	.word	0x080050cd
 80050a8:	080050ed 	.word	0x080050ed
 80050ac:	080050ed 	.word	0x080050ed
 80050b0:	080050cd 	.word	0x080050cd
 80050b4:	080050f5 	.word	0x080050f5
 80050b8:	080050f5 	.word	0x080050f5
 80050bc:	08005105 	.word	0x08005105
 80050c0:	080050cd 	.word	0x080050cd
 80050c4:	080050fd 	.word	0x080050fd
 80050c8:	080050fd 	.word	0x080050fd
        case UI_MANUAL:
        case UI_SEMI_AUTO:
        case UI_TIMER:
        case UI_SEARCH:
        case UI_COUNTDOWN:
        case UI_TWIST: ui = UI_MENU; break;
 80050cc:	4b12      	ldr	r3, [pc, #72]	@ (8005118 <menu_reset+0xb0>)
 80050ce:	2202      	movs	r2, #2
 80050d0:	701a      	strb	r2, [r3, #0]
 80050d2:	e01b      	b.n	800510c <menu_reset+0xa4>
        case UI_MENU: ui = UI_DASH; break;
 80050d4:	4b10      	ldr	r3, [pc, #64]	@ (8005118 <menu_reset+0xb0>)
 80050d6:	2201      	movs	r2, #1
 80050d8:	701a      	strb	r2, [r3, #0]
 80050da:	e017      	b.n	800510c <menu_reset+0xa4>
        case UI_DASH: ui = UI_WELCOME; break;
 80050dc:	4b0e      	ldr	r3, [pc, #56]	@ (8005118 <menu_reset+0xb0>)
 80050de:	2200      	movs	r2, #0
 80050e0:	701a      	strb	r2, [r3, #0]
 80050e2:	e013      	b.n	800510c <menu_reset+0xa4>
        case UI_TIMER_EDIT_ON_H:
        case UI_TIMER_EDIT_ON_M:
        case UI_TIMER_EDIT_OFF_H:
        case UI_TIMER_EDIT_OFF_M: ui = UI_TIMER; break;
 80050e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005118 <menu_reset+0xb0>)
 80050e6:	2205      	movs	r2, #5
 80050e8:	701a      	strb	r2, [r3, #0]
 80050ea:	e00f      	b.n	800510c <menu_reset+0xa4>
        case UI_SEARCH_EDIT_GAP:
        case UI_SEARCH_EDIT_DRY: ui = UI_SEARCH; break;
 80050ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005118 <menu_reset+0xb0>)
 80050ee:	220a      	movs	r2, #10
 80050f0:	701a      	strb	r2, [r3, #0]
 80050f2:	e00b      	b.n	800510c <menu_reset+0xa4>
        case UI_COUNTDOWN_EDIT_MIN:
        case UI_COUNTDOWN_EDIT_REP: ui = UI_COUNTDOWN; break;  // NEW: back from repeats editor
 80050f4:	4b08      	ldr	r3, [pc, #32]	@ (8005118 <menu_reset+0xb0>)
 80050f6:	220d      	movs	r2, #13
 80050f8:	701a      	strb	r2, [r3, #0]
 80050fa:	e007      	b.n	800510c <menu_reset+0xa4>
        case UI_TWIST_EDIT_ON:
        case UI_TWIST_EDIT_OFF: ui = UI_TWIST; break;
 80050fc:	4b06      	ldr	r3, [pc, #24]	@ (8005118 <menu_reset+0xb0>)
 80050fe:	2211      	movs	r2, #17
 8005100:	701a      	strb	r2, [r3, #0]
 8005102:	e003      	b.n	800510c <menu_reset+0xa4>
        default: ui = UI_MENU; break;
 8005104:	4b04      	ldr	r3, [pc, #16]	@ (8005118 <menu_reset+0xb0>)
 8005106:	2202      	movs	r2, #2
 8005108:	701a      	strb	r2, [r3, #0]
 800510a:	bf00      	nop
    }
    screenNeedsRefresh = true;
 800510c:	4b03      	ldr	r3, [pc, #12]	@ (800511c <menu_reset+0xb4>)
 800510e:	2201      	movs	r2, #1
 8005110:	701a      	strb	r2, [r3, #0]
}
 8005112:	bf00      	nop
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	20000620 	.word	0x20000620
 800511c:	20000621 	.word	0x20000621

08005120 <Screen_HandleButton>:

/* ===== Public button handler ===== */
void Screen_HandleButton(UiButton b)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	4603      	mov	r3, r0
 8005128:	71fb      	strb	r3, [r7, #7]
    if (b == BTN_NONE) return;
 800512a:	79fb      	ldrb	r3, [r7, #7]
 800512c:	2b00      	cmp	r3, #0
 800512e:	f000 8288 	beq.w	8005642 <Screen_HandleButton+0x522>

    /* Quick RESET → manual toggle (your existing behavior) */
    if (b == BTN_RESET) {
 8005132:	79fb      	ldrb	r3, [r7, #7]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d102      	bne.n	800513e <Screen_HandleButton+0x1e>
        ModelHandle_ToggleManual();
 8005138:	f7fd feec 	bl	8002f14 <ModelHandle_ToggleManual>
        return;
 800513c:	e282      	b.n	8005644 <Screen_HandleButton+0x524>
    }

    /* =======================
       UP key
       ======================= */
    if (b == BTN_UP) {
 800513e:	79fb      	ldrb	r3, [r7, #7]
 8005140:	2b03      	cmp	r3, #3
 8005142:	f040 80bf 	bne.w	80052c4 <Screen_HandleButton+0x1a4>
        switch (ui) {
 8005146:	4b9e      	ldr	r3, [pc, #632]	@ (80053c0 <Screen_HandleButton+0x2a0>)
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	3b02      	subs	r3, #2
 800514c:	2b11      	cmp	r3, #17
 800514e:	f200 80a6 	bhi.w	800529e <Screen_HandleButton+0x17e>
 8005152:	a201      	add	r2, pc, #4	@ (adr r2, 8005158 <Screen_HandleButton+0x38>)
 8005154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005158:	080051a1 	.word	0x080051a1
 800515c:	0800529f 	.word	0x0800529f
 8005160:	0800529f 	.word	0x0800529f
 8005164:	0800529f 	.word	0x0800529f
 8005168:	080051b5 	.word	0x080051b5
 800516c:	080051cb 	.word	0x080051cb
 8005170:	080051e1 	.word	0x080051e1
 8005174:	080051f7 	.word	0x080051f7
 8005178:	0800520d 	.word	0x0800520d
 800517c:	0800521b 	.word	0x0800521b
 8005180:	08005229 	.word	0x08005229
 8005184:	0800529f 	.word	0x0800529f
 8005188:	08005237 	.word	0x08005237
 800518c:	08005245 	.word	0x08005245
 8005190:	08005253 	.word	0x08005253
 8005194:	08005261 	.word	0x08005261
 8005198:	0800526f 	.word	0x0800526f
 800519c:	08005287 	.word	0x08005287
            case UI_MENU: if (menu_idx > 0) menu_idx--; break;
 80051a0:	4b88      	ldr	r3, [pc, #544]	@ (80053c4 <Screen_HandleButton+0x2a4>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	dd7c      	ble.n	80052a2 <Screen_HandleButton+0x182>
 80051a8:	4b86      	ldr	r3, [pc, #536]	@ (80053c4 <Screen_HandleButton+0x2a4>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	3b01      	subs	r3, #1
 80051ae:	4a85      	ldr	r2, [pc, #532]	@ (80053c4 <Screen_HandleButton+0x2a4>)
 80051b0:	6013      	str	r3, [r2, #0]
 80051b2:	e076      	b.n	80052a2 <Screen_HandleButton+0x182>

            /* Timer edits */
            case UI_TIMER_EDIT_ON_H:  if (edit_timer_on_h  < 23) edit_timer_on_h++;  break;
 80051b4:	4b84      	ldr	r3, [pc, #528]	@ (80053c8 <Screen_HandleButton+0x2a8>)
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	2b16      	cmp	r3, #22
 80051ba:	d874      	bhi.n	80052a6 <Screen_HandleButton+0x186>
 80051bc:	4b82      	ldr	r3, [pc, #520]	@ (80053c8 <Screen_HandleButton+0x2a8>)
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	3301      	adds	r3, #1
 80051c2:	b2da      	uxtb	r2, r3
 80051c4:	4b80      	ldr	r3, [pc, #512]	@ (80053c8 <Screen_HandleButton+0x2a8>)
 80051c6:	701a      	strb	r2, [r3, #0]
 80051c8:	e06d      	b.n	80052a6 <Screen_HandleButton+0x186>
            case UI_TIMER_EDIT_ON_M:  if (edit_timer_on_m  < 59) edit_timer_on_m++;  break;
 80051ca:	4b80      	ldr	r3, [pc, #512]	@ (80053cc <Screen_HandleButton+0x2ac>)
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	2b3a      	cmp	r3, #58	@ 0x3a
 80051d0:	d86b      	bhi.n	80052aa <Screen_HandleButton+0x18a>
 80051d2:	4b7e      	ldr	r3, [pc, #504]	@ (80053cc <Screen_HandleButton+0x2ac>)
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	3301      	adds	r3, #1
 80051d8:	b2da      	uxtb	r2, r3
 80051da:	4b7c      	ldr	r3, [pc, #496]	@ (80053cc <Screen_HandleButton+0x2ac>)
 80051dc:	701a      	strb	r2, [r3, #0]
 80051de:	e064      	b.n	80052aa <Screen_HandleButton+0x18a>
            case UI_TIMER_EDIT_OFF_H: if (edit_timer_off_h < 23) edit_timer_off_h++; break;
 80051e0:	4b7b      	ldr	r3, [pc, #492]	@ (80053d0 <Screen_HandleButton+0x2b0>)
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	2b16      	cmp	r3, #22
 80051e6:	d862      	bhi.n	80052ae <Screen_HandleButton+0x18e>
 80051e8:	4b79      	ldr	r3, [pc, #484]	@ (80053d0 <Screen_HandleButton+0x2b0>)
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	3301      	adds	r3, #1
 80051ee:	b2da      	uxtb	r2, r3
 80051f0:	4b77      	ldr	r3, [pc, #476]	@ (80053d0 <Screen_HandleButton+0x2b0>)
 80051f2:	701a      	strb	r2, [r3, #0]
 80051f4:	e05b      	b.n	80052ae <Screen_HandleButton+0x18e>
            case UI_TIMER_EDIT_OFF_M: if (edit_timer_off_m < 59) edit_timer_off_m++; break;
 80051f6:	4b77      	ldr	r3, [pc, #476]	@ (80053d4 <Screen_HandleButton+0x2b4>)
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	2b3a      	cmp	r3, #58	@ 0x3a
 80051fc:	d859      	bhi.n	80052b2 <Screen_HandleButton+0x192>
 80051fe:	4b75      	ldr	r3, [pc, #468]	@ (80053d4 <Screen_HandleButton+0x2b4>)
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	3301      	adds	r3, #1
 8005204:	b2da      	uxtb	r2, r3
 8005206:	4b73      	ldr	r3, [pc, #460]	@ (80053d4 <Screen_HandleButton+0x2b4>)
 8005208:	701a      	strb	r2, [r3, #0]
 800520a:	e052      	b.n	80052b2 <Screen_HandleButton+0x192>

            /* Search edits */
            case UI_SEARCH:            ui = UI_SEARCH_EDIT_GAP; screenNeedsRefresh = true; return;
 800520c:	4b6c      	ldr	r3, [pc, #432]	@ (80053c0 <Screen_HandleButton+0x2a0>)
 800520e:	220b      	movs	r2, #11
 8005210:	701a      	strb	r2, [r3, #0]
 8005212:	4b71      	ldr	r3, [pc, #452]	@ (80053d8 <Screen_HandleButton+0x2b8>)
 8005214:	2201      	movs	r2, #1
 8005216:	701a      	strb	r2, [r3, #0]
 8005218:	e214      	b.n	8005644 <Screen_HandleButton+0x524>
            case UI_SEARCH_EDIT_GAP:   edit_search_gap_s += 5;  break;
 800521a:	4b70      	ldr	r3, [pc, #448]	@ (80053dc <Screen_HandleButton+0x2bc>)
 800521c:	881b      	ldrh	r3, [r3, #0]
 800521e:	3305      	adds	r3, #5
 8005220:	b29a      	uxth	r2, r3
 8005222:	4b6e      	ldr	r3, [pc, #440]	@ (80053dc <Screen_HandleButton+0x2bc>)
 8005224:	801a      	strh	r2, [r3, #0]
 8005226:	e049      	b.n	80052bc <Screen_HandleButton+0x19c>
            case UI_SEARCH_EDIT_DRY:   edit_search_dry_s += 1;  break;
 8005228:	4b6d      	ldr	r3, [pc, #436]	@ (80053e0 <Screen_HandleButton+0x2c0>)
 800522a:	881b      	ldrh	r3, [r3, #0]
 800522c:	3301      	adds	r3, #1
 800522e:	b29a      	uxth	r2, r3
 8005230:	4b6b      	ldr	r3, [pc, #428]	@ (80053e0 <Screen_HandleButton+0x2c0>)
 8005232:	801a      	strh	r2, [r3, #0]
 8005234:	e042      	b.n	80052bc <Screen_HandleButton+0x19c>

            /* Countdown edits */
            case UI_COUNTDOWN_EDIT_MIN: edit_countdown_min++; break;
 8005236:	4b6b      	ldr	r3, [pc, #428]	@ (80053e4 <Screen_HandleButton+0x2c4>)
 8005238:	881b      	ldrh	r3, [r3, #0]
 800523a:	3301      	adds	r3, #1
 800523c:	b29a      	uxth	r2, r3
 800523e:	4b69      	ldr	r3, [pc, #420]	@ (80053e4 <Screen_HandleButton+0x2c4>)
 8005240:	801a      	strh	r2, [r3, #0]
 8005242:	e03b      	b.n	80052bc <Screen_HandleButton+0x19c>
            case UI_COUNTDOWN_EDIT_REP: edit_countdown_rep++; break;
 8005244:	4b68      	ldr	r3, [pc, #416]	@ (80053e8 <Screen_HandleButton+0x2c8>)
 8005246:	881b      	ldrh	r3, [r3, #0]
 8005248:	3301      	adds	r3, #1
 800524a:	b29a      	uxth	r2, r3
 800524c:	4b66      	ldr	r3, [pc, #408]	@ (80053e8 <Screen_HandleButton+0x2c8>)
 800524e:	801a      	strh	r2, [r3, #0]
 8005250:	e034      	b.n	80052bc <Screen_HandleButton+0x19c>
            case UI_COUNTDOWN_TOGGLE:   ui = UI_COUNTDOWN_EDIT_MIN; screenNeedsRefresh = true; return;
 8005252:	4b5b      	ldr	r3, [pc, #364]	@ (80053c0 <Screen_HandleButton+0x2a0>)
 8005254:	220e      	movs	r2, #14
 8005256:	701a      	strb	r2, [r3, #0]
 8005258:	4b5f      	ldr	r3, [pc, #380]	@ (80053d8 <Screen_HandleButton+0x2b8>)
 800525a:	2201      	movs	r2, #1
 800525c:	701a      	strb	r2, [r3, #0]
 800525e:	e1f1      	b.n	8005644 <Screen_HandleButton+0x524>

            /* Twist edits */
            case UI_TWIST:             ui = UI_TWIST_EDIT_ON; screenNeedsRefresh = true; return;
 8005260:	4b57      	ldr	r3, [pc, #348]	@ (80053c0 <Screen_HandleButton+0x2a0>)
 8005262:	2212      	movs	r2, #18
 8005264:	701a      	strb	r2, [r3, #0]
 8005266:	4b5c      	ldr	r3, [pc, #368]	@ (80053d8 <Screen_HandleButton+0x2b8>)
 8005268:	2201      	movs	r2, #1
 800526a:	701a      	strb	r2, [r3, #0]
 800526c:	e1ea      	b.n	8005644 <Screen_HandleButton+0x524>
            case UI_TWIST_EDIT_ON:     if (edit_twist_on_s  < 600) edit_twist_on_s++;  break;
 800526e:	4b5f      	ldr	r3, [pc, #380]	@ (80053ec <Screen_HandleButton+0x2cc>)
 8005270:	881b      	ldrh	r3, [r3, #0]
 8005272:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8005276:	d21e      	bcs.n	80052b6 <Screen_HandleButton+0x196>
 8005278:	4b5c      	ldr	r3, [pc, #368]	@ (80053ec <Screen_HandleButton+0x2cc>)
 800527a:	881b      	ldrh	r3, [r3, #0]
 800527c:	3301      	adds	r3, #1
 800527e:	b29a      	uxth	r2, r3
 8005280:	4b5a      	ldr	r3, [pc, #360]	@ (80053ec <Screen_HandleButton+0x2cc>)
 8005282:	801a      	strh	r2, [r3, #0]
 8005284:	e017      	b.n	80052b6 <Screen_HandleButton+0x196>
            case UI_TWIST_EDIT_OFF:    if (edit_twist_off_s < 600) edit_twist_off_s++; break;
 8005286:	4b5a      	ldr	r3, [pc, #360]	@ (80053f0 <Screen_HandleButton+0x2d0>)
 8005288:	881b      	ldrh	r3, [r3, #0]
 800528a:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 800528e:	d214      	bcs.n	80052ba <Screen_HandleButton+0x19a>
 8005290:	4b57      	ldr	r3, [pc, #348]	@ (80053f0 <Screen_HandleButton+0x2d0>)
 8005292:	881b      	ldrh	r3, [r3, #0]
 8005294:	3301      	adds	r3, #1
 8005296:	b29a      	uxth	r2, r3
 8005298:	4b55      	ldr	r3, [pc, #340]	@ (80053f0 <Screen_HandleButton+0x2d0>)
 800529a:	801a      	strh	r2, [r3, #0]
 800529c:	e00d      	b.n	80052ba <Screen_HandleButton+0x19a>

            default: break;
 800529e:	bf00      	nop
 80052a0:	e00c      	b.n	80052bc <Screen_HandleButton+0x19c>
            case UI_MENU: if (menu_idx > 0) menu_idx--; break;
 80052a2:	bf00      	nop
 80052a4:	e00a      	b.n	80052bc <Screen_HandleButton+0x19c>
            case UI_TIMER_EDIT_ON_H:  if (edit_timer_on_h  < 23) edit_timer_on_h++;  break;
 80052a6:	bf00      	nop
 80052a8:	e008      	b.n	80052bc <Screen_HandleButton+0x19c>
            case UI_TIMER_EDIT_ON_M:  if (edit_timer_on_m  < 59) edit_timer_on_m++;  break;
 80052aa:	bf00      	nop
 80052ac:	e006      	b.n	80052bc <Screen_HandleButton+0x19c>
            case UI_TIMER_EDIT_OFF_H: if (edit_timer_off_h < 23) edit_timer_off_h++; break;
 80052ae:	bf00      	nop
 80052b0:	e004      	b.n	80052bc <Screen_HandleButton+0x19c>
            case UI_TIMER_EDIT_OFF_M: if (edit_timer_off_m < 59) edit_timer_off_m++; break;
 80052b2:	bf00      	nop
 80052b4:	e002      	b.n	80052bc <Screen_HandleButton+0x19c>
            case UI_TWIST_EDIT_ON:     if (edit_twist_on_s  < 600) edit_twist_on_s++;  break;
 80052b6:	bf00      	nop
 80052b8:	e000      	b.n	80052bc <Screen_HandleButton+0x19c>
            case UI_TWIST_EDIT_OFF:    if (edit_twist_off_s < 600) edit_twist_off_s++; break;
 80052ba:	bf00      	nop
        }
        screenNeedsRefresh = true;
 80052bc:	4b46      	ldr	r3, [pc, #280]	@ (80053d8 <Screen_HandleButton+0x2b8>)
 80052be:	2201      	movs	r2, #1
 80052c0:	701a      	strb	r2, [r3, #0]
        return;
 80052c2:	e1bf      	b.n	8005644 <Screen_HandleButton+0x524>
    }

    /* =======================
       DOWN key
       ======================= */
    if (b == BTN_DOWN) {
 80052c4:	79fb      	ldrb	r3, [r7, #7]
 80052c6:	2b04      	cmp	r3, #4
 80052c8:	f040 80e6 	bne.w	8005498 <Screen_HandleButton+0x378>
        switch (ui) {
 80052cc:	4b3c      	ldr	r3, [pc, #240]	@ (80053c0 <Screen_HandleButton+0x2a0>)
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	3b02      	subs	r3, #2
 80052d2:	2b11      	cmp	r3, #17
 80052d4:	f200 80c5 	bhi.w	8005462 <Screen_HandleButton+0x342>
 80052d8:	a201      	add	r2, pc, #4	@ (adr r2, 80052e0 <Screen_HandleButton+0x1c0>)
 80052da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052de:	bf00      	nop
 80052e0:	08005329 	.word	0x08005329
 80052e4:	08005463 	.word	0x08005463
 80052e8:	08005463 	.word	0x08005463
 80052ec:	08005463 	.word	0x08005463
 80052f0:	0800533f 	.word	0x0800533f
 80052f4:	08005357 	.word	0x08005357
 80052f8:	0800536f 	.word	0x0800536f
 80052fc:	08005385 	.word	0x08005385
 8005300:	0800539b 	.word	0x0800539b
 8005304:	080053a9 	.word	0x080053a9
 8005308:	080053f5 	.word	0x080053f5
 800530c:	08005463 	.word	0x08005463
 8005310:	0800540b 	.word	0x0800540b
 8005314:	08005421 	.word	0x08005421
 8005318:	08005463 	.word	0x08005463
 800531c:	08005463 	.word	0x08005463
 8005320:	08005437 	.word	0x08005437
 8005324:	0800544d 	.word	0x0800544d
            case UI_MENU: if (menu_idx < (int)(MAIN_MENU_COUNT - 1)) menu_idx++; break;
 8005328:	4b26      	ldr	r3, [pc, #152]	@ (80053c4 <Screen_HandleButton+0x2a4>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2b05      	cmp	r3, #5
 800532e:	f300 809a 	bgt.w	8005466 <Screen_HandleButton+0x346>
 8005332:	4b24      	ldr	r3, [pc, #144]	@ (80053c4 <Screen_HandleButton+0x2a4>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	3301      	adds	r3, #1
 8005338:	4a22      	ldr	r2, [pc, #136]	@ (80053c4 <Screen_HandleButton+0x2a4>)
 800533a:	6013      	str	r3, [r2, #0]
 800533c:	e093      	b.n	8005466 <Screen_HandleButton+0x346>

            /* Timer edits */
            case UI_TIMER_EDIT_ON_H:  if (edit_timer_on_h  > 0) edit_timer_on_h--;  break;
 800533e:	4b22      	ldr	r3, [pc, #136]	@ (80053c8 <Screen_HandleButton+0x2a8>)
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	f000 8091 	beq.w	800546a <Screen_HandleButton+0x34a>
 8005348:	4b1f      	ldr	r3, [pc, #124]	@ (80053c8 <Screen_HandleButton+0x2a8>)
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	3b01      	subs	r3, #1
 800534e:	b2da      	uxtb	r2, r3
 8005350:	4b1d      	ldr	r3, [pc, #116]	@ (80053c8 <Screen_HandleButton+0x2a8>)
 8005352:	701a      	strb	r2, [r3, #0]
 8005354:	e089      	b.n	800546a <Screen_HandleButton+0x34a>
            case UI_TIMER_EDIT_ON_M:  if (edit_timer_on_m  > 0) edit_timer_on_m--;  break;
 8005356:	4b1d      	ldr	r3, [pc, #116]	@ (80053cc <Screen_HandleButton+0x2ac>)
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	f000 8087 	beq.w	800546e <Screen_HandleButton+0x34e>
 8005360:	4b1a      	ldr	r3, [pc, #104]	@ (80053cc <Screen_HandleButton+0x2ac>)
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	3b01      	subs	r3, #1
 8005366:	b2da      	uxtb	r2, r3
 8005368:	4b18      	ldr	r3, [pc, #96]	@ (80053cc <Screen_HandleButton+0x2ac>)
 800536a:	701a      	strb	r2, [r3, #0]
 800536c:	e07f      	b.n	800546e <Screen_HandleButton+0x34e>
            case UI_TIMER_EDIT_OFF_H: if (edit_timer_off_h > 0) edit_timer_off_h--; break;
 800536e:	4b18      	ldr	r3, [pc, #96]	@ (80053d0 <Screen_HandleButton+0x2b0>)
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d07d      	beq.n	8005472 <Screen_HandleButton+0x352>
 8005376:	4b16      	ldr	r3, [pc, #88]	@ (80053d0 <Screen_HandleButton+0x2b0>)
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	3b01      	subs	r3, #1
 800537c:	b2da      	uxtb	r2, r3
 800537e:	4b14      	ldr	r3, [pc, #80]	@ (80053d0 <Screen_HandleButton+0x2b0>)
 8005380:	701a      	strb	r2, [r3, #0]
 8005382:	e076      	b.n	8005472 <Screen_HandleButton+0x352>
            case UI_TIMER_EDIT_OFF_M: if (edit_timer_off_m > 0) edit_timer_off_m--; break;
 8005384:	4b13      	ldr	r3, [pc, #76]	@ (80053d4 <Screen_HandleButton+0x2b4>)
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d074      	beq.n	8005476 <Screen_HandleButton+0x356>
 800538c:	4b11      	ldr	r3, [pc, #68]	@ (80053d4 <Screen_HandleButton+0x2b4>)
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	3b01      	subs	r3, #1
 8005392:	b2da      	uxtb	r2, r3
 8005394:	4b0f      	ldr	r3, [pc, #60]	@ (80053d4 <Screen_HandleButton+0x2b4>)
 8005396:	701a      	strb	r2, [r3, #0]
 8005398:	e06d      	b.n	8005476 <Screen_HandleButton+0x356>

            /* Search edits */
            case UI_SEARCH:            ui = UI_SEARCH_EDIT_GAP; screenNeedsRefresh = true; return;
 800539a:	4b09      	ldr	r3, [pc, #36]	@ (80053c0 <Screen_HandleButton+0x2a0>)
 800539c:	220b      	movs	r2, #11
 800539e:	701a      	strb	r2, [r3, #0]
 80053a0:	4b0d      	ldr	r3, [pc, #52]	@ (80053d8 <Screen_HandleButton+0x2b8>)
 80053a2:	2201      	movs	r2, #1
 80053a4:	701a      	strb	r2, [r3, #0]
 80053a6:	e14d      	b.n	8005644 <Screen_HandleButton+0x524>
            case UI_SEARCH_EDIT_GAP:   if (edit_search_gap_s > 1) edit_search_gap_s -= 5; break;
 80053a8:	4b0c      	ldr	r3, [pc, #48]	@ (80053dc <Screen_HandleButton+0x2bc>)
 80053aa:	881b      	ldrh	r3, [r3, #0]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d964      	bls.n	800547a <Screen_HandleButton+0x35a>
 80053b0:	4b0a      	ldr	r3, [pc, #40]	@ (80053dc <Screen_HandleButton+0x2bc>)
 80053b2:	881b      	ldrh	r3, [r3, #0]
 80053b4:	3b05      	subs	r3, #5
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	4b08      	ldr	r3, [pc, #32]	@ (80053dc <Screen_HandleButton+0x2bc>)
 80053ba:	801a      	strh	r2, [r3, #0]
 80053bc:	e05d      	b.n	800547a <Screen_HandleButton+0x35a>
 80053be:	bf00      	nop
 80053c0:	20000620 	.word	0x20000620
 80053c4:	20000630 	.word	0x20000630
 80053c8:	2000004c 	.word	0x2000004c
 80053cc:	2000004d 	.word	0x2000004d
 80053d0:	2000004e 	.word	0x2000004e
 80053d4:	2000004f 	.word	0x2000004f
 80053d8:	20000621 	.word	0x20000621
 80053dc:	20000050 	.word	0x20000050
 80053e0:	20000052 	.word	0x20000052
 80053e4:	20000058 	.word	0x20000058
 80053e8:	2000005a 	.word	0x2000005a
 80053ec:	20000054 	.word	0x20000054
 80053f0:	20000056 	.word	0x20000056
            case UI_SEARCH_EDIT_DRY:   if (edit_search_dry_s > 1) edit_search_dry_s -= 1; break;
 80053f4:	4b95      	ldr	r3, [pc, #596]	@ (800564c <Screen_HandleButton+0x52c>)
 80053f6:	881b      	ldrh	r3, [r3, #0]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d940      	bls.n	800547e <Screen_HandleButton+0x35e>
 80053fc:	4b93      	ldr	r3, [pc, #588]	@ (800564c <Screen_HandleButton+0x52c>)
 80053fe:	881b      	ldrh	r3, [r3, #0]
 8005400:	3b01      	subs	r3, #1
 8005402:	b29a      	uxth	r2, r3
 8005404:	4b91      	ldr	r3, [pc, #580]	@ (800564c <Screen_HandleButton+0x52c>)
 8005406:	801a      	strh	r2, [r3, #0]
 8005408:	e039      	b.n	800547e <Screen_HandleButton+0x35e>

            /* Countdown edits */
            case UI_COUNTDOWN_EDIT_MIN: if (edit_countdown_min > 1) edit_countdown_min--; break;
 800540a:	4b91      	ldr	r3, [pc, #580]	@ (8005650 <Screen_HandleButton+0x530>)
 800540c:	881b      	ldrh	r3, [r3, #0]
 800540e:	2b01      	cmp	r3, #1
 8005410:	d937      	bls.n	8005482 <Screen_HandleButton+0x362>
 8005412:	4b8f      	ldr	r3, [pc, #572]	@ (8005650 <Screen_HandleButton+0x530>)
 8005414:	881b      	ldrh	r3, [r3, #0]
 8005416:	3b01      	subs	r3, #1
 8005418:	b29a      	uxth	r2, r3
 800541a:	4b8d      	ldr	r3, [pc, #564]	@ (8005650 <Screen_HandleButton+0x530>)
 800541c:	801a      	strh	r2, [r3, #0]
 800541e:	e030      	b.n	8005482 <Screen_HandleButton+0x362>
            case UI_COUNTDOWN_EDIT_REP: if (edit_countdown_rep > 1) edit_countdown_rep--; break;
 8005420:	4b8c      	ldr	r3, [pc, #560]	@ (8005654 <Screen_HandleButton+0x534>)
 8005422:	881b      	ldrh	r3, [r3, #0]
 8005424:	2b01      	cmp	r3, #1
 8005426:	d92e      	bls.n	8005486 <Screen_HandleButton+0x366>
 8005428:	4b8a      	ldr	r3, [pc, #552]	@ (8005654 <Screen_HandleButton+0x534>)
 800542a:	881b      	ldrh	r3, [r3, #0]
 800542c:	3b01      	subs	r3, #1
 800542e:	b29a      	uxth	r2, r3
 8005430:	4b88      	ldr	r3, [pc, #544]	@ (8005654 <Screen_HandleButton+0x534>)
 8005432:	801a      	strh	r2, [r3, #0]
 8005434:	e027      	b.n	8005486 <Screen_HandleButton+0x366>

            /* Twist edits */
            case UI_TWIST_EDIT_ON:   if (edit_twist_on_s  > 1) edit_twist_on_s--;  break;
 8005436:	4b88      	ldr	r3, [pc, #544]	@ (8005658 <Screen_HandleButton+0x538>)
 8005438:	881b      	ldrh	r3, [r3, #0]
 800543a:	2b01      	cmp	r3, #1
 800543c:	d925      	bls.n	800548a <Screen_HandleButton+0x36a>
 800543e:	4b86      	ldr	r3, [pc, #536]	@ (8005658 <Screen_HandleButton+0x538>)
 8005440:	881b      	ldrh	r3, [r3, #0]
 8005442:	3b01      	subs	r3, #1
 8005444:	b29a      	uxth	r2, r3
 8005446:	4b84      	ldr	r3, [pc, #528]	@ (8005658 <Screen_HandleButton+0x538>)
 8005448:	801a      	strh	r2, [r3, #0]
 800544a:	e01e      	b.n	800548a <Screen_HandleButton+0x36a>
            case UI_TWIST_EDIT_OFF:  if (edit_twist_off_s > 1) edit_twist_off_s--; break;
 800544c:	4b83      	ldr	r3, [pc, #524]	@ (800565c <Screen_HandleButton+0x53c>)
 800544e:	881b      	ldrh	r3, [r3, #0]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d91c      	bls.n	800548e <Screen_HandleButton+0x36e>
 8005454:	4b81      	ldr	r3, [pc, #516]	@ (800565c <Screen_HandleButton+0x53c>)
 8005456:	881b      	ldrh	r3, [r3, #0]
 8005458:	3b01      	subs	r3, #1
 800545a:	b29a      	uxth	r2, r3
 800545c:	4b7f      	ldr	r3, [pc, #508]	@ (800565c <Screen_HandleButton+0x53c>)
 800545e:	801a      	strh	r2, [r3, #0]
 8005460:	e015      	b.n	800548e <Screen_HandleButton+0x36e>

            default: break;
 8005462:	bf00      	nop
 8005464:	e014      	b.n	8005490 <Screen_HandleButton+0x370>
            case UI_MENU: if (menu_idx < (int)(MAIN_MENU_COUNT - 1)) menu_idx++; break;
 8005466:	bf00      	nop
 8005468:	e012      	b.n	8005490 <Screen_HandleButton+0x370>
            case UI_TIMER_EDIT_ON_H:  if (edit_timer_on_h  > 0) edit_timer_on_h--;  break;
 800546a:	bf00      	nop
 800546c:	e010      	b.n	8005490 <Screen_HandleButton+0x370>
            case UI_TIMER_EDIT_ON_M:  if (edit_timer_on_m  > 0) edit_timer_on_m--;  break;
 800546e:	bf00      	nop
 8005470:	e00e      	b.n	8005490 <Screen_HandleButton+0x370>
            case UI_TIMER_EDIT_OFF_H: if (edit_timer_off_h > 0) edit_timer_off_h--; break;
 8005472:	bf00      	nop
 8005474:	e00c      	b.n	8005490 <Screen_HandleButton+0x370>
            case UI_TIMER_EDIT_OFF_M: if (edit_timer_off_m > 0) edit_timer_off_m--; break;
 8005476:	bf00      	nop
 8005478:	e00a      	b.n	8005490 <Screen_HandleButton+0x370>
            case UI_SEARCH_EDIT_GAP:   if (edit_search_gap_s > 1) edit_search_gap_s -= 5; break;
 800547a:	bf00      	nop
 800547c:	e008      	b.n	8005490 <Screen_HandleButton+0x370>
            case UI_SEARCH_EDIT_DRY:   if (edit_search_dry_s > 1) edit_search_dry_s -= 1; break;
 800547e:	bf00      	nop
 8005480:	e006      	b.n	8005490 <Screen_HandleButton+0x370>
            case UI_COUNTDOWN_EDIT_MIN: if (edit_countdown_min > 1) edit_countdown_min--; break;
 8005482:	bf00      	nop
 8005484:	e004      	b.n	8005490 <Screen_HandleButton+0x370>
            case UI_COUNTDOWN_EDIT_REP: if (edit_countdown_rep > 1) edit_countdown_rep--; break;
 8005486:	bf00      	nop
 8005488:	e002      	b.n	8005490 <Screen_HandleButton+0x370>
            case UI_TWIST_EDIT_ON:   if (edit_twist_on_s  > 1) edit_twist_on_s--;  break;
 800548a:	bf00      	nop
 800548c:	e000      	b.n	8005490 <Screen_HandleButton+0x370>
            case UI_TWIST_EDIT_OFF:  if (edit_twist_off_s > 1) edit_twist_off_s--; break;
 800548e:	bf00      	nop
        }
        screenNeedsRefresh = true;
 8005490:	4b73      	ldr	r3, [pc, #460]	@ (8005660 <Screen_HandleButton+0x540>)
 8005492:	2201      	movs	r2, #1
 8005494:	701a      	strb	r2, [r3, #0]
        return;
 8005496:	e0d5      	b.n	8005644 <Screen_HandleButton+0x524>
    }

    /* =======================
       SELECT key
       ======================= */
    if (b == BTN_SELECT) {
 8005498:	79fb      	ldrb	r3, [r7, #7]
 800549a:	2b02      	cmp	r3, #2
 800549c:	f040 80d2 	bne.w	8005644 <Screen_HandleButton+0x524>
        switch (ui) {
 80054a0:	4b70      	ldr	r3, [pc, #448]	@ (8005664 <Screen_HandleButton+0x544>)
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	3b0a      	subs	r3, #10
 80054a6:	2b09      	cmp	r3, #9
 80054a8:	f200 80c8 	bhi.w	800563c <Screen_HandleButton+0x51c>
 80054ac:	a201      	add	r2, pc, #4	@ (adr r2, 80054b4 <Screen_HandleButton+0x394>)
 80054ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b2:	bf00      	nop
 80054b4:	080054dd 	.word	0x080054dd
 80054b8:	0800551f 	.word	0x0800551f
 80054bc:	0800552d 	.word	0x0800552d
 80054c0:	0800563d 	.word	0x0800563d
 80054c4:	0800563d 	.word	0x0800563d
 80054c8:	0800563d 	.word	0x0800563d
 80054cc:	0800563d 	.word	0x0800563d
 80054d0:	08005581 	.word	0x08005581
 80054d4:	080055c3 	.word	0x080055c3
 80054d8:	080055d1 	.word	0x080055d1

            /* ---- Search main: Enable/Stop ---- */
            case UI_SEARCH:
                if (searchSettings.searchActive) {
 80054dc:	4b62      	ldr	r3, [pc, #392]	@ (8005668 <Screen_HandleButton+0x548>)
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d002      	beq.n	80054ea <Screen_HandleButton+0x3ca>
                    ModelHandle_StopSearch();
 80054e4:	f7fd ffda 	bl	800349c <ModelHandle_StopSearch>
 80054e8:	e015      	b.n	8005516 <Screen_HandleButton+0x3f6>
                } else {
                    uint16_t gap_s   = (uint16_t)edit_search_gap_s;  if (gap_s   == 0) gap_s   = 5;
 80054ea:	4b60      	ldr	r3, [pc, #384]	@ (800566c <Screen_HandleButton+0x54c>)
 80054ec:	881b      	ldrh	r3, [r3, #0]
 80054ee:	81fb      	strh	r3, [r7, #14]
 80054f0:	89fb      	ldrh	r3, [r7, #14]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d101      	bne.n	80054fa <Screen_HandleButton+0x3da>
 80054f6:	2305      	movs	r3, #5
 80054f8:	81fb      	strh	r3, [r7, #14]
                    uint16_t probe_s = (uint16_t)edit_search_dry_s;  if (probe_s == 0) probe_s = 3;
 80054fa:	4b54      	ldr	r3, [pc, #336]	@ (800564c <Screen_HandleButton+0x52c>)
 80054fc:	881b      	ldrh	r3, [r3, #0]
 80054fe:	81bb      	strh	r3, [r7, #12]
 8005500:	89bb      	ldrh	r3, [r7, #12]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d101      	bne.n	800550a <Screen_HandleButton+0x3ea>
 8005506:	2303      	movs	r3, #3
 8005508:	81bb      	strh	r3, [r7, #12]
                    ModelHandle_StartSearch(gap_s, probe_s);
 800550a:	89fb      	ldrh	r3, [r7, #14]
 800550c:	89ba      	ldrh	r2, [r7, #12]
 800550e:	4611      	mov	r1, r2
 8005510:	4618      	mov	r0, r3
 8005512:	f7fd ff7f 	bl	8003414 <ModelHandle_StartSearch>
                }
                screenNeedsRefresh = true;
 8005516:	4b52      	ldr	r3, [pc, #328]	@ (8005660 <Screen_HandleButton+0x540>)
 8005518:	2201      	movs	r2, #1
 800551a:	701a      	strb	r2, [r3, #0]
                return;
 800551c:	e092      	b.n	8005644 <Screen_HandleButton+0x524>

            /* ---- Search edit flow ---- */
            case UI_SEARCH_EDIT_GAP:
                ui = UI_SEARCH_EDIT_DRY;
 800551e:	4b51      	ldr	r3, [pc, #324]	@ (8005664 <Screen_HandleButton+0x544>)
 8005520:	220c      	movs	r2, #12
 8005522:	701a      	strb	r2, [r3, #0]
                screenNeedsRefresh = true;
 8005524:	4b4e      	ldr	r3, [pc, #312]	@ (8005660 <Screen_HandleButton+0x540>)
 8005526:	2201      	movs	r2, #1
 8005528:	701a      	strb	r2, [r3, #0]
                return;
 800552a:	e08b      	b.n	8005644 <Screen_HandleButton+0x524>

            case UI_SEARCH_EDIT_DRY:
                if (edit_search_gap_s < 1) edit_search_gap_s = 1;
 800552c:	4b4f      	ldr	r3, [pc, #316]	@ (800566c <Screen_HandleButton+0x54c>)
 800552e:	881b      	ldrh	r3, [r3, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d102      	bne.n	800553a <Screen_HandleButton+0x41a>
 8005534:	4b4d      	ldr	r3, [pc, #308]	@ (800566c <Screen_HandleButton+0x54c>)
 8005536:	2201      	movs	r2, #1
 8005538:	801a      	strh	r2, [r3, #0]
                if (edit_search_dry_s < 1) edit_search_dry_s = 1;
 800553a:	4b44      	ldr	r3, [pc, #272]	@ (800564c <Screen_HandleButton+0x52c>)
 800553c:	881b      	ldrh	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d102      	bne.n	8005548 <Screen_HandleButton+0x428>
 8005542:	4b42      	ldr	r3, [pc, #264]	@ (800564c <Screen_HandleButton+0x52c>)
 8005544:	2201      	movs	r2, #1
 8005546:	801a      	strh	r2, [r3, #0]

                searchSettings.testingGapSeconds = (uint16_t)edit_search_gap_s;
 8005548:	4b48      	ldr	r3, [pc, #288]	@ (800566c <Screen_HandleButton+0x54c>)
 800554a:	881a      	ldrh	r2, [r3, #0]
 800554c:	4b46      	ldr	r3, [pc, #280]	@ (8005668 <Screen_HandleButton+0x548>)
 800554e:	805a      	strh	r2, [r3, #2]
                searchSettings.dryRunTimeSeconds = (uint16_t)edit_search_dry_s;
 8005550:	4b3e      	ldr	r3, [pc, #248]	@ (800564c <Screen_HandleButton+0x52c>)
 8005552:	881a      	ldrh	r2, [r3, #0]
 8005554:	4b44      	ldr	r3, [pc, #272]	@ (8005668 <Screen_HandleButton+0x548>)
 8005556:	809a      	strh	r2, [r3, #4]

                if (searchSettings.searchActive) {
 8005558:	4b43      	ldr	r3, [pc, #268]	@ (8005668 <Screen_HandleButton+0x548>)
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d008      	beq.n	8005572 <Screen_HandleButton+0x452>
                    ModelHandle_StartSearch((uint16_t)searchSettings.testingGapSeconds,
 8005560:	4b41      	ldr	r3, [pc, #260]	@ (8005668 <Screen_HandleButton+0x548>)
 8005562:	885b      	ldrh	r3, [r3, #2]
 8005564:	461a      	mov	r2, r3
                                            (uint16_t)searchSettings.dryRunTimeSeconds);
 8005566:	4b40      	ldr	r3, [pc, #256]	@ (8005668 <Screen_HandleButton+0x548>)
 8005568:	889b      	ldrh	r3, [r3, #4]
                    ModelHandle_StartSearch((uint16_t)searchSettings.testingGapSeconds,
 800556a:	4619      	mov	r1, r3
 800556c:	4610      	mov	r0, r2
 800556e:	f7fd ff51 	bl	8003414 <ModelHandle_StartSearch>
                }
                ui = UI_SEARCH;
 8005572:	4b3c      	ldr	r3, [pc, #240]	@ (8005664 <Screen_HandleButton+0x544>)
 8005574:	220a      	movs	r2, #10
 8005576:	701a      	strb	r2, [r3, #0]
                screenNeedsRefresh = true;
 8005578:	4b39      	ldr	r3, [pc, #228]	@ (8005660 <Screen_HandleButton+0x540>)
 800557a:	2201      	movs	r2, #1
 800557c:	701a      	strb	r2, [r3, #0]
                return;
 800557e:	e061      	b.n	8005644 <Screen_HandleButton+0x524>

            /* ---- Twist main: Enable/Stop ---- */
            case UI_TWIST:
                if (twistSettings.twistActive) {
 8005580:	4b3b      	ldr	r3, [pc, #236]	@ (8005670 <Screen_HandleButton+0x550>)
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d002      	beq.n	800558e <Screen_HandleButton+0x46e>
                    ModelHandle_StopTwist();
 8005588:	f7fd fe4c 	bl	8003224 <ModelHandle_StopTwist>
 800558c:	e015      	b.n	80055ba <Screen_HandleButton+0x49a>
                } else {
                    uint16_t on_s  = (uint16_t)edit_twist_on_s;  if (on_s  == 0) on_s  = 1;
 800558e:	4b32      	ldr	r3, [pc, #200]	@ (8005658 <Screen_HandleButton+0x538>)
 8005590:	881b      	ldrh	r3, [r3, #0]
 8005592:	817b      	strh	r3, [r7, #10]
 8005594:	897b      	ldrh	r3, [r7, #10]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d101      	bne.n	800559e <Screen_HandleButton+0x47e>
 800559a:	2301      	movs	r3, #1
 800559c:	817b      	strh	r3, [r7, #10]
                    uint16_t off_s = (uint16_t)edit_twist_off_s; if (off_s == 0) off_s = 1;
 800559e:	4b2f      	ldr	r3, [pc, #188]	@ (800565c <Screen_HandleButton+0x53c>)
 80055a0:	881b      	ldrh	r3, [r3, #0]
 80055a2:	813b      	strh	r3, [r7, #8]
 80055a4:	893b      	ldrh	r3, [r7, #8]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d101      	bne.n	80055ae <Screen_HandleButton+0x48e>
 80055aa:	2301      	movs	r3, #1
 80055ac:	813b      	strh	r3, [r7, #8]
                    ModelHandle_StartTwist(on_s, off_s);
 80055ae:	897b      	ldrh	r3, [r7, #10]
 80055b0:	893a      	ldrh	r2, [r7, #8]
 80055b2:	4611      	mov	r1, r2
 80055b4:	4618      	mov	r0, r3
 80055b6:	f7fd fdf1 	bl	800319c <ModelHandle_StartTwist>
                }
                screenNeedsRefresh = true;
 80055ba:	4b29      	ldr	r3, [pc, #164]	@ (8005660 <Screen_HandleButton+0x540>)
 80055bc:	2201      	movs	r2, #1
 80055be:	701a      	strb	r2, [r3, #0]
                return;
 80055c0:	e040      	b.n	8005644 <Screen_HandleButton+0x524>

            /* ---- Twist edit ---- */
            case UI_TWIST_EDIT_ON:
                ui = UI_TWIST_EDIT_OFF;
 80055c2:	4b28      	ldr	r3, [pc, #160]	@ (8005664 <Screen_HandleButton+0x544>)
 80055c4:	2213      	movs	r2, #19
 80055c6:	701a      	strb	r2, [r3, #0]
                screenNeedsRefresh = true;
 80055c8:	4b25      	ldr	r3, [pc, #148]	@ (8005660 <Screen_HandleButton+0x540>)
 80055ca:	2201      	movs	r2, #1
 80055cc:	701a      	strb	r2, [r3, #0]
                return;
 80055ce:	e039      	b.n	8005644 <Screen_HandleButton+0x524>

            case UI_TWIST_EDIT_OFF:
                if (edit_twist_off_s < 1)   edit_twist_off_s = 1;
 80055d0:	4b22      	ldr	r3, [pc, #136]	@ (800565c <Screen_HandleButton+0x53c>)
 80055d2:	881b      	ldrh	r3, [r3, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d102      	bne.n	80055de <Screen_HandleButton+0x4be>
 80055d8:	4b20      	ldr	r3, [pc, #128]	@ (800565c <Screen_HandleButton+0x53c>)
 80055da:	2201      	movs	r2, #1
 80055dc:	801a      	strh	r2, [r3, #0]
                if (edit_twist_off_s > 600) edit_twist_off_s = 600;
 80055de:	4b1f      	ldr	r3, [pc, #124]	@ (800565c <Screen_HandleButton+0x53c>)
 80055e0:	881b      	ldrh	r3, [r3, #0]
 80055e2:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 80055e6:	d903      	bls.n	80055f0 <Screen_HandleButton+0x4d0>
 80055e8:	4b1c      	ldr	r3, [pc, #112]	@ (800565c <Screen_HandleButton+0x53c>)
 80055ea:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80055ee:	801a      	strh	r2, [r3, #0]
                if (edit_twist_on_s  < 1)   edit_twist_on_s  = 1;
 80055f0:	4b19      	ldr	r3, [pc, #100]	@ (8005658 <Screen_HandleButton+0x538>)
 80055f2:	881b      	ldrh	r3, [r3, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d102      	bne.n	80055fe <Screen_HandleButton+0x4de>
 80055f8:	4b17      	ldr	r3, [pc, #92]	@ (8005658 <Screen_HandleButton+0x538>)
 80055fa:	2201      	movs	r2, #1
 80055fc:	801a      	strh	r2, [r3, #0]
                if (edit_twist_on_s  > 600) edit_twist_on_s  = 600;
 80055fe:	4b16      	ldr	r3, [pc, #88]	@ (8005658 <Screen_HandleButton+0x538>)
 8005600:	881b      	ldrh	r3, [r3, #0]
 8005602:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8005606:	d903      	bls.n	8005610 <Screen_HandleButton+0x4f0>
 8005608:	4b13      	ldr	r3, [pc, #76]	@ (8005658 <Screen_HandleButton+0x538>)
 800560a:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800560e:	801a      	strh	r2, [r3, #0]

                apply_twist_settings(); // copies edit_* to twistSettings
 8005610:	f7ff f8ca 	bl	80047a8 <apply_twist_settings>

                if (twistSettings.twistActive) {
 8005614:	4b16      	ldr	r3, [pc, #88]	@ (8005670 <Screen_HandleButton+0x550>)
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d008      	beq.n	800562e <Screen_HandleButton+0x50e>
                    ModelHandle_StartTwist((uint16_t)twistSettings.onDurationSeconds,
 800561c:	4b14      	ldr	r3, [pc, #80]	@ (8005670 <Screen_HandleButton+0x550>)
 800561e:	885b      	ldrh	r3, [r3, #2]
 8005620:	461a      	mov	r2, r3
                                           (uint16_t)twistSettings.offDurationSeconds);
 8005622:	4b13      	ldr	r3, [pc, #76]	@ (8005670 <Screen_HandleButton+0x550>)
 8005624:	889b      	ldrh	r3, [r3, #4]
                    ModelHandle_StartTwist((uint16_t)twistSettings.onDurationSeconds,
 8005626:	4619      	mov	r1, r3
 8005628:	4610      	mov	r0, r2
 800562a:	f7fd fdb7 	bl	800319c <ModelHandle_StartTwist>
                }
                ui = UI_TWIST;
 800562e:	4b0d      	ldr	r3, [pc, #52]	@ (8005664 <Screen_HandleButton+0x544>)
 8005630:	2211      	movs	r2, #17
 8005632:	701a      	strb	r2, [r3, #0]
                screenNeedsRefresh = true;
 8005634:	4b0a      	ldr	r3, [pc, #40]	@ (8005660 <Screen_HandleButton+0x540>)
 8005636:	2201      	movs	r2, #1
 8005638:	701a      	strb	r2, [r3, #0]
                return;
 800563a:	e003      	b.n	8005644 <Screen_HandleButton+0x524>

            /* ---- Others: keep your existing flow ---- */
            default:
                menu_select();
 800563c:	f7ff fbe4 	bl	8004e08 <menu_select>
                return;
 8005640:	e000      	b.n	8005644 <Screen_HandleButton+0x524>
    if (b == BTN_NONE) return;
 8005642:	bf00      	nop
        }
    }
}
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	20000052 	.word	0x20000052
 8005650:	20000058 	.word	0x20000058
 8005654:	2000005a 	.word	0x2000005a
 8005658:	20000054 	.word	0x20000054
 800565c:	20000056 	.word	0x20000056
 8005660:	20000621 	.word	0x20000621
 8005664:	20000620 	.word	0x20000620
 8005668:	20000020 	.word	0x20000020
 800566c:	20000050 	.word	0x20000050
 8005670:	20000028 	.word	0x20000028

08005674 <Screen_HandleSwitches>:
/* ===== Switch polling with long-press detection ===== */
/* ===== Switch polling with long-press detection ===== */
void Screen_HandleSwitches(void){
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
        {SWITCH4_GPIO_Port, SWITCH4_Pin, BTN_DOWN,   LED4_Pin}  // Down / Back
    };
    static bool prev[4] = {true,true,true,true};
    static uint32_t pressStart[4] = {0,0,0,0};

    for (int i=0; i<4; i++){
 800567a:	2300      	movs	r3, #0
 800567c:	60fb      	str	r3, [r7, #12]
 800567e:	e0b3      	b.n	80057e8 <Screen_HandleSwitches+0x174>
        bool pressed = (HAL_GPIO_ReadPin(switchMap[i].port, switchMap[i].pin) == GPIO_PIN_RESET);
 8005680:	495e      	ldr	r1, [pc, #376]	@ (80057fc <Screen_HandleSwitches+0x188>)
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	4613      	mov	r3, r2
 8005686:	005b      	lsls	r3, r3, #1
 8005688:	4413      	add	r3, r2
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	440b      	add	r3, r1
 800568e:	6818      	ldr	r0, [r3, #0]
 8005690:	495a      	ldr	r1, [pc, #360]	@ (80057fc <Screen_HandleSwitches+0x188>)
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	4613      	mov	r3, r2
 8005696:	005b      	lsls	r3, r3, #1
 8005698:	4413      	add	r3, r2
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	440b      	add	r3, r1
 800569e:	3304      	adds	r3, #4
 80056a0:	881b      	ldrh	r3, [r3, #0]
 80056a2:	4619      	mov	r1, r3
 80056a4:	f001 fd20 	bl	80070e8 <HAL_GPIO_ReadPin>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	bf0c      	ite	eq
 80056ae:	2301      	moveq	r3, #1
 80056b0:	2300      	movne	r3, #0
 80056b2:	72fb      	strb	r3, [r7, #11]

        // edge: press started
        if (pressed && prev[i]) {
 80056b4:	7afb      	ldrb	r3, [r7, #11]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d012      	beq.n	80056e0 <Screen_HandleSwitches+0x6c>
 80056ba:	4a51      	ldr	r2, [pc, #324]	@ (8005800 <Screen_HandleSwitches+0x18c>)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	4413      	add	r3, r2
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00c      	beq.n	80056e0 <Screen_HandleSwitches+0x6c>
            prev[i] = false;
 80056c6:	4a4e      	ldr	r2, [pc, #312]	@ (8005800 <Screen_HandleSwitches+0x18c>)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	4413      	add	r3, r2
 80056cc:	2200      	movs	r2, #0
 80056ce:	701a      	strb	r2, [r3, #0]
            pressStart[i] = HAL_GetTick();
 80056d0:	f000 fc72 	bl	8005fb8 <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	494b      	ldr	r1, [pc, #300]	@ (8005804 <Screen_HandleSwitches+0x190>)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80056de:	e080      	b.n	80057e2 <Screen_HandleSwitches+0x16e>
        }
        // edge: released
        else if (!pressed && !prev[i]) {
 80056e0:	7afb      	ldrb	r3, [r7, #11]
 80056e2:	f083 0301 	eor.w	r3, r3, #1
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d07a      	beq.n	80057e2 <Screen_HandleSwitches+0x16e>
 80056ec:	4a44      	ldr	r2, [pc, #272]	@ (8005800 <Screen_HandleSwitches+0x18c>)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	4413      	add	r3, r2
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	f083 0301 	eor.w	r3, r3, #1
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d071      	beq.n	80057e2 <Screen_HandleSwitches+0x16e>
            uint32_t pressDuration = HAL_GetTick() - pressStart[i];
 80056fe:	f000 fc5b 	bl	8005fb8 <HAL_GetTick>
 8005702:	4602      	mov	r2, r0
 8005704:	493f      	ldr	r1, [pc, #252]	@ (8005804 <Screen_HandleSwitches+0x190>)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	607b      	str	r3, [r7, #4]
            prev[i] = true;
 8005710:	4a3b      	ldr	r2, [pc, #236]	@ (8005800 <Screen_HandleSwitches+0x18c>)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	4413      	add	r3, r2
 8005716:	2201      	movs	r2, #1
 8005718:	701a      	strb	r2, [r3, #0]

            /* ---- SW3 special: >=5s => "Summer Save" burst (R2+R3 ON for 30s) ---- */
            if (i == 2 && pressDuration >= 3000UL) {
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2b02      	cmp	r3, #2
 800571e:	d12c      	bne.n	800577a <Screen_HandleSwitches+0x106>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8005726:	4293      	cmp	r3, r2
 8005728:	d927      	bls.n	800577a <Screen_HandleSwitches+0x106>
                ModelHandle_TriggerAuxBurst(30);
 800572a:	201e      	movs	r0, #30
 800572c:	f7fd fbb0 	bl	8002e90 <ModelHandle_TriggerAuxBurst>

                // Quick LCD notice
                lcd_clear();
 8005730:	f7fc fba5 	bl	8001e7e <lcd_clear>
                lcd_put_cur(0, 0);
 8005734:	2100      	movs	r1, #0
 8005736:	2000      	movs	r0, #0
 8005738:	f7fc fbae 	bl	8001e98 <lcd_put_cur>
                lcd_send_string("Summer Save 30s");
 800573c:	4832      	ldr	r0, [pc, #200]	@ (8005808 <Screen_HandleSwitches+0x194>)
 800573e:	f7fc fbcd 	bl	8001edc <lcd_send_string>
                lcd_put_cur(1, 0);
 8005742:	2100      	movs	r1, #0
 8005744:	2001      	movs	r0, #1
 8005746:	f7fc fba7 	bl	8001e98 <lcd_put_cur>
                lcd_send_string("Relays 2&3 ON");
 800574a:	4830      	ldr	r0, [pc, #192]	@ (800580c <Screen_HandleSwitches+0x198>)
 800574c:	f7fc fbc6 	bl	8001edc <lcd_send_string>

                // optional LED feedback
                HAL_GPIO_TogglePin(switchMap[i].port, switchMap[i].ledPin);
 8005750:	492a      	ldr	r1, [pc, #168]	@ (80057fc <Screen_HandleSwitches+0x188>)
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	4613      	mov	r3, r2
 8005756:	005b      	lsls	r3, r3, #1
 8005758:	4413      	add	r3, r2
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	440b      	add	r3, r1
 800575e:	6818      	ldr	r0, [r3, #0]
 8005760:	4926      	ldr	r1, [pc, #152]	@ (80057fc <Screen_HandleSwitches+0x188>)
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	4613      	mov	r3, r2
 8005766:	005b      	lsls	r3, r3, #1
 8005768:	4413      	add	r3, r2
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	440b      	add	r3, r1
 800576e:	3308      	adds	r3, #8
 8005770:	881b      	ldrh	r3, [r3, #0]
 8005772:	4619      	mov	r1, r3
 8005774:	f001 fce7 	bl	8007146 <HAL_GPIO_TogglePin>
 8005778:	e033      	b.n	80057e2 <Screen_HandleSwitches+0x16e>
            }
            /* ---- SW1 ≥2s = manual long-press/restart (kept as-is) ---- */
            else if (i == 0 && pressDuration > 2000UL) {
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d106      	bne.n	800578e <Screen_HandleSwitches+0x11a>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8005786:	d902      	bls.n	800578e <Screen_HandleSwitches+0x11a>
                ModelHandle_ManualLongPress();
 8005788:	f7fd fbfa 	bl	8002f80 <ModelHandle_ManualLongPress>
 800578c:	e029      	b.n	80057e2 <Screen_HandleSwitches+0x16e>
            }
            /* ---- SW4 ≥2s = Back/menu reset (kept as-is) ---- */
            else if (i == 3 && pressDuration > 2000UL) {
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2b03      	cmp	r3, #3
 8005792:	d106      	bne.n	80057a2 <Screen_HandleSwitches+0x12e>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800579a:	d902      	bls.n	80057a2 <Screen_HandleSwitches+0x12e>
                menu_reset();
 800579c:	f7ff fc64 	bl	8005068 <menu_reset>
 80057a0:	e01f      	b.n	80057e2 <Screen_HandleSwitches+0x16e>
            }
            /* ---- Short press → normal handling ---- */
            else {
                HAL_GPIO_TogglePin(switchMap[i].port, switchMap[i].ledPin);
 80057a2:	4916      	ldr	r1, [pc, #88]	@ (80057fc <Screen_HandleSwitches+0x188>)
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	4613      	mov	r3, r2
 80057a8:	005b      	lsls	r3, r3, #1
 80057aa:	4413      	add	r3, r2
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	440b      	add	r3, r1
 80057b0:	6818      	ldr	r0, [r3, #0]
 80057b2:	4912      	ldr	r1, [pc, #72]	@ (80057fc <Screen_HandleSwitches+0x188>)
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	4613      	mov	r3, r2
 80057b8:	005b      	lsls	r3, r3, #1
 80057ba:	4413      	add	r3, r2
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	440b      	add	r3, r1
 80057c0:	3308      	adds	r3, #8
 80057c2:	881b      	ldrh	r3, [r3, #0]
 80057c4:	4619      	mov	r1, r3
 80057c6:	f001 fcbe 	bl	8007146 <HAL_GPIO_TogglePin>
                Screen_HandleButton(switchMap[i].btn);
 80057ca:	490c      	ldr	r1, [pc, #48]	@ (80057fc <Screen_HandleSwitches+0x188>)
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	4613      	mov	r3, r2
 80057d0:	005b      	lsls	r3, r3, #1
 80057d2:	4413      	add	r3, r2
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	440b      	add	r3, r1
 80057d8:	3306      	adds	r3, #6
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	4618      	mov	r0, r3
 80057de:	f7ff fc9f 	bl	8005120 <Screen_HandleButton>
    for (int i=0; i<4; i++){
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	3301      	adds	r3, #1
 80057e6:	60fb      	str	r3, [r7, #12]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2b03      	cmp	r3, #3
 80057ec:	f77f af48 	ble.w	8005680 <Screen_HandleSwitches+0xc>
            }
        }
    }
}
 80057f0:	bf00      	nop
 80057f2:	bf00      	nop
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	0800dd84 	.word	0x0800dd84
 8005800:	2000005c 	.word	0x2000005c
 8005804:	20000638 	.word	0x20000638
 8005808:	0800dd30 	.word	0x0800dd30
 800580c:	0800dd40 	.word	0x0800dd40

08005810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005816:	4b15      	ldr	r3, [pc, #84]	@ (800586c <HAL_MspInit+0x5c>)
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	4a14      	ldr	r2, [pc, #80]	@ (800586c <HAL_MspInit+0x5c>)
 800581c:	f043 0301 	orr.w	r3, r3, #1
 8005820:	6193      	str	r3, [r2, #24]
 8005822:	4b12      	ldr	r3, [pc, #72]	@ (800586c <HAL_MspInit+0x5c>)
 8005824:	699b      	ldr	r3, [r3, #24]
 8005826:	f003 0301 	and.w	r3, r3, #1
 800582a:	60bb      	str	r3, [r7, #8]
 800582c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800582e:	4b0f      	ldr	r3, [pc, #60]	@ (800586c <HAL_MspInit+0x5c>)
 8005830:	69db      	ldr	r3, [r3, #28]
 8005832:	4a0e      	ldr	r2, [pc, #56]	@ (800586c <HAL_MspInit+0x5c>)
 8005834:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005838:	61d3      	str	r3, [r2, #28]
 800583a:	4b0c      	ldr	r3, [pc, #48]	@ (800586c <HAL_MspInit+0x5c>)
 800583c:	69db      	ldr	r3, [r3, #28]
 800583e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005842:	607b      	str	r3, [r7, #4]
 8005844:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005846:	4b0a      	ldr	r3, [pc, #40]	@ (8005870 <HAL_MspInit+0x60>)
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	60fb      	str	r3, [r7, #12]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8005852:	60fb      	str	r3, [r7, #12]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800585a:	60fb      	str	r3, [r7, #12]
 800585c:	4a04      	ldr	r2, [pc, #16]	@ (8005870 <HAL_MspInit+0x60>)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005862:	bf00      	nop
 8005864:	3714      	adds	r7, #20
 8005866:	46bd      	mov	sp, r7
 8005868:	bc80      	pop	{r7}
 800586a:	4770      	bx	lr
 800586c:	40021000 	.word	0x40021000
 8005870:	40010000 	.word	0x40010000

08005874 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b088      	sub	sp, #32
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800587c:	f107 0310 	add.w	r3, r7, #16
 8005880:	2200      	movs	r2, #0
 8005882:	601a      	str	r2, [r3, #0]
 8005884:	605a      	str	r2, [r3, #4]
 8005886:	609a      	str	r2, [r3, #8]
 8005888:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a18      	ldr	r2, [pc, #96]	@ (80058f0 <HAL_ADC_MspInit+0x7c>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d129      	bne.n	80058e8 <HAL_ADC_MspInit+0x74>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005894:	4b17      	ldr	r3, [pc, #92]	@ (80058f4 <HAL_ADC_MspInit+0x80>)
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	4a16      	ldr	r2, [pc, #88]	@ (80058f4 <HAL_ADC_MspInit+0x80>)
 800589a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800589e:	6193      	str	r3, [r2, #24]
 80058a0:	4b14      	ldr	r3, [pc, #80]	@ (80058f4 <HAL_ADC_MspInit+0x80>)
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058a8:	60fb      	str	r3, [r7, #12]
 80058aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058ac:	4b11      	ldr	r3, [pc, #68]	@ (80058f4 <HAL_ADC_MspInit+0x80>)
 80058ae:	699b      	ldr	r3, [r3, #24]
 80058b0:	4a10      	ldr	r2, [pc, #64]	@ (80058f4 <HAL_ADC_MspInit+0x80>)
 80058b2:	f043 0304 	orr.w	r3, r3, #4
 80058b6:	6193      	str	r3, [r2, #24]
 80058b8:	4b0e      	ldr	r3, [pc, #56]	@ (80058f4 <HAL_ADC_MspInit+0x80>)
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	f003 0304 	and.w	r3, r3, #4
 80058c0:	60bb      	str	r3, [r7, #8]
 80058c2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80058c4:	23ff      	movs	r3, #255	@ 0xff
 80058c6:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80058c8:	2303      	movs	r3, #3
 80058ca:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058cc:	f107 0310 	add.w	r3, r7, #16
 80058d0:	4619      	mov	r1, r3
 80058d2:	4809      	ldr	r0, [pc, #36]	@ (80058f8 <HAL_ADC_MspInit+0x84>)
 80058d4:	f001 fa84 	bl	8006de0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80058d8:	2200      	movs	r2, #0
 80058da:	2100      	movs	r1, #0
 80058dc:	2012      	movs	r0, #18
 80058de:	f001 fa48 	bl	8006d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80058e2:	2012      	movs	r0, #18
 80058e4:	f001 fa61 	bl	8006daa <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80058e8:	bf00      	nop
 80058ea:	3720      	adds	r7, #32
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	40012400 	.word	0x40012400
 80058f4:	40021000 	.word	0x40021000
 80058f8:	40010800 	.word	0x40010800

080058fc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b088      	sub	sp, #32
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005904:	f107 0310 	add.w	r3, r7, #16
 8005908:	2200      	movs	r2, #0
 800590a:	601a      	str	r2, [r3, #0]
 800590c:	605a      	str	r2, [r3, #4]
 800590e:	609a      	str	r2, [r3, #8]
 8005910:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a16      	ldr	r2, [pc, #88]	@ (8005970 <HAL_I2C_MspInit+0x74>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d124      	bne.n	8005966 <HAL_I2C_MspInit+0x6a>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800591c:	4b15      	ldr	r3, [pc, #84]	@ (8005974 <HAL_I2C_MspInit+0x78>)
 800591e:	699b      	ldr	r3, [r3, #24]
 8005920:	4a14      	ldr	r2, [pc, #80]	@ (8005974 <HAL_I2C_MspInit+0x78>)
 8005922:	f043 0308 	orr.w	r3, r3, #8
 8005926:	6193      	str	r3, [r2, #24]
 8005928:	4b12      	ldr	r3, [pc, #72]	@ (8005974 <HAL_I2C_MspInit+0x78>)
 800592a:	699b      	ldr	r3, [r3, #24]
 800592c:	f003 0308 	and.w	r3, r3, #8
 8005930:	60fb      	str	r3, [r7, #12]
 8005932:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005934:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005938:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800593a:	2312      	movs	r3, #18
 800593c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800593e:	2303      	movs	r3, #3
 8005940:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005942:	f107 0310 	add.w	r3, r7, #16
 8005946:	4619      	mov	r1, r3
 8005948:	480b      	ldr	r0, [pc, #44]	@ (8005978 <HAL_I2C_MspInit+0x7c>)
 800594a:	f001 fa49 	bl	8006de0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800594e:	4b09      	ldr	r3, [pc, #36]	@ (8005974 <HAL_I2C_MspInit+0x78>)
 8005950:	69db      	ldr	r3, [r3, #28]
 8005952:	4a08      	ldr	r2, [pc, #32]	@ (8005974 <HAL_I2C_MspInit+0x78>)
 8005954:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005958:	61d3      	str	r3, [r2, #28]
 800595a:	4b06      	ldr	r3, [pc, #24]	@ (8005974 <HAL_I2C_MspInit+0x78>)
 800595c:	69db      	ldr	r3, [r3, #28]
 800595e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005962:	60bb      	str	r3, [r7, #8]
 8005964:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8005966:	bf00      	nop
 8005968:	3720      	adds	r7, #32
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	40005800 	.word	0x40005800
 8005974:	40021000 	.word	0x40021000
 8005978:	40010c00 	.word	0x40010c00

0800597c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b08a      	sub	sp, #40	@ 0x28
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005984:	f107 0314 	add.w	r3, r7, #20
 8005988:	2200      	movs	r2, #0
 800598a:	601a      	str	r2, [r3, #0]
 800598c:	605a      	str	r2, [r3, #4]
 800598e:	609a      	str	r2, [r3, #8]
 8005990:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a22      	ldr	r2, [pc, #136]	@ (8005a20 <HAL_SPI_MspInit+0xa4>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d13d      	bne.n	8005a18 <HAL_SPI_MspInit+0x9c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800599c:	4b21      	ldr	r3, [pc, #132]	@ (8005a24 <HAL_SPI_MspInit+0xa8>)
 800599e:	699b      	ldr	r3, [r3, #24]
 80059a0:	4a20      	ldr	r2, [pc, #128]	@ (8005a24 <HAL_SPI_MspInit+0xa8>)
 80059a2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80059a6:	6193      	str	r3, [r2, #24]
 80059a8:	4b1e      	ldr	r3, [pc, #120]	@ (8005a24 <HAL_SPI_MspInit+0xa8>)
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80059b0:	613b      	str	r3, [r7, #16]
 80059b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80059b4:	4b1b      	ldr	r3, [pc, #108]	@ (8005a24 <HAL_SPI_MspInit+0xa8>)
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	4a1a      	ldr	r2, [pc, #104]	@ (8005a24 <HAL_SPI_MspInit+0xa8>)
 80059ba:	f043 0308 	orr.w	r3, r3, #8
 80059be:	6193      	str	r3, [r2, #24]
 80059c0:	4b18      	ldr	r3, [pc, #96]	@ (8005a24 <HAL_SPI_MspInit+0xa8>)
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	f003 0308 	and.w	r3, r3, #8
 80059c8:	60fb      	str	r3, [r7, #12]
 80059ca:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80059cc:	2328      	movs	r3, #40	@ 0x28
 80059ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059d0:	2302      	movs	r3, #2
 80059d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80059d4:	2303      	movs	r3, #3
 80059d6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059d8:	f107 0314 	add.w	r3, r7, #20
 80059dc:	4619      	mov	r1, r3
 80059de:	4812      	ldr	r0, [pc, #72]	@ (8005a28 <HAL_SPI_MspInit+0xac>)
 80059e0:	f001 f9fe 	bl	8006de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80059e4:	2310      	movs	r3, #16
 80059e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80059e8:	2300      	movs	r3, #0
 80059ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059ec:	2300      	movs	r3, #0
 80059ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059f0:	f107 0314 	add.w	r3, r7, #20
 80059f4:	4619      	mov	r1, r3
 80059f6:	480c      	ldr	r0, [pc, #48]	@ (8005a28 <HAL_SPI_MspInit+0xac>)
 80059f8:	f001 f9f2 	bl	8006de0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80059fc:	4b0b      	ldr	r3, [pc, #44]	@ (8005a2c <HAL_SPI_MspInit+0xb0>)
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a04:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8005a08:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0c:	f043 0301 	orr.w	r3, r3, #1
 8005a10:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a12:	4a06      	ldr	r2, [pc, #24]	@ (8005a2c <HAL_SPI_MspInit+0xb0>)
 8005a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a16:	6053      	str	r3, [r2, #4]

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8005a18:	bf00      	nop
 8005a1a:	3728      	adds	r7, #40	@ 0x28
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	40013000 	.word	0x40013000
 8005a24:	40021000 	.word	0x40021000
 8005a28:	40010c00 	.word	0x40010c00
 8005a2c:	40010000 	.word	0x40010000

08005a30 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a09      	ldr	r2, [pc, #36]	@ (8005a64 <HAL_TIM_Base_MspInit+0x34>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d10b      	bne.n	8005a5a <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005a42:	4b09      	ldr	r3, [pc, #36]	@ (8005a68 <HAL_TIM_Base_MspInit+0x38>)
 8005a44:	69db      	ldr	r3, [r3, #28]
 8005a46:	4a08      	ldr	r2, [pc, #32]	@ (8005a68 <HAL_TIM_Base_MspInit+0x38>)
 8005a48:	f043 0302 	orr.w	r3, r3, #2
 8005a4c:	61d3      	str	r3, [r2, #28]
 8005a4e:	4b06      	ldr	r3, [pc, #24]	@ (8005a68 <HAL_TIM_Base_MspInit+0x38>)
 8005a50:	69db      	ldr	r3, [r3, #28]
 8005a52:	f003 0302 	and.w	r3, r3, #2
 8005a56:	60fb      	str	r3, [r7, #12]
 8005a58:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8005a5a:	bf00      	nop
 8005a5c:	3714      	adds	r7, #20
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bc80      	pop	{r7}
 8005a62:	4770      	bx	lr
 8005a64:	40000400 	.word	0x40000400
 8005a68:	40021000 	.word	0x40021000

08005a6c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b088      	sub	sp, #32
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a74:	f107 0310 	add.w	r3, r7, #16
 8005a78:	2200      	movs	r2, #0
 8005a7a:	601a      	str	r2, [r3, #0]
 8005a7c:	605a      	str	r2, [r3, #4]
 8005a7e:	609a      	str	r2, [r3, #8]
 8005a80:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a1c      	ldr	r2, [pc, #112]	@ (8005af8 <HAL_UART_MspInit+0x8c>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d131      	bne.n	8005af0 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8005afc <HAL_UART_MspInit+0x90>)
 8005a8e:	699b      	ldr	r3, [r3, #24]
 8005a90:	4a1a      	ldr	r2, [pc, #104]	@ (8005afc <HAL_UART_MspInit+0x90>)
 8005a92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005a96:	6193      	str	r3, [r2, #24]
 8005a98:	4b18      	ldr	r3, [pc, #96]	@ (8005afc <HAL_UART_MspInit+0x90>)
 8005a9a:	699b      	ldr	r3, [r3, #24]
 8005a9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005aa0:	60fb      	str	r3, [r7, #12]
 8005aa2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005aa4:	4b15      	ldr	r3, [pc, #84]	@ (8005afc <HAL_UART_MspInit+0x90>)
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	4a14      	ldr	r2, [pc, #80]	@ (8005afc <HAL_UART_MspInit+0x90>)
 8005aaa:	f043 0304 	orr.w	r3, r3, #4
 8005aae:	6193      	str	r3, [r2, #24]
 8005ab0:	4b12      	ldr	r3, [pc, #72]	@ (8005afc <HAL_UART_MspInit+0x90>)
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	f003 0304 	and.w	r3, r3, #4
 8005ab8:	60bb      	str	r3, [r7, #8]
 8005aba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005abc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005ac0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ac2:	2302      	movs	r3, #2
 8005ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005aca:	f107 0310 	add.w	r3, r7, #16
 8005ace:	4619      	mov	r1, r3
 8005ad0:	480b      	ldr	r0, [pc, #44]	@ (8005b00 <HAL_UART_MspInit+0x94>)
 8005ad2:	f001 f985 	bl	8006de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005ad6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005ada:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005adc:	2300      	movs	r3, #0
 8005ade:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ae4:	f107 0310 	add.w	r3, r7, #16
 8005ae8:	4619      	mov	r1, r3
 8005aea:	4805      	ldr	r0, [pc, #20]	@ (8005b00 <HAL_UART_MspInit+0x94>)
 8005aec:	f001 f978 	bl	8006de0 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8005af0:	bf00      	nop
 8005af2:	3720      	adds	r7, #32
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	40013800 	.word	0x40013800
 8005afc:	40021000 	.word	0x40021000
 8005b00:	40010800 	.word	0x40010800

08005b04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005b04:	b480      	push	{r7}
 8005b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005b08:	bf00      	nop
 8005b0a:	e7fd      	b.n	8005b08 <NMI_Handler+0x4>

08005b0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005b10:	bf00      	nop
 8005b12:	e7fd      	b.n	8005b10 <HardFault_Handler+0x4>

08005b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005b14:	b480      	push	{r7}
 8005b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005b18:	bf00      	nop
 8005b1a:	e7fd      	b.n	8005b18 <MemManage_Handler+0x4>

08005b1c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005b20:	bf00      	nop
 8005b22:	e7fd      	b.n	8005b20 <BusFault_Handler+0x4>

08005b24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005b24:	b480      	push	{r7}
 8005b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005b28:	bf00      	nop
 8005b2a:	e7fd      	b.n	8005b28 <UsageFault_Handler+0x4>

08005b2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005b30:	bf00      	nop
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bc80      	pop	{r7}
 8005b36:	4770      	bx	lr

08005b38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005b3c:	bf00      	nop
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bc80      	pop	{r7}
 8005b42:	4770      	bx	lr

08005b44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005b44:	b480      	push	{r7}
 8005b46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005b48:	bf00      	nop
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bc80      	pop	{r7}
 8005b4e:	4770      	bx	lr

08005b50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005b54:	f000 fa1e 	bl	8005f94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005b58:	bf00      	nop
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005b60:	4802      	ldr	r0, [pc, #8]	@ (8005b6c <ADC1_2_IRQHandler+0x10>)
 8005b62:	f000 fd1b 	bl	800659c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8005b66:	bf00      	nop
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	2000032c 	.word	0x2000032c

08005b70 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8005b74:	4802      	ldr	r0, [pc, #8]	@ (8005b80 <RTC_Alarm_IRQHandler+0x10>)
 8005b76:	f003 fb8f 	bl	8009298 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8005b7a:	bf00      	nop
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	200003b0 	.word	0x200003b0

08005b84 <now_ms>:
static GPIO_PinState last_raw[SWITCH_COUNT];       // last sampled raw pin

static uint32_t      press_start_ms[SWITCH_COUNT]; // for long press
static bool          long_fired[SWITCH_COUNT];

static inline uint32_t now_ms(void) { return HAL_GetTick(); }
 8005b84:	b580      	push	{r7, lr}
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	f000 fa16 	bl	8005fb8 <HAL_GetTick>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	4618      	mov	r0, r3
 8005b90:	bd80      	pop	{r7, pc}
	...

08005b94 <Switches_Init>:
    }
}

/* --- Init all switches as input pullup --- */
void Switches_Init(void)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b086      	sub	sp, #24
 8005b98:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b9a:	1d3b      	adds	r3, r7, #4
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	601a      	str	r2, [r3, #0]
 8005ba0:	605a      	str	r2, [r3, #4]
 8005ba2:	609a      	str	r2, [r3, #8]
 8005ba4:	60da      	str	r2, [r3, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ba6:	4b20      	ldr	r3, [pc, #128]	@ (8005c28 <Switches_Init+0x94>)
 8005ba8:	699b      	ldr	r3, [r3, #24]
 8005baa:	4a1f      	ldr	r2, [pc, #124]	@ (8005c28 <Switches_Init+0x94>)
 8005bac:	f043 0308 	orr.w	r3, r3, #8
 8005bb0:	6193      	str	r3, [r2, #24]
 8005bb2:	4b1d      	ldr	r3, [pc, #116]	@ (8005c28 <Switches_Init+0x94>)
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	f003 0308 	and.w	r3, r3, #8
 8005bba:	603b      	str	r3, [r7, #0]
 8005bbc:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pin  = SWITCH1_Pin|SWITCH2_Pin|SWITCH3_Pin|SWITCH4_Pin;
 8005bc6:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8005bca:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(SWITCH1_GPIO_Port, &GPIO_InitStruct);
 8005bcc:	1d3b      	adds	r3, r7, #4
 8005bce:	4619      	mov	r1, r3
 8005bd0:	4816      	ldr	r0, [pc, #88]	@ (8005c2c <Switches_Init+0x98>)
 8005bd2:	f001 f905 	bl	8006de0 <HAL_GPIO_Init>

    for (int i = 0; i < SWITCH_COUNT; ++i) {
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	617b      	str	r3, [r7, #20]
 8005bda:	e01d      	b.n	8005c18 <Switches_Init+0x84>
        stable_state[i]   = GPIO_PIN_SET;  // released
 8005bdc:	4a14      	ldr	r2, [pc, #80]	@ (8005c30 <Switches_Init+0x9c>)
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	4413      	add	r3, r2
 8005be2:	2201      	movs	r2, #1
 8005be4:	701a      	strb	r2, [r3, #0]
        last_raw[i]       = GPIO_PIN_SET;
 8005be6:	4a13      	ldr	r2, [pc, #76]	@ (8005c34 <Switches_Init+0xa0>)
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	4413      	add	r3, r2
 8005bec:	2201      	movs	r2, #1
 8005bee:	701a      	strb	r2, [r3, #0]
        last_change[i]    = now_ms();
 8005bf0:	f7ff ffc8 	bl	8005b84 <now_ms>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	4910      	ldr	r1, [pc, #64]	@ (8005c38 <Switches_Init+0xa4>)
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        press_start_ms[i] = 0;
 8005bfe:	4a0f      	ldr	r2, [pc, #60]	@ (8005c3c <Switches_Init+0xa8>)
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	2100      	movs	r1, #0
 8005c04:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        long_fired[i]     = false;
 8005c08:	4a0d      	ldr	r2, [pc, #52]	@ (8005c40 <Switches_Init+0xac>)
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	2200      	movs	r2, #0
 8005c10:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < SWITCH_COUNT; ++i) {
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	3301      	adds	r3, #1
 8005c16:	617b      	str	r3, [r7, #20]
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	2b03      	cmp	r3, #3
 8005c1c:	ddde      	ble.n	8005bdc <Switches_Init+0x48>
    }
}
 8005c1e:	bf00      	nop
 8005c20:	bf00      	nop
 8005c22:	3718      	adds	r7, #24
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	40021000 	.word	0x40021000
 8005c2c:	40010c00 	.word	0x40010c00
 8005c30:	20000648 	.word	0x20000648
 8005c34:	2000065c 	.word	0x2000065c
 8005c38:	2000064c 	.word	0x2000064c
 8005c3c:	20000660 	.word	0x20000660
 8005c40:	20000670 	.word	0x20000670

08005c44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005c44:	b480      	push	{r7}
 8005c46:	af00      	add	r7, sp, #0
  return 1;
 8005c48:	2301      	movs	r3, #1
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bc80      	pop	{r7}
 8005c50:	4770      	bx	lr

08005c52 <_kill>:

int _kill(int pid, int sig)
{
 8005c52:	b580      	push	{r7, lr}
 8005c54:	b082      	sub	sp, #8
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
 8005c5a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005c5c:	f005 fd3c 	bl	800b6d8 <__errno>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2216      	movs	r2, #22
 8005c64:	601a      	str	r2, [r3, #0]
  return -1;
 8005c66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3708      	adds	r7, #8
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <_exit>:

void _exit (int status)
{
 8005c72:	b580      	push	{r7, lr}
 8005c74:	b082      	sub	sp, #8
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005c7a:	f04f 31ff 	mov.w	r1, #4294967295
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f7ff ffe7 	bl	8005c52 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005c84:	bf00      	nop
 8005c86:	e7fd      	b.n	8005c84 <_exit+0x12>

08005c88 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b086      	sub	sp, #24
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c94:	2300      	movs	r3, #0
 8005c96:	617b      	str	r3, [r7, #20]
 8005c98:	e00a      	b.n	8005cb0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005c9a:	f3af 8000 	nop.w
 8005c9e:	4601      	mov	r1, r0
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	1c5a      	adds	r2, r3, #1
 8005ca4:	60ba      	str	r2, [r7, #8]
 8005ca6:	b2ca      	uxtb	r2, r1
 8005ca8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	3301      	adds	r3, #1
 8005cae:	617b      	str	r3, [r7, #20]
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	dbf0      	blt.n	8005c9a <_read+0x12>
  }

  return len;
 8005cb8:	687b      	ldr	r3, [r7, #4]
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3718      	adds	r7, #24
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005cc2:	b580      	push	{r7, lr}
 8005cc4:	b086      	sub	sp, #24
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	60f8      	str	r0, [r7, #12]
 8005cca:	60b9      	str	r1, [r7, #8]
 8005ccc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005cce:	2300      	movs	r3, #0
 8005cd0:	617b      	str	r3, [r7, #20]
 8005cd2:	e009      	b.n	8005ce8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	1c5a      	adds	r2, r3, #1
 8005cd8:	60ba      	str	r2, [r7, #8]
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	617b      	str	r3, [r7, #20]
 8005ce8:	697a      	ldr	r2, [r7, #20]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	dbf1      	blt.n	8005cd4 <_write+0x12>
  }
  return len;
 8005cf0:	687b      	ldr	r3, [r7, #4]
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3718      	adds	r7, #24
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <_close>:

int _close(int file)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b083      	sub	sp, #12
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005d02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	370c      	adds	r7, #12
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bc80      	pop	{r7}
 8005d0e:	4770      	bx	lr

08005d10 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005d20:	605a      	str	r2, [r3, #4]
  return 0;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bc80      	pop	{r7}
 8005d2c:	4770      	bx	lr

08005d2e <_isatty>:

int _isatty(int file)
{
 8005d2e:	b480      	push	{r7}
 8005d30:	b083      	sub	sp, #12
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005d36:	2301      	movs	r3, #1
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bc80      	pop	{r7}
 8005d40:	4770      	bx	lr

08005d42 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b085      	sub	sp, #20
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	60f8      	str	r0, [r7, #12]
 8005d4a:	60b9      	str	r1, [r7, #8]
 8005d4c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3714      	adds	r7, #20
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bc80      	pop	{r7}
 8005d58:	4770      	bx	lr
	...

08005d5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b086      	sub	sp, #24
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005d64:	4a14      	ldr	r2, [pc, #80]	@ (8005db8 <_sbrk+0x5c>)
 8005d66:	4b15      	ldr	r3, [pc, #84]	@ (8005dbc <_sbrk+0x60>)
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005d70:	4b13      	ldr	r3, [pc, #76]	@ (8005dc0 <_sbrk+0x64>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d102      	bne.n	8005d7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005d78:	4b11      	ldr	r3, [pc, #68]	@ (8005dc0 <_sbrk+0x64>)
 8005d7a:	4a12      	ldr	r2, [pc, #72]	@ (8005dc4 <_sbrk+0x68>)
 8005d7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005d7e:	4b10      	ldr	r3, [pc, #64]	@ (8005dc0 <_sbrk+0x64>)
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4413      	add	r3, r2
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d207      	bcs.n	8005d9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005d8c:	f005 fca4 	bl	800b6d8 <__errno>
 8005d90:	4603      	mov	r3, r0
 8005d92:	220c      	movs	r2, #12
 8005d94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005d96:	f04f 33ff 	mov.w	r3, #4294967295
 8005d9a:	e009      	b.n	8005db0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005d9c:	4b08      	ldr	r3, [pc, #32]	@ (8005dc0 <_sbrk+0x64>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005da2:	4b07      	ldr	r3, [pc, #28]	@ (8005dc0 <_sbrk+0x64>)
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4413      	add	r3, r2
 8005daa:	4a05      	ldr	r2, [pc, #20]	@ (8005dc0 <_sbrk+0x64>)
 8005dac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005dae:	68fb      	ldr	r3, [r7, #12]
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3718      	adds	r7, #24
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	20005000 	.word	0x20005000
 8005dbc:	00000400 	.word	0x00000400
 8005dc0:	20000674 	.word	0x20000674
 8005dc4:	20000810 	.word	0x20000810

08005dc8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005dcc:	bf00      	nop
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bc80      	pop	{r7}
 8005dd2:	4770      	bx	lr

08005dd4 <UART_Init>:

/**
  * @brief Initialize UART reception (interrupt mode, one byte at a time).
  */
void UART_Init(void)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	af00      	add	r7, sp, #0
    // Clear the buffer and reset index
    memset(rxBuffer, 0, sizeof(rxBuffer));
 8005dd8:	2240      	movs	r2, #64	@ 0x40
 8005dda:	2100      	movs	r1, #0
 8005ddc:	4807      	ldr	r0, [pc, #28]	@ (8005dfc <UART_Init+0x28>)
 8005dde:	f005 fc03 	bl	800b5e8 <memset>
    rxIndex = 0;
 8005de2:	4b07      	ldr	r3, [pc, #28]	@ (8005e00 <UART_Init+0x2c>)
 8005de4:	2200      	movs	r2, #0
 8005de6:	801a      	strh	r2, [r3, #0]
    packetReady = false;
 8005de8:	4b06      	ldr	r3, [pc, #24]	@ (8005e04 <UART_Init+0x30>)
 8005dea:	2200      	movs	r2, #0
 8005dec:	701a      	strb	r2, [r3, #0]

    // Start UART reception (non-blocking)
    HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 8005dee:	2201      	movs	r2, #1
 8005df0:	4905      	ldr	r1, [pc, #20]	@ (8005e08 <UART_Init+0x34>)
 8005df2:	4806      	ldr	r0, [pc, #24]	@ (8005e0c <UART_Init+0x38>)
 8005df4:	f004 fbb7 	bl	800a566 <HAL_UART_Receive_IT>
}
 8005df8:	bf00      	nop
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	2000067c 	.word	0x2000067c
 8005e00:	200006bc 	.word	0x200006bc
 8005e04:	200006be 	.word	0x200006be
 8005e08:	20000678 	.word	0x20000678
 8005e0c:	20000464 	.word	0x20000464

08005e10 <UART_TransmitString>:

/**
  * @brief Transmit a null-terminated string.
  */
void UART_TransmitString(UART_HandleTypeDef *huart, const char *str)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8005e1a:	6838      	ldr	r0, [r7, #0]
 8005e1c:	f7fa f9a2 	bl	8000164 <strlen>
 8005e20:	4603      	mov	r3, r0
 8005e22:	b29a      	uxth	r2, r3
 8005e24:	f04f 33ff 	mov.w	r3, #4294967295
 8005e28:	6839      	ldr	r1, [r7, #0]
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f004 fb10 	bl	800a450 <HAL_UART_Transmit>
}
 8005e30:	bf00      	nop
 8005e32:	3708      	adds	r7, #8
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <UART_GetReceivedPacket>:
        HAL_UART_Receive_IT(&huart1, &rxByte, 1);
    }
}

bool UART_GetReceivedPacket(char *buffer, size_t buffer_size)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
    if (packetReady)
 8005e42:	4b1b      	ldr	r3, [pc, #108]	@ (8005eb0 <UART_GetReceivedPacket+0x78>)
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d02c      	beq.n	8005ea4 <UART_GetReceivedPacket+0x6c>
    {
        // Ensure destination buffer is large enough
        size_t len = strlen(rxBuffer);
 8005e4a:	481a      	ldr	r0, [pc, #104]	@ (8005eb4 <UART_GetReceivedPacket+0x7c>)
 8005e4c:	f7fa f98a 	bl	8000164 <strlen>
 8005e50:	60f8      	str	r0, [r7, #12]
        if (len < buffer_size)
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d219      	bcs.n	8005e8e <UART_GetReceivedPacket+0x56>
        {
            strncpy(buffer, rxBuffer, buffer_size - 1);
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	3b01      	subs	r3, #1
 8005e5e:	461a      	mov	r2, r3
 8005e60:	4914      	ldr	r1, [pc, #80]	@ (8005eb4 <UART_GetReceivedPacket+0x7c>)
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f005 fbdb 	bl	800b61e <strncpy>
            buffer[buffer_size - 1] = '\0'; // Ensure null-termination
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	3b01      	subs	r3, #1
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	4413      	add	r3, r2
 8005e70:	2200      	movs	r2, #0
 8005e72:	701a      	strb	r2, [r3, #0]

            // Reset internal buffer for next packet
            memset(rxBuffer, 0, sizeof(rxBuffer));
 8005e74:	2240      	movs	r2, #64	@ 0x40
 8005e76:	2100      	movs	r1, #0
 8005e78:	480e      	ldr	r0, [pc, #56]	@ (8005eb4 <UART_GetReceivedPacket+0x7c>)
 8005e7a:	f005 fbb5 	bl	800b5e8 <memset>
            rxIndex = 0;
 8005e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8005eb8 <UART_GetReceivedPacket+0x80>)
 8005e80:	2200      	movs	r2, #0
 8005e82:	801a      	strh	r2, [r3, #0]
            packetReady = false;
 8005e84:	4b0a      	ldr	r3, [pc, #40]	@ (8005eb0 <UART_GetReceivedPacket+0x78>)
 8005e86:	2200      	movs	r2, #0
 8005e88:	701a      	strb	r2, [r3, #0]
            return true;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e00b      	b.n	8005ea6 <UART_GetReceivedPacket+0x6e>
        }
        else
        {
            // Destination buffer too small, discard internal packet
            memset(rxBuffer, 0, sizeof(rxBuffer));
 8005e8e:	2240      	movs	r2, #64	@ 0x40
 8005e90:	2100      	movs	r1, #0
 8005e92:	4808      	ldr	r0, [pc, #32]	@ (8005eb4 <UART_GetReceivedPacket+0x7c>)
 8005e94:	f005 fba8 	bl	800b5e8 <memset>
            rxIndex = 0;
 8005e98:	4b07      	ldr	r3, [pc, #28]	@ (8005eb8 <UART_GetReceivedPacket+0x80>)
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	801a      	strh	r2, [r3, #0]
            packetReady = false;
 8005e9e:	4b04      	ldr	r3, [pc, #16]	@ (8005eb0 <UART_GetReceivedPacket+0x78>)
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	701a      	strb	r2, [r3, #0]
            // Optionally, log an error
        }
    }
    return false; // Ensure to return false if no packet is ready
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3710      	adds	r7, #16
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	200006be 	.word	0x200006be
 8005eb4:	2000067c 	.word	0x2000067c
 8005eb8:	200006bc 	.word	0x200006bc

08005ebc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005ebc:	f7ff ff84 	bl	8005dc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005ec0:	480b      	ldr	r0, [pc, #44]	@ (8005ef0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8005ec2:	490c      	ldr	r1, [pc, #48]	@ (8005ef4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8005ec4:	4a0c      	ldr	r2, [pc, #48]	@ (8005ef8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8005ec6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005ec8:	e002      	b.n	8005ed0 <LoopCopyDataInit>

08005eca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005eca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005ecc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005ece:	3304      	adds	r3, #4

08005ed0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005ed0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005ed2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005ed4:	d3f9      	bcc.n	8005eca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005ed6:	4a09      	ldr	r2, [pc, #36]	@ (8005efc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8005ed8:	4c09      	ldr	r4, [pc, #36]	@ (8005f00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005eda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005edc:	e001      	b.n	8005ee2 <LoopFillZerobss>

08005ede <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005ede:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005ee0:	3204      	adds	r2, #4

08005ee2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005ee2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005ee4:	d3fb      	bcc.n	8005ede <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005ee6:	f005 fbfd 	bl	800b6e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005eea:	f7fc fb7f 	bl	80025ec <main>
  bx lr
 8005eee:	4770      	bx	lr
  ldr r0, =_sdata
 8005ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005ef4:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 8005ef8:	0800e17c 	.word	0x0800e17c
  ldr r2, =_sbss
 8005efc:	20000234 	.word	0x20000234
  ldr r4, =_ebss
 8005f00:	20000810 	.word	0x20000810

08005f04 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005f04:	e7fe      	b.n	8005f04 <CAN1_RX1_IRQHandler>
	...

08005f08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005f0c:	4b08      	ldr	r3, [pc, #32]	@ (8005f30 <HAL_Init+0x28>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a07      	ldr	r2, [pc, #28]	@ (8005f30 <HAL_Init+0x28>)
 8005f12:	f043 0310 	orr.w	r3, r3, #16
 8005f16:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005f18:	2003      	movs	r0, #3
 8005f1a:	f000 ff1f 	bl	8006d5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005f1e:	2000      	movs	r0, #0
 8005f20:	f000 f808 	bl	8005f34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005f24:	f7ff fc74 	bl	8005810 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	40022000 	.word	0x40022000

08005f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005f3c:	4b12      	ldr	r3, [pc, #72]	@ (8005f88 <HAL_InitTick+0x54>)
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	4b12      	ldr	r3, [pc, #72]	@ (8005f8c <HAL_InitTick+0x58>)
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	4619      	mov	r1, r3
 8005f46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005f4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f52:	4618      	mov	r0, r3
 8005f54:	f000 ff37 	bl	8006dc6 <HAL_SYSTICK_Config>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d001      	beq.n	8005f62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e00e      	b.n	8005f80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2b0f      	cmp	r3, #15
 8005f66:	d80a      	bhi.n	8005f7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005f68:	2200      	movs	r2, #0
 8005f6a:	6879      	ldr	r1, [r7, #4]
 8005f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f70:	f000 feff 	bl	8006d72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005f74:	4a06      	ldr	r2, [pc, #24]	@ (8005f90 <HAL_InitTick+0x5c>)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	e000      	b.n	8005f80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3708      	adds	r7, #8
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	20000060 	.word	0x20000060
 8005f8c:	20000068 	.word	0x20000068
 8005f90:	20000064 	.word	0x20000064

08005f94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005f94:	b480      	push	{r7}
 8005f96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005f98:	4b05      	ldr	r3, [pc, #20]	@ (8005fb0 <HAL_IncTick+0x1c>)
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	4b05      	ldr	r3, [pc, #20]	@ (8005fb4 <HAL_IncTick+0x20>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4413      	add	r3, r2
 8005fa4:	4a03      	ldr	r2, [pc, #12]	@ (8005fb4 <HAL_IncTick+0x20>)
 8005fa6:	6013      	str	r3, [r2, #0]
}
 8005fa8:	bf00      	nop
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bc80      	pop	{r7}
 8005fae:	4770      	bx	lr
 8005fb0:	20000068 	.word	0x20000068
 8005fb4:	200006c0 	.word	0x200006c0

08005fb8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	af00      	add	r7, sp, #0
  return uwTick;
 8005fbc:	4b02      	ldr	r3, [pc, #8]	@ (8005fc8 <HAL_GetTick+0x10>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bc80      	pop	{r7}
 8005fc6:	4770      	bx	lr
 8005fc8:	200006c0 	.word	0x200006c0

08005fcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005fd4:	f7ff fff0 	bl	8005fb8 <HAL_GetTick>
 8005fd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe4:	d005      	beq.n	8005ff2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8006010 <HAL_Delay+0x44>)
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	461a      	mov	r2, r3
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	4413      	add	r3, r2
 8005ff0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005ff2:	bf00      	nop
 8005ff4:	f7ff ffe0 	bl	8005fb8 <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	429a      	cmp	r2, r3
 8006002:	d8f7      	bhi.n	8005ff4 <HAL_Delay+0x28>
  {
  }
}
 8006004:	bf00      	nop
 8006006:	bf00      	nop
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	20000068 	.word	0x20000068

08006014 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b086      	sub	sp, #24
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800601c:	2300      	movs	r3, #0
 800601e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8006020:	2300      	movs	r3, #0
 8006022:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8006024:	2300      	movs	r3, #0
 8006026:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8006028:	2300      	movs	r3, #0
 800602a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d101      	bne.n	8006036 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e0be      	b.n	80061b4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006040:	2b00      	cmp	r3, #0
 8006042:	d109      	bne.n	8006058 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f7ff fc0e 	bl	8005874 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 fcb9 	bl	80069d0 <ADC_ConversionStop_Disable>
 800605e:	4603      	mov	r3, r0
 8006060:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006066:	f003 0310 	and.w	r3, r3, #16
 800606a:	2b00      	cmp	r3, #0
 800606c:	f040 8099 	bne.w	80061a2 <HAL_ADC_Init+0x18e>
 8006070:	7dfb      	ldrb	r3, [r7, #23]
 8006072:	2b00      	cmp	r3, #0
 8006074:	f040 8095 	bne.w	80061a2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800607c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006080:	f023 0302 	bic.w	r3, r3, #2
 8006084:	f043 0202 	orr.w	r2, r3, #2
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8006094:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	7b1b      	ldrb	r3, [r3, #12]
 800609a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800609c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800609e:	68ba      	ldr	r2, [r7, #8]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060ac:	d003      	beq.n	80060b6 <HAL_ADC_Init+0xa2>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d102      	bne.n	80060bc <HAL_ADC_Init+0xa8>
 80060b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80060ba:	e000      	b.n	80060be <HAL_ADC_Init+0xaa>
 80060bc:	2300      	movs	r3, #0
 80060be:	693a      	ldr	r2, [r7, #16]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	7d1b      	ldrb	r3, [r3, #20]
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d119      	bne.n	8006100 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	7b1b      	ldrb	r3, [r3, #12]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d109      	bne.n	80060e8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	699b      	ldr	r3, [r3, #24]
 80060d8:	3b01      	subs	r3, #1
 80060da:	035a      	lsls	r2, r3, #13
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	4313      	orrs	r3, r2
 80060e0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80060e4:	613b      	str	r3, [r7, #16]
 80060e6:	e00b      	b.n	8006100 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060ec:	f043 0220 	orr.w	r2, r3, #32
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060f8:	f043 0201 	orr.w	r2, r3, #1
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	693a      	ldr	r2, [r7, #16]
 8006110:	430a      	orrs	r2, r1
 8006112:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	689a      	ldr	r2, [r3, #8]
 800611a:	4b28      	ldr	r3, [pc, #160]	@ (80061bc <HAL_ADC_Init+0x1a8>)
 800611c:	4013      	ands	r3, r2
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	6812      	ldr	r2, [r2, #0]
 8006122:	68b9      	ldr	r1, [r7, #8]
 8006124:	430b      	orrs	r3, r1
 8006126:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006130:	d003      	beq.n	800613a <HAL_ADC_Init+0x126>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	2b01      	cmp	r3, #1
 8006138:	d104      	bne.n	8006144 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	3b01      	subs	r3, #1
 8006140:	051b      	lsls	r3, r3, #20
 8006142:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800614a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	430a      	orrs	r2, r1
 8006156:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	689a      	ldr	r2, [r3, #8]
 800615e:	4b18      	ldr	r3, [pc, #96]	@ (80061c0 <HAL_ADC_Init+0x1ac>)
 8006160:	4013      	ands	r3, r2
 8006162:	68ba      	ldr	r2, [r7, #8]
 8006164:	429a      	cmp	r2, r3
 8006166:	d10b      	bne.n	8006180 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006172:	f023 0303 	bic.w	r3, r3, #3
 8006176:	f043 0201 	orr.w	r2, r3, #1
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800617e:	e018      	b.n	80061b2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006184:	f023 0312 	bic.w	r3, r3, #18
 8006188:	f043 0210 	orr.w	r2, r3, #16
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006194:	f043 0201 	orr.w	r2, r3, #1
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80061a0:	e007      	b.n	80061b2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061a6:	f043 0210 	orr.w	r2, r3, #16
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80061b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3718      	adds	r7, #24
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	ffe1f7fd 	.word	0xffe1f7fd
 80061c0:	ff1f0efe 	.word	0xff1f0efe

080061c4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80061cc:	2300      	movs	r3, #0
 80061ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d101      	bne.n	80061de <HAL_ADC_Start+0x1a>
 80061da:	2302      	movs	r3, #2
 80061dc:	e098      	b.n	8006310 <HAL_ADC_Start+0x14c>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2201      	movs	r2, #1
 80061e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 fb98 	bl	800691c <ADC_Enable>
 80061ec:	4603      	mov	r3, r0
 80061ee:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80061f0:	7bfb      	ldrb	r3, [r7, #15]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	f040 8087 	bne.w	8006306 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006200:	f023 0301 	bic.w	r3, r3, #1
 8006204:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a41      	ldr	r2, [pc, #260]	@ (8006318 <HAL_ADC_Start+0x154>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d105      	bne.n	8006222 <HAL_ADC_Start+0x5e>
 8006216:	4b41      	ldr	r3, [pc, #260]	@ (800631c <HAL_ADC_Start+0x158>)
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800621e:	2b00      	cmp	r3, #0
 8006220:	d115      	bne.n	800624e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006226:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006238:	2b00      	cmp	r3, #0
 800623a:	d026      	beq.n	800628a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006240:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006244:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800624c:	e01d      	b.n	800628a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006252:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a2f      	ldr	r2, [pc, #188]	@ (800631c <HAL_ADC_Start+0x158>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d004      	beq.n	800626e <HAL_ADC_Start+0xaa>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a2b      	ldr	r2, [pc, #172]	@ (8006318 <HAL_ADC_Start+0x154>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d10d      	bne.n	800628a <HAL_ADC_Start+0xc6>
 800626e:	4b2b      	ldr	r3, [pc, #172]	@ (800631c <HAL_ADC_Start+0x158>)
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006276:	2b00      	cmp	r3, #0
 8006278:	d007      	beq.n	800628a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800627e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006282:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800628e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006292:	2b00      	cmp	r3, #0
 8006294:	d006      	beq.n	80062a4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800629a:	f023 0206 	bic.w	r2, r3, #6
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80062a2:	e002      	b.n	80062aa <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f06f 0202 	mvn.w	r2, #2
 80062ba:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80062c6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80062ca:	d113      	bne.n	80062f4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80062d0:	4a11      	ldr	r2, [pc, #68]	@ (8006318 <HAL_ADC_Start+0x154>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d105      	bne.n	80062e2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80062d6:	4b11      	ldr	r3, [pc, #68]	@ (800631c <HAL_ADC_Start+0x158>)
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d108      	bne.n	80062f4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	689a      	ldr	r2, [r3, #8]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80062f0:	609a      	str	r2, [r3, #8]
 80062f2:	e00c      	b.n	800630e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	689a      	ldr	r2, [r3, #8]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8006302:	609a      	str	r2, [r3, #8]
 8006304:	e003      	b.n	800630e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800630e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006310:	4618      	mov	r0, r3
 8006312:	3710      	adds	r7, #16
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	40012800 	.word	0x40012800
 800631c:	40012400 	.word	0x40012400

08006320 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006328:	2300      	movs	r3, #0
 800632a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006332:	2b01      	cmp	r3, #1
 8006334:	d101      	bne.n	800633a <HAL_ADC_Stop+0x1a>
 8006336:	2302      	movs	r3, #2
 8006338:	e01a      	b.n	8006370 <HAL_ADC_Stop+0x50>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2201      	movs	r2, #1
 800633e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 fb44 	bl	80069d0 <ADC_ConversionStop_Disable>
 8006348:	4603      	mov	r3, r0
 800634a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800634c:	7bfb      	ldrb	r3, [r7, #15]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d109      	bne.n	8006366 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006356:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800635a:	f023 0301 	bic.w	r3, r3, #1
 800635e:	f043 0201 	orr.w	r2, r3, #1
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800636e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006370:	4618      	mov	r0, r3
 8006372:	3710      	adds	r7, #16
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006378:	b590      	push	{r4, r7, lr}
 800637a:	b087      	sub	sp, #28
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006382:	2300      	movs	r3, #0
 8006384:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8006386:	2300      	movs	r3, #0
 8006388:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800638a:	2300      	movs	r3, #0
 800638c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800638e:	f7ff fe13 	bl	8005fb8 <HAL_GetTick>
 8006392:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00b      	beq.n	80063ba <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063a6:	f043 0220 	orr.w	r2, r3, #32
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e0d3      	b.n	8006562 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d131      	bne.n	800642c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ce:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d12a      	bne.n	800642c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80063d6:	e021      	b.n	800641c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063de:	d01d      	beq.n	800641c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d007      	beq.n	80063f6 <HAL_ADC_PollForConversion+0x7e>
 80063e6:	f7ff fde7 	bl	8005fb8 <HAL_GetTick>
 80063ea:	4602      	mov	r2, r0
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	683a      	ldr	r2, [r7, #0]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d212      	bcs.n	800641c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0302 	and.w	r3, r3, #2
 8006400:	2b00      	cmp	r3, #0
 8006402:	d10b      	bne.n	800641c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006408:	f043 0204 	orr.w	r2, r3, #4
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	e0a2      	b.n	8006562 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 0302 	and.w	r3, r3, #2
 8006426:	2b00      	cmp	r3, #0
 8006428:	d0d6      	beq.n	80063d8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800642a:	e070      	b.n	800650e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800642c:	4b4f      	ldr	r3, [pc, #316]	@ (800656c <HAL_ADC_PollForConversion+0x1f4>)
 800642e:	681c      	ldr	r4, [r3, #0]
 8006430:	2002      	movs	r0, #2
 8006432:	f002 fe7b 	bl	800912c <HAL_RCCEx_GetPeriphCLKFreq>
 8006436:	4603      	mov	r3, r0
 8006438:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	6919      	ldr	r1, [r3, #16]
 8006442:	4b4b      	ldr	r3, [pc, #300]	@ (8006570 <HAL_ADC_PollForConversion+0x1f8>)
 8006444:	400b      	ands	r3, r1
 8006446:	2b00      	cmp	r3, #0
 8006448:	d118      	bne.n	800647c <HAL_ADC_PollForConversion+0x104>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	68d9      	ldr	r1, [r3, #12]
 8006450:	4b48      	ldr	r3, [pc, #288]	@ (8006574 <HAL_ADC_PollForConversion+0x1fc>)
 8006452:	400b      	ands	r3, r1
 8006454:	2b00      	cmp	r3, #0
 8006456:	d111      	bne.n	800647c <HAL_ADC_PollForConversion+0x104>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	6919      	ldr	r1, [r3, #16]
 800645e:	4b46      	ldr	r3, [pc, #280]	@ (8006578 <HAL_ADC_PollForConversion+0x200>)
 8006460:	400b      	ands	r3, r1
 8006462:	2b00      	cmp	r3, #0
 8006464:	d108      	bne.n	8006478 <HAL_ADC_PollForConversion+0x100>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68d9      	ldr	r1, [r3, #12]
 800646c:	4b43      	ldr	r3, [pc, #268]	@ (800657c <HAL_ADC_PollForConversion+0x204>)
 800646e:	400b      	ands	r3, r1
 8006470:	2b00      	cmp	r3, #0
 8006472:	d101      	bne.n	8006478 <HAL_ADC_PollForConversion+0x100>
 8006474:	2314      	movs	r3, #20
 8006476:	e020      	b.n	80064ba <HAL_ADC_PollForConversion+0x142>
 8006478:	2329      	movs	r3, #41	@ 0x29
 800647a:	e01e      	b.n	80064ba <HAL_ADC_PollForConversion+0x142>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	6919      	ldr	r1, [r3, #16]
 8006482:	4b3d      	ldr	r3, [pc, #244]	@ (8006578 <HAL_ADC_PollForConversion+0x200>)
 8006484:	400b      	ands	r3, r1
 8006486:	2b00      	cmp	r3, #0
 8006488:	d106      	bne.n	8006498 <HAL_ADC_PollForConversion+0x120>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68d9      	ldr	r1, [r3, #12]
 8006490:	4b3a      	ldr	r3, [pc, #232]	@ (800657c <HAL_ADC_PollForConversion+0x204>)
 8006492:	400b      	ands	r3, r1
 8006494:	2b00      	cmp	r3, #0
 8006496:	d00d      	beq.n	80064b4 <HAL_ADC_PollForConversion+0x13c>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	6919      	ldr	r1, [r3, #16]
 800649e:	4b38      	ldr	r3, [pc, #224]	@ (8006580 <HAL_ADC_PollForConversion+0x208>)
 80064a0:	400b      	ands	r3, r1
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d108      	bne.n	80064b8 <HAL_ADC_PollForConversion+0x140>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68d9      	ldr	r1, [r3, #12]
 80064ac:	4b34      	ldr	r3, [pc, #208]	@ (8006580 <HAL_ADC_PollForConversion+0x208>)
 80064ae:	400b      	ands	r3, r1
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d101      	bne.n	80064b8 <HAL_ADC_PollForConversion+0x140>
 80064b4:	2354      	movs	r3, #84	@ 0x54
 80064b6:	e000      	b.n	80064ba <HAL_ADC_PollForConversion+0x142>
 80064b8:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80064ba:	fb02 f303 	mul.w	r3, r2, r3
 80064be:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80064c0:	e021      	b.n	8006506 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064c8:	d01a      	beq.n	8006500 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d007      	beq.n	80064e0 <HAL_ADC_PollForConversion+0x168>
 80064d0:	f7ff fd72 	bl	8005fb8 <HAL_GetTick>
 80064d4:	4602      	mov	r2, r0
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	683a      	ldr	r2, [r7, #0]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d20f      	bcs.n	8006500 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d90b      	bls.n	8006500 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ec:	f043 0204 	orr.w	r2, r3, #4
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 80064fc:	2303      	movs	r3, #3
 80064fe:	e030      	b.n	8006562 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	3301      	adds	r3, #1
 8006504:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	693a      	ldr	r2, [r7, #16]
 800650a:	429a      	cmp	r2, r3
 800650c:	d8d9      	bhi.n	80064c2 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f06f 0212 	mvn.w	r2, #18
 8006516:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800651c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800652e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8006532:	d115      	bne.n	8006560 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006538:	2b00      	cmp	r3, #0
 800653a:	d111      	bne.n	8006560 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006540:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800654c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d105      	bne.n	8006560 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006558:	f043 0201 	orr.w	r2, r3, #1
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	371c      	adds	r7, #28
 8006566:	46bd      	mov	sp, r7
 8006568:	bd90      	pop	{r4, r7, pc}
 800656a:	bf00      	nop
 800656c:	20000060 	.word	0x20000060
 8006570:	24924924 	.word	0x24924924
 8006574:	00924924 	.word	0x00924924
 8006578:	12492492 	.word	0x12492492
 800657c:	00492492 	.word	0x00492492
 8006580:	00249249 	.word	0x00249249

08006584 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8006592:	4618      	mov	r0, r3
 8006594:	370c      	adds	r7, #12
 8006596:	46bd      	mov	sp, r7
 8006598:	bc80      	pop	{r7}
 800659a:	4770      	bx	lr

0800659c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	f003 0320 	and.w	r3, r3, #32
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d03e      	beq.n	800663c <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f003 0302 	and.w	r3, r3, #2
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d039      	beq.n	800663c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065cc:	f003 0310 	and.w	r3, r3, #16
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d105      	bne.n	80065e0 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065d8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80065ea:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80065ee:	d11d      	bne.n	800662c <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d119      	bne.n	800662c <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	685a      	ldr	r2, [r3, #4]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f022 0220 	bic.w	r2, r2, #32
 8006606:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800660c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006618:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800661c:	2b00      	cmp	r3, #0
 800661e:	d105      	bne.n	800662c <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006624:	f043 0201 	orr.w	r2, r3, #1
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f7fb ff87 	bl	8002540 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f06f 0212 	mvn.w	r2, #18
 800663a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006642:	2b00      	cmp	r3, #0
 8006644:	d04d      	beq.n	80066e2 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f003 0304 	and.w	r3, r3, #4
 800664c:	2b00      	cmp	r3, #0
 800664e:	d048      	beq.n	80066e2 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006654:	f003 0310 	and.w	r3, r3, #16
 8006658:	2b00      	cmp	r3, #0
 800665a:	d105      	bne.n	8006668 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006660:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006672:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8006676:	d012      	beq.n	800669e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8006682:	2b00      	cmp	r3, #0
 8006684:	d125      	bne.n	80066d2 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8006690:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8006694:	d11d      	bne.n	80066d2 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800669a:	2b00      	cmp	r3, #0
 800669c:	d119      	bne.n	80066d2 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	685a      	ldr	r2, [r3, #4]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80066ac:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066b2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d105      	bne.n	80066d2 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ca:	f043 0201 	orr.w	r2, r3, #1
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 fa6c 	bl	8006bb0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f06f 020c 	mvn.w	r2, #12
 80066e0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d012      	beq.n	8006712 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f003 0301 	and.w	r3, r3, #1
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00d      	beq.n	8006712 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066fa:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 f809 	bl	800671a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f06f 0201 	mvn.w	r2, #1
 8006710:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8006712:	bf00      	nop
 8006714:	3710      	adds	r7, #16
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}

0800671a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800671a:	b480      	push	{r7}
 800671c:	b083      	sub	sp, #12
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006722:	bf00      	nop
 8006724:	370c      	adds	r7, #12
 8006726:	46bd      	mov	sp, r7
 8006728:	bc80      	pop	{r7}
 800672a:	4770      	bx	lr

0800672c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800672c:	b480      	push	{r7}
 800672e:	b085      	sub	sp, #20
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006736:	2300      	movs	r3, #0
 8006738:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800673a:	2300      	movs	r3, #0
 800673c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006744:	2b01      	cmp	r3, #1
 8006746:	d101      	bne.n	800674c <HAL_ADC_ConfigChannel+0x20>
 8006748:	2302      	movs	r3, #2
 800674a:	e0dc      	b.n	8006906 <HAL_ADC_ConfigChannel+0x1da>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	2b06      	cmp	r3, #6
 800675a:	d81c      	bhi.n	8006796 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	685a      	ldr	r2, [r3, #4]
 8006766:	4613      	mov	r3, r2
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	4413      	add	r3, r2
 800676c:	3b05      	subs	r3, #5
 800676e:	221f      	movs	r2, #31
 8006770:	fa02 f303 	lsl.w	r3, r2, r3
 8006774:	43db      	mvns	r3, r3
 8006776:	4019      	ands	r1, r3
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	6818      	ldr	r0, [r3, #0]
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	685a      	ldr	r2, [r3, #4]
 8006780:	4613      	mov	r3, r2
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	4413      	add	r3, r2
 8006786:	3b05      	subs	r3, #5
 8006788:	fa00 f203 	lsl.w	r2, r0, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	430a      	orrs	r2, r1
 8006792:	635a      	str	r2, [r3, #52]	@ 0x34
 8006794:	e03c      	b.n	8006810 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	2b0c      	cmp	r3, #12
 800679c:	d81c      	bhi.n	80067d8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	685a      	ldr	r2, [r3, #4]
 80067a8:	4613      	mov	r3, r2
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	4413      	add	r3, r2
 80067ae:	3b23      	subs	r3, #35	@ 0x23
 80067b0:	221f      	movs	r2, #31
 80067b2:	fa02 f303 	lsl.w	r3, r2, r3
 80067b6:	43db      	mvns	r3, r3
 80067b8:	4019      	ands	r1, r3
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	6818      	ldr	r0, [r3, #0]
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	685a      	ldr	r2, [r3, #4]
 80067c2:	4613      	mov	r3, r2
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	4413      	add	r3, r2
 80067c8:	3b23      	subs	r3, #35	@ 0x23
 80067ca:	fa00 f203 	lsl.w	r2, r0, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	430a      	orrs	r2, r1
 80067d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80067d6:	e01b      	b.n	8006810 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	685a      	ldr	r2, [r3, #4]
 80067e2:	4613      	mov	r3, r2
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	4413      	add	r3, r2
 80067e8:	3b41      	subs	r3, #65	@ 0x41
 80067ea:	221f      	movs	r2, #31
 80067ec:	fa02 f303 	lsl.w	r3, r2, r3
 80067f0:	43db      	mvns	r3, r3
 80067f2:	4019      	ands	r1, r3
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	6818      	ldr	r0, [r3, #0]
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	685a      	ldr	r2, [r3, #4]
 80067fc:	4613      	mov	r3, r2
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	4413      	add	r3, r2
 8006802:	3b41      	subs	r3, #65	@ 0x41
 8006804:	fa00 f203 	lsl.w	r2, r0, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	430a      	orrs	r2, r1
 800680e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2b09      	cmp	r3, #9
 8006816:	d91c      	bls.n	8006852 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	68d9      	ldr	r1, [r3, #12]
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	4613      	mov	r3, r2
 8006824:	005b      	lsls	r3, r3, #1
 8006826:	4413      	add	r3, r2
 8006828:	3b1e      	subs	r3, #30
 800682a:	2207      	movs	r2, #7
 800682c:	fa02 f303 	lsl.w	r3, r2, r3
 8006830:	43db      	mvns	r3, r3
 8006832:	4019      	ands	r1, r3
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	6898      	ldr	r0, [r3, #8]
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	4613      	mov	r3, r2
 800683e:	005b      	lsls	r3, r3, #1
 8006840:	4413      	add	r3, r2
 8006842:	3b1e      	subs	r3, #30
 8006844:	fa00 f203 	lsl.w	r2, r0, r3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	430a      	orrs	r2, r1
 800684e:	60da      	str	r2, [r3, #12]
 8006850:	e019      	b.n	8006886 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	6919      	ldr	r1, [r3, #16]
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	4613      	mov	r3, r2
 800685e:	005b      	lsls	r3, r3, #1
 8006860:	4413      	add	r3, r2
 8006862:	2207      	movs	r2, #7
 8006864:	fa02 f303 	lsl.w	r3, r2, r3
 8006868:	43db      	mvns	r3, r3
 800686a:	4019      	ands	r1, r3
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	6898      	ldr	r0, [r3, #8]
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	4613      	mov	r3, r2
 8006876:	005b      	lsls	r3, r3, #1
 8006878:	4413      	add	r3, r2
 800687a:	fa00 f203 	lsl.w	r2, r0, r3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	430a      	orrs	r2, r1
 8006884:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	2b10      	cmp	r3, #16
 800688c:	d003      	beq.n	8006896 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8006892:	2b11      	cmp	r3, #17
 8006894:	d132      	bne.n	80068fc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a1d      	ldr	r2, [pc, #116]	@ (8006910 <HAL_ADC_ConfigChannel+0x1e4>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d125      	bne.n	80068ec <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d126      	bne.n	80068fc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	689a      	ldr	r2, [r3, #8]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80068bc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2b10      	cmp	r3, #16
 80068c4:	d11a      	bne.n	80068fc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80068c6:	4b13      	ldr	r3, [pc, #76]	@ (8006914 <HAL_ADC_ConfigChannel+0x1e8>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a13      	ldr	r2, [pc, #76]	@ (8006918 <HAL_ADC_ConfigChannel+0x1ec>)
 80068cc:	fba2 2303 	umull	r2, r3, r2, r3
 80068d0:	0c9a      	lsrs	r2, r3, #18
 80068d2:	4613      	mov	r3, r2
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	4413      	add	r3, r2
 80068d8:	005b      	lsls	r3, r3, #1
 80068da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80068dc:	e002      	b.n	80068e4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	3b01      	subs	r3, #1
 80068e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d1f9      	bne.n	80068de <HAL_ADC_ConfigChannel+0x1b2>
 80068ea:	e007      	b.n	80068fc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068f0:	f043 0220 	orr.w	r2, r3, #32
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8006904:	7bfb      	ldrb	r3, [r7, #15]
}
 8006906:	4618      	mov	r0, r3
 8006908:	3714      	adds	r7, #20
 800690a:	46bd      	mov	sp, r7
 800690c:	bc80      	pop	{r7}
 800690e:	4770      	bx	lr
 8006910:	40012400 	.word	0x40012400
 8006914:	20000060 	.word	0x20000060
 8006918:	431bde83 	.word	0x431bde83

0800691c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006924:	2300      	movs	r3, #0
 8006926:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8006928:	2300      	movs	r3, #0
 800692a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	f003 0301 	and.w	r3, r3, #1
 8006936:	2b01      	cmp	r3, #1
 8006938:	d040      	beq.n	80069bc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	689a      	ldr	r2, [r3, #8]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f042 0201 	orr.w	r2, r2, #1
 8006948:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800694a:	4b1f      	ldr	r3, [pc, #124]	@ (80069c8 <ADC_Enable+0xac>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a1f      	ldr	r2, [pc, #124]	@ (80069cc <ADC_Enable+0xb0>)
 8006950:	fba2 2303 	umull	r2, r3, r2, r3
 8006954:	0c9b      	lsrs	r3, r3, #18
 8006956:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8006958:	e002      	b.n	8006960 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	3b01      	subs	r3, #1
 800695e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1f9      	bne.n	800695a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006966:	f7ff fb27 	bl	8005fb8 <HAL_GetTick>
 800696a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800696c:	e01f      	b.n	80069ae <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800696e:	f7ff fb23 	bl	8005fb8 <HAL_GetTick>
 8006972:	4602      	mov	r2, r0
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	1ad3      	subs	r3, r2, r3
 8006978:	2b02      	cmp	r3, #2
 800697a:	d918      	bls.n	80069ae <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	f003 0301 	and.w	r3, r3, #1
 8006986:	2b01      	cmp	r3, #1
 8006988:	d011      	beq.n	80069ae <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800698e:	f043 0210 	orr.w	r2, r3, #16
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800699a:	f043 0201 	orr.w	r2, r3, #1
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	e007      	b.n	80069be <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	f003 0301 	and.w	r3, r3, #1
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d1d8      	bne.n	800696e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3710      	adds	r7, #16
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	20000060 	.word	0x20000060
 80069cc:	431bde83 	.word	0x431bde83

080069d0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80069d8:	2300      	movs	r3, #0
 80069da:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	f003 0301 	and.w	r3, r3, #1
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d12e      	bne.n	8006a48 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	689a      	ldr	r2, [r3, #8]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f022 0201 	bic.w	r2, r2, #1
 80069f8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80069fa:	f7ff fadd 	bl	8005fb8 <HAL_GetTick>
 80069fe:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8006a00:	e01b      	b.n	8006a3a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006a02:	f7ff fad9 	bl	8005fb8 <HAL_GetTick>
 8006a06:	4602      	mov	r2, r0
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	1ad3      	subs	r3, r2, r3
 8006a0c:	2b02      	cmp	r3, #2
 8006a0e:	d914      	bls.n	8006a3a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	f003 0301 	and.w	r3, r3, #1
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d10d      	bne.n	8006a3a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a22:	f043 0210 	orr.w	r2, r3, #16
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a2e:	f043 0201 	orr.w	r2, r3, #1
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	e007      	b.n	8006a4a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	f003 0301 	and.w	r3, r3, #1
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d0dc      	beq.n	8006a02 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3710      	adds	r7, #16
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
	...

08006a54 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8006a54:	b590      	push	{r4, r7, lr}
 8006a56:	b087      	sub	sp, #28
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8006a60:	2300      	movs	r3, #0
 8006a62:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d101      	bne.n	8006a72 <HAL_ADCEx_Calibration_Start+0x1e>
 8006a6e:	2302      	movs	r3, #2
 8006a70:	e097      	b.n	8006ba2 <HAL_ADCEx_Calibration_Start+0x14e>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2201      	movs	r2, #1
 8006a76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f7ff ffa8 	bl	80069d0 <ADC_ConversionStop_Disable>
 8006a80:	4603      	mov	r3, r0
 8006a82:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f7ff ff49 	bl	800691c <ADC_Enable>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8006a8e:	7dfb      	ldrb	r3, [r7, #23]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f040 8081 	bne.w	8006b98 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a9a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006a9e:	f023 0302 	bic.w	r3, r3, #2
 8006aa2:	f043 0202 	orr.w	r2, r3, #2
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8006aaa:	4b40      	ldr	r3, [pc, #256]	@ (8006bac <HAL_ADCEx_Calibration_Start+0x158>)
 8006aac:	681c      	ldr	r4, [r3, #0]
 8006aae:	2002      	movs	r0, #2
 8006ab0:	f002 fb3c 	bl	800912c <HAL_RCCEx_GetPeriphCLKFreq>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8006aba:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8006abc:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8006abe:	e002      	b.n	8006ac6 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d1f9      	bne.n	8006ac0 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	689a      	ldr	r2, [r3, #8]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f042 0208 	orr.w	r2, r2, #8
 8006ada:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8006adc:	f7ff fa6c 	bl	8005fb8 <HAL_GetTick>
 8006ae0:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8006ae2:	e01b      	b.n	8006b1c <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8006ae4:	f7ff fa68 	bl	8005fb8 <HAL_GetTick>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	1ad3      	subs	r3, r2, r3
 8006aee:	2b0a      	cmp	r3, #10
 8006af0:	d914      	bls.n	8006b1c <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	f003 0308 	and.w	r3, r3, #8
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d00d      	beq.n	8006b1c <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b04:	f023 0312 	bic.w	r3, r3, #18
 8006b08:	f043 0210 	orr.w	r2, r3, #16
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e042      	b.n	8006ba2 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	f003 0308 	and.w	r3, r3, #8
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d1dc      	bne.n	8006ae4 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	689a      	ldr	r2, [r3, #8]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f042 0204 	orr.w	r2, r2, #4
 8006b38:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8006b3a:	f7ff fa3d 	bl	8005fb8 <HAL_GetTick>
 8006b3e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8006b40:	e01b      	b.n	8006b7a <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8006b42:	f7ff fa39 	bl	8005fb8 <HAL_GetTick>
 8006b46:	4602      	mov	r2, r0
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	2b0a      	cmp	r3, #10
 8006b4e:	d914      	bls.n	8006b7a <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	f003 0304 	and.w	r3, r3, #4
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d00d      	beq.n	8006b7a <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b62:	f023 0312 	bic.w	r3, r3, #18
 8006b66:	f043 0210 	orr.w	r2, r3, #16
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e013      	b.n	8006ba2 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	f003 0304 	and.w	r3, r3, #4
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d1dc      	bne.n	8006b42 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b8c:	f023 0303 	bic.w	r3, r3, #3
 8006b90:	f043 0201 	orr.w	r2, r3, #1
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8006ba0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	371c      	adds	r7, #28
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd90      	pop	{r4, r7, pc}
 8006baa:	bf00      	nop
 8006bac:	20000060 	.word	0x20000060

08006bb0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8006bb8:	bf00      	nop
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bc80      	pop	{r7}
 8006bc0:	4770      	bx	lr
	...

08006bc4 <__NVIC_SetPriorityGrouping>:
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b085      	sub	sp, #20
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f003 0307 	and.w	r3, r3, #7
 8006bd2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8006c08 <__NVIC_SetPriorityGrouping+0x44>)
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006bda:	68ba      	ldr	r2, [r7, #8]
 8006bdc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006be0:	4013      	ands	r3, r2
 8006be2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006bec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006bf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006bf6:	4a04      	ldr	r2, [pc, #16]	@ (8006c08 <__NVIC_SetPriorityGrouping+0x44>)
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	60d3      	str	r3, [r2, #12]
}
 8006bfc:	bf00      	nop
 8006bfe:	3714      	adds	r7, #20
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bc80      	pop	{r7}
 8006c04:	4770      	bx	lr
 8006c06:	bf00      	nop
 8006c08:	e000ed00 	.word	0xe000ed00

08006c0c <__NVIC_GetPriorityGrouping>:
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006c10:	4b04      	ldr	r3, [pc, #16]	@ (8006c24 <__NVIC_GetPriorityGrouping+0x18>)
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	0a1b      	lsrs	r3, r3, #8
 8006c16:	f003 0307 	and.w	r3, r3, #7
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bc80      	pop	{r7}
 8006c20:	4770      	bx	lr
 8006c22:	bf00      	nop
 8006c24:	e000ed00 	.word	0xe000ed00

08006c28 <__NVIC_EnableIRQ>:
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	4603      	mov	r3, r0
 8006c30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	db0b      	blt.n	8006c52 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006c3a:	79fb      	ldrb	r3, [r7, #7]
 8006c3c:	f003 021f 	and.w	r2, r3, #31
 8006c40:	4906      	ldr	r1, [pc, #24]	@ (8006c5c <__NVIC_EnableIRQ+0x34>)
 8006c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c46:	095b      	lsrs	r3, r3, #5
 8006c48:	2001      	movs	r0, #1
 8006c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8006c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006c52:	bf00      	nop
 8006c54:	370c      	adds	r7, #12
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bc80      	pop	{r7}
 8006c5a:	4770      	bx	lr
 8006c5c:	e000e100 	.word	0xe000e100

08006c60 <__NVIC_SetPriority>:
{
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	4603      	mov	r3, r0
 8006c68:	6039      	str	r1, [r7, #0]
 8006c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	db0a      	blt.n	8006c8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	b2da      	uxtb	r2, r3
 8006c78:	490c      	ldr	r1, [pc, #48]	@ (8006cac <__NVIC_SetPriority+0x4c>)
 8006c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c7e:	0112      	lsls	r2, r2, #4
 8006c80:	b2d2      	uxtb	r2, r2
 8006c82:	440b      	add	r3, r1
 8006c84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006c88:	e00a      	b.n	8006ca0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	b2da      	uxtb	r2, r3
 8006c8e:	4908      	ldr	r1, [pc, #32]	@ (8006cb0 <__NVIC_SetPriority+0x50>)
 8006c90:	79fb      	ldrb	r3, [r7, #7]
 8006c92:	f003 030f 	and.w	r3, r3, #15
 8006c96:	3b04      	subs	r3, #4
 8006c98:	0112      	lsls	r2, r2, #4
 8006c9a:	b2d2      	uxtb	r2, r2
 8006c9c:	440b      	add	r3, r1
 8006c9e:	761a      	strb	r2, [r3, #24]
}
 8006ca0:	bf00      	nop
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bc80      	pop	{r7}
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	e000e100 	.word	0xe000e100
 8006cb0:	e000ed00 	.word	0xe000ed00

08006cb4 <NVIC_EncodePriority>:
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b089      	sub	sp, #36	@ 0x24
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	60b9      	str	r1, [r7, #8]
 8006cbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f003 0307 	and.w	r3, r3, #7
 8006cc6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	f1c3 0307 	rsb	r3, r3, #7
 8006cce:	2b04      	cmp	r3, #4
 8006cd0:	bf28      	it	cs
 8006cd2:	2304      	movcs	r3, #4
 8006cd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	3304      	adds	r3, #4
 8006cda:	2b06      	cmp	r3, #6
 8006cdc:	d902      	bls.n	8006ce4 <NVIC_EncodePriority+0x30>
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	3b03      	subs	r3, #3
 8006ce2:	e000      	b.n	8006ce6 <NVIC_EncodePriority+0x32>
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8006cec:	69bb      	ldr	r3, [r7, #24]
 8006cee:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf2:	43da      	mvns	r2, r3
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	401a      	ands	r2, r3
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	fa01 f303 	lsl.w	r3, r1, r3
 8006d06:	43d9      	mvns	r1, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d0c:	4313      	orrs	r3, r2
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3724      	adds	r7, #36	@ 0x24
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bc80      	pop	{r7}
 8006d16:	4770      	bx	lr

08006d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	3b01      	subs	r3, #1
 8006d24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006d28:	d301      	bcc.n	8006d2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e00f      	b.n	8006d4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006d2e:	4a0a      	ldr	r2, [pc, #40]	@ (8006d58 <SysTick_Config+0x40>)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	3b01      	subs	r3, #1
 8006d34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006d36:	210f      	movs	r1, #15
 8006d38:	f04f 30ff 	mov.w	r0, #4294967295
 8006d3c:	f7ff ff90 	bl	8006c60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006d40:	4b05      	ldr	r3, [pc, #20]	@ (8006d58 <SysTick_Config+0x40>)
 8006d42:	2200      	movs	r2, #0
 8006d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006d46:	4b04      	ldr	r3, [pc, #16]	@ (8006d58 <SysTick_Config+0x40>)
 8006d48:	2207      	movs	r2, #7
 8006d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3708      	adds	r7, #8
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	e000e010 	.word	0xe000e010

08006d5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f7ff ff2d 	bl	8006bc4 <__NVIC_SetPriorityGrouping>
}
 8006d6a:	bf00      	nop
 8006d6c:	3708      	adds	r7, #8
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b086      	sub	sp, #24
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	4603      	mov	r3, r0
 8006d7a:	60b9      	str	r1, [r7, #8]
 8006d7c:	607a      	str	r2, [r7, #4]
 8006d7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006d80:	2300      	movs	r3, #0
 8006d82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006d84:	f7ff ff42 	bl	8006c0c <__NVIC_GetPriorityGrouping>
 8006d88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	68b9      	ldr	r1, [r7, #8]
 8006d8e:	6978      	ldr	r0, [r7, #20]
 8006d90:	f7ff ff90 	bl	8006cb4 <NVIC_EncodePriority>
 8006d94:	4602      	mov	r2, r0
 8006d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d9a:	4611      	mov	r1, r2
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f7ff ff5f 	bl	8006c60 <__NVIC_SetPriority>
}
 8006da2:	bf00      	nop
 8006da4:	3718      	adds	r7, #24
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b082      	sub	sp, #8
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	4603      	mov	r3, r0
 8006db2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006db8:	4618      	mov	r0, r3
 8006dba:	f7ff ff35 	bl	8006c28 <__NVIC_EnableIRQ>
}
 8006dbe:	bf00      	nop
 8006dc0:	3708      	adds	r7, #8
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}

08006dc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006dc6:	b580      	push	{r7, lr}
 8006dc8:	b082      	sub	sp, #8
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f7ff ffa2 	bl	8006d18 <SysTick_Config>
 8006dd4:	4603      	mov	r3, r0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3708      	adds	r7, #8
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
	...

08006de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b08b      	sub	sp, #44	@ 0x2c
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006dea:	2300      	movs	r3, #0
 8006dec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006dee:	2300      	movs	r3, #0
 8006df0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006df2:	e169      	b.n	80070c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006df4:	2201      	movs	r2, #1
 8006df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dfc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	69fa      	ldr	r2, [r7, #28]
 8006e04:	4013      	ands	r3, r2
 8006e06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006e08:	69ba      	ldr	r2, [r7, #24]
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	f040 8158 	bne.w	80070c2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	4a9a      	ldr	r2, [pc, #616]	@ (8007080 <HAL_GPIO_Init+0x2a0>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d05e      	beq.n	8006eda <HAL_GPIO_Init+0xfa>
 8006e1c:	4a98      	ldr	r2, [pc, #608]	@ (8007080 <HAL_GPIO_Init+0x2a0>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d875      	bhi.n	8006f0e <HAL_GPIO_Init+0x12e>
 8006e22:	4a98      	ldr	r2, [pc, #608]	@ (8007084 <HAL_GPIO_Init+0x2a4>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d058      	beq.n	8006eda <HAL_GPIO_Init+0xfa>
 8006e28:	4a96      	ldr	r2, [pc, #600]	@ (8007084 <HAL_GPIO_Init+0x2a4>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d86f      	bhi.n	8006f0e <HAL_GPIO_Init+0x12e>
 8006e2e:	4a96      	ldr	r2, [pc, #600]	@ (8007088 <HAL_GPIO_Init+0x2a8>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d052      	beq.n	8006eda <HAL_GPIO_Init+0xfa>
 8006e34:	4a94      	ldr	r2, [pc, #592]	@ (8007088 <HAL_GPIO_Init+0x2a8>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d869      	bhi.n	8006f0e <HAL_GPIO_Init+0x12e>
 8006e3a:	4a94      	ldr	r2, [pc, #592]	@ (800708c <HAL_GPIO_Init+0x2ac>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d04c      	beq.n	8006eda <HAL_GPIO_Init+0xfa>
 8006e40:	4a92      	ldr	r2, [pc, #584]	@ (800708c <HAL_GPIO_Init+0x2ac>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d863      	bhi.n	8006f0e <HAL_GPIO_Init+0x12e>
 8006e46:	4a92      	ldr	r2, [pc, #584]	@ (8007090 <HAL_GPIO_Init+0x2b0>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d046      	beq.n	8006eda <HAL_GPIO_Init+0xfa>
 8006e4c:	4a90      	ldr	r2, [pc, #576]	@ (8007090 <HAL_GPIO_Init+0x2b0>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d85d      	bhi.n	8006f0e <HAL_GPIO_Init+0x12e>
 8006e52:	2b12      	cmp	r3, #18
 8006e54:	d82a      	bhi.n	8006eac <HAL_GPIO_Init+0xcc>
 8006e56:	2b12      	cmp	r3, #18
 8006e58:	d859      	bhi.n	8006f0e <HAL_GPIO_Init+0x12e>
 8006e5a:	a201      	add	r2, pc, #4	@ (adr r2, 8006e60 <HAL_GPIO_Init+0x80>)
 8006e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e60:	08006edb 	.word	0x08006edb
 8006e64:	08006eb5 	.word	0x08006eb5
 8006e68:	08006ec7 	.word	0x08006ec7
 8006e6c:	08006f09 	.word	0x08006f09
 8006e70:	08006f0f 	.word	0x08006f0f
 8006e74:	08006f0f 	.word	0x08006f0f
 8006e78:	08006f0f 	.word	0x08006f0f
 8006e7c:	08006f0f 	.word	0x08006f0f
 8006e80:	08006f0f 	.word	0x08006f0f
 8006e84:	08006f0f 	.word	0x08006f0f
 8006e88:	08006f0f 	.word	0x08006f0f
 8006e8c:	08006f0f 	.word	0x08006f0f
 8006e90:	08006f0f 	.word	0x08006f0f
 8006e94:	08006f0f 	.word	0x08006f0f
 8006e98:	08006f0f 	.word	0x08006f0f
 8006e9c:	08006f0f 	.word	0x08006f0f
 8006ea0:	08006f0f 	.word	0x08006f0f
 8006ea4:	08006ebd 	.word	0x08006ebd
 8006ea8:	08006ed1 	.word	0x08006ed1
 8006eac:	4a79      	ldr	r2, [pc, #484]	@ (8007094 <HAL_GPIO_Init+0x2b4>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d013      	beq.n	8006eda <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006eb2:	e02c      	b.n	8006f0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	623b      	str	r3, [r7, #32]
          break;
 8006eba:	e029      	b.n	8006f10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	3304      	adds	r3, #4
 8006ec2:	623b      	str	r3, [r7, #32]
          break;
 8006ec4:	e024      	b.n	8006f10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	3308      	adds	r3, #8
 8006ecc:	623b      	str	r3, [r7, #32]
          break;
 8006ece:	e01f      	b.n	8006f10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	330c      	adds	r3, #12
 8006ed6:	623b      	str	r3, [r7, #32]
          break;
 8006ed8:	e01a      	b.n	8006f10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d102      	bne.n	8006ee8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006ee2:	2304      	movs	r3, #4
 8006ee4:	623b      	str	r3, [r7, #32]
          break;
 8006ee6:	e013      	b.n	8006f10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d105      	bne.n	8006efc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006ef0:	2308      	movs	r3, #8
 8006ef2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	69fa      	ldr	r2, [r7, #28]
 8006ef8:	611a      	str	r2, [r3, #16]
          break;
 8006efa:	e009      	b.n	8006f10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006efc:	2308      	movs	r3, #8
 8006efe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	69fa      	ldr	r2, [r7, #28]
 8006f04:	615a      	str	r2, [r3, #20]
          break;
 8006f06:	e003      	b.n	8006f10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	623b      	str	r3, [r7, #32]
          break;
 8006f0c:	e000      	b.n	8006f10 <HAL_GPIO_Init+0x130>
          break;
 8006f0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006f10:	69bb      	ldr	r3, [r7, #24]
 8006f12:	2bff      	cmp	r3, #255	@ 0xff
 8006f14:	d801      	bhi.n	8006f1a <HAL_GPIO_Init+0x13a>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	e001      	b.n	8006f1e <HAL_GPIO_Init+0x13e>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	3304      	adds	r3, #4
 8006f1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	2bff      	cmp	r3, #255	@ 0xff
 8006f24:	d802      	bhi.n	8006f2c <HAL_GPIO_Init+0x14c>
 8006f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	e002      	b.n	8006f32 <HAL_GPIO_Init+0x152>
 8006f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f2e:	3b08      	subs	r3, #8
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	210f      	movs	r1, #15
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8006f40:	43db      	mvns	r3, r3
 8006f42:	401a      	ands	r2, r3
 8006f44:	6a39      	ldr	r1, [r7, #32]
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	fa01 f303 	lsl.w	r3, r1, r3
 8006f4c:	431a      	orrs	r2, r3
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	f000 80b1 	beq.w	80070c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006f60:	4b4d      	ldr	r3, [pc, #308]	@ (8007098 <HAL_GPIO_Init+0x2b8>)
 8006f62:	699b      	ldr	r3, [r3, #24]
 8006f64:	4a4c      	ldr	r2, [pc, #304]	@ (8007098 <HAL_GPIO_Init+0x2b8>)
 8006f66:	f043 0301 	orr.w	r3, r3, #1
 8006f6a:	6193      	str	r3, [r2, #24]
 8006f6c:	4b4a      	ldr	r3, [pc, #296]	@ (8007098 <HAL_GPIO_Init+0x2b8>)
 8006f6e:	699b      	ldr	r3, [r3, #24]
 8006f70:	f003 0301 	and.w	r3, r3, #1
 8006f74:	60bb      	str	r3, [r7, #8]
 8006f76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006f78:	4a48      	ldr	r2, [pc, #288]	@ (800709c <HAL_GPIO_Init+0x2bc>)
 8006f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f7c:	089b      	lsrs	r3, r3, #2
 8006f7e:	3302      	adds	r3, #2
 8006f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f88:	f003 0303 	and.w	r3, r3, #3
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	220f      	movs	r2, #15
 8006f90:	fa02 f303 	lsl.w	r3, r2, r3
 8006f94:	43db      	mvns	r3, r3
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	4013      	ands	r3, r2
 8006f9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4a40      	ldr	r2, [pc, #256]	@ (80070a0 <HAL_GPIO_Init+0x2c0>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d013      	beq.n	8006fcc <HAL_GPIO_Init+0x1ec>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4a3f      	ldr	r2, [pc, #252]	@ (80070a4 <HAL_GPIO_Init+0x2c4>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d00d      	beq.n	8006fc8 <HAL_GPIO_Init+0x1e8>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a3e      	ldr	r2, [pc, #248]	@ (80070a8 <HAL_GPIO_Init+0x2c8>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d007      	beq.n	8006fc4 <HAL_GPIO_Init+0x1e4>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a3d      	ldr	r2, [pc, #244]	@ (80070ac <HAL_GPIO_Init+0x2cc>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d101      	bne.n	8006fc0 <HAL_GPIO_Init+0x1e0>
 8006fbc:	2303      	movs	r3, #3
 8006fbe:	e006      	b.n	8006fce <HAL_GPIO_Init+0x1ee>
 8006fc0:	2304      	movs	r3, #4
 8006fc2:	e004      	b.n	8006fce <HAL_GPIO_Init+0x1ee>
 8006fc4:	2302      	movs	r3, #2
 8006fc6:	e002      	b.n	8006fce <HAL_GPIO_Init+0x1ee>
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e000      	b.n	8006fce <HAL_GPIO_Init+0x1ee>
 8006fcc:	2300      	movs	r3, #0
 8006fce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fd0:	f002 0203 	and.w	r2, r2, #3
 8006fd4:	0092      	lsls	r2, r2, #2
 8006fd6:	4093      	lsls	r3, r2
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006fde:	492f      	ldr	r1, [pc, #188]	@ (800709c <HAL_GPIO_Init+0x2bc>)
 8006fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe2:	089b      	lsrs	r3, r3, #2
 8006fe4:	3302      	adds	r3, #2
 8006fe6:	68fa      	ldr	r2, [r7, #12]
 8006fe8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d006      	beq.n	8007006 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006ff8:	4b2d      	ldr	r3, [pc, #180]	@ (80070b0 <HAL_GPIO_Init+0x2d0>)
 8006ffa:	689a      	ldr	r2, [r3, #8]
 8006ffc:	492c      	ldr	r1, [pc, #176]	@ (80070b0 <HAL_GPIO_Init+0x2d0>)
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	4313      	orrs	r3, r2
 8007002:	608b      	str	r3, [r1, #8]
 8007004:	e006      	b.n	8007014 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8007006:	4b2a      	ldr	r3, [pc, #168]	@ (80070b0 <HAL_GPIO_Init+0x2d0>)
 8007008:	689a      	ldr	r2, [r3, #8]
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	43db      	mvns	r3, r3
 800700e:	4928      	ldr	r1, [pc, #160]	@ (80070b0 <HAL_GPIO_Init+0x2d0>)
 8007010:	4013      	ands	r3, r2
 8007012:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800701c:	2b00      	cmp	r3, #0
 800701e:	d006      	beq.n	800702e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8007020:	4b23      	ldr	r3, [pc, #140]	@ (80070b0 <HAL_GPIO_Init+0x2d0>)
 8007022:	68da      	ldr	r2, [r3, #12]
 8007024:	4922      	ldr	r1, [pc, #136]	@ (80070b0 <HAL_GPIO_Init+0x2d0>)
 8007026:	69bb      	ldr	r3, [r7, #24]
 8007028:	4313      	orrs	r3, r2
 800702a:	60cb      	str	r3, [r1, #12]
 800702c:	e006      	b.n	800703c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800702e:	4b20      	ldr	r3, [pc, #128]	@ (80070b0 <HAL_GPIO_Init+0x2d0>)
 8007030:	68da      	ldr	r2, [r3, #12]
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	43db      	mvns	r3, r3
 8007036:	491e      	ldr	r1, [pc, #120]	@ (80070b0 <HAL_GPIO_Init+0x2d0>)
 8007038:	4013      	ands	r3, r2
 800703a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007044:	2b00      	cmp	r3, #0
 8007046:	d006      	beq.n	8007056 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8007048:	4b19      	ldr	r3, [pc, #100]	@ (80070b0 <HAL_GPIO_Init+0x2d0>)
 800704a:	685a      	ldr	r2, [r3, #4]
 800704c:	4918      	ldr	r1, [pc, #96]	@ (80070b0 <HAL_GPIO_Init+0x2d0>)
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	4313      	orrs	r3, r2
 8007052:	604b      	str	r3, [r1, #4]
 8007054:	e006      	b.n	8007064 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8007056:	4b16      	ldr	r3, [pc, #88]	@ (80070b0 <HAL_GPIO_Init+0x2d0>)
 8007058:	685a      	ldr	r2, [r3, #4]
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	43db      	mvns	r3, r3
 800705e:	4914      	ldr	r1, [pc, #80]	@ (80070b0 <HAL_GPIO_Init+0x2d0>)
 8007060:	4013      	ands	r3, r2
 8007062:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800706c:	2b00      	cmp	r3, #0
 800706e:	d021      	beq.n	80070b4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8007070:	4b0f      	ldr	r3, [pc, #60]	@ (80070b0 <HAL_GPIO_Init+0x2d0>)
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	490e      	ldr	r1, [pc, #56]	@ (80070b0 <HAL_GPIO_Init+0x2d0>)
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	4313      	orrs	r3, r2
 800707a:	600b      	str	r3, [r1, #0]
 800707c:	e021      	b.n	80070c2 <HAL_GPIO_Init+0x2e2>
 800707e:	bf00      	nop
 8007080:	10320000 	.word	0x10320000
 8007084:	10310000 	.word	0x10310000
 8007088:	10220000 	.word	0x10220000
 800708c:	10210000 	.word	0x10210000
 8007090:	10120000 	.word	0x10120000
 8007094:	10110000 	.word	0x10110000
 8007098:	40021000 	.word	0x40021000
 800709c:	40010000 	.word	0x40010000
 80070a0:	40010800 	.word	0x40010800
 80070a4:	40010c00 	.word	0x40010c00
 80070a8:	40011000 	.word	0x40011000
 80070ac:	40011400 	.word	0x40011400
 80070b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80070b4:	4b0b      	ldr	r3, [pc, #44]	@ (80070e4 <HAL_GPIO_Init+0x304>)
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	43db      	mvns	r3, r3
 80070bc:	4909      	ldr	r1, [pc, #36]	@ (80070e4 <HAL_GPIO_Init+0x304>)
 80070be:	4013      	ands	r3, r2
 80070c0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80070c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c4:	3301      	adds	r3, #1
 80070c6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ce:	fa22 f303 	lsr.w	r3, r2, r3
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	f47f ae8e 	bne.w	8006df4 <HAL_GPIO_Init+0x14>
  }
}
 80070d8:	bf00      	nop
 80070da:	bf00      	nop
 80070dc:	372c      	adds	r7, #44	@ 0x2c
 80070de:	46bd      	mov	sp, r7
 80070e0:	bc80      	pop	{r7}
 80070e2:	4770      	bx	lr
 80070e4:	40010400 	.word	0x40010400

080070e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b085      	sub	sp, #20
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	460b      	mov	r3, r1
 80070f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	689a      	ldr	r2, [r3, #8]
 80070f8:	887b      	ldrh	r3, [r7, #2]
 80070fa:	4013      	ands	r3, r2
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d002      	beq.n	8007106 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007100:	2301      	movs	r3, #1
 8007102:	73fb      	strb	r3, [r7, #15]
 8007104:	e001      	b.n	800710a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007106:	2300      	movs	r3, #0
 8007108:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800710a:	7bfb      	ldrb	r3, [r7, #15]
}
 800710c:	4618      	mov	r0, r3
 800710e:	3714      	adds	r7, #20
 8007110:	46bd      	mov	sp, r7
 8007112:	bc80      	pop	{r7}
 8007114:	4770      	bx	lr

08007116 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007116:	b480      	push	{r7}
 8007118:	b083      	sub	sp, #12
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
 800711e:	460b      	mov	r3, r1
 8007120:	807b      	strh	r3, [r7, #2]
 8007122:	4613      	mov	r3, r2
 8007124:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007126:	787b      	ldrb	r3, [r7, #1]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d003      	beq.n	8007134 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800712c:	887a      	ldrh	r2, [r7, #2]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8007132:	e003      	b.n	800713c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007134:	887b      	ldrh	r3, [r7, #2]
 8007136:	041a      	lsls	r2, r3, #16
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	611a      	str	r2, [r3, #16]
}
 800713c:	bf00      	nop
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	bc80      	pop	{r7}
 8007144:	4770      	bx	lr

08007146 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007146:	b480      	push	{r7}
 8007148:	b085      	sub	sp, #20
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
 800714e:	460b      	mov	r3, r1
 8007150:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	68db      	ldr	r3, [r3, #12]
 8007156:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007158:	887a      	ldrh	r2, [r7, #2]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	4013      	ands	r3, r2
 800715e:	041a      	lsls	r2, r3, #16
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	43d9      	mvns	r1, r3
 8007164:	887b      	ldrh	r3, [r7, #2]
 8007166:	400b      	ands	r3, r1
 8007168:	431a      	orrs	r2, r3
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	611a      	str	r2, [r3, #16]
}
 800716e:	bf00      	nop
 8007170:	3714      	adds	r7, #20
 8007172:	46bd      	mov	sp, r7
 8007174:	bc80      	pop	{r7}
 8007176:	4770      	bx	lr

08007178 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d101      	bne.n	800718a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	e12b      	b.n	80073e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007190:	b2db      	uxtb	r3, r3
 8007192:	2b00      	cmp	r3, #0
 8007194:	d106      	bne.n	80071a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f7fe fbac 	bl	80058fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2224      	movs	r2, #36	@ 0x24
 80071a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f022 0201 	bic.w	r2, r2, #1
 80071ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80071ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80071da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80071dc:	f001 feaa 	bl	8008f34 <HAL_RCC_GetPCLK1Freq>
 80071e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	4a81      	ldr	r2, [pc, #516]	@ (80073ec <HAL_I2C_Init+0x274>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d807      	bhi.n	80071fc <HAL_I2C_Init+0x84>
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	4a80      	ldr	r2, [pc, #512]	@ (80073f0 <HAL_I2C_Init+0x278>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	bf94      	ite	ls
 80071f4:	2301      	movls	r3, #1
 80071f6:	2300      	movhi	r3, #0
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	e006      	b.n	800720a <HAL_I2C_Init+0x92>
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	4a7d      	ldr	r2, [pc, #500]	@ (80073f4 <HAL_I2C_Init+0x27c>)
 8007200:	4293      	cmp	r3, r2
 8007202:	bf94      	ite	ls
 8007204:	2301      	movls	r3, #1
 8007206:	2300      	movhi	r3, #0
 8007208:	b2db      	uxtb	r3, r3
 800720a:	2b00      	cmp	r3, #0
 800720c:	d001      	beq.n	8007212 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	e0e7      	b.n	80073e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	4a78      	ldr	r2, [pc, #480]	@ (80073f8 <HAL_I2C_Init+0x280>)
 8007216:	fba2 2303 	umull	r2, r3, r2, r3
 800721a:	0c9b      	lsrs	r3, r3, #18
 800721c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	68ba      	ldr	r2, [r7, #8]
 800722e:	430a      	orrs	r2, r1
 8007230:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	6a1b      	ldr	r3, [r3, #32]
 8007238:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	4a6a      	ldr	r2, [pc, #424]	@ (80073ec <HAL_I2C_Init+0x274>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d802      	bhi.n	800724c <HAL_I2C_Init+0xd4>
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	3301      	adds	r3, #1
 800724a:	e009      	b.n	8007260 <HAL_I2C_Init+0xe8>
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8007252:	fb02 f303 	mul.w	r3, r2, r3
 8007256:	4a69      	ldr	r2, [pc, #420]	@ (80073fc <HAL_I2C_Init+0x284>)
 8007258:	fba2 2303 	umull	r2, r3, r2, r3
 800725c:	099b      	lsrs	r3, r3, #6
 800725e:	3301      	adds	r3, #1
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	6812      	ldr	r2, [r2, #0]
 8007264:	430b      	orrs	r3, r1
 8007266:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	69db      	ldr	r3, [r3, #28]
 800726e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8007272:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	495c      	ldr	r1, [pc, #368]	@ (80073ec <HAL_I2C_Init+0x274>)
 800727c:	428b      	cmp	r3, r1
 800727e:	d819      	bhi.n	80072b4 <HAL_I2C_Init+0x13c>
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	1e59      	subs	r1, r3, #1
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	005b      	lsls	r3, r3, #1
 800728a:	fbb1 f3f3 	udiv	r3, r1, r3
 800728e:	1c59      	adds	r1, r3, #1
 8007290:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007294:	400b      	ands	r3, r1
 8007296:	2b00      	cmp	r3, #0
 8007298:	d00a      	beq.n	80072b0 <HAL_I2C_Init+0x138>
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	1e59      	subs	r1, r3, #1
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	005b      	lsls	r3, r3, #1
 80072a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80072a8:	3301      	adds	r3, #1
 80072aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072ae:	e051      	b.n	8007354 <HAL_I2C_Init+0x1dc>
 80072b0:	2304      	movs	r3, #4
 80072b2:	e04f      	b.n	8007354 <HAL_I2C_Init+0x1dc>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d111      	bne.n	80072e0 <HAL_I2C_Init+0x168>
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	1e58      	subs	r0, r3, #1
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6859      	ldr	r1, [r3, #4]
 80072c4:	460b      	mov	r3, r1
 80072c6:	005b      	lsls	r3, r3, #1
 80072c8:	440b      	add	r3, r1
 80072ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80072ce:	3301      	adds	r3, #1
 80072d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	bf0c      	ite	eq
 80072d8:	2301      	moveq	r3, #1
 80072da:	2300      	movne	r3, #0
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	e012      	b.n	8007306 <HAL_I2C_Init+0x18e>
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	1e58      	subs	r0, r3, #1
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6859      	ldr	r1, [r3, #4]
 80072e8:	460b      	mov	r3, r1
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	440b      	add	r3, r1
 80072ee:	0099      	lsls	r1, r3, #2
 80072f0:	440b      	add	r3, r1
 80072f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80072f6:	3301      	adds	r3, #1
 80072f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	bf0c      	ite	eq
 8007300:	2301      	moveq	r3, #1
 8007302:	2300      	movne	r3, #0
 8007304:	b2db      	uxtb	r3, r3
 8007306:	2b00      	cmp	r3, #0
 8007308:	d001      	beq.n	800730e <HAL_I2C_Init+0x196>
 800730a:	2301      	movs	r3, #1
 800730c:	e022      	b.n	8007354 <HAL_I2C_Init+0x1dc>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d10e      	bne.n	8007334 <HAL_I2C_Init+0x1bc>
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	1e58      	subs	r0, r3, #1
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6859      	ldr	r1, [r3, #4]
 800731e:	460b      	mov	r3, r1
 8007320:	005b      	lsls	r3, r3, #1
 8007322:	440b      	add	r3, r1
 8007324:	fbb0 f3f3 	udiv	r3, r0, r3
 8007328:	3301      	adds	r3, #1
 800732a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800732e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007332:	e00f      	b.n	8007354 <HAL_I2C_Init+0x1dc>
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	1e58      	subs	r0, r3, #1
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6859      	ldr	r1, [r3, #4]
 800733c:	460b      	mov	r3, r1
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	440b      	add	r3, r1
 8007342:	0099      	lsls	r1, r3, #2
 8007344:	440b      	add	r3, r1
 8007346:	fbb0 f3f3 	udiv	r3, r0, r3
 800734a:	3301      	adds	r3, #1
 800734c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007350:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007354:	6879      	ldr	r1, [r7, #4]
 8007356:	6809      	ldr	r1, [r1, #0]
 8007358:	4313      	orrs	r3, r2
 800735a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	69da      	ldr	r2, [r3, #28]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6a1b      	ldr	r3, [r3, #32]
 800736e:	431a      	orrs	r2, r3
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	430a      	orrs	r2, r1
 8007376:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8007382:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	6911      	ldr	r1, [r2, #16]
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	68d2      	ldr	r2, [r2, #12]
 800738e:	4311      	orrs	r1, r2
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	6812      	ldr	r2, [r2, #0]
 8007394:	430b      	orrs	r3, r1
 8007396:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	695a      	ldr	r2, [r3, #20]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	699b      	ldr	r3, [r3, #24]
 80073aa:	431a      	orrs	r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	430a      	orrs	r2, r1
 80073b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f042 0201 	orr.w	r2, r2, #1
 80073c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2220      	movs	r2, #32
 80073ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	000186a0 	.word	0x000186a0
 80073f0:	001e847f 	.word	0x001e847f
 80073f4:	003d08ff 	.word	0x003d08ff
 80073f8:	431bde83 	.word	0x431bde83
 80073fc:	10624dd3 	.word	0x10624dd3

08007400 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b088      	sub	sp, #32
 8007404:	af02      	add	r7, sp, #8
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	607a      	str	r2, [r7, #4]
 800740a:	461a      	mov	r2, r3
 800740c:	460b      	mov	r3, r1
 800740e:	817b      	strh	r3, [r7, #10]
 8007410:	4613      	mov	r3, r2
 8007412:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007414:	f7fe fdd0 	bl	8005fb8 <HAL_GetTick>
 8007418:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007420:	b2db      	uxtb	r3, r3
 8007422:	2b20      	cmp	r3, #32
 8007424:	f040 80e0 	bne.w	80075e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	9300      	str	r3, [sp, #0]
 800742c:	2319      	movs	r3, #25
 800742e:	2201      	movs	r2, #1
 8007430:	4970      	ldr	r1, [pc, #448]	@ (80075f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8007432:	68f8      	ldr	r0, [r7, #12]
 8007434:	f000 ff7e 	bl	8008334 <I2C_WaitOnFlagUntilTimeout>
 8007438:	4603      	mov	r3, r0
 800743a:	2b00      	cmp	r3, #0
 800743c:	d001      	beq.n	8007442 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800743e:	2302      	movs	r3, #2
 8007440:	e0d3      	b.n	80075ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007448:	2b01      	cmp	r3, #1
 800744a:	d101      	bne.n	8007450 <HAL_I2C_Master_Transmit+0x50>
 800744c:	2302      	movs	r3, #2
 800744e:	e0cc      	b.n	80075ea <HAL_I2C_Master_Transmit+0x1ea>
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2201      	movs	r2, #1
 8007454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f003 0301 	and.w	r3, r3, #1
 8007462:	2b01      	cmp	r3, #1
 8007464:	d007      	beq.n	8007476 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f042 0201 	orr.w	r2, r2, #1
 8007474:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007484:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2221      	movs	r2, #33	@ 0x21
 800748a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2210      	movs	r2, #16
 8007492:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2200      	movs	r2, #0
 800749a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	893a      	ldrh	r2, [r7, #8]
 80074a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074ac:	b29a      	uxth	r2, r3
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	4a50      	ldr	r2, [pc, #320]	@ (80075f8 <HAL_I2C_Master_Transmit+0x1f8>)
 80074b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80074b8:	8979      	ldrh	r1, [r7, #10]
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	6a3a      	ldr	r2, [r7, #32]
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	f000 fd38 	bl	8007f34 <I2C_MasterRequestWrite>
 80074c4:	4603      	mov	r3, r0
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d001      	beq.n	80074ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	e08d      	b.n	80075ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074ce:	2300      	movs	r3, #0
 80074d0:	613b      	str	r3, [r7, #16]
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	695b      	ldr	r3, [r3, #20]
 80074d8:	613b      	str	r3, [r7, #16]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	699b      	ldr	r3, [r3, #24]
 80074e0:	613b      	str	r3, [r7, #16]
 80074e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80074e4:	e066      	b.n	80075b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80074e6:	697a      	ldr	r2, [r7, #20]
 80074e8:	6a39      	ldr	r1, [r7, #32]
 80074ea:	68f8      	ldr	r0, [r7, #12]
 80074ec:	f001 f83c 	bl	8008568 <I2C_WaitOnTXEFlagUntilTimeout>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00d      	beq.n	8007512 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074fa:	2b04      	cmp	r3, #4
 80074fc:	d107      	bne.n	800750e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800750c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	e06b      	b.n	80075ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007516:	781a      	ldrb	r2, [r3, #0]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007522:	1c5a      	adds	r2, r3, #1
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800752c:	b29b      	uxth	r3, r3
 800752e:	3b01      	subs	r3, #1
 8007530:	b29a      	uxth	r2, r3
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800753a:	3b01      	subs	r3, #1
 800753c:	b29a      	uxth	r2, r3
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	695b      	ldr	r3, [r3, #20]
 8007548:	f003 0304 	and.w	r3, r3, #4
 800754c:	2b04      	cmp	r3, #4
 800754e:	d11b      	bne.n	8007588 <HAL_I2C_Master_Transmit+0x188>
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007554:	2b00      	cmp	r3, #0
 8007556:	d017      	beq.n	8007588 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800755c:	781a      	ldrb	r2, [r3, #0]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007568:	1c5a      	adds	r2, r3, #1
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007572:	b29b      	uxth	r3, r3
 8007574:	3b01      	subs	r3, #1
 8007576:	b29a      	uxth	r2, r3
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007580:	3b01      	subs	r3, #1
 8007582:	b29a      	uxth	r2, r3
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007588:	697a      	ldr	r2, [r7, #20]
 800758a:	6a39      	ldr	r1, [r7, #32]
 800758c:	68f8      	ldr	r0, [r7, #12]
 800758e:	f001 f833 	bl	80085f8 <I2C_WaitOnBTFFlagUntilTimeout>
 8007592:	4603      	mov	r3, r0
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00d      	beq.n	80075b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800759c:	2b04      	cmp	r3, #4
 800759e:	d107      	bne.n	80075b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80075ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80075b0:	2301      	movs	r3, #1
 80075b2:	e01a      	b.n	80075ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d194      	bne.n	80074e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80075ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2220      	movs	r2, #32
 80075d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2200      	movs	r2, #0
 80075e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80075e4:	2300      	movs	r3, #0
 80075e6:	e000      	b.n	80075ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80075e8:	2302      	movs	r3, #2
  }
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3718      	adds	r7, #24
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	00100002 	.word	0x00100002
 80075f8:	ffff0000 	.word	0xffff0000

080075fc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b088      	sub	sp, #32
 8007600:	af02      	add	r7, sp, #8
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	4608      	mov	r0, r1
 8007606:	4611      	mov	r1, r2
 8007608:	461a      	mov	r2, r3
 800760a:	4603      	mov	r3, r0
 800760c:	817b      	strh	r3, [r7, #10]
 800760e:	460b      	mov	r3, r1
 8007610:	813b      	strh	r3, [r7, #8]
 8007612:	4613      	mov	r3, r2
 8007614:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007616:	f7fe fccf 	bl	8005fb8 <HAL_GetTick>
 800761a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007622:	b2db      	uxtb	r3, r3
 8007624:	2b20      	cmp	r3, #32
 8007626:	f040 80d9 	bne.w	80077dc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	9300      	str	r3, [sp, #0]
 800762e:	2319      	movs	r3, #25
 8007630:	2201      	movs	r2, #1
 8007632:	496d      	ldr	r1, [pc, #436]	@ (80077e8 <HAL_I2C_Mem_Write+0x1ec>)
 8007634:	68f8      	ldr	r0, [r7, #12]
 8007636:	f000 fe7d 	bl	8008334 <I2C_WaitOnFlagUntilTimeout>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	d001      	beq.n	8007644 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007640:	2302      	movs	r3, #2
 8007642:	e0cc      	b.n	80077de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800764a:	2b01      	cmp	r3, #1
 800764c:	d101      	bne.n	8007652 <HAL_I2C_Mem_Write+0x56>
 800764e:	2302      	movs	r3, #2
 8007650:	e0c5      	b.n	80077de <HAL_I2C_Mem_Write+0x1e2>
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2201      	movs	r2, #1
 8007656:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f003 0301 	and.w	r3, r3, #1
 8007664:	2b01      	cmp	r3, #1
 8007666:	d007      	beq.n	8007678 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f042 0201 	orr.w	r2, r2, #1
 8007676:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007686:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2221      	movs	r2, #33	@ 0x21
 800768c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2240      	movs	r2, #64	@ 0x40
 8007694:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2200      	movs	r2, #0
 800769c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	6a3a      	ldr	r2, [r7, #32]
 80076a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80076a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076ae:	b29a      	uxth	r2, r3
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	4a4d      	ldr	r2, [pc, #308]	@ (80077ec <HAL_I2C_Mem_Write+0x1f0>)
 80076b8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80076ba:	88f8      	ldrh	r0, [r7, #6]
 80076bc:	893a      	ldrh	r2, [r7, #8]
 80076be:	8979      	ldrh	r1, [r7, #10]
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	9301      	str	r3, [sp, #4]
 80076c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076c6:	9300      	str	r3, [sp, #0]
 80076c8:	4603      	mov	r3, r0
 80076ca:	68f8      	ldr	r0, [r7, #12]
 80076cc:	f000 fcb4 	bl	8008038 <I2C_RequestMemoryWrite>
 80076d0:	4603      	mov	r3, r0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d052      	beq.n	800777c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	e081      	b.n	80077de <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80076da:	697a      	ldr	r2, [r7, #20]
 80076dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80076de:	68f8      	ldr	r0, [r7, #12]
 80076e0:	f000 ff42 	bl	8008568 <I2C_WaitOnTXEFlagUntilTimeout>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d00d      	beq.n	8007706 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076ee:	2b04      	cmp	r3, #4
 80076f0:	d107      	bne.n	8007702 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007700:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	e06b      	b.n	80077de <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800770a:	781a      	ldrb	r2, [r3, #0]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007716:	1c5a      	adds	r2, r3, #1
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007720:	3b01      	subs	r3, #1
 8007722:	b29a      	uxth	r2, r3
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800772c:	b29b      	uxth	r3, r3
 800772e:	3b01      	subs	r3, #1
 8007730:	b29a      	uxth	r2, r3
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	695b      	ldr	r3, [r3, #20]
 800773c:	f003 0304 	and.w	r3, r3, #4
 8007740:	2b04      	cmp	r3, #4
 8007742:	d11b      	bne.n	800777c <HAL_I2C_Mem_Write+0x180>
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007748:	2b00      	cmp	r3, #0
 800774a:	d017      	beq.n	800777c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007750:	781a      	ldrb	r2, [r3, #0]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800775c:	1c5a      	adds	r2, r3, #1
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007766:	3b01      	subs	r3, #1
 8007768:	b29a      	uxth	r2, r3
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007772:	b29b      	uxth	r3, r3
 8007774:	3b01      	subs	r3, #1
 8007776:	b29a      	uxth	r2, r3
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007780:	2b00      	cmp	r3, #0
 8007782:	d1aa      	bne.n	80076da <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007784:	697a      	ldr	r2, [r7, #20]
 8007786:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007788:	68f8      	ldr	r0, [r7, #12]
 800778a:	f000 ff35 	bl	80085f8 <I2C_WaitOnBTFFlagUntilTimeout>
 800778e:	4603      	mov	r3, r0
 8007790:	2b00      	cmp	r3, #0
 8007792:	d00d      	beq.n	80077b0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007798:	2b04      	cmp	r3, #4
 800779a:	d107      	bne.n	80077ac <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80077aa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	e016      	b.n	80077de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80077be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2220      	movs	r2, #32
 80077c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2200      	movs	r2, #0
 80077cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80077d8:	2300      	movs	r3, #0
 80077da:	e000      	b.n	80077de <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80077dc:	2302      	movs	r3, #2
  }
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3718      	adds	r7, #24
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	00100002 	.word	0x00100002
 80077ec:	ffff0000 	.word	0xffff0000

080077f0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b08c      	sub	sp, #48	@ 0x30
 80077f4:	af02      	add	r7, sp, #8
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	4608      	mov	r0, r1
 80077fa:	4611      	mov	r1, r2
 80077fc:	461a      	mov	r2, r3
 80077fe:	4603      	mov	r3, r0
 8007800:	817b      	strh	r3, [r7, #10]
 8007802:	460b      	mov	r3, r1
 8007804:	813b      	strh	r3, [r7, #8]
 8007806:	4613      	mov	r3, r2
 8007808:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800780a:	2300      	movs	r3, #0
 800780c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800780e:	f7fe fbd3 	bl	8005fb8 <HAL_GetTick>
 8007812:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800781a:	b2db      	uxtb	r3, r3
 800781c:	2b20      	cmp	r3, #32
 800781e:	f040 8250 	bne.w	8007cc2 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007824:	9300      	str	r3, [sp, #0]
 8007826:	2319      	movs	r3, #25
 8007828:	2201      	movs	r2, #1
 800782a:	4982      	ldr	r1, [pc, #520]	@ (8007a34 <HAL_I2C_Mem_Read+0x244>)
 800782c:	68f8      	ldr	r0, [r7, #12]
 800782e:	f000 fd81 	bl	8008334 <I2C_WaitOnFlagUntilTimeout>
 8007832:	4603      	mov	r3, r0
 8007834:	2b00      	cmp	r3, #0
 8007836:	d001      	beq.n	800783c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8007838:	2302      	movs	r3, #2
 800783a:	e243      	b.n	8007cc4 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007842:	2b01      	cmp	r3, #1
 8007844:	d101      	bne.n	800784a <HAL_I2C_Mem_Read+0x5a>
 8007846:	2302      	movs	r3, #2
 8007848:	e23c      	b.n	8007cc4 <HAL_I2C_Mem_Read+0x4d4>
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2201      	movs	r2, #1
 800784e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f003 0301 	and.w	r3, r3, #1
 800785c:	2b01      	cmp	r3, #1
 800785e:	d007      	beq.n	8007870 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f042 0201 	orr.w	r2, r2, #1
 800786e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800787e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2222      	movs	r2, #34	@ 0x22
 8007884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2240      	movs	r2, #64	@ 0x40
 800788c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2200      	movs	r2, #0
 8007894:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800789a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80078a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078a6:	b29a      	uxth	r2, r3
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	4a62      	ldr	r2, [pc, #392]	@ (8007a38 <HAL_I2C_Mem_Read+0x248>)
 80078b0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80078b2:	88f8      	ldrh	r0, [r7, #6]
 80078b4:	893a      	ldrh	r2, [r7, #8]
 80078b6:	8979      	ldrh	r1, [r7, #10]
 80078b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ba:	9301      	str	r3, [sp, #4]
 80078bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078be:	9300      	str	r3, [sp, #0]
 80078c0:	4603      	mov	r3, r0
 80078c2:	68f8      	ldr	r0, [r7, #12]
 80078c4:	f000 fc4e 	bl	8008164 <I2C_RequestMemoryRead>
 80078c8:	4603      	mov	r3, r0
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d001      	beq.n	80078d2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80078ce:	2301      	movs	r3, #1
 80078d0:	e1f8      	b.n	8007cc4 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d113      	bne.n	8007902 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078da:	2300      	movs	r3, #0
 80078dc:	61fb      	str	r3, [r7, #28]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	695b      	ldr	r3, [r3, #20]
 80078e4:	61fb      	str	r3, [r7, #28]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	699b      	ldr	r3, [r3, #24]
 80078ec:	61fb      	str	r3, [r7, #28]
 80078ee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80078fe:	601a      	str	r2, [r3, #0]
 8007900:	e1cc      	b.n	8007c9c <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007906:	2b01      	cmp	r3, #1
 8007908:	d11e      	bne.n	8007948 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007918:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800791a:	b672      	cpsid	i
}
 800791c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800791e:	2300      	movs	r3, #0
 8007920:	61bb      	str	r3, [r7, #24]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	695b      	ldr	r3, [r3, #20]
 8007928:	61bb      	str	r3, [r7, #24]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	699b      	ldr	r3, [r3, #24]
 8007930:	61bb      	str	r3, [r7, #24]
 8007932:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007942:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007944:	b662      	cpsie	i
}
 8007946:	e035      	b.n	80079b4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800794c:	2b02      	cmp	r3, #2
 800794e:	d11e      	bne.n	800798e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800795e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007960:	b672      	cpsid	i
}
 8007962:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007964:	2300      	movs	r3, #0
 8007966:	617b      	str	r3, [r7, #20]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	695b      	ldr	r3, [r3, #20]
 800796e:	617b      	str	r3, [r7, #20]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	699b      	ldr	r3, [r3, #24]
 8007976:	617b      	str	r3, [r7, #20]
 8007978:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007988:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800798a:	b662      	cpsie	i
}
 800798c:	e012      	b.n	80079b4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800799c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800799e:	2300      	movs	r3, #0
 80079a0:	613b      	str	r3, [r7, #16]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	695b      	ldr	r3, [r3, #20]
 80079a8:	613b      	str	r3, [r7, #16]
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	699b      	ldr	r3, [r3, #24]
 80079b0:	613b      	str	r3, [r7, #16]
 80079b2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80079b4:	e172      	b.n	8007c9c <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079ba:	2b03      	cmp	r3, #3
 80079bc:	f200 811f 	bhi.w	8007bfe <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d123      	bne.n	8007a10 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80079c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079ca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80079cc:	68f8      	ldr	r0, [r7, #12]
 80079ce:	f000 fe5b 	bl	8008688 <I2C_WaitOnRXNEFlagUntilTimeout>
 80079d2:	4603      	mov	r3, r0
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d001      	beq.n	80079dc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	e173      	b.n	8007cc4 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	691a      	ldr	r2, [r3, #16]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079e6:	b2d2      	uxtb	r2, r2
 80079e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079ee:	1c5a      	adds	r2, r3, #1
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079f8:	3b01      	subs	r3, #1
 80079fa:	b29a      	uxth	r2, r3
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	3b01      	subs	r3, #1
 8007a08:	b29a      	uxth	r2, r3
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007a0e:	e145      	b.n	8007c9c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a14:	2b02      	cmp	r3, #2
 8007a16:	d152      	bne.n	8007abe <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a1a:	9300      	str	r3, [sp, #0]
 8007a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a1e:	2200      	movs	r2, #0
 8007a20:	4906      	ldr	r1, [pc, #24]	@ (8007a3c <HAL_I2C_Mem_Read+0x24c>)
 8007a22:	68f8      	ldr	r0, [r7, #12]
 8007a24:	f000 fc86 	bl	8008334 <I2C_WaitOnFlagUntilTimeout>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d008      	beq.n	8007a40 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e148      	b.n	8007cc4 <HAL_I2C_Mem_Read+0x4d4>
 8007a32:	bf00      	nop
 8007a34:	00100002 	.word	0x00100002
 8007a38:	ffff0000 	.word	0xffff0000
 8007a3c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8007a40:	b672      	cpsid	i
}
 8007a42:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	691a      	ldr	r2, [r3, #16]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a5e:	b2d2      	uxtb	r2, r2
 8007a60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a66:	1c5a      	adds	r2, r3, #1
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a70:	3b01      	subs	r3, #1
 8007a72:	b29a      	uxth	r2, r3
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	3b01      	subs	r3, #1
 8007a80:	b29a      	uxth	r2, r3
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8007a86:	b662      	cpsie	i
}
 8007a88:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	691a      	ldr	r2, [r3, #16]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a94:	b2d2      	uxtb	r2, r2
 8007a96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a9c:	1c5a      	adds	r2, r3, #1
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007aa6:	3b01      	subs	r3, #1
 8007aa8:	b29a      	uxth	r2, r3
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	3b01      	subs	r3, #1
 8007ab6:	b29a      	uxth	r2, r3
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007abc:	e0ee      	b.n	8007c9c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ac0:	9300      	str	r3, [sp, #0]
 8007ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	4981      	ldr	r1, [pc, #516]	@ (8007ccc <HAL_I2C_Mem_Read+0x4dc>)
 8007ac8:	68f8      	ldr	r0, [r7, #12]
 8007aca:	f000 fc33 	bl	8008334 <I2C_WaitOnFlagUntilTimeout>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d001      	beq.n	8007ad8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	e0f5      	b.n	8007cc4 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	681a      	ldr	r2, [r3, #0]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ae6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007ae8:	b672      	cpsid	i
}
 8007aea:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	691a      	ldr	r2, [r3, #16]
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007af6:	b2d2      	uxtb	r2, r2
 8007af8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007afe:	1c5a      	adds	r2, r3, #1
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b08:	3b01      	subs	r3, #1
 8007b0a:	b29a      	uxth	r2, r3
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	3b01      	subs	r3, #1
 8007b18:	b29a      	uxth	r2, r3
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007b1e:	4b6c      	ldr	r3, [pc, #432]	@ (8007cd0 <HAL_I2C_Mem_Read+0x4e0>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	08db      	lsrs	r3, r3, #3
 8007b24:	4a6b      	ldr	r2, [pc, #428]	@ (8007cd4 <HAL_I2C_Mem_Read+0x4e4>)
 8007b26:	fba2 2303 	umull	r2, r3, r2, r3
 8007b2a:	0a1a      	lsrs	r2, r3, #8
 8007b2c:	4613      	mov	r3, r2
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	4413      	add	r3, r2
 8007b32:	00da      	lsls	r2, r3, #3
 8007b34:	1ad3      	subs	r3, r2, r3
 8007b36:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8007b38:	6a3b      	ldr	r3, [r7, #32]
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8007b3e:	6a3b      	ldr	r3, [r7, #32]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d118      	bne.n	8007b76 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2200      	movs	r2, #0
 8007b48:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2220      	movs	r2, #32
 8007b4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2200      	movs	r2, #0
 8007b56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b5e:	f043 0220 	orr.w	r2, r3, #32
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8007b66:	b662      	cpsie	i
}
 8007b68:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	e0a6      	b.n	8007cc4 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	695b      	ldr	r3, [r3, #20]
 8007b7c:	f003 0304 	and.w	r3, r3, #4
 8007b80:	2b04      	cmp	r3, #4
 8007b82:	d1d9      	bne.n	8007b38 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007b92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	691a      	ldr	r2, [r3, #16]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b9e:	b2d2      	uxtb	r2, r2
 8007ba0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ba6:	1c5a      	adds	r2, r3, #1
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bb0:	3b01      	subs	r3, #1
 8007bb2:	b29a      	uxth	r2, r3
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	3b01      	subs	r3, #1
 8007bc0:	b29a      	uxth	r2, r3
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8007bc6:	b662      	cpsie	i
}
 8007bc8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	691a      	ldr	r2, [r3, #16]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bd4:	b2d2      	uxtb	r2, r2
 8007bd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bdc:	1c5a      	adds	r2, r3, #1
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007be6:	3b01      	subs	r3, #1
 8007be8:	b29a      	uxth	r2, r3
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	3b01      	subs	r3, #1
 8007bf6:	b29a      	uxth	r2, r3
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007bfc:	e04e      	b.n	8007c9c <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007bfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c00:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007c02:	68f8      	ldr	r0, [r7, #12]
 8007c04:	f000 fd40 	bl	8008688 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d001      	beq.n	8007c12 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	e058      	b.n	8007cc4 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	691a      	ldr	r2, [r3, #16]
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c1c:	b2d2      	uxtb	r2, r2
 8007c1e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c24:	1c5a      	adds	r2, r3, #1
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c2e:	3b01      	subs	r3, #1
 8007c30:	b29a      	uxth	r2, r3
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	3b01      	subs	r3, #1
 8007c3e:	b29a      	uxth	r2, r3
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	695b      	ldr	r3, [r3, #20]
 8007c4a:	f003 0304 	and.w	r3, r3, #4
 8007c4e:	2b04      	cmp	r3, #4
 8007c50:	d124      	bne.n	8007c9c <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c56:	2b03      	cmp	r3, #3
 8007c58:	d107      	bne.n	8007c6a <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c68:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	691a      	ldr	r2, [r3, #16]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c74:	b2d2      	uxtb	r2, r2
 8007c76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c7c:	1c5a      	adds	r2, r3, #1
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c86:	3b01      	subs	r3, #1
 8007c88:	b29a      	uxth	r2, r3
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	3b01      	subs	r3, #1
 8007c96:	b29a      	uxth	r2, r3
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	f47f ae88 	bne.w	80079b6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2220      	movs	r2, #32
 8007caa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	e000      	b.n	8007cc4 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8007cc2:	2302      	movs	r3, #2
  }
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3728      	adds	r7, #40	@ 0x28
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	00010004 	.word	0x00010004
 8007cd0:	20000060 	.word	0x20000060
 8007cd4:	14f8b589 	.word	0x14f8b589

08007cd8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b08a      	sub	sp, #40	@ 0x28
 8007cdc:	af02      	add	r7, sp, #8
 8007cde:	60f8      	str	r0, [r7, #12]
 8007ce0:	607a      	str	r2, [r7, #4]
 8007ce2:	603b      	str	r3, [r7, #0]
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8007ce8:	f7fe f966 	bl	8005fb8 <HAL_GetTick>
 8007cec:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	2b20      	cmp	r3, #32
 8007cfc:	f040 8111 	bne.w	8007f22 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	9300      	str	r3, [sp, #0]
 8007d04:	2319      	movs	r3, #25
 8007d06:	2201      	movs	r2, #1
 8007d08:	4988      	ldr	r1, [pc, #544]	@ (8007f2c <HAL_I2C_IsDeviceReady+0x254>)
 8007d0a:	68f8      	ldr	r0, [r7, #12]
 8007d0c:	f000 fb12 	bl	8008334 <I2C_WaitOnFlagUntilTimeout>
 8007d10:	4603      	mov	r3, r0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d001      	beq.n	8007d1a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8007d16:	2302      	movs	r3, #2
 8007d18:	e104      	b.n	8007f24 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d101      	bne.n	8007d28 <HAL_I2C_IsDeviceReady+0x50>
 8007d24:	2302      	movs	r3, #2
 8007d26:	e0fd      	b.n	8007f24 <HAL_I2C_IsDeviceReady+0x24c>
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f003 0301 	and.w	r3, r3, #1
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d007      	beq.n	8007d4e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f042 0201 	orr.w	r2, r2, #1
 8007d4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007d5c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2224      	movs	r2, #36	@ 0x24
 8007d62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	4a70      	ldr	r2, [pc, #448]	@ (8007f30 <HAL_I2C_IsDeviceReady+0x258>)
 8007d70:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007d80:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8007d82:	69fb      	ldr	r3, [r7, #28]
 8007d84:	9300      	str	r3, [sp, #0]
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007d8e:	68f8      	ldr	r0, [r7, #12]
 8007d90:	f000 fad0 	bl	8008334 <I2C_WaitOnFlagUntilTimeout>
 8007d94:	4603      	mov	r3, r0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d00d      	beq.n	8007db6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007da4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007da8:	d103      	bne.n	8007db2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007db0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8007db2:	2303      	movs	r3, #3
 8007db4:	e0b6      	b.n	8007f24 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007db6:	897b      	ldrh	r3, [r7, #10]
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	461a      	mov	r2, r3
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007dc4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8007dc6:	f7fe f8f7 	bl	8005fb8 <HAL_GetTick>
 8007dca:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	695b      	ldr	r3, [r3, #20]
 8007dd2:	f003 0302 	and.w	r3, r3, #2
 8007dd6:	2b02      	cmp	r3, #2
 8007dd8:	bf0c      	ite	eq
 8007dda:	2301      	moveq	r3, #1
 8007ddc:	2300      	movne	r3, #0
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	695b      	ldr	r3, [r3, #20]
 8007de8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007dec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007df0:	bf0c      	ite	eq
 8007df2:	2301      	moveq	r3, #1
 8007df4:	2300      	movne	r3, #0
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007dfa:	e025      	b.n	8007e48 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007dfc:	f7fe f8dc 	bl	8005fb8 <HAL_GetTick>
 8007e00:	4602      	mov	r2, r0
 8007e02:	69fb      	ldr	r3, [r7, #28]
 8007e04:	1ad3      	subs	r3, r2, r3
 8007e06:	683a      	ldr	r2, [r7, #0]
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d302      	bcc.n	8007e12 <HAL_I2C_IsDeviceReady+0x13a>
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d103      	bne.n	8007e1a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	22a0      	movs	r2, #160	@ 0xa0
 8007e16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	695b      	ldr	r3, [r3, #20]
 8007e20:	f003 0302 	and.w	r3, r3, #2
 8007e24:	2b02      	cmp	r3, #2
 8007e26:	bf0c      	ite	eq
 8007e28:	2301      	moveq	r3, #1
 8007e2a:	2300      	movne	r3, #0
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	695b      	ldr	r3, [r3, #20]
 8007e36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e3e:	bf0c      	ite	eq
 8007e40:	2301      	moveq	r3, #1
 8007e42:	2300      	movne	r3, #0
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	2ba0      	cmp	r3, #160	@ 0xa0
 8007e52:	d005      	beq.n	8007e60 <HAL_I2C_IsDeviceReady+0x188>
 8007e54:	7dfb      	ldrb	r3, [r7, #23]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d102      	bne.n	8007e60 <HAL_I2C_IsDeviceReady+0x188>
 8007e5a:	7dbb      	ldrb	r3, [r7, #22]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d0cd      	beq.n	8007dfc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2220      	movs	r2, #32
 8007e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	695b      	ldr	r3, [r3, #20]
 8007e6e:	f003 0302 	and.w	r3, r3, #2
 8007e72:	2b02      	cmp	r3, #2
 8007e74:	d129      	bne.n	8007eca <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007e84:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e86:	2300      	movs	r3, #0
 8007e88:	613b      	str	r3, [r7, #16]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	695b      	ldr	r3, [r3, #20]
 8007e90:	613b      	str	r3, [r7, #16]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	699b      	ldr	r3, [r3, #24]
 8007e98:	613b      	str	r3, [r7, #16]
 8007e9a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	9300      	str	r3, [sp, #0]
 8007ea0:	2319      	movs	r3, #25
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	4921      	ldr	r1, [pc, #132]	@ (8007f2c <HAL_I2C_IsDeviceReady+0x254>)
 8007ea6:	68f8      	ldr	r0, [r7, #12]
 8007ea8:	f000 fa44 	bl	8008334 <I2C_WaitOnFlagUntilTimeout>
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d001      	beq.n	8007eb6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e036      	b.n	8007f24 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2220      	movs	r2, #32
 8007eba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	e02c      	b.n	8007f24 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007ed8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007ee2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	9300      	str	r3, [sp, #0]
 8007ee8:	2319      	movs	r3, #25
 8007eea:	2201      	movs	r2, #1
 8007eec:	490f      	ldr	r1, [pc, #60]	@ (8007f2c <HAL_I2C_IsDeviceReady+0x254>)
 8007eee:	68f8      	ldr	r0, [r7, #12]
 8007ef0:	f000 fa20 	bl	8008334 <I2C_WaitOnFlagUntilTimeout>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d001      	beq.n	8007efe <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	e012      	b.n	8007f24 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	3301      	adds	r3, #1
 8007f02:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8007f04:	69ba      	ldr	r2, [r7, #24]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	f4ff af32 	bcc.w	8007d72 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2220      	movs	r2, #32
 8007f12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	e000      	b.n	8007f24 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8007f22:	2302      	movs	r3, #2
  }
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3720      	adds	r7, #32
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	00100002 	.word	0x00100002
 8007f30:	ffff0000 	.word	0xffff0000

08007f34 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b088      	sub	sp, #32
 8007f38:	af02      	add	r7, sp, #8
 8007f3a:	60f8      	str	r0, [r7, #12]
 8007f3c:	607a      	str	r2, [r7, #4]
 8007f3e:	603b      	str	r3, [r7, #0]
 8007f40:	460b      	mov	r3, r1
 8007f42:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f48:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	2b08      	cmp	r3, #8
 8007f4e:	d006      	beq.n	8007f5e <I2C_MasterRequestWrite+0x2a>
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	d003      	beq.n	8007f5e <I2C_MasterRequestWrite+0x2a>
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007f5c:	d108      	bne.n	8007f70 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007f6c:	601a      	str	r2, [r3, #0]
 8007f6e:	e00b      	b.n	8007f88 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f74:	2b12      	cmp	r3, #18
 8007f76:	d107      	bne.n	8007f88 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007f86:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	9300      	str	r3, [sp, #0]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007f94:	68f8      	ldr	r0, [r7, #12]
 8007f96:	f000 f9cd 	bl	8008334 <I2C_WaitOnFlagUntilTimeout>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d00d      	beq.n	8007fbc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007faa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fae:	d103      	bne.n	8007fb8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007fb6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007fb8:	2303      	movs	r3, #3
 8007fba:	e035      	b.n	8008028 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	691b      	ldr	r3, [r3, #16]
 8007fc0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007fc4:	d108      	bne.n	8007fd8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007fc6:	897b      	ldrh	r3, [r7, #10]
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	461a      	mov	r2, r3
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007fd4:	611a      	str	r2, [r3, #16]
 8007fd6:	e01b      	b.n	8008010 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007fd8:	897b      	ldrh	r3, [r7, #10]
 8007fda:	11db      	asrs	r3, r3, #7
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	f003 0306 	and.w	r3, r3, #6
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	f063 030f 	orn	r3, r3, #15
 8007fe8:	b2da      	uxtb	r2, r3
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	490e      	ldr	r1, [pc, #56]	@ (8008030 <I2C_MasterRequestWrite+0xfc>)
 8007ff6:	68f8      	ldr	r0, [r7, #12]
 8007ff8:	f000 fa16 	bl	8008428 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d001      	beq.n	8008006 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008002:	2301      	movs	r3, #1
 8008004:	e010      	b.n	8008028 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008006:	897b      	ldrh	r3, [r7, #10]
 8008008:	b2da      	uxtb	r2, r3
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	4907      	ldr	r1, [pc, #28]	@ (8008034 <I2C_MasterRequestWrite+0x100>)
 8008016:	68f8      	ldr	r0, [r7, #12]
 8008018:	f000 fa06 	bl	8008428 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800801c:	4603      	mov	r3, r0
 800801e:	2b00      	cmp	r3, #0
 8008020:	d001      	beq.n	8008026 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008022:	2301      	movs	r3, #1
 8008024:	e000      	b.n	8008028 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008026:	2300      	movs	r3, #0
}
 8008028:	4618      	mov	r0, r3
 800802a:	3718      	adds	r7, #24
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}
 8008030:	00010008 	.word	0x00010008
 8008034:	00010002 	.word	0x00010002

08008038 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b088      	sub	sp, #32
 800803c:	af02      	add	r7, sp, #8
 800803e:	60f8      	str	r0, [r7, #12]
 8008040:	4608      	mov	r0, r1
 8008042:	4611      	mov	r1, r2
 8008044:	461a      	mov	r2, r3
 8008046:	4603      	mov	r3, r0
 8008048:	817b      	strh	r3, [r7, #10]
 800804a:	460b      	mov	r3, r1
 800804c:	813b      	strh	r3, [r7, #8]
 800804e:	4613      	mov	r3, r2
 8008050:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008060:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008064:	9300      	str	r3, [sp, #0]
 8008066:	6a3b      	ldr	r3, [r7, #32]
 8008068:	2200      	movs	r2, #0
 800806a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800806e:	68f8      	ldr	r0, [r7, #12]
 8008070:	f000 f960 	bl	8008334 <I2C_WaitOnFlagUntilTimeout>
 8008074:	4603      	mov	r3, r0
 8008076:	2b00      	cmp	r3, #0
 8008078:	d00d      	beq.n	8008096 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008084:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008088:	d103      	bne.n	8008092 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008090:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008092:	2303      	movs	r3, #3
 8008094:	e05f      	b.n	8008156 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008096:	897b      	ldrh	r3, [r7, #10]
 8008098:	b2db      	uxtb	r3, r3
 800809a:	461a      	mov	r2, r3
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80080a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80080a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080a8:	6a3a      	ldr	r2, [r7, #32]
 80080aa:	492d      	ldr	r1, [pc, #180]	@ (8008160 <I2C_RequestMemoryWrite+0x128>)
 80080ac:	68f8      	ldr	r0, [r7, #12]
 80080ae:	f000 f9bb 	bl	8008428 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80080b2:	4603      	mov	r3, r0
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d001      	beq.n	80080bc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80080b8:	2301      	movs	r3, #1
 80080ba:	e04c      	b.n	8008156 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080bc:	2300      	movs	r3, #0
 80080be:	617b      	str	r3, [r7, #20]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	695b      	ldr	r3, [r3, #20]
 80080c6:	617b      	str	r3, [r7, #20]
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	699b      	ldr	r3, [r3, #24]
 80080ce:	617b      	str	r3, [r7, #20]
 80080d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80080d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080d4:	6a39      	ldr	r1, [r7, #32]
 80080d6:	68f8      	ldr	r0, [r7, #12]
 80080d8:	f000 fa46 	bl	8008568 <I2C_WaitOnTXEFlagUntilTimeout>
 80080dc:	4603      	mov	r3, r0
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d00d      	beq.n	80080fe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080e6:	2b04      	cmp	r3, #4
 80080e8:	d107      	bne.n	80080fa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80080f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	e02b      	b.n	8008156 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80080fe:	88fb      	ldrh	r3, [r7, #6]
 8008100:	2b01      	cmp	r3, #1
 8008102:	d105      	bne.n	8008110 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008104:	893b      	ldrh	r3, [r7, #8]
 8008106:	b2da      	uxtb	r2, r3
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	611a      	str	r2, [r3, #16]
 800810e:	e021      	b.n	8008154 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008110:	893b      	ldrh	r3, [r7, #8]
 8008112:	0a1b      	lsrs	r3, r3, #8
 8008114:	b29b      	uxth	r3, r3
 8008116:	b2da      	uxtb	r2, r3
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800811e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008120:	6a39      	ldr	r1, [r7, #32]
 8008122:	68f8      	ldr	r0, [r7, #12]
 8008124:	f000 fa20 	bl	8008568 <I2C_WaitOnTXEFlagUntilTimeout>
 8008128:	4603      	mov	r3, r0
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00d      	beq.n	800814a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008132:	2b04      	cmp	r3, #4
 8008134:	d107      	bne.n	8008146 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008144:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008146:	2301      	movs	r3, #1
 8008148:	e005      	b.n	8008156 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800814a:	893b      	ldrh	r3, [r7, #8]
 800814c:	b2da      	uxtb	r2, r3
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008154:	2300      	movs	r3, #0
}
 8008156:	4618      	mov	r0, r3
 8008158:	3718      	adds	r7, #24
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
 800815e:	bf00      	nop
 8008160:	00010002 	.word	0x00010002

08008164 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b088      	sub	sp, #32
 8008168:	af02      	add	r7, sp, #8
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	4608      	mov	r0, r1
 800816e:	4611      	mov	r1, r2
 8008170:	461a      	mov	r2, r3
 8008172:	4603      	mov	r3, r0
 8008174:	817b      	strh	r3, [r7, #10]
 8008176:	460b      	mov	r3, r1
 8008178:	813b      	strh	r3, [r7, #8]
 800817a:	4613      	mov	r3, r2
 800817c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800818c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800819c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800819e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081a0:	9300      	str	r3, [sp, #0]
 80081a2:	6a3b      	ldr	r3, [r7, #32]
 80081a4:	2200      	movs	r2, #0
 80081a6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80081aa:	68f8      	ldr	r0, [r7, #12]
 80081ac:	f000 f8c2 	bl	8008334 <I2C_WaitOnFlagUntilTimeout>
 80081b0:	4603      	mov	r3, r0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d00d      	beq.n	80081d2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081c4:	d103      	bne.n	80081ce <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80081cc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80081ce:	2303      	movs	r3, #3
 80081d0:	e0aa      	b.n	8008328 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80081d2:	897b      	ldrh	r3, [r7, #10]
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	461a      	mov	r2, r3
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80081e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80081e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081e4:	6a3a      	ldr	r2, [r7, #32]
 80081e6:	4952      	ldr	r1, [pc, #328]	@ (8008330 <I2C_RequestMemoryRead+0x1cc>)
 80081e8:	68f8      	ldr	r0, [r7, #12]
 80081ea:	f000 f91d 	bl	8008428 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80081ee:	4603      	mov	r3, r0
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d001      	beq.n	80081f8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80081f4:	2301      	movs	r3, #1
 80081f6:	e097      	b.n	8008328 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80081f8:	2300      	movs	r3, #0
 80081fa:	617b      	str	r3, [r7, #20]
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	695b      	ldr	r3, [r3, #20]
 8008202:	617b      	str	r3, [r7, #20]
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	699b      	ldr	r3, [r3, #24]
 800820a:	617b      	str	r3, [r7, #20]
 800820c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800820e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008210:	6a39      	ldr	r1, [r7, #32]
 8008212:	68f8      	ldr	r0, [r7, #12]
 8008214:	f000 f9a8 	bl	8008568 <I2C_WaitOnTXEFlagUntilTimeout>
 8008218:	4603      	mov	r3, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	d00d      	beq.n	800823a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008222:	2b04      	cmp	r3, #4
 8008224:	d107      	bne.n	8008236 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	681a      	ldr	r2, [r3, #0]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008234:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008236:	2301      	movs	r3, #1
 8008238:	e076      	b.n	8008328 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800823a:	88fb      	ldrh	r3, [r7, #6]
 800823c:	2b01      	cmp	r3, #1
 800823e:	d105      	bne.n	800824c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008240:	893b      	ldrh	r3, [r7, #8]
 8008242:	b2da      	uxtb	r2, r3
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	611a      	str	r2, [r3, #16]
 800824a:	e021      	b.n	8008290 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800824c:	893b      	ldrh	r3, [r7, #8]
 800824e:	0a1b      	lsrs	r3, r3, #8
 8008250:	b29b      	uxth	r3, r3
 8008252:	b2da      	uxtb	r2, r3
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800825a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800825c:	6a39      	ldr	r1, [r7, #32]
 800825e:	68f8      	ldr	r0, [r7, #12]
 8008260:	f000 f982 	bl	8008568 <I2C_WaitOnTXEFlagUntilTimeout>
 8008264:	4603      	mov	r3, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	d00d      	beq.n	8008286 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800826e:	2b04      	cmp	r3, #4
 8008270:	d107      	bne.n	8008282 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008280:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008282:	2301      	movs	r3, #1
 8008284:	e050      	b.n	8008328 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008286:	893b      	ldrh	r3, [r7, #8]
 8008288:	b2da      	uxtb	r2, r3
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008290:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008292:	6a39      	ldr	r1, [r7, #32]
 8008294:	68f8      	ldr	r0, [r7, #12]
 8008296:	f000 f967 	bl	8008568 <I2C_WaitOnTXEFlagUntilTimeout>
 800829a:	4603      	mov	r3, r0
 800829c:	2b00      	cmp	r3, #0
 800829e:	d00d      	beq.n	80082bc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082a4:	2b04      	cmp	r3, #4
 80082a6:	d107      	bne.n	80082b8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80082b6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80082b8:	2301      	movs	r3, #1
 80082ba:	e035      	b.n	8008328 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80082ca:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80082cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ce:	9300      	str	r3, [sp, #0]
 80082d0:	6a3b      	ldr	r3, [r7, #32]
 80082d2:	2200      	movs	r2, #0
 80082d4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80082d8:	68f8      	ldr	r0, [r7, #12]
 80082da:	f000 f82b 	bl	8008334 <I2C_WaitOnFlagUntilTimeout>
 80082de:	4603      	mov	r3, r0
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d00d      	beq.n	8008300 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082f2:	d103      	bne.n	80082fc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80082fa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80082fc:	2303      	movs	r3, #3
 80082fe:	e013      	b.n	8008328 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008300:	897b      	ldrh	r3, [r7, #10]
 8008302:	b2db      	uxtb	r3, r3
 8008304:	f043 0301 	orr.w	r3, r3, #1
 8008308:	b2da      	uxtb	r2, r3
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008312:	6a3a      	ldr	r2, [r7, #32]
 8008314:	4906      	ldr	r1, [pc, #24]	@ (8008330 <I2C_RequestMemoryRead+0x1cc>)
 8008316:	68f8      	ldr	r0, [r7, #12]
 8008318:	f000 f886 	bl	8008428 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800831c:	4603      	mov	r3, r0
 800831e:	2b00      	cmp	r3, #0
 8008320:	d001      	beq.n	8008326 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	e000      	b.n	8008328 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008326:	2300      	movs	r3, #0
}
 8008328:	4618      	mov	r0, r3
 800832a:	3718      	adds	r7, #24
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}
 8008330:	00010002 	.word	0x00010002

08008334 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b084      	sub	sp, #16
 8008338:	af00      	add	r7, sp, #0
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	60b9      	str	r1, [r7, #8]
 800833e:	603b      	str	r3, [r7, #0]
 8008340:	4613      	mov	r3, r2
 8008342:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008344:	e048      	b.n	80083d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800834c:	d044      	beq.n	80083d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800834e:	f7fd fe33 	bl	8005fb8 <HAL_GetTick>
 8008352:	4602      	mov	r2, r0
 8008354:	69bb      	ldr	r3, [r7, #24]
 8008356:	1ad3      	subs	r3, r2, r3
 8008358:	683a      	ldr	r2, [r7, #0]
 800835a:	429a      	cmp	r2, r3
 800835c:	d302      	bcc.n	8008364 <I2C_WaitOnFlagUntilTimeout+0x30>
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d139      	bne.n	80083d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	0c1b      	lsrs	r3, r3, #16
 8008368:	b2db      	uxtb	r3, r3
 800836a:	2b01      	cmp	r3, #1
 800836c:	d10d      	bne.n	800838a <I2C_WaitOnFlagUntilTimeout+0x56>
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	695b      	ldr	r3, [r3, #20]
 8008374:	43da      	mvns	r2, r3
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	4013      	ands	r3, r2
 800837a:	b29b      	uxth	r3, r3
 800837c:	2b00      	cmp	r3, #0
 800837e:	bf0c      	ite	eq
 8008380:	2301      	moveq	r3, #1
 8008382:	2300      	movne	r3, #0
 8008384:	b2db      	uxtb	r3, r3
 8008386:	461a      	mov	r2, r3
 8008388:	e00c      	b.n	80083a4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	699b      	ldr	r3, [r3, #24]
 8008390:	43da      	mvns	r2, r3
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	4013      	ands	r3, r2
 8008396:	b29b      	uxth	r3, r3
 8008398:	2b00      	cmp	r3, #0
 800839a:	bf0c      	ite	eq
 800839c:	2301      	moveq	r3, #1
 800839e:	2300      	movne	r3, #0
 80083a0:	b2db      	uxtb	r3, r3
 80083a2:	461a      	mov	r2, r3
 80083a4:	79fb      	ldrb	r3, [r7, #7]
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d116      	bne.n	80083d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2200      	movs	r2, #0
 80083ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2220      	movs	r2, #32
 80083b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2200      	movs	r2, #0
 80083bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083c4:	f043 0220 	orr.w	r2, r3, #32
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2200      	movs	r2, #0
 80083d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80083d4:	2301      	movs	r3, #1
 80083d6:	e023      	b.n	8008420 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	0c1b      	lsrs	r3, r3, #16
 80083dc:	b2db      	uxtb	r3, r3
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d10d      	bne.n	80083fe <I2C_WaitOnFlagUntilTimeout+0xca>
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	695b      	ldr	r3, [r3, #20]
 80083e8:	43da      	mvns	r2, r3
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	4013      	ands	r3, r2
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	bf0c      	ite	eq
 80083f4:	2301      	moveq	r3, #1
 80083f6:	2300      	movne	r3, #0
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	461a      	mov	r2, r3
 80083fc:	e00c      	b.n	8008418 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	699b      	ldr	r3, [r3, #24]
 8008404:	43da      	mvns	r2, r3
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	4013      	ands	r3, r2
 800840a:	b29b      	uxth	r3, r3
 800840c:	2b00      	cmp	r3, #0
 800840e:	bf0c      	ite	eq
 8008410:	2301      	moveq	r3, #1
 8008412:	2300      	movne	r3, #0
 8008414:	b2db      	uxtb	r3, r3
 8008416:	461a      	mov	r2, r3
 8008418:	79fb      	ldrb	r3, [r7, #7]
 800841a:	429a      	cmp	r2, r3
 800841c:	d093      	beq.n	8008346 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800841e:	2300      	movs	r3, #0
}
 8008420:	4618      	mov	r0, r3
 8008422:	3710      	adds	r7, #16
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b084      	sub	sp, #16
 800842c:	af00      	add	r7, sp, #0
 800842e:	60f8      	str	r0, [r7, #12]
 8008430:	60b9      	str	r1, [r7, #8]
 8008432:	607a      	str	r2, [r7, #4]
 8008434:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008436:	e071      	b.n	800851c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	695b      	ldr	r3, [r3, #20]
 800843e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008442:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008446:	d123      	bne.n	8008490 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008456:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008460:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2200      	movs	r2, #0
 8008466:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2220      	movs	r2, #32
 800846c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2200      	movs	r2, #0
 8008474:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800847c:	f043 0204 	orr.w	r2, r3, #4
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2200      	movs	r2, #0
 8008488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800848c:	2301      	movs	r3, #1
 800848e:	e067      	b.n	8008560 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008496:	d041      	beq.n	800851c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008498:	f7fd fd8e 	bl	8005fb8 <HAL_GetTick>
 800849c:	4602      	mov	r2, r0
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	1ad3      	subs	r3, r2, r3
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d302      	bcc.n	80084ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d136      	bne.n	800851c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	0c1b      	lsrs	r3, r3, #16
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d10c      	bne.n	80084d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	695b      	ldr	r3, [r3, #20]
 80084be:	43da      	mvns	r2, r3
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	4013      	ands	r3, r2
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	bf14      	ite	ne
 80084ca:	2301      	movne	r3, #1
 80084cc:	2300      	moveq	r3, #0
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	e00b      	b.n	80084ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	699b      	ldr	r3, [r3, #24]
 80084d8:	43da      	mvns	r2, r3
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	4013      	ands	r3, r2
 80084de:	b29b      	uxth	r3, r3
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	bf14      	ite	ne
 80084e4:	2301      	movne	r3, #1
 80084e6:	2300      	moveq	r3, #0
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d016      	beq.n	800851c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2200      	movs	r2, #0
 80084f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2220      	movs	r2, #32
 80084f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2200      	movs	r2, #0
 8008500:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008508:	f043 0220 	orr.w	r2, r3, #32
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2200      	movs	r2, #0
 8008514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008518:	2301      	movs	r3, #1
 800851a:	e021      	b.n	8008560 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	0c1b      	lsrs	r3, r3, #16
 8008520:	b2db      	uxtb	r3, r3
 8008522:	2b01      	cmp	r3, #1
 8008524:	d10c      	bne.n	8008540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	695b      	ldr	r3, [r3, #20]
 800852c:	43da      	mvns	r2, r3
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	4013      	ands	r3, r2
 8008532:	b29b      	uxth	r3, r3
 8008534:	2b00      	cmp	r3, #0
 8008536:	bf14      	ite	ne
 8008538:	2301      	movne	r3, #1
 800853a:	2300      	moveq	r3, #0
 800853c:	b2db      	uxtb	r3, r3
 800853e:	e00b      	b.n	8008558 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	699b      	ldr	r3, [r3, #24]
 8008546:	43da      	mvns	r2, r3
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	4013      	ands	r3, r2
 800854c:	b29b      	uxth	r3, r3
 800854e:	2b00      	cmp	r3, #0
 8008550:	bf14      	ite	ne
 8008552:	2301      	movne	r3, #1
 8008554:	2300      	moveq	r3, #0
 8008556:	b2db      	uxtb	r3, r3
 8008558:	2b00      	cmp	r3, #0
 800855a:	f47f af6d 	bne.w	8008438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800855e:	2300      	movs	r3, #0
}
 8008560:	4618      	mov	r0, r3
 8008562:	3710      	adds	r7, #16
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
 800856e:	60f8      	str	r0, [r7, #12]
 8008570:	60b9      	str	r1, [r7, #8]
 8008572:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008574:	e034      	b.n	80085e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008576:	68f8      	ldr	r0, [r7, #12]
 8008578:	f000 f8e3 	bl	8008742 <I2C_IsAcknowledgeFailed>
 800857c:	4603      	mov	r3, r0
 800857e:	2b00      	cmp	r3, #0
 8008580:	d001      	beq.n	8008586 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008582:	2301      	movs	r3, #1
 8008584:	e034      	b.n	80085f0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800858c:	d028      	beq.n	80085e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800858e:	f7fd fd13 	bl	8005fb8 <HAL_GetTick>
 8008592:	4602      	mov	r2, r0
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	1ad3      	subs	r3, r2, r3
 8008598:	68ba      	ldr	r2, [r7, #8]
 800859a:	429a      	cmp	r2, r3
 800859c:	d302      	bcc.n	80085a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d11d      	bne.n	80085e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	695b      	ldr	r3, [r3, #20]
 80085aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085ae:	2b80      	cmp	r3, #128	@ 0x80
 80085b0:	d016      	beq.n	80085e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2200      	movs	r2, #0
 80085b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2220      	movs	r2, #32
 80085bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2200      	movs	r2, #0
 80085c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085cc:	f043 0220 	orr.w	r2, r3, #32
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2200      	movs	r2, #0
 80085d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
 80085de:	e007      	b.n	80085f0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	695b      	ldr	r3, [r3, #20]
 80085e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085ea:	2b80      	cmp	r3, #128	@ 0x80
 80085ec:	d1c3      	bne.n	8008576 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80085ee:	2300      	movs	r3, #0
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3710      	adds	r7, #16
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b084      	sub	sp, #16
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008604:	e034      	b.n	8008670 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008606:	68f8      	ldr	r0, [r7, #12]
 8008608:	f000 f89b 	bl	8008742 <I2C_IsAcknowledgeFailed>
 800860c:	4603      	mov	r3, r0
 800860e:	2b00      	cmp	r3, #0
 8008610:	d001      	beq.n	8008616 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008612:	2301      	movs	r3, #1
 8008614:	e034      	b.n	8008680 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800861c:	d028      	beq.n	8008670 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800861e:	f7fd fccb 	bl	8005fb8 <HAL_GetTick>
 8008622:	4602      	mov	r2, r0
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	1ad3      	subs	r3, r2, r3
 8008628:	68ba      	ldr	r2, [r7, #8]
 800862a:	429a      	cmp	r2, r3
 800862c:	d302      	bcc.n	8008634 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d11d      	bne.n	8008670 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	695b      	ldr	r3, [r3, #20]
 800863a:	f003 0304 	and.w	r3, r3, #4
 800863e:	2b04      	cmp	r3, #4
 8008640:	d016      	beq.n	8008670 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2200      	movs	r2, #0
 8008646:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2220      	movs	r2, #32
 800864c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2200      	movs	r2, #0
 8008654:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800865c:	f043 0220 	orr.w	r2, r3, #32
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2200      	movs	r2, #0
 8008668:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800866c:	2301      	movs	r3, #1
 800866e:	e007      	b.n	8008680 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	695b      	ldr	r3, [r3, #20]
 8008676:	f003 0304 	and.w	r3, r3, #4
 800867a:	2b04      	cmp	r3, #4
 800867c:	d1c3      	bne.n	8008606 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3710      	adds	r7, #16
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008694:	e049      	b.n	800872a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	695b      	ldr	r3, [r3, #20]
 800869c:	f003 0310 	and.w	r3, r3, #16
 80086a0:	2b10      	cmp	r3, #16
 80086a2:	d119      	bne.n	80086d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f06f 0210 	mvn.w	r2, #16
 80086ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2200      	movs	r2, #0
 80086b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2220      	movs	r2, #32
 80086b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2200      	movs	r2, #0
 80086c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2200      	movs	r2, #0
 80086d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80086d4:	2301      	movs	r3, #1
 80086d6:	e030      	b.n	800873a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086d8:	f7fd fc6e 	bl	8005fb8 <HAL_GetTick>
 80086dc:	4602      	mov	r2, r0
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	1ad3      	subs	r3, r2, r3
 80086e2:	68ba      	ldr	r2, [r7, #8]
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d302      	bcc.n	80086ee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d11d      	bne.n	800872a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	695b      	ldr	r3, [r3, #20]
 80086f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086f8:	2b40      	cmp	r3, #64	@ 0x40
 80086fa:	d016      	beq.n	800872a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2200      	movs	r2, #0
 8008700:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2220      	movs	r2, #32
 8008706:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2200      	movs	r2, #0
 800870e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008716:	f043 0220 	orr.w	r2, r3, #32
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2200      	movs	r2, #0
 8008722:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008726:	2301      	movs	r3, #1
 8008728:	e007      	b.n	800873a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	695b      	ldr	r3, [r3, #20]
 8008730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008734:	2b40      	cmp	r3, #64	@ 0x40
 8008736:	d1ae      	bne.n	8008696 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008738:	2300      	movs	r3, #0
}
 800873a:	4618      	mov	r0, r3
 800873c:	3710      	adds	r7, #16
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}

08008742 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008742:	b480      	push	{r7}
 8008744:	b083      	sub	sp, #12
 8008746:	af00      	add	r7, sp, #0
 8008748:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	695b      	ldr	r3, [r3, #20]
 8008750:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008754:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008758:	d11b      	bne.n	8008792 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008762:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2200      	movs	r2, #0
 8008768:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2220      	movs	r2, #32
 800876e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2200      	movs	r2, #0
 8008776:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800877e:	f043 0204 	orr.w	r2, r3, #4
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2200      	movs	r2, #0
 800878a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800878e:	2301      	movs	r3, #1
 8008790:	e000      	b.n	8008794 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008792:	2300      	movs	r3, #0
}
 8008794:	4618      	mov	r0, r3
 8008796:	370c      	adds	r7, #12
 8008798:	46bd      	mov	sp, r7
 800879a:	bc80      	pop	{r7}
 800879c:	4770      	bx	lr
	...

080087a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b086      	sub	sp, #24
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d101      	bne.n	80087b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	e272      	b.n	8008c98 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f003 0301 	and.w	r3, r3, #1
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	f000 8087 	beq.w	80088ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80087c0:	4b92      	ldr	r3, [pc, #584]	@ (8008a0c <HAL_RCC_OscConfig+0x26c>)
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	f003 030c 	and.w	r3, r3, #12
 80087c8:	2b04      	cmp	r3, #4
 80087ca:	d00c      	beq.n	80087e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80087cc:	4b8f      	ldr	r3, [pc, #572]	@ (8008a0c <HAL_RCC_OscConfig+0x26c>)
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	f003 030c 	and.w	r3, r3, #12
 80087d4:	2b08      	cmp	r3, #8
 80087d6:	d112      	bne.n	80087fe <HAL_RCC_OscConfig+0x5e>
 80087d8:	4b8c      	ldr	r3, [pc, #560]	@ (8008a0c <HAL_RCC_OscConfig+0x26c>)
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80087e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80087e4:	d10b      	bne.n	80087fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087e6:	4b89      	ldr	r3, [pc, #548]	@ (8008a0c <HAL_RCC_OscConfig+0x26c>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d06c      	beq.n	80088cc <HAL_RCC_OscConfig+0x12c>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d168      	bne.n	80088cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80087fa:	2301      	movs	r3, #1
 80087fc:	e24c      	b.n	8008c98 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008806:	d106      	bne.n	8008816 <HAL_RCC_OscConfig+0x76>
 8008808:	4b80      	ldr	r3, [pc, #512]	@ (8008a0c <HAL_RCC_OscConfig+0x26c>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a7f      	ldr	r2, [pc, #508]	@ (8008a0c <HAL_RCC_OscConfig+0x26c>)
 800880e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008812:	6013      	str	r3, [r2, #0]
 8008814:	e02e      	b.n	8008874 <HAL_RCC_OscConfig+0xd4>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d10c      	bne.n	8008838 <HAL_RCC_OscConfig+0x98>
 800881e:	4b7b      	ldr	r3, [pc, #492]	@ (8008a0c <HAL_RCC_OscConfig+0x26c>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a7a      	ldr	r2, [pc, #488]	@ (8008a0c <HAL_RCC_OscConfig+0x26c>)
 8008824:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008828:	6013      	str	r3, [r2, #0]
 800882a:	4b78      	ldr	r3, [pc, #480]	@ (8008a0c <HAL_RCC_OscConfig+0x26c>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4a77      	ldr	r2, [pc, #476]	@ (8008a0c <HAL_RCC_OscConfig+0x26c>)
 8008830:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008834:	6013      	str	r3, [r2, #0]
 8008836:	e01d      	b.n	8008874 <HAL_RCC_OscConfig+0xd4>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008840:	d10c      	bne.n	800885c <HAL_RCC_OscConfig+0xbc>
 8008842:	4b72      	ldr	r3, [pc, #456]	@ (8008a0c <HAL_RCC_OscConfig+0x26c>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4a71      	ldr	r2, [pc, #452]	@ (8008a0c <HAL_RCC_OscConfig+0x26c>)
 8008848:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800884c:	6013      	str	r3, [r2, #0]
 800884e:	4b6f      	ldr	r3, [pc, #444]	@ (8008a0c <HAL_RCC_OscConfig+0x26c>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a6e      	ldr	r2, [pc, #440]	@ (8008a0c <HAL_RCC_OscConfig+0x26c>)
 8008854:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008858:	6013      	str	r3, [r2, #0]
 800885a:	e00b      	b.n	8008874 <HAL_RCC_OscConfig+0xd4>
 800885c:	4b6b      	ldr	r3, [pc, #428]	@ (8008a0c <HAL_RCC_OscConfig+0x26c>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a6a      	ldr	r2, [pc, #424]	@ (8008a0c <HAL_RCC_OscConfig+0x26c>)
 8008862:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008866:	6013      	str	r3, [r2, #0]
 8008868:	4b68      	ldr	r3, [pc, #416]	@ (8008a0c <HAL_RCC_OscConfig+0x26c>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a67      	ldr	r2, [pc, #412]	@ (8008a0c <HAL_RCC_OscConfig+0x26c>)
 800886e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008872:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d013      	beq.n	80088a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800887c:	f7fd fb9c 	bl	8005fb8 <HAL_GetTick>
 8008880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008882:	e008      	b.n	8008896 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008884:	f7fd fb98 	bl	8005fb8 <HAL_GetTick>
 8008888:	4602      	mov	r2, r0
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	1ad3      	subs	r3, r2, r3
 800888e:	2b64      	cmp	r3, #100	@ 0x64
 8008890:	d901      	bls.n	8008896 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008892:	2303      	movs	r3, #3
 8008894:	e200      	b.n	8008c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008896:	4b5d      	ldr	r3, [pc, #372]	@ (8008a0c <HAL_RCC_OscConfig+0x26c>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d0f0      	beq.n	8008884 <HAL_RCC_OscConfig+0xe4>
 80088a2:	e014      	b.n	80088ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088a4:	f7fd fb88 	bl	8005fb8 <HAL_GetTick>
 80088a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80088aa:	e008      	b.n	80088be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80088ac:	f7fd fb84 	bl	8005fb8 <HAL_GetTick>
 80088b0:	4602      	mov	r2, r0
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	1ad3      	subs	r3, r2, r3
 80088b6:	2b64      	cmp	r3, #100	@ 0x64
 80088b8:	d901      	bls.n	80088be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80088ba:	2303      	movs	r3, #3
 80088bc:	e1ec      	b.n	8008c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80088be:	4b53      	ldr	r3, [pc, #332]	@ (8008a0c <HAL_RCC_OscConfig+0x26c>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d1f0      	bne.n	80088ac <HAL_RCC_OscConfig+0x10c>
 80088ca:	e000      	b.n	80088ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f003 0302 	and.w	r3, r3, #2
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d063      	beq.n	80089a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80088da:	4b4c      	ldr	r3, [pc, #304]	@ (8008a0c <HAL_RCC_OscConfig+0x26c>)
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	f003 030c 	and.w	r3, r3, #12
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d00b      	beq.n	80088fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80088e6:	4b49      	ldr	r3, [pc, #292]	@ (8008a0c <HAL_RCC_OscConfig+0x26c>)
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	f003 030c 	and.w	r3, r3, #12
 80088ee:	2b08      	cmp	r3, #8
 80088f0:	d11c      	bne.n	800892c <HAL_RCC_OscConfig+0x18c>
 80088f2:	4b46      	ldr	r3, [pc, #280]	@ (8008a0c <HAL_RCC_OscConfig+0x26c>)
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d116      	bne.n	800892c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80088fe:	4b43      	ldr	r3, [pc, #268]	@ (8008a0c <HAL_RCC_OscConfig+0x26c>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f003 0302 	and.w	r3, r3, #2
 8008906:	2b00      	cmp	r3, #0
 8008908:	d005      	beq.n	8008916 <HAL_RCC_OscConfig+0x176>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	691b      	ldr	r3, [r3, #16]
 800890e:	2b01      	cmp	r3, #1
 8008910:	d001      	beq.n	8008916 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8008912:	2301      	movs	r3, #1
 8008914:	e1c0      	b.n	8008c98 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008916:	4b3d      	ldr	r3, [pc, #244]	@ (8008a0c <HAL_RCC_OscConfig+0x26c>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	695b      	ldr	r3, [r3, #20]
 8008922:	00db      	lsls	r3, r3, #3
 8008924:	4939      	ldr	r1, [pc, #228]	@ (8008a0c <HAL_RCC_OscConfig+0x26c>)
 8008926:	4313      	orrs	r3, r2
 8008928:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800892a:	e03a      	b.n	80089a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	691b      	ldr	r3, [r3, #16]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d020      	beq.n	8008976 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008934:	4b36      	ldr	r3, [pc, #216]	@ (8008a10 <HAL_RCC_OscConfig+0x270>)
 8008936:	2201      	movs	r2, #1
 8008938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800893a:	f7fd fb3d 	bl	8005fb8 <HAL_GetTick>
 800893e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008940:	e008      	b.n	8008954 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008942:	f7fd fb39 	bl	8005fb8 <HAL_GetTick>
 8008946:	4602      	mov	r2, r0
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	1ad3      	subs	r3, r2, r3
 800894c:	2b02      	cmp	r3, #2
 800894e:	d901      	bls.n	8008954 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008950:	2303      	movs	r3, #3
 8008952:	e1a1      	b.n	8008c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008954:	4b2d      	ldr	r3, [pc, #180]	@ (8008a0c <HAL_RCC_OscConfig+0x26c>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f003 0302 	and.w	r3, r3, #2
 800895c:	2b00      	cmp	r3, #0
 800895e:	d0f0      	beq.n	8008942 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008960:	4b2a      	ldr	r3, [pc, #168]	@ (8008a0c <HAL_RCC_OscConfig+0x26c>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	695b      	ldr	r3, [r3, #20]
 800896c:	00db      	lsls	r3, r3, #3
 800896e:	4927      	ldr	r1, [pc, #156]	@ (8008a0c <HAL_RCC_OscConfig+0x26c>)
 8008970:	4313      	orrs	r3, r2
 8008972:	600b      	str	r3, [r1, #0]
 8008974:	e015      	b.n	80089a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008976:	4b26      	ldr	r3, [pc, #152]	@ (8008a10 <HAL_RCC_OscConfig+0x270>)
 8008978:	2200      	movs	r2, #0
 800897a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800897c:	f7fd fb1c 	bl	8005fb8 <HAL_GetTick>
 8008980:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008982:	e008      	b.n	8008996 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008984:	f7fd fb18 	bl	8005fb8 <HAL_GetTick>
 8008988:	4602      	mov	r2, r0
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	1ad3      	subs	r3, r2, r3
 800898e:	2b02      	cmp	r3, #2
 8008990:	d901      	bls.n	8008996 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8008992:	2303      	movs	r3, #3
 8008994:	e180      	b.n	8008c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008996:	4b1d      	ldr	r3, [pc, #116]	@ (8008a0c <HAL_RCC_OscConfig+0x26c>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f003 0302 	and.w	r3, r3, #2
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d1f0      	bne.n	8008984 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f003 0308 	and.w	r3, r3, #8
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d03a      	beq.n	8008a24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	699b      	ldr	r3, [r3, #24]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d019      	beq.n	80089ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80089b6:	4b17      	ldr	r3, [pc, #92]	@ (8008a14 <HAL_RCC_OscConfig+0x274>)
 80089b8:	2201      	movs	r2, #1
 80089ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80089bc:	f7fd fafc 	bl	8005fb8 <HAL_GetTick>
 80089c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80089c2:	e008      	b.n	80089d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80089c4:	f7fd faf8 	bl	8005fb8 <HAL_GetTick>
 80089c8:	4602      	mov	r2, r0
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	1ad3      	subs	r3, r2, r3
 80089ce:	2b02      	cmp	r3, #2
 80089d0:	d901      	bls.n	80089d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80089d2:	2303      	movs	r3, #3
 80089d4:	e160      	b.n	8008c98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80089d6:	4b0d      	ldr	r3, [pc, #52]	@ (8008a0c <HAL_RCC_OscConfig+0x26c>)
 80089d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089da:	f003 0302 	and.w	r3, r3, #2
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d0f0      	beq.n	80089c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80089e2:	2001      	movs	r0, #1
 80089e4:	f000 face 	bl	8008f84 <RCC_Delay>
 80089e8:	e01c      	b.n	8008a24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80089ea:	4b0a      	ldr	r3, [pc, #40]	@ (8008a14 <HAL_RCC_OscConfig+0x274>)
 80089ec:	2200      	movs	r2, #0
 80089ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80089f0:	f7fd fae2 	bl	8005fb8 <HAL_GetTick>
 80089f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80089f6:	e00f      	b.n	8008a18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80089f8:	f7fd fade 	bl	8005fb8 <HAL_GetTick>
 80089fc:	4602      	mov	r2, r0
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	1ad3      	subs	r3, r2, r3
 8008a02:	2b02      	cmp	r3, #2
 8008a04:	d908      	bls.n	8008a18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8008a06:	2303      	movs	r3, #3
 8008a08:	e146      	b.n	8008c98 <HAL_RCC_OscConfig+0x4f8>
 8008a0a:	bf00      	nop
 8008a0c:	40021000 	.word	0x40021000
 8008a10:	42420000 	.word	0x42420000
 8008a14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008a18:	4b92      	ldr	r3, [pc, #584]	@ (8008c64 <HAL_RCC_OscConfig+0x4c4>)
 8008a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a1c:	f003 0302 	and.w	r3, r3, #2
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d1e9      	bne.n	80089f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f003 0304 	and.w	r3, r3, #4
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	f000 80a6 	beq.w	8008b7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008a32:	2300      	movs	r3, #0
 8008a34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008a36:	4b8b      	ldr	r3, [pc, #556]	@ (8008c64 <HAL_RCC_OscConfig+0x4c4>)
 8008a38:	69db      	ldr	r3, [r3, #28]
 8008a3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d10d      	bne.n	8008a5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a42:	4b88      	ldr	r3, [pc, #544]	@ (8008c64 <HAL_RCC_OscConfig+0x4c4>)
 8008a44:	69db      	ldr	r3, [r3, #28]
 8008a46:	4a87      	ldr	r2, [pc, #540]	@ (8008c64 <HAL_RCC_OscConfig+0x4c4>)
 8008a48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a4c:	61d3      	str	r3, [r2, #28]
 8008a4e:	4b85      	ldr	r3, [pc, #532]	@ (8008c64 <HAL_RCC_OscConfig+0x4c4>)
 8008a50:	69db      	ldr	r3, [r3, #28]
 8008a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a56:	60bb      	str	r3, [r7, #8]
 8008a58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a5e:	4b82      	ldr	r3, [pc, #520]	@ (8008c68 <HAL_RCC_OscConfig+0x4c8>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d118      	bne.n	8008a9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008a6a:	4b7f      	ldr	r3, [pc, #508]	@ (8008c68 <HAL_RCC_OscConfig+0x4c8>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a7e      	ldr	r2, [pc, #504]	@ (8008c68 <HAL_RCC_OscConfig+0x4c8>)
 8008a70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008a76:	f7fd fa9f 	bl	8005fb8 <HAL_GetTick>
 8008a7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a7c:	e008      	b.n	8008a90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a7e:	f7fd fa9b 	bl	8005fb8 <HAL_GetTick>
 8008a82:	4602      	mov	r2, r0
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	1ad3      	subs	r3, r2, r3
 8008a88:	2b64      	cmp	r3, #100	@ 0x64
 8008a8a:	d901      	bls.n	8008a90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008a8c:	2303      	movs	r3, #3
 8008a8e:	e103      	b.n	8008c98 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a90:	4b75      	ldr	r3, [pc, #468]	@ (8008c68 <HAL_RCC_OscConfig+0x4c8>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d0f0      	beq.n	8008a7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	68db      	ldr	r3, [r3, #12]
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d106      	bne.n	8008ab2 <HAL_RCC_OscConfig+0x312>
 8008aa4:	4b6f      	ldr	r3, [pc, #444]	@ (8008c64 <HAL_RCC_OscConfig+0x4c4>)
 8008aa6:	6a1b      	ldr	r3, [r3, #32]
 8008aa8:	4a6e      	ldr	r2, [pc, #440]	@ (8008c64 <HAL_RCC_OscConfig+0x4c4>)
 8008aaa:	f043 0301 	orr.w	r3, r3, #1
 8008aae:	6213      	str	r3, [r2, #32]
 8008ab0:	e02d      	b.n	8008b0e <HAL_RCC_OscConfig+0x36e>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	68db      	ldr	r3, [r3, #12]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d10c      	bne.n	8008ad4 <HAL_RCC_OscConfig+0x334>
 8008aba:	4b6a      	ldr	r3, [pc, #424]	@ (8008c64 <HAL_RCC_OscConfig+0x4c4>)
 8008abc:	6a1b      	ldr	r3, [r3, #32]
 8008abe:	4a69      	ldr	r2, [pc, #420]	@ (8008c64 <HAL_RCC_OscConfig+0x4c4>)
 8008ac0:	f023 0301 	bic.w	r3, r3, #1
 8008ac4:	6213      	str	r3, [r2, #32]
 8008ac6:	4b67      	ldr	r3, [pc, #412]	@ (8008c64 <HAL_RCC_OscConfig+0x4c4>)
 8008ac8:	6a1b      	ldr	r3, [r3, #32]
 8008aca:	4a66      	ldr	r2, [pc, #408]	@ (8008c64 <HAL_RCC_OscConfig+0x4c4>)
 8008acc:	f023 0304 	bic.w	r3, r3, #4
 8008ad0:	6213      	str	r3, [r2, #32]
 8008ad2:	e01c      	b.n	8008b0e <HAL_RCC_OscConfig+0x36e>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	2b05      	cmp	r3, #5
 8008ada:	d10c      	bne.n	8008af6 <HAL_RCC_OscConfig+0x356>
 8008adc:	4b61      	ldr	r3, [pc, #388]	@ (8008c64 <HAL_RCC_OscConfig+0x4c4>)
 8008ade:	6a1b      	ldr	r3, [r3, #32]
 8008ae0:	4a60      	ldr	r2, [pc, #384]	@ (8008c64 <HAL_RCC_OscConfig+0x4c4>)
 8008ae2:	f043 0304 	orr.w	r3, r3, #4
 8008ae6:	6213      	str	r3, [r2, #32]
 8008ae8:	4b5e      	ldr	r3, [pc, #376]	@ (8008c64 <HAL_RCC_OscConfig+0x4c4>)
 8008aea:	6a1b      	ldr	r3, [r3, #32]
 8008aec:	4a5d      	ldr	r2, [pc, #372]	@ (8008c64 <HAL_RCC_OscConfig+0x4c4>)
 8008aee:	f043 0301 	orr.w	r3, r3, #1
 8008af2:	6213      	str	r3, [r2, #32]
 8008af4:	e00b      	b.n	8008b0e <HAL_RCC_OscConfig+0x36e>
 8008af6:	4b5b      	ldr	r3, [pc, #364]	@ (8008c64 <HAL_RCC_OscConfig+0x4c4>)
 8008af8:	6a1b      	ldr	r3, [r3, #32]
 8008afa:	4a5a      	ldr	r2, [pc, #360]	@ (8008c64 <HAL_RCC_OscConfig+0x4c4>)
 8008afc:	f023 0301 	bic.w	r3, r3, #1
 8008b00:	6213      	str	r3, [r2, #32]
 8008b02:	4b58      	ldr	r3, [pc, #352]	@ (8008c64 <HAL_RCC_OscConfig+0x4c4>)
 8008b04:	6a1b      	ldr	r3, [r3, #32]
 8008b06:	4a57      	ldr	r2, [pc, #348]	@ (8008c64 <HAL_RCC_OscConfig+0x4c4>)
 8008b08:	f023 0304 	bic.w	r3, r3, #4
 8008b0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	68db      	ldr	r3, [r3, #12]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d015      	beq.n	8008b42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008b16:	f7fd fa4f 	bl	8005fb8 <HAL_GetTick>
 8008b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b1c:	e00a      	b.n	8008b34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b1e:	f7fd fa4b 	bl	8005fb8 <HAL_GetTick>
 8008b22:	4602      	mov	r2, r0
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	1ad3      	subs	r3, r2, r3
 8008b28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d901      	bls.n	8008b34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008b30:	2303      	movs	r3, #3
 8008b32:	e0b1      	b.n	8008c98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b34:	4b4b      	ldr	r3, [pc, #300]	@ (8008c64 <HAL_RCC_OscConfig+0x4c4>)
 8008b36:	6a1b      	ldr	r3, [r3, #32]
 8008b38:	f003 0302 	and.w	r3, r3, #2
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d0ee      	beq.n	8008b1e <HAL_RCC_OscConfig+0x37e>
 8008b40:	e014      	b.n	8008b6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008b42:	f7fd fa39 	bl	8005fb8 <HAL_GetTick>
 8008b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b48:	e00a      	b.n	8008b60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b4a:	f7fd fa35 	bl	8005fb8 <HAL_GetTick>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	1ad3      	subs	r3, r2, r3
 8008b54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d901      	bls.n	8008b60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008b5c:	2303      	movs	r3, #3
 8008b5e:	e09b      	b.n	8008c98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b60:	4b40      	ldr	r3, [pc, #256]	@ (8008c64 <HAL_RCC_OscConfig+0x4c4>)
 8008b62:	6a1b      	ldr	r3, [r3, #32]
 8008b64:	f003 0302 	and.w	r3, r3, #2
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d1ee      	bne.n	8008b4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008b6c:	7dfb      	ldrb	r3, [r7, #23]
 8008b6e:	2b01      	cmp	r3, #1
 8008b70:	d105      	bne.n	8008b7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b72:	4b3c      	ldr	r3, [pc, #240]	@ (8008c64 <HAL_RCC_OscConfig+0x4c4>)
 8008b74:	69db      	ldr	r3, [r3, #28]
 8008b76:	4a3b      	ldr	r2, [pc, #236]	@ (8008c64 <HAL_RCC_OscConfig+0x4c4>)
 8008b78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008b7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	69db      	ldr	r3, [r3, #28]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	f000 8087 	beq.w	8008c96 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008b88:	4b36      	ldr	r3, [pc, #216]	@ (8008c64 <HAL_RCC_OscConfig+0x4c4>)
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	f003 030c 	and.w	r3, r3, #12
 8008b90:	2b08      	cmp	r3, #8
 8008b92:	d061      	beq.n	8008c58 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	69db      	ldr	r3, [r3, #28]
 8008b98:	2b02      	cmp	r3, #2
 8008b9a:	d146      	bne.n	8008c2a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b9c:	4b33      	ldr	r3, [pc, #204]	@ (8008c6c <HAL_RCC_OscConfig+0x4cc>)
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ba2:	f7fd fa09 	bl	8005fb8 <HAL_GetTick>
 8008ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008ba8:	e008      	b.n	8008bbc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008baa:	f7fd fa05 	bl	8005fb8 <HAL_GetTick>
 8008bae:	4602      	mov	r2, r0
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	1ad3      	subs	r3, r2, r3
 8008bb4:	2b02      	cmp	r3, #2
 8008bb6:	d901      	bls.n	8008bbc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008bb8:	2303      	movs	r3, #3
 8008bba:	e06d      	b.n	8008c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008bbc:	4b29      	ldr	r3, [pc, #164]	@ (8008c64 <HAL_RCC_OscConfig+0x4c4>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d1f0      	bne.n	8008baa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6a1b      	ldr	r3, [r3, #32]
 8008bcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008bd0:	d108      	bne.n	8008be4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008bd2:	4b24      	ldr	r3, [pc, #144]	@ (8008c64 <HAL_RCC_OscConfig+0x4c4>)
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	689b      	ldr	r3, [r3, #8]
 8008bde:	4921      	ldr	r1, [pc, #132]	@ (8008c64 <HAL_RCC_OscConfig+0x4c4>)
 8008be0:	4313      	orrs	r3, r2
 8008be2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008be4:	4b1f      	ldr	r3, [pc, #124]	@ (8008c64 <HAL_RCC_OscConfig+0x4c4>)
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6a19      	ldr	r1, [r3, #32]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bf4:	430b      	orrs	r3, r1
 8008bf6:	491b      	ldr	r1, [pc, #108]	@ (8008c64 <HAL_RCC_OscConfig+0x4c4>)
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008bfc:	4b1b      	ldr	r3, [pc, #108]	@ (8008c6c <HAL_RCC_OscConfig+0x4cc>)
 8008bfe:	2201      	movs	r2, #1
 8008c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c02:	f7fd f9d9 	bl	8005fb8 <HAL_GetTick>
 8008c06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008c08:	e008      	b.n	8008c1c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c0a:	f7fd f9d5 	bl	8005fb8 <HAL_GetTick>
 8008c0e:	4602      	mov	r2, r0
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	1ad3      	subs	r3, r2, r3
 8008c14:	2b02      	cmp	r3, #2
 8008c16:	d901      	bls.n	8008c1c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008c18:	2303      	movs	r3, #3
 8008c1a:	e03d      	b.n	8008c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008c1c:	4b11      	ldr	r3, [pc, #68]	@ (8008c64 <HAL_RCC_OscConfig+0x4c4>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d0f0      	beq.n	8008c0a <HAL_RCC_OscConfig+0x46a>
 8008c28:	e035      	b.n	8008c96 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c2a:	4b10      	ldr	r3, [pc, #64]	@ (8008c6c <HAL_RCC_OscConfig+0x4cc>)
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c30:	f7fd f9c2 	bl	8005fb8 <HAL_GetTick>
 8008c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008c36:	e008      	b.n	8008c4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c38:	f7fd f9be 	bl	8005fb8 <HAL_GetTick>
 8008c3c:	4602      	mov	r2, r0
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	1ad3      	subs	r3, r2, r3
 8008c42:	2b02      	cmp	r3, #2
 8008c44:	d901      	bls.n	8008c4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8008c46:	2303      	movs	r3, #3
 8008c48:	e026      	b.n	8008c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008c4a:	4b06      	ldr	r3, [pc, #24]	@ (8008c64 <HAL_RCC_OscConfig+0x4c4>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d1f0      	bne.n	8008c38 <HAL_RCC_OscConfig+0x498>
 8008c56:	e01e      	b.n	8008c96 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	69db      	ldr	r3, [r3, #28]
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d107      	bne.n	8008c70 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8008c60:	2301      	movs	r3, #1
 8008c62:	e019      	b.n	8008c98 <HAL_RCC_OscConfig+0x4f8>
 8008c64:	40021000 	.word	0x40021000
 8008c68:	40007000 	.word	0x40007000
 8008c6c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008c70:	4b0b      	ldr	r3, [pc, #44]	@ (8008ca0 <HAL_RCC_OscConfig+0x500>)
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6a1b      	ldr	r3, [r3, #32]
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d106      	bne.n	8008c92 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d001      	beq.n	8008c96 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8008c92:	2301      	movs	r3, #1
 8008c94:	e000      	b.n	8008c98 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8008c96:	2300      	movs	r3, #0
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3718      	adds	r7, #24
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}
 8008ca0:	40021000 	.word	0x40021000

08008ca4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d101      	bne.n	8008cb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	e0d0      	b.n	8008e5a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008cb8:	4b6a      	ldr	r3, [pc, #424]	@ (8008e64 <HAL_RCC_ClockConfig+0x1c0>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f003 0307 	and.w	r3, r3, #7
 8008cc0:	683a      	ldr	r2, [r7, #0]
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d910      	bls.n	8008ce8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cc6:	4b67      	ldr	r3, [pc, #412]	@ (8008e64 <HAL_RCC_ClockConfig+0x1c0>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f023 0207 	bic.w	r2, r3, #7
 8008cce:	4965      	ldr	r1, [pc, #404]	@ (8008e64 <HAL_RCC_ClockConfig+0x1c0>)
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008cd6:	4b63      	ldr	r3, [pc, #396]	@ (8008e64 <HAL_RCC_ClockConfig+0x1c0>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f003 0307 	and.w	r3, r3, #7
 8008cde:	683a      	ldr	r2, [r7, #0]
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d001      	beq.n	8008ce8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	e0b8      	b.n	8008e5a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f003 0302 	and.w	r3, r3, #2
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d020      	beq.n	8008d36 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f003 0304 	and.w	r3, r3, #4
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d005      	beq.n	8008d0c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008d00:	4b59      	ldr	r3, [pc, #356]	@ (8008e68 <HAL_RCC_ClockConfig+0x1c4>)
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	4a58      	ldr	r2, [pc, #352]	@ (8008e68 <HAL_RCC_ClockConfig+0x1c4>)
 8008d06:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008d0a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f003 0308 	and.w	r3, r3, #8
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d005      	beq.n	8008d24 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008d18:	4b53      	ldr	r3, [pc, #332]	@ (8008e68 <HAL_RCC_ClockConfig+0x1c4>)
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	4a52      	ldr	r2, [pc, #328]	@ (8008e68 <HAL_RCC_ClockConfig+0x1c4>)
 8008d1e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8008d22:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d24:	4b50      	ldr	r3, [pc, #320]	@ (8008e68 <HAL_RCC_ClockConfig+0x1c4>)
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	689b      	ldr	r3, [r3, #8]
 8008d30:	494d      	ldr	r1, [pc, #308]	@ (8008e68 <HAL_RCC_ClockConfig+0x1c4>)
 8008d32:	4313      	orrs	r3, r2
 8008d34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f003 0301 	and.w	r3, r3, #1
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d040      	beq.n	8008dc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d107      	bne.n	8008d5a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d4a:	4b47      	ldr	r3, [pc, #284]	@ (8008e68 <HAL_RCC_ClockConfig+0x1c4>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d115      	bne.n	8008d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d56:	2301      	movs	r3, #1
 8008d58:	e07f      	b.n	8008e5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	2b02      	cmp	r3, #2
 8008d60:	d107      	bne.n	8008d72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d62:	4b41      	ldr	r3, [pc, #260]	@ (8008e68 <HAL_RCC_ClockConfig+0x1c4>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d109      	bne.n	8008d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	e073      	b.n	8008e5a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d72:	4b3d      	ldr	r3, [pc, #244]	@ (8008e68 <HAL_RCC_ClockConfig+0x1c4>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f003 0302 	and.w	r3, r3, #2
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d101      	bne.n	8008d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	e06b      	b.n	8008e5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008d82:	4b39      	ldr	r3, [pc, #228]	@ (8008e68 <HAL_RCC_ClockConfig+0x1c4>)
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	f023 0203 	bic.w	r2, r3, #3
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	4936      	ldr	r1, [pc, #216]	@ (8008e68 <HAL_RCC_ClockConfig+0x1c4>)
 8008d90:	4313      	orrs	r3, r2
 8008d92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008d94:	f7fd f910 	bl	8005fb8 <HAL_GetTick>
 8008d98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d9a:	e00a      	b.n	8008db2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d9c:	f7fd f90c 	bl	8005fb8 <HAL_GetTick>
 8008da0:	4602      	mov	r2, r0
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	1ad3      	subs	r3, r2, r3
 8008da6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d901      	bls.n	8008db2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008dae:	2303      	movs	r3, #3
 8008db0:	e053      	b.n	8008e5a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008db2:	4b2d      	ldr	r3, [pc, #180]	@ (8008e68 <HAL_RCC_ClockConfig+0x1c4>)
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	f003 020c 	and.w	r2, r3, #12
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d1eb      	bne.n	8008d9c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008dc4:	4b27      	ldr	r3, [pc, #156]	@ (8008e64 <HAL_RCC_ClockConfig+0x1c0>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f003 0307 	and.w	r3, r3, #7
 8008dcc:	683a      	ldr	r2, [r7, #0]
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d210      	bcs.n	8008df4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008dd2:	4b24      	ldr	r3, [pc, #144]	@ (8008e64 <HAL_RCC_ClockConfig+0x1c0>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f023 0207 	bic.w	r2, r3, #7
 8008dda:	4922      	ldr	r1, [pc, #136]	@ (8008e64 <HAL_RCC_ClockConfig+0x1c0>)
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	4313      	orrs	r3, r2
 8008de0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008de2:	4b20      	ldr	r3, [pc, #128]	@ (8008e64 <HAL_RCC_ClockConfig+0x1c0>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f003 0307 	and.w	r3, r3, #7
 8008dea:	683a      	ldr	r2, [r7, #0]
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d001      	beq.n	8008df4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8008df0:	2301      	movs	r3, #1
 8008df2:	e032      	b.n	8008e5a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f003 0304 	and.w	r3, r3, #4
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d008      	beq.n	8008e12 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008e00:	4b19      	ldr	r3, [pc, #100]	@ (8008e68 <HAL_RCC_ClockConfig+0x1c4>)
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	68db      	ldr	r3, [r3, #12]
 8008e0c:	4916      	ldr	r1, [pc, #88]	@ (8008e68 <HAL_RCC_ClockConfig+0x1c4>)
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f003 0308 	and.w	r3, r3, #8
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d009      	beq.n	8008e32 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008e1e:	4b12      	ldr	r3, [pc, #72]	@ (8008e68 <HAL_RCC_ClockConfig+0x1c4>)
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	691b      	ldr	r3, [r3, #16]
 8008e2a:	00db      	lsls	r3, r3, #3
 8008e2c:	490e      	ldr	r1, [pc, #56]	@ (8008e68 <HAL_RCC_ClockConfig+0x1c4>)
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008e32:	f000 f821 	bl	8008e78 <HAL_RCC_GetSysClockFreq>
 8008e36:	4602      	mov	r2, r0
 8008e38:	4b0b      	ldr	r3, [pc, #44]	@ (8008e68 <HAL_RCC_ClockConfig+0x1c4>)
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	091b      	lsrs	r3, r3, #4
 8008e3e:	f003 030f 	and.w	r3, r3, #15
 8008e42:	490a      	ldr	r1, [pc, #40]	@ (8008e6c <HAL_RCC_ClockConfig+0x1c8>)
 8008e44:	5ccb      	ldrb	r3, [r1, r3]
 8008e46:	fa22 f303 	lsr.w	r3, r2, r3
 8008e4a:	4a09      	ldr	r2, [pc, #36]	@ (8008e70 <HAL_RCC_ClockConfig+0x1cc>)
 8008e4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008e4e:	4b09      	ldr	r3, [pc, #36]	@ (8008e74 <HAL_RCC_ClockConfig+0x1d0>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4618      	mov	r0, r3
 8008e54:	f7fd f86e 	bl	8005f34 <HAL_InitTick>

  return HAL_OK;
 8008e58:	2300      	movs	r3, #0
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3710      	adds	r7, #16
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}
 8008e62:	bf00      	nop
 8008e64:	40022000 	.word	0x40022000
 8008e68:	40021000 	.word	0x40021000
 8008e6c:	0800ddb4 	.word	0x0800ddb4
 8008e70:	20000060 	.word	0x20000060
 8008e74:	20000064 	.word	0x20000064

08008e78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b087      	sub	sp, #28
 8008e7c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	60fb      	str	r3, [r7, #12]
 8008e82:	2300      	movs	r3, #0
 8008e84:	60bb      	str	r3, [r7, #8]
 8008e86:	2300      	movs	r3, #0
 8008e88:	617b      	str	r3, [r7, #20]
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8008e92:	4b1e      	ldr	r3, [pc, #120]	@ (8008f0c <HAL_RCC_GetSysClockFreq+0x94>)
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f003 030c 	and.w	r3, r3, #12
 8008e9e:	2b04      	cmp	r3, #4
 8008ea0:	d002      	beq.n	8008ea8 <HAL_RCC_GetSysClockFreq+0x30>
 8008ea2:	2b08      	cmp	r3, #8
 8008ea4:	d003      	beq.n	8008eae <HAL_RCC_GetSysClockFreq+0x36>
 8008ea6:	e027      	b.n	8008ef8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008ea8:	4b19      	ldr	r3, [pc, #100]	@ (8008f10 <HAL_RCC_GetSysClockFreq+0x98>)
 8008eaa:	613b      	str	r3, [r7, #16]
      break;
 8008eac:	e027      	b.n	8008efe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	0c9b      	lsrs	r3, r3, #18
 8008eb2:	f003 030f 	and.w	r3, r3, #15
 8008eb6:	4a17      	ldr	r2, [pc, #92]	@ (8008f14 <HAL_RCC_GetSysClockFreq+0x9c>)
 8008eb8:	5cd3      	ldrb	r3, [r2, r3]
 8008eba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d010      	beq.n	8008ee8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008ec6:	4b11      	ldr	r3, [pc, #68]	@ (8008f0c <HAL_RCC_GetSysClockFreq+0x94>)
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	0c5b      	lsrs	r3, r3, #17
 8008ecc:	f003 0301 	and.w	r3, r3, #1
 8008ed0:	4a11      	ldr	r2, [pc, #68]	@ (8008f18 <HAL_RCC_GetSysClockFreq+0xa0>)
 8008ed2:	5cd3      	ldrb	r3, [r2, r3]
 8008ed4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	4a0d      	ldr	r2, [pc, #52]	@ (8008f10 <HAL_RCC_GetSysClockFreq+0x98>)
 8008eda:	fb03 f202 	mul.w	r2, r3, r2
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ee4:	617b      	str	r3, [r7, #20]
 8008ee6:	e004      	b.n	8008ef2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	4a0c      	ldr	r2, [pc, #48]	@ (8008f1c <HAL_RCC_GetSysClockFreq+0xa4>)
 8008eec:	fb02 f303 	mul.w	r3, r2, r3
 8008ef0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	613b      	str	r3, [r7, #16]
      break;
 8008ef6:	e002      	b.n	8008efe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008ef8:	4b05      	ldr	r3, [pc, #20]	@ (8008f10 <HAL_RCC_GetSysClockFreq+0x98>)
 8008efa:	613b      	str	r3, [r7, #16]
      break;
 8008efc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008efe:	693b      	ldr	r3, [r7, #16]
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	371c      	adds	r7, #28
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bc80      	pop	{r7}
 8008f08:	4770      	bx	lr
 8008f0a:	bf00      	nop
 8008f0c:	40021000 	.word	0x40021000
 8008f10:	007a1200 	.word	0x007a1200
 8008f14:	0800ddcc 	.word	0x0800ddcc
 8008f18:	0800dddc 	.word	0x0800dddc
 8008f1c:	003d0900 	.word	0x003d0900

08008f20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f20:	b480      	push	{r7}
 8008f22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008f24:	4b02      	ldr	r3, [pc, #8]	@ (8008f30 <HAL_RCC_GetHCLKFreq+0x10>)
 8008f26:	681b      	ldr	r3, [r3, #0]
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bc80      	pop	{r7}
 8008f2e:	4770      	bx	lr
 8008f30:	20000060 	.word	0x20000060

08008f34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008f38:	f7ff fff2 	bl	8008f20 <HAL_RCC_GetHCLKFreq>
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	4b05      	ldr	r3, [pc, #20]	@ (8008f54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	0a1b      	lsrs	r3, r3, #8
 8008f44:	f003 0307 	and.w	r3, r3, #7
 8008f48:	4903      	ldr	r1, [pc, #12]	@ (8008f58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f4a:	5ccb      	ldrb	r3, [r1, r3]
 8008f4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	bd80      	pop	{r7, pc}
 8008f54:	40021000 	.word	0x40021000
 8008f58:	0800ddc4 	.word	0x0800ddc4

08008f5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008f60:	f7ff ffde 	bl	8008f20 <HAL_RCC_GetHCLKFreq>
 8008f64:	4602      	mov	r2, r0
 8008f66:	4b05      	ldr	r3, [pc, #20]	@ (8008f7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	0adb      	lsrs	r3, r3, #11
 8008f6c:	f003 0307 	and.w	r3, r3, #7
 8008f70:	4903      	ldr	r1, [pc, #12]	@ (8008f80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008f72:	5ccb      	ldrb	r3, [r1, r3]
 8008f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	bd80      	pop	{r7, pc}
 8008f7c:	40021000 	.word	0x40021000
 8008f80:	0800ddc4 	.word	0x0800ddc4

08008f84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b085      	sub	sp, #20
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8008fb8 <RCC_Delay+0x34>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4a0a      	ldr	r2, [pc, #40]	@ (8008fbc <RCC_Delay+0x38>)
 8008f92:	fba2 2303 	umull	r2, r3, r2, r3
 8008f96:	0a5b      	lsrs	r3, r3, #9
 8008f98:	687a      	ldr	r2, [r7, #4]
 8008f9a:	fb02 f303 	mul.w	r3, r2, r3
 8008f9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008fa0:	bf00      	nop
  }
  while (Delay --);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	1e5a      	subs	r2, r3, #1
 8008fa6:	60fa      	str	r2, [r7, #12]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d1f9      	bne.n	8008fa0 <RCC_Delay+0x1c>
}
 8008fac:	bf00      	nop
 8008fae:	bf00      	nop
 8008fb0:	3714      	adds	r7, #20
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bc80      	pop	{r7}
 8008fb6:	4770      	bx	lr
 8008fb8:	20000060 	.word	0x20000060
 8008fbc:	10624dd3 	.word	0x10624dd3

08008fc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b086      	sub	sp, #24
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	613b      	str	r3, [r7, #16]
 8008fcc:	2300      	movs	r3, #0
 8008fce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f003 0301 	and.w	r3, r3, #1
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d07d      	beq.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008fe0:	4b4f      	ldr	r3, [pc, #316]	@ (8009120 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008fe2:	69db      	ldr	r3, [r3, #28]
 8008fe4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d10d      	bne.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008fec:	4b4c      	ldr	r3, [pc, #304]	@ (8009120 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008fee:	69db      	ldr	r3, [r3, #28]
 8008ff0:	4a4b      	ldr	r2, [pc, #300]	@ (8009120 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008ff2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ff6:	61d3      	str	r3, [r2, #28]
 8008ff8:	4b49      	ldr	r3, [pc, #292]	@ (8009120 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008ffa:	69db      	ldr	r3, [r3, #28]
 8008ffc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009000:	60bb      	str	r3, [r7, #8]
 8009002:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009004:	2301      	movs	r3, #1
 8009006:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009008:	4b46      	ldr	r3, [pc, #280]	@ (8009124 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009010:	2b00      	cmp	r3, #0
 8009012:	d118      	bne.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009014:	4b43      	ldr	r3, [pc, #268]	@ (8009124 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a42      	ldr	r2, [pc, #264]	@ (8009124 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800901a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800901e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009020:	f7fc ffca 	bl	8005fb8 <HAL_GetTick>
 8009024:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009026:	e008      	b.n	800903a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009028:	f7fc ffc6 	bl	8005fb8 <HAL_GetTick>
 800902c:	4602      	mov	r2, r0
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	1ad3      	subs	r3, r2, r3
 8009032:	2b64      	cmp	r3, #100	@ 0x64
 8009034:	d901      	bls.n	800903a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8009036:	2303      	movs	r3, #3
 8009038:	e06d      	b.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800903a:	4b3a      	ldr	r3, [pc, #232]	@ (8009124 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009042:	2b00      	cmp	r3, #0
 8009044:	d0f0      	beq.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009046:	4b36      	ldr	r3, [pc, #216]	@ (8009120 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009048:	6a1b      	ldr	r3, [r3, #32]
 800904a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800904e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d02e      	beq.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800905e:	68fa      	ldr	r2, [r7, #12]
 8009060:	429a      	cmp	r2, r3
 8009062:	d027      	beq.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009064:	4b2e      	ldr	r3, [pc, #184]	@ (8009120 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009066:	6a1b      	ldr	r3, [r3, #32]
 8009068:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800906c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800906e:	4b2e      	ldr	r3, [pc, #184]	@ (8009128 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8009070:	2201      	movs	r2, #1
 8009072:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009074:	4b2c      	ldr	r3, [pc, #176]	@ (8009128 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8009076:	2200      	movs	r2, #0
 8009078:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800907a:	4a29      	ldr	r2, [pc, #164]	@ (8009120 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f003 0301 	and.w	r3, r3, #1
 8009086:	2b00      	cmp	r3, #0
 8009088:	d014      	beq.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800908a:	f7fc ff95 	bl	8005fb8 <HAL_GetTick>
 800908e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009090:	e00a      	b.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009092:	f7fc ff91 	bl	8005fb8 <HAL_GetTick>
 8009096:	4602      	mov	r2, r0
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	1ad3      	subs	r3, r2, r3
 800909c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d901      	bls.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80090a4:	2303      	movs	r3, #3
 80090a6:	e036      	b.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80090a8:	4b1d      	ldr	r3, [pc, #116]	@ (8009120 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80090aa:	6a1b      	ldr	r3, [r3, #32]
 80090ac:	f003 0302 	and.w	r3, r3, #2
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d0ee      	beq.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80090b4:	4b1a      	ldr	r3, [pc, #104]	@ (8009120 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80090b6:	6a1b      	ldr	r3, [r3, #32]
 80090b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	4917      	ldr	r1, [pc, #92]	@ (8009120 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80090c2:	4313      	orrs	r3, r2
 80090c4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80090c6:	7dfb      	ldrb	r3, [r7, #23]
 80090c8:	2b01      	cmp	r3, #1
 80090ca:	d105      	bne.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80090cc:	4b14      	ldr	r3, [pc, #80]	@ (8009120 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80090ce:	69db      	ldr	r3, [r3, #28]
 80090d0:	4a13      	ldr	r2, [pc, #76]	@ (8009120 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80090d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80090d6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f003 0302 	and.w	r3, r3, #2
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d008      	beq.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80090e4:	4b0e      	ldr	r3, [pc, #56]	@ (8009120 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	689b      	ldr	r3, [r3, #8]
 80090f0:	490b      	ldr	r1, [pc, #44]	@ (8009120 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80090f2:	4313      	orrs	r3, r2
 80090f4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f003 0310 	and.w	r3, r3, #16
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d008      	beq.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009102:	4b07      	ldr	r3, [pc, #28]	@ (8009120 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009104:	685b      	ldr	r3, [r3, #4]
 8009106:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	68db      	ldr	r3, [r3, #12]
 800910e:	4904      	ldr	r1, [pc, #16]	@ (8009120 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009110:	4313      	orrs	r3, r2
 8009112:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8009114:	2300      	movs	r3, #0
}
 8009116:	4618      	mov	r0, r3
 8009118:	3718      	adds	r7, #24
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
 800911e:	bf00      	nop
 8009120:	40021000 	.word	0x40021000
 8009124:	40007000 	.word	0x40007000
 8009128:	42420440 	.word	0x42420440

0800912c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b088      	sub	sp, #32
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8009134:	2300      	movs	r3, #0
 8009136:	617b      	str	r3, [r7, #20]
 8009138:	2300      	movs	r3, #0
 800913a:	61fb      	str	r3, [r7, #28]
 800913c:	2300      	movs	r3, #0
 800913e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8009140:	2300      	movs	r3, #0
 8009142:	60fb      	str	r3, [r7, #12]
 8009144:	2300      	movs	r3, #0
 8009146:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2b10      	cmp	r3, #16
 800914c:	d00a      	beq.n	8009164 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2b10      	cmp	r3, #16
 8009152:	f200 808a 	bhi.w	800926a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2b01      	cmp	r3, #1
 800915a:	d045      	beq.n	80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2b02      	cmp	r3, #2
 8009160:	d075      	beq.n	800924e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8009162:	e082      	b.n	800926a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8009164:	4b46      	ldr	r3, [pc, #280]	@ (8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800916a:	4b45      	ldr	r3, [pc, #276]	@ (8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009172:	2b00      	cmp	r3, #0
 8009174:	d07b      	beq.n	800926e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	0c9b      	lsrs	r3, r3, #18
 800917a:	f003 030f 	and.w	r3, r3, #15
 800917e:	4a41      	ldr	r2, [pc, #260]	@ (8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8009180:	5cd3      	ldrb	r3, [r2, r3]
 8009182:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800918a:	2b00      	cmp	r3, #0
 800918c:	d015      	beq.n	80091ba <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800918e:	4b3c      	ldr	r3, [pc, #240]	@ (8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	0c5b      	lsrs	r3, r3, #17
 8009194:	f003 0301 	and.w	r3, r3, #1
 8009198:	4a3b      	ldr	r2, [pc, #236]	@ (8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800919a:	5cd3      	ldrb	r3, [r2, r3]
 800919c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d00d      	beq.n	80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80091a8:	4a38      	ldr	r2, [pc, #224]	@ (800928c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	fb02 f303 	mul.w	r3, r2, r3
 80091b6:	61fb      	str	r3, [r7, #28]
 80091b8:	e004      	b.n	80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	4a34      	ldr	r2, [pc, #208]	@ (8009290 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80091be:	fb02 f303 	mul.w	r3, r2, r3
 80091c2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80091c4:	4b2e      	ldr	r3, [pc, #184]	@ (8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80091cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80091d0:	d102      	bne.n	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80091d2:	69fb      	ldr	r3, [r7, #28]
 80091d4:	61bb      	str	r3, [r7, #24]
      break;
 80091d6:	e04a      	b.n	800926e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80091d8:	69fb      	ldr	r3, [r7, #28]
 80091da:	005b      	lsls	r3, r3, #1
 80091dc:	4a2d      	ldr	r2, [pc, #180]	@ (8009294 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80091de:	fba2 2303 	umull	r2, r3, r2, r3
 80091e2:	085b      	lsrs	r3, r3, #1
 80091e4:	61bb      	str	r3, [r7, #24]
      break;
 80091e6:	e042      	b.n	800926e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80091e8:	4b25      	ldr	r3, [pc, #148]	@ (8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80091ea:	6a1b      	ldr	r3, [r3, #32]
 80091ec:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80091f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091f8:	d108      	bne.n	800920c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	f003 0302 	and.w	r3, r3, #2
 8009200:	2b00      	cmp	r3, #0
 8009202:	d003      	beq.n	800920c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8009204:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009208:	61bb      	str	r3, [r7, #24]
 800920a:	e01f      	b.n	800924c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009212:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009216:	d109      	bne.n	800922c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8009218:	4b19      	ldr	r3, [pc, #100]	@ (8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800921a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800921c:	f003 0302 	and.w	r3, r3, #2
 8009220:	2b00      	cmp	r3, #0
 8009222:	d003      	beq.n	800922c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8009224:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8009228:	61bb      	str	r3, [r7, #24]
 800922a:	e00f      	b.n	800924c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009232:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009236:	d11c      	bne.n	8009272 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8009238:	4b11      	ldr	r3, [pc, #68]	@ (8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009240:	2b00      	cmp	r3, #0
 8009242:	d016      	beq.n	8009272 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8009244:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8009248:	61bb      	str	r3, [r7, #24]
      break;
 800924a:	e012      	b.n	8009272 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800924c:	e011      	b.n	8009272 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800924e:	f7ff fe85 	bl	8008f5c <HAL_RCC_GetPCLK2Freq>
 8009252:	4602      	mov	r2, r0
 8009254:	4b0a      	ldr	r3, [pc, #40]	@ (8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	0b9b      	lsrs	r3, r3, #14
 800925a:	f003 0303 	and.w	r3, r3, #3
 800925e:	3301      	adds	r3, #1
 8009260:	005b      	lsls	r3, r3, #1
 8009262:	fbb2 f3f3 	udiv	r3, r2, r3
 8009266:	61bb      	str	r3, [r7, #24]
      break;
 8009268:	e004      	b.n	8009274 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800926a:	bf00      	nop
 800926c:	e002      	b.n	8009274 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800926e:	bf00      	nop
 8009270:	e000      	b.n	8009274 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8009272:	bf00      	nop
    }
  }
  return (frequency);
 8009274:	69bb      	ldr	r3, [r7, #24]
}
 8009276:	4618      	mov	r0, r3
 8009278:	3720      	adds	r7, #32
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}
 800927e:	bf00      	nop
 8009280:	40021000 	.word	0x40021000
 8009284:	0800dde0 	.word	0x0800dde0
 8009288:	0800ddf0 	.word	0x0800ddf0
 800928c:	007a1200 	.word	0x007a1200
 8009290:	003d0900 	.word	0x003d0900
 8009294:	aaaaaaab 	.word	0xaaaaaaab

08009298 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b082      	sub	sp, #8
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f003 0302 	and.w	r3, r3, #2
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d011      	beq.n	80092d2 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	f003 0302 	and.w	r3, r3, #2
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d00a      	beq.n	80092d2 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f000 f815 	bl	80092ec <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	685a      	ldr	r2, [r3, #4]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f022 0202 	bic.w	r2, r2, #2
 80092d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80092d2:	4b05      	ldr	r3, [pc, #20]	@ (80092e8 <HAL_RTC_AlarmIRQHandler+0x50>)
 80092d4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80092d8:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2201      	movs	r2, #1
 80092de:	745a      	strb	r2, [r3, #17]
}
 80092e0:	bf00      	nop
 80092e2:	3708      	adds	r7, #8
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}
 80092e8:	40010400 	.word	0x40010400

080092ec <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b083      	sub	sp, #12
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80092f4:	bf00      	nop
 80092f6:	370c      	adds	r7, #12
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bc80      	pop	{r7}
 80092fc:	4770      	bx	lr

080092fe <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80092fe:	b580      	push	{r7, lr}
 8009300:	b082      	sub	sp, #8
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d101      	bne.n	8009310 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800930c:	2301      	movs	r3, #1
 800930e:	e076      	b.n	80093fe <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009314:	2b00      	cmp	r3, #0
 8009316:	d108      	bne.n	800932a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009320:	d009      	beq.n	8009336 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2200      	movs	r2, #0
 8009326:	61da      	str	r2, [r3, #28]
 8009328:	e005      	b.n	8009336 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2200      	movs	r2, #0
 800932e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2200      	movs	r2, #0
 8009334:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2200      	movs	r2, #0
 800933a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009342:	b2db      	uxtb	r3, r3
 8009344:	2b00      	cmp	r3, #0
 8009346:	d106      	bne.n	8009356 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2200      	movs	r2, #0
 800934c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f7fc fb13 	bl	800597c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2202      	movs	r2, #2
 800935a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	681a      	ldr	r2, [r3, #0]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800936c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	689b      	ldr	r3, [r3, #8]
 800937a:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800937e:	431a      	orrs	r2, r3
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	68db      	ldr	r3, [r3, #12]
 8009384:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009388:	431a      	orrs	r2, r3
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	691b      	ldr	r3, [r3, #16]
 800938e:	f003 0302 	and.w	r3, r3, #2
 8009392:	431a      	orrs	r2, r3
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	695b      	ldr	r3, [r3, #20]
 8009398:	f003 0301 	and.w	r3, r3, #1
 800939c:	431a      	orrs	r2, r3
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	699b      	ldr	r3, [r3, #24]
 80093a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80093a6:	431a      	orrs	r2, r3
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	69db      	ldr	r3, [r3, #28]
 80093ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80093b0:	431a      	orrs	r2, r3
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6a1b      	ldr	r3, [r3, #32]
 80093b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093ba:	ea42 0103 	orr.w	r1, r2, r3
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093c2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	430a      	orrs	r2, r1
 80093cc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	699b      	ldr	r3, [r3, #24]
 80093d2:	0c1a      	lsrs	r2, r3, #16
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f002 0204 	and.w	r2, r2, #4
 80093dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	69da      	ldr	r2, [r3, #28]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80093ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2200      	movs	r2, #0
 80093f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2201      	movs	r2, #1
 80093f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80093fc:	2300      	movs	r3, #0
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3708      	adds	r7, #8
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}

08009406 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009406:	b580      	push	{r7, lr}
 8009408:	b088      	sub	sp, #32
 800940a:	af00      	add	r7, sp, #0
 800940c:	60f8      	str	r0, [r7, #12]
 800940e:	60b9      	str	r1, [r7, #8]
 8009410:	603b      	str	r3, [r7, #0]
 8009412:	4613      	mov	r3, r2
 8009414:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009416:	f7fc fdcf 	bl	8005fb8 <HAL_GetTick>
 800941a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800941c:	88fb      	ldrh	r3, [r7, #6]
 800941e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009426:	b2db      	uxtb	r3, r3
 8009428:	2b01      	cmp	r3, #1
 800942a:	d001      	beq.n	8009430 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800942c:	2302      	movs	r3, #2
 800942e:	e12a      	b.n	8009686 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d002      	beq.n	800943c <HAL_SPI_Transmit+0x36>
 8009436:	88fb      	ldrh	r3, [r7, #6]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d101      	bne.n	8009440 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800943c:	2301      	movs	r3, #1
 800943e:	e122      	b.n	8009686 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009446:	2b01      	cmp	r3, #1
 8009448:	d101      	bne.n	800944e <HAL_SPI_Transmit+0x48>
 800944a:	2302      	movs	r3, #2
 800944c:	e11b      	b.n	8009686 <HAL_SPI_Transmit+0x280>
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	2201      	movs	r2, #1
 8009452:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2203      	movs	r2, #3
 800945a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	2200      	movs	r2, #0
 8009462:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	68ba      	ldr	r2, [r7, #8]
 8009468:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	88fa      	ldrh	r2, [r7, #6]
 800946e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	88fa      	ldrh	r2, [r7, #6]
 8009474:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2200      	movs	r2, #0
 800947a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2200      	movs	r2, #0
 8009480:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2200      	movs	r2, #0
 8009486:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2200      	movs	r2, #0
 800948c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	2200      	movs	r2, #0
 8009492:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	689b      	ldr	r3, [r3, #8]
 8009498:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800949c:	d10f      	bne.n	80094be <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	681a      	ldr	r2, [r3, #0]
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80094ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	681a      	ldr	r2, [r3, #0]
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80094bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094c8:	2b40      	cmp	r3, #64	@ 0x40
 80094ca:	d007      	beq.n	80094dc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	681a      	ldr	r2, [r3, #0]
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80094da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	68db      	ldr	r3, [r3, #12]
 80094e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80094e4:	d152      	bne.n	800958c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	685b      	ldr	r3, [r3, #4]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d002      	beq.n	80094f4 <HAL_SPI_Transmit+0xee>
 80094ee:	8b7b      	ldrh	r3, [r7, #26]
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d145      	bne.n	8009580 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094f8:	881a      	ldrh	r2, [r3, #0]
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009504:	1c9a      	adds	r2, r3, #2
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800950e:	b29b      	uxth	r3, r3
 8009510:	3b01      	subs	r3, #1
 8009512:	b29a      	uxth	r2, r3
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009518:	e032      	b.n	8009580 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	689b      	ldr	r3, [r3, #8]
 8009520:	f003 0302 	and.w	r3, r3, #2
 8009524:	2b02      	cmp	r3, #2
 8009526:	d112      	bne.n	800954e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800952c:	881a      	ldrh	r2, [r3, #0]
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009538:	1c9a      	adds	r2, r3, #2
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009542:	b29b      	uxth	r3, r3
 8009544:	3b01      	subs	r3, #1
 8009546:	b29a      	uxth	r2, r3
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800954c:	e018      	b.n	8009580 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800954e:	f7fc fd33 	bl	8005fb8 <HAL_GetTick>
 8009552:	4602      	mov	r2, r0
 8009554:	69fb      	ldr	r3, [r7, #28]
 8009556:	1ad3      	subs	r3, r2, r3
 8009558:	683a      	ldr	r2, [r7, #0]
 800955a:	429a      	cmp	r2, r3
 800955c:	d803      	bhi.n	8009566 <HAL_SPI_Transmit+0x160>
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009564:	d102      	bne.n	800956c <HAL_SPI_Transmit+0x166>
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d109      	bne.n	8009580 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2201      	movs	r2, #1
 8009570:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	2200      	movs	r2, #0
 8009578:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800957c:	2303      	movs	r3, #3
 800957e:	e082      	b.n	8009686 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009584:	b29b      	uxth	r3, r3
 8009586:	2b00      	cmp	r3, #0
 8009588:	d1c7      	bne.n	800951a <HAL_SPI_Transmit+0x114>
 800958a:	e053      	b.n	8009634 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d002      	beq.n	800959a <HAL_SPI_Transmit+0x194>
 8009594:	8b7b      	ldrh	r3, [r7, #26]
 8009596:	2b01      	cmp	r3, #1
 8009598:	d147      	bne.n	800962a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	330c      	adds	r3, #12
 80095a4:	7812      	ldrb	r2, [r2, #0]
 80095a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095ac:	1c5a      	adds	r2, r3, #1
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80095b6:	b29b      	uxth	r3, r3
 80095b8:	3b01      	subs	r3, #1
 80095ba:	b29a      	uxth	r2, r3
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80095c0:	e033      	b.n	800962a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	689b      	ldr	r3, [r3, #8]
 80095c8:	f003 0302 	and.w	r3, r3, #2
 80095cc:	2b02      	cmp	r3, #2
 80095ce:	d113      	bne.n	80095f8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	330c      	adds	r3, #12
 80095da:	7812      	ldrb	r2, [r2, #0]
 80095dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095e2:	1c5a      	adds	r2, r3, #1
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80095ec:	b29b      	uxth	r3, r3
 80095ee:	3b01      	subs	r3, #1
 80095f0:	b29a      	uxth	r2, r3
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80095f6:	e018      	b.n	800962a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80095f8:	f7fc fcde 	bl	8005fb8 <HAL_GetTick>
 80095fc:	4602      	mov	r2, r0
 80095fe:	69fb      	ldr	r3, [r7, #28]
 8009600:	1ad3      	subs	r3, r2, r3
 8009602:	683a      	ldr	r2, [r7, #0]
 8009604:	429a      	cmp	r2, r3
 8009606:	d803      	bhi.n	8009610 <HAL_SPI_Transmit+0x20a>
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800960e:	d102      	bne.n	8009616 <HAL_SPI_Transmit+0x210>
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d109      	bne.n	800962a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2201      	movs	r2, #1
 800961a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2200      	movs	r2, #0
 8009622:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8009626:	2303      	movs	r3, #3
 8009628:	e02d      	b.n	8009686 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800962e:	b29b      	uxth	r3, r3
 8009630:	2b00      	cmp	r3, #0
 8009632:	d1c6      	bne.n	80095c2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009634:	69fa      	ldr	r2, [r7, #28]
 8009636:	6839      	ldr	r1, [r7, #0]
 8009638:	68f8      	ldr	r0, [r7, #12]
 800963a:	f000 fbc5 	bl	8009dc8 <SPI_EndRxTxTransaction>
 800963e:	4603      	mov	r3, r0
 8009640:	2b00      	cmp	r3, #0
 8009642:	d002      	beq.n	800964a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2220      	movs	r2, #32
 8009648:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	689b      	ldr	r3, [r3, #8]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d10a      	bne.n	8009668 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009652:	2300      	movs	r3, #0
 8009654:	617b      	str	r3, [r7, #20]
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	68db      	ldr	r3, [r3, #12]
 800965c:	617b      	str	r3, [r7, #20]
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	689b      	ldr	r3, [r3, #8]
 8009664:	617b      	str	r3, [r7, #20]
 8009666:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2201      	movs	r2, #1
 800966c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2200      	movs	r2, #0
 8009674:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800967c:	2b00      	cmp	r3, #0
 800967e:	d001      	beq.n	8009684 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8009680:	2301      	movs	r3, #1
 8009682:	e000      	b.n	8009686 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8009684:	2300      	movs	r3, #0
  }
}
 8009686:	4618      	mov	r0, r3
 8009688:	3720      	adds	r7, #32
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}

0800968e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800968e:	b580      	push	{r7, lr}
 8009690:	b088      	sub	sp, #32
 8009692:	af02      	add	r7, sp, #8
 8009694:	60f8      	str	r0, [r7, #12]
 8009696:	60b9      	str	r1, [r7, #8]
 8009698:	603b      	str	r3, [r7, #0]
 800969a:	4613      	mov	r3, r2
 800969c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80096a4:	b2db      	uxtb	r3, r3
 80096a6:	2b01      	cmp	r3, #1
 80096a8:	d001      	beq.n	80096ae <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80096aa:	2302      	movs	r3, #2
 80096ac:	e104      	b.n	80098b8 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80096b6:	d112      	bne.n	80096de <HAL_SPI_Receive+0x50>
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	689b      	ldr	r3, [r3, #8]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d10e      	bne.n	80096de <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2204      	movs	r2, #4
 80096c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80096c8:	88fa      	ldrh	r2, [r7, #6]
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	9300      	str	r3, [sp, #0]
 80096ce:	4613      	mov	r3, r2
 80096d0:	68ba      	ldr	r2, [r7, #8]
 80096d2:	68b9      	ldr	r1, [r7, #8]
 80096d4:	68f8      	ldr	r0, [r7, #12]
 80096d6:	f000 f8f3 	bl	80098c0 <HAL_SPI_TransmitReceive>
 80096da:	4603      	mov	r3, r0
 80096dc:	e0ec      	b.n	80098b8 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80096de:	f7fc fc6b 	bl	8005fb8 <HAL_GetTick>
 80096e2:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d002      	beq.n	80096f0 <HAL_SPI_Receive+0x62>
 80096ea:	88fb      	ldrh	r3, [r7, #6]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d101      	bne.n	80096f4 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80096f0:	2301      	movs	r3, #1
 80096f2:	e0e1      	b.n	80098b8 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80096fa:	2b01      	cmp	r3, #1
 80096fc:	d101      	bne.n	8009702 <HAL_SPI_Receive+0x74>
 80096fe:	2302      	movs	r3, #2
 8009700:	e0da      	b.n	80098b8 <HAL_SPI_Receive+0x22a>
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	2201      	movs	r2, #1
 8009706:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2204      	movs	r2, #4
 800970e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2200      	movs	r2, #0
 8009716:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	68ba      	ldr	r2, [r7, #8]
 800971c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	88fa      	ldrh	r2, [r7, #6]
 8009722:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	88fa      	ldrh	r2, [r7, #6]
 8009728:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2200      	movs	r2, #0
 800972e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	2200      	movs	r2, #0
 8009734:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	2200      	movs	r2, #0
 800973a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	2200      	movs	r2, #0
 8009740:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2200      	movs	r2, #0
 8009746:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	689b      	ldr	r3, [r3, #8]
 800974c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009750:	d10f      	bne.n	8009772 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009760:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009770:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800977c:	2b40      	cmp	r3, #64	@ 0x40
 800977e:	d007      	beq.n	8009790 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	681a      	ldr	r2, [r3, #0]
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800978e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	68db      	ldr	r3, [r3, #12]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d170      	bne.n	800987a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009798:	e035      	b.n	8009806 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	689b      	ldr	r3, [r3, #8]
 80097a0:	f003 0301 	and.w	r3, r3, #1
 80097a4:	2b01      	cmp	r3, #1
 80097a6:	d115      	bne.n	80097d4 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f103 020c 	add.w	r2, r3, #12
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097b4:	7812      	ldrb	r2, [r2, #0]
 80097b6:	b2d2      	uxtb	r2, r2
 80097b8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097be:	1c5a      	adds	r2, r3, #1
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80097c8:	b29b      	uxth	r3, r3
 80097ca:	3b01      	subs	r3, #1
 80097cc:	b29a      	uxth	r2, r3
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80097d2:	e018      	b.n	8009806 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80097d4:	f7fc fbf0 	bl	8005fb8 <HAL_GetTick>
 80097d8:	4602      	mov	r2, r0
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	1ad3      	subs	r3, r2, r3
 80097de:	683a      	ldr	r2, [r7, #0]
 80097e0:	429a      	cmp	r2, r3
 80097e2:	d803      	bhi.n	80097ec <HAL_SPI_Receive+0x15e>
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097ea:	d102      	bne.n	80097f2 <HAL_SPI_Receive+0x164>
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d109      	bne.n	8009806 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	2201      	movs	r2, #1
 80097f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2200      	movs	r2, #0
 80097fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8009802:	2303      	movs	r3, #3
 8009804:	e058      	b.n	80098b8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800980a:	b29b      	uxth	r3, r3
 800980c:	2b00      	cmp	r3, #0
 800980e:	d1c4      	bne.n	800979a <HAL_SPI_Receive+0x10c>
 8009810:	e038      	b.n	8009884 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	689b      	ldr	r3, [r3, #8]
 8009818:	f003 0301 	and.w	r3, r3, #1
 800981c:	2b01      	cmp	r3, #1
 800981e:	d113      	bne.n	8009848 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	68da      	ldr	r2, [r3, #12]
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800982a:	b292      	uxth	r2, r2
 800982c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009832:	1c9a      	adds	r2, r3, #2
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800983c:	b29b      	uxth	r3, r3
 800983e:	3b01      	subs	r3, #1
 8009840:	b29a      	uxth	r2, r3
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009846:	e018      	b.n	800987a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009848:	f7fc fbb6 	bl	8005fb8 <HAL_GetTick>
 800984c:	4602      	mov	r2, r0
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	1ad3      	subs	r3, r2, r3
 8009852:	683a      	ldr	r2, [r7, #0]
 8009854:	429a      	cmp	r2, r3
 8009856:	d803      	bhi.n	8009860 <HAL_SPI_Receive+0x1d2>
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800985e:	d102      	bne.n	8009866 <HAL_SPI_Receive+0x1d8>
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d109      	bne.n	800987a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2201      	movs	r2, #1
 800986a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2200      	movs	r2, #0
 8009872:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8009876:	2303      	movs	r3, #3
 8009878:	e01e      	b.n	80098b8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800987e:	b29b      	uxth	r3, r3
 8009880:	2b00      	cmp	r3, #0
 8009882:	d1c6      	bne.n	8009812 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009884:	697a      	ldr	r2, [r7, #20]
 8009886:	6839      	ldr	r1, [r7, #0]
 8009888:	68f8      	ldr	r0, [r7, #12]
 800988a:	f000 fa4b 	bl	8009d24 <SPI_EndRxTransaction>
 800988e:	4603      	mov	r3, r0
 8009890:	2b00      	cmp	r3, #0
 8009892:	d002      	beq.n	800989a <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	2220      	movs	r2, #32
 8009898:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	2201      	movs	r2, #1
 800989e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	2200      	movs	r2, #0
 80098a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d001      	beq.n	80098b6 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80098b2:	2301      	movs	r3, #1
 80098b4:	e000      	b.n	80098b8 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80098b6:	2300      	movs	r3, #0
  }
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3718      	adds	r7, #24
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}

080098c0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b08a      	sub	sp, #40	@ 0x28
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	60f8      	str	r0, [r7, #12]
 80098c8:	60b9      	str	r1, [r7, #8]
 80098ca:	607a      	str	r2, [r7, #4]
 80098cc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80098ce:	2301      	movs	r3, #1
 80098d0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80098d2:	f7fc fb71 	bl	8005fb8 <HAL_GetTick>
 80098d6:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80098de:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80098e6:	887b      	ldrh	r3, [r7, #2]
 80098e8:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80098ea:	7ffb      	ldrb	r3, [r7, #31]
 80098ec:	2b01      	cmp	r3, #1
 80098ee:	d00c      	beq.n	800990a <HAL_SPI_TransmitReceive+0x4a>
 80098f0:	69bb      	ldr	r3, [r7, #24]
 80098f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80098f6:	d106      	bne.n	8009906 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	689b      	ldr	r3, [r3, #8]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d102      	bne.n	8009906 <HAL_SPI_TransmitReceive+0x46>
 8009900:	7ffb      	ldrb	r3, [r7, #31]
 8009902:	2b04      	cmp	r3, #4
 8009904:	d001      	beq.n	800990a <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8009906:	2302      	movs	r3, #2
 8009908:	e17f      	b.n	8009c0a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d005      	beq.n	800991c <HAL_SPI_TransmitReceive+0x5c>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d002      	beq.n	800991c <HAL_SPI_TransmitReceive+0x5c>
 8009916:	887b      	ldrh	r3, [r7, #2]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d101      	bne.n	8009920 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800991c:	2301      	movs	r3, #1
 800991e:	e174      	b.n	8009c0a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009926:	2b01      	cmp	r3, #1
 8009928:	d101      	bne.n	800992e <HAL_SPI_TransmitReceive+0x6e>
 800992a:	2302      	movs	r3, #2
 800992c:	e16d      	b.n	8009c0a <HAL_SPI_TransmitReceive+0x34a>
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	2201      	movs	r2, #1
 8009932:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800993c:	b2db      	uxtb	r3, r3
 800993e:	2b04      	cmp	r3, #4
 8009940:	d003      	beq.n	800994a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2205      	movs	r2, #5
 8009946:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	2200      	movs	r2, #0
 800994e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	687a      	ldr	r2, [r7, #4]
 8009954:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	887a      	ldrh	r2, [r7, #2]
 800995a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	887a      	ldrh	r2, [r7, #2]
 8009960:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	68ba      	ldr	r2, [r7, #8]
 8009966:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	887a      	ldrh	r2, [r7, #2]
 800996c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	887a      	ldrh	r2, [r7, #2]
 8009972:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2200      	movs	r2, #0
 8009978:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	2200      	movs	r2, #0
 800997e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800998a:	2b40      	cmp	r3, #64	@ 0x40
 800998c:	d007      	beq.n	800999e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	681a      	ldr	r2, [r3, #0]
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800999c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	68db      	ldr	r3, [r3, #12]
 80099a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80099a6:	d17e      	bne.n	8009aa6 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d002      	beq.n	80099b6 <HAL_SPI_TransmitReceive+0xf6>
 80099b0:	8afb      	ldrh	r3, [r7, #22]
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d16c      	bne.n	8009a90 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099ba:	881a      	ldrh	r2, [r3, #0]
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099c6:	1c9a      	adds	r2, r3, #2
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80099d0:	b29b      	uxth	r3, r3
 80099d2:	3b01      	subs	r3, #1
 80099d4:	b29a      	uxth	r2, r3
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80099da:	e059      	b.n	8009a90 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	689b      	ldr	r3, [r3, #8]
 80099e2:	f003 0302 	and.w	r3, r3, #2
 80099e6:	2b02      	cmp	r3, #2
 80099e8:	d11b      	bne.n	8009a22 <HAL_SPI_TransmitReceive+0x162>
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d016      	beq.n	8009a22 <HAL_SPI_TransmitReceive+0x162>
 80099f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099f6:	2b01      	cmp	r3, #1
 80099f8:	d113      	bne.n	8009a22 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099fe:	881a      	ldrh	r2, [r3, #0]
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a0a:	1c9a      	adds	r2, r3, #2
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009a14:	b29b      	uxth	r3, r3
 8009a16:	3b01      	subs	r3, #1
 8009a18:	b29a      	uxth	r2, r3
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	689b      	ldr	r3, [r3, #8]
 8009a28:	f003 0301 	and.w	r3, r3, #1
 8009a2c:	2b01      	cmp	r3, #1
 8009a2e:	d119      	bne.n	8009a64 <HAL_SPI_TransmitReceive+0x1a4>
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009a34:	b29b      	uxth	r3, r3
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d014      	beq.n	8009a64 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	68da      	ldr	r2, [r3, #12]
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a44:	b292      	uxth	r2, r2
 8009a46:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a4c:	1c9a      	adds	r2, r3, #2
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	3b01      	subs	r3, #1
 8009a5a:	b29a      	uxth	r2, r3
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009a60:	2301      	movs	r3, #1
 8009a62:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009a64:	f7fc faa8 	bl	8005fb8 <HAL_GetTick>
 8009a68:	4602      	mov	r2, r0
 8009a6a:	6a3b      	ldr	r3, [r7, #32]
 8009a6c:	1ad3      	subs	r3, r2, r3
 8009a6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d80d      	bhi.n	8009a90 <HAL_SPI_TransmitReceive+0x1d0>
 8009a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a7a:	d009      	beq.n	8009a90 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2201      	movs	r2, #1
 8009a80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2200      	movs	r2, #0
 8009a88:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8009a8c:	2303      	movs	r3, #3
 8009a8e:	e0bc      	b.n	8009c0a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009a94:	b29b      	uxth	r3, r3
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d1a0      	bne.n	80099dc <HAL_SPI_TransmitReceive+0x11c>
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009a9e:	b29b      	uxth	r3, r3
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d19b      	bne.n	80099dc <HAL_SPI_TransmitReceive+0x11c>
 8009aa4:	e082      	b.n	8009bac <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d002      	beq.n	8009ab4 <HAL_SPI_TransmitReceive+0x1f4>
 8009aae:	8afb      	ldrh	r3, [r7, #22]
 8009ab0:	2b01      	cmp	r3, #1
 8009ab2:	d171      	bne.n	8009b98 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	330c      	adds	r3, #12
 8009abe:	7812      	ldrb	r2, [r2, #0]
 8009ac0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ac6:	1c5a      	adds	r2, r3, #1
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009ad0:	b29b      	uxth	r3, r3
 8009ad2:	3b01      	subs	r3, #1
 8009ad4:	b29a      	uxth	r2, r3
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ada:	e05d      	b.n	8009b98 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	689b      	ldr	r3, [r3, #8]
 8009ae2:	f003 0302 	and.w	r3, r3, #2
 8009ae6:	2b02      	cmp	r3, #2
 8009ae8:	d11c      	bne.n	8009b24 <HAL_SPI_TransmitReceive+0x264>
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009aee:	b29b      	uxth	r3, r3
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d017      	beq.n	8009b24 <HAL_SPI_TransmitReceive+0x264>
 8009af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d114      	bne.n	8009b24 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	330c      	adds	r3, #12
 8009b04:	7812      	ldrb	r2, [r2, #0]
 8009b06:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b0c:	1c5a      	adds	r2, r3, #1
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009b16:	b29b      	uxth	r3, r3
 8009b18:	3b01      	subs	r3, #1
 8009b1a:	b29a      	uxth	r2, r3
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009b20:	2300      	movs	r3, #0
 8009b22:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	689b      	ldr	r3, [r3, #8]
 8009b2a:	f003 0301 	and.w	r3, r3, #1
 8009b2e:	2b01      	cmp	r3, #1
 8009b30:	d119      	bne.n	8009b66 <HAL_SPI_TransmitReceive+0x2a6>
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b36:	b29b      	uxth	r3, r3
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d014      	beq.n	8009b66 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	68da      	ldr	r2, [r3, #12]
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b46:	b2d2      	uxtb	r2, r2
 8009b48:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b4e:	1c5a      	adds	r2, r3, #1
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	3b01      	subs	r3, #1
 8009b5c:	b29a      	uxth	r2, r3
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009b62:	2301      	movs	r3, #1
 8009b64:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009b66:	f7fc fa27 	bl	8005fb8 <HAL_GetTick>
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	6a3b      	ldr	r3, [r7, #32]
 8009b6e:	1ad3      	subs	r3, r2, r3
 8009b70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b72:	429a      	cmp	r2, r3
 8009b74:	d803      	bhi.n	8009b7e <HAL_SPI_TransmitReceive+0x2be>
 8009b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b7c:	d102      	bne.n	8009b84 <HAL_SPI_TransmitReceive+0x2c4>
 8009b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d109      	bne.n	8009b98 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2201      	movs	r2, #1
 8009b88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8009b94:	2303      	movs	r3, #3
 8009b96:	e038      	b.n	8009c0a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009b9c:	b29b      	uxth	r3, r3
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d19c      	bne.n	8009adc <HAL_SPI_TransmitReceive+0x21c>
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009ba6:	b29b      	uxth	r3, r3
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d197      	bne.n	8009adc <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009bac:	6a3a      	ldr	r2, [r7, #32]
 8009bae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009bb0:	68f8      	ldr	r0, [r7, #12]
 8009bb2:	f000 f909 	bl	8009dc8 <SPI_EndRxTxTransaction>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d008      	beq.n	8009bce <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	2220      	movs	r2, #32
 8009bc0:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8009bca:	2301      	movs	r3, #1
 8009bcc:	e01d      	b.n	8009c0a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	689b      	ldr	r3, [r3, #8]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d10a      	bne.n	8009bec <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	613b      	str	r3, [r7, #16]
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	68db      	ldr	r3, [r3, #12]
 8009be0:	613b      	str	r3, [r7, #16]
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	689b      	ldr	r3, [r3, #8]
 8009be8:	613b      	str	r3, [r7, #16]
 8009bea:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2201      	movs	r2, #1
 8009bf0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d001      	beq.n	8009c08 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8009c04:	2301      	movs	r3, #1
 8009c06:	e000      	b.n	8009c0a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8009c08:	2300      	movs	r3, #0
  }
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3728      	adds	r7, #40	@ 0x28
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}
	...

08009c14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b088      	sub	sp, #32
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	60f8      	str	r0, [r7, #12]
 8009c1c:	60b9      	str	r1, [r7, #8]
 8009c1e:	603b      	str	r3, [r7, #0]
 8009c20:	4613      	mov	r3, r2
 8009c22:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009c24:	f7fc f9c8 	bl	8005fb8 <HAL_GetTick>
 8009c28:	4602      	mov	r2, r0
 8009c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c2c:	1a9b      	subs	r3, r3, r2
 8009c2e:	683a      	ldr	r2, [r7, #0]
 8009c30:	4413      	add	r3, r2
 8009c32:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009c34:	f7fc f9c0 	bl	8005fb8 <HAL_GetTick>
 8009c38:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009c3a:	4b39      	ldr	r3, [pc, #228]	@ (8009d20 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	015b      	lsls	r3, r3, #5
 8009c40:	0d1b      	lsrs	r3, r3, #20
 8009c42:	69fa      	ldr	r2, [r7, #28]
 8009c44:	fb02 f303 	mul.w	r3, r2, r3
 8009c48:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009c4a:	e054      	b.n	8009cf6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c52:	d050      	beq.n	8009cf6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009c54:	f7fc f9b0 	bl	8005fb8 <HAL_GetTick>
 8009c58:	4602      	mov	r2, r0
 8009c5a:	69bb      	ldr	r3, [r7, #24]
 8009c5c:	1ad3      	subs	r3, r2, r3
 8009c5e:	69fa      	ldr	r2, [r7, #28]
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d902      	bls.n	8009c6a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009c64:	69fb      	ldr	r3, [r7, #28]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d13d      	bne.n	8009ce6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	685a      	ldr	r2, [r3, #4]
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009c78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	685b      	ldr	r3, [r3, #4]
 8009c7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009c82:	d111      	bne.n	8009ca8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	689b      	ldr	r3, [r3, #8]
 8009c88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c8c:	d004      	beq.n	8009c98 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	689b      	ldr	r3, [r3, #8]
 8009c92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c96:	d107      	bne.n	8009ca8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	681a      	ldr	r2, [r3, #0]
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009ca6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009cb0:	d10f      	bne.n	8009cd2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	681a      	ldr	r2, [r3, #0]
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009cc0:	601a      	str	r2, [r3, #0]
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	681a      	ldr	r2, [r3, #0]
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009cd0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8009ce2:	2303      	movs	r3, #3
 8009ce4:	e017      	b.n	8009d16 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d101      	bne.n	8009cf0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009cec:	2300      	movs	r3, #0
 8009cee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	3b01      	subs	r3, #1
 8009cf4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	689a      	ldr	r2, [r3, #8]
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	4013      	ands	r3, r2
 8009d00:	68ba      	ldr	r2, [r7, #8]
 8009d02:	429a      	cmp	r2, r3
 8009d04:	bf0c      	ite	eq
 8009d06:	2301      	moveq	r3, #1
 8009d08:	2300      	movne	r3, #0
 8009d0a:	b2db      	uxtb	r3, r3
 8009d0c:	461a      	mov	r2, r3
 8009d0e:	79fb      	ldrb	r3, [r7, #7]
 8009d10:	429a      	cmp	r2, r3
 8009d12:	d19b      	bne.n	8009c4c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009d14:	2300      	movs	r3, #0
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3720      	adds	r7, #32
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}
 8009d1e:	bf00      	nop
 8009d20:	20000060 	.word	0x20000060

08009d24 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b086      	sub	sp, #24
 8009d28:	af02      	add	r7, sp, #8
 8009d2a:	60f8      	str	r0, [r7, #12]
 8009d2c:	60b9      	str	r1, [r7, #8]
 8009d2e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009d38:	d111      	bne.n	8009d5e <SPI_EndRxTransaction+0x3a>
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	689b      	ldr	r3, [r3, #8]
 8009d3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d42:	d004      	beq.n	8009d4e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	689b      	ldr	r3, [r3, #8]
 8009d48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d4c:	d107      	bne.n	8009d5e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	681a      	ldr	r2, [r3, #0]
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009d5c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	685b      	ldr	r3, [r3, #4]
 8009d62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009d66:	d117      	bne.n	8009d98 <SPI_EndRxTransaction+0x74>
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	689b      	ldr	r3, [r3, #8]
 8009d6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d70:	d112      	bne.n	8009d98 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	9300      	str	r3, [sp, #0]
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	2101      	movs	r1, #1
 8009d7c:	68f8      	ldr	r0, [r7, #12]
 8009d7e:	f7ff ff49 	bl	8009c14 <SPI_WaitFlagStateUntilTimeout>
 8009d82:	4603      	mov	r3, r0
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d01a      	beq.n	8009dbe <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d8c:	f043 0220 	orr.w	r2, r3, #32
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009d94:	2303      	movs	r3, #3
 8009d96:	e013      	b.n	8009dc0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	9300      	str	r3, [sp, #0]
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	2180      	movs	r1, #128	@ 0x80
 8009da2:	68f8      	ldr	r0, [r7, #12]
 8009da4:	f7ff ff36 	bl	8009c14 <SPI_WaitFlagStateUntilTimeout>
 8009da8:	4603      	mov	r3, r0
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d007      	beq.n	8009dbe <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009db2:	f043 0220 	orr.w	r2, r3, #32
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009dba:	2303      	movs	r3, #3
 8009dbc:	e000      	b.n	8009dc0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8009dbe:	2300      	movs	r3, #0
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3710      	adds	r7, #16
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b086      	sub	sp, #24
 8009dcc:	af02      	add	r7, sp, #8
 8009dce:	60f8      	str	r0, [r7, #12]
 8009dd0:	60b9      	str	r1, [r7, #8]
 8009dd2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	9300      	str	r3, [sp, #0]
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	2201      	movs	r2, #1
 8009ddc:	2102      	movs	r1, #2
 8009dde:	68f8      	ldr	r0, [r7, #12]
 8009de0:	f7ff ff18 	bl	8009c14 <SPI_WaitFlagStateUntilTimeout>
 8009de4:	4603      	mov	r3, r0
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d007      	beq.n	8009dfa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009dee:	f043 0220 	orr.w	r2, r3, #32
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8009df6:	2303      	movs	r3, #3
 8009df8:	e013      	b.n	8009e22 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	9300      	str	r3, [sp, #0]
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	2200      	movs	r2, #0
 8009e02:	2180      	movs	r1, #128	@ 0x80
 8009e04:	68f8      	ldr	r0, [r7, #12]
 8009e06:	f7ff ff05 	bl	8009c14 <SPI_WaitFlagStateUntilTimeout>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d007      	beq.n	8009e20 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e14:	f043 0220 	orr.w	r2, r3, #32
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8009e1c:	2303      	movs	r3, #3
 8009e1e:	e000      	b.n	8009e22 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8009e20:	2300      	movs	r3, #0
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3710      	adds	r7, #16
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}

08009e2a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009e2a:	b580      	push	{r7, lr}
 8009e2c:	b082      	sub	sp, #8
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d101      	bne.n	8009e3c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009e38:	2301      	movs	r3, #1
 8009e3a:	e041      	b.n	8009ec0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e42:	b2db      	uxtb	r3, r3
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d106      	bne.n	8009e56 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f7fb fded 	bl	8005a30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2202      	movs	r2, #2
 8009e5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681a      	ldr	r2, [r3, #0]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	3304      	adds	r3, #4
 8009e66:	4619      	mov	r1, r3
 8009e68:	4610      	mov	r0, r2
 8009e6a:	f000 f93f 	bl	800a0ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2201      	movs	r2, #1
 8009e72:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2201      	movs	r2, #1
 8009e7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2201      	movs	r2, #1
 8009e82:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2201      	movs	r2, #1
 8009e8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2201      	movs	r2, #1
 8009e92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2201      	movs	r2, #1
 8009e9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2201      	movs	r2, #1
 8009eb2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2201      	movs	r2, #1
 8009eba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009ebe:	2300      	movs	r3, #0
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3708      	adds	r7, #8
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b085      	sub	sp, #20
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ed6:	b2db      	uxtb	r3, r3
 8009ed8:	2b01      	cmp	r3, #1
 8009eda:	d001      	beq.n	8009ee0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009edc:	2301      	movs	r3, #1
 8009ede:	e032      	b.n	8009f46 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2202      	movs	r2, #2
 8009ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	4a18      	ldr	r2, [pc, #96]	@ (8009f50 <HAL_TIM_Base_Start+0x88>)
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	d00e      	beq.n	8009f10 <HAL_TIM_Base_Start+0x48>
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009efa:	d009      	beq.n	8009f10 <HAL_TIM_Base_Start+0x48>
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	4a14      	ldr	r2, [pc, #80]	@ (8009f54 <HAL_TIM_Base_Start+0x8c>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d004      	beq.n	8009f10 <HAL_TIM_Base_Start+0x48>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	4a13      	ldr	r2, [pc, #76]	@ (8009f58 <HAL_TIM_Base_Start+0x90>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d111      	bne.n	8009f34 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	689b      	ldr	r3, [r3, #8]
 8009f16:	f003 0307 	and.w	r3, r3, #7
 8009f1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	2b06      	cmp	r3, #6
 8009f20:	d010      	beq.n	8009f44 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	681a      	ldr	r2, [r3, #0]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f042 0201 	orr.w	r2, r2, #1
 8009f30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f32:	e007      	b.n	8009f44 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	681a      	ldr	r2, [r3, #0]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f042 0201 	orr.w	r2, r2, #1
 8009f42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009f44:	2300      	movs	r3, #0
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	3714      	adds	r7, #20
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bc80      	pop	{r7}
 8009f4e:	4770      	bx	lr
 8009f50:	40012c00 	.word	0x40012c00
 8009f54:	40000400 	.word	0x40000400
 8009f58:	40000800 	.word	0x40000800

08009f5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b084      	sub	sp, #16
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009f66:	2300      	movs	r3, #0
 8009f68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009f70:	2b01      	cmp	r3, #1
 8009f72:	d101      	bne.n	8009f78 <HAL_TIM_ConfigClockSource+0x1c>
 8009f74:	2302      	movs	r3, #2
 8009f76:	e0b4      	b.n	800a0e2 <HAL_TIM_ConfigClockSource+0x186>
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2202      	movs	r2, #2
 8009f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	689b      	ldr	r3, [r3, #8]
 8009f8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009f96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009f9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	68ba      	ldr	r2, [r7, #8]
 8009fa6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009fb0:	d03e      	beq.n	800a030 <HAL_TIM_ConfigClockSource+0xd4>
 8009fb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009fb6:	f200 8087 	bhi.w	800a0c8 <HAL_TIM_ConfigClockSource+0x16c>
 8009fba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009fbe:	f000 8086 	beq.w	800a0ce <HAL_TIM_ConfigClockSource+0x172>
 8009fc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009fc6:	d87f      	bhi.n	800a0c8 <HAL_TIM_ConfigClockSource+0x16c>
 8009fc8:	2b70      	cmp	r3, #112	@ 0x70
 8009fca:	d01a      	beq.n	800a002 <HAL_TIM_ConfigClockSource+0xa6>
 8009fcc:	2b70      	cmp	r3, #112	@ 0x70
 8009fce:	d87b      	bhi.n	800a0c8 <HAL_TIM_ConfigClockSource+0x16c>
 8009fd0:	2b60      	cmp	r3, #96	@ 0x60
 8009fd2:	d050      	beq.n	800a076 <HAL_TIM_ConfigClockSource+0x11a>
 8009fd4:	2b60      	cmp	r3, #96	@ 0x60
 8009fd6:	d877      	bhi.n	800a0c8 <HAL_TIM_ConfigClockSource+0x16c>
 8009fd8:	2b50      	cmp	r3, #80	@ 0x50
 8009fda:	d03c      	beq.n	800a056 <HAL_TIM_ConfigClockSource+0xfa>
 8009fdc:	2b50      	cmp	r3, #80	@ 0x50
 8009fde:	d873      	bhi.n	800a0c8 <HAL_TIM_ConfigClockSource+0x16c>
 8009fe0:	2b40      	cmp	r3, #64	@ 0x40
 8009fe2:	d058      	beq.n	800a096 <HAL_TIM_ConfigClockSource+0x13a>
 8009fe4:	2b40      	cmp	r3, #64	@ 0x40
 8009fe6:	d86f      	bhi.n	800a0c8 <HAL_TIM_ConfigClockSource+0x16c>
 8009fe8:	2b30      	cmp	r3, #48	@ 0x30
 8009fea:	d064      	beq.n	800a0b6 <HAL_TIM_ConfigClockSource+0x15a>
 8009fec:	2b30      	cmp	r3, #48	@ 0x30
 8009fee:	d86b      	bhi.n	800a0c8 <HAL_TIM_ConfigClockSource+0x16c>
 8009ff0:	2b20      	cmp	r3, #32
 8009ff2:	d060      	beq.n	800a0b6 <HAL_TIM_ConfigClockSource+0x15a>
 8009ff4:	2b20      	cmp	r3, #32
 8009ff6:	d867      	bhi.n	800a0c8 <HAL_TIM_ConfigClockSource+0x16c>
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d05c      	beq.n	800a0b6 <HAL_TIM_ConfigClockSource+0x15a>
 8009ffc:	2b10      	cmp	r3, #16
 8009ffe:	d05a      	beq.n	800a0b6 <HAL_TIM_ConfigClockSource+0x15a>
 800a000:	e062      	b.n	800a0c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a012:	f000 f950 	bl	800a2b6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	689b      	ldr	r3, [r3, #8]
 800a01c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a024:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	68ba      	ldr	r2, [r7, #8]
 800a02c:	609a      	str	r2, [r3, #8]
      break;
 800a02e:	e04f      	b.n	800a0d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a040:	f000 f939 	bl	800a2b6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	689a      	ldr	r2, [r3, #8]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a052:	609a      	str	r2, [r3, #8]
      break;
 800a054:	e03c      	b.n	800a0d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a062:	461a      	mov	r2, r3
 800a064:	f000 f8b0 	bl	800a1c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	2150      	movs	r1, #80	@ 0x50
 800a06e:	4618      	mov	r0, r3
 800a070:	f000 f907 	bl	800a282 <TIM_ITRx_SetConfig>
      break;
 800a074:	e02c      	b.n	800a0d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a082:	461a      	mov	r2, r3
 800a084:	f000 f8ce 	bl	800a224 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	2160      	movs	r1, #96	@ 0x60
 800a08e:	4618      	mov	r0, r3
 800a090:	f000 f8f7 	bl	800a282 <TIM_ITRx_SetConfig>
      break;
 800a094:	e01c      	b.n	800a0d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	f000 f890 	bl	800a1c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	2140      	movs	r1, #64	@ 0x40
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f000 f8e7 	bl	800a282 <TIM_ITRx_SetConfig>
      break;
 800a0b4:	e00c      	b.n	800a0d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681a      	ldr	r2, [r3, #0]
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	4619      	mov	r1, r3
 800a0c0:	4610      	mov	r0, r2
 800a0c2:	f000 f8de 	bl	800a282 <TIM_ITRx_SetConfig>
      break;
 800a0c6:	e003      	b.n	800a0d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	73fb      	strb	r3, [r7, #15]
      break;
 800a0cc:	e000      	b.n	800a0d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a0ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a0e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3710      	adds	r7, #16
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}
	...

0800a0ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b085      	sub	sp, #20
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	4a2f      	ldr	r2, [pc, #188]	@ (800a1bc <TIM_Base_SetConfig+0xd0>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d00b      	beq.n	800a11c <TIM_Base_SetConfig+0x30>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a10a:	d007      	beq.n	800a11c <TIM_Base_SetConfig+0x30>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	4a2c      	ldr	r2, [pc, #176]	@ (800a1c0 <TIM_Base_SetConfig+0xd4>)
 800a110:	4293      	cmp	r3, r2
 800a112:	d003      	beq.n	800a11c <TIM_Base_SetConfig+0x30>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	4a2b      	ldr	r2, [pc, #172]	@ (800a1c4 <TIM_Base_SetConfig+0xd8>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d108      	bne.n	800a12e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a122:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	685b      	ldr	r3, [r3, #4]
 800a128:	68fa      	ldr	r2, [r7, #12]
 800a12a:	4313      	orrs	r3, r2
 800a12c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	4a22      	ldr	r2, [pc, #136]	@ (800a1bc <TIM_Base_SetConfig+0xd0>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d00b      	beq.n	800a14e <TIM_Base_SetConfig+0x62>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a13c:	d007      	beq.n	800a14e <TIM_Base_SetConfig+0x62>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	4a1f      	ldr	r2, [pc, #124]	@ (800a1c0 <TIM_Base_SetConfig+0xd4>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d003      	beq.n	800a14e <TIM_Base_SetConfig+0x62>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	4a1e      	ldr	r2, [pc, #120]	@ (800a1c4 <TIM_Base_SetConfig+0xd8>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d108      	bne.n	800a160 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a154:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	68db      	ldr	r3, [r3, #12]
 800a15a:	68fa      	ldr	r2, [r7, #12]
 800a15c:	4313      	orrs	r3, r2
 800a15e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	695b      	ldr	r3, [r3, #20]
 800a16a:	4313      	orrs	r3, r2
 800a16c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	68fa      	ldr	r2, [r7, #12]
 800a172:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	689a      	ldr	r2, [r3, #8]
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	681a      	ldr	r2, [r3, #0]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	4a0d      	ldr	r2, [pc, #52]	@ (800a1bc <TIM_Base_SetConfig+0xd0>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d103      	bne.n	800a194 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	691a      	ldr	r2, [r3, #16]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2201      	movs	r2, #1
 800a198:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	691b      	ldr	r3, [r3, #16]
 800a19e:	f003 0301 	and.w	r3, r3, #1
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d005      	beq.n	800a1b2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	691b      	ldr	r3, [r3, #16]
 800a1aa:	f023 0201 	bic.w	r2, r3, #1
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	611a      	str	r2, [r3, #16]
  }
}
 800a1b2:	bf00      	nop
 800a1b4:	3714      	adds	r7, #20
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bc80      	pop	{r7}
 800a1ba:	4770      	bx	lr
 800a1bc:	40012c00 	.word	0x40012c00
 800a1c0:	40000400 	.word	0x40000400
 800a1c4:	40000800 	.word	0x40000800

0800a1c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b087      	sub	sp, #28
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	60f8      	str	r0, [r7, #12]
 800a1d0:	60b9      	str	r1, [r7, #8]
 800a1d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	6a1b      	ldr	r3, [r3, #32]
 800a1d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	6a1b      	ldr	r3, [r3, #32]
 800a1de:	f023 0201 	bic.w	r2, r3, #1
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	699b      	ldr	r3, [r3, #24]
 800a1ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a1f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	011b      	lsls	r3, r3, #4
 800a1f8:	693a      	ldr	r2, [r7, #16]
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	f023 030a 	bic.w	r3, r3, #10
 800a204:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a206:	697a      	ldr	r2, [r7, #20]
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	4313      	orrs	r3, r2
 800a20c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	693a      	ldr	r2, [r7, #16]
 800a212:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	697a      	ldr	r2, [r7, #20]
 800a218:	621a      	str	r2, [r3, #32]
}
 800a21a:	bf00      	nop
 800a21c:	371c      	adds	r7, #28
 800a21e:	46bd      	mov	sp, r7
 800a220:	bc80      	pop	{r7}
 800a222:	4770      	bx	lr

0800a224 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a224:	b480      	push	{r7}
 800a226:	b087      	sub	sp, #28
 800a228:	af00      	add	r7, sp, #0
 800a22a:	60f8      	str	r0, [r7, #12]
 800a22c:	60b9      	str	r1, [r7, #8]
 800a22e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	6a1b      	ldr	r3, [r3, #32]
 800a234:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	6a1b      	ldr	r3, [r3, #32]
 800a23a:	f023 0210 	bic.w	r2, r3, #16
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	699b      	ldr	r3, [r3, #24]
 800a246:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a24e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	031b      	lsls	r3, r3, #12
 800a254:	693a      	ldr	r2, [r7, #16]
 800a256:	4313      	orrs	r3, r2
 800a258:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a260:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	011b      	lsls	r3, r3, #4
 800a266:	697a      	ldr	r2, [r7, #20]
 800a268:	4313      	orrs	r3, r2
 800a26a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	693a      	ldr	r2, [r7, #16]
 800a270:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	697a      	ldr	r2, [r7, #20]
 800a276:	621a      	str	r2, [r3, #32]
}
 800a278:	bf00      	nop
 800a27a:	371c      	adds	r7, #28
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bc80      	pop	{r7}
 800a280:	4770      	bx	lr

0800a282 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a282:	b480      	push	{r7}
 800a284:	b085      	sub	sp, #20
 800a286:	af00      	add	r7, sp, #0
 800a288:	6078      	str	r0, [r7, #4]
 800a28a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	689b      	ldr	r3, [r3, #8]
 800a290:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a298:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a29a:	683a      	ldr	r2, [r7, #0]
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	4313      	orrs	r3, r2
 800a2a0:	f043 0307 	orr.w	r3, r3, #7
 800a2a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	68fa      	ldr	r2, [r7, #12]
 800a2aa:	609a      	str	r2, [r3, #8]
}
 800a2ac:	bf00      	nop
 800a2ae:	3714      	adds	r7, #20
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bc80      	pop	{r7}
 800a2b4:	4770      	bx	lr

0800a2b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a2b6:	b480      	push	{r7}
 800a2b8:	b087      	sub	sp, #28
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	60f8      	str	r0, [r7, #12]
 800a2be:	60b9      	str	r1, [r7, #8]
 800a2c0:	607a      	str	r2, [r7, #4]
 800a2c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	689b      	ldr	r3, [r3, #8]
 800a2c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a2d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	021a      	lsls	r2, r3, #8
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	431a      	orrs	r2, r3
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	4313      	orrs	r3, r2
 800a2de:	697a      	ldr	r2, [r7, #20]
 800a2e0:	4313      	orrs	r3, r2
 800a2e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	697a      	ldr	r2, [r7, #20]
 800a2e8:	609a      	str	r2, [r3, #8]
}
 800a2ea:	bf00      	nop
 800a2ec:	371c      	adds	r7, #28
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bc80      	pop	{r7}
 800a2f2:	4770      	bx	lr

0800a2f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b085      	sub	sp, #20
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a304:	2b01      	cmp	r3, #1
 800a306:	d101      	bne.n	800a30c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a308:	2302      	movs	r3, #2
 800a30a:	e046      	b.n	800a39a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2201      	movs	r2, #1
 800a310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2202      	movs	r2, #2
 800a318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	685b      	ldr	r3, [r3, #4]
 800a322:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	689b      	ldr	r3, [r3, #8]
 800a32a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a332:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	68fa      	ldr	r2, [r7, #12]
 800a33a:	4313      	orrs	r3, r2
 800a33c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	68fa      	ldr	r2, [r7, #12]
 800a344:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	4a16      	ldr	r2, [pc, #88]	@ (800a3a4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800a34c:	4293      	cmp	r3, r2
 800a34e:	d00e      	beq.n	800a36e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a358:	d009      	beq.n	800a36e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	4a12      	ldr	r2, [pc, #72]	@ (800a3a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800a360:	4293      	cmp	r3, r2
 800a362:	d004      	beq.n	800a36e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4a10      	ldr	r2, [pc, #64]	@ (800a3ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d10c      	bne.n	800a388 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a374:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	68ba      	ldr	r2, [r7, #8]
 800a37c:	4313      	orrs	r3, r2
 800a37e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	68ba      	ldr	r2, [r7, #8]
 800a386:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2201      	movs	r2, #1
 800a38c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2200      	movs	r2, #0
 800a394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a398:	2300      	movs	r3, #0
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3714      	adds	r7, #20
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bc80      	pop	{r7}
 800a3a2:	4770      	bx	lr
 800a3a4:	40012c00 	.word	0x40012c00
 800a3a8:	40000400 	.word	0x40000400
 800a3ac:	40000800 	.word	0x40000800

0800a3b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b082      	sub	sp, #8
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d101      	bne.n	800a3c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a3be:	2301      	movs	r3, #1
 800a3c0:	e042      	b.n	800a448 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a3c8:	b2db      	uxtb	r3, r3
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d106      	bne.n	800a3dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f7fb fb48 	bl	8005a6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2224      	movs	r2, #36	@ 0x24
 800a3e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	68da      	ldr	r2, [r3, #12]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a3f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f000 f9cf 	bl	800a798 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	691a      	ldr	r2, [r3, #16]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a408:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	695a      	ldr	r2, [r3, #20]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a418:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	68da      	ldr	r2, [r3, #12]
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a428:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2200      	movs	r2, #0
 800a42e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2220      	movs	r2, #32
 800a434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2220      	movs	r2, #32
 800a43c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2200      	movs	r2, #0
 800a444:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a446:	2300      	movs	r3, #0
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3708      	adds	r7, #8
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}

0800a450 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b08a      	sub	sp, #40	@ 0x28
 800a454:	af02      	add	r7, sp, #8
 800a456:	60f8      	str	r0, [r7, #12]
 800a458:	60b9      	str	r1, [r7, #8]
 800a45a:	603b      	str	r3, [r7, #0]
 800a45c:	4613      	mov	r3, r2
 800a45e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a460:	2300      	movs	r3, #0
 800a462:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a46a:	b2db      	uxtb	r3, r3
 800a46c:	2b20      	cmp	r3, #32
 800a46e:	d175      	bne.n	800a55c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d002      	beq.n	800a47c <HAL_UART_Transmit+0x2c>
 800a476:	88fb      	ldrh	r3, [r7, #6]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d101      	bne.n	800a480 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a47c:	2301      	movs	r3, #1
 800a47e:	e06e      	b.n	800a55e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2200      	movs	r2, #0
 800a484:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	2221      	movs	r2, #33	@ 0x21
 800a48a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a48e:	f7fb fd93 	bl	8005fb8 <HAL_GetTick>
 800a492:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	88fa      	ldrh	r2, [r7, #6]
 800a498:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	88fa      	ldrh	r2, [r7, #6]
 800a49e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	689b      	ldr	r3, [r3, #8]
 800a4a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a4a8:	d108      	bne.n	800a4bc <HAL_UART_Transmit+0x6c>
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	691b      	ldr	r3, [r3, #16]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d104      	bne.n	800a4bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	61bb      	str	r3, [r7, #24]
 800a4ba:	e003      	b.n	800a4c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a4c4:	e02e      	b.n	800a524 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	9300      	str	r3, [sp, #0]
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	2180      	movs	r1, #128	@ 0x80
 800a4d0:	68f8      	ldr	r0, [r7, #12]
 800a4d2:	f000 f86d 	bl	800a5b0 <UART_WaitOnFlagUntilTimeout>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d005      	beq.n	800a4e8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	2220      	movs	r2, #32
 800a4e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800a4e4:	2303      	movs	r3, #3
 800a4e6:	e03a      	b.n	800a55e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800a4e8:	69fb      	ldr	r3, [r7, #28]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d10b      	bne.n	800a506 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a4ee:	69bb      	ldr	r3, [r7, #24]
 800a4f0:	881b      	ldrh	r3, [r3, #0]
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a4fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a4fe:	69bb      	ldr	r3, [r7, #24]
 800a500:	3302      	adds	r3, #2
 800a502:	61bb      	str	r3, [r7, #24]
 800a504:	e007      	b.n	800a516 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a506:	69fb      	ldr	r3, [r7, #28]
 800a508:	781a      	ldrb	r2, [r3, #0]
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a510:	69fb      	ldr	r3, [r7, #28]
 800a512:	3301      	adds	r3, #1
 800a514:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a51a:	b29b      	uxth	r3, r3
 800a51c:	3b01      	subs	r3, #1
 800a51e:	b29a      	uxth	r2, r3
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a528:	b29b      	uxth	r3, r3
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d1cb      	bne.n	800a4c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	9300      	str	r3, [sp, #0]
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	2200      	movs	r2, #0
 800a536:	2140      	movs	r1, #64	@ 0x40
 800a538:	68f8      	ldr	r0, [r7, #12]
 800a53a:	f000 f839 	bl	800a5b0 <UART_WaitOnFlagUntilTimeout>
 800a53e:	4603      	mov	r3, r0
 800a540:	2b00      	cmp	r3, #0
 800a542:	d005      	beq.n	800a550 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2220      	movs	r2, #32
 800a548:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800a54c:	2303      	movs	r3, #3
 800a54e:	e006      	b.n	800a55e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	2220      	movs	r2, #32
 800a554:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800a558:	2300      	movs	r3, #0
 800a55a:	e000      	b.n	800a55e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800a55c:	2302      	movs	r3, #2
  }
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3720      	adds	r7, #32
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}

0800a566 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a566:	b580      	push	{r7, lr}
 800a568:	b084      	sub	sp, #16
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	60f8      	str	r0, [r7, #12]
 800a56e:	60b9      	str	r1, [r7, #8]
 800a570:	4613      	mov	r3, r2
 800a572:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a57a:	b2db      	uxtb	r3, r3
 800a57c:	2b20      	cmp	r3, #32
 800a57e:	d112      	bne.n	800a5a6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d002      	beq.n	800a58c <HAL_UART_Receive_IT+0x26>
 800a586:	88fb      	ldrh	r3, [r7, #6]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d101      	bne.n	800a590 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a58c:	2301      	movs	r3, #1
 800a58e:	e00b      	b.n	800a5a8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	2200      	movs	r2, #0
 800a594:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a596:	88fb      	ldrh	r3, [r7, #6]
 800a598:	461a      	mov	r2, r3
 800a59a:	68b9      	ldr	r1, [r7, #8]
 800a59c:	68f8      	ldr	r0, [r7, #12]
 800a59e:	f000 f860 	bl	800a662 <UART_Start_Receive_IT>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	e000      	b.n	800a5a8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800a5a6:	2302      	movs	r3, #2
  }
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3710      	adds	r7, #16
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}

0800a5b0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b086      	sub	sp, #24
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	60f8      	str	r0, [r7, #12]
 800a5b8:	60b9      	str	r1, [r7, #8]
 800a5ba:	603b      	str	r3, [r7, #0]
 800a5bc:	4613      	mov	r3, r2
 800a5be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a5c0:	e03b      	b.n	800a63a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5c2:	6a3b      	ldr	r3, [r7, #32]
 800a5c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5c8:	d037      	beq.n	800a63a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5ca:	f7fb fcf5 	bl	8005fb8 <HAL_GetTick>
 800a5ce:	4602      	mov	r2, r0
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	1ad3      	subs	r3, r2, r3
 800a5d4:	6a3a      	ldr	r2, [r7, #32]
 800a5d6:	429a      	cmp	r2, r3
 800a5d8:	d302      	bcc.n	800a5e0 <UART_WaitOnFlagUntilTimeout+0x30>
 800a5da:	6a3b      	ldr	r3, [r7, #32]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d101      	bne.n	800a5e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a5e0:	2303      	movs	r3, #3
 800a5e2:	e03a      	b.n	800a65a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	68db      	ldr	r3, [r3, #12]
 800a5ea:	f003 0304 	and.w	r3, r3, #4
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d023      	beq.n	800a63a <UART_WaitOnFlagUntilTimeout+0x8a>
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	2b80      	cmp	r3, #128	@ 0x80
 800a5f6:	d020      	beq.n	800a63a <UART_WaitOnFlagUntilTimeout+0x8a>
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	2b40      	cmp	r3, #64	@ 0x40
 800a5fc:	d01d      	beq.n	800a63a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f003 0308 	and.w	r3, r3, #8
 800a608:	2b08      	cmp	r3, #8
 800a60a:	d116      	bne.n	800a63a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800a60c:	2300      	movs	r3, #0
 800a60e:	617b      	str	r3, [r7, #20]
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	617b      	str	r3, [r7, #20]
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	685b      	ldr	r3, [r3, #4]
 800a61e:	617b      	str	r3, [r7, #20]
 800a620:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a622:	68f8      	ldr	r0, [r7, #12]
 800a624:	f000 f856 	bl	800a6d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	2208      	movs	r2, #8
 800a62c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2200      	movs	r2, #0
 800a632:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a636:	2301      	movs	r3, #1
 800a638:	e00f      	b.n	800a65a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	681a      	ldr	r2, [r3, #0]
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	4013      	ands	r3, r2
 800a644:	68ba      	ldr	r2, [r7, #8]
 800a646:	429a      	cmp	r2, r3
 800a648:	bf0c      	ite	eq
 800a64a:	2301      	moveq	r3, #1
 800a64c:	2300      	movne	r3, #0
 800a64e:	b2db      	uxtb	r3, r3
 800a650:	461a      	mov	r2, r3
 800a652:	79fb      	ldrb	r3, [r7, #7]
 800a654:	429a      	cmp	r2, r3
 800a656:	d0b4      	beq.n	800a5c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a658:	2300      	movs	r3, #0
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3718      	adds	r7, #24
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}

0800a662 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a662:	b480      	push	{r7}
 800a664:	b085      	sub	sp, #20
 800a666:	af00      	add	r7, sp, #0
 800a668:	60f8      	str	r0, [r7, #12]
 800a66a:	60b9      	str	r1, [r7, #8]
 800a66c:	4613      	mov	r3, r2
 800a66e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	68ba      	ldr	r2, [r7, #8]
 800a674:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	88fa      	ldrh	r2, [r7, #6]
 800a67a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	88fa      	ldrh	r2, [r7, #6]
 800a680:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	2200      	movs	r2, #0
 800a686:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2222      	movs	r2, #34	@ 0x22
 800a68c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	691b      	ldr	r3, [r3, #16]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d007      	beq.n	800a6a8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	68da      	ldr	r2, [r3, #12]
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a6a6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	695a      	ldr	r2, [r3, #20]
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f042 0201 	orr.w	r2, r2, #1
 800a6b6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	68da      	ldr	r2, [r3, #12]
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f042 0220 	orr.w	r2, r2, #32
 800a6c6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a6c8:	2300      	movs	r3, #0
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3714      	adds	r7, #20
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bc80      	pop	{r7}
 800a6d2:	4770      	bx	lr

0800a6d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b095      	sub	sp, #84	@ 0x54
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	330c      	adds	r3, #12
 800a6e2:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6e6:	e853 3f00 	ldrex	r3, [r3]
 800a6ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a6ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a6f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	330c      	adds	r3, #12
 800a6fa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a6fc:	643a      	str	r2, [r7, #64]	@ 0x40
 800a6fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a700:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a702:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a704:	e841 2300 	strex	r3, r2, [r1]
 800a708:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a70a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d1e5      	bne.n	800a6dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	3314      	adds	r3, #20
 800a716:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a718:	6a3b      	ldr	r3, [r7, #32]
 800a71a:	e853 3f00 	ldrex	r3, [r3]
 800a71e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a720:	69fb      	ldr	r3, [r7, #28]
 800a722:	f023 0301 	bic.w	r3, r3, #1
 800a726:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	3314      	adds	r3, #20
 800a72e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a730:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a732:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a734:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a736:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a738:	e841 2300 	strex	r3, r2, [r1]
 800a73c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a73e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a740:	2b00      	cmp	r3, #0
 800a742:	d1e5      	bne.n	800a710 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a748:	2b01      	cmp	r3, #1
 800a74a:	d119      	bne.n	800a780 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	330c      	adds	r3, #12
 800a752:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	e853 3f00 	ldrex	r3, [r3]
 800a75a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	f023 0310 	bic.w	r3, r3, #16
 800a762:	647b      	str	r3, [r7, #68]	@ 0x44
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	330c      	adds	r3, #12
 800a76a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a76c:	61ba      	str	r2, [r7, #24]
 800a76e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a770:	6979      	ldr	r1, [r7, #20]
 800a772:	69ba      	ldr	r2, [r7, #24]
 800a774:	e841 2300 	strex	r3, r2, [r1]
 800a778:	613b      	str	r3, [r7, #16]
   return(result);
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d1e5      	bne.n	800a74c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2220      	movs	r2, #32
 800a784:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2200      	movs	r2, #0
 800a78c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a78e:	bf00      	nop
 800a790:	3754      	adds	r7, #84	@ 0x54
 800a792:	46bd      	mov	sp, r7
 800a794:	bc80      	pop	{r7}
 800a796:	4770      	bx	lr

0800a798 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b084      	sub	sp, #16
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	691b      	ldr	r3, [r3, #16]
 800a7a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	68da      	ldr	r2, [r3, #12]
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	430a      	orrs	r2, r1
 800a7b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	689a      	ldr	r2, [r3, #8]
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	691b      	ldr	r3, [r3, #16]
 800a7be:	431a      	orrs	r2, r3
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	695b      	ldr	r3, [r3, #20]
 800a7c4:	4313      	orrs	r3, r2
 800a7c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	68db      	ldr	r3, [r3, #12]
 800a7ce:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800a7d2:	f023 030c 	bic.w	r3, r3, #12
 800a7d6:	687a      	ldr	r2, [r7, #4]
 800a7d8:	6812      	ldr	r2, [r2, #0]
 800a7da:	68b9      	ldr	r1, [r7, #8]
 800a7dc:	430b      	orrs	r3, r1
 800a7de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	695b      	ldr	r3, [r3, #20]
 800a7e6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	699a      	ldr	r2, [r3, #24]
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	430a      	orrs	r2, r1
 800a7f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	4a2c      	ldr	r2, [pc, #176]	@ (800a8ac <UART_SetConfig+0x114>)
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	d103      	bne.n	800a808 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a800:	f7fe fbac 	bl	8008f5c <HAL_RCC_GetPCLK2Freq>
 800a804:	60f8      	str	r0, [r7, #12]
 800a806:	e002      	b.n	800a80e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a808:	f7fe fb94 	bl	8008f34 <HAL_RCC_GetPCLK1Freq>
 800a80c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a80e:	68fa      	ldr	r2, [r7, #12]
 800a810:	4613      	mov	r3, r2
 800a812:	009b      	lsls	r3, r3, #2
 800a814:	4413      	add	r3, r2
 800a816:	009a      	lsls	r2, r3, #2
 800a818:	441a      	add	r2, r3
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	685b      	ldr	r3, [r3, #4]
 800a81e:	009b      	lsls	r3, r3, #2
 800a820:	fbb2 f3f3 	udiv	r3, r2, r3
 800a824:	4a22      	ldr	r2, [pc, #136]	@ (800a8b0 <UART_SetConfig+0x118>)
 800a826:	fba2 2303 	umull	r2, r3, r2, r3
 800a82a:	095b      	lsrs	r3, r3, #5
 800a82c:	0119      	lsls	r1, r3, #4
 800a82e:	68fa      	ldr	r2, [r7, #12]
 800a830:	4613      	mov	r3, r2
 800a832:	009b      	lsls	r3, r3, #2
 800a834:	4413      	add	r3, r2
 800a836:	009a      	lsls	r2, r3, #2
 800a838:	441a      	add	r2, r3
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	685b      	ldr	r3, [r3, #4]
 800a83e:	009b      	lsls	r3, r3, #2
 800a840:	fbb2 f2f3 	udiv	r2, r2, r3
 800a844:	4b1a      	ldr	r3, [pc, #104]	@ (800a8b0 <UART_SetConfig+0x118>)
 800a846:	fba3 0302 	umull	r0, r3, r3, r2
 800a84a:	095b      	lsrs	r3, r3, #5
 800a84c:	2064      	movs	r0, #100	@ 0x64
 800a84e:	fb00 f303 	mul.w	r3, r0, r3
 800a852:	1ad3      	subs	r3, r2, r3
 800a854:	011b      	lsls	r3, r3, #4
 800a856:	3332      	adds	r3, #50	@ 0x32
 800a858:	4a15      	ldr	r2, [pc, #84]	@ (800a8b0 <UART_SetConfig+0x118>)
 800a85a:	fba2 2303 	umull	r2, r3, r2, r3
 800a85e:	095b      	lsrs	r3, r3, #5
 800a860:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a864:	4419      	add	r1, r3
 800a866:	68fa      	ldr	r2, [r7, #12]
 800a868:	4613      	mov	r3, r2
 800a86a:	009b      	lsls	r3, r3, #2
 800a86c:	4413      	add	r3, r2
 800a86e:	009a      	lsls	r2, r3, #2
 800a870:	441a      	add	r2, r3
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	685b      	ldr	r3, [r3, #4]
 800a876:	009b      	lsls	r3, r3, #2
 800a878:	fbb2 f2f3 	udiv	r2, r2, r3
 800a87c:	4b0c      	ldr	r3, [pc, #48]	@ (800a8b0 <UART_SetConfig+0x118>)
 800a87e:	fba3 0302 	umull	r0, r3, r3, r2
 800a882:	095b      	lsrs	r3, r3, #5
 800a884:	2064      	movs	r0, #100	@ 0x64
 800a886:	fb00 f303 	mul.w	r3, r0, r3
 800a88a:	1ad3      	subs	r3, r2, r3
 800a88c:	011b      	lsls	r3, r3, #4
 800a88e:	3332      	adds	r3, #50	@ 0x32
 800a890:	4a07      	ldr	r2, [pc, #28]	@ (800a8b0 <UART_SetConfig+0x118>)
 800a892:	fba2 2303 	umull	r2, r3, r2, r3
 800a896:	095b      	lsrs	r3, r3, #5
 800a898:	f003 020f 	and.w	r2, r3, #15
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	440a      	add	r2, r1
 800a8a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800a8a4:	bf00      	nop
 800a8a6:	3710      	adds	r7, #16
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}
 800a8ac:	40013800 	.word	0x40013800
 800a8b0:	51eb851f 	.word	0x51eb851f

0800a8b4 <__cvt>:
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8ba:	461d      	mov	r5, r3
 800a8bc:	bfbb      	ittet	lt
 800a8be:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800a8c2:	461d      	movlt	r5, r3
 800a8c4:	2300      	movge	r3, #0
 800a8c6:	232d      	movlt	r3, #45	@ 0x2d
 800a8c8:	b088      	sub	sp, #32
 800a8ca:	4614      	mov	r4, r2
 800a8cc:	bfb8      	it	lt
 800a8ce:	4614      	movlt	r4, r2
 800a8d0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a8d2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800a8d4:	7013      	strb	r3, [r2, #0]
 800a8d6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a8d8:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800a8dc:	f023 0820 	bic.w	r8, r3, #32
 800a8e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a8e4:	d005      	beq.n	800a8f2 <__cvt+0x3e>
 800a8e6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a8ea:	d100      	bne.n	800a8ee <__cvt+0x3a>
 800a8ec:	3601      	adds	r6, #1
 800a8ee:	2302      	movs	r3, #2
 800a8f0:	e000      	b.n	800a8f4 <__cvt+0x40>
 800a8f2:	2303      	movs	r3, #3
 800a8f4:	aa07      	add	r2, sp, #28
 800a8f6:	9204      	str	r2, [sp, #16]
 800a8f8:	aa06      	add	r2, sp, #24
 800a8fa:	e9cd a202 	strd	sl, r2, [sp, #8]
 800a8fe:	e9cd 3600 	strd	r3, r6, [sp]
 800a902:	4622      	mov	r2, r4
 800a904:	462b      	mov	r3, r5
 800a906:	f000 ffab 	bl	800b860 <_dtoa_r>
 800a90a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a90e:	4607      	mov	r7, r0
 800a910:	d119      	bne.n	800a946 <__cvt+0x92>
 800a912:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a914:	07db      	lsls	r3, r3, #31
 800a916:	d50e      	bpl.n	800a936 <__cvt+0x82>
 800a918:	eb00 0906 	add.w	r9, r0, r6
 800a91c:	2200      	movs	r2, #0
 800a91e:	2300      	movs	r3, #0
 800a920:	4620      	mov	r0, r4
 800a922:	4629      	mov	r1, r5
 800a924:	f7f6 f84a 	bl	80009bc <__aeabi_dcmpeq>
 800a928:	b108      	cbz	r0, 800a92e <__cvt+0x7a>
 800a92a:	f8cd 901c 	str.w	r9, [sp, #28]
 800a92e:	2230      	movs	r2, #48	@ 0x30
 800a930:	9b07      	ldr	r3, [sp, #28]
 800a932:	454b      	cmp	r3, r9
 800a934:	d31e      	bcc.n	800a974 <__cvt+0xc0>
 800a936:	4638      	mov	r0, r7
 800a938:	9b07      	ldr	r3, [sp, #28]
 800a93a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800a93c:	1bdb      	subs	r3, r3, r7
 800a93e:	6013      	str	r3, [r2, #0]
 800a940:	b008      	add	sp, #32
 800a942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a946:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a94a:	eb00 0906 	add.w	r9, r0, r6
 800a94e:	d1e5      	bne.n	800a91c <__cvt+0x68>
 800a950:	7803      	ldrb	r3, [r0, #0]
 800a952:	2b30      	cmp	r3, #48	@ 0x30
 800a954:	d10a      	bne.n	800a96c <__cvt+0xb8>
 800a956:	2200      	movs	r2, #0
 800a958:	2300      	movs	r3, #0
 800a95a:	4620      	mov	r0, r4
 800a95c:	4629      	mov	r1, r5
 800a95e:	f7f6 f82d 	bl	80009bc <__aeabi_dcmpeq>
 800a962:	b918      	cbnz	r0, 800a96c <__cvt+0xb8>
 800a964:	f1c6 0601 	rsb	r6, r6, #1
 800a968:	f8ca 6000 	str.w	r6, [sl]
 800a96c:	f8da 3000 	ldr.w	r3, [sl]
 800a970:	4499      	add	r9, r3
 800a972:	e7d3      	b.n	800a91c <__cvt+0x68>
 800a974:	1c59      	adds	r1, r3, #1
 800a976:	9107      	str	r1, [sp, #28]
 800a978:	701a      	strb	r2, [r3, #0]
 800a97a:	e7d9      	b.n	800a930 <__cvt+0x7c>

0800a97c <__exponent>:
 800a97c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a97e:	2900      	cmp	r1, #0
 800a980:	bfb6      	itet	lt
 800a982:	232d      	movlt	r3, #45	@ 0x2d
 800a984:	232b      	movge	r3, #43	@ 0x2b
 800a986:	4249      	neglt	r1, r1
 800a988:	2909      	cmp	r1, #9
 800a98a:	7002      	strb	r2, [r0, #0]
 800a98c:	7043      	strb	r3, [r0, #1]
 800a98e:	dd29      	ble.n	800a9e4 <__exponent+0x68>
 800a990:	f10d 0307 	add.w	r3, sp, #7
 800a994:	461d      	mov	r5, r3
 800a996:	270a      	movs	r7, #10
 800a998:	fbb1 f6f7 	udiv	r6, r1, r7
 800a99c:	461a      	mov	r2, r3
 800a99e:	fb07 1416 	mls	r4, r7, r6, r1
 800a9a2:	3430      	adds	r4, #48	@ 0x30
 800a9a4:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a9a8:	460c      	mov	r4, r1
 800a9aa:	2c63      	cmp	r4, #99	@ 0x63
 800a9ac:	4631      	mov	r1, r6
 800a9ae:	f103 33ff 	add.w	r3, r3, #4294967295
 800a9b2:	dcf1      	bgt.n	800a998 <__exponent+0x1c>
 800a9b4:	3130      	adds	r1, #48	@ 0x30
 800a9b6:	1e94      	subs	r4, r2, #2
 800a9b8:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a9bc:	4623      	mov	r3, r4
 800a9be:	1c41      	adds	r1, r0, #1
 800a9c0:	42ab      	cmp	r3, r5
 800a9c2:	d30a      	bcc.n	800a9da <__exponent+0x5e>
 800a9c4:	f10d 0309 	add.w	r3, sp, #9
 800a9c8:	1a9b      	subs	r3, r3, r2
 800a9ca:	42ac      	cmp	r4, r5
 800a9cc:	bf88      	it	hi
 800a9ce:	2300      	movhi	r3, #0
 800a9d0:	3302      	adds	r3, #2
 800a9d2:	4403      	add	r3, r0
 800a9d4:	1a18      	subs	r0, r3, r0
 800a9d6:	b003      	add	sp, #12
 800a9d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9da:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a9de:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a9e2:	e7ed      	b.n	800a9c0 <__exponent+0x44>
 800a9e4:	2330      	movs	r3, #48	@ 0x30
 800a9e6:	3130      	adds	r1, #48	@ 0x30
 800a9e8:	7083      	strb	r3, [r0, #2]
 800a9ea:	70c1      	strb	r1, [r0, #3]
 800a9ec:	1d03      	adds	r3, r0, #4
 800a9ee:	e7f1      	b.n	800a9d4 <__exponent+0x58>

0800a9f0 <_printf_float>:
 800a9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9f4:	b091      	sub	sp, #68	@ 0x44
 800a9f6:	460c      	mov	r4, r1
 800a9f8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800a9fc:	4616      	mov	r6, r2
 800a9fe:	461f      	mov	r7, r3
 800aa00:	4605      	mov	r5, r0
 800aa02:	f000 fe1f 	bl	800b644 <_localeconv_r>
 800aa06:	6803      	ldr	r3, [r0, #0]
 800aa08:	4618      	mov	r0, r3
 800aa0a:	9308      	str	r3, [sp, #32]
 800aa0c:	f7f5 fbaa 	bl	8000164 <strlen>
 800aa10:	2300      	movs	r3, #0
 800aa12:	930e      	str	r3, [sp, #56]	@ 0x38
 800aa14:	f8d8 3000 	ldr.w	r3, [r8]
 800aa18:	9009      	str	r0, [sp, #36]	@ 0x24
 800aa1a:	3307      	adds	r3, #7
 800aa1c:	f023 0307 	bic.w	r3, r3, #7
 800aa20:	f103 0208 	add.w	r2, r3, #8
 800aa24:	f894 a018 	ldrb.w	sl, [r4, #24]
 800aa28:	f8d4 b000 	ldr.w	fp, [r4]
 800aa2c:	f8c8 2000 	str.w	r2, [r8]
 800aa30:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aa34:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800aa38:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aa3a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800aa3e:	f04f 32ff 	mov.w	r2, #4294967295
 800aa42:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800aa46:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800aa4a:	4b9c      	ldr	r3, [pc, #624]	@ (800acbc <_printf_float+0x2cc>)
 800aa4c:	f7f5 ffe8 	bl	8000a20 <__aeabi_dcmpun>
 800aa50:	bb70      	cbnz	r0, 800aab0 <_printf_float+0xc0>
 800aa52:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800aa56:	f04f 32ff 	mov.w	r2, #4294967295
 800aa5a:	4b98      	ldr	r3, [pc, #608]	@ (800acbc <_printf_float+0x2cc>)
 800aa5c:	f7f5 ffc2 	bl	80009e4 <__aeabi_dcmple>
 800aa60:	bb30      	cbnz	r0, 800aab0 <_printf_float+0xc0>
 800aa62:	2200      	movs	r2, #0
 800aa64:	2300      	movs	r3, #0
 800aa66:	4640      	mov	r0, r8
 800aa68:	4649      	mov	r1, r9
 800aa6a:	f7f5 ffb1 	bl	80009d0 <__aeabi_dcmplt>
 800aa6e:	b110      	cbz	r0, 800aa76 <_printf_float+0x86>
 800aa70:	232d      	movs	r3, #45	@ 0x2d
 800aa72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aa76:	4a92      	ldr	r2, [pc, #584]	@ (800acc0 <_printf_float+0x2d0>)
 800aa78:	4b92      	ldr	r3, [pc, #584]	@ (800acc4 <_printf_float+0x2d4>)
 800aa7a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800aa7e:	bf8c      	ite	hi
 800aa80:	4690      	movhi	r8, r2
 800aa82:	4698      	movls	r8, r3
 800aa84:	2303      	movs	r3, #3
 800aa86:	f04f 0900 	mov.w	r9, #0
 800aa8a:	6123      	str	r3, [r4, #16]
 800aa8c:	f02b 0304 	bic.w	r3, fp, #4
 800aa90:	6023      	str	r3, [r4, #0]
 800aa92:	4633      	mov	r3, r6
 800aa94:	4621      	mov	r1, r4
 800aa96:	4628      	mov	r0, r5
 800aa98:	9700      	str	r7, [sp, #0]
 800aa9a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800aa9c:	f000 f9d4 	bl	800ae48 <_printf_common>
 800aaa0:	3001      	adds	r0, #1
 800aaa2:	f040 8090 	bne.w	800abc6 <_printf_float+0x1d6>
 800aaa6:	f04f 30ff 	mov.w	r0, #4294967295
 800aaaa:	b011      	add	sp, #68	@ 0x44
 800aaac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aab0:	4642      	mov	r2, r8
 800aab2:	464b      	mov	r3, r9
 800aab4:	4640      	mov	r0, r8
 800aab6:	4649      	mov	r1, r9
 800aab8:	f7f5 ffb2 	bl	8000a20 <__aeabi_dcmpun>
 800aabc:	b148      	cbz	r0, 800aad2 <_printf_float+0xe2>
 800aabe:	464b      	mov	r3, r9
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	bfb8      	it	lt
 800aac4:	232d      	movlt	r3, #45	@ 0x2d
 800aac6:	4a80      	ldr	r2, [pc, #512]	@ (800acc8 <_printf_float+0x2d8>)
 800aac8:	bfb8      	it	lt
 800aaca:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800aace:	4b7f      	ldr	r3, [pc, #508]	@ (800accc <_printf_float+0x2dc>)
 800aad0:	e7d3      	b.n	800aa7a <_printf_float+0x8a>
 800aad2:	6863      	ldr	r3, [r4, #4]
 800aad4:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800aad8:	1c5a      	adds	r2, r3, #1
 800aada:	d13f      	bne.n	800ab5c <_printf_float+0x16c>
 800aadc:	2306      	movs	r3, #6
 800aade:	6063      	str	r3, [r4, #4]
 800aae0:	2200      	movs	r2, #0
 800aae2:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800aae6:	6023      	str	r3, [r4, #0]
 800aae8:	9206      	str	r2, [sp, #24]
 800aaea:	aa0e      	add	r2, sp, #56	@ 0x38
 800aaec:	e9cd a204 	strd	sl, r2, [sp, #16]
 800aaf0:	aa0d      	add	r2, sp, #52	@ 0x34
 800aaf2:	9203      	str	r2, [sp, #12]
 800aaf4:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800aaf8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800aafc:	6863      	ldr	r3, [r4, #4]
 800aafe:	4642      	mov	r2, r8
 800ab00:	9300      	str	r3, [sp, #0]
 800ab02:	4628      	mov	r0, r5
 800ab04:	464b      	mov	r3, r9
 800ab06:	910a      	str	r1, [sp, #40]	@ 0x28
 800ab08:	f7ff fed4 	bl	800a8b4 <__cvt>
 800ab0c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ab0e:	4680      	mov	r8, r0
 800ab10:	2947      	cmp	r1, #71	@ 0x47
 800ab12:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800ab14:	d128      	bne.n	800ab68 <_printf_float+0x178>
 800ab16:	1cc8      	adds	r0, r1, #3
 800ab18:	db02      	blt.n	800ab20 <_printf_float+0x130>
 800ab1a:	6863      	ldr	r3, [r4, #4]
 800ab1c:	4299      	cmp	r1, r3
 800ab1e:	dd40      	ble.n	800aba2 <_printf_float+0x1b2>
 800ab20:	f1aa 0a02 	sub.w	sl, sl, #2
 800ab24:	fa5f fa8a 	uxtb.w	sl, sl
 800ab28:	4652      	mov	r2, sl
 800ab2a:	3901      	subs	r1, #1
 800ab2c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ab30:	910d      	str	r1, [sp, #52]	@ 0x34
 800ab32:	f7ff ff23 	bl	800a97c <__exponent>
 800ab36:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ab38:	4681      	mov	r9, r0
 800ab3a:	1813      	adds	r3, r2, r0
 800ab3c:	2a01      	cmp	r2, #1
 800ab3e:	6123      	str	r3, [r4, #16]
 800ab40:	dc02      	bgt.n	800ab48 <_printf_float+0x158>
 800ab42:	6822      	ldr	r2, [r4, #0]
 800ab44:	07d2      	lsls	r2, r2, #31
 800ab46:	d501      	bpl.n	800ab4c <_printf_float+0x15c>
 800ab48:	3301      	adds	r3, #1
 800ab4a:	6123      	str	r3, [r4, #16]
 800ab4c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d09e      	beq.n	800aa92 <_printf_float+0xa2>
 800ab54:	232d      	movs	r3, #45	@ 0x2d
 800ab56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ab5a:	e79a      	b.n	800aa92 <_printf_float+0xa2>
 800ab5c:	2947      	cmp	r1, #71	@ 0x47
 800ab5e:	d1bf      	bne.n	800aae0 <_printf_float+0xf0>
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d1bd      	bne.n	800aae0 <_printf_float+0xf0>
 800ab64:	2301      	movs	r3, #1
 800ab66:	e7ba      	b.n	800aade <_printf_float+0xee>
 800ab68:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ab6c:	d9dc      	bls.n	800ab28 <_printf_float+0x138>
 800ab6e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ab72:	d118      	bne.n	800aba6 <_printf_float+0x1b6>
 800ab74:	2900      	cmp	r1, #0
 800ab76:	6863      	ldr	r3, [r4, #4]
 800ab78:	dd0b      	ble.n	800ab92 <_printf_float+0x1a2>
 800ab7a:	6121      	str	r1, [r4, #16]
 800ab7c:	b913      	cbnz	r3, 800ab84 <_printf_float+0x194>
 800ab7e:	6822      	ldr	r2, [r4, #0]
 800ab80:	07d0      	lsls	r0, r2, #31
 800ab82:	d502      	bpl.n	800ab8a <_printf_float+0x19a>
 800ab84:	3301      	adds	r3, #1
 800ab86:	440b      	add	r3, r1
 800ab88:	6123      	str	r3, [r4, #16]
 800ab8a:	f04f 0900 	mov.w	r9, #0
 800ab8e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ab90:	e7dc      	b.n	800ab4c <_printf_float+0x15c>
 800ab92:	b913      	cbnz	r3, 800ab9a <_printf_float+0x1aa>
 800ab94:	6822      	ldr	r2, [r4, #0]
 800ab96:	07d2      	lsls	r2, r2, #31
 800ab98:	d501      	bpl.n	800ab9e <_printf_float+0x1ae>
 800ab9a:	3302      	adds	r3, #2
 800ab9c:	e7f4      	b.n	800ab88 <_printf_float+0x198>
 800ab9e:	2301      	movs	r3, #1
 800aba0:	e7f2      	b.n	800ab88 <_printf_float+0x198>
 800aba2:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800aba6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aba8:	4299      	cmp	r1, r3
 800abaa:	db05      	blt.n	800abb8 <_printf_float+0x1c8>
 800abac:	6823      	ldr	r3, [r4, #0]
 800abae:	6121      	str	r1, [r4, #16]
 800abb0:	07d8      	lsls	r0, r3, #31
 800abb2:	d5ea      	bpl.n	800ab8a <_printf_float+0x19a>
 800abb4:	1c4b      	adds	r3, r1, #1
 800abb6:	e7e7      	b.n	800ab88 <_printf_float+0x198>
 800abb8:	2900      	cmp	r1, #0
 800abba:	bfcc      	ite	gt
 800abbc:	2201      	movgt	r2, #1
 800abbe:	f1c1 0202 	rsble	r2, r1, #2
 800abc2:	4413      	add	r3, r2
 800abc4:	e7e0      	b.n	800ab88 <_printf_float+0x198>
 800abc6:	6823      	ldr	r3, [r4, #0]
 800abc8:	055a      	lsls	r2, r3, #21
 800abca:	d407      	bmi.n	800abdc <_printf_float+0x1ec>
 800abcc:	6923      	ldr	r3, [r4, #16]
 800abce:	4642      	mov	r2, r8
 800abd0:	4631      	mov	r1, r6
 800abd2:	4628      	mov	r0, r5
 800abd4:	47b8      	blx	r7
 800abd6:	3001      	adds	r0, #1
 800abd8:	d12b      	bne.n	800ac32 <_printf_float+0x242>
 800abda:	e764      	b.n	800aaa6 <_printf_float+0xb6>
 800abdc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800abe0:	f240 80dc 	bls.w	800ad9c <_printf_float+0x3ac>
 800abe4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800abe8:	2200      	movs	r2, #0
 800abea:	2300      	movs	r3, #0
 800abec:	f7f5 fee6 	bl	80009bc <__aeabi_dcmpeq>
 800abf0:	2800      	cmp	r0, #0
 800abf2:	d033      	beq.n	800ac5c <_printf_float+0x26c>
 800abf4:	2301      	movs	r3, #1
 800abf6:	4631      	mov	r1, r6
 800abf8:	4628      	mov	r0, r5
 800abfa:	4a35      	ldr	r2, [pc, #212]	@ (800acd0 <_printf_float+0x2e0>)
 800abfc:	47b8      	blx	r7
 800abfe:	3001      	adds	r0, #1
 800ac00:	f43f af51 	beq.w	800aaa6 <_printf_float+0xb6>
 800ac04:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800ac08:	4543      	cmp	r3, r8
 800ac0a:	db02      	blt.n	800ac12 <_printf_float+0x222>
 800ac0c:	6823      	ldr	r3, [r4, #0]
 800ac0e:	07d8      	lsls	r0, r3, #31
 800ac10:	d50f      	bpl.n	800ac32 <_printf_float+0x242>
 800ac12:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ac16:	4631      	mov	r1, r6
 800ac18:	4628      	mov	r0, r5
 800ac1a:	47b8      	blx	r7
 800ac1c:	3001      	adds	r0, #1
 800ac1e:	f43f af42 	beq.w	800aaa6 <_printf_float+0xb6>
 800ac22:	f04f 0900 	mov.w	r9, #0
 800ac26:	f108 38ff 	add.w	r8, r8, #4294967295
 800ac2a:	f104 0a1a 	add.w	sl, r4, #26
 800ac2e:	45c8      	cmp	r8, r9
 800ac30:	dc09      	bgt.n	800ac46 <_printf_float+0x256>
 800ac32:	6823      	ldr	r3, [r4, #0]
 800ac34:	079b      	lsls	r3, r3, #30
 800ac36:	f100 8102 	bmi.w	800ae3e <_printf_float+0x44e>
 800ac3a:	68e0      	ldr	r0, [r4, #12]
 800ac3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac3e:	4298      	cmp	r0, r3
 800ac40:	bfb8      	it	lt
 800ac42:	4618      	movlt	r0, r3
 800ac44:	e731      	b.n	800aaaa <_printf_float+0xba>
 800ac46:	2301      	movs	r3, #1
 800ac48:	4652      	mov	r2, sl
 800ac4a:	4631      	mov	r1, r6
 800ac4c:	4628      	mov	r0, r5
 800ac4e:	47b8      	blx	r7
 800ac50:	3001      	adds	r0, #1
 800ac52:	f43f af28 	beq.w	800aaa6 <_printf_float+0xb6>
 800ac56:	f109 0901 	add.w	r9, r9, #1
 800ac5a:	e7e8      	b.n	800ac2e <_printf_float+0x23e>
 800ac5c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	dc38      	bgt.n	800acd4 <_printf_float+0x2e4>
 800ac62:	2301      	movs	r3, #1
 800ac64:	4631      	mov	r1, r6
 800ac66:	4628      	mov	r0, r5
 800ac68:	4a19      	ldr	r2, [pc, #100]	@ (800acd0 <_printf_float+0x2e0>)
 800ac6a:	47b8      	blx	r7
 800ac6c:	3001      	adds	r0, #1
 800ac6e:	f43f af1a 	beq.w	800aaa6 <_printf_float+0xb6>
 800ac72:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800ac76:	ea59 0303 	orrs.w	r3, r9, r3
 800ac7a:	d102      	bne.n	800ac82 <_printf_float+0x292>
 800ac7c:	6823      	ldr	r3, [r4, #0]
 800ac7e:	07d9      	lsls	r1, r3, #31
 800ac80:	d5d7      	bpl.n	800ac32 <_printf_float+0x242>
 800ac82:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ac86:	4631      	mov	r1, r6
 800ac88:	4628      	mov	r0, r5
 800ac8a:	47b8      	blx	r7
 800ac8c:	3001      	adds	r0, #1
 800ac8e:	f43f af0a 	beq.w	800aaa6 <_printf_float+0xb6>
 800ac92:	f04f 0a00 	mov.w	sl, #0
 800ac96:	f104 0b1a 	add.w	fp, r4, #26
 800ac9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ac9c:	425b      	negs	r3, r3
 800ac9e:	4553      	cmp	r3, sl
 800aca0:	dc01      	bgt.n	800aca6 <_printf_float+0x2b6>
 800aca2:	464b      	mov	r3, r9
 800aca4:	e793      	b.n	800abce <_printf_float+0x1de>
 800aca6:	2301      	movs	r3, #1
 800aca8:	465a      	mov	r2, fp
 800acaa:	4631      	mov	r1, r6
 800acac:	4628      	mov	r0, r5
 800acae:	47b8      	blx	r7
 800acb0:	3001      	adds	r0, #1
 800acb2:	f43f aef8 	beq.w	800aaa6 <_printf_float+0xb6>
 800acb6:	f10a 0a01 	add.w	sl, sl, #1
 800acba:	e7ee      	b.n	800ac9a <_printf_float+0x2aa>
 800acbc:	7fefffff 	.word	0x7fefffff
 800acc0:	0800ddf6 	.word	0x0800ddf6
 800acc4:	0800ddf2 	.word	0x0800ddf2
 800acc8:	0800ddfe 	.word	0x0800ddfe
 800accc:	0800ddfa 	.word	0x0800ddfa
 800acd0:	0800de02 	.word	0x0800de02
 800acd4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800acd6:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800acda:	4553      	cmp	r3, sl
 800acdc:	bfa8      	it	ge
 800acde:	4653      	movge	r3, sl
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	4699      	mov	r9, r3
 800ace4:	dc36      	bgt.n	800ad54 <_printf_float+0x364>
 800ace6:	f04f 0b00 	mov.w	fp, #0
 800acea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800acee:	f104 021a 	add.w	r2, r4, #26
 800acf2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800acf4:	930a      	str	r3, [sp, #40]	@ 0x28
 800acf6:	eba3 0309 	sub.w	r3, r3, r9
 800acfa:	455b      	cmp	r3, fp
 800acfc:	dc31      	bgt.n	800ad62 <_printf_float+0x372>
 800acfe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ad00:	459a      	cmp	sl, r3
 800ad02:	dc3a      	bgt.n	800ad7a <_printf_float+0x38a>
 800ad04:	6823      	ldr	r3, [r4, #0]
 800ad06:	07da      	lsls	r2, r3, #31
 800ad08:	d437      	bmi.n	800ad7a <_printf_float+0x38a>
 800ad0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ad0c:	ebaa 0903 	sub.w	r9, sl, r3
 800ad10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad12:	ebaa 0303 	sub.w	r3, sl, r3
 800ad16:	4599      	cmp	r9, r3
 800ad18:	bfa8      	it	ge
 800ad1a:	4699      	movge	r9, r3
 800ad1c:	f1b9 0f00 	cmp.w	r9, #0
 800ad20:	dc33      	bgt.n	800ad8a <_printf_float+0x39a>
 800ad22:	f04f 0800 	mov.w	r8, #0
 800ad26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ad2a:	f104 0b1a 	add.w	fp, r4, #26
 800ad2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ad30:	ebaa 0303 	sub.w	r3, sl, r3
 800ad34:	eba3 0309 	sub.w	r3, r3, r9
 800ad38:	4543      	cmp	r3, r8
 800ad3a:	f77f af7a 	ble.w	800ac32 <_printf_float+0x242>
 800ad3e:	2301      	movs	r3, #1
 800ad40:	465a      	mov	r2, fp
 800ad42:	4631      	mov	r1, r6
 800ad44:	4628      	mov	r0, r5
 800ad46:	47b8      	blx	r7
 800ad48:	3001      	adds	r0, #1
 800ad4a:	f43f aeac 	beq.w	800aaa6 <_printf_float+0xb6>
 800ad4e:	f108 0801 	add.w	r8, r8, #1
 800ad52:	e7ec      	b.n	800ad2e <_printf_float+0x33e>
 800ad54:	4642      	mov	r2, r8
 800ad56:	4631      	mov	r1, r6
 800ad58:	4628      	mov	r0, r5
 800ad5a:	47b8      	blx	r7
 800ad5c:	3001      	adds	r0, #1
 800ad5e:	d1c2      	bne.n	800ace6 <_printf_float+0x2f6>
 800ad60:	e6a1      	b.n	800aaa6 <_printf_float+0xb6>
 800ad62:	2301      	movs	r3, #1
 800ad64:	4631      	mov	r1, r6
 800ad66:	4628      	mov	r0, r5
 800ad68:	920a      	str	r2, [sp, #40]	@ 0x28
 800ad6a:	47b8      	blx	r7
 800ad6c:	3001      	adds	r0, #1
 800ad6e:	f43f ae9a 	beq.w	800aaa6 <_printf_float+0xb6>
 800ad72:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ad74:	f10b 0b01 	add.w	fp, fp, #1
 800ad78:	e7bb      	b.n	800acf2 <_printf_float+0x302>
 800ad7a:	4631      	mov	r1, r6
 800ad7c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ad80:	4628      	mov	r0, r5
 800ad82:	47b8      	blx	r7
 800ad84:	3001      	adds	r0, #1
 800ad86:	d1c0      	bne.n	800ad0a <_printf_float+0x31a>
 800ad88:	e68d      	b.n	800aaa6 <_printf_float+0xb6>
 800ad8a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ad8c:	464b      	mov	r3, r9
 800ad8e:	4631      	mov	r1, r6
 800ad90:	4628      	mov	r0, r5
 800ad92:	4442      	add	r2, r8
 800ad94:	47b8      	blx	r7
 800ad96:	3001      	adds	r0, #1
 800ad98:	d1c3      	bne.n	800ad22 <_printf_float+0x332>
 800ad9a:	e684      	b.n	800aaa6 <_printf_float+0xb6>
 800ad9c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800ada0:	f1ba 0f01 	cmp.w	sl, #1
 800ada4:	dc01      	bgt.n	800adaa <_printf_float+0x3ba>
 800ada6:	07db      	lsls	r3, r3, #31
 800ada8:	d536      	bpl.n	800ae18 <_printf_float+0x428>
 800adaa:	2301      	movs	r3, #1
 800adac:	4642      	mov	r2, r8
 800adae:	4631      	mov	r1, r6
 800adb0:	4628      	mov	r0, r5
 800adb2:	47b8      	blx	r7
 800adb4:	3001      	adds	r0, #1
 800adb6:	f43f ae76 	beq.w	800aaa6 <_printf_float+0xb6>
 800adba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800adbe:	4631      	mov	r1, r6
 800adc0:	4628      	mov	r0, r5
 800adc2:	47b8      	blx	r7
 800adc4:	3001      	adds	r0, #1
 800adc6:	f43f ae6e 	beq.w	800aaa6 <_printf_float+0xb6>
 800adca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800adce:	2200      	movs	r2, #0
 800add0:	2300      	movs	r3, #0
 800add2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800add6:	f7f5 fdf1 	bl	80009bc <__aeabi_dcmpeq>
 800adda:	b9c0      	cbnz	r0, 800ae0e <_printf_float+0x41e>
 800addc:	4653      	mov	r3, sl
 800adde:	f108 0201 	add.w	r2, r8, #1
 800ade2:	4631      	mov	r1, r6
 800ade4:	4628      	mov	r0, r5
 800ade6:	47b8      	blx	r7
 800ade8:	3001      	adds	r0, #1
 800adea:	d10c      	bne.n	800ae06 <_printf_float+0x416>
 800adec:	e65b      	b.n	800aaa6 <_printf_float+0xb6>
 800adee:	2301      	movs	r3, #1
 800adf0:	465a      	mov	r2, fp
 800adf2:	4631      	mov	r1, r6
 800adf4:	4628      	mov	r0, r5
 800adf6:	47b8      	blx	r7
 800adf8:	3001      	adds	r0, #1
 800adfa:	f43f ae54 	beq.w	800aaa6 <_printf_float+0xb6>
 800adfe:	f108 0801 	add.w	r8, r8, #1
 800ae02:	45d0      	cmp	r8, sl
 800ae04:	dbf3      	blt.n	800adee <_printf_float+0x3fe>
 800ae06:	464b      	mov	r3, r9
 800ae08:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ae0c:	e6e0      	b.n	800abd0 <_printf_float+0x1e0>
 800ae0e:	f04f 0800 	mov.w	r8, #0
 800ae12:	f104 0b1a 	add.w	fp, r4, #26
 800ae16:	e7f4      	b.n	800ae02 <_printf_float+0x412>
 800ae18:	2301      	movs	r3, #1
 800ae1a:	4642      	mov	r2, r8
 800ae1c:	e7e1      	b.n	800ade2 <_printf_float+0x3f2>
 800ae1e:	2301      	movs	r3, #1
 800ae20:	464a      	mov	r2, r9
 800ae22:	4631      	mov	r1, r6
 800ae24:	4628      	mov	r0, r5
 800ae26:	47b8      	blx	r7
 800ae28:	3001      	adds	r0, #1
 800ae2a:	f43f ae3c 	beq.w	800aaa6 <_printf_float+0xb6>
 800ae2e:	f108 0801 	add.w	r8, r8, #1
 800ae32:	68e3      	ldr	r3, [r4, #12]
 800ae34:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ae36:	1a5b      	subs	r3, r3, r1
 800ae38:	4543      	cmp	r3, r8
 800ae3a:	dcf0      	bgt.n	800ae1e <_printf_float+0x42e>
 800ae3c:	e6fd      	b.n	800ac3a <_printf_float+0x24a>
 800ae3e:	f04f 0800 	mov.w	r8, #0
 800ae42:	f104 0919 	add.w	r9, r4, #25
 800ae46:	e7f4      	b.n	800ae32 <_printf_float+0x442>

0800ae48 <_printf_common>:
 800ae48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae4c:	4616      	mov	r6, r2
 800ae4e:	4698      	mov	r8, r3
 800ae50:	688a      	ldr	r2, [r1, #8]
 800ae52:	690b      	ldr	r3, [r1, #16]
 800ae54:	4607      	mov	r7, r0
 800ae56:	4293      	cmp	r3, r2
 800ae58:	bfb8      	it	lt
 800ae5a:	4613      	movlt	r3, r2
 800ae5c:	6033      	str	r3, [r6, #0]
 800ae5e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ae62:	460c      	mov	r4, r1
 800ae64:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ae68:	b10a      	cbz	r2, 800ae6e <_printf_common+0x26>
 800ae6a:	3301      	adds	r3, #1
 800ae6c:	6033      	str	r3, [r6, #0]
 800ae6e:	6823      	ldr	r3, [r4, #0]
 800ae70:	0699      	lsls	r1, r3, #26
 800ae72:	bf42      	ittt	mi
 800ae74:	6833      	ldrmi	r3, [r6, #0]
 800ae76:	3302      	addmi	r3, #2
 800ae78:	6033      	strmi	r3, [r6, #0]
 800ae7a:	6825      	ldr	r5, [r4, #0]
 800ae7c:	f015 0506 	ands.w	r5, r5, #6
 800ae80:	d106      	bne.n	800ae90 <_printf_common+0x48>
 800ae82:	f104 0a19 	add.w	sl, r4, #25
 800ae86:	68e3      	ldr	r3, [r4, #12]
 800ae88:	6832      	ldr	r2, [r6, #0]
 800ae8a:	1a9b      	subs	r3, r3, r2
 800ae8c:	42ab      	cmp	r3, r5
 800ae8e:	dc2b      	bgt.n	800aee8 <_printf_common+0xa0>
 800ae90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ae94:	6822      	ldr	r2, [r4, #0]
 800ae96:	3b00      	subs	r3, #0
 800ae98:	bf18      	it	ne
 800ae9a:	2301      	movne	r3, #1
 800ae9c:	0692      	lsls	r2, r2, #26
 800ae9e:	d430      	bmi.n	800af02 <_printf_common+0xba>
 800aea0:	4641      	mov	r1, r8
 800aea2:	4638      	mov	r0, r7
 800aea4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aea8:	47c8      	blx	r9
 800aeaa:	3001      	adds	r0, #1
 800aeac:	d023      	beq.n	800aef6 <_printf_common+0xae>
 800aeae:	6823      	ldr	r3, [r4, #0]
 800aeb0:	6922      	ldr	r2, [r4, #16]
 800aeb2:	f003 0306 	and.w	r3, r3, #6
 800aeb6:	2b04      	cmp	r3, #4
 800aeb8:	bf14      	ite	ne
 800aeba:	2500      	movne	r5, #0
 800aebc:	6833      	ldreq	r3, [r6, #0]
 800aebe:	f04f 0600 	mov.w	r6, #0
 800aec2:	bf08      	it	eq
 800aec4:	68e5      	ldreq	r5, [r4, #12]
 800aec6:	f104 041a 	add.w	r4, r4, #26
 800aeca:	bf08      	it	eq
 800aecc:	1aed      	subeq	r5, r5, r3
 800aece:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800aed2:	bf08      	it	eq
 800aed4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aed8:	4293      	cmp	r3, r2
 800aeda:	bfc4      	itt	gt
 800aedc:	1a9b      	subgt	r3, r3, r2
 800aede:	18ed      	addgt	r5, r5, r3
 800aee0:	42b5      	cmp	r5, r6
 800aee2:	d11a      	bne.n	800af1a <_printf_common+0xd2>
 800aee4:	2000      	movs	r0, #0
 800aee6:	e008      	b.n	800aefa <_printf_common+0xb2>
 800aee8:	2301      	movs	r3, #1
 800aeea:	4652      	mov	r2, sl
 800aeec:	4641      	mov	r1, r8
 800aeee:	4638      	mov	r0, r7
 800aef0:	47c8      	blx	r9
 800aef2:	3001      	adds	r0, #1
 800aef4:	d103      	bne.n	800aefe <_printf_common+0xb6>
 800aef6:	f04f 30ff 	mov.w	r0, #4294967295
 800aefa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aefe:	3501      	adds	r5, #1
 800af00:	e7c1      	b.n	800ae86 <_printf_common+0x3e>
 800af02:	2030      	movs	r0, #48	@ 0x30
 800af04:	18e1      	adds	r1, r4, r3
 800af06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800af0a:	1c5a      	adds	r2, r3, #1
 800af0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800af10:	4422      	add	r2, r4
 800af12:	3302      	adds	r3, #2
 800af14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800af18:	e7c2      	b.n	800aea0 <_printf_common+0x58>
 800af1a:	2301      	movs	r3, #1
 800af1c:	4622      	mov	r2, r4
 800af1e:	4641      	mov	r1, r8
 800af20:	4638      	mov	r0, r7
 800af22:	47c8      	blx	r9
 800af24:	3001      	adds	r0, #1
 800af26:	d0e6      	beq.n	800aef6 <_printf_common+0xae>
 800af28:	3601      	adds	r6, #1
 800af2a:	e7d9      	b.n	800aee0 <_printf_common+0x98>

0800af2c <_printf_i>:
 800af2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af30:	7e0f      	ldrb	r7, [r1, #24]
 800af32:	4691      	mov	r9, r2
 800af34:	2f78      	cmp	r7, #120	@ 0x78
 800af36:	4680      	mov	r8, r0
 800af38:	460c      	mov	r4, r1
 800af3a:	469a      	mov	sl, r3
 800af3c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800af3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800af42:	d807      	bhi.n	800af54 <_printf_i+0x28>
 800af44:	2f62      	cmp	r7, #98	@ 0x62
 800af46:	d80a      	bhi.n	800af5e <_printf_i+0x32>
 800af48:	2f00      	cmp	r7, #0
 800af4a:	f000 80d1 	beq.w	800b0f0 <_printf_i+0x1c4>
 800af4e:	2f58      	cmp	r7, #88	@ 0x58
 800af50:	f000 80b8 	beq.w	800b0c4 <_printf_i+0x198>
 800af54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800af58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800af5c:	e03a      	b.n	800afd4 <_printf_i+0xa8>
 800af5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800af62:	2b15      	cmp	r3, #21
 800af64:	d8f6      	bhi.n	800af54 <_printf_i+0x28>
 800af66:	a101      	add	r1, pc, #4	@ (adr r1, 800af6c <_printf_i+0x40>)
 800af68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800af6c:	0800afc5 	.word	0x0800afc5
 800af70:	0800afd9 	.word	0x0800afd9
 800af74:	0800af55 	.word	0x0800af55
 800af78:	0800af55 	.word	0x0800af55
 800af7c:	0800af55 	.word	0x0800af55
 800af80:	0800af55 	.word	0x0800af55
 800af84:	0800afd9 	.word	0x0800afd9
 800af88:	0800af55 	.word	0x0800af55
 800af8c:	0800af55 	.word	0x0800af55
 800af90:	0800af55 	.word	0x0800af55
 800af94:	0800af55 	.word	0x0800af55
 800af98:	0800b0d7 	.word	0x0800b0d7
 800af9c:	0800b003 	.word	0x0800b003
 800afa0:	0800b091 	.word	0x0800b091
 800afa4:	0800af55 	.word	0x0800af55
 800afa8:	0800af55 	.word	0x0800af55
 800afac:	0800b0f9 	.word	0x0800b0f9
 800afb0:	0800af55 	.word	0x0800af55
 800afb4:	0800b003 	.word	0x0800b003
 800afb8:	0800af55 	.word	0x0800af55
 800afbc:	0800af55 	.word	0x0800af55
 800afc0:	0800b099 	.word	0x0800b099
 800afc4:	6833      	ldr	r3, [r6, #0]
 800afc6:	1d1a      	adds	r2, r3, #4
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	6032      	str	r2, [r6, #0]
 800afcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800afd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800afd4:	2301      	movs	r3, #1
 800afd6:	e09c      	b.n	800b112 <_printf_i+0x1e6>
 800afd8:	6833      	ldr	r3, [r6, #0]
 800afda:	6820      	ldr	r0, [r4, #0]
 800afdc:	1d19      	adds	r1, r3, #4
 800afde:	6031      	str	r1, [r6, #0]
 800afe0:	0606      	lsls	r6, r0, #24
 800afe2:	d501      	bpl.n	800afe8 <_printf_i+0xbc>
 800afe4:	681d      	ldr	r5, [r3, #0]
 800afe6:	e003      	b.n	800aff0 <_printf_i+0xc4>
 800afe8:	0645      	lsls	r5, r0, #25
 800afea:	d5fb      	bpl.n	800afe4 <_printf_i+0xb8>
 800afec:	f9b3 5000 	ldrsh.w	r5, [r3]
 800aff0:	2d00      	cmp	r5, #0
 800aff2:	da03      	bge.n	800affc <_printf_i+0xd0>
 800aff4:	232d      	movs	r3, #45	@ 0x2d
 800aff6:	426d      	negs	r5, r5
 800aff8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800affc:	230a      	movs	r3, #10
 800affe:	4858      	ldr	r0, [pc, #352]	@ (800b160 <_printf_i+0x234>)
 800b000:	e011      	b.n	800b026 <_printf_i+0xfa>
 800b002:	6821      	ldr	r1, [r4, #0]
 800b004:	6833      	ldr	r3, [r6, #0]
 800b006:	0608      	lsls	r0, r1, #24
 800b008:	f853 5b04 	ldr.w	r5, [r3], #4
 800b00c:	d402      	bmi.n	800b014 <_printf_i+0xe8>
 800b00e:	0649      	lsls	r1, r1, #25
 800b010:	bf48      	it	mi
 800b012:	b2ad      	uxthmi	r5, r5
 800b014:	2f6f      	cmp	r7, #111	@ 0x6f
 800b016:	6033      	str	r3, [r6, #0]
 800b018:	bf14      	ite	ne
 800b01a:	230a      	movne	r3, #10
 800b01c:	2308      	moveq	r3, #8
 800b01e:	4850      	ldr	r0, [pc, #320]	@ (800b160 <_printf_i+0x234>)
 800b020:	2100      	movs	r1, #0
 800b022:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b026:	6866      	ldr	r6, [r4, #4]
 800b028:	2e00      	cmp	r6, #0
 800b02a:	60a6      	str	r6, [r4, #8]
 800b02c:	db05      	blt.n	800b03a <_printf_i+0x10e>
 800b02e:	6821      	ldr	r1, [r4, #0]
 800b030:	432e      	orrs	r6, r5
 800b032:	f021 0104 	bic.w	r1, r1, #4
 800b036:	6021      	str	r1, [r4, #0]
 800b038:	d04b      	beq.n	800b0d2 <_printf_i+0x1a6>
 800b03a:	4616      	mov	r6, r2
 800b03c:	fbb5 f1f3 	udiv	r1, r5, r3
 800b040:	fb03 5711 	mls	r7, r3, r1, r5
 800b044:	5dc7      	ldrb	r7, [r0, r7]
 800b046:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b04a:	462f      	mov	r7, r5
 800b04c:	42bb      	cmp	r3, r7
 800b04e:	460d      	mov	r5, r1
 800b050:	d9f4      	bls.n	800b03c <_printf_i+0x110>
 800b052:	2b08      	cmp	r3, #8
 800b054:	d10b      	bne.n	800b06e <_printf_i+0x142>
 800b056:	6823      	ldr	r3, [r4, #0]
 800b058:	07df      	lsls	r7, r3, #31
 800b05a:	d508      	bpl.n	800b06e <_printf_i+0x142>
 800b05c:	6923      	ldr	r3, [r4, #16]
 800b05e:	6861      	ldr	r1, [r4, #4]
 800b060:	4299      	cmp	r1, r3
 800b062:	bfde      	ittt	le
 800b064:	2330      	movle	r3, #48	@ 0x30
 800b066:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b06a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b06e:	1b92      	subs	r2, r2, r6
 800b070:	6122      	str	r2, [r4, #16]
 800b072:	464b      	mov	r3, r9
 800b074:	4621      	mov	r1, r4
 800b076:	4640      	mov	r0, r8
 800b078:	f8cd a000 	str.w	sl, [sp]
 800b07c:	aa03      	add	r2, sp, #12
 800b07e:	f7ff fee3 	bl	800ae48 <_printf_common>
 800b082:	3001      	adds	r0, #1
 800b084:	d14a      	bne.n	800b11c <_printf_i+0x1f0>
 800b086:	f04f 30ff 	mov.w	r0, #4294967295
 800b08a:	b004      	add	sp, #16
 800b08c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b090:	6823      	ldr	r3, [r4, #0]
 800b092:	f043 0320 	orr.w	r3, r3, #32
 800b096:	6023      	str	r3, [r4, #0]
 800b098:	2778      	movs	r7, #120	@ 0x78
 800b09a:	4832      	ldr	r0, [pc, #200]	@ (800b164 <_printf_i+0x238>)
 800b09c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b0a0:	6823      	ldr	r3, [r4, #0]
 800b0a2:	6831      	ldr	r1, [r6, #0]
 800b0a4:	061f      	lsls	r7, r3, #24
 800b0a6:	f851 5b04 	ldr.w	r5, [r1], #4
 800b0aa:	d402      	bmi.n	800b0b2 <_printf_i+0x186>
 800b0ac:	065f      	lsls	r7, r3, #25
 800b0ae:	bf48      	it	mi
 800b0b0:	b2ad      	uxthmi	r5, r5
 800b0b2:	6031      	str	r1, [r6, #0]
 800b0b4:	07d9      	lsls	r1, r3, #31
 800b0b6:	bf44      	itt	mi
 800b0b8:	f043 0320 	orrmi.w	r3, r3, #32
 800b0bc:	6023      	strmi	r3, [r4, #0]
 800b0be:	b11d      	cbz	r5, 800b0c8 <_printf_i+0x19c>
 800b0c0:	2310      	movs	r3, #16
 800b0c2:	e7ad      	b.n	800b020 <_printf_i+0xf4>
 800b0c4:	4826      	ldr	r0, [pc, #152]	@ (800b160 <_printf_i+0x234>)
 800b0c6:	e7e9      	b.n	800b09c <_printf_i+0x170>
 800b0c8:	6823      	ldr	r3, [r4, #0]
 800b0ca:	f023 0320 	bic.w	r3, r3, #32
 800b0ce:	6023      	str	r3, [r4, #0]
 800b0d0:	e7f6      	b.n	800b0c0 <_printf_i+0x194>
 800b0d2:	4616      	mov	r6, r2
 800b0d4:	e7bd      	b.n	800b052 <_printf_i+0x126>
 800b0d6:	6833      	ldr	r3, [r6, #0]
 800b0d8:	6825      	ldr	r5, [r4, #0]
 800b0da:	1d18      	adds	r0, r3, #4
 800b0dc:	6961      	ldr	r1, [r4, #20]
 800b0de:	6030      	str	r0, [r6, #0]
 800b0e0:	062e      	lsls	r6, r5, #24
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	d501      	bpl.n	800b0ea <_printf_i+0x1be>
 800b0e6:	6019      	str	r1, [r3, #0]
 800b0e8:	e002      	b.n	800b0f0 <_printf_i+0x1c4>
 800b0ea:	0668      	lsls	r0, r5, #25
 800b0ec:	d5fb      	bpl.n	800b0e6 <_printf_i+0x1ba>
 800b0ee:	8019      	strh	r1, [r3, #0]
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	4616      	mov	r6, r2
 800b0f4:	6123      	str	r3, [r4, #16]
 800b0f6:	e7bc      	b.n	800b072 <_printf_i+0x146>
 800b0f8:	6833      	ldr	r3, [r6, #0]
 800b0fa:	2100      	movs	r1, #0
 800b0fc:	1d1a      	adds	r2, r3, #4
 800b0fe:	6032      	str	r2, [r6, #0]
 800b100:	681e      	ldr	r6, [r3, #0]
 800b102:	6862      	ldr	r2, [r4, #4]
 800b104:	4630      	mov	r0, r6
 800b106:	f000 fb14 	bl	800b732 <memchr>
 800b10a:	b108      	cbz	r0, 800b110 <_printf_i+0x1e4>
 800b10c:	1b80      	subs	r0, r0, r6
 800b10e:	6060      	str	r0, [r4, #4]
 800b110:	6863      	ldr	r3, [r4, #4]
 800b112:	6123      	str	r3, [r4, #16]
 800b114:	2300      	movs	r3, #0
 800b116:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b11a:	e7aa      	b.n	800b072 <_printf_i+0x146>
 800b11c:	4632      	mov	r2, r6
 800b11e:	4649      	mov	r1, r9
 800b120:	4640      	mov	r0, r8
 800b122:	6923      	ldr	r3, [r4, #16]
 800b124:	47d0      	blx	sl
 800b126:	3001      	adds	r0, #1
 800b128:	d0ad      	beq.n	800b086 <_printf_i+0x15a>
 800b12a:	6823      	ldr	r3, [r4, #0]
 800b12c:	079b      	lsls	r3, r3, #30
 800b12e:	d413      	bmi.n	800b158 <_printf_i+0x22c>
 800b130:	68e0      	ldr	r0, [r4, #12]
 800b132:	9b03      	ldr	r3, [sp, #12]
 800b134:	4298      	cmp	r0, r3
 800b136:	bfb8      	it	lt
 800b138:	4618      	movlt	r0, r3
 800b13a:	e7a6      	b.n	800b08a <_printf_i+0x15e>
 800b13c:	2301      	movs	r3, #1
 800b13e:	4632      	mov	r2, r6
 800b140:	4649      	mov	r1, r9
 800b142:	4640      	mov	r0, r8
 800b144:	47d0      	blx	sl
 800b146:	3001      	adds	r0, #1
 800b148:	d09d      	beq.n	800b086 <_printf_i+0x15a>
 800b14a:	3501      	adds	r5, #1
 800b14c:	68e3      	ldr	r3, [r4, #12]
 800b14e:	9903      	ldr	r1, [sp, #12]
 800b150:	1a5b      	subs	r3, r3, r1
 800b152:	42ab      	cmp	r3, r5
 800b154:	dcf2      	bgt.n	800b13c <_printf_i+0x210>
 800b156:	e7eb      	b.n	800b130 <_printf_i+0x204>
 800b158:	2500      	movs	r5, #0
 800b15a:	f104 0619 	add.w	r6, r4, #25
 800b15e:	e7f5      	b.n	800b14c <_printf_i+0x220>
 800b160:	0800de04 	.word	0x0800de04
 800b164:	0800de15 	.word	0x0800de15

0800b168 <std>:
 800b168:	2300      	movs	r3, #0
 800b16a:	b510      	push	{r4, lr}
 800b16c:	4604      	mov	r4, r0
 800b16e:	e9c0 3300 	strd	r3, r3, [r0]
 800b172:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b176:	6083      	str	r3, [r0, #8]
 800b178:	8181      	strh	r1, [r0, #12]
 800b17a:	6643      	str	r3, [r0, #100]	@ 0x64
 800b17c:	81c2      	strh	r2, [r0, #14]
 800b17e:	6183      	str	r3, [r0, #24]
 800b180:	4619      	mov	r1, r3
 800b182:	2208      	movs	r2, #8
 800b184:	305c      	adds	r0, #92	@ 0x5c
 800b186:	f000 fa2f 	bl	800b5e8 <memset>
 800b18a:	4b0d      	ldr	r3, [pc, #52]	@ (800b1c0 <std+0x58>)
 800b18c:	6224      	str	r4, [r4, #32]
 800b18e:	6263      	str	r3, [r4, #36]	@ 0x24
 800b190:	4b0c      	ldr	r3, [pc, #48]	@ (800b1c4 <std+0x5c>)
 800b192:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b194:	4b0c      	ldr	r3, [pc, #48]	@ (800b1c8 <std+0x60>)
 800b196:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b198:	4b0c      	ldr	r3, [pc, #48]	@ (800b1cc <std+0x64>)
 800b19a:	6323      	str	r3, [r4, #48]	@ 0x30
 800b19c:	4b0c      	ldr	r3, [pc, #48]	@ (800b1d0 <std+0x68>)
 800b19e:	429c      	cmp	r4, r3
 800b1a0:	d006      	beq.n	800b1b0 <std+0x48>
 800b1a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b1a6:	4294      	cmp	r4, r2
 800b1a8:	d002      	beq.n	800b1b0 <std+0x48>
 800b1aa:	33d0      	adds	r3, #208	@ 0xd0
 800b1ac:	429c      	cmp	r4, r3
 800b1ae:	d105      	bne.n	800b1bc <std+0x54>
 800b1b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b1b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1b8:	f000 bab8 	b.w	800b72c <__retarget_lock_init_recursive>
 800b1bc:	bd10      	pop	{r4, pc}
 800b1be:	bf00      	nop
 800b1c0:	0800b439 	.word	0x0800b439
 800b1c4:	0800b45b 	.word	0x0800b45b
 800b1c8:	0800b493 	.word	0x0800b493
 800b1cc:	0800b4b7 	.word	0x0800b4b7
 800b1d0:	200006c4 	.word	0x200006c4

0800b1d4 <stdio_exit_handler>:
 800b1d4:	4a02      	ldr	r2, [pc, #8]	@ (800b1e0 <stdio_exit_handler+0xc>)
 800b1d6:	4903      	ldr	r1, [pc, #12]	@ (800b1e4 <stdio_exit_handler+0x10>)
 800b1d8:	4803      	ldr	r0, [pc, #12]	@ (800b1e8 <stdio_exit_handler+0x14>)
 800b1da:	f000 b869 	b.w	800b2b0 <_fwalk_sglue>
 800b1de:	bf00      	nop
 800b1e0:	2000006c 	.word	0x2000006c
 800b1e4:	0800d329 	.word	0x0800d329
 800b1e8:	2000007c 	.word	0x2000007c

0800b1ec <cleanup_stdio>:
 800b1ec:	6841      	ldr	r1, [r0, #4]
 800b1ee:	4b0c      	ldr	r3, [pc, #48]	@ (800b220 <cleanup_stdio+0x34>)
 800b1f0:	b510      	push	{r4, lr}
 800b1f2:	4299      	cmp	r1, r3
 800b1f4:	4604      	mov	r4, r0
 800b1f6:	d001      	beq.n	800b1fc <cleanup_stdio+0x10>
 800b1f8:	f002 f896 	bl	800d328 <_fflush_r>
 800b1fc:	68a1      	ldr	r1, [r4, #8]
 800b1fe:	4b09      	ldr	r3, [pc, #36]	@ (800b224 <cleanup_stdio+0x38>)
 800b200:	4299      	cmp	r1, r3
 800b202:	d002      	beq.n	800b20a <cleanup_stdio+0x1e>
 800b204:	4620      	mov	r0, r4
 800b206:	f002 f88f 	bl	800d328 <_fflush_r>
 800b20a:	68e1      	ldr	r1, [r4, #12]
 800b20c:	4b06      	ldr	r3, [pc, #24]	@ (800b228 <cleanup_stdio+0x3c>)
 800b20e:	4299      	cmp	r1, r3
 800b210:	d004      	beq.n	800b21c <cleanup_stdio+0x30>
 800b212:	4620      	mov	r0, r4
 800b214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b218:	f002 b886 	b.w	800d328 <_fflush_r>
 800b21c:	bd10      	pop	{r4, pc}
 800b21e:	bf00      	nop
 800b220:	200006c4 	.word	0x200006c4
 800b224:	2000072c 	.word	0x2000072c
 800b228:	20000794 	.word	0x20000794

0800b22c <global_stdio_init.part.0>:
 800b22c:	b510      	push	{r4, lr}
 800b22e:	4b0b      	ldr	r3, [pc, #44]	@ (800b25c <global_stdio_init.part.0+0x30>)
 800b230:	4c0b      	ldr	r4, [pc, #44]	@ (800b260 <global_stdio_init.part.0+0x34>)
 800b232:	4a0c      	ldr	r2, [pc, #48]	@ (800b264 <global_stdio_init.part.0+0x38>)
 800b234:	4620      	mov	r0, r4
 800b236:	601a      	str	r2, [r3, #0]
 800b238:	2104      	movs	r1, #4
 800b23a:	2200      	movs	r2, #0
 800b23c:	f7ff ff94 	bl	800b168 <std>
 800b240:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b244:	2201      	movs	r2, #1
 800b246:	2109      	movs	r1, #9
 800b248:	f7ff ff8e 	bl	800b168 <std>
 800b24c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b250:	2202      	movs	r2, #2
 800b252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b256:	2112      	movs	r1, #18
 800b258:	f7ff bf86 	b.w	800b168 <std>
 800b25c:	200007fc 	.word	0x200007fc
 800b260:	200006c4 	.word	0x200006c4
 800b264:	0800b1d5 	.word	0x0800b1d5

0800b268 <__sfp_lock_acquire>:
 800b268:	4801      	ldr	r0, [pc, #4]	@ (800b270 <__sfp_lock_acquire+0x8>)
 800b26a:	f000 ba60 	b.w	800b72e <__retarget_lock_acquire_recursive>
 800b26e:	bf00      	nop
 800b270:	20000805 	.word	0x20000805

0800b274 <__sfp_lock_release>:
 800b274:	4801      	ldr	r0, [pc, #4]	@ (800b27c <__sfp_lock_release+0x8>)
 800b276:	f000 ba5b 	b.w	800b730 <__retarget_lock_release_recursive>
 800b27a:	bf00      	nop
 800b27c:	20000805 	.word	0x20000805

0800b280 <__sinit>:
 800b280:	b510      	push	{r4, lr}
 800b282:	4604      	mov	r4, r0
 800b284:	f7ff fff0 	bl	800b268 <__sfp_lock_acquire>
 800b288:	6a23      	ldr	r3, [r4, #32]
 800b28a:	b11b      	cbz	r3, 800b294 <__sinit+0x14>
 800b28c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b290:	f7ff bff0 	b.w	800b274 <__sfp_lock_release>
 800b294:	4b04      	ldr	r3, [pc, #16]	@ (800b2a8 <__sinit+0x28>)
 800b296:	6223      	str	r3, [r4, #32]
 800b298:	4b04      	ldr	r3, [pc, #16]	@ (800b2ac <__sinit+0x2c>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d1f5      	bne.n	800b28c <__sinit+0xc>
 800b2a0:	f7ff ffc4 	bl	800b22c <global_stdio_init.part.0>
 800b2a4:	e7f2      	b.n	800b28c <__sinit+0xc>
 800b2a6:	bf00      	nop
 800b2a8:	0800b1ed 	.word	0x0800b1ed
 800b2ac:	200007fc 	.word	0x200007fc

0800b2b0 <_fwalk_sglue>:
 800b2b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2b4:	4607      	mov	r7, r0
 800b2b6:	4688      	mov	r8, r1
 800b2b8:	4614      	mov	r4, r2
 800b2ba:	2600      	movs	r6, #0
 800b2bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b2c0:	f1b9 0901 	subs.w	r9, r9, #1
 800b2c4:	d505      	bpl.n	800b2d2 <_fwalk_sglue+0x22>
 800b2c6:	6824      	ldr	r4, [r4, #0]
 800b2c8:	2c00      	cmp	r4, #0
 800b2ca:	d1f7      	bne.n	800b2bc <_fwalk_sglue+0xc>
 800b2cc:	4630      	mov	r0, r6
 800b2ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2d2:	89ab      	ldrh	r3, [r5, #12]
 800b2d4:	2b01      	cmp	r3, #1
 800b2d6:	d907      	bls.n	800b2e8 <_fwalk_sglue+0x38>
 800b2d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b2dc:	3301      	adds	r3, #1
 800b2de:	d003      	beq.n	800b2e8 <_fwalk_sglue+0x38>
 800b2e0:	4629      	mov	r1, r5
 800b2e2:	4638      	mov	r0, r7
 800b2e4:	47c0      	blx	r8
 800b2e6:	4306      	orrs	r6, r0
 800b2e8:	3568      	adds	r5, #104	@ 0x68
 800b2ea:	e7e9      	b.n	800b2c0 <_fwalk_sglue+0x10>

0800b2ec <iprintf>:
 800b2ec:	b40f      	push	{r0, r1, r2, r3}
 800b2ee:	b507      	push	{r0, r1, r2, lr}
 800b2f0:	4906      	ldr	r1, [pc, #24]	@ (800b30c <iprintf+0x20>)
 800b2f2:	ab04      	add	r3, sp, #16
 800b2f4:	6808      	ldr	r0, [r1, #0]
 800b2f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2fa:	6881      	ldr	r1, [r0, #8]
 800b2fc:	9301      	str	r3, [sp, #4]
 800b2fe:	f001 fe7b 	bl	800cff8 <_vfiprintf_r>
 800b302:	b003      	add	sp, #12
 800b304:	f85d eb04 	ldr.w	lr, [sp], #4
 800b308:	b004      	add	sp, #16
 800b30a:	4770      	bx	lr
 800b30c:	20000078 	.word	0x20000078

0800b310 <_puts_r>:
 800b310:	6a03      	ldr	r3, [r0, #32]
 800b312:	b570      	push	{r4, r5, r6, lr}
 800b314:	4605      	mov	r5, r0
 800b316:	460e      	mov	r6, r1
 800b318:	6884      	ldr	r4, [r0, #8]
 800b31a:	b90b      	cbnz	r3, 800b320 <_puts_r+0x10>
 800b31c:	f7ff ffb0 	bl	800b280 <__sinit>
 800b320:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b322:	07db      	lsls	r3, r3, #31
 800b324:	d405      	bmi.n	800b332 <_puts_r+0x22>
 800b326:	89a3      	ldrh	r3, [r4, #12]
 800b328:	0598      	lsls	r0, r3, #22
 800b32a:	d402      	bmi.n	800b332 <_puts_r+0x22>
 800b32c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b32e:	f000 f9fe 	bl	800b72e <__retarget_lock_acquire_recursive>
 800b332:	89a3      	ldrh	r3, [r4, #12]
 800b334:	0719      	lsls	r1, r3, #28
 800b336:	d502      	bpl.n	800b33e <_puts_r+0x2e>
 800b338:	6923      	ldr	r3, [r4, #16]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d135      	bne.n	800b3aa <_puts_r+0x9a>
 800b33e:	4621      	mov	r1, r4
 800b340:	4628      	mov	r0, r5
 800b342:	f000 f8fb 	bl	800b53c <__swsetup_r>
 800b346:	b380      	cbz	r0, 800b3aa <_puts_r+0x9a>
 800b348:	f04f 35ff 	mov.w	r5, #4294967295
 800b34c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b34e:	07da      	lsls	r2, r3, #31
 800b350:	d405      	bmi.n	800b35e <_puts_r+0x4e>
 800b352:	89a3      	ldrh	r3, [r4, #12]
 800b354:	059b      	lsls	r3, r3, #22
 800b356:	d402      	bmi.n	800b35e <_puts_r+0x4e>
 800b358:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b35a:	f000 f9e9 	bl	800b730 <__retarget_lock_release_recursive>
 800b35e:	4628      	mov	r0, r5
 800b360:	bd70      	pop	{r4, r5, r6, pc}
 800b362:	2b00      	cmp	r3, #0
 800b364:	da04      	bge.n	800b370 <_puts_r+0x60>
 800b366:	69a2      	ldr	r2, [r4, #24]
 800b368:	429a      	cmp	r2, r3
 800b36a:	dc17      	bgt.n	800b39c <_puts_r+0x8c>
 800b36c:	290a      	cmp	r1, #10
 800b36e:	d015      	beq.n	800b39c <_puts_r+0x8c>
 800b370:	6823      	ldr	r3, [r4, #0]
 800b372:	1c5a      	adds	r2, r3, #1
 800b374:	6022      	str	r2, [r4, #0]
 800b376:	7019      	strb	r1, [r3, #0]
 800b378:	68a3      	ldr	r3, [r4, #8]
 800b37a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b37e:	3b01      	subs	r3, #1
 800b380:	60a3      	str	r3, [r4, #8]
 800b382:	2900      	cmp	r1, #0
 800b384:	d1ed      	bne.n	800b362 <_puts_r+0x52>
 800b386:	2b00      	cmp	r3, #0
 800b388:	da11      	bge.n	800b3ae <_puts_r+0x9e>
 800b38a:	4622      	mov	r2, r4
 800b38c:	210a      	movs	r1, #10
 800b38e:	4628      	mov	r0, r5
 800b390:	f000 f895 	bl	800b4be <__swbuf_r>
 800b394:	3001      	adds	r0, #1
 800b396:	d0d7      	beq.n	800b348 <_puts_r+0x38>
 800b398:	250a      	movs	r5, #10
 800b39a:	e7d7      	b.n	800b34c <_puts_r+0x3c>
 800b39c:	4622      	mov	r2, r4
 800b39e:	4628      	mov	r0, r5
 800b3a0:	f000 f88d 	bl	800b4be <__swbuf_r>
 800b3a4:	3001      	adds	r0, #1
 800b3a6:	d1e7      	bne.n	800b378 <_puts_r+0x68>
 800b3a8:	e7ce      	b.n	800b348 <_puts_r+0x38>
 800b3aa:	3e01      	subs	r6, #1
 800b3ac:	e7e4      	b.n	800b378 <_puts_r+0x68>
 800b3ae:	6823      	ldr	r3, [r4, #0]
 800b3b0:	1c5a      	adds	r2, r3, #1
 800b3b2:	6022      	str	r2, [r4, #0]
 800b3b4:	220a      	movs	r2, #10
 800b3b6:	701a      	strb	r2, [r3, #0]
 800b3b8:	e7ee      	b.n	800b398 <_puts_r+0x88>
	...

0800b3bc <puts>:
 800b3bc:	4b02      	ldr	r3, [pc, #8]	@ (800b3c8 <puts+0xc>)
 800b3be:	4601      	mov	r1, r0
 800b3c0:	6818      	ldr	r0, [r3, #0]
 800b3c2:	f7ff bfa5 	b.w	800b310 <_puts_r>
 800b3c6:	bf00      	nop
 800b3c8:	20000078 	.word	0x20000078

0800b3cc <sniprintf>:
 800b3cc:	b40c      	push	{r2, r3}
 800b3ce:	b530      	push	{r4, r5, lr}
 800b3d0:	4b18      	ldr	r3, [pc, #96]	@ (800b434 <sniprintf+0x68>)
 800b3d2:	1e0c      	subs	r4, r1, #0
 800b3d4:	681d      	ldr	r5, [r3, #0]
 800b3d6:	b09d      	sub	sp, #116	@ 0x74
 800b3d8:	da08      	bge.n	800b3ec <sniprintf+0x20>
 800b3da:	238b      	movs	r3, #139	@ 0x8b
 800b3dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b3e0:	602b      	str	r3, [r5, #0]
 800b3e2:	b01d      	add	sp, #116	@ 0x74
 800b3e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b3e8:	b002      	add	sp, #8
 800b3ea:	4770      	bx	lr
 800b3ec:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b3f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b3f4:	f04f 0300 	mov.w	r3, #0
 800b3f8:	931b      	str	r3, [sp, #108]	@ 0x6c
 800b3fa:	bf0c      	ite	eq
 800b3fc:	4623      	moveq	r3, r4
 800b3fe:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b402:	9304      	str	r3, [sp, #16]
 800b404:	9307      	str	r3, [sp, #28]
 800b406:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b40a:	9002      	str	r0, [sp, #8]
 800b40c:	9006      	str	r0, [sp, #24]
 800b40e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b412:	4628      	mov	r0, r5
 800b414:	ab21      	add	r3, sp, #132	@ 0x84
 800b416:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b418:	a902      	add	r1, sp, #8
 800b41a:	9301      	str	r3, [sp, #4]
 800b41c:	f001 fcc8 	bl	800cdb0 <_svfiprintf_r>
 800b420:	1c43      	adds	r3, r0, #1
 800b422:	bfbc      	itt	lt
 800b424:	238b      	movlt	r3, #139	@ 0x8b
 800b426:	602b      	strlt	r3, [r5, #0]
 800b428:	2c00      	cmp	r4, #0
 800b42a:	d0da      	beq.n	800b3e2 <sniprintf+0x16>
 800b42c:	2200      	movs	r2, #0
 800b42e:	9b02      	ldr	r3, [sp, #8]
 800b430:	701a      	strb	r2, [r3, #0]
 800b432:	e7d6      	b.n	800b3e2 <sniprintf+0x16>
 800b434:	20000078 	.word	0x20000078

0800b438 <__sread>:
 800b438:	b510      	push	{r4, lr}
 800b43a:	460c      	mov	r4, r1
 800b43c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b440:	f000 f926 	bl	800b690 <_read_r>
 800b444:	2800      	cmp	r0, #0
 800b446:	bfab      	itete	ge
 800b448:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b44a:	89a3      	ldrhlt	r3, [r4, #12]
 800b44c:	181b      	addge	r3, r3, r0
 800b44e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b452:	bfac      	ite	ge
 800b454:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b456:	81a3      	strhlt	r3, [r4, #12]
 800b458:	bd10      	pop	{r4, pc}

0800b45a <__swrite>:
 800b45a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b45e:	461f      	mov	r7, r3
 800b460:	898b      	ldrh	r3, [r1, #12]
 800b462:	4605      	mov	r5, r0
 800b464:	05db      	lsls	r3, r3, #23
 800b466:	460c      	mov	r4, r1
 800b468:	4616      	mov	r6, r2
 800b46a:	d505      	bpl.n	800b478 <__swrite+0x1e>
 800b46c:	2302      	movs	r3, #2
 800b46e:	2200      	movs	r2, #0
 800b470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b474:	f000 f8fa 	bl	800b66c <_lseek_r>
 800b478:	89a3      	ldrh	r3, [r4, #12]
 800b47a:	4632      	mov	r2, r6
 800b47c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b480:	81a3      	strh	r3, [r4, #12]
 800b482:	4628      	mov	r0, r5
 800b484:	463b      	mov	r3, r7
 800b486:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b48a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b48e:	f000 b911 	b.w	800b6b4 <_write_r>

0800b492 <__sseek>:
 800b492:	b510      	push	{r4, lr}
 800b494:	460c      	mov	r4, r1
 800b496:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b49a:	f000 f8e7 	bl	800b66c <_lseek_r>
 800b49e:	1c43      	adds	r3, r0, #1
 800b4a0:	89a3      	ldrh	r3, [r4, #12]
 800b4a2:	bf15      	itete	ne
 800b4a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b4a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b4aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b4ae:	81a3      	strheq	r3, [r4, #12]
 800b4b0:	bf18      	it	ne
 800b4b2:	81a3      	strhne	r3, [r4, #12]
 800b4b4:	bd10      	pop	{r4, pc}

0800b4b6 <__sclose>:
 800b4b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4ba:	f000 b8c7 	b.w	800b64c <_close_r>

0800b4be <__swbuf_r>:
 800b4be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4c0:	460e      	mov	r6, r1
 800b4c2:	4614      	mov	r4, r2
 800b4c4:	4605      	mov	r5, r0
 800b4c6:	b118      	cbz	r0, 800b4d0 <__swbuf_r+0x12>
 800b4c8:	6a03      	ldr	r3, [r0, #32]
 800b4ca:	b90b      	cbnz	r3, 800b4d0 <__swbuf_r+0x12>
 800b4cc:	f7ff fed8 	bl	800b280 <__sinit>
 800b4d0:	69a3      	ldr	r3, [r4, #24]
 800b4d2:	60a3      	str	r3, [r4, #8]
 800b4d4:	89a3      	ldrh	r3, [r4, #12]
 800b4d6:	071a      	lsls	r2, r3, #28
 800b4d8:	d501      	bpl.n	800b4de <__swbuf_r+0x20>
 800b4da:	6923      	ldr	r3, [r4, #16]
 800b4dc:	b943      	cbnz	r3, 800b4f0 <__swbuf_r+0x32>
 800b4de:	4621      	mov	r1, r4
 800b4e0:	4628      	mov	r0, r5
 800b4e2:	f000 f82b 	bl	800b53c <__swsetup_r>
 800b4e6:	b118      	cbz	r0, 800b4f0 <__swbuf_r+0x32>
 800b4e8:	f04f 37ff 	mov.w	r7, #4294967295
 800b4ec:	4638      	mov	r0, r7
 800b4ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4f0:	6823      	ldr	r3, [r4, #0]
 800b4f2:	6922      	ldr	r2, [r4, #16]
 800b4f4:	b2f6      	uxtb	r6, r6
 800b4f6:	1a98      	subs	r0, r3, r2
 800b4f8:	6963      	ldr	r3, [r4, #20]
 800b4fa:	4637      	mov	r7, r6
 800b4fc:	4283      	cmp	r3, r0
 800b4fe:	dc05      	bgt.n	800b50c <__swbuf_r+0x4e>
 800b500:	4621      	mov	r1, r4
 800b502:	4628      	mov	r0, r5
 800b504:	f001 ff10 	bl	800d328 <_fflush_r>
 800b508:	2800      	cmp	r0, #0
 800b50a:	d1ed      	bne.n	800b4e8 <__swbuf_r+0x2a>
 800b50c:	68a3      	ldr	r3, [r4, #8]
 800b50e:	3b01      	subs	r3, #1
 800b510:	60a3      	str	r3, [r4, #8]
 800b512:	6823      	ldr	r3, [r4, #0]
 800b514:	1c5a      	adds	r2, r3, #1
 800b516:	6022      	str	r2, [r4, #0]
 800b518:	701e      	strb	r6, [r3, #0]
 800b51a:	6962      	ldr	r2, [r4, #20]
 800b51c:	1c43      	adds	r3, r0, #1
 800b51e:	429a      	cmp	r2, r3
 800b520:	d004      	beq.n	800b52c <__swbuf_r+0x6e>
 800b522:	89a3      	ldrh	r3, [r4, #12]
 800b524:	07db      	lsls	r3, r3, #31
 800b526:	d5e1      	bpl.n	800b4ec <__swbuf_r+0x2e>
 800b528:	2e0a      	cmp	r6, #10
 800b52a:	d1df      	bne.n	800b4ec <__swbuf_r+0x2e>
 800b52c:	4621      	mov	r1, r4
 800b52e:	4628      	mov	r0, r5
 800b530:	f001 fefa 	bl	800d328 <_fflush_r>
 800b534:	2800      	cmp	r0, #0
 800b536:	d0d9      	beq.n	800b4ec <__swbuf_r+0x2e>
 800b538:	e7d6      	b.n	800b4e8 <__swbuf_r+0x2a>
	...

0800b53c <__swsetup_r>:
 800b53c:	b538      	push	{r3, r4, r5, lr}
 800b53e:	4b29      	ldr	r3, [pc, #164]	@ (800b5e4 <__swsetup_r+0xa8>)
 800b540:	4605      	mov	r5, r0
 800b542:	6818      	ldr	r0, [r3, #0]
 800b544:	460c      	mov	r4, r1
 800b546:	b118      	cbz	r0, 800b550 <__swsetup_r+0x14>
 800b548:	6a03      	ldr	r3, [r0, #32]
 800b54a:	b90b      	cbnz	r3, 800b550 <__swsetup_r+0x14>
 800b54c:	f7ff fe98 	bl	800b280 <__sinit>
 800b550:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b554:	0719      	lsls	r1, r3, #28
 800b556:	d422      	bmi.n	800b59e <__swsetup_r+0x62>
 800b558:	06da      	lsls	r2, r3, #27
 800b55a:	d407      	bmi.n	800b56c <__swsetup_r+0x30>
 800b55c:	2209      	movs	r2, #9
 800b55e:	602a      	str	r2, [r5, #0]
 800b560:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b564:	f04f 30ff 	mov.w	r0, #4294967295
 800b568:	81a3      	strh	r3, [r4, #12]
 800b56a:	e033      	b.n	800b5d4 <__swsetup_r+0x98>
 800b56c:	0758      	lsls	r0, r3, #29
 800b56e:	d512      	bpl.n	800b596 <__swsetup_r+0x5a>
 800b570:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b572:	b141      	cbz	r1, 800b586 <__swsetup_r+0x4a>
 800b574:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b578:	4299      	cmp	r1, r3
 800b57a:	d002      	beq.n	800b582 <__swsetup_r+0x46>
 800b57c:	4628      	mov	r0, r5
 800b57e:	f000 ff43 	bl	800c408 <_free_r>
 800b582:	2300      	movs	r3, #0
 800b584:	6363      	str	r3, [r4, #52]	@ 0x34
 800b586:	89a3      	ldrh	r3, [r4, #12]
 800b588:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b58c:	81a3      	strh	r3, [r4, #12]
 800b58e:	2300      	movs	r3, #0
 800b590:	6063      	str	r3, [r4, #4]
 800b592:	6923      	ldr	r3, [r4, #16]
 800b594:	6023      	str	r3, [r4, #0]
 800b596:	89a3      	ldrh	r3, [r4, #12]
 800b598:	f043 0308 	orr.w	r3, r3, #8
 800b59c:	81a3      	strh	r3, [r4, #12]
 800b59e:	6923      	ldr	r3, [r4, #16]
 800b5a0:	b94b      	cbnz	r3, 800b5b6 <__swsetup_r+0x7a>
 800b5a2:	89a3      	ldrh	r3, [r4, #12]
 800b5a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b5a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b5ac:	d003      	beq.n	800b5b6 <__swsetup_r+0x7a>
 800b5ae:	4621      	mov	r1, r4
 800b5b0:	4628      	mov	r0, r5
 800b5b2:	f001 ff06 	bl	800d3c2 <__smakebuf_r>
 800b5b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5ba:	f013 0201 	ands.w	r2, r3, #1
 800b5be:	d00a      	beq.n	800b5d6 <__swsetup_r+0x9a>
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	60a2      	str	r2, [r4, #8]
 800b5c4:	6962      	ldr	r2, [r4, #20]
 800b5c6:	4252      	negs	r2, r2
 800b5c8:	61a2      	str	r2, [r4, #24]
 800b5ca:	6922      	ldr	r2, [r4, #16]
 800b5cc:	b942      	cbnz	r2, 800b5e0 <__swsetup_r+0xa4>
 800b5ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b5d2:	d1c5      	bne.n	800b560 <__swsetup_r+0x24>
 800b5d4:	bd38      	pop	{r3, r4, r5, pc}
 800b5d6:	0799      	lsls	r1, r3, #30
 800b5d8:	bf58      	it	pl
 800b5da:	6962      	ldrpl	r2, [r4, #20]
 800b5dc:	60a2      	str	r2, [r4, #8]
 800b5de:	e7f4      	b.n	800b5ca <__swsetup_r+0x8e>
 800b5e0:	2000      	movs	r0, #0
 800b5e2:	e7f7      	b.n	800b5d4 <__swsetup_r+0x98>
 800b5e4:	20000078 	.word	0x20000078

0800b5e8 <memset>:
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	4402      	add	r2, r0
 800b5ec:	4293      	cmp	r3, r2
 800b5ee:	d100      	bne.n	800b5f2 <memset+0xa>
 800b5f0:	4770      	bx	lr
 800b5f2:	f803 1b01 	strb.w	r1, [r3], #1
 800b5f6:	e7f9      	b.n	800b5ec <memset+0x4>

0800b5f8 <strncat>:
 800b5f8:	b530      	push	{r4, r5, lr}
 800b5fa:	4604      	mov	r4, r0
 800b5fc:	7825      	ldrb	r5, [r4, #0]
 800b5fe:	4623      	mov	r3, r4
 800b600:	3401      	adds	r4, #1
 800b602:	2d00      	cmp	r5, #0
 800b604:	d1fa      	bne.n	800b5fc <strncat+0x4>
 800b606:	3a01      	subs	r2, #1
 800b608:	d304      	bcc.n	800b614 <strncat+0x1c>
 800b60a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b60e:	f803 4b01 	strb.w	r4, [r3], #1
 800b612:	b904      	cbnz	r4, 800b616 <strncat+0x1e>
 800b614:	bd30      	pop	{r4, r5, pc}
 800b616:	2a00      	cmp	r2, #0
 800b618:	d1f5      	bne.n	800b606 <strncat+0xe>
 800b61a:	701a      	strb	r2, [r3, #0]
 800b61c:	e7f3      	b.n	800b606 <strncat+0xe>

0800b61e <strncpy>:
 800b61e:	4603      	mov	r3, r0
 800b620:	b510      	push	{r4, lr}
 800b622:	3901      	subs	r1, #1
 800b624:	b132      	cbz	r2, 800b634 <strncpy+0x16>
 800b626:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b62a:	3a01      	subs	r2, #1
 800b62c:	f803 4b01 	strb.w	r4, [r3], #1
 800b630:	2c00      	cmp	r4, #0
 800b632:	d1f7      	bne.n	800b624 <strncpy+0x6>
 800b634:	2100      	movs	r1, #0
 800b636:	441a      	add	r2, r3
 800b638:	4293      	cmp	r3, r2
 800b63a:	d100      	bne.n	800b63e <strncpy+0x20>
 800b63c:	bd10      	pop	{r4, pc}
 800b63e:	f803 1b01 	strb.w	r1, [r3], #1
 800b642:	e7f9      	b.n	800b638 <strncpy+0x1a>

0800b644 <_localeconv_r>:
 800b644:	4800      	ldr	r0, [pc, #0]	@ (800b648 <_localeconv_r+0x4>)
 800b646:	4770      	bx	lr
 800b648:	200001b8 	.word	0x200001b8

0800b64c <_close_r>:
 800b64c:	b538      	push	{r3, r4, r5, lr}
 800b64e:	2300      	movs	r3, #0
 800b650:	4d05      	ldr	r5, [pc, #20]	@ (800b668 <_close_r+0x1c>)
 800b652:	4604      	mov	r4, r0
 800b654:	4608      	mov	r0, r1
 800b656:	602b      	str	r3, [r5, #0]
 800b658:	f7fa fb4f 	bl	8005cfa <_close>
 800b65c:	1c43      	adds	r3, r0, #1
 800b65e:	d102      	bne.n	800b666 <_close_r+0x1a>
 800b660:	682b      	ldr	r3, [r5, #0]
 800b662:	b103      	cbz	r3, 800b666 <_close_r+0x1a>
 800b664:	6023      	str	r3, [r4, #0]
 800b666:	bd38      	pop	{r3, r4, r5, pc}
 800b668:	20000800 	.word	0x20000800

0800b66c <_lseek_r>:
 800b66c:	b538      	push	{r3, r4, r5, lr}
 800b66e:	4604      	mov	r4, r0
 800b670:	4608      	mov	r0, r1
 800b672:	4611      	mov	r1, r2
 800b674:	2200      	movs	r2, #0
 800b676:	4d05      	ldr	r5, [pc, #20]	@ (800b68c <_lseek_r+0x20>)
 800b678:	602a      	str	r2, [r5, #0]
 800b67a:	461a      	mov	r2, r3
 800b67c:	f7fa fb61 	bl	8005d42 <_lseek>
 800b680:	1c43      	adds	r3, r0, #1
 800b682:	d102      	bne.n	800b68a <_lseek_r+0x1e>
 800b684:	682b      	ldr	r3, [r5, #0]
 800b686:	b103      	cbz	r3, 800b68a <_lseek_r+0x1e>
 800b688:	6023      	str	r3, [r4, #0]
 800b68a:	bd38      	pop	{r3, r4, r5, pc}
 800b68c:	20000800 	.word	0x20000800

0800b690 <_read_r>:
 800b690:	b538      	push	{r3, r4, r5, lr}
 800b692:	4604      	mov	r4, r0
 800b694:	4608      	mov	r0, r1
 800b696:	4611      	mov	r1, r2
 800b698:	2200      	movs	r2, #0
 800b69a:	4d05      	ldr	r5, [pc, #20]	@ (800b6b0 <_read_r+0x20>)
 800b69c:	602a      	str	r2, [r5, #0]
 800b69e:	461a      	mov	r2, r3
 800b6a0:	f7fa faf2 	bl	8005c88 <_read>
 800b6a4:	1c43      	adds	r3, r0, #1
 800b6a6:	d102      	bne.n	800b6ae <_read_r+0x1e>
 800b6a8:	682b      	ldr	r3, [r5, #0]
 800b6aa:	b103      	cbz	r3, 800b6ae <_read_r+0x1e>
 800b6ac:	6023      	str	r3, [r4, #0]
 800b6ae:	bd38      	pop	{r3, r4, r5, pc}
 800b6b0:	20000800 	.word	0x20000800

0800b6b4 <_write_r>:
 800b6b4:	b538      	push	{r3, r4, r5, lr}
 800b6b6:	4604      	mov	r4, r0
 800b6b8:	4608      	mov	r0, r1
 800b6ba:	4611      	mov	r1, r2
 800b6bc:	2200      	movs	r2, #0
 800b6be:	4d05      	ldr	r5, [pc, #20]	@ (800b6d4 <_write_r+0x20>)
 800b6c0:	602a      	str	r2, [r5, #0]
 800b6c2:	461a      	mov	r2, r3
 800b6c4:	f7fa fafd 	bl	8005cc2 <_write>
 800b6c8:	1c43      	adds	r3, r0, #1
 800b6ca:	d102      	bne.n	800b6d2 <_write_r+0x1e>
 800b6cc:	682b      	ldr	r3, [r5, #0]
 800b6ce:	b103      	cbz	r3, 800b6d2 <_write_r+0x1e>
 800b6d0:	6023      	str	r3, [r4, #0]
 800b6d2:	bd38      	pop	{r3, r4, r5, pc}
 800b6d4:	20000800 	.word	0x20000800

0800b6d8 <__errno>:
 800b6d8:	4b01      	ldr	r3, [pc, #4]	@ (800b6e0 <__errno+0x8>)
 800b6da:	6818      	ldr	r0, [r3, #0]
 800b6dc:	4770      	bx	lr
 800b6de:	bf00      	nop
 800b6e0:	20000078 	.word	0x20000078

0800b6e4 <__libc_init_array>:
 800b6e4:	b570      	push	{r4, r5, r6, lr}
 800b6e6:	2600      	movs	r6, #0
 800b6e8:	4d0c      	ldr	r5, [pc, #48]	@ (800b71c <__libc_init_array+0x38>)
 800b6ea:	4c0d      	ldr	r4, [pc, #52]	@ (800b720 <__libc_init_array+0x3c>)
 800b6ec:	1b64      	subs	r4, r4, r5
 800b6ee:	10a4      	asrs	r4, r4, #2
 800b6f0:	42a6      	cmp	r6, r4
 800b6f2:	d109      	bne.n	800b708 <__libc_init_array+0x24>
 800b6f4:	f002 f86c 	bl	800d7d0 <_init>
 800b6f8:	2600      	movs	r6, #0
 800b6fa:	4d0a      	ldr	r5, [pc, #40]	@ (800b724 <__libc_init_array+0x40>)
 800b6fc:	4c0a      	ldr	r4, [pc, #40]	@ (800b728 <__libc_init_array+0x44>)
 800b6fe:	1b64      	subs	r4, r4, r5
 800b700:	10a4      	asrs	r4, r4, #2
 800b702:	42a6      	cmp	r6, r4
 800b704:	d105      	bne.n	800b712 <__libc_init_array+0x2e>
 800b706:	bd70      	pop	{r4, r5, r6, pc}
 800b708:	f855 3b04 	ldr.w	r3, [r5], #4
 800b70c:	4798      	blx	r3
 800b70e:	3601      	adds	r6, #1
 800b710:	e7ee      	b.n	800b6f0 <__libc_init_array+0xc>
 800b712:	f855 3b04 	ldr.w	r3, [r5], #4
 800b716:	4798      	blx	r3
 800b718:	3601      	adds	r6, #1
 800b71a:	e7f2      	b.n	800b702 <__libc_init_array+0x1e>
 800b71c:	0800e174 	.word	0x0800e174
 800b720:	0800e174 	.word	0x0800e174
 800b724:	0800e174 	.word	0x0800e174
 800b728:	0800e178 	.word	0x0800e178

0800b72c <__retarget_lock_init_recursive>:
 800b72c:	4770      	bx	lr

0800b72e <__retarget_lock_acquire_recursive>:
 800b72e:	4770      	bx	lr

0800b730 <__retarget_lock_release_recursive>:
 800b730:	4770      	bx	lr

0800b732 <memchr>:
 800b732:	4603      	mov	r3, r0
 800b734:	b510      	push	{r4, lr}
 800b736:	b2c9      	uxtb	r1, r1
 800b738:	4402      	add	r2, r0
 800b73a:	4293      	cmp	r3, r2
 800b73c:	4618      	mov	r0, r3
 800b73e:	d101      	bne.n	800b744 <memchr+0x12>
 800b740:	2000      	movs	r0, #0
 800b742:	e003      	b.n	800b74c <memchr+0x1a>
 800b744:	7804      	ldrb	r4, [r0, #0]
 800b746:	3301      	adds	r3, #1
 800b748:	428c      	cmp	r4, r1
 800b74a:	d1f6      	bne.n	800b73a <memchr+0x8>
 800b74c:	bd10      	pop	{r4, pc}

0800b74e <quorem>:
 800b74e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b752:	6903      	ldr	r3, [r0, #16]
 800b754:	690c      	ldr	r4, [r1, #16]
 800b756:	4607      	mov	r7, r0
 800b758:	42a3      	cmp	r3, r4
 800b75a:	db7e      	blt.n	800b85a <quorem+0x10c>
 800b75c:	3c01      	subs	r4, #1
 800b75e:	00a3      	lsls	r3, r4, #2
 800b760:	f100 0514 	add.w	r5, r0, #20
 800b764:	f101 0814 	add.w	r8, r1, #20
 800b768:	9300      	str	r3, [sp, #0]
 800b76a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b76e:	9301      	str	r3, [sp, #4]
 800b770:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b774:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b778:	3301      	adds	r3, #1
 800b77a:	429a      	cmp	r2, r3
 800b77c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b780:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b784:	d32e      	bcc.n	800b7e4 <quorem+0x96>
 800b786:	f04f 0a00 	mov.w	sl, #0
 800b78a:	46c4      	mov	ip, r8
 800b78c:	46ae      	mov	lr, r5
 800b78e:	46d3      	mov	fp, sl
 800b790:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b794:	b298      	uxth	r0, r3
 800b796:	fb06 a000 	mla	r0, r6, r0, sl
 800b79a:	0c1b      	lsrs	r3, r3, #16
 800b79c:	0c02      	lsrs	r2, r0, #16
 800b79e:	fb06 2303 	mla	r3, r6, r3, r2
 800b7a2:	f8de 2000 	ldr.w	r2, [lr]
 800b7a6:	b280      	uxth	r0, r0
 800b7a8:	b292      	uxth	r2, r2
 800b7aa:	1a12      	subs	r2, r2, r0
 800b7ac:	445a      	add	r2, fp
 800b7ae:	f8de 0000 	ldr.w	r0, [lr]
 800b7b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b7b6:	b29b      	uxth	r3, r3
 800b7b8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b7bc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b7c0:	b292      	uxth	r2, r2
 800b7c2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b7c6:	45e1      	cmp	r9, ip
 800b7c8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b7cc:	f84e 2b04 	str.w	r2, [lr], #4
 800b7d0:	d2de      	bcs.n	800b790 <quorem+0x42>
 800b7d2:	9b00      	ldr	r3, [sp, #0]
 800b7d4:	58eb      	ldr	r3, [r5, r3]
 800b7d6:	b92b      	cbnz	r3, 800b7e4 <quorem+0x96>
 800b7d8:	9b01      	ldr	r3, [sp, #4]
 800b7da:	3b04      	subs	r3, #4
 800b7dc:	429d      	cmp	r5, r3
 800b7de:	461a      	mov	r2, r3
 800b7e0:	d32f      	bcc.n	800b842 <quorem+0xf4>
 800b7e2:	613c      	str	r4, [r7, #16]
 800b7e4:	4638      	mov	r0, r7
 800b7e6:	f001 f97f 	bl	800cae8 <__mcmp>
 800b7ea:	2800      	cmp	r0, #0
 800b7ec:	db25      	blt.n	800b83a <quorem+0xec>
 800b7ee:	4629      	mov	r1, r5
 800b7f0:	2000      	movs	r0, #0
 800b7f2:	f858 2b04 	ldr.w	r2, [r8], #4
 800b7f6:	f8d1 c000 	ldr.w	ip, [r1]
 800b7fa:	fa1f fe82 	uxth.w	lr, r2
 800b7fe:	fa1f f38c 	uxth.w	r3, ip
 800b802:	eba3 030e 	sub.w	r3, r3, lr
 800b806:	4403      	add	r3, r0
 800b808:	0c12      	lsrs	r2, r2, #16
 800b80a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b80e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b812:	b29b      	uxth	r3, r3
 800b814:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b818:	45c1      	cmp	r9, r8
 800b81a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b81e:	f841 3b04 	str.w	r3, [r1], #4
 800b822:	d2e6      	bcs.n	800b7f2 <quorem+0xa4>
 800b824:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b828:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b82c:	b922      	cbnz	r2, 800b838 <quorem+0xea>
 800b82e:	3b04      	subs	r3, #4
 800b830:	429d      	cmp	r5, r3
 800b832:	461a      	mov	r2, r3
 800b834:	d30b      	bcc.n	800b84e <quorem+0x100>
 800b836:	613c      	str	r4, [r7, #16]
 800b838:	3601      	adds	r6, #1
 800b83a:	4630      	mov	r0, r6
 800b83c:	b003      	add	sp, #12
 800b83e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b842:	6812      	ldr	r2, [r2, #0]
 800b844:	3b04      	subs	r3, #4
 800b846:	2a00      	cmp	r2, #0
 800b848:	d1cb      	bne.n	800b7e2 <quorem+0x94>
 800b84a:	3c01      	subs	r4, #1
 800b84c:	e7c6      	b.n	800b7dc <quorem+0x8e>
 800b84e:	6812      	ldr	r2, [r2, #0]
 800b850:	3b04      	subs	r3, #4
 800b852:	2a00      	cmp	r2, #0
 800b854:	d1ef      	bne.n	800b836 <quorem+0xe8>
 800b856:	3c01      	subs	r4, #1
 800b858:	e7ea      	b.n	800b830 <quorem+0xe2>
 800b85a:	2000      	movs	r0, #0
 800b85c:	e7ee      	b.n	800b83c <quorem+0xee>
	...

0800b860 <_dtoa_r>:
 800b860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b864:	4614      	mov	r4, r2
 800b866:	461d      	mov	r5, r3
 800b868:	69c7      	ldr	r7, [r0, #28]
 800b86a:	b097      	sub	sp, #92	@ 0x5c
 800b86c:	4681      	mov	r9, r0
 800b86e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b872:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800b874:	b97f      	cbnz	r7, 800b896 <_dtoa_r+0x36>
 800b876:	2010      	movs	r0, #16
 800b878:	f000 fe0e 	bl	800c498 <malloc>
 800b87c:	4602      	mov	r2, r0
 800b87e:	f8c9 001c 	str.w	r0, [r9, #28]
 800b882:	b920      	cbnz	r0, 800b88e <_dtoa_r+0x2e>
 800b884:	21ef      	movs	r1, #239	@ 0xef
 800b886:	4bac      	ldr	r3, [pc, #688]	@ (800bb38 <_dtoa_r+0x2d8>)
 800b888:	48ac      	ldr	r0, [pc, #688]	@ (800bb3c <_dtoa_r+0x2dc>)
 800b88a:	f001 fe31 	bl	800d4f0 <__assert_func>
 800b88e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b892:	6007      	str	r7, [r0, #0]
 800b894:	60c7      	str	r7, [r0, #12]
 800b896:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b89a:	6819      	ldr	r1, [r3, #0]
 800b89c:	b159      	cbz	r1, 800b8b6 <_dtoa_r+0x56>
 800b89e:	685a      	ldr	r2, [r3, #4]
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	4093      	lsls	r3, r2
 800b8a4:	604a      	str	r2, [r1, #4]
 800b8a6:	608b      	str	r3, [r1, #8]
 800b8a8:	4648      	mov	r0, r9
 800b8aa:	f000 feeb 	bl	800c684 <_Bfree>
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b8b4:	601a      	str	r2, [r3, #0]
 800b8b6:	1e2b      	subs	r3, r5, #0
 800b8b8:	bfaf      	iteee	ge
 800b8ba:	2300      	movge	r3, #0
 800b8bc:	2201      	movlt	r2, #1
 800b8be:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b8c2:	9307      	strlt	r3, [sp, #28]
 800b8c4:	bfa8      	it	ge
 800b8c6:	6033      	strge	r3, [r6, #0]
 800b8c8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800b8cc:	4b9c      	ldr	r3, [pc, #624]	@ (800bb40 <_dtoa_r+0x2e0>)
 800b8ce:	bfb8      	it	lt
 800b8d0:	6032      	strlt	r2, [r6, #0]
 800b8d2:	ea33 0308 	bics.w	r3, r3, r8
 800b8d6:	d112      	bne.n	800b8fe <_dtoa_r+0x9e>
 800b8d8:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b8dc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b8de:	6013      	str	r3, [r2, #0]
 800b8e0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b8e4:	4323      	orrs	r3, r4
 800b8e6:	f000 855e 	beq.w	800c3a6 <_dtoa_r+0xb46>
 800b8ea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b8ec:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800bb44 <_dtoa_r+0x2e4>
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	f000 8560 	beq.w	800c3b6 <_dtoa_r+0xb56>
 800b8f6:	f10a 0303 	add.w	r3, sl, #3
 800b8fa:	f000 bd5a 	b.w	800c3b2 <_dtoa_r+0xb52>
 800b8fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b902:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b906:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b90a:	2200      	movs	r2, #0
 800b90c:	2300      	movs	r3, #0
 800b90e:	f7f5 f855 	bl	80009bc <__aeabi_dcmpeq>
 800b912:	4607      	mov	r7, r0
 800b914:	b158      	cbz	r0, 800b92e <_dtoa_r+0xce>
 800b916:	2301      	movs	r3, #1
 800b918:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b91a:	6013      	str	r3, [r2, #0]
 800b91c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b91e:	b113      	cbz	r3, 800b926 <_dtoa_r+0xc6>
 800b920:	4b89      	ldr	r3, [pc, #548]	@ (800bb48 <_dtoa_r+0x2e8>)
 800b922:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b924:	6013      	str	r3, [r2, #0]
 800b926:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800bb4c <_dtoa_r+0x2ec>
 800b92a:	f000 bd44 	b.w	800c3b6 <_dtoa_r+0xb56>
 800b92e:	ab14      	add	r3, sp, #80	@ 0x50
 800b930:	9301      	str	r3, [sp, #4]
 800b932:	ab15      	add	r3, sp, #84	@ 0x54
 800b934:	9300      	str	r3, [sp, #0]
 800b936:	4648      	mov	r0, r9
 800b938:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b93c:	f001 f984 	bl	800cc48 <__d2b>
 800b940:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800b944:	9003      	str	r0, [sp, #12]
 800b946:	2e00      	cmp	r6, #0
 800b948:	d078      	beq.n	800ba3c <_dtoa_r+0x1dc>
 800b94a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b94e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b950:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b954:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b958:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b95c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b960:	9712      	str	r7, [sp, #72]	@ 0x48
 800b962:	4619      	mov	r1, r3
 800b964:	2200      	movs	r2, #0
 800b966:	4b7a      	ldr	r3, [pc, #488]	@ (800bb50 <_dtoa_r+0x2f0>)
 800b968:	f7f4 fc08 	bl	800017c <__aeabi_dsub>
 800b96c:	a36c      	add	r3, pc, #432	@ (adr r3, 800bb20 <_dtoa_r+0x2c0>)
 800b96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b972:	f7f4 fdbb 	bl	80004ec <__aeabi_dmul>
 800b976:	a36c      	add	r3, pc, #432	@ (adr r3, 800bb28 <_dtoa_r+0x2c8>)
 800b978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b97c:	f7f4 fc00 	bl	8000180 <__adddf3>
 800b980:	4604      	mov	r4, r0
 800b982:	4630      	mov	r0, r6
 800b984:	460d      	mov	r5, r1
 800b986:	f7f4 fd47 	bl	8000418 <__aeabi_i2d>
 800b98a:	a369      	add	r3, pc, #420	@ (adr r3, 800bb30 <_dtoa_r+0x2d0>)
 800b98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b990:	f7f4 fdac 	bl	80004ec <__aeabi_dmul>
 800b994:	4602      	mov	r2, r0
 800b996:	460b      	mov	r3, r1
 800b998:	4620      	mov	r0, r4
 800b99a:	4629      	mov	r1, r5
 800b99c:	f7f4 fbf0 	bl	8000180 <__adddf3>
 800b9a0:	4604      	mov	r4, r0
 800b9a2:	460d      	mov	r5, r1
 800b9a4:	f7f5 f852 	bl	8000a4c <__aeabi_d2iz>
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	4607      	mov	r7, r0
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	4620      	mov	r0, r4
 800b9b0:	4629      	mov	r1, r5
 800b9b2:	f7f5 f80d 	bl	80009d0 <__aeabi_dcmplt>
 800b9b6:	b140      	cbz	r0, 800b9ca <_dtoa_r+0x16a>
 800b9b8:	4638      	mov	r0, r7
 800b9ba:	f7f4 fd2d 	bl	8000418 <__aeabi_i2d>
 800b9be:	4622      	mov	r2, r4
 800b9c0:	462b      	mov	r3, r5
 800b9c2:	f7f4 fffb 	bl	80009bc <__aeabi_dcmpeq>
 800b9c6:	b900      	cbnz	r0, 800b9ca <_dtoa_r+0x16a>
 800b9c8:	3f01      	subs	r7, #1
 800b9ca:	2f16      	cmp	r7, #22
 800b9cc:	d854      	bhi.n	800ba78 <_dtoa_r+0x218>
 800b9ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b9d2:	4b60      	ldr	r3, [pc, #384]	@ (800bb54 <_dtoa_r+0x2f4>)
 800b9d4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9dc:	f7f4 fff8 	bl	80009d0 <__aeabi_dcmplt>
 800b9e0:	2800      	cmp	r0, #0
 800b9e2:	d04b      	beq.n	800ba7c <_dtoa_r+0x21c>
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	3f01      	subs	r7, #1
 800b9e8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b9ea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b9ec:	1b9b      	subs	r3, r3, r6
 800b9ee:	1e5a      	subs	r2, r3, #1
 800b9f0:	bf49      	itett	mi
 800b9f2:	f1c3 0301 	rsbmi	r3, r3, #1
 800b9f6:	2300      	movpl	r3, #0
 800b9f8:	9304      	strmi	r3, [sp, #16]
 800b9fa:	2300      	movmi	r3, #0
 800b9fc:	9209      	str	r2, [sp, #36]	@ 0x24
 800b9fe:	bf54      	ite	pl
 800ba00:	9304      	strpl	r3, [sp, #16]
 800ba02:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800ba04:	2f00      	cmp	r7, #0
 800ba06:	db3b      	blt.n	800ba80 <_dtoa_r+0x220>
 800ba08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba0a:	970e      	str	r7, [sp, #56]	@ 0x38
 800ba0c:	443b      	add	r3, r7
 800ba0e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba10:	2300      	movs	r3, #0
 800ba12:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba14:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ba16:	2b09      	cmp	r3, #9
 800ba18:	d865      	bhi.n	800bae6 <_dtoa_r+0x286>
 800ba1a:	2b05      	cmp	r3, #5
 800ba1c:	bfc4      	itt	gt
 800ba1e:	3b04      	subgt	r3, #4
 800ba20:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800ba22:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ba24:	bfc8      	it	gt
 800ba26:	2400      	movgt	r4, #0
 800ba28:	f1a3 0302 	sub.w	r3, r3, #2
 800ba2c:	bfd8      	it	le
 800ba2e:	2401      	movle	r4, #1
 800ba30:	2b03      	cmp	r3, #3
 800ba32:	d864      	bhi.n	800bafe <_dtoa_r+0x29e>
 800ba34:	e8df f003 	tbb	[pc, r3]
 800ba38:	2c385553 	.word	0x2c385553
 800ba3c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800ba40:	441e      	add	r6, r3
 800ba42:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ba46:	2b20      	cmp	r3, #32
 800ba48:	bfc1      	itttt	gt
 800ba4a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ba4e:	fa08 f803 	lslgt.w	r8, r8, r3
 800ba52:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ba56:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ba5a:	bfd6      	itet	le
 800ba5c:	f1c3 0320 	rsble	r3, r3, #32
 800ba60:	ea48 0003 	orrgt.w	r0, r8, r3
 800ba64:	fa04 f003 	lslle.w	r0, r4, r3
 800ba68:	f7f4 fcc6 	bl	80003f8 <__aeabi_ui2d>
 800ba6c:	2201      	movs	r2, #1
 800ba6e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ba72:	3e01      	subs	r6, #1
 800ba74:	9212      	str	r2, [sp, #72]	@ 0x48
 800ba76:	e774      	b.n	800b962 <_dtoa_r+0x102>
 800ba78:	2301      	movs	r3, #1
 800ba7a:	e7b5      	b.n	800b9e8 <_dtoa_r+0x188>
 800ba7c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800ba7e:	e7b4      	b.n	800b9ea <_dtoa_r+0x18a>
 800ba80:	9b04      	ldr	r3, [sp, #16]
 800ba82:	1bdb      	subs	r3, r3, r7
 800ba84:	9304      	str	r3, [sp, #16]
 800ba86:	427b      	negs	r3, r7
 800ba88:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	930e      	str	r3, [sp, #56]	@ 0x38
 800ba8e:	e7c1      	b.n	800ba14 <_dtoa_r+0x1b4>
 800ba90:	2301      	movs	r3, #1
 800ba92:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba94:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ba96:	eb07 0b03 	add.w	fp, r7, r3
 800ba9a:	f10b 0301 	add.w	r3, fp, #1
 800ba9e:	2b01      	cmp	r3, #1
 800baa0:	9308      	str	r3, [sp, #32]
 800baa2:	bfb8      	it	lt
 800baa4:	2301      	movlt	r3, #1
 800baa6:	e006      	b.n	800bab6 <_dtoa_r+0x256>
 800baa8:	2301      	movs	r3, #1
 800baaa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800baac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800baae:	2b00      	cmp	r3, #0
 800bab0:	dd28      	ble.n	800bb04 <_dtoa_r+0x2a4>
 800bab2:	469b      	mov	fp, r3
 800bab4:	9308      	str	r3, [sp, #32]
 800bab6:	2100      	movs	r1, #0
 800bab8:	2204      	movs	r2, #4
 800baba:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800babe:	f102 0514 	add.w	r5, r2, #20
 800bac2:	429d      	cmp	r5, r3
 800bac4:	d926      	bls.n	800bb14 <_dtoa_r+0x2b4>
 800bac6:	6041      	str	r1, [r0, #4]
 800bac8:	4648      	mov	r0, r9
 800baca:	f000 fd9b 	bl	800c604 <_Balloc>
 800bace:	4682      	mov	sl, r0
 800bad0:	2800      	cmp	r0, #0
 800bad2:	d143      	bne.n	800bb5c <_dtoa_r+0x2fc>
 800bad4:	4602      	mov	r2, r0
 800bad6:	f240 11af 	movw	r1, #431	@ 0x1af
 800bada:	4b1f      	ldr	r3, [pc, #124]	@ (800bb58 <_dtoa_r+0x2f8>)
 800badc:	e6d4      	b.n	800b888 <_dtoa_r+0x28>
 800bade:	2300      	movs	r3, #0
 800bae0:	e7e3      	b.n	800baaa <_dtoa_r+0x24a>
 800bae2:	2300      	movs	r3, #0
 800bae4:	e7d5      	b.n	800ba92 <_dtoa_r+0x232>
 800bae6:	2401      	movs	r4, #1
 800bae8:	2300      	movs	r3, #0
 800baea:	940b      	str	r4, [sp, #44]	@ 0x2c
 800baec:	9320      	str	r3, [sp, #128]	@ 0x80
 800baee:	f04f 3bff 	mov.w	fp, #4294967295
 800baf2:	2200      	movs	r2, #0
 800baf4:	2312      	movs	r3, #18
 800baf6:	f8cd b020 	str.w	fp, [sp, #32]
 800bafa:	9221      	str	r2, [sp, #132]	@ 0x84
 800bafc:	e7db      	b.n	800bab6 <_dtoa_r+0x256>
 800bafe:	2301      	movs	r3, #1
 800bb00:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bb02:	e7f4      	b.n	800baee <_dtoa_r+0x28e>
 800bb04:	f04f 0b01 	mov.w	fp, #1
 800bb08:	465b      	mov	r3, fp
 800bb0a:	f8cd b020 	str.w	fp, [sp, #32]
 800bb0e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800bb12:	e7d0      	b.n	800bab6 <_dtoa_r+0x256>
 800bb14:	3101      	adds	r1, #1
 800bb16:	0052      	lsls	r2, r2, #1
 800bb18:	e7d1      	b.n	800babe <_dtoa_r+0x25e>
 800bb1a:	bf00      	nop
 800bb1c:	f3af 8000 	nop.w
 800bb20:	636f4361 	.word	0x636f4361
 800bb24:	3fd287a7 	.word	0x3fd287a7
 800bb28:	8b60c8b3 	.word	0x8b60c8b3
 800bb2c:	3fc68a28 	.word	0x3fc68a28
 800bb30:	509f79fb 	.word	0x509f79fb
 800bb34:	3fd34413 	.word	0x3fd34413
 800bb38:	0800de33 	.word	0x0800de33
 800bb3c:	0800de4a 	.word	0x0800de4a
 800bb40:	7ff00000 	.word	0x7ff00000
 800bb44:	0800de2f 	.word	0x0800de2f
 800bb48:	0800de03 	.word	0x0800de03
 800bb4c:	0800de02 	.word	0x0800de02
 800bb50:	3ff80000 	.word	0x3ff80000
 800bb54:	0800df98 	.word	0x0800df98
 800bb58:	0800dea2 	.word	0x0800dea2
 800bb5c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bb60:	6018      	str	r0, [r3, #0]
 800bb62:	9b08      	ldr	r3, [sp, #32]
 800bb64:	2b0e      	cmp	r3, #14
 800bb66:	f200 80a1 	bhi.w	800bcac <_dtoa_r+0x44c>
 800bb6a:	2c00      	cmp	r4, #0
 800bb6c:	f000 809e 	beq.w	800bcac <_dtoa_r+0x44c>
 800bb70:	2f00      	cmp	r7, #0
 800bb72:	dd33      	ble.n	800bbdc <_dtoa_r+0x37c>
 800bb74:	4b9c      	ldr	r3, [pc, #624]	@ (800bde8 <_dtoa_r+0x588>)
 800bb76:	f007 020f 	and.w	r2, r7, #15
 800bb7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb7e:	05f8      	lsls	r0, r7, #23
 800bb80:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bb84:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 800bb88:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bb8c:	d516      	bpl.n	800bbbc <_dtoa_r+0x35c>
 800bb8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bb92:	4b96      	ldr	r3, [pc, #600]	@ (800bdec <_dtoa_r+0x58c>)
 800bb94:	2603      	movs	r6, #3
 800bb96:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bb9a:	f7f4 fdd1 	bl	8000740 <__aeabi_ddiv>
 800bb9e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bba2:	f004 040f 	and.w	r4, r4, #15
 800bba6:	4d91      	ldr	r5, [pc, #580]	@ (800bdec <_dtoa_r+0x58c>)
 800bba8:	b954      	cbnz	r4, 800bbc0 <_dtoa_r+0x360>
 800bbaa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bbae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bbb2:	f7f4 fdc5 	bl	8000740 <__aeabi_ddiv>
 800bbb6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bbba:	e028      	b.n	800bc0e <_dtoa_r+0x3ae>
 800bbbc:	2602      	movs	r6, #2
 800bbbe:	e7f2      	b.n	800bba6 <_dtoa_r+0x346>
 800bbc0:	07e1      	lsls	r1, r4, #31
 800bbc2:	d508      	bpl.n	800bbd6 <_dtoa_r+0x376>
 800bbc4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bbc8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bbcc:	f7f4 fc8e 	bl	80004ec <__aeabi_dmul>
 800bbd0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bbd4:	3601      	adds	r6, #1
 800bbd6:	1064      	asrs	r4, r4, #1
 800bbd8:	3508      	adds	r5, #8
 800bbda:	e7e5      	b.n	800bba8 <_dtoa_r+0x348>
 800bbdc:	f000 80af 	beq.w	800bd3e <_dtoa_r+0x4de>
 800bbe0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bbe4:	427c      	negs	r4, r7
 800bbe6:	4b80      	ldr	r3, [pc, #512]	@ (800bde8 <_dtoa_r+0x588>)
 800bbe8:	f004 020f 	and.w	r2, r4, #15
 800bbec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bbf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf4:	f7f4 fc7a 	bl	80004ec <__aeabi_dmul>
 800bbf8:	2602      	movs	r6, #2
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bc00:	4d7a      	ldr	r5, [pc, #488]	@ (800bdec <_dtoa_r+0x58c>)
 800bc02:	1124      	asrs	r4, r4, #4
 800bc04:	2c00      	cmp	r4, #0
 800bc06:	f040 808f 	bne.w	800bd28 <_dtoa_r+0x4c8>
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d1d3      	bne.n	800bbb6 <_dtoa_r+0x356>
 800bc0e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800bc12:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	f000 8094 	beq.w	800bd42 <_dtoa_r+0x4e2>
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	4620      	mov	r0, r4
 800bc1e:	4629      	mov	r1, r5
 800bc20:	4b73      	ldr	r3, [pc, #460]	@ (800bdf0 <_dtoa_r+0x590>)
 800bc22:	f7f4 fed5 	bl	80009d0 <__aeabi_dcmplt>
 800bc26:	2800      	cmp	r0, #0
 800bc28:	f000 808b 	beq.w	800bd42 <_dtoa_r+0x4e2>
 800bc2c:	9b08      	ldr	r3, [sp, #32]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	f000 8087 	beq.w	800bd42 <_dtoa_r+0x4e2>
 800bc34:	f1bb 0f00 	cmp.w	fp, #0
 800bc38:	dd34      	ble.n	800bca4 <_dtoa_r+0x444>
 800bc3a:	4620      	mov	r0, r4
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	4629      	mov	r1, r5
 800bc40:	4b6c      	ldr	r3, [pc, #432]	@ (800bdf4 <_dtoa_r+0x594>)
 800bc42:	f7f4 fc53 	bl	80004ec <__aeabi_dmul>
 800bc46:	465c      	mov	r4, fp
 800bc48:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bc4c:	f107 38ff 	add.w	r8, r7, #4294967295
 800bc50:	3601      	adds	r6, #1
 800bc52:	4630      	mov	r0, r6
 800bc54:	f7f4 fbe0 	bl	8000418 <__aeabi_i2d>
 800bc58:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bc5c:	f7f4 fc46 	bl	80004ec <__aeabi_dmul>
 800bc60:	2200      	movs	r2, #0
 800bc62:	4b65      	ldr	r3, [pc, #404]	@ (800bdf8 <_dtoa_r+0x598>)
 800bc64:	f7f4 fa8c 	bl	8000180 <__adddf3>
 800bc68:	4605      	mov	r5, r0
 800bc6a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bc6e:	2c00      	cmp	r4, #0
 800bc70:	d16a      	bne.n	800bd48 <_dtoa_r+0x4e8>
 800bc72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc76:	2200      	movs	r2, #0
 800bc78:	4b60      	ldr	r3, [pc, #384]	@ (800bdfc <_dtoa_r+0x59c>)
 800bc7a:	f7f4 fa7f 	bl	800017c <__aeabi_dsub>
 800bc7e:	4602      	mov	r2, r0
 800bc80:	460b      	mov	r3, r1
 800bc82:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bc86:	462a      	mov	r2, r5
 800bc88:	4633      	mov	r3, r6
 800bc8a:	f7f4 febf 	bl	8000a0c <__aeabi_dcmpgt>
 800bc8e:	2800      	cmp	r0, #0
 800bc90:	f040 8298 	bne.w	800c1c4 <_dtoa_r+0x964>
 800bc94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc98:	462a      	mov	r2, r5
 800bc9a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bc9e:	f7f4 fe97 	bl	80009d0 <__aeabi_dcmplt>
 800bca2:	bb38      	cbnz	r0, 800bcf4 <_dtoa_r+0x494>
 800bca4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bca8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800bcac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	f2c0 8157 	blt.w	800bf62 <_dtoa_r+0x702>
 800bcb4:	2f0e      	cmp	r7, #14
 800bcb6:	f300 8154 	bgt.w	800bf62 <_dtoa_r+0x702>
 800bcba:	4b4b      	ldr	r3, [pc, #300]	@ (800bde8 <_dtoa_r+0x588>)
 800bcbc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bcc0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bcc4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bcc8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	f280 80e5 	bge.w	800be9a <_dtoa_r+0x63a>
 800bcd0:	9b08      	ldr	r3, [sp, #32]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	f300 80e1 	bgt.w	800be9a <_dtoa_r+0x63a>
 800bcd8:	d10c      	bne.n	800bcf4 <_dtoa_r+0x494>
 800bcda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bcde:	2200      	movs	r2, #0
 800bce0:	4b46      	ldr	r3, [pc, #280]	@ (800bdfc <_dtoa_r+0x59c>)
 800bce2:	f7f4 fc03 	bl	80004ec <__aeabi_dmul>
 800bce6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bcea:	f7f4 fe85 	bl	80009f8 <__aeabi_dcmpge>
 800bcee:	2800      	cmp	r0, #0
 800bcf0:	f000 8266 	beq.w	800c1c0 <_dtoa_r+0x960>
 800bcf4:	2400      	movs	r4, #0
 800bcf6:	4625      	mov	r5, r4
 800bcf8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bcfa:	4656      	mov	r6, sl
 800bcfc:	ea6f 0803 	mvn.w	r8, r3
 800bd00:	2700      	movs	r7, #0
 800bd02:	4621      	mov	r1, r4
 800bd04:	4648      	mov	r0, r9
 800bd06:	f000 fcbd 	bl	800c684 <_Bfree>
 800bd0a:	2d00      	cmp	r5, #0
 800bd0c:	f000 80bd 	beq.w	800be8a <_dtoa_r+0x62a>
 800bd10:	b12f      	cbz	r7, 800bd1e <_dtoa_r+0x4be>
 800bd12:	42af      	cmp	r7, r5
 800bd14:	d003      	beq.n	800bd1e <_dtoa_r+0x4be>
 800bd16:	4639      	mov	r1, r7
 800bd18:	4648      	mov	r0, r9
 800bd1a:	f000 fcb3 	bl	800c684 <_Bfree>
 800bd1e:	4629      	mov	r1, r5
 800bd20:	4648      	mov	r0, r9
 800bd22:	f000 fcaf 	bl	800c684 <_Bfree>
 800bd26:	e0b0      	b.n	800be8a <_dtoa_r+0x62a>
 800bd28:	07e2      	lsls	r2, r4, #31
 800bd2a:	d505      	bpl.n	800bd38 <_dtoa_r+0x4d8>
 800bd2c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bd30:	f7f4 fbdc 	bl	80004ec <__aeabi_dmul>
 800bd34:	2301      	movs	r3, #1
 800bd36:	3601      	adds	r6, #1
 800bd38:	1064      	asrs	r4, r4, #1
 800bd3a:	3508      	adds	r5, #8
 800bd3c:	e762      	b.n	800bc04 <_dtoa_r+0x3a4>
 800bd3e:	2602      	movs	r6, #2
 800bd40:	e765      	b.n	800bc0e <_dtoa_r+0x3ae>
 800bd42:	46b8      	mov	r8, r7
 800bd44:	9c08      	ldr	r4, [sp, #32]
 800bd46:	e784      	b.n	800bc52 <_dtoa_r+0x3f2>
 800bd48:	4b27      	ldr	r3, [pc, #156]	@ (800bde8 <_dtoa_r+0x588>)
 800bd4a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bd4c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bd50:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bd54:	4454      	add	r4, sl
 800bd56:	2900      	cmp	r1, #0
 800bd58:	d054      	beq.n	800be04 <_dtoa_r+0x5a4>
 800bd5a:	2000      	movs	r0, #0
 800bd5c:	4928      	ldr	r1, [pc, #160]	@ (800be00 <_dtoa_r+0x5a0>)
 800bd5e:	f7f4 fcef 	bl	8000740 <__aeabi_ddiv>
 800bd62:	4633      	mov	r3, r6
 800bd64:	462a      	mov	r2, r5
 800bd66:	f7f4 fa09 	bl	800017c <__aeabi_dsub>
 800bd6a:	4656      	mov	r6, sl
 800bd6c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bd70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd74:	f7f4 fe6a 	bl	8000a4c <__aeabi_d2iz>
 800bd78:	4605      	mov	r5, r0
 800bd7a:	f7f4 fb4d 	bl	8000418 <__aeabi_i2d>
 800bd7e:	4602      	mov	r2, r0
 800bd80:	460b      	mov	r3, r1
 800bd82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd86:	f7f4 f9f9 	bl	800017c <__aeabi_dsub>
 800bd8a:	4602      	mov	r2, r0
 800bd8c:	460b      	mov	r3, r1
 800bd8e:	3530      	adds	r5, #48	@ 0x30
 800bd90:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bd94:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bd98:	f806 5b01 	strb.w	r5, [r6], #1
 800bd9c:	f7f4 fe18 	bl	80009d0 <__aeabi_dcmplt>
 800bda0:	2800      	cmp	r0, #0
 800bda2:	d172      	bne.n	800be8a <_dtoa_r+0x62a>
 800bda4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bda8:	2000      	movs	r0, #0
 800bdaa:	4911      	ldr	r1, [pc, #68]	@ (800bdf0 <_dtoa_r+0x590>)
 800bdac:	f7f4 f9e6 	bl	800017c <__aeabi_dsub>
 800bdb0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bdb4:	f7f4 fe0c 	bl	80009d0 <__aeabi_dcmplt>
 800bdb8:	2800      	cmp	r0, #0
 800bdba:	f040 80b4 	bne.w	800bf26 <_dtoa_r+0x6c6>
 800bdbe:	42a6      	cmp	r6, r4
 800bdc0:	f43f af70 	beq.w	800bca4 <_dtoa_r+0x444>
 800bdc4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bdc8:	2200      	movs	r2, #0
 800bdca:	4b0a      	ldr	r3, [pc, #40]	@ (800bdf4 <_dtoa_r+0x594>)
 800bdcc:	f7f4 fb8e 	bl	80004ec <__aeabi_dmul>
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bdd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bdda:	4b06      	ldr	r3, [pc, #24]	@ (800bdf4 <_dtoa_r+0x594>)
 800bddc:	f7f4 fb86 	bl	80004ec <__aeabi_dmul>
 800bde0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bde4:	e7c4      	b.n	800bd70 <_dtoa_r+0x510>
 800bde6:	bf00      	nop
 800bde8:	0800df98 	.word	0x0800df98
 800bdec:	0800df70 	.word	0x0800df70
 800bdf0:	3ff00000 	.word	0x3ff00000
 800bdf4:	40240000 	.word	0x40240000
 800bdf8:	401c0000 	.word	0x401c0000
 800bdfc:	40140000 	.word	0x40140000
 800be00:	3fe00000 	.word	0x3fe00000
 800be04:	4631      	mov	r1, r6
 800be06:	4628      	mov	r0, r5
 800be08:	f7f4 fb70 	bl	80004ec <__aeabi_dmul>
 800be0c:	4656      	mov	r6, sl
 800be0e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800be12:	9413      	str	r4, [sp, #76]	@ 0x4c
 800be14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be18:	f7f4 fe18 	bl	8000a4c <__aeabi_d2iz>
 800be1c:	4605      	mov	r5, r0
 800be1e:	f7f4 fafb 	bl	8000418 <__aeabi_i2d>
 800be22:	4602      	mov	r2, r0
 800be24:	460b      	mov	r3, r1
 800be26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be2a:	f7f4 f9a7 	bl	800017c <__aeabi_dsub>
 800be2e:	4602      	mov	r2, r0
 800be30:	460b      	mov	r3, r1
 800be32:	3530      	adds	r5, #48	@ 0x30
 800be34:	f806 5b01 	strb.w	r5, [r6], #1
 800be38:	42a6      	cmp	r6, r4
 800be3a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800be3e:	f04f 0200 	mov.w	r2, #0
 800be42:	d124      	bne.n	800be8e <_dtoa_r+0x62e>
 800be44:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800be48:	4bae      	ldr	r3, [pc, #696]	@ (800c104 <_dtoa_r+0x8a4>)
 800be4a:	f7f4 f999 	bl	8000180 <__adddf3>
 800be4e:	4602      	mov	r2, r0
 800be50:	460b      	mov	r3, r1
 800be52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be56:	f7f4 fdd9 	bl	8000a0c <__aeabi_dcmpgt>
 800be5a:	2800      	cmp	r0, #0
 800be5c:	d163      	bne.n	800bf26 <_dtoa_r+0x6c6>
 800be5e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800be62:	2000      	movs	r0, #0
 800be64:	49a7      	ldr	r1, [pc, #668]	@ (800c104 <_dtoa_r+0x8a4>)
 800be66:	f7f4 f989 	bl	800017c <__aeabi_dsub>
 800be6a:	4602      	mov	r2, r0
 800be6c:	460b      	mov	r3, r1
 800be6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be72:	f7f4 fdad 	bl	80009d0 <__aeabi_dcmplt>
 800be76:	2800      	cmp	r0, #0
 800be78:	f43f af14 	beq.w	800bca4 <_dtoa_r+0x444>
 800be7c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800be7e:	1e73      	subs	r3, r6, #1
 800be80:	9313      	str	r3, [sp, #76]	@ 0x4c
 800be82:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800be86:	2b30      	cmp	r3, #48	@ 0x30
 800be88:	d0f8      	beq.n	800be7c <_dtoa_r+0x61c>
 800be8a:	4647      	mov	r7, r8
 800be8c:	e03b      	b.n	800bf06 <_dtoa_r+0x6a6>
 800be8e:	4b9e      	ldr	r3, [pc, #632]	@ (800c108 <_dtoa_r+0x8a8>)
 800be90:	f7f4 fb2c 	bl	80004ec <__aeabi_dmul>
 800be94:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800be98:	e7bc      	b.n	800be14 <_dtoa_r+0x5b4>
 800be9a:	4656      	mov	r6, sl
 800be9c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800bea0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bea4:	4620      	mov	r0, r4
 800bea6:	4629      	mov	r1, r5
 800bea8:	f7f4 fc4a 	bl	8000740 <__aeabi_ddiv>
 800beac:	f7f4 fdce 	bl	8000a4c <__aeabi_d2iz>
 800beb0:	4680      	mov	r8, r0
 800beb2:	f7f4 fab1 	bl	8000418 <__aeabi_i2d>
 800beb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800beba:	f7f4 fb17 	bl	80004ec <__aeabi_dmul>
 800bebe:	4602      	mov	r2, r0
 800bec0:	460b      	mov	r3, r1
 800bec2:	4620      	mov	r0, r4
 800bec4:	4629      	mov	r1, r5
 800bec6:	f7f4 f959 	bl	800017c <__aeabi_dsub>
 800beca:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bece:	9d08      	ldr	r5, [sp, #32]
 800bed0:	f806 4b01 	strb.w	r4, [r6], #1
 800bed4:	eba6 040a 	sub.w	r4, r6, sl
 800bed8:	42a5      	cmp	r5, r4
 800beda:	4602      	mov	r2, r0
 800bedc:	460b      	mov	r3, r1
 800bede:	d133      	bne.n	800bf48 <_dtoa_r+0x6e8>
 800bee0:	f7f4 f94e 	bl	8000180 <__adddf3>
 800bee4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bee8:	4604      	mov	r4, r0
 800beea:	460d      	mov	r5, r1
 800beec:	f7f4 fd8e 	bl	8000a0c <__aeabi_dcmpgt>
 800bef0:	b9c0      	cbnz	r0, 800bf24 <_dtoa_r+0x6c4>
 800bef2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bef6:	4620      	mov	r0, r4
 800bef8:	4629      	mov	r1, r5
 800befa:	f7f4 fd5f 	bl	80009bc <__aeabi_dcmpeq>
 800befe:	b110      	cbz	r0, 800bf06 <_dtoa_r+0x6a6>
 800bf00:	f018 0f01 	tst.w	r8, #1
 800bf04:	d10e      	bne.n	800bf24 <_dtoa_r+0x6c4>
 800bf06:	4648      	mov	r0, r9
 800bf08:	9903      	ldr	r1, [sp, #12]
 800bf0a:	f000 fbbb 	bl	800c684 <_Bfree>
 800bf0e:	2300      	movs	r3, #0
 800bf10:	7033      	strb	r3, [r6, #0]
 800bf12:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800bf14:	3701      	adds	r7, #1
 800bf16:	601f      	str	r7, [r3, #0]
 800bf18:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	f000 824b 	beq.w	800c3b6 <_dtoa_r+0xb56>
 800bf20:	601e      	str	r6, [r3, #0]
 800bf22:	e248      	b.n	800c3b6 <_dtoa_r+0xb56>
 800bf24:	46b8      	mov	r8, r7
 800bf26:	4633      	mov	r3, r6
 800bf28:	461e      	mov	r6, r3
 800bf2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bf2e:	2a39      	cmp	r2, #57	@ 0x39
 800bf30:	d106      	bne.n	800bf40 <_dtoa_r+0x6e0>
 800bf32:	459a      	cmp	sl, r3
 800bf34:	d1f8      	bne.n	800bf28 <_dtoa_r+0x6c8>
 800bf36:	2230      	movs	r2, #48	@ 0x30
 800bf38:	f108 0801 	add.w	r8, r8, #1
 800bf3c:	f88a 2000 	strb.w	r2, [sl]
 800bf40:	781a      	ldrb	r2, [r3, #0]
 800bf42:	3201      	adds	r2, #1
 800bf44:	701a      	strb	r2, [r3, #0]
 800bf46:	e7a0      	b.n	800be8a <_dtoa_r+0x62a>
 800bf48:	2200      	movs	r2, #0
 800bf4a:	4b6f      	ldr	r3, [pc, #444]	@ (800c108 <_dtoa_r+0x8a8>)
 800bf4c:	f7f4 face 	bl	80004ec <__aeabi_dmul>
 800bf50:	2200      	movs	r2, #0
 800bf52:	2300      	movs	r3, #0
 800bf54:	4604      	mov	r4, r0
 800bf56:	460d      	mov	r5, r1
 800bf58:	f7f4 fd30 	bl	80009bc <__aeabi_dcmpeq>
 800bf5c:	2800      	cmp	r0, #0
 800bf5e:	d09f      	beq.n	800bea0 <_dtoa_r+0x640>
 800bf60:	e7d1      	b.n	800bf06 <_dtoa_r+0x6a6>
 800bf62:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bf64:	2a00      	cmp	r2, #0
 800bf66:	f000 80ea 	beq.w	800c13e <_dtoa_r+0x8de>
 800bf6a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bf6c:	2a01      	cmp	r2, #1
 800bf6e:	f300 80cd 	bgt.w	800c10c <_dtoa_r+0x8ac>
 800bf72:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800bf74:	2a00      	cmp	r2, #0
 800bf76:	f000 80c1 	beq.w	800c0fc <_dtoa_r+0x89c>
 800bf7a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bf7e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bf80:	9e04      	ldr	r6, [sp, #16]
 800bf82:	9a04      	ldr	r2, [sp, #16]
 800bf84:	2101      	movs	r1, #1
 800bf86:	441a      	add	r2, r3
 800bf88:	9204      	str	r2, [sp, #16]
 800bf8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf8c:	4648      	mov	r0, r9
 800bf8e:	441a      	add	r2, r3
 800bf90:	9209      	str	r2, [sp, #36]	@ 0x24
 800bf92:	f000 fc2b 	bl	800c7ec <__i2b>
 800bf96:	4605      	mov	r5, r0
 800bf98:	b166      	cbz	r6, 800bfb4 <_dtoa_r+0x754>
 800bf9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	dd09      	ble.n	800bfb4 <_dtoa_r+0x754>
 800bfa0:	42b3      	cmp	r3, r6
 800bfa2:	bfa8      	it	ge
 800bfa4:	4633      	movge	r3, r6
 800bfa6:	9a04      	ldr	r2, [sp, #16]
 800bfa8:	1af6      	subs	r6, r6, r3
 800bfaa:	1ad2      	subs	r2, r2, r3
 800bfac:	9204      	str	r2, [sp, #16]
 800bfae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bfb0:	1ad3      	subs	r3, r2, r3
 800bfb2:	9309      	str	r3, [sp, #36]	@ 0x24
 800bfb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bfb6:	b30b      	cbz	r3, 800bffc <_dtoa_r+0x79c>
 800bfb8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	f000 80c6 	beq.w	800c14c <_dtoa_r+0x8ec>
 800bfc0:	2c00      	cmp	r4, #0
 800bfc2:	f000 80c0 	beq.w	800c146 <_dtoa_r+0x8e6>
 800bfc6:	4629      	mov	r1, r5
 800bfc8:	4622      	mov	r2, r4
 800bfca:	4648      	mov	r0, r9
 800bfcc:	f000 fcc6 	bl	800c95c <__pow5mult>
 800bfd0:	9a03      	ldr	r2, [sp, #12]
 800bfd2:	4601      	mov	r1, r0
 800bfd4:	4605      	mov	r5, r0
 800bfd6:	4648      	mov	r0, r9
 800bfd8:	f000 fc1e 	bl	800c818 <__multiply>
 800bfdc:	9903      	ldr	r1, [sp, #12]
 800bfde:	4680      	mov	r8, r0
 800bfe0:	4648      	mov	r0, r9
 800bfe2:	f000 fb4f 	bl	800c684 <_Bfree>
 800bfe6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bfe8:	1b1b      	subs	r3, r3, r4
 800bfea:	930a      	str	r3, [sp, #40]	@ 0x28
 800bfec:	f000 80b1 	beq.w	800c152 <_dtoa_r+0x8f2>
 800bff0:	4641      	mov	r1, r8
 800bff2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bff4:	4648      	mov	r0, r9
 800bff6:	f000 fcb1 	bl	800c95c <__pow5mult>
 800bffa:	9003      	str	r0, [sp, #12]
 800bffc:	2101      	movs	r1, #1
 800bffe:	4648      	mov	r0, r9
 800c000:	f000 fbf4 	bl	800c7ec <__i2b>
 800c004:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c006:	4604      	mov	r4, r0
 800c008:	2b00      	cmp	r3, #0
 800c00a:	f000 81d8 	beq.w	800c3be <_dtoa_r+0xb5e>
 800c00e:	461a      	mov	r2, r3
 800c010:	4601      	mov	r1, r0
 800c012:	4648      	mov	r0, r9
 800c014:	f000 fca2 	bl	800c95c <__pow5mult>
 800c018:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c01a:	4604      	mov	r4, r0
 800c01c:	2b01      	cmp	r3, #1
 800c01e:	f300 809f 	bgt.w	800c160 <_dtoa_r+0x900>
 800c022:	9b06      	ldr	r3, [sp, #24]
 800c024:	2b00      	cmp	r3, #0
 800c026:	f040 8097 	bne.w	800c158 <_dtoa_r+0x8f8>
 800c02a:	9b07      	ldr	r3, [sp, #28]
 800c02c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c030:	2b00      	cmp	r3, #0
 800c032:	f040 8093 	bne.w	800c15c <_dtoa_r+0x8fc>
 800c036:	9b07      	ldr	r3, [sp, #28]
 800c038:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c03c:	0d1b      	lsrs	r3, r3, #20
 800c03e:	051b      	lsls	r3, r3, #20
 800c040:	b133      	cbz	r3, 800c050 <_dtoa_r+0x7f0>
 800c042:	9b04      	ldr	r3, [sp, #16]
 800c044:	3301      	adds	r3, #1
 800c046:	9304      	str	r3, [sp, #16]
 800c048:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c04a:	3301      	adds	r3, #1
 800c04c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c04e:	2301      	movs	r3, #1
 800c050:	930a      	str	r3, [sp, #40]	@ 0x28
 800c052:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c054:	2b00      	cmp	r3, #0
 800c056:	f000 81b8 	beq.w	800c3ca <_dtoa_r+0xb6a>
 800c05a:	6923      	ldr	r3, [r4, #16]
 800c05c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c060:	6918      	ldr	r0, [r3, #16]
 800c062:	f000 fb77 	bl	800c754 <__hi0bits>
 800c066:	f1c0 0020 	rsb	r0, r0, #32
 800c06a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c06c:	4418      	add	r0, r3
 800c06e:	f010 001f 	ands.w	r0, r0, #31
 800c072:	f000 8082 	beq.w	800c17a <_dtoa_r+0x91a>
 800c076:	f1c0 0320 	rsb	r3, r0, #32
 800c07a:	2b04      	cmp	r3, #4
 800c07c:	dd73      	ble.n	800c166 <_dtoa_r+0x906>
 800c07e:	9b04      	ldr	r3, [sp, #16]
 800c080:	f1c0 001c 	rsb	r0, r0, #28
 800c084:	4403      	add	r3, r0
 800c086:	9304      	str	r3, [sp, #16]
 800c088:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c08a:	4406      	add	r6, r0
 800c08c:	4403      	add	r3, r0
 800c08e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c090:	9b04      	ldr	r3, [sp, #16]
 800c092:	2b00      	cmp	r3, #0
 800c094:	dd05      	ble.n	800c0a2 <_dtoa_r+0x842>
 800c096:	461a      	mov	r2, r3
 800c098:	4648      	mov	r0, r9
 800c09a:	9903      	ldr	r1, [sp, #12]
 800c09c:	f000 fcb8 	bl	800ca10 <__lshift>
 800c0a0:	9003      	str	r0, [sp, #12]
 800c0a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	dd05      	ble.n	800c0b4 <_dtoa_r+0x854>
 800c0a8:	4621      	mov	r1, r4
 800c0aa:	461a      	mov	r2, r3
 800c0ac:	4648      	mov	r0, r9
 800c0ae:	f000 fcaf 	bl	800ca10 <__lshift>
 800c0b2:	4604      	mov	r4, r0
 800c0b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d061      	beq.n	800c17e <_dtoa_r+0x91e>
 800c0ba:	4621      	mov	r1, r4
 800c0bc:	9803      	ldr	r0, [sp, #12]
 800c0be:	f000 fd13 	bl	800cae8 <__mcmp>
 800c0c2:	2800      	cmp	r0, #0
 800c0c4:	da5b      	bge.n	800c17e <_dtoa_r+0x91e>
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	220a      	movs	r2, #10
 800c0ca:	4648      	mov	r0, r9
 800c0cc:	9903      	ldr	r1, [sp, #12]
 800c0ce:	f000 fafb 	bl	800c6c8 <__multadd>
 800c0d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c0d4:	f107 38ff 	add.w	r8, r7, #4294967295
 800c0d8:	9003      	str	r0, [sp, #12]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	f000 8177 	beq.w	800c3ce <_dtoa_r+0xb6e>
 800c0e0:	4629      	mov	r1, r5
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	220a      	movs	r2, #10
 800c0e6:	4648      	mov	r0, r9
 800c0e8:	f000 faee 	bl	800c6c8 <__multadd>
 800c0ec:	f1bb 0f00 	cmp.w	fp, #0
 800c0f0:	4605      	mov	r5, r0
 800c0f2:	dc6f      	bgt.n	800c1d4 <_dtoa_r+0x974>
 800c0f4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c0f6:	2b02      	cmp	r3, #2
 800c0f8:	dc49      	bgt.n	800c18e <_dtoa_r+0x92e>
 800c0fa:	e06b      	b.n	800c1d4 <_dtoa_r+0x974>
 800c0fc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c0fe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c102:	e73c      	b.n	800bf7e <_dtoa_r+0x71e>
 800c104:	3fe00000 	.word	0x3fe00000
 800c108:	40240000 	.word	0x40240000
 800c10c:	9b08      	ldr	r3, [sp, #32]
 800c10e:	1e5c      	subs	r4, r3, #1
 800c110:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c112:	42a3      	cmp	r3, r4
 800c114:	db09      	blt.n	800c12a <_dtoa_r+0x8ca>
 800c116:	1b1c      	subs	r4, r3, r4
 800c118:	9b08      	ldr	r3, [sp, #32]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	f6bf af30 	bge.w	800bf80 <_dtoa_r+0x720>
 800c120:	9b04      	ldr	r3, [sp, #16]
 800c122:	9a08      	ldr	r2, [sp, #32]
 800c124:	1a9e      	subs	r6, r3, r2
 800c126:	2300      	movs	r3, #0
 800c128:	e72b      	b.n	800bf82 <_dtoa_r+0x722>
 800c12a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c12c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c12e:	1ae3      	subs	r3, r4, r3
 800c130:	441a      	add	r2, r3
 800c132:	940a      	str	r4, [sp, #40]	@ 0x28
 800c134:	9e04      	ldr	r6, [sp, #16]
 800c136:	2400      	movs	r4, #0
 800c138:	9b08      	ldr	r3, [sp, #32]
 800c13a:	920e      	str	r2, [sp, #56]	@ 0x38
 800c13c:	e721      	b.n	800bf82 <_dtoa_r+0x722>
 800c13e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c140:	9e04      	ldr	r6, [sp, #16]
 800c142:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c144:	e728      	b.n	800bf98 <_dtoa_r+0x738>
 800c146:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c14a:	e751      	b.n	800bff0 <_dtoa_r+0x790>
 800c14c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c14e:	9903      	ldr	r1, [sp, #12]
 800c150:	e750      	b.n	800bff4 <_dtoa_r+0x794>
 800c152:	f8cd 800c 	str.w	r8, [sp, #12]
 800c156:	e751      	b.n	800bffc <_dtoa_r+0x79c>
 800c158:	2300      	movs	r3, #0
 800c15a:	e779      	b.n	800c050 <_dtoa_r+0x7f0>
 800c15c:	9b06      	ldr	r3, [sp, #24]
 800c15e:	e777      	b.n	800c050 <_dtoa_r+0x7f0>
 800c160:	2300      	movs	r3, #0
 800c162:	930a      	str	r3, [sp, #40]	@ 0x28
 800c164:	e779      	b.n	800c05a <_dtoa_r+0x7fa>
 800c166:	d093      	beq.n	800c090 <_dtoa_r+0x830>
 800c168:	9a04      	ldr	r2, [sp, #16]
 800c16a:	331c      	adds	r3, #28
 800c16c:	441a      	add	r2, r3
 800c16e:	9204      	str	r2, [sp, #16]
 800c170:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c172:	441e      	add	r6, r3
 800c174:	441a      	add	r2, r3
 800c176:	9209      	str	r2, [sp, #36]	@ 0x24
 800c178:	e78a      	b.n	800c090 <_dtoa_r+0x830>
 800c17a:	4603      	mov	r3, r0
 800c17c:	e7f4      	b.n	800c168 <_dtoa_r+0x908>
 800c17e:	9b08      	ldr	r3, [sp, #32]
 800c180:	46b8      	mov	r8, r7
 800c182:	2b00      	cmp	r3, #0
 800c184:	dc20      	bgt.n	800c1c8 <_dtoa_r+0x968>
 800c186:	469b      	mov	fp, r3
 800c188:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c18a:	2b02      	cmp	r3, #2
 800c18c:	dd1e      	ble.n	800c1cc <_dtoa_r+0x96c>
 800c18e:	f1bb 0f00 	cmp.w	fp, #0
 800c192:	f47f adb1 	bne.w	800bcf8 <_dtoa_r+0x498>
 800c196:	4621      	mov	r1, r4
 800c198:	465b      	mov	r3, fp
 800c19a:	2205      	movs	r2, #5
 800c19c:	4648      	mov	r0, r9
 800c19e:	f000 fa93 	bl	800c6c8 <__multadd>
 800c1a2:	4601      	mov	r1, r0
 800c1a4:	4604      	mov	r4, r0
 800c1a6:	9803      	ldr	r0, [sp, #12]
 800c1a8:	f000 fc9e 	bl	800cae8 <__mcmp>
 800c1ac:	2800      	cmp	r0, #0
 800c1ae:	f77f ada3 	ble.w	800bcf8 <_dtoa_r+0x498>
 800c1b2:	4656      	mov	r6, sl
 800c1b4:	2331      	movs	r3, #49	@ 0x31
 800c1b6:	f108 0801 	add.w	r8, r8, #1
 800c1ba:	f806 3b01 	strb.w	r3, [r6], #1
 800c1be:	e59f      	b.n	800bd00 <_dtoa_r+0x4a0>
 800c1c0:	46b8      	mov	r8, r7
 800c1c2:	9c08      	ldr	r4, [sp, #32]
 800c1c4:	4625      	mov	r5, r4
 800c1c6:	e7f4      	b.n	800c1b2 <_dtoa_r+0x952>
 800c1c8:	f8dd b020 	ldr.w	fp, [sp, #32]
 800c1cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	f000 8101 	beq.w	800c3d6 <_dtoa_r+0xb76>
 800c1d4:	2e00      	cmp	r6, #0
 800c1d6:	dd05      	ble.n	800c1e4 <_dtoa_r+0x984>
 800c1d8:	4629      	mov	r1, r5
 800c1da:	4632      	mov	r2, r6
 800c1dc:	4648      	mov	r0, r9
 800c1de:	f000 fc17 	bl	800ca10 <__lshift>
 800c1e2:	4605      	mov	r5, r0
 800c1e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d05c      	beq.n	800c2a4 <_dtoa_r+0xa44>
 800c1ea:	4648      	mov	r0, r9
 800c1ec:	6869      	ldr	r1, [r5, #4]
 800c1ee:	f000 fa09 	bl	800c604 <_Balloc>
 800c1f2:	4606      	mov	r6, r0
 800c1f4:	b928      	cbnz	r0, 800c202 <_dtoa_r+0x9a2>
 800c1f6:	4602      	mov	r2, r0
 800c1f8:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c1fc:	4b80      	ldr	r3, [pc, #512]	@ (800c400 <_dtoa_r+0xba0>)
 800c1fe:	f7ff bb43 	b.w	800b888 <_dtoa_r+0x28>
 800c202:	692a      	ldr	r2, [r5, #16]
 800c204:	f105 010c 	add.w	r1, r5, #12
 800c208:	3202      	adds	r2, #2
 800c20a:	0092      	lsls	r2, r2, #2
 800c20c:	300c      	adds	r0, #12
 800c20e:	f001 f961 	bl	800d4d4 <memcpy>
 800c212:	2201      	movs	r2, #1
 800c214:	4631      	mov	r1, r6
 800c216:	4648      	mov	r0, r9
 800c218:	f000 fbfa 	bl	800ca10 <__lshift>
 800c21c:	462f      	mov	r7, r5
 800c21e:	4605      	mov	r5, r0
 800c220:	f10a 0301 	add.w	r3, sl, #1
 800c224:	9304      	str	r3, [sp, #16]
 800c226:	eb0a 030b 	add.w	r3, sl, fp
 800c22a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c22c:	9b06      	ldr	r3, [sp, #24]
 800c22e:	f003 0301 	and.w	r3, r3, #1
 800c232:	9309      	str	r3, [sp, #36]	@ 0x24
 800c234:	9b04      	ldr	r3, [sp, #16]
 800c236:	4621      	mov	r1, r4
 800c238:	9803      	ldr	r0, [sp, #12]
 800c23a:	f103 3bff 	add.w	fp, r3, #4294967295
 800c23e:	f7ff fa86 	bl	800b74e <quorem>
 800c242:	4603      	mov	r3, r0
 800c244:	4639      	mov	r1, r7
 800c246:	3330      	adds	r3, #48	@ 0x30
 800c248:	9006      	str	r0, [sp, #24]
 800c24a:	9803      	ldr	r0, [sp, #12]
 800c24c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c24e:	f000 fc4b 	bl	800cae8 <__mcmp>
 800c252:	462a      	mov	r2, r5
 800c254:	9008      	str	r0, [sp, #32]
 800c256:	4621      	mov	r1, r4
 800c258:	4648      	mov	r0, r9
 800c25a:	f000 fc61 	bl	800cb20 <__mdiff>
 800c25e:	68c2      	ldr	r2, [r0, #12]
 800c260:	4606      	mov	r6, r0
 800c262:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c264:	bb02      	cbnz	r2, 800c2a8 <_dtoa_r+0xa48>
 800c266:	4601      	mov	r1, r0
 800c268:	9803      	ldr	r0, [sp, #12]
 800c26a:	f000 fc3d 	bl	800cae8 <__mcmp>
 800c26e:	4602      	mov	r2, r0
 800c270:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c272:	4631      	mov	r1, r6
 800c274:	4648      	mov	r0, r9
 800c276:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800c27a:	f000 fa03 	bl	800c684 <_Bfree>
 800c27e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c280:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c282:	9e04      	ldr	r6, [sp, #16]
 800c284:	ea42 0103 	orr.w	r1, r2, r3
 800c288:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c28a:	4319      	orrs	r1, r3
 800c28c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c28e:	d10d      	bne.n	800c2ac <_dtoa_r+0xa4c>
 800c290:	2b39      	cmp	r3, #57	@ 0x39
 800c292:	d027      	beq.n	800c2e4 <_dtoa_r+0xa84>
 800c294:	9a08      	ldr	r2, [sp, #32]
 800c296:	2a00      	cmp	r2, #0
 800c298:	dd01      	ble.n	800c29e <_dtoa_r+0xa3e>
 800c29a:	9b06      	ldr	r3, [sp, #24]
 800c29c:	3331      	adds	r3, #49	@ 0x31
 800c29e:	f88b 3000 	strb.w	r3, [fp]
 800c2a2:	e52e      	b.n	800bd02 <_dtoa_r+0x4a2>
 800c2a4:	4628      	mov	r0, r5
 800c2a6:	e7b9      	b.n	800c21c <_dtoa_r+0x9bc>
 800c2a8:	2201      	movs	r2, #1
 800c2aa:	e7e2      	b.n	800c272 <_dtoa_r+0xa12>
 800c2ac:	9908      	ldr	r1, [sp, #32]
 800c2ae:	2900      	cmp	r1, #0
 800c2b0:	db04      	blt.n	800c2bc <_dtoa_r+0xa5c>
 800c2b2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800c2b4:	4301      	orrs	r1, r0
 800c2b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c2b8:	4301      	orrs	r1, r0
 800c2ba:	d120      	bne.n	800c2fe <_dtoa_r+0xa9e>
 800c2bc:	2a00      	cmp	r2, #0
 800c2be:	ddee      	ble.n	800c29e <_dtoa_r+0xa3e>
 800c2c0:	2201      	movs	r2, #1
 800c2c2:	9903      	ldr	r1, [sp, #12]
 800c2c4:	4648      	mov	r0, r9
 800c2c6:	9304      	str	r3, [sp, #16]
 800c2c8:	f000 fba2 	bl	800ca10 <__lshift>
 800c2cc:	4621      	mov	r1, r4
 800c2ce:	9003      	str	r0, [sp, #12]
 800c2d0:	f000 fc0a 	bl	800cae8 <__mcmp>
 800c2d4:	2800      	cmp	r0, #0
 800c2d6:	9b04      	ldr	r3, [sp, #16]
 800c2d8:	dc02      	bgt.n	800c2e0 <_dtoa_r+0xa80>
 800c2da:	d1e0      	bne.n	800c29e <_dtoa_r+0xa3e>
 800c2dc:	07da      	lsls	r2, r3, #31
 800c2de:	d5de      	bpl.n	800c29e <_dtoa_r+0xa3e>
 800c2e0:	2b39      	cmp	r3, #57	@ 0x39
 800c2e2:	d1da      	bne.n	800c29a <_dtoa_r+0xa3a>
 800c2e4:	2339      	movs	r3, #57	@ 0x39
 800c2e6:	f88b 3000 	strb.w	r3, [fp]
 800c2ea:	4633      	mov	r3, r6
 800c2ec:	461e      	mov	r6, r3
 800c2ee:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c2f2:	3b01      	subs	r3, #1
 800c2f4:	2a39      	cmp	r2, #57	@ 0x39
 800c2f6:	d04e      	beq.n	800c396 <_dtoa_r+0xb36>
 800c2f8:	3201      	adds	r2, #1
 800c2fa:	701a      	strb	r2, [r3, #0]
 800c2fc:	e501      	b.n	800bd02 <_dtoa_r+0x4a2>
 800c2fe:	2a00      	cmp	r2, #0
 800c300:	dd03      	ble.n	800c30a <_dtoa_r+0xaaa>
 800c302:	2b39      	cmp	r3, #57	@ 0x39
 800c304:	d0ee      	beq.n	800c2e4 <_dtoa_r+0xa84>
 800c306:	3301      	adds	r3, #1
 800c308:	e7c9      	b.n	800c29e <_dtoa_r+0xa3e>
 800c30a:	9a04      	ldr	r2, [sp, #16]
 800c30c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c30e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c312:	428a      	cmp	r2, r1
 800c314:	d028      	beq.n	800c368 <_dtoa_r+0xb08>
 800c316:	2300      	movs	r3, #0
 800c318:	220a      	movs	r2, #10
 800c31a:	9903      	ldr	r1, [sp, #12]
 800c31c:	4648      	mov	r0, r9
 800c31e:	f000 f9d3 	bl	800c6c8 <__multadd>
 800c322:	42af      	cmp	r7, r5
 800c324:	9003      	str	r0, [sp, #12]
 800c326:	f04f 0300 	mov.w	r3, #0
 800c32a:	f04f 020a 	mov.w	r2, #10
 800c32e:	4639      	mov	r1, r7
 800c330:	4648      	mov	r0, r9
 800c332:	d107      	bne.n	800c344 <_dtoa_r+0xae4>
 800c334:	f000 f9c8 	bl	800c6c8 <__multadd>
 800c338:	4607      	mov	r7, r0
 800c33a:	4605      	mov	r5, r0
 800c33c:	9b04      	ldr	r3, [sp, #16]
 800c33e:	3301      	adds	r3, #1
 800c340:	9304      	str	r3, [sp, #16]
 800c342:	e777      	b.n	800c234 <_dtoa_r+0x9d4>
 800c344:	f000 f9c0 	bl	800c6c8 <__multadd>
 800c348:	4629      	mov	r1, r5
 800c34a:	4607      	mov	r7, r0
 800c34c:	2300      	movs	r3, #0
 800c34e:	220a      	movs	r2, #10
 800c350:	4648      	mov	r0, r9
 800c352:	f000 f9b9 	bl	800c6c8 <__multadd>
 800c356:	4605      	mov	r5, r0
 800c358:	e7f0      	b.n	800c33c <_dtoa_r+0xadc>
 800c35a:	f1bb 0f00 	cmp.w	fp, #0
 800c35e:	bfcc      	ite	gt
 800c360:	465e      	movgt	r6, fp
 800c362:	2601      	movle	r6, #1
 800c364:	2700      	movs	r7, #0
 800c366:	4456      	add	r6, sl
 800c368:	2201      	movs	r2, #1
 800c36a:	9903      	ldr	r1, [sp, #12]
 800c36c:	4648      	mov	r0, r9
 800c36e:	9304      	str	r3, [sp, #16]
 800c370:	f000 fb4e 	bl	800ca10 <__lshift>
 800c374:	4621      	mov	r1, r4
 800c376:	9003      	str	r0, [sp, #12]
 800c378:	f000 fbb6 	bl	800cae8 <__mcmp>
 800c37c:	2800      	cmp	r0, #0
 800c37e:	dcb4      	bgt.n	800c2ea <_dtoa_r+0xa8a>
 800c380:	d102      	bne.n	800c388 <_dtoa_r+0xb28>
 800c382:	9b04      	ldr	r3, [sp, #16]
 800c384:	07db      	lsls	r3, r3, #31
 800c386:	d4b0      	bmi.n	800c2ea <_dtoa_r+0xa8a>
 800c388:	4633      	mov	r3, r6
 800c38a:	461e      	mov	r6, r3
 800c38c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c390:	2a30      	cmp	r2, #48	@ 0x30
 800c392:	d0fa      	beq.n	800c38a <_dtoa_r+0xb2a>
 800c394:	e4b5      	b.n	800bd02 <_dtoa_r+0x4a2>
 800c396:	459a      	cmp	sl, r3
 800c398:	d1a8      	bne.n	800c2ec <_dtoa_r+0xa8c>
 800c39a:	2331      	movs	r3, #49	@ 0x31
 800c39c:	f108 0801 	add.w	r8, r8, #1
 800c3a0:	f88a 3000 	strb.w	r3, [sl]
 800c3a4:	e4ad      	b.n	800bd02 <_dtoa_r+0x4a2>
 800c3a6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c3a8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800c404 <_dtoa_r+0xba4>
 800c3ac:	b11b      	cbz	r3, 800c3b6 <_dtoa_r+0xb56>
 800c3ae:	f10a 0308 	add.w	r3, sl, #8
 800c3b2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c3b4:	6013      	str	r3, [r2, #0]
 800c3b6:	4650      	mov	r0, sl
 800c3b8:	b017      	add	sp, #92	@ 0x5c
 800c3ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3be:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c3c0:	2b01      	cmp	r3, #1
 800c3c2:	f77f ae2e 	ble.w	800c022 <_dtoa_r+0x7c2>
 800c3c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c3c8:	930a      	str	r3, [sp, #40]	@ 0x28
 800c3ca:	2001      	movs	r0, #1
 800c3cc:	e64d      	b.n	800c06a <_dtoa_r+0x80a>
 800c3ce:	f1bb 0f00 	cmp.w	fp, #0
 800c3d2:	f77f aed9 	ble.w	800c188 <_dtoa_r+0x928>
 800c3d6:	4656      	mov	r6, sl
 800c3d8:	4621      	mov	r1, r4
 800c3da:	9803      	ldr	r0, [sp, #12]
 800c3dc:	f7ff f9b7 	bl	800b74e <quorem>
 800c3e0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800c3e4:	f806 3b01 	strb.w	r3, [r6], #1
 800c3e8:	eba6 020a 	sub.w	r2, r6, sl
 800c3ec:	4593      	cmp	fp, r2
 800c3ee:	ddb4      	ble.n	800c35a <_dtoa_r+0xafa>
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	220a      	movs	r2, #10
 800c3f4:	4648      	mov	r0, r9
 800c3f6:	9903      	ldr	r1, [sp, #12]
 800c3f8:	f000 f966 	bl	800c6c8 <__multadd>
 800c3fc:	9003      	str	r0, [sp, #12]
 800c3fe:	e7eb      	b.n	800c3d8 <_dtoa_r+0xb78>
 800c400:	0800dea2 	.word	0x0800dea2
 800c404:	0800de26 	.word	0x0800de26

0800c408 <_free_r>:
 800c408:	b538      	push	{r3, r4, r5, lr}
 800c40a:	4605      	mov	r5, r0
 800c40c:	2900      	cmp	r1, #0
 800c40e:	d040      	beq.n	800c492 <_free_r+0x8a>
 800c410:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c414:	1f0c      	subs	r4, r1, #4
 800c416:	2b00      	cmp	r3, #0
 800c418:	bfb8      	it	lt
 800c41a:	18e4      	addlt	r4, r4, r3
 800c41c:	f000 f8e6 	bl	800c5ec <__malloc_lock>
 800c420:	4a1c      	ldr	r2, [pc, #112]	@ (800c494 <_free_r+0x8c>)
 800c422:	6813      	ldr	r3, [r2, #0]
 800c424:	b933      	cbnz	r3, 800c434 <_free_r+0x2c>
 800c426:	6063      	str	r3, [r4, #4]
 800c428:	6014      	str	r4, [r2, #0]
 800c42a:	4628      	mov	r0, r5
 800c42c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c430:	f000 b8e2 	b.w	800c5f8 <__malloc_unlock>
 800c434:	42a3      	cmp	r3, r4
 800c436:	d908      	bls.n	800c44a <_free_r+0x42>
 800c438:	6820      	ldr	r0, [r4, #0]
 800c43a:	1821      	adds	r1, r4, r0
 800c43c:	428b      	cmp	r3, r1
 800c43e:	bf01      	itttt	eq
 800c440:	6819      	ldreq	r1, [r3, #0]
 800c442:	685b      	ldreq	r3, [r3, #4]
 800c444:	1809      	addeq	r1, r1, r0
 800c446:	6021      	streq	r1, [r4, #0]
 800c448:	e7ed      	b.n	800c426 <_free_r+0x1e>
 800c44a:	461a      	mov	r2, r3
 800c44c:	685b      	ldr	r3, [r3, #4]
 800c44e:	b10b      	cbz	r3, 800c454 <_free_r+0x4c>
 800c450:	42a3      	cmp	r3, r4
 800c452:	d9fa      	bls.n	800c44a <_free_r+0x42>
 800c454:	6811      	ldr	r1, [r2, #0]
 800c456:	1850      	adds	r0, r2, r1
 800c458:	42a0      	cmp	r0, r4
 800c45a:	d10b      	bne.n	800c474 <_free_r+0x6c>
 800c45c:	6820      	ldr	r0, [r4, #0]
 800c45e:	4401      	add	r1, r0
 800c460:	1850      	adds	r0, r2, r1
 800c462:	4283      	cmp	r3, r0
 800c464:	6011      	str	r1, [r2, #0]
 800c466:	d1e0      	bne.n	800c42a <_free_r+0x22>
 800c468:	6818      	ldr	r0, [r3, #0]
 800c46a:	685b      	ldr	r3, [r3, #4]
 800c46c:	4408      	add	r0, r1
 800c46e:	6010      	str	r0, [r2, #0]
 800c470:	6053      	str	r3, [r2, #4]
 800c472:	e7da      	b.n	800c42a <_free_r+0x22>
 800c474:	d902      	bls.n	800c47c <_free_r+0x74>
 800c476:	230c      	movs	r3, #12
 800c478:	602b      	str	r3, [r5, #0]
 800c47a:	e7d6      	b.n	800c42a <_free_r+0x22>
 800c47c:	6820      	ldr	r0, [r4, #0]
 800c47e:	1821      	adds	r1, r4, r0
 800c480:	428b      	cmp	r3, r1
 800c482:	bf01      	itttt	eq
 800c484:	6819      	ldreq	r1, [r3, #0]
 800c486:	685b      	ldreq	r3, [r3, #4]
 800c488:	1809      	addeq	r1, r1, r0
 800c48a:	6021      	streq	r1, [r4, #0]
 800c48c:	6063      	str	r3, [r4, #4]
 800c48e:	6054      	str	r4, [r2, #4]
 800c490:	e7cb      	b.n	800c42a <_free_r+0x22>
 800c492:	bd38      	pop	{r3, r4, r5, pc}
 800c494:	2000080c 	.word	0x2000080c

0800c498 <malloc>:
 800c498:	4b02      	ldr	r3, [pc, #8]	@ (800c4a4 <malloc+0xc>)
 800c49a:	4601      	mov	r1, r0
 800c49c:	6818      	ldr	r0, [r3, #0]
 800c49e:	f000 b825 	b.w	800c4ec <_malloc_r>
 800c4a2:	bf00      	nop
 800c4a4:	20000078 	.word	0x20000078

0800c4a8 <sbrk_aligned>:
 800c4a8:	b570      	push	{r4, r5, r6, lr}
 800c4aa:	4e0f      	ldr	r6, [pc, #60]	@ (800c4e8 <sbrk_aligned+0x40>)
 800c4ac:	460c      	mov	r4, r1
 800c4ae:	6831      	ldr	r1, [r6, #0]
 800c4b0:	4605      	mov	r5, r0
 800c4b2:	b911      	cbnz	r1, 800c4ba <sbrk_aligned+0x12>
 800c4b4:	f000 fffe 	bl	800d4b4 <_sbrk_r>
 800c4b8:	6030      	str	r0, [r6, #0]
 800c4ba:	4621      	mov	r1, r4
 800c4bc:	4628      	mov	r0, r5
 800c4be:	f000 fff9 	bl	800d4b4 <_sbrk_r>
 800c4c2:	1c43      	adds	r3, r0, #1
 800c4c4:	d103      	bne.n	800c4ce <sbrk_aligned+0x26>
 800c4c6:	f04f 34ff 	mov.w	r4, #4294967295
 800c4ca:	4620      	mov	r0, r4
 800c4cc:	bd70      	pop	{r4, r5, r6, pc}
 800c4ce:	1cc4      	adds	r4, r0, #3
 800c4d0:	f024 0403 	bic.w	r4, r4, #3
 800c4d4:	42a0      	cmp	r0, r4
 800c4d6:	d0f8      	beq.n	800c4ca <sbrk_aligned+0x22>
 800c4d8:	1a21      	subs	r1, r4, r0
 800c4da:	4628      	mov	r0, r5
 800c4dc:	f000 ffea 	bl	800d4b4 <_sbrk_r>
 800c4e0:	3001      	adds	r0, #1
 800c4e2:	d1f2      	bne.n	800c4ca <sbrk_aligned+0x22>
 800c4e4:	e7ef      	b.n	800c4c6 <sbrk_aligned+0x1e>
 800c4e6:	bf00      	nop
 800c4e8:	20000808 	.word	0x20000808

0800c4ec <_malloc_r>:
 800c4ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4f0:	1ccd      	adds	r5, r1, #3
 800c4f2:	f025 0503 	bic.w	r5, r5, #3
 800c4f6:	3508      	adds	r5, #8
 800c4f8:	2d0c      	cmp	r5, #12
 800c4fa:	bf38      	it	cc
 800c4fc:	250c      	movcc	r5, #12
 800c4fe:	2d00      	cmp	r5, #0
 800c500:	4606      	mov	r6, r0
 800c502:	db01      	blt.n	800c508 <_malloc_r+0x1c>
 800c504:	42a9      	cmp	r1, r5
 800c506:	d904      	bls.n	800c512 <_malloc_r+0x26>
 800c508:	230c      	movs	r3, #12
 800c50a:	6033      	str	r3, [r6, #0]
 800c50c:	2000      	movs	r0, #0
 800c50e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c512:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c5e8 <_malloc_r+0xfc>
 800c516:	f000 f869 	bl	800c5ec <__malloc_lock>
 800c51a:	f8d8 3000 	ldr.w	r3, [r8]
 800c51e:	461c      	mov	r4, r3
 800c520:	bb44      	cbnz	r4, 800c574 <_malloc_r+0x88>
 800c522:	4629      	mov	r1, r5
 800c524:	4630      	mov	r0, r6
 800c526:	f7ff ffbf 	bl	800c4a8 <sbrk_aligned>
 800c52a:	1c43      	adds	r3, r0, #1
 800c52c:	4604      	mov	r4, r0
 800c52e:	d158      	bne.n	800c5e2 <_malloc_r+0xf6>
 800c530:	f8d8 4000 	ldr.w	r4, [r8]
 800c534:	4627      	mov	r7, r4
 800c536:	2f00      	cmp	r7, #0
 800c538:	d143      	bne.n	800c5c2 <_malloc_r+0xd6>
 800c53a:	2c00      	cmp	r4, #0
 800c53c:	d04b      	beq.n	800c5d6 <_malloc_r+0xea>
 800c53e:	6823      	ldr	r3, [r4, #0]
 800c540:	4639      	mov	r1, r7
 800c542:	4630      	mov	r0, r6
 800c544:	eb04 0903 	add.w	r9, r4, r3
 800c548:	f000 ffb4 	bl	800d4b4 <_sbrk_r>
 800c54c:	4581      	cmp	r9, r0
 800c54e:	d142      	bne.n	800c5d6 <_malloc_r+0xea>
 800c550:	6821      	ldr	r1, [r4, #0]
 800c552:	4630      	mov	r0, r6
 800c554:	1a6d      	subs	r5, r5, r1
 800c556:	4629      	mov	r1, r5
 800c558:	f7ff ffa6 	bl	800c4a8 <sbrk_aligned>
 800c55c:	3001      	adds	r0, #1
 800c55e:	d03a      	beq.n	800c5d6 <_malloc_r+0xea>
 800c560:	6823      	ldr	r3, [r4, #0]
 800c562:	442b      	add	r3, r5
 800c564:	6023      	str	r3, [r4, #0]
 800c566:	f8d8 3000 	ldr.w	r3, [r8]
 800c56a:	685a      	ldr	r2, [r3, #4]
 800c56c:	bb62      	cbnz	r2, 800c5c8 <_malloc_r+0xdc>
 800c56e:	f8c8 7000 	str.w	r7, [r8]
 800c572:	e00f      	b.n	800c594 <_malloc_r+0xa8>
 800c574:	6822      	ldr	r2, [r4, #0]
 800c576:	1b52      	subs	r2, r2, r5
 800c578:	d420      	bmi.n	800c5bc <_malloc_r+0xd0>
 800c57a:	2a0b      	cmp	r2, #11
 800c57c:	d917      	bls.n	800c5ae <_malloc_r+0xc2>
 800c57e:	1961      	adds	r1, r4, r5
 800c580:	42a3      	cmp	r3, r4
 800c582:	6025      	str	r5, [r4, #0]
 800c584:	bf18      	it	ne
 800c586:	6059      	strne	r1, [r3, #4]
 800c588:	6863      	ldr	r3, [r4, #4]
 800c58a:	bf08      	it	eq
 800c58c:	f8c8 1000 	streq.w	r1, [r8]
 800c590:	5162      	str	r2, [r4, r5]
 800c592:	604b      	str	r3, [r1, #4]
 800c594:	4630      	mov	r0, r6
 800c596:	f000 f82f 	bl	800c5f8 <__malloc_unlock>
 800c59a:	f104 000b 	add.w	r0, r4, #11
 800c59e:	1d23      	adds	r3, r4, #4
 800c5a0:	f020 0007 	bic.w	r0, r0, #7
 800c5a4:	1ac2      	subs	r2, r0, r3
 800c5a6:	bf1c      	itt	ne
 800c5a8:	1a1b      	subne	r3, r3, r0
 800c5aa:	50a3      	strne	r3, [r4, r2]
 800c5ac:	e7af      	b.n	800c50e <_malloc_r+0x22>
 800c5ae:	6862      	ldr	r2, [r4, #4]
 800c5b0:	42a3      	cmp	r3, r4
 800c5b2:	bf0c      	ite	eq
 800c5b4:	f8c8 2000 	streq.w	r2, [r8]
 800c5b8:	605a      	strne	r2, [r3, #4]
 800c5ba:	e7eb      	b.n	800c594 <_malloc_r+0xa8>
 800c5bc:	4623      	mov	r3, r4
 800c5be:	6864      	ldr	r4, [r4, #4]
 800c5c0:	e7ae      	b.n	800c520 <_malloc_r+0x34>
 800c5c2:	463c      	mov	r4, r7
 800c5c4:	687f      	ldr	r7, [r7, #4]
 800c5c6:	e7b6      	b.n	800c536 <_malloc_r+0x4a>
 800c5c8:	461a      	mov	r2, r3
 800c5ca:	685b      	ldr	r3, [r3, #4]
 800c5cc:	42a3      	cmp	r3, r4
 800c5ce:	d1fb      	bne.n	800c5c8 <_malloc_r+0xdc>
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	6053      	str	r3, [r2, #4]
 800c5d4:	e7de      	b.n	800c594 <_malloc_r+0xa8>
 800c5d6:	230c      	movs	r3, #12
 800c5d8:	4630      	mov	r0, r6
 800c5da:	6033      	str	r3, [r6, #0]
 800c5dc:	f000 f80c 	bl	800c5f8 <__malloc_unlock>
 800c5e0:	e794      	b.n	800c50c <_malloc_r+0x20>
 800c5e2:	6005      	str	r5, [r0, #0]
 800c5e4:	e7d6      	b.n	800c594 <_malloc_r+0xa8>
 800c5e6:	bf00      	nop
 800c5e8:	2000080c 	.word	0x2000080c

0800c5ec <__malloc_lock>:
 800c5ec:	4801      	ldr	r0, [pc, #4]	@ (800c5f4 <__malloc_lock+0x8>)
 800c5ee:	f7ff b89e 	b.w	800b72e <__retarget_lock_acquire_recursive>
 800c5f2:	bf00      	nop
 800c5f4:	20000804 	.word	0x20000804

0800c5f8 <__malloc_unlock>:
 800c5f8:	4801      	ldr	r0, [pc, #4]	@ (800c600 <__malloc_unlock+0x8>)
 800c5fa:	f7ff b899 	b.w	800b730 <__retarget_lock_release_recursive>
 800c5fe:	bf00      	nop
 800c600:	20000804 	.word	0x20000804

0800c604 <_Balloc>:
 800c604:	b570      	push	{r4, r5, r6, lr}
 800c606:	69c6      	ldr	r6, [r0, #28]
 800c608:	4604      	mov	r4, r0
 800c60a:	460d      	mov	r5, r1
 800c60c:	b976      	cbnz	r6, 800c62c <_Balloc+0x28>
 800c60e:	2010      	movs	r0, #16
 800c610:	f7ff ff42 	bl	800c498 <malloc>
 800c614:	4602      	mov	r2, r0
 800c616:	61e0      	str	r0, [r4, #28]
 800c618:	b920      	cbnz	r0, 800c624 <_Balloc+0x20>
 800c61a:	216b      	movs	r1, #107	@ 0x6b
 800c61c:	4b17      	ldr	r3, [pc, #92]	@ (800c67c <_Balloc+0x78>)
 800c61e:	4818      	ldr	r0, [pc, #96]	@ (800c680 <_Balloc+0x7c>)
 800c620:	f000 ff66 	bl	800d4f0 <__assert_func>
 800c624:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c628:	6006      	str	r6, [r0, #0]
 800c62a:	60c6      	str	r6, [r0, #12]
 800c62c:	69e6      	ldr	r6, [r4, #28]
 800c62e:	68f3      	ldr	r3, [r6, #12]
 800c630:	b183      	cbz	r3, 800c654 <_Balloc+0x50>
 800c632:	69e3      	ldr	r3, [r4, #28]
 800c634:	68db      	ldr	r3, [r3, #12]
 800c636:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c63a:	b9b8      	cbnz	r0, 800c66c <_Balloc+0x68>
 800c63c:	2101      	movs	r1, #1
 800c63e:	fa01 f605 	lsl.w	r6, r1, r5
 800c642:	1d72      	adds	r2, r6, #5
 800c644:	4620      	mov	r0, r4
 800c646:	0092      	lsls	r2, r2, #2
 800c648:	f000 ff70 	bl	800d52c <_calloc_r>
 800c64c:	b160      	cbz	r0, 800c668 <_Balloc+0x64>
 800c64e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c652:	e00e      	b.n	800c672 <_Balloc+0x6e>
 800c654:	2221      	movs	r2, #33	@ 0x21
 800c656:	2104      	movs	r1, #4
 800c658:	4620      	mov	r0, r4
 800c65a:	f000 ff67 	bl	800d52c <_calloc_r>
 800c65e:	69e3      	ldr	r3, [r4, #28]
 800c660:	60f0      	str	r0, [r6, #12]
 800c662:	68db      	ldr	r3, [r3, #12]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d1e4      	bne.n	800c632 <_Balloc+0x2e>
 800c668:	2000      	movs	r0, #0
 800c66a:	bd70      	pop	{r4, r5, r6, pc}
 800c66c:	6802      	ldr	r2, [r0, #0]
 800c66e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c672:	2300      	movs	r3, #0
 800c674:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c678:	e7f7      	b.n	800c66a <_Balloc+0x66>
 800c67a:	bf00      	nop
 800c67c:	0800de33 	.word	0x0800de33
 800c680:	0800deb3 	.word	0x0800deb3

0800c684 <_Bfree>:
 800c684:	b570      	push	{r4, r5, r6, lr}
 800c686:	69c6      	ldr	r6, [r0, #28]
 800c688:	4605      	mov	r5, r0
 800c68a:	460c      	mov	r4, r1
 800c68c:	b976      	cbnz	r6, 800c6ac <_Bfree+0x28>
 800c68e:	2010      	movs	r0, #16
 800c690:	f7ff ff02 	bl	800c498 <malloc>
 800c694:	4602      	mov	r2, r0
 800c696:	61e8      	str	r0, [r5, #28]
 800c698:	b920      	cbnz	r0, 800c6a4 <_Bfree+0x20>
 800c69a:	218f      	movs	r1, #143	@ 0x8f
 800c69c:	4b08      	ldr	r3, [pc, #32]	@ (800c6c0 <_Bfree+0x3c>)
 800c69e:	4809      	ldr	r0, [pc, #36]	@ (800c6c4 <_Bfree+0x40>)
 800c6a0:	f000 ff26 	bl	800d4f0 <__assert_func>
 800c6a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c6a8:	6006      	str	r6, [r0, #0]
 800c6aa:	60c6      	str	r6, [r0, #12]
 800c6ac:	b13c      	cbz	r4, 800c6be <_Bfree+0x3a>
 800c6ae:	69eb      	ldr	r3, [r5, #28]
 800c6b0:	6862      	ldr	r2, [r4, #4]
 800c6b2:	68db      	ldr	r3, [r3, #12]
 800c6b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c6b8:	6021      	str	r1, [r4, #0]
 800c6ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c6be:	bd70      	pop	{r4, r5, r6, pc}
 800c6c0:	0800de33 	.word	0x0800de33
 800c6c4:	0800deb3 	.word	0x0800deb3

0800c6c8 <__multadd>:
 800c6c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6cc:	4607      	mov	r7, r0
 800c6ce:	460c      	mov	r4, r1
 800c6d0:	461e      	mov	r6, r3
 800c6d2:	2000      	movs	r0, #0
 800c6d4:	690d      	ldr	r5, [r1, #16]
 800c6d6:	f101 0c14 	add.w	ip, r1, #20
 800c6da:	f8dc 3000 	ldr.w	r3, [ip]
 800c6de:	3001      	adds	r0, #1
 800c6e0:	b299      	uxth	r1, r3
 800c6e2:	fb02 6101 	mla	r1, r2, r1, r6
 800c6e6:	0c1e      	lsrs	r6, r3, #16
 800c6e8:	0c0b      	lsrs	r3, r1, #16
 800c6ea:	fb02 3306 	mla	r3, r2, r6, r3
 800c6ee:	b289      	uxth	r1, r1
 800c6f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c6f4:	4285      	cmp	r5, r0
 800c6f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c6fa:	f84c 1b04 	str.w	r1, [ip], #4
 800c6fe:	dcec      	bgt.n	800c6da <__multadd+0x12>
 800c700:	b30e      	cbz	r6, 800c746 <__multadd+0x7e>
 800c702:	68a3      	ldr	r3, [r4, #8]
 800c704:	42ab      	cmp	r3, r5
 800c706:	dc19      	bgt.n	800c73c <__multadd+0x74>
 800c708:	6861      	ldr	r1, [r4, #4]
 800c70a:	4638      	mov	r0, r7
 800c70c:	3101      	adds	r1, #1
 800c70e:	f7ff ff79 	bl	800c604 <_Balloc>
 800c712:	4680      	mov	r8, r0
 800c714:	b928      	cbnz	r0, 800c722 <__multadd+0x5a>
 800c716:	4602      	mov	r2, r0
 800c718:	21ba      	movs	r1, #186	@ 0xba
 800c71a:	4b0c      	ldr	r3, [pc, #48]	@ (800c74c <__multadd+0x84>)
 800c71c:	480c      	ldr	r0, [pc, #48]	@ (800c750 <__multadd+0x88>)
 800c71e:	f000 fee7 	bl	800d4f0 <__assert_func>
 800c722:	6922      	ldr	r2, [r4, #16]
 800c724:	f104 010c 	add.w	r1, r4, #12
 800c728:	3202      	adds	r2, #2
 800c72a:	0092      	lsls	r2, r2, #2
 800c72c:	300c      	adds	r0, #12
 800c72e:	f000 fed1 	bl	800d4d4 <memcpy>
 800c732:	4621      	mov	r1, r4
 800c734:	4638      	mov	r0, r7
 800c736:	f7ff ffa5 	bl	800c684 <_Bfree>
 800c73a:	4644      	mov	r4, r8
 800c73c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c740:	3501      	adds	r5, #1
 800c742:	615e      	str	r6, [r3, #20]
 800c744:	6125      	str	r5, [r4, #16]
 800c746:	4620      	mov	r0, r4
 800c748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c74c:	0800dea2 	.word	0x0800dea2
 800c750:	0800deb3 	.word	0x0800deb3

0800c754 <__hi0bits>:
 800c754:	4603      	mov	r3, r0
 800c756:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c75a:	bf3a      	itte	cc
 800c75c:	0403      	lslcc	r3, r0, #16
 800c75e:	2010      	movcc	r0, #16
 800c760:	2000      	movcs	r0, #0
 800c762:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c766:	bf3c      	itt	cc
 800c768:	021b      	lslcc	r3, r3, #8
 800c76a:	3008      	addcc	r0, #8
 800c76c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c770:	bf3c      	itt	cc
 800c772:	011b      	lslcc	r3, r3, #4
 800c774:	3004      	addcc	r0, #4
 800c776:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c77a:	bf3c      	itt	cc
 800c77c:	009b      	lslcc	r3, r3, #2
 800c77e:	3002      	addcc	r0, #2
 800c780:	2b00      	cmp	r3, #0
 800c782:	db05      	blt.n	800c790 <__hi0bits+0x3c>
 800c784:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c788:	f100 0001 	add.w	r0, r0, #1
 800c78c:	bf08      	it	eq
 800c78e:	2020      	moveq	r0, #32
 800c790:	4770      	bx	lr

0800c792 <__lo0bits>:
 800c792:	6803      	ldr	r3, [r0, #0]
 800c794:	4602      	mov	r2, r0
 800c796:	f013 0007 	ands.w	r0, r3, #7
 800c79a:	d00b      	beq.n	800c7b4 <__lo0bits+0x22>
 800c79c:	07d9      	lsls	r1, r3, #31
 800c79e:	d421      	bmi.n	800c7e4 <__lo0bits+0x52>
 800c7a0:	0798      	lsls	r0, r3, #30
 800c7a2:	bf49      	itett	mi
 800c7a4:	085b      	lsrmi	r3, r3, #1
 800c7a6:	089b      	lsrpl	r3, r3, #2
 800c7a8:	2001      	movmi	r0, #1
 800c7aa:	6013      	strmi	r3, [r2, #0]
 800c7ac:	bf5c      	itt	pl
 800c7ae:	2002      	movpl	r0, #2
 800c7b0:	6013      	strpl	r3, [r2, #0]
 800c7b2:	4770      	bx	lr
 800c7b4:	b299      	uxth	r1, r3
 800c7b6:	b909      	cbnz	r1, 800c7bc <__lo0bits+0x2a>
 800c7b8:	2010      	movs	r0, #16
 800c7ba:	0c1b      	lsrs	r3, r3, #16
 800c7bc:	b2d9      	uxtb	r1, r3
 800c7be:	b909      	cbnz	r1, 800c7c4 <__lo0bits+0x32>
 800c7c0:	3008      	adds	r0, #8
 800c7c2:	0a1b      	lsrs	r3, r3, #8
 800c7c4:	0719      	lsls	r1, r3, #28
 800c7c6:	bf04      	itt	eq
 800c7c8:	091b      	lsreq	r3, r3, #4
 800c7ca:	3004      	addeq	r0, #4
 800c7cc:	0799      	lsls	r1, r3, #30
 800c7ce:	bf04      	itt	eq
 800c7d0:	089b      	lsreq	r3, r3, #2
 800c7d2:	3002      	addeq	r0, #2
 800c7d4:	07d9      	lsls	r1, r3, #31
 800c7d6:	d403      	bmi.n	800c7e0 <__lo0bits+0x4e>
 800c7d8:	085b      	lsrs	r3, r3, #1
 800c7da:	f100 0001 	add.w	r0, r0, #1
 800c7de:	d003      	beq.n	800c7e8 <__lo0bits+0x56>
 800c7e0:	6013      	str	r3, [r2, #0]
 800c7e2:	4770      	bx	lr
 800c7e4:	2000      	movs	r0, #0
 800c7e6:	4770      	bx	lr
 800c7e8:	2020      	movs	r0, #32
 800c7ea:	4770      	bx	lr

0800c7ec <__i2b>:
 800c7ec:	b510      	push	{r4, lr}
 800c7ee:	460c      	mov	r4, r1
 800c7f0:	2101      	movs	r1, #1
 800c7f2:	f7ff ff07 	bl	800c604 <_Balloc>
 800c7f6:	4602      	mov	r2, r0
 800c7f8:	b928      	cbnz	r0, 800c806 <__i2b+0x1a>
 800c7fa:	f240 1145 	movw	r1, #325	@ 0x145
 800c7fe:	4b04      	ldr	r3, [pc, #16]	@ (800c810 <__i2b+0x24>)
 800c800:	4804      	ldr	r0, [pc, #16]	@ (800c814 <__i2b+0x28>)
 800c802:	f000 fe75 	bl	800d4f0 <__assert_func>
 800c806:	2301      	movs	r3, #1
 800c808:	6144      	str	r4, [r0, #20]
 800c80a:	6103      	str	r3, [r0, #16]
 800c80c:	bd10      	pop	{r4, pc}
 800c80e:	bf00      	nop
 800c810:	0800dea2 	.word	0x0800dea2
 800c814:	0800deb3 	.word	0x0800deb3

0800c818 <__multiply>:
 800c818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c81c:	4617      	mov	r7, r2
 800c81e:	690a      	ldr	r2, [r1, #16]
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	4689      	mov	r9, r1
 800c824:	429a      	cmp	r2, r3
 800c826:	bfa2      	ittt	ge
 800c828:	463b      	movge	r3, r7
 800c82a:	460f      	movge	r7, r1
 800c82c:	4699      	movge	r9, r3
 800c82e:	693d      	ldr	r5, [r7, #16]
 800c830:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	6879      	ldr	r1, [r7, #4]
 800c838:	eb05 060a 	add.w	r6, r5, sl
 800c83c:	42b3      	cmp	r3, r6
 800c83e:	b085      	sub	sp, #20
 800c840:	bfb8      	it	lt
 800c842:	3101      	addlt	r1, #1
 800c844:	f7ff fede 	bl	800c604 <_Balloc>
 800c848:	b930      	cbnz	r0, 800c858 <__multiply+0x40>
 800c84a:	4602      	mov	r2, r0
 800c84c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c850:	4b40      	ldr	r3, [pc, #256]	@ (800c954 <__multiply+0x13c>)
 800c852:	4841      	ldr	r0, [pc, #260]	@ (800c958 <__multiply+0x140>)
 800c854:	f000 fe4c 	bl	800d4f0 <__assert_func>
 800c858:	f100 0414 	add.w	r4, r0, #20
 800c85c:	4623      	mov	r3, r4
 800c85e:	2200      	movs	r2, #0
 800c860:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800c864:	4573      	cmp	r3, lr
 800c866:	d320      	bcc.n	800c8aa <__multiply+0x92>
 800c868:	f107 0814 	add.w	r8, r7, #20
 800c86c:	f109 0114 	add.w	r1, r9, #20
 800c870:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800c874:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800c878:	9302      	str	r3, [sp, #8]
 800c87a:	1beb      	subs	r3, r5, r7
 800c87c:	3b15      	subs	r3, #21
 800c87e:	f023 0303 	bic.w	r3, r3, #3
 800c882:	3304      	adds	r3, #4
 800c884:	3715      	adds	r7, #21
 800c886:	42bd      	cmp	r5, r7
 800c888:	bf38      	it	cc
 800c88a:	2304      	movcc	r3, #4
 800c88c:	9301      	str	r3, [sp, #4]
 800c88e:	9b02      	ldr	r3, [sp, #8]
 800c890:	9103      	str	r1, [sp, #12]
 800c892:	428b      	cmp	r3, r1
 800c894:	d80c      	bhi.n	800c8b0 <__multiply+0x98>
 800c896:	2e00      	cmp	r6, #0
 800c898:	dd03      	ble.n	800c8a2 <__multiply+0x8a>
 800c89a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d055      	beq.n	800c94e <__multiply+0x136>
 800c8a2:	6106      	str	r6, [r0, #16]
 800c8a4:	b005      	add	sp, #20
 800c8a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8aa:	f843 2b04 	str.w	r2, [r3], #4
 800c8ae:	e7d9      	b.n	800c864 <__multiply+0x4c>
 800c8b0:	f8b1 a000 	ldrh.w	sl, [r1]
 800c8b4:	f1ba 0f00 	cmp.w	sl, #0
 800c8b8:	d01f      	beq.n	800c8fa <__multiply+0xe2>
 800c8ba:	46c4      	mov	ip, r8
 800c8bc:	46a1      	mov	r9, r4
 800c8be:	2700      	movs	r7, #0
 800c8c0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c8c4:	f8d9 3000 	ldr.w	r3, [r9]
 800c8c8:	fa1f fb82 	uxth.w	fp, r2
 800c8cc:	b29b      	uxth	r3, r3
 800c8ce:	fb0a 330b 	mla	r3, sl, fp, r3
 800c8d2:	443b      	add	r3, r7
 800c8d4:	f8d9 7000 	ldr.w	r7, [r9]
 800c8d8:	0c12      	lsrs	r2, r2, #16
 800c8da:	0c3f      	lsrs	r7, r7, #16
 800c8dc:	fb0a 7202 	mla	r2, sl, r2, r7
 800c8e0:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c8e4:	b29b      	uxth	r3, r3
 800c8e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c8ea:	4565      	cmp	r5, ip
 800c8ec:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c8f0:	f849 3b04 	str.w	r3, [r9], #4
 800c8f4:	d8e4      	bhi.n	800c8c0 <__multiply+0xa8>
 800c8f6:	9b01      	ldr	r3, [sp, #4]
 800c8f8:	50e7      	str	r7, [r4, r3]
 800c8fa:	9b03      	ldr	r3, [sp, #12]
 800c8fc:	3104      	adds	r1, #4
 800c8fe:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c902:	f1b9 0f00 	cmp.w	r9, #0
 800c906:	d020      	beq.n	800c94a <__multiply+0x132>
 800c908:	4647      	mov	r7, r8
 800c90a:	46a4      	mov	ip, r4
 800c90c:	f04f 0a00 	mov.w	sl, #0
 800c910:	6823      	ldr	r3, [r4, #0]
 800c912:	f8b7 b000 	ldrh.w	fp, [r7]
 800c916:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c91a:	b29b      	uxth	r3, r3
 800c91c:	fb09 220b 	mla	r2, r9, fp, r2
 800c920:	4452      	add	r2, sl
 800c922:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c926:	f84c 3b04 	str.w	r3, [ip], #4
 800c92a:	f857 3b04 	ldr.w	r3, [r7], #4
 800c92e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c932:	f8bc 3000 	ldrh.w	r3, [ip]
 800c936:	42bd      	cmp	r5, r7
 800c938:	fb09 330a 	mla	r3, r9, sl, r3
 800c93c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c940:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c944:	d8e5      	bhi.n	800c912 <__multiply+0xfa>
 800c946:	9a01      	ldr	r2, [sp, #4]
 800c948:	50a3      	str	r3, [r4, r2]
 800c94a:	3404      	adds	r4, #4
 800c94c:	e79f      	b.n	800c88e <__multiply+0x76>
 800c94e:	3e01      	subs	r6, #1
 800c950:	e7a1      	b.n	800c896 <__multiply+0x7e>
 800c952:	bf00      	nop
 800c954:	0800dea2 	.word	0x0800dea2
 800c958:	0800deb3 	.word	0x0800deb3

0800c95c <__pow5mult>:
 800c95c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c960:	4615      	mov	r5, r2
 800c962:	f012 0203 	ands.w	r2, r2, #3
 800c966:	4607      	mov	r7, r0
 800c968:	460e      	mov	r6, r1
 800c96a:	d007      	beq.n	800c97c <__pow5mult+0x20>
 800c96c:	4c25      	ldr	r4, [pc, #148]	@ (800ca04 <__pow5mult+0xa8>)
 800c96e:	3a01      	subs	r2, #1
 800c970:	2300      	movs	r3, #0
 800c972:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c976:	f7ff fea7 	bl	800c6c8 <__multadd>
 800c97a:	4606      	mov	r6, r0
 800c97c:	10ad      	asrs	r5, r5, #2
 800c97e:	d03d      	beq.n	800c9fc <__pow5mult+0xa0>
 800c980:	69fc      	ldr	r4, [r7, #28]
 800c982:	b97c      	cbnz	r4, 800c9a4 <__pow5mult+0x48>
 800c984:	2010      	movs	r0, #16
 800c986:	f7ff fd87 	bl	800c498 <malloc>
 800c98a:	4602      	mov	r2, r0
 800c98c:	61f8      	str	r0, [r7, #28]
 800c98e:	b928      	cbnz	r0, 800c99c <__pow5mult+0x40>
 800c990:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c994:	4b1c      	ldr	r3, [pc, #112]	@ (800ca08 <__pow5mult+0xac>)
 800c996:	481d      	ldr	r0, [pc, #116]	@ (800ca0c <__pow5mult+0xb0>)
 800c998:	f000 fdaa 	bl	800d4f0 <__assert_func>
 800c99c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c9a0:	6004      	str	r4, [r0, #0]
 800c9a2:	60c4      	str	r4, [r0, #12]
 800c9a4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c9a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c9ac:	b94c      	cbnz	r4, 800c9c2 <__pow5mult+0x66>
 800c9ae:	f240 2171 	movw	r1, #625	@ 0x271
 800c9b2:	4638      	mov	r0, r7
 800c9b4:	f7ff ff1a 	bl	800c7ec <__i2b>
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	4604      	mov	r4, r0
 800c9bc:	f8c8 0008 	str.w	r0, [r8, #8]
 800c9c0:	6003      	str	r3, [r0, #0]
 800c9c2:	f04f 0900 	mov.w	r9, #0
 800c9c6:	07eb      	lsls	r3, r5, #31
 800c9c8:	d50a      	bpl.n	800c9e0 <__pow5mult+0x84>
 800c9ca:	4631      	mov	r1, r6
 800c9cc:	4622      	mov	r2, r4
 800c9ce:	4638      	mov	r0, r7
 800c9d0:	f7ff ff22 	bl	800c818 <__multiply>
 800c9d4:	4680      	mov	r8, r0
 800c9d6:	4631      	mov	r1, r6
 800c9d8:	4638      	mov	r0, r7
 800c9da:	f7ff fe53 	bl	800c684 <_Bfree>
 800c9de:	4646      	mov	r6, r8
 800c9e0:	106d      	asrs	r5, r5, #1
 800c9e2:	d00b      	beq.n	800c9fc <__pow5mult+0xa0>
 800c9e4:	6820      	ldr	r0, [r4, #0]
 800c9e6:	b938      	cbnz	r0, 800c9f8 <__pow5mult+0x9c>
 800c9e8:	4622      	mov	r2, r4
 800c9ea:	4621      	mov	r1, r4
 800c9ec:	4638      	mov	r0, r7
 800c9ee:	f7ff ff13 	bl	800c818 <__multiply>
 800c9f2:	6020      	str	r0, [r4, #0]
 800c9f4:	f8c0 9000 	str.w	r9, [r0]
 800c9f8:	4604      	mov	r4, r0
 800c9fa:	e7e4      	b.n	800c9c6 <__pow5mult+0x6a>
 800c9fc:	4630      	mov	r0, r6
 800c9fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca02:	bf00      	nop
 800ca04:	0800df64 	.word	0x0800df64
 800ca08:	0800de33 	.word	0x0800de33
 800ca0c:	0800deb3 	.word	0x0800deb3

0800ca10 <__lshift>:
 800ca10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca14:	460c      	mov	r4, r1
 800ca16:	4607      	mov	r7, r0
 800ca18:	4691      	mov	r9, r2
 800ca1a:	6923      	ldr	r3, [r4, #16]
 800ca1c:	6849      	ldr	r1, [r1, #4]
 800ca1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ca22:	68a3      	ldr	r3, [r4, #8]
 800ca24:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ca28:	f108 0601 	add.w	r6, r8, #1
 800ca2c:	42b3      	cmp	r3, r6
 800ca2e:	db0b      	blt.n	800ca48 <__lshift+0x38>
 800ca30:	4638      	mov	r0, r7
 800ca32:	f7ff fde7 	bl	800c604 <_Balloc>
 800ca36:	4605      	mov	r5, r0
 800ca38:	b948      	cbnz	r0, 800ca4e <__lshift+0x3e>
 800ca3a:	4602      	mov	r2, r0
 800ca3c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ca40:	4b27      	ldr	r3, [pc, #156]	@ (800cae0 <__lshift+0xd0>)
 800ca42:	4828      	ldr	r0, [pc, #160]	@ (800cae4 <__lshift+0xd4>)
 800ca44:	f000 fd54 	bl	800d4f0 <__assert_func>
 800ca48:	3101      	adds	r1, #1
 800ca4a:	005b      	lsls	r3, r3, #1
 800ca4c:	e7ee      	b.n	800ca2c <__lshift+0x1c>
 800ca4e:	2300      	movs	r3, #0
 800ca50:	f100 0114 	add.w	r1, r0, #20
 800ca54:	f100 0210 	add.w	r2, r0, #16
 800ca58:	4618      	mov	r0, r3
 800ca5a:	4553      	cmp	r3, sl
 800ca5c:	db33      	blt.n	800cac6 <__lshift+0xb6>
 800ca5e:	6920      	ldr	r0, [r4, #16]
 800ca60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ca64:	f104 0314 	add.w	r3, r4, #20
 800ca68:	f019 091f 	ands.w	r9, r9, #31
 800ca6c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ca70:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ca74:	d02b      	beq.n	800cace <__lshift+0xbe>
 800ca76:	468a      	mov	sl, r1
 800ca78:	2200      	movs	r2, #0
 800ca7a:	f1c9 0e20 	rsb	lr, r9, #32
 800ca7e:	6818      	ldr	r0, [r3, #0]
 800ca80:	fa00 f009 	lsl.w	r0, r0, r9
 800ca84:	4310      	orrs	r0, r2
 800ca86:	f84a 0b04 	str.w	r0, [sl], #4
 800ca8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca8e:	459c      	cmp	ip, r3
 800ca90:	fa22 f20e 	lsr.w	r2, r2, lr
 800ca94:	d8f3      	bhi.n	800ca7e <__lshift+0x6e>
 800ca96:	ebac 0304 	sub.w	r3, ip, r4
 800ca9a:	3b15      	subs	r3, #21
 800ca9c:	f023 0303 	bic.w	r3, r3, #3
 800caa0:	3304      	adds	r3, #4
 800caa2:	f104 0015 	add.w	r0, r4, #21
 800caa6:	4560      	cmp	r0, ip
 800caa8:	bf88      	it	hi
 800caaa:	2304      	movhi	r3, #4
 800caac:	50ca      	str	r2, [r1, r3]
 800caae:	b10a      	cbz	r2, 800cab4 <__lshift+0xa4>
 800cab0:	f108 0602 	add.w	r6, r8, #2
 800cab4:	3e01      	subs	r6, #1
 800cab6:	4638      	mov	r0, r7
 800cab8:	4621      	mov	r1, r4
 800caba:	612e      	str	r6, [r5, #16]
 800cabc:	f7ff fde2 	bl	800c684 <_Bfree>
 800cac0:	4628      	mov	r0, r5
 800cac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cac6:	f842 0f04 	str.w	r0, [r2, #4]!
 800caca:	3301      	adds	r3, #1
 800cacc:	e7c5      	b.n	800ca5a <__lshift+0x4a>
 800cace:	3904      	subs	r1, #4
 800cad0:	f853 2b04 	ldr.w	r2, [r3], #4
 800cad4:	459c      	cmp	ip, r3
 800cad6:	f841 2f04 	str.w	r2, [r1, #4]!
 800cada:	d8f9      	bhi.n	800cad0 <__lshift+0xc0>
 800cadc:	e7ea      	b.n	800cab4 <__lshift+0xa4>
 800cade:	bf00      	nop
 800cae0:	0800dea2 	.word	0x0800dea2
 800cae4:	0800deb3 	.word	0x0800deb3

0800cae8 <__mcmp>:
 800cae8:	4603      	mov	r3, r0
 800caea:	690a      	ldr	r2, [r1, #16]
 800caec:	6900      	ldr	r0, [r0, #16]
 800caee:	b530      	push	{r4, r5, lr}
 800caf0:	1a80      	subs	r0, r0, r2
 800caf2:	d10e      	bne.n	800cb12 <__mcmp+0x2a>
 800caf4:	3314      	adds	r3, #20
 800caf6:	3114      	adds	r1, #20
 800caf8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cafc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cb00:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cb04:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cb08:	4295      	cmp	r5, r2
 800cb0a:	d003      	beq.n	800cb14 <__mcmp+0x2c>
 800cb0c:	d205      	bcs.n	800cb1a <__mcmp+0x32>
 800cb0e:	f04f 30ff 	mov.w	r0, #4294967295
 800cb12:	bd30      	pop	{r4, r5, pc}
 800cb14:	42a3      	cmp	r3, r4
 800cb16:	d3f3      	bcc.n	800cb00 <__mcmp+0x18>
 800cb18:	e7fb      	b.n	800cb12 <__mcmp+0x2a>
 800cb1a:	2001      	movs	r0, #1
 800cb1c:	e7f9      	b.n	800cb12 <__mcmp+0x2a>
	...

0800cb20 <__mdiff>:
 800cb20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb24:	4689      	mov	r9, r1
 800cb26:	4606      	mov	r6, r0
 800cb28:	4611      	mov	r1, r2
 800cb2a:	4648      	mov	r0, r9
 800cb2c:	4614      	mov	r4, r2
 800cb2e:	f7ff ffdb 	bl	800cae8 <__mcmp>
 800cb32:	1e05      	subs	r5, r0, #0
 800cb34:	d112      	bne.n	800cb5c <__mdiff+0x3c>
 800cb36:	4629      	mov	r1, r5
 800cb38:	4630      	mov	r0, r6
 800cb3a:	f7ff fd63 	bl	800c604 <_Balloc>
 800cb3e:	4602      	mov	r2, r0
 800cb40:	b928      	cbnz	r0, 800cb4e <__mdiff+0x2e>
 800cb42:	f240 2137 	movw	r1, #567	@ 0x237
 800cb46:	4b3e      	ldr	r3, [pc, #248]	@ (800cc40 <__mdiff+0x120>)
 800cb48:	483e      	ldr	r0, [pc, #248]	@ (800cc44 <__mdiff+0x124>)
 800cb4a:	f000 fcd1 	bl	800d4f0 <__assert_func>
 800cb4e:	2301      	movs	r3, #1
 800cb50:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cb54:	4610      	mov	r0, r2
 800cb56:	b003      	add	sp, #12
 800cb58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb5c:	bfbc      	itt	lt
 800cb5e:	464b      	movlt	r3, r9
 800cb60:	46a1      	movlt	r9, r4
 800cb62:	4630      	mov	r0, r6
 800cb64:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cb68:	bfba      	itte	lt
 800cb6a:	461c      	movlt	r4, r3
 800cb6c:	2501      	movlt	r5, #1
 800cb6e:	2500      	movge	r5, #0
 800cb70:	f7ff fd48 	bl	800c604 <_Balloc>
 800cb74:	4602      	mov	r2, r0
 800cb76:	b918      	cbnz	r0, 800cb80 <__mdiff+0x60>
 800cb78:	f240 2145 	movw	r1, #581	@ 0x245
 800cb7c:	4b30      	ldr	r3, [pc, #192]	@ (800cc40 <__mdiff+0x120>)
 800cb7e:	e7e3      	b.n	800cb48 <__mdiff+0x28>
 800cb80:	f100 0b14 	add.w	fp, r0, #20
 800cb84:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cb88:	f109 0310 	add.w	r3, r9, #16
 800cb8c:	60c5      	str	r5, [r0, #12]
 800cb8e:	f04f 0c00 	mov.w	ip, #0
 800cb92:	f109 0514 	add.w	r5, r9, #20
 800cb96:	46d9      	mov	r9, fp
 800cb98:	6926      	ldr	r6, [r4, #16]
 800cb9a:	f104 0e14 	add.w	lr, r4, #20
 800cb9e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cba2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cba6:	9301      	str	r3, [sp, #4]
 800cba8:	9b01      	ldr	r3, [sp, #4]
 800cbaa:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cbae:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cbb2:	b281      	uxth	r1, r0
 800cbb4:	9301      	str	r3, [sp, #4]
 800cbb6:	fa1f f38a 	uxth.w	r3, sl
 800cbba:	1a5b      	subs	r3, r3, r1
 800cbbc:	0c00      	lsrs	r0, r0, #16
 800cbbe:	4463      	add	r3, ip
 800cbc0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cbc4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cbc8:	b29b      	uxth	r3, r3
 800cbca:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cbce:	4576      	cmp	r6, lr
 800cbd0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cbd4:	f849 3b04 	str.w	r3, [r9], #4
 800cbd8:	d8e6      	bhi.n	800cba8 <__mdiff+0x88>
 800cbda:	1b33      	subs	r3, r6, r4
 800cbdc:	3b15      	subs	r3, #21
 800cbde:	f023 0303 	bic.w	r3, r3, #3
 800cbe2:	3415      	adds	r4, #21
 800cbe4:	3304      	adds	r3, #4
 800cbe6:	42a6      	cmp	r6, r4
 800cbe8:	bf38      	it	cc
 800cbea:	2304      	movcc	r3, #4
 800cbec:	441d      	add	r5, r3
 800cbee:	445b      	add	r3, fp
 800cbf0:	461e      	mov	r6, r3
 800cbf2:	462c      	mov	r4, r5
 800cbf4:	4544      	cmp	r4, r8
 800cbf6:	d30e      	bcc.n	800cc16 <__mdiff+0xf6>
 800cbf8:	f108 0103 	add.w	r1, r8, #3
 800cbfc:	1b49      	subs	r1, r1, r5
 800cbfe:	f021 0103 	bic.w	r1, r1, #3
 800cc02:	3d03      	subs	r5, #3
 800cc04:	45a8      	cmp	r8, r5
 800cc06:	bf38      	it	cc
 800cc08:	2100      	movcc	r1, #0
 800cc0a:	440b      	add	r3, r1
 800cc0c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cc10:	b199      	cbz	r1, 800cc3a <__mdiff+0x11a>
 800cc12:	6117      	str	r7, [r2, #16]
 800cc14:	e79e      	b.n	800cb54 <__mdiff+0x34>
 800cc16:	46e6      	mov	lr, ip
 800cc18:	f854 1b04 	ldr.w	r1, [r4], #4
 800cc1c:	fa1f fc81 	uxth.w	ip, r1
 800cc20:	44f4      	add	ip, lr
 800cc22:	0c08      	lsrs	r0, r1, #16
 800cc24:	4471      	add	r1, lr
 800cc26:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cc2a:	b289      	uxth	r1, r1
 800cc2c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cc30:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cc34:	f846 1b04 	str.w	r1, [r6], #4
 800cc38:	e7dc      	b.n	800cbf4 <__mdiff+0xd4>
 800cc3a:	3f01      	subs	r7, #1
 800cc3c:	e7e6      	b.n	800cc0c <__mdiff+0xec>
 800cc3e:	bf00      	nop
 800cc40:	0800dea2 	.word	0x0800dea2
 800cc44:	0800deb3 	.word	0x0800deb3

0800cc48 <__d2b>:
 800cc48:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800cc4c:	2101      	movs	r1, #1
 800cc4e:	4690      	mov	r8, r2
 800cc50:	4699      	mov	r9, r3
 800cc52:	9e08      	ldr	r6, [sp, #32]
 800cc54:	f7ff fcd6 	bl	800c604 <_Balloc>
 800cc58:	4604      	mov	r4, r0
 800cc5a:	b930      	cbnz	r0, 800cc6a <__d2b+0x22>
 800cc5c:	4602      	mov	r2, r0
 800cc5e:	f240 310f 	movw	r1, #783	@ 0x30f
 800cc62:	4b23      	ldr	r3, [pc, #140]	@ (800ccf0 <__d2b+0xa8>)
 800cc64:	4823      	ldr	r0, [pc, #140]	@ (800ccf4 <__d2b+0xac>)
 800cc66:	f000 fc43 	bl	800d4f0 <__assert_func>
 800cc6a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cc6e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cc72:	b10d      	cbz	r5, 800cc78 <__d2b+0x30>
 800cc74:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cc78:	9301      	str	r3, [sp, #4]
 800cc7a:	f1b8 0300 	subs.w	r3, r8, #0
 800cc7e:	d024      	beq.n	800ccca <__d2b+0x82>
 800cc80:	4668      	mov	r0, sp
 800cc82:	9300      	str	r3, [sp, #0]
 800cc84:	f7ff fd85 	bl	800c792 <__lo0bits>
 800cc88:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cc8c:	b1d8      	cbz	r0, 800ccc6 <__d2b+0x7e>
 800cc8e:	f1c0 0320 	rsb	r3, r0, #32
 800cc92:	fa02 f303 	lsl.w	r3, r2, r3
 800cc96:	430b      	orrs	r3, r1
 800cc98:	40c2      	lsrs	r2, r0
 800cc9a:	6163      	str	r3, [r4, #20]
 800cc9c:	9201      	str	r2, [sp, #4]
 800cc9e:	9b01      	ldr	r3, [sp, #4]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	bf0c      	ite	eq
 800cca4:	2201      	moveq	r2, #1
 800cca6:	2202      	movne	r2, #2
 800cca8:	61a3      	str	r3, [r4, #24]
 800ccaa:	6122      	str	r2, [r4, #16]
 800ccac:	b1ad      	cbz	r5, 800ccda <__d2b+0x92>
 800ccae:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ccb2:	4405      	add	r5, r0
 800ccb4:	6035      	str	r5, [r6, #0]
 800ccb6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ccba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccbc:	6018      	str	r0, [r3, #0]
 800ccbe:	4620      	mov	r0, r4
 800ccc0:	b002      	add	sp, #8
 800ccc2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800ccc6:	6161      	str	r1, [r4, #20]
 800ccc8:	e7e9      	b.n	800cc9e <__d2b+0x56>
 800ccca:	a801      	add	r0, sp, #4
 800cccc:	f7ff fd61 	bl	800c792 <__lo0bits>
 800ccd0:	9b01      	ldr	r3, [sp, #4]
 800ccd2:	2201      	movs	r2, #1
 800ccd4:	6163      	str	r3, [r4, #20]
 800ccd6:	3020      	adds	r0, #32
 800ccd8:	e7e7      	b.n	800ccaa <__d2b+0x62>
 800ccda:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ccde:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cce2:	6030      	str	r0, [r6, #0]
 800cce4:	6918      	ldr	r0, [r3, #16]
 800cce6:	f7ff fd35 	bl	800c754 <__hi0bits>
 800ccea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ccee:	e7e4      	b.n	800ccba <__d2b+0x72>
 800ccf0:	0800dea2 	.word	0x0800dea2
 800ccf4:	0800deb3 	.word	0x0800deb3

0800ccf8 <__ssputs_r>:
 800ccf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccfc:	461f      	mov	r7, r3
 800ccfe:	688e      	ldr	r6, [r1, #8]
 800cd00:	4682      	mov	sl, r0
 800cd02:	42be      	cmp	r6, r7
 800cd04:	460c      	mov	r4, r1
 800cd06:	4690      	mov	r8, r2
 800cd08:	680b      	ldr	r3, [r1, #0]
 800cd0a:	d82d      	bhi.n	800cd68 <__ssputs_r+0x70>
 800cd0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cd10:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cd14:	d026      	beq.n	800cd64 <__ssputs_r+0x6c>
 800cd16:	6965      	ldr	r5, [r4, #20]
 800cd18:	6909      	ldr	r1, [r1, #16]
 800cd1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cd1e:	eba3 0901 	sub.w	r9, r3, r1
 800cd22:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cd26:	1c7b      	adds	r3, r7, #1
 800cd28:	444b      	add	r3, r9
 800cd2a:	106d      	asrs	r5, r5, #1
 800cd2c:	429d      	cmp	r5, r3
 800cd2e:	bf38      	it	cc
 800cd30:	461d      	movcc	r5, r3
 800cd32:	0553      	lsls	r3, r2, #21
 800cd34:	d527      	bpl.n	800cd86 <__ssputs_r+0x8e>
 800cd36:	4629      	mov	r1, r5
 800cd38:	f7ff fbd8 	bl	800c4ec <_malloc_r>
 800cd3c:	4606      	mov	r6, r0
 800cd3e:	b360      	cbz	r0, 800cd9a <__ssputs_r+0xa2>
 800cd40:	464a      	mov	r2, r9
 800cd42:	6921      	ldr	r1, [r4, #16]
 800cd44:	f000 fbc6 	bl	800d4d4 <memcpy>
 800cd48:	89a3      	ldrh	r3, [r4, #12]
 800cd4a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cd4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd52:	81a3      	strh	r3, [r4, #12]
 800cd54:	6126      	str	r6, [r4, #16]
 800cd56:	444e      	add	r6, r9
 800cd58:	6026      	str	r6, [r4, #0]
 800cd5a:	463e      	mov	r6, r7
 800cd5c:	6165      	str	r5, [r4, #20]
 800cd5e:	eba5 0509 	sub.w	r5, r5, r9
 800cd62:	60a5      	str	r5, [r4, #8]
 800cd64:	42be      	cmp	r6, r7
 800cd66:	d900      	bls.n	800cd6a <__ssputs_r+0x72>
 800cd68:	463e      	mov	r6, r7
 800cd6a:	4632      	mov	r2, r6
 800cd6c:	4641      	mov	r1, r8
 800cd6e:	6820      	ldr	r0, [r4, #0]
 800cd70:	f000 fb63 	bl	800d43a <memmove>
 800cd74:	2000      	movs	r0, #0
 800cd76:	68a3      	ldr	r3, [r4, #8]
 800cd78:	1b9b      	subs	r3, r3, r6
 800cd7a:	60a3      	str	r3, [r4, #8]
 800cd7c:	6823      	ldr	r3, [r4, #0]
 800cd7e:	4433      	add	r3, r6
 800cd80:	6023      	str	r3, [r4, #0]
 800cd82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd86:	462a      	mov	r2, r5
 800cd88:	f000 fbf6 	bl	800d578 <_realloc_r>
 800cd8c:	4606      	mov	r6, r0
 800cd8e:	2800      	cmp	r0, #0
 800cd90:	d1e0      	bne.n	800cd54 <__ssputs_r+0x5c>
 800cd92:	4650      	mov	r0, sl
 800cd94:	6921      	ldr	r1, [r4, #16]
 800cd96:	f7ff fb37 	bl	800c408 <_free_r>
 800cd9a:	230c      	movs	r3, #12
 800cd9c:	f8ca 3000 	str.w	r3, [sl]
 800cda0:	89a3      	ldrh	r3, [r4, #12]
 800cda2:	f04f 30ff 	mov.w	r0, #4294967295
 800cda6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cdaa:	81a3      	strh	r3, [r4, #12]
 800cdac:	e7e9      	b.n	800cd82 <__ssputs_r+0x8a>
	...

0800cdb0 <_svfiprintf_r>:
 800cdb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdb4:	4698      	mov	r8, r3
 800cdb6:	898b      	ldrh	r3, [r1, #12]
 800cdb8:	4607      	mov	r7, r0
 800cdba:	061b      	lsls	r3, r3, #24
 800cdbc:	460d      	mov	r5, r1
 800cdbe:	4614      	mov	r4, r2
 800cdc0:	b09d      	sub	sp, #116	@ 0x74
 800cdc2:	d510      	bpl.n	800cde6 <_svfiprintf_r+0x36>
 800cdc4:	690b      	ldr	r3, [r1, #16]
 800cdc6:	b973      	cbnz	r3, 800cde6 <_svfiprintf_r+0x36>
 800cdc8:	2140      	movs	r1, #64	@ 0x40
 800cdca:	f7ff fb8f 	bl	800c4ec <_malloc_r>
 800cdce:	6028      	str	r0, [r5, #0]
 800cdd0:	6128      	str	r0, [r5, #16]
 800cdd2:	b930      	cbnz	r0, 800cde2 <_svfiprintf_r+0x32>
 800cdd4:	230c      	movs	r3, #12
 800cdd6:	603b      	str	r3, [r7, #0]
 800cdd8:	f04f 30ff 	mov.w	r0, #4294967295
 800cddc:	b01d      	add	sp, #116	@ 0x74
 800cdde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cde2:	2340      	movs	r3, #64	@ 0x40
 800cde4:	616b      	str	r3, [r5, #20]
 800cde6:	2300      	movs	r3, #0
 800cde8:	9309      	str	r3, [sp, #36]	@ 0x24
 800cdea:	2320      	movs	r3, #32
 800cdec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cdf0:	2330      	movs	r3, #48	@ 0x30
 800cdf2:	f04f 0901 	mov.w	r9, #1
 800cdf6:	f8cd 800c 	str.w	r8, [sp, #12]
 800cdfa:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800cf94 <_svfiprintf_r+0x1e4>
 800cdfe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ce02:	4623      	mov	r3, r4
 800ce04:	469a      	mov	sl, r3
 800ce06:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce0a:	b10a      	cbz	r2, 800ce10 <_svfiprintf_r+0x60>
 800ce0c:	2a25      	cmp	r2, #37	@ 0x25
 800ce0e:	d1f9      	bne.n	800ce04 <_svfiprintf_r+0x54>
 800ce10:	ebba 0b04 	subs.w	fp, sl, r4
 800ce14:	d00b      	beq.n	800ce2e <_svfiprintf_r+0x7e>
 800ce16:	465b      	mov	r3, fp
 800ce18:	4622      	mov	r2, r4
 800ce1a:	4629      	mov	r1, r5
 800ce1c:	4638      	mov	r0, r7
 800ce1e:	f7ff ff6b 	bl	800ccf8 <__ssputs_r>
 800ce22:	3001      	adds	r0, #1
 800ce24:	f000 80a7 	beq.w	800cf76 <_svfiprintf_r+0x1c6>
 800ce28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ce2a:	445a      	add	r2, fp
 800ce2c:	9209      	str	r2, [sp, #36]	@ 0x24
 800ce2e:	f89a 3000 	ldrb.w	r3, [sl]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	f000 809f 	beq.w	800cf76 <_svfiprintf_r+0x1c6>
 800ce38:	2300      	movs	r3, #0
 800ce3a:	f04f 32ff 	mov.w	r2, #4294967295
 800ce3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce42:	f10a 0a01 	add.w	sl, sl, #1
 800ce46:	9304      	str	r3, [sp, #16]
 800ce48:	9307      	str	r3, [sp, #28]
 800ce4a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ce4e:	931a      	str	r3, [sp, #104]	@ 0x68
 800ce50:	4654      	mov	r4, sl
 800ce52:	2205      	movs	r2, #5
 800ce54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce58:	484e      	ldr	r0, [pc, #312]	@ (800cf94 <_svfiprintf_r+0x1e4>)
 800ce5a:	f7fe fc6a 	bl	800b732 <memchr>
 800ce5e:	9a04      	ldr	r2, [sp, #16]
 800ce60:	b9d8      	cbnz	r0, 800ce9a <_svfiprintf_r+0xea>
 800ce62:	06d0      	lsls	r0, r2, #27
 800ce64:	bf44      	itt	mi
 800ce66:	2320      	movmi	r3, #32
 800ce68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce6c:	0711      	lsls	r1, r2, #28
 800ce6e:	bf44      	itt	mi
 800ce70:	232b      	movmi	r3, #43	@ 0x2b
 800ce72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce76:	f89a 3000 	ldrb.w	r3, [sl]
 800ce7a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce7c:	d015      	beq.n	800ceaa <_svfiprintf_r+0xfa>
 800ce7e:	4654      	mov	r4, sl
 800ce80:	2000      	movs	r0, #0
 800ce82:	f04f 0c0a 	mov.w	ip, #10
 800ce86:	9a07      	ldr	r2, [sp, #28]
 800ce88:	4621      	mov	r1, r4
 800ce8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce8e:	3b30      	subs	r3, #48	@ 0x30
 800ce90:	2b09      	cmp	r3, #9
 800ce92:	d94b      	bls.n	800cf2c <_svfiprintf_r+0x17c>
 800ce94:	b1b0      	cbz	r0, 800cec4 <_svfiprintf_r+0x114>
 800ce96:	9207      	str	r2, [sp, #28]
 800ce98:	e014      	b.n	800cec4 <_svfiprintf_r+0x114>
 800ce9a:	eba0 0308 	sub.w	r3, r0, r8
 800ce9e:	fa09 f303 	lsl.w	r3, r9, r3
 800cea2:	4313      	orrs	r3, r2
 800cea4:	46a2      	mov	sl, r4
 800cea6:	9304      	str	r3, [sp, #16]
 800cea8:	e7d2      	b.n	800ce50 <_svfiprintf_r+0xa0>
 800ceaa:	9b03      	ldr	r3, [sp, #12]
 800ceac:	1d19      	adds	r1, r3, #4
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	9103      	str	r1, [sp, #12]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	bfbb      	ittet	lt
 800ceb6:	425b      	neglt	r3, r3
 800ceb8:	f042 0202 	orrlt.w	r2, r2, #2
 800cebc:	9307      	strge	r3, [sp, #28]
 800cebe:	9307      	strlt	r3, [sp, #28]
 800cec0:	bfb8      	it	lt
 800cec2:	9204      	strlt	r2, [sp, #16]
 800cec4:	7823      	ldrb	r3, [r4, #0]
 800cec6:	2b2e      	cmp	r3, #46	@ 0x2e
 800cec8:	d10a      	bne.n	800cee0 <_svfiprintf_r+0x130>
 800ceca:	7863      	ldrb	r3, [r4, #1]
 800cecc:	2b2a      	cmp	r3, #42	@ 0x2a
 800cece:	d132      	bne.n	800cf36 <_svfiprintf_r+0x186>
 800ced0:	9b03      	ldr	r3, [sp, #12]
 800ced2:	3402      	adds	r4, #2
 800ced4:	1d1a      	adds	r2, r3, #4
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	9203      	str	r2, [sp, #12]
 800ceda:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cede:	9305      	str	r3, [sp, #20]
 800cee0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800cf98 <_svfiprintf_r+0x1e8>
 800cee4:	2203      	movs	r2, #3
 800cee6:	4650      	mov	r0, sl
 800cee8:	7821      	ldrb	r1, [r4, #0]
 800ceea:	f7fe fc22 	bl	800b732 <memchr>
 800ceee:	b138      	cbz	r0, 800cf00 <_svfiprintf_r+0x150>
 800cef0:	2240      	movs	r2, #64	@ 0x40
 800cef2:	9b04      	ldr	r3, [sp, #16]
 800cef4:	eba0 000a 	sub.w	r0, r0, sl
 800cef8:	4082      	lsls	r2, r0
 800cefa:	4313      	orrs	r3, r2
 800cefc:	3401      	adds	r4, #1
 800cefe:	9304      	str	r3, [sp, #16]
 800cf00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf04:	2206      	movs	r2, #6
 800cf06:	4825      	ldr	r0, [pc, #148]	@ (800cf9c <_svfiprintf_r+0x1ec>)
 800cf08:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cf0c:	f7fe fc11 	bl	800b732 <memchr>
 800cf10:	2800      	cmp	r0, #0
 800cf12:	d036      	beq.n	800cf82 <_svfiprintf_r+0x1d2>
 800cf14:	4b22      	ldr	r3, [pc, #136]	@ (800cfa0 <_svfiprintf_r+0x1f0>)
 800cf16:	bb1b      	cbnz	r3, 800cf60 <_svfiprintf_r+0x1b0>
 800cf18:	9b03      	ldr	r3, [sp, #12]
 800cf1a:	3307      	adds	r3, #7
 800cf1c:	f023 0307 	bic.w	r3, r3, #7
 800cf20:	3308      	adds	r3, #8
 800cf22:	9303      	str	r3, [sp, #12]
 800cf24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf26:	4433      	add	r3, r6
 800cf28:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf2a:	e76a      	b.n	800ce02 <_svfiprintf_r+0x52>
 800cf2c:	460c      	mov	r4, r1
 800cf2e:	2001      	movs	r0, #1
 800cf30:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf34:	e7a8      	b.n	800ce88 <_svfiprintf_r+0xd8>
 800cf36:	2300      	movs	r3, #0
 800cf38:	f04f 0c0a 	mov.w	ip, #10
 800cf3c:	4619      	mov	r1, r3
 800cf3e:	3401      	adds	r4, #1
 800cf40:	9305      	str	r3, [sp, #20]
 800cf42:	4620      	mov	r0, r4
 800cf44:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf48:	3a30      	subs	r2, #48	@ 0x30
 800cf4a:	2a09      	cmp	r2, #9
 800cf4c:	d903      	bls.n	800cf56 <_svfiprintf_r+0x1a6>
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d0c6      	beq.n	800cee0 <_svfiprintf_r+0x130>
 800cf52:	9105      	str	r1, [sp, #20]
 800cf54:	e7c4      	b.n	800cee0 <_svfiprintf_r+0x130>
 800cf56:	4604      	mov	r4, r0
 800cf58:	2301      	movs	r3, #1
 800cf5a:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf5e:	e7f0      	b.n	800cf42 <_svfiprintf_r+0x192>
 800cf60:	ab03      	add	r3, sp, #12
 800cf62:	9300      	str	r3, [sp, #0]
 800cf64:	462a      	mov	r2, r5
 800cf66:	4638      	mov	r0, r7
 800cf68:	4b0e      	ldr	r3, [pc, #56]	@ (800cfa4 <_svfiprintf_r+0x1f4>)
 800cf6a:	a904      	add	r1, sp, #16
 800cf6c:	f7fd fd40 	bl	800a9f0 <_printf_float>
 800cf70:	1c42      	adds	r2, r0, #1
 800cf72:	4606      	mov	r6, r0
 800cf74:	d1d6      	bne.n	800cf24 <_svfiprintf_r+0x174>
 800cf76:	89ab      	ldrh	r3, [r5, #12]
 800cf78:	065b      	lsls	r3, r3, #25
 800cf7a:	f53f af2d 	bmi.w	800cdd8 <_svfiprintf_r+0x28>
 800cf7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cf80:	e72c      	b.n	800cddc <_svfiprintf_r+0x2c>
 800cf82:	ab03      	add	r3, sp, #12
 800cf84:	9300      	str	r3, [sp, #0]
 800cf86:	462a      	mov	r2, r5
 800cf88:	4638      	mov	r0, r7
 800cf8a:	4b06      	ldr	r3, [pc, #24]	@ (800cfa4 <_svfiprintf_r+0x1f4>)
 800cf8c:	a904      	add	r1, sp, #16
 800cf8e:	f7fd ffcd 	bl	800af2c <_printf_i>
 800cf92:	e7ed      	b.n	800cf70 <_svfiprintf_r+0x1c0>
 800cf94:	0800df0c 	.word	0x0800df0c
 800cf98:	0800df12 	.word	0x0800df12
 800cf9c:	0800df16 	.word	0x0800df16
 800cfa0:	0800a9f1 	.word	0x0800a9f1
 800cfa4:	0800ccf9 	.word	0x0800ccf9

0800cfa8 <__sfputc_r>:
 800cfa8:	6893      	ldr	r3, [r2, #8]
 800cfaa:	b410      	push	{r4}
 800cfac:	3b01      	subs	r3, #1
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	6093      	str	r3, [r2, #8]
 800cfb2:	da07      	bge.n	800cfc4 <__sfputc_r+0x1c>
 800cfb4:	6994      	ldr	r4, [r2, #24]
 800cfb6:	42a3      	cmp	r3, r4
 800cfb8:	db01      	blt.n	800cfbe <__sfputc_r+0x16>
 800cfba:	290a      	cmp	r1, #10
 800cfbc:	d102      	bne.n	800cfc4 <__sfputc_r+0x1c>
 800cfbe:	bc10      	pop	{r4}
 800cfc0:	f7fe ba7d 	b.w	800b4be <__swbuf_r>
 800cfc4:	6813      	ldr	r3, [r2, #0]
 800cfc6:	1c58      	adds	r0, r3, #1
 800cfc8:	6010      	str	r0, [r2, #0]
 800cfca:	7019      	strb	r1, [r3, #0]
 800cfcc:	4608      	mov	r0, r1
 800cfce:	bc10      	pop	{r4}
 800cfd0:	4770      	bx	lr

0800cfd2 <__sfputs_r>:
 800cfd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfd4:	4606      	mov	r6, r0
 800cfd6:	460f      	mov	r7, r1
 800cfd8:	4614      	mov	r4, r2
 800cfda:	18d5      	adds	r5, r2, r3
 800cfdc:	42ac      	cmp	r4, r5
 800cfde:	d101      	bne.n	800cfe4 <__sfputs_r+0x12>
 800cfe0:	2000      	movs	r0, #0
 800cfe2:	e007      	b.n	800cff4 <__sfputs_r+0x22>
 800cfe4:	463a      	mov	r2, r7
 800cfe6:	4630      	mov	r0, r6
 800cfe8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfec:	f7ff ffdc 	bl	800cfa8 <__sfputc_r>
 800cff0:	1c43      	adds	r3, r0, #1
 800cff2:	d1f3      	bne.n	800cfdc <__sfputs_r+0xa>
 800cff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cff8 <_vfiprintf_r>:
 800cff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cffc:	460d      	mov	r5, r1
 800cffe:	4614      	mov	r4, r2
 800d000:	4698      	mov	r8, r3
 800d002:	4606      	mov	r6, r0
 800d004:	b09d      	sub	sp, #116	@ 0x74
 800d006:	b118      	cbz	r0, 800d010 <_vfiprintf_r+0x18>
 800d008:	6a03      	ldr	r3, [r0, #32]
 800d00a:	b90b      	cbnz	r3, 800d010 <_vfiprintf_r+0x18>
 800d00c:	f7fe f938 	bl	800b280 <__sinit>
 800d010:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d012:	07d9      	lsls	r1, r3, #31
 800d014:	d405      	bmi.n	800d022 <_vfiprintf_r+0x2a>
 800d016:	89ab      	ldrh	r3, [r5, #12]
 800d018:	059a      	lsls	r2, r3, #22
 800d01a:	d402      	bmi.n	800d022 <_vfiprintf_r+0x2a>
 800d01c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d01e:	f7fe fb86 	bl	800b72e <__retarget_lock_acquire_recursive>
 800d022:	89ab      	ldrh	r3, [r5, #12]
 800d024:	071b      	lsls	r3, r3, #28
 800d026:	d501      	bpl.n	800d02c <_vfiprintf_r+0x34>
 800d028:	692b      	ldr	r3, [r5, #16]
 800d02a:	b99b      	cbnz	r3, 800d054 <_vfiprintf_r+0x5c>
 800d02c:	4629      	mov	r1, r5
 800d02e:	4630      	mov	r0, r6
 800d030:	f7fe fa84 	bl	800b53c <__swsetup_r>
 800d034:	b170      	cbz	r0, 800d054 <_vfiprintf_r+0x5c>
 800d036:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d038:	07dc      	lsls	r4, r3, #31
 800d03a:	d504      	bpl.n	800d046 <_vfiprintf_r+0x4e>
 800d03c:	f04f 30ff 	mov.w	r0, #4294967295
 800d040:	b01d      	add	sp, #116	@ 0x74
 800d042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d046:	89ab      	ldrh	r3, [r5, #12]
 800d048:	0598      	lsls	r0, r3, #22
 800d04a:	d4f7      	bmi.n	800d03c <_vfiprintf_r+0x44>
 800d04c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d04e:	f7fe fb6f 	bl	800b730 <__retarget_lock_release_recursive>
 800d052:	e7f3      	b.n	800d03c <_vfiprintf_r+0x44>
 800d054:	2300      	movs	r3, #0
 800d056:	9309      	str	r3, [sp, #36]	@ 0x24
 800d058:	2320      	movs	r3, #32
 800d05a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d05e:	2330      	movs	r3, #48	@ 0x30
 800d060:	f04f 0901 	mov.w	r9, #1
 800d064:	f8cd 800c 	str.w	r8, [sp, #12]
 800d068:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800d214 <_vfiprintf_r+0x21c>
 800d06c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d070:	4623      	mov	r3, r4
 800d072:	469a      	mov	sl, r3
 800d074:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d078:	b10a      	cbz	r2, 800d07e <_vfiprintf_r+0x86>
 800d07a:	2a25      	cmp	r2, #37	@ 0x25
 800d07c:	d1f9      	bne.n	800d072 <_vfiprintf_r+0x7a>
 800d07e:	ebba 0b04 	subs.w	fp, sl, r4
 800d082:	d00b      	beq.n	800d09c <_vfiprintf_r+0xa4>
 800d084:	465b      	mov	r3, fp
 800d086:	4622      	mov	r2, r4
 800d088:	4629      	mov	r1, r5
 800d08a:	4630      	mov	r0, r6
 800d08c:	f7ff ffa1 	bl	800cfd2 <__sfputs_r>
 800d090:	3001      	adds	r0, #1
 800d092:	f000 80a7 	beq.w	800d1e4 <_vfiprintf_r+0x1ec>
 800d096:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d098:	445a      	add	r2, fp
 800d09a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d09c:	f89a 3000 	ldrb.w	r3, [sl]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	f000 809f 	beq.w	800d1e4 <_vfiprintf_r+0x1ec>
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	f04f 32ff 	mov.w	r2, #4294967295
 800d0ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d0b0:	f10a 0a01 	add.w	sl, sl, #1
 800d0b4:	9304      	str	r3, [sp, #16]
 800d0b6:	9307      	str	r3, [sp, #28]
 800d0b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d0bc:	931a      	str	r3, [sp, #104]	@ 0x68
 800d0be:	4654      	mov	r4, sl
 800d0c0:	2205      	movs	r2, #5
 800d0c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0c6:	4853      	ldr	r0, [pc, #332]	@ (800d214 <_vfiprintf_r+0x21c>)
 800d0c8:	f7fe fb33 	bl	800b732 <memchr>
 800d0cc:	9a04      	ldr	r2, [sp, #16]
 800d0ce:	b9d8      	cbnz	r0, 800d108 <_vfiprintf_r+0x110>
 800d0d0:	06d1      	lsls	r1, r2, #27
 800d0d2:	bf44      	itt	mi
 800d0d4:	2320      	movmi	r3, #32
 800d0d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d0da:	0713      	lsls	r3, r2, #28
 800d0dc:	bf44      	itt	mi
 800d0de:	232b      	movmi	r3, #43	@ 0x2b
 800d0e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d0e4:	f89a 3000 	ldrb.w	r3, [sl]
 800d0e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d0ea:	d015      	beq.n	800d118 <_vfiprintf_r+0x120>
 800d0ec:	4654      	mov	r4, sl
 800d0ee:	2000      	movs	r0, #0
 800d0f0:	f04f 0c0a 	mov.w	ip, #10
 800d0f4:	9a07      	ldr	r2, [sp, #28]
 800d0f6:	4621      	mov	r1, r4
 800d0f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0fc:	3b30      	subs	r3, #48	@ 0x30
 800d0fe:	2b09      	cmp	r3, #9
 800d100:	d94b      	bls.n	800d19a <_vfiprintf_r+0x1a2>
 800d102:	b1b0      	cbz	r0, 800d132 <_vfiprintf_r+0x13a>
 800d104:	9207      	str	r2, [sp, #28]
 800d106:	e014      	b.n	800d132 <_vfiprintf_r+0x13a>
 800d108:	eba0 0308 	sub.w	r3, r0, r8
 800d10c:	fa09 f303 	lsl.w	r3, r9, r3
 800d110:	4313      	orrs	r3, r2
 800d112:	46a2      	mov	sl, r4
 800d114:	9304      	str	r3, [sp, #16]
 800d116:	e7d2      	b.n	800d0be <_vfiprintf_r+0xc6>
 800d118:	9b03      	ldr	r3, [sp, #12]
 800d11a:	1d19      	adds	r1, r3, #4
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	9103      	str	r1, [sp, #12]
 800d120:	2b00      	cmp	r3, #0
 800d122:	bfbb      	ittet	lt
 800d124:	425b      	neglt	r3, r3
 800d126:	f042 0202 	orrlt.w	r2, r2, #2
 800d12a:	9307      	strge	r3, [sp, #28]
 800d12c:	9307      	strlt	r3, [sp, #28]
 800d12e:	bfb8      	it	lt
 800d130:	9204      	strlt	r2, [sp, #16]
 800d132:	7823      	ldrb	r3, [r4, #0]
 800d134:	2b2e      	cmp	r3, #46	@ 0x2e
 800d136:	d10a      	bne.n	800d14e <_vfiprintf_r+0x156>
 800d138:	7863      	ldrb	r3, [r4, #1]
 800d13a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d13c:	d132      	bne.n	800d1a4 <_vfiprintf_r+0x1ac>
 800d13e:	9b03      	ldr	r3, [sp, #12]
 800d140:	3402      	adds	r4, #2
 800d142:	1d1a      	adds	r2, r3, #4
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	9203      	str	r2, [sp, #12]
 800d148:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d14c:	9305      	str	r3, [sp, #20]
 800d14e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800d218 <_vfiprintf_r+0x220>
 800d152:	2203      	movs	r2, #3
 800d154:	4650      	mov	r0, sl
 800d156:	7821      	ldrb	r1, [r4, #0]
 800d158:	f7fe faeb 	bl	800b732 <memchr>
 800d15c:	b138      	cbz	r0, 800d16e <_vfiprintf_r+0x176>
 800d15e:	2240      	movs	r2, #64	@ 0x40
 800d160:	9b04      	ldr	r3, [sp, #16]
 800d162:	eba0 000a 	sub.w	r0, r0, sl
 800d166:	4082      	lsls	r2, r0
 800d168:	4313      	orrs	r3, r2
 800d16a:	3401      	adds	r4, #1
 800d16c:	9304      	str	r3, [sp, #16]
 800d16e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d172:	2206      	movs	r2, #6
 800d174:	4829      	ldr	r0, [pc, #164]	@ (800d21c <_vfiprintf_r+0x224>)
 800d176:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d17a:	f7fe fada 	bl	800b732 <memchr>
 800d17e:	2800      	cmp	r0, #0
 800d180:	d03f      	beq.n	800d202 <_vfiprintf_r+0x20a>
 800d182:	4b27      	ldr	r3, [pc, #156]	@ (800d220 <_vfiprintf_r+0x228>)
 800d184:	bb1b      	cbnz	r3, 800d1ce <_vfiprintf_r+0x1d6>
 800d186:	9b03      	ldr	r3, [sp, #12]
 800d188:	3307      	adds	r3, #7
 800d18a:	f023 0307 	bic.w	r3, r3, #7
 800d18e:	3308      	adds	r3, #8
 800d190:	9303      	str	r3, [sp, #12]
 800d192:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d194:	443b      	add	r3, r7
 800d196:	9309      	str	r3, [sp, #36]	@ 0x24
 800d198:	e76a      	b.n	800d070 <_vfiprintf_r+0x78>
 800d19a:	460c      	mov	r4, r1
 800d19c:	2001      	movs	r0, #1
 800d19e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d1a2:	e7a8      	b.n	800d0f6 <_vfiprintf_r+0xfe>
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	f04f 0c0a 	mov.w	ip, #10
 800d1aa:	4619      	mov	r1, r3
 800d1ac:	3401      	adds	r4, #1
 800d1ae:	9305      	str	r3, [sp, #20]
 800d1b0:	4620      	mov	r0, r4
 800d1b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1b6:	3a30      	subs	r2, #48	@ 0x30
 800d1b8:	2a09      	cmp	r2, #9
 800d1ba:	d903      	bls.n	800d1c4 <_vfiprintf_r+0x1cc>
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d0c6      	beq.n	800d14e <_vfiprintf_r+0x156>
 800d1c0:	9105      	str	r1, [sp, #20]
 800d1c2:	e7c4      	b.n	800d14e <_vfiprintf_r+0x156>
 800d1c4:	4604      	mov	r4, r0
 800d1c6:	2301      	movs	r3, #1
 800d1c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d1cc:	e7f0      	b.n	800d1b0 <_vfiprintf_r+0x1b8>
 800d1ce:	ab03      	add	r3, sp, #12
 800d1d0:	9300      	str	r3, [sp, #0]
 800d1d2:	462a      	mov	r2, r5
 800d1d4:	4630      	mov	r0, r6
 800d1d6:	4b13      	ldr	r3, [pc, #76]	@ (800d224 <_vfiprintf_r+0x22c>)
 800d1d8:	a904      	add	r1, sp, #16
 800d1da:	f7fd fc09 	bl	800a9f0 <_printf_float>
 800d1de:	4607      	mov	r7, r0
 800d1e0:	1c78      	adds	r0, r7, #1
 800d1e2:	d1d6      	bne.n	800d192 <_vfiprintf_r+0x19a>
 800d1e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d1e6:	07d9      	lsls	r1, r3, #31
 800d1e8:	d405      	bmi.n	800d1f6 <_vfiprintf_r+0x1fe>
 800d1ea:	89ab      	ldrh	r3, [r5, #12]
 800d1ec:	059a      	lsls	r2, r3, #22
 800d1ee:	d402      	bmi.n	800d1f6 <_vfiprintf_r+0x1fe>
 800d1f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d1f2:	f7fe fa9d 	bl	800b730 <__retarget_lock_release_recursive>
 800d1f6:	89ab      	ldrh	r3, [r5, #12]
 800d1f8:	065b      	lsls	r3, r3, #25
 800d1fa:	f53f af1f 	bmi.w	800d03c <_vfiprintf_r+0x44>
 800d1fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d200:	e71e      	b.n	800d040 <_vfiprintf_r+0x48>
 800d202:	ab03      	add	r3, sp, #12
 800d204:	9300      	str	r3, [sp, #0]
 800d206:	462a      	mov	r2, r5
 800d208:	4630      	mov	r0, r6
 800d20a:	4b06      	ldr	r3, [pc, #24]	@ (800d224 <_vfiprintf_r+0x22c>)
 800d20c:	a904      	add	r1, sp, #16
 800d20e:	f7fd fe8d 	bl	800af2c <_printf_i>
 800d212:	e7e4      	b.n	800d1de <_vfiprintf_r+0x1e6>
 800d214:	0800df0c 	.word	0x0800df0c
 800d218:	0800df12 	.word	0x0800df12
 800d21c:	0800df16 	.word	0x0800df16
 800d220:	0800a9f1 	.word	0x0800a9f1
 800d224:	0800cfd3 	.word	0x0800cfd3

0800d228 <__sflush_r>:
 800d228:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d22e:	0716      	lsls	r6, r2, #28
 800d230:	4605      	mov	r5, r0
 800d232:	460c      	mov	r4, r1
 800d234:	d454      	bmi.n	800d2e0 <__sflush_r+0xb8>
 800d236:	684b      	ldr	r3, [r1, #4]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	dc02      	bgt.n	800d242 <__sflush_r+0x1a>
 800d23c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d23e:	2b00      	cmp	r3, #0
 800d240:	dd48      	ble.n	800d2d4 <__sflush_r+0xac>
 800d242:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d244:	2e00      	cmp	r6, #0
 800d246:	d045      	beq.n	800d2d4 <__sflush_r+0xac>
 800d248:	2300      	movs	r3, #0
 800d24a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d24e:	682f      	ldr	r7, [r5, #0]
 800d250:	6a21      	ldr	r1, [r4, #32]
 800d252:	602b      	str	r3, [r5, #0]
 800d254:	d030      	beq.n	800d2b8 <__sflush_r+0x90>
 800d256:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d258:	89a3      	ldrh	r3, [r4, #12]
 800d25a:	0759      	lsls	r1, r3, #29
 800d25c:	d505      	bpl.n	800d26a <__sflush_r+0x42>
 800d25e:	6863      	ldr	r3, [r4, #4]
 800d260:	1ad2      	subs	r2, r2, r3
 800d262:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d264:	b10b      	cbz	r3, 800d26a <__sflush_r+0x42>
 800d266:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d268:	1ad2      	subs	r2, r2, r3
 800d26a:	2300      	movs	r3, #0
 800d26c:	4628      	mov	r0, r5
 800d26e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d270:	6a21      	ldr	r1, [r4, #32]
 800d272:	47b0      	blx	r6
 800d274:	1c43      	adds	r3, r0, #1
 800d276:	89a3      	ldrh	r3, [r4, #12]
 800d278:	d106      	bne.n	800d288 <__sflush_r+0x60>
 800d27a:	6829      	ldr	r1, [r5, #0]
 800d27c:	291d      	cmp	r1, #29
 800d27e:	d82b      	bhi.n	800d2d8 <__sflush_r+0xb0>
 800d280:	4a28      	ldr	r2, [pc, #160]	@ (800d324 <__sflush_r+0xfc>)
 800d282:	40ca      	lsrs	r2, r1
 800d284:	07d6      	lsls	r6, r2, #31
 800d286:	d527      	bpl.n	800d2d8 <__sflush_r+0xb0>
 800d288:	2200      	movs	r2, #0
 800d28a:	6062      	str	r2, [r4, #4]
 800d28c:	6922      	ldr	r2, [r4, #16]
 800d28e:	04d9      	lsls	r1, r3, #19
 800d290:	6022      	str	r2, [r4, #0]
 800d292:	d504      	bpl.n	800d29e <__sflush_r+0x76>
 800d294:	1c42      	adds	r2, r0, #1
 800d296:	d101      	bne.n	800d29c <__sflush_r+0x74>
 800d298:	682b      	ldr	r3, [r5, #0]
 800d29a:	b903      	cbnz	r3, 800d29e <__sflush_r+0x76>
 800d29c:	6560      	str	r0, [r4, #84]	@ 0x54
 800d29e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d2a0:	602f      	str	r7, [r5, #0]
 800d2a2:	b1b9      	cbz	r1, 800d2d4 <__sflush_r+0xac>
 800d2a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d2a8:	4299      	cmp	r1, r3
 800d2aa:	d002      	beq.n	800d2b2 <__sflush_r+0x8a>
 800d2ac:	4628      	mov	r0, r5
 800d2ae:	f7ff f8ab 	bl	800c408 <_free_r>
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	6363      	str	r3, [r4, #52]	@ 0x34
 800d2b6:	e00d      	b.n	800d2d4 <__sflush_r+0xac>
 800d2b8:	2301      	movs	r3, #1
 800d2ba:	4628      	mov	r0, r5
 800d2bc:	47b0      	blx	r6
 800d2be:	4602      	mov	r2, r0
 800d2c0:	1c50      	adds	r0, r2, #1
 800d2c2:	d1c9      	bne.n	800d258 <__sflush_r+0x30>
 800d2c4:	682b      	ldr	r3, [r5, #0]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d0c6      	beq.n	800d258 <__sflush_r+0x30>
 800d2ca:	2b1d      	cmp	r3, #29
 800d2cc:	d001      	beq.n	800d2d2 <__sflush_r+0xaa>
 800d2ce:	2b16      	cmp	r3, #22
 800d2d0:	d11d      	bne.n	800d30e <__sflush_r+0xe6>
 800d2d2:	602f      	str	r7, [r5, #0]
 800d2d4:	2000      	movs	r0, #0
 800d2d6:	e021      	b.n	800d31c <__sflush_r+0xf4>
 800d2d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d2dc:	b21b      	sxth	r3, r3
 800d2de:	e01a      	b.n	800d316 <__sflush_r+0xee>
 800d2e0:	690f      	ldr	r7, [r1, #16]
 800d2e2:	2f00      	cmp	r7, #0
 800d2e4:	d0f6      	beq.n	800d2d4 <__sflush_r+0xac>
 800d2e6:	0793      	lsls	r3, r2, #30
 800d2e8:	bf18      	it	ne
 800d2ea:	2300      	movne	r3, #0
 800d2ec:	680e      	ldr	r6, [r1, #0]
 800d2ee:	bf08      	it	eq
 800d2f0:	694b      	ldreq	r3, [r1, #20]
 800d2f2:	1bf6      	subs	r6, r6, r7
 800d2f4:	600f      	str	r7, [r1, #0]
 800d2f6:	608b      	str	r3, [r1, #8]
 800d2f8:	2e00      	cmp	r6, #0
 800d2fa:	ddeb      	ble.n	800d2d4 <__sflush_r+0xac>
 800d2fc:	4633      	mov	r3, r6
 800d2fe:	463a      	mov	r2, r7
 800d300:	4628      	mov	r0, r5
 800d302:	6a21      	ldr	r1, [r4, #32]
 800d304:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800d308:	47e0      	blx	ip
 800d30a:	2800      	cmp	r0, #0
 800d30c:	dc07      	bgt.n	800d31e <__sflush_r+0xf6>
 800d30e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d312:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d316:	f04f 30ff 	mov.w	r0, #4294967295
 800d31a:	81a3      	strh	r3, [r4, #12]
 800d31c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d31e:	4407      	add	r7, r0
 800d320:	1a36      	subs	r6, r6, r0
 800d322:	e7e9      	b.n	800d2f8 <__sflush_r+0xd0>
 800d324:	20400001 	.word	0x20400001

0800d328 <_fflush_r>:
 800d328:	b538      	push	{r3, r4, r5, lr}
 800d32a:	690b      	ldr	r3, [r1, #16]
 800d32c:	4605      	mov	r5, r0
 800d32e:	460c      	mov	r4, r1
 800d330:	b913      	cbnz	r3, 800d338 <_fflush_r+0x10>
 800d332:	2500      	movs	r5, #0
 800d334:	4628      	mov	r0, r5
 800d336:	bd38      	pop	{r3, r4, r5, pc}
 800d338:	b118      	cbz	r0, 800d342 <_fflush_r+0x1a>
 800d33a:	6a03      	ldr	r3, [r0, #32]
 800d33c:	b90b      	cbnz	r3, 800d342 <_fflush_r+0x1a>
 800d33e:	f7fd ff9f 	bl	800b280 <__sinit>
 800d342:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d0f3      	beq.n	800d332 <_fflush_r+0xa>
 800d34a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d34c:	07d0      	lsls	r0, r2, #31
 800d34e:	d404      	bmi.n	800d35a <_fflush_r+0x32>
 800d350:	0599      	lsls	r1, r3, #22
 800d352:	d402      	bmi.n	800d35a <_fflush_r+0x32>
 800d354:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d356:	f7fe f9ea 	bl	800b72e <__retarget_lock_acquire_recursive>
 800d35a:	4628      	mov	r0, r5
 800d35c:	4621      	mov	r1, r4
 800d35e:	f7ff ff63 	bl	800d228 <__sflush_r>
 800d362:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d364:	4605      	mov	r5, r0
 800d366:	07da      	lsls	r2, r3, #31
 800d368:	d4e4      	bmi.n	800d334 <_fflush_r+0xc>
 800d36a:	89a3      	ldrh	r3, [r4, #12]
 800d36c:	059b      	lsls	r3, r3, #22
 800d36e:	d4e1      	bmi.n	800d334 <_fflush_r+0xc>
 800d370:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d372:	f7fe f9dd 	bl	800b730 <__retarget_lock_release_recursive>
 800d376:	e7dd      	b.n	800d334 <_fflush_r+0xc>

0800d378 <__swhatbuf_r>:
 800d378:	b570      	push	{r4, r5, r6, lr}
 800d37a:	460c      	mov	r4, r1
 800d37c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d380:	4615      	mov	r5, r2
 800d382:	2900      	cmp	r1, #0
 800d384:	461e      	mov	r6, r3
 800d386:	b096      	sub	sp, #88	@ 0x58
 800d388:	da0c      	bge.n	800d3a4 <__swhatbuf_r+0x2c>
 800d38a:	89a3      	ldrh	r3, [r4, #12]
 800d38c:	2100      	movs	r1, #0
 800d38e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d392:	bf14      	ite	ne
 800d394:	2340      	movne	r3, #64	@ 0x40
 800d396:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d39a:	2000      	movs	r0, #0
 800d39c:	6031      	str	r1, [r6, #0]
 800d39e:	602b      	str	r3, [r5, #0]
 800d3a0:	b016      	add	sp, #88	@ 0x58
 800d3a2:	bd70      	pop	{r4, r5, r6, pc}
 800d3a4:	466a      	mov	r2, sp
 800d3a6:	f000 f863 	bl	800d470 <_fstat_r>
 800d3aa:	2800      	cmp	r0, #0
 800d3ac:	dbed      	blt.n	800d38a <__swhatbuf_r+0x12>
 800d3ae:	9901      	ldr	r1, [sp, #4]
 800d3b0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d3b4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d3b8:	4259      	negs	r1, r3
 800d3ba:	4159      	adcs	r1, r3
 800d3bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d3c0:	e7eb      	b.n	800d39a <__swhatbuf_r+0x22>

0800d3c2 <__smakebuf_r>:
 800d3c2:	898b      	ldrh	r3, [r1, #12]
 800d3c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d3c6:	079d      	lsls	r5, r3, #30
 800d3c8:	4606      	mov	r6, r0
 800d3ca:	460c      	mov	r4, r1
 800d3cc:	d507      	bpl.n	800d3de <__smakebuf_r+0x1c>
 800d3ce:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d3d2:	6023      	str	r3, [r4, #0]
 800d3d4:	6123      	str	r3, [r4, #16]
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	6163      	str	r3, [r4, #20]
 800d3da:	b003      	add	sp, #12
 800d3dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3de:	466a      	mov	r2, sp
 800d3e0:	ab01      	add	r3, sp, #4
 800d3e2:	f7ff ffc9 	bl	800d378 <__swhatbuf_r>
 800d3e6:	9f00      	ldr	r7, [sp, #0]
 800d3e8:	4605      	mov	r5, r0
 800d3ea:	4639      	mov	r1, r7
 800d3ec:	4630      	mov	r0, r6
 800d3ee:	f7ff f87d 	bl	800c4ec <_malloc_r>
 800d3f2:	b948      	cbnz	r0, 800d408 <__smakebuf_r+0x46>
 800d3f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3f8:	059a      	lsls	r2, r3, #22
 800d3fa:	d4ee      	bmi.n	800d3da <__smakebuf_r+0x18>
 800d3fc:	f023 0303 	bic.w	r3, r3, #3
 800d400:	f043 0302 	orr.w	r3, r3, #2
 800d404:	81a3      	strh	r3, [r4, #12]
 800d406:	e7e2      	b.n	800d3ce <__smakebuf_r+0xc>
 800d408:	89a3      	ldrh	r3, [r4, #12]
 800d40a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d40e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d412:	81a3      	strh	r3, [r4, #12]
 800d414:	9b01      	ldr	r3, [sp, #4]
 800d416:	6020      	str	r0, [r4, #0]
 800d418:	b15b      	cbz	r3, 800d432 <__smakebuf_r+0x70>
 800d41a:	4630      	mov	r0, r6
 800d41c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d420:	f000 f838 	bl	800d494 <_isatty_r>
 800d424:	b128      	cbz	r0, 800d432 <__smakebuf_r+0x70>
 800d426:	89a3      	ldrh	r3, [r4, #12]
 800d428:	f023 0303 	bic.w	r3, r3, #3
 800d42c:	f043 0301 	orr.w	r3, r3, #1
 800d430:	81a3      	strh	r3, [r4, #12]
 800d432:	89a3      	ldrh	r3, [r4, #12]
 800d434:	431d      	orrs	r5, r3
 800d436:	81a5      	strh	r5, [r4, #12]
 800d438:	e7cf      	b.n	800d3da <__smakebuf_r+0x18>

0800d43a <memmove>:
 800d43a:	4288      	cmp	r0, r1
 800d43c:	b510      	push	{r4, lr}
 800d43e:	eb01 0402 	add.w	r4, r1, r2
 800d442:	d902      	bls.n	800d44a <memmove+0x10>
 800d444:	4284      	cmp	r4, r0
 800d446:	4623      	mov	r3, r4
 800d448:	d807      	bhi.n	800d45a <memmove+0x20>
 800d44a:	1e43      	subs	r3, r0, #1
 800d44c:	42a1      	cmp	r1, r4
 800d44e:	d008      	beq.n	800d462 <memmove+0x28>
 800d450:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d454:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d458:	e7f8      	b.n	800d44c <memmove+0x12>
 800d45a:	4601      	mov	r1, r0
 800d45c:	4402      	add	r2, r0
 800d45e:	428a      	cmp	r2, r1
 800d460:	d100      	bne.n	800d464 <memmove+0x2a>
 800d462:	bd10      	pop	{r4, pc}
 800d464:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d468:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d46c:	e7f7      	b.n	800d45e <memmove+0x24>
	...

0800d470 <_fstat_r>:
 800d470:	b538      	push	{r3, r4, r5, lr}
 800d472:	2300      	movs	r3, #0
 800d474:	4d06      	ldr	r5, [pc, #24]	@ (800d490 <_fstat_r+0x20>)
 800d476:	4604      	mov	r4, r0
 800d478:	4608      	mov	r0, r1
 800d47a:	4611      	mov	r1, r2
 800d47c:	602b      	str	r3, [r5, #0]
 800d47e:	f7f8 fc47 	bl	8005d10 <_fstat>
 800d482:	1c43      	adds	r3, r0, #1
 800d484:	d102      	bne.n	800d48c <_fstat_r+0x1c>
 800d486:	682b      	ldr	r3, [r5, #0]
 800d488:	b103      	cbz	r3, 800d48c <_fstat_r+0x1c>
 800d48a:	6023      	str	r3, [r4, #0]
 800d48c:	bd38      	pop	{r3, r4, r5, pc}
 800d48e:	bf00      	nop
 800d490:	20000800 	.word	0x20000800

0800d494 <_isatty_r>:
 800d494:	b538      	push	{r3, r4, r5, lr}
 800d496:	2300      	movs	r3, #0
 800d498:	4d05      	ldr	r5, [pc, #20]	@ (800d4b0 <_isatty_r+0x1c>)
 800d49a:	4604      	mov	r4, r0
 800d49c:	4608      	mov	r0, r1
 800d49e:	602b      	str	r3, [r5, #0]
 800d4a0:	f7f8 fc45 	bl	8005d2e <_isatty>
 800d4a4:	1c43      	adds	r3, r0, #1
 800d4a6:	d102      	bne.n	800d4ae <_isatty_r+0x1a>
 800d4a8:	682b      	ldr	r3, [r5, #0]
 800d4aa:	b103      	cbz	r3, 800d4ae <_isatty_r+0x1a>
 800d4ac:	6023      	str	r3, [r4, #0]
 800d4ae:	bd38      	pop	{r3, r4, r5, pc}
 800d4b0:	20000800 	.word	0x20000800

0800d4b4 <_sbrk_r>:
 800d4b4:	b538      	push	{r3, r4, r5, lr}
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	4d05      	ldr	r5, [pc, #20]	@ (800d4d0 <_sbrk_r+0x1c>)
 800d4ba:	4604      	mov	r4, r0
 800d4bc:	4608      	mov	r0, r1
 800d4be:	602b      	str	r3, [r5, #0]
 800d4c0:	f7f8 fc4c 	bl	8005d5c <_sbrk>
 800d4c4:	1c43      	adds	r3, r0, #1
 800d4c6:	d102      	bne.n	800d4ce <_sbrk_r+0x1a>
 800d4c8:	682b      	ldr	r3, [r5, #0]
 800d4ca:	b103      	cbz	r3, 800d4ce <_sbrk_r+0x1a>
 800d4cc:	6023      	str	r3, [r4, #0]
 800d4ce:	bd38      	pop	{r3, r4, r5, pc}
 800d4d0:	20000800 	.word	0x20000800

0800d4d4 <memcpy>:
 800d4d4:	440a      	add	r2, r1
 800d4d6:	4291      	cmp	r1, r2
 800d4d8:	f100 33ff 	add.w	r3, r0, #4294967295
 800d4dc:	d100      	bne.n	800d4e0 <memcpy+0xc>
 800d4de:	4770      	bx	lr
 800d4e0:	b510      	push	{r4, lr}
 800d4e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d4e6:	4291      	cmp	r1, r2
 800d4e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d4ec:	d1f9      	bne.n	800d4e2 <memcpy+0xe>
 800d4ee:	bd10      	pop	{r4, pc}

0800d4f0 <__assert_func>:
 800d4f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d4f2:	4614      	mov	r4, r2
 800d4f4:	461a      	mov	r2, r3
 800d4f6:	4b09      	ldr	r3, [pc, #36]	@ (800d51c <__assert_func+0x2c>)
 800d4f8:	4605      	mov	r5, r0
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	68d8      	ldr	r0, [r3, #12]
 800d4fe:	b14c      	cbz	r4, 800d514 <__assert_func+0x24>
 800d500:	4b07      	ldr	r3, [pc, #28]	@ (800d520 <__assert_func+0x30>)
 800d502:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d506:	9100      	str	r1, [sp, #0]
 800d508:	462b      	mov	r3, r5
 800d50a:	4906      	ldr	r1, [pc, #24]	@ (800d524 <__assert_func+0x34>)
 800d50c:	f000 f870 	bl	800d5f0 <fiprintf>
 800d510:	f000 f880 	bl	800d614 <abort>
 800d514:	4b04      	ldr	r3, [pc, #16]	@ (800d528 <__assert_func+0x38>)
 800d516:	461c      	mov	r4, r3
 800d518:	e7f3      	b.n	800d502 <__assert_func+0x12>
 800d51a:	bf00      	nop
 800d51c:	20000078 	.word	0x20000078
 800d520:	0800df27 	.word	0x0800df27
 800d524:	0800df34 	.word	0x0800df34
 800d528:	0800df62 	.word	0x0800df62

0800d52c <_calloc_r>:
 800d52c:	b570      	push	{r4, r5, r6, lr}
 800d52e:	fba1 5402 	umull	r5, r4, r1, r2
 800d532:	b934      	cbnz	r4, 800d542 <_calloc_r+0x16>
 800d534:	4629      	mov	r1, r5
 800d536:	f7fe ffd9 	bl	800c4ec <_malloc_r>
 800d53a:	4606      	mov	r6, r0
 800d53c:	b928      	cbnz	r0, 800d54a <_calloc_r+0x1e>
 800d53e:	4630      	mov	r0, r6
 800d540:	bd70      	pop	{r4, r5, r6, pc}
 800d542:	220c      	movs	r2, #12
 800d544:	2600      	movs	r6, #0
 800d546:	6002      	str	r2, [r0, #0]
 800d548:	e7f9      	b.n	800d53e <_calloc_r+0x12>
 800d54a:	462a      	mov	r2, r5
 800d54c:	4621      	mov	r1, r4
 800d54e:	f7fe f84b 	bl	800b5e8 <memset>
 800d552:	e7f4      	b.n	800d53e <_calloc_r+0x12>

0800d554 <__ascii_mbtowc>:
 800d554:	b082      	sub	sp, #8
 800d556:	b901      	cbnz	r1, 800d55a <__ascii_mbtowc+0x6>
 800d558:	a901      	add	r1, sp, #4
 800d55a:	b142      	cbz	r2, 800d56e <__ascii_mbtowc+0x1a>
 800d55c:	b14b      	cbz	r3, 800d572 <__ascii_mbtowc+0x1e>
 800d55e:	7813      	ldrb	r3, [r2, #0]
 800d560:	600b      	str	r3, [r1, #0]
 800d562:	7812      	ldrb	r2, [r2, #0]
 800d564:	1e10      	subs	r0, r2, #0
 800d566:	bf18      	it	ne
 800d568:	2001      	movne	r0, #1
 800d56a:	b002      	add	sp, #8
 800d56c:	4770      	bx	lr
 800d56e:	4610      	mov	r0, r2
 800d570:	e7fb      	b.n	800d56a <__ascii_mbtowc+0x16>
 800d572:	f06f 0001 	mvn.w	r0, #1
 800d576:	e7f8      	b.n	800d56a <__ascii_mbtowc+0x16>

0800d578 <_realloc_r>:
 800d578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d57c:	4607      	mov	r7, r0
 800d57e:	4614      	mov	r4, r2
 800d580:	460d      	mov	r5, r1
 800d582:	b921      	cbnz	r1, 800d58e <_realloc_r+0x16>
 800d584:	4611      	mov	r1, r2
 800d586:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d58a:	f7fe bfaf 	b.w	800c4ec <_malloc_r>
 800d58e:	b92a      	cbnz	r2, 800d59c <_realloc_r+0x24>
 800d590:	f7fe ff3a 	bl	800c408 <_free_r>
 800d594:	4625      	mov	r5, r4
 800d596:	4628      	mov	r0, r5
 800d598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d59c:	f000 f841 	bl	800d622 <_malloc_usable_size_r>
 800d5a0:	4284      	cmp	r4, r0
 800d5a2:	4606      	mov	r6, r0
 800d5a4:	d802      	bhi.n	800d5ac <_realloc_r+0x34>
 800d5a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d5aa:	d8f4      	bhi.n	800d596 <_realloc_r+0x1e>
 800d5ac:	4621      	mov	r1, r4
 800d5ae:	4638      	mov	r0, r7
 800d5b0:	f7fe ff9c 	bl	800c4ec <_malloc_r>
 800d5b4:	4680      	mov	r8, r0
 800d5b6:	b908      	cbnz	r0, 800d5bc <_realloc_r+0x44>
 800d5b8:	4645      	mov	r5, r8
 800d5ba:	e7ec      	b.n	800d596 <_realloc_r+0x1e>
 800d5bc:	42b4      	cmp	r4, r6
 800d5be:	4622      	mov	r2, r4
 800d5c0:	4629      	mov	r1, r5
 800d5c2:	bf28      	it	cs
 800d5c4:	4632      	movcs	r2, r6
 800d5c6:	f7ff ff85 	bl	800d4d4 <memcpy>
 800d5ca:	4629      	mov	r1, r5
 800d5cc:	4638      	mov	r0, r7
 800d5ce:	f7fe ff1b 	bl	800c408 <_free_r>
 800d5d2:	e7f1      	b.n	800d5b8 <_realloc_r+0x40>

0800d5d4 <__ascii_wctomb>:
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	4608      	mov	r0, r1
 800d5d8:	b141      	cbz	r1, 800d5ec <__ascii_wctomb+0x18>
 800d5da:	2aff      	cmp	r2, #255	@ 0xff
 800d5dc:	d904      	bls.n	800d5e8 <__ascii_wctomb+0x14>
 800d5de:	228a      	movs	r2, #138	@ 0x8a
 800d5e0:	f04f 30ff 	mov.w	r0, #4294967295
 800d5e4:	601a      	str	r2, [r3, #0]
 800d5e6:	4770      	bx	lr
 800d5e8:	2001      	movs	r0, #1
 800d5ea:	700a      	strb	r2, [r1, #0]
 800d5ec:	4770      	bx	lr
	...

0800d5f0 <fiprintf>:
 800d5f0:	b40e      	push	{r1, r2, r3}
 800d5f2:	b503      	push	{r0, r1, lr}
 800d5f4:	4601      	mov	r1, r0
 800d5f6:	ab03      	add	r3, sp, #12
 800d5f8:	4805      	ldr	r0, [pc, #20]	@ (800d610 <fiprintf+0x20>)
 800d5fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5fe:	6800      	ldr	r0, [r0, #0]
 800d600:	9301      	str	r3, [sp, #4]
 800d602:	f7ff fcf9 	bl	800cff8 <_vfiprintf_r>
 800d606:	b002      	add	sp, #8
 800d608:	f85d eb04 	ldr.w	lr, [sp], #4
 800d60c:	b003      	add	sp, #12
 800d60e:	4770      	bx	lr
 800d610:	20000078 	.word	0x20000078

0800d614 <abort>:
 800d614:	2006      	movs	r0, #6
 800d616:	b508      	push	{r3, lr}
 800d618:	f000 f834 	bl	800d684 <raise>
 800d61c:	2001      	movs	r0, #1
 800d61e:	f7f8 fb28 	bl	8005c72 <_exit>

0800d622 <_malloc_usable_size_r>:
 800d622:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d626:	1f18      	subs	r0, r3, #4
 800d628:	2b00      	cmp	r3, #0
 800d62a:	bfbc      	itt	lt
 800d62c:	580b      	ldrlt	r3, [r1, r0]
 800d62e:	18c0      	addlt	r0, r0, r3
 800d630:	4770      	bx	lr

0800d632 <_raise_r>:
 800d632:	291f      	cmp	r1, #31
 800d634:	b538      	push	{r3, r4, r5, lr}
 800d636:	4605      	mov	r5, r0
 800d638:	460c      	mov	r4, r1
 800d63a:	d904      	bls.n	800d646 <_raise_r+0x14>
 800d63c:	2316      	movs	r3, #22
 800d63e:	6003      	str	r3, [r0, #0]
 800d640:	f04f 30ff 	mov.w	r0, #4294967295
 800d644:	bd38      	pop	{r3, r4, r5, pc}
 800d646:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d648:	b112      	cbz	r2, 800d650 <_raise_r+0x1e>
 800d64a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d64e:	b94b      	cbnz	r3, 800d664 <_raise_r+0x32>
 800d650:	4628      	mov	r0, r5
 800d652:	f000 f831 	bl	800d6b8 <_getpid_r>
 800d656:	4622      	mov	r2, r4
 800d658:	4601      	mov	r1, r0
 800d65a:	4628      	mov	r0, r5
 800d65c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d660:	f000 b818 	b.w	800d694 <_kill_r>
 800d664:	2b01      	cmp	r3, #1
 800d666:	d00a      	beq.n	800d67e <_raise_r+0x4c>
 800d668:	1c59      	adds	r1, r3, #1
 800d66a:	d103      	bne.n	800d674 <_raise_r+0x42>
 800d66c:	2316      	movs	r3, #22
 800d66e:	6003      	str	r3, [r0, #0]
 800d670:	2001      	movs	r0, #1
 800d672:	e7e7      	b.n	800d644 <_raise_r+0x12>
 800d674:	2100      	movs	r1, #0
 800d676:	4620      	mov	r0, r4
 800d678:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d67c:	4798      	blx	r3
 800d67e:	2000      	movs	r0, #0
 800d680:	e7e0      	b.n	800d644 <_raise_r+0x12>
	...

0800d684 <raise>:
 800d684:	4b02      	ldr	r3, [pc, #8]	@ (800d690 <raise+0xc>)
 800d686:	4601      	mov	r1, r0
 800d688:	6818      	ldr	r0, [r3, #0]
 800d68a:	f7ff bfd2 	b.w	800d632 <_raise_r>
 800d68e:	bf00      	nop
 800d690:	20000078 	.word	0x20000078

0800d694 <_kill_r>:
 800d694:	b538      	push	{r3, r4, r5, lr}
 800d696:	2300      	movs	r3, #0
 800d698:	4d06      	ldr	r5, [pc, #24]	@ (800d6b4 <_kill_r+0x20>)
 800d69a:	4604      	mov	r4, r0
 800d69c:	4608      	mov	r0, r1
 800d69e:	4611      	mov	r1, r2
 800d6a0:	602b      	str	r3, [r5, #0]
 800d6a2:	f7f8 fad6 	bl	8005c52 <_kill>
 800d6a6:	1c43      	adds	r3, r0, #1
 800d6a8:	d102      	bne.n	800d6b0 <_kill_r+0x1c>
 800d6aa:	682b      	ldr	r3, [r5, #0]
 800d6ac:	b103      	cbz	r3, 800d6b0 <_kill_r+0x1c>
 800d6ae:	6023      	str	r3, [r4, #0]
 800d6b0:	bd38      	pop	{r3, r4, r5, pc}
 800d6b2:	bf00      	nop
 800d6b4:	20000800 	.word	0x20000800

0800d6b8 <_getpid_r>:
 800d6b8:	f7f8 bac4 	b.w	8005c44 <_getpid>

0800d6bc <sqrtf>:
 800d6bc:	b538      	push	{r3, r4, r5, lr}
 800d6be:	4605      	mov	r5, r0
 800d6c0:	f000 f816 	bl	800d6f0 <__ieee754_sqrtf>
 800d6c4:	4629      	mov	r1, r5
 800d6c6:	4604      	mov	r4, r0
 800d6c8:	4628      	mov	r0, r5
 800d6ca:	f7f3 fcbb 	bl	8001044 <__aeabi_fcmpun>
 800d6ce:	b968      	cbnz	r0, 800d6ec <sqrtf+0x30>
 800d6d0:	2100      	movs	r1, #0
 800d6d2:	4628      	mov	r0, r5
 800d6d4:	f7f3 fc8e 	bl	8000ff4 <__aeabi_fcmplt>
 800d6d8:	b140      	cbz	r0, 800d6ec <sqrtf+0x30>
 800d6da:	f7fd fffd 	bl	800b6d8 <__errno>
 800d6de:	2321      	movs	r3, #33	@ 0x21
 800d6e0:	2100      	movs	r1, #0
 800d6e2:	6003      	str	r3, [r0, #0]
 800d6e4:	4608      	mov	r0, r1
 800d6e6:	f7f3 fb9b 	bl	8000e20 <__aeabi_fdiv>
 800d6ea:	4604      	mov	r4, r0
 800d6ec:	4620      	mov	r0, r4
 800d6ee:	bd38      	pop	{r3, r4, r5, pc}

0800d6f0 <__ieee754_sqrtf>:
 800d6f0:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 800d6f4:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800d6f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6fc:	4603      	mov	r3, r0
 800d6fe:	4604      	mov	r4, r0
 800d700:	d30a      	bcc.n	800d718 <__ieee754_sqrtf+0x28>
 800d702:	4601      	mov	r1, r0
 800d704:	f7f3 fad8 	bl	8000cb8 <__aeabi_fmul>
 800d708:	4601      	mov	r1, r0
 800d70a:	4620      	mov	r0, r4
 800d70c:	f7f3 f9cc 	bl	8000aa8 <__addsf3>
 800d710:	4604      	mov	r4, r0
 800d712:	4620      	mov	r0, r4
 800d714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d718:	2a00      	cmp	r2, #0
 800d71a:	d0fa      	beq.n	800d712 <__ieee754_sqrtf+0x22>
 800d71c:	2800      	cmp	r0, #0
 800d71e:	da06      	bge.n	800d72e <__ieee754_sqrtf+0x3e>
 800d720:	4601      	mov	r1, r0
 800d722:	f7f3 f9bf 	bl	8000aa4 <__aeabi_fsub>
 800d726:	4601      	mov	r1, r0
 800d728:	f7f3 fb7a 	bl	8000e20 <__aeabi_fdiv>
 800d72c:	e7f0      	b.n	800d710 <__ieee754_sqrtf+0x20>
 800d72e:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 800d732:	d03c      	beq.n	800d7ae <__ieee754_sqrtf+0xbe>
 800d734:	15c2      	asrs	r2, r0, #23
 800d736:	2400      	movs	r4, #0
 800d738:	2019      	movs	r0, #25
 800d73a:	4626      	mov	r6, r4
 800d73c:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 800d740:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d744:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 800d748:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800d74c:	07d2      	lsls	r2, r2, #31
 800d74e:	bf58      	it	pl
 800d750:	005b      	lslpl	r3, r3, #1
 800d752:	106d      	asrs	r5, r5, #1
 800d754:	005b      	lsls	r3, r3, #1
 800d756:	1872      	adds	r2, r6, r1
 800d758:	429a      	cmp	r2, r3
 800d75a:	bfcf      	iteee	gt
 800d75c:	461a      	movgt	r2, r3
 800d75e:	1856      	addle	r6, r2, r1
 800d760:	1864      	addle	r4, r4, r1
 800d762:	1a9a      	suble	r2, r3, r2
 800d764:	3801      	subs	r0, #1
 800d766:	ea4f 0342 	mov.w	r3, r2, lsl #1
 800d76a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d76e:	d1f2      	bne.n	800d756 <__ieee754_sqrtf+0x66>
 800d770:	b1ba      	cbz	r2, 800d7a2 <__ieee754_sqrtf+0xb2>
 800d772:	4e15      	ldr	r6, [pc, #84]	@ (800d7c8 <__ieee754_sqrtf+0xd8>)
 800d774:	4f15      	ldr	r7, [pc, #84]	@ (800d7cc <__ieee754_sqrtf+0xdc>)
 800d776:	6830      	ldr	r0, [r6, #0]
 800d778:	6839      	ldr	r1, [r7, #0]
 800d77a:	f7f3 f993 	bl	8000aa4 <__aeabi_fsub>
 800d77e:	f8d6 8000 	ldr.w	r8, [r6]
 800d782:	4601      	mov	r1, r0
 800d784:	4640      	mov	r0, r8
 800d786:	f7f3 fc3f 	bl	8001008 <__aeabi_fcmple>
 800d78a:	b150      	cbz	r0, 800d7a2 <__ieee754_sqrtf+0xb2>
 800d78c:	6830      	ldr	r0, [r6, #0]
 800d78e:	6839      	ldr	r1, [r7, #0]
 800d790:	f7f3 f98a 	bl	8000aa8 <__addsf3>
 800d794:	6836      	ldr	r6, [r6, #0]
 800d796:	4601      	mov	r1, r0
 800d798:	4630      	mov	r0, r6
 800d79a:	f7f3 fc2b 	bl	8000ff4 <__aeabi_fcmplt>
 800d79e:	b170      	cbz	r0, 800d7be <__ieee754_sqrtf+0xce>
 800d7a0:	3402      	adds	r4, #2
 800d7a2:	1064      	asrs	r4, r4, #1
 800d7a4:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 800d7a8:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 800d7ac:	e7b1      	b.n	800d712 <__ieee754_sqrtf+0x22>
 800d7ae:	005b      	lsls	r3, r3, #1
 800d7b0:	0218      	lsls	r0, r3, #8
 800d7b2:	460a      	mov	r2, r1
 800d7b4:	f101 0101 	add.w	r1, r1, #1
 800d7b8:	d5f9      	bpl.n	800d7ae <__ieee754_sqrtf+0xbe>
 800d7ba:	4252      	negs	r2, r2
 800d7bc:	e7bb      	b.n	800d736 <__ieee754_sqrtf+0x46>
 800d7be:	3401      	adds	r4, #1
 800d7c0:	f024 0401 	bic.w	r4, r4, #1
 800d7c4:	e7ed      	b.n	800d7a2 <__ieee754_sqrtf+0xb2>
 800d7c6:	bf00      	nop
 800d7c8:	0800e168 	.word	0x0800e168
 800d7cc:	0800e164 	.word	0x0800e164

0800d7d0 <_init>:
 800d7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7d2:	bf00      	nop
 800d7d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7d6:	bc08      	pop	{r3}
 800d7d8:	469e      	mov	lr, r3
 800d7da:	4770      	bx	lr

0800d7dc <_fini>:
 800d7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7de:	bf00      	nop
 800d7e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7e2:	bc08      	pop	{r3}
 800d7e4:	469e      	mov	lr, r3
 800d7e6:	4770      	bx	lr
