
WT1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057b4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  080058c0  080058c0  000068c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059b0  080059b0  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080059b0  080059b0  000069b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059b8  080059b8  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059b8  080059b8  000069b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080059bc  080059bc  000069bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080059c0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  2000005c  08005a1c  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000360  08005a1c  00007360  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001033e  00000000  00000000  00007085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ae5  00000000  00000000  000173c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f28  00000000  00000000  00019ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bbd  00000000  00000000  0001add0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019428  00000000  00000000  0001b98d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013da8  00000000  00000000  00034db5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008de22  00000000  00000000  00048b5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d697f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000449c  00000000  00000000  000d69c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000dae60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080058a8 	.word	0x080058a8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080058a8 	.word	0x080058a8

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <__aeabi_frsub>:
 8000170:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000174:	e002      	b.n	800017c <__addsf3>
 8000176:	bf00      	nop

08000178 <__aeabi_fsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800017c <__addsf3>:
 800017c:	0042      	lsls	r2, r0, #1
 800017e:	bf1f      	itttt	ne
 8000180:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000184:	ea92 0f03 	teqne	r2, r3
 8000188:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800018c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000190:	d06a      	beq.n	8000268 <__addsf3+0xec>
 8000192:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000196:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019a:	bfc1      	itttt	gt
 800019c:	18d2      	addgt	r2, r2, r3
 800019e:	4041      	eorgt	r1, r0
 80001a0:	4048      	eorgt	r0, r1
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	2b19      	cmp	r3, #25
 80001aa:	bf88      	it	hi
 80001ac:	4770      	bxhi	lr
 80001ae:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80001b2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001b6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4240      	negne	r0, r0
 80001be:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001c6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4249      	negne	r1, r1
 80001ce:	ea92 0f03 	teq	r2, r3
 80001d2:	d03f      	beq.n	8000254 <__addsf3+0xd8>
 80001d4:	f1a2 0201 	sub.w	r2, r2, #1
 80001d8:	fa41 fc03 	asr.w	ip, r1, r3
 80001dc:	eb10 000c 	adds.w	r0, r0, ip
 80001e0:	f1c3 0320 	rsb	r3, r3, #32
 80001e4:	fa01 f103 	lsl.w	r1, r1, r3
 80001e8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001ec:	d502      	bpl.n	80001f4 <__addsf3+0x78>
 80001ee:	4249      	negs	r1, r1
 80001f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001f8:	d313      	bcc.n	8000222 <__addsf3+0xa6>
 80001fa:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001fe:	d306      	bcc.n	800020e <__addsf3+0x92>
 8000200:	0840      	lsrs	r0, r0, #1
 8000202:	ea4f 0131 	mov.w	r1, r1, rrx
 8000206:	f102 0201 	add.w	r2, r2, #1
 800020a:	2afe      	cmp	r2, #254	@ 0xfe
 800020c:	d251      	bcs.n	80002b2 <__addsf3+0x136>
 800020e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000212:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000216:	bf08      	it	eq
 8000218:	f020 0001 	biceq.w	r0, r0, #1
 800021c:	ea40 0003 	orr.w	r0, r0, r3
 8000220:	4770      	bx	lr
 8000222:	0049      	lsls	r1, r1, #1
 8000224:	eb40 0000 	adc.w	r0, r0, r0
 8000228:	3a01      	subs	r2, #1
 800022a:	bf28      	it	cs
 800022c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000230:	d2ed      	bcs.n	800020e <__addsf3+0x92>
 8000232:	fab0 fc80 	clz	ip, r0
 8000236:	f1ac 0c08 	sub.w	ip, ip, #8
 800023a:	ebb2 020c 	subs.w	r2, r2, ip
 800023e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000242:	bfaa      	itet	ge
 8000244:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000248:	4252      	neglt	r2, r2
 800024a:	4318      	orrge	r0, r3
 800024c:	bfbc      	itt	lt
 800024e:	40d0      	lsrlt	r0, r2
 8000250:	4318      	orrlt	r0, r3
 8000252:	4770      	bx	lr
 8000254:	f092 0f00 	teq	r2, #0
 8000258:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800025c:	bf06      	itte	eq
 800025e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000262:	3201      	addeq	r2, #1
 8000264:	3b01      	subne	r3, #1
 8000266:	e7b5      	b.n	80001d4 <__addsf3+0x58>
 8000268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800026c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000270:	bf18      	it	ne
 8000272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000276:	d021      	beq.n	80002bc <__addsf3+0x140>
 8000278:	ea92 0f03 	teq	r2, r3
 800027c:	d004      	beq.n	8000288 <__addsf3+0x10c>
 800027e:	f092 0f00 	teq	r2, #0
 8000282:	bf08      	it	eq
 8000284:	4608      	moveq	r0, r1
 8000286:	4770      	bx	lr
 8000288:	ea90 0f01 	teq	r0, r1
 800028c:	bf1c      	itt	ne
 800028e:	2000      	movne	r0, #0
 8000290:	4770      	bxne	lr
 8000292:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000296:	d104      	bne.n	80002a2 <__addsf3+0x126>
 8000298:	0040      	lsls	r0, r0, #1
 800029a:	bf28      	it	cs
 800029c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80002a0:	4770      	bx	lr
 80002a2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80002a6:	bf3c      	itt	cc
 80002a8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80002ac:	4770      	bxcc	lr
 80002ae:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80002b2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ba:	4770      	bx	lr
 80002bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c0:	bf16      	itet	ne
 80002c2:	4608      	movne	r0, r1
 80002c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002c8:	4601      	movne	r1, r0
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	bf06      	itte	eq
 80002ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d2:	ea90 0f01 	teqeq	r0, r1
 80002d6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002da:	4770      	bx	lr

080002dc <__aeabi_ui2f>:
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	e004      	b.n	80002ec <__aeabi_i2f+0x8>
 80002e2:	bf00      	nop

080002e4 <__aeabi_i2f>:
 80002e4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002e8:	bf48      	it	mi
 80002ea:	4240      	negmi	r0, r0
 80002ec:	ea5f 0c00 	movs.w	ip, r0
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002f8:	4601      	mov	r1, r0
 80002fa:	f04f 0000 	mov.w	r0, #0
 80002fe:	e01c      	b.n	800033a <__aeabi_l2f+0x2a>

08000300 <__aeabi_ul2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	e00a      	b.n	8000324 <__aeabi_l2f+0x14>
 800030e:	bf00      	nop

08000310 <__aeabi_l2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800031c:	d502      	bpl.n	8000324 <__aeabi_l2f+0x14>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	ea5f 0c01 	movs.w	ip, r1
 8000328:	bf02      	ittt	eq
 800032a:	4684      	moveq	ip, r0
 800032c:	4601      	moveq	r1, r0
 800032e:	2000      	moveq	r0, #0
 8000330:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000334:	bf08      	it	eq
 8000336:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800033a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800033e:	fabc f28c 	clz	r2, ip
 8000342:	3a08      	subs	r2, #8
 8000344:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000348:	db10      	blt.n	800036c <__aeabi_l2f+0x5c>
 800034a:	fa01 fc02 	lsl.w	ip, r1, r2
 800034e:	4463      	add	r3, ip
 8000350:	fa00 fc02 	lsl.w	ip, r0, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800035c:	fa20 f202 	lsr.w	r2, r0, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	f020 0001 	biceq.w	r0, r0, #1
 800036a:	4770      	bx	lr
 800036c:	f102 0220 	add.w	r2, r2, #32
 8000370:	fa01 fc02 	lsl.w	ip, r1, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800037c:	fa21 f202 	lsr.w	r2, r1, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038a:	4770      	bx	lr

0800038c <__aeabi_fmul>:
 800038c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000390:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000394:	bf1e      	ittt	ne
 8000396:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039a:	ea92 0f0c 	teqne	r2, ip
 800039e:	ea93 0f0c 	teqne	r3, ip
 80003a2:	d06f      	beq.n	8000484 <__aeabi_fmul+0xf8>
 80003a4:	441a      	add	r2, r3
 80003a6:	ea80 0c01 	eor.w	ip, r0, r1
 80003aa:	0240      	lsls	r0, r0, #9
 80003ac:	bf18      	it	ne
 80003ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b2:	d01e      	beq.n	80003f2 <__aeabi_fmul+0x66>
 80003b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c0:	fba0 3101 	umull	r3, r1, r0, r1
 80003c4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003c8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003cc:	bf3e      	ittt	cc
 80003ce:	0049      	lslcc	r1, r1, #1
 80003d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d4:	005b      	lslcc	r3, r3, #1
 80003d6:	ea40 0001 	orr.w	r0, r0, r1
 80003da:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003de:	2afd      	cmp	r2, #253	@ 0xfd
 80003e0:	d81d      	bhi.n	800041e <__aeabi_fmul+0x92>
 80003e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ea:	bf08      	it	eq
 80003ec:	f020 0001 	biceq.w	r0, r0, #1
 80003f0:	4770      	bx	lr
 80003f2:	f090 0f00 	teq	r0, #0
 80003f6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003fa:	bf08      	it	eq
 80003fc:	0249      	lsleq	r1, r1, #9
 80003fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000402:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000406:	3a7f      	subs	r2, #127	@ 0x7f
 8000408:	bfc2      	ittt	gt
 800040a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800040e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000412:	4770      	bxgt	lr
 8000414:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	3a01      	subs	r2, #1
 800041e:	dc5d      	bgt.n	80004dc <__aeabi_fmul+0x150>
 8000420:	f112 0f19 	cmn.w	r2, #25
 8000424:	bfdc      	itt	le
 8000426:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800042a:	4770      	bxle	lr
 800042c:	f1c2 0200 	rsb	r2, r2, #0
 8000430:	0041      	lsls	r1, r0, #1
 8000432:	fa21 f102 	lsr.w	r1, r1, r2
 8000436:	f1c2 0220 	rsb	r2, r2, #32
 800043a:	fa00 fc02 	lsl.w	ip, r0, r2
 800043e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000442:	f140 0000 	adc.w	r0, r0, #0
 8000446:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044a:	bf08      	it	eq
 800044c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000450:	4770      	bx	lr
 8000452:	f092 0f00 	teq	r2, #0
 8000456:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800045a:	bf02      	ittt	eq
 800045c:	0040      	lsleq	r0, r0, #1
 800045e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000462:	3a01      	subeq	r2, #1
 8000464:	d0f9      	beq.n	800045a <__aeabi_fmul+0xce>
 8000466:	ea40 000c 	orr.w	r0, r0, ip
 800046a:	f093 0f00 	teq	r3, #0
 800046e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0049      	lsleq	r1, r1, #1
 8000476:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800047a:	3b01      	subeq	r3, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xe6>
 800047e:	ea41 010c 	orr.w	r1, r1, ip
 8000482:	e78f      	b.n	80003a4 <__aeabi_fmul+0x18>
 8000484:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000488:	ea92 0f0c 	teq	r2, ip
 800048c:	bf18      	it	ne
 800048e:	ea93 0f0c 	teqne	r3, ip
 8000492:	d00a      	beq.n	80004aa <__aeabi_fmul+0x11e>
 8000494:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000498:	bf18      	it	ne
 800049a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800049e:	d1d8      	bne.n	8000452 <__aeabi_fmul+0xc6>
 80004a0:	ea80 0001 	eor.w	r0, r0, r1
 80004a4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004a8:	4770      	bx	lr
 80004aa:	f090 0f00 	teq	r0, #0
 80004ae:	bf17      	itett	ne
 80004b0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004b4:	4608      	moveq	r0, r1
 80004b6:	f091 0f00 	teqne	r1, #0
 80004ba:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004be:	d014      	beq.n	80004ea <__aeabi_fmul+0x15e>
 80004c0:	ea92 0f0c 	teq	r2, ip
 80004c4:	d101      	bne.n	80004ca <__aeabi_fmul+0x13e>
 80004c6:	0242      	lsls	r2, r0, #9
 80004c8:	d10f      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004ca:	ea93 0f0c 	teq	r3, ip
 80004ce:	d103      	bne.n	80004d8 <__aeabi_fmul+0x14c>
 80004d0:	024b      	lsls	r3, r1, #9
 80004d2:	bf18      	it	ne
 80004d4:	4608      	movne	r0, r1
 80004d6:	d108      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004d8:	ea80 0001 	eor.w	r0, r0, r1
 80004dc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004e0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004e8:	4770      	bx	lr
 80004ea:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ee:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_fdiv>:
 80004f4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004fc:	bf1e      	ittt	ne
 80004fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000502:	ea92 0f0c 	teqne	r2, ip
 8000506:	ea93 0f0c 	teqne	r3, ip
 800050a:	d069      	beq.n	80005e0 <__aeabi_fdiv+0xec>
 800050c:	eba2 0203 	sub.w	r2, r2, r3
 8000510:	ea80 0c01 	eor.w	ip, r0, r1
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051a:	d037      	beq.n	800058c <__aeabi_fdiv+0x98>
 800051c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000520:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000524:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000528:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800052c:	428b      	cmp	r3, r1
 800052e:	bf38      	it	cc
 8000530:	005b      	lslcc	r3, r3, #1
 8000532:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000536:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800053a:	428b      	cmp	r3, r1
 800053c:	bf24      	itt	cs
 800053e:	1a5b      	subcs	r3, r3, r1
 8000540:	ea40 000c 	orrcs.w	r0, r0, ip
 8000544:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000548:	bf24      	itt	cs
 800054a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800054e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000552:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000556:	bf24      	itt	cs
 8000558:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800055c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000560:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000564:	bf24      	itt	cs
 8000566:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	bf18      	it	ne
 8000572:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000576:	d1e0      	bne.n	800053a <__aeabi_fdiv+0x46>
 8000578:	2afd      	cmp	r2, #253	@ 0xfd
 800057a:	f63f af50 	bhi.w	800041e <__aeabi_fmul+0x92>
 800057e:	428b      	cmp	r3, r1
 8000580:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000590:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000594:	327f      	adds	r2, #127	@ 0x7f
 8000596:	bfc2      	ittt	gt
 8000598:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800059c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a0:	4770      	bxgt	lr
 80005a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	3a01      	subs	r2, #1
 80005ac:	e737      	b.n	800041e <__aeabi_fmul+0x92>
 80005ae:	f092 0f00 	teq	r2, #0
 80005b2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005b6:	bf02      	ittt	eq
 80005b8:	0040      	lsleq	r0, r0, #1
 80005ba:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005be:	3a01      	subeq	r2, #1
 80005c0:	d0f9      	beq.n	80005b6 <__aeabi_fdiv+0xc2>
 80005c2:	ea40 000c 	orr.w	r0, r0, ip
 80005c6:	f093 0f00 	teq	r3, #0
 80005ca:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0049      	lsleq	r1, r1, #1
 80005d2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005d6:	3b01      	subeq	r3, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xda>
 80005da:	ea41 010c 	orr.w	r1, r1, ip
 80005de:	e795      	b.n	800050c <__aeabi_fdiv+0x18>
 80005e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e4:	ea92 0f0c 	teq	r2, ip
 80005e8:	d108      	bne.n	80005fc <__aeabi_fdiv+0x108>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	f47f af7d 	bne.w	80004ea <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	f47f af70 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e776      	b.n	80004ea <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	d104      	bne.n	800060c <__aeabi_fdiv+0x118>
 8000602:	024b      	lsls	r3, r1, #9
 8000604:	f43f af4c 	beq.w	80004a0 <__aeabi_fmul+0x114>
 8000608:	4608      	mov	r0, r1
 800060a:	e76e      	b.n	80004ea <__aeabi_fmul+0x15e>
 800060c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000610:	bf18      	it	ne
 8000612:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000616:	d1ca      	bne.n	80005ae <__aeabi_fdiv+0xba>
 8000618:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800061c:	f47f af5c 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 8000620:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000624:	f47f af3c 	bne.w	80004a0 <__aeabi_fmul+0x114>
 8000628:	e75f      	b.n	80004ea <__aeabi_fmul+0x15e>
 800062a:	bf00      	nop

0800062c <__gesf2>:
 800062c:	f04f 3cff 	mov.w	ip, #4294967295
 8000630:	e006      	b.n	8000640 <__cmpsf2+0x4>
 8000632:	bf00      	nop

08000634 <__lesf2>:
 8000634:	f04f 0c01 	mov.w	ip, #1
 8000638:	e002      	b.n	8000640 <__cmpsf2+0x4>
 800063a:	bf00      	nop

0800063c <__cmpsf2>:
 800063c:	f04f 0c01 	mov.w	ip, #1
 8000640:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000644:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000648:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800064c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000650:	bf18      	it	ne
 8000652:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000656:	d011      	beq.n	800067c <__cmpsf2+0x40>
 8000658:	b001      	add	sp, #4
 800065a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800065e:	bf18      	it	ne
 8000660:	ea90 0f01 	teqne	r0, r1
 8000664:	bf58      	it	pl
 8000666:	ebb2 0003 	subspl.w	r0, r2, r3
 800066a:	bf88      	it	hi
 800066c:	17c8      	asrhi	r0, r1, #31
 800066e:	bf38      	it	cc
 8000670:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000674:	bf18      	it	ne
 8000676:	f040 0001 	orrne.w	r0, r0, #1
 800067a:	4770      	bx	lr
 800067c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000680:	d102      	bne.n	8000688 <__cmpsf2+0x4c>
 8000682:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000686:	d105      	bne.n	8000694 <__cmpsf2+0x58>
 8000688:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800068c:	d1e4      	bne.n	8000658 <__cmpsf2+0x1c>
 800068e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000692:	d0e1      	beq.n	8000658 <__cmpsf2+0x1c>
 8000694:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <__aeabi_cfrcmple>:
 800069c:	4684      	mov	ip, r0
 800069e:	4608      	mov	r0, r1
 80006a0:	4661      	mov	r1, ip
 80006a2:	e7ff      	b.n	80006a4 <__aeabi_cfcmpeq>

080006a4 <__aeabi_cfcmpeq>:
 80006a4:	b50f      	push	{r0, r1, r2, r3, lr}
 80006a6:	f7ff ffc9 	bl	800063c <__cmpsf2>
 80006aa:	2800      	cmp	r0, #0
 80006ac:	bf48      	it	mi
 80006ae:	f110 0f00 	cmnmi.w	r0, #0
 80006b2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006b4 <__aeabi_fcmpeq>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff fff4 	bl	80006a4 <__aeabi_cfcmpeq>
 80006bc:	bf0c      	ite	eq
 80006be:	2001      	moveq	r0, #1
 80006c0:	2000      	movne	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmplt>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffea 	bl	80006a4 <__aeabi_cfcmpeq>
 80006d0:	bf34      	ite	cc
 80006d2:	2001      	movcc	r0, #1
 80006d4:	2000      	movcs	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmple>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffe0 	bl	80006a4 <__aeabi_cfcmpeq>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpge>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffd2 	bl	800069c <__aeabi_cfrcmple>
 80006f8:	bf94      	ite	ls
 80006fa:	2001      	movls	r0, #1
 80006fc:	2000      	movhi	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_fcmpgt>:
 8000704:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000708:	f7ff ffc8 	bl	800069c <__aeabi_cfrcmple>
 800070c:	bf34      	ite	cc
 800070e:	2001      	movcc	r0, #1
 8000710:	2000      	movcs	r0, #0
 8000712:	f85d fb08 	ldr.w	pc, [sp], #8
 8000716:	bf00      	nop

08000718 <ADC_Init>:
/**
  * @brief Initializes the ADC hardware
  * @param hadc: Pointer to ADC handle
  */
void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
    // Calibration
    if (HAL_ADCEx_Calibration_Start(hadc) != HAL_OK)
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f001 fc2d 	bl	8001f80 <HAL_ADCEx_Calibration_Start>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <ADC_Init+0x18>
    {
        Error_Handler();
 800072c:	f000 fc92 	bl	8001054 <Error_Handler>
    }
}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <ADC_ReadAllChannels>:
  * @brief Reads all ADC channels and transmits UART messages if thresholds are met.
  * @param hadc: Pointer to ADC handle
  * @param data: Pointer to ADC_Data struct to store results
  */
void ADC_ReadAllChannels(ADC_HandleTypeDef* hadc, ADC_Data* data)
{
 8000738:	b590      	push	{r4, r7, lr}
 800073a:	b08f      	sub	sp, #60	@ 0x3c
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	6039      	str	r1, [r7, #0]
    ADC_ChannelConfTypeDef sConfig = {0};
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
    sConfig.Rank = 1;
 800074e:	2301      	movs	r3, #1
 8000750:	623b      	str	r3, [r7, #32]
    sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000752:	2306      	movs	r3, #6
 8000754:	627b      	str	r3, [r7, #36]	@ 0x24

    // Define the voltage threshold for UART transmission
    const float UART_TRANSMIT_THRESHOLD = 3.0f; // Proper 3V or above
 8000756:	4b94      	ldr	r3, [pc, #592]	@ (80009a8 <ADC_ReadAllChannels+0x270>)
 8000758:	633b      	str	r3, [r7, #48]	@ 0x30
    const float DRY_RUN_THRESHOLD = .0f; // Threshold for dry run detection
 800075a:	f04f 0300 	mov.w	r3, #0
 800075e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const float GROUND_THRESHOLD = 0.1f; // Threshold to consider as ground (0V)
 8000760:	4b92      	ldr	r3, [pc, #584]	@ (80009ac <ADC_ReadAllChannels+0x274>)
 8000762:	62bb      	str	r3, [r7, #40]	@ 0x28

    for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++)
 8000764:	2300      	movs	r3, #0
 8000766:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800076a:	e108      	b.n	800097e <ADC_ReadAllChannels+0x246>
    {
        // Configure channel
        sConfig.Channel = adcChannels[i];
 800076c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000770:	4a8f      	ldr	r2, [pc, #572]	@ (80009b0 <ADC_ReadAllChannels+0x278>)
 8000772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000776:	61fb      	str	r3, [r7, #28]
        HAL_ADC_ConfigChannel(hadc, &sConfig);
 8000778:	f107 031c 	add.w	r3, r7, #28
 800077c:	4619      	mov	r1, r3
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f001 fa6a 	bl	8001c58 <HAL_ADC_ConfigChannel>

        // Start conversion
        HAL_ADC_Start(hadc);
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f001 f8a7 	bl	80018d8 <HAL_ADC_Start>
        if (HAL_ADC_PollForConversion(hadc, 10) == HAL_OK)
 800078a:	210a      	movs	r1, #10
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f001 f951 	bl	8001a34 <HAL_ADC_PollForConversion>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	f040 80d6 	bne.w	8000946 <ADC_ReadAllChannels+0x20e>
        {
            data->rawValues[i] = HAL_ADC_GetValue(hadc);
 800079a:	f897 4037 	ldrb.w	r4, [r7, #55]	@ 0x37
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f001 fa4e 	bl	8001c40 <HAL_ADC_GetValue>
 80007a4:	4602      	mov	r2, r0
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
            data->voltages[i] = (data->rawValues[i] * 3.3f) / 4095.0f;
 80007ac:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff fd90 	bl	80002dc <__aeabi_ui2f>
 80007bc:	4603      	mov	r3, r0
 80007be:	497d      	ldr	r1, [pc, #500]	@ (80009b4 <ADC_ReadAllChannels+0x27c>)
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff fde3 	bl	800038c <__aeabi_fmul>
 80007c6:	4603      	mov	r3, r0
 80007c8:	f897 4037 	ldrb.w	r4, [r7, #55]	@ 0x37
 80007cc:	497a      	ldr	r1, [pc, #488]	@ (80009b8 <ADC_ReadAllChannels+0x280>)
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff fe90 	bl	80004f4 <__aeabi_fdiv>
 80007d4:	4603      	mov	r3, r0
 80007d6:	4619      	mov	r1, r3
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	1da2      	adds	r2, r4, #6
 80007dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            data->maxReached[i] = (data->voltages[i] >= 3.2f) ? 1 : 0; // Original 3.2V threshold for maxReached flag
 80007e0:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	3206      	adds	r2, #6
 80007e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007ec:	2201      	movs	r2, #1
 80007ee:	4614      	mov	r4, r2
 80007f0:	4972      	ldr	r1, [pc, #456]	@ (80009bc <ADC_ReadAllChannels+0x284>)
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff ff7c 	bl	80006f0 <__aeabi_fcmpge>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d101      	bne.n	8000802 <ADC_ReadAllChannels+0xca>
 80007fe:	2300      	movs	r3, #0
 8000800:	461c      	mov	r4, r3
 8000802:	b2e2      	uxtb	r2, r4
 8000804:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000808:	4611      	mov	r1, r2
 800080a:	683a      	ldr	r2, [r7, #0]
 800080c:	4413      	add	r3, r2
 800080e:	460a      	mov	r2, r1
 8000810:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

            // Check if the voltage is close to ground
            if (data->voltages[i] < GROUND_THRESHOLD)
 8000814:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	3206      	adds	r2, #6
 800081c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000820:	4619      	mov	r1, r3
 8000822:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000824:	f7ff ff6e 	bl	8000704 <__aeabi_fcmpgt>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d00d      	beq.n	800084a <ADC_ReadAllChannels+0x112>
            {
                data->rawValues[i] = 0; // Set raw value to 0
 800082e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	2100      	movs	r1, #0
 8000836:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                data->voltages[i] = 0.0f; // Set voltage to 0.0V
 800083a:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	3206      	adds	r2, #6
 8000842:	f04f 0100 	mov.w	r1, #0
 8000846:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            }

            // Check voltage for UART transmission
            if (data->voltages[i] >= UART_TRANSMIT_THRESHOLD)
 800084a:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	3206      	adds	r2, #6
 8000852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000856:	4619      	mov	r1, r3
 8000858:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800085a:	f7ff ff3f 	bl	80006dc <__aeabi_fcmple>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d052      	beq.n	800090a <ADC_ReadAllChannels+0x1d2>
            {
                switch (i)
 8000864:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000868:	2b04      	cmp	r3, #4
 800086a:	f200 8082 	bhi.w	8000972 <ADC_ReadAllChannels+0x23a>
 800086e:	a201      	add	r2, pc, #4	@ (adr r2, 8000874 <ADC_ReadAllChannels+0x13c>)
 8000870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000874:	08000889 	.word	0x08000889
 8000878:	080008a3 	.word	0x080008a3
 800087c:	080008bd 	.word	0x080008bd
 8000880:	080008d7 	.word	0x080008d7
 8000884:	080008f1 	.word	0x080008f1
                {
                    case 0: // IN0
                        UART_ReadDataPacket(dataPacket, "@10W#", sizeof("@10W#") - 1);
 8000888:	2205      	movs	r2, #5
 800088a:	494d      	ldr	r1, [pc, #308]	@ (80009c0 <ADC_ReadAllChannels+0x288>)
 800088c:	484d      	ldr	r0, [pc, #308]	@ (80009c4 <ADC_ReadAllChannels+0x28c>)
 800088e:	f000 fe43 	bl	8001518 <UART_ReadDataPacket>
                        UART_TransmitString(&huart1, dataPacket);
 8000892:	494c      	ldr	r1, [pc, #304]	@ (80009c4 <ADC_ReadAllChannels+0x28c>)
 8000894:	484c      	ldr	r0, [pc, #304]	@ (80009c8 <ADC_ReadAllChannels+0x290>)
 8000896:	f000 fe2b 	bl	80014f0 <UART_TransmitString>
                        motorStatus = 1; // Motor is on
 800089a:	4b4c      	ldr	r3, [pc, #304]	@ (80009cc <ADC_ReadAllChannels+0x294>)
 800089c:	2201      	movs	r2, #1
 800089e:	701a      	strb	r2, [r3, #0]
                        break;
 80008a0:	e068      	b.n	8000974 <ADC_ReadAllChannels+0x23c>
                    case 1: // IN1
                        UART_ReadDataPacket(dataPacket, "@30W#", sizeof("@30W#") - 1);
 80008a2:	2205      	movs	r2, #5
 80008a4:	494a      	ldr	r1, [pc, #296]	@ (80009d0 <ADC_ReadAllChannels+0x298>)
 80008a6:	4847      	ldr	r0, [pc, #284]	@ (80009c4 <ADC_ReadAllChannels+0x28c>)
 80008a8:	f000 fe36 	bl	8001518 <UART_ReadDataPacket>
                        UART_TransmitString(&huart1, dataPacket);
 80008ac:	4945      	ldr	r1, [pc, #276]	@ (80009c4 <ADC_ReadAllChannels+0x28c>)
 80008ae:	4846      	ldr	r0, [pc, #280]	@ (80009c8 <ADC_ReadAllChannels+0x290>)
 80008b0:	f000 fe1e 	bl	80014f0 <UART_TransmitString>
                        motorStatus = 1; // Motor is on
 80008b4:	4b45      	ldr	r3, [pc, #276]	@ (80009cc <ADC_ReadAllChannels+0x294>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	701a      	strb	r2, [r3, #0]
                        break;
 80008ba:	e05b      	b.n	8000974 <ADC_ReadAllChannels+0x23c>
                    case 2: // IN2
                        UART_ReadDataPacket(dataPacket, "@70W#", sizeof("@70W#") - 1);
 80008bc:	2205      	movs	r2, #5
 80008be:	4945      	ldr	r1, [pc, #276]	@ (80009d4 <ADC_ReadAllChannels+0x29c>)
 80008c0:	4840      	ldr	r0, [pc, #256]	@ (80009c4 <ADC_ReadAllChannels+0x28c>)
 80008c2:	f000 fe29 	bl	8001518 <UART_ReadDataPacket>
                        UART_TransmitString(&huart1, dataPacket);
 80008c6:	493f      	ldr	r1, [pc, #252]	@ (80009c4 <ADC_ReadAllChannels+0x28c>)
 80008c8:	483f      	ldr	r0, [pc, #252]	@ (80009c8 <ADC_ReadAllChannels+0x290>)
 80008ca:	f000 fe11 	bl	80014f0 <UART_TransmitString>
                        motorStatus = 1; // Motor is on
 80008ce:	4b3f      	ldr	r3, [pc, #252]	@ (80009cc <ADC_ReadAllChannels+0x294>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	701a      	strb	r2, [r3, #0]
                        break;
 80008d4:	e04e      	b.n	8000974 <ADC_ReadAllChannels+0x23c>
                    case 3: // IN3
                        UART_ReadDataPacket(dataPacket, "@1:W#", sizeof("@1:W#") - 1);
 80008d6:	2205      	movs	r2, #5
 80008d8:	493f      	ldr	r1, [pc, #252]	@ (80009d8 <ADC_ReadAllChannels+0x2a0>)
 80008da:	483a      	ldr	r0, [pc, #232]	@ (80009c4 <ADC_ReadAllChannels+0x28c>)
 80008dc:	f000 fe1c 	bl	8001518 <UART_ReadDataPacket>
                        UART_TransmitString(&huart1, dataPacket);
 80008e0:	4938      	ldr	r1, [pc, #224]	@ (80009c4 <ADC_ReadAllChannels+0x28c>)
 80008e2:	4839      	ldr	r0, [pc, #228]	@ (80009c8 <ADC_ReadAllChannels+0x290>)
 80008e4:	f000 fe04 	bl	80014f0 <UART_TransmitString>
                        motorStatus = 1; // Motor is on
 80008e8:	4b38      	ldr	r3, [pc, #224]	@ (80009cc <ADC_ReadAllChannels+0x294>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	701a      	strb	r2, [r3, #0]
                        break;
 80008ee:	e041      	b.n	8000974 <ADC_ReadAllChannels+0x23c>
                    case 4: // IN4
                        UART_ReadDataPacket(dataPacket, "@DRY#", sizeof("@DRY#") - 1);
 80008f0:	2205      	movs	r2, #5
 80008f2:	493a      	ldr	r1, [pc, #232]	@ (80009dc <ADC_ReadAllChannels+0x2a4>)
 80008f4:	4833      	ldr	r0, [pc, #204]	@ (80009c4 <ADC_ReadAllChannels+0x28c>)
 80008f6:	f000 fe0f 	bl	8001518 <UART_ReadDataPacket>
                        UART_TransmitString(&huart1, dataPacket);
 80008fa:	4932      	ldr	r1, [pc, #200]	@ (80009c4 <ADC_ReadAllChannels+0x28c>)
 80008fc:	4832      	ldr	r0, [pc, #200]	@ (80009c8 <ADC_ReadAllChannels+0x290>)
 80008fe:	f000 fdf7 	bl	80014f0 <UART_TransmitString>
                        motorStatus = 1; // Set motor status to on for dry run
 8000902:	4b32      	ldr	r3, [pc, #200]	@ (80009cc <ADC_ReadAllChannels+0x294>)
 8000904:	2201      	movs	r2, #1
 8000906:	701a      	strb	r2, [r3, #0]
                        break;
 8000908:	e034      	b.n	8000974 <ADC_ReadAllChannels+0x23c>
                    // Cases for IN5 are not specified for UART transmission
                    default:
                        break;
                }
            }
            else if (data->voltages[i] < DRY_RUN_THRESHOLD && motorStatus == 1)
 800090a:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	3206      	adds	r2, #6
 8000912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000916:	4619      	mov	r1, r3
 8000918:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800091a:	f7ff fef3 	bl	8000704 <__aeabi_fcmpgt>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d027      	beq.n	8000974 <ADC_ReadAllChannels+0x23c>
 8000924:	4b29      	ldr	r3, [pc, #164]	@ (80009cc <ADC_ReadAllChannels+0x294>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b01      	cmp	r3, #1
 800092a:	d123      	bne.n	8000974 <ADC_ReadAllChannels+0x23c>
            {
                // If the voltage is below the dry run threshold and the motor is on
                UART_ReadDataPacket(dataPacket, "@MT0#", sizeof("@MT0#") - 1);
 800092c:	2205      	movs	r2, #5
 800092e:	492c      	ldr	r1, [pc, #176]	@ (80009e0 <ADC_ReadAllChannels+0x2a8>)
 8000930:	4824      	ldr	r0, [pc, #144]	@ (80009c4 <ADC_ReadAllChannels+0x28c>)
 8000932:	f000 fdf1 	bl	8001518 <UART_ReadDataPacket>
                UART_TransmitString(&huart1, dataPacket);
 8000936:	4923      	ldr	r1, [pc, #140]	@ (80009c4 <ADC_ReadAllChannels+0x28c>)
 8000938:	4823      	ldr	r0, [pc, #140]	@ (80009c8 <ADC_ReadAllChannels+0x290>)
 800093a:	f000 fdd9 	bl	80014f0 <UART_TransmitString>
                motorStatus = 0; // Set motor status to off
 800093e:	4b23      	ldr	r3, [pc, #140]	@ (80009cc <ADC_ReadAllChannels+0x294>)
 8000940:	2200      	movs	r2, #0
 8000942:	701a      	strb	r2, [r3, #0]
 8000944:	e016      	b.n	8000974 <ADC_ReadAllChannels+0x23c>
        }
        else
        {
            // Handle ADC conversion timeout or error if necessary
            // For simplicity, we'll just set values to 0 on error
            data->rawValues[i] = 0;
 8000946:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	2100      	movs	r1, #0
 800094e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            data->voltages[i] = 0.0f;
 8000952:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	3206      	adds	r2, #6
 800095a:	f04f 0100 	mov.w	r1, #0
 800095e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            data->maxReached[i] = 0;
 8000962:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000966:	683a      	ldr	r2, [r7, #0]
 8000968:	4413      	add	r3, r2
 800096a:	2200      	movs	r2, #0
 800096c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8000970:	e000      	b.n	8000974 <ADC_ReadAllChannels+0x23c>
                        break;
 8000972:	bf00      	nop
    for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++)
 8000974:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000978:	3301      	adds	r3, #1
 800097a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800097e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000982:	2b05      	cmp	r3, #5
 8000984:	f67f aef2 	bls.w	800076c <ADC_ReadAllChannels+0x34>
        }
    }

    // Check for incoming UART data
    char receivedData[20]; // Buffer to hold received data
    UART_ReceiveString(&huart1, receivedData, sizeof(receivedData)); // Receive data from UART
 8000988:	f107 0308 	add.w	r3, r7, #8
 800098c:	2214      	movs	r2, #20
 800098e:	4619      	mov	r1, r3
 8000990:	480d      	ldr	r0, [pc, #52]	@ (80009c8 <ADC_ReadAllChannels+0x290>)
 8000992:	f000 fdde 	bl	8001552 <UART_ReceiveString>
    UART_ProcessReceivedData(receivedData); // Process the received data
 8000996:	f107 0308 	add.w	r3, r7, #8
 800099a:	4618      	mov	r0, r3
 800099c:	f000 fdf4 	bl	8001588 <UART_ProcessReceivedData>
}
 80009a0:	bf00      	nop
 80009a2:	373c      	adds	r7, #60	@ 0x3c
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd90      	pop	{r4, r7, pc}
 80009a8:	40400000 	.word	0x40400000
 80009ac:	3dcccccd 	.word	0x3dcccccd
 80009b0:	08005924 	.word	0x08005924
 80009b4:	40533333 	.word	0x40533333
 80009b8:	457ff000 	.word	0x457ff000
 80009bc:	404ccccd 	.word	0x404ccccd
 80009c0:	080058c0 	.word	0x080058c0
 80009c4:	20000078 	.word	0x20000078
 80009c8:	20000174 	.word	0x20000174
 80009cc:	20000081 	.word	0x20000081
 80009d0:	080058c8 	.word	0x080058c8
 80009d4:	080058d0 	.word	0x080058d0
 80009d8:	080058d8 	.word	0x080058d8
 80009dc:	080058e0 	.word	0x080058e0
 80009e0:	080058e8 	.word	0x080058e8

080009e4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c2;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup (e.g., 0x4E or 0x7E)

void lcd_send_cmd (char cmd)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b086      	sub	sp, #24
 80009e8:	af02      	add	r7, sp, #8
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	f023 030f 	bic.w	r3, r3, #15
 80009f4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	011b      	lsls	r3, r3, #4
 80009fa:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0 (Command mode, Enable high)
 80009fc:	7bfb      	ldrb	r3, [r7, #15]
 80009fe:	f043 030c 	orr.w	r3, r3, #12
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 (Command mode, Enable low)
 8000a06:	7bfb      	ldrb	r3, [r7, #15]
 8000a08:	f043 0308 	orr.w	r3, r3, #8
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 (Command mode, Enable high)
 8000a10:	7bbb      	ldrb	r3, [r7, #14]
 8000a12:	f043 030c 	orr.w	r3, r3, #12
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 (Command mode, Enable low)
 8000a1a:	7bbb      	ldrb	r3, [r7, #14]
 8000a1c:	f043 0308 	orr.w	r3, r3, #8
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000a24:	f107 0208 	add.w	r2, r7, #8
 8000a28:	2364      	movs	r3, #100	@ 0x64
 8000a2a:	9300      	str	r3, [sp, #0]
 8000a2c:	2304      	movs	r3, #4
 8000a2e:	214e      	movs	r1, #78	@ 0x4e
 8000a30:	4803      	ldr	r0, [pc, #12]	@ (8000a40 <lcd_send_cmd+0x5c>)
 8000a32:	f001 ff17 	bl	8002864 <HAL_I2C_Master_Transmit>
}
 8000a36:	bf00      	nop
 8000a38:	3710      	adds	r7, #16
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	200000b4 	.word	0x200000b4

08000a44 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af02      	add	r7, sp, #8
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	f023 030f 	bic.w	r3, r3, #15
 8000a54:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	011b      	lsls	r3, r3, #4
 8000a5a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1 (Data mode, Enable high)
 8000a5c:	7bfb      	ldrb	r3, [r7, #15]
 8000a5e:	f043 030d 	orr.w	r3, r3, #13
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1 (Data mode, Enable low)
 8000a66:	7bfb      	ldrb	r3, [r7, #15]
 8000a68:	f043 0309 	orr.w	r3, r3, #9
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1 (Data mode, Enable high)
 8000a70:	7bbb      	ldrb	r3, [r7, #14]
 8000a72:	f043 030d 	orr.w	r3, r3, #13
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1 (Data mode, Enable low)
 8000a7a:	7bbb      	ldrb	r3, [r7, #14]
 8000a7c:	f043 0309 	orr.w	r3, r3, #9
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000a84:	f107 0208 	add.w	r2, r7, #8
 8000a88:	2364      	movs	r3, #100	@ 0x64
 8000a8a:	9300      	str	r3, [sp, #0]
 8000a8c:	2304      	movs	r3, #4
 8000a8e:	214e      	movs	r1, #78	@ 0x4e
 8000a90:	4803      	ldr	r0, [pc, #12]	@ (8000aa0 <lcd_send_data+0x5c>)
 8000a92:	f001 fee7 	bl	8002864 <HAL_I2C_Master_Transmit>
}
 8000a96:	bf00      	nop
 8000a98:	3710      	adds	r7, #16
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	200000b4 	.word	0x200000b4

08000aa4 <lcd_put_cur>:
	HAL_Delay(2); // Wait for clear command to execute
	lcd_send_cmd (0x80); // Set cursor to home position (0,0)
}

void lcd_put_cur(int row, int col)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	6039      	str	r1, [r7, #0]
    switch (row)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d003      	beq.n	8000abc <lcd_put_cur+0x18>
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d005      	beq.n	8000ac6 <lcd_put_cur+0x22>
 8000aba:	e009      	b.n	8000ad0 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80; // Address for first row
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ac2:	603b      	str	r3, [r7, #0]
            break;
 8000ac4:	e004      	b.n	8000ad0 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0; // Address for second row
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000acc:	603b      	str	r3, [r7, #0]
            break;
 8000ace:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff ff85 	bl	80009e4 <lcd_send_cmd>
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <lcd_init>:


void lcd_init (void)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	af00      	add	r7, sp, #0
	// 4 bit initialisation sequence (standard for PCF8574 based LCDs)
	HAL_Delay(50);  // wait for >40ms after power-on
 8000ae6:	2032      	movs	r0, #50	@ 0x32
 8000ae8:	f000 fdfa 	bl	80016e0 <HAL_Delay>
	lcd_send_cmd (0x30); // Function set (8-bit mode)
 8000aec:	2030      	movs	r0, #48	@ 0x30
 8000aee:	f7ff ff79 	bl	80009e4 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000af2:	2005      	movs	r0, #5
 8000af4:	f000 fdf4 	bl	80016e0 <HAL_Delay>
	lcd_send_cmd (0x30); // Function set (8-bit mode)
 8000af8:	2030      	movs	r0, #48	@ 0x30
 8000afa:	f7ff ff73 	bl	80009e4 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000afe:	2001      	movs	r0, #1
 8000b00:	f000 fdee 	bl	80016e0 <HAL_Delay>
	lcd_send_cmd (0x30); // Function set (8-bit mode)
 8000b04:	2030      	movs	r0, #48	@ 0x30
 8000b06:	f7ff ff6d 	bl	80009e4 <lcd_send_cmd>
	HAL_Delay(10);
 8000b0a:	200a      	movs	r0, #10
 8000b0c:	f000 fde8 	bl	80016e0 <HAL_Delay>
	lcd_send_cmd (0x20);  // Function set (4-bit mode)
 8000b10:	2020      	movs	r0, #32
 8000b12:	f7ff ff67 	bl	80009e4 <lcd_send_cmd>
	HAL_Delay(10);
 8000b16:	200a      	movs	r0, #10
 8000b18:	f000 fde2 	bl	80016e0 <HAL_Delay>

  // Display initialisation commands (after 4-bit mode is set)
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000b1c:	2028      	movs	r0, #40	@ 0x28
 8000b1e:	f7ff ff61 	bl	80009e4 <lcd_send_cmd>
	HAL_Delay(1);
 8000b22:	2001      	movs	r0, #1
 8000b24:	f000 fddc 	bl	80016e0 <HAL_Delay>
	lcd_send_cmd (0x08); // Display on/off control --> D=0,C=0, B=0  ---> display off
 8000b28:	2008      	movs	r0, #8
 8000b2a:	f7ff ff5b 	bl	80009e4 <lcd_send_cmd>
	HAL_Delay(1);
 8000b2e:	2001      	movs	r0, #1
 8000b30:	f000 fdd6 	bl	80016e0 <HAL_Delay>
	lcd_send_cmd (0x01);  // Clear display
 8000b34:	2001      	movs	r0, #1
 8000b36:	f7ff ff55 	bl	80009e4 <lcd_send_cmd>
	HAL_Delay(2); // Longer delay for clear display
 8000b3a:	2002      	movs	r0, #2
 8000b3c:	f000 fdd0 	bl	80016e0 <HAL_Delay>
	lcd_send_cmd (0x06); // Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000b40:	2006      	movs	r0, #6
 8000b42:	f7ff ff4f 	bl	80009e4 <lcd_send_cmd>
	HAL_Delay(1);
 8000b46:	2001      	movs	r0, #1
 8000b48:	f000 fdca 	bl	80016e0 <HAL_Delay>
	lcd_send_cmd (0x0C); // Display on/off control --> D = 1, C and B = 0. (Display ON, Cursor OFF, Blink OFF)
 8000b4c:	200c      	movs	r0, #12
 8000b4e:	f7ff ff49 	bl	80009e4 <lcd_send_cmd>
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b082      	sub	sp, #8
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000b5e:	e006      	b.n	8000b6e <lcd_send_string+0x18>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	1c5a      	adds	r2, r3, #1
 8000b64:	607a      	str	r2, [r7, #4]
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff ff6b 	bl	8000a44 <lcd_send_data>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d1f4      	bne.n	8000b60 <lcd_send_string+0xa>
}
 8000b76:	bf00      	nop
 8000b78:	bf00      	nop
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af02      	add	r7, sp, #8


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b86:	f000 fd49 	bl	800161c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b8a:	f000 f85b 	bl	8000c44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b8e:	f000 f9b9 	bl	8000f04 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000b92:	f000 f8b5 	bl	8000d00 <MX_ADC1_Init>
  MX_RTC_Init();
 8000b96:	f000 f90b 	bl	8000db0 <MX_RTC_Init>
  MX_SPI1_Init();
 8000b9a:	f000 f953 	bl	8000e44 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000b9e:	f000 f987 	bl	8000eb0 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8000ba2:	f000 f8d7 	bl	8000d54 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  lcd_init (); // Initialize the LCD
 8000ba6:	f7ff ff9c 	bl	8000ae2 <lcd_init>

  ADC_Init(&hadc1);
 8000baa:	4820      	ldr	r0, [pc, #128]	@ (8000c2c <main+0xac>)
 8000bac:	f7ff fdb4 	bl	8000718 <ADC_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      // Read all ADC channels
      ADC_ReadAllChannels(&hadc1, &adcData);
 8000bb0:	491f      	ldr	r1, [pc, #124]	@ (8000c30 <main+0xb0>)
 8000bb2:	481e      	ldr	r0, [pc, #120]	@ (8000c2c <main+0xac>)
 8000bb4:	f7ff fdc0 	bl	8000738 <ADC_ReadAllChannels>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  Get_Time(); // Read current time from RTC
 8000bb8:	f000 fa6a 	bl	8001090 <Get_Time>
	  sprintf (buffer, "%02d:%02d:%02d", time.hour, time.minutes, time.seconds);
 8000bbc:	4b1d      	ldr	r3, [pc, #116]	@ (8000c34 <main+0xb4>)
 8000bbe:	789b      	ldrb	r3, [r3, #2]
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c34 <main+0xb4>)
 8000bc4:	785b      	ldrb	r3, [r3, #1]
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c34 <main+0xb4>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	9300      	str	r3, [sp, #0]
 8000bce:	460b      	mov	r3, r1
 8000bd0:	4919      	ldr	r1, [pc, #100]	@ (8000c38 <main+0xb8>)
 8000bd2:	481a      	ldr	r0, [pc, #104]	@ (8000c3c <main+0xbc>)
 8000bd4:	f004 f9a4 	bl	8004f20 <siprintf>
	  lcd_put_cur (0,0); // Set cursor to row 0, column 0
 8000bd8:	2100      	movs	r1, #0
 8000bda:	2000      	movs	r0, #0
 8000bdc:	f7ff ff62 	bl	8000aa4 <lcd_put_cur>
	  lcd_send_string(buffer); // Display time
 8000be0:	4816      	ldr	r0, [pc, #88]	@ (8000c3c <main+0xbc>)
 8000be2:	f7ff ffb8 	bl	8000b56 <lcd_send_string>

	  sprintf (buffer, "%02d-%02d-20%02d", time.dayofmonth, time.month, time.year);
 8000be6:	4b13      	ldr	r3, [pc, #76]	@ (8000c34 <main+0xb4>)
 8000be8:	791b      	ldrb	r3, [r3, #4]
 8000bea:	461a      	mov	r2, r3
 8000bec:	4b11      	ldr	r3, [pc, #68]	@ (8000c34 <main+0xb4>)
 8000bee:	795b      	ldrb	r3, [r3, #5]
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4b10      	ldr	r3, [pc, #64]	@ (8000c34 <main+0xb4>)
 8000bf4:	799b      	ldrb	r3, [r3, #6]
 8000bf6:	9300      	str	r3, [sp, #0]
 8000bf8:	460b      	mov	r3, r1
 8000bfa:	4911      	ldr	r1, [pc, #68]	@ (8000c40 <main+0xc0>)
 8000bfc:	480f      	ldr	r0, [pc, #60]	@ (8000c3c <main+0xbc>)
 8000bfe:	f004 f98f 	bl	8004f20 <siprintf>
	  lcd_put_cur(1, 0); // Set cursor to row 1, column 0
 8000c02:	2100      	movs	r1, #0
 8000c04:	2001      	movs	r0, #1
 8000c06:	f7ff ff4d 	bl	8000aa4 <lcd_put_cur>
	  lcd_send_string(buffer); // Display date
 8000c0a:	480c      	ldr	r0, [pc, #48]	@ (8000c3c <main+0xbc>)
 8000c0c:	f7ff ffa3 	bl	8000b56 <lcd_send_string>


	  lcd_put_cur(0, 10); // Set cursor to row 0, column 10
 8000c10:	210a      	movs	r1, #10
 8000c12:	2000      	movs	r0, #0
 8000c14:	f7ff ff46 	bl	8000aa4 <lcd_put_cur>
	  // Using %g for float to avoid trailing zeros if possible, or adjust precision
	  lcd_send_string(buffer);
 8000c18:	4808      	ldr	r0, [pc, #32]	@ (8000c3c <main+0xbc>)
 8000c1a:	f7ff ff9c 	bl	8000b56 <lcd_send_string>

	  HAL_Delay(500); // Delay for 500ms before next update
 8000c1e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c22:	f000 fd5d 	bl	80016e0 <HAL_Delay>
      ADC_ReadAllChannels(&hadc1, &adcData);
 8000c26:	bf00      	nop
 8000c28:	e7c2      	b.n	8000bb0 <main+0x30>
 8000c2a:	bf00      	nop
 8000c2c:	20000084 	.word	0x20000084
 8000c30:	200001d0 	.word	0x200001d0
 8000c34:	20000208 	.word	0x20000208
 8000c38:	080058f0 	.word	0x080058f0
 8000c3c:	200001bc 	.word	0x200001bc
 8000c40:	08005900 	.word	0x08005900

08000c44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b094      	sub	sp, #80	@ 0x50
 8000c48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c4a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c4e:	2228      	movs	r2, #40	@ 0x28
 8000c50:	2100      	movs	r1, #0
 8000c52:	4618      	mov	r0, r3
 8000c54:	f004 f986 	bl	8004f64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	609a      	str	r2, [r3, #8]
 8000c72:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c74:	2301      	movs	r3, #1
 8000c76:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c78:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c82:	2301      	movs	r3, #1
 8000c84:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c86:	2302      	movs	r3, #2
 8000c88:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c8a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c8e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c90:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000c94:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c96:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f002 fd00 	bl	80036a0 <HAL_RCC_OscConfig>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000ca6:	f000 f9d5 	bl	8001054 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000caa:	230f      	movs	r3, #15
 8000cac:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cba:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	2102      	movs	r1, #2
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f002 ff6c 	bl	8003ba4 <HAL_RCC_ClockConfig>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000cd2:	f000 f9bf 	bl	8001054 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV128;
 8000cda:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000cde:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000ce0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ce4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ce6:	1d3b      	adds	r3, r7, #4
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f003 f8e9 	bl	8003ec0 <HAL_RCCEx_PeriphCLKConfig>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000cf4:	f000 f9ae 	bl	8001054 <Error_Handler>
  }
}
 8000cf8:	bf00      	nop
 8000cfa:	3750      	adds	r7, #80	@ 0x50
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <MX_ADC1_Init>:
  * @param None
  * @retval None
  */

static void MX_ADC1_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 8000d06:	1d3b      	adds	r3, r7, #4
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]

    hadc1.Instance = ADC1;
 8000d10:	4b0e      	ldr	r3, [pc, #56]	@ (8000d4c <MX_ADC1_Init+0x4c>)
 8000d12:	4a0f      	ldr	r2, [pc, #60]	@ (8000d50 <MX_ADC1_Init+0x50>)
 8000d14:	601a      	str	r2, [r3, #0]
    hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d16:	4b0d      	ldr	r3, [pc, #52]	@ (8000d4c <MX_ADC1_Init+0x4c>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
    hadc1.Init.ContinuousConvMode = DISABLE;
 8000d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d4c <MX_ADC1_Init+0x4c>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	731a      	strb	r2, [r3, #12]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d22:	4b0a      	ldr	r3, [pc, #40]	@ (8000d4c <MX_ADC1_Init+0x4c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	751a      	strb	r2, [r3, #20]
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d28:	4b08      	ldr	r3, [pc, #32]	@ (8000d4c <MX_ADC1_Init+0x4c>)
 8000d2a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000d2e:	61da      	str	r2, [r3, #28]
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d30:	4b06      	ldr	r3, [pc, #24]	@ (8000d4c <MX_ADC1_Init+0x4c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	605a      	str	r2, [r3, #4]
    hadc1.Init.NbrOfConversion = 1;
 8000d36:	4b05      	ldr	r3, [pc, #20]	@ (8000d4c <MX_ADC1_Init+0x4c>)
 8000d38:	2201      	movs	r2, #1
 8000d3a:	611a      	str	r2, [r3, #16]
    HAL_ADC_Init(&hadc1);
 8000d3c:	4803      	ldr	r0, [pc, #12]	@ (8000d4c <MX_ADC1_Init+0x4c>)
 8000d3e:	f000 fcf3 	bl	8001728 <HAL_ADC_Init>
}
 8000d42:	bf00      	nop
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000084 	.word	0x20000084
 8000d50:	40012400 	.word	0x40012400

08000d54 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d58:	4b12      	ldr	r3, [pc, #72]	@ (8000da4 <MX_I2C2_Init+0x50>)
 8000d5a:	4a13      	ldr	r2, [pc, #76]	@ (8000da8 <MX_I2C2_Init+0x54>)
 8000d5c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000d5e:	4b11      	ldr	r3, [pc, #68]	@ (8000da4 <MX_I2C2_Init+0x50>)
 8000d60:	4a12      	ldr	r2, [pc, #72]	@ (8000dac <MX_I2C2_Init+0x58>)
 8000d62:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d64:	4b0f      	ldr	r3, [pc, #60]	@ (8000da4 <MX_I2C2_Init+0x50>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000da4 <MX_I2C2_Init+0x50>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d70:	4b0c      	ldr	r3, [pc, #48]	@ (8000da4 <MX_I2C2_Init+0x50>)
 8000d72:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d76:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d78:	4b0a      	ldr	r3, [pc, #40]	@ (8000da4 <MX_I2C2_Init+0x50>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000d7e:	4b09      	ldr	r3, [pc, #36]	@ (8000da4 <MX_I2C2_Init+0x50>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d84:	4b07      	ldr	r3, [pc, #28]	@ (8000da4 <MX_I2C2_Init+0x50>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d8a:	4b06      	ldr	r3, [pc, #24]	@ (8000da4 <MX_I2C2_Init+0x50>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d90:	4804      	ldr	r0, [pc, #16]	@ (8000da4 <MX_I2C2_Init+0x50>)
 8000d92:	f001 fc23 	bl	80025dc <HAL_I2C_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000d9c:	f000 f95a 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	200000b4 	.word	0x200000b4
 8000da8:	40005800 	.word	0x40005800
 8000dac:	000186a0 	.word	0x000186a0

08000db0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000db6:	1d3b      	adds	r3, r7, #4
 8000db8:	2100      	movs	r1, #0
 8000dba:	460a      	mov	r2, r1
 8000dbc:	801a      	strh	r2, [r3, #0]
 8000dbe:	460a      	mov	r2, r1
 8000dc0:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000dc6:	4b1d      	ldr	r3, [pc, #116]	@ (8000e3c <MX_RTC_Init+0x8c>)
 8000dc8:	4a1d      	ldr	r2, [pc, #116]	@ (8000e40 <MX_RTC_Init+0x90>)
 8000dca:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000dcc:	4b1b      	ldr	r3, [pc, #108]	@ (8000e3c <MX_RTC_Init+0x8c>)
 8000dce:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd2:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000dd4:	4b19      	ldr	r3, [pc, #100]	@ (8000e3c <MX_RTC_Init+0x8c>)
 8000dd6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000dda:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ddc:	4817      	ldr	r0, [pc, #92]	@ (8000e3c <MX_RTC_Init+0x8c>)
 8000dde:	f003 f9db 	bl	8004198 <HAL_RTC_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8000de8:	f000 f934 	bl	8001054 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	480f      	ldr	r0, [pc, #60]	@ (8000e3c <MX_RTC_Init+0x8c>)
 8000e00:	f003 fa56 	bl	80042b0 <HAL_RTC_SetTime>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8000e0a:	f000 f923 	bl	8001054 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000e12:	2301      	movs	r3, #1
 8000e14:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8000e16:	2301      	movs	r3, #1
 8000e18:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000e1e:	463b      	mov	r3, r7
 8000e20:	2201      	movs	r2, #1
 8000e22:	4619      	mov	r1, r3
 8000e24:	4805      	ldr	r0, [pc, #20]	@ (8000e3c <MX_RTC_Init+0x8c>)
 8000e26:	f003 fadb 	bl	80043e0 <HAL_RTC_SetDate>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8000e30:	f000 f910 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000e34:	bf00      	nop
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20000108 	.word	0x20000108
 8000e40:	40002800 	.word	0x40002800

08000e44 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e48:	4b17      	ldr	r3, [pc, #92]	@ (8000ea8 <MX_SPI1_Init+0x64>)
 8000e4a:	4a18      	ldr	r2, [pc, #96]	@ (8000eac <MX_SPI1_Init+0x68>)
 8000e4c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e4e:	4b16      	ldr	r3, [pc, #88]	@ (8000ea8 <MX_SPI1_Init+0x64>)
 8000e50:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e54:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e56:	4b14      	ldr	r3, [pc, #80]	@ (8000ea8 <MX_SPI1_Init+0x64>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e5c:	4b12      	ldr	r3, [pc, #72]	@ (8000ea8 <MX_SPI1_Init+0x64>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e62:	4b11      	ldr	r3, [pc, #68]	@ (8000ea8 <MX_SPI1_Init+0x64>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e68:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea8 <MX_SPI1_Init+0x64>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea8 <MX_SPI1_Init+0x64>)
 8000e70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e74:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000e76:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea8 <MX_SPI1_Init+0x64>)
 8000e78:	2208      	movs	r2, #8
 8000e7a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea8 <MX_SPI1_Init+0x64>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e82:	4b09      	ldr	r3, [pc, #36]	@ (8000ea8 <MX_SPI1_Init+0x64>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e88:	4b07      	ldr	r3, [pc, #28]	@ (8000ea8 <MX_SPI1_Init+0x64>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ea8 <MX_SPI1_Init+0x64>)
 8000e90:	220a      	movs	r2, #10
 8000e92:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e94:	4804      	ldr	r0, [pc, #16]	@ (8000ea8 <MX_SPI1_Init+0x64>)
 8000e96:	f003 fd03 	bl	80048a0 <HAL_SPI_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ea0:	f000 f8d8 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	2000011c 	.word	0x2000011c
 8000eac:	40013000 	.word	0x40013000

08000eb0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000eb4:	4b11      	ldr	r3, [pc, #68]	@ (8000efc <MX_USART1_UART_Init+0x4c>)
 8000eb6:	4a12      	ldr	r2, [pc, #72]	@ (8000f00 <MX_USART1_UART_Init+0x50>)
 8000eb8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000eba:	4b10      	ldr	r3, [pc, #64]	@ (8000efc <MX_USART1_UART_Init+0x4c>)
 8000ebc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ec0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8000efc <MX_USART1_UART_Init+0x4c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8000efc <MX_USART1_UART_Init+0x4c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ece:	4b0b      	ldr	r3, [pc, #44]	@ (8000efc <MX_USART1_UART_Init+0x4c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ed4:	4b09      	ldr	r3, [pc, #36]	@ (8000efc <MX_USART1_UART_Init+0x4c>)
 8000ed6:	220c      	movs	r2, #12
 8000ed8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eda:	4b08      	ldr	r3, [pc, #32]	@ (8000efc <MX_USART1_UART_Init+0x4c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee0:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <MX_USART1_UART_Init+0x4c>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ee6:	4805      	ldr	r0, [pc, #20]	@ (8000efc <MX_USART1_UART_Init+0x4c>)
 8000ee8:	f003 fd5e 	bl	80049a8 <HAL_UART_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ef2:	f000 f8af 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000174 	.word	0x20000174
 8000f00:	40013800 	.word	0x40013800

08000f04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b088      	sub	sp, #32
 8000f08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0a:	f107 0310 	add.w	r3, r7, #16
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]
 8000f16:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f18:	4b4a      	ldr	r3, [pc, #296]	@ (8001044 <MX_GPIO_Init+0x140>)
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	4a49      	ldr	r2, [pc, #292]	@ (8001044 <MX_GPIO_Init+0x140>)
 8000f1e:	f043 0310 	orr.w	r3, r3, #16
 8000f22:	6193      	str	r3, [r2, #24]
 8000f24:	4b47      	ldr	r3, [pc, #284]	@ (8001044 <MX_GPIO_Init+0x140>)
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	f003 0310 	and.w	r3, r3, #16
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f30:	4b44      	ldr	r3, [pc, #272]	@ (8001044 <MX_GPIO_Init+0x140>)
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	4a43      	ldr	r2, [pc, #268]	@ (8001044 <MX_GPIO_Init+0x140>)
 8000f36:	f043 0320 	orr.w	r3, r3, #32
 8000f3a:	6193      	str	r3, [r2, #24]
 8000f3c:	4b41      	ldr	r3, [pc, #260]	@ (8001044 <MX_GPIO_Init+0x140>)
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	f003 0320 	and.w	r3, r3, #32
 8000f44:	60bb      	str	r3, [r7, #8]
 8000f46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f48:	4b3e      	ldr	r3, [pc, #248]	@ (8001044 <MX_GPIO_Init+0x140>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	4a3d      	ldr	r2, [pc, #244]	@ (8001044 <MX_GPIO_Init+0x140>)
 8000f4e:	f043 0304 	orr.w	r3, r3, #4
 8000f52:	6193      	str	r3, [r2, #24]
 8000f54:	4b3b      	ldr	r3, [pc, #236]	@ (8001044 <MX_GPIO_Init+0x140>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	f003 0304 	and.w	r3, r3, #4
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f60:	4b38      	ldr	r3, [pc, #224]	@ (8001044 <MX_GPIO_Init+0x140>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	4a37      	ldr	r2, [pc, #220]	@ (8001044 <MX_GPIO_Init+0x140>)
 8000f66:	f043 0308 	orr.w	r3, r3, #8
 8000f6a:	6193      	str	r3, [r2, #24]
 8000f6c:	4b35      	ldr	r3, [pc, #212]	@ (8001044 <MX_GPIO_Init+0x140>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	f003 0308 	and.w	r3, r3, #8
 8000f74:	603b      	str	r3, [r7, #0]
 8000f76:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f7e:	4832      	ldr	r0, [pc, #200]	@ (8001048 <MX_GPIO_Init+0x144>)
 8000f80:	f001 fb14 	bl	80025ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Relay1_Pin|Relay2_Pin|Relay3_Pin|SWITCH4_Pin
 8000f84:	2200      	movs	r2, #0
 8000f86:	f248 01c7 	movw	r1, #32967	@ 0x80c7
 8000f8a:	4830      	ldr	r0, [pc, #192]	@ (800104c <MX_GPIO_Init+0x148>)
 8000f8c:	f001 fb0e 	bl	80025ac <HAL_GPIO_WritePin>
                          |LORA_STATUS_Pin|RF_DATA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_SET);
 8000f90:	2201      	movs	r2, #1
 8000f92:	f44f 51c8 	mov.w	r1, #6400	@ 0x1900
 8000f96:	482e      	ldr	r0, [pc, #184]	@ (8001050 <MX_GPIO_Init+0x14c>)
 8000f98:	f001 fb08 	bl	80025ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_SELECT_GPIO_Port, LORA_SELECT_Pin, GPIO_PIN_RESET);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fa2:	482b      	ldr	r0, [pc, #172]	@ (8001050 <MX_GPIO_Init+0x14c>)
 8000fa4:	f001 fb02 	bl	80025ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED4_Pin|LED5_Pin, GPIO_PIN_SET);
 8000fa8:	2201      	movs	r2, #1
 8000faa:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000fae:	4827      	ldr	r0, [pc, #156]	@ (800104c <MX_GPIO_Init+0x148>)
 8000fb0:	f001 fafc 	bl	80025ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fb4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc6:	f107 0310 	add.w	r3, r7, #16
 8000fca:	4619      	mov	r1, r3
 8000fcc:	481e      	ldr	r0, [pc, #120]	@ (8001048 <MX_GPIO_Init+0x144>)
 8000fce:	f001 f969 	bl	80022a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : AC_voltage_Pin AC_current_Pin */
  GPIO_InitStruct.Pin = AC_voltage_Pin|AC_current_Pin;
 8000fd2:	23c0      	movs	r3, #192	@ 0xc0
 8000fd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fda:	f107 0310 	add.w	r3, r7, #16
 8000fde:	4619      	mov	r1, r3
 8000fe0:	481b      	ldr	r0, [pc, #108]	@ (8001050 <MX_GPIO_Init+0x14c>)
 8000fe2:	f001 f95f 	bl	80022a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Relay1_Pin Relay2_Pin Relay3_Pin SWITCH4_Pin
                           LORA_STATUS_Pin RF_DATA_Pin LED4_Pin LED5_Pin */
  GPIO_InitStruct.Pin = Relay1_Pin|Relay2_Pin|Relay3_Pin|SWITCH4_Pin
 8000fe6:	f248 33c7 	movw	r3, #33735	@ 0x83c7
 8000fea:	613b      	str	r3, [r7, #16]
                          |LORA_STATUS_Pin|RF_DATA_Pin|LED4_Pin|LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fec:	2301      	movs	r3, #1
 8000fee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff8:	f107 0310 	add.w	r3, r7, #16
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4813      	ldr	r0, [pc, #76]	@ (800104c <MX_GPIO_Init+0x148>)
 8001000:	f001 f950 	bl	80022a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWITCH1_Pin SWITCH2_Pin SWITCH3_Pin */
  GPIO_InitStruct.Pin = SWITCH1_Pin|SWITCH2_Pin|SWITCH3_Pin;
 8001004:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8001008:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001012:	f107 0310 	add.w	r3, r7, #16
 8001016:	4619      	mov	r1, r3
 8001018:	480c      	ldr	r0, [pc, #48]	@ (800104c <MX_GPIO_Init+0x148>)
 800101a:	f001 f943 	bl	80022a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LORA_SELECT_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LORA_SELECT_Pin;
 800101e:	f44f 4319 	mov.w	r3, #39168	@ 0x9900
 8001022:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001024:	2301      	movs	r3, #1
 8001026:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2302      	movs	r3, #2
 800102e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001030:	f107 0310 	add.w	r3, r7, #16
 8001034:	4619      	mov	r1, r3
 8001036:	4806      	ldr	r0, [pc, #24]	@ (8001050 <MX_GPIO_Init+0x14c>)
 8001038:	f001 f934 	bl	80022a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800103c:	bf00      	nop
 800103e:	3720      	adds	r7, #32
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40021000 	.word	0x40021000
 8001048:	40011000 	.word	0x40011000
 800104c:	40010c00 	.word	0x40010c00
 8001050:	40010800 	.word	0x40010800

08001054 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001058:	b672      	cpsid	i
}
 800105a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800105c:	bf00      	nop
 800105e:	e7fd      	b.n	800105c <Error_Handler+0x8>

08001060 <bcdToDec>:
  * @brief Converts a Binary Coded Decimal (BCD) number to a normal decimal number.
  * @param val: The BCD value to convert.
  * @retval The decimal representation of the value.
  */
int bcdToDec(uint8_t val)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	091b      	lsrs	r3, r3, #4
 800106e:	b2db      	uxtb	r3, r3
 8001070:	461a      	mov	r2, r3
 8001072:	4613      	mov	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4413      	add	r3, r2
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	461a      	mov	r2, r3
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	f003 030f 	and.w	r3, r3, #15
 8001082:	4413      	add	r3, r2
}
 8001084:	4618      	mov	r0, r3
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr
	...

08001090 <Get_Time>:
  *        The read values are stored in the global 'time' structure.
  * @param None
  * @retval None
  */
void Get_Time (void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af04      	add	r7, sp, #16
	uint8_t get_time[7];
	// Read 7 bytes starting from address 0x00 (seconds register)
	HAL_I2C_Mem_Read(&hi2c2, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000);
 8001096:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800109a:	9302      	str	r3, [sp, #8]
 800109c:	2307      	movs	r3, #7
 800109e:	9301      	str	r3, [sp, #4]
 80010a0:	463b      	mov	r3, r7
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	2301      	movs	r3, #1
 80010a6:	2200      	movs	r2, #0
 80010a8:	21d0      	movs	r1, #208	@ 0xd0
 80010aa:	481f      	ldr	r0, [pc, #124]	@ (8001128 <Get_Time+0x98>)
 80010ac:	f001 fcd8 	bl	8002a60 <HAL_I2C_Mem_Read>
	time.seconds = bcdToDec(get_time[0]);
 80010b0:	783b      	ldrb	r3, [r7, #0]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff ffd4 	bl	8001060 <bcdToDec>
 80010b8:	4603      	mov	r3, r0
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	4b1b      	ldr	r3, [pc, #108]	@ (800112c <Get_Time+0x9c>)
 80010be:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(get_time[1]);
 80010c0:	787b      	ldrb	r3, [r7, #1]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff ffcc 	bl	8001060 <bcdToDec>
 80010c8:	4603      	mov	r3, r0
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	4b17      	ldr	r3, [pc, #92]	@ (800112c <Get_Time+0x9c>)
 80010ce:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(get_time[2]);
 80010d0:	78bb      	ldrb	r3, [r7, #2]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff ffc4 	bl	8001060 <bcdToDec>
 80010d8:	4603      	mov	r3, r0
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	4b13      	ldr	r3, [pc, #76]	@ (800112c <Get_Time+0x9c>)
 80010de:	709a      	strb	r2, [r3, #2]
	time.dayofweek = bcdToDec(get_time[3]);
 80010e0:	78fb      	ldrb	r3, [r7, #3]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff ffbc 	bl	8001060 <bcdToDec>
 80010e8:	4603      	mov	r3, r0
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	4b0f      	ldr	r3, [pc, #60]	@ (800112c <Get_Time+0x9c>)
 80010ee:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(get_time[4]);
 80010f0:	793b      	ldrb	r3, [r7, #4]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff ffb4 	bl	8001060 <bcdToDec>
 80010f8:	4603      	mov	r3, r0
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	4b0b      	ldr	r3, [pc, #44]	@ (800112c <Get_Time+0x9c>)
 80010fe:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(get_time[5]);
 8001100:	797b      	ldrb	r3, [r7, #5]
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff ffac 	bl	8001060 <bcdToDec>
 8001108:	4603      	mov	r3, r0
 800110a:	b2da      	uxtb	r2, r3
 800110c:	4b07      	ldr	r3, [pc, #28]	@ (800112c <Get_Time+0x9c>)
 800110e:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(get_time[6]);
 8001110:	79bb      	ldrb	r3, [r7, #6]
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff ffa4 	bl	8001060 <bcdToDec>
 8001118:	4603      	mov	r3, r0
 800111a:	b2da      	uxtb	r2, r3
 800111c:	4b03      	ldr	r3, [pc, #12]	@ (800112c <Get_Time+0x9c>)
 800111e:	719a      	strb	r2, [r3, #6]
}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	200000b4 	.word	0x200000b4
 800112c:	20000208 	.word	0x20000208

08001130 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001136:	4b15      	ldr	r3, [pc, #84]	@ (800118c <HAL_MspInit+0x5c>)
 8001138:	699b      	ldr	r3, [r3, #24]
 800113a:	4a14      	ldr	r2, [pc, #80]	@ (800118c <HAL_MspInit+0x5c>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	6193      	str	r3, [r2, #24]
 8001142:	4b12      	ldr	r3, [pc, #72]	@ (800118c <HAL_MspInit+0x5c>)
 8001144:	699b      	ldr	r3, [r3, #24]
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800114e:	4b0f      	ldr	r3, [pc, #60]	@ (800118c <HAL_MspInit+0x5c>)
 8001150:	69db      	ldr	r3, [r3, #28]
 8001152:	4a0e      	ldr	r2, [pc, #56]	@ (800118c <HAL_MspInit+0x5c>)
 8001154:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001158:	61d3      	str	r3, [r2, #28]
 800115a:	4b0c      	ldr	r3, [pc, #48]	@ (800118c <HAL_MspInit+0x5c>)
 800115c:	69db      	ldr	r3, [r3, #28]
 800115e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001166:	4b0a      	ldr	r3, [pc, #40]	@ (8001190 <HAL_MspInit+0x60>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	4a04      	ldr	r2, [pc, #16]	@ (8001190 <HAL_MspInit+0x60>)
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001182:	bf00      	nop
 8001184:	3714      	adds	r7, #20
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr
 800118c:	40021000 	.word	0x40021000
 8001190:	40010000 	.word	0x40010000

08001194 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b088      	sub	sp, #32
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119c:	f107 0310 	add.w	r3, r7, #16
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a14      	ldr	r2, [pc, #80]	@ (8001200 <HAL_ADC_MspInit+0x6c>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d121      	bne.n	80011f8 <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011b4:	4b13      	ldr	r3, [pc, #76]	@ (8001204 <HAL_ADC_MspInit+0x70>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	4a12      	ldr	r2, [pc, #72]	@ (8001204 <HAL_ADC_MspInit+0x70>)
 80011ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011be:	6193      	str	r3, [r2, #24]
 80011c0:	4b10      	ldr	r3, [pc, #64]	@ (8001204 <HAL_ADC_MspInit+0x70>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001204 <HAL_ADC_MspInit+0x70>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	4a0c      	ldr	r2, [pc, #48]	@ (8001204 <HAL_ADC_MspInit+0x70>)
 80011d2:	f043 0304 	orr.w	r3, r3, #4
 80011d6:	6193      	str	r3, [r2, #24]
 80011d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001204 <HAL_ADC_MspInit+0x70>)
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	f003 0304 	and.w	r3, r3, #4
 80011e0:	60bb      	str	r3, [r7, #8]
 80011e2:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80011e4:	233f      	movs	r3, #63	@ 0x3f
 80011e6:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011e8:	2303      	movs	r3, #3
 80011ea:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ec:	f107 0310 	add.w	r3, r7, #16
 80011f0:	4619      	mov	r1, r3
 80011f2:	4805      	ldr	r0, [pc, #20]	@ (8001208 <HAL_ADC_MspInit+0x74>)
 80011f4:	f001 f856 	bl	80022a4 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80011f8:	bf00      	nop
 80011fa:	3720      	adds	r7, #32
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40012400 	.word	0x40012400
 8001204:	40021000 	.word	0x40021000
 8001208:	40010800 	.word	0x40010800

0800120c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 0310 	add.w	r3, r7, #16
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a16      	ldr	r2, [pc, #88]	@ (8001280 <HAL_I2C_MspInit+0x74>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d124      	bne.n	8001276 <HAL_I2C_MspInit+0x6a>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800122c:	4b15      	ldr	r3, [pc, #84]	@ (8001284 <HAL_I2C_MspInit+0x78>)
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	4a14      	ldr	r2, [pc, #80]	@ (8001284 <HAL_I2C_MspInit+0x78>)
 8001232:	f043 0308 	orr.w	r3, r3, #8
 8001236:	6193      	str	r3, [r2, #24]
 8001238:	4b12      	ldr	r3, [pc, #72]	@ (8001284 <HAL_I2C_MspInit+0x78>)
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	f003 0308 	and.w	r3, r3, #8
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001244:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001248:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800124a:	2312      	movs	r3, #18
 800124c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800124e:	2303      	movs	r3, #3
 8001250:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001252:	f107 0310 	add.w	r3, r7, #16
 8001256:	4619      	mov	r1, r3
 8001258:	480b      	ldr	r0, [pc, #44]	@ (8001288 <HAL_I2C_MspInit+0x7c>)
 800125a:	f001 f823 	bl	80022a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800125e:	4b09      	ldr	r3, [pc, #36]	@ (8001284 <HAL_I2C_MspInit+0x78>)
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	4a08      	ldr	r2, [pc, #32]	@ (8001284 <HAL_I2C_MspInit+0x78>)
 8001264:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001268:	61d3      	str	r3, [r2, #28]
 800126a:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <HAL_I2C_MspInit+0x78>)
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001276:	bf00      	nop
 8001278:	3720      	adds	r7, #32
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40005800 	.word	0x40005800
 8001284:	40021000 	.word	0x40021000
 8001288:	40010c00 	.word	0x40010c00

0800128c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a0b      	ldr	r2, [pc, #44]	@ (80012c8 <HAL_RTC_MspInit+0x3c>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d110      	bne.n	80012c0 <HAL_RTC_MspInit+0x34>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800129e:	f002 f9f3 	bl	8003688 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80012a2:	4b0a      	ldr	r3, [pc, #40]	@ (80012cc <HAL_RTC_MspInit+0x40>)
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	4a09      	ldr	r2, [pc, #36]	@ (80012cc <HAL_RTC_MspInit+0x40>)
 80012a8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80012ac:	61d3      	str	r3, [r2, #28]
 80012ae:	4b07      	ldr	r3, [pc, #28]	@ (80012cc <HAL_RTC_MspInit+0x40>)
 80012b0:	69db      	ldr	r3, [r3, #28]
 80012b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80012ba:	4b05      	ldr	r3, [pc, #20]	@ (80012d0 <HAL_RTC_MspInit+0x44>)
 80012bc:	2201      	movs	r2, #1
 80012be:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80012c0:	bf00      	nop
 80012c2:	3710      	adds	r7, #16
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40002800 	.word	0x40002800
 80012cc:	40021000 	.word	0x40021000
 80012d0:	4242043c 	.word	0x4242043c

080012d4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08a      	sub	sp, #40	@ 0x28
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a22      	ldr	r2, [pc, #136]	@ (8001378 <HAL_SPI_MspInit+0xa4>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d13d      	bne.n	8001370 <HAL_SPI_MspInit+0x9c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012f4:	4b21      	ldr	r3, [pc, #132]	@ (800137c <HAL_SPI_MspInit+0xa8>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	4a20      	ldr	r2, [pc, #128]	@ (800137c <HAL_SPI_MspInit+0xa8>)
 80012fa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012fe:	6193      	str	r3, [r2, #24]
 8001300:	4b1e      	ldr	r3, [pc, #120]	@ (800137c <HAL_SPI_MspInit+0xa8>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001308:	613b      	str	r3, [r7, #16]
 800130a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800130c:	4b1b      	ldr	r3, [pc, #108]	@ (800137c <HAL_SPI_MspInit+0xa8>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	4a1a      	ldr	r2, [pc, #104]	@ (800137c <HAL_SPI_MspInit+0xa8>)
 8001312:	f043 0308 	orr.w	r3, r3, #8
 8001316:	6193      	str	r3, [r2, #24]
 8001318:	4b18      	ldr	r3, [pc, #96]	@ (800137c <HAL_SPI_MspInit+0xa8>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	f003 0308 	and.w	r3, r3, #8
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001324:	2328      	movs	r3, #40	@ 0x28
 8001326:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001328:	2302      	movs	r3, #2
 800132a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800132c:	2303      	movs	r3, #3
 800132e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	4619      	mov	r1, r3
 8001336:	4812      	ldr	r0, [pc, #72]	@ (8001380 <HAL_SPI_MspInit+0xac>)
 8001338:	f000 ffb4 	bl	80022a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800133c:	2310      	movs	r3, #16
 800133e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001340:	2300      	movs	r3, #0
 8001342:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	4619      	mov	r1, r3
 800134e:	480c      	ldr	r0, [pc, #48]	@ (8001380 <HAL_SPI_MspInit+0xac>)
 8001350:	f000 ffa8 	bl	80022a4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8001354:	4b0b      	ldr	r3, [pc, #44]	@ (8001384 <HAL_SPI_MspInit+0xb0>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	627b      	str	r3, [r7, #36]	@ 0x24
 800135a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800135c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001360:	627b      	str	r3, [r7, #36]	@ 0x24
 8001362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	627b      	str	r3, [r7, #36]	@ 0x24
 800136a:	4a06      	ldr	r2, [pc, #24]	@ (8001384 <HAL_SPI_MspInit+0xb0>)
 800136c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800136e:	6053      	str	r3, [r2, #4]

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001370:	bf00      	nop
 8001372:	3728      	adds	r7, #40	@ 0x28
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40013000 	.word	0x40013000
 800137c:	40021000 	.word	0x40021000
 8001380:	40010c00 	.word	0x40010c00
 8001384:	40010000 	.word	0x40010000

08001388 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b088      	sub	sp, #32
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001390:	f107 0310 	add.w	r3, r7, #16
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a1c      	ldr	r2, [pc, #112]	@ (8001414 <HAL_UART_MspInit+0x8c>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d131      	bne.n	800140c <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001418 <HAL_UART_MspInit+0x90>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	4a1a      	ldr	r2, [pc, #104]	@ (8001418 <HAL_UART_MspInit+0x90>)
 80013ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013b2:	6193      	str	r3, [r2, #24]
 80013b4:	4b18      	ldr	r3, [pc, #96]	@ (8001418 <HAL_UART_MspInit+0x90>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c0:	4b15      	ldr	r3, [pc, #84]	@ (8001418 <HAL_UART_MspInit+0x90>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	4a14      	ldr	r2, [pc, #80]	@ (8001418 <HAL_UART_MspInit+0x90>)
 80013c6:	f043 0304 	orr.w	r3, r3, #4
 80013ca:	6193      	str	r3, [r2, #24]
 80013cc:	4b12      	ldr	r3, [pc, #72]	@ (8001418 <HAL_UART_MspInit+0x90>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	f003 0304 	and.w	r3, r3, #4
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	2302      	movs	r3, #2
 80013e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013e2:	2303      	movs	r3, #3
 80013e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e6:	f107 0310 	add.w	r3, r7, #16
 80013ea:	4619      	mov	r1, r3
 80013ec:	480b      	ldr	r0, [pc, #44]	@ (800141c <HAL_UART_MspInit+0x94>)
 80013ee:	f000 ff59 	bl	80022a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001400:	f107 0310 	add.w	r3, r7, #16
 8001404:	4619      	mov	r1, r3
 8001406:	4805      	ldr	r0, [pc, #20]	@ (800141c <HAL_UART_MspInit+0x94>)
 8001408:	f000 ff4c 	bl	80022a4 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800140c:	bf00      	nop
 800140e:	3720      	adds	r7, #32
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40013800 	.word	0x40013800
 8001418:	40021000 	.word	0x40021000
 800141c:	40010800 	.word	0x40010800

08001420 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001424:	bf00      	nop
 8001426:	e7fd      	b.n	8001424 <NMI_Handler+0x4>

08001428 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800142c:	bf00      	nop
 800142e:	e7fd      	b.n	800142c <HardFault_Handler+0x4>

08001430 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001434:	bf00      	nop
 8001436:	e7fd      	b.n	8001434 <MemManage_Handler+0x4>

08001438 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800143c:	bf00      	nop
 800143e:	e7fd      	b.n	800143c <BusFault_Handler+0x4>

08001440 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001444:	bf00      	nop
 8001446:	e7fd      	b.n	8001444 <UsageFault_Handler+0x4>

08001448 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr

08001454 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr

08001460 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr

0800146c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001470:	f000 f91a 	bl	80016a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001474:	bf00      	nop
 8001476:	bd80      	pop	{r7, pc}

08001478 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001480:	4a14      	ldr	r2, [pc, #80]	@ (80014d4 <_sbrk+0x5c>)
 8001482:	4b15      	ldr	r3, [pc, #84]	@ (80014d8 <_sbrk+0x60>)
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800148c:	4b13      	ldr	r3, [pc, #76]	@ (80014dc <_sbrk+0x64>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d102      	bne.n	800149a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001494:	4b11      	ldr	r3, [pc, #68]	@ (80014dc <_sbrk+0x64>)
 8001496:	4a12      	ldr	r2, [pc, #72]	@ (80014e0 <_sbrk+0x68>)
 8001498:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800149a:	4b10      	ldr	r3, [pc, #64]	@ (80014dc <_sbrk+0x64>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4413      	add	r3, r2
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d207      	bcs.n	80014b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014a8:	f003 fd78 	bl	8004f9c <__errno>
 80014ac:	4603      	mov	r3, r0
 80014ae:	220c      	movs	r2, #12
 80014b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014b2:	f04f 33ff 	mov.w	r3, #4294967295
 80014b6:	e009      	b.n	80014cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014b8:	4b08      	ldr	r3, [pc, #32]	@ (80014dc <_sbrk+0x64>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014be:	4b07      	ldr	r3, [pc, #28]	@ (80014dc <_sbrk+0x64>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4413      	add	r3, r2
 80014c6:	4a05      	ldr	r2, [pc, #20]	@ (80014dc <_sbrk+0x64>)
 80014c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ca:	68fb      	ldr	r3, [r7, #12]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3718      	adds	r7, #24
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20005000 	.word	0x20005000
 80014d8:	00000400 	.word	0x00000400
 80014dc:	20000210 	.word	0x20000210
 80014e0:	20000360 	.word	0x20000360

080014e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr

080014f0 <UART_TransmitString>:
  * @param huart: Pointer to the UART handle (e.g., &huart1)
  * @param str: Pointer to the string to transmit
  * @retval None
  */
void UART_TransmitString(UART_HandleTypeDef *huart, const char *str)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 80014fa:	6838      	ldr	r0, [r7, #0]
 80014fc:	f7fe fe30 	bl	8000160 <strlen>
 8001500:	4603      	mov	r3, r0
 8001502:	b29a      	uxth	r2, r3
 8001504:	f04f 33ff 	mov.w	r3, #4294967295
 8001508:	6839      	ldr	r1, [r7, #0]
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f003 fa9c 	bl	8004a48 <HAL_UART_Transmit>
}
 8001510:	bf00      	nop
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <UART_ReadDataPacket>:
  * @param data: Pointer to the data to be copied
  * @param size: Size of the data to be copied
  * @retval None
  */
void UART_ReadDataPacket(char *buffer, const char *data, size_t size)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
    if (buffer != NULL && data != NULL && size > 0)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d00f      	beq.n	800154a <UART_ReadDataPacket+0x32>
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d00c      	beq.n	800154a <UART_ReadDataPacket+0x32>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d009      	beq.n	800154a <UART_ReadDataPacket+0x32>
    {
        strncpy(buffer, data, size);
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	68b9      	ldr	r1, [r7, #8]
 800153a:	68f8      	ldr	r0, [r7, #12]
 800153c:	f003 fd1a 	bl	8004f74 <strncpy>
        buffer[size] = '\0'; // Null-terminate the string
 8001540:	68fa      	ldr	r2, [r7, #12]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4413      	add	r3, r2
 8001546:	2200      	movs	r2, #0
 8001548:	701a      	strb	r2, [r3, #0]
    }
}
 800154a:	bf00      	nop
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <UART_ReceiveString>:
  * @param buffer: Pointer to the buffer where the received string will be stored
  * @param size: Maximum size of the buffer
  * @retval None
  */
void UART_ReceiveString(UART_HandleTypeDef *huart, char *buffer, size_t size)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b084      	sub	sp, #16
 8001556:	af00      	add	r7, sp, #0
 8001558:	60f8      	str	r0, [r7, #12]
 800155a:	60b9      	str	r1, [r7, #8]
 800155c:	607a      	str	r2, [r7, #4]
    HAL_UART_Receive(huart, (uint8_t *)buffer, size - 1, HAL_MAX_DELAY); // Leave space for null terminator
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	b29b      	uxth	r3, r3
 8001562:	3b01      	subs	r3, #1
 8001564:	b29a      	uxth	r2, r3
 8001566:	f04f 33ff 	mov.w	r3, #4294967295
 800156a:	68b9      	ldr	r1, [r7, #8]
 800156c:	68f8      	ldr	r0, [r7, #12]
 800156e:	f003 faf6 	bl	8004b5e <HAL_UART_Receive>
    buffer[size - 1] = '\0'; // Ensure null termination
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	3b01      	subs	r3, #1
 8001576:	68ba      	ldr	r2, [r7, #8]
 8001578:	4413      	add	r3, r2
 800157a:	2200      	movs	r2, #0
 800157c:	701a      	strb	r2, [r3, #0]
}
 800157e:	bf00      	nop
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
	...

08001588 <UART_ProcessReceivedData>:
  * @brief Processes received data and updates the motor status.
  * @param buffer: Pointer to the buffer containing the received data
  * @retval None
  */
void UART_ProcessReceivedData(char *buffer)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
    if (strcmp(buffer, "@MT1#") == 0)
 8001590:	490c      	ldr	r1, [pc, #48]	@ (80015c4 <UART_ProcessReceivedData+0x3c>)
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7fe fdda 	bl	800014c <strcmp>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d103      	bne.n	80015a6 <UART_ProcessReceivedData+0x1e>
    {
        // Set motor status to ON
        motorStatus = 1; // Now this will work as motorStatus is declared extern
 800159e:	4b0a      	ldr	r3, [pc, #40]	@ (80015c8 <UART_ProcessReceivedData+0x40>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	701a      	strb	r2, [r3, #0]
    else if (strcmp(buffer, "@MT0#") == 0)
    {
        // Set motor status to OFF
        motorStatus = 0; // Now this will work as motorStatus is declared extern
    }
}
 80015a4:	e009      	b.n	80015ba <UART_ProcessReceivedData+0x32>
    else if (strcmp(buffer, "@MT0#") == 0)
 80015a6:	4909      	ldr	r1, [pc, #36]	@ (80015cc <UART_ProcessReceivedData+0x44>)
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f7fe fdcf 	bl	800014c <strcmp>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d102      	bne.n	80015ba <UART_ProcessReceivedData+0x32>
        motorStatus = 0; // Now this will work as motorStatus is declared extern
 80015b4:	4b04      	ldr	r3, [pc, #16]	@ (80015c8 <UART_ProcessReceivedData+0x40>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	701a      	strb	r2, [r3, #0]
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	08005914 	.word	0x08005914
 80015c8:	20000081 	.word	0x20000081
 80015cc:	0800591c 	.word	0x0800591c

080015d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015d0:	f7ff ff88 	bl	80014e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015d4:	480b      	ldr	r0, [pc, #44]	@ (8001604 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015d6:	490c      	ldr	r1, [pc, #48]	@ (8001608 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015d8:	4a0c      	ldr	r2, [pc, #48]	@ (800160c <LoopFillZerobss+0x16>)
  movs r3, #0
 80015da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015dc:	e002      	b.n	80015e4 <LoopCopyDataInit>

080015de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015e2:	3304      	adds	r3, #4

080015e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e8:	d3f9      	bcc.n	80015de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ea:	4a09      	ldr	r2, [pc, #36]	@ (8001610 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015ec:	4c09      	ldr	r4, [pc, #36]	@ (8001614 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015f0:	e001      	b.n	80015f6 <LoopFillZerobss>

080015f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015f4:	3204      	adds	r2, #4

080015f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f8:	d3fb      	bcc.n	80015f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015fa:	f003 fcd5 	bl	8004fa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015fe:	f7ff fabf 	bl	8000b80 <main>
  bx lr
 8001602:	4770      	bx	lr
  ldr r0, =_sdata
 8001604:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001608:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800160c:	080059c0 	.word	0x080059c0
  ldr r2, =_sbss
 8001610:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001614:	20000360 	.word	0x20000360

08001618 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001618:	e7fe      	b.n	8001618 <ADC1_2_IRQHandler>
	...

0800161c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001620:	4b08      	ldr	r3, [pc, #32]	@ (8001644 <HAL_Init+0x28>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a07      	ldr	r2, [pc, #28]	@ (8001644 <HAL_Init+0x28>)
 8001626:	f043 0310 	orr.w	r3, r3, #16
 800162a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800162c:	2003      	movs	r0, #3
 800162e:	f000 fe05 	bl	800223c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001632:	2000      	movs	r0, #0
 8001634:	f000 f808 	bl	8001648 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001638:	f7ff fd7a 	bl	8001130 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40022000 	.word	0x40022000

08001648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001650:	4b12      	ldr	r3, [pc, #72]	@ (800169c <HAL_InitTick+0x54>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4b12      	ldr	r3, [pc, #72]	@ (80016a0 <HAL_InitTick+0x58>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	4619      	mov	r1, r3
 800165a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800165e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001662:	fbb2 f3f3 	udiv	r3, r2, r3
 8001666:	4618      	mov	r0, r3
 8001668:	f000 fe0f 	bl	800228a <HAL_SYSTICK_Config>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e00e      	b.n	8001694 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2b0f      	cmp	r3, #15
 800167a:	d80a      	bhi.n	8001692 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800167c:	2200      	movs	r2, #0
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	f04f 30ff 	mov.w	r0, #4294967295
 8001684:	f000 fde5 	bl	8002252 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001688:	4a06      	ldr	r2, [pc, #24]	@ (80016a4 <HAL_InitTick+0x5c>)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800168e:	2300      	movs	r3, #0
 8001690:	e000      	b.n	8001694 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
}
 8001694:	4618      	mov	r0, r3
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000000 	.word	0x20000000
 80016a0:	20000008 	.word	0x20000008
 80016a4:	20000004 	.word	0x20000004

080016a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016ac:	4b05      	ldr	r3, [pc, #20]	@ (80016c4 <HAL_IncTick+0x1c>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	461a      	mov	r2, r3
 80016b2:	4b05      	ldr	r3, [pc, #20]	@ (80016c8 <HAL_IncTick+0x20>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4413      	add	r3, r2
 80016b8:	4a03      	ldr	r2, [pc, #12]	@ (80016c8 <HAL_IncTick+0x20>)
 80016ba:	6013      	str	r3, [r2, #0]
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr
 80016c4:	20000008 	.word	0x20000008
 80016c8:	20000214 	.word	0x20000214

080016cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  return uwTick;
 80016d0:	4b02      	ldr	r3, [pc, #8]	@ (80016dc <HAL_GetTick+0x10>)
 80016d2:	681b      	ldr	r3, [r3, #0]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr
 80016dc:	20000214 	.word	0x20000214

080016e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016e8:	f7ff fff0 	bl	80016cc <HAL_GetTick>
 80016ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f8:	d005      	beq.n	8001706 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001724 <HAL_Delay+0x44>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	461a      	mov	r2, r3
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	4413      	add	r3, r2
 8001704:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001706:	bf00      	nop
 8001708:	f7ff ffe0 	bl	80016cc <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	429a      	cmp	r2, r3
 8001716:	d8f7      	bhi.n	8001708 <HAL_Delay+0x28>
  {
  }
}
 8001718:	bf00      	nop
 800171a:	bf00      	nop
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20000008 	.word	0x20000008

08001728 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001730:	2300      	movs	r3, #0
 8001732:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001734:	2300      	movs	r3, #0
 8001736:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001738:	2300      	movs	r3, #0
 800173a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800173c:	2300      	movs	r3, #0
 800173e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d101      	bne.n	800174a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e0be      	b.n	80018c8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001754:	2b00      	cmp	r3, #0
 8001756:	d109      	bne.n	800176c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff fd14 	bl	8001194 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f000 fbc5 	bl	8001efc <ADC_ConversionStop_Disable>
 8001772:	4603      	mov	r3, r0
 8001774:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800177a:	f003 0310 	and.w	r3, r3, #16
 800177e:	2b00      	cmp	r3, #0
 8001780:	f040 8099 	bne.w	80018b6 <HAL_ADC_Init+0x18e>
 8001784:	7dfb      	ldrb	r3, [r7, #23]
 8001786:	2b00      	cmp	r3, #0
 8001788:	f040 8095 	bne.w	80018b6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001790:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001794:	f023 0302 	bic.w	r3, r3, #2
 8001798:	f043 0202 	orr.w	r2, r3, #2
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017a8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	7b1b      	ldrb	r3, [r3, #12]
 80017ae:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80017b0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017b2:	68ba      	ldr	r2, [r7, #8]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80017c0:	d003      	beq.n	80017ca <HAL_ADC_Init+0xa2>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d102      	bne.n	80017d0 <HAL_ADC_Init+0xa8>
 80017ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017ce:	e000      	b.n	80017d2 <HAL_ADC_Init+0xaa>
 80017d0:	2300      	movs	r3, #0
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	7d1b      	ldrb	r3, [r3, #20]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d119      	bne.n	8001814 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	7b1b      	ldrb	r3, [r3, #12]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d109      	bne.n	80017fc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	3b01      	subs	r3, #1
 80017ee:	035a      	lsls	r2, r3, #13
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80017f8:	613b      	str	r3, [r7, #16]
 80017fa:	e00b      	b.n	8001814 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001800:	f043 0220 	orr.w	r2, r3, #32
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800180c:	f043 0201 	orr.w	r2, r3, #1
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	430a      	orrs	r2, r1
 8001826:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	689a      	ldr	r2, [r3, #8]
 800182e:	4b28      	ldr	r3, [pc, #160]	@ (80018d0 <HAL_ADC_Init+0x1a8>)
 8001830:	4013      	ands	r3, r2
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	6812      	ldr	r2, [r2, #0]
 8001836:	68b9      	ldr	r1, [r7, #8]
 8001838:	430b      	orrs	r3, r1
 800183a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001844:	d003      	beq.n	800184e <HAL_ADC_Init+0x126>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d104      	bne.n	8001858 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	3b01      	subs	r3, #1
 8001854:	051b      	lsls	r3, r3, #20
 8001856:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800185e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	430a      	orrs	r2, r1
 800186a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	689a      	ldr	r2, [r3, #8]
 8001872:	4b18      	ldr	r3, [pc, #96]	@ (80018d4 <HAL_ADC_Init+0x1ac>)
 8001874:	4013      	ands	r3, r2
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	429a      	cmp	r2, r3
 800187a:	d10b      	bne.n	8001894 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001886:	f023 0303 	bic.w	r3, r3, #3
 800188a:	f043 0201 	orr.w	r2, r3, #1
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001892:	e018      	b.n	80018c6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001898:	f023 0312 	bic.w	r3, r3, #18
 800189c:	f043 0210 	orr.w	r2, r3, #16
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018a8:	f043 0201 	orr.w	r2, r3, #1
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018b4:	e007      	b.n	80018c6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ba:	f043 0210 	orr.w	r2, r3, #16
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80018c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3718      	adds	r7, #24
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	ffe1f7fd 	.word	0xffe1f7fd
 80018d4:	ff1f0efe 	.word	0xff1f0efe

080018d8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018e0:	2300      	movs	r3, #0
 80018e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d101      	bne.n	80018f2 <HAL_ADC_Start+0x1a>
 80018ee:	2302      	movs	r3, #2
 80018f0:	e098      	b.n	8001a24 <HAL_ADC_Start+0x14c>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2201      	movs	r2, #1
 80018f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f000 faa4 	bl	8001e48 <ADC_Enable>
 8001900:	4603      	mov	r3, r0
 8001902:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001904:	7bfb      	ldrb	r3, [r7, #15]
 8001906:	2b00      	cmp	r3, #0
 8001908:	f040 8087 	bne.w	8001a1a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001910:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001914:	f023 0301 	bic.w	r3, r3, #1
 8001918:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a41      	ldr	r2, [pc, #260]	@ (8001a2c <HAL_ADC_Start+0x154>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d105      	bne.n	8001936 <HAL_ADC_Start+0x5e>
 800192a:	4b41      	ldr	r3, [pc, #260]	@ (8001a30 <HAL_ADC_Start+0x158>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d115      	bne.n	8001962 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800193a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800194c:	2b00      	cmp	r3, #0
 800194e:	d026      	beq.n	800199e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001954:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001958:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001960:	e01d      	b.n	800199e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001966:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a2f      	ldr	r2, [pc, #188]	@ (8001a30 <HAL_ADC_Start+0x158>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d004      	beq.n	8001982 <HAL_ADC_Start+0xaa>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a2b      	ldr	r2, [pc, #172]	@ (8001a2c <HAL_ADC_Start+0x154>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d10d      	bne.n	800199e <HAL_ADC_Start+0xc6>
 8001982:	4b2b      	ldr	r3, [pc, #172]	@ (8001a30 <HAL_ADC_Start+0x158>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800198a:	2b00      	cmp	r3, #0
 800198c:	d007      	beq.n	800199e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001992:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001996:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d006      	beq.n	80019b8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ae:	f023 0206 	bic.w	r2, r3, #6
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80019b6:	e002      	b.n	80019be <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f06f 0202 	mvn.w	r2, #2
 80019ce:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80019da:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80019de:	d113      	bne.n	8001a08 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80019e4:	4a11      	ldr	r2, [pc, #68]	@ (8001a2c <HAL_ADC_Start+0x154>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d105      	bne.n	80019f6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80019ea:	4b11      	ldr	r3, [pc, #68]	@ (8001a30 <HAL_ADC_Start+0x158>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d108      	bne.n	8001a08 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001a04:	609a      	str	r2, [r3, #8]
 8001a06:	e00c      	b.n	8001a22 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	689a      	ldr	r2, [r3, #8]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	e003      	b.n	8001a22 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40012800 	.word	0x40012800
 8001a30:	40012400 	.word	0x40012400

08001a34 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001a34:	b590      	push	{r4, r7, lr}
 8001a36:	b087      	sub	sp, #28
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001a42:	2300      	movs	r3, #0
 8001a44:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001a46:	2300      	movs	r3, #0
 8001a48:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001a4a:	f7ff fe3f 	bl	80016cc <HAL_GetTick>
 8001a4e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d00b      	beq.n	8001a76 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a62:	f043 0220 	orr.w	r2, r3, #32
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e0d3      	b.n	8001c1e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d131      	bne.n	8001ae8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a8a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d12a      	bne.n	8001ae8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001a92:	e021      	b.n	8001ad8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a9a:	d01d      	beq.n	8001ad8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d007      	beq.n	8001ab2 <HAL_ADC_PollForConversion+0x7e>
 8001aa2:	f7ff fe13 	bl	80016cc <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d212      	bcs.n	8001ad8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d10b      	bne.n	8001ad8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ac4:	f043 0204 	orr.w	r2, r3, #4
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e0a2      	b.n	8001c1e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d0d6      	beq.n	8001a94 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001ae6:	e070      	b.n	8001bca <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001ae8:	4b4f      	ldr	r3, [pc, #316]	@ (8001c28 <HAL_ADC_PollForConversion+0x1f4>)
 8001aea:	681c      	ldr	r4, [r3, #0]
 8001aec:	2002      	movs	r0, #2
 8001aee:	f002 fa9d 	bl	800402c <HAL_RCCEx_GetPeriphCLKFreq>
 8001af2:	4603      	mov	r3, r0
 8001af4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6919      	ldr	r1, [r3, #16]
 8001afe:	4b4b      	ldr	r3, [pc, #300]	@ (8001c2c <HAL_ADC_PollForConversion+0x1f8>)
 8001b00:	400b      	ands	r3, r1
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d118      	bne.n	8001b38 <HAL_ADC_PollForConversion+0x104>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68d9      	ldr	r1, [r3, #12]
 8001b0c:	4b48      	ldr	r3, [pc, #288]	@ (8001c30 <HAL_ADC_PollForConversion+0x1fc>)
 8001b0e:	400b      	ands	r3, r1
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d111      	bne.n	8001b38 <HAL_ADC_PollForConversion+0x104>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6919      	ldr	r1, [r3, #16]
 8001b1a:	4b46      	ldr	r3, [pc, #280]	@ (8001c34 <HAL_ADC_PollForConversion+0x200>)
 8001b1c:	400b      	ands	r3, r1
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d108      	bne.n	8001b34 <HAL_ADC_PollForConversion+0x100>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68d9      	ldr	r1, [r3, #12]
 8001b28:	4b43      	ldr	r3, [pc, #268]	@ (8001c38 <HAL_ADC_PollForConversion+0x204>)
 8001b2a:	400b      	ands	r3, r1
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d101      	bne.n	8001b34 <HAL_ADC_PollForConversion+0x100>
 8001b30:	2314      	movs	r3, #20
 8001b32:	e020      	b.n	8001b76 <HAL_ADC_PollForConversion+0x142>
 8001b34:	2329      	movs	r3, #41	@ 0x29
 8001b36:	e01e      	b.n	8001b76 <HAL_ADC_PollForConversion+0x142>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6919      	ldr	r1, [r3, #16]
 8001b3e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c34 <HAL_ADC_PollForConversion+0x200>)
 8001b40:	400b      	ands	r3, r1
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d106      	bne.n	8001b54 <HAL_ADC_PollForConversion+0x120>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	68d9      	ldr	r1, [r3, #12]
 8001b4c:	4b3a      	ldr	r3, [pc, #232]	@ (8001c38 <HAL_ADC_PollForConversion+0x204>)
 8001b4e:	400b      	ands	r3, r1
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d00d      	beq.n	8001b70 <HAL_ADC_PollForConversion+0x13c>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6919      	ldr	r1, [r3, #16]
 8001b5a:	4b38      	ldr	r3, [pc, #224]	@ (8001c3c <HAL_ADC_PollForConversion+0x208>)
 8001b5c:	400b      	ands	r3, r1
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d108      	bne.n	8001b74 <HAL_ADC_PollForConversion+0x140>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	68d9      	ldr	r1, [r3, #12]
 8001b68:	4b34      	ldr	r3, [pc, #208]	@ (8001c3c <HAL_ADC_PollForConversion+0x208>)
 8001b6a:	400b      	ands	r3, r1
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d101      	bne.n	8001b74 <HAL_ADC_PollForConversion+0x140>
 8001b70:	2354      	movs	r3, #84	@ 0x54
 8001b72:	e000      	b.n	8001b76 <HAL_ADC_PollForConversion+0x142>
 8001b74:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001b76:	fb02 f303 	mul.w	r3, r2, r3
 8001b7a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001b7c:	e021      	b.n	8001bc2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b84:	d01a      	beq.n	8001bbc <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d007      	beq.n	8001b9c <HAL_ADC_PollForConversion+0x168>
 8001b8c:	f7ff fd9e 	bl	80016cc <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d20f      	bcs.n	8001bbc <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d90b      	bls.n	8001bbc <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ba8:	f043 0204 	orr.w	r2, r3, #4
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e030      	b.n	8001c1e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d8d9      	bhi.n	8001b7e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f06f 0212 	mvn.w	r2, #18
 8001bd2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bd8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001bea:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001bee:	d115      	bne.n	8001c1c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d111      	bne.n	8001c1c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bfc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d105      	bne.n	8001c1c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c14:	f043 0201 	orr.w	r2, r3, #1
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	371c      	adds	r7, #28
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd90      	pop	{r4, r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000000 	.word	0x20000000
 8001c2c:	24924924 	.word	0x24924924
 8001c30:	00924924 	.word	0x00924924
 8001c34:	12492492 	.word	0x12492492
 8001c38:	00492492 	.word	0x00492492
 8001c3c:	00249249 	.word	0x00249249

08001c40 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr

08001c58 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c62:	2300      	movs	r3, #0
 8001c64:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d101      	bne.n	8001c78 <HAL_ADC_ConfigChannel+0x20>
 8001c74:	2302      	movs	r3, #2
 8001c76:	e0dc      	b.n	8001e32 <HAL_ADC_ConfigChannel+0x1da>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	2b06      	cmp	r3, #6
 8001c86:	d81c      	bhi.n	8001cc2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685a      	ldr	r2, [r3, #4]
 8001c92:	4613      	mov	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	4413      	add	r3, r2
 8001c98:	3b05      	subs	r3, #5
 8001c9a:	221f      	movs	r2, #31
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	4019      	ands	r1, r3
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	6818      	ldr	r0, [r3, #0]
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685a      	ldr	r2, [r3, #4]
 8001cac:	4613      	mov	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	4413      	add	r3, r2
 8001cb2:	3b05      	subs	r3, #5
 8001cb4:	fa00 f203 	lsl.w	r2, r0, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	635a      	str	r2, [r3, #52]	@ 0x34
 8001cc0:	e03c      	b.n	8001d3c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b0c      	cmp	r3, #12
 8001cc8:	d81c      	bhi.n	8001d04 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685a      	ldr	r2, [r3, #4]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	4413      	add	r3, r2
 8001cda:	3b23      	subs	r3, #35	@ 0x23
 8001cdc:	221f      	movs	r2, #31
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	4019      	ands	r1, r3
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	6818      	ldr	r0, [r3, #0]
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4413      	add	r3, r2
 8001cf4:	3b23      	subs	r3, #35	@ 0x23
 8001cf6:	fa00 f203 	lsl.w	r2, r0, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d02:	e01b      	b.n	8001d3c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685a      	ldr	r2, [r3, #4]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4413      	add	r3, r2
 8001d14:	3b41      	subs	r3, #65	@ 0x41
 8001d16:	221f      	movs	r2, #31
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	4019      	ands	r1, r3
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	6818      	ldr	r0, [r3, #0]
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685a      	ldr	r2, [r3, #4]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4413      	add	r3, r2
 8001d2e:	3b41      	subs	r3, #65	@ 0x41
 8001d30:	fa00 f203 	lsl.w	r2, r0, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2b09      	cmp	r3, #9
 8001d42:	d91c      	bls.n	8001d7e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	68d9      	ldr	r1, [r3, #12]
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	4413      	add	r3, r2
 8001d54:	3b1e      	subs	r3, #30
 8001d56:	2207      	movs	r2, #7
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	4019      	ands	r1, r3
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	6898      	ldr	r0, [r3, #8]
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	4413      	add	r3, r2
 8001d6e:	3b1e      	subs	r3, #30
 8001d70:	fa00 f203 	lsl.w	r2, r0, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	60da      	str	r2, [r3, #12]
 8001d7c:	e019      	b.n	8001db2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6919      	ldr	r1, [r3, #16]
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	4413      	add	r3, r2
 8001d8e:	2207      	movs	r2, #7
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	43db      	mvns	r3, r3
 8001d96:	4019      	ands	r1, r3
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	6898      	ldr	r0, [r3, #8]
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	4613      	mov	r3, r2
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	4413      	add	r3, r2
 8001da6:	fa00 f203 	lsl.w	r2, r0, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	430a      	orrs	r2, r1
 8001db0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2b10      	cmp	r3, #16
 8001db8:	d003      	beq.n	8001dc2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001dbe:	2b11      	cmp	r3, #17
 8001dc0:	d132      	bne.n	8001e28 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a1d      	ldr	r2, [pc, #116]	@ (8001e3c <HAL_ADC_ConfigChannel+0x1e4>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d125      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d126      	bne.n	8001e28 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001de8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2b10      	cmp	r3, #16
 8001df0:	d11a      	bne.n	8001e28 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001df2:	4b13      	ldr	r3, [pc, #76]	@ (8001e40 <HAL_ADC_ConfigChannel+0x1e8>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a13      	ldr	r2, [pc, #76]	@ (8001e44 <HAL_ADC_ConfigChannel+0x1ec>)
 8001df8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfc:	0c9a      	lsrs	r2, r3, #18
 8001dfe:	4613      	mov	r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	4413      	add	r3, r2
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e08:	e002      	b.n	8001e10 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f9      	bne.n	8001e0a <HAL_ADC_ConfigChannel+0x1b2>
 8001e16:	e007      	b.n	8001e28 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e1c:	f043 0220 	orr.w	r2, r3, #32
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr
 8001e3c:	40012400 	.word	0x40012400
 8001e40:	20000000 	.word	0x20000000
 8001e44:	431bde83 	.word	0x431bde83

08001e48 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e50:	2300      	movs	r3, #0
 8001e52:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d040      	beq.n	8001ee8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f042 0201 	orr.w	r2, r2, #1
 8001e74:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e76:	4b1f      	ldr	r3, [pc, #124]	@ (8001ef4 <ADC_Enable+0xac>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a1f      	ldr	r2, [pc, #124]	@ (8001ef8 <ADC_Enable+0xb0>)
 8001e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e80:	0c9b      	lsrs	r3, r3, #18
 8001e82:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e84:	e002      	b.n	8001e8c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1f9      	bne.n	8001e86 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e92:	f7ff fc1b 	bl	80016cc <HAL_GetTick>
 8001e96:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e98:	e01f      	b.n	8001eda <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e9a:	f7ff fc17 	bl	80016cc <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d918      	bls.n	8001eda <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d011      	beq.n	8001eda <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eba:	f043 0210 	orr.w	r2, r3, #16
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec6:	f043 0201 	orr.w	r2, r3, #1
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e007      	b.n	8001eea <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d1d8      	bne.n	8001e9a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	20000000 	.word	0x20000000
 8001ef8:	431bde83 	.word	0x431bde83

08001efc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f04:	2300      	movs	r3, #0
 8001f06:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d12e      	bne.n	8001f74 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 0201 	bic.w	r2, r2, #1
 8001f24:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f26:	f7ff fbd1 	bl	80016cc <HAL_GetTick>
 8001f2a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f2c:	e01b      	b.n	8001f66 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f2e:	f7ff fbcd 	bl	80016cc <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d914      	bls.n	8001f66 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d10d      	bne.n	8001f66 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f4e:	f043 0210 	orr.w	r2, r3, #16
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f5a:	f043 0201 	orr.w	r2, r3, #1
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e007      	b.n	8001f76 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d0dc      	beq.n	8001f2e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
	...

08001f80 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001f80:	b590      	push	{r4, r7, lr}
 8001f82:	b087      	sub	sp, #28
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d101      	bne.n	8001f9e <HAL_ADCEx_Calibration_Start+0x1e>
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	e097      	b.n	80020ce <HAL_ADCEx_Calibration_Start+0x14e>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7ff ffa8 	bl	8001efc <ADC_ConversionStop_Disable>
 8001fac:	4603      	mov	r3, r0
 8001fae:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f7ff ff49 	bl	8001e48 <ADC_Enable>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8001fba:	7dfb      	ldrb	r3, [r7, #23]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f040 8081 	bne.w	80020c4 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fc6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001fca:	f023 0302 	bic.w	r3, r3, #2
 8001fce:	f043 0202 	orr.w	r2, r3, #2
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001fd6:	4b40      	ldr	r3, [pc, #256]	@ (80020d8 <HAL_ADCEx_Calibration_Start+0x158>)
 8001fd8:	681c      	ldr	r4, [r3, #0]
 8001fda:	2002      	movs	r0, #2
 8001fdc:	f002 f826 	bl	800402c <HAL_RCCEx_GetPeriphCLKFreq>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001fe6:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001fe8:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001fea:	e002      	b.n	8001ff2 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1f9      	bne.n	8001fec <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	689a      	ldr	r2, [r3, #8]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f042 0208 	orr.w	r2, r2, #8
 8002006:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002008:	f7ff fb60 	bl	80016cc <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800200e:	e01b      	b.n	8002048 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002010:	f7ff fb5c 	bl	80016cc <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b0a      	cmp	r3, #10
 800201c:	d914      	bls.n	8002048 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f003 0308 	and.w	r3, r3, #8
 8002028:	2b00      	cmp	r3, #0
 800202a:	d00d      	beq.n	8002048 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002030:	f023 0312 	bic.w	r3, r3, #18
 8002034:	f043 0210 	orr.w	r2, r3, #16
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e042      	b.n	80020ce <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 0308 	and.w	r3, r3, #8
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1dc      	bne.n	8002010 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f042 0204 	orr.w	r2, r2, #4
 8002064:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002066:	f7ff fb31 	bl	80016cc <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800206c:	e01b      	b.n	80020a6 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800206e:	f7ff fb2d 	bl	80016cc <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b0a      	cmp	r3, #10
 800207a:	d914      	bls.n	80020a6 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 0304 	and.w	r3, r3, #4
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00d      	beq.n	80020a6 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800208e:	f023 0312 	bic.w	r3, r3, #18
 8002092:	f043 0210 	orr.w	r2, r3, #16
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e013      	b.n	80020ce <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1dc      	bne.n	800206e <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b8:	f023 0303 	bic.w	r3, r3, #3
 80020bc:	f043 0201 	orr.w	r2, r3, #1
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80020cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	371c      	adds	r7, #28
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd90      	pop	{r4, r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000000 	.word	0x20000000

080020dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002120 <__NVIC_SetPriorityGrouping+0x44>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020f2:	68ba      	ldr	r2, [r7, #8]
 80020f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020f8:	4013      	ands	r3, r2
 80020fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002104:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002108:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800210c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800210e:	4a04      	ldr	r2, [pc, #16]	@ (8002120 <__NVIC_SetPriorityGrouping+0x44>)
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	60d3      	str	r3, [r2, #12]
}
 8002114:	bf00      	nop
 8002116:	3714      	adds	r7, #20
 8002118:	46bd      	mov	sp, r7
 800211a:	bc80      	pop	{r7}
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	e000ed00 	.word	0xe000ed00

08002124 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002128:	4b04      	ldr	r3, [pc, #16]	@ (800213c <__NVIC_GetPriorityGrouping+0x18>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	0a1b      	lsrs	r3, r3, #8
 800212e:	f003 0307 	and.w	r3, r3, #7
}
 8002132:	4618      	mov	r0, r3
 8002134:	46bd      	mov	sp, r7
 8002136:	bc80      	pop	{r7}
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	e000ed00 	.word	0xe000ed00

08002140 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	4603      	mov	r3, r0
 8002148:	6039      	str	r1, [r7, #0]
 800214a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800214c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002150:	2b00      	cmp	r3, #0
 8002152:	db0a      	blt.n	800216a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	b2da      	uxtb	r2, r3
 8002158:	490c      	ldr	r1, [pc, #48]	@ (800218c <__NVIC_SetPriority+0x4c>)
 800215a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215e:	0112      	lsls	r2, r2, #4
 8002160:	b2d2      	uxtb	r2, r2
 8002162:	440b      	add	r3, r1
 8002164:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002168:	e00a      	b.n	8002180 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	b2da      	uxtb	r2, r3
 800216e:	4908      	ldr	r1, [pc, #32]	@ (8002190 <__NVIC_SetPriority+0x50>)
 8002170:	79fb      	ldrb	r3, [r7, #7]
 8002172:	f003 030f 	and.w	r3, r3, #15
 8002176:	3b04      	subs	r3, #4
 8002178:	0112      	lsls	r2, r2, #4
 800217a:	b2d2      	uxtb	r2, r2
 800217c:	440b      	add	r3, r1
 800217e:	761a      	strb	r2, [r3, #24]
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	bc80      	pop	{r7}
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	e000e100 	.word	0xe000e100
 8002190:	e000ed00 	.word	0xe000ed00

08002194 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002194:	b480      	push	{r7}
 8002196:	b089      	sub	sp, #36	@ 0x24
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	f1c3 0307 	rsb	r3, r3, #7
 80021ae:	2b04      	cmp	r3, #4
 80021b0:	bf28      	it	cs
 80021b2:	2304      	movcs	r3, #4
 80021b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	3304      	adds	r3, #4
 80021ba:	2b06      	cmp	r3, #6
 80021bc:	d902      	bls.n	80021c4 <NVIC_EncodePriority+0x30>
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	3b03      	subs	r3, #3
 80021c2:	e000      	b.n	80021c6 <NVIC_EncodePriority+0x32>
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c8:	f04f 32ff 	mov.w	r2, #4294967295
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	43da      	mvns	r2, r3
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	401a      	ands	r2, r3
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021dc:	f04f 31ff 	mov.w	r1, #4294967295
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	fa01 f303 	lsl.w	r3, r1, r3
 80021e6:	43d9      	mvns	r1, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021ec:	4313      	orrs	r3, r2
         );
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3724      	adds	r7, #36	@ 0x24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bc80      	pop	{r7}
 80021f6:	4770      	bx	lr

080021f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3b01      	subs	r3, #1
 8002204:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002208:	d301      	bcc.n	800220e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800220a:	2301      	movs	r3, #1
 800220c:	e00f      	b.n	800222e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800220e:	4a0a      	ldr	r2, [pc, #40]	@ (8002238 <SysTick_Config+0x40>)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3b01      	subs	r3, #1
 8002214:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002216:	210f      	movs	r1, #15
 8002218:	f04f 30ff 	mov.w	r0, #4294967295
 800221c:	f7ff ff90 	bl	8002140 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002220:	4b05      	ldr	r3, [pc, #20]	@ (8002238 <SysTick_Config+0x40>)
 8002222:	2200      	movs	r2, #0
 8002224:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002226:	4b04      	ldr	r3, [pc, #16]	@ (8002238 <SysTick_Config+0x40>)
 8002228:	2207      	movs	r2, #7
 800222a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	e000e010 	.word	0xe000e010

0800223c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f7ff ff49 	bl	80020dc <__NVIC_SetPriorityGrouping>
}
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002252:	b580      	push	{r7, lr}
 8002254:	b086      	sub	sp, #24
 8002256:	af00      	add	r7, sp, #0
 8002258:	4603      	mov	r3, r0
 800225a:	60b9      	str	r1, [r7, #8]
 800225c:	607a      	str	r2, [r7, #4]
 800225e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002260:	2300      	movs	r3, #0
 8002262:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002264:	f7ff ff5e 	bl	8002124 <__NVIC_GetPriorityGrouping>
 8002268:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	68b9      	ldr	r1, [r7, #8]
 800226e:	6978      	ldr	r0, [r7, #20]
 8002270:	f7ff ff90 	bl	8002194 <NVIC_EncodePriority>
 8002274:	4602      	mov	r2, r0
 8002276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800227a:	4611      	mov	r1, r2
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff ff5f 	bl	8002140 <__NVIC_SetPriority>
}
 8002282:	bf00      	nop
 8002284:	3718      	adds	r7, #24
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b082      	sub	sp, #8
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7ff ffb0 	bl	80021f8 <SysTick_Config>
 8002298:	4603      	mov	r3, r0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
	...

080022a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b08b      	sub	sp, #44	@ 0x2c
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022ae:	2300      	movs	r3, #0
 80022b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022b2:	2300      	movs	r3, #0
 80022b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022b6:	e169      	b.n	800258c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022b8:	2201      	movs	r2, #1
 80022ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	69fa      	ldr	r2, [r7, #28]
 80022c8:	4013      	ands	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	f040 8158 	bne.w	8002586 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	4a9a      	ldr	r2, [pc, #616]	@ (8002544 <HAL_GPIO_Init+0x2a0>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d05e      	beq.n	800239e <HAL_GPIO_Init+0xfa>
 80022e0:	4a98      	ldr	r2, [pc, #608]	@ (8002544 <HAL_GPIO_Init+0x2a0>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d875      	bhi.n	80023d2 <HAL_GPIO_Init+0x12e>
 80022e6:	4a98      	ldr	r2, [pc, #608]	@ (8002548 <HAL_GPIO_Init+0x2a4>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d058      	beq.n	800239e <HAL_GPIO_Init+0xfa>
 80022ec:	4a96      	ldr	r2, [pc, #600]	@ (8002548 <HAL_GPIO_Init+0x2a4>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d86f      	bhi.n	80023d2 <HAL_GPIO_Init+0x12e>
 80022f2:	4a96      	ldr	r2, [pc, #600]	@ (800254c <HAL_GPIO_Init+0x2a8>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d052      	beq.n	800239e <HAL_GPIO_Init+0xfa>
 80022f8:	4a94      	ldr	r2, [pc, #592]	@ (800254c <HAL_GPIO_Init+0x2a8>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d869      	bhi.n	80023d2 <HAL_GPIO_Init+0x12e>
 80022fe:	4a94      	ldr	r2, [pc, #592]	@ (8002550 <HAL_GPIO_Init+0x2ac>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d04c      	beq.n	800239e <HAL_GPIO_Init+0xfa>
 8002304:	4a92      	ldr	r2, [pc, #584]	@ (8002550 <HAL_GPIO_Init+0x2ac>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d863      	bhi.n	80023d2 <HAL_GPIO_Init+0x12e>
 800230a:	4a92      	ldr	r2, [pc, #584]	@ (8002554 <HAL_GPIO_Init+0x2b0>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d046      	beq.n	800239e <HAL_GPIO_Init+0xfa>
 8002310:	4a90      	ldr	r2, [pc, #576]	@ (8002554 <HAL_GPIO_Init+0x2b0>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d85d      	bhi.n	80023d2 <HAL_GPIO_Init+0x12e>
 8002316:	2b12      	cmp	r3, #18
 8002318:	d82a      	bhi.n	8002370 <HAL_GPIO_Init+0xcc>
 800231a:	2b12      	cmp	r3, #18
 800231c:	d859      	bhi.n	80023d2 <HAL_GPIO_Init+0x12e>
 800231e:	a201      	add	r2, pc, #4	@ (adr r2, 8002324 <HAL_GPIO_Init+0x80>)
 8002320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002324:	0800239f 	.word	0x0800239f
 8002328:	08002379 	.word	0x08002379
 800232c:	0800238b 	.word	0x0800238b
 8002330:	080023cd 	.word	0x080023cd
 8002334:	080023d3 	.word	0x080023d3
 8002338:	080023d3 	.word	0x080023d3
 800233c:	080023d3 	.word	0x080023d3
 8002340:	080023d3 	.word	0x080023d3
 8002344:	080023d3 	.word	0x080023d3
 8002348:	080023d3 	.word	0x080023d3
 800234c:	080023d3 	.word	0x080023d3
 8002350:	080023d3 	.word	0x080023d3
 8002354:	080023d3 	.word	0x080023d3
 8002358:	080023d3 	.word	0x080023d3
 800235c:	080023d3 	.word	0x080023d3
 8002360:	080023d3 	.word	0x080023d3
 8002364:	080023d3 	.word	0x080023d3
 8002368:	08002381 	.word	0x08002381
 800236c:	08002395 	.word	0x08002395
 8002370:	4a79      	ldr	r2, [pc, #484]	@ (8002558 <HAL_GPIO_Init+0x2b4>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d013      	beq.n	800239e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002376:	e02c      	b.n	80023d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	623b      	str	r3, [r7, #32]
          break;
 800237e:	e029      	b.n	80023d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	3304      	adds	r3, #4
 8002386:	623b      	str	r3, [r7, #32]
          break;
 8002388:	e024      	b.n	80023d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	3308      	adds	r3, #8
 8002390:	623b      	str	r3, [r7, #32]
          break;
 8002392:	e01f      	b.n	80023d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	330c      	adds	r3, #12
 800239a:	623b      	str	r3, [r7, #32]
          break;
 800239c:	e01a      	b.n	80023d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d102      	bne.n	80023ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023a6:	2304      	movs	r3, #4
 80023a8:	623b      	str	r3, [r7, #32]
          break;
 80023aa:	e013      	b.n	80023d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d105      	bne.n	80023c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023b4:	2308      	movs	r3, #8
 80023b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	69fa      	ldr	r2, [r7, #28]
 80023bc:	611a      	str	r2, [r3, #16]
          break;
 80023be:	e009      	b.n	80023d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023c0:	2308      	movs	r3, #8
 80023c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	69fa      	ldr	r2, [r7, #28]
 80023c8:	615a      	str	r2, [r3, #20]
          break;
 80023ca:	e003      	b.n	80023d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023cc:	2300      	movs	r3, #0
 80023ce:	623b      	str	r3, [r7, #32]
          break;
 80023d0:	e000      	b.n	80023d4 <HAL_GPIO_Init+0x130>
          break;
 80023d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	2bff      	cmp	r3, #255	@ 0xff
 80023d8:	d801      	bhi.n	80023de <HAL_GPIO_Init+0x13a>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	e001      	b.n	80023e2 <HAL_GPIO_Init+0x13e>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	3304      	adds	r3, #4
 80023e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	2bff      	cmp	r3, #255	@ 0xff
 80023e8:	d802      	bhi.n	80023f0 <HAL_GPIO_Init+0x14c>
 80023ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	e002      	b.n	80023f6 <HAL_GPIO_Init+0x152>
 80023f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f2:	3b08      	subs	r3, #8
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	210f      	movs	r1, #15
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	fa01 f303 	lsl.w	r3, r1, r3
 8002404:	43db      	mvns	r3, r3
 8002406:	401a      	ands	r2, r3
 8002408:	6a39      	ldr	r1, [r7, #32]
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	fa01 f303 	lsl.w	r3, r1, r3
 8002410:	431a      	orrs	r2, r3
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	f000 80b1 	beq.w	8002586 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002424:	4b4d      	ldr	r3, [pc, #308]	@ (800255c <HAL_GPIO_Init+0x2b8>)
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	4a4c      	ldr	r2, [pc, #304]	@ (800255c <HAL_GPIO_Init+0x2b8>)
 800242a:	f043 0301 	orr.w	r3, r3, #1
 800242e:	6193      	str	r3, [r2, #24]
 8002430:	4b4a      	ldr	r3, [pc, #296]	@ (800255c <HAL_GPIO_Init+0x2b8>)
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	60bb      	str	r3, [r7, #8]
 800243a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800243c:	4a48      	ldr	r2, [pc, #288]	@ (8002560 <HAL_GPIO_Init+0x2bc>)
 800243e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002440:	089b      	lsrs	r3, r3, #2
 8002442:	3302      	adds	r3, #2
 8002444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002448:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800244a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244c:	f003 0303 	and.w	r3, r3, #3
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	220f      	movs	r2, #15
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	43db      	mvns	r3, r3
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	4013      	ands	r3, r2
 800245e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a40      	ldr	r2, [pc, #256]	@ (8002564 <HAL_GPIO_Init+0x2c0>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d013      	beq.n	8002490 <HAL_GPIO_Init+0x1ec>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a3f      	ldr	r2, [pc, #252]	@ (8002568 <HAL_GPIO_Init+0x2c4>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d00d      	beq.n	800248c <HAL_GPIO_Init+0x1e8>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a3e      	ldr	r2, [pc, #248]	@ (800256c <HAL_GPIO_Init+0x2c8>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d007      	beq.n	8002488 <HAL_GPIO_Init+0x1e4>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a3d      	ldr	r2, [pc, #244]	@ (8002570 <HAL_GPIO_Init+0x2cc>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d101      	bne.n	8002484 <HAL_GPIO_Init+0x1e0>
 8002480:	2303      	movs	r3, #3
 8002482:	e006      	b.n	8002492 <HAL_GPIO_Init+0x1ee>
 8002484:	2304      	movs	r3, #4
 8002486:	e004      	b.n	8002492 <HAL_GPIO_Init+0x1ee>
 8002488:	2302      	movs	r3, #2
 800248a:	e002      	b.n	8002492 <HAL_GPIO_Init+0x1ee>
 800248c:	2301      	movs	r3, #1
 800248e:	e000      	b.n	8002492 <HAL_GPIO_Init+0x1ee>
 8002490:	2300      	movs	r3, #0
 8002492:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002494:	f002 0203 	and.w	r2, r2, #3
 8002498:	0092      	lsls	r2, r2, #2
 800249a:	4093      	lsls	r3, r2
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	4313      	orrs	r3, r2
 80024a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024a2:	492f      	ldr	r1, [pc, #188]	@ (8002560 <HAL_GPIO_Init+0x2bc>)
 80024a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a6:	089b      	lsrs	r3, r3, #2
 80024a8:	3302      	adds	r3, #2
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d006      	beq.n	80024ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80024bc:	4b2d      	ldr	r3, [pc, #180]	@ (8002574 <HAL_GPIO_Init+0x2d0>)
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	492c      	ldr	r1, [pc, #176]	@ (8002574 <HAL_GPIO_Init+0x2d0>)
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	608b      	str	r3, [r1, #8]
 80024c8:	e006      	b.n	80024d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80024ca:	4b2a      	ldr	r3, [pc, #168]	@ (8002574 <HAL_GPIO_Init+0x2d0>)
 80024cc:	689a      	ldr	r2, [r3, #8]
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	43db      	mvns	r3, r3
 80024d2:	4928      	ldr	r1, [pc, #160]	@ (8002574 <HAL_GPIO_Init+0x2d0>)
 80024d4:	4013      	ands	r3, r2
 80024d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d006      	beq.n	80024f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80024e4:	4b23      	ldr	r3, [pc, #140]	@ (8002574 <HAL_GPIO_Init+0x2d0>)
 80024e6:	68da      	ldr	r2, [r3, #12]
 80024e8:	4922      	ldr	r1, [pc, #136]	@ (8002574 <HAL_GPIO_Init+0x2d0>)
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	60cb      	str	r3, [r1, #12]
 80024f0:	e006      	b.n	8002500 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80024f2:	4b20      	ldr	r3, [pc, #128]	@ (8002574 <HAL_GPIO_Init+0x2d0>)
 80024f4:	68da      	ldr	r2, [r3, #12]
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	43db      	mvns	r3, r3
 80024fa:	491e      	ldr	r1, [pc, #120]	@ (8002574 <HAL_GPIO_Init+0x2d0>)
 80024fc:	4013      	ands	r3, r2
 80024fe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d006      	beq.n	800251a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800250c:	4b19      	ldr	r3, [pc, #100]	@ (8002574 <HAL_GPIO_Init+0x2d0>)
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	4918      	ldr	r1, [pc, #96]	@ (8002574 <HAL_GPIO_Init+0x2d0>)
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	4313      	orrs	r3, r2
 8002516:	604b      	str	r3, [r1, #4]
 8002518:	e006      	b.n	8002528 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800251a:	4b16      	ldr	r3, [pc, #88]	@ (8002574 <HAL_GPIO_Init+0x2d0>)
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	43db      	mvns	r3, r3
 8002522:	4914      	ldr	r1, [pc, #80]	@ (8002574 <HAL_GPIO_Init+0x2d0>)
 8002524:	4013      	ands	r3, r2
 8002526:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d021      	beq.n	8002578 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002534:	4b0f      	ldr	r3, [pc, #60]	@ (8002574 <HAL_GPIO_Init+0x2d0>)
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	490e      	ldr	r1, [pc, #56]	@ (8002574 <HAL_GPIO_Init+0x2d0>)
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	4313      	orrs	r3, r2
 800253e:	600b      	str	r3, [r1, #0]
 8002540:	e021      	b.n	8002586 <HAL_GPIO_Init+0x2e2>
 8002542:	bf00      	nop
 8002544:	10320000 	.word	0x10320000
 8002548:	10310000 	.word	0x10310000
 800254c:	10220000 	.word	0x10220000
 8002550:	10210000 	.word	0x10210000
 8002554:	10120000 	.word	0x10120000
 8002558:	10110000 	.word	0x10110000
 800255c:	40021000 	.word	0x40021000
 8002560:	40010000 	.word	0x40010000
 8002564:	40010800 	.word	0x40010800
 8002568:	40010c00 	.word	0x40010c00
 800256c:	40011000 	.word	0x40011000
 8002570:	40011400 	.word	0x40011400
 8002574:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002578:	4b0b      	ldr	r3, [pc, #44]	@ (80025a8 <HAL_GPIO_Init+0x304>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	43db      	mvns	r3, r3
 8002580:	4909      	ldr	r1, [pc, #36]	@ (80025a8 <HAL_GPIO_Init+0x304>)
 8002582:	4013      	ands	r3, r2
 8002584:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002588:	3301      	adds	r3, #1
 800258a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002592:	fa22 f303 	lsr.w	r3, r2, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	f47f ae8e 	bne.w	80022b8 <HAL_GPIO_Init+0x14>
  }
}
 800259c:	bf00      	nop
 800259e:	bf00      	nop
 80025a0:	372c      	adds	r7, #44	@ 0x2c
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr
 80025a8:	40010400 	.word	0x40010400

080025ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	460b      	mov	r3, r1
 80025b6:	807b      	strh	r3, [r7, #2]
 80025b8:	4613      	mov	r3, r2
 80025ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025bc:	787b      	ldrb	r3, [r7, #1]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d003      	beq.n	80025ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025c2:	887a      	ldrh	r2, [r7, #2]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80025c8:	e003      	b.n	80025d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025ca:	887b      	ldrh	r3, [r7, #2]
 80025cc:	041a      	lsls	r2, r3, #16
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	611a      	str	r2, [r3, #16]
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr

080025dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e12b      	b.n	8002846 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d106      	bne.n	8002608 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7fe fe02 	bl	800120c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2224      	movs	r2, #36	@ 0x24
 800260c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f022 0201 	bic.w	r2, r2, #1
 800261e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800262e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800263e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002640:	f001 fbf8 	bl	8003e34 <HAL_RCC_GetPCLK1Freq>
 8002644:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	4a81      	ldr	r2, [pc, #516]	@ (8002850 <HAL_I2C_Init+0x274>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d807      	bhi.n	8002660 <HAL_I2C_Init+0x84>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	4a80      	ldr	r2, [pc, #512]	@ (8002854 <HAL_I2C_Init+0x278>)
 8002654:	4293      	cmp	r3, r2
 8002656:	bf94      	ite	ls
 8002658:	2301      	movls	r3, #1
 800265a:	2300      	movhi	r3, #0
 800265c:	b2db      	uxtb	r3, r3
 800265e:	e006      	b.n	800266e <HAL_I2C_Init+0x92>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4a7d      	ldr	r2, [pc, #500]	@ (8002858 <HAL_I2C_Init+0x27c>)
 8002664:	4293      	cmp	r3, r2
 8002666:	bf94      	ite	ls
 8002668:	2301      	movls	r3, #1
 800266a:	2300      	movhi	r3, #0
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e0e7      	b.n	8002846 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	4a78      	ldr	r2, [pc, #480]	@ (800285c <HAL_I2C_Init+0x280>)
 800267a:	fba2 2303 	umull	r2, r3, r2, r3
 800267e:	0c9b      	lsrs	r3, r3, #18
 8002680:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68ba      	ldr	r2, [r7, #8]
 8002692:	430a      	orrs	r2, r1
 8002694:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	4a6a      	ldr	r2, [pc, #424]	@ (8002850 <HAL_I2C_Init+0x274>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d802      	bhi.n	80026b0 <HAL_I2C_Init+0xd4>
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	3301      	adds	r3, #1
 80026ae:	e009      	b.n	80026c4 <HAL_I2C_Init+0xe8>
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80026b6:	fb02 f303 	mul.w	r3, r2, r3
 80026ba:	4a69      	ldr	r2, [pc, #420]	@ (8002860 <HAL_I2C_Init+0x284>)
 80026bc:	fba2 2303 	umull	r2, r3, r2, r3
 80026c0:	099b      	lsrs	r3, r3, #6
 80026c2:	3301      	adds	r3, #1
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6812      	ldr	r2, [r2, #0]
 80026c8:	430b      	orrs	r3, r1
 80026ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80026d6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	495c      	ldr	r1, [pc, #368]	@ (8002850 <HAL_I2C_Init+0x274>)
 80026e0:	428b      	cmp	r3, r1
 80026e2:	d819      	bhi.n	8002718 <HAL_I2C_Init+0x13c>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	1e59      	subs	r1, r3, #1
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80026f2:	1c59      	adds	r1, r3, #1
 80026f4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80026f8:	400b      	ands	r3, r1
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00a      	beq.n	8002714 <HAL_I2C_Init+0x138>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	1e59      	subs	r1, r3, #1
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	fbb1 f3f3 	udiv	r3, r1, r3
 800270c:	3301      	adds	r3, #1
 800270e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002712:	e051      	b.n	80027b8 <HAL_I2C_Init+0x1dc>
 8002714:	2304      	movs	r3, #4
 8002716:	e04f      	b.n	80027b8 <HAL_I2C_Init+0x1dc>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d111      	bne.n	8002744 <HAL_I2C_Init+0x168>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	1e58      	subs	r0, r3, #1
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6859      	ldr	r1, [r3, #4]
 8002728:	460b      	mov	r3, r1
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	440b      	add	r3, r1
 800272e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002732:	3301      	adds	r3, #1
 8002734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002738:	2b00      	cmp	r3, #0
 800273a:	bf0c      	ite	eq
 800273c:	2301      	moveq	r3, #1
 800273e:	2300      	movne	r3, #0
 8002740:	b2db      	uxtb	r3, r3
 8002742:	e012      	b.n	800276a <HAL_I2C_Init+0x18e>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	1e58      	subs	r0, r3, #1
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6859      	ldr	r1, [r3, #4]
 800274c:	460b      	mov	r3, r1
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	440b      	add	r3, r1
 8002752:	0099      	lsls	r1, r3, #2
 8002754:	440b      	add	r3, r1
 8002756:	fbb0 f3f3 	udiv	r3, r0, r3
 800275a:	3301      	adds	r3, #1
 800275c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002760:	2b00      	cmp	r3, #0
 8002762:	bf0c      	ite	eq
 8002764:	2301      	moveq	r3, #1
 8002766:	2300      	movne	r3, #0
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <HAL_I2C_Init+0x196>
 800276e:	2301      	movs	r3, #1
 8002770:	e022      	b.n	80027b8 <HAL_I2C_Init+0x1dc>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10e      	bne.n	8002798 <HAL_I2C_Init+0x1bc>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	1e58      	subs	r0, r3, #1
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6859      	ldr	r1, [r3, #4]
 8002782:	460b      	mov	r3, r1
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	440b      	add	r3, r1
 8002788:	fbb0 f3f3 	udiv	r3, r0, r3
 800278c:	3301      	adds	r3, #1
 800278e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002792:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002796:	e00f      	b.n	80027b8 <HAL_I2C_Init+0x1dc>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	1e58      	subs	r0, r3, #1
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6859      	ldr	r1, [r3, #4]
 80027a0:	460b      	mov	r3, r1
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	440b      	add	r3, r1
 80027a6:	0099      	lsls	r1, r3, #2
 80027a8:	440b      	add	r3, r1
 80027aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ae:	3301      	adds	r3, #1
 80027b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80027b8:	6879      	ldr	r1, [r7, #4]
 80027ba:	6809      	ldr	r1, [r1, #0]
 80027bc:	4313      	orrs	r3, r2
 80027be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69da      	ldr	r2, [r3, #28]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a1b      	ldr	r3, [r3, #32]
 80027d2:	431a      	orrs	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	430a      	orrs	r2, r1
 80027da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80027e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	6911      	ldr	r1, [r2, #16]
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	68d2      	ldr	r2, [r2, #12]
 80027f2:	4311      	orrs	r1, r2
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	6812      	ldr	r2, [r2, #0]
 80027f8:	430b      	orrs	r3, r1
 80027fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	695a      	ldr	r2, [r3, #20]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	431a      	orrs	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	430a      	orrs	r2, r1
 8002816:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f042 0201 	orr.w	r2, r2, #1
 8002826:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2220      	movs	r2, #32
 8002832:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	000186a0 	.word	0x000186a0
 8002854:	001e847f 	.word	0x001e847f
 8002858:	003d08ff 	.word	0x003d08ff
 800285c:	431bde83 	.word	0x431bde83
 8002860:	10624dd3 	.word	0x10624dd3

08002864 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b088      	sub	sp, #32
 8002868:	af02      	add	r7, sp, #8
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	607a      	str	r2, [r7, #4]
 800286e:	461a      	mov	r2, r3
 8002870:	460b      	mov	r3, r1
 8002872:	817b      	strh	r3, [r7, #10]
 8002874:	4613      	mov	r3, r2
 8002876:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002878:	f7fe ff28 	bl	80016cc <HAL_GetTick>
 800287c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b20      	cmp	r3, #32
 8002888:	f040 80e0 	bne.w	8002a4c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	9300      	str	r3, [sp, #0]
 8002890:	2319      	movs	r3, #25
 8002892:	2201      	movs	r2, #1
 8002894:	4970      	ldr	r1, [pc, #448]	@ (8002a58 <HAL_I2C_Master_Transmit+0x1f4>)
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 fcc0 	bl	800321c <I2C_WaitOnFlagUntilTimeout>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80028a2:	2302      	movs	r3, #2
 80028a4:	e0d3      	b.n	8002a4e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d101      	bne.n	80028b4 <HAL_I2C_Master_Transmit+0x50>
 80028b0:	2302      	movs	r3, #2
 80028b2:	e0cc      	b.n	8002a4e <HAL_I2C_Master_Transmit+0x1ea>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d007      	beq.n	80028da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f042 0201 	orr.w	r2, r2, #1
 80028d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2221      	movs	r2, #33	@ 0x21
 80028ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2210      	movs	r2, #16
 80028f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	893a      	ldrh	r2, [r7, #8]
 800290a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002910:	b29a      	uxth	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	4a50      	ldr	r2, [pc, #320]	@ (8002a5c <HAL_I2C_Master_Transmit+0x1f8>)
 800291a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800291c:	8979      	ldrh	r1, [r7, #10]
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	6a3a      	ldr	r2, [r7, #32]
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f000 fb10 	bl	8002f48 <I2C_MasterRequestWrite>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e08d      	b.n	8002a4e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002932:	2300      	movs	r3, #0
 8002934:	613b      	str	r3, [r7, #16]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	613b      	str	r3, [r7, #16]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	613b      	str	r3, [r7, #16]
 8002946:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002948:	e066      	b.n	8002a18 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	6a39      	ldr	r1, [r7, #32]
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f000 fd7e 	bl	8003450 <I2C_WaitOnTXEFlagUntilTimeout>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00d      	beq.n	8002976 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295e:	2b04      	cmp	r3, #4
 8002960:	d107      	bne.n	8002972 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002970:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e06b      	b.n	8002a4e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800297a:	781a      	ldrb	r2, [r3, #0]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002986:	1c5a      	adds	r2, r3, #1
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002990:	b29b      	uxth	r3, r3
 8002992:	3b01      	subs	r3, #1
 8002994:	b29a      	uxth	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800299e:	3b01      	subs	r3, #1
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	695b      	ldr	r3, [r3, #20]
 80029ac:	f003 0304 	and.w	r3, r3, #4
 80029b0:	2b04      	cmp	r3, #4
 80029b2:	d11b      	bne.n	80029ec <HAL_I2C_Master_Transmit+0x188>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d017      	beq.n	80029ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c0:	781a      	ldrb	r2, [r3, #0]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029cc:	1c5a      	adds	r2, r3, #1
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	3b01      	subs	r3, #1
 80029da:	b29a      	uxth	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029e4:	3b01      	subs	r3, #1
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029ec:	697a      	ldr	r2, [r7, #20]
 80029ee:	6a39      	ldr	r1, [r7, #32]
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f000 fd75 	bl	80034e0 <I2C_WaitOnBTFFlagUntilTimeout>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00d      	beq.n	8002a18 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a00:	2b04      	cmp	r3, #4
 8002a02:	d107      	bne.n	8002a14 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a12:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e01a      	b.n	8002a4e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d194      	bne.n	800294a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2220      	movs	r2, #32
 8002a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	e000      	b.n	8002a4e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002a4c:	2302      	movs	r3, #2
  }
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3718      	adds	r7, #24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	00100002 	.word	0x00100002
 8002a5c:	ffff0000 	.word	0xffff0000

08002a60 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b08c      	sub	sp, #48	@ 0x30
 8002a64:	af02      	add	r7, sp, #8
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	4608      	mov	r0, r1
 8002a6a:	4611      	mov	r1, r2
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	4603      	mov	r3, r0
 8002a70:	817b      	strh	r3, [r7, #10]
 8002a72:	460b      	mov	r3, r1
 8002a74:	813b      	strh	r3, [r7, #8]
 8002a76:	4613      	mov	r3, r2
 8002a78:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a7e:	f7fe fe25 	bl	80016cc <HAL_GetTick>
 8002a82:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b20      	cmp	r3, #32
 8002a8e:	f040 8250 	bne.w	8002f32 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	2319      	movs	r3, #25
 8002a98:	2201      	movs	r2, #1
 8002a9a:	4982      	ldr	r1, [pc, #520]	@ (8002ca4 <HAL_I2C_Mem_Read+0x244>)
 8002a9c:	68f8      	ldr	r0, [r7, #12]
 8002a9e:	f000 fbbd 	bl	800321c <I2C_WaitOnFlagUntilTimeout>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	e243      	b.n	8002f34 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d101      	bne.n	8002aba <HAL_I2C_Mem_Read+0x5a>
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	e23c      	b.n	8002f34 <HAL_I2C_Mem_Read+0x4d4>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2201      	movs	r2, #1
 8002abe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d007      	beq.n	8002ae0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f042 0201 	orr.w	r2, r2, #1
 8002ade:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002aee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2222      	movs	r2, #34	@ 0x22
 8002af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2240      	movs	r2, #64	@ 0x40
 8002afc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b0a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002b10:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4a62      	ldr	r2, [pc, #392]	@ (8002ca8 <HAL_I2C_Mem_Read+0x248>)
 8002b20:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b22:	88f8      	ldrh	r0, [r7, #6]
 8002b24:	893a      	ldrh	r2, [r7, #8]
 8002b26:	8979      	ldrh	r1, [r7, #10]
 8002b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b2a:	9301      	str	r3, [sp, #4]
 8002b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	4603      	mov	r3, r0
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f000 fa8a 	bl	800304c <I2C_RequestMemoryRead>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e1f8      	b.n	8002f34 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d113      	bne.n	8002b72 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61fb      	str	r3, [r7, #28]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	61fb      	str	r3, [r7, #28]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	61fb      	str	r3, [r7, #28]
 8002b5e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	e1cc      	b.n	8002f0c <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d11e      	bne.n	8002bb8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b88:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b8a:	b672      	cpsid	i
}
 8002b8c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61bb      	str	r3, [r7, #24]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	61bb      	str	r3, [r7, #24]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	61bb      	str	r3, [r7, #24]
 8002ba2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bb2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002bb4:	b662      	cpsie	i
}
 8002bb6:	e035      	b.n	8002c24 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d11e      	bne.n	8002bfe <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002bd0:	b672      	cpsid	i
}
 8002bd2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	617b      	str	r3, [r7, #20]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	617b      	str	r3, [r7, #20]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	617b      	str	r3, [r7, #20]
 8002be8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bf8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002bfa:	b662      	cpsie	i
}
 8002bfc:	e012      	b.n	8002c24 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002c0c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c0e:	2300      	movs	r3, #0
 8002c10:	613b      	str	r3, [r7, #16]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	613b      	str	r3, [r7, #16]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	613b      	str	r3, [r7, #16]
 8002c22:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002c24:	e172      	b.n	8002f0c <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c2a:	2b03      	cmp	r3, #3
 8002c2c:	f200 811f 	bhi.w	8002e6e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d123      	bne.n	8002c80 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c3a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f000 fc97 	bl	8003570 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e173      	b.n	8002f34 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	691a      	ldr	r2, [r3, #16]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c5e:	1c5a      	adds	r2, r3, #1
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	3b01      	subs	r3, #1
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c7e:	e145      	b.n	8002f0c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d152      	bne.n	8002d2e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c8e:	2200      	movs	r2, #0
 8002c90:	4906      	ldr	r1, [pc, #24]	@ (8002cac <HAL_I2C_Mem_Read+0x24c>)
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f000 fac2 	bl	800321c <I2C_WaitOnFlagUntilTimeout>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d008      	beq.n	8002cb0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e148      	b.n	8002f34 <HAL_I2C_Mem_Read+0x4d4>
 8002ca2:	bf00      	nop
 8002ca4:	00100002 	.word	0x00100002
 8002ca8:	ffff0000 	.word	0xffff0000
 8002cac:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002cb0:	b672      	cpsid	i
}
 8002cb2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	691a      	ldr	r2, [r3, #16]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd6:	1c5a      	adds	r2, r3, #1
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002cf6:	b662      	cpsie	i
}
 8002cf8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	691a      	ldr	r2, [r3, #16]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d04:	b2d2      	uxtb	r2, r2
 8002d06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0c:	1c5a      	adds	r2, r3, #1
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d16:	3b01      	subs	r3, #1
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	3b01      	subs	r3, #1
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d2c:	e0ee      	b.n	8002f0c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d34:	2200      	movs	r2, #0
 8002d36:	4981      	ldr	r1, [pc, #516]	@ (8002f3c <HAL_I2C_Mem_Read+0x4dc>)
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f000 fa6f 	bl	800321c <I2C_WaitOnFlagUntilTimeout>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e0f5      	b.n	8002f34 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d56:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d58:	b672      	cpsid	i
}
 8002d5a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	691a      	ldr	r2, [r3, #16]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d66:	b2d2      	uxtb	r2, r2
 8002d68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6e:	1c5a      	adds	r2, r3, #1
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	3b01      	subs	r3, #1
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002d8e:	4b6c      	ldr	r3, [pc, #432]	@ (8002f40 <HAL_I2C_Mem_Read+0x4e0>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	08db      	lsrs	r3, r3, #3
 8002d94:	4a6b      	ldr	r2, [pc, #428]	@ (8002f44 <HAL_I2C_Mem_Read+0x4e4>)
 8002d96:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9a:	0a1a      	lsrs	r2, r3, #8
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4413      	add	r3, r2
 8002da2:	00da      	lsls	r2, r3, #3
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002da8:	6a3b      	ldr	r3, [r7, #32]
 8002daa:	3b01      	subs	r3, #1
 8002dac:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d118      	bne.n	8002de6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2220      	movs	r2, #32
 8002dbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dce:	f043 0220 	orr.w	r2, r3, #32
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002dd6:	b662      	cpsie	i
}
 8002dd8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e0a6      	b.n	8002f34 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	f003 0304 	and.w	r3, r3, #4
 8002df0:	2b04      	cmp	r3, #4
 8002df2:	d1d9      	bne.n	8002da8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	691a      	ldr	r2, [r3, #16]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e16:	1c5a      	adds	r2, r3, #1
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e20:	3b01      	subs	r3, #1
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002e36:	b662      	cpsie	i
}
 8002e38:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	691a      	ldr	r2, [r3, #16]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e44:	b2d2      	uxtb	r2, r2
 8002e46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4c:	1c5a      	adds	r2, r3, #1
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e56:	3b01      	subs	r3, #1
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	3b01      	subs	r3, #1
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e6c:	e04e      	b.n	8002f0c <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e70:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f000 fb7c 	bl	8003570 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e058      	b.n	8002f34 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	691a      	ldr	r2, [r3, #16]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8c:	b2d2      	uxtb	r2, r2
 8002e8e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e94:	1c5a      	adds	r2, r3, #1
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	3b01      	subs	r3, #1
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	f003 0304 	and.w	r3, r3, #4
 8002ebe:	2b04      	cmp	r3, #4
 8002ec0:	d124      	bne.n	8002f0c <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ec6:	2b03      	cmp	r3, #3
 8002ec8:	d107      	bne.n	8002eda <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ed8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	691a      	ldr	r2, [r3, #16]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee4:	b2d2      	uxtb	r2, r2
 8002ee6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eec:	1c5a      	adds	r2, r3, #1
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	3b01      	subs	r3, #1
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f47f ae88 	bne.w	8002c26 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2220      	movs	r2, #32
 8002f1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	e000      	b.n	8002f34 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8002f32:	2302      	movs	r3, #2
  }
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3728      	adds	r7, #40	@ 0x28
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	00010004 	.word	0x00010004
 8002f40:	20000000 	.word	0x20000000
 8002f44:	14f8b589 	.word	0x14f8b589

08002f48 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b088      	sub	sp, #32
 8002f4c:	af02      	add	r7, sp, #8
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	607a      	str	r2, [r7, #4]
 8002f52:	603b      	str	r3, [r7, #0]
 8002f54:	460b      	mov	r3, r1
 8002f56:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f5c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	2b08      	cmp	r3, #8
 8002f62:	d006      	beq.n	8002f72 <I2C_MasterRequestWrite+0x2a>
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d003      	beq.n	8002f72 <I2C_MasterRequestWrite+0x2a>
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002f70:	d108      	bne.n	8002f84 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	e00b      	b.n	8002f9c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f88:	2b12      	cmp	r3, #18
 8002f8a:	d107      	bne.n	8002f9c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f000 f937 	bl	800321c <I2C_WaitOnFlagUntilTimeout>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00d      	beq.n	8002fd0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fc2:	d103      	bne.n	8002fcc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e035      	b.n	800303c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002fd8:	d108      	bne.n	8002fec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fda:	897b      	ldrh	r3, [r7, #10]
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	461a      	mov	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002fe8:	611a      	str	r2, [r3, #16]
 8002fea:	e01b      	b.n	8003024 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002fec:	897b      	ldrh	r3, [r7, #10]
 8002fee:	11db      	asrs	r3, r3, #7
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	f003 0306 	and.w	r3, r3, #6
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	f063 030f 	orn	r3, r3, #15
 8002ffc:	b2da      	uxtb	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	490e      	ldr	r1, [pc, #56]	@ (8003044 <I2C_MasterRequestWrite+0xfc>)
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f000 f980 	bl	8003310 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e010      	b.n	800303c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800301a:	897b      	ldrh	r3, [r7, #10]
 800301c:	b2da      	uxtb	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	4907      	ldr	r1, [pc, #28]	@ (8003048 <I2C_MasterRequestWrite+0x100>)
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 f970 	bl	8003310 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e000      	b.n	800303c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	3718      	adds	r7, #24
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	00010008 	.word	0x00010008
 8003048:	00010002 	.word	0x00010002

0800304c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b088      	sub	sp, #32
 8003050:	af02      	add	r7, sp, #8
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	4608      	mov	r0, r1
 8003056:	4611      	mov	r1, r2
 8003058:	461a      	mov	r2, r3
 800305a:	4603      	mov	r3, r0
 800305c:	817b      	strh	r3, [r7, #10]
 800305e:	460b      	mov	r3, r1
 8003060:	813b      	strh	r3, [r7, #8]
 8003062:	4613      	mov	r3, r2
 8003064:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003074:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003084:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003088:	9300      	str	r3, [sp, #0]
 800308a:	6a3b      	ldr	r3, [r7, #32]
 800308c:	2200      	movs	r2, #0
 800308e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f000 f8c2 	bl	800321c <I2C_WaitOnFlagUntilTimeout>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00d      	beq.n	80030ba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030ac:	d103      	bne.n	80030b6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030b4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e0aa      	b.n	8003210 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030ba:	897b      	ldrh	r3, [r7, #10]
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	461a      	mov	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80030c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030cc:	6a3a      	ldr	r2, [r7, #32]
 80030ce:	4952      	ldr	r1, [pc, #328]	@ (8003218 <I2C_RequestMemoryRead+0x1cc>)
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f000 f91d 	bl	8003310 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d001      	beq.n	80030e0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e097      	b.n	8003210 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030e0:	2300      	movs	r3, #0
 80030e2:	617b      	str	r3, [r7, #20]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	617b      	str	r3, [r7, #20]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	617b      	str	r3, [r7, #20]
 80030f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030f8:	6a39      	ldr	r1, [r7, #32]
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f000 f9a8 	bl	8003450 <I2C_WaitOnTXEFlagUntilTimeout>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00d      	beq.n	8003122 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310a:	2b04      	cmp	r3, #4
 800310c:	d107      	bne.n	800311e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800311c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e076      	b.n	8003210 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003122:	88fb      	ldrh	r3, [r7, #6]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d105      	bne.n	8003134 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003128:	893b      	ldrh	r3, [r7, #8]
 800312a:	b2da      	uxtb	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	611a      	str	r2, [r3, #16]
 8003132:	e021      	b.n	8003178 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003134:	893b      	ldrh	r3, [r7, #8]
 8003136:	0a1b      	lsrs	r3, r3, #8
 8003138:	b29b      	uxth	r3, r3
 800313a:	b2da      	uxtb	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003142:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003144:	6a39      	ldr	r1, [r7, #32]
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f000 f982 	bl	8003450 <I2C_WaitOnTXEFlagUntilTimeout>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00d      	beq.n	800316e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003156:	2b04      	cmp	r3, #4
 8003158:	d107      	bne.n	800316a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003168:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e050      	b.n	8003210 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800316e:	893b      	ldrh	r3, [r7, #8]
 8003170:	b2da      	uxtb	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003178:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800317a:	6a39      	ldr	r1, [r7, #32]
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f000 f967 	bl	8003450 <I2C_WaitOnTXEFlagUntilTimeout>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00d      	beq.n	80031a4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318c:	2b04      	cmp	r3, #4
 800318e:	d107      	bne.n	80031a0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800319e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e035      	b.n	8003210 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031b2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b6:	9300      	str	r3, [sp, #0]
 80031b8:	6a3b      	ldr	r3, [r7, #32]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f000 f82b 	bl	800321c <I2C_WaitOnFlagUntilTimeout>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00d      	beq.n	80031e8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031da:	d103      	bne.n	80031e4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031e2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e013      	b.n	8003210 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80031e8:	897b      	ldrh	r3, [r7, #10]
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	f043 0301 	orr.w	r3, r3, #1
 80031f0:	b2da      	uxtb	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031fa:	6a3a      	ldr	r2, [r7, #32]
 80031fc:	4906      	ldr	r1, [pc, #24]	@ (8003218 <I2C_RequestMemoryRead+0x1cc>)
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f000 f886 	bl	8003310 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e000      	b.n	8003210 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3718      	adds	r7, #24
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	00010002 	.word	0x00010002

0800321c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	603b      	str	r3, [r7, #0]
 8003228:	4613      	mov	r3, r2
 800322a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800322c:	e048      	b.n	80032c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003234:	d044      	beq.n	80032c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003236:	f7fe fa49 	bl	80016cc <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	429a      	cmp	r2, r3
 8003244:	d302      	bcc.n	800324c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d139      	bne.n	80032c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	0c1b      	lsrs	r3, r3, #16
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b01      	cmp	r3, #1
 8003254:	d10d      	bne.n	8003272 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	43da      	mvns	r2, r3
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	4013      	ands	r3, r2
 8003262:	b29b      	uxth	r3, r3
 8003264:	2b00      	cmp	r3, #0
 8003266:	bf0c      	ite	eq
 8003268:	2301      	moveq	r3, #1
 800326a:	2300      	movne	r3, #0
 800326c:	b2db      	uxtb	r3, r3
 800326e:	461a      	mov	r2, r3
 8003270:	e00c      	b.n	800328c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	43da      	mvns	r2, r3
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	4013      	ands	r3, r2
 800327e:	b29b      	uxth	r3, r3
 8003280:	2b00      	cmp	r3, #0
 8003282:	bf0c      	ite	eq
 8003284:	2301      	moveq	r3, #1
 8003286:	2300      	movne	r3, #0
 8003288:	b2db      	uxtb	r3, r3
 800328a:	461a      	mov	r2, r3
 800328c:	79fb      	ldrb	r3, [r7, #7]
 800328e:	429a      	cmp	r2, r3
 8003290:	d116      	bne.n	80032c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2220      	movs	r2, #32
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ac:	f043 0220 	orr.w	r2, r3, #32
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e023      	b.n	8003308 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	0c1b      	lsrs	r3, r3, #16
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d10d      	bne.n	80032e6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	43da      	mvns	r2, r3
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	4013      	ands	r3, r2
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	bf0c      	ite	eq
 80032dc:	2301      	moveq	r3, #1
 80032de:	2300      	movne	r3, #0
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	461a      	mov	r2, r3
 80032e4:	e00c      	b.n	8003300 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	43da      	mvns	r2, r3
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	4013      	ands	r3, r2
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	bf0c      	ite	eq
 80032f8:	2301      	moveq	r3, #1
 80032fa:	2300      	movne	r3, #0
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	461a      	mov	r2, r3
 8003300:	79fb      	ldrb	r3, [r7, #7]
 8003302:	429a      	cmp	r2, r3
 8003304:	d093      	beq.n	800322e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
 800331c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800331e:	e071      	b.n	8003404 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800332a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800332e:	d123      	bne.n	8003378 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800333e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003348:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2220      	movs	r2, #32
 8003354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003364:	f043 0204 	orr.w	r2, r3, #4
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e067      	b.n	8003448 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337e:	d041      	beq.n	8003404 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003380:	f7fe f9a4 	bl	80016cc <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	429a      	cmp	r2, r3
 800338e:	d302      	bcc.n	8003396 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d136      	bne.n	8003404 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	0c1b      	lsrs	r3, r3, #16
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2b01      	cmp	r3, #1
 800339e:	d10c      	bne.n	80033ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	43da      	mvns	r2, r3
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	4013      	ands	r3, r2
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	bf14      	ite	ne
 80033b2:	2301      	movne	r3, #1
 80033b4:	2300      	moveq	r3, #0
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	e00b      	b.n	80033d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	43da      	mvns	r2, r3
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	4013      	ands	r3, r2
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	bf14      	ite	ne
 80033cc:	2301      	movne	r3, #1
 80033ce:	2300      	moveq	r3, #0
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d016      	beq.n	8003404 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2220      	movs	r2, #32
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f0:	f043 0220 	orr.w	r2, r3, #32
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e021      	b.n	8003448 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	0c1b      	lsrs	r3, r3, #16
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b01      	cmp	r3, #1
 800340c:	d10c      	bne.n	8003428 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	43da      	mvns	r2, r3
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	4013      	ands	r3, r2
 800341a:	b29b      	uxth	r3, r3
 800341c:	2b00      	cmp	r3, #0
 800341e:	bf14      	ite	ne
 8003420:	2301      	movne	r3, #1
 8003422:	2300      	moveq	r3, #0
 8003424:	b2db      	uxtb	r3, r3
 8003426:	e00b      	b.n	8003440 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	43da      	mvns	r2, r3
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	4013      	ands	r3, r2
 8003434:	b29b      	uxth	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	bf14      	ite	ne
 800343a:	2301      	movne	r3, #1
 800343c:	2300      	moveq	r3, #0
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b00      	cmp	r3, #0
 8003442:	f47f af6d 	bne.w	8003320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	3710      	adds	r7, #16
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800345c:	e034      	b.n	80034c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 f8e3 	bl	800362a <I2C_IsAcknowledgeFailed>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e034      	b.n	80034d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003474:	d028      	beq.n	80034c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003476:	f7fe f929 	bl	80016cc <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	429a      	cmp	r2, r3
 8003484:	d302      	bcc.n	800348c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d11d      	bne.n	80034c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003496:	2b80      	cmp	r3, #128	@ 0x80
 8003498:	d016      	beq.n	80034c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2220      	movs	r2, #32
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b4:	f043 0220 	orr.w	r2, r3, #32
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e007      	b.n	80034d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034d2:	2b80      	cmp	r3, #128	@ 0x80
 80034d4:	d1c3      	bne.n	800345e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034ec:	e034      	b.n	8003558 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f000 f89b 	bl	800362a <I2C_IsAcknowledgeFailed>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e034      	b.n	8003568 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003504:	d028      	beq.n	8003558 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003506:	f7fe f8e1 	bl	80016cc <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	429a      	cmp	r2, r3
 8003514:	d302      	bcc.n	800351c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d11d      	bne.n	8003558 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	f003 0304 	and.w	r3, r3, #4
 8003526:	2b04      	cmp	r3, #4
 8003528:	d016      	beq.n	8003558 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2220      	movs	r2, #32
 8003534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003544:	f043 0220 	orr.w	r2, r3, #32
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e007      	b.n	8003568 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	f003 0304 	and.w	r3, r3, #4
 8003562:	2b04      	cmp	r3, #4
 8003564:	d1c3      	bne.n	80034ee <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800357c:	e049      	b.n	8003612 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	f003 0310 	and.w	r3, r3, #16
 8003588:	2b10      	cmp	r3, #16
 800358a:	d119      	bne.n	80035c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f06f 0210 	mvn.w	r2, #16
 8003594:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2220      	movs	r2, #32
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e030      	b.n	8003622 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035c0:	f7fe f884 	bl	80016cc <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d302      	bcc.n	80035d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d11d      	bne.n	8003612 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035e0:	2b40      	cmp	r3, #64	@ 0x40
 80035e2:	d016      	beq.n	8003612 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2220      	movs	r2, #32
 80035ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fe:	f043 0220 	orr.w	r2, r3, #32
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e007      	b.n	8003622 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	695b      	ldr	r3, [r3, #20]
 8003618:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800361c:	2b40      	cmp	r3, #64	@ 0x40
 800361e:	d1ae      	bne.n	800357e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800363c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003640:	d11b      	bne.n	800367a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800364a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2220      	movs	r2, #32
 8003656:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003666:	f043 0204 	orr.w	r2, r3, #4
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e000      	b.n	800367c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	bc80      	pop	{r7}
 8003684:	4770      	bx	lr
	...

08003688 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003688:	b480      	push	{r7}
 800368a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800368c:	4b03      	ldr	r3, [pc, #12]	@ (800369c <HAL_PWR_EnableBkUpAccess+0x14>)
 800368e:	2201      	movs	r2, #1
 8003690:	601a      	str	r2, [r3, #0]
}
 8003692:	bf00      	nop
 8003694:	46bd      	mov	sp, r7
 8003696:	bc80      	pop	{r7}
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	420e0020 	.word	0x420e0020

080036a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e272      	b.n	8003b98 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f000 8087 	beq.w	80037ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036c0:	4b92      	ldr	r3, [pc, #584]	@ (800390c <HAL_RCC_OscConfig+0x26c>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f003 030c 	and.w	r3, r3, #12
 80036c8:	2b04      	cmp	r3, #4
 80036ca:	d00c      	beq.n	80036e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036cc:	4b8f      	ldr	r3, [pc, #572]	@ (800390c <HAL_RCC_OscConfig+0x26c>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f003 030c 	and.w	r3, r3, #12
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	d112      	bne.n	80036fe <HAL_RCC_OscConfig+0x5e>
 80036d8:	4b8c      	ldr	r3, [pc, #560]	@ (800390c <HAL_RCC_OscConfig+0x26c>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036e4:	d10b      	bne.n	80036fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036e6:	4b89      	ldr	r3, [pc, #548]	@ (800390c <HAL_RCC_OscConfig+0x26c>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d06c      	beq.n	80037cc <HAL_RCC_OscConfig+0x12c>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d168      	bne.n	80037cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e24c      	b.n	8003b98 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003706:	d106      	bne.n	8003716 <HAL_RCC_OscConfig+0x76>
 8003708:	4b80      	ldr	r3, [pc, #512]	@ (800390c <HAL_RCC_OscConfig+0x26c>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a7f      	ldr	r2, [pc, #508]	@ (800390c <HAL_RCC_OscConfig+0x26c>)
 800370e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003712:	6013      	str	r3, [r2, #0]
 8003714:	e02e      	b.n	8003774 <HAL_RCC_OscConfig+0xd4>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10c      	bne.n	8003738 <HAL_RCC_OscConfig+0x98>
 800371e:	4b7b      	ldr	r3, [pc, #492]	@ (800390c <HAL_RCC_OscConfig+0x26c>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a7a      	ldr	r2, [pc, #488]	@ (800390c <HAL_RCC_OscConfig+0x26c>)
 8003724:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003728:	6013      	str	r3, [r2, #0]
 800372a:	4b78      	ldr	r3, [pc, #480]	@ (800390c <HAL_RCC_OscConfig+0x26c>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a77      	ldr	r2, [pc, #476]	@ (800390c <HAL_RCC_OscConfig+0x26c>)
 8003730:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003734:	6013      	str	r3, [r2, #0]
 8003736:	e01d      	b.n	8003774 <HAL_RCC_OscConfig+0xd4>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003740:	d10c      	bne.n	800375c <HAL_RCC_OscConfig+0xbc>
 8003742:	4b72      	ldr	r3, [pc, #456]	@ (800390c <HAL_RCC_OscConfig+0x26c>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a71      	ldr	r2, [pc, #452]	@ (800390c <HAL_RCC_OscConfig+0x26c>)
 8003748:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800374c:	6013      	str	r3, [r2, #0]
 800374e:	4b6f      	ldr	r3, [pc, #444]	@ (800390c <HAL_RCC_OscConfig+0x26c>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a6e      	ldr	r2, [pc, #440]	@ (800390c <HAL_RCC_OscConfig+0x26c>)
 8003754:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003758:	6013      	str	r3, [r2, #0]
 800375a:	e00b      	b.n	8003774 <HAL_RCC_OscConfig+0xd4>
 800375c:	4b6b      	ldr	r3, [pc, #428]	@ (800390c <HAL_RCC_OscConfig+0x26c>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a6a      	ldr	r2, [pc, #424]	@ (800390c <HAL_RCC_OscConfig+0x26c>)
 8003762:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003766:	6013      	str	r3, [r2, #0]
 8003768:	4b68      	ldr	r3, [pc, #416]	@ (800390c <HAL_RCC_OscConfig+0x26c>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a67      	ldr	r2, [pc, #412]	@ (800390c <HAL_RCC_OscConfig+0x26c>)
 800376e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003772:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d013      	beq.n	80037a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800377c:	f7fd ffa6 	bl	80016cc <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003784:	f7fd ffa2 	bl	80016cc <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b64      	cmp	r3, #100	@ 0x64
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e200      	b.n	8003b98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003796:	4b5d      	ldr	r3, [pc, #372]	@ (800390c <HAL_RCC_OscConfig+0x26c>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d0f0      	beq.n	8003784 <HAL_RCC_OscConfig+0xe4>
 80037a2:	e014      	b.n	80037ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a4:	f7fd ff92 	bl	80016cc <HAL_GetTick>
 80037a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037aa:	e008      	b.n	80037be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037ac:	f7fd ff8e 	bl	80016cc <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b64      	cmp	r3, #100	@ 0x64
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e1ec      	b.n	8003b98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037be:	4b53      	ldr	r3, [pc, #332]	@ (800390c <HAL_RCC_OscConfig+0x26c>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1f0      	bne.n	80037ac <HAL_RCC_OscConfig+0x10c>
 80037ca:	e000      	b.n	80037ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d063      	beq.n	80038a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037da:	4b4c      	ldr	r3, [pc, #304]	@ (800390c <HAL_RCC_OscConfig+0x26c>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f003 030c 	and.w	r3, r3, #12
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00b      	beq.n	80037fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80037e6:	4b49      	ldr	r3, [pc, #292]	@ (800390c <HAL_RCC_OscConfig+0x26c>)
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f003 030c 	and.w	r3, r3, #12
 80037ee:	2b08      	cmp	r3, #8
 80037f0:	d11c      	bne.n	800382c <HAL_RCC_OscConfig+0x18c>
 80037f2:	4b46      	ldr	r3, [pc, #280]	@ (800390c <HAL_RCC_OscConfig+0x26c>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d116      	bne.n	800382c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037fe:	4b43      	ldr	r3, [pc, #268]	@ (800390c <HAL_RCC_OscConfig+0x26c>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d005      	beq.n	8003816 <HAL_RCC_OscConfig+0x176>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d001      	beq.n	8003816 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e1c0      	b.n	8003b98 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003816:	4b3d      	ldr	r3, [pc, #244]	@ (800390c <HAL_RCC_OscConfig+0x26c>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	4939      	ldr	r1, [pc, #228]	@ (800390c <HAL_RCC_OscConfig+0x26c>)
 8003826:	4313      	orrs	r3, r2
 8003828:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800382a:	e03a      	b.n	80038a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d020      	beq.n	8003876 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003834:	4b36      	ldr	r3, [pc, #216]	@ (8003910 <HAL_RCC_OscConfig+0x270>)
 8003836:	2201      	movs	r2, #1
 8003838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800383a:	f7fd ff47 	bl	80016cc <HAL_GetTick>
 800383e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003840:	e008      	b.n	8003854 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003842:	f7fd ff43 	bl	80016cc <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d901      	bls.n	8003854 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e1a1      	b.n	8003b98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003854:	4b2d      	ldr	r3, [pc, #180]	@ (800390c <HAL_RCC_OscConfig+0x26c>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0f0      	beq.n	8003842 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003860:	4b2a      	ldr	r3, [pc, #168]	@ (800390c <HAL_RCC_OscConfig+0x26c>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	00db      	lsls	r3, r3, #3
 800386e:	4927      	ldr	r1, [pc, #156]	@ (800390c <HAL_RCC_OscConfig+0x26c>)
 8003870:	4313      	orrs	r3, r2
 8003872:	600b      	str	r3, [r1, #0]
 8003874:	e015      	b.n	80038a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003876:	4b26      	ldr	r3, [pc, #152]	@ (8003910 <HAL_RCC_OscConfig+0x270>)
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800387c:	f7fd ff26 	bl	80016cc <HAL_GetTick>
 8003880:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003882:	e008      	b.n	8003896 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003884:	f7fd ff22 	bl	80016cc <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b02      	cmp	r3, #2
 8003890:	d901      	bls.n	8003896 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e180      	b.n	8003b98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003896:	4b1d      	ldr	r3, [pc, #116]	@ (800390c <HAL_RCC_OscConfig+0x26c>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1f0      	bne.n	8003884 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0308 	and.w	r3, r3, #8
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d03a      	beq.n	8003924 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d019      	beq.n	80038ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038b6:	4b17      	ldr	r3, [pc, #92]	@ (8003914 <HAL_RCC_OscConfig+0x274>)
 80038b8:	2201      	movs	r2, #1
 80038ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038bc:	f7fd ff06 	bl	80016cc <HAL_GetTick>
 80038c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038c2:	e008      	b.n	80038d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038c4:	f7fd ff02 	bl	80016cc <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e160      	b.n	8003b98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038d6:	4b0d      	ldr	r3, [pc, #52]	@ (800390c <HAL_RCC_OscConfig+0x26c>)
 80038d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d0f0      	beq.n	80038c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80038e2:	2001      	movs	r0, #1
 80038e4:	f000 face 	bl	8003e84 <RCC_Delay>
 80038e8:	e01c      	b.n	8003924 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003914 <HAL_RCC_OscConfig+0x274>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038f0:	f7fd feec 	bl	80016cc <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038f6:	e00f      	b.n	8003918 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038f8:	f7fd fee8 	bl	80016cc <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d908      	bls.n	8003918 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e146      	b.n	8003b98 <HAL_RCC_OscConfig+0x4f8>
 800390a:	bf00      	nop
 800390c:	40021000 	.word	0x40021000
 8003910:	42420000 	.word	0x42420000
 8003914:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003918:	4b92      	ldr	r3, [pc, #584]	@ (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 800391a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800391c:	f003 0302 	and.w	r3, r3, #2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1e9      	bne.n	80038f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0304 	and.w	r3, r3, #4
 800392c:	2b00      	cmp	r3, #0
 800392e:	f000 80a6 	beq.w	8003a7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003932:	2300      	movs	r3, #0
 8003934:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003936:	4b8b      	ldr	r3, [pc, #556]	@ (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10d      	bne.n	800395e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003942:	4b88      	ldr	r3, [pc, #544]	@ (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	4a87      	ldr	r2, [pc, #540]	@ (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 8003948:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800394c:	61d3      	str	r3, [r2, #28]
 800394e:	4b85      	ldr	r3, [pc, #532]	@ (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 8003950:	69db      	ldr	r3, [r3, #28]
 8003952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003956:	60bb      	str	r3, [r7, #8]
 8003958:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800395a:	2301      	movs	r3, #1
 800395c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800395e:	4b82      	ldr	r3, [pc, #520]	@ (8003b68 <HAL_RCC_OscConfig+0x4c8>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003966:	2b00      	cmp	r3, #0
 8003968:	d118      	bne.n	800399c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800396a:	4b7f      	ldr	r3, [pc, #508]	@ (8003b68 <HAL_RCC_OscConfig+0x4c8>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a7e      	ldr	r2, [pc, #504]	@ (8003b68 <HAL_RCC_OscConfig+0x4c8>)
 8003970:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003974:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003976:	f7fd fea9 	bl	80016cc <HAL_GetTick>
 800397a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800397c:	e008      	b.n	8003990 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800397e:	f7fd fea5 	bl	80016cc <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	2b64      	cmp	r3, #100	@ 0x64
 800398a:	d901      	bls.n	8003990 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e103      	b.n	8003b98 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003990:	4b75      	ldr	r3, [pc, #468]	@ (8003b68 <HAL_RCC_OscConfig+0x4c8>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003998:	2b00      	cmp	r3, #0
 800399a:	d0f0      	beq.n	800397e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d106      	bne.n	80039b2 <HAL_RCC_OscConfig+0x312>
 80039a4:	4b6f      	ldr	r3, [pc, #444]	@ (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	4a6e      	ldr	r2, [pc, #440]	@ (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 80039aa:	f043 0301 	orr.w	r3, r3, #1
 80039ae:	6213      	str	r3, [r2, #32]
 80039b0:	e02d      	b.n	8003a0e <HAL_RCC_OscConfig+0x36e>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10c      	bne.n	80039d4 <HAL_RCC_OscConfig+0x334>
 80039ba:	4b6a      	ldr	r3, [pc, #424]	@ (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	4a69      	ldr	r2, [pc, #420]	@ (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 80039c0:	f023 0301 	bic.w	r3, r3, #1
 80039c4:	6213      	str	r3, [r2, #32]
 80039c6:	4b67      	ldr	r3, [pc, #412]	@ (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	4a66      	ldr	r2, [pc, #408]	@ (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 80039cc:	f023 0304 	bic.w	r3, r3, #4
 80039d0:	6213      	str	r3, [r2, #32]
 80039d2:	e01c      	b.n	8003a0e <HAL_RCC_OscConfig+0x36e>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	2b05      	cmp	r3, #5
 80039da:	d10c      	bne.n	80039f6 <HAL_RCC_OscConfig+0x356>
 80039dc:	4b61      	ldr	r3, [pc, #388]	@ (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	4a60      	ldr	r2, [pc, #384]	@ (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 80039e2:	f043 0304 	orr.w	r3, r3, #4
 80039e6:	6213      	str	r3, [r2, #32]
 80039e8:	4b5e      	ldr	r3, [pc, #376]	@ (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	4a5d      	ldr	r2, [pc, #372]	@ (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 80039ee:	f043 0301 	orr.w	r3, r3, #1
 80039f2:	6213      	str	r3, [r2, #32]
 80039f4:	e00b      	b.n	8003a0e <HAL_RCC_OscConfig+0x36e>
 80039f6:	4b5b      	ldr	r3, [pc, #364]	@ (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	4a5a      	ldr	r2, [pc, #360]	@ (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 80039fc:	f023 0301 	bic.w	r3, r3, #1
 8003a00:	6213      	str	r3, [r2, #32]
 8003a02:	4b58      	ldr	r3, [pc, #352]	@ (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	4a57      	ldr	r2, [pc, #348]	@ (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 8003a08:	f023 0304 	bic.w	r3, r3, #4
 8003a0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d015      	beq.n	8003a42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a16:	f7fd fe59 	bl	80016cc <HAL_GetTick>
 8003a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a1c:	e00a      	b.n	8003a34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a1e:	f7fd fe55 	bl	80016cc <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d901      	bls.n	8003a34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e0b1      	b.n	8003b98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a34:	4b4b      	ldr	r3, [pc, #300]	@ (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d0ee      	beq.n	8003a1e <HAL_RCC_OscConfig+0x37e>
 8003a40:	e014      	b.n	8003a6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a42:	f7fd fe43 	bl	80016cc <HAL_GetTick>
 8003a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a48:	e00a      	b.n	8003a60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a4a:	f7fd fe3f 	bl	80016cc <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e09b      	b.n	8003b98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a60:	4b40      	ldr	r3, [pc, #256]	@ (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1ee      	bne.n	8003a4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a6c:	7dfb      	ldrb	r3, [r7, #23]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d105      	bne.n	8003a7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a72:	4b3c      	ldr	r3, [pc, #240]	@ (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	4a3b      	ldr	r2, [pc, #236]	@ (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 8003a78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	69db      	ldr	r3, [r3, #28]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f000 8087 	beq.w	8003b96 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a88:	4b36      	ldr	r3, [pc, #216]	@ (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f003 030c 	and.w	r3, r3, #12
 8003a90:	2b08      	cmp	r3, #8
 8003a92:	d061      	beq.n	8003b58 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	69db      	ldr	r3, [r3, #28]
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d146      	bne.n	8003b2a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a9c:	4b33      	ldr	r3, [pc, #204]	@ (8003b6c <HAL_RCC_OscConfig+0x4cc>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa2:	f7fd fe13 	bl	80016cc <HAL_GetTick>
 8003aa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aa8:	e008      	b.n	8003abc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aaa:	f7fd fe0f 	bl	80016cc <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d901      	bls.n	8003abc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e06d      	b.n	8003b98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003abc:	4b29      	ldr	r3, [pc, #164]	@ (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1f0      	bne.n	8003aaa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ad0:	d108      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ad2:	4b24      	ldr	r3, [pc, #144]	@ (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	4921      	ldr	r1, [pc, #132]	@ (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ae4:	4b1f      	ldr	r3, [pc, #124]	@ (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a19      	ldr	r1, [r3, #32]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af4:	430b      	orrs	r3, r1
 8003af6:	491b      	ldr	r1, [pc, #108]	@ (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003afc:	4b1b      	ldr	r3, [pc, #108]	@ (8003b6c <HAL_RCC_OscConfig+0x4cc>)
 8003afe:	2201      	movs	r2, #1
 8003b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b02:	f7fd fde3 	bl	80016cc <HAL_GetTick>
 8003b06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b08:	e008      	b.n	8003b1c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b0a:	f7fd fddf 	bl	80016cc <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d901      	bls.n	8003b1c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e03d      	b.n	8003b98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b1c:	4b11      	ldr	r3, [pc, #68]	@ (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d0f0      	beq.n	8003b0a <HAL_RCC_OscConfig+0x46a>
 8003b28:	e035      	b.n	8003b96 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b2a:	4b10      	ldr	r3, [pc, #64]	@ (8003b6c <HAL_RCC_OscConfig+0x4cc>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b30:	f7fd fdcc 	bl	80016cc <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b36:	e008      	b.n	8003b4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b38:	f7fd fdc8 	bl	80016cc <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e026      	b.n	8003b98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b4a:	4b06      	ldr	r3, [pc, #24]	@ (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1f0      	bne.n	8003b38 <HAL_RCC_OscConfig+0x498>
 8003b56:	e01e      	b.n	8003b96 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	69db      	ldr	r3, [r3, #28]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d107      	bne.n	8003b70 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e019      	b.n	8003b98 <HAL_RCC_OscConfig+0x4f8>
 8003b64:	40021000 	.word	0x40021000
 8003b68:	40007000 	.word	0x40007000
 8003b6c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b70:	4b0b      	ldr	r3, [pc, #44]	@ (8003ba0 <HAL_RCC_OscConfig+0x500>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d106      	bne.n	8003b92 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d001      	beq.n	8003b96 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e000      	b.n	8003b98 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3718      	adds	r7, #24
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	40021000 	.word	0x40021000

08003ba4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d101      	bne.n	8003bb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e0d0      	b.n	8003d5a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bb8:	4b6a      	ldr	r3, [pc, #424]	@ (8003d64 <HAL_RCC_ClockConfig+0x1c0>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0307 	and.w	r3, r3, #7
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d910      	bls.n	8003be8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bc6:	4b67      	ldr	r3, [pc, #412]	@ (8003d64 <HAL_RCC_ClockConfig+0x1c0>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f023 0207 	bic.w	r2, r3, #7
 8003bce:	4965      	ldr	r1, [pc, #404]	@ (8003d64 <HAL_RCC_ClockConfig+0x1c0>)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bd6:	4b63      	ldr	r3, [pc, #396]	@ (8003d64 <HAL_RCC_ClockConfig+0x1c0>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0307 	and.w	r3, r3, #7
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d001      	beq.n	8003be8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e0b8      	b.n	8003d5a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d020      	beq.n	8003c36 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0304 	and.w	r3, r3, #4
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d005      	beq.n	8003c0c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c00:	4b59      	ldr	r3, [pc, #356]	@ (8003d68 <HAL_RCC_ClockConfig+0x1c4>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	4a58      	ldr	r2, [pc, #352]	@ (8003d68 <HAL_RCC_ClockConfig+0x1c4>)
 8003c06:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003c0a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0308 	and.w	r3, r3, #8
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d005      	beq.n	8003c24 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c18:	4b53      	ldr	r3, [pc, #332]	@ (8003d68 <HAL_RCC_ClockConfig+0x1c4>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	4a52      	ldr	r2, [pc, #328]	@ (8003d68 <HAL_RCC_ClockConfig+0x1c4>)
 8003c1e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003c22:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c24:	4b50      	ldr	r3, [pc, #320]	@ (8003d68 <HAL_RCC_ClockConfig+0x1c4>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	494d      	ldr	r1, [pc, #308]	@ (8003d68 <HAL_RCC_ClockConfig+0x1c4>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d040      	beq.n	8003cc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d107      	bne.n	8003c5a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c4a:	4b47      	ldr	r3, [pc, #284]	@ (8003d68 <HAL_RCC_ClockConfig+0x1c4>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d115      	bne.n	8003c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e07f      	b.n	8003d5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d107      	bne.n	8003c72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c62:	4b41      	ldr	r3, [pc, #260]	@ (8003d68 <HAL_RCC_ClockConfig+0x1c4>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d109      	bne.n	8003c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e073      	b.n	8003d5a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c72:	4b3d      	ldr	r3, [pc, #244]	@ (8003d68 <HAL_RCC_ClockConfig+0x1c4>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0302 	and.w	r3, r3, #2
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e06b      	b.n	8003d5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c82:	4b39      	ldr	r3, [pc, #228]	@ (8003d68 <HAL_RCC_ClockConfig+0x1c4>)
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f023 0203 	bic.w	r2, r3, #3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	4936      	ldr	r1, [pc, #216]	@ (8003d68 <HAL_RCC_ClockConfig+0x1c4>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c94:	f7fd fd1a 	bl	80016cc <HAL_GetTick>
 8003c98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c9a:	e00a      	b.n	8003cb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c9c:	f7fd fd16 	bl	80016cc <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e053      	b.n	8003d5a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cb2:	4b2d      	ldr	r3, [pc, #180]	@ (8003d68 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f003 020c 	and.w	r2, r3, #12
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d1eb      	bne.n	8003c9c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cc4:	4b27      	ldr	r3, [pc, #156]	@ (8003d64 <HAL_RCC_ClockConfig+0x1c0>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0307 	and.w	r3, r3, #7
 8003ccc:	683a      	ldr	r2, [r7, #0]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d210      	bcs.n	8003cf4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cd2:	4b24      	ldr	r3, [pc, #144]	@ (8003d64 <HAL_RCC_ClockConfig+0x1c0>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f023 0207 	bic.w	r2, r3, #7
 8003cda:	4922      	ldr	r1, [pc, #136]	@ (8003d64 <HAL_RCC_ClockConfig+0x1c0>)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ce2:	4b20      	ldr	r3, [pc, #128]	@ (8003d64 <HAL_RCC_ClockConfig+0x1c0>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0307 	and.w	r3, r3, #7
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d001      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e032      	b.n	8003d5a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0304 	and.w	r3, r3, #4
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d008      	beq.n	8003d12 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d00:	4b19      	ldr	r3, [pc, #100]	@ (8003d68 <HAL_RCC_ClockConfig+0x1c4>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	4916      	ldr	r1, [pc, #88]	@ (8003d68 <HAL_RCC_ClockConfig+0x1c4>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0308 	and.w	r3, r3, #8
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d009      	beq.n	8003d32 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d1e:	4b12      	ldr	r3, [pc, #72]	@ (8003d68 <HAL_RCC_ClockConfig+0x1c4>)
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	490e      	ldr	r1, [pc, #56]	@ (8003d68 <HAL_RCC_ClockConfig+0x1c4>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d32:	f000 f821 	bl	8003d78 <HAL_RCC_GetSysClockFreq>
 8003d36:	4602      	mov	r2, r0
 8003d38:	4b0b      	ldr	r3, [pc, #44]	@ (8003d68 <HAL_RCC_ClockConfig+0x1c4>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	091b      	lsrs	r3, r3, #4
 8003d3e:	f003 030f 	and.w	r3, r3, #15
 8003d42:	490a      	ldr	r1, [pc, #40]	@ (8003d6c <HAL_RCC_ClockConfig+0x1c8>)
 8003d44:	5ccb      	ldrb	r3, [r1, r3]
 8003d46:	fa22 f303 	lsr.w	r3, r2, r3
 8003d4a:	4a09      	ldr	r2, [pc, #36]	@ (8003d70 <HAL_RCC_ClockConfig+0x1cc>)
 8003d4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d4e:	4b09      	ldr	r3, [pc, #36]	@ (8003d74 <HAL_RCC_ClockConfig+0x1d0>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7fd fc78 	bl	8001648 <HAL_InitTick>

  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	40022000 	.word	0x40022000
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	0800593c 	.word	0x0800593c
 8003d70:	20000000 	.word	0x20000000
 8003d74:	20000004 	.word	0x20000004

08003d78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b087      	sub	sp, #28
 8003d7c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	60fb      	str	r3, [r7, #12]
 8003d82:	2300      	movs	r3, #0
 8003d84:	60bb      	str	r3, [r7, #8]
 8003d86:	2300      	movs	r3, #0
 8003d88:	617b      	str	r3, [r7, #20]
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003d92:	4b1e      	ldr	r3, [pc, #120]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x94>)
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f003 030c 	and.w	r3, r3, #12
 8003d9e:	2b04      	cmp	r3, #4
 8003da0:	d002      	beq.n	8003da8 <HAL_RCC_GetSysClockFreq+0x30>
 8003da2:	2b08      	cmp	r3, #8
 8003da4:	d003      	beq.n	8003dae <HAL_RCC_GetSysClockFreq+0x36>
 8003da6:	e027      	b.n	8003df8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003da8:	4b19      	ldr	r3, [pc, #100]	@ (8003e10 <HAL_RCC_GetSysClockFreq+0x98>)
 8003daa:	613b      	str	r3, [r7, #16]
      break;
 8003dac:	e027      	b.n	8003dfe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	0c9b      	lsrs	r3, r3, #18
 8003db2:	f003 030f 	and.w	r3, r3, #15
 8003db6:	4a17      	ldr	r2, [pc, #92]	@ (8003e14 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003db8:	5cd3      	ldrb	r3, [r2, r3]
 8003dba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d010      	beq.n	8003de8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003dc6:	4b11      	ldr	r3, [pc, #68]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x94>)
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	0c5b      	lsrs	r3, r3, #17
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	4a11      	ldr	r2, [pc, #68]	@ (8003e18 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003dd2:	5cd3      	ldrb	r3, [r2, r3]
 8003dd4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a0d      	ldr	r2, [pc, #52]	@ (8003e10 <HAL_RCC_GetSysClockFreq+0x98>)
 8003dda:	fb03 f202 	mul.w	r2, r3, r2
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de4:	617b      	str	r3, [r7, #20]
 8003de6:	e004      	b.n	8003df2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a0c      	ldr	r2, [pc, #48]	@ (8003e1c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003dec:	fb02 f303 	mul.w	r3, r2, r3
 8003df0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	613b      	str	r3, [r7, #16]
      break;
 8003df6:	e002      	b.n	8003dfe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003df8:	4b05      	ldr	r3, [pc, #20]	@ (8003e10 <HAL_RCC_GetSysClockFreq+0x98>)
 8003dfa:	613b      	str	r3, [r7, #16]
      break;
 8003dfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dfe:	693b      	ldr	r3, [r7, #16]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	371c      	adds	r7, #28
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bc80      	pop	{r7}
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	007a1200 	.word	0x007a1200
 8003e14:	08005954 	.word	0x08005954
 8003e18:	08005964 	.word	0x08005964
 8003e1c:	003d0900 	.word	0x003d0900

08003e20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e20:	b480      	push	{r7}
 8003e22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e24:	4b02      	ldr	r3, [pc, #8]	@ (8003e30 <HAL_RCC_GetHCLKFreq+0x10>)
 8003e26:	681b      	ldr	r3, [r3, #0]
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bc80      	pop	{r7}
 8003e2e:	4770      	bx	lr
 8003e30:	20000000 	.word	0x20000000

08003e34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e38:	f7ff fff2 	bl	8003e20 <HAL_RCC_GetHCLKFreq>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	4b05      	ldr	r3, [pc, #20]	@ (8003e54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	0a1b      	lsrs	r3, r3, #8
 8003e44:	f003 0307 	and.w	r3, r3, #7
 8003e48:	4903      	ldr	r1, [pc, #12]	@ (8003e58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e4a:	5ccb      	ldrb	r3, [r1, r3]
 8003e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	40021000 	.word	0x40021000
 8003e58:	0800594c 	.word	0x0800594c

08003e5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e60:	f7ff ffde 	bl	8003e20 <HAL_RCC_GetHCLKFreq>
 8003e64:	4602      	mov	r2, r0
 8003e66:	4b05      	ldr	r3, [pc, #20]	@ (8003e7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	0adb      	lsrs	r3, r3, #11
 8003e6c:	f003 0307 	and.w	r3, r3, #7
 8003e70:	4903      	ldr	r1, [pc, #12]	@ (8003e80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e72:	5ccb      	ldrb	r3, [r1, r3]
 8003e74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	40021000 	.word	0x40021000
 8003e80:	0800594c 	.word	0x0800594c

08003e84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8003eb8 <RCC_Delay+0x34>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a0a      	ldr	r2, [pc, #40]	@ (8003ebc <RCC_Delay+0x38>)
 8003e92:	fba2 2303 	umull	r2, r3, r2, r3
 8003e96:	0a5b      	lsrs	r3, r3, #9
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	fb02 f303 	mul.w	r3, r2, r3
 8003e9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ea0:	bf00      	nop
  }
  while (Delay --);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	1e5a      	subs	r2, r3, #1
 8003ea6:	60fa      	str	r2, [r7, #12]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1f9      	bne.n	8003ea0 <RCC_Delay+0x1c>
}
 8003eac:	bf00      	nop
 8003eae:	bf00      	nop
 8003eb0:	3714      	adds	r7, #20
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bc80      	pop	{r7}
 8003eb6:	4770      	bx	lr
 8003eb8:	20000000 	.word	0x20000000
 8003ebc:	10624dd3 	.word	0x10624dd3

08003ec0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	613b      	str	r3, [r7, #16]
 8003ecc:	2300      	movs	r3, #0
 8003ece:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0301 	and.w	r3, r3, #1
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d07d      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003edc:	2300      	movs	r3, #0
 8003ede:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ee0:	4b4f      	ldr	r3, [pc, #316]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ee2:	69db      	ldr	r3, [r3, #28]
 8003ee4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10d      	bne.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eec:	4b4c      	ldr	r3, [pc, #304]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eee:	69db      	ldr	r3, [r3, #28]
 8003ef0:	4a4b      	ldr	r2, [pc, #300]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ef2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ef6:	61d3      	str	r3, [r2, #28]
 8003ef8:	4b49      	ldr	r3, [pc, #292]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003efa:	69db      	ldr	r3, [r3, #28]
 8003efc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f00:	60bb      	str	r3, [r7, #8]
 8003f02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f04:	2301      	movs	r3, #1
 8003f06:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f08:	4b46      	ldr	r3, [pc, #280]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d118      	bne.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f14:	4b43      	ldr	r3, [pc, #268]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a42      	ldr	r2, [pc, #264]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f20:	f7fd fbd4 	bl	80016cc <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f26:	e008      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f28:	f7fd fbd0 	bl	80016cc <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b64      	cmp	r3, #100	@ 0x64
 8003f34:	d901      	bls.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e06d      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f3a:	4b3a      	ldr	r3, [pc, #232]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d0f0      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f46:	4b36      	ldr	r3, [pc, #216]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f4e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d02e      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d027      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f64:	4b2e      	ldr	r3, [pc, #184]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f66:	6a1b      	ldr	r3, [r3, #32]
 8003f68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f6c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f6e:	4b2e      	ldr	r3, [pc, #184]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f70:	2201      	movs	r2, #1
 8003f72:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f74:	4b2c      	ldr	r3, [pc, #176]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003f7a:	4a29      	ldr	r2, [pc, #164]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d014      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f8a:	f7fd fb9f 	bl	80016cc <HAL_GetTick>
 8003f8e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f90:	e00a      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f92:	f7fd fb9b 	bl	80016cc <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d901      	bls.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e036      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fa8:	4b1d      	ldr	r3, [pc, #116]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d0ee      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fb4:	4b1a      	ldr	r3, [pc, #104]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	4917      	ldr	r1, [pc, #92]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003fc6:	7dfb      	ldrb	r3, [r7, #23]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d105      	bne.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fcc:	4b14      	ldr	r3, [pc, #80]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fce:	69db      	ldr	r3, [r3, #28]
 8003fd0:	4a13      	ldr	r2, [pc, #76]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fd6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0302 	and.w	r3, r3, #2
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d008      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003fe4:	4b0e      	ldr	r3, [pc, #56]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	490b      	ldr	r1, [pc, #44]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0310 	and.w	r3, r3, #16
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d008      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004002:	4b07      	ldr	r3, [pc, #28]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	4904      	ldr	r1, [pc, #16]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004010:	4313      	orrs	r3, r2
 8004012:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3718      	adds	r7, #24
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	40021000 	.word	0x40021000
 8004024:	40007000 	.word	0x40007000
 8004028:	42420440 	.word	0x42420440

0800402c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b088      	sub	sp, #32
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004034:	2300      	movs	r3, #0
 8004036:	617b      	str	r3, [r7, #20]
 8004038:	2300      	movs	r3, #0
 800403a:	61fb      	str	r3, [r7, #28]
 800403c:	2300      	movs	r3, #0
 800403e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004040:	2300      	movs	r3, #0
 8004042:	60fb      	str	r3, [r7, #12]
 8004044:	2300      	movs	r3, #0
 8004046:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b10      	cmp	r3, #16
 800404c:	d00a      	beq.n	8004064 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2b10      	cmp	r3, #16
 8004052:	f200 808a 	bhi.w	800416a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d045      	beq.n	80040e8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2b02      	cmp	r3, #2
 8004060:	d075      	beq.n	800414e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004062:	e082      	b.n	800416a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004064:	4b46      	ldr	r3, [pc, #280]	@ (8004180 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800406a:	4b45      	ldr	r3, [pc, #276]	@ (8004180 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d07b      	beq.n	800416e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	0c9b      	lsrs	r3, r3, #18
 800407a:	f003 030f 	and.w	r3, r3, #15
 800407e:	4a41      	ldr	r2, [pc, #260]	@ (8004184 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004080:	5cd3      	ldrb	r3, [r2, r3]
 8004082:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d015      	beq.n	80040ba <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800408e:	4b3c      	ldr	r3, [pc, #240]	@ (8004180 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	0c5b      	lsrs	r3, r3, #17
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	4a3b      	ldr	r2, [pc, #236]	@ (8004188 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800409a:	5cd3      	ldrb	r3, [r2, r3]
 800409c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00d      	beq.n	80040c4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80040a8:	4a38      	ldr	r2, [pc, #224]	@ (800418c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	fb02 f303 	mul.w	r3, r2, r3
 80040b6:	61fb      	str	r3, [r7, #28]
 80040b8:	e004      	b.n	80040c4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	4a34      	ldr	r2, [pc, #208]	@ (8004190 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80040be:	fb02 f303 	mul.w	r3, r2, r3
 80040c2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80040c4:	4b2e      	ldr	r3, [pc, #184]	@ (8004180 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040d0:	d102      	bne.n	80040d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	61bb      	str	r3, [r7, #24]
      break;
 80040d6:	e04a      	b.n	800416e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	005b      	lsls	r3, r3, #1
 80040dc:	4a2d      	ldr	r2, [pc, #180]	@ (8004194 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80040de:	fba2 2303 	umull	r2, r3, r2, r3
 80040e2:	085b      	lsrs	r3, r3, #1
 80040e4:	61bb      	str	r3, [r7, #24]
      break;
 80040e6:	e042      	b.n	800416e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80040e8:	4b25      	ldr	r3, [pc, #148]	@ (8004180 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040f8:	d108      	bne.n	800410c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d003      	beq.n	800410c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004104:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004108:	61bb      	str	r3, [r7, #24]
 800410a:	e01f      	b.n	800414c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004112:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004116:	d109      	bne.n	800412c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004118:	4b19      	ldr	r3, [pc, #100]	@ (8004180 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800411a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d003      	beq.n	800412c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004124:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004128:	61bb      	str	r3, [r7, #24]
 800412a:	e00f      	b.n	800414c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004132:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004136:	d11c      	bne.n	8004172 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004138:	4b11      	ldr	r3, [pc, #68]	@ (8004180 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d016      	beq.n	8004172 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004144:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8004148:	61bb      	str	r3, [r7, #24]
      break;
 800414a:	e012      	b.n	8004172 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800414c:	e011      	b.n	8004172 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800414e:	f7ff fe85 	bl	8003e5c <HAL_RCC_GetPCLK2Freq>
 8004152:	4602      	mov	r2, r0
 8004154:	4b0a      	ldr	r3, [pc, #40]	@ (8004180 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	0b9b      	lsrs	r3, r3, #14
 800415a:	f003 0303 	and.w	r3, r3, #3
 800415e:	3301      	adds	r3, #1
 8004160:	005b      	lsls	r3, r3, #1
 8004162:	fbb2 f3f3 	udiv	r3, r2, r3
 8004166:	61bb      	str	r3, [r7, #24]
      break;
 8004168:	e004      	b.n	8004174 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800416a:	bf00      	nop
 800416c:	e002      	b.n	8004174 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800416e:	bf00      	nop
 8004170:	e000      	b.n	8004174 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004172:	bf00      	nop
    }
  }
  return (frequency);
 8004174:	69bb      	ldr	r3, [r7, #24]
}
 8004176:	4618      	mov	r0, r3
 8004178:	3720      	adds	r7, #32
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	40021000 	.word	0x40021000
 8004184:	08005968 	.word	0x08005968
 8004188:	08005978 	.word	0x08005978
 800418c:	007a1200 	.word	0x007a1200
 8004190:	003d0900 	.word	0x003d0900
 8004194:	aaaaaaab 	.word	0xaaaaaaab

08004198 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80041a0:	2300      	movs	r3, #0
 80041a2:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e07a      	b.n	80042a4 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	7c5b      	ldrb	r3, [r3, #17]
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d105      	bne.n	80041c4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7fd f864 	bl	800128c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2202      	movs	r2, #2
 80041c8:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 f9be 	bl	800454c <HAL_RTC_WaitForSynchro>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d004      	beq.n	80041e0 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2204      	movs	r2, #4
 80041da:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e061      	b.n	80042a4 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f000 fa77 	bl	80046d4 <RTC_EnterInitMode>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d004      	beq.n	80041f6 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2204      	movs	r2, #4
 80041f0:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e056      	b.n	80042a4 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f022 0207 	bic.w	r2, r2, #7
 8004204:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d005      	beq.n	800421a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800420e:	4b27      	ldr	r3, [pc, #156]	@ (80042ac <HAL_RTC_Init+0x114>)
 8004210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004212:	4a26      	ldr	r2, [pc, #152]	@ (80042ac <HAL_RTC_Init+0x114>)
 8004214:	f023 0301 	bic.w	r3, r3, #1
 8004218:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800421a:	4b24      	ldr	r3, [pc, #144]	@ (80042ac <HAL_RTC_Init+0x114>)
 800421c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800421e:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	4921      	ldr	r1, [pc, #132]	@ (80042ac <HAL_RTC_Init+0x114>)
 8004228:	4313      	orrs	r3, r2
 800422a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004234:	d003      	beq.n	800423e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	60fb      	str	r3, [r7, #12]
 800423c:	e00e      	b.n	800425c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800423e:	2001      	movs	r0, #1
 8004240:	f7ff fef4 	bl	800402c <HAL_RCCEx_GetPeriphCLKFreq>
 8004244:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d104      	bne.n	8004256 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2204      	movs	r2, #4
 8004250:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e026      	b.n	80042a4 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	3b01      	subs	r3, #1
 800425a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	0c1a      	lsrs	r2, r3, #16
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f002 020f 	and.w	r2, r2, #15
 8004268:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	b292      	uxth	r2, r2
 8004272:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 fa55 	bl	8004724 <RTC_ExitInitMode>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d004      	beq.n	800428a <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2204      	movs	r2, #4
 8004284:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e00c      	b.n	80042a4 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80042a2:	2300      	movs	r3, #0
  }
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3710      	adds	r7, #16
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	40006c00 	.word	0x40006c00

080042b0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80042b0:	b590      	push	{r4, r7, lr}
 80042b2:	b087      	sub	sp, #28
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80042bc:	2300      	movs	r3, #0
 80042be:	617b      	str	r3, [r7, #20]
 80042c0:	2300      	movs	r3, #0
 80042c2:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d002      	beq.n	80042d0 <HAL_RTC_SetTime+0x20>
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d101      	bne.n	80042d4 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e080      	b.n	80043d6 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	7c1b      	ldrb	r3, [r3, #16]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d101      	bne.n	80042e0 <HAL_RTC_SetTime+0x30>
 80042dc:	2302      	movs	r3, #2
 80042de:	e07a      	b.n	80043d6 <HAL_RTC_SetTime+0x126>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2201      	movs	r2, #1
 80042e4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2202      	movs	r2, #2
 80042ea:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d113      	bne.n	800431a <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	461a      	mov	r2, r3
 80042f8:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80042fc:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	785b      	ldrb	r3, [r3, #1]
 8004304:	4619      	mov	r1, r3
 8004306:	460b      	mov	r3, r1
 8004308:	011b      	lsls	r3, r3, #4
 800430a:	1a5b      	subs	r3, r3, r1
 800430c:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800430e:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8004310:	68ba      	ldr	r2, [r7, #8]
 8004312:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004314:	4413      	add	r3, r2
 8004316:	617b      	str	r3, [r7, #20]
 8004318:	e01e      	b.n	8004358 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	4618      	mov	r0, r3
 8004320:	f000 fa28 	bl	8004774 <RTC_Bcd2ToByte>
 8004324:	4603      	mov	r3, r0
 8004326:	461a      	mov	r2, r3
 8004328:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800432c:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	785b      	ldrb	r3, [r3, #1]
 8004334:	4618      	mov	r0, r3
 8004336:	f000 fa1d 	bl	8004774 <RTC_Bcd2ToByte>
 800433a:	4603      	mov	r3, r0
 800433c:	461a      	mov	r2, r3
 800433e:	4613      	mov	r3, r2
 8004340:	011b      	lsls	r3, r3, #4
 8004342:	1a9b      	subs	r3, r3, r2
 8004344:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004346:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	789b      	ldrb	r3, [r3, #2]
 800434c:	4618      	mov	r0, r3
 800434e:	f000 fa11 	bl	8004774 <RTC_Bcd2ToByte>
 8004352:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004354:	4423      	add	r3, r4
 8004356:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004358:	6979      	ldr	r1, [r7, #20]
 800435a:	68f8      	ldr	r0, [r7, #12]
 800435c:	f000 f953 	bl	8004606 <RTC_WriteTimeCounter>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d007      	beq.n	8004376 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2204      	movs	r2, #4
 800436a:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e02f      	b.n	80043d6 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	685a      	ldr	r2, [r3, #4]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 0205 	bic.w	r2, r2, #5
 8004384:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f000 f964 	bl	8004654 <RTC_ReadAlarmCounter>
 800438c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004394:	d018      	beq.n	80043c8 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8004396:	693a      	ldr	r2, [r7, #16]
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	429a      	cmp	r2, r3
 800439c:	d214      	bcs.n	80043c8 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 80043a4:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80043a8:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80043aa:	6939      	ldr	r1, [r7, #16]
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	f000 f96a 	bl	8004686 <RTC_WriteAlarmCounter>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d007      	beq.n	80043c8 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2204      	movs	r2, #4
 80043bc:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e006      	b.n	80043d6 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2201      	movs	r2, #1
 80043cc:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80043d4:	2300      	movs	r3, #0
  }
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	371c      	adds	r7, #28
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd90      	pop	{r4, r7, pc}
	...

080043e0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b088      	sub	sp, #32
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80043ec:	2300      	movs	r3, #0
 80043ee:	61fb      	str	r3, [r7, #28]
 80043f0:	2300      	movs	r3, #0
 80043f2:	61bb      	str	r3, [r7, #24]
 80043f4:	2300      	movs	r3, #0
 80043f6:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d002      	beq.n	8004404 <HAL_RTC_SetDate+0x24>
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d101      	bne.n	8004408 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e097      	b.n	8004538 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	7c1b      	ldrb	r3, [r3, #16]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d101      	bne.n	8004414 <HAL_RTC_SetDate+0x34>
 8004410:	2302      	movs	r3, #2
 8004412:	e091      	b.n	8004538 <HAL_RTC_SetDate+0x158>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2201      	movs	r2, #1
 8004418:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2202      	movs	r2, #2
 800441e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10c      	bne.n	8004440 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	78da      	ldrb	r2, [r3, #3]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	785a      	ldrb	r2, [r3, #1]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	789a      	ldrb	r2, [r3, #2]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	739a      	strb	r2, [r3, #14]
 800443e:	e01a      	b.n	8004476 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	78db      	ldrb	r3, [r3, #3]
 8004444:	4618      	mov	r0, r3
 8004446:	f000 f995 	bl	8004774 <RTC_Bcd2ToByte>
 800444a:	4603      	mov	r3, r0
 800444c:	461a      	mov	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	785b      	ldrb	r3, [r3, #1]
 8004456:	4618      	mov	r0, r3
 8004458:	f000 f98c 	bl	8004774 <RTC_Bcd2ToByte>
 800445c:	4603      	mov	r3, r0
 800445e:	461a      	mov	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	789b      	ldrb	r3, [r3, #2]
 8004468:	4618      	mov	r0, r3
 800446a:	f000 f983 	bl	8004774 <RTC_Bcd2ToByte>
 800446e:	4603      	mov	r3, r0
 8004470:	461a      	mov	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	7bdb      	ldrb	r3, [r3, #15]
 800447a:	4618      	mov	r0, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	7b59      	ldrb	r1, [r3, #13]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	7b9b      	ldrb	r3, [r3, #14]
 8004484:	461a      	mov	r2, r3
 8004486:	f000 f993 	bl	80047b0 <RTC_WeekDayNum>
 800448a:	4603      	mov	r3, r0
 800448c:	461a      	mov	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	7b1a      	ldrb	r2, [r3, #12]
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f000 f883 	bl	80045a6 <RTC_ReadTimeCounter>
 80044a0:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	4a26      	ldr	r2, [pc, #152]	@ (8004540 <HAL_RTC_SetDate+0x160>)
 80044a6:	fba2 2303 	umull	r2, r3, r2, r3
 80044aa:	0adb      	lsrs	r3, r3, #11
 80044ac:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	2b18      	cmp	r3, #24
 80044b2:	d93a      	bls.n	800452a <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	4a23      	ldr	r2, [pc, #140]	@ (8004544 <HAL_RTC_SetDate+0x164>)
 80044b8:	fba2 2303 	umull	r2, r3, r2, r3
 80044bc:	091b      	lsrs	r3, r3, #4
 80044be:	4a22      	ldr	r2, [pc, #136]	@ (8004548 <HAL_RTC_SetDate+0x168>)
 80044c0:	fb02 f303 	mul.w	r3, r2, r3
 80044c4:	69fa      	ldr	r2, [r7, #28]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80044ca:	69f9      	ldr	r1, [r7, #28]
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f000 f89a 	bl	8004606 <RTC_WriteTimeCounter>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d007      	beq.n	80044e8 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2204      	movs	r2, #4
 80044dc:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e027      	b.n	8004538 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f000 f8b3 	bl	8004654 <RTC_ReadAlarmCounter>
 80044ee:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f6:	d018      	beq.n	800452a <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d214      	bcs.n	800452a <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8004506:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800450a:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800450c:	69b9      	ldr	r1, [r7, #24]
 800450e:	68f8      	ldr	r0, [r7, #12]
 8004510:	f000 f8b9 	bl	8004686 <RTC_WriteAlarmCounter>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d007      	beq.n	800452a <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2204      	movs	r2, #4
 800451e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e006      	b.n	8004538 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2201      	movs	r2, #1
 800452e:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3720      	adds	r7, #32
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	91a2b3c5 	.word	0x91a2b3c5
 8004544:	aaaaaaab 	.word	0xaaaaaaab
 8004548:	00015180 	.word	0x00015180

0800454c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004554:	2300      	movs	r3, #0
 8004556:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e01d      	b.n	800459e <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 0208 	bic.w	r2, r2, #8
 8004570:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004572:	f7fd f8ab 	bl	80016cc <HAL_GetTick>
 8004576:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004578:	e009      	b.n	800458e <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800457a:	f7fd f8a7 	bl	80016cc <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004588:	d901      	bls.n	800458e <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e007      	b.n	800459e <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f003 0308 	and.w	r3, r3, #8
 8004598:	2b00      	cmp	r3, #0
 800459a:	d0ee      	beq.n	800457a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80045a6:	b480      	push	{r7}
 80045a8:	b087      	sub	sp, #28
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80045ae:	2300      	movs	r3, #0
 80045b0:	827b      	strh	r3, [r7, #18]
 80045b2:	2300      	movs	r3, #0
 80045b4:	823b      	strh	r3, [r7, #16]
 80045b6:	2300      	movs	r3, #0
 80045b8:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80045ba:	2300      	movs	r3, #0
 80045bc:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	69db      	ldr	r3, [r3, #28]
 80045cc:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80045d6:	8a7a      	ldrh	r2, [r7, #18]
 80045d8:	8a3b      	ldrh	r3, [r7, #16]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d008      	beq.n	80045f0 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80045de:	8a3b      	ldrh	r3, [r7, #16]
 80045e0:	041a      	lsls	r2, r3, #16
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	69db      	ldr	r3, [r3, #28]
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	4313      	orrs	r3, r2
 80045ec:	617b      	str	r3, [r7, #20]
 80045ee:	e004      	b.n	80045fa <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80045f0:	8a7b      	ldrh	r3, [r7, #18]
 80045f2:	041a      	lsls	r2, r3, #16
 80045f4:	89fb      	ldrh	r3, [r7, #14]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80045fa:	697b      	ldr	r3, [r7, #20]
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	371c      	adds	r7, #28
 8004600:	46bd      	mov	sp, r7
 8004602:	bc80      	pop	{r7}
 8004604:	4770      	bx	lr

08004606 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8004606:	b580      	push	{r7, lr}
 8004608:	b084      	sub	sp, #16
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
 800460e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004610:	2300      	movs	r3, #0
 8004612:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 f85d 	bl	80046d4 <RTC_EnterInitMode>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d002      	beq.n	8004626 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	73fb      	strb	r3, [r7, #15]
 8004624:	e011      	b.n	800464a <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	683a      	ldr	r2, [r7, #0]
 800462c:	0c12      	lsrs	r2, r2, #16
 800462e:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	683a      	ldr	r2, [r7, #0]
 8004636:	b292      	uxth	r2, r2
 8004638:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 f872 	bl	8004724 <RTC_ExitInitMode>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d001      	beq.n	800464a <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800464a:	7bfb      	ldrb	r3, [r7, #15]
}
 800464c:	4618      	mov	r0, r3
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 800465c:	2300      	movs	r3, #0
 800465e:	81fb      	strh	r3, [r7, #14]
 8004660:	2300      	movs	r3, #0
 8004662:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004672:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8004674:	89fb      	ldrh	r3, [r7, #14]
 8004676:	041a      	lsls	r2, r3, #16
 8004678:	89bb      	ldrh	r3, [r7, #12]
 800467a:	4313      	orrs	r3, r2
}
 800467c:	4618      	mov	r0, r3
 800467e:	3714      	adds	r7, #20
 8004680:	46bd      	mov	sp, r7
 8004682:	bc80      	pop	{r7}
 8004684:	4770      	bx	lr

08004686 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b084      	sub	sp, #16
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
 800468e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004690:	2300      	movs	r3, #0
 8004692:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 f81d 	bl	80046d4 <RTC_EnterInitMode>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d002      	beq.n	80046a6 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	73fb      	strb	r3, [r7, #15]
 80046a4:	e011      	b.n	80046ca <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	683a      	ldr	r2, [r7, #0]
 80046ac:	0c12      	lsrs	r2, r2, #16
 80046ae:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	683a      	ldr	r2, [r7, #0]
 80046b6:	b292      	uxth	r2, r2
 80046b8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 f832 	bl	8004724 <RTC_ExitInitMode>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d001      	beq.n	80046ca <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80046ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046dc:	2300      	movs	r3, #0
 80046de:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80046e0:	f7fc fff4 	bl	80016cc <HAL_GetTick>
 80046e4:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80046e6:	e009      	b.n	80046fc <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80046e8:	f7fc fff0 	bl	80016cc <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80046f6:	d901      	bls.n	80046fc <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e00f      	b.n	800471c <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f003 0320 	and.w	r3, r3, #32
 8004706:	2b00      	cmp	r3, #0
 8004708:	d0ee      	beq.n	80046e8 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	685a      	ldr	r2, [r3, #4]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f042 0210 	orr.w	r2, r2, #16
 8004718:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800472c:	2300      	movs	r3, #0
 800472e:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	685a      	ldr	r2, [r3, #4]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f022 0210 	bic.w	r2, r2, #16
 800473e:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004740:	f7fc ffc4 	bl	80016cc <HAL_GetTick>
 8004744:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004746:	e009      	b.n	800475c <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004748:	f7fc ffc0 	bl	80016cc <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004756:	d901      	bls.n	800475c <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e007      	b.n	800476c <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f003 0320 	and.w	r3, r3, #32
 8004766:	2b00      	cmp	r3, #0
 8004768:	d0ee      	beq.n	8004748 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	4603      	mov	r3, r0
 800477c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800477e:	2300      	movs	r3, #0
 8004780:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8004782:	79fb      	ldrb	r3, [r7, #7]
 8004784:	091b      	lsrs	r3, r3, #4
 8004786:	b2db      	uxtb	r3, r3
 8004788:	461a      	mov	r2, r3
 800478a:	4613      	mov	r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4413      	add	r3, r2
 8004790:	005b      	lsls	r3, r3, #1
 8004792:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8004794:	79fb      	ldrb	r3, [r7, #7]
 8004796:	f003 030f 	and.w	r3, r3, #15
 800479a:	b2da      	uxtb	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	4413      	add	r3, r2
 80047a2:	b2db      	uxtb	r3, r3
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3714      	adds	r7, #20
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bc80      	pop	{r7}
 80047ac:	4770      	bx	lr
	...

080047b0 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	460b      	mov	r3, r1
 80047ba:	70fb      	strb	r3, [r7, #3]
 80047bc:	4613      	mov	r3, r2
 80047be:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80047c0:	2300      	movs	r3, #0
 80047c2:	60bb      	str	r3, [r7, #8]
 80047c4:	2300      	movs	r3, #0
 80047c6:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80047ce:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80047d0:	78fb      	ldrb	r3, [r7, #3]
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d82d      	bhi.n	8004832 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80047d6:	78fa      	ldrb	r2, [r7, #3]
 80047d8:	4613      	mov	r3, r2
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	4413      	add	r3, r2
 80047de:	00db      	lsls	r3, r3, #3
 80047e0:	1a9b      	subs	r3, r3, r2
 80047e2:	4a2c      	ldr	r2, [pc, #176]	@ (8004894 <RTC_WeekDayNum+0xe4>)
 80047e4:	fba2 2303 	umull	r2, r3, r2, r3
 80047e8:	085a      	lsrs	r2, r3, #1
 80047ea:	78bb      	ldrb	r3, [r7, #2]
 80047ec:	441a      	add	r2, r3
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	441a      	add	r2, r3
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	3b01      	subs	r3, #1
 80047f6:	089b      	lsrs	r3, r3, #2
 80047f8:	441a      	add	r2, r3
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	3b01      	subs	r3, #1
 80047fe:	4926      	ldr	r1, [pc, #152]	@ (8004898 <RTC_WeekDayNum+0xe8>)
 8004800:	fba1 1303 	umull	r1, r3, r1, r3
 8004804:	095b      	lsrs	r3, r3, #5
 8004806:	1ad2      	subs	r2, r2, r3
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	3b01      	subs	r3, #1
 800480c:	4922      	ldr	r1, [pc, #136]	@ (8004898 <RTC_WeekDayNum+0xe8>)
 800480e:	fba1 1303 	umull	r1, r3, r1, r3
 8004812:	09db      	lsrs	r3, r3, #7
 8004814:	4413      	add	r3, r2
 8004816:	1d1a      	adds	r2, r3, #4
 8004818:	4b20      	ldr	r3, [pc, #128]	@ (800489c <RTC_WeekDayNum+0xec>)
 800481a:	fba3 1302 	umull	r1, r3, r3, r2
 800481e:	1ad1      	subs	r1, r2, r3
 8004820:	0849      	lsrs	r1, r1, #1
 8004822:	440b      	add	r3, r1
 8004824:	0899      	lsrs	r1, r3, #2
 8004826:	460b      	mov	r3, r1
 8004828:	00db      	lsls	r3, r3, #3
 800482a:	1a5b      	subs	r3, r3, r1
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	60fb      	str	r3, [r7, #12]
 8004830:	e029      	b.n	8004886 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8004832:	78fa      	ldrb	r2, [r7, #3]
 8004834:	4613      	mov	r3, r2
 8004836:	005b      	lsls	r3, r3, #1
 8004838:	4413      	add	r3, r2
 800483a:	00db      	lsls	r3, r3, #3
 800483c:	1a9b      	subs	r3, r3, r2
 800483e:	4a15      	ldr	r2, [pc, #84]	@ (8004894 <RTC_WeekDayNum+0xe4>)
 8004840:	fba2 2303 	umull	r2, r3, r2, r3
 8004844:	085a      	lsrs	r2, r3, #1
 8004846:	78bb      	ldrb	r3, [r7, #2]
 8004848:	441a      	add	r2, r3
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	441a      	add	r2, r3
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	089b      	lsrs	r3, r3, #2
 8004852:	441a      	add	r2, r3
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	4910      	ldr	r1, [pc, #64]	@ (8004898 <RTC_WeekDayNum+0xe8>)
 8004858:	fba1 1303 	umull	r1, r3, r1, r3
 800485c:	095b      	lsrs	r3, r3, #5
 800485e:	1ad2      	subs	r2, r2, r3
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	490d      	ldr	r1, [pc, #52]	@ (8004898 <RTC_WeekDayNum+0xe8>)
 8004864:	fba1 1303 	umull	r1, r3, r1, r3
 8004868:	09db      	lsrs	r3, r3, #7
 800486a:	4413      	add	r3, r2
 800486c:	1c9a      	adds	r2, r3, #2
 800486e:	4b0b      	ldr	r3, [pc, #44]	@ (800489c <RTC_WeekDayNum+0xec>)
 8004870:	fba3 1302 	umull	r1, r3, r3, r2
 8004874:	1ad1      	subs	r1, r2, r3
 8004876:	0849      	lsrs	r1, r1, #1
 8004878:	440b      	add	r3, r1
 800487a:	0899      	lsrs	r1, r3, #2
 800487c:	460b      	mov	r3, r1
 800487e:	00db      	lsls	r3, r3, #3
 8004880:	1a5b      	subs	r3, r3, r1
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	b2db      	uxtb	r3, r3
}
 800488a:	4618      	mov	r0, r3
 800488c:	3714      	adds	r7, #20
 800488e:	46bd      	mov	sp, r7
 8004890:	bc80      	pop	{r7}
 8004892:	4770      	bx	lr
 8004894:	38e38e39 	.word	0x38e38e39
 8004898:	51eb851f 	.word	0x51eb851f
 800489c:	24924925 	.word	0x24924925

080048a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e076      	b.n	80049a0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d108      	bne.n	80048cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80048c2:	d009      	beq.n	80048d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	61da      	str	r2, [r3, #28]
 80048ca:	e005      	b.n	80048d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d106      	bne.n	80048f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f7fc fcee 	bl	80012d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2202      	movs	r2, #2
 80048fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800490e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004920:	431a      	orrs	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800492a:	431a      	orrs	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	431a      	orrs	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	431a      	orrs	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004948:	431a      	orrs	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	69db      	ldr	r3, [r3, #28]
 800494e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004952:	431a      	orrs	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a1b      	ldr	r3, [r3, #32]
 8004958:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800495c:	ea42 0103 	orr.w	r1, r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004964:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	0c1a      	lsrs	r2, r3, #16
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f002 0204 	and.w	r2, r2, #4
 800497e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	69da      	ldr	r2, [r3, #28]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800498e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3708      	adds	r7, #8
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e042      	b.n	8004a40 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d106      	bne.n	80049d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f7fc fcda 	bl	8001388 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2224      	movs	r2, #36	@ 0x24
 80049d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68da      	ldr	r2, [r3, #12]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80049ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 fa09 	bl	8004e04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	691a      	ldr	r2, [r3, #16]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	695a      	ldr	r2, [r3, #20]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68da      	ldr	r2, [r3, #12]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2220      	movs	r2, #32
 8004a34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3708      	adds	r7, #8
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b08a      	sub	sp, #40	@ 0x28
 8004a4c:	af02      	add	r7, sp, #8
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	603b      	str	r3, [r7, #0]
 8004a54:	4613      	mov	r3, r2
 8004a56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	2b20      	cmp	r3, #32
 8004a66:	d175      	bne.n	8004b54 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d002      	beq.n	8004a74 <HAL_UART_Transmit+0x2c>
 8004a6e:	88fb      	ldrh	r3, [r7, #6]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d101      	bne.n	8004a78 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e06e      	b.n	8004b56 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2221      	movs	r2, #33	@ 0x21
 8004a82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a86:	f7fc fe21 	bl	80016cc <HAL_GetTick>
 8004a8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	88fa      	ldrh	r2, [r7, #6]
 8004a90:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	88fa      	ldrh	r2, [r7, #6]
 8004a96:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004aa0:	d108      	bne.n	8004ab4 <HAL_UART_Transmit+0x6c>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d104      	bne.n	8004ab4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	61bb      	str	r3, [r7, #24]
 8004ab2:	e003      	b.n	8004abc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004abc:	e02e      	b.n	8004b1c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	2180      	movs	r1, #128	@ 0x80
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f000 f8df 	bl	8004c8c <UART_WaitOnFlagUntilTimeout>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d005      	beq.n	8004ae0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e03a      	b.n	8004b56 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10b      	bne.n	8004afe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	881b      	ldrh	r3, [r3, #0]
 8004aea:	461a      	mov	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004af4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	3302      	adds	r3, #2
 8004afa:	61bb      	str	r3, [r7, #24]
 8004afc:	e007      	b.n	8004b0e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	781a      	ldrb	r2, [r3, #0]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	3b01      	subs	r3, #1
 8004b16:	b29a      	uxth	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1cb      	bne.n	8004abe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	9300      	str	r3, [sp, #0]
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	2140      	movs	r1, #64	@ 0x40
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	f000 f8ab 	bl	8004c8c <UART_WaitOnFlagUntilTimeout>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d005      	beq.n	8004b48 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e006      	b.n	8004b56 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2220      	movs	r2, #32
 8004b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004b50:	2300      	movs	r3, #0
 8004b52:	e000      	b.n	8004b56 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004b54:	2302      	movs	r3, #2
  }
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3720      	adds	r7, #32
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b08a      	sub	sp, #40	@ 0x28
 8004b62:	af02      	add	r7, sp, #8
 8004b64:	60f8      	str	r0, [r7, #12]
 8004b66:	60b9      	str	r1, [r7, #8]
 8004b68:	603b      	str	r3, [r7, #0]
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	2b20      	cmp	r3, #32
 8004b7c:	f040 8081 	bne.w	8004c82 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d002      	beq.n	8004b8c <HAL_UART_Receive+0x2e>
 8004b86:	88fb      	ldrh	r3, [r7, #6]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d101      	bne.n	8004b90 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e079      	b.n	8004c84 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2222      	movs	r2, #34	@ 0x22
 8004b9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ba4:	f7fc fd92 	bl	80016cc <HAL_GetTick>
 8004ba8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	88fa      	ldrh	r2, [r7, #6]
 8004bae:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	88fa      	ldrh	r2, [r7, #6]
 8004bb4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bbe:	d108      	bne.n	8004bd2 <HAL_UART_Receive+0x74>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d104      	bne.n	8004bd2 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	61bb      	str	r3, [r7, #24]
 8004bd0:	e003      	b.n	8004bda <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004bda:	e047      	b.n	8004c6c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	2200      	movs	r2, #0
 8004be4:	2120      	movs	r1, #32
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f000 f850 	bl	8004c8c <UART_WaitOnFlagUntilTimeout>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d005      	beq.n	8004bfe <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2220      	movs	r2, #32
 8004bf6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e042      	b.n	8004c84 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d10c      	bne.n	8004c1e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	3302      	adds	r3, #2
 8004c1a:	61bb      	str	r3, [r7, #24]
 8004c1c:	e01f      	b.n	8004c5e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c26:	d007      	beq.n	8004c38 <HAL_UART_Receive+0xda>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d10a      	bne.n	8004c46 <HAL_UART_Receive+0xe8>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d106      	bne.n	8004c46 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	b2da      	uxtb	r2, r3
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	701a      	strb	r2, [r3, #0]
 8004c44:	e008      	b.n	8004c58 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c52:	b2da      	uxtb	r2, r3
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	3b01      	subs	r3, #1
 8004c66:	b29a      	uxth	r2, r3
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1b2      	bne.n	8004bdc <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2220      	movs	r2, #32
 8004c7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	e000      	b.n	8004c84 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004c82:	2302      	movs	r3, #2
  }
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3720      	adds	r7, #32
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b086      	sub	sp, #24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	603b      	str	r3, [r7, #0]
 8004c98:	4613      	mov	r3, r2
 8004c9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c9c:	e03b      	b.n	8004d16 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c9e:	6a3b      	ldr	r3, [r7, #32]
 8004ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca4:	d037      	beq.n	8004d16 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ca6:	f7fc fd11 	bl	80016cc <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	6a3a      	ldr	r2, [r7, #32]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d302      	bcc.n	8004cbc <UART_WaitOnFlagUntilTimeout+0x30>
 8004cb6:	6a3b      	ldr	r3, [r7, #32]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d101      	bne.n	8004cc0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e03a      	b.n	8004d36 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	f003 0304 	and.w	r3, r3, #4
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d023      	beq.n	8004d16 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	2b80      	cmp	r3, #128	@ 0x80
 8004cd2:	d020      	beq.n	8004d16 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	2b40      	cmp	r3, #64	@ 0x40
 8004cd8:	d01d      	beq.n	8004d16 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0308 	and.w	r3, r3, #8
 8004ce4:	2b08      	cmp	r3, #8
 8004ce6:	d116      	bne.n	8004d16 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004ce8:	2300      	movs	r3, #0
 8004cea:	617b      	str	r3, [r7, #20]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	617b      	str	r3, [r7, #20]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	617b      	str	r3, [r7, #20]
 8004cfc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cfe:	68f8      	ldr	r0, [r7, #12]
 8004d00:	f000 f81d 	bl	8004d3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2208      	movs	r2, #8
 8004d08:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e00f      	b.n	8004d36 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	4013      	ands	r3, r2
 8004d20:	68ba      	ldr	r2, [r7, #8]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	bf0c      	ite	eq
 8004d26:	2301      	moveq	r3, #1
 8004d28:	2300      	movne	r3, #0
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	79fb      	ldrb	r3, [r7, #7]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d0b4      	beq.n	8004c9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3718      	adds	r7, #24
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b095      	sub	sp, #84	@ 0x54
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	330c      	adds	r3, #12
 8004d4c:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d50:	e853 3f00 	ldrex	r3, [r3]
 8004d54:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	330c      	adds	r3, #12
 8004d64:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d66:	643a      	str	r2, [r7, #64]	@ 0x40
 8004d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d6c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d6e:	e841 2300 	strex	r3, r2, [r1]
 8004d72:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1e5      	bne.n	8004d46 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	3314      	adds	r3, #20
 8004d80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d82:	6a3b      	ldr	r3, [r7, #32]
 8004d84:	e853 3f00 	ldrex	r3, [r3]
 8004d88:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	f023 0301 	bic.w	r3, r3, #1
 8004d90:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	3314      	adds	r3, #20
 8004d98:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004da0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004da2:	e841 2300 	strex	r3, r2, [r1]
 8004da6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1e5      	bne.n	8004d7a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d119      	bne.n	8004dea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	330c      	adds	r3, #12
 8004dbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	e853 3f00 	ldrex	r3, [r3]
 8004dc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	f023 0310 	bic.w	r3, r3, #16
 8004dcc:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	330c      	adds	r3, #12
 8004dd4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004dd6:	61ba      	str	r2, [r7, #24]
 8004dd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dda:	6979      	ldr	r1, [r7, #20]
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	e841 2300 	strex	r3, r2, [r1]
 8004de2:	613b      	str	r3, [r7, #16]
   return(result);
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1e5      	bne.n	8004db6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2220      	movs	r2, #32
 8004dee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004df8:	bf00      	nop
 8004dfa:	3754      	adds	r7, #84	@ 0x54
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bc80      	pop	{r7}
 8004e00:	4770      	bx	lr
	...

08004e04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68da      	ldr	r2, [r3, #12]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	689a      	ldr	r2, [r3, #8]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	695b      	ldr	r3, [r3, #20]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004e3e:	f023 030c 	bic.w	r3, r3, #12
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	6812      	ldr	r2, [r2, #0]
 8004e46:	68b9      	ldr	r1, [r7, #8]
 8004e48:	430b      	orrs	r3, r1
 8004e4a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	699a      	ldr	r2, [r3, #24]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a2c      	ldr	r2, [pc, #176]	@ (8004f18 <UART_SetConfig+0x114>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d103      	bne.n	8004e74 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004e6c:	f7fe fff6 	bl	8003e5c <HAL_RCC_GetPCLK2Freq>
 8004e70:	60f8      	str	r0, [r7, #12]
 8004e72:	e002      	b.n	8004e7a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004e74:	f7fe ffde 	bl	8003e34 <HAL_RCC_GetPCLK1Freq>
 8004e78:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	4413      	add	r3, r2
 8004e82:	009a      	lsls	r2, r3, #2
 8004e84:	441a      	add	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e90:	4a22      	ldr	r2, [pc, #136]	@ (8004f1c <UART_SetConfig+0x118>)
 8004e92:	fba2 2303 	umull	r2, r3, r2, r3
 8004e96:	095b      	lsrs	r3, r3, #5
 8004e98:	0119      	lsls	r1, r3, #4
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	4413      	add	r3, r2
 8004ea2:	009a      	lsls	r2, r3, #2
 8004ea4:	441a      	add	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	fbb2 f2f3 	udiv	r2, r2, r3
 8004eb0:	4b1a      	ldr	r3, [pc, #104]	@ (8004f1c <UART_SetConfig+0x118>)
 8004eb2:	fba3 0302 	umull	r0, r3, r3, r2
 8004eb6:	095b      	lsrs	r3, r3, #5
 8004eb8:	2064      	movs	r0, #100	@ 0x64
 8004eba:	fb00 f303 	mul.w	r3, r0, r3
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	011b      	lsls	r3, r3, #4
 8004ec2:	3332      	adds	r3, #50	@ 0x32
 8004ec4:	4a15      	ldr	r2, [pc, #84]	@ (8004f1c <UART_SetConfig+0x118>)
 8004ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eca:	095b      	lsrs	r3, r3, #5
 8004ecc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ed0:	4419      	add	r1, r3
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	4413      	add	r3, r2
 8004eda:	009a      	lsls	r2, r3, #2
 8004edc:	441a      	add	r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8004f1c <UART_SetConfig+0x118>)
 8004eea:	fba3 0302 	umull	r0, r3, r3, r2
 8004eee:	095b      	lsrs	r3, r3, #5
 8004ef0:	2064      	movs	r0, #100	@ 0x64
 8004ef2:	fb00 f303 	mul.w	r3, r0, r3
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	011b      	lsls	r3, r3, #4
 8004efa:	3332      	adds	r3, #50	@ 0x32
 8004efc:	4a07      	ldr	r2, [pc, #28]	@ (8004f1c <UART_SetConfig+0x118>)
 8004efe:	fba2 2303 	umull	r2, r3, r2, r3
 8004f02:	095b      	lsrs	r3, r3, #5
 8004f04:	f003 020f 	and.w	r2, r3, #15
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	440a      	add	r2, r1
 8004f0e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004f10:	bf00      	nop
 8004f12:	3710      	adds	r7, #16
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	40013800 	.word	0x40013800
 8004f1c:	51eb851f 	.word	0x51eb851f

08004f20 <siprintf>:
 8004f20:	b40e      	push	{r1, r2, r3}
 8004f22:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004f26:	b510      	push	{r4, lr}
 8004f28:	2400      	movs	r4, #0
 8004f2a:	b09d      	sub	sp, #116	@ 0x74
 8004f2c:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004f2e:	9002      	str	r0, [sp, #8]
 8004f30:	9006      	str	r0, [sp, #24]
 8004f32:	9107      	str	r1, [sp, #28]
 8004f34:	9104      	str	r1, [sp, #16]
 8004f36:	4809      	ldr	r0, [pc, #36]	@ (8004f5c <siprintf+0x3c>)
 8004f38:	4909      	ldr	r1, [pc, #36]	@ (8004f60 <siprintf+0x40>)
 8004f3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f3e:	9105      	str	r1, [sp, #20]
 8004f40:	6800      	ldr	r0, [r0, #0]
 8004f42:	a902      	add	r1, sp, #8
 8004f44:	9301      	str	r3, [sp, #4]
 8004f46:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004f48:	f000 f9a6 	bl	8005298 <_svfiprintf_r>
 8004f4c:	9b02      	ldr	r3, [sp, #8]
 8004f4e:	701c      	strb	r4, [r3, #0]
 8004f50:	b01d      	add	sp, #116	@ 0x74
 8004f52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f56:	b003      	add	sp, #12
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	2000000c 	.word	0x2000000c
 8004f60:	ffff0208 	.word	0xffff0208

08004f64 <memset>:
 8004f64:	4603      	mov	r3, r0
 8004f66:	4402      	add	r2, r0
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d100      	bne.n	8004f6e <memset+0xa>
 8004f6c:	4770      	bx	lr
 8004f6e:	f803 1b01 	strb.w	r1, [r3], #1
 8004f72:	e7f9      	b.n	8004f68 <memset+0x4>

08004f74 <strncpy>:
 8004f74:	4603      	mov	r3, r0
 8004f76:	b510      	push	{r4, lr}
 8004f78:	3901      	subs	r1, #1
 8004f7a:	b132      	cbz	r2, 8004f8a <strncpy+0x16>
 8004f7c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004f80:	3a01      	subs	r2, #1
 8004f82:	f803 4b01 	strb.w	r4, [r3], #1
 8004f86:	2c00      	cmp	r4, #0
 8004f88:	d1f7      	bne.n	8004f7a <strncpy+0x6>
 8004f8a:	2100      	movs	r1, #0
 8004f8c:	441a      	add	r2, r3
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d100      	bne.n	8004f94 <strncpy+0x20>
 8004f92:	bd10      	pop	{r4, pc}
 8004f94:	f803 1b01 	strb.w	r1, [r3], #1
 8004f98:	e7f9      	b.n	8004f8e <strncpy+0x1a>
	...

08004f9c <__errno>:
 8004f9c:	4b01      	ldr	r3, [pc, #4]	@ (8004fa4 <__errno+0x8>)
 8004f9e:	6818      	ldr	r0, [r3, #0]
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	2000000c 	.word	0x2000000c

08004fa8 <__libc_init_array>:
 8004fa8:	b570      	push	{r4, r5, r6, lr}
 8004faa:	2600      	movs	r6, #0
 8004fac:	4d0c      	ldr	r5, [pc, #48]	@ (8004fe0 <__libc_init_array+0x38>)
 8004fae:	4c0d      	ldr	r4, [pc, #52]	@ (8004fe4 <__libc_init_array+0x3c>)
 8004fb0:	1b64      	subs	r4, r4, r5
 8004fb2:	10a4      	asrs	r4, r4, #2
 8004fb4:	42a6      	cmp	r6, r4
 8004fb6:	d109      	bne.n	8004fcc <__libc_init_array+0x24>
 8004fb8:	f000 fc76 	bl	80058a8 <_init>
 8004fbc:	2600      	movs	r6, #0
 8004fbe:	4d0a      	ldr	r5, [pc, #40]	@ (8004fe8 <__libc_init_array+0x40>)
 8004fc0:	4c0a      	ldr	r4, [pc, #40]	@ (8004fec <__libc_init_array+0x44>)
 8004fc2:	1b64      	subs	r4, r4, r5
 8004fc4:	10a4      	asrs	r4, r4, #2
 8004fc6:	42a6      	cmp	r6, r4
 8004fc8:	d105      	bne.n	8004fd6 <__libc_init_array+0x2e>
 8004fca:	bd70      	pop	{r4, r5, r6, pc}
 8004fcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fd0:	4798      	blx	r3
 8004fd2:	3601      	adds	r6, #1
 8004fd4:	e7ee      	b.n	8004fb4 <__libc_init_array+0xc>
 8004fd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fda:	4798      	blx	r3
 8004fdc:	3601      	adds	r6, #1
 8004fde:	e7f2      	b.n	8004fc6 <__libc_init_array+0x1e>
 8004fe0:	080059b8 	.word	0x080059b8
 8004fe4:	080059b8 	.word	0x080059b8
 8004fe8:	080059b8 	.word	0x080059b8
 8004fec:	080059bc 	.word	0x080059bc

08004ff0 <__retarget_lock_acquire_recursive>:
 8004ff0:	4770      	bx	lr

08004ff2 <__retarget_lock_release_recursive>:
 8004ff2:	4770      	bx	lr

08004ff4 <_free_r>:
 8004ff4:	b538      	push	{r3, r4, r5, lr}
 8004ff6:	4605      	mov	r5, r0
 8004ff8:	2900      	cmp	r1, #0
 8004ffa:	d040      	beq.n	800507e <_free_r+0x8a>
 8004ffc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005000:	1f0c      	subs	r4, r1, #4
 8005002:	2b00      	cmp	r3, #0
 8005004:	bfb8      	it	lt
 8005006:	18e4      	addlt	r4, r4, r3
 8005008:	f000 f8de 	bl	80051c8 <__malloc_lock>
 800500c:	4a1c      	ldr	r2, [pc, #112]	@ (8005080 <_free_r+0x8c>)
 800500e:	6813      	ldr	r3, [r2, #0]
 8005010:	b933      	cbnz	r3, 8005020 <_free_r+0x2c>
 8005012:	6063      	str	r3, [r4, #4]
 8005014:	6014      	str	r4, [r2, #0]
 8005016:	4628      	mov	r0, r5
 8005018:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800501c:	f000 b8da 	b.w	80051d4 <__malloc_unlock>
 8005020:	42a3      	cmp	r3, r4
 8005022:	d908      	bls.n	8005036 <_free_r+0x42>
 8005024:	6820      	ldr	r0, [r4, #0]
 8005026:	1821      	adds	r1, r4, r0
 8005028:	428b      	cmp	r3, r1
 800502a:	bf01      	itttt	eq
 800502c:	6819      	ldreq	r1, [r3, #0]
 800502e:	685b      	ldreq	r3, [r3, #4]
 8005030:	1809      	addeq	r1, r1, r0
 8005032:	6021      	streq	r1, [r4, #0]
 8005034:	e7ed      	b.n	8005012 <_free_r+0x1e>
 8005036:	461a      	mov	r2, r3
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	b10b      	cbz	r3, 8005040 <_free_r+0x4c>
 800503c:	42a3      	cmp	r3, r4
 800503e:	d9fa      	bls.n	8005036 <_free_r+0x42>
 8005040:	6811      	ldr	r1, [r2, #0]
 8005042:	1850      	adds	r0, r2, r1
 8005044:	42a0      	cmp	r0, r4
 8005046:	d10b      	bne.n	8005060 <_free_r+0x6c>
 8005048:	6820      	ldr	r0, [r4, #0]
 800504a:	4401      	add	r1, r0
 800504c:	1850      	adds	r0, r2, r1
 800504e:	4283      	cmp	r3, r0
 8005050:	6011      	str	r1, [r2, #0]
 8005052:	d1e0      	bne.n	8005016 <_free_r+0x22>
 8005054:	6818      	ldr	r0, [r3, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	4408      	add	r0, r1
 800505a:	6010      	str	r0, [r2, #0]
 800505c:	6053      	str	r3, [r2, #4]
 800505e:	e7da      	b.n	8005016 <_free_r+0x22>
 8005060:	d902      	bls.n	8005068 <_free_r+0x74>
 8005062:	230c      	movs	r3, #12
 8005064:	602b      	str	r3, [r5, #0]
 8005066:	e7d6      	b.n	8005016 <_free_r+0x22>
 8005068:	6820      	ldr	r0, [r4, #0]
 800506a:	1821      	adds	r1, r4, r0
 800506c:	428b      	cmp	r3, r1
 800506e:	bf01      	itttt	eq
 8005070:	6819      	ldreq	r1, [r3, #0]
 8005072:	685b      	ldreq	r3, [r3, #4]
 8005074:	1809      	addeq	r1, r1, r0
 8005076:	6021      	streq	r1, [r4, #0]
 8005078:	6063      	str	r3, [r4, #4]
 800507a:	6054      	str	r4, [r2, #4]
 800507c:	e7cb      	b.n	8005016 <_free_r+0x22>
 800507e:	bd38      	pop	{r3, r4, r5, pc}
 8005080:	2000035c 	.word	0x2000035c

08005084 <sbrk_aligned>:
 8005084:	b570      	push	{r4, r5, r6, lr}
 8005086:	4e0f      	ldr	r6, [pc, #60]	@ (80050c4 <sbrk_aligned+0x40>)
 8005088:	460c      	mov	r4, r1
 800508a:	6831      	ldr	r1, [r6, #0]
 800508c:	4605      	mov	r5, r0
 800508e:	b911      	cbnz	r1, 8005096 <sbrk_aligned+0x12>
 8005090:	f000 fba8 	bl	80057e4 <_sbrk_r>
 8005094:	6030      	str	r0, [r6, #0]
 8005096:	4621      	mov	r1, r4
 8005098:	4628      	mov	r0, r5
 800509a:	f000 fba3 	bl	80057e4 <_sbrk_r>
 800509e:	1c43      	adds	r3, r0, #1
 80050a0:	d103      	bne.n	80050aa <sbrk_aligned+0x26>
 80050a2:	f04f 34ff 	mov.w	r4, #4294967295
 80050a6:	4620      	mov	r0, r4
 80050a8:	bd70      	pop	{r4, r5, r6, pc}
 80050aa:	1cc4      	adds	r4, r0, #3
 80050ac:	f024 0403 	bic.w	r4, r4, #3
 80050b0:	42a0      	cmp	r0, r4
 80050b2:	d0f8      	beq.n	80050a6 <sbrk_aligned+0x22>
 80050b4:	1a21      	subs	r1, r4, r0
 80050b6:	4628      	mov	r0, r5
 80050b8:	f000 fb94 	bl	80057e4 <_sbrk_r>
 80050bc:	3001      	adds	r0, #1
 80050be:	d1f2      	bne.n	80050a6 <sbrk_aligned+0x22>
 80050c0:	e7ef      	b.n	80050a2 <sbrk_aligned+0x1e>
 80050c2:	bf00      	nop
 80050c4:	20000358 	.word	0x20000358

080050c8 <_malloc_r>:
 80050c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050cc:	1ccd      	adds	r5, r1, #3
 80050ce:	f025 0503 	bic.w	r5, r5, #3
 80050d2:	3508      	adds	r5, #8
 80050d4:	2d0c      	cmp	r5, #12
 80050d6:	bf38      	it	cc
 80050d8:	250c      	movcc	r5, #12
 80050da:	2d00      	cmp	r5, #0
 80050dc:	4606      	mov	r6, r0
 80050de:	db01      	blt.n	80050e4 <_malloc_r+0x1c>
 80050e0:	42a9      	cmp	r1, r5
 80050e2:	d904      	bls.n	80050ee <_malloc_r+0x26>
 80050e4:	230c      	movs	r3, #12
 80050e6:	6033      	str	r3, [r6, #0]
 80050e8:	2000      	movs	r0, #0
 80050ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80051c4 <_malloc_r+0xfc>
 80050f2:	f000 f869 	bl	80051c8 <__malloc_lock>
 80050f6:	f8d8 3000 	ldr.w	r3, [r8]
 80050fa:	461c      	mov	r4, r3
 80050fc:	bb44      	cbnz	r4, 8005150 <_malloc_r+0x88>
 80050fe:	4629      	mov	r1, r5
 8005100:	4630      	mov	r0, r6
 8005102:	f7ff ffbf 	bl	8005084 <sbrk_aligned>
 8005106:	1c43      	adds	r3, r0, #1
 8005108:	4604      	mov	r4, r0
 800510a:	d158      	bne.n	80051be <_malloc_r+0xf6>
 800510c:	f8d8 4000 	ldr.w	r4, [r8]
 8005110:	4627      	mov	r7, r4
 8005112:	2f00      	cmp	r7, #0
 8005114:	d143      	bne.n	800519e <_malloc_r+0xd6>
 8005116:	2c00      	cmp	r4, #0
 8005118:	d04b      	beq.n	80051b2 <_malloc_r+0xea>
 800511a:	6823      	ldr	r3, [r4, #0]
 800511c:	4639      	mov	r1, r7
 800511e:	4630      	mov	r0, r6
 8005120:	eb04 0903 	add.w	r9, r4, r3
 8005124:	f000 fb5e 	bl	80057e4 <_sbrk_r>
 8005128:	4581      	cmp	r9, r0
 800512a:	d142      	bne.n	80051b2 <_malloc_r+0xea>
 800512c:	6821      	ldr	r1, [r4, #0]
 800512e:	4630      	mov	r0, r6
 8005130:	1a6d      	subs	r5, r5, r1
 8005132:	4629      	mov	r1, r5
 8005134:	f7ff ffa6 	bl	8005084 <sbrk_aligned>
 8005138:	3001      	adds	r0, #1
 800513a:	d03a      	beq.n	80051b2 <_malloc_r+0xea>
 800513c:	6823      	ldr	r3, [r4, #0]
 800513e:	442b      	add	r3, r5
 8005140:	6023      	str	r3, [r4, #0]
 8005142:	f8d8 3000 	ldr.w	r3, [r8]
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	bb62      	cbnz	r2, 80051a4 <_malloc_r+0xdc>
 800514a:	f8c8 7000 	str.w	r7, [r8]
 800514e:	e00f      	b.n	8005170 <_malloc_r+0xa8>
 8005150:	6822      	ldr	r2, [r4, #0]
 8005152:	1b52      	subs	r2, r2, r5
 8005154:	d420      	bmi.n	8005198 <_malloc_r+0xd0>
 8005156:	2a0b      	cmp	r2, #11
 8005158:	d917      	bls.n	800518a <_malloc_r+0xc2>
 800515a:	1961      	adds	r1, r4, r5
 800515c:	42a3      	cmp	r3, r4
 800515e:	6025      	str	r5, [r4, #0]
 8005160:	bf18      	it	ne
 8005162:	6059      	strne	r1, [r3, #4]
 8005164:	6863      	ldr	r3, [r4, #4]
 8005166:	bf08      	it	eq
 8005168:	f8c8 1000 	streq.w	r1, [r8]
 800516c:	5162      	str	r2, [r4, r5]
 800516e:	604b      	str	r3, [r1, #4]
 8005170:	4630      	mov	r0, r6
 8005172:	f000 f82f 	bl	80051d4 <__malloc_unlock>
 8005176:	f104 000b 	add.w	r0, r4, #11
 800517a:	1d23      	adds	r3, r4, #4
 800517c:	f020 0007 	bic.w	r0, r0, #7
 8005180:	1ac2      	subs	r2, r0, r3
 8005182:	bf1c      	itt	ne
 8005184:	1a1b      	subne	r3, r3, r0
 8005186:	50a3      	strne	r3, [r4, r2]
 8005188:	e7af      	b.n	80050ea <_malloc_r+0x22>
 800518a:	6862      	ldr	r2, [r4, #4]
 800518c:	42a3      	cmp	r3, r4
 800518e:	bf0c      	ite	eq
 8005190:	f8c8 2000 	streq.w	r2, [r8]
 8005194:	605a      	strne	r2, [r3, #4]
 8005196:	e7eb      	b.n	8005170 <_malloc_r+0xa8>
 8005198:	4623      	mov	r3, r4
 800519a:	6864      	ldr	r4, [r4, #4]
 800519c:	e7ae      	b.n	80050fc <_malloc_r+0x34>
 800519e:	463c      	mov	r4, r7
 80051a0:	687f      	ldr	r7, [r7, #4]
 80051a2:	e7b6      	b.n	8005112 <_malloc_r+0x4a>
 80051a4:	461a      	mov	r2, r3
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	42a3      	cmp	r3, r4
 80051aa:	d1fb      	bne.n	80051a4 <_malloc_r+0xdc>
 80051ac:	2300      	movs	r3, #0
 80051ae:	6053      	str	r3, [r2, #4]
 80051b0:	e7de      	b.n	8005170 <_malloc_r+0xa8>
 80051b2:	230c      	movs	r3, #12
 80051b4:	4630      	mov	r0, r6
 80051b6:	6033      	str	r3, [r6, #0]
 80051b8:	f000 f80c 	bl	80051d4 <__malloc_unlock>
 80051bc:	e794      	b.n	80050e8 <_malloc_r+0x20>
 80051be:	6005      	str	r5, [r0, #0]
 80051c0:	e7d6      	b.n	8005170 <_malloc_r+0xa8>
 80051c2:	bf00      	nop
 80051c4:	2000035c 	.word	0x2000035c

080051c8 <__malloc_lock>:
 80051c8:	4801      	ldr	r0, [pc, #4]	@ (80051d0 <__malloc_lock+0x8>)
 80051ca:	f7ff bf11 	b.w	8004ff0 <__retarget_lock_acquire_recursive>
 80051ce:	bf00      	nop
 80051d0:	20000354 	.word	0x20000354

080051d4 <__malloc_unlock>:
 80051d4:	4801      	ldr	r0, [pc, #4]	@ (80051dc <__malloc_unlock+0x8>)
 80051d6:	f7ff bf0c 	b.w	8004ff2 <__retarget_lock_release_recursive>
 80051da:	bf00      	nop
 80051dc:	20000354 	.word	0x20000354

080051e0 <__ssputs_r>:
 80051e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051e4:	461f      	mov	r7, r3
 80051e6:	688e      	ldr	r6, [r1, #8]
 80051e8:	4682      	mov	sl, r0
 80051ea:	42be      	cmp	r6, r7
 80051ec:	460c      	mov	r4, r1
 80051ee:	4690      	mov	r8, r2
 80051f0:	680b      	ldr	r3, [r1, #0]
 80051f2:	d82d      	bhi.n	8005250 <__ssputs_r+0x70>
 80051f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80051f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80051fc:	d026      	beq.n	800524c <__ssputs_r+0x6c>
 80051fe:	6965      	ldr	r5, [r4, #20]
 8005200:	6909      	ldr	r1, [r1, #16]
 8005202:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005206:	eba3 0901 	sub.w	r9, r3, r1
 800520a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800520e:	1c7b      	adds	r3, r7, #1
 8005210:	444b      	add	r3, r9
 8005212:	106d      	asrs	r5, r5, #1
 8005214:	429d      	cmp	r5, r3
 8005216:	bf38      	it	cc
 8005218:	461d      	movcc	r5, r3
 800521a:	0553      	lsls	r3, r2, #21
 800521c:	d527      	bpl.n	800526e <__ssputs_r+0x8e>
 800521e:	4629      	mov	r1, r5
 8005220:	f7ff ff52 	bl	80050c8 <_malloc_r>
 8005224:	4606      	mov	r6, r0
 8005226:	b360      	cbz	r0, 8005282 <__ssputs_r+0xa2>
 8005228:	464a      	mov	r2, r9
 800522a:	6921      	ldr	r1, [r4, #16]
 800522c:	f000 faf8 	bl	8005820 <memcpy>
 8005230:	89a3      	ldrh	r3, [r4, #12]
 8005232:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005236:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800523a:	81a3      	strh	r3, [r4, #12]
 800523c:	6126      	str	r6, [r4, #16]
 800523e:	444e      	add	r6, r9
 8005240:	6026      	str	r6, [r4, #0]
 8005242:	463e      	mov	r6, r7
 8005244:	6165      	str	r5, [r4, #20]
 8005246:	eba5 0509 	sub.w	r5, r5, r9
 800524a:	60a5      	str	r5, [r4, #8]
 800524c:	42be      	cmp	r6, r7
 800524e:	d900      	bls.n	8005252 <__ssputs_r+0x72>
 8005250:	463e      	mov	r6, r7
 8005252:	4632      	mov	r2, r6
 8005254:	4641      	mov	r1, r8
 8005256:	6820      	ldr	r0, [r4, #0]
 8005258:	f000 faaa 	bl	80057b0 <memmove>
 800525c:	2000      	movs	r0, #0
 800525e:	68a3      	ldr	r3, [r4, #8]
 8005260:	1b9b      	subs	r3, r3, r6
 8005262:	60a3      	str	r3, [r4, #8]
 8005264:	6823      	ldr	r3, [r4, #0]
 8005266:	4433      	add	r3, r6
 8005268:	6023      	str	r3, [r4, #0]
 800526a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800526e:	462a      	mov	r2, r5
 8005270:	f000 fae4 	bl	800583c <_realloc_r>
 8005274:	4606      	mov	r6, r0
 8005276:	2800      	cmp	r0, #0
 8005278:	d1e0      	bne.n	800523c <__ssputs_r+0x5c>
 800527a:	4650      	mov	r0, sl
 800527c:	6921      	ldr	r1, [r4, #16]
 800527e:	f7ff feb9 	bl	8004ff4 <_free_r>
 8005282:	230c      	movs	r3, #12
 8005284:	f8ca 3000 	str.w	r3, [sl]
 8005288:	89a3      	ldrh	r3, [r4, #12]
 800528a:	f04f 30ff 	mov.w	r0, #4294967295
 800528e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005292:	81a3      	strh	r3, [r4, #12]
 8005294:	e7e9      	b.n	800526a <__ssputs_r+0x8a>
	...

08005298 <_svfiprintf_r>:
 8005298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800529c:	4698      	mov	r8, r3
 800529e:	898b      	ldrh	r3, [r1, #12]
 80052a0:	4607      	mov	r7, r0
 80052a2:	061b      	lsls	r3, r3, #24
 80052a4:	460d      	mov	r5, r1
 80052a6:	4614      	mov	r4, r2
 80052a8:	b09d      	sub	sp, #116	@ 0x74
 80052aa:	d510      	bpl.n	80052ce <_svfiprintf_r+0x36>
 80052ac:	690b      	ldr	r3, [r1, #16]
 80052ae:	b973      	cbnz	r3, 80052ce <_svfiprintf_r+0x36>
 80052b0:	2140      	movs	r1, #64	@ 0x40
 80052b2:	f7ff ff09 	bl	80050c8 <_malloc_r>
 80052b6:	6028      	str	r0, [r5, #0]
 80052b8:	6128      	str	r0, [r5, #16]
 80052ba:	b930      	cbnz	r0, 80052ca <_svfiprintf_r+0x32>
 80052bc:	230c      	movs	r3, #12
 80052be:	603b      	str	r3, [r7, #0]
 80052c0:	f04f 30ff 	mov.w	r0, #4294967295
 80052c4:	b01d      	add	sp, #116	@ 0x74
 80052c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052ca:	2340      	movs	r3, #64	@ 0x40
 80052cc:	616b      	str	r3, [r5, #20]
 80052ce:	2300      	movs	r3, #0
 80052d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80052d2:	2320      	movs	r3, #32
 80052d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80052d8:	2330      	movs	r3, #48	@ 0x30
 80052da:	f04f 0901 	mov.w	r9, #1
 80052de:	f8cd 800c 	str.w	r8, [sp, #12]
 80052e2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800547c <_svfiprintf_r+0x1e4>
 80052e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80052ea:	4623      	mov	r3, r4
 80052ec:	469a      	mov	sl, r3
 80052ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052f2:	b10a      	cbz	r2, 80052f8 <_svfiprintf_r+0x60>
 80052f4:	2a25      	cmp	r2, #37	@ 0x25
 80052f6:	d1f9      	bne.n	80052ec <_svfiprintf_r+0x54>
 80052f8:	ebba 0b04 	subs.w	fp, sl, r4
 80052fc:	d00b      	beq.n	8005316 <_svfiprintf_r+0x7e>
 80052fe:	465b      	mov	r3, fp
 8005300:	4622      	mov	r2, r4
 8005302:	4629      	mov	r1, r5
 8005304:	4638      	mov	r0, r7
 8005306:	f7ff ff6b 	bl	80051e0 <__ssputs_r>
 800530a:	3001      	adds	r0, #1
 800530c:	f000 80a7 	beq.w	800545e <_svfiprintf_r+0x1c6>
 8005310:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005312:	445a      	add	r2, fp
 8005314:	9209      	str	r2, [sp, #36]	@ 0x24
 8005316:	f89a 3000 	ldrb.w	r3, [sl]
 800531a:	2b00      	cmp	r3, #0
 800531c:	f000 809f 	beq.w	800545e <_svfiprintf_r+0x1c6>
 8005320:	2300      	movs	r3, #0
 8005322:	f04f 32ff 	mov.w	r2, #4294967295
 8005326:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800532a:	f10a 0a01 	add.w	sl, sl, #1
 800532e:	9304      	str	r3, [sp, #16]
 8005330:	9307      	str	r3, [sp, #28]
 8005332:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005336:	931a      	str	r3, [sp, #104]	@ 0x68
 8005338:	4654      	mov	r4, sl
 800533a:	2205      	movs	r2, #5
 800533c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005340:	484e      	ldr	r0, [pc, #312]	@ (800547c <_svfiprintf_r+0x1e4>)
 8005342:	f000 fa5f 	bl	8005804 <memchr>
 8005346:	9a04      	ldr	r2, [sp, #16]
 8005348:	b9d8      	cbnz	r0, 8005382 <_svfiprintf_r+0xea>
 800534a:	06d0      	lsls	r0, r2, #27
 800534c:	bf44      	itt	mi
 800534e:	2320      	movmi	r3, #32
 8005350:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005354:	0711      	lsls	r1, r2, #28
 8005356:	bf44      	itt	mi
 8005358:	232b      	movmi	r3, #43	@ 0x2b
 800535a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800535e:	f89a 3000 	ldrb.w	r3, [sl]
 8005362:	2b2a      	cmp	r3, #42	@ 0x2a
 8005364:	d015      	beq.n	8005392 <_svfiprintf_r+0xfa>
 8005366:	4654      	mov	r4, sl
 8005368:	2000      	movs	r0, #0
 800536a:	f04f 0c0a 	mov.w	ip, #10
 800536e:	9a07      	ldr	r2, [sp, #28]
 8005370:	4621      	mov	r1, r4
 8005372:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005376:	3b30      	subs	r3, #48	@ 0x30
 8005378:	2b09      	cmp	r3, #9
 800537a:	d94b      	bls.n	8005414 <_svfiprintf_r+0x17c>
 800537c:	b1b0      	cbz	r0, 80053ac <_svfiprintf_r+0x114>
 800537e:	9207      	str	r2, [sp, #28]
 8005380:	e014      	b.n	80053ac <_svfiprintf_r+0x114>
 8005382:	eba0 0308 	sub.w	r3, r0, r8
 8005386:	fa09 f303 	lsl.w	r3, r9, r3
 800538a:	4313      	orrs	r3, r2
 800538c:	46a2      	mov	sl, r4
 800538e:	9304      	str	r3, [sp, #16]
 8005390:	e7d2      	b.n	8005338 <_svfiprintf_r+0xa0>
 8005392:	9b03      	ldr	r3, [sp, #12]
 8005394:	1d19      	adds	r1, r3, #4
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	9103      	str	r1, [sp, #12]
 800539a:	2b00      	cmp	r3, #0
 800539c:	bfbb      	ittet	lt
 800539e:	425b      	neglt	r3, r3
 80053a0:	f042 0202 	orrlt.w	r2, r2, #2
 80053a4:	9307      	strge	r3, [sp, #28]
 80053a6:	9307      	strlt	r3, [sp, #28]
 80053a8:	bfb8      	it	lt
 80053aa:	9204      	strlt	r2, [sp, #16]
 80053ac:	7823      	ldrb	r3, [r4, #0]
 80053ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80053b0:	d10a      	bne.n	80053c8 <_svfiprintf_r+0x130>
 80053b2:	7863      	ldrb	r3, [r4, #1]
 80053b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80053b6:	d132      	bne.n	800541e <_svfiprintf_r+0x186>
 80053b8:	9b03      	ldr	r3, [sp, #12]
 80053ba:	3402      	adds	r4, #2
 80053bc:	1d1a      	adds	r2, r3, #4
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	9203      	str	r2, [sp, #12]
 80053c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80053c6:	9305      	str	r3, [sp, #20]
 80053c8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005480 <_svfiprintf_r+0x1e8>
 80053cc:	2203      	movs	r2, #3
 80053ce:	4650      	mov	r0, sl
 80053d0:	7821      	ldrb	r1, [r4, #0]
 80053d2:	f000 fa17 	bl	8005804 <memchr>
 80053d6:	b138      	cbz	r0, 80053e8 <_svfiprintf_r+0x150>
 80053d8:	2240      	movs	r2, #64	@ 0x40
 80053da:	9b04      	ldr	r3, [sp, #16]
 80053dc:	eba0 000a 	sub.w	r0, r0, sl
 80053e0:	4082      	lsls	r2, r0
 80053e2:	4313      	orrs	r3, r2
 80053e4:	3401      	adds	r4, #1
 80053e6:	9304      	str	r3, [sp, #16]
 80053e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053ec:	2206      	movs	r2, #6
 80053ee:	4825      	ldr	r0, [pc, #148]	@ (8005484 <_svfiprintf_r+0x1ec>)
 80053f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80053f4:	f000 fa06 	bl	8005804 <memchr>
 80053f8:	2800      	cmp	r0, #0
 80053fa:	d036      	beq.n	800546a <_svfiprintf_r+0x1d2>
 80053fc:	4b22      	ldr	r3, [pc, #136]	@ (8005488 <_svfiprintf_r+0x1f0>)
 80053fe:	bb1b      	cbnz	r3, 8005448 <_svfiprintf_r+0x1b0>
 8005400:	9b03      	ldr	r3, [sp, #12]
 8005402:	3307      	adds	r3, #7
 8005404:	f023 0307 	bic.w	r3, r3, #7
 8005408:	3308      	adds	r3, #8
 800540a:	9303      	str	r3, [sp, #12]
 800540c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800540e:	4433      	add	r3, r6
 8005410:	9309      	str	r3, [sp, #36]	@ 0x24
 8005412:	e76a      	b.n	80052ea <_svfiprintf_r+0x52>
 8005414:	460c      	mov	r4, r1
 8005416:	2001      	movs	r0, #1
 8005418:	fb0c 3202 	mla	r2, ip, r2, r3
 800541c:	e7a8      	b.n	8005370 <_svfiprintf_r+0xd8>
 800541e:	2300      	movs	r3, #0
 8005420:	f04f 0c0a 	mov.w	ip, #10
 8005424:	4619      	mov	r1, r3
 8005426:	3401      	adds	r4, #1
 8005428:	9305      	str	r3, [sp, #20]
 800542a:	4620      	mov	r0, r4
 800542c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005430:	3a30      	subs	r2, #48	@ 0x30
 8005432:	2a09      	cmp	r2, #9
 8005434:	d903      	bls.n	800543e <_svfiprintf_r+0x1a6>
 8005436:	2b00      	cmp	r3, #0
 8005438:	d0c6      	beq.n	80053c8 <_svfiprintf_r+0x130>
 800543a:	9105      	str	r1, [sp, #20]
 800543c:	e7c4      	b.n	80053c8 <_svfiprintf_r+0x130>
 800543e:	4604      	mov	r4, r0
 8005440:	2301      	movs	r3, #1
 8005442:	fb0c 2101 	mla	r1, ip, r1, r2
 8005446:	e7f0      	b.n	800542a <_svfiprintf_r+0x192>
 8005448:	ab03      	add	r3, sp, #12
 800544a:	9300      	str	r3, [sp, #0]
 800544c:	462a      	mov	r2, r5
 800544e:	4638      	mov	r0, r7
 8005450:	4b0e      	ldr	r3, [pc, #56]	@ (800548c <_svfiprintf_r+0x1f4>)
 8005452:	a904      	add	r1, sp, #16
 8005454:	f3af 8000 	nop.w
 8005458:	1c42      	adds	r2, r0, #1
 800545a:	4606      	mov	r6, r0
 800545c:	d1d6      	bne.n	800540c <_svfiprintf_r+0x174>
 800545e:	89ab      	ldrh	r3, [r5, #12]
 8005460:	065b      	lsls	r3, r3, #25
 8005462:	f53f af2d 	bmi.w	80052c0 <_svfiprintf_r+0x28>
 8005466:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005468:	e72c      	b.n	80052c4 <_svfiprintf_r+0x2c>
 800546a:	ab03      	add	r3, sp, #12
 800546c:	9300      	str	r3, [sp, #0]
 800546e:	462a      	mov	r2, r5
 8005470:	4638      	mov	r0, r7
 8005472:	4b06      	ldr	r3, [pc, #24]	@ (800548c <_svfiprintf_r+0x1f4>)
 8005474:	a904      	add	r1, sp, #16
 8005476:	f000 f87d 	bl	8005574 <_printf_i>
 800547a:	e7ed      	b.n	8005458 <_svfiprintf_r+0x1c0>
 800547c:	0800597a 	.word	0x0800597a
 8005480:	08005980 	.word	0x08005980
 8005484:	08005984 	.word	0x08005984
 8005488:	00000000 	.word	0x00000000
 800548c:	080051e1 	.word	0x080051e1

08005490 <_printf_common>:
 8005490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005494:	4616      	mov	r6, r2
 8005496:	4698      	mov	r8, r3
 8005498:	688a      	ldr	r2, [r1, #8]
 800549a:	690b      	ldr	r3, [r1, #16]
 800549c:	4607      	mov	r7, r0
 800549e:	4293      	cmp	r3, r2
 80054a0:	bfb8      	it	lt
 80054a2:	4613      	movlt	r3, r2
 80054a4:	6033      	str	r3, [r6, #0]
 80054a6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80054aa:	460c      	mov	r4, r1
 80054ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80054b0:	b10a      	cbz	r2, 80054b6 <_printf_common+0x26>
 80054b2:	3301      	adds	r3, #1
 80054b4:	6033      	str	r3, [r6, #0]
 80054b6:	6823      	ldr	r3, [r4, #0]
 80054b8:	0699      	lsls	r1, r3, #26
 80054ba:	bf42      	ittt	mi
 80054bc:	6833      	ldrmi	r3, [r6, #0]
 80054be:	3302      	addmi	r3, #2
 80054c0:	6033      	strmi	r3, [r6, #0]
 80054c2:	6825      	ldr	r5, [r4, #0]
 80054c4:	f015 0506 	ands.w	r5, r5, #6
 80054c8:	d106      	bne.n	80054d8 <_printf_common+0x48>
 80054ca:	f104 0a19 	add.w	sl, r4, #25
 80054ce:	68e3      	ldr	r3, [r4, #12]
 80054d0:	6832      	ldr	r2, [r6, #0]
 80054d2:	1a9b      	subs	r3, r3, r2
 80054d4:	42ab      	cmp	r3, r5
 80054d6:	dc2b      	bgt.n	8005530 <_printf_common+0xa0>
 80054d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80054dc:	6822      	ldr	r2, [r4, #0]
 80054de:	3b00      	subs	r3, #0
 80054e0:	bf18      	it	ne
 80054e2:	2301      	movne	r3, #1
 80054e4:	0692      	lsls	r2, r2, #26
 80054e6:	d430      	bmi.n	800554a <_printf_common+0xba>
 80054e8:	4641      	mov	r1, r8
 80054ea:	4638      	mov	r0, r7
 80054ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80054f0:	47c8      	blx	r9
 80054f2:	3001      	adds	r0, #1
 80054f4:	d023      	beq.n	800553e <_printf_common+0xae>
 80054f6:	6823      	ldr	r3, [r4, #0]
 80054f8:	6922      	ldr	r2, [r4, #16]
 80054fa:	f003 0306 	and.w	r3, r3, #6
 80054fe:	2b04      	cmp	r3, #4
 8005500:	bf14      	ite	ne
 8005502:	2500      	movne	r5, #0
 8005504:	6833      	ldreq	r3, [r6, #0]
 8005506:	f04f 0600 	mov.w	r6, #0
 800550a:	bf08      	it	eq
 800550c:	68e5      	ldreq	r5, [r4, #12]
 800550e:	f104 041a 	add.w	r4, r4, #26
 8005512:	bf08      	it	eq
 8005514:	1aed      	subeq	r5, r5, r3
 8005516:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800551a:	bf08      	it	eq
 800551c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005520:	4293      	cmp	r3, r2
 8005522:	bfc4      	itt	gt
 8005524:	1a9b      	subgt	r3, r3, r2
 8005526:	18ed      	addgt	r5, r5, r3
 8005528:	42b5      	cmp	r5, r6
 800552a:	d11a      	bne.n	8005562 <_printf_common+0xd2>
 800552c:	2000      	movs	r0, #0
 800552e:	e008      	b.n	8005542 <_printf_common+0xb2>
 8005530:	2301      	movs	r3, #1
 8005532:	4652      	mov	r2, sl
 8005534:	4641      	mov	r1, r8
 8005536:	4638      	mov	r0, r7
 8005538:	47c8      	blx	r9
 800553a:	3001      	adds	r0, #1
 800553c:	d103      	bne.n	8005546 <_printf_common+0xb6>
 800553e:	f04f 30ff 	mov.w	r0, #4294967295
 8005542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005546:	3501      	adds	r5, #1
 8005548:	e7c1      	b.n	80054ce <_printf_common+0x3e>
 800554a:	2030      	movs	r0, #48	@ 0x30
 800554c:	18e1      	adds	r1, r4, r3
 800554e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005552:	1c5a      	adds	r2, r3, #1
 8005554:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005558:	4422      	add	r2, r4
 800555a:	3302      	adds	r3, #2
 800555c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005560:	e7c2      	b.n	80054e8 <_printf_common+0x58>
 8005562:	2301      	movs	r3, #1
 8005564:	4622      	mov	r2, r4
 8005566:	4641      	mov	r1, r8
 8005568:	4638      	mov	r0, r7
 800556a:	47c8      	blx	r9
 800556c:	3001      	adds	r0, #1
 800556e:	d0e6      	beq.n	800553e <_printf_common+0xae>
 8005570:	3601      	adds	r6, #1
 8005572:	e7d9      	b.n	8005528 <_printf_common+0x98>

08005574 <_printf_i>:
 8005574:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005578:	7e0f      	ldrb	r7, [r1, #24]
 800557a:	4691      	mov	r9, r2
 800557c:	2f78      	cmp	r7, #120	@ 0x78
 800557e:	4680      	mov	r8, r0
 8005580:	460c      	mov	r4, r1
 8005582:	469a      	mov	sl, r3
 8005584:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005586:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800558a:	d807      	bhi.n	800559c <_printf_i+0x28>
 800558c:	2f62      	cmp	r7, #98	@ 0x62
 800558e:	d80a      	bhi.n	80055a6 <_printf_i+0x32>
 8005590:	2f00      	cmp	r7, #0
 8005592:	f000 80d1 	beq.w	8005738 <_printf_i+0x1c4>
 8005596:	2f58      	cmp	r7, #88	@ 0x58
 8005598:	f000 80b8 	beq.w	800570c <_printf_i+0x198>
 800559c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80055a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80055a4:	e03a      	b.n	800561c <_printf_i+0xa8>
 80055a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80055aa:	2b15      	cmp	r3, #21
 80055ac:	d8f6      	bhi.n	800559c <_printf_i+0x28>
 80055ae:	a101      	add	r1, pc, #4	@ (adr r1, 80055b4 <_printf_i+0x40>)
 80055b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055b4:	0800560d 	.word	0x0800560d
 80055b8:	08005621 	.word	0x08005621
 80055bc:	0800559d 	.word	0x0800559d
 80055c0:	0800559d 	.word	0x0800559d
 80055c4:	0800559d 	.word	0x0800559d
 80055c8:	0800559d 	.word	0x0800559d
 80055cc:	08005621 	.word	0x08005621
 80055d0:	0800559d 	.word	0x0800559d
 80055d4:	0800559d 	.word	0x0800559d
 80055d8:	0800559d 	.word	0x0800559d
 80055dc:	0800559d 	.word	0x0800559d
 80055e0:	0800571f 	.word	0x0800571f
 80055e4:	0800564b 	.word	0x0800564b
 80055e8:	080056d9 	.word	0x080056d9
 80055ec:	0800559d 	.word	0x0800559d
 80055f0:	0800559d 	.word	0x0800559d
 80055f4:	08005741 	.word	0x08005741
 80055f8:	0800559d 	.word	0x0800559d
 80055fc:	0800564b 	.word	0x0800564b
 8005600:	0800559d 	.word	0x0800559d
 8005604:	0800559d 	.word	0x0800559d
 8005608:	080056e1 	.word	0x080056e1
 800560c:	6833      	ldr	r3, [r6, #0]
 800560e:	1d1a      	adds	r2, r3, #4
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	6032      	str	r2, [r6, #0]
 8005614:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005618:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800561c:	2301      	movs	r3, #1
 800561e:	e09c      	b.n	800575a <_printf_i+0x1e6>
 8005620:	6833      	ldr	r3, [r6, #0]
 8005622:	6820      	ldr	r0, [r4, #0]
 8005624:	1d19      	adds	r1, r3, #4
 8005626:	6031      	str	r1, [r6, #0]
 8005628:	0606      	lsls	r6, r0, #24
 800562a:	d501      	bpl.n	8005630 <_printf_i+0xbc>
 800562c:	681d      	ldr	r5, [r3, #0]
 800562e:	e003      	b.n	8005638 <_printf_i+0xc4>
 8005630:	0645      	lsls	r5, r0, #25
 8005632:	d5fb      	bpl.n	800562c <_printf_i+0xb8>
 8005634:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005638:	2d00      	cmp	r5, #0
 800563a:	da03      	bge.n	8005644 <_printf_i+0xd0>
 800563c:	232d      	movs	r3, #45	@ 0x2d
 800563e:	426d      	negs	r5, r5
 8005640:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005644:	230a      	movs	r3, #10
 8005646:	4858      	ldr	r0, [pc, #352]	@ (80057a8 <_printf_i+0x234>)
 8005648:	e011      	b.n	800566e <_printf_i+0xfa>
 800564a:	6821      	ldr	r1, [r4, #0]
 800564c:	6833      	ldr	r3, [r6, #0]
 800564e:	0608      	lsls	r0, r1, #24
 8005650:	f853 5b04 	ldr.w	r5, [r3], #4
 8005654:	d402      	bmi.n	800565c <_printf_i+0xe8>
 8005656:	0649      	lsls	r1, r1, #25
 8005658:	bf48      	it	mi
 800565a:	b2ad      	uxthmi	r5, r5
 800565c:	2f6f      	cmp	r7, #111	@ 0x6f
 800565e:	6033      	str	r3, [r6, #0]
 8005660:	bf14      	ite	ne
 8005662:	230a      	movne	r3, #10
 8005664:	2308      	moveq	r3, #8
 8005666:	4850      	ldr	r0, [pc, #320]	@ (80057a8 <_printf_i+0x234>)
 8005668:	2100      	movs	r1, #0
 800566a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800566e:	6866      	ldr	r6, [r4, #4]
 8005670:	2e00      	cmp	r6, #0
 8005672:	60a6      	str	r6, [r4, #8]
 8005674:	db05      	blt.n	8005682 <_printf_i+0x10e>
 8005676:	6821      	ldr	r1, [r4, #0]
 8005678:	432e      	orrs	r6, r5
 800567a:	f021 0104 	bic.w	r1, r1, #4
 800567e:	6021      	str	r1, [r4, #0]
 8005680:	d04b      	beq.n	800571a <_printf_i+0x1a6>
 8005682:	4616      	mov	r6, r2
 8005684:	fbb5 f1f3 	udiv	r1, r5, r3
 8005688:	fb03 5711 	mls	r7, r3, r1, r5
 800568c:	5dc7      	ldrb	r7, [r0, r7]
 800568e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005692:	462f      	mov	r7, r5
 8005694:	42bb      	cmp	r3, r7
 8005696:	460d      	mov	r5, r1
 8005698:	d9f4      	bls.n	8005684 <_printf_i+0x110>
 800569a:	2b08      	cmp	r3, #8
 800569c:	d10b      	bne.n	80056b6 <_printf_i+0x142>
 800569e:	6823      	ldr	r3, [r4, #0]
 80056a0:	07df      	lsls	r7, r3, #31
 80056a2:	d508      	bpl.n	80056b6 <_printf_i+0x142>
 80056a4:	6923      	ldr	r3, [r4, #16]
 80056a6:	6861      	ldr	r1, [r4, #4]
 80056a8:	4299      	cmp	r1, r3
 80056aa:	bfde      	ittt	le
 80056ac:	2330      	movle	r3, #48	@ 0x30
 80056ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 80056b2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80056b6:	1b92      	subs	r2, r2, r6
 80056b8:	6122      	str	r2, [r4, #16]
 80056ba:	464b      	mov	r3, r9
 80056bc:	4621      	mov	r1, r4
 80056be:	4640      	mov	r0, r8
 80056c0:	f8cd a000 	str.w	sl, [sp]
 80056c4:	aa03      	add	r2, sp, #12
 80056c6:	f7ff fee3 	bl	8005490 <_printf_common>
 80056ca:	3001      	adds	r0, #1
 80056cc:	d14a      	bne.n	8005764 <_printf_i+0x1f0>
 80056ce:	f04f 30ff 	mov.w	r0, #4294967295
 80056d2:	b004      	add	sp, #16
 80056d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056d8:	6823      	ldr	r3, [r4, #0]
 80056da:	f043 0320 	orr.w	r3, r3, #32
 80056de:	6023      	str	r3, [r4, #0]
 80056e0:	2778      	movs	r7, #120	@ 0x78
 80056e2:	4832      	ldr	r0, [pc, #200]	@ (80057ac <_printf_i+0x238>)
 80056e4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80056e8:	6823      	ldr	r3, [r4, #0]
 80056ea:	6831      	ldr	r1, [r6, #0]
 80056ec:	061f      	lsls	r7, r3, #24
 80056ee:	f851 5b04 	ldr.w	r5, [r1], #4
 80056f2:	d402      	bmi.n	80056fa <_printf_i+0x186>
 80056f4:	065f      	lsls	r7, r3, #25
 80056f6:	bf48      	it	mi
 80056f8:	b2ad      	uxthmi	r5, r5
 80056fa:	6031      	str	r1, [r6, #0]
 80056fc:	07d9      	lsls	r1, r3, #31
 80056fe:	bf44      	itt	mi
 8005700:	f043 0320 	orrmi.w	r3, r3, #32
 8005704:	6023      	strmi	r3, [r4, #0]
 8005706:	b11d      	cbz	r5, 8005710 <_printf_i+0x19c>
 8005708:	2310      	movs	r3, #16
 800570a:	e7ad      	b.n	8005668 <_printf_i+0xf4>
 800570c:	4826      	ldr	r0, [pc, #152]	@ (80057a8 <_printf_i+0x234>)
 800570e:	e7e9      	b.n	80056e4 <_printf_i+0x170>
 8005710:	6823      	ldr	r3, [r4, #0]
 8005712:	f023 0320 	bic.w	r3, r3, #32
 8005716:	6023      	str	r3, [r4, #0]
 8005718:	e7f6      	b.n	8005708 <_printf_i+0x194>
 800571a:	4616      	mov	r6, r2
 800571c:	e7bd      	b.n	800569a <_printf_i+0x126>
 800571e:	6833      	ldr	r3, [r6, #0]
 8005720:	6825      	ldr	r5, [r4, #0]
 8005722:	1d18      	adds	r0, r3, #4
 8005724:	6961      	ldr	r1, [r4, #20]
 8005726:	6030      	str	r0, [r6, #0]
 8005728:	062e      	lsls	r6, r5, #24
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	d501      	bpl.n	8005732 <_printf_i+0x1be>
 800572e:	6019      	str	r1, [r3, #0]
 8005730:	e002      	b.n	8005738 <_printf_i+0x1c4>
 8005732:	0668      	lsls	r0, r5, #25
 8005734:	d5fb      	bpl.n	800572e <_printf_i+0x1ba>
 8005736:	8019      	strh	r1, [r3, #0]
 8005738:	2300      	movs	r3, #0
 800573a:	4616      	mov	r6, r2
 800573c:	6123      	str	r3, [r4, #16]
 800573e:	e7bc      	b.n	80056ba <_printf_i+0x146>
 8005740:	6833      	ldr	r3, [r6, #0]
 8005742:	2100      	movs	r1, #0
 8005744:	1d1a      	adds	r2, r3, #4
 8005746:	6032      	str	r2, [r6, #0]
 8005748:	681e      	ldr	r6, [r3, #0]
 800574a:	6862      	ldr	r2, [r4, #4]
 800574c:	4630      	mov	r0, r6
 800574e:	f000 f859 	bl	8005804 <memchr>
 8005752:	b108      	cbz	r0, 8005758 <_printf_i+0x1e4>
 8005754:	1b80      	subs	r0, r0, r6
 8005756:	6060      	str	r0, [r4, #4]
 8005758:	6863      	ldr	r3, [r4, #4]
 800575a:	6123      	str	r3, [r4, #16]
 800575c:	2300      	movs	r3, #0
 800575e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005762:	e7aa      	b.n	80056ba <_printf_i+0x146>
 8005764:	4632      	mov	r2, r6
 8005766:	4649      	mov	r1, r9
 8005768:	4640      	mov	r0, r8
 800576a:	6923      	ldr	r3, [r4, #16]
 800576c:	47d0      	blx	sl
 800576e:	3001      	adds	r0, #1
 8005770:	d0ad      	beq.n	80056ce <_printf_i+0x15a>
 8005772:	6823      	ldr	r3, [r4, #0]
 8005774:	079b      	lsls	r3, r3, #30
 8005776:	d413      	bmi.n	80057a0 <_printf_i+0x22c>
 8005778:	68e0      	ldr	r0, [r4, #12]
 800577a:	9b03      	ldr	r3, [sp, #12]
 800577c:	4298      	cmp	r0, r3
 800577e:	bfb8      	it	lt
 8005780:	4618      	movlt	r0, r3
 8005782:	e7a6      	b.n	80056d2 <_printf_i+0x15e>
 8005784:	2301      	movs	r3, #1
 8005786:	4632      	mov	r2, r6
 8005788:	4649      	mov	r1, r9
 800578a:	4640      	mov	r0, r8
 800578c:	47d0      	blx	sl
 800578e:	3001      	adds	r0, #1
 8005790:	d09d      	beq.n	80056ce <_printf_i+0x15a>
 8005792:	3501      	adds	r5, #1
 8005794:	68e3      	ldr	r3, [r4, #12]
 8005796:	9903      	ldr	r1, [sp, #12]
 8005798:	1a5b      	subs	r3, r3, r1
 800579a:	42ab      	cmp	r3, r5
 800579c:	dcf2      	bgt.n	8005784 <_printf_i+0x210>
 800579e:	e7eb      	b.n	8005778 <_printf_i+0x204>
 80057a0:	2500      	movs	r5, #0
 80057a2:	f104 0619 	add.w	r6, r4, #25
 80057a6:	e7f5      	b.n	8005794 <_printf_i+0x220>
 80057a8:	0800598b 	.word	0x0800598b
 80057ac:	0800599c 	.word	0x0800599c

080057b0 <memmove>:
 80057b0:	4288      	cmp	r0, r1
 80057b2:	b510      	push	{r4, lr}
 80057b4:	eb01 0402 	add.w	r4, r1, r2
 80057b8:	d902      	bls.n	80057c0 <memmove+0x10>
 80057ba:	4284      	cmp	r4, r0
 80057bc:	4623      	mov	r3, r4
 80057be:	d807      	bhi.n	80057d0 <memmove+0x20>
 80057c0:	1e43      	subs	r3, r0, #1
 80057c2:	42a1      	cmp	r1, r4
 80057c4:	d008      	beq.n	80057d8 <memmove+0x28>
 80057c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80057ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80057ce:	e7f8      	b.n	80057c2 <memmove+0x12>
 80057d0:	4601      	mov	r1, r0
 80057d2:	4402      	add	r2, r0
 80057d4:	428a      	cmp	r2, r1
 80057d6:	d100      	bne.n	80057da <memmove+0x2a>
 80057d8:	bd10      	pop	{r4, pc}
 80057da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80057de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80057e2:	e7f7      	b.n	80057d4 <memmove+0x24>

080057e4 <_sbrk_r>:
 80057e4:	b538      	push	{r3, r4, r5, lr}
 80057e6:	2300      	movs	r3, #0
 80057e8:	4d05      	ldr	r5, [pc, #20]	@ (8005800 <_sbrk_r+0x1c>)
 80057ea:	4604      	mov	r4, r0
 80057ec:	4608      	mov	r0, r1
 80057ee:	602b      	str	r3, [r5, #0]
 80057f0:	f7fb fe42 	bl	8001478 <_sbrk>
 80057f4:	1c43      	adds	r3, r0, #1
 80057f6:	d102      	bne.n	80057fe <_sbrk_r+0x1a>
 80057f8:	682b      	ldr	r3, [r5, #0]
 80057fa:	b103      	cbz	r3, 80057fe <_sbrk_r+0x1a>
 80057fc:	6023      	str	r3, [r4, #0]
 80057fe:	bd38      	pop	{r3, r4, r5, pc}
 8005800:	20000350 	.word	0x20000350

08005804 <memchr>:
 8005804:	4603      	mov	r3, r0
 8005806:	b510      	push	{r4, lr}
 8005808:	b2c9      	uxtb	r1, r1
 800580a:	4402      	add	r2, r0
 800580c:	4293      	cmp	r3, r2
 800580e:	4618      	mov	r0, r3
 8005810:	d101      	bne.n	8005816 <memchr+0x12>
 8005812:	2000      	movs	r0, #0
 8005814:	e003      	b.n	800581e <memchr+0x1a>
 8005816:	7804      	ldrb	r4, [r0, #0]
 8005818:	3301      	adds	r3, #1
 800581a:	428c      	cmp	r4, r1
 800581c:	d1f6      	bne.n	800580c <memchr+0x8>
 800581e:	bd10      	pop	{r4, pc}

08005820 <memcpy>:
 8005820:	440a      	add	r2, r1
 8005822:	4291      	cmp	r1, r2
 8005824:	f100 33ff 	add.w	r3, r0, #4294967295
 8005828:	d100      	bne.n	800582c <memcpy+0xc>
 800582a:	4770      	bx	lr
 800582c:	b510      	push	{r4, lr}
 800582e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005832:	4291      	cmp	r1, r2
 8005834:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005838:	d1f9      	bne.n	800582e <memcpy+0xe>
 800583a:	bd10      	pop	{r4, pc}

0800583c <_realloc_r>:
 800583c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005840:	4607      	mov	r7, r0
 8005842:	4614      	mov	r4, r2
 8005844:	460d      	mov	r5, r1
 8005846:	b921      	cbnz	r1, 8005852 <_realloc_r+0x16>
 8005848:	4611      	mov	r1, r2
 800584a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800584e:	f7ff bc3b 	b.w	80050c8 <_malloc_r>
 8005852:	b92a      	cbnz	r2, 8005860 <_realloc_r+0x24>
 8005854:	f7ff fbce 	bl	8004ff4 <_free_r>
 8005858:	4625      	mov	r5, r4
 800585a:	4628      	mov	r0, r5
 800585c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005860:	f000 f81a 	bl	8005898 <_malloc_usable_size_r>
 8005864:	4284      	cmp	r4, r0
 8005866:	4606      	mov	r6, r0
 8005868:	d802      	bhi.n	8005870 <_realloc_r+0x34>
 800586a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800586e:	d8f4      	bhi.n	800585a <_realloc_r+0x1e>
 8005870:	4621      	mov	r1, r4
 8005872:	4638      	mov	r0, r7
 8005874:	f7ff fc28 	bl	80050c8 <_malloc_r>
 8005878:	4680      	mov	r8, r0
 800587a:	b908      	cbnz	r0, 8005880 <_realloc_r+0x44>
 800587c:	4645      	mov	r5, r8
 800587e:	e7ec      	b.n	800585a <_realloc_r+0x1e>
 8005880:	42b4      	cmp	r4, r6
 8005882:	4622      	mov	r2, r4
 8005884:	4629      	mov	r1, r5
 8005886:	bf28      	it	cs
 8005888:	4632      	movcs	r2, r6
 800588a:	f7ff ffc9 	bl	8005820 <memcpy>
 800588e:	4629      	mov	r1, r5
 8005890:	4638      	mov	r0, r7
 8005892:	f7ff fbaf 	bl	8004ff4 <_free_r>
 8005896:	e7f1      	b.n	800587c <_realloc_r+0x40>

08005898 <_malloc_usable_size_r>:
 8005898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800589c:	1f18      	subs	r0, r3, #4
 800589e:	2b00      	cmp	r3, #0
 80058a0:	bfbc      	itt	lt
 80058a2:	580b      	ldrlt	r3, [r1, r0]
 80058a4:	18c0      	addlt	r0, r0, r3
 80058a6:	4770      	bx	lr

080058a8 <_init>:
 80058a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058aa:	bf00      	nop
 80058ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ae:	bc08      	pop	{r3}
 80058b0:	469e      	mov	lr, r3
 80058b2:	4770      	bx	lr

080058b4 <_fini>:
 80058b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058b6:	bf00      	nop
 80058b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ba:	bc08      	pop	{r3}
 80058bc:	469e      	mov	lr, r3
 80058be:	4770      	bx	lr
