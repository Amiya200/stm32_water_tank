
WT1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c44c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008ac  0800c560  0800c560  0000d560  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce0c  0800ce0c  0000e230  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ce0c  0800ce0c  0000de0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ce14  0800ce14  0000e230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce14  0800ce14  0000de14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ce18  0800ce18  0000de18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000230  20000000  0800ce1c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a4  20000230  0800d04c  0000e230  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007d4  0800d04c  0000e7d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e230  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019763  00000000  00000000  0000e259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000460a  00000000  00000000  000279bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018f0  00000000  00000000  0002bfc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001392  00000000  00000000  0002d8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c75f  00000000  00000000  0002ec4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f550  00000000  00000000  0004b3a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099658  00000000  00000000  0006a8f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00103f51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007aa8  00000000  00000000  00103f94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0010ba3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000230 	.word	0x20000230
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c544 	.word	0x0800c544

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000234 	.word	0x20000234
 800014c:	0800c544 	.word	0x0800c544

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_frsub>:
 8000a9c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000aa0:	e002      	b.n	8000aa8 <__addsf3>
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_fsub>:
 8000aa4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000aa8 <__addsf3>:
 8000aa8:	0042      	lsls	r2, r0, #1
 8000aaa:	bf1f      	itttt	ne
 8000aac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ab0:	ea92 0f03 	teqne	r2, r3
 8000ab4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ab8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000abc:	d06a      	beq.n	8000b94 <__addsf3+0xec>
 8000abe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ac2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ac6:	bfc1      	itttt	gt
 8000ac8:	18d2      	addgt	r2, r2, r3
 8000aca:	4041      	eorgt	r1, r0
 8000acc:	4048      	eorgt	r0, r1
 8000ace:	4041      	eorgt	r1, r0
 8000ad0:	bfb8      	it	lt
 8000ad2:	425b      	neglt	r3, r3
 8000ad4:	2b19      	cmp	r3, #25
 8000ad6:	bf88      	it	hi
 8000ad8:	4770      	bxhi	lr
 8000ada:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000ade:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ae6:	bf18      	it	ne
 8000ae8:	4240      	negne	r0, r0
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aee:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000af2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000af6:	bf18      	it	ne
 8000af8:	4249      	negne	r1, r1
 8000afa:	ea92 0f03 	teq	r2, r3
 8000afe:	d03f      	beq.n	8000b80 <__addsf3+0xd8>
 8000b00:	f1a2 0201 	sub.w	r2, r2, #1
 8000b04:	fa41 fc03 	asr.w	ip, r1, r3
 8000b08:	eb10 000c 	adds.w	r0, r0, ip
 8000b0c:	f1c3 0320 	rsb	r3, r3, #32
 8000b10:	fa01 f103 	lsl.w	r1, r1, r3
 8000b14:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b18:	d502      	bpl.n	8000b20 <__addsf3+0x78>
 8000b1a:	4249      	negs	r1, r1
 8000b1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b20:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b24:	d313      	bcc.n	8000b4e <__addsf3+0xa6>
 8000b26:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b2a:	d306      	bcc.n	8000b3a <__addsf3+0x92>
 8000b2c:	0840      	lsrs	r0, r0, #1
 8000b2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b32:	f102 0201 	add.w	r2, r2, #1
 8000b36:	2afe      	cmp	r2, #254	@ 0xfe
 8000b38:	d251      	bcs.n	8000bde <__addsf3+0x136>
 8000b3a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b42:	bf08      	it	eq
 8000b44:	f020 0001 	biceq.w	r0, r0, #1
 8000b48:	ea40 0003 	orr.w	r0, r0, r3
 8000b4c:	4770      	bx	lr
 8000b4e:	0049      	lsls	r1, r1, #1
 8000b50:	eb40 0000 	adc.w	r0, r0, r0
 8000b54:	3a01      	subs	r2, #1
 8000b56:	bf28      	it	cs
 8000b58:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b5c:	d2ed      	bcs.n	8000b3a <__addsf3+0x92>
 8000b5e:	fab0 fc80 	clz	ip, r0
 8000b62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b66:	ebb2 020c 	subs.w	r2, r2, ip
 8000b6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b6e:	bfaa      	itet	ge
 8000b70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b74:	4252      	neglt	r2, r2
 8000b76:	4318      	orrge	r0, r3
 8000b78:	bfbc      	itt	lt
 8000b7a:	40d0      	lsrlt	r0, r2
 8000b7c:	4318      	orrlt	r0, r3
 8000b7e:	4770      	bx	lr
 8000b80:	f092 0f00 	teq	r2, #0
 8000b84:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b88:	bf06      	itte	eq
 8000b8a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b8e:	3201      	addeq	r2, #1
 8000b90:	3b01      	subne	r3, #1
 8000b92:	e7b5      	b.n	8000b00 <__addsf3+0x58>
 8000b94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b9c:	bf18      	it	ne
 8000b9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba2:	d021      	beq.n	8000be8 <__addsf3+0x140>
 8000ba4:	ea92 0f03 	teq	r2, r3
 8000ba8:	d004      	beq.n	8000bb4 <__addsf3+0x10c>
 8000baa:	f092 0f00 	teq	r2, #0
 8000bae:	bf08      	it	eq
 8000bb0:	4608      	moveq	r0, r1
 8000bb2:	4770      	bx	lr
 8000bb4:	ea90 0f01 	teq	r0, r1
 8000bb8:	bf1c      	itt	ne
 8000bba:	2000      	movne	r0, #0
 8000bbc:	4770      	bxne	lr
 8000bbe:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bc2:	d104      	bne.n	8000bce <__addsf3+0x126>
 8000bc4:	0040      	lsls	r0, r0, #1
 8000bc6:	bf28      	it	cs
 8000bc8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bcc:	4770      	bx	lr
 8000bce:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bd2:	bf3c      	itt	cc
 8000bd4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bd8:	4770      	bxcc	lr
 8000bda:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bde:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000be6:	4770      	bx	lr
 8000be8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bec:	bf16      	itet	ne
 8000bee:	4608      	movne	r0, r1
 8000bf0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bf4:	4601      	movne	r1, r0
 8000bf6:	0242      	lsls	r2, r0, #9
 8000bf8:	bf06      	itte	eq
 8000bfa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bfe:	ea90 0f01 	teqeq	r0, r1
 8000c02:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_ui2f>:
 8000c08:	f04f 0300 	mov.w	r3, #0
 8000c0c:	e004      	b.n	8000c18 <__aeabi_i2f+0x8>
 8000c0e:	bf00      	nop

08000c10 <__aeabi_i2f>:
 8000c10:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c14:	bf48      	it	mi
 8000c16:	4240      	negmi	r0, r0
 8000c18:	ea5f 0c00 	movs.w	ip, r0
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c24:	4601      	mov	r1, r0
 8000c26:	f04f 0000 	mov.w	r0, #0
 8000c2a:	e01c      	b.n	8000c66 <__aeabi_l2f+0x2a>

08000c2c <__aeabi_ul2f>:
 8000c2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c30:	bf08      	it	eq
 8000c32:	4770      	bxeq	lr
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e00a      	b.n	8000c50 <__aeabi_l2f+0x14>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_l2f>:
 8000c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c48:	d502      	bpl.n	8000c50 <__aeabi_l2f+0x14>
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	ea5f 0c01 	movs.w	ip, r1
 8000c54:	bf02      	ittt	eq
 8000c56:	4684      	moveq	ip, r0
 8000c58:	4601      	moveq	r1, r0
 8000c5a:	2000      	moveq	r0, #0
 8000c5c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c60:	bf08      	it	eq
 8000c62:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c66:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c6a:	fabc f28c 	clz	r2, ip
 8000c6e:	3a08      	subs	r2, #8
 8000c70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c74:	db10      	blt.n	8000c98 <__aeabi_l2f+0x5c>
 8000c76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c80:	f1c2 0220 	rsb	r2, r2, #32
 8000c84:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c88:	fa20 f202 	lsr.w	r2, r0, r2
 8000c8c:	eb43 0002 	adc.w	r0, r3, r2
 8000c90:	bf08      	it	eq
 8000c92:	f020 0001 	biceq.w	r0, r0, #1
 8000c96:	4770      	bx	lr
 8000c98:	f102 0220 	add.w	r2, r2, #32
 8000c9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca0:	f1c2 0220 	rsb	r2, r2, #32
 8000ca4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ca8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cac:	eb43 0002 	adc.w	r0, r3, r2
 8000cb0:	bf08      	it	eq
 8000cb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_fmul>:
 8000cb8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000cbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cc0:	bf1e      	ittt	ne
 8000cc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cc6:	ea92 0f0c 	teqne	r2, ip
 8000cca:	ea93 0f0c 	teqne	r3, ip
 8000cce:	d06f      	beq.n	8000db0 <__aeabi_fmul+0xf8>
 8000cd0:	441a      	add	r2, r3
 8000cd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000cd6:	0240      	lsls	r0, r0, #9
 8000cd8:	bf18      	it	ne
 8000cda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cde:	d01e      	beq.n	8000d1e <__aeabi_fmul+0x66>
 8000ce0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000ce4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ce8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cec:	fba0 3101 	umull	r3, r1, r0, r1
 8000cf0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000cf4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000cf8:	bf3e      	ittt	cc
 8000cfa:	0049      	lslcc	r1, r1, #1
 8000cfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d00:	005b      	lslcc	r3, r3, #1
 8000d02:	ea40 0001 	orr.w	r0, r0, r1
 8000d06:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d0a:	2afd      	cmp	r2, #253	@ 0xfd
 8000d0c:	d81d      	bhi.n	8000d4a <__aeabi_fmul+0x92>
 8000d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d16:	bf08      	it	eq
 8000d18:	f020 0001 	biceq.w	r0, r0, #1
 8000d1c:	4770      	bx	lr
 8000d1e:	f090 0f00 	teq	r0, #0
 8000d22:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d26:	bf08      	it	eq
 8000d28:	0249      	lsleq	r1, r1, #9
 8000d2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d32:	3a7f      	subs	r2, #127	@ 0x7f
 8000d34:	bfc2      	ittt	gt
 8000d36:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d3e:	4770      	bxgt	lr
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	dc5d      	bgt.n	8000e08 <__aeabi_fmul+0x150>
 8000d4c:	f112 0f19 	cmn.w	r2, #25
 8000d50:	bfdc      	itt	le
 8000d52:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d56:	4770      	bxle	lr
 8000d58:	f1c2 0200 	rsb	r2, r2, #0
 8000d5c:	0041      	lsls	r1, r0, #1
 8000d5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d62:	f1c2 0220 	rsb	r2, r2, #32
 8000d66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d6e:	f140 0000 	adc.w	r0, r0, #0
 8000d72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d76:	bf08      	it	eq
 8000d78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7c:	4770      	bx	lr
 8000d7e:	f092 0f00 	teq	r2, #0
 8000d82:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d86:	bf02      	ittt	eq
 8000d88:	0040      	lsleq	r0, r0, #1
 8000d8a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d8e:	3a01      	subeq	r2, #1
 8000d90:	d0f9      	beq.n	8000d86 <__aeabi_fmul+0xce>
 8000d92:	ea40 000c 	orr.w	r0, r0, ip
 8000d96:	f093 0f00 	teq	r3, #0
 8000d9a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d9e:	bf02      	ittt	eq
 8000da0:	0049      	lsleq	r1, r1, #1
 8000da2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000da6:	3b01      	subeq	r3, #1
 8000da8:	d0f9      	beq.n	8000d9e <__aeabi_fmul+0xe6>
 8000daa:	ea41 010c 	orr.w	r1, r1, ip
 8000dae:	e78f      	b.n	8000cd0 <__aeabi_fmul+0x18>
 8000db0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000db4:	ea92 0f0c 	teq	r2, ip
 8000db8:	bf18      	it	ne
 8000dba:	ea93 0f0c 	teqne	r3, ip
 8000dbe:	d00a      	beq.n	8000dd6 <__aeabi_fmul+0x11e>
 8000dc0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000dc4:	bf18      	it	ne
 8000dc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000dca:	d1d8      	bne.n	8000d7e <__aeabi_fmul+0xc6>
 8000dcc:	ea80 0001 	eor.w	r0, r0, r1
 8000dd0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dd4:	4770      	bx	lr
 8000dd6:	f090 0f00 	teq	r0, #0
 8000dda:	bf17      	itett	ne
 8000ddc:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000de0:	4608      	moveq	r0, r1
 8000de2:	f091 0f00 	teqne	r1, #0
 8000de6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dea:	d014      	beq.n	8000e16 <__aeabi_fmul+0x15e>
 8000dec:	ea92 0f0c 	teq	r2, ip
 8000df0:	d101      	bne.n	8000df6 <__aeabi_fmul+0x13e>
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	d10f      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000df6:	ea93 0f0c 	teq	r3, ip
 8000dfa:	d103      	bne.n	8000e04 <__aeabi_fmul+0x14c>
 8000dfc:	024b      	lsls	r3, r1, #9
 8000dfe:	bf18      	it	ne
 8000e00:	4608      	movne	r0, r1
 8000e02:	d108      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000e04:	ea80 0001 	eor.w	r0, r0, r1
 8000e08:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e0c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e10:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e14:	4770      	bx	lr
 8000e16:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e1a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e1e:	4770      	bx	lr

08000e20 <__aeabi_fdiv>:
 8000e20:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e28:	bf1e      	ittt	ne
 8000e2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e2e:	ea92 0f0c 	teqne	r2, ip
 8000e32:	ea93 0f0c 	teqne	r3, ip
 8000e36:	d069      	beq.n	8000f0c <__aeabi_fdiv+0xec>
 8000e38:	eba2 0203 	sub.w	r2, r2, r3
 8000e3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e40:	0249      	lsls	r1, r1, #9
 8000e42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e46:	d037      	beq.n	8000eb8 <__aeabi_fdiv+0x98>
 8000e48:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e54:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	bf38      	it	cc
 8000e5c:	005b      	lslcc	r3, r3, #1
 8000e5e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e62:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e66:	428b      	cmp	r3, r1
 8000e68:	bf24      	itt	cs
 8000e6a:	1a5b      	subcs	r3, r3, r1
 8000e6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e74:	bf24      	itt	cs
 8000e76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e82:	bf24      	itt	cs
 8000e84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e9a:	011b      	lsls	r3, r3, #4
 8000e9c:	bf18      	it	ne
 8000e9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ea2:	d1e0      	bne.n	8000e66 <__aeabi_fdiv+0x46>
 8000ea4:	2afd      	cmp	r2, #253	@ 0xfd
 8000ea6:	f63f af50 	bhi.w	8000d4a <__aeabi_fmul+0x92>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eb0:	bf08      	it	eq
 8000eb2:	f020 0001 	biceq.w	r0, r0, #1
 8000eb6:	4770      	bx	lr
 8000eb8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ebc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ec0:	327f      	adds	r2, #127	@ 0x7f
 8000ec2:	bfc2      	ittt	gt
 8000ec4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ec8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ecc:	4770      	bxgt	lr
 8000ece:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ed2:	f04f 0300 	mov.w	r3, #0
 8000ed6:	3a01      	subs	r2, #1
 8000ed8:	e737      	b.n	8000d4a <__aeabi_fmul+0x92>
 8000eda:	f092 0f00 	teq	r2, #0
 8000ede:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0040      	lsleq	r0, r0, #1
 8000ee6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000eea:	3a01      	subeq	r2, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fdiv+0xc2>
 8000eee:	ea40 000c 	orr.w	r0, r0, ip
 8000ef2:	f093 0f00 	teq	r3, #0
 8000ef6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000efa:	bf02      	ittt	eq
 8000efc:	0049      	lsleq	r1, r1, #1
 8000efe:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f02:	3b01      	subeq	r3, #1
 8000f04:	d0f9      	beq.n	8000efa <__aeabi_fdiv+0xda>
 8000f06:	ea41 010c 	orr.w	r1, r1, ip
 8000f0a:	e795      	b.n	8000e38 <__aeabi_fdiv+0x18>
 8000f0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f10:	ea92 0f0c 	teq	r2, ip
 8000f14:	d108      	bne.n	8000f28 <__aeabi_fdiv+0x108>
 8000f16:	0242      	lsls	r2, r0, #9
 8000f18:	f47f af7d 	bne.w	8000e16 <__aeabi_fmul+0x15e>
 8000f1c:	ea93 0f0c 	teq	r3, ip
 8000f20:	f47f af70 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f24:	4608      	mov	r0, r1
 8000f26:	e776      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f28:	ea93 0f0c 	teq	r3, ip
 8000f2c:	d104      	bne.n	8000f38 <__aeabi_fdiv+0x118>
 8000f2e:	024b      	lsls	r3, r1, #9
 8000f30:	f43f af4c 	beq.w	8000dcc <__aeabi_fmul+0x114>
 8000f34:	4608      	mov	r0, r1
 8000f36:	e76e      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f38:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f3c:	bf18      	it	ne
 8000f3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f42:	d1ca      	bne.n	8000eda <__aeabi_fdiv+0xba>
 8000f44:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f48:	f47f af5c 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f4c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f50:	f47f af3c 	bne.w	8000dcc <__aeabi_fmul+0x114>
 8000f54:	e75f      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f56:	bf00      	nop

08000f58 <__gesf2>:
 8000f58:	f04f 3cff 	mov.w	ip, #4294967295
 8000f5c:	e006      	b.n	8000f6c <__cmpsf2+0x4>
 8000f5e:	bf00      	nop

08000f60 <__lesf2>:
 8000f60:	f04f 0c01 	mov.w	ip, #1
 8000f64:	e002      	b.n	8000f6c <__cmpsf2+0x4>
 8000f66:	bf00      	nop

08000f68 <__cmpsf2>:
 8000f68:	f04f 0c01 	mov.w	ip, #1
 8000f6c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f70:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f7c:	bf18      	it	ne
 8000f7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f82:	d011      	beq.n	8000fa8 <__cmpsf2+0x40>
 8000f84:	b001      	add	sp, #4
 8000f86:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f8a:	bf18      	it	ne
 8000f8c:	ea90 0f01 	teqne	r0, r1
 8000f90:	bf58      	it	pl
 8000f92:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f96:	bf88      	it	hi
 8000f98:	17c8      	asrhi	r0, r1, #31
 8000f9a:	bf38      	it	cc
 8000f9c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fa0:	bf18      	it	ne
 8000fa2:	f040 0001 	orrne.w	r0, r0, #1
 8000fa6:	4770      	bx	lr
 8000fa8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fac:	d102      	bne.n	8000fb4 <__cmpsf2+0x4c>
 8000fae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fb2:	d105      	bne.n	8000fc0 <__cmpsf2+0x58>
 8000fb4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fb8:	d1e4      	bne.n	8000f84 <__cmpsf2+0x1c>
 8000fba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fbe:	d0e1      	beq.n	8000f84 <__cmpsf2+0x1c>
 8000fc0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <__aeabi_cfrcmple>:
 8000fc8:	4684      	mov	ip, r0
 8000fca:	4608      	mov	r0, r1
 8000fcc:	4661      	mov	r1, ip
 8000fce:	e7ff      	b.n	8000fd0 <__aeabi_cfcmpeq>

08000fd0 <__aeabi_cfcmpeq>:
 8000fd0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fd2:	f7ff ffc9 	bl	8000f68 <__cmpsf2>
 8000fd6:	2800      	cmp	r0, #0
 8000fd8:	bf48      	it	mi
 8000fda:	f110 0f00 	cmnmi.w	r0, #0
 8000fde:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fe0 <__aeabi_fcmpeq>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff fff4 	bl	8000fd0 <__aeabi_cfcmpeq>
 8000fe8:	bf0c      	ite	eq
 8000fea:	2001      	moveq	r0, #1
 8000fec:	2000      	movne	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmplt>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffea 	bl	8000fd0 <__aeabi_cfcmpeq>
 8000ffc:	bf34      	ite	cc
 8000ffe:	2001      	movcc	r0, #1
 8001000:	2000      	movcs	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmple>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffe0 	bl	8000fd0 <__aeabi_cfcmpeq>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpge>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffd2 	bl	8000fc8 <__aeabi_cfrcmple>
 8001024:	bf94      	ite	ls
 8001026:	2001      	movls	r0, #1
 8001028:	2000      	movhi	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_fcmpgt>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff ffc8 	bl	8000fc8 <__aeabi_cfrcmple>
 8001038:	bf34      	ite	cc
 800103a:	2001      	movcc	r0, #1
 800103c:	2000      	movcs	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_f2uiz>:
 8001044:	0042      	lsls	r2, r0, #1
 8001046:	d20e      	bcs.n	8001066 <__aeabi_f2uiz+0x22>
 8001048:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800104c:	d30b      	bcc.n	8001066 <__aeabi_f2uiz+0x22>
 800104e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001052:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001056:	d409      	bmi.n	800106c <__aeabi_f2uiz+0x28>
 8001058:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800105c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001060:	fa23 f002 	lsr.w	r0, r3, r2
 8001064:	4770      	bx	lr
 8001066:	f04f 0000 	mov.w	r0, #0
 800106a:	4770      	bx	lr
 800106c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001070:	d101      	bne.n	8001076 <__aeabi_f2uiz+0x32>
 8001072:	0242      	lsls	r2, r0, #9
 8001074:	d102      	bne.n	800107c <__aeabi_f2uiz+0x38>
 8001076:	f04f 30ff 	mov.w	r0, #4294967295
 800107a:	4770      	bx	lr
 800107c:	f04f 0000 	mov.w	r0, #0
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop

08001084 <__aeabi_uldivmod>:
 8001084:	b953      	cbnz	r3, 800109c <__aeabi_uldivmod+0x18>
 8001086:	b94a      	cbnz	r2, 800109c <__aeabi_uldivmod+0x18>
 8001088:	2900      	cmp	r1, #0
 800108a:	bf08      	it	eq
 800108c:	2800      	cmpeq	r0, #0
 800108e:	bf1c      	itt	ne
 8001090:	f04f 31ff 	movne.w	r1, #4294967295
 8001094:	f04f 30ff 	movne.w	r0, #4294967295
 8001098:	f000 b98c 	b.w	80013b4 <__aeabi_idiv0>
 800109c:	f1ad 0c08 	sub.w	ip, sp, #8
 80010a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010a4:	f000 f806 	bl	80010b4 <__udivmoddi4>
 80010a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010b0:	b004      	add	sp, #16
 80010b2:	4770      	bx	lr

080010b4 <__udivmoddi4>:
 80010b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010b8:	9d08      	ldr	r5, [sp, #32]
 80010ba:	468e      	mov	lr, r1
 80010bc:	4604      	mov	r4, r0
 80010be:	4688      	mov	r8, r1
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d14a      	bne.n	800115a <__udivmoddi4+0xa6>
 80010c4:	428a      	cmp	r2, r1
 80010c6:	4617      	mov	r7, r2
 80010c8:	d962      	bls.n	8001190 <__udivmoddi4+0xdc>
 80010ca:	fab2 f682 	clz	r6, r2
 80010ce:	b14e      	cbz	r6, 80010e4 <__udivmoddi4+0x30>
 80010d0:	f1c6 0320 	rsb	r3, r6, #32
 80010d4:	fa01 f806 	lsl.w	r8, r1, r6
 80010d8:	fa20 f303 	lsr.w	r3, r0, r3
 80010dc:	40b7      	lsls	r7, r6
 80010de:	ea43 0808 	orr.w	r8, r3, r8
 80010e2:	40b4      	lsls	r4, r6
 80010e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80010e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80010ec:	fa1f fc87 	uxth.w	ip, r7
 80010f0:	fb0e 8811 	mls	r8, lr, r1, r8
 80010f4:	fb01 f20c 	mul.w	r2, r1, ip
 80010f8:	0c23      	lsrs	r3, r4, #16
 80010fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80010fe:	429a      	cmp	r2, r3
 8001100:	d909      	bls.n	8001116 <__udivmoddi4+0x62>
 8001102:	18fb      	adds	r3, r7, r3
 8001104:	f101 30ff 	add.w	r0, r1, #4294967295
 8001108:	f080 80eb 	bcs.w	80012e2 <__udivmoddi4+0x22e>
 800110c:	429a      	cmp	r2, r3
 800110e:	f240 80e8 	bls.w	80012e2 <__udivmoddi4+0x22e>
 8001112:	3902      	subs	r1, #2
 8001114:	443b      	add	r3, r7
 8001116:	1a9a      	subs	r2, r3, r2
 8001118:	fbb2 f0fe 	udiv	r0, r2, lr
 800111c:	fb0e 2210 	mls	r2, lr, r0, r2
 8001120:	fb00 fc0c 	mul.w	ip, r0, ip
 8001124:	b2a3      	uxth	r3, r4
 8001126:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800112a:	459c      	cmp	ip, r3
 800112c:	d909      	bls.n	8001142 <__udivmoddi4+0x8e>
 800112e:	18fb      	adds	r3, r7, r3
 8001130:	f100 32ff 	add.w	r2, r0, #4294967295
 8001134:	f080 80d7 	bcs.w	80012e6 <__udivmoddi4+0x232>
 8001138:	459c      	cmp	ip, r3
 800113a:	f240 80d4 	bls.w	80012e6 <__udivmoddi4+0x232>
 800113e:	443b      	add	r3, r7
 8001140:	3802      	subs	r0, #2
 8001142:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001146:	2100      	movs	r1, #0
 8001148:	eba3 030c 	sub.w	r3, r3, ip
 800114c:	b11d      	cbz	r5, 8001156 <__udivmoddi4+0xa2>
 800114e:	2200      	movs	r2, #0
 8001150:	40f3      	lsrs	r3, r6
 8001152:	e9c5 3200 	strd	r3, r2, [r5]
 8001156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800115a:	428b      	cmp	r3, r1
 800115c:	d905      	bls.n	800116a <__udivmoddi4+0xb6>
 800115e:	b10d      	cbz	r5, 8001164 <__udivmoddi4+0xb0>
 8001160:	e9c5 0100 	strd	r0, r1, [r5]
 8001164:	2100      	movs	r1, #0
 8001166:	4608      	mov	r0, r1
 8001168:	e7f5      	b.n	8001156 <__udivmoddi4+0xa2>
 800116a:	fab3 f183 	clz	r1, r3
 800116e:	2900      	cmp	r1, #0
 8001170:	d146      	bne.n	8001200 <__udivmoddi4+0x14c>
 8001172:	4573      	cmp	r3, lr
 8001174:	d302      	bcc.n	800117c <__udivmoddi4+0xc8>
 8001176:	4282      	cmp	r2, r0
 8001178:	f200 8108 	bhi.w	800138c <__udivmoddi4+0x2d8>
 800117c:	1a84      	subs	r4, r0, r2
 800117e:	eb6e 0203 	sbc.w	r2, lr, r3
 8001182:	2001      	movs	r0, #1
 8001184:	4690      	mov	r8, r2
 8001186:	2d00      	cmp	r5, #0
 8001188:	d0e5      	beq.n	8001156 <__udivmoddi4+0xa2>
 800118a:	e9c5 4800 	strd	r4, r8, [r5]
 800118e:	e7e2      	b.n	8001156 <__udivmoddi4+0xa2>
 8001190:	2a00      	cmp	r2, #0
 8001192:	f000 8091 	beq.w	80012b8 <__udivmoddi4+0x204>
 8001196:	fab2 f682 	clz	r6, r2
 800119a:	2e00      	cmp	r6, #0
 800119c:	f040 80a5 	bne.w	80012ea <__udivmoddi4+0x236>
 80011a0:	1a8a      	subs	r2, r1, r2
 80011a2:	2101      	movs	r1, #1
 80011a4:	0c03      	lsrs	r3, r0, #16
 80011a6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80011aa:	b280      	uxth	r0, r0
 80011ac:	b2bc      	uxth	r4, r7
 80011ae:	fbb2 fcfe 	udiv	ip, r2, lr
 80011b2:	fb0e 221c 	mls	r2, lr, ip, r2
 80011b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80011ba:	fb04 f20c 	mul.w	r2, r4, ip
 80011be:	429a      	cmp	r2, r3
 80011c0:	d907      	bls.n	80011d2 <__udivmoddi4+0x11e>
 80011c2:	18fb      	adds	r3, r7, r3
 80011c4:	f10c 38ff 	add.w	r8, ip, #4294967295
 80011c8:	d202      	bcs.n	80011d0 <__udivmoddi4+0x11c>
 80011ca:	429a      	cmp	r2, r3
 80011cc:	f200 80e3 	bhi.w	8001396 <__udivmoddi4+0x2e2>
 80011d0:	46c4      	mov	ip, r8
 80011d2:	1a9b      	subs	r3, r3, r2
 80011d4:	fbb3 f2fe 	udiv	r2, r3, lr
 80011d8:	fb0e 3312 	mls	r3, lr, r2, r3
 80011dc:	fb02 f404 	mul.w	r4, r2, r4
 80011e0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80011e4:	429c      	cmp	r4, r3
 80011e6:	d907      	bls.n	80011f8 <__udivmoddi4+0x144>
 80011e8:	18fb      	adds	r3, r7, r3
 80011ea:	f102 30ff 	add.w	r0, r2, #4294967295
 80011ee:	d202      	bcs.n	80011f6 <__udivmoddi4+0x142>
 80011f0:	429c      	cmp	r4, r3
 80011f2:	f200 80cd 	bhi.w	8001390 <__udivmoddi4+0x2dc>
 80011f6:	4602      	mov	r2, r0
 80011f8:	1b1b      	subs	r3, r3, r4
 80011fa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80011fe:	e7a5      	b.n	800114c <__udivmoddi4+0x98>
 8001200:	f1c1 0620 	rsb	r6, r1, #32
 8001204:	408b      	lsls	r3, r1
 8001206:	fa22 f706 	lsr.w	r7, r2, r6
 800120a:	431f      	orrs	r7, r3
 800120c:	fa2e fa06 	lsr.w	sl, lr, r6
 8001210:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8001214:	fbba f8f9 	udiv	r8, sl, r9
 8001218:	fa0e fe01 	lsl.w	lr, lr, r1
 800121c:	fa20 f306 	lsr.w	r3, r0, r6
 8001220:	fb09 aa18 	mls	sl, r9, r8, sl
 8001224:	fa1f fc87 	uxth.w	ip, r7
 8001228:	ea43 030e 	orr.w	r3, r3, lr
 800122c:	fa00 fe01 	lsl.w	lr, r0, r1
 8001230:	fb08 f00c 	mul.w	r0, r8, ip
 8001234:	0c1c      	lsrs	r4, r3, #16
 8001236:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800123a:	42a0      	cmp	r0, r4
 800123c:	fa02 f201 	lsl.w	r2, r2, r1
 8001240:	d90a      	bls.n	8001258 <__udivmoddi4+0x1a4>
 8001242:	193c      	adds	r4, r7, r4
 8001244:	f108 3aff 	add.w	sl, r8, #4294967295
 8001248:	f080 809e 	bcs.w	8001388 <__udivmoddi4+0x2d4>
 800124c:	42a0      	cmp	r0, r4
 800124e:	f240 809b 	bls.w	8001388 <__udivmoddi4+0x2d4>
 8001252:	f1a8 0802 	sub.w	r8, r8, #2
 8001256:	443c      	add	r4, r7
 8001258:	1a24      	subs	r4, r4, r0
 800125a:	b298      	uxth	r0, r3
 800125c:	fbb4 f3f9 	udiv	r3, r4, r9
 8001260:	fb09 4413 	mls	r4, r9, r3, r4
 8001264:	fb03 fc0c 	mul.w	ip, r3, ip
 8001268:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 800126c:	45a4      	cmp	ip, r4
 800126e:	d909      	bls.n	8001284 <__udivmoddi4+0x1d0>
 8001270:	193c      	adds	r4, r7, r4
 8001272:	f103 30ff 	add.w	r0, r3, #4294967295
 8001276:	f080 8085 	bcs.w	8001384 <__udivmoddi4+0x2d0>
 800127a:	45a4      	cmp	ip, r4
 800127c:	f240 8082 	bls.w	8001384 <__udivmoddi4+0x2d0>
 8001280:	3b02      	subs	r3, #2
 8001282:	443c      	add	r4, r7
 8001284:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001288:	eba4 040c 	sub.w	r4, r4, ip
 800128c:	fba0 8c02 	umull	r8, ip, r0, r2
 8001290:	4564      	cmp	r4, ip
 8001292:	4643      	mov	r3, r8
 8001294:	46e1      	mov	r9, ip
 8001296:	d364      	bcc.n	8001362 <__udivmoddi4+0x2ae>
 8001298:	d061      	beq.n	800135e <__udivmoddi4+0x2aa>
 800129a:	b15d      	cbz	r5, 80012b4 <__udivmoddi4+0x200>
 800129c:	ebbe 0203 	subs.w	r2, lr, r3
 80012a0:	eb64 0409 	sbc.w	r4, r4, r9
 80012a4:	fa04 f606 	lsl.w	r6, r4, r6
 80012a8:	fa22 f301 	lsr.w	r3, r2, r1
 80012ac:	431e      	orrs	r6, r3
 80012ae:	40cc      	lsrs	r4, r1
 80012b0:	e9c5 6400 	strd	r6, r4, [r5]
 80012b4:	2100      	movs	r1, #0
 80012b6:	e74e      	b.n	8001156 <__udivmoddi4+0xa2>
 80012b8:	fbb1 fcf2 	udiv	ip, r1, r2
 80012bc:	0c01      	lsrs	r1, r0, #16
 80012be:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80012c2:	b280      	uxth	r0, r0
 80012c4:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80012c8:	463b      	mov	r3, r7
 80012ca:	fbb1 f1f7 	udiv	r1, r1, r7
 80012ce:	4638      	mov	r0, r7
 80012d0:	463c      	mov	r4, r7
 80012d2:	46b8      	mov	r8, r7
 80012d4:	46be      	mov	lr, r7
 80012d6:	2620      	movs	r6, #32
 80012d8:	eba2 0208 	sub.w	r2, r2, r8
 80012dc:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80012e0:	e765      	b.n	80011ae <__udivmoddi4+0xfa>
 80012e2:	4601      	mov	r1, r0
 80012e4:	e717      	b.n	8001116 <__udivmoddi4+0x62>
 80012e6:	4610      	mov	r0, r2
 80012e8:	e72b      	b.n	8001142 <__udivmoddi4+0x8e>
 80012ea:	f1c6 0120 	rsb	r1, r6, #32
 80012ee:	fa2e fc01 	lsr.w	ip, lr, r1
 80012f2:	40b7      	lsls	r7, r6
 80012f4:	fa0e fe06 	lsl.w	lr, lr, r6
 80012f8:	fa20 f101 	lsr.w	r1, r0, r1
 80012fc:	ea41 010e 	orr.w	r1, r1, lr
 8001300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001304:	fbbc f8fe 	udiv	r8, ip, lr
 8001308:	b2bc      	uxth	r4, r7
 800130a:	fb0e cc18 	mls	ip, lr, r8, ip
 800130e:	fb08 f904 	mul.w	r9, r8, r4
 8001312:	0c0a      	lsrs	r2, r1, #16
 8001314:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8001318:	40b0      	lsls	r0, r6
 800131a:	4591      	cmp	r9, r2
 800131c:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001320:	b280      	uxth	r0, r0
 8001322:	d93e      	bls.n	80013a2 <__udivmoddi4+0x2ee>
 8001324:	18ba      	adds	r2, r7, r2
 8001326:	f108 3cff 	add.w	ip, r8, #4294967295
 800132a:	d201      	bcs.n	8001330 <__udivmoddi4+0x27c>
 800132c:	4591      	cmp	r9, r2
 800132e:	d81f      	bhi.n	8001370 <__udivmoddi4+0x2bc>
 8001330:	eba2 0209 	sub.w	r2, r2, r9
 8001334:	fbb2 f9fe 	udiv	r9, r2, lr
 8001338:	fb09 f804 	mul.w	r8, r9, r4
 800133c:	fb0e 2a19 	mls	sl, lr, r9, r2
 8001340:	b28a      	uxth	r2, r1
 8001342:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 8001346:	4542      	cmp	r2, r8
 8001348:	d229      	bcs.n	800139e <__udivmoddi4+0x2ea>
 800134a:	18ba      	adds	r2, r7, r2
 800134c:	f109 31ff 	add.w	r1, r9, #4294967295
 8001350:	d2c2      	bcs.n	80012d8 <__udivmoddi4+0x224>
 8001352:	4542      	cmp	r2, r8
 8001354:	d2c0      	bcs.n	80012d8 <__udivmoddi4+0x224>
 8001356:	f1a9 0102 	sub.w	r1, r9, #2
 800135a:	443a      	add	r2, r7
 800135c:	e7bc      	b.n	80012d8 <__udivmoddi4+0x224>
 800135e:	45c6      	cmp	lr, r8
 8001360:	d29b      	bcs.n	800129a <__udivmoddi4+0x1e6>
 8001362:	ebb8 0302 	subs.w	r3, r8, r2
 8001366:	eb6c 0c07 	sbc.w	ip, ip, r7
 800136a:	3801      	subs	r0, #1
 800136c:	46e1      	mov	r9, ip
 800136e:	e794      	b.n	800129a <__udivmoddi4+0x1e6>
 8001370:	eba7 0909 	sub.w	r9, r7, r9
 8001374:	444a      	add	r2, r9
 8001376:	fbb2 f9fe 	udiv	r9, r2, lr
 800137a:	f1a8 0c02 	sub.w	ip, r8, #2
 800137e:	fb09 f804 	mul.w	r8, r9, r4
 8001382:	e7db      	b.n	800133c <__udivmoddi4+0x288>
 8001384:	4603      	mov	r3, r0
 8001386:	e77d      	b.n	8001284 <__udivmoddi4+0x1d0>
 8001388:	46d0      	mov	r8, sl
 800138a:	e765      	b.n	8001258 <__udivmoddi4+0x1a4>
 800138c:	4608      	mov	r0, r1
 800138e:	e6fa      	b.n	8001186 <__udivmoddi4+0xd2>
 8001390:	443b      	add	r3, r7
 8001392:	3a02      	subs	r2, #2
 8001394:	e730      	b.n	80011f8 <__udivmoddi4+0x144>
 8001396:	f1ac 0c02 	sub.w	ip, ip, #2
 800139a:	443b      	add	r3, r7
 800139c:	e719      	b.n	80011d2 <__udivmoddi4+0x11e>
 800139e:	4649      	mov	r1, r9
 80013a0:	e79a      	b.n	80012d8 <__udivmoddi4+0x224>
 80013a2:	eba2 0209 	sub.w	r2, r2, r9
 80013a6:	fbb2 f9fe 	udiv	r9, r2, lr
 80013aa:	46c4      	mov	ip, r8
 80013ac:	fb09 f804 	mul.w	r8, r9, r4
 80013b0:	e7c4      	b.n	800133c <__udivmoddi4+0x288>
 80013b2:	bf00      	nop

080013b4 <__aeabi_idiv0>:
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop

080013b8 <ReadAverageVoltage>:

/* ---------------------------------------------------------------
 * Helper: read average ADC voltage for a given channel
 * --------------------------------------------------------------- */
static float ReadAverageVoltage(uint32_t channel, uint8_t samples)
{
 80013b8:	b590      	push	{r4, r7, lr}
 80013ba:	b089      	sub	sp, #36	@ 0x24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	460b      	mov	r3, r1
 80013c2:	70fb      	strb	r3, [r7, #3]
    ADC_ChannelConfTypeDef sConfig = {0};
 80013c4:	f107 0308 	add.w	r3, r7, #8
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
    sConfig.Channel = channel;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 80013d4:	2301      	movs	r3, #1
 80013d6:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 80013d8:	2304      	movs	r3, #4
 80013da:	613b      	str	r3, [r7, #16]
    HAL_ADC_ConfigChannel(hAdc, &sConfig);
 80013dc:	4b25      	ldr	r3, [pc, #148]	@ (8001474 <ReadAverageVoltage+0xbc>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f107 0208 	add.w	r2, r7, #8
 80013e4:	4611      	mov	r1, r2
 80013e6:	4618      	mov	r0, r3
 80013e8:	f004 f8f6 	bl	80055d8 <HAL_ADC_ConfigChannel>

    uint32_t sum = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < samples; i++) {
 80013f0:	2300      	movs	r3, #0
 80013f2:	76fb      	strb	r3, [r7, #27]
 80013f4:	e01c      	b.n	8001430 <ReadAverageVoltage+0x78>
        HAL_ADC_Start(hAdc);
 80013f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001474 <ReadAverageVoltage+0xbc>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f003 fe38 	bl	8005070 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(hAdc, HAL_MAX_DELAY);
 8001400:	4b1c      	ldr	r3, [pc, #112]	@ (8001474 <ReadAverageVoltage+0xbc>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f04f 31ff 	mov.w	r1, #4294967295
 8001408:	4618      	mov	r0, r3
 800140a:	f003 ff0b 	bl	8005224 <HAL_ADC_PollForConversion>
        sum += HAL_ADC_GetValue(hAdc);
 800140e:	4b19      	ldr	r3, [pc, #100]	@ (8001474 <ReadAverageVoltage+0xbc>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f004 f80c 	bl	8005430 <HAL_ADC_GetValue>
 8001418:	4602      	mov	r2, r0
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	4413      	add	r3, r2
 800141e:	61fb      	str	r3, [r7, #28]
        HAL_ADC_Stop(hAdc);
 8001420:	4b14      	ldr	r3, [pc, #80]	@ (8001474 <ReadAverageVoltage+0xbc>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4618      	mov	r0, r3
 8001426:	f003 fed1 	bl	80051cc <HAL_ADC_Stop>
    for (uint8_t i = 0; i < samples; i++) {
 800142a:	7efb      	ldrb	r3, [r7, #27]
 800142c:	3301      	adds	r3, #1
 800142e:	76fb      	strb	r3, [r7, #27]
 8001430:	7efa      	ldrb	r2, [r7, #27]
 8001432:	78fb      	ldrb	r3, [r7, #3]
 8001434:	429a      	cmp	r2, r3
 8001436:	d3de      	bcc.n	80013f6 <ReadAverageVoltage+0x3e>
    }

    float avg = (float)sum / samples;
 8001438:	69f8      	ldr	r0, [r7, #28]
 800143a:	f7ff fbe5 	bl	8000c08 <__aeabi_ui2f>
 800143e:	4604      	mov	r4, r0
 8001440:	78fb      	ldrb	r3, [r7, #3]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff fbe4 	bl	8000c10 <__aeabi_i2f>
 8001448:	4603      	mov	r3, r0
 800144a:	4619      	mov	r1, r3
 800144c:	4620      	mov	r0, r4
 800144e:	f7ff fce7 	bl	8000e20 <__aeabi_fdiv>
 8001452:	4603      	mov	r3, r0
 8001454:	617b      	str	r3, [r7, #20]
    return (avg * ACS712_VREF_ADC) / ACS712_ADC_RESOLUTION;  // in Volts
 8001456:	4908      	ldr	r1, [pc, #32]	@ (8001478 <ReadAverageVoltage+0xc0>)
 8001458:	6978      	ldr	r0, [r7, #20]
 800145a:	f7ff fc2d 	bl	8000cb8 <__aeabi_fmul>
 800145e:	4603      	mov	r3, r0
 8001460:	4906      	ldr	r1, [pc, #24]	@ (800147c <ReadAverageVoltage+0xc4>)
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fcdc 	bl	8000e20 <__aeabi_fdiv>
 8001468:	4603      	mov	r3, r0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3724      	adds	r7, #36	@ 0x24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd90      	pop	{r4, r7, pc}
 8001472:	bf00      	nop
 8001474:	20000254 	.word	0x20000254
 8001478:	40533333 	.word	0x40533333
 800147c:	457ff000 	.word	0x457ff000

08001480 <ACS712_Init>:

/* ---------------------------------------------------------------
 * Init + zero-offset calibration
 * --------------------------------------------------------------- */
void ACS712_Init(ADC_HandleTypeDef *hadc)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
    hAdc = hadc;
 8001488:	4a06      	ldr	r2, [pc, #24]	@ (80014a4 <ACS712_Init+0x24>)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6013      	str	r3, [r2, #0]
    HAL_Delay(500);   // let voltage settle (~0.5 s)
 800148e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001492:	f003 fcf1 	bl	8004e78 <HAL_Delay>
    ACS712_CalibrateZero();
 8001496:	f000 f807 	bl	80014a8 <ACS712_CalibrateZero>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000254 	.word	0x20000254

080014a8 <ACS712_CalibrateZero>:

/* ---------------------------------------------------------------
 * Calibrate sensor at 0 A (no load)
 * --------------------------------------------------------------- */
void ACS712_CalibrateZero(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
    const uint16_t samples = 500;
 80014ae:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80014b2:	803b      	strh	r3, [r7, #0]
    float sum = 0;
 80014b4:	f04f 0300 	mov.w	r3, #0
 80014b8:	607b      	str	r3, [r7, #4]
    for (uint16_t i = 0; i < samples; i++) {
 80014ba:	2300      	movs	r3, #0
 80014bc:	807b      	strh	r3, [r7, #2]
 80014be:	e00d      	b.n	80014dc <ACS712_CalibrateZero+0x34>
        sum += ReadAverageVoltage(ACS712_ADC_CHANNEL, 1);
 80014c0:	2101      	movs	r1, #1
 80014c2:	2007      	movs	r0, #7
 80014c4:	f7ff ff78 	bl	80013b8 <ReadAverageVoltage>
 80014c8:	4603      	mov	r3, r0
 80014ca:	4619      	mov	r1, r3
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff faeb 	bl	8000aa8 <__addsf3>
 80014d2:	4603      	mov	r3, r0
 80014d4:	607b      	str	r3, [r7, #4]
    for (uint16_t i = 0; i < samples; i++) {
 80014d6:	887b      	ldrh	r3, [r7, #2]
 80014d8:	3301      	adds	r3, #1
 80014da:	807b      	strh	r3, [r7, #2]
 80014dc:	887a      	ldrh	r2, [r7, #2]
 80014de:	883b      	ldrh	r3, [r7, #0]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d3ed      	bcc.n	80014c0 <ACS712_CalibrateZero+0x18>
    }
    zeroOffset = sum / samples;   // midpoint voltage (≈ 2.5 V typical)
 80014e4:	883b      	ldrh	r3, [r7, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff fb92 	bl	8000c10 <__aeabi_i2f>
 80014ec:	4603      	mov	r3, r0
 80014ee:	4619      	mov	r1, r3
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7ff fc95 	bl	8000e20 <__aeabi_fdiv>
 80014f6:	4603      	mov	r3, r0
 80014f8:	461a      	mov	r2, r3
 80014fa:	4b03      	ldr	r3, [pc, #12]	@ (8001508 <ACS712_CalibrateZero+0x60>)
 80014fc:	601a      	str	r2, [r3, #0]
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000258 	.word	0x20000258

0800150c <ACS712_ReadCurrent>:
//    g_currentA = lastCurrent;
//    return lastCurrent;
//}

float ACS712_ReadCurrent(void)
{
 800150c:	b590      	push	{r4, r7, lr}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
    float voltage = ReadAverageVoltage(ACS712_ADC_CHANNEL, ACS712_NUM_SAMPLES);
 8001512:	210a      	movs	r1, #10
 8001514:	2007      	movs	r0, #7
 8001516:	f7ff ff4f 	bl	80013b8 <ReadAverageVoltage>
 800151a:	6038      	str	r0, [r7, #0]
    float current = (voltage - zeroOffset) / ACS712_SENSITIVITY_RAW;
 800151c:	4b1c      	ldr	r3, [pc, #112]	@ (8001590 <ACS712_ReadCurrent+0x84>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4619      	mov	r1, r3
 8001522:	6838      	ldr	r0, [r7, #0]
 8001524:	f7ff fabe 	bl	8000aa4 <__aeabi_fsub>
 8001528:	4603      	mov	r3, r0
 800152a:	491a      	ldr	r1, [pc, #104]	@ (8001594 <ACS712_ReadCurrent+0x88>)
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff fc77 	bl	8000e20 <__aeabi_fdiv>
 8001532:	4603      	mov	r3, r0
 8001534:	607b      	str	r3, [r7, #4]

    // Dead-zone filter
    if (fabsf(current) < ACS712_NOISE_DEADZONE)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800153c:	4916      	ldr	r1, [pc, #88]	@ (8001598 <ACS712_ReadCurrent+0x8c>)
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff fd58 	bl	8000ff4 <__aeabi_fcmplt>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d002      	beq.n	8001550 <ACS712_ReadCurrent+0x44>
        current = 0.0f;
 800154a:	f04f 0300 	mov.w	r3, #0
 800154e:	607b      	str	r3, [r7, #4]

    // Low-pass filter
    lastCurrent = (1.0f - ACS712_FILTER_ALPHA) * lastCurrent +
 8001550:	4b12      	ldr	r3, [pc, #72]	@ (800159c <ACS712_ReadCurrent+0x90>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4912      	ldr	r1, [pc, #72]	@ (80015a0 <ACS712_ReadCurrent+0x94>)
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fbae 	bl	8000cb8 <__aeabi_fmul>
 800155c:	4603      	mov	r3, r0
 800155e:	461c      	mov	r4, r3
                  ACS712_FILTER_ALPHA * current;
 8001560:	4910      	ldr	r1, [pc, #64]	@ (80015a4 <ACS712_ReadCurrent+0x98>)
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff fba8 	bl	8000cb8 <__aeabi_fmul>
 8001568:	4603      	mov	r3, r0
    lastCurrent = (1.0f - ACS712_FILTER_ALPHA) * lastCurrent +
 800156a:	4619      	mov	r1, r3
 800156c:	4620      	mov	r0, r4
 800156e:	f7ff fa9b 	bl	8000aa8 <__addsf3>
 8001572:	4603      	mov	r3, r0
 8001574:	461a      	mov	r2, r3
 8001576:	4b09      	ldr	r3, [pc, #36]	@ (800159c <ACS712_ReadCurrent+0x90>)
 8001578:	601a      	str	r2, [r3, #0]

    g_currentA = lastCurrent;    // ✅ store globally for external access
 800157a:	4b08      	ldr	r3, [pc, #32]	@ (800159c <ACS712_ReadCurrent+0x90>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a0a      	ldr	r2, [pc, #40]	@ (80015a8 <ACS712_ReadCurrent+0x9c>)
 8001580:	6013      	str	r3, [r2, #0]
    return lastCurrent;
 8001582:	4b06      	ldr	r3, [pc, #24]	@ (800159c <ACS712_ReadCurrent+0x90>)
 8001584:	681b      	ldr	r3, [r3, #0]
}
 8001586:	4618      	mov	r0, r3
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	bd90      	pop	{r4, r7, pc}
 800158e:	bf00      	nop
 8001590:	20000258 	.word	0x20000258
 8001594:	3d872b02 	.word	0x3d872b02
 8001598:	3cf5c28f 	.word	0x3cf5c28f
 800159c:	2000025c 	.word	0x2000025c
 80015a0:	3f333333 	.word	0x3f333333
 80015a4:	3e99999a 	.word	0x3e99999a
 80015a8:	2000024c 	.word	0x2000024c

080015ac <Voltage_ReadInput>:

/* ---------------------------------------------------------------
 * Read input voltage (from divider) in Volts
 * --------------------------------------------------------------- */
float Voltage_ReadInput(void)
{
 80015ac:	b590      	push	{r4, r7, lr}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
    float vAdc = ReadAverageVoltage(VOLTAGE_ADC_CHANNEL, 5);   // read scaled ADC voltage
 80015b2:	2105      	movs	r1, #5
 80015b4:	2006      	movs	r0, #6
 80015b6:	f7ff feff 	bl	80013b8 <ReadAverageVoltage>
 80015ba:	6078      	str	r0, [r7, #4]
    float vInput = vAdc / VOLT_DIVIDER_RATIO;                  // undo divider (R2/(R1+R2))
 80015bc:	4912      	ldr	r1, [pc, #72]	@ (8001608 <Voltage_ReadInput+0x5c>)
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7ff fc2e 	bl	8000e20 <__aeabi_fdiv>
 80015c4:	4603      	mov	r3, r0
 80015c6:	603b      	str	r3, [r7, #0]

    // Optional low-pass filter for stability
    lastVoltage = (1.0f - ACS712_FILTER_ALPHA) * lastVoltage +
 80015c8:	4b10      	ldr	r3, [pc, #64]	@ (800160c <Voltage_ReadInput+0x60>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4910      	ldr	r1, [pc, #64]	@ (8001610 <Voltage_ReadInput+0x64>)
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fb72 	bl	8000cb8 <__aeabi_fmul>
 80015d4:	4603      	mov	r3, r0
 80015d6:	461c      	mov	r4, r3
                  ACS712_FILTER_ALPHA * vInput;
 80015d8:	490e      	ldr	r1, [pc, #56]	@ (8001614 <Voltage_ReadInput+0x68>)
 80015da:	6838      	ldr	r0, [r7, #0]
 80015dc:	f7ff fb6c 	bl	8000cb8 <__aeabi_fmul>
 80015e0:	4603      	mov	r3, r0
    lastVoltage = (1.0f - ACS712_FILTER_ALPHA) * lastVoltage +
 80015e2:	4619      	mov	r1, r3
 80015e4:	4620      	mov	r0, r4
 80015e6:	f7ff fa5f 	bl	8000aa8 <__addsf3>
 80015ea:	4603      	mov	r3, r0
 80015ec:	461a      	mov	r2, r3
 80015ee:	4b07      	ldr	r3, [pc, #28]	@ (800160c <Voltage_ReadInput+0x60>)
 80015f0:	601a      	str	r2, [r3, #0]

    g_voltageV = lastVoltage;
 80015f2:	4b06      	ldr	r3, [pc, #24]	@ (800160c <Voltage_ReadInput+0x60>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a08      	ldr	r2, [pc, #32]	@ (8001618 <Voltage_ReadInput+0x6c>)
 80015f8:	6013      	str	r3, [r2, #0]
    return lastVoltage;
 80015fa:	4b04      	ldr	r3, [pc, #16]	@ (800160c <Voltage_ReadInput+0x60>)
 80015fc:	681b      	ldr	r3, [r3, #0]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	bd90      	pop	{r4, r7, pc}
 8001606:	bf00      	nop
 8001608:	3f58f2fb 	.word	0x3f58f2fb
 800160c:	20000260 	.word	0x20000260
 8001610:	3f333333 	.word	0x3f333333
 8001614:	3e99999a 	.word	0x3e99999a
 8001618:	20000250 	.word	0x20000250

0800161c <ACS712_Update>:

/* ---------------------------------------------------------------
 * Combined update (for periodic tasks)
 * --------------------------------------------------------------- */
void ACS712_Update(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
    g_currentA = ACS712_ReadCurrent();
 8001620:	f7ff ff74 	bl	800150c <ACS712_ReadCurrent>
 8001624:	4603      	mov	r3, r0
 8001626:	4a04      	ldr	r2, [pc, #16]	@ (8001638 <ACS712_Update+0x1c>)
 8001628:	6013      	str	r3, [r2, #0]
    g_voltageV = Voltage_ReadInput();
 800162a:	f7ff ffbf 	bl	80015ac <Voltage_ReadInput>
 800162e:	4603      	mov	r3, r0
 8001630:	4a02      	ldr	r2, [pc, #8]	@ (800163c <ACS712_Update+0x20>)
 8001632:	6013      	str	r3, [r2, #0]
}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}
 8001638:	2000024c 	.word	0x2000024c
 800163c:	20000250 	.word	0x20000250

08001640 <readChannelVoltage>:

static char dataPacketTx[16];

/* --- helper: sample one channel --- */
static float readChannelVoltage(ADC_HandleTypeDef *hadc, uint32_t channel)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
    ADC_ChannelConfTypeDef sConfig = {0};
 800164a:	f107 030c 	add.w	r3, r7, #12
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	609a      	str	r2, [r3, #8]
    sConfig.Channel = channel;
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	60fb      	str	r3, [r7, #12]
    sConfig.Rank = 1;
 800165a:	2301      	movs	r3, #1
 800165c:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 800165e:	2306      	movs	r3, #6
 8001660:	617b      	str	r3, [r7, #20]

    if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8001662:	f107 030c 	add.w	r3, r7, #12
 8001666:	4619      	mov	r1, r3
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f003 ffb5 	bl	80055d8 <HAL_ADC_ConfigChannel>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d002      	beq.n	800167a <readChannelVoltage+0x3a>
        return 0.0f;
 8001674:	f04f 0300 	mov.w	r3, #0
 8001678:	e029      	b.n	80016ce <readChannelVoltage+0x8e>
    if (HAL_ADC_Start(hadc) != HAL_OK)
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f003 fcf8 	bl	8005070 <HAL_ADC_Start>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d002      	beq.n	800168c <readChannelVoltage+0x4c>
        return 0.0f;
 8001686:	f04f 0300 	mov.w	r3, #0
 800168a:	e020      	b.n	80016ce <readChannelVoltage+0x8e>

    float v = 0.0f;
 800168c:	f04f 0300 	mov.w	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
    if (HAL_ADC_PollForConversion(hadc, 10) == HAL_OK) {
 8001692:	210a      	movs	r1, #10
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f003 fdc5 	bl	8005224 <HAL_ADC_PollForConversion>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d112      	bne.n	80016c6 <readChannelVoltage+0x86>
        uint32_t raw = HAL_ADC_GetValue(hadc);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f003 fec5 	bl	8005430 <HAL_ADC_GetValue>
 80016a6:	61b8      	str	r0, [r7, #24]
        v = (raw * VREF) / ADC_RES;
 80016a8:	69b8      	ldr	r0, [r7, #24]
 80016aa:	f7ff faad 	bl	8000c08 <__aeabi_ui2f>
 80016ae:	4603      	mov	r3, r0
 80016b0:	4909      	ldr	r1, [pc, #36]	@ (80016d8 <readChannelVoltage+0x98>)
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff fb00 	bl	8000cb8 <__aeabi_fmul>
 80016b8:	4603      	mov	r3, r0
 80016ba:	4908      	ldr	r1, [pc, #32]	@ (80016dc <readChannelVoltage+0x9c>)
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff fbaf 	bl	8000e20 <__aeabi_fdiv>
 80016c2:	4603      	mov	r3, r0
 80016c4:	61fb      	str	r3, [r7, #28]
    }
    HAL_ADC_Stop(hadc);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f003 fd80 	bl	80051cc <HAL_ADC_Stop>
    return v;
 80016cc:	69fb      	ldr	r3, [r7, #28]
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3720      	adds	r7, #32
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40533333 	.word	0x40533333
 80016dc:	457ff000 	.word	0x457ff000

080016e0 <ADC_Init>:
    return sum / samples;
}

/* --- Public API --- */
void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
    if (HAL_ADCEx_Calibration_Start(hadc) != HAL_OK) {
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f004 f909 	bl	8005900 <HAL_ADCEx_Calibration_Start>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <ADC_Init+0x18>
        Error_Handler();
 80016f4:	f001 f908 	bl	8002908 <Error_Handler>
    }
}
 80016f8:	bf00      	nop
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <ADC_ReadAllChannels>:

void ADC_ReadAllChannels(ADC_HandleTypeDef* hadc, ADC_Data* data)
{
 8001700:	b5b0      	push	{r4, r5, r7, lr}
 8001702:	b08c      	sub	sp, #48	@ 0x30
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
    bool changed = false;
 800170a:	2300      	movs	r3, #0
 800170c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    char loraPacket[32];   // buffer for LoRa payload
    loraPacket[0] = '\0';
 8001710:	2300      	movs	r3, #0
 8001712:	723b      	strb	r3, [r7, #8]

    // === Process water sensor channels ===
    for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++)
 8001714:	2300      	movs	r3, #0
 8001716:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800171a:	e182      	b.n	8001a22 <ADC_ReadAllChannels+0x322>
    {
        float v = readChannelVoltage(hadc, adcChannels[i]);
 800171c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001720:	4a98      	ldr	r2, [pc, #608]	@ (8001984 <ADC_ReadAllChannels+0x284>)
 8001722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001726:	4619      	mov	r1, r3
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7ff ff89 	bl	8001640 <readChannelVoltage>
 800172e:	62b8      	str	r0, [r7, #40]	@ 0x28

        if (s_filtered[i] == 0.0f)
 8001730:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001734:	4a94      	ldr	r2, [pc, #592]	@ (8001988 <ADC_ReadAllChannels+0x288>)
 8001736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800173a:	f04f 0100 	mov.w	r1, #0
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff fc4e 	bl	8000fe0 <__aeabi_fcmpeq>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d006      	beq.n	8001758 <ADC_ReadAllChannels+0x58>
            s_filtered[i] = v;
 800174a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800174e:	498e      	ldr	r1, [pc, #568]	@ (8001988 <ADC_ReadAllChannels+0x288>)
 8001750:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001756:	e01a      	b.n	800178e <ADC_ReadAllChannels+0x8e>
        else
            s_filtered[i] = EMA_ALPHA * v + (1 - EMA_ALPHA) * s_filtered[i];
 8001758:	498c      	ldr	r1, [pc, #560]	@ (800198c <ADC_ReadAllChannels+0x28c>)
 800175a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800175c:	f7ff faac 	bl	8000cb8 <__aeabi_fmul>
 8001760:	4603      	mov	r3, r0
 8001762:	461d      	mov	r5, r3
 8001764:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001768:	4a87      	ldr	r2, [pc, #540]	@ (8001988 <ADC_ReadAllChannels+0x288>)
 800176a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800176e:	4988      	ldr	r1, [pc, #544]	@ (8001990 <ADC_ReadAllChannels+0x290>)
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff faa1 	bl	8000cb8 <__aeabi_fmul>
 8001776:	4603      	mov	r3, r0
 8001778:	f897 402e 	ldrb.w	r4, [r7, #46]	@ 0x2e
 800177c:	4619      	mov	r1, r3
 800177e:	4628      	mov	r0, r5
 8001780:	f7ff f992 	bl	8000aa8 <__addsf3>
 8001784:	4603      	mov	r3, r0
 8001786:	461a      	mov	r2, r3
 8001788:	4b7f      	ldr	r3, [pc, #508]	@ (8001988 <ADC_ReadAllChannels+0x288>)
 800178a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]

        v = s_filtered[i];
 800178e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001792:	4a7d      	ldr	r2, [pc, #500]	@ (8001988 <ADC_ReadAllChannels+0x288>)
 8001794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001798:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (v < GROUND_THRESHOLD)
 800179a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800179e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80017a0:	f7ff fc28 	bl	8000ff4 <__aeabi_fcmplt>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d002      	beq.n	80017b0 <ADC_ReadAllChannels+0xb0>
            v = 0.0f;
 80017aa:	f04f 0300 	mov.w	r3, #0
 80017ae:	62bb      	str	r3, [r7, #40]	@ 0x28

        data->voltages[i]   = v;
 80017b0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	3302      	adds	r3, #2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4413      	add	r3, r2
 80017bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80017be:	605a      	str	r2, [r3, #4]
        data->rawValues[i]  = (uint16_t)((v * ADC_RES) / VREF);
 80017c0:	4974      	ldr	r1, [pc, #464]	@ (8001994 <ADC_ReadAllChannels+0x294>)
 80017c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80017c4:	f7ff fa78 	bl	8000cb8 <__aeabi_fmul>
 80017c8:	4603      	mov	r3, r0
 80017ca:	4973      	ldr	r1, [pc, #460]	@ (8001998 <ADC_ReadAllChannels+0x298>)
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff fb27 	bl	8000e20 <__aeabi_fdiv>
 80017d2:	4603      	mov	r3, r0
 80017d4:	f897 402e 	ldrb.w	r4, [r7, #46]	@ 0x2e
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff fc33 	bl	8001044 <__aeabi_f2uiz>
 80017de:	4603      	mov	r3, r0
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
        data->maxReached[i] = (v >= 3.2f);
 80017e8:	2301      	movs	r3, #1
 80017ea:	461c      	mov	r4, r3
 80017ec:	496b      	ldr	r1, [pc, #428]	@ (800199c <ADC_ReadAllChannels+0x29c>)
 80017ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80017f0:	f7ff fc14 	bl	800101c <__aeabi_fcmpge>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d101      	bne.n	80017fe <ADC_ReadAllChannels+0xfe>
 80017fa:	2300      	movs	r3, #0
 80017fc:	461c      	mov	r4, r3
 80017fe:	b2e2      	uxtb	r2, r4
 8001800:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001804:	4611      	mov	r1, r2
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	4413      	add	r3, r2
 800180a:	460a      	mov	r2, r1
 800180c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        g_adcVoltages[i]    = v;
 8001810:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001814:	4962      	ldr	r1, [pc, #392]	@ (80019a0 <ADC_ReadAllChannels+0x2a0>)
 8001816:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001818:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        // Detect meaningful change
        if (fabsf(v - s_prev_volt[i]) > PRINT_DELTA) {
 800181c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001820:	4a60      	ldr	r2, [pc, #384]	@ (80019a4 <ADC_ReadAllChannels+0x2a4>)
 8001822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001826:	4619      	mov	r1, r3
 8001828:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800182a:	f7ff f93b 	bl	8000aa4 <__aeabi_fsub>
 800182e:	4603      	mov	r3, r0
 8001830:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001834:	495c      	ldr	r1, [pc, #368]	@ (80019a8 <ADC_ReadAllChannels+0x2a8>)
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff fbfa 	bl	8001030 <__aeabi_fcmpgt>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d008      	beq.n	8001854 <ADC_ReadAllChannels+0x154>
            changed = true;
 8001842:	2301      	movs	r3, #1
 8001844:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            s_prev_volt[i] = v;
 8001848:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800184c:	4955      	ldr	r1, [pc, #340]	@ (80019a4 <ADC_ReadAllChannels+0x2a4>)
 800184e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001850:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }

        // Normal threshold logic (sets motorStatus, etc.)
        if (!s_level_flags[i] && v >= THR) {
 8001854:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001858:	4a54      	ldr	r2, [pc, #336]	@ (80019ac <ADC_ReadAllChannels+0x2ac>)
 800185a:	5cd3      	ldrb	r3, [r2, r3]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d168      	bne.n	8001932 <ADC_ReadAllChannels+0x232>
 8001860:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001864:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001866:	f7ff fbd9 	bl	800101c <__aeabi_fcmpge>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d060      	beq.n	8001932 <ADC_ReadAllChannels+0x232>
            s_level_flags[i] = 1;
 8001870:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001874:	4a4d      	ldr	r2, [pc, #308]	@ (80019ac <ADC_ReadAllChannels+0x2ac>)
 8001876:	2101      	movs	r1, #1
 8001878:	54d1      	strb	r1, [r2, r3]
            switch (i) {
 800187a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800187e:	2b04      	cmp	r3, #4
 8001880:	d82a      	bhi.n	80018d8 <ADC_ReadAllChannels+0x1d8>
 8001882:	a201      	add	r2, pc, #4	@ (adr r2, 8001888 <ADC_ReadAllChannels+0x188>)
 8001884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001888:	0800189d 	.word	0x0800189d
 800188c:	080018a9 	.word	0x080018a9
 8001890:	080018b5 	.word	0x080018b5
 8001894:	080018c1 	.word	0x080018c1
 8001898:	080018cd 	.word	0x080018cd
                case 0: snprintf(dataPacketTx, sizeof(dataPacketTx), "@10W#"); break;
 800189c:	4a44      	ldr	r2, [pc, #272]	@ (80019b0 <ADC_ReadAllChannels+0x2b0>)
 800189e:	2110      	movs	r1, #16
 80018a0:	4844      	ldr	r0, [pc, #272]	@ (80019b4 <ADC_ReadAllChannels+0x2b4>)
 80018a2:	f008 fcd7 	bl	800a254 <sniprintf>
 80018a6:	e01b      	b.n	80018e0 <ADC_ReadAllChannels+0x1e0>
                case 1: snprintf(dataPacketTx, sizeof(dataPacketTx), "@30W#"); break;
 80018a8:	4a43      	ldr	r2, [pc, #268]	@ (80019b8 <ADC_ReadAllChannels+0x2b8>)
 80018aa:	2110      	movs	r1, #16
 80018ac:	4841      	ldr	r0, [pc, #260]	@ (80019b4 <ADC_ReadAllChannels+0x2b4>)
 80018ae:	f008 fcd1 	bl	800a254 <sniprintf>
 80018b2:	e015      	b.n	80018e0 <ADC_ReadAllChannels+0x1e0>
                case 2: snprintf(dataPacketTx, sizeof(dataPacketTx), "@70W#"); break;
 80018b4:	4a41      	ldr	r2, [pc, #260]	@ (80019bc <ADC_ReadAllChannels+0x2bc>)
 80018b6:	2110      	movs	r1, #16
 80018b8:	483e      	ldr	r0, [pc, #248]	@ (80019b4 <ADC_ReadAllChannels+0x2b4>)
 80018ba:	f008 fccb 	bl	800a254 <sniprintf>
 80018be:	e00f      	b.n	80018e0 <ADC_ReadAllChannels+0x1e0>
                case 3: snprintf(dataPacketTx, sizeof(dataPacketTx), "@1:W#"); break;
 80018c0:	4a3f      	ldr	r2, [pc, #252]	@ (80019c0 <ADC_ReadAllChannels+0x2c0>)
 80018c2:	2110      	movs	r1, #16
 80018c4:	483b      	ldr	r0, [pc, #236]	@ (80019b4 <ADC_ReadAllChannels+0x2b4>)
 80018c6:	f008 fcc5 	bl	800a254 <sniprintf>
 80018ca:	e009      	b.n	80018e0 <ADC_ReadAllChannels+0x1e0>
                case 4: snprintf(dataPacketTx, sizeof(dataPacketTx), "@DRY#"); break;
 80018cc:	4a3d      	ldr	r2, [pc, #244]	@ (80019c4 <ADC_ReadAllChannels+0x2c4>)
 80018ce:	2110      	movs	r1, #16
 80018d0:	4838      	ldr	r0, [pc, #224]	@ (80019b4 <ADC_ReadAllChannels+0x2b4>)
 80018d2:	f008 fcbf 	bl	800a254 <sniprintf>
 80018d6:	e003      	b.n	80018e0 <ADC_ReadAllChannels+0x1e0>
                default: dataPacketTx[0] = '\0'; break;
 80018d8:	4b36      	ldr	r3, [pc, #216]	@ (80019b4 <ADC_ReadAllChannels+0x2b4>)
 80018da:	2200      	movs	r2, #0
 80018dc:	701a      	strb	r2, [r3, #0]
 80018de:	bf00      	nop
            }
            motorStatus = 1;
 80018e0:	4b39      	ldr	r3, [pc, #228]	@ (80019c8 <ADC_ReadAllChannels+0x2c8>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	701a      	strb	r2, [r3, #0]
            s_low_counts[i] = 0;
 80018e6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80018ea:	4a38      	ldr	r2, [pc, #224]	@ (80019cc <ADC_ReadAllChannels+0x2cc>)
 80018ec:	2100      	movs	r1, #0
 80018ee:	54d1      	strb	r1, [r2, r3]

            // append to LoRa packet buffer
            if (dataPacketTx[0]) {
 80018f0:	4b30      	ldr	r3, [pc, #192]	@ (80019b4 <ADC_ReadAllChannels+0x2b4>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d02e      	beq.n	8001956 <ADC_ReadAllChannels+0x256>
                strncat(loraPacket, dataPacketTx, sizeof(loraPacket)-strlen(loraPacket)-1);
 80018f8:	f107 0308 	add.w	r3, r7, #8
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7fe fc31 	bl	8000164 <strlen>
 8001902:	4603      	mov	r3, r0
 8001904:	f1c3 021f 	rsb	r2, r3, #31
 8001908:	f107 0308 	add.w	r3, r7, #8
 800190c:	4929      	ldr	r1, [pc, #164]	@ (80019b4 <ADC_ReadAllChannels+0x2b4>)
 800190e:	4618      	mov	r0, r3
 8001910:	f008 fdb6 	bl	800a480 <strncat>
                strncat(loraPacket, ";", sizeof(loraPacket)-strlen(loraPacket)-1);
 8001914:	f107 0308 	add.w	r3, r7, #8
 8001918:	4618      	mov	r0, r3
 800191a:	f7fe fc23 	bl	8000164 <strlen>
 800191e:	4603      	mov	r3, r0
 8001920:	f1c3 021f 	rsb	r2, r3, #31
 8001924:	f107 0308 	add.w	r3, r7, #8
 8001928:	4929      	ldr	r1, [pc, #164]	@ (80019d0 <ADC_ReadAllChannels+0x2d0>)
 800192a:	4618      	mov	r0, r3
 800192c:	f008 fda8 	bl	800a480 <strncat>
            if (dataPacketTx[0]) {
 8001930:	e011      	b.n	8001956 <ADC_ReadAllChannels+0x256>
            }
        }
        else if (s_level_flags[i] && v < (THR - HYST_DELTA)) {
 8001932:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001936:	4a1d      	ldr	r2, [pc, #116]	@ (80019ac <ADC_ReadAllChannels+0x2ac>)
 8001938:	5cd3      	ldrb	r3, [r2, r3]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d00b      	beq.n	8001956 <ADC_ReadAllChannels+0x256>
 800193e:	4925      	ldr	r1, [pc, #148]	@ (80019d4 <ADC_ReadAllChannels+0x2d4>)
 8001940:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001942:	f7ff fb57 	bl	8000ff4 <__aeabi_fcmplt>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d004      	beq.n	8001956 <ADC_ReadAllChannels+0x256>
            s_level_flags[i] = 0;
 800194c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001950:	4a16      	ldr	r2, [pc, #88]	@ (80019ac <ADC_ReadAllChannels+0x2ac>)
 8001952:	2100      	movs	r1, #0
 8001954:	54d1      	strb	r1, [r2, r3]
        }

        // dry run debounce
        if (v < DRY_VOLTAGE_THRESHOLD) {
 8001956:	4914      	ldr	r1, [pc, #80]	@ (80019a8 <ADC_ReadAllChannels+0x2a8>)
 8001958:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800195a:	f7ff fb4b 	bl	8000ff4 <__aeabi_fcmplt>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d039      	beq.n	80019d8 <ADC_ReadAllChannels+0x2d8>
            if (s_low_counts[i] < 0xFF) s_low_counts[i]++;
 8001964:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001968:	4a18      	ldr	r2, [pc, #96]	@ (80019cc <ADC_ReadAllChannels+0x2cc>)
 800196a:	5cd3      	ldrb	r3, [r2, r3]
 800196c:	2bff      	cmp	r3, #255	@ 0xff
 800196e:	d038      	beq.n	80019e2 <ADC_ReadAllChannels+0x2e2>
 8001970:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001974:	4a15      	ldr	r2, [pc, #84]	@ (80019cc <ADC_ReadAllChannels+0x2cc>)
 8001976:	5cd2      	ldrb	r2, [r2, r3]
 8001978:	3201      	adds	r2, #1
 800197a:	b2d1      	uxtb	r1, r2
 800197c:	4a13      	ldr	r2, [pc, #76]	@ (80019cc <ADC_ReadAllChannels+0x2cc>)
 800197e:	54d1      	strb	r1, [r2, r3]
 8001980:	e02f      	b.n	80019e2 <ADC_ReadAllChannels+0x2e2>
 8001982:	bf00      	nop
 8001984:	0800c9f4 	.word	0x0800c9f4
 8001988:	2000027c 	.word	0x2000027c
 800198c:	3e99999a 	.word	0x3e99999a
 8001990:	3f333333 	.word	0x3f333333
 8001994:	457ff000 	.word	0x457ff000
 8001998:	40533333 	.word	0x40533333
 800199c:	404ccccd 	.word	0x404ccccd
 80019a0:	20000264 	.word	0x20000264
 80019a4:	200002a4 	.word	0x200002a4
 80019a8:	3d4ccccd 	.word	0x3d4ccccd
 80019ac:	20000294 	.word	0x20000294
 80019b0:	0800c560 	.word	0x0800c560
 80019b4:	200002bc 	.word	0x200002bc
 80019b8:	0800c568 	.word	0x0800c568
 80019bc:	0800c570 	.word	0x0800c570
 80019c0:	0800c578 	.word	0x0800c578
 80019c4:	0800c580 	.word	0x0800c580
 80019c8:	20000570 	.word	0x20000570
 80019cc:	2000029c 	.word	0x2000029c
 80019d0:	0800c588 	.word	0x0800c588
 80019d4:	3f666666 	.word	0x3f666666
        } else {
            s_low_counts[i] = 0;
 80019d8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80019dc:	4a1f      	ldr	r2, [pc, #124]	@ (8001a5c <ADC_ReadAllChannels+0x35c>)
 80019de:	2100      	movs	r1, #0
 80019e0:	54d1      	strb	r1, [r2, r3]
        }

        if (!manualOverride) {
 80019e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001a60 <ADC_ReadAllChannels+0x360>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	f083 0301 	eor.w	r3, r3, #1
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d012      	beq.n	8001a18 <ADC_ReadAllChannels+0x318>
            if (motorStatus == 1 && s_low_counts[i] >= DRY_COUNT_THRESHOLD) {
 80019f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a64 <ADC_ReadAllChannels+0x364>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d10d      	bne.n	8001a18 <ADC_ReadAllChannels+0x318>
 80019fc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001a00:	4a16      	ldr	r2, [pc, #88]	@ (8001a5c <ADC_ReadAllChannels+0x35c>)
 8001a02:	5cd3      	ldrb	r3, [r2, r3]
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d907      	bls.n	8001a18 <ADC_ReadAllChannels+0x318>
                motorStatus = 0;
 8001a08:	4b16      	ldr	r3, [pc, #88]	@ (8001a64 <ADC_ReadAllChannels+0x364>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	701a      	strb	r2, [r3, #0]
                memset(s_low_counts, 0, sizeof(s_low_counts));
 8001a0e:	2206      	movs	r2, #6
 8001a10:	2100      	movs	r1, #0
 8001a12:	4812      	ldr	r0, [pc, #72]	@ (8001a5c <ADC_ReadAllChannels+0x35c>)
 8001a14:	f008 fd2c 	bl	800a470 <memset>
    for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++)
 8001a18:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001a22:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001a26:	2b05      	cmp	r3, #5
 8001a28:	f67f ae78 	bls.w	800171c <ADC_ReadAllChannels+0x1c>
            }
        }
    }

    // === Send LoRa packet only if ADC changed ===
    if (changed && loraPacket[0] != '\0') {
 8001a2c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d00e      	beq.n	8001a52 <ADC_ReadAllChannels+0x352>
 8001a34:	7a3b      	ldrb	r3, [r7, #8]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d00b      	beq.n	8001a52 <ADC_ReadAllChannels+0x352>
        LoRa_SendPacket((uint8_t*)loraPacket, strlen(loraPacket));
 8001a3a:	f107 0308 	add.w	r3, r7, #8
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7fe fb90 	bl	8000164 <strlen>
 8001a44:	4602      	mov	r2, r0
 8001a46:	f107 0308 	add.w	r3, r7, #8
 8001a4a:	4611      	mov	r1, r2
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f000 fb9d 	bl	800218c <LoRa_SendPacket>
    }
}
 8001a52:	bf00      	nop
 8001a54:	3730      	adds	r7, #48	@ 0x30
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bdb0      	pop	{r4, r5, r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	2000029c 	.word	0x2000029c
 8001a60:	200005b8 	.word	0x200005b8
 8001a64:	20000570 	.word	0x20000570

08001a68 <map_nibble_ctrl>:
   Build a PCF8574 byte from a 4-bit data nibble and RS/EN flags according to LCD_PINMAP.
*/

static inline uint8_t map_nibble_ctrl(uint8_t nibble /*D7..D4 or D4..D7 per map*/,
                                      uint8_t rs, uint8_t en, uint8_t bl_on)
{
 8001a68:	b490      	push	{r4, r7}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4604      	mov	r4, r0
 8001a70:	4608      	mov	r0, r1
 8001a72:	4611      	mov	r1, r2
 8001a74:	461a      	mov	r2, r3
 8001a76:	4623      	mov	r3, r4
 8001a78:	71fb      	strb	r3, [r7, #7]
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	71bb      	strb	r3, [r7, #6]
 8001a7e:	460b      	mov	r3, r1
 8001a80:	717b      	strb	r3, [r7, #5]
 8001a82:	4613      	mov	r3, r2
 8001a84:	713b      	strb	r3, [r7, #4]
#if (LCD_PINMAP == LCD_PINMAP_A)
    /* Map A: D7..D4 -> P7..P4, EN=P2, RW=P1(0), RS=P0, BL=P3
       Byte: [D7 D6 D5 D4 BL EN RW RS] */
    uint8_t b = 0;
 8001a86:	2300      	movs	r3, #0
 8001a88:	73fb      	strb	r3, [r7, #15]
    b |= (nibble & 0xF0);           // D7..D4 already in high nibble
 8001a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8e:	f023 030f 	bic.w	r3, r3, #15
 8001a92:	b25a      	sxtb	r2, r3
 8001a94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	b25b      	sxtb	r3, r3
 8001a9c:	73fb      	strb	r3, [r7, #15]
    b |= (bl_on ? 0x08 : 0x00);     // BL=P3
 8001a9e:	793b      	ldrb	r3, [r7, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <map_nibble_ctrl+0x40>
 8001aa4:	2208      	movs	r2, #8
 8001aa6:	e000      	b.n	8001aaa <map_nibble_ctrl+0x42>
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	b25b      	sxtb	r3, r3
 8001ab2:	73fb      	strb	r3, [r7, #15]
    b |= (en ? 0x04 : 0x00);        // EN=P2
 8001ab4:	797b      	ldrb	r3, [r7, #5]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <map_nibble_ctrl+0x56>
 8001aba:	2204      	movs	r2, #4
 8001abc:	e000      	b.n	8001ac0 <map_nibble_ctrl+0x58>
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	b25b      	sxtb	r3, r3
 8001ac8:	73fb      	strb	r3, [r7, #15]
    b |= 0x00;                      // RW=P1 forced 0 (write)
    b |= (rs ? 0x01 : 0x00);        // RS=P0
 8001aca:	79bb      	ldrb	r3, [r7, #6]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	bf14      	ite	ne
 8001ad0:	2301      	movne	r3, #1
 8001ad2:	2300      	moveq	r3, #0
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	b25a      	sxtb	r2, r3
 8001ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	b25b      	sxtb	r3, r3
 8001ae0:	73fb      	strb	r3, [r7, #15]
    return b;
 8001ae2:	7bfb      	ldrb	r3, [r7, #15]
    b |= (bl_on ? 0x80 : 0x00);           // BL=P7
    return b;
#else
# error "Unsupported LCD_PINMAP selection"
#endif
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc90      	pop	{r4, r7}
 8001aec:	4770      	bx	lr
	...

08001af0 <expander_write>:

static void expander_write(uint8_t data)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af02      	add	r7, sp, #8
 8001af6:	4603      	mov	r3, r0
 8001af8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Master_Transmit(&hi2c2, SLAVE_ADDRESS_LCD, &data, 1, 100);
 8001afa:	1dfa      	adds	r2, r7, #7
 8001afc:	2364      	movs	r3, #100	@ 0x64
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	2301      	movs	r3, #1
 8001b02:	214e      	movs	r1, #78	@ 0x4e
 8001b04:	4803      	ldr	r0, [pc, #12]	@ (8001b14 <expander_write+0x24>)
 8001b06:	f004 fbd1 	bl	80062ac <HAL_I2C_Master_Transmit>
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	20000350 	.word	0x20000350

08001b18 <pulse_enable>:

static void pulse_enable(uint8_t data)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	71fb      	strb	r3, [r7, #7]
#if (LCD_PINMAP == LCD_PINMAP_A)
    expander_write(data | 0x04);  // EN=1
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	f043 0304 	orr.w	r3, r3, #4
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff ffe0 	bl	8001af0 <expander_write>
    HAL_Delay(1);
 8001b30:	2001      	movs	r0, #1
 8001b32:	f003 f9a1 	bl	8004e78 <HAL_Delay>
    expander_write(data & ~0x04); // EN=0
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	f023 0304 	bic.w	r3, r3, #4
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff ffd6 	bl	8001af0 <expander_write>
#elif (LCD_PINMAP == LCD_PINMAP_B)
    expander_write(data | 0x10);  // EN=1
    HAL_Delay(1);
    expander_write(data & ~0x10); // EN=0
#endif
    HAL_Delay(1);
 8001b44:	2001      	movs	r0, #1
 8001b46:	f003 f997 	bl	8004e78 <HAL_Delay>
}
 8001b4a:	bf00      	nop
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <write4bits>:

static void write4bits(uint8_t nibble /*D7..D4 in high nibble*/, uint8_t rs, uint8_t bl_on)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b084      	sub	sp, #16
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	4603      	mov	r3, r0
 8001b5a:	71fb      	strb	r3, [r7, #7]
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	71bb      	strb	r3, [r7, #6]
 8001b60:	4613      	mov	r3, r2
 8001b62:	717b      	strb	r3, [r7, #5]
    uint8_t x = map_nibble_ctrl(nibble, rs, 1 /*en edge*/, bl_on);
 8001b64:	797b      	ldrb	r3, [r7, #5]
 8001b66:	79b9      	ldrb	r1, [r7, #6]
 8001b68:	79f8      	ldrb	r0, [r7, #7]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f7ff ff7c 	bl	8001a68 <map_nibble_ctrl>
 8001b70:	4603      	mov	r3, r0
 8001b72:	73fb      	strb	r3, [r7, #15]
    expander_write(x);
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff ffba 	bl	8001af0 <expander_write>
    pulse_enable(x);
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff ffca 	bl	8001b18 <pulse_enable>
}
 8001b84:	bf00      	nop
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <lcd_backlight_on>:

/* -------- Public API -------- */

void lcd_backlight_on(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
#if (LCD_PINMAP == LCD_PINMAP_A)
    uint8_t b = 0x08; // BL=1, others 0
 8001b92:	2308      	movs	r3, #8
 8001b94:	71fb      	strb	r3, [r7, #7]
#elif (LCD_PINMAP == LCD_PINMAP_B)
    uint8_t b = 0x80; // BL=1, others 0
#endif
    expander_write(b);
 8001b96:	79fb      	ldrb	r3, [r7, #7]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff ffa9 	bl	8001af0 <expander_write>
}
 8001b9e:	bf00      	nop
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <lcd_send_cmd>:
    uint8_t b = 0x00;
    expander_write(b);
}

void lcd_send_cmd(uint8_t cmd)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b082      	sub	sp, #8
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	4603      	mov	r3, r0
 8001bae:	71fb      	strb	r3, [r7, #7]
    /* high then low nibble, RS=0 */
    write4bits(cmd & 0xF0, 0, 1);
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	f023 030f 	bic.w	r3, r3, #15
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	2201      	movs	r2, #1
 8001bba:	2100      	movs	r1, #0
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff ffc8 	bl	8001b52 <write4bits>
    write4bits((cmd << 4) & 0xF0, 0, 1);
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	011b      	lsls	r3, r3, #4
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2201      	movs	r2, #1
 8001bca:	2100      	movs	r1, #0
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff ffc0 	bl	8001b52 <write4bits>
}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <lcd_send_data>:

void lcd_send_data(uint8_t data)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b082      	sub	sp, #8
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	4603      	mov	r3, r0
 8001be2:	71fb      	strb	r3, [r7, #7]
    /* high then low nibble, RS=1 */
    write4bits(data & 0xF0, 1, 1);
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	f023 030f 	bic.w	r3, r3, #15
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2201      	movs	r2, #1
 8001bee:	2101      	movs	r1, #1
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff ffae 	bl	8001b52 <write4bits>
    write4bits((data << 4) & 0xF0, 1, 1);
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	011b      	lsls	r3, r3, #4
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	2101      	movs	r1, #1
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff ffa6 	bl	8001b52 <write4bits>
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <lcd_clear>:

void lcd_clear(void)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	af00      	add	r7, sp, #0
    lcd_send_cmd(0x01);
 8001c12:	2001      	movs	r0, #1
 8001c14:	f7ff ffc7 	bl	8001ba6 <lcd_send_cmd>
    HAL_Delay(2);
 8001c18:	2002      	movs	r0, #2
 8001c1a:	f003 f92d 	bl	8004e78 <HAL_Delay>
    lcd_send_cmd(0x80);
 8001c1e:	2080      	movs	r0, #128	@ 0x80
 8001c20:	f7ff ffc1 	bl	8001ba6 <lcd_send_cmd>
}
 8001c24:	bf00      	nop
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <lcd_put_cur>:

void lcd_put_cur(uint8_t row, uint8_t col)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	460a      	mov	r2, r1
 8001c32:	71fb      	strb	r3, [r7, #7]
 8001c34:	4613      	mov	r3, r2
 8001c36:	71bb      	strb	r3, [r7, #6]
    static const uint8_t row_offsets[] = {0x00, 0x40};
    if (row > 1) row = 1;
 8001c38:	79fb      	ldrb	r3, [r7, #7]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d901      	bls.n	8001c42 <lcd_put_cur+0x1a>
 8001c3e:	2301      	movs	r3, #1
 8001c40:	71fb      	strb	r3, [r7, #7]
    lcd_send_cmd(0x80 | (row_offsets[row] + col));
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	4a08      	ldr	r2, [pc, #32]	@ (8001c68 <lcd_put_cur+0x40>)
 8001c46:	5cd2      	ldrb	r2, [r2, r3]
 8001c48:	79bb      	ldrb	r3, [r7, #6]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	b25b      	sxtb	r3, r3
 8001c50:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001c54:	b25b      	sxtb	r3, r3
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff ffa4 	bl	8001ba6 <lcd_send_cmd>
}
 8001c5e:	bf00      	nop
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	0800ca0c 	.word	0x0800ca0c

08001c6c <lcd_send_string>:

void lcd_send_string(char *str)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
    while (*str) lcd_send_data((uint8_t)*str++);
 8001c74:	e006      	b.n	8001c84 <lcd_send_string+0x18>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	1c5a      	adds	r2, r3, #1
 8001c7a:	607a      	str	r2, [r7, #4]
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff ffab 	bl	8001bda <lcd_send_data>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d1f4      	bne.n	8001c76 <lcd_send_string+0xa>
}
 8001c8c:	bf00      	nop
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <lcd_init>:

void lcd_init(void)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	af00      	add	r7, sp, #0
    HAL_Delay(50);
 8001c9a:	2032      	movs	r0, #50	@ 0x32
 8001c9c:	f003 f8ec 	bl	8004e78 <HAL_Delay>
    lcd_backlight_on();
 8001ca0:	f7ff ff74 	bl	8001b8c <lcd_backlight_on>

    /* Force 8-bit mode (send only high-nibble pattern) */
    write4bits(0x30, 0, 1); HAL_Delay(5);
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	2030      	movs	r0, #48	@ 0x30
 8001caa:	f7ff ff52 	bl	8001b52 <write4bits>
 8001cae:	2005      	movs	r0, #5
 8001cb0:	f003 f8e2 	bl	8004e78 <HAL_Delay>
    write4bits(0x30, 0, 1); HAL_Delay(1);
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	2030      	movs	r0, #48	@ 0x30
 8001cba:	f7ff ff4a 	bl	8001b52 <write4bits>
 8001cbe:	2001      	movs	r0, #1
 8001cc0:	f003 f8da 	bl	8004e78 <HAL_Delay>
    write4bits(0x30, 0, 1); HAL_Delay(1);
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	2030      	movs	r0, #48	@ 0x30
 8001cca:	f7ff ff42 	bl	8001b52 <write4bits>
 8001cce:	2001      	movs	r0, #1
 8001cd0:	f003 f8d2 	bl	8004e78 <HAL_Delay>

    /* Switch to 4-bit mode */
    write4bits(0x20, 0, 1); HAL_Delay(1);
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	2020      	movs	r0, #32
 8001cda:	f7ff ff3a 	bl	8001b52 <write4bits>
 8001cde:	2001      	movs	r0, #1
 8001ce0:	f003 f8ca 	bl	8004e78 <HAL_Delay>

    /* Function set: 4-bit, 2 lines, 5x8 */
    lcd_send_cmd(0x28); HAL_Delay(1);
 8001ce4:	2028      	movs	r0, #40	@ 0x28
 8001ce6:	f7ff ff5e 	bl	8001ba6 <lcd_send_cmd>
 8001cea:	2001      	movs	r0, #1
 8001cec:	f003 f8c4 	bl	8004e78 <HAL_Delay>
    /* Display off */
    lcd_send_cmd(0x08); HAL_Delay(1);
 8001cf0:	2008      	movs	r0, #8
 8001cf2:	f7ff ff58 	bl	8001ba6 <lcd_send_cmd>
 8001cf6:	2001      	movs	r0, #1
 8001cf8:	f003 f8be 	bl	8004e78 <HAL_Delay>
    /* Clear */
    lcd_clear();        HAL_Delay(2);
 8001cfc:	f7ff ff87 	bl	8001c0e <lcd_clear>
 8001d00:	2002      	movs	r0, #2
 8001d02:	f003 f8b9 	bl	8004e78 <HAL_Delay>
    /* Entry mode: increment, no shift */
    lcd_send_cmd(0x06); HAL_Delay(1);
 8001d06:	2006      	movs	r0, #6
 8001d08:	f7ff ff4d 	bl	8001ba6 <lcd_send_cmd>
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	f003 f8b3 	bl	8004e78 <HAL_Delay>
    /* Display on, cursor off, blink off */
    lcd_send_cmd(0x0C); HAL_Delay(1);
 8001d12:	200c      	movs	r0, #12
 8001d14:	f7ff ff47 	bl	8001ba6 <lcd_send_cmd>
 8001d18:	2001      	movs	r0, #1
 8001d1a:	f003 f8ad 	bl	8004e78 <HAL_Delay>
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <now_ms>:

static LedIntent s_intent[LED_COLOR_COUNT];
static uint8_t   s_activeBlink[LED_COLOR_COUNT];
static uint32_t  s_nextToggleAt[LED_COLOR_COUNT];

static inline uint32_t now_ms(void) { return HAL_GetTick(); }
 8001d22:	b580      	push	{r7, lr}
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	f003 f89d 	bl	8004e64 <HAL_GetTick>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <led_write>:

static void led_write(LedColor c, GPIO_PinState st) {
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	460a      	mov	r2, r1
 8001d3a:	71fb      	strb	r3, [r7, #7]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(LED_PORTS[c], LED_PINS[c], st);
 8001d40:	79fb      	ldrb	r3, [r7, #7]
 8001d42:	4a07      	ldr	r2, [pc, #28]	@ (8001d60 <led_write+0x30>)
 8001d44:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	4a06      	ldr	r2, [pc, #24]	@ (8001d64 <led_write+0x34>)
 8001d4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d50:	79ba      	ldrb	r2, [r7, #6]
 8001d52:	4619      	mov	r1, r3
 8001d54:	f004 f935 	bl	8005fc2 <HAL_GPIO_WritePin>
}
 8001d58:	bf00      	nop
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	20000000 	.word	0x20000000
 8001d64:	20000010 	.word	0x20000010

08001d68 <led_on>:
static void led_on(LedColor c)  { led_write(c, GPIO_PIN_SET); }
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	71fb      	strb	r3, [r7, #7]
 8001d72:	79fb      	ldrb	r3, [r7, #7]
 8001d74:	2101      	movs	r1, #1
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff ffda 	bl	8001d30 <led_write>
 8001d7c:	bf00      	nop
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <led_off>:
static void led_off(LedColor c) { led_write(c, GPIO_PIN_RESET); }
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	71fb      	strb	r3, [r7, #7]
 8001d8e:	79fb      	ldrb	r3, [r7, #7]
 8001d90:	2100      	movs	r1, #0
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff ffcc 	bl	8001d30 <led_write>
 8001d98:	bf00      	nop
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <LED_Init>:

void LED_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
    memset(s_intent, 0, sizeof(s_intent));
 8001da6:	2210      	movs	r2, #16
 8001da8:	2100      	movs	r1, #0
 8001daa:	4815      	ldr	r0, [pc, #84]	@ (8001e00 <LED_Init+0x60>)
 8001dac:	f008 fb60 	bl	800a470 <memset>
    memset(s_activeBlink, 0, sizeof(s_activeBlink));
 8001db0:	2204      	movs	r2, #4
 8001db2:	2100      	movs	r1, #0
 8001db4:	4813      	ldr	r0, [pc, #76]	@ (8001e04 <LED_Init+0x64>)
 8001db6:	f008 fb5b 	bl	800a470 <memset>
    memset(s_nextToggleAt, 0, sizeof(s_nextToggleAt));
 8001dba:	2210      	movs	r2, #16
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	4812      	ldr	r0, [pc, #72]	@ (8001e08 <LED_Init+0x68>)
 8001dc0:	f008 fb56 	bl	800a470 <memset>

    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	607b      	str	r3, [r7, #4]
 8001dc8:	e012      	b.n	8001df0 <LED_Init+0x50>
        led_off((LedColor)i);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff ffd8 	bl	8001d84 <led_off>
        s_intent[i].mode = LED_MODE_OFF;
 8001dd4:	4a0a      	ldr	r2, [pc, #40]	@ (8001e00 <LED_Init+0x60>)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2100      	movs	r1, #0
 8001dda:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
        s_intent[i].period_ms = 0;
 8001dde:	4a08      	ldr	r2, [pc, #32]	@ (8001e00 <LED_Init+0x60>)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4413      	add	r3, r2
 8001de6:	2200      	movs	r2, #0
 8001de8:	805a      	strh	r2, [r3, #2]
    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	3301      	adds	r3, #1
 8001dee:	607b      	str	r3, [r7, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b03      	cmp	r3, #3
 8001df4:	dde9      	ble.n	8001dca <LED_Init+0x2a>
    }
}
 8001df6:	bf00      	nop
 8001df8:	bf00      	nop
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	200002cc 	.word	0x200002cc
 8001e04:	200002dc 	.word	0x200002dc
 8001e08:	200002e0 	.word	0x200002e0

08001e0c <LED_Task>:

/* call this every loop (or from a 10–20ms tick) */
void LED_Task(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
    uint32_t t = now_ms();
 8001e12:	f7ff ff86 	bl	8001d22 <now_ms>
 8001e16:	6038      	str	r0, [r7, #0]

    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 8001e18:	2300      	movs	r3, #0
 8001e1a:	607b      	str	r3, [r7, #4]
 8001e1c:	e064      	b.n	8001ee8 <LED_Task+0xdc>
        switch (s_intent[i].mode) {
 8001e1e:	4a36      	ldr	r2, [pc, #216]	@ (8001ef8 <LED_Task+0xec>)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d002      	beq.n	8001e30 <LED_Task+0x24>
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d00b      	beq.n	8001e46 <LED_Task+0x3a>
 8001e2e:	e015      	b.n	8001e5c <LED_Task+0x50>
        case LED_MODE_OFF:
            s_activeBlink[i] = 0;
 8001e30:	4a32      	ldr	r2, [pc, #200]	@ (8001efc <LED_Task+0xf0>)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4413      	add	r3, r2
 8001e36:	2200      	movs	r2, #0
 8001e38:	701a      	strb	r2, [r3, #0]
            led_off((LedColor)i);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff ffa0 	bl	8001d84 <led_off>
            break;
 8001e44:	e04d      	b.n	8001ee2 <LED_Task+0xd6>

        case LED_MODE_STEADY:
            s_activeBlink[i] = 1;
 8001e46:	4a2d      	ldr	r2, [pc, #180]	@ (8001efc <LED_Task+0xf0>)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	701a      	strb	r2, [r3, #0]
            led_on((LedColor)i);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff ff87 	bl	8001d68 <led_on>
            break;
 8001e5a:	e042      	b.n	8001ee2 <LED_Task+0xd6>

        case LED_MODE_BLINK:
        default:
            if (s_intent[i].period_ms == 0) s_intent[i].period_ms = 500;
 8001e5c:	4a26      	ldr	r2, [pc, #152]	@ (8001ef8 <LED_Task+0xec>)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4413      	add	r3, r2
 8001e64:	885b      	ldrh	r3, [r3, #2]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d106      	bne.n	8001e78 <LED_Task+0x6c>
 8001e6a:	4a23      	ldr	r2, [pc, #140]	@ (8001ef8 <LED_Task+0xec>)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001e76:	805a      	strh	r2, [r3, #2]
            if ((int32_t)(s_nextToggleAt[i] - t) <= 0) {
 8001e78:	4a21      	ldr	r2, [pc, #132]	@ (8001f00 <LED_Task+0xf4>)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	dc2b      	bgt.n	8001ee0 <LED_Task+0xd4>
                s_activeBlink[i] = !s_activeBlink[i];
 8001e88:	4a1c      	ldr	r2, [pc, #112]	@ (8001efc <LED_Task+0xf0>)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	bf0c      	ite	eq
 8001e94:	2301      	moveq	r3, #1
 8001e96:	2300      	movne	r3, #0
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4a17      	ldr	r2, [pc, #92]	@ (8001efc <LED_Task+0xf0>)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	460a      	mov	r2, r1
 8001ea4:	701a      	strb	r2, [r3, #0]
                if (s_activeBlink[i]) led_on((LedColor)i);
 8001ea6:	4a15      	ldr	r2, [pc, #84]	@ (8001efc <LED_Task+0xf0>)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4413      	add	r3, r2
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d005      	beq.n	8001ebe <LED_Task+0xb2>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff ff56 	bl	8001d68 <led_on>
 8001ebc:	e004      	b.n	8001ec8 <LED_Task+0xbc>
                else                  led_off((LedColor)i);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff ff5e 	bl	8001d84 <led_off>
                s_nextToggleAt[i] = t + s_intent[i].period_ms;
 8001ec8:	4a0b      	ldr	r2, [pc, #44]	@ (8001ef8 <LED_Task+0xec>)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4413      	add	r3, r2
 8001ed0:	885b      	ldrh	r3, [r3, #2]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	441a      	add	r2, r3
 8001ed8:	4909      	ldr	r1, [pc, #36]	@ (8001f00 <LED_Task+0xf4>)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            }
            break;
 8001ee0:	bf00      	nop
    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	607b      	str	r3, [r7, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b03      	cmp	r3, #3
 8001eec:	dd97      	ble.n	8001e1e <LED_Task+0x12>
        }
    }
}
 8001eee:	bf00      	nop
 8001ef0:	bf00      	nop
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	200002cc 	.word	0x200002cc
 8001efc:	200002dc 	.word	0x200002dc
 8001f00:	200002e0 	.word	0x200002e0

08001f04 <LoRa_WriteReg>:

uint8_t rxBuffer[64]; // RX
uint8_t txBuffer[64]; // TX

/* ---------------- Low-level SPI helpers ---------------- */
void LoRa_WriteReg(uint8_t addr, uint8_t data) {
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	460a      	mov	r2, r1
 8001f0e:	71fb      	strb	r3, [r7, #7]
 8001f10:	4613      	mov	r3, r2
 8001f12:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2] = { (uint8_t)(addr | 0x80), data };
 8001f14:	79fb      	ldrb	r3, [r7, #7]
 8001f16:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	733b      	strb	r3, [r7, #12]
 8001f1e:	79bb      	ldrb	r3, [r7, #6]
 8001f20:	737b      	strb	r3, [r7, #13]
    NSS_LOW();
 8001f22:	2200      	movs	r2, #0
 8001f24:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f28:	480a      	ldr	r0, [pc, #40]	@ (8001f54 <LoRa_WriteReg+0x50>)
 8001f2a:	f004 f84a 	bl	8005fc2 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, buf, 2, HAL_MAX_DELAY);
 8001f2e:	f107 010c 	add.w	r1, r7, #12
 8001f32:	f04f 33ff 	mov.w	r3, #4294967295
 8001f36:	2202      	movs	r2, #2
 8001f38:	4807      	ldr	r0, [pc, #28]	@ (8001f58 <LoRa_WriteReg+0x54>)
 8001f3a:	f006 f9ba 	bl	80082b2 <HAL_SPI_Transmit>
    NSS_HIGH();
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f44:	4803      	ldr	r0, [pc, #12]	@ (8001f54 <LoRa_WriteReg+0x50>)
 8001f46:	f004 f83c 	bl	8005fc2 <HAL_GPIO_WritePin>
}
 8001f4a:	bf00      	nop
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40010800 	.word	0x40010800
 8001f58:	200003b8 	.word	0x200003b8

08001f5c <LoRa_ReadReg>:

uint8_t LoRa_ReadReg(uint8_t addr) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	71fb      	strb	r3, [r7, #7]
    uint8_t tx = addr & 0x7F;
 8001f66:	79fb      	ldrb	r3, [r7, #7]
 8001f68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	73fb      	strb	r3, [r7, #15]
    uint8_t rx = 0;
 8001f70:	2300      	movs	r3, #0
 8001f72:	73bb      	strb	r3, [r7, #14]
    NSS_LOW();
 8001f74:	2200      	movs	r2, #0
 8001f76:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f7a:	480f      	ldr	r0, [pc, #60]	@ (8001fb8 <LoRa_ReadReg+0x5c>)
 8001f7c:	f004 f821 	bl	8005fc2 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &tx, 1, HAL_MAX_DELAY);
 8001f80:	f107 010f 	add.w	r1, r7, #15
 8001f84:	f04f 33ff 	mov.w	r3, #4294967295
 8001f88:	2201      	movs	r2, #1
 8001f8a:	480c      	ldr	r0, [pc, #48]	@ (8001fbc <LoRa_ReadReg+0x60>)
 8001f8c:	f006 f991 	bl	80082b2 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, &rx, 1, HAL_MAX_DELAY);
 8001f90:	f107 010e 	add.w	r1, r7, #14
 8001f94:	f04f 33ff 	mov.w	r3, #4294967295
 8001f98:	2201      	movs	r2, #1
 8001f9a:	4808      	ldr	r0, [pc, #32]	@ (8001fbc <LoRa_ReadReg+0x60>)
 8001f9c:	f006 facd 	bl	800853a <HAL_SPI_Receive>
    NSS_HIGH();
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001fa6:	4804      	ldr	r0, [pc, #16]	@ (8001fb8 <LoRa_ReadReg+0x5c>)
 8001fa8:	f004 f80b 	bl	8005fc2 <HAL_GPIO_WritePin>
    return rx;
 8001fac:	7bbb      	ldrb	r3, [r7, #14]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40010800 	.word	0x40010800
 8001fbc:	200003b8 	.word	0x200003b8

08001fc0 <LoRa_WriteBuffer>:

void LoRa_WriteBuffer(uint8_t addr, const uint8_t *buffer, uint8_t size) {
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	6039      	str	r1, [r7, #0]
 8001fca:	71fb      	strb	r3, [r7, #7]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	71bb      	strb	r3, [r7, #6]
    uint8_t a = addr | 0x80;
 8001fd0:	79fb      	ldrb	r3, [r7, #7]
 8001fd2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	73fb      	strb	r3, [r7, #15]
    NSS_LOW();
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001fe0:	480e      	ldr	r0, [pc, #56]	@ (800201c <LoRa_WriteBuffer+0x5c>)
 8001fe2:	f003 ffee 	bl	8005fc2 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &a, 1, HAL_MAX_DELAY);
 8001fe6:	f107 010f 	add.w	r1, r7, #15
 8001fea:	f04f 33ff 	mov.w	r3, #4294967295
 8001fee:	2201      	movs	r2, #1
 8001ff0:	480b      	ldr	r0, [pc, #44]	@ (8002020 <LoRa_WriteBuffer+0x60>)
 8001ff2:	f006 f95e 	bl	80082b2 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)buffer, size, HAL_MAX_DELAY);
 8001ff6:	79bb      	ldrb	r3, [r7, #6]
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8001ffe:	6839      	ldr	r1, [r7, #0]
 8002000:	4807      	ldr	r0, [pc, #28]	@ (8002020 <LoRa_WriteBuffer+0x60>)
 8002002:	f006 f956 	bl	80082b2 <HAL_SPI_Transmit>
    NSS_HIGH();
 8002006:	2201      	movs	r2, #1
 8002008:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800200c:	4803      	ldr	r0, [pc, #12]	@ (800201c <LoRa_WriteBuffer+0x5c>)
 800200e:	f003 ffd8 	bl	8005fc2 <HAL_GPIO_WritePin>
}
 8002012:	bf00      	nop
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40010800 	.word	0x40010800
 8002020:	200003b8 	.word	0x200003b8

08002024 <LoRa_Reset>:
    HAL_SPI_Receive(&hspi1, buffer, size, HAL_MAX_DELAY);
    NSS_HIGH();
}

/* ---------------- Reset ---------------- */
void LoRa_Reset(void) {
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LORA_RESET_PORT, LORA_RESET_PIN, GPIO_PIN_RESET);
 8002028:	2200      	movs	r2, #0
 800202a:	2140      	movs	r1, #64	@ 0x40
 800202c:	4807      	ldr	r0, [pc, #28]	@ (800204c <LoRa_Reset+0x28>)
 800202e:	f003 ffc8 	bl	8005fc2 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8002032:	2002      	movs	r0, #2
 8002034:	f002 ff20 	bl	8004e78 <HAL_Delay>
    HAL_GPIO_WritePin(LORA_RESET_PORT, LORA_RESET_PIN, GPIO_PIN_SET);
 8002038:	2201      	movs	r2, #1
 800203a:	2140      	movs	r1, #64	@ 0x40
 800203c:	4803      	ldr	r0, [pc, #12]	@ (800204c <LoRa_Reset+0x28>)
 800203e:	f003 ffc0 	bl	8005fc2 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8002042:	2002      	movs	r0, #2
 8002044:	f002 ff18 	bl	8004e78 <HAL_Delay>
}
 8002048:	bf00      	nop
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40010c00 	.word	0x40010c00

08002050 <LoRa_SetFrequency>:

/* ---------------- Set frequency ---------------- */
void LoRa_SetFrequency(uint32_t freqHz) {
 8002050:	b5b0      	push	{r4, r5, r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
    uint64_t frf = ((uint64_t)freqHz << 19) / 32000000ULL;
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	2000      	movs	r0, #0
 800205c:	460a      	mov	r2, r1
 800205e:	4603      	mov	r3, r0
 8002060:	0b55      	lsrs	r5, r2, #13
 8002062:	04d4      	lsls	r4, r2, #19
 8002064:	4a18      	ldr	r2, [pc, #96]	@ (80020c8 <LoRa_SetFrequency+0x78>)
 8002066:	f04f 0300 	mov.w	r3, #0
 800206a:	4620      	mov	r0, r4
 800206c:	4629      	mov	r1, r5
 800206e:	f7ff f809 	bl	8001084 <__aeabi_uldivmod>
 8002072:	4602      	mov	r2, r0
 8002074:	460b      	mov	r3, r1
 8002076:	e9c7 2302 	strd	r2, r3, [r7, #8]
    LoRa_WriteReg(0x06, (uint8_t)(frf >> 16));
 800207a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	f04f 0300 	mov.w	r3, #0
 8002086:	0c02      	lsrs	r2, r0, #16
 8002088:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800208c:	0c0b      	lsrs	r3, r1, #16
 800208e:	b2d3      	uxtb	r3, r2
 8002090:	4619      	mov	r1, r3
 8002092:	2006      	movs	r0, #6
 8002094:	f7ff ff36 	bl	8001f04 <LoRa_WriteReg>
    LoRa_WriteReg(0x07, (uint8_t)(frf >> 8));
 8002098:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800209c:	f04f 0200 	mov.w	r2, #0
 80020a0:	f04f 0300 	mov.w	r3, #0
 80020a4:	0a02      	lsrs	r2, r0, #8
 80020a6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80020aa:	0a0b      	lsrs	r3, r1, #8
 80020ac:	b2d3      	uxtb	r3, r2
 80020ae:	4619      	mov	r1, r3
 80020b0:	2007      	movs	r0, #7
 80020b2:	f7ff ff27 	bl	8001f04 <LoRa_WriteReg>
    LoRa_WriteReg(0x08, (uint8_t)(frf >> 0));
 80020b6:	7a3b      	ldrb	r3, [r7, #8]
 80020b8:	4619      	mov	r1, r3
 80020ba:	2008      	movs	r0, #8
 80020bc:	f7ff ff22 	bl	8001f04 <LoRa_WriteReg>
}
 80020c0:	bf00      	nop
 80020c2:	3710      	adds	r7, #16
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bdb0      	pop	{r4, r5, r7, pc}
 80020c8:	01e84800 	.word	0x01e84800

080020cc <LoRa_Init>:

/* ---------------- Init ---------------- */
void LoRa_Init(void) {
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
    LoRa_Reset();
 80020d0:	f7ff ffa8 	bl	8002024 <LoRa_Reset>

    // Sleep → LoRa sleep
    LoRa_WriteReg(0x01, 0x00);
 80020d4:	2100      	movs	r1, #0
 80020d6:	2001      	movs	r0, #1
 80020d8:	f7ff ff14 	bl	8001f04 <LoRa_WriteReg>
    HAL_Delay(2);
 80020dc:	2002      	movs	r0, #2
 80020de:	f002 fecb 	bl	8004e78 <HAL_Delay>
    LoRa_WriteReg(0x01, 0x80);
 80020e2:	2180      	movs	r1, #128	@ 0x80
 80020e4:	2001      	movs	r0, #1
 80020e6:	f7ff ff0d 	bl	8001f04 <LoRa_WriteReg>
    HAL_Delay(2);
 80020ea:	2002      	movs	r0, #2
 80020ec:	f002 fec4 	bl	8004e78 <HAL_Delay>

    // Frequency
    LoRa_SetFrequency(LORA_FREQUENCY);
 80020f0:	4819      	ldr	r0, [pc, #100]	@ (8002158 <LoRa_Init+0x8c>)
 80020f2:	f7ff ffad 	bl	8002050 <LoRa_SetFrequency>

    // PA config
    LoRa_WriteReg(0x09, 0x8F); // PA_BOOST
 80020f6:	218f      	movs	r1, #143	@ 0x8f
 80020f8:	2009      	movs	r0, #9
 80020fa:	f7ff ff03 	bl	8001f04 <LoRa_WriteReg>
    LoRa_WriteReg(0x4D, 0x87); // RegPaDac
 80020fe:	2187      	movs	r1, #135	@ 0x87
 8002100:	204d      	movs	r0, #77	@ 0x4d
 8002102:	f7ff feff 	bl	8001f04 <LoRa_WriteReg>

    // LNA
    LoRa_WriteReg(0x0C, 0x23);
 8002106:	2123      	movs	r1, #35	@ 0x23
 8002108:	200c      	movs	r0, #12
 800210a:	f7ff fefb 	bl	8001f04 <LoRa_WriteReg>

    // Modem config
    LoRa_WriteReg(0x1D, 0x72);
 800210e:	2172      	movs	r1, #114	@ 0x72
 8002110:	201d      	movs	r0, #29
 8002112:	f7ff fef7 	bl	8001f04 <LoRa_WriteReg>
    LoRa_WriteReg(0x1E, 0x74);
 8002116:	2174      	movs	r1, #116	@ 0x74
 8002118:	201e      	movs	r0, #30
 800211a:	f7ff fef3 	bl	8001f04 <LoRa_WriteReg>
    LoRa_WriteReg(0x26, 0x04);
 800211e:	2104      	movs	r1, #4
 8002120:	2026      	movs	r0, #38	@ 0x26
 8002122:	f7ff feef 	bl	8001f04 <LoRa_WriteReg>

    // Preamble
    LoRa_WriteReg(0x20, 0x00);
 8002126:	2100      	movs	r1, #0
 8002128:	2020      	movs	r0, #32
 800212a:	f7ff feeb 	bl	8001f04 <LoRa_WriteReg>
    LoRa_WriteReg(0x21, 0x08);
 800212e:	2108      	movs	r1, #8
 8002130:	2021      	movs	r0, #33	@ 0x21
 8002132:	f7ff fee7 	bl	8001f04 <LoRa_WriteReg>

    // SyncWord
    LoRa_WriteReg(0x39, 0x22);
 8002136:	2122      	movs	r1, #34	@ 0x22
 8002138:	2039      	movs	r0, #57	@ 0x39
 800213a:	f7ff fee3 	bl	8001f04 <LoRa_WriteReg>

    // DIO mapping
    LoRa_WriteReg(0x40, 0x00);
 800213e:	2100      	movs	r1, #0
 8002140:	2040      	movs	r0, #64	@ 0x40
 8002142:	f7ff fedf 	bl	8001f04 <LoRa_WriteReg>

    // Clear IRQs
    LoRa_WriteReg(0x12, 0xFF);
 8002146:	21ff      	movs	r1, #255	@ 0xff
 8002148:	2012      	movs	r0, #18
 800214a:	f7ff fedb 	bl	8001f04 <LoRa_WriteReg>

    // Start RX by default
    LoRa_SetRxContinuous();
 800214e:	f000 f80d 	bl	800216c <LoRa_SetRxContinuous>
}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	19cf0e40 	.word	0x19cf0e40

0800215c <LoRa_SetStandby>:

/* ---------------- Mode control ---------------- */
void LoRa_SetStandby(void) { LoRa_WriteReg(0x01, 0x81); }
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
 8002160:	2181      	movs	r1, #129	@ 0x81
 8002162:	2001      	movs	r0, #1
 8002164:	f7ff fece 	bl	8001f04 <LoRa_WriteReg>
 8002168:	bf00      	nop
 800216a:	bd80      	pop	{r7, pc}

0800216c <LoRa_SetRxContinuous>:
void LoRa_SetRxContinuous(void) { LoRa_WriteReg(0x01, 0x85); }
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
 8002170:	2185      	movs	r1, #133	@ 0x85
 8002172:	2001      	movs	r0, #1
 8002174:	f7ff fec6 	bl	8001f04 <LoRa_WriteReg>
 8002178:	bf00      	nop
 800217a:	bd80      	pop	{r7, pc}

0800217c <LoRa_SetTx>:
void LoRa_SetTx(void) { LoRa_WriteReg(0x01, 0x83); }
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
 8002180:	2183      	movs	r1, #131	@ 0x83
 8002182:	2001      	movs	r0, #1
 8002184:	f7ff febe 	bl	8001f04 <LoRa_WriteReg>
 8002188:	bf00      	nop
 800218a:	bd80      	pop	{r7, pc}

0800218c <LoRa_SendPacket>:

/* ---------------- Send packet ---------------- */
void LoRa_SendPacket(const uint8_t *buffer, uint8_t size) {
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	460b      	mov	r3, r1
 8002196:	70fb      	strb	r3, [r7, #3]
    if (loraMode == LORA_MODE_RECEIVER) return; // RX-only → don't send
 8002198:	4b22      	ldr	r3, [pc, #136]	@ (8002224 <LoRa_SendPacket+0x98>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	2b02      	cmp	r3, #2
 800219e:	d03c      	beq.n	800221a <LoRa_SendPacket+0x8e>

    LoRa_SetStandby();
 80021a0:	f7ff ffdc 	bl	800215c <LoRa_SetStandby>

    // FIFO reset
    LoRa_WriteReg(0x0E, 0x00);
 80021a4:	2100      	movs	r1, #0
 80021a6:	200e      	movs	r0, #14
 80021a8:	f7ff feac 	bl	8001f04 <LoRa_WriteReg>
    LoRa_WriteReg(0x0D, 0x00);
 80021ac:	2100      	movs	r1, #0
 80021ae:	200d      	movs	r0, #13
 80021b0:	f7ff fea8 	bl	8001f04 <LoRa_WriteReg>

    // Write payload
    LoRa_WriteBuffer(0x00, buffer, size);
 80021b4:	78fb      	ldrb	r3, [r7, #3]
 80021b6:	461a      	mov	r2, r3
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	2000      	movs	r0, #0
 80021bc:	f7ff ff00 	bl	8001fc0 <LoRa_WriteBuffer>
    LoRa_WriteReg(0x22, size);
 80021c0:	78fb      	ldrb	r3, [r7, #3]
 80021c2:	4619      	mov	r1, r3
 80021c4:	2022      	movs	r0, #34	@ 0x22
 80021c6:	f7ff fe9d 	bl	8001f04 <LoRa_WriteReg>

    // Clear IRQs
    LoRa_WriteReg(0x12, 0xFF);
 80021ca:	21ff      	movs	r1, #255	@ 0xff
 80021cc:	2012      	movs	r0, #18
 80021ce:	f7ff fe99 	bl	8001f04 <LoRa_WriteReg>

    LoRa_SetTx();
 80021d2:	f7ff ffd3 	bl	800217c <LoRa_SetTx>

    // Wait for TxDone
    uint32_t start = HAL_GetTick();
 80021d6:	f002 fe45 	bl	8004e64 <HAL_GetTick>
 80021da:	60f8      	str	r0, [r7, #12]
    while (!(LoRa_ReadReg(0x12) & 0x08)) {
 80021dc:	e00e      	b.n	80021fc <LoRa_SendPacket+0x70>
        if (HAL_GetTick() - start > LORA_TIMEOUT) {
 80021de:	f002 fe41 	bl	8004e64 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80021ec:	d906      	bls.n	80021fc <LoRa_SendPacket+0x70>
            LoRa_WriteReg(0x12, 0xFF);
 80021ee:	21ff      	movs	r1, #255	@ 0xff
 80021f0:	2012      	movs	r0, #18
 80021f2:	f7ff fe87 	bl	8001f04 <LoRa_WriteReg>
            LoRa_SetRxContinuous();
 80021f6:	f7ff ffb9 	bl	800216c <LoRa_SetRxContinuous>
            return;
 80021fa:	e00f      	b.n	800221c <LoRa_SendPacket+0x90>
    while (!(LoRa_ReadReg(0x12) & 0x08)) {
 80021fc:	2012      	movs	r0, #18
 80021fe:	f7ff fead 	bl	8001f5c <LoRa_ReadReg>
 8002202:	4603      	mov	r3, r0
 8002204:	f003 0308 	and.w	r3, r3, #8
 8002208:	2b00      	cmp	r3, #0
 800220a:	d0e8      	beq.n	80021de <LoRa_SendPacket+0x52>
        }
    }

    LoRa_WriteReg(0x12, 0x08); // Clear TxDone
 800220c:	2108      	movs	r1, #8
 800220e:	2012      	movs	r0, #18
 8002210:	f7ff fe78 	bl	8001f04 <LoRa_WriteReg>
    LoRa_SetRxContinuous();
 8002214:	f7ff ffaa 	bl	800216c <LoRa_SetRxContinuous>
 8002218:	e000      	b.n	800221c <LoRa_SendPacket+0x90>
    if (loraMode == LORA_MODE_RECEIVER) return; // RX-only → don't send
 800221a:	bf00      	nop
}
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20000018 	.word	0x20000018

08002228 <Debug_Print>:
static void MX_USART1_UART_Init(void);
static void MX_I2C2_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */

void Debug_Print(char *msg) {
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
    UART_TransmitString(&huart1, msg);
 8002230:	6879      	ldr	r1, [r7, #4]
 8002232:	4803      	ldr	r0, [pc, #12]	@ (8002240 <Debug_Print+0x18>)
 8002234:	f002 fd42 	bl	8004cbc <UART_TransmitString>
}
 8002238:	bf00      	nop
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	20000458 	.word	0x20000458

08002244 <HAL_ADC_ConvCpltCallback>:
	  lcd_send_string(line2);
}


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002244:	b590      	push	{r4, r7, lr}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a1f      	ldr	r2, [pc, #124]	@ (80022d0 <HAL_ADC_ConvCpltCallback+0x8c>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d138      	bne.n	80022c8 <HAL_ADC_ConvCpltCallback+0x84>
    {
        for (int i = 0; i < ADC_CHANNEL_COUNT; i++)
 8002256:	2300      	movs	r3, #0
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	e02e      	b.n	80022ba <HAL_ADC_ConvCpltCallback+0x76>
        {
            float v = (adcBuffer[i] * ACS712_VREF_ADC) / ACS712_ADC_RESOLUTION;
 800225c:	4a1d      	ldr	r2, [pc, #116]	@ (80022d4 <HAL_ADC_ConvCpltCallback+0x90>)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002264:	4618      	mov	r0, r3
 8002266:	f7fe fcd3 	bl	8000c10 <__aeabi_i2f>
 800226a:	4603      	mov	r3, r0
 800226c:	491a      	ldr	r1, [pc, #104]	@ (80022d8 <HAL_ADC_ConvCpltCallback+0x94>)
 800226e:	4618      	mov	r0, r3
 8002270:	f7fe fd22 	bl	8000cb8 <__aeabi_fmul>
 8002274:	4603      	mov	r3, r0
 8002276:	4919      	ldr	r1, [pc, #100]	@ (80022dc <HAL_ADC_ConvCpltCallback+0x98>)
 8002278:	4618      	mov	r0, r3
 800227a:	f7fe fdd1 	bl	8000e20 <__aeabi_fdiv>
 800227e:	4603      	mov	r3, r0
 8002280:	60bb      	str	r3, [r7, #8]
            g_adcAvg[i] = 0.9f * g_adcAvg[i] + 0.1f * v;
 8002282:	4a17      	ldr	r2, [pc, #92]	@ (80022e0 <HAL_ADC_ConvCpltCallback+0x9c>)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800228a:	4916      	ldr	r1, [pc, #88]	@ (80022e4 <HAL_ADC_ConvCpltCallback+0xa0>)
 800228c:	4618      	mov	r0, r3
 800228e:	f7fe fd13 	bl	8000cb8 <__aeabi_fmul>
 8002292:	4603      	mov	r3, r0
 8002294:	461c      	mov	r4, r3
 8002296:	4914      	ldr	r1, [pc, #80]	@ (80022e8 <HAL_ADC_ConvCpltCallback+0xa4>)
 8002298:	68b8      	ldr	r0, [r7, #8]
 800229a:	f7fe fd0d 	bl	8000cb8 <__aeabi_fmul>
 800229e:	4603      	mov	r3, r0
 80022a0:	4619      	mov	r1, r3
 80022a2:	4620      	mov	r0, r4
 80022a4:	f7fe fc00 	bl	8000aa8 <__addsf3>
 80022a8:	4603      	mov	r3, r0
 80022aa:	4619      	mov	r1, r3
 80022ac:	4a0c      	ldr	r2, [pc, #48]	@ (80022e0 <HAL_ADC_ConvCpltCallback+0x9c>)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (int i = 0; i < ADC_CHANNEL_COUNT; i++)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	3301      	adds	r3, #1
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2b06      	cmp	r3, #6
 80022be:	ddcd      	ble.n	800225c <HAL_ADC_ConvCpltCallback+0x18>
        }

        // CH7 is last (index 6 if ranks = 0–5 + 7)
        g_vADC_ACS = g_adcAvg[6];
 80022c0:	4b07      	ldr	r3, [pc, #28]	@ (80022e0 <HAL_ADC_ConvCpltCallback+0x9c>)
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	4a09      	ldr	r2, [pc, #36]	@ (80022ec <HAL_ADC_ConvCpltCallback+0xa8>)
 80022c6:	6013      	str	r3, [r2, #0]
    }
}
 80022c8:	bf00      	nop
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd90      	pop	{r4, r7, pc}
 80022d0:	40012400 	.word	0x40012400
 80022d4:	200002f0 	.word	0x200002f0
 80022d8:	40533333 	.word	0x40533333
 80022dc:	457ff000 	.word	0x457ff000
 80022e0:	20000300 	.word	0x20000300
 80022e4:	3f666666 	.word	0x3f666666
 80022e8:	3dcccccd 	.word	0x3dcccccd
 80022ec:	2000031c 	.word	0x2000031c

080022f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022f2:	b08b      	sub	sp, #44	@ 0x2c
 80022f4:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022f6:	f002 fd5d 	bl	8004db4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022fa:	f000 f8ad 	bl	8002458 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022fe:	f000 fa85 	bl	800280c <MX_GPIO_Init>
  MX_ADC1_Init();
 8002302:	f000 f905 	bl	8002510 <MX_ADC1_Init>
//  MX_RTC_Init();
  MX_SPI1_Init();
 8002306:	f000 f9d3 	bl	80026b0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800230a:	f000 fa55 	bl	80027b8 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 800230e:	f000 f9a1 	bl	8002654 <MX_I2C2_Init>
  MX_TIM3_Init();
 8002312:	f000 fa03 	bl	800271c <MX_TIM3_Init>
  UART_Init();
 8002316:	f002 fcb3 	bl	8004c80 <UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim3);
 800231a:	4846      	ldr	r0, [pc, #280]	@ (8002434 <main+0x144>)
 800231c:	f006 fd2a 	bl	8008d74 <HAL_TIM_Base_Start>
  RF_Init();
 8002320:	f000 fe54 	bl	8002fcc <RF_Init>
  lcd_init();
 8002324:	f7ff fcb7 	bl	8001c96 <lcd_init>
  ADC_Init(&hadc1);
 8002328:	4843      	ldr	r0, [pc, #268]	@ (8002438 <main+0x148>)
 800232a:	f7ff f9d9 	bl	80016e0 <ADC_Init>
  LoRa_Init();
 800232e:	f7ff fecd 	bl	80020cc <LoRa_Init>
  Screen_Init();
 8002332:	f001 fdc5 	bl	8003ec0 <Screen_Init>
  UART_Init();
 8002336:	f002 fca3 	bl	8004c80 <UART_Init>
  Switches_Init();
 800233a:	f002 fb81 	bl	8004a40 <Switches_Init>
  Relay_Init();
 800233e:	f000 fdbf 	bl	8002ec0 <Relay_Init>
  LED_Init();
 8002342:	f7ff fd2d 	bl	8001da0 <LED_Init>


  ACS712_Init(&hadc1);
 8002346:	483c      	ldr	r0, [pc, #240]	@ (8002438 <main+0x148>)
 8002348:	f7ff f89a 	bl	8001480 <ACS712_Init>
  /* === RTC Initialization === */
  RTC_Init();                   /* probe + clear CH */
 800234c:	f000 feda 	bl	8003104 <RTC_Init>
  RTC_GetTimeDate();            /* read once */
 8002350:	f000 ff28 	bl	80031a4 <RTC_GetTimeDate>
//    RTC_SetTimeDate_AutoDOW(0, 14, 13, 29, 9, 2025);

  Debug_Print("System Initialized\r\n");
 8002354:	4839      	ldr	r0, [pc, #228]	@ (800243c <main+0x14c>)
 8002356:	f7ff ff67 	bl	8002228 <Debug_Print>

  uint8_t lastSecond = 255;
 800235a:	23ff      	movs	r3, #255	@ 0xff
 800235c:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  ACS712_Update();
 800235e:	f7ff f95d 	bl	800161c <ACS712_Update>
	  RF_SendCode(1766904, 24);
 8002362:	2118      	movs	r1, #24
 8002364:	4836      	ldr	r0, [pc, #216]	@ (8002440 <main+0x150>)
 8002366:	f000 fe72 	bl	800304e <RF_SendCode>
      /* App tasks */
      Screen_HandleSwitches();
 800236a:	f002 f90d 	bl	8004588 <Screen_HandleSwitches>
      Screen_Update();
 800236e:	f001 fb3b 	bl	80039e8 <Screen_Update>
      ADC_ReadAllChannels(&hadc1, &adcData);
 8002372:	4934      	ldr	r1, [pc, #208]	@ (8002444 <main+0x154>)
 8002374:	4830      	ldr	r0, [pc, #192]	@ (8002438 <main+0x148>)
 8002376:	f7ff f9c3 	bl	8001700 <ADC_ReadAllChannels>

      /* === Update time once per second === */
      RTC_GetTimeDate();
 800237a:	f000 ff13 	bl	80031a4 <RTC_GetTimeDate>
      if (time.seconds != lastSecond) {
 800237e:	4b32      	ldr	r3, [pc, #200]	@ (8002448 <main+0x158>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	7bfa      	ldrb	r2, [r7, #15]
 8002384:	429a      	cmp	r2, r3
 8002386:	d025      	beq.n	80023d4 <main+0xe4>
          lastSecond = time.seconds;
 8002388:	4b2f      	ldr	r3, [pc, #188]	@ (8002448 <main+0x158>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	73fb      	strb	r3, [r7, #15]

          snprintf(dbg, sizeof(dbg),
                   "⏰ %02d:%02d:%02d 📅 %02d-%02d-%04d (DOW=%d)\r\n",
                   time.hour, time.minutes, time.seconds,
 800238e:	4b2e      	ldr	r3, [pc, #184]	@ (8002448 <main+0x158>)
 8002390:	789b      	ldrb	r3, [r3, #2]
          snprintf(dbg, sizeof(dbg),
 8002392:	461e      	mov	r6, r3
                   time.hour, time.minutes, time.seconds,
 8002394:	4b2c      	ldr	r3, [pc, #176]	@ (8002448 <main+0x158>)
 8002396:	785b      	ldrb	r3, [r3, #1]
          snprintf(dbg, sizeof(dbg),
 8002398:	461a      	mov	r2, r3
                   time.hour, time.minutes, time.seconds,
 800239a:	4b2b      	ldr	r3, [pc, #172]	@ (8002448 <main+0x158>)
 800239c:	781b      	ldrb	r3, [r3, #0]
          snprintf(dbg, sizeof(dbg),
 800239e:	4619      	mov	r1, r3
                   time.dayofmonth, time.month, time.year,
 80023a0:	4b29      	ldr	r3, [pc, #164]	@ (8002448 <main+0x158>)
 80023a2:	791b      	ldrb	r3, [r3, #4]
          snprintf(dbg, sizeof(dbg),
 80023a4:	4618      	mov	r0, r3
                   time.dayofmonth, time.month, time.year,
 80023a6:	4b28      	ldr	r3, [pc, #160]	@ (8002448 <main+0x158>)
 80023a8:	795b      	ldrb	r3, [r3, #5]
          snprintf(dbg, sizeof(dbg),
 80023aa:	461c      	mov	r4, r3
                   time.dayofmonth, time.month, time.year,
 80023ac:	4b26      	ldr	r3, [pc, #152]	@ (8002448 <main+0x158>)
 80023ae:	88db      	ldrh	r3, [r3, #6]
          snprintf(dbg, sizeof(dbg),
 80023b0:	461d      	mov	r5, r3
                   time.dayofweek);
 80023b2:	4b25      	ldr	r3, [pc, #148]	@ (8002448 <main+0x158>)
 80023b4:	78db      	ldrb	r3, [r3, #3]
          snprintf(dbg, sizeof(dbg),
 80023b6:	9305      	str	r3, [sp, #20]
 80023b8:	9504      	str	r5, [sp, #16]
 80023ba:	9403      	str	r4, [sp, #12]
 80023bc:	9002      	str	r0, [sp, #8]
 80023be:	9101      	str	r1, [sp, #4]
 80023c0:	9200      	str	r2, [sp, #0]
 80023c2:	4633      	mov	r3, r6
 80023c4:	4a21      	ldr	r2, [pc, #132]	@ (800244c <main+0x15c>)
 80023c6:	2164      	movs	r1, #100	@ 0x64
 80023c8:	4821      	ldr	r0, [pc, #132]	@ (8002450 <main+0x160>)
 80023ca:	f007 ff43 	bl	800a254 <sniprintf>
          Debug_Print(dbg);
 80023ce:	4820      	ldr	r0, [pc, #128]	@ (8002450 <main+0x160>)
 80023d0:	f7ff ff2a 	bl	8002228 <Debug_Print>
      }

      /* UART command handling */
      if (UART_GetReceivedPacket(receivedUartPacket, sizeof(receivedUartPacket))) {
 80023d4:	2140      	movs	r1, #64	@ 0x40
 80023d6:	481f      	ldr	r0, [pc, #124]	@ (8002454 <main+0x164>)
 80023d8:	f002 fc84 	bl	8004ce4 <UART_GetReceivedPacket>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d01f      	beq.n	8002422 <main+0x132>
          char *p = receivedUartPacket;
 80023e2:	4b1c      	ldr	r3, [pc, #112]	@ (8002454 <main+0x164>)
 80023e4:	60bb      	str	r3, [r7, #8]
          size_t n = strlen(receivedUartPacket);
 80023e6:	481b      	ldr	r0, [pc, #108]	@ (8002454 <main+0x164>)
 80023e8:	f7fd febc 	bl	8000164 <strlen>
 80023ec:	6078      	str	r0, [r7, #4]
          if (n >= 2 && p[0] == '@' && p[n-1] == '#') { p[n-1] = '\0'; p++; }
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d913      	bls.n	800241c <main+0x12c>
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b40      	cmp	r3, #64	@ 0x40
 80023fa:	d10f      	bne.n	800241c <main+0x12c>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	3b01      	subs	r3, #1
 8002400:	68ba      	ldr	r2, [r7, #8]
 8002402:	4413      	add	r3, r2
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	2b23      	cmp	r3, #35	@ 0x23
 8002408:	d108      	bne.n	800241c <main+0x12c>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	3b01      	subs	r3, #1
 800240e:	68ba      	ldr	r2, [r7, #8]
 8002410:	4413      	add	r3, r2
 8002412:	2200      	movs	r2, #0
 8002414:	701a      	strb	r2, [r3, #0]
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	3301      	adds	r3, #1
 800241a:	60bb      	str	r3, [r7, #8]
          ModelHandle_ProcessUartCommand(p);
 800241c:	68b8      	ldr	r0, [r7, #8]
 800241e:	f000 fd01 	bl	8002e24 <ModelHandle_ProcessUartCommand>
      }

      /* Other tasks */
      ModelHandle_Process();
 8002422:	f000 fcf9 	bl	8002e18 <ModelHandle_Process>
      // ❌ Relay_All(false);  <-- removed, was overriding relay control
      LED_Task();
 8002426:	f7ff fcf1 	bl	8001e0c <LED_Task>

      HAL_Delay(20);  // faster responsiveness (was 50)
 800242a:	2014      	movs	r0, #20
 800242c:	f002 fd24 	bl	8004e78 <HAL_Delay>
  {
 8002430:	e795      	b.n	800235e <main+0x6e>
 8002432:	bf00      	nop
 8002434:	20000410 	.word	0x20000410
 8002438:	20000320 	.word	0x20000320
 800243c:	0800c5a4 	.word	0x0800c5a4
 8002440:	001af5f8 	.word	0x001af5f8
 8002444:	200004a0 	.word	0x200004a0
 8002448:	200005d4 	.word	0x200005d4
 800244c:	0800c5bc 	.word	0x0800c5bc
 8002450:	2000050c 	.word	0x2000050c
 8002454:	200004cc 	.word	0x200004cc

08002458 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b094      	sub	sp, #80	@ 0x50
 800245c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800245e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002462:	2228      	movs	r2, #40	@ 0x28
 8002464:	2100      	movs	r1, #0
 8002466:	4618      	mov	r0, r3
 8002468:	f008 f802 	bl	800a470 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800246c:	f107 0314 	add.w	r3, r7, #20
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	605a      	str	r2, [r3, #4]
 8002476:	609a      	str	r2, [r3, #8]
 8002478:	60da      	str	r2, [r3, #12]
 800247a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800247c:	1d3b      	adds	r3, r7, #4
 800247e:	2200      	movs	r2, #0
 8002480:	601a      	str	r2, [r3, #0]
 8002482:	605a      	str	r2, [r3, #4]
 8002484:	609a      	str	r2, [r3, #8]
 8002486:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002488:	230a      	movs	r3, #10
 800248a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800248c:	2301      	movs	r3, #1
 800248e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002490:	2310      	movs	r3, #16
 8002492:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002494:	2301      	movs	r3, #1
 8002496:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002498:	2302      	movs	r3, #2
 800249a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800249c:	2300      	movs	r3, #0
 800249e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80024a0:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80024a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80024aa:	4618      	mov	r0, r3
 80024ac:	f005 f8ce 	bl	800764c <HAL_RCC_OscConfig>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <SystemClock_Config+0x62>
  {
    Error_Handler();
 80024b6:	f000 fa27 	bl	8002908 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024ba:	230f      	movs	r3, #15
 80024bc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024be:	2302      	movs	r3, #2
 80024c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024c2:	2300      	movs	r3, #0
 80024c4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024ca:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024cc:	2300      	movs	r3, #0
 80024ce:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80024d0:	f107 0314 	add.w	r3, r7, #20
 80024d4:	2102      	movs	r1, #2
 80024d6:	4618      	mov	r0, r3
 80024d8:	f005 fb3a 	bl	8007b50 <HAL_RCC_ClockConfig>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80024e2:	f000 fa11 	bl	8002908 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 80024e6:	2303      	movs	r3, #3
 80024e8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80024ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80024ee:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80024f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80024f4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024f6:	1d3b      	adds	r3, r7, #4
 80024f8:	4618      	mov	r0, r3
 80024fa:	f005 fcb7 	bl	8007e6c <HAL_RCCEx_PeriphCLKConfig>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002504:	f000 fa00 	bl	8002908 <Error_Handler>
  }
}
 8002508:	bf00      	nop
 800250a:	3750      	adds	r7, #80	@ 0x50
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002516:	1d3b      	adds	r3, r7, #4
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	605a      	str	r2, [r3, #4]
 800251e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002520:	4b4a      	ldr	r3, [pc, #296]	@ (800264c <MX_ADC1_Init+0x13c>)
 8002522:	4a4b      	ldr	r2, [pc, #300]	@ (8002650 <MX_ADC1_Init+0x140>)
 8002524:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002526:	4b49      	ldr	r3, [pc, #292]	@ (800264c <MX_ADC1_Init+0x13c>)
 8002528:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800252c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800252e:	4b47      	ldr	r3, [pc, #284]	@ (800264c <MX_ADC1_Init+0x13c>)
 8002530:	2200      	movs	r2, #0
 8002532:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002534:	4b45      	ldr	r3, [pc, #276]	@ (800264c <MX_ADC1_Init+0x13c>)
 8002536:	2200      	movs	r2, #0
 8002538:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800253a:	4b44      	ldr	r3, [pc, #272]	@ (800264c <MX_ADC1_Init+0x13c>)
 800253c:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8002540:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002542:	4b42      	ldr	r3, [pc, #264]	@ (800264c <MX_ADC1_Init+0x13c>)
 8002544:	2200      	movs	r2, #0
 8002546:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 8002548:	4b40      	ldr	r3, [pc, #256]	@ (800264c <MX_ADC1_Init+0x13c>)
 800254a:	2208      	movs	r2, #8
 800254c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800254e:	483f      	ldr	r0, [pc, #252]	@ (800264c <MX_ADC1_Init+0x13c>)
 8002550:	f002 fcb6 	bl	8004ec0 <HAL_ADC_Init>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800255a:	f000 f9d5 	bl	8002908 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800255e:	2300      	movs	r3, #0
 8002560:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002562:	2301      	movs	r3, #1
 8002564:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002566:	2300      	movs	r3, #0
 8002568:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800256a:	1d3b      	adds	r3, r7, #4
 800256c:	4619      	mov	r1, r3
 800256e:	4837      	ldr	r0, [pc, #220]	@ (800264c <MX_ADC1_Init+0x13c>)
 8002570:	f003 f832 	bl	80055d8 <HAL_ADC_ConfigChannel>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800257a:	f000 f9c5 	bl	8002908 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800257e:	2301      	movs	r3, #1
 8002580:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002582:	2302      	movs	r3, #2
 8002584:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002586:	1d3b      	adds	r3, r7, #4
 8002588:	4619      	mov	r1, r3
 800258a:	4830      	ldr	r0, [pc, #192]	@ (800264c <MX_ADC1_Init+0x13c>)
 800258c:	f003 f824 	bl	80055d8 <HAL_ADC_ConfigChannel>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8002596:	f000 f9b7 	bl	8002908 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800259a:	2302      	movs	r3, #2
 800259c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800259e:	2303      	movs	r3, #3
 80025a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025a2:	1d3b      	adds	r3, r7, #4
 80025a4:	4619      	mov	r1, r3
 80025a6:	4829      	ldr	r0, [pc, #164]	@ (800264c <MX_ADC1_Init+0x13c>)
 80025a8:	f003 f816 	bl	80055d8 <HAL_ADC_ConfigChannel>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80025b2:	f000 f9a9 	bl	8002908 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80025b6:	2303      	movs	r3, #3
 80025b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80025ba:	2304      	movs	r3, #4
 80025bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025be:	1d3b      	adds	r3, r7, #4
 80025c0:	4619      	mov	r1, r3
 80025c2:	4822      	ldr	r0, [pc, #136]	@ (800264c <MX_ADC1_Init+0x13c>)
 80025c4:	f003 f808 	bl	80055d8 <HAL_ADC_ConfigChannel>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80025ce:	f000 f99b 	bl	8002908 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80025d2:	2304      	movs	r3, #4
 80025d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80025d6:	2305      	movs	r3, #5
 80025d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025da:	1d3b      	adds	r3, r7, #4
 80025dc:	4619      	mov	r1, r3
 80025de:	481b      	ldr	r0, [pc, #108]	@ (800264c <MX_ADC1_Init+0x13c>)
 80025e0:	f002 fffa 	bl	80055d8 <HAL_ADC_ConfigChannel>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80025ea:	f000 f98d 	bl	8002908 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80025ee:	2305      	movs	r3, #5
 80025f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80025f2:	2306      	movs	r3, #6
 80025f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025f6:	1d3b      	adds	r3, r7, #4
 80025f8:	4619      	mov	r1, r3
 80025fa:	4814      	ldr	r0, [pc, #80]	@ (800264c <MX_ADC1_Init+0x13c>)
 80025fc:	f002 ffec 	bl	80055d8 <HAL_ADC_ConfigChannel>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8002606:	f000 f97f 	bl	8002908 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800260a:	2307      	movs	r3, #7
 800260c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800260e:	2307      	movs	r3, #7
 8002610:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002612:	1d3b      	adds	r3, r7, #4
 8002614:	4619      	mov	r1, r3
 8002616:	480d      	ldr	r0, [pc, #52]	@ (800264c <MX_ADC1_Init+0x13c>)
 8002618:	f002 ffde 	bl	80055d8 <HAL_ADC_ConfigChannel>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8002622:	f000 f971 	bl	8002908 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002626:	2306      	movs	r3, #6
 8002628:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800262a:	2308      	movs	r3, #8
 800262c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800262e:	1d3b      	adds	r3, r7, #4
 8002630:	4619      	mov	r1, r3
 8002632:	4806      	ldr	r0, [pc, #24]	@ (800264c <MX_ADC1_Init+0x13c>)
 8002634:	f002 ffd0 	bl	80055d8 <HAL_ADC_ConfigChannel>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 800263e:	f000 f963 	bl	8002908 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002642:	bf00      	nop
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20000320 	.word	0x20000320
 8002650:	40012400 	.word	0x40012400

08002654 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002658:	4b12      	ldr	r3, [pc, #72]	@ (80026a4 <MX_I2C2_Init+0x50>)
 800265a:	4a13      	ldr	r2, [pc, #76]	@ (80026a8 <MX_I2C2_Init+0x54>)
 800265c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800265e:	4b11      	ldr	r3, [pc, #68]	@ (80026a4 <MX_I2C2_Init+0x50>)
 8002660:	4a12      	ldr	r2, [pc, #72]	@ (80026ac <MX_I2C2_Init+0x58>)
 8002662:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002664:	4b0f      	ldr	r3, [pc, #60]	@ (80026a4 <MX_I2C2_Init+0x50>)
 8002666:	2200      	movs	r2, #0
 8002668:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800266a:	4b0e      	ldr	r3, [pc, #56]	@ (80026a4 <MX_I2C2_Init+0x50>)
 800266c:	2200      	movs	r2, #0
 800266e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002670:	4b0c      	ldr	r3, [pc, #48]	@ (80026a4 <MX_I2C2_Init+0x50>)
 8002672:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002676:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002678:	4b0a      	ldr	r3, [pc, #40]	@ (80026a4 <MX_I2C2_Init+0x50>)
 800267a:	2200      	movs	r2, #0
 800267c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800267e:	4b09      	ldr	r3, [pc, #36]	@ (80026a4 <MX_I2C2_Init+0x50>)
 8002680:	2200      	movs	r2, #0
 8002682:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002684:	4b07      	ldr	r3, [pc, #28]	@ (80026a4 <MX_I2C2_Init+0x50>)
 8002686:	2200      	movs	r2, #0
 8002688:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800268a:	4b06      	ldr	r3, [pc, #24]	@ (80026a4 <MX_I2C2_Init+0x50>)
 800268c:	2200      	movs	r2, #0
 800268e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002690:	4804      	ldr	r0, [pc, #16]	@ (80026a4 <MX_I2C2_Init+0x50>)
 8002692:	f003 fcc7 	bl	8006024 <HAL_I2C_Init>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800269c:	f000 f934 	bl	8002908 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80026a0:	bf00      	nop
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	20000350 	.word	0x20000350
 80026a8:	40005800 	.word	0x40005800
 80026ac:	000186a0 	.word	0x000186a0

080026b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80026b4:	4b17      	ldr	r3, [pc, #92]	@ (8002714 <MX_SPI1_Init+0x64>)
 80026b6:	4a18      	ldr	r2, [pc, #96]	@ (8002718 <MX_SPI1_Init+0x68>)
 80026b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80026ba:	4b16      	ldr	r3, [pc, #88]	@ (8002714 <MX_SPI1_Init+0x64>)
 80026bc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80026c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80026c2:	4b14      	ldr	r3, [pc, #80]	@ (8002714 <MX_SPI1_Init+0x64>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80026c8:	4b12      	ldr	r3, [pc, #72]	@ (8002714 <MX_SPI1_Init+0x64>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80026ce:	4b11      	ldr	r3, [pc, #68]	@ (8002714 <MX_SPI1_Init+0x64>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80026d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002714 <MX_SPI1_Init+0x64>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80026da:	4b0e      	ldr	r3, [pc, #56]	@ (8002714 <MX_SPI1_Init+0x64>)
 80026dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80026e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002714 <MX_SPI1_Init+0x64>)
 80026e4:	2218      	movs	r2, #24
 80026e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002714 <MX_SPI1_Init+0x64>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80026ee:	4b09      	ldr	r3, [pc, #36]	@ (8002714 <MX_SPI1_Init+0x64>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026f4:	4b07      	ldr	r3, [pc, #28]	@ (8002714 <MX_SPI1_Init+0x64>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80026fa:	4b06      	ldr	r3, [pc, #24]	@ (8002714 <MX_SPI1_Init+0x64>)
 80026fc:	220a      	movs	r2, #10
 80026fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002700:	4804      	ldr	r0, [pc, #16]	@ (8002714 <MX_SPI1_Init+0x64>)
 8002702:	f005 fd52 	bl	80081aa <HAL_SPI_Init>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800270c:	f000 f8fc 	bl	8002908 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002710:	bf00      	nop
 8002712:	bd80      	pop	{r7, pc}
 8002714:	200003b8 	.word	0x200003b8
 8002718:	40013000 	.word	0x40013000

0800271c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002722:	f107 0308 	add.w	r3, r7, #8
 8002726:	2200      	movs	r2, #0
 8002728:	601a      	str	r2, [r3, #0]
 800272a:	605a      	str	r2, [r3, #4]
 800272c:	609a      	str	r2, [r3, #8]
 800272e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002730:	463b      	mov	r3, r7
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002738:	4b1d      	ldr	r3, [pc, #116]	@ (80027b0 <MX_TIM3_Init+0x94>)
 800273a:	4a1e      	ldr	r2, [pc, #120]	@ (80027b4 <MX_TIM3_Init+0x98>)
 800273c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800273e:	4b1c      	ldr	r3, [pc, #112]	@ (80027b0 <MX_TIM3_Init+0x94>)
 8002740:	2200      	movs	r2, #0
 8002742:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002744:	4b1a      	ldr	r3, [pc, #104]	@ (80027b0 <MX_TIM3_Init+0x94>)
 8002746:	2200      	movs	r2, #0
 8002748:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff;
 800274a:	4b19      	ldr	r3, [pc, #100]	@ (80027b0 <MX_TIM3_Init+0x94>)
 800274c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002750:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002752:	4b17      	ldr	r3, [pc, #92]	@ (80027b0 <MX_TIM3_Init+0x94>)
 8002754:	2200      	movs	r2, #0
 8002756:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002758:	4b15      	ldr	r3, [pc, #84]	@ (80027b0 <MX_TIM3_Init+0x94>)
 800275a:	2200      	movs	r2, #0
 800275c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800275e:	4814      	ldr	r0, [pc, #80]	@ (80027b0 <MX_TIM3_Init+0x94>)
 8002760:	f006 fab9 	bl	8008cd6 <HAL_TIM_Base_Init>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800276a:	f000 f8cd 	bl	8002908 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800276e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002772:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002774:	f107 0308 	add.w	r3, r7, #8
 8002778:	4619      	mov	r1, r3
 800277a:	480d      	ldr	r0, [pc, #52]	@ (80027b0 <MX_TIM3_Init+0x94>)
 800277c:	f006 fb44 	bl	8008e08 <HAL_TIM_ConfigClockSource>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002786:	f000 f8bf 	bl	8002908 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800278a:	2300      	movs	r3, #0
 800278c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800278e:	2300      	movs	r3, #0
 8002790:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002792:	463b      	mov	r3, r7
 8002794:	4619      	mov	r1, r3
 8002796:	4806      	ldr	r0, [pc, #24]	@ (80027b0 <MX_TIM3_Init+0x94>)
 8002798:	f006 fd02 	bl	80091a0 <HAL_TIMEx_MasterConfigSynchronization>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80027a2:	f000 f8b1 	bl	8002908 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80027a6:	bf00      	nop
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	20000410 	.word	0x20000410
 80027b4:	40000400 	.word	0x40000400

080027b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80027bc:	4b11      	ldr	r3, [pc, #68]	@ (8002804 <MX_USART1_UART_Init+0x4c>)
 80027be:	4a12      	ldr	r2, [pc, #72]	@ (8002808 <MX_USART1_UART_Init+0x50>)
 80027c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80027c2:	4b10      	ldr	r3, [pc, #64]	@ (8002804 <MX_USART1_UART_Init+0x4c>)
 80027c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80027c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002804 <MX_USART1_UART_Init+0x4c>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002804 <MX_USART1_UART_Init+0x4c>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002804 <MX_USART1_UART_Init+0x4c>)
 80027d8:	2200      	movs	r2, #0
 80027da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027dc:	4b09      	ldr	r3, [pc, #36]	@ (8002804 <MX_USART1_UART_Init+0x4c>)
 80027de:	220c      	movs	r2, #12
 80027e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027e2:	4b08      	ldr	r3, [pc, #32]	@ (8002804 <MX_USART1_UART_Init+0x4c>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027e8:	4b06      	ldr	r3, [pc, #24]	@ (8002804 <MX_USART1_UART_Init+0x4c>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027ee:	4805      	ldr	r0, [pc, #20]	@ (8002804 <MX_USART1_UART_Init+0x4c>)
 80027f0:	f006 fd34 	bl	800925c <HAL_UART_Init>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80027fa:	f000 f885 	bl	8002908 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027fe:	bf00      	nop
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	20000458 	.word	0x20000458
 8002808:	40013800 	.word	0x40013800

0800280c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b088      	sub	sp, #32
 8002810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002812:	f107 0310 	add.w	r3, r7, #16
 8002816:	2200      	movs	r2, #0
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	605a      	str	r2, [r3, #4]
 800281c:	609a      	str	r2, [r3, #8]
 800281e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002820:	4b35      	ldr	r3, [pc, #212]	@ (80028f8 <MX_GPIO_Init+0xec>)
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	4a34      	ldr	r2, [pc, #208]	@ (80028f8 <MX_GPIO_Init+0xec>)
 8002826:	f043 0310 	orr.w	r3, r3, #16
 800282a:	6193      	str	r3, [r2, #24]
 800282c:	4b32      	ldr	r3, [pc, #200]	@ (80028f8 <MX_GPIO_Init+0xec>)
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	f003 0310 	and.w	r3, r3, #16
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002838:	4b2f      	ldr	r3, [pc, #188]	@ (80028f8 <MX_GPIO_Init+0xec>)
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	4a2e      	ldr	r2, [pc, #184]	@ (80028f8 <MX_GPIO_Init+0xec>)
 800283e:	f043 0304 	orr.w	r3, r3, #4
 8002842:	6193      	str	r3, [r2, #24]
 8002844:	4b2c      	ldr	r3, [pc, #176]	@ (80028f8 <MX_GPIO_Init+0xec>)
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	60bb      	str	r3, [r7, #8]
 800284e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002850:	4b29      	ldr	r3, [pc, #164]	@ (80028f8 <MX_GPIO_Init+0xec>)
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	4a28      	ldr	r2, [pc, #160]	@ (80028f8 <MX_GPIO_Init+0xec>)
 8002856:	f043 0308 	orr.w	r3, r3, #8
 800285a:	6193      	str	r3, [r2, #24]
 800285c:	4b26      	ldr	r3, [pc, #152]	@ (80028f8 <MX_GPIO_Init+0xec>)
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	f003 0308 	and.w	r3, r3, #8
 8002864:	607b      	str	r3, [r7, #4]
 8002866:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Relay1_Pin|Relay2_Pin|Relay3_Pin|LORA_STATUS_Pin
 8002868:	2200      	movs	r2, #0
 800286a:	f240 3147 	movw	r1, #839	@ 0x347
 800286e:	4823      	ldr	r0, [pc, #140]	@ (80028fc <MX_GPIO_Init+0xf0>)
 8002870:	f003 fba7 	bl	8005fc2 <HAL_GPIO_WritePin>
                          |LED4_Pin|LED5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LORA_SELECT_Pin, GPIO_PIN_RESET);
 8002874:	2200      	movs	r2, #0
 8002876:	f44f 4119 	mov.w	r1, #39168	@ 0x9900
 800287a:	4821      	ldr	r0, [pc, #132]	@ (8002900 <MX_GPIO_Init+0xf4>)
 800287c:	f003 fba1 	bl	8005fc2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Relay1_Pin Relay2_Pin Relay3_Pin LORA_STATUS_Pin
                           LED4_Pin LED5_Pin */
  GPIO_InitStruct.Pin = Relay1_Pin|Relay2_Pin|Relay3_Pin|LORA_STATUS_Pin
 8002880:	f240 3347 	movw	r3, #839	@ 0x347
 8002884:	613b      	str	r3, [r7, #16]
                          |LED4_Pin|LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002886:	2301      	movs	r3, #1
 8002888:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288a:	2300      	movs	r3, #0
 800288c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288e:	2302      	movs	r3, #2
 8002890:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002892:	f107 0310 	add.w	r3, r7, #16
 8002896:	4619      	mov	r1, r3
 8002898:	4818      	ldr	r0, [pc, #96]	@ (80028fc <MX_GPIO_Init+0xf0>)
 800289a:	f003 f9f7 	bl	8005c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : SWITCH1_Pin SWITCH2_Pin SWITCH3_Pin SWITCH4_Pin */
  GPIO_InitStruct.Pin = SWITCH1_Pin|SWITCH2_Pin|SWITCH3_Pin|SWITCH4_Pin;
 800289e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80028a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80028a4:	4b17      	ldr	r3, [pc, #92]	@ (8002904 <MX_GPIO_Init+0xf8>)
 80028a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028a8:	2301      	movs	r3, #1
 80028aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ac:	f107 0310 	add.w	r3, r7, #16
 80028b0:	4619      	mov	r1, r3
 80028b2:	4812      	ldr	r0, [pc, #72]	@ (80028fc <MX_GPIO_Init+0xf0>)
 80028b4:	f003 f9ea 	bl	8005c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LORA_SELECT_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LORA_SELECT_Pin;
 80028b8:	f44f 4319 	mov.w	r3, #39168	@ 0x9900
 80028bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028be:	2301      	movs	r3, #1
 80028c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c2:	2300      	movs	r3, #0
 80028c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c6:	2302      	movs	r3, #2
 80028c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ca:	f107 0310 	add.w	r3, r7, #16
 80028ce:	4619      	mov	r1, r3
 80028d0:	480b      	ldr	r0, [pc, #44]	@ (8002900 <MX_GPIO_Init+0xf4>)
 80028d2:	f003 f9db 	bl	8005c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_DATA_Pin */
  GPIO_InitStruct.Pin = RF_DATA_Pin;
 80028d6:	2380      	movs	r3, #128	@ 0x80
 80028d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028da:	2300      	movs	r3, #0
 80028dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028de:	2300      	movs	r3, #0
 80028e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RF_DATA_GPIO_Port, &GPIO_InitStruct);
 80028e2:	f107 0310 	add.w	r3, r7, #16
 80028e6:	4619      	mov	r1, r3
 80028e8:	4804      	ldr	r0, [pc, #16]	@ (80028fc <MX_GPIO_Init+0xf0>)
 80028ea:	f003 f9cf 	bl	8005c8c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80028ee:	bf00      	nop
 80028f0:	3720      	adds	r7, #32
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	40021000 	.word	0x40021000
 80028fc:	40010c00 	.word	0x40010c00
 8002900:	40010800 	.word	0x40010800
 8002904:	10310000 	.word	0x10310000

08002908 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800290c:	b672      	cpsid	i
}
 800290e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002910:	bf00      	nop
 8002912:	e7fd      	b.n	8002910 <Error_Handler+0x8>

08002914 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002918:	f3bf 8f4f 	dsb	sy
}
 800291c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800291e:	4b06      	ldr	r3, [pc, #24]	@ (8002938 <__NVIC_SystemReset+0x24>)
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002926:	4904      	ldr	r1, [pc, #16]	@ (8002938 <__NVIC_SystemReset+0x24>)
 8002928:	4b04      	ldr	r3, [pc, #16]	@ (800293c <__NVIC_SystemReset+0x28>)
 800292a:	4313      	orrs	r3, r2
 800292c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800292e:	f3bf 8f4f 	dsb	sy
}
 8002932:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002934:	bf00      	nop
 8002936:	e7fd      	b.n	8002934 <__NVIC_SystemReset+0x20>
 8002938:	e000ed00 	.word	0xe000ed00
 800293c:	05fa0004 	.word	0x05fa0004

08002940 <now_ms>:
static const uint32_t MAX_CONT_RUN_MS = 2UL * 60UL * 60UL * 1000UL;
static bool           maxRunTimerArmed = false;
static uint32_t       maxRunStartTick  = 0;

/* ===== Utilities ===== */
static inline uint32_t now_ms(void) { return HAL_GetTick(); }
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
 8002944:	f002 fa8e 	bl	8004e64 <HAL_GetTick>
 8002948:	4603      	mov	r3, r0
 800294a:	4618      	mov	r0, r3
 800294c:	bd80      	pop	{r7, pc}

0800294e <ModelHandle_TimeToSeconds>:

uint32_t ModelHandle_TimeToSeconds(uint8_t hh, uint8_t mm) {
 800294e:	b480      	push	{r7}
 8002950:	b083      	sub	sp, #12
 8002952:	af00      	add	r7, sp, #0
 8002954:	4603      	mov	r3, r0
 8002956:	460a      	mov	r2, r1
 8002958:	71fb      	strb	r3, [r7, #7]
 800295a:	4613      	mov	r3, r2
 800295c:	71bb      	strb	r3, [r7, #6]
    return ((uint32_t)hh * 3600UL) + ((uint32_t)mm * 60UL);
 800295e:	79fb      	ldrb	r3, [r7, #7]
 8002960:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8002964:	fb02 f103 	mul.w	r1, r2, r3
 8002968:	79ba      	ldrb	r2, [r7, #6]
 800296a:	4613      	mov	r3, r2
 800296c:	011b      	lsls	r3, r3, #4
 800296e:	1a9b      	subs	r3, r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	440b      	add	r3, r1
}
 8002974:	4618      	mov	r0, r3
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr
	...

08002980 <motor_apply>:
    if (mm) *mm = (uint8_t)((sec % 3600UL) / 60UL);
}

/* ===== Motor Control ===== */
static inline void motor_apply(bool on)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	71fb      	strb	r3, [r7, #7]
    Relay_Set(1, on);
 800298a:	79fb      	ldrb	r3, [r7, #7]
 800298c:	4619      	mov	r1, r3
 800298e:	2001      	movs	r0, #1
 8002990:	f000 fae0 	bl	8002f54 <Relay_Set>
    motorStatus = on ? 1U : 0U;
 8002994:	79fb      	ldrb	r3, [r7, #7]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <motor_apply+0x1e>
 800299a:	2201      	movs	r2, #1
 800299c:	e000      	b.n	80029a0 <motor_apply+0x20>
 800299e:	2200      	movs	r2, #0
 80029a0:	4b0d      	ldr	r3, [pc, #52]	@ (80029d8 <motor_apply+0x58>)
 80029a2:	701a      	strb	r2, [r3, #0]

    if (on) {
 80029a4:	79fb      	ldrb	r3, [r7, #7]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00f      	beq.n	80029ca <motor_apply+0x4a>
        if (!maxRunTimerArmed) {
 80029aa:	4b0c      	ldr	r3, [pc, #48]	@ (80029dc <motor_apply+0x5c>)
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	f083 0301 	eor.w	r3, r3, #1
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00b      	beq.n	80029d0 <motor_apply+0x50>
            maxRunTimerArmed = true;
 80029b8:	4b08      	ldr	r3, [pc, #32]	@ (80029dc <motor_apply+0x5c>)
 80029ba:	2201      	movs	r2, #1
 80029bc:	701a      	strb	r2, [r3, #0]
            maxRunStartTick  = now_ms();
 80029be:	f7ff ffbf 	bl	8002940 <now_ms>
 80029c2:	4603      	mov	r3, r0
 80029c4:	4a06      	ldr	r2, [pc, #24]	@ (80029e0 <motor_apply+0x60>)
 80029c6:	6013      	str	r3, [r2, #0]
        }
    } else {
        maxRunTimerArmed = false;
    }
}
 80029c8:	e002      	b.n	80029d0 <motor_apply+0x50>
        maxRunTimerArmed = false;
 80029ca:	4b04      	ldr	r3, [pc, #16]	@ (80029dc <motor_apply+0x5c>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	701a      	strb	r2, [r3, #0]
}
 80029d0:	bf00      	nop
 80029d2:	3708      	adds	r7, #8
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	20000570 	.word	0x20000570
 80029dc:	200005b9 	.word	0x200005b9
 80029e0:	200005bc 	.word	0x200005bc

080029e4 <start_motor>:

static inline void start_motor(void) { motor_apply(true); }
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	2001      	movs	r0, #1
 80029ea:	f7ff ffc9 	bl	8002980 <motor_apply>
 80029ee:	bf00      	nop
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <stop_motor>:
static inline void stop_motor(void)  { motor_apply(false); }
 80029f2:	b580      	push	{r7, lr}
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	2000      	movs	r0, #0
 80029f8:	f7ff ffc2 	bl	8002980 <motor_apply>
 80029fc:	bf00      	nop
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <isTankFull>:

/* ===== Tank Check ===== */
static bool isTankFull(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
    int submergedCount = 0;
 8002a06:	2300      	movs	r3, #0
 8002a08:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 5; i++) {
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	603b      	str	r3, [r7, #0]
 8002a0e:	e012      	b.n	8002a36 <isTankFull+0x36>
        if (adcData.voltages[i] < 0.1f) submergedCount++;
 8002a10:	4a0f      	ldr	r2, [pc, #60]	@ (8002a50 <isTankFull+0x50>)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	3302      	adds	r3, #2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4413      	add	r3, r2
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	490d      	ldr	r1, [pc, #52]	@ (8002a54 <isTankFull+0x54>)
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fe fae8 	bl	8000ff4 <__aeabi_fcmplt>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d002      	beq.n	8002a30 <isTankFull+0x30>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 5; i++) {
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	3301      	adds	r3, #1
 8002a34:	603b      	str	r3, [r7, #0]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	2b04      	cmp	r3, #4
 8002a3a:	dde9      	ble.n	8002a10 <isTankFull+0x10>
    }
    return (submergedCount >= 4);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b03      	cmp	r3, #3
 8002a40:	bfcc      	ite	gt
 8002a42:	2301      	movgt	r3, #1
 8002a44:	2300      	movle	r3, #0
 8002a46:	b2db      	uxtb	r3, r3
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	200004a0 	.word	0x200004a0
 8002a54:	3dcccccd 	.word	0x3dcccccd

08002a58 <ModelHandle_ToggleManual>:

/* ===== Manual Mode ===== */
void ModelHandle_ToggleManual(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
    semiAutoActive  = false;
 8002a5c:	4b19      	ldr	r3, [pc, #100]	@ (8002ac4 <ModelHandle_ToggleManual+0x6c>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	701a      	strb	r2, [r3, #0]
    timerActive     = false;
 8002a62:	4b19      	ldr	r3, [pc, #100]	@ (8002ac8 <ModelHandle_ToggleManual+0x70>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	701a      	strb	r2, [r3, #0]
    searchActive    = false;
 8002a68:	4b18      	ldr	r3, [pc, #96]	@ (8002acc <ModelHandle_ToggleManual+0x74>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	701a      	strb	r2, [r3, #0]
    countdownActive = false;
 8002a6e:	4b18      	ldr	r3, [pc, #96]	@ (8002ad0 <ModelHandle_ToggleManual+0x78>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	701a      	strb	r2, [r3, #0]
    twistActive     = false;
 8002a74:	4b17      	ldr	r3, [pc, #92]	@ (8002ad4 <ModelHandle_ToggleManual+0x7c>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	701a      	strb	r2, [r3, #0]

    manualOverride = true;
 8002a7a:	4b17      	ldr	r3, [pc, #92]	@ (8002ad8 <ModelHandle_ToggleManual+0x80>)
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	701a      	strb	r2, [r3, #0]
    manualActive   = !manualActive;
 8002a80:	4b16      	ldr	r3, [pc, #88]	@ (8002adc <ModelHandle_ToggleManual+0x84>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	bf14      	ite	ne
 8002a8a:	2301      	movne	r3, #1
 8002a8c:	2300      	moveq	r3, #0
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	f083 0301 	eor.w	r3, r3, #1
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8002adc <ModelHandle_ToggleManual+0x84>)
 8002a9e:	701a      	strb	r2, [r3, #0]

    if (manualActive) {
 8002aa0:	4b0e      	ldr	r3, [pc, #56]	@ (8002adc <ModelHandle_ToggleManual+0x84>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d005      	beq.n	8002ab6 <ModelHandle_ToggleManual+0x5e>
        start_motor();
 8002aaa:	f7ff ff9b 	bl	80029e4 <start_motor>
        printf("Manual ON\r\n");
 8002aae:	480c      	ldr	r0, [pc, #48]	@ (8002ae0 <ModelHandle_ToggleManual+0x88>)
 8002ab0:	f007 fbc8 	bl	800a244 <puts>
    } else {
        stop_motor();
        printf("Manual OFF\r\n");
    }
}
 8002ab4:	e004      	b.n	8002ac0 <ModelHandle_ToggleManual+0x68>
        stop_motor();
 8002ab6:	f7ff ff9c 	bl	80029f2 <stop_motor>
        printf("Manual OFF\r\n");
 8002aba:	480a      	ldr	r0, [pc, #40]	@ (8002ae4 <ModelHandle_ToggleManual+0x8c>)
 8002abc:	f007 fbc2 	bl	800a244 <puts>
}
 8002ac0:	bf00      	nop
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	20000576 	.word	0x20000576
 8002ac8:	20000575 	.word	0x20000575
 8002acc:	20000574 	.word	0x20000574
 8002ad0:	20000572 	.word	0x20000572
 8002ad4:	20000573 	.word	0x20000573
 8002ad8:	200005b8 	.word	0x200005b8
 8002adc:	20000571 	.word	0x20000571
 8002ae0:	0800c5f0 	.word	0x0800c5f0
 8002ae4:	0800c5fc 	.word	0x0800c5fc

08002ae8 <ModelHandle_ManualLongPress>:

void ModelHandle_ManualLongPress(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
    manualOverride = false;
 8002aec:	4b06      	ldr	r3, [pc, #24]	@ (8002b08 <ModelHandle_ManualLongPress+0x20>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	701a      	strb	r2, [r3, #0]
    manualActive   = false;
 8002af2:	4b06      	ldr	r3, [pc, #24]	@ (8002b0c <ModelHandle_ManualLongPress+0x24>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	701a      	strb	r2, [r3, #0]
    printf("Manual Long Press → Restarting...\r\n");
 8002af8:	4805      	ldr	r0, [pc, #20]	@ (8002b10 <ModelHandle_ManualLongPress+0x28>)
 8002afa:	f007 fba3 	bl	800a244 <puts>
    HAL_Delay(100);
 8002afe:	2064      	movs	r0, #100	@ 0x64
 8002b00:	f002 f9ba 	bl	8004e78 <HAL_Delay>
    NVIC_SystemReset();
 8002b04:	f7ff ff06 	bl	8002914 <__NVIC_SystemReset>
 8002b08:	200005b8 	.word	0x200005b8
 8002b0c:	20000571 	.word	0x20000571
 8002b10:	0800c608 	.word	0x0800c608

08002b14 <ModelHandle_StopCountdown>:
static bool     cd_in_rest          = false;
static const uint32_t CD_REST_MS    = 3000;     // 3s rest between runs

/* --- Stop Countdown --- */
void ModelHandle_StopCountdown(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
    stop_motor();
 8002b18:	f7ff ff6b 	bl	80029f2 <stop_motor>
    countdownActive        = false;
 8002b1c:	4b09      	ldr	r3, [pc, #36]	@ (8002b44 <ModelHandle_StopCountdown+0x30>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	701a      	strb	r2, [r3, #0]
    countdownMode          = false;
 8002b22:	4b09      	ldr	r3, [pc, #36]	@ (8002b48 <ModelHandle_StopCountdown+0x34>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	701a      	strb	r2, [r3, #0]
    countdownRemainingRuns = 0;
 8002b28:	4b08      	ldr	r3, [pc, #32]	@ (8002b4c <ModelHandle_StopCountdown+0x38>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	801a      	strh	r2, [r3, #0]
    cd_run_seconds         = 0;
 8002b2e:	4b08      	ldr	r3, [pc, #32]	@ (8002b50 <ModelHandle_StopCountdown+0x3c>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]
    cd_in_rest             = false;
 8002b34:	4b07      	ldr	r3, [pc, #28]	@ (8002b54 <ModelHandle_StopCountdown+0x40>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	701a      	strb	r2, [r3, #0]
    countdownDuration      = 0;
 8002b3a:	4b07      	ldr	r3, [pc, #28]	@ (8002b58 <ModelHandle_StopCountdown+0x44>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]
}
 8002b40:	bf00      	nop
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	20000572 	.word	0x20000572
 8002b48:	20000019 	.word	0x20000019
 8002b4c:	200005c0 	.word	0x200005c0
 8002b50:	200005cc 	.word	0x200005cc
 8002b54:	200005d0 	.word	0x200005d0
 8002b58:	20000578 	.word	0x20000578

08002b5c <countdown_start_one_run>:

/* --- Start one run --- */
static void countdown_start_one_run(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
    cd_deadline_ms   = now_ms() + (cd_run_seconds * 1000UL);
 8002b60:	f7ff feee 	bl	8002940 <now_ms>
 8002b64:	4602      	mov	r2, r0
 8002b66:	4b0a      	ldr	r3, [pc, #40]	@ (8002b90 <countdown_start_one_run+0x34>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002b6e:	fb01 f303 	mul.w	r3, r1, r3
 8002b72:	4413      	add	r3, r2
 8002b74:	4a07      	ldr	r2, [pc, #28]	@ (8002b94 <countdown_start_one_run+0x38>)
 8002b76:	6013      	str	r3, [r2, #0]
    countdownDuration = cd_run_seconds;
 8002b78:	4b05      	ldr	r3, [pc, #20]	@ (8002b90 <countdown_start_one_run+0x34>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a06      	ldr	r2, [pc, #24]	@ (8002b98 <countdown_start_one_run+0x3c>)
 8002b7e:	6013      	str	r3, [r2, #0]
    cd_in_rest        = false;
 8002b80:	4b06      	ldr	r3, [pc, #24]	@ (8002b9c <countdown_start_one_run+0x40>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	701a      	strb	r2, [r3, #0]
    start_motor();
 8002b86:	f7ff ff2d 	bl	80029e4 <start_motor>
}
 8002b8a:	bf00      	nop
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	200005cc 	.word	0x200005cc
 8002b94:	200005c4 	.word	0x200005c4
 8002b98:	20000578 	.word	0x20000578
 8002b9c:	200005d0 	.word	0x200005d0

08002ba0 <ModelHandle_StartCountdown>:

/* --- Start Countdown (multi-run) --- */
void ModelHandle_StartCountdown(uint32_t seconds_per_run, uint16_t repeats)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	460b      	mov	r3, r1
 8002baa:	807b      	strh	r3, [r7, #2]
    if (seconds_per_run == 0 || repeats == 0) {
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d002      	beq.n	8002bb8 <ModelHandle_StartCountdown+0x18>
 8002bb2:	887b      	ldrh	r3, [r7, #2]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d102      	bne.n	8002bbe <ModelHandle_StartCountdown+0x1e>
        ModelHandle_StopCountdown();
 8002bb8:	f7ff ffac 	bl	8002b14 <ModelHandle_StopCountdown>
        return;
 8002bbc:	e01f      	b.n	8002bfe <ModelHandle_StartCountdown+0x5e>
    }

    manualActive   = false;
 8002bbe:	4b11      	ldr	r3, [pc, #68]	@ (8002c04 <ModelHandle_StartCountdown+0x64>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	701a      	strb	r2, [r3, #0]
    semiAutoActive = false;
 8002bc4:	4b10      	ldr	r3, [pc, #64]	@ (8002c08 <ModelHandle_StartCountdown+0x68>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	701a      	strb	r2, [r3, #0]
    timerActive    = false;
 8002bca:	4b10      	ldr	r3, [pc, #64]	@ (8002c0c <ModelHandle_StartCountdown+0x6c>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	701a      	strb	r2, [r3, #0]
    searchActive   = false;
 8002bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8002c10 <ModelHandle_StartCountdown+0x70>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	701a      	strb	r2, [r3, #0]
    twistActive    = false;
 8002bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8002c14 <ModelHandle_StartCountdown+0x74>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	701a      	strb	r2, [r3, #0]

    countdownMode          = true;
 8002bdc:	4b0e      	ldr	r3, [pc, #56]	@ (8002c18 <ModelHandle_StartCountdown+0x78>)
 8002bde:	2201      	movs	r2, #1
 8002be0:	701a      	strb	r2, [r3, #0]
    countdownActive        = true;
 8002be2:	4b0e      	ldr	r3, [pc, #56]	@ (8002c1c <ModelHandle_StartCountdown+0x7c>)
 8002be4:	2201      	movs	r2, #1
 8002be6:	701a      	strb	r2, [r3, #0]
    cd_run_seconds         = seconds_per_run;
 8002be8:	4a0d      	ldr	r2, [pc, #52]	@ (8002c20 <ModelHandle_StartCountdown+0x80>)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6013      	str	r3, [r2, #0]
    countdownRemainingRuns = repeats;
 8002bee:	4a0d      	ldr	r2, [pc, #52]	@ (8002c24 <ModelHandle_StartCountdown+0x84>)
 8002bf0:	887b      	ldrh	r3, [r7, #2]
 8002bf2:	8013      	strh	r3, [r2, #0]
    cd_in_rest             = false;
 8002bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8002c28 <ModelHandle_StartCountdown+0x88>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	701a      	strb	r2, [r3, #0]

    countdown_start_one_run();
 8002bfa:	f7ff ffaf 	bl	8002b5c <countdown_start_one_run>
}
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	20000571 	.word	0x20000571
 8002c08:	20000576 	.word	0x20000576
 8002c0c:	20000575 	.word	0x20000575
 8002c10:	20000574 	.word	0x20000574
 8002c14:	20000573 	.word	0x20000573
 8002c18:	20000019 	.word	0x20000019
 8002c1c:	20000572 	.word	0x20000572
 8002c20:	200005cc 	.word	0x200005cc
 8002c24:	200005c0 	.word	0x200005c0
 8002c28:	200005d0 	.word	0x200005d0

08002c2c <countdown_tick>:

/* --- Countdown Tick --- */
static void countdown_tick(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
    if (!countdownActive) return;
 8002c32:	4b34      	ldr	r3, [pc, #208]	@ (8002d04 <countdown_tick+0xd8>)
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	f083 0301 	eor.w	r3, r3, #1
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d158      	bne.n	8002cf4 <countdown_tick+0xc8>
    uint32_t now = now_ms();
 8002c42:	f7ff fe7d 	bl	8002940 <now_ms>
 8002c46:	6078      	str	r0, [r7, #4]

    if (cd_in_rest) {
 8002c48:	4b2f      	ldr	r3, [pc, #188]	@ (8002d08 <countdown_tick+0xdc>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d010      	beq.n	8002c72 <countdown_tick+0x46>
        if ((int32_t)(cd_rest_deadline_ms - now) <= 0) {
 8002c50:	4b2e      	ldr	r3, [pc, #184]	@ (8002d0c <countdown_tick+0xe0>)
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	dc4d      	bgt.n	8002cf8 <countdown_tick+0xcc>
            if (countdownRemainingRuns > 0) {
 8002c5c:	4b2c      	ldr	r3, [pc, #176]	@ (8002d10 <countdown_tick+0xe4>)
 8002c5e:	881b      	ldrh	r3, [r3, #0]
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d002      	beq.n	8002c6c <countdown_tick+0x40>
                countdown_start_one_run();
 8002c66:	f7ff ff79 	bl	8002b5c <countdown_start_one_run>
            } else {
                ModelHandle_StopCountdown();
            }
        }
        return;
 8002c6a:	e045      	b.n	8002cf8 <countdown_tick+0xcc>
                ModelHandle_StopCountdown();
 8002c6c:	f7ff ff52 	bl	8002b14 <ModelHandle_StopCountdown>
        return;
 8002c70:	e042      	b.n	8002cf8 <countdown_tick+0xcc>
    }

    if ((int32_t)(cd_deadline_ms - now) > 0) {
 8002c72:	4b28      	ldr	r3, [pc, #160]	@ (8002d14 <countdown_tick+0xe8>)
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	dd17      	ble.n	8002cae <countdown_tick+0x82>
        uint32_t rem_ms = cd_deadline_ms - now;
 8002c7e:	4b25      	ldr	r3, [pc, #148]	@ (8002d14 <countdown_tick+0xe8>)
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	603b      	str	r3, [r7, #0]
        countdownDuration = (rem_ms + 999U) / 1000U;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 8002c8e:	4a22      	ldr	r2, [pc, #136]	@ (8002d18 <countdown_tick+0xec>)
 8002c90:	fba2 2303 	umull	r2, r3, r2, r3
 8002c94:	099b      	lsrs	r3, r3, #6
 8002c96:	4a21      	ldr	r2, [pc, #132]	@ (8002d1c <countdown_tick+0xf0>)
 8002c98:	6013      	str	r3, [r2, #0]

        if (isTankFull()) {
 8002c9a:	f7ff feb1 	bl	8002a00 <isTankFull>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d02b      	beq.n	8002cfc <countdown_tick+0xd0>
            stop_motor();
 8002ca4:	f7ff fea5 	bl	80029f2 <stop_motor>
            ModelHandle_StopCountdown();
 8002ca8:	f7ff ff34 	bl	8002b14 <ModelHandle_StopCountdown>
        }
        return;
 8002cac:	e026      	b.n	8002cfc <countdown_tick+0xd0>
    }

    // run time finished
    stop_motor();
 8002cae:	f7ff fea0 	bl	80029f2 <stop_motor>
    if (countdownRemainingRuns > 0) countdownRemainingRuns--;
 8002cb2:	4b17      	ldr	r3, [pc, #92]	@ (8002d10 <countdown_tick+0xe4>)
 8002cb4:	881b      	ldrh	r3, [r3, #0]
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d006      	beq.n	8002cca <countdown_tick+0x9e>
 8002cbc:	4b14      	ldr	r3, [pc, #80]	@ (8002d10 <countdown_tick+0xe4>)
 8002cbe:	881b      	ldrh	r3, [r3, #0]
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	4b12      	ldr	r3, [pc, #72]	@ (8002d10 <countdown_tick+0xe4>)
 8002cc8:	801a      	strh	r2, [r3, #0]

    if (countdownRemainingRuns == 0) {
 8002cca:	4b11      	ldr	r3, [pc, #68]	@ (8002d10 <countdown_tick+0xe4>)
 8002ccc:	881b      	ldrh	r3, [r3, #0]
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d102      	bne.n	8002cda <countdown_tick+0xae>
        ModelHandle_StopCountdown();
 8002cd4:	f7ff ff1e 	bl	8002b14 <ModelHandle_StopCountdown>
        return;
 8002cd8:	e011      	b.n	8002cfe <countdown_tick+0xd2>
    }

    // rest before next run
    cd_in_rest          = true;
 8002cda:	4b0b      	ldr	r3, [pc, #44]	@ (8002d08 <countdown_tick+0xdc>)
 8002cdc:	2201      	movs	r2, #1
 8002cde:	701a      	strb	r2, [r3, #0]
    cd_rest_deadline_ms = now + CD_REST_MS;
 8002ce0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	4a08      	ldr	r2, [pc, #32]	@ (8002d0c <countdown_tick+0xe0>)
 8002cea:	6013      	str	r3, [r2, #0]
    countdownDuration   = 0;
 8002cec:	4b0b      	ldr	r3, [pc, #44]	@ (8002d1c <countdown_tick+0xf0>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	e004      	b.n	8002cfe <countdown_tick+0xd2>
    if (!countdownActive) return;
 8002cf4:	bf00      	nop
 8002cf6:	e002      	b.n	8002cfe <countdown_tick+0xd2>
        return;
 8002cf8:	bf00      	nop
 8002cfa:	e000      	b.n	8002cfe <countdown_tick+0xd2>
        return;
 8002cfc:	bf00      	nop
}
 8002cfe:	3708      	adds	r7, #8
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	20000572 	.word	0x20000572
 8002d08:	200005d0 	.word	0x200005d0
 8002d0c:	200005c8 	.word	0x200005c8
 8002d10:	200005c0 	.word	0x200005c0
 8002d14:	200005c4 	.word	0x200005c4
 8002d18:	10624dd3 	.word	0x10624dd3
 8002d1c:	20000578 	.word	0x20000578

08002d20 <ModelHandle_StartSemiAuto>:
    timerRetryDeadline = 0;
}

/* ===== Semi-Auto ===== */
void ModelHandle_StartSemiAuto(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
    manualOverride = false;
 8002d24:	4b16      	ldr	r3, [pc, #88]	@ (8002d80 <ModelHandle_StartSemiAuto+0x60>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	701a      	strb	r2, [r3, #0]
    manualActive   = false;
 8002d2a:	4b16      	ldr	r3, [pc, #88]	@ (8002d84 <ModelHandle_StartSemiAuto+0x64>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	701a      	strb	r2, [r3, #0]
    timerActive    = false;
 8002d30:	4b15      	ldr	r3, [pc, #84]	@ (8002d88 <ModelHandle_StartSemiAuto+0x68>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	701a      	strb	r2, [r3, #0]
    searchActive   = false;
 8002d36:	4b15      	ldr	r3, [pc, #84]	@ (8002d8c <ModelHandle_StartSemiAuto+0x6c>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	701a      	strb	r2, [r3, #0]
    countdownActive= false;
 8002d3c:	4b14      	ldr	r3, [pc, #80]	@ (8002d90 <ModelHandle_StartSemiAuto+0x70>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	701a      	strb	r2, [r3, #0]
    twistActive    = false;
 8002d42:	4b14      	ldr	r3, [pc, #80]	@ (8002d94 <ModelHandle_StartSemiAuto+0x74>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	701a      	strb	r2, [r3, #0]

    semiAutoActive = true;
 8002d48:	4b13      	ldr	r3, [pc, #76]	@ (8002d98 <ModelHandle_StartSemiAuto+0x78>)
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	701a      	strb	r2, [r3, #0]

    if (!isTankFull()) {
 8002d4e:	f7ff fe57 	bl	8002a00 <isTankFull>
 8002d52:	4603      	mov	r3, r0
 8002d54:	f083 0301 	eor.w	r3, r3, #1
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d005      	beq.n	8002d6a <ModelHandle_StartSemiAuto+0x4a>
        start_motor();
 8002d5e:	f7ff fe41 	bl	80029e4 <start_motor>
        printf("Semi-Auto Started\r\n");
 8002d62:	480e      	ldr	r0, [pc, #56]	@ (8002d9c <ModelHandle_StartSemiAuto+0x7c>)
 8002d64:	f007 fa6e 	bl	800a244 <puts>
    } else {
        stop_motor();
        semiAutoActive = false;
        printf("Semi-Auto Not Started: Already Full\r\n");
    }
}
 8002d68:	e007      	b.n	8002d7a <ModelHandle_StartSemiAuto+0x5a>
        stop_motor();
 8002d6a:	f7ff fe42 	bl	80029f2 <stop_motor>
        semiAutoActive = false;
 8002d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d98 <ModelHandle_StartSemiAuto+0x78>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	701a      	strb	r2, [r3, #0]
        printf("Semi-Auto Not Started: Already Full\r\n");
 8002d74:	480a      	ldr	r0, [pc, #40]	@ (8002da0 <ModelHandle_StartSemiAuto+0x80>)
 8002d76:	f007 fa65 	bl	800a244 <puts>
}
 8002d7a:	bf00      	nop
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	200005b8 	.word	0x200005b8
 8002d84:	20000571 	.word	0x20000571
 8002d88:	20000575 	.word	0x20000575
 8002d8c:	20000574 	.word	0x20000574
 8002d90:	20000572 	.word	0x20000572
 8002d94:	20000573 	.word	0x20000573
 8002d98:	20000576 	.word	0x20000576
 8002d9c:	0800c630 	.word	0x0800c630
 8002da0:	0800c644 	.word	0x0800c644

08002da4 <ModelHandle_SetMotor>:
    LED_ApplyIntents();
}

/* ===== Public API ===== */
void ModelHandle_SetMotor(bool on)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	4603      	mov	r3, r0
 8002dac:	71fb      	strb	r3, [r7, #7]
    manualOverride = true;
 8002dae:	4b0a      	ldr	r3, [pc, #40]	@ (8002dd8 <ModelHandle_SetMotor+0x34>)
 8002db0:	2201      	movs	r2, #1
 8002db2:	701a      	strb	r2, [r3, #0]
    Relay_Set(1, on);
 8002db4:	79fb      	ldrb	r3, [r7, #7]
 8002db6:	4619      	mov	r1, r3
 8002db8:	2001      	movs	r0, #1
 8002dba:	f000 f8cb 	bl	8002f54 <Relay_Set>
    motorStatus = on ? 1U : 0U;
 8002dbe:	79fb      	ldrb	r3, [r7, #7]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <ModelHandle_SetMotor+0x24>
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	e000      	b.n	8002dca <ModelHandle_SetMotor+0x26>
 8002dc8:	2200      	movs	r2, #0
 8002dca:	4b04      	ldr	r3, [pc, #16]	@ (8002ddc <ModelHandle_SetMotor+0x38>)
 8002dcc:	701a      	strb	r2, [r3, #0]
}
 8002dce:	bf00      	nop
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	200005b8 	.word	0x200005b8
 8002ddc:	20000570 	.word	0x20000570

08002de0 <ModelHandle_ClearManualOverride>:

void ModelHandle_ClearManualOverride(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
    manualOverride = false;
 8002de4:	4b03      	ldr	r3, [pc, #12]	@ (8002df4 <ModelHandle_ClearManualOverride+0x14>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	701a      	strb	r2, [r3, #0]
}
 8002dea:	bf00      	nop
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bc80      	pop	{r7}
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	200005b8 	.word	0x200005b8

08002df8 <Motor_GetStatus>:

bool Motor_GetStatus(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
    return (motorStatus == 1U);
 8002dfc:	4b05      	ldr	r3, [pc, #20]	@ (8002e14 <Motor_GetStatus+0x1c>)
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	bf0c      	ite	eq
 8002e06:	2301      	moveq	r3, #1
 8002e08:	2300      	movne	r3, #0
 8002e0a:	b2db      	uxtb	r3, r3
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bc80      	pop	{r7}
 8002e12:	4770      	bx	lr
 8002e14:	20000570 	.word	0x20000570

08002e18 <ModelHandle_Process>:

/* ===== Main tick ===== */

void ModelHandle_Process(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
    // protections, sensor reads, etc...

    countdown_tick();  // ensure countdown updates every loop
 8002e1c:	f7ff ff06 	bl	8002c2c <countdown_tick>
}
 8002e20:	bf00      	nop
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <ModelHandle_ProcessUartCommand>:
//    return (motorStatus != 0);
//}


void ModelHandle_ProcessUartCommand(const char* cmd)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
    if (!cmd || !*cmd) return;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d033      	beq.n	8002e9a <ModelHandle_ProcessUartCommand+0x76>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d02f      	beq.n	8002e9a <ModelHandle_ProcessUartCommand+0x76>

    if (strcmp(cmd, "MOTOR_ON") == 0) {
 8002e3a:	491a      	ldr	r1, [pc, #104]	@ (8002ea4 <ModelHandle_ProcessUartCommand+0x80>)
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f7fd f987 	bl	8000150 <strcmp>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10b      	bne.n	8002e60 <ModelHandle_ProcessUartCommand+0x3c>
        manualOverride = true;
 8002e48:	4b17      	ldr	r3, [pc, #92]	@ (8002ea8 <ModelHandle_ProcessUartCommand+0x84>)
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	701a      	strb	r2, [r3, #0]
        manualActive   = true;
 8002e4e:	4b17      	ldr	r3, [pc, #92]	@ (8002eac <ModelHandle_ProcessUartCommand+0x88>)
 8002e50:	2201      	movs	r2, #1
 8002e52:	701a      	strb	r2, [r3, #0]
        start_motor();
 8002e54:	f7ff fdc6 	bl	80029e4 <start_motor>
        printf("Manual ON (UART)\r\n");
 8002e58:	4815      	ldr	r0, [pc, #84]	@ (8002eb0 <ModelHandle_ProcessUartCommand+0x8c>)
 8002e5a:	f007 f9f3 	bl	800a244 <puts>
 8002e5e:	e01d      	b.n	8002e9c <ModelHandle_ProcessUartCommand+0x78>
    }
    else if (strcmp(cmd, "MOTOR_OFF") == 0) {
 8002e60:	4914      	ldr	r1, [pc, #80]	@ (8002eb4 <ModelHandle_ProcessUartCommand+0x90>)
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f7fd f974 	bl	8000150 <strcmp>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10b      	bne.n	8002e86 <ModelHandle_ProcessUartCommand+0x62>
        manualOverride = true;
 8002e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ea8 <ModelHandle_ProcessUartCommand+0x84>)
 8002e70:	2201      	movs	r2, #1
 8002e72:	701a      	strb	r2, [r3, #0]
        manualActive   = false;
 8002e74:	4b0d      	ldr	r3, [pc, #52]	@ (8002eac <ModelHandle_ProcessUartCommand+0x88>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	701a      	strb	r2, [r3, #0]
        stop_motor();
 8002e7a:	f7ff fdba 	bl	80029f2 <stop_motor>
        printf("Manual OFF (UART)\r\n");
 8002e7e:	480e      	ldr	r0, [pc, #56]	@ (8002eb8 <ModelHandle_ProcessUartCommand+0x94>)
 8002e80:	f007 f9e0 	bl	800a244 <puts>
 8002e84:	e00a      	b.n	8002e9c <ModelHandle_ProcessUartCommand+0x78>
    }
    else if (strcmp(cmd, "SEMI_AUTO_START") == 0) {
 8002e86:	490d      	ldr	r1, [pc, #52]	@ (8002ebc <ModelHandle_ProcessUartCommand+0x98>)
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f7fd f961 	bl	8000150 <strcmp>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d103      	bne.n	8002e9c <ModelHandle_ProcessUartCommand+0x78>
        ModelHandle_StartSemiAuto();
 8002e94:	f7ff ff44 	bl	8002d20 <ModelHandle_StartSemiAuto>
 8002e98:	e000      	b.n	8002e9c <ModelHandle_ProcessUartCommand+0x78>
    if (!cmd || !*cmd) return;
 8002e9a:	bf00      	nop
    }
}
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	0800c68c 	.word	0x0800c68c
 8002ea8:	200005b8 	.word	0x200005b8
 8002eac:	20000571 	.word	0x20000571
 8002eb0:	0800c698 	.word	0x0800c698
 8002eb4:	0800c6ac 	.word	0x0800c6ac
 8002eb8:	0800c6b8 	.word	0x0800c6b8
 8002ebc:	0800c6cc 	.word	0x0800c6cc

08002ec0 <Relay_Init>:
    { Relay2_GPIO_Port, Relay2_Pin },
    { Relay3_GPIO_Port, Relay3_Pin }
};

void Relay_Init(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec6:	1d3b      	adds	r3, r7, #4
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	605a      	str	r2, [r3, #4]
 8002ece:	609a      	str	r2, [r3, #8]
 8002ed0:	60da      	str	r2, [r3, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ed2:	4b1e      	ldr	r3, [pc, #120]	@ (8002f4c <Relay_Init+0x8c>)
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	4a1d      	ldr	r2, [pc, #116]	@ (8002f4c <Relay_Init+0x8c>)
 8002ed8:	f043 0308 	orr.w	r3, r3, #8
 8002edc:	6193      	str	r3, [r2, #24]
 8002ede:	4b1b      	ldr	r3, [pc, #108]	@ (8002f4c <Relay_Init+0x8c>)
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	f003 0308 	and.w	r3, r3, #8
 8002ee6:	603b      	str	r3, [r7, #0]
 8002ee8:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8002eea:	2301      	movs	r3, #1
 8002eec:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	613b      	str	r3, [r7, #16]

    for (int i = 0; i < NUM_RELAYS; i++) {
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	617b      	str	r3, [r7, #20]
 8002efa:	e01e      	b.n	8002f3a <Relay_Init+0x7a>
        GPIO_InitStruct.Pin = relays[i].pin;
 8002efc:	4a14      	ldr	r2, [pc, #80]	@ (8002f50 <Relay_Init+0x90>)
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	4413      	add	r3, r2
 8002f04:	889b      	ldrh	r3, [r3, #4]
 8002f06:	607b      	str	r3, [r7, #4]
        HAL_GPIO_Init(relays[i].port, &GPIO_InitStruct);
 8002f08:	4a11      	ldr	r2, [pc, #68]	@ (8002f50 <Relay_Init+0x90>)
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002f10:	1d3a      	adds	r2, r7, #4
 8002f12:	4611      	mov	r1, r2
 8002f14:	4618      	mov	r0, r3
 8002f16:	f002 feb9 	bl	8005c8c <HAL_GPIO_Init>
        // Ensure relays are off initially
        HAL_GPIO_WritePin(relays[i].port, relays[i].pin,
 8002f1a:	4a0d      	ldr	r2, [pc, #52]	@ (8002f50 <Relay_Init+0x90>)
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002f22:	4a0b      	ldr	r2, [pc, #44]	@ (8002f50 <Relay_Init+0x90>)
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	4413      	add	r3, r2
 8002f2a:	889b      	ldrh	r3, [r3, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	4619      	mov	r1, r3
 8002f30:	f003 f847 	bl	8005fc2 <HAL_GPIO_WritePin>
    for (int i = 0; i < NUM_RELAYS; i++) {
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	3301      	adds	r3, #1
 8002f38:	617b      	str	r3, [r7, #20]
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	dddd      	ble.n	8002efc <Relay_Init+0x3c>
                          (RELAY_ACTIVE_STATE == GPIO_PIN_SET) ? GPIO_PIN_RESET : GPIO_PIN_SET);
    }
}
 8002f40:	bf00      	nop
 8002f42:	bf00      	nop
 8002f44:	3718      	adds	r7, #24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	0800ca10 	.word	0x0800ca10

08002f54 <Relay_Set>:

void Relay_Set(uint8_t relay_no, bool on)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	460a      	mov	r2, r1
 8002f5e:	71fb      	strb	r3, [r7, #7]
 8002f60:	4613      	mov	r3, r2
 8002f62:	71bb      	strb	r3, [r7, #6]
    if (relay_no == 0 || relay_no > NUM_RELAYS) return;
 8002f64:	79fb      	ldrb	r3, [r7, #7]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d012      	beq.n	8002f90 <Relay_Set+0x3c>
 8002f6a:	79fb      	ldrb	r3, [r7, #7]
 8002f6c:	2b03      	cmp	r3, #3
 8002f6e:	d80f      	bhi.n	8002f90 <Relay_Set+0x3c>

    HAL_GPIO_WritePin(relays[relay_no - 1].port,
 8002f70:	79fb      	ldrb	r3, [r7, #7]
 8002f72:	3b01      	subs	r3, #1
 8002f74:	4a08      	ldr	r2, [pc, #32]	@ (8002f98 <Relay_Set+0x44>)
 8002f76:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
                      relays[relay_no - 1].pin,
 8002f7a:	79fb      	ldrb	r3, [r7, #7]
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	4a06      	ldr	r2, [pc, #24]	@ (8002f98 <Relay_Set+0x44>)
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	4413      	add	r3, r2
 8002f84:	889b      	ldrh	r3, [r3, #4]
    HAL_GPIO_WritePin(relays[relay_no - 1].port,
 8002f86:	79ba      	ldrb	r2, [r7, #6]
 8002f88:	4619      	mov	r1, r3
 8002f8a:	f003 f81a 	bl	8005fc2 <HAL_GPIO_WritePin>
 8002f8e:	e000      	b.n	8002f92 <Relay_Set+0x3e>
    if (relay_no == 0 || relay_no > NUM_RELAYS) return;
 8002f90:	bf00      	nop
                      on ? RELAY_ACTIVE_STATE :
                           (RELAY_ACTIVE_STATE == GPIO_PIN_SET ? GPIO_PIN_RESET : GPIO_PIN_SET));
}
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	0800ca10 	.word	0x0800ca10

08002f9c <rf_delay_us>:
#include "stm32f1xx_hal.h"   // or stm32f0xx_hal.h depending on your MCU

extern TIM_HandleTypeDef htim3;  // Timer3 must be initialized in main.c

// --- private microsecond delay using TIM3 ---
static void rf_delay_us(uint32_t us) {
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COUNTER(&htim3, 0);
 8002fa4:	4b08      	ldr	r3, [pc, #32]	@ (8002fc8 <rf_delay_us+0x2c>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(&htim3) < us);
 8002fac:	bf00      	nop
 8002fae:	4b06      	ldr	r3, [pc, #24]	@ (8002fc8 <rf_delay_us+0x2c>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d8f9      	bhi.n	8002fae <rf_delay_us+0x12>
}
 8002fba:	bf00      	nop
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bc80      	pop	{r7}
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	20000410 	.word	0x20000410

08002fcc <RF_Init>:

// --- init RF pin (set low) ---
void RF_Init(void) {
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RF_DATA_GPIO_Port, RF_DATA_Pin, GPIO_PIN_RESET);
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	2180      	movs	r1, #128	@ 0x80
 8002fd4:	4802      	ldr	r0, [pc, #8]	@ (8002fe0 <RF_Init+0x14>)
 8002fd6:	f002 fff4 	bl	8005fc2 <HAL_GPIO_WritePin>
}
 8002fda:	bf00      	nop
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	40010c00 	.word	0x40010c00

08002fe4 <send_high_low>:

// --- helper: high + low pulse ---
static void send_high_low(uint32_t high_us, uint32_t low_us) {
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(RF_DATA_GPIO_Port, RF_DATA_Pin, GPIO_PIN_SET);
 8002fee:	2201      	movs	r2, #1
 8002ff0:	2180      	movs	r1, #128	@ 0x80
 8002ff2:	4809      	ldr	r0, [pc, #36]	@ (8003018 <send_high_low+0x34>)
 8002ff4:	f002 ffe5 	bl	8005fc2 <HAL_GPIO_WritePin>
    rf_delay_us(high_us);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f7ff ffcf 	bl	8002f9c <rf_delay_us>
    HAL_GPIO_WritePin(RF_DATA_GPIO_Port, RF_DATA_Pin, GPIO_PIN_RESET);
 8002ffe:	2200      	movs	r2, #0
 8003000:	2180      	movs	r1, #128	@ 0x80
 8003002:	4805      	ldr	r0, [pc, #20]	@ (8003018 <send_high_low+0x34>)
 8003004:	f002 ffdd 	bl	8005fc2 <HAL_GPIO_WritePin>
    rf_delay_us(low_us);
 8003008:	6838      	ldr	r0, [r7, #0]
 800300a:	f7ff ffc7 	bl	8002f9c <rf_delay_us>
}
 800300e:	bf00      	nop
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	40010c00 	.word	0x40010c00

0800301c <send_bit>:

// --- send one bit (protocol encoding) ---
static void send_bit(uint8_t bit) {
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	4603      	mov	r3, r0
 8003024:	71fb      	strb	r3, [r7, #7]
    if (bit) {
 8003026:	79fb      	ldrb	r3, [r7, #7]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d006      	beq.n	800303a <send_bit+0x1e>
        // logical 1 = short HIGH, long LOW
        send_high_low(300, 900);
 800302c:	f44f 7161 	mov.w	r1, #900	@ 0x384
 8003030:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8003034:	f7ff ffd6 	bl	8002fe4 <send_high_low>
    } else {
        // logical 0 = long HIGH, short LOW
        send_high_low(900, 300);
    }
}
 8003038:	e005      	b.n	8003046 <send_bit+0x2a>
        send_high_low(900, 300);
 800303a:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800303e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8003042:	f7ff ffcf 	bl	8002fe4 <send_high_low>
}
 8003046:	bf00      	nop
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <RF_SendCode>:

// --- send full RF code (repeated for reliability) ---
void RF_SendCode(uint32_t code, uint8_t bits) {
 800304e:	b580      	push	{r7, lr}
 8003050:	b084      	sub	sp, #16
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
 8003056:	460b      	mov	r3, r1
 8003058:	70fb      	strb	r3, [r7, #3]
    for (int repeat = 0; repeat < 4; repeat++) {
 800305a:	2300      	movs	r3, #0
 800305c:	60fb      	str	r3, [r7, #12]
 800305e:	e031      	b.n	80030c4 <RF_SendCode+0x76>
        // Sync pulse
        send_high_low(275, 9900);
 8003060:	f242 61ac 	movw	r1, #9900	@ 0x26ac
 8003064:	f240 1013 	movw	r0, #275	@ 0x113
 8003068:	f7ff ffbc 	bl	8002fe4 <send_high_low>
        rf_delay_us(1000);
 800306c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003070:	f7ff ff94 	bl	8002f9c <rf_delay_us>

        // Send data bits MSB → LSB
        for (int8_t i = bits - 1; i >= 0; i--) {
 8003074:	78fb      	ldrb	r3, [r7, #3]
 8003076:	3b01      	subs	r3, #1
 8003078:	b2db      	uxtb	r3, r3
 800307a:	72fb      	strb	r3, [r7, #11]
 800307c:	e011      	b.n	80030a2 <RF_SendCode+0x54>
            send_bit((code >> i) & 1);
 800307e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	fa22 f303 	lsr.w	r3, r2, r3
 8003088:	b2db      	uxtb	r3, r3
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	b2db      	uxtb	r3, r3
 8003090:	4618      	mov	r0, r3
 8003092:	f7ff ffc3 	bl	800301c <send_bit>
        for (int8_t i = bits - 1; i >= 0; i--) {
 8003096:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800309a:	b2db      	uxtb	r3, r3
 800309c:	3b01      	subs	r3, #1
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	72fb      	strb	r3, [r7, #11]
 80030a2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	dae9      	bge.n	800307e <RF_SendCode+0x30>
        }

        // End marker
        send_high_low(300, 900);
 80030aa:	f44f 7161 	mov.w	r1, #900	@ 0x384
 80030ae:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80030b2:	f7ff ff97 	bl	8002fe4 <send_high_low>

        // Gap before repeat
        rf_delay_us(10000);
 80030b6:	f242 7010 	movw	r0, #10000	@ 0x2710
 80030ba:	f7ff ff6f 	bl	8002f9c <rf_delay_us>
    for (int repeat = 0; repeat < 4; repeat++) {
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	3301      	adds	r3, #1
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2b03      	cmp	r3, #3
 80030c8:	ddca      	ble.n	8003060 <RF_SendCode+0x12>
    }
}
 80030ca:	bf00      	nop
 80030cc:	bf00      	nop
 80030ce:	3710      	adds	r7, #16
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <bcd2dec>:
/* Selected I2C address (HAL 8-bit) after probe */
static uint16_t s_rtc_addr = 0;

/* ---------- helpers ---------- */
static uint8_t dec2bcd(uint8_t v) { return (uint8_t)(((v / 10) << 4) | (v % 10)); }
static uint8_t bcd2dec(uint8_t v) { return (uint8_t)(((v >> 4) * 10) + (v & 0x0F)); }
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	4603      	mov	r3, r0
 80030dc:	71fb      	strb	r3, [r7, #7]
 80030de:	79fb      	ldrb	r3, [r7, #7]
 80030e0:	091b      	lsrs	r3, r3, #4
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	461a      	mov	r2, r3
 80030e6:	0092      	lsls	r2, r2, #2
 80030e8:	4413      	add	r3, r2
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	79fb      	ldrb	r3, [r7, #7]
 80030f0:	f003 030f 	and.w	r3, r3, #15
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	4413      	add	r3, r2
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	4618      	mov	r0, r3
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	bc80      	pop	{r7}
 8003102:	4770      	bx	lr

08003104 <RTC_Init>:
    return (w == 0) ? 7 : w;          /* 7=Sunday */
}

/* ---------- probe + init ---------- */
void RTC_Init(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af04      	add	r7, sp, #16
    /* Probe 0x68 first, then 0x57 */
    if (HAL_I2C_IsDeviceReady(&hi2c2, DS3231_ADDR_68, 2, 50) == HAL_OK) {
 800310a:	2332      	movs	r3, #50	@ 0x32
 800310c:	2202      	movs	r2, #2
 800310e:	21d0      	movs	r1, #208	@ 0xd0
 8003110:	4822      	ldr	r0, [pc, #136]	@ (800319c <RTC_Init+0x98>)
 8003112:	f003 fd37 	bl	8006b84 <HAL_I2C_IsDeviceReady>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d103      	bne.n	8003124 <RTC_Init+0x20>
        s_rtc_addr = DS3231_ADDR_68;
 800311c:	4b20      	ldr	r3, [pc, #128]	@ (80031a0 <RTC_Init+0x9c>)
 800311e:	22d0      	movs	r2, #208	@ 0xd0
 8003120:	801a      	strh	r2, [r3, #0]
 8003122:	e010      	b.n	8003146 <RTC_Init+0x42>
    } else if (HAL_I2C_IsDeviceReady(&hi2c2, DS3231_ADDR_57, 2, 50) == HAL_OK) {
 8003124:	2332      	movs	r3, #50	@ 0x32
 8003126:	2202      	movs	r2, #2
 8003128:	21ae      	movs	r1, #174	@ 0xae
 800312a:	481c      	ldr	r0, [pc, #112]	@ (800319c <RTC_Init+0x98>)
 800312c:	f003 fd2a 	bl	8006b84 <HAL_I2C_IsDeviceReady>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d103      	bne.n	800313e <RTC_Init+0x3a>
        s_rtc_addr = DS3231_ADDR_57;
 8003136:	4b1a      	ldr	r3, [pc, #104]	@ (80031a0 <RTC_Init+0x9c>)
 8003138:	22ae      	movs	r2, #174	@ 0xae
 800313a:	801a      	strh	r2, [r3, #0]
 800313c:	e003      	b.n	8003146 <RTC_Init+0x42>
    } else {
        s_rtc_addr = 0; /* not found */
 800313e:	4b18      	ldr	r3, [pc, #96]	@ (80031a0 <RTC_Init+0x9c>)
 8003140:	2200      	movs	r2, #0
 8003142:	801a      	strh	r2, [r3, #0]
 8003144:	e027      	b.n	8003196 <RTC_Init+0x92>
        return;
    }

    /* Clear CH (clock halt) bit if set (seconds @ reg 0x00, bit7) */
    uint8_t sec;
    if (HAL_I2C_Mem_Read(&hi2c2, s_rtc_addr, 0x00, 1, &sec, 1, HAL_MAX_DELAY) == HAL_OK) {
 8003146:	4b16      	ldr	r3, [pc, #88]	@ (80031a0 <RTC_Init+0x9c>)
 8003148:	8819      	ldrh	r1, [r3, #0]
 800314a:	f04f 33ff 	mov.w	r3, #4294967295
 800314e:	9302      	str	r3, [sp, #8]
 8003150:	2301      	movs	r3, #1
 8003152:	9301      	str	r3, [sp, #4]
 8003154:	1dfb      	adds	r3, r7, #7
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	2301      	movs	r3, #1
 800315a:	2200      	movs	r2, #0
 800315c:	480f      	ldr	r0, [pc, #60]	@ (800319c <RTC_Init+0x98>)
 800315e:	f003 fa9d 	bl	800669c <HAL_I2C_Mem_Read>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d116      	bne.n	8003196 <RTC_Init+0x92>
        if (sec & 0x80u) {
 8003168:	79fb      	ldrb	r3, [r7, #7]
 800316a:	b25b      	sxtb	r3, r3
 800316c:	2b00      	cmp	r3, #0
 800316e:	da12      	bge.n	8003196 <RTC_Init+0x92>
            sec &= 0x7Fu;
 8003170:	79fb      	ldrb	r3, [r7, #7]
 8003172:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003176:	b2db      	uxtb	r3, r3
 8003178:	71fb      	strb	r3, [r7, #7]
            (void)HAL_I2C_Mem_Write(&hi2c2, s_rtc_addr, 0x00, 1, &sec, 1, HAL_MAX_DELAY);
 800317a:	4b09      	ldr	r3, [pc, #36]	@ (80031a0 <RTC_Init+0x9c>)
 800317c:	8819      	ldrh	r1, [r3, #0]
 800317e:	f04f 33ff 	mov.w	r3, #4294967295
 8003182:	9302      	str	r3, [sp, #8]
 8003184:	2301      	movs	r3, #1
 8003186:	9301      	str	r3, [sp, #4]
 8003188:	1dfb      	adds	r3, r7, #7
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	2301      	movs	r3, #1
 800318e:	2200      	movs	r2, #0
 8003190:	4802      	ldr	r0, [pc, #8]	@ (800319c <RTC_Init+0x98>)
 8003192:	f003 f989 	bl	80064a8 <HAL_I2C_Mem_Write>
        }
    }
}
 8003196:	3708      	adds	r7, #8
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	20000350 	.word	0x20000350
 80031a0:	200005dc 	.word	0x200005dc

080031a4 <RTC_GetTimeDate>:
    RTC_SetTimeDate(sec, min, hour, dow, dom, month, year);
}

/* ---------- read time/date ---------- */
void RTC_GetTimeDate(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b088      	sub	sp, #32
 80031a8:	af04      	add	r7, sp, #16
    if (!s_rtc_addr) return;
 80031aa:	4b4a      	ldr	r3, [pc, #296]	@ (80032d4 <RTC_GetTimeDate+0x130>)
 80031ac:	881b      	ldrh	r3, [r3, #0]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f000 8089 	beq.w	80032c6 <RTC_GetTimeDate+0x122>

    uint8_t r[7];
    if (HAL_I2C_Mem_Read(&hi2c2, s_rtc_addr, 0x00, 1, r, 7, HAL_MAX_DELAY) != HAL_OK) {
 80031b4:	4b47      	ldr	r3, [pc, #284]	@ (80032d4 <RTC_GetTimeDate+0x130>)
 80031b6:	8819      	ldrh	r1, [r3, #0]
 80031b8:	f04f 33ff 	mov.w	r3, #4294967295
 80031bc:	9302      	str	r3, [sp, #8]
 80031be:	2307      	movs	r3, #7
 80031c0:	9301      	str	r3, [sp, #4]
 80031c2:	1d3b      	adds	r3, r7, #4
 80031c4:	9300      	str	r3, [sp, #0]
 80031c6:	2301      	movs	r3, #1
 80031c8:	2200      	movs	r2, #0
 80031ca:	4843      	ldr	r0, [pc, #268]	@ (80032d8 <RTC_GetTimeDate+0x134>)
 80031cc:	f003 fa66 	bl	800669c <HAL_I2C_Mem_Read>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d179      	bne.n	80032ca <RTC_GetTimeDate+0x126>
        return;
    }

    /* Seconds / Minutes */
    time.seconds = bcd2dec(r[0] & 0x7Fu);
 80031d6:	793b      	ldrb	r3, [r7, #4]
 80031d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	4618      	mov	r0, r3
 80031e0:	f7ff ff78 	bl	80030d4 <bcd2dec>
 80031e4:	4603      	mov	r3, r0
 80031e6:	461a      	mov	r2, r3
 80031e8:	4b3c      	ldr	r3, [pc, #240]	@ (80032dc <RTC_GetTimeDate+0x138>)
 80031ea:	701a      	strb	r2, [r3, #0]
    time.minutes = bcd2dec(r[1] & 0x7Fu);
 80031ec:	797b      	ldrb	r3, [r7, #5]
 80031ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff ff6d 	bl	80030d4 <bcd2dec>
 80031fa:	4603      	mov	r3, r0
 80031fc:	461a      	mov	r2, r3
 80031fe:	4b37      	ldr	r3, [pc, #220]	@ (80032dc <RTC_GetTimeDate+0x138>)
 8003200:	705a      	strb	r2, [r3, #1]

    /* Hours: handle 12h or 24h formats robustly */
    if (r[2] & 0x40u) {
 8003202:	79bb      	ldrb	r3, [r7, #6]
 8003204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003208:	2b00      	cmp	r3, #0
 800320a:	d025      	beq.n	8003258 <RTC_GetTimeDate+0xb4>
        /* 12-hour mode: bit5 = AM/PM (1=PM), bits4..0 = 1..12 */
        uint8_t hr12 = bcd2dec(r[2] & 0x1Fu);
 800320c:	79bb      	ldrb	r3, [r7, #6]
 800320e:	f003 031f 	and.w	r3, r3, #31
 8003212:	b2db      	uxtb	r3, r3
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff ff5d 	bl	80030d4 <bcd2dec>
 800321a:	4603      	mov	r3, r0
 800321c:	73fb      	strb	r3, [r7, #15]
        uint8_t pm   = (r[2] & 0x20u) ? 1u : 0u;
 800321e:	79bb      	ldrb	r3, [r7, #6]
 8003220:	095b      	lsrs	r3, r3, #5
 8003222:	b2db      	uxtb	r3, r3
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	73bb      	strb	r3, [r7, #14]
        if (hr12 == 12) {
 800322a:	7bfb      	ldrb	r3, [r7, #15]
 800322c:	2b0c      	cmp	r3, #12
 800322e:	d108      	bne.n	8003242 <RTC_GetTimeDate+0x9e>
            time.hour = pm ? 12 : 0;      /* 12AM -> 0, 12PM -> 12 */
 8003230:	7bbb      	ldrb	r3, [r7, #14]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <RTC_GetTimeDate+0x96>
 8003236:	220c      	movs	r2, #12
 8003238:	e000      	b.n	800323c <RTC_GetTimeDate+0x98>
 800323a:	2200      	movs	r2, #0
 800323c:	4b27      	ldr	r3, [pc, #156]	@ (80032dc <RTC_GetTimeDate+0x138>)
 800323e:	709a      	strb	r2, [r3, #2]
 8003240:	e015      	b.n	800326e <RTC_GetTimeDate+0xca>
        } else {
            time.hour = pm ? (hr12 + 12) : hr12;
 8003242:	7bbb      	ldrb	r3, [r7, #14]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d003      	beq.n	8003250 <RTC_GetTimeDate+0xac>
 8003248:	7bfb      	ldrb	r3, [r7, #15]
 800324a:	330c      	adds	r3, #12
 800324c:	b2db      	uxtb	r3, r3
 800324e:	e000      	b.n	8003252 <RTC_GetTimeDate+0xae>
 8003250:	7bfb      	ldrb	r3, [r7, #15]
 8003252:	4a22      	ldr	r2, [pc, #136]	@ (80032dc <RTC_GetTimeDate+0x138>)
 8003254:	7093      	strb	r3, [r2, #2]
 8003256:	e00a      	b.n	800326e <RTC_GetTimeDate+0xca>
        }
    } else {
        /* 24-hour mode: bits5..0 are BCD hour */
        time.hour = bcd2dec(r[2] & 0x3Fu);
 8003258:	79bb      	ldrb	r3, [r7, #6]
 800325a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800325e:	b2db      	uxtb	r3, r3
 8003260:	4618      	mov	r0, r3
 8003262:	f7ff ff37 	bl	80030d4 <bcd2dec>
 8003266:	4603      	mov	r3, r0
 8003268:	461a      	mov	r2, r3
 800326a:	4b1c      	ldr	r3, [pc, #112]	@ (80032dc <RTC_GetTimeDate+0x138>)
 800326c:	709a      	strb	r2, [r3, #2]
    }

    /* DOW / Date / Month / Year */
    time.dayofweek  = bcd2dec(r[3] & 0x07u);              /* 1..7 */
 800326e:	79fb      	ldrb	r3, [r7, #7]
 8003270:	f003 0307 	and.w	r3, r3, #7
 8003274:	b2db      	uxtb	r3, r3
 8003276:	4618      	mov	r0, r3
 8003278:	f7ff ff2c 	bl	80030d4 <bcd2dec>
 800327c:	4603      	mov	r3, r0
 800327e:	461a      	mov	r2, r3
 8003280:	4b16      	ldr	r3, [pc, #88]	@ (80032dc <RTC_GetTimeDate+0x138>)
 8003282:	70da      	strb	r2, [r3, #3]
    time.dayofmonth = bcd2dec(r[4] & 0x3Fu);              /* 1..31 */
 8003284:	7a3b      	ldrb	r3, [r7, #8]
 8003286:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800328a:	b2db      	uxtb	r3, r3
 800328c:	4618      	mov	r0, r3
 800328e:	f7ff ff21 	bl	80030d4 <bcd2dec>
 8003292:	4603      	mov	r3, r0
 8003294:	461a      	mov	r2, r3
 8003296:	4b11      	ldr	r3, [pc, #68]	@ (80032dc <RTC_GetTimeDate+0x138>)
 8003298:	711a      	strb	r2, [r3, #4]
    time.month      = bcd2dec(r[5] & 0x1Fu);              /* 1..12 (ignore century) */
 800329a:	7a7b      	ldrb	r3, [r7, #9]
 800329c:	f003 031f 	and.w	r3, r3, #31
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7ff ff16 	bl	80030d4 <bcd2dec>
 80032a8:	4603      	mov	r3, r0
 80032aa:	461a      	mov	r2, r3
 80032ac:	4b0b      	ldr	r3, [pc, #44]	@ (80032dc <RTC_GetTimeDate+0x138>)
 80032ae:	715a      	strb	r2, [r3, #5]
    time.year       = 2000u + bcd2dec(r[6]);              /* 2000..2099 */
 80032b0:	7abb      	ldrb	r3, [r7, #10]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7ff ff0e 	bl	80030d4 <bcd2dec>
 80032b8:	4603      	mov	r3, r0
 80032ba:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80032be:	b29a      	uxth	r2, r3
 80032c0:	4b06      	ldr	r3, [pc, #24]	@ (80032dc <RTC_GetTimeDate+0x138>)
 80032c2:	80da      	strh	r2, [r3, #6]
 80032c4:	e002      	b.n	80032cc <RTC_GetTimeDate+0x128>
    if (!s_rtc_addr) return;
 80032c6:	bf00      	nop
 80032c8:	e000      	b.n	80032cc <RTC_GetTimeDate+0x128>
        return;
 80032ca:	bf00      	nop
}
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	200005dc 	.word	0x200005dc
 80032d8:	20000350 	.word	0x20000350
 80032dc:	200005d4 	.word	0x200005d4

080032e0 <lcd_line>:
static uint16_t edit_twist_on_s = 5, edit_twist_off_s = 5;
static uint16_t edit_countdown_min = 5;
static uint16_t edit_countdown_rep = 1;   // NEW

/* ===== LCD Helpers ===== */
static inline void lcd_line(uint8_t row, const char* s) {
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b088      	sub	sp, #32
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	4603      	mov	r3, r0
 80032e8:	6039      	str	r1, [r7, #0]
 80032ea:	71fb      	strb	r3, [r7, #7]
    char ln[17];
    snprintf(ln, sizeof(ln), "%-16.16s", s);
 80032ec:	f107 000c 	add.w	r0, r7, #12
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	4a09      	ldr	r2, [pc, #36]	@ (8003318 <lcd_line+0x38>)
 80032f4:	2111      	movs	r1, #17
 80032f6:	f006 ffad 	bl	800a254 <sniprintf>
    lcd_put_cur(row, 0);
 80032fa:	79fb      	ldrb	r3, [r7, #7]
 80032fc:	2100      	movs	r1, #0
 80032fe:	4618      	mov	r0, r3
 8003300:	f7fe fc92 	bl	8001c28 <lcd_put_cur>
    lcd_send_string(ln);
 8003304:	f107 030c 	add.w	r3, r7, #12
 8003308:	4618      	mov	r0, r3
 800330a:	f7fe fcaf 	bl	8001c6c <lcd_send_string>
}
 800330e:	bf00      	nop
 8003310:	3720      	adds	r7, #32
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	0800c738 	.word	0x0800c738

0800331c <lcd_line0>:
static inline void lcd_line0(const char* s){ lcd_line(0,s); }
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	2000      	movs	r0, #0
 8003328:	f7ff ffda 	bl	80032e0 <lcd_line>
 800332c:	bf00      	nop
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <lcd_line1>:
static inline void lcd_line1(const char* s){ lcd_line(1,s); }
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6879      	ldr	r1, [r7, #4]
 800333e:	2001      	movs	r0, #1
 8003340:	f7ff ffce 	bl	80032e0 <lcd_line>
 8003344:	bf00      	nop
 8003346:	3708      	adds	r7, #8
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <refreshInactivityTimer>:

/* ===== Utilities ===== */
static void refreshInactivityTimer(void){ lastUserAction = HAL_GetTick(); }
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
 8003350:	f001 fd88 	bl	8004e64 <HAL_GetTick>
 8003354:	4603      	mov	r3, r0
 8003356:	4a02      	ldr	r2, [pc, #8]	@ (8003360 <refreshInactivityTimer+0x14>)
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	bf00      	nop
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	200005ec 	.word	0x200005ec

08003364 <goto_menu_top>:
static void goto_menu_top(void){ menu_idx = 0; menu_view_top = 0; }
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
 8003368:	4b04      	ldr	r3, [pc, #16]	@ (800337c <goto_menu_top+0x18>)
 800336a:	2200      	movs	r2, #0
 800336c:	601a      	str	r2, [r3, #0]
 800336e:	4b04      	ldr	r3, [pc, #16]	@ (8003380 <goto_menu_top+0x1c>)
 8003370:	2200      	movs	r2, #0
 8003372:	601a      	str	r2, [r3, #0]
 8003374:	bf00      	nop
 8003376:	46bd      	mov	sp, r7
 8003378:	bc80      	pop	{r7}
 800337a:	4770      	bx	lr
 800337c:	200005f4 	.word	0x200005f4
 8003380:	200005f8 	.word	0x200005f8

08003384 <format_menu_line>:

/* ===== Helper: format menu line ===== */
static void format_menu_line(char* buf, size_t bufsize, int idx, bool selected){
 8003384:	b580      	push	{r7, lr}
 8003386:	b08c      	sub	sp, #48	@ 0x30
 8003388:	af02      	add	r7, sp, #8
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
 8003390:	70fb      	strb	r3, [r7, #3]
    if (idx < (int)MAIN_MENU_COUNT && idx >= 0) {
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2b06      	cmp	r3, #6
 8003396:	dc20      	bgt.n	80033da <format_menu_line+0x56>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	db1d      	blt.n	80033da <format_menu_line+0x56>
        char prefix = selected ? '>' : ' ';
 800339e:	78fb      	ldrb	r3, [r7, #3]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <format_menu_line+0x24>
 80033a4:	233e      	movs	r3, #62	@ 0x3e
 80033a6:	e000      	b.n	80033aa <format_menu_line+0x26>
 80033a8:	2320      	movs	r3, #32
 80033aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        char item[16];
        snprintf(item, sizeof(item), "%-15.15s", main_menu[idx]);
 80033ae:	4a10      	ldr	r2, [pc, #64]	@ (80033f0 <format_menu_line+0x6c>)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033b6:	f107 0014 	add.w	r0, r7, #20
 80033ba:	4a0e      	ldr	r2, [pc, #56]	@ (80033f4 <format_menu_line+0x70>)
 80033bc:	2110      	movs	r1, #16
 80033be:	f006 ff49 	bl	800a254 <sniprintf>
        snprintf(buf, bufsize, "%c%s", prefix, item);
 80033c2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80033c6:	f107 0314 	add.w	r3, r7, #20
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	4613      	mov	r3, r2
 80033ce:	4a0a      	ldr	r2, [pc, #40]	@ (80033f8 <format_menu_line+0x74>)
 80033d0:	68b9      	ldr	r1, [r7, #8]
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f006 ff3e 	bl	800a254 <sniprintf>
    if (idx < (int)MAIN_MENU_COUNT && idx >= 0) {
 80033d8:	e005      	b.n	80033e6 <format_menu_line+0x62>
    } else {
        snprintf(buf, bufsize, "                ");
 80033da:	4a08      	ldr	r2, [pc, #32]	@ (80033fc <format_menu_line+0x78>)
 80033dc:	68b9      	ldr	r1, [r7, #8]
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f006 ff38 	bl	800a254 <sniprintf>
    }
}
 80033e4:	bf00      	nop
 80033e6:	bf00      	nop
 80033e8:	3728      	adds	r7, #40	@ 0x28
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	2000002c 	.word	0x2000002c
 80033f4:	0800c744 	.word	0x0800c744
 80033f8:	0800c750 	.word	0x0800c750
 80033fc:	0800c758 	.word	0x0800c758

08003400 <show_welcome>:

/* ===== Render functions ===== */
static void show_welcome(void){
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
    lcd_clear();
 8003404:	f7fe fc03 	bl	8001c0e <lcd_clear>
    lcd_line0("  Welcome to ");
 8003408:	4803      	ldr	r0, [pc, #12]	@ (8003418 <show_welcome+0x18>)
 800340a:	f7ff ff87 	bl	800331c <lcd_line0>
    lcd_line1("   HELONIX   ");
 800340e:	4803      	ldr	r0, [pc, #12]	@ (800341c <show_welcome+0x1c>)
 8003410:	f7ff ff90 	bl	8003334 <lcd_line1>
}
 8003414:	bf00      	nop
 8003416:	bd80      	pop	{r7, pc}
 8003418:	0800c76c 	.word	0x0800c76c
 800341c:	0800c77c 	.word	0x0800c77c

08003420 <show_dash>:

static void show_dash(void) {
 8003420:	b580      	push	{r7, lr}
 8003422:	b092      	sub	sp, #72	@ 0x48
 8003424:	af02      	add	r7, sp, #8
    char line0[17], line1[17];
    const char *motor = Motor_GetStatus() ? "ON " : "OFF";
 8003426:	f7ff fce7 	bl	8002df8 <Motor_GetStatus>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d001      	beq.n	8003434 <show_dash+0x14>
 8003430:	4b44      	ldr	r3, [pc, #272]	@ (8003544 <show_dash+0x124>)
 8003432:	e000      	b.n	8003436 <show_dash+0x16>
 8003434:	4b44      	ldr	r3, [pc, #272]	@ (8003548 <show_dash+0x128>)
 8003436:	62fb      	str	r3, [r7, #44]	@ 0x2c

    const char *mode = "IDLE";
 8003438:	4b44      	ldr	r3, [pc, #272]	@ (800354c <show_dash+0x12c>)
 800343a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (manualActive)        mode = "Manual";
 800343c:	4b44      	ldr	r3, [pc, #272]	@ (8003550 <show_dash+0x130>)
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d002      	beq.n	800344c <show_dash+0x2c>
 8003446:	4b43      	ldr	r3, [pc, #268]	@ (8003554 <show_dash+0x134>)
 8003448:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800344a:	e026      	b.n	800349a <show_dash+0x7a>
    else if (semiAutoActive) mode = "SemiAuto";
 800344c:	4b42      	ldr	r3, [pc, #264]	@ (8003558 <show_dash+0x138>)
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d002      	beq.n	800345c <show_dash+0x3c>
 8003456:	4b41      	ldr	r3, [pc, #260]	@ (800355c <show_dash+0x13c>)
 8003458:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800345a:	e01e      	b.n	800349a <show_dash+0x7a>
    else if (timerActive)    mode = "Timer";
 800345c:	4b40      	ldr	r3, [pc, #256]	@ (8003560 <show_dash+0x140>)
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d002      	beq.n	800346c <show_dash+0x4c>
 8003466:	4b3f      	ldr	r3, [pc, #252]	@ (8003564 <show_dash+0x144>)
 8003468:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800346a:	e016      	b.n	800349a <show_dash+0x7a>
    else if (searchActive)   mode = "Search";
 800346c:	4b3e      	ldr	r3, [pc, #248]	@ (8003568 <show_dash+0x148>)
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d002      	beq.n	800347c <show_dash+0x5c>
 8003476:	4b3d      	ldr	r3, [pc, #244]	@ (800356c <show_dash+0x14c>)
 8003478:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800347a:	e00e      	b.n	800349a <show_dash+0x7a>
    else if (countdownActive)mode = "Cntdwn";
 800347c:	4b3c      	ldr	r3, [pc, #240]	@ (8003570 <show_dash+0x150>)
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d002      	beq.n	800348c <show_dash+0x6c>
 8003486:	4b3b      	ldr	r3, [pc, #236]	@ (8003574 <show_dash+0x154>)
 8003488:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800348a:	e006      	b.n	800349a <show_dash+0x7a>
    else if (twistActive)    mode = "Twist";
 800348c:	4b3a      	ldr	r3, [pc, #232]	@ (8003578 <show_dash+0x158>)
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <show_dash+0x7a>
 8003496:	4b39      	ldr	r3, [pc, #228]	@ (800357c <show_dash+0x15c>)
 8003498:	63fb      	str	r3, [r7, #60]	@ 0x3c

    snprintf(line0,sizeof(line0),"M:%s %s",motor,mode);
 800349a:	f107 0018 	add.w	r0, r7, #24
 800349e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034a4:	4a36      	ldr	r2, [pc, #216]	@ (8003580 <show_dash+0x160>)
 80034a6:	2111      	movs	r1, #17
 80034a8:	f006 fed4 	bl	800a254 <sniprintf>

    int submergedCount = 0;
 80034ac:	2300      	movs	r3, #0
 80034ae:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (int i=0; i<5; i++) {
 80034b0:	2300      	movs	r3, #0
 80034b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80034b4:	e012      	b.n	80034dc <show_dash+0xbc>
        if (adcData.voltages[i] < 0.1f) submergedCount++;
 80034b6:	4a33      	ldr	r2, [pc, #204]	@ (8003584 <show_dash+0x164>)
 80034b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034ba:	3302      	adds	r3, #2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	4413      	add	r3, r2
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	4931      	ldr	r1, [pc, #196]	@ (8003588 <show_dash+0x168>)
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7fd fd95 	bl	8000ff4 <__aeabi_fcmplt>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d002      	beq.n	80034d6 <show_dash+0xb6>
 80034d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034d2:	3301      	adds	r3, #1
 80034d4:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (int i=0; i<5; i++) {
 80034d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034d8:	3301      	adds	r3, #1
 80034da:	637b      	str	r3, [r7, #52]	@ 0x34
 80034dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034de:	2b04      	cmp	r3, #4
 80034e0:	dde9      	ble.n	80034b6 <show_dash+0x96>
    }

    const char *level;
    switch (submergedCount) {
 80034e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034e4:	2b03      	cmp	r3, #3
 80034e6:	d817      	bhi.n	8003518 <show_dash+0xf8>
 80034e8:	a201      	add	r2, pc, #4	@ (adr r2, 80034f0 <show_dash+0xd0>)
 80034ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ee:	bf00      	nop
 80034f0:	08003501 	.word	0x08003501
 80034f4:	08003507 	.word	0x08003507
 80034f8:	0800350d 	.word	0x0800350d
 80034fc:	08003513 	.word	0x08003513
        case 0:  level = "EMPTY"; break;
 8003500:	4b22      	ldr	r3, [pc, #136]	@ (800358c <show_dash+0x16c>)
 8003502:	633b      	str	r3, [r7, #48]	@ 0x30
 8003504:	e00b      	b.n	800351e <show_dash+0xfe>
        case 1:  level = "LOW";   break;
 8003506:	4b22      	ldr	r3, [pc, #136]	@ (8003590 <show_dash+0x170>)
 8003508:	633b      	str	r3, [r7, #48]	@ 0x30
 800350a:	e008      	b.n	800351e <show_dash+0xfe>
        case 2:  level = "HALF";  break;
 800350c:	4b21      	ldr	r3, [pc, #132]	@ (8003594 <show_dash+0x174>)
 800350e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003510:	e005      	b.n	800351e <show_dash+0xfe>
        case 3:  level = "3/4";   break;
 8003512:	4b21      	ldr	r3, [pc, #132]	@ (8003598 <show_dash+0x178>)
 8003514:	633b      	str	r3, [r7, #48]	@ 0x30
 8003516:	e002      	b.n	800351e <show_dash+0xfe>
        default: level = "FULL";  break;
 8003518:	4b20      	ldr	r3, [pc, #128]	@ (800359c <show_dash+0x17c>)
 800351a:	633b      	str	r3, [r7, #48]	@ 0x30
 800351c:	bf00      	nop
    }

    snprintf(line1,sizeof(line1),"Water:%-5s",level);
 800351e:	1d38      	adds	r0, r7, #4
 8003520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003522:	4a1f      	ldr	r2, [pc, #124]	@ (80035a0 <show_dash+0x180>)
 8003524:	2111      	movs	r1, #17
 8003526:	f006 fe95 	bl	800a254 <sniprintf>

    lcd_line0(line0);
 800352a:	f107 0318 	add.w	r3, r7, #24
 800352e:	4618      	mov	r0, r3
 8003530:	f7ff fef4 	bl	800331c <lcd_line0>
    lcd_line1(line1);
 8003534:	1d3b      	adds	r3, r7, #4
 8003536:	4618      	mov	r0, r3
 8003538:	f7ff fefc 	bl	8003334 <lcd_line1>
}
 800353c:	bf00      	nop
 800353e:	3740      	adds	r7, #64	@ 0x40
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	0800c78c 	.word	0x0800c78c
 8003548:	0800c790 	.word	0x0800c790
 800354c:	0800c794 	.word	0x0800c794
 8003550:	20000571 	.word	0x20000571
 8003554:	0800c79c 	.word	0x0800c79c
 8003558:	20000576 	.word	0x20000576
 800355c:	0800c7a4 	.word	0x0800c7a4
 8003560:	20000575 	.word	0x20000575
 8003564:	0800c7b0 	.word	0x0800c7b0
 8003568:	20000574 	.word	0x20000574
 800356c:	0800c7b8 	.word	0x0800c7b8
 8003570:	20000572 	.word	0x20000572
 8003574:	0800c7c0 	.word	0x0800c7c0
 8003578:	20000573 	.word	0x20000573
 800357c:	0800c7c8 	.word	0x0800c7c8
 8003580:	0800c7d0 	.word	0x0800c7d0
 8003584:	200004a0 	.word	0x200004a0
 8003588:	3dcccccd 	.word	0x3dcccccd
 800358c:	0800c7d8 	.word	0x0800c7d8
 8003590:	0800c7e0 	.word	0x0800c7e0
 8003594:	0800c7e4 	.word	0x0800c7e4
 8003598:	0800c7ec 	.word	0x0800c7ec
 800359c:	0800c7f0 	.word	0x0800c7f0
 80035a0:	0800c7f8 	.word	0x0800c7f8

080035a4 <show_menu>:

static void show_menu(void){
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b08a      	sub	sp, #40	@ 0x28
 80035a8:	af00      	add	r7, sp, #0
    char line0[17], line1[17];
    if (menu_idx < menu_view_top) menu_view_top = menu_idx;
 80035aa:	4b2a      	ldr	r3, [pc, #168]	@ (8003654 <show_menu+0xb0>)
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	4b2a      	ldr	r3, [pc, #168]	@ (8003658 <show_menu+0xb4>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	da04      	bge.n	80035c0 <show_menu+0x1c>
 80035b6:	4b27      	ldr	r3, [pc, #156]	@ (8003654 <show_menu+0xb0>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a27      	ldr	r2, [pc, #156]	@ (8003658 <show_menu+0xb4>)
 80035bc:	6013      	str	r3, [r2, #0]
 80035be:	e00b      	b.n	80035d8 <show_menu+0x34>
    else if (menu_idx > menu_view_top+1) menu_view_top = menu_idx-1;
 80035c0:	4b25      	ldr	r3, [pc, #148]	@ (8003658 <show_menu+0xb4>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	1c5a      	adds	r2, r3, #1
 80035c6:	4b23      	ldr	r3, [pc, #140]	@ (8003654 <show_menu+0xb0>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	da04      	bge.n	80035d8 <show_menu+0x34>
 80035ce:	4b21      	ldr	r3, [pc, #132]	@ (8003654 <show_menu+0xb0>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	3b01      	subs	r3, #1
 80035d4:	4a20      	ldr	r2, [pc, #128]	@ (8003658 <show_menu+0xb4>)
 80035d6:	6013      	str	r3, [r2, #0]
    format_menu_line(line0,sizeof(line0),menu_view_top,menu_idx==menu_view_top && cursorVisible);
 80035d8:	4b1f      	ldr	r3, [pc, #124]	@ (8003658 <show_menu+0xb4>)
 80035da:	6819      	ldr	r1, [r3, #0]
 80035dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003654 <show_menu+0xb0>)
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003658 <show_menu+0xb4>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d105      	bne.n	80035f4 <show_menu+0x50>
 80035e8:	4b1c      	ldr	r3, [pc, #112]	@ (800365c <show_menu+0xb8>)
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <show_menu+0x50>
 80035f0:	2301      	movs	r3, #1
 80035f2:	e000      	b.n	80035f6 <show_menu+0x52>
 80035f4:	2300      	movs	r3, #0
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	f107 0014 	add.w	r0, r7, #20
 8003600:	460a      	mov	r2, r1
 8003602:	2111      	movs	r1, #17
 8003604:	f7ff febe 	bl	8003384 <format_menu_line>
    format_menu_line(line1,sizeof(line1),menu_view_top+1,menu_idx==(menu_view_top+1) && cursorVisible);
 8003608:	4b13      	ldr	r3, [pc, #76]	@ (8003658 <show_menu+0xb4>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	1c59      	adds	r1, r3, #1
 800360e:	4b12      	ldr	r3, [pc, #72]	@ (8003658 <show_menu+0xb4>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	1c5a      	adds	r2, r3, #1
 8003614:	4b0f      	ldr	r3, [pc, #60]	@ (8003654 <show_menu+0xb0>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	429a      	cmp	r2, r3
 800361a:	d105      	bne.n	8003628 <show_menu+0x84>
 800361c:	4b0f      	ldr	r3, [pc, #60]	@ (800365c <show_menu+0xb8>)
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <show_menu+0x84>
 8003624:	2301      	movs	r3, #1
 8003626:	e000      	b.n	800362a <show_menu+0x86>
 8003628:	2300      	movs	r3, #0
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	b2db      	uxtb	r3, r3
 8003630:	4638      	mov	r0, r7
 8003632:	460a      	mov	r2, r1
 8003634:	2111      	movs	r1, #17
 8003636:	f7ff fea5 	bl	8003384 <format_menu_line>
    lcd_line0(line0);
 800363a:	f107 0314 	add.w	r3, r7, #20
 800363e:	4618      	mov	r0, r3
 8003640:	f7ff fe6c 	bl	800331c <lcd_line0>
    lcd_line1(line1);
 8003644:	463b      	mov	r3, r7
 8003646:	4618      	mov	r0, r3
 8003648:	f7ff fe74 	bl	8003334 <lcd_line1>
}
 800364c:	bf00      	nop
 800364e:	3728      	adds	r7, #40	@ 0x28
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	200005f4 	.word	0x200005f4
 8003658:	200005f8 	.word	0x200005f8
 800365c:	2000002b 	.word	0x2000002b

08003660 <show_manual>:

static void show_manual(void){
 8003660:	b580      	push	{r7, lr}
 8003662:	b08a      	sub	sp, #40	@ 0x28
 8003664:	af00      	add	r7, sp, #0
    char line0[17], line1[17];
    snprintf(line0,sizeof(line0),"Manual Mode");
 8003666:	f107 0314 	add.w	r3, r7, #20
 800366a:	4a12      	ldr	r2, [pc, #72]	@ (80036b4 <show_manual+0x54>)
 800366c:	2111      	movs	r1, #17
 800366e:	4618      	mov	r0, r3
 8003670:	f006 fdf0 	bl	800a254 <sniprintf>
    if (Motor_GetStatus()) snprintf(line1,sizeof(line1),">Stop     Back");
 8003674:	f7ff fbc0 	bl	8002df8 <Motor_GetStatus>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d006      	beq.n	800368c <show_manual+0x2c>
 800367e:	463b      	mov	r3, r7
 8003680:	4a0d      	ldr	r2, [pc, #52]	@ (80036b8 <show_manual+0x58>)
 8003682:	2111      	movs	r1, #17
 8003684:	4618      	mov	r0, r3
 8003686:	f006 fde5 	bl	800a254 <sniprintf>
 800368a:	e005      	b.n	8003698 <show_manual+0x38>
    else snprintf(line1,sizeof(line1),">Start    Back");
 800368c:	463b      	mov	r3, r7
 800368e:	4a0b      	ldr	r2, [pc, #44]	@ (80036bc <show_manual+0x5c>)
 8003690:	2111      	movs	r1, #17
 8003692:	4618      	mov	r0, r3
 8003694:	f006 fdde 	bl	800a254 <sniprintf>
    lcd_line0(line0);
 8003698:	f107 0314 	add.w	r3, r7, #20
 800369c:	4618      	mov	r0, r3
 800369e:	f7ff fe3d 	bl	800331c <lcd_line0>
    lcd_line1(line1);
 80036a2:	463b      	mov	r3, r7
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7ff fe45 	bl	8003334 <lcd_line1>
}
 80036aa:	bf00      	nop
 80036ac:	3728      	adds	r7, #40	@ 0x28
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	0800c6dc 	.word	0x0800c6dc
 80036b8:	0800c804 	.word	0x0800c804
 80036bc:	0800c814 	.word	0x0800c814

080036c0 <show_semi_auto>:

static void show_semi_auto(void){
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b08a      	sub	sp, #40	@ 0x28
 80036c4:	af00      	add	r7, sp, #0
    char line0[17], line1[17];
    snprintf(line0,sizeof(line0),"Semi-Auto Mode");
 80036c6:	f107 0314 	add.w	r3, r7, #20
 80036ca:	4a11      	ldr	r2, [pc, #68]	@ (8003710 <show_semi_auto+0x50>)
 80036cc:	2111      	movs	r1, #17
 80036ce:	4618      	mov	r0, r3
 80036d0:	f006 fdc0 	bl	800a254 <sniprintf>
    if (semiAutoEnabled) snprintf(line1,sizeof(line1),">Disable  Back");
 80036d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003714 <show_semi_auto+0x54>)
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d006      	beq.n	80036ea <show_semi_auto+0x2a>
 80036dc:	463b      	mov	r3, r7
 80036de:	4a0e      	ldr	r2, [pc, #56]	@ (8003718 <show_semi_auto+0x58>)
 80036e0:	2111      	movs	r1, #17
 80036e2:	4618      	mov	r0, r3
 80036e4:	f006 fdb6 	bl	800a254 <sniprintf>
 80036e8:	e005      	b.n	80036f6 <show_semi_auto+0x36>
    else snprintf(line1,sizeof(line1),">Enable   Back");
 80036ea:	463b      	mov	r3, r7
 80036ec:	4a0b      	ldr	r2, [pc, #44]	@ (800371c <show_semi_auto+0x5c>)
 80036ee:	2111      	movs	r1, #17
 80036f0:	4618      	mov	r0, r3
 80036f2:	f006 fdaf 	bl	800a254 <sniprintf>
    lcd_line0(line0);
 80036f6:	f107 0314 	add.w	r3, r7, #20
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7ff fe0e 	bl	800331c <lcd_line0>
    lcd_line1(line1);
 8003700:	463b      	mov	r3, r7
 8003702:	4618      	mov	r0, r3
 8003704:	f7ff fe16 	bl	8003334 <lcd_line1>
}
 8003708:	bf00      	nop
 800370a:	3728      	adds	r7, #40	@ 0x28
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	0800c6e8 	.word	0x0800c6e8
 8003714:	200005f0 	.word	0x200005f0
 8003718:	0800c824 	.word	0x0800c824
 800371c:	0800c834 	.word	0x0800c834

08003720 <show_timer>:

static void show_timer(void){
 8003720:	b580      	push	{r7, lr}
 8003722:	b08c      	sub	sp, #48	@ 0x30
 8003724:	af02      	add	r7, sp, #8
    char l0[17], l1[17];
    snprintf(l0,sizeof(l0),"T1 ON %02d:%02d",edit_timer_on_h,edit_timer_on_m);
 8003726:	4b13      	ldr	r3, [pc, #76]	@ (8003774 <show_timer+0x54>)
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	461a      	mov	r2, r3
 800372c:	4b12      	ldr	r3, [pc, #72]	@ (8003778 <show_timer+0x58>)
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	f107 0014 	add.w	r0, r7, #20
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	4613      	mov	r3, r2
 8003738:	4a10      	ldr	r2, [pc, #64]	@ (800377c <show_timer+0x5c>)
 800373a:	2111      	movs	r1, #17
 800373c:	f006 fd8a 	bl	800a254 <sniprintf>
    snprintf(l1,sizeof(l1),"T1 OFF %02d:%02d",edit_timer_off_h,edit_timer_off_m);
 8003740:	4b0f      	ldr	r3, [pc, #60]	@ (8003780 <show_timer+0x60>)
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	461a      	mov	r2, r3
 8003746:	4b0f      	ldr	r3, [pc, #60]	@ (8003784 <show_timer+0x64>)
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	4638      	mov	r0, r7
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	4613      	mov	r3, r2
 8003750:	4a0d      	ldr	r2, [pc, #52]	@ (8003788 <show_timer+0x68>)
 8003752:	2111      	movs	r1, #17
 8003754:	f006 fd7e 	bl	800a254 <sniprintf>
    lcd_line0(l0);
 8003758:	f107 0314 	add.w	r3, r7, #20
 800375c:	4618      	mov	r0, r3
 800375e:	f7ff fddd 	bl	800331c <lcd_line0>
    lcd_line1(l1);
 8003762:	463b      	mov	r3, r7
 8003764:	4618      	mov	r0, r3
 8003766:	f7ff fde5 	bl	8003334 <lcd_line1>
}
 800376a:	bf00      	nop
 800376c:	3728      	adds	r7, #40	@ 0x28
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	20000048 	.word	0x20000048
 8003778:	20000049 	.word	0x20000049
 800377c:	0800c844 	.word	0x0800c844
 8003780:	2000004a 	.word	0x2000004a
 8003784:	2000004b 	.word	0x2000004b
 8003788:	0800c854 	.word	0x0800c854

0800378c <show_search>:

static void show_search(void){
 800378c:	b580      	push	{r7, lr}
 800378e:	b08c      	sub	sp, #48	@ 0x30
 8003790:	af02      	add	r7, sp, #8
    char l0[17], l1[17];
    snprintf(l0,sizeof(l0),"Gap:%3ds Dry:%3ds",edit_search_gap_s,edit_search_dry_s);
 8003792:	4b10      	ldr	r3, [pc, #64]	@ (80037d4 <show_search+0x48>)
 8003794:	881b      	ldrh	r3, [r3, #0]
 8003796:	461a      	mov	r2, r3
 8003798:	4b0f      	ldr	r3, [pc, #60]	@ (80037d8 <show_search+0x4c>)
 800379a:	881b      	ldrh	r3, [r3, #0]
 800379c:	f107 0014 	add.w	r0, r7, #20
 80037a0:	9300      	str	r3, [sp, #0]
 80037a2:	4613      	mov	r3, r2
 80037a4:	4a0d      	ldr	r2, [pc, #52]	@ (80037dc <show_search+0x50>)
 80037a6:	2111      	movs	r1, #17
 80037a8:	f006 fd54 	bl	800a254 <sniprintf>
    snprintf(l1,sizeof(l1),">Edit     Back");
 80037ac:	463b      	mov	r3, r7
 80037ae:	4a0c      	ldr	r2, [pc, #48]	@ (80037e0 <show_search+0x54>)
 80037b0:	2111      	movs	r1, #17
 80037b2:	4618      	mov	r0, r3
 80037b4:	f006 fd4e 	bl	800a254 <sniprintf>
    lcd_line0(l0);
 80037b8:	f107 0314 	add.w	r3, r7, #20
 80037bc:	4618      	mov	r0, r3
 80037be:	f7ff fdad 	bl	800331c <lcd_line0>
    lcd_line1(l1);
 80037c2:	463b      	mov	r3, r7
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff fdb5 	bl	8003334 <lcd_line1>
}
 80037ca:	bf00      	nop
 80037cc:	3728      	adds	r7, #40	@ 0x28
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	2000004c 	.word	0x2000004c
 80037d8:	2000004e 	.word	0x2000004e
 80037dc:	0800c868 	.word	0x0800c868
 80037e0:	0800c87c 	.word	0x0800c87c

080037e4 <show_countdown>:

static void show_countdown(void){
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b090      	sub	sp, #64	@ 0x40
 80037e8:	af02      	add	r7, sp, #8
    char l0[17], l1[17];
    extern volatile uint16_t countdownRemainingRuns;
    if (countdownActive) {
 80037ea:	4b24      	ldr	r3, [pc, #144]	@ (800387c <show_countdown+0x98>)
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d029      	beq.n	8003848 <show_countdown+0x64>
        uint32_t sec = countdownDuration;
 80037f4:	4b22      	ldr	r3, [pc, #136]	@ (8003880 <show_countdown+0x9c>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	637b      	str	r3, [r7, #52]	@ 0x34
        uint32_t min = sec/60;
 80037fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037fc:	4a21      	ldr	r2, [pc, #132]	@ (8003884 <show_countdown+0xa0>)
 80037fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003802:	095b      	lsrs	r3, r3, #5
 8003804:	633b      	str	r3, [r7, #48]	@ 0x30
        uint32_t s   = sec%60;
 8003806:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003808:	4b1e      	ldr	r3, [pc, #120]	@ (8003884 <show_countdown+0xa0>)
 800380a:	fba3 1302 	umull	r1, r3, r3, r2
 800380e:	0959      	lsrs	r1, r3, #5
 8003810:	460b      	mov	r3, r1
 8003812:	011b      	lsls	r3, r3, #4
 8003814:	1a5b      	subs	r3, r3, r1
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        snprintf(l0,sizeof(l0),"Run %02u %02d:%02d",
 800381c:	4b1a      	ldr	r3, [pc, #104]	@ (8003888 <show_countdown+0xa4>)
 800381e:	881b      	ldrh	r3, [r3, #0]
 8003820:	b29b      	uxth	r3, r3
 8003822:	4619      	mov	r1, r3
 8003824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003826:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003828:	f107 0018 	add.w	r0, r7, #24
 800382c:	9201      	str	r2, [sp, #4]
 800382e:	9300      	str	r3, [sp, #0]
 8003830:	460b      	mov	r3, r1
 8003832:	4a16      	ldr	r2, [pc, #88]	@ (800388c <show_countdown+0xa8>)
 8003834:	2111      	movs	r1, #17
 8003836:	f006 fd0d 	bl	800a254 <sniprintf>
                 (unsigned)countdownRemainingRuns,(int)min,(int)s);
        snprintf(l1,sizeof(l1),">Stop     Back");
 800383a:	1d3b      	adds	r3, r7, #4
 800383c:	4a14      	ldr	r2, [pc, #80]	@ (8003890 <show_countdown+0xac>)
 800383e:	2111      	movs	r1, #17
 8003840:	4618      	mov	r0, r3
 8003842:	f006 fd07 	bl	800a254 <sniprintf>
 8003846:	e00c      	b.n	8003862 <show_countdown+0x7e>
    } else {
        snprintf(l0,sizeof(l0),"Countdown Inact");
 8003848:	f107 0318 	add.w	r3, r7, #24
 800384c:	4a11      	ldr	r2, [pc, #68]	@ (8003894 <show_countdown+0xb0>)
 800384e:	2111      	movs	r1, #17
 8003850:	4618      	mov	r0, r3
 8003852:	f006 fcff 	bl	800a254 <sniprintf>
        snprintf(l1,sizeof(l1),">Set Start Back");
 8003856:	1d3b      	adds	r3, r7, #4
 8003858:	4a0f      	ldr	r2, [pc, #60]	@ (8003898 <show_countdown+0xb4>)
 800385a:	2111      	movs	r1, #17
 800385c:	4618      	mov	r0, r3
 800385e:	f006 fcf9 	bl	800a254 <sniprintf>
    }
    lcd_line0(l0);
 8003862:	f107 0318 	add.w	r3, r7, #24
 8003866:	4618      	mov	r0, r3
 8003868:	f7ff fd58 	bl	800331c <lcd_line0>
    lcd_line1(l1);
 800386c:	1d3b      	adds	r3, r7, #4
 800386e:	4618      	mov	r0, r3
 8003870:	f7ff fd60 	bl	8003334 <lcd_line1>
}
 8003874:	bf00      	nop
 8003876:	3738      	adds	r7, #56	@ 0x38
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	20000572 	.word	0x20000572
 8003880:	20000578 	.word	0x20000578
 8003884:	88888889 	.word	0x88888889
 8003888:	200005c0 	.word	0x200005c0
 800388c:	0800c88c 	.word	0x0800c88c
 8003890:	0800c804 	.word	0x0800c804
 8003894:	0800c8a0 	.word	0x0800c8a0
 8003898:	0800c8b0 	.word	0x0800c8b0

0800389c <show_twist>:


static void show_twist(void){
 800389c:	b580      	push	{r7, lr}
 800389e:	b08a      	sub	sp, #40	@ 0x28
 80038a0:	af00      	add	r7, sp, #0
    char l0[17], l1[17];
    snprintf(l0,sizeof(l0),"Twist ON:%3ds",edit_twist_on_s);
 80038a2:	4b0e      	ldr	r3, [pc, #56]	@ (80038dc <show_twist+0x40>)
 80038a4:	881b      	ldrh	r3, [r3, #0]
 80038a6:	f107 0014 	add.w	r0, r7, #20
 80038aa:	4a0d      	ldr	r2, [pc, #52]	@ (80038e0 <show_twist+0x44>)
 80038ac:	2111      	movs	r1, #17
 80038ae:	f006 fcd1 	bl	800a254 <sniprintf>
    snprintf(l1,sizeof(l1),"Twist OFF:%3ds",edit_twist_off_s);
 80038b2:	4b0c      	ldr	r3, [pc, #48]	@ (80038e4 <show_twist+0x48>)
 80038b4:	881b      	ldrh	r3, [r3, #0]
 80038b6:	4638      	mov	r0, r7
 80038b8:	4a0b      	ldr	r2, [pc, #44]	@ (80038e8 <show_twist+0x4c>)
 80038ba:	2111      	movs	r1, #17
 80038bc:	f006 fcca 	bl	800a254 <sniprintf>
    lcd_line0(l0);
 80038c0:	f107 0314 	add.w	r3, r7, #20
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7ff fd29 	bl	800331c <lcd_line0>
    lcd_line1(l1);
 80038ca:	463b      	mov	r3, r7
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7ff fd31 	bl	8003334 <lcd_line1>
}
 80038d2:	bf00      	nop
 80038d4:	3728      	adds	r7, #40	@ 0x28
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	20000050 	.word	0x20000050
 80038e0:	0800c8c0 	.word	0x0800c8c0
 80038e4:	20000052 	.word	0x20000052
 80038e8:	0800c8d0 	.word	0x0800c8d0

080038ec <apply_search_settings>:

/* ===== Apply functions ===== */
static void apply_search_settings(void){
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
    searchSettings.testingGapSeconds = edit_search_gap_s;
 80038f0:	4b05      	ldr	r3, [pc, #20]	@ (8003908 <apply_search_settings+0x1c>)
 80038f2:	881a      	ldrh	r2, [r3, #0]
 80038f4:	4b05      	ldr	r3, [pc, #20]	@ (800390c <apply_search_settings+0x20>)
 80038f6:	805a      	strh	r2, [r3, #2]
    searchSettings.dryRunTimeSeconds = edit_search_dry_s;
 80038f8:	4b05      	ldr	r3, [pc, #20]	@ (8003910 <apply_search_settings+0x24>)
 80038fa:	881a      	ldrh	r2, [r3, #0]
 80038fc:	4b03      	ldr	r3, [pc, #12]	@ (800390c <apply_search_settings+0x20>)
 80038fe:	809a      	strh	r2, [r3, #4]
}
 8003900:	bf00      	nop
 8003902:	46bd      	mov	sp, r7
 8003904:	bc80      	pop	{r7}
 8003906:	4770      	bx	lr
 8003908:	2000004c 	.word	0x2000004c
 800390c:	2000001c 	.word	0x2000001c
 8003910:	2000004e 	.word	0x2000004e

08003914 <apply_twist_settings>:

static void apply_twist_settings(void){
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
    twistSettings.onDurationSeconds = edit_twist_on_s;
 8003918:	4b05      	ldr	r3, [pc, #20]	@ (8003930 <apply_twist_settings+0x1c>)
 800391a:	881a      	ldrh	r2, [r3, #0]
 800391c:	4b05      	ldr	r3, [pc, #20]	@ (8003934 <apply_twist_settings+0x20>)
 800391e:	805a      	strh	r2, [r3, #2]
    twistSettings.offDurationSeconds = edit_twist_off_s;
 8003920:	4b05      	ldr	r3, [pc, #20]	@ (8003938 <apply_twist_settings+0x24>)
 8003922:	881a      	ldrh	r2, [r3, #0]
 8003924:	4b03      	ldr	r3, [pc, #12]	@ (8003934 <apply_twist_settings+0x20>)
 8003926:	809a      	strh	r2, [r3, #4]
}
 8003928:	bf00      	nop
 800392a:	46bd      	mov	sp, r7
 800392c:	bc80      	pop	{r7}
 800392e:	4770      	bx	lr
 8003930:	20000050 	.word	0x20000050
 8003934:	20000024 	.word	0x20000024
 8003938:	20000052 	.word	0x20000052

0800393c <apply_countdown_settings>:

static void apply_countdown_settings(void){
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
    // kept for compatibility if other code depends on countdownDuration mirror
    countdownDuration = (uint32_t)edit_countdown_min * 60u;
 8003940:	4b06      	ldr	r3, [pc, #24]	@ (800395c <apply_countdown_settings+0x20>)
 8003942:	881b      	ldrh	r3, [r3, #0]
 8003944:	461a      	mov	r2, r3
 8003946:	4613      	mov	r3, r2
 8003948:	011b      	lsls	r3, r3, #4
 800394a:	1a9b      	subs	r3, r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	461a      	mov	r2, r3
 8003950:	4b03      	ldr	r3, [pc, #12]	@ (8003960 <apply_countdown_settings+0x24>)
 8003952:	601a      	str	r2, [r3, #0]
}
 8003954:	bf00      	nop
 8003956:	46bd      	mov	sp, r7
 8003958:	bc80      	pop	{r7}
 800395a:	4770      	bx	lr
 800395c:	20000054 	.word	0x20000054
 8003960:	20000578 	.word	0x20000578

08003964 <enable_semi_auto>:

static void enable_semi_auto(void){
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
    ModelHandle_ClearManualOverride();
 8003968:	f7ff fa3a 	bl	8002de0 <ModelHandle_ClearManualOverride>
    ModelHandle_StartSemiAuto();
 800396c:	f7ff f9d8 	bl	8002d20 <ModelHandle_StartSemiAuto>
    semiAutoEnabled = true;
 8003970:	4b02      	ldr	r3, [pc, #8]	@ (800397c <enable_semi_auto+0x18>)
 8003972:	2201      	movs	r2, #1
 8003974:	701a      	strb	r2, [r3, #0]
}
 8003976:	bf00      	nop
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	200005f0 	.word	0x200005f0

08003980 <disable_semi_auto>:
static void disable_semi_auto(void){
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
    ModelHandle_SetMotor(false);
 8003984:	2000      	movs	r0, #0
 8003986:	f7ff fa0d 	bl	8002da4 <ModelHandle_SetMotor>
    semiAutoEnabled = false;
 800398a:	4b02      	ldr	r3, [pc, #8]	@ (8003994 <disable_semi_auto+0x14>)
 800398c:	2200      	movs	r2, #0
 800398e:	701a      	strb	r2, [r3, #0]
}
 8003990:	bf00      	nop
 8003992:	bd80      	pop	{r7, pc}
 8003994:	200005f0 	.word	0x200005f0

08003998 <apply_timer_settings>:

static void apply_timer_settings(void){
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
    timerSlots[0].active = true;
 800399c:	4b0d      	ldr	r3, [pc, #52]	@ (80039d4 <apply_timer_settings+0x3c>)
 800399e:	2201      	movs	r2, #1
 80039a0:	701a      	strb	r2, [r3, #0]
    timerSlots[0].onTimeSeconds  = ModelHandle_TimeToSeconds(edit_timer_on_h, edit_timer_on_m);
 80039a2:	4b0d      	ldr	r3, [pc, #52]	@ (80039d8 <apply_timer_settings+0x40>)
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	4a0d      	ldr	r2, [pc, #52]	@ (80039dc <apply_timer_settings+0x44>)
 80039a8:	7812      	ldrb	r2, [r2, #0]
 80039aa:	4611      	mov	r1, r2
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7fe ffce 	bl	800294e <ModelHandle_TimeToSeconds>
 80039b2:	4603      	mov	r3, r0
 80039b4:	4a07      	ldr	r2, [pc, #28]	@ (80039d4 <apply_timer_settings+0x3c>)
 80039b6:	6053      	str	r3, [r2, #4]
    timerSlots[0].offTimeSeconds = ModelHandle_TimeToSeconds(edit_timer_off_h, edit_timer_off_m);
 80039b8:	4b09      	ldr	r3, [pc, #36]	@ (80039e0 <apply_timer_settings+0x48>)
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	4a09      	ldr	r2, [pc, #36]	@ (80039e4 <apply_timer_settings+0x4c>)
 80039be:	7812      	ldrb	r2, [r2, #0]
 80039c0:	4611      	mov	r1, r2
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7fe ffc3 	bl	800294e <ModelHandle_TimeToSeconds>
 80039c8:	4603      	mov	r3, r0
 80039ca:	4a02      	ldr	r2, [pc, #8]	@ (80039d4 <apply_timer_settings+0x3c>)
 80039cc:	6093      	str	r3, [r2, #8]
}
 80039ce:	bf00      	nop
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	2000057c 	.word	0x2000057c
 80039d8:	20000048 	.word	0x20000048
 80039dc:	20000049 	.word	0x20000049
 80039e0:	2000004a 	.word	0x2000004a
 80039e4:	2000004b 	.word	0x2000004b

080039e8 <Screen_Update>:

/* ===== Core Update Loop ===== */
void Screen_Update(void){
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b0f0      	sub	sp, #448	@ 0x1c0
 80039ec:	af00      	add	r7, sp, #0
    uint32_t now = HAL_GetTick();
 80039ee:	f001 fa39 	bl	8004e64 <HAL_GetTick>
 80039f2:	f8c7 01b8 	str.w	r0, [r7, #440]	@ 0x1b8

    bool cursorBlinkActive = false;
 80039f6:	2300      	movs	r3, #0
 80039f8:	f887 31bf 	strb.w	r3, [r7, #447]	@ 0x1bf
    switch (ui) {
 80039fc:	4bb9      	ldr	r3, [pc, #740]	@ (8003ce4 <Screen_Update+0x2fc>)
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	2b13      	cmp	r3, #19
 8003a02:	bf8c      	ite	hi
 8003a04:	2201      	movhi	r2, #1
 8003a06:	2200      	movls	r2, #0
 8003a08:	b2d2      	uxtb	r2, r2
 8003a0a:	2a00      	cmp	r2, #0
 8003a0c:	d10f      	bne.n	8003a2e <Screen_Update+0x46>
 8003a0e:	4ab6      	ldr	r2, [pc, #728]	@ (8003ce8 <Screen_Update+0x300>)
 8003a10:	fa22 f303 	lsr.w	r3, r2, r3
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	bf14      	ite	ne
 8003a1c:	2301      	movne	r3, #1
 8003a1e:	2300      	moveq	r3, #0
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <Screen_Update+0x46>
        case UI_SEARCH_EDIT_DRY:
        case UI_COUNTDOWN_EDIT_MIN:
        case UI_COUNTDOWN_EDIT_REP:   // NEW: blink on repeats editor
        case UI_TWIST_EDIT_ON:
        case UI_TWIST_EDIT_OFF:
            cursorBlinkActive = true;
 8003a26:	2301      	movs	r3, #1
 8003a28:	f887 31bf 	strb.w	r3, [r7, #447]	@ 0x1bf
            break;
 8003a2c:	e006      	b.n	8003a3c <Screen_Update+0x54>
        default:
            cursorBlinkActive = false;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	f887 31bf 	strb.w	r3, [r7, #447]	@ 0x1bf
            cursorVisible = true;
 8003a34:	4bad      	ldr	r3, [pc, #692]	@ (8003cec <Screen_Update+0x304>)
 8003a36:	2201      	movs	r2, #1
 8003a38:	701a      	strb	r2, [r3, #0]
            break;
 8003a3a:	bf00      	nop
    }

    if (cursorBlinkActive && (now - lastCursorToggle >= CURSOR_BLINK_MS)) {
 8003a3c:	f897 31bf 	ldrb.w	r3, [r7, #447]	@ 0x1bf
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d01e      	beq.n	8003a82 <Screen_Update+0x9a>
 8003a44:	4baa      	ldr	r3, [pc, #680]	@ (8003cf0 <Screen_Update+0x308>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d315      	bcc.n	8003a82 <Screen_Update+0x9a>
        cursorVisible = !cursorVisible;
 8003a56:	4ba5      	ldr	r3, [pc, #660]	@ (8003cec <Screen_Update+0x304>)
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	bf14      	ite	ne
 8003a5e:	2301      	movne	r3, #1
 8003a60:	2300      	moveq	r3, #0
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	f083 0301 	eor.w	r3, r3, #1
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	b2da      	uxtb	r2, r3
 8003a70:	4b9e      	ldr	r3, [pc, #632]	@ (8003cec <Screen_Update+0x304>)
 8003a72:	701a      	strb	r2, [r3, #0]
        lastCursorToggle = now;
 8003a74:	4a9e      	ldr	r2, [pc, #632]	@ (8003cf0 <Screen_Update+0x308>)
 8003a76:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8003a7a:	6013      	str	r3, [r2, #0]
        screenNeedsRefresh = true;
 8003a7c:	4b9d      	ldr	r3, [pc, #628]	@ (8003cf4 <Screen_Update+0x30c>)
 8003a7e:	2201      	movs	r2, #1
 8003a80:	701a      	strb	r2, [r3, #0]
    }

    if (ui == UI_WELCOME && now - lastLcdUpdateTime >= WELCOME_MS) {
 8003a82:	4b98      	ldr	r3, [pc, #608]	@ (8003ce4 <Screen_Update+0x2fc>)
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d112      	bne.n	8003ab0 <Screen_Update+0xc8>
 8003a8a:	4b9b      	ldr	r3, [pc, #620]	@ (8003cf8 <Screen_Update+0x310>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d309      	bcc.n	8003ab0 <Screen_Update+0xc8>
        ui = UI_DASH;
 8003a9c:	4b91      	ldr	r3, [pc, #580]	@ (8003ce4 <Screen_Update+0x2fc>)
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	701a      	strb	r2, [r3, #0]
        lastLcdUpdateTime = now;
 8003aa2:	4a95      	ldr	r2, [pc, #596]	@ (8003cf8 <Screen_Update+0x310>)
 8003aa4:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8003aa8:	6013      	str	r3, [r2, #0]
        screenNeedsRefresh = true;
 8003aaa:	4b92      	ldr	r3, [pc, #584]	@ (8003cf4 <Screen_Update+0x30c>)
 8003aac:	2201      	movs	r2, #1
 8003aae:	701a      	strb	r2, [r3, #0]
    }

    if (ui != UI_WELCOME && ui != UI_DASH && (now - lastUserAction >= AUTO_BACK_MS)) {
 8003ab0:	4b8c      	ldr	r3, [pc, #560]	@ (8003ce4 <Screen_Update+0x2fc>)
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d012      	beq.n	8003ade <Screen_Update+0xf6>
 8003ab8:	4b8a      	ldr	r3, [pc, #552]	@ (8003ce4 <Screen_Update+0x2fc>)
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d00e      	beq.n	8003ade <Screen_Update+0xf6>
 8003ac0:	4b8e      	ldr	r3, [pc, #568]	@ (8003cfc <Screen_Update+0x314>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d305      	bcc.n	8003ade <Screen_Update+0xf6>
        ui = UI_DASH;
 8003ad2:	4b84      	ldr	r3, [pc, #528]	@ (8003ce4 <Screen_Update+0x2fc>)
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	701a      	strb	r2, [r3, #0]
        screenNeedsRefresh = true;
 8003ad8:	4b86      	ldr	r3, [pc, #536]	@ (8003cf4 <Screen_Update+0x30c>)
 8003ada:	2201      	movs	r2, #1
 8003adc:	701a      	strb	r2, [r3, #0]
    }

    if (ui == UI_DASH && (now - lastLcdUpdateTime >= 1000)) {
 8003ade:	4b81      	ldr	r3, [pc, #516]	@ (8003ce4 <Screen_Update+0x2fc>)
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d10e      	bne.n	8003b04 <Screen_Update+0x11c>
 8003ae6:	4b84      	ldr	r3, [pc, #528]	@ (8003cf8 <Screen_Update+0x310>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003af4:	d306      	bcc.n	8003b04 <Screen_Update+0x11c>
        screenNeedsRefresh = true;
 8003af6:	4b7f      	ldr	r3, [pc, #508]	@ (8003cf4 <Screen_Update+0x30c>)
 8003af8:	2201      	movs	r2, #1
 8003afa:	701a      	strb	r2, [r3, #0]
        lastLcdUpdateTime = now;
 8003afc:	4a7e      	ldr	r2, [pc, #504]	@ (8003cf8 <Screen_Update+0x310>)
 8003afe:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8003b02:	6013      	str	r3, [r2, #0]
    }

    if (screenNeedsRefresh || ui != last_ui) {
 8003b04:	4b7b      	ldr	r3, [pc, #492]	@ (8003cf4 <Screen_Update+0x30c>)
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d106      	bne.n	8003b1a <Screen_Update+0x132>
 8003b0c:	4b75      	ldr	r3, [pc, #468]	@ (8003ce4 <Screen_Update+0x2fc>)
 8003b0e:	781a      	ldrb	r2, [r3, #0]
 8003b10:	4b7b      	ldr	r3, [pc, #492]	@ (8003d00 <Screen_Update+0x318>)
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	f000 81ab 	beq.w	8003e70 <Screen_Update+0x488>
        bool fullRedraw = (ui != last_ui);
 8003b1a:	4b72      	ldr	r3, [pc, #456]	@ (8003ce4 <Screen_Update+0x2fc>)
 8003b1c:	781a      	ldrb	r2, [r3, #0]
 8003b1e:	4b78      	ldr	r3, [pc, #480]	@ (8003d00 <Screen_Update+0x318>)
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	bf14      	ite	ne
 8003b26:	2301      	movne	r3, #1
 8003b28:	2300      	moveq	r3, #0
 8003b2a:	f887 31b7 	strb.w	r3, [r7, #439]	@ 0x1b7
        last_ui = ui;
 8003b2e:	4b6d      	ldr	r3, [pc, #436]	@ (8003ce4 <Screen_Update+0x2fc>)
 8003b30:	781a      	ldrb	r2, [r3, #0]
 8003b32:	4b73      	ldr	r3, [pc, #460]	@ (8003d00 <Screen_Update+0x318>)
 8003b34:	701a      	strb	r2, [r3, #0]
        screenNeedsRefresh = false;
 8003b36:	4b6f      	ldr	r3, [pc, #444]	@ (8003cf4 <Screen_Update+0x30c>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	701a      	strb	r2, [r3, #0]

        if (fullRedraw) lcd_clear();
 8003b3c:	f897 31b7 	ldrb.w	r3, [r7, #439]	@ 0x1b7
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <Screen_Update+0x160>
 8003b44:	f7fe f863 	bl	8001c0e <lcd_clear>

        switch (ui) {
 8003b48:	4b66      	ldr	r3, [pc, #408]	@ (8003ce4 <Screen_Update+0x2fc>)
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	2b13      	cmp	r3, #19
 8003b4e:	f200 8188 	bhi.w	8003e62 <Screen_Update+0x47a>
 8003b52:	a201      	add	r2, pc, #4	@ (adr r2, 8003b58 <Screen_Update+0x170>)
 8003b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b58:	08003ba9 	.word	0x08003ba9
 8003b5c:	08003baf 	.word	0x08003baf
 8003b60:	08003bb5 	.word	0x08003bb5
 8003b64:	08003bbb 	.word	0x08003bbb
 8003b68:	08003bc1 	.word	0x08003bc1
 8003b6c:	08003bc7 	.word	0x08003bc7
 8003b70:	08003bdf 	.word	0x08003bdf
 8003b74:	08003c13 	.word	0x08003c13
 8003b78:	08003c47 	.word	0x08003c47
 8003b7c:	08003c7b 	.word	0x08003c7b
 8003b80:	08003bcd 	.word	0x08003bcd
 8003b84:	08003caf 	.word	0x08003caf
 8003b88:	08003d31 	.word	0x08003d31
 8003b8c:	08003bd3 	.word	0x08003bd3
 8003b90:	08003d65 	.word	0x08003d65
 8003b94:	08003d99 	.word	0x08003d99
 8003b98:	08003dcd 	.word	0x08003dcd
 8003b9c:	08003bd9 	.word	0x08003bd9
 8003ba0:	08003dff 	.word	0x08003dff
 8003ba4:	08003e33 	.word	0x08003e33
            case UI_WELCOME: show_welcome(); break;
 8003ba8:	f7ff fc2a 	bl	8003400 <show_welcome>
 8003bac:	e160      	b.n	8003e70 <Screen_Update+0x488>
            case UI_DASH: show_dash(); break;
 8003bae:	f7ff fc37 	bl	8003420 <show_dash>
 8003bb2:	e15d      	b.n	8003e70 <Screen_Update+0x488>
            case UI_MENU: show_menu(); break;
 8003bb4:	f7ff fcf6 	bl	80035a4 <show_menu>
 8003bb8:	e15a      	b.n	8003e70 <Screen_Update+0x488>
            case UI_MANUAL: show_manual(); break;
 8003bba:	f7ff fd51 	bl	8003660 <show_manual>
 8003bbe:	e157      	b.n	8003e70 <Screen_Update+0x488>
            case UI_SEMI_AUTO: show_semi_auto(); break;
 8003bc0:	f7ff fd7e 	bl	80036c0 <show_semi_auto>
 8003bc4:	e154      	b.n	8003e70 <Screen_Update+0x488>
            case UI_TIMER: show_timer(); break;
 8003bc6:	f7ff fdab 	bl	8003720 <show_timer>
 8003bca:	e151      	b.n	8003e70 <Screen_Update+0x488>
            case UI_SEARCH: show_search(); break;
 8003bcc:	f7ff fdde 	bl	800378c <show_search>
 8003bd0:	e14e      	b.n	8003e70 <Screen_Update+0x488>
            case UI_COUNTDOWN: show_countdown(); break;
 8003bd2:	f7ff fe07 	bl	80037e4 <show_countdown>
 8003bd6:	e14b      	b.n	8003e70 <Screen_Update+0x488>
            case UI_TWIST: show_twist(); break;
 8003bd8:	f7ff fe60 	bl	800389c <show_twist>
 8003bdc:	e148      	b.n	8003e70 <Screen_Update+0x488>

            case UI_TIMER_EDIT_ON_H: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit ON Hour: %02d", edit_timer_on_h);
 8003bde:	4b49      	ldr	r3, [pc, #292]	@ (8003d04 <Screen_Update+0x31c>)
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	f507 70d2 	add.w	r0, r7, #420	@ 0x1a4
 8003be6:	4a48      	ldr	r2, [pc, #288]	@ (8003d08 <Screen_Update+0x320>)
 8003be8:	2111      	movs	r1, #17
 8003bea:	f006 fb33 	bl	800a254 <sniprintf>
                snprintf(l1,sizeof(l1),">Up + Dn - SelOK");
 8003bee:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8003bf2:	4a46      	ldr	r2, [pc, #280]	@ (8003d0c <Screen_Update+0x324>)
 8003bf4:	2111      	movs	r1, #17
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f006 fb2c 	bl	800a254 <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 8003bfc:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7ff fb8b 	bl	800331c <lcd_line0>
 8003c06:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7ff fb92 	bl	8003334 <lcd_line1>
 8003c10:	e12e      	b.n	8003e70 <Screen_Update+0x488>
            }
            case UI_TIMER_EDIT_ON_M: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit ON Min: %02d", edit_timer_on_m);
 8003c12:	4b3f      	ldr	r3, [pc, #252]	@ (8003d10 <Screen_Update+0x328>)
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	f507 70be 	add.w	r0, r7, #380	@ 0x17c
 8003c1a:	4a3e      	ldr	r2, [pc, #248]	@ (8003d14 <Screen_Update+0x32c>)
 8003c1c:	2111      	movs	r1, #17
 8003c1e:	f006 fb19 	bl	800a254 <sniprintf>
                snprintf(l1,sizeof(l1),">Up + Dn - SelOK");
 8003c22:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8003c26:	4a39      	ldr	r2, [pc, #228]	@ (8003d0c <Screen_Update+0x324>)
 8003c28:	2111      	movs	r1, #17
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f006 fb12 	bl	800a254 <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 8003c30:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7ff fb71 	bl	800331c <lcd_line0>
 8003c3a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7ff fb78 	bl	8003334 <lcd_line1>
 8003c44:	e114      	b.n	8003e70 <Screen_Update+0x488>
            }
            case UI_TIMER_EDIT_OFF_H: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit OFF Hr: %02d", edit_timer_off_h);
 8003c46:	4b34      	ldr	r3, [pc, #208]	@ (8003d18 <Screen_Update+0x330>)
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	f507 70aa 	add.w	r0, r7, #340	@ 0x154
 8003c4e:	4a33      	ldr	r2, [pc, #204]	@ (8003d1c <Screen_Update+0x334>)
 8003c50:	2111      	movs	r1, #17
 8003c52:	f006 faff 	bl	800a254 <sniprintf>
                snprintf(l1,sizeof(l1),">Up + Dn - SelOK");
 8003c56:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003c5a:	4a2c      	ldr	r2, [pc, #176]	@ (8003d0c <Screen_Update+0x324>)
 8003c5c:	2111      	movs	r1, #17
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f006 faf8 	bl	800a254 <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 8003c64:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7ff fb57 	bl	800331c <lcd_line0>
 8003c6e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7ff fb5e 	bl	8003334 <lcd_line1>
 8003c78:	e0fa      	b.n	8003e70 <Screen_Update+0x488>
            }
            case UI_TIMER_EDIT_OFF_M: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit OFF Mn: %02d", edit_timer_off_m);
 8003c7a:	4b29      	ldr	r3, [pc, #164]	@ (8003d20 <Screen_Update+0x338>)
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	f507 7096 	add.w	r0, r7, #300	@ 0x12c
 8003c82:	4a28      	ldr	r2, [pc, #160]	@ (8003d24 <Screen_Update+0x33c>)
 8003c84:	2111      	movs	r1, #17
 8003c86:	f006 fae5 	bl	800a254 <sniprintf>
                snprintf(l1,sizeof(l1),">Up + Dn - SelOK");
 8003c8a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003c8e:	4a1f      	ldr	r2, [pc, #124]	@ (8003d0c <Screen_Update+0x324>)
 8003c90:	2111      	movs	r1, #17
 8003c92:	4618      	mov	r0, r3
 8003c94:	f006 fade 	bl	800a254 <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 8003c98:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7ff fb3d 	bl	800331c <lcd_line0>
 8003ca2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7ff fb44 	bl	8003334 <lcd_line1>
 8003cac:	e0e0      	b.n	8003e70 <Screen_Update+0x488>
            }
            case UI_SEARCH_EDIT_GAP: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit Gap: %3ds", edit_search_gap_s);
 8003cae:	4b1e      	ldr	r3, [pc, #120]	@ (8003d28 <Screen_Update+0x340>)
 8003cb0:	881b      	ldrh	r3, [r3, #0]
 8003cb2:	f507 7082 	add.w	r0, r7, #260	@ 0x104
 8003cb6:	4a1d      	ldr	r2, [pc, #116]	@ (8003d2c <Screen_Update+0x344>)
 8003cb8:	2111      	movs	r1, #17
 8003cba:	f006 facb 	bl	800a254 <sniprintf>
                snprintf(l1,sizeof(l1),">Up + Dn - SelOK");
 8003cbe:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8003cc2:	4a12      	ldr	r2, [pc, #72]	@ (8003d0c <Screen_Update+0x324>)
 8003cc4:	2111      	movs	r1, #17
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f006 fac4 	bl	800a254 <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 8003ccc:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7ff fb23 	bl	800331c <lcd_line0>
 8003cd6:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7ff fb2a 	bl	8003334 <lcd_line1>
 8003ce0:	e0c6      	b.n	8003e70 <Screen_Update+0x488>
 8003ce2:	bf00      	nop
 8003ce4:	200005e4 	.word	0x200005e4
 8003ce8:	000cdbc4 	.word	0x000cdbc4
 8003cec:	2000002b 	.word	0x2000002b
 8003cf0:	200005e8 	.word	0x200005e8
 8003cf4:	200005e5 	.word	0x200005e5
 8003cf8:	200005e0 	.word	0x200005e0
 8003cfc:	200005ec 	.word	0x200005ec
 8003d00:	2000002a 	.word	0x2000002a
 8003d04:	20000048 	.word	0x20000048
 8003d08:	0800c8e0 	.word	0x0800c8e0
 8003d0c:	0800c8f4 	.word	0x0800c8f4
 8003d10:	20000049 	.word	0x20000049
 8003d14:	0800c908 	.word	0x0800c908
 8003d18:	2000004a 	.word	0x2000004a
 8003d1c:	0800c91c 	.word	0x0800c91c
 8003d20:	2000004b 	.word	0x2000004b
 8003d24:	0800c930 	.word	0x0800c930
 8003d28:	2000004c 	.word	0x2000004c
 8003d2c:	0800c944 	.word	0x0800c944
            }
            case UI_SEARCH_EDIT_DRY: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit Dry: %3ds", edit_search_dry_s);
 8003d30:	4b52      	ldr	r3, [pc, #328]	@ (8003e7c <Screen_Update+0x494>)
 8003d32:	881b      	ldrh	r3, [r3, #0]
 8003d34:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 8003d38:	4a51      	ldr	r2, [pc, #324]	@ (8003e80 <Screen_Update+0x498>)
 8003d3a:	2111      	movs	r1, #17
 8003d3c:	f006 fa8a 	bl	800a254 <sniprintf>
                snprintf(l1,sizeof(l1),">Up + Dn - SelOK");
 8003d40:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8003d44:	4a4f      	ldr	r2, [pc, #316]	@ (8003e84 <Screen_Update+0x49c>)
 8003d46:	2111      	movs	r1, #17
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f006 fa83 	bl	800a254 <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 8003d4e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7ff fae2 	bl	800331c <lcd_line0>
 8003d58:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7ff fae9 	bl	8003334 <lcd_line1>
 8003d62:	e085      	b.n	8003e70 <Screen_Update+0x488>
            }
            case UI_COUNTDOWN_EDIT_MIN: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Set Min: %3u", edit_countdown_min);
 8003d64:	4b48      	ldr	r3, [pc, #288]	@ (8003e88 <Screen_Update+0x4a0>)
 8003d66:	881b      	ldrh	r3, [r3, #0]
 8003d68:	f107 00b4 	add.w	r0, r7, #180	@ 0xb4
 8003d6c:	4a47      	ldr	r2, [pc, #284]	@ (8003e8c <Screen_Update+0x4a4>)
 8003d6e:	2111      	movs	r1, #17
 8003d70:	f006 fa70 	bl	800a254 <sniprintf>
                snprintf(l1,sizeof(l1),">Up+Dn- SelNext");
 8003d74:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8003d78:	4a45      	ldr	r2, [pc, #276]	@ (8003e90 <Screen_Update+0x4a8>)
 8003d7a:	2111      	movs	r1, #17
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f006 fa69 	bl	800a254 <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 8003d82:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7ff fac8 	bl	800331c <lcd_line0>
 8003d8c:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7ff facf 	bl	8003334 <lcd_line1>
 8003d96:	e06b      	b.n	8003e70 <Screen_Update+0x488>
            }
            case UI_COUNTDOWN_EDIT_REP: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Set Reps: %3u", edit_countdown_rep);
 8003d98:	4b3e      	ldr	r3, [pc, #248]	@ (8003e94 <Screen_Update+0x4ac>)
 8003d9a:	881b      	ldrh	r3, [r3, #0]
 8003d9c:	f107 008c 	add.w	r0, r7, #140	@ 0x8c
 8003da0:	4a3d      	ldr	r2, [pc, #244]	@ (8003e98 <Screen_Update+0x4b0>)
 8003da2:	2111      	movs	r1, #17
 8003da4:	f006 fa56 	bl	800a254 <sniprintf>
                snprintf(l1,sizeof(l1),">Up+Dn- Start");
 8003da8:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8003dac:	4a3b      	ldr	r2, [pc, #236]	@ (8003e9c <Screen_Update+0x4b4>)
 8003dae:	2111      	movs	r1, #17
 8003db0:	4618      	mov	r0, r3
 8003db2:	f006 fa4f 	bl	800a254 <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 8003db6:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7ff faae 	bl	800331c <lcd_line0>
 8003dc0:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff fab5 	bl	8003334 <lcd_line1>
 8003dca:	e051      	b.n	8003e70 <Screen_Update+0x488>
            }

            case UI_COUNTDOWN_TOGGLE: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Countdown Setup");
 8003dcc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003dd0:	4a33      	ldr	r2, [pc, #204]	@ (8003ea0 <Screen_Update+0x4b8>)
 8003dd2:	2111      	movs	r1, #17
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f006 fa3d 	bl	800a254 <sniprintf>
                snprintf(l1,sizeof(l1),">Enable   Edit");
 8003dda:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8003dde:	4a31      	ldr	r2, [pc, #196]	@ (8003ea4 <Screen_Update+0x4bc>)
 8003de0:	2111      	movs	r1, #17
 8003de2:	4618      	mov	r0, r3
 8003de4:	f006 fa36 	bl	800a254 <sniprintf>
                lcd_line0(l0); lcd_line1(l1);
 8003de8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7ff fa95 	bl	800331c <lcd_line0>
 8003df2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7ff fa9c 	bl	8003334 <lcd_line1>
                break;
 8003dfc:	e038      	b.n	8003e70 <Screen_Update+0x488>
            }

            case UI_TWIST_EDIT_ON: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit T ON: %3ds", edit_twist_on_s);
 8003dfe:	4b2a      	ldr	r3, [pc, #168]	@ (8003ea8 <Screen_Update+0x4c0>)
 8003e00:	881b      	ldrh	r3, [r3, #0]
 8003e02:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8003e06:	4a29      	ldr	r2, [pc, #164]	@ (8003eac <Screen_Update+0x4c4>)
 8003e08:	2111      	movs	r1, #17
 8003e0a:	f006 fa23 	bl	800a254 <sniprintf>
                snprintf(l1,sizeof(l1),">Up + Dn - SelOK");
 8003e0e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003e12:	4a1c      	ldr	r2, [pc, #112]	@ (8003e84 <Screen_Update+0x49c>)
 8003e14:	2111      	movs	r1, #17
 8003e16:	4618      	mov	r0, r3
 8003e18:	f006 fa1c 	bl	800a254 <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 8003e1c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7ff fa7b 	bl	800331c <lcd_line0>
 8003e26:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff fa82 	bl	8003334 <lcd_line1>
 8003e30:	e01e      	b.n	8003e70 <Screen_Update+0x488>
            }
            case UI_TWIST_EDIT_OFF: {
                char l0[17], l1[17];
                snprintf(l0,sizeof(l0),"Edit T OFF:%3ds", edit_twist_off_s);
 8003e32:	4b1f      	ldr	r3, [pc, #124]	@ (8003eb0 <Screen_Update+0x4c8>)
 8003e34:	881b      	ldrh	r3, [r3, #0]
 8003e36:	f107 0014 	add.w	r0, r7, #20
 8003e3a:	4a1e      	ldr	r2, [pc, #120]	@ (8003eb4 <Screen_Update+0x4cc>)
 8003e3c:	2111      	movs	r1, #17
 8003e3e:	f006 fa09 	bl	800a254 <sniprintf>
                snprintf(l1,sizeof(l1),">Up + Dn - SelOK");
 8003e42:	463b      	mov	r3, r7
 8003e44:	4a0f      	ldr	r2, [pc, #60]	@ (8003e84 <Screen_Update+0x49c>)
 8003e46:	2111      	movs	r1, #17
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f006 fa03 	bl	800a254 <sniprintf>
                lcd_line0(l0); lcd_line1(l1); break;
 8003e4e:	f107 0314 	add.w	r3, r7, #20
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7ff fa62 	bl	800331c <lcd_line0>
 8003e58:	463b      	mov	r3, r7
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7ff fa6a 	bl	8003334 <lcd_line1>
 8003e60:	e006      	b.n	8003e70 <Screen_Update+0x488>
            }
            default:
                lcd_line0("Not Implemented");
 8003e62:	4815      	ldr	r0, [pc, #84]	@ (8003eb8 <Screen_Update+0x4d0>)
 8003e64:	f7ff fa5a 	bl	800331c <lcd_line0>
                lcd_line1("                ");
 8003e68:	4814      	ldr	r0, [pc, #80]	@ (8003ebc <Screen_Update+0x4d4>)
 8003e6a:	f7ff fa63 	bl	8003334 <lcd_line1>
                break;
 8003e6e:	bf00      	nop
        }
    }
}
 8003e70:	bf00      	nop
 8003e72:	f507 77e0 	add.w	r7, r7, #448	@ 0x1c0
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	2000004e 	.word	0x2000004e
 8003e80:	0800c954 	.word	0x0800c954
 8003e84:	0800c8f4 	.word	0x0800c8f4
 8003e88:	20000054 	.word	0x20000054
 8003e8c:	0800c964 	.word	0x0800c964
 8003e90:	0800c974 	.word	0x0800c974
 8003e94:	20000056 	.word	0x20000056
 8003e98:	0800c984 	.word	0x0800c984
 8003e9c:	0800c994 	.word	0x0800c994
 8003ea0:	0800c9a4 	.word	0x0800c9a4
 8003ea4:	0800c9b4 	.word	0x0800c9b4
 8003ea8:	20000050 	.word	0x20000050
 8003eac:	0800c9c4 	.word	0x0800c9c4
 8003eb0:	20000052 	.word	0x20000052
 8003eb4:	0800c9d4 	.word	0x0800c9d4
 8003eb8:	0800c9e4 	.word	0x0800c9e4
 8003ebc:	0800c758 	.word	0x0800c758

08003ec0 <Screen_Init>:

/* ===== Initialization / Reset ===== */
void Screen_Init(void){
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	af00      	add	r7, sp, #0
    lcd_init();
 8003ec4:	f7fd fee7 	bl	8001c96 <lcd_init>
    ui = UI_WELCOME;
 8003ec8:	4b1c      	ldr	r3, [pc, #112]	@ (8003f3c <Screen_Init+0x7c>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	701a      	strb	r2, [r3, #0]
    last_ui = UI_MAX_;
 8003ece:	4b1c      	ldr	r3, [pc, #112]	@ (8003f40 <Screen_Init+0x80>)
 8003ed0:	2214      	movs	r2, #20
 8003ed2:	701a      	strb	r2, [r3, #0]
    screenNeedsRefresh = true;
 8003ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8003f44 <Screen_Init+0x84>)
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	701a      	strb	r2, [r3, #0]
    lastLcdUpdateTime = HAL_GetTick();
 8003eda:	f000 ffc3 	bl	8004e64 <HAL_GetTick>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	4a19      	ldr	r2, [pc, #100]	@ (8003f48 <Screen_Init+0x88>)
 8003ee2:	6013      	str	r3, [r2, #0]
    refreshInactivityTimer();
 8003ee4:	f7ff fa32 	bl	800334c <refreshInactivityTimer>

    edit_search_gap_s = searchSettings.testingGapSeconds;
 8003ee8:	4b18      	ldr	r3, [pc, #96]	@ (8003f4c <Screen_Init+0x8c>)
 8003eea:	885a      	ldrh	r2, [r3, #2]
 8003eec:	4b18      	ldr	r3, [pc, #96]	@ (8003f50 <Screen_Init+0x90>)
 8003eee:	801a      	strh	r2, [r3, #0]
    edit_search_dry_s = searchSettings.dryRunTimeSeconds;
 8003ef0:	4b16      	ldr	r3, [pc, #88]	@ (8003f4c <Screen_Init+0x8c>)
 8003ef2:	889a      	ldrh	r2, [r3, #4]
 8003ef4:	4b17      	ldr	r3, [pc, #92]	@ (8003f54 <Screen_Init+0x94>)
 8003ef6:	801a      	strh	r2, [r3, #0]
    edit_twist_on_s   = twistSettings.onDurationSeconds;
 8003ef8:	4b17      	ldr	r3, [pc, #92]	@ (8003f58 <Screen_Init+0x98>)
 8003efa:	885a      	ldrh	r2, [r3, #2]
 8003efc:	4b17      	ldr	r3, [pc, #92]	@ (8003f5c <Screen_Init+0x9c>)
 8003efe:	801a      	strh	r2, [r3, #0]
    edit_twist_off_s  = twistSettings.offDurationSeconds;
 8003f00:	4b15      	ldr	r3, [pc, #84]	@ (8003f58 <Screen_Init+0x98>)
 8003f02:	889a      	ldrh	r2, [r3, #4]
 8003f04:	4b16      	ldr	r3, [pc, #88]	@ (8003f60 <Screen_Init+0xa0>)
 8003f06:	801a      	strh	r2, [r3, #0]
    edit_countdown_min = (uint16_t)(countdownDuration / 60u);
 8003f08:	4b16      	ldr	r3, [pc, #88]	@ (8003f64 <Screen_Init+0xa4>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a16      	ldr	r2, [pc, #88]	@ (8003f68 <Screen_Init+0xa8>)
 8003f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f12:	095b      	lsrs	r3, r3, #5
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	4b15      	ldr	r3, [pc, #84]	@ (8003f6c <Screen_Init+0xac>)
 8003f18:	801a      	strh	r2, [r3, #0]
    if (edit_countdown_min == 0) edit_countdown_min = 5; // sane default
 8003f1a:	4b14      	ldr	r3, [pc, #80]	@ (8003f6c <Screen_Init+0xac>)
 8003f1c:	881b      	ldrh	r3, [r3, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d102      	bne.n	8003f28 <Screen_Init+0x68>
 8003f22:	4b12      	ldr	r3, [pc, #72]	@ (8003f6c <Screen_Init+0xac>)
 8003f24:	2205      	movs	r2, #5
 8003f26:	801a      	strh	r2, [r3, #0]
    if (edit_countdown_rep == 0) edit_countdown_rep = 1;
 8003f28:	4b11      	ldr	r3, [pc, #68]	@ (8003f70 <Screen_Init+0xb0>)
 8003f2a:	881b      	ldrh	r3, [r3, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d102      	bne.n	8003f36 <Screen_Init+0x76>
 8003f30:	4b0f      	ldr	r3, [pc, #60]	@ (8003f70 <Screen_Init+0xb0>)
 8003f32:	2201      	movs	r2, #1
 8003f34:	801a      	strh	r2, [r3, #0]
}
 8003f36:	bf00      	nop
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	200005e4 	.word	0x200005e4
 8003f40:	2000002a 	.word	0x2000002a
 8003f44:	200005e5 	.word	0x200005e5
 8003f48:	200005e0 	.word	0x200005e0
 8003f4c:	2000001c 	.word	0x2000001c
 8003f50:	2000004c 	.word	0x2000004c
 8003f54:	2000004e 	.word	0x2000004e
 8003f58:	20000024 	.word	0x20000024
 8003f5c:	20000050 	.word	0x20000050
 8003f60:	20000052 	.word	0x20000052
 8003f64:	20000578 	.word	0x20000578
 8003f68:	88888889 	.word	0x88888889
 8003f6c:	20000054 	.word	0x20000054
 8003f70:	20000056 	.word	0x20000056

08003f74 <menu_select>:
    lastLcdUpdateTime = HAL_GetTick();
    refreshInactivityTimer();
}

/* ===== Menu actions ===== */
static void menu_select(void){
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
    refreshInactivityTimer();
 8003f7a:	f7ff f9e7 	bl	800334c <refreshInactivityTimer>

    switch (ui){
 8003f7e:	4b7c      	ldr	r3, [pc, #496]	@ (8004170 <menu_select+0x1fc>)
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	2b13      	cmp	r3, #19
 8003f84:	f200 80ec 	bhi.w	8004160 <menu_select+0x1ec>
 8003f88:	a201      	add	r2, pc, #4	@ (adr r2, 8003f90 <menu_select+0x1c>)
 8003f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f8e:	bf00      	nop
 8003f90:	08003fe1 	.word	0x08003fe1
 8003f94:	08003fe9 	.word	0x08003fe9
 8003f98:	08003ff5 	.word	0x08003ff5
 8003f9c:	08004063 	.word	0x08004063
 8003fa0:	0800406f 	.word	0x0800406f
 8003fa4:	0800408f 	.word	0x0800408f
 8003fa8:	08004097 	.word	0x08004097
 8003fac:	0800409f 	.word	0x0800409f
 8003fb0:	080040a7 	.word	0x080040a7
 8003fb4:	080040af 	.word	0x080040af
 8003fb8:	080040bb 	.word	0x080040bb
 8003fbc:	080040c3 	.word	0x080040c3
 8003fc0:	080040cb 	.word	0x080040cb
 8003fc4:	080040d7 	.word	0x080040d7
 8003fc8:	080040f5 	.word	0x080040f5
 8003fcc:	080040fd 	.word	0x080040fd
 8003fd0:	08004105 	.word	0x08004105
 8003fd4:	08004145 	.word	0x08004145
 8003fd8:	0800414d 	.word	0x0800414d
 8003fdc:	08004155 	.word	0x08004155
        case UI_WELCOME: ui = UI_DASH; break;
 8003fe0:	4b63      	ldr	r3, [pc, #396]	@ (8004170 <menu_select+0x1fc>)
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	701a      	strb	r2, [r3, #0]
 8003fe6:	e0bc      	b.n	8004162 <menu_select+0x1ee>
        case UI_DASH: ui = UI_MENU; goto_menu_top(); break;
 8003fe8:	4b61      	ldr	r3, [pc, #388]	@ (8004170 <menu_select+0x1fc>)
 8003fea:	2202      	movs	r2, #2
 8003fec:	701a      	strb	r2, [r3, #0]
 8003fee:	f7ff f9b9 	bl	8003364 <goto_menu_top>
 8003ff2:	e0b6      	b.n	8004162 <menu_select+0x1ee>

        case UI_MENU:
            switch (menu_idx){
 8003ff4:	4b5f      	ldr	r3, [pc, #380]	@ (8004174 <menu_select+0x200>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2b06      	cmp	r3, #6
 8003ffa:	d82d      	bhi.n	8004058 <menu_select+0xe4>
 8003ffc:	a201      	add	r2, pc, #4	@ (adr r2, 8004004 <menu_select+0x90>)
 8003ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004002:	bf00      	nop
 8004004:	08004021 	.word	0x08004021
 8004008:	08004029 	.word	0x08004029
 800400c:	08004031 	.word	0x08004031
 8004010:	08004039 	.word	0x08004039
 8004014:	08004041 	.word	0x08004041
 8004018:	08004049 	.word	0x08004049
 800401c:	08004051 	.word	0x08004051
                case 0: ui = UI_MANUAL; break;
 8004020:	4b53      	ldr	r3, [pc, #332]	@ (8004170 <menu_select+0x1fc>)
 8004022:	2203      	movs	r2, #3
 8004024:	701a      	strb	r2, [r3, #0]
 8004026:	e01b      	b.n	8004060 <menu_select+0xec>
                case 1: ui = UI_SEMI_AUTO; break;
 8004028:	4b51      	ldr	r3, [pc, #324]	@ (8004170 <menu_select+0x1fc>)
 800402a:	2204      	movs	r2, #4
 800402c:	701a      	strb	r2, [r3, #0]
 800402e:	e017      	b.n	8004060 <menu_select+0xec>
                case 2: ui = UI_TIMER; break;
 8004030:	4b4f      	ldr	r3, [pc, #316]	@ (8004170 <menu_select+0x1fc>)
 8004032:	2205      	movs	r2, #5
 8004034:	701a      	strb	r2, [r3, #0]
 8004036:	e013      	b.n	8004060 <menu_select+0xec>
                case 3: ui = UI_SEARCH; break;
 8004038:	4b4d      	ldr	r3, [pc, #308]	@ (8004170 <menu_select+0x1fc>)
 800403a:	220a      	movs	r2, #10
 800403c:	701a      	strb	r2, [r3, #0]
 800403e:	e00f      	b.n	8004060 <menu_select+0xec>
                case 4: ui = UI_COUNTDOWN; break;
 8004040:	4b4b      	ldr	r3, [pc, #300]	@ (8004170 <menu_select+0x1fc>)
 8004042:	220d      	movs	r2, #13
 8004044:	701a      	strb	r2, [r3, #0]
 8004046:	e00b      	b.n	8004060 <menu_select+0xec>
                case 5: ui = UI_TWIST; break;
 8004048:	4b49      	ldr	r3, [pc, #292]	@ (8004170 <menu_select+0x1fc>)
 800404a:	2211      	movs	r2, #17
 800404c:	701a      	strb	r2, [r3, #0]
 800404e:	e007      	b.n	8004060 <menu_select+0xec>
                case 6: ui = UI_DASH; break;
 8004050:	4b47      	ldr	r3, [pc, #284]	@ (8004170 <menu_select+0x1fc>)
 8004052:	2201      	movs	r2, #1
 8004054:	701a      	strb	r2, [r3, #0]
 8004056:	e003      	b.n	8004060 <menu_select+0xec>
                default: ui = UI_DASH; break;
 8004058:	4b45      	ldr	r3, [pc, #276]	@ (8004170 <menu_select+0x1fc>)
 800405a:	2201      	movs	r2, #1
 800405c:	701a      	strb	r2, [r3, #0]
 800405e:	bf00      	nop
            }
            break;
 8004060:	e07f      	b.n	8004162 <menu_select+0x1ee>

        case UI_MANUAL:
            ModelHandle_ToggleManual();
 8004062:	f7fe fcf9 	bl	8002a58 <ModelHandle_ToggleManual>
            screenNeedsRefresh = true;
 8004066:	4b44      	ldr	r3, [pc, #272]	@ (8004178 <menu_select+0x204>)
 8004068:	2201      	movs	r2, #1
 800406a:	701a      	strb	r2, [r3, #0]
            break;
 800406c:	e079      	b.n	8004162 <menu_select+0x1ee>

        case UI_SEMI_AUTO:
            if (!semiAutoEnabled) enable_semi_auto();
 800406e:	4b43      	ldr	r3, [pc, #268]	@ (800417c <menu_select+0x208>)
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	f083 0301 	eor.w	r3, r3, #1
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b00      	cmp	r3, #0
 800407a:	d002      	beq.n	8004082 <menu_select+0x10e>
 800407c:	f7ff fc72 	bl	8003964 <enable_semi_auto>
 8004080:	e001      	b.n	8004086 <menu_select+0x112>
            else disable_semi_auto();
 8004082:	f7ff fc7d 	bl	8003980 <disable_semi_auto>
            ui = UI_DASH;
 8004086:	4b3a      	ldr	r3, [pc, #232]	@ (8004170 <menu_select+0x1fc>)
 8004088:	2201      	movs	r2, #1
 800408a:	701a      	strb	r2, [r3, #0]
            break;
 800408c:	e069      	b.n	8004162 <menu_select+0x1ee>

        case UI_TIMER: ui = UI_TIMER_EDIT_ON_H; break;
 800408e:	4b38      	ldr	r3, [pc, #224]	@ (8004170 <menu_select+0x1fc>)
 8004090:	2206      	movs	r2, #6
 8004092:	701a      	strb	r2, [r3, #0]
 8004094:	e065      	b.n	8004162 <menu_select+0x1ee>
        case UI_TIMER_EDIT_ON_H: ui = UI_TIMER_EDIT_ON_M; break;
 8004096:	4b36      	ldr	r3, [pc, #216]	@ (8004170 <menu_select+0x1fc>)
 8004098:	2207      	movs	r2, #7
 800409a:	701a      	strb	r2, [r3, #0]
 800409c:	e061      	b.n	8004162 <menu_select+0x1ee>
        case UI_TIMER_EDIT_ON_M: ui = UI_TIMER_EDIT_OFF_H; break;
 800409e:	4b34      	ldr	r3, [pc, #208]	@ (8004170 <menu_select+0x1fc>)
 80040a0:	2208      	movs	r2, #8
 80040a2:	701a      	strb	r2, [r3, #0]
 80040a4:	e05d      	b.n	8004162 <menu_select+0x1ee>
        case UI_TIMER_EDIT_OFF_H: ui = UI_TIMER_EDIT_OFF_M; break;
 80040a6:	4b32      	ldr	r3, [pc, #200]	@ (8004170 <menu_select+0x1fc>)
 80040a8:	2209      	movs	r2, #9
 80040aa:	701a      	strb	r2, [r3, #0]
 80040ac:	e059      	b.n	8004162 <menu_select+0x1ee>
        case UI_TIMER_EDIT_OFF_M:
            apply_timer_settings();
 80040ae:	f7ff fc73 	bl	8003998 <apply_timer_settings>
            ui = UI_TIMER;
 80040b2:	4b2f      	ldr	r3, [pc, #188]	@ (8004170 <menu_select+0x1fc>)
 80040b4:	2205      	movs	r2, #5
 80040b6:	701a      	strb	r2, [r3, #0]
            break;
 80040b8:	e053      	b.n	8004162 <menu_select+0x1ee>

        case UI_SEARCH: ui = UI_SEARCH_EDIT_GAP; break;
 80040ba:	4b2d      	ldr	r3, [pc, #180]	@ (8004170 <menu_select+0x1fc>)
 80040bc:	220b      	movs	r2, #11
 80040be:	701a      	strb	r2, [r3, #0]
 80040c0:	e04f      	b.n	8004162 <menu_select+0x1ee>
        case UI_SEARCH_EDIT_GAP: ui = UI_SEARCH_EDIT_DRY; break;
 80040c2:	4b2b      	ldr	r3, [pc, #172]	@ (8004170 <menu_select+0x1fc>)
 80040c4:	220c      	movs	r2, #12
 80040c6:	701a      	strb	r2, [r3, #0]
 80040c8:	e04b      	b.n	8004162 <menu_select+0x1ee>
        case UI_SEARCH_EDIT_DRY:
            apply_search_settings();
 80040ca:	f7ff fc0f 	bl	80038ec <apply_search_settings>
            ui = UI_SEARCH; break;
 80040ce:	4b28      	ldr	r3, [pc, #160]	@ (8004170 <menu_select+0x1fc>)
 80040d0:	220a      	movs	r2, #10
 80040d2:	701a      	strb	r2, [r3, #0]
 80040d4:	e045      	b.n	8004162 <menu_select+0x1ee>

        case UI_COUNTDOWN:
            if (countdownActive) {
 80040d6:	4b2a      	ldr	r3, [pc, #168]	@ (8004180 <menu_select+0x20c>)
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d005      	beq.n	80040ec <menu_select+0x178>
                ModelHandle_StopCountdown();
 80040e0:	f7fe fd18 	bl	8002b14 <ModelHandle_StopCountdown>
                screenNeedsRefresh = true;
 80040e4:	4b24      	ldr	r3, [pc, #144]	@ (8004178 <menu_select+0x204>)
 80040e6:	2201      	movs	r2, #1
 80040e8:	701a      	strb	r2, [r3, #0]
            } else {
                ui = UI_COUNTDOWN_EDIT_MIN;
            }
            break;
 80040ea:	e03a      	b.n	8004162 <menu_select+0x1ee>
                ui = UI_COUNTDOWN_EDIT_MIN;
 80040ec:	4b20      	ldr	r3, [pc, #128]	@ (8004170 <menu_select+0x1fc>)
 80040ee:	220e      	movs	r2, #14
 80040f0:	701a      	strb	r2, [r3, #0]
            break;
 80040f2:	e036      	b.n	8004162 <menu_select+0x1ee>


        case UI_COUNTDOWN_EDIT_MIN:
            ui = UI_COUNTDOWN_EDIT_REP;
 80040f4:	4b1e      	ldr	r3, [pc, #120]	@ (8004170 <menu_select+0x1fc>)
 80040f6:	220f      	movs	r2, #15
 80040f8:	701a      	strb	r2, [r3, #0]
            break;
 80040fa:	e032      	b.n	8004162 <menu_select+0x1ee>

        case UI_COUNTDOWN_EDIT_REP:
            // after repeats, go to enable/edit screen
            ui = UI_COUNTDOWN_TOGGLE;
 80040fc:	4b1c      	ldr	r3, [pc, #112]	@ (8004170 <menu_select+0x1fc>)
 80040fe:	2210      	movs	r2, #16
 8004100:	701a      	strb	r2, [r3, #0]
            break;
 8004102:	e02e      	b.n	8004162 <menu_select+0x1ee>

        case UI_COUNTDOWN_TOGGLE:
            // Enable or Edit based on menu index
            // For simplicity, SELECT always means "Enable"
            {
                uint32_t seconds = (uint32_t)edit_countdown_min * 60u;
 8004104:	4b1f      	ldr	r3, [pc, #124]	@ (8004184 <menu_select+0x210>)
 8004106:	881b      	ldrh	r3, [r3, #0]
 8004108:	461a      	mov	r2, r3
 800410a:	4613      	mov	r3, r2
 800410c:	011b      	lsls	r3, r3, #4
 800410e:	1a9b      	subs	r3, r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	607b      	str	r3, [r7, #4]
                if (seconds == 0) seconds = 60;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <menu_select+0x1aa>
 800411a:	233c      	movs	r3, #60	@ 0x3c
 800411c:	607b      	str	r3, [r7, #4]
                if (edit_countdown_rep == 0) edit_countdown_rep = 1;
 800411e:	4b1a      	ldr	r3, [pc, #104]	@ (8004188 <menu_select+0x214>)
 8004120:	881b      	ldrh	r3, [r3, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d102      	bne.n	800412c <menu_select+0x1b8>
 8004126:	4b18      	ldr	r3, [pc, #96]	@ (8004188 <menu_select+0x214>)
 8004128:	2201      	movs	r2, #1
 800412a:	801a      	strh	r2, [r3, #0]
                apply_countdown_settings();
 800412c:	f7ff fc06 	bl	800393c <apply_countdown_settings>
                ModelHandle_StartCountdown(seconds, (uint16_t)edit_countdown_rep);
 8004130:	4b15      	ldr	r3, [pc, #84]	@ (8004188 <menu_select+0x214>)
 8004132:	881b      	ldrh	r3, [r3, #0]
 8004134:	4619      	mov	r1, r3
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7fe fd32 	bl	8002ba0 <ModelHandle_StartCountdown>
                ui = UI_COUNTDOWN;
 800413c:	4b0c      	ldr	r3, [pc, #48]	@ (8004170 <menu_select+0x1fc>)
 800413e:	220d      	movs	r2, #13
 8004140:	701a      	strb	r2, [r3, #0]
            }
            break;
 8004142:	e00e      	b.n	8004162 <menu_select+0x1ee>


        case UI_TWIST: ui = UI_TWIST_EDIT_ON; break;
 8004144:	4b0a      	ldr	r3, [pc, #40]	@ (8004170 <menu_select+0x1fc>)
 8004146:	2212      	movs	r2, #18
 8004148:	701a      	strb	r2, [r3, #0]
 800414a:	e00a      	b.n	8004162 <menu_select+0x1ee>
        case UI_TWIST_EDIT_ON: ui = UI_TWIST_EDIT_OFF; break;
 800414c:	4b08      	ldr	r3, [pc, #32]	@ (8004170 <menu_select+0x1fc>)
 800414e:	2213      	movs	r2, #19
 8004150:	701a      	strb	r2, [r3, #0]
 8004152:	e006      	b.n	8004162 <menu_select+0x1ee>
        case UI_TWIST_EDIT_OFF:
            apply_twist_settings();
 8004154:	f7ff fbde 	bl	8003914 <apply_twist_settings>
            ui = UI_TWIST; break;
 8004158:	4b05      	ldr	r3, [pc, #20]	@ (8004170 <menu_select+0x1fc>)
 800415a:	2211      	movs	r2, #17
 800415c:	701a      	strb	r2, [r3, #0]
 800415e:	e000      	b.n	8004162 <menu_select+0x1ee>

        default: break;
 8004160:	bf00      	nop
    }
    screenNeedsRefresh = true;
 8004162:	4b05      	ldr	r3, [pc, #20]	@ (8004178 <menu_select+0x204>)
 8004164:	2201      	movs	r2, #1
 8004166:	701a      	strb	r2, [r3, #0]
}
 8004168:	bf00      	nop
 800416a:	3708      	adds	r7, #8
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	200005e4 	.word	0x200005e4
 8004174:	200005f4 	.word	0x200005f4
 8004178:	200005e5 	.word	0x200005e5
 800417c:	200005f0 	.word	0x200005f0
 8004180:	20000572 	.word	0x20000572
 8004184:	20000054 	.word	0x20000054
 8004188:	20000056 	.word	0x20000056

0800418c <menu_reset>:

static void menu_reset(void){
 800418c:	b580      	push	{r7, lr}
 800418e:	af00      	add	r7, sp, #0
    refreshInactivityTimer();
 8004190:	f7ff f8dc 	bl	800334c <refreshInactivityTimer>

    switch (ui) {
 8004194:	4b29      	ldr	r3, [pc, #164]	@ (800423c <menu_reset+0xb0>)
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	3b01      	subs	r3, #1
 800419a:	2b12      	cmp	r3, #18
 800419c:	d844      	bhi.n	8004228 <menu_reset+0x9c>
 800419e:	a201      	add	r2, pc, #4	@ (adr r2, 80041a4 <menu_reset+0x18>)
 80041a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a4:	08004201 	.word	0x08004201
 80041a8:	080041f9 	.word	0x080041f9
 80041ac:	080041f1 	.word	0x080041f1
 80041b0:	080041f1 	.word	0x080041f1
 80041b4:	080041f1 	.word	0x080041f1
 80041b8:	08004209 	.word	0x08004209
 80041bc:	08004209 	.word	0x08004209
 80041c0:	08004209 	.word	0x08004209
 80041c4:	08004209 	.word	0x08004209
 80041c8:	080041f1 	.word	0x080041f1
 80041cc:	08004211 	.word	0x08004211
 80041d0:	08004211 	.word	0x08004211
 80041d4:	080041f1 	.word	0x080041f1
 80041d8:	08004219 	.word	0x08004219
 80041dc:	08004219 	.word	0x08004219
 80041e0:	08004229 	.word	0x08004229
 80041e4:	080041f1 	.word	0x080041f1
 80041e8:	08004221 	.word	0x08004221
 80041ec:	08004221 	.word	0x08004221
        case UI_MANUAL:
        case UI_SEMI_AUTO:
        case UI_TIMER:
        case UI_SEARCH:
        case UI_COUNTDOWN:
        case UI_TWIST: ui = UI_MENU; break;
 80041f0:	4b12      	ldr	r3, [pc, #72]	@ (800423c <menu_reset+0xb0>)
 80041f2:	2202      	movs	r2, #2
 80041f4:	701a      	strb	r2, [r3, #0]
 80041f6:	e01b      	b.n	8004230 <menu_reset+0xa4>
        case UI_MENU: ui = UI_DASH; break;
 80041f8:	4b10      	ldr	r3, [pc, #64]	@ (800423c <menu_reset+0xb0>)
 80041fa:	2201      	movs	r2, #1
 80041fc:	701a      	strb	r2, [r3, #0]
 80041fe:	e017      	b.n	8004230 <menu_reset+0xa4>
        case UI_DASH: ui = UI_WELCOME; break;
 8004200:	4b0e      	ldr	r3, [pc, #56]	@ (800423c <menu_reset+0xb0>)
 8004202:	2200      	movs	r2, #0
 8004204:	701a      	strb	r2, [r3, #0]
 8004206:	e013      	b.n	8004230 <menu_reset+0xa4>
        case UI_TIMER_EDIT_ON_H:
        case UI_TIMER_EDIT_ON_M:
        case UI_TIMER_EDIT_OFF_H:
        case UI_TIMER_EDIT_OFF_M: ui = UI_TIMER; break;
 8004208:	4b0c      	ldr	r3, [pc, #48]	@ (800423c <menu_reset+0xb0>)
 800420a:	2205      	movs	r2, #5
 800420c:	701a      	strb	r2, [r3, #0]
 800420e:	e00f      	b.n	8004230 <menu_reset+0xa4>
        case UI_SEARCH_EDIT_GAP:
        case UI_SEARCH_EDIT_DRY: ui = UI_SEARCH; break;
 8004210:	4b0a      	ldr	r3, [pc, #40]	@ (800423c <menu_reset+0xb0>)
 8004212:	220a      	movs	r2, #10
 8004214:	701a      	strb	r2, [r3, #0]
 8004216:	e00b      	b.n	8004230 <menu_reset+0xa4>
        case UI_COUNTDOWN_EDIT_MIN:
        case UI_COUNTDOWN_EDIT_REP: ui = UI_COUNTDOWN; break;  // NEW: back from repeats editor
 8004218:	4b08      	ldr	r3, [pc, #32]	@ (800423c <menu_reset+0xb0>)
 800421a:	220d      	movs	r2, #13
 800421c:	701a      	strb	r2, [r3, #0]
 800421e:	e007      	b.n	8004230 <menu_reset+0xa4>
        case UI_TWIST_EDIT_ON:
        case UI_TWIST_EDIT_OFF: ui = UI_TWIST; break;
 8004220:	4b06      	ldr	r3, [pc, #24]	@ (800423c <menu_reset+0xb0>)
 8004222:	2211      	movs	r2, #17
 8004224:	701a      	strb	r2, [r3, #0]
 8004226:	e003      	b.n	8004230 <menu_reset+0xa4>
        default: ui = UI_MENU; break;
 8004228:	4b04      	ldr	r3, [pc, #16]	@ (800423c <menu_reset+0xb0>)
 800422a:	2202      	movs	r2, #2
 800422c:	701a      	strb	r2, [r3, #0]
 800422e:	bf00      	nop
    }
    screenNeedsRefresh = true;
 8004230:	4b03      	ldr	r3, [pc, #12]	@ (8004240 <menu_reset+0xb4>)
 8004232:	2201      	movs	r2, #1
 8004234:	701a      	strb	r2, [r3, #0]
}
 8004236:	bf00      	nop
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	200005e4 	.word	0x200005e4
 8004240:	200005e5 	.word	0x200005e5

08004244 <Screen_HandleButton>:

/* ===== Public button handler ===== */
void Screen_HandleButton(UiButton b){
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	4603      	mov	r3, r0
 800424c:	71fb      	strb	r3, [r7, #7]
    if (b == BTN_RESET){
 800424e:	79fb      	ldrb	r3, [r7, #7]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d102      	bne.n	800425a <Screen_HandleButton+0x16>
        ModelHandle_ToggleManual();
 8004254:	f7fe fc00 	bl	8002a58 <ModelHandle_ToggleManual>
        return;
 8004258:	e18d      	b.n	8004576 <Screen_HandleButton+0x332>
    }
    if (b == BTN_UP) {
 800425a:	79fb      	ldrb	r3, [r7, #7]
 800425c:	2b03      	cmp	r3, #3
 800425e:	f040 80a3 	bne.w	80043a8 <Screen_HandleButton+0x164>
        switch (ui) {
 8004262:	4b9c      	ldr	r3, [pc, #624]	@ (80044d4 <Screen_HandleButton+0x290>)
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	3b02      	subs	r3, #2
 8004268:	2b11      	cmp	r3, #17
 800426a:	f200 808e 	bhi.w	800438a <Screen_HandleButton+0x146>
 800426e:	a201      	add	r2, pc, #4	@ (adr r2, 8004274 <Screen_HandleButton+0x30>)
 8004270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004274:	080042bd 	.word	0x080042bd
 8004278:	0800438b 	.word	0x0800438b
 800427c:	0800438b 	.word	0x0800438b
 8004280:	0800438b 	.word	0x0800438b
 8004284:	080042d1 	.word	0x080042d1
 8004288:	080042e7 	.word	0x080042e7
 800428c:	080042fd 	.word	0x080042fd
 8004290:	08004313 	.word	0x08004313
 8004294:	0800438b 	.word	0x0800438b
 8004298:	08004329 	.word	0x08004329
 800429c:	08004337 	.word	0x08004337
 80042a0:	0800438b 	.word	0x0800438b
 80042a4:	08004345 	.word	0x08004345
 80042a8:	08004353 	.word	0x08004353
 80042ac:	08004361 	.word	0x08004361
 80042b0:	0800438b 	.word	0x0800438b
 80042b4:	0800436f 	.word	0x0800436f
 80042b8:	0800437d 	.word	0x0800437d
            case UI_MENU: if (menu_idx > 0) menu_idx--; break;
 80042bc:	4b86      	ldr	r3, [pc, #536]	@ (80044d8 <Screen_HandleButton+0x294>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	dd64      	ble.n	800438e <Screen_HandleButton+0x14a>
 80042c4:	4b84      	ldr	r3, [pc, #528]	@ (80044d8 <Screen_HandleButton+0x294>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	3b01      	subs	r3, #1
 80042ca:	4a83      	ldr	r2, [pc, #524]	@ (80044d8 <Screen_HandleButton+0x294>)
 80042cc:	6013      	str	r3, [r2, #0]
 80042ce:	e05e      	b.n	800438e <Screen_HandleButton+0x14a>
            case UI_TIMER_EDIT_ON_H: if (edit_timer_on_h < 23) edit_timer_on_h++; break;
 80042d0:	4b82      	ldr	r3, [pc, #520]	@ (80044dc <Screen_HandleButton+0x298>)
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	2b16      	cmp	r3, #22
 80042d6:	d85c      	bhi.n	8004392 <Screen_HandleButton+0x14e>
 80042d8:	4b80      	ldr	r3, [pc, #512]	@ (80044dc <Screen_HandleButton+0x298>)
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	3301      	adds	r3, #1
 80042de:	b2da      	uxtb	r2, r3
 80042e0:	4b7e      	ldr	r3, [pc, #504]	@ (80044dc <Screen_HandleButton+0x298>)
 80042e2:	701a      	strb	r2, [r3, #0]
 80042e4:	e055      	b.n	8004392 <Screen_HandleButton+0x14e>
            case UI_TIMER_EDIT_ON_M: if (edit_timer_on_m < 59) edit_timer_on_m++; break;
 80042e6:	4b7e      	ldr	r3, [pc, #504]	@ (80044e0 <Screen_HandleButton+0x29c>)
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	2b3a      	cmp	r3, #58	@ 0x3a
 80042ec:	d853      	bhi.n	8004396 <Screen_HandleButton+0x152>
 80042ee:	4b7c      	ldr	r3, [pc, #496]	@ (80044e0 <Screen_HandleButton+0x29c>)
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	3301      	adds	r3, #1
 80042f4:	b2da      	uxtb	r2, r3
 80042f6:	4b7a      	ldr	r3, [pc, #488]	@ (80044e0 <Screen_HandleButton+0x29c>)
 80042f8:	701a      	strb	r2, [r3, #0]
 80042fa:	e04c      	b.n	8004396 <Screen_HandleButton+0x152>
            case UI_TIMER_EDIT_OFF_H: if (edit_timer_off_h < 23) edit_timer_off_h++; break;
 80042fc:	4b79      	ldr	r3, [pc, #484]	@ (80044e4 <Screen_HandleButton+0x2a0>)
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	2b16      	cmp	r3, #22
 8004302:	d84a      	bhi.n	800439a <Screen_HandleButton+0x156>
 8004304:	4b77      	ldr	r3, [pc, #476]	@ (80044e4 <Screen_HandleButton+0x2a0>)
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	3301      	adds	r3, #1
 800430a:	b2da      	uxtb	r2, r3
 800430c:	4b75      	ldr	r3, [pc, #468]	@ (80044e4 <Screen_HandleButton+0x2a0>)
 800430e:	701a      	strb	r2, [r3, #0]
 8004310:	e043      	b.n	800439a <Screen_HandleButton+0x156>
            case UI_TIMER_EDIT_OFF_M: if (edit_timer_off_m < 59) edit_timer_off_m++; break;
 8004312:	4b75      	ldr	r3, [pc, #468]	@ (80044e8 <Screen_HandleButton+0x2a4>)
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	2b3a      	cmp	r3, #58	@ 0x3a
 8004318:	d841      	bhi.n	800439e <Screen_HandleButton+0x15a>
 800431a:	4b73      	ldr	r3, [pc, #460]	@ (80044e8 <Screen_HandleButton+0x2a4>)
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	3301      	adds	r3, #1
 8004320:	b2da      	uxtb	r2, r3
 8004322:	4b71      	ldr	r3, [pc, #452]	@ (80044e8 <Screen_HandleButton+0x2a4>)
 8004324:	701a      	strb	r2, [r3, #0]
 8004326:	e03a      	b.n	800439e <Screen_HandleButton+0x15a>
            case UI_SEARCH_EDIT_GAP:  edit_search_gap_s += 5; break;
 8004328:	4b70      	ldr	r3, [pc, #448]	@ (80044ec <Screen_HandleButton+0x2a8>)
 800432a:	881b      	ldrh	r3, [r3, #0]
 800432c:	3305      	adds	r3, #5
 800432e:	b29a      	uxth	r2, r3
 8004330:	4b6e      	ldr	r3, [pc, #440]	@ (80044ec <Screen_HandleButton+0x2a8>)
 8004332:	801a      	strh	r2, [r3, #0]
 8004334:	e034      	b.n	80043a0 <Screen_HandleButton+0x15c>
            case UI_SEARCH_EDIT_DRY:  edit_search_dry_s += 1; break;
 8004336:	4b6e      	ldr	r3, [pc, #440]	@ (80044f0 <Screen_HandleButton+0x2ac>)
 8004338:	881b      	ldrh	r3, [r3, #0]
 800433a:	3301      	adds	r3, #1
 800433c:	b29a      	uxth	r2, r3
 800433e:	4b6c      	ldr	r3, [pc, #432]	@ (80044f0 <Screen_HandleButton+0x2ac>)
 8004340:	801a      	strh	r2, [r3, #0]
 8004342:	e02d      	b.n	80043a0 <Screen_HandleButton+0x15c>
            case UI_COUNTDOWN_EDIT_MIN: edit_countdown_min++; break;
 8004344:	4b6b      	ldr	r3, [pc, #428]	@ (80044f4 <Screen_HandleButton+0x2b0>)
 8004346:	881b      	ldrh	r3, [r3, #0]
 8004348:	3301      	adds	r3, #1
 800434a:	b29a      	uxth	r2, r3
 800434c:	4b69      	ldr	r3, [pc, #420]	@ (80044f4 <Screen_HandleButton+0x2b0>)
 800434e:	801a      	strh	r2, [r3, #0]
 8004350:	e026      	b.n	80043a0 <Screen_HandleButton+0x15c>
            case UI_COUNTDOWN_EDIT_REP: edit_countdown_rep++; break; // NEW
 8004352:	4b69      	ldr	r3, [pc, #420]	@ (80044f8 <Screen_HandleButton+0x2b4>)
 8004354:	881b      	ldrh	r3, [r3, #0]
 8004356:	3301      	adds	r3, #1
 8004358:	b29a      	uxth	r2, r3
 800435a:	4b67      	ldr	r3, [pc, #412]	@ (80044f8 <Screen_HandleButton+0x2b4>)
 800435c:	801a      	strh	r2, [r3, #0]
 800435e:	e01f      	b.n	80043a0 <Screen_HandleButton+0x15c>
            case UI_COUNTDOWN_TOGGLE:
                // toggle between Enable/Edit
                // We'll simulate a small cursor toggle
                // For now, just re-use DOWN to go back to edit
                ui = UI_COUNTDOWN_EDIT_MIN;
 8004360:	4b5c      	ldr	r3, [pc, #368]	@ (80044d4 <Screen_HandleButton+0x290>)
 8004362:	220e      	movs	r2, #14
 8004364:	701a      	strb	r2, [r3, #0]
                screenNeedsRefresh = true;
 8004366:	4b65      	ldr	r3, [pc, #404]	@ (80044fc <Screen_HandleButton+0x2b8>)
 8004368:	2201      	movs	r2, #1
 800436a:	701a      	strb	r2, [r3, #0]
                return;
 800436c:	e103      	b.n	8004576 <Screen_HandleButton+0x332>

            case UI_TWIST_EDIT_ON:   edit_twist_on_s += 1; break;
 800436e:	4b64      	ldr	r3, [pc, #400]	@ (8004500 <Screen_HandleButton+0x2bc>)
 8004370:	881b      	ldrh	r3, [r3, #0]
 8004372:	3301      	adds	r3, #1
 8004374:	b29a      	uxth	r2, r3
 8004376:	4b62      	ldr	r3, [pc, #392]	@ (8004500 <Screen_HandleButton+0x2bc>)
 8004378:	801a      	strh	r2, [r3, #0]
 800437a:	e011      	b.n	80043a0 <Screen_HandleButton+0x15c>
            case UI_TWIST_EDIT_OFF:  edit_twist_off_s += 1; break;
 800437c:	4b61      	ldr	r3, [pc, #388]	@ (8004504 <Screen_HandleButton+0x2c0>)
 800437e:	881b      	ldrh	r3, [r3, #0]
 8004380:	3301      	adds	r3, #1
 8004382:	b29a      	uxth	r2, r3
 8004384:	4b5f      	ldr	r3, [pc, #380]	@ (8004504 <Screen_HandleButton+0x2c0>)
 8004386:	801a      	strh	r2, [r3, #0]
 8004388:	e00a      	b.n	80043a0 <Screen_HandleButton+0x15c>
            default: break;
 800438a:	bf00      	nop
 800438c:	e008      	b.n	80043a0 <Screen_HandleButton+0x15c>
            case UI_MENU: if (menu_idx > 0) menu_idx--; break;
 800438e:	bf00      	nop
 8004390:	e006      	b.n	80043a0 <Screen_HandleButton+0x15c>
            case UI_TIMER_EDIT_ON_H: if (edit_timer_on_h < 23) edit_timer_on_h++; break;
 8004392:	bf00      	nop
 8004394:	e004      	b.n	80043a0 <Screen_HandleButton+0x15c>
            case UI_TIMER_EDIT_ON_M: if (edit_timer_on_m < 59) edit_timer_on_m++; break;
 8004396:	bf00      	nop
 8004398:	e002      	b.n	80043a0 <Screen_HandleButton+0x15c>
            case UI_TIMER_EDIT_OFF_H: if (edit_timer_off_h < 23) edit_timer_off_h++; break;
 800439a:	bf00      	nop
 800439c:	e000      	b.n	80043a0 <Screen_HandleButton+0x15c>
            case UI_TIMER_EDIT_OFF_M: if (edit_timer_off_m < 59) edit_timer_off_m++; break;
 800439e:	bf00      	nop
        }
        screenNeedsRefresh = true; return;
 80043a0:	4b56      	ldr	r3, [pc, #344]	@ (80044fc <Screen_HandleButton+0x2b8>)
 80043a2:	2201      	movs	r2, #1
 80043a4:	701a      	strb	r2, [r3, #0]
 80043a6:	e0e6      	b.n	8004576 <Screen_HandleButton+0x332>
    }
    if (b == BTN_DOWN) {
 80043a8:	79fb      	ldrb	r3, [r7, #7]
 80043aa:	2b04      	cmp	r3, #4
 80043ac:	f040 80dd 	bne.w	800456a <Screen_HandleButton+0x326>
        switch (ui) {
 80043b0:	4b48      	ldr	r3, [pc, #288]	@ (80044d4 <Screen_HandleButton+0x290>)
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	3b02      	subs	r3, #2
 80043b6:	2b11      	cmp	r3, #17
 80043b8:	f200 80bc 	bhi.w	8004534 <Screen_HandleButton+0x2f0>
 80043bc:	a201      	add	r2, pc, #4	@ (adr r2, 80043c4 <Screen_HandleButton+0x180>)
 80043be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c2:	bf00      	nop
 80043c4:	0800440d 	.word	0x0800440d
 80043c8:	08004535 	.word	0x08004535
 80043cc:	08004535 	.word	0x08004535
 80043d0:	08004535 	.word	0x08004535
 80043d4:	08004423 	.word	0x08004423
 80043d8:	0800443b 	.word	0x0800443b
 80043dc:	08004451 	.word	0x08004451
 80043e0:	08004467 	.word	0x08004467
 80043e4:	08004535 	.word	0x08004535
 80043e8:	0800447d 	.word	0x0800447d
 80043ec:	08004493 	.word	0x08004493
 80043f0:	08004535 	.word	0x08004535
 80043f4:	080044a9 	.word	0x080044a9
 80043f8:	080044bf 	.word	0x080044bf
 80043fc:	08004535 	.word	0x08004535
 8004400:	08004535 	.word	0x08004535
 8004404:	08004509 	.word	0x08004509
 8004408:	0800451f 	.word	0x0800451f
            case UI_MENU: if (menu_idx < (int)(MAIN_MENU_COUNT-1)) menu_idx++; break;
 800440c:	4b32      	ldr	r3, [pc, #200]	@ (80044d8 <Screen_HandleButton+0x294>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2b05      	cmp	r3, #5
 8004412:	f300 8091 	bgt.w	8004538 <Screen_HandleButton+0x2f4>
 8004416:	4b30      	ldr	r3, [pc, #192]	@ (80044d8 <Screen_HandleButton+0x294>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	3301      	adds	r3, #1
 800441c:	4a2e      	ldr	r2, [pc, #184]	@ (80044d8 <Screen_HandleButton+0x294>)
 800441e:	6013      	str	r3, [r2, #0]
 8004420:	e08a      	b.n	8004538 <Screen_HandleButton+0x2f4>
            case UI_TIMER_EDIT_ON_H: if (edit_timer_on_h > 0) edit_timer_on_h--; break;
 8004422:	4b2e      	ldr	r3, [pc, #184]	@ (80044dc <Screen_HandleButton+0x298>)
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	f000 8088 	beq.w	800453c <Screen_HandleButton+0x2f8>
 800442c:	4b2b      	ldr	r3, [pc, #172]	@ (80044dc <Screen_HandleButton+0x298>)
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	3b01      	subs	r3, #1
 8004432:	b2da      	uxtb	r2, r3
 8004434:	4b29      	ldr	r3, [pc, #164]	@ (80044dc <Screen_HandleButton+0x298>)
 8004436:	701a      	strb	r2, [r3, #0]
 8004438:	e080      	b.n	800453c <Screen_HandleButton+0x2f8>
            case UI_TIMER_EDIT_ON_M: if (edit_timer_on_m > 0) edit_timer_on_m--; break;
 800443a:	4b29      	ldr	r3, [pc, #164]	@ (80044e0 <Screen_HandleButton+0x29c>)
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d07e      	beq.n	8004540 <Screen_HandleButton+0x2fc>
 8004442:	4b27      	ldr	r3, [pc, #156]	@ (80044e0 <Screen_HandleButton+0x29c>)
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	3b01      	subs	r3, #1
 8004448:	b2da      	uxtb	r2, r3
 800444a:	4b25      	ldr	r3, [pc, #148]	@ (80044e0 <Screen_HandleButton+0x29c>)
 800444c:	701a      	strb	r2, [r3, #0]
 800444e:	e077      	b.n	8004540 <Screen_HandleButton+0x2fc>
            case UI_TIMER_EDIT_OFF_H: if (edit_timer_off_h > 0) edit_timer_off_h--; break;
 8004450:	4b24      	ldr	r3, [pc, #144]	@ (80044e4 <Screen_HandleButton+0x2a0>)
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d075      	beq.n	8004544 <Screen_HandleButton+0x300>
 8004458:	4b22      	ldr	r3, [pc, #136]	@ (80044e4 <Screen_HandleButton+0x2a0>)
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	3b01      	subs	r3, #1
 800445e:	b2da      	uxtb	r2, r3
 8004460:	4b20      	ldr	r3, [pc, #128]	@ (80044e4 <Screen_HandleButton+0x2a0>)
 8004462:	701a      	strb	r2, [r3, #0]
 8004464:	e06e      	b.n	8004544 <Screen_HandleButton+0x300>
            case UI_TIMER_EDIT_OFF_M: if (edit_timer_off_m > 0) edit_timer_off_m--; break;
 8004466:	4b20      	ldr	r3, [pc, #128]	@ (80044e8 <Screen_HandleButton+0x2a4>)
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d06c      	beq.n	8004548 <Screen_HandleButton+0x304>
 800446e:	4b1e      	ldr	r3, [pc, #120]	@ (80044e8 <Screen_HandleButton+0x2a4>)
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	3b01      	subs	r3, #1
 8004474:	b2da      	uxtb	r2, r3
 8004476:	4b1c      	ldr	r3, [pc, #112]	@ (80044e8 <Screen_HandleButton+0x2a4>)
 8004478:	701a      	strb	r2, [r3, #0]
 800447a:	e065      	b.n	8004548 <Screen_HandleButton+0x304>
            case UI_SEARCH_EDIT_GAP:  if (edit_search_gap_s > 5) edit_search_gap_s -= 5; break;
 800447c:	4b1b      	ldr	r3, [pc, #108]	@ (80044ec <Screen_HandleButton+0x2a8>)
 800447e:	881b      	ldrh	r3, [r3, #0]
 8004480:	2b05      	cmp	r3, #5
 8004482:	d963      	bls.n	800454c <Screen_HandleButton+0x308>
 8004484:	4b19      	ldr	r3, [pc, #100]	@ (80044ec <Screen_HandleButton+0x2a8>)
 8004486:	881b      	ldrh	r3, [r3, #0]
 8004488:	3b05      	subs	r3, #5
 800448a:	b29a      	uxth	r2, r3
 800448c:	4b17      	ldr	r3, [pc, #92]	@ (80044ec <Screen_HandleButton+0x2a8>)
 800448e:	801a      	strh	r2, [r3, #0]
 8004490:	e05c      	b.n	800454c <Screen_HandleButton+0x308>
            case UI_SEARCH_EDIT_DRY:  if (edit_search_dry_s > 0) edit_search_dry_s -= 1; break;
 8004492:	4b17      	ldr	r3, [pc, #92]	@ (80044f0 <Screen_HandleButton+0x2ac>)
 8004494:	881b      	ldrh	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d05a      	beq.n	8004550 <Screen_HandleButton+0x30c>
 800449a:	4b15      	ldr	r3, [pc, #84]	@ (80044f0 <Screen_HandleButton+0x2ac>)
 800449c:	881b      	ldrh	r3, [r3, #0]
 800449e:	3b01      	subs	r3, #1
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	4b13      	ldr	r3, [pc, #76]	@ (80044f0 <Screen_HandleButton+0x2ac>)
 80044a4:	801a      	strh	r2, [r3, #0]
 80044a6:	e053      	b.n	8004550 <Screen_HandleButton+0x30c>
            case UI_COUNTDOWN_EDIT_MIN: if (edit_countdown_min > 1) edit_countdown_min--; break;
 80044a8:	4b12      	ldr	r3, [pc, #72]	@ (80044f4 <Screen_HandleButton+0x2b0>)
 80044aa:	881b      	ldrh	r3, [r3, #0]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d951      	bls.n	8004554 <Screen_HandleButton+0x310>
 80044b0:	4b10      	ldr	r3, [pc, #64]	@ (80044f4 <Screen_HandleButton+0x2b0>)
 80044b2:	881b      	ldrh	r3, [r3, #0]
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	4b0e      	ldr	r3, [pc, #56]	@ (80044f4 <Screen_HandleButton+0x2b0>)
 80044ba:	801a      	strh	r2, [r3, #0]
 80044bc:	e04a      	b.n	8004554 <Screen_HandleButton+0x310>
            case UI_COUNTDOWN_EDIT_REP: if (edit_countdown_rep > 1) edit_countdown_rep--; break; // NEW
 80044be:	4b0e      	ldr	r3, [pc, #56]	@ (80044f8 <Screen_HandleButton+0x2b4>)
 80044c0:	881b      	ldrh	r3, [r3, #0]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d948      	bls.n	8004558 <Screen_HandleButton+0x314>
 80044c6:	4b0c      	ldr	r3, [pc, #48]	@ (80044f8 <Screen_HandleButton+0x2b4>)
 80044c8:	881b      	ldrh	r3, [r3, #0]
 80044ca:	3b01      	subs	r3, #1
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	4b0a      	ldr	r3, [pc, #40]	@ (80044f8 <Screen_HandleButton+0x2b4>)
 80044d0:	801a      	strh	r2, [r3, #0]
 80044d2:	e041      	b.n	8004558 <Screen_HandleButton+0x314>
 80044d4:	200005e4 	.word	0x200005e4
 80044d8:	200005f4 	.word	0x200005f4
 80044dc:	20000048 	.word	0x20000048
 80044e0:	20000049 	.word	0x20000049
 80044e4:	2000004a 	.word	0x2000004a
 80044e8:	2000004b 	.word	0x2000004b
 80044ec:	2000004c 	.word	0x2000004c
 80044f0:	2000004e 	.word	0x2000004e
 80044f4:	20000054 	.word	0x20000054
 80044f8:	20000056 	.word	0x20000056
 80044fc:	200005e5 	.word	0x200005e5
 8004500:	20000050 	.word	0x20000050
 8004504:	20000052 	.word	0x20000052
            case UI_TWIST_EDIT_ON:   if (edit_twist_on_s > 1) edit_twist_on_s--; break;
 8004508:	4b1c      	ldr	r3, [pc, #112]	@ (800457c <Screen_HandleButton+0x338>)
 800450a:	881b      	ldrh	r3, [r3, #0]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d925      	bls.n	800455c <Screen_HandleButton+0x318>
 8004510:	4b1a      	ldr	r3, [pc, #104]	@ (800457c <Screen_HandleButton+0x338>)
 8004512:	881b      	ldrh	r3, [r3, #0]
 8004514:	3b01      	subs	r3, #1
 8004516:	b29a      	uxth	r2, r3
 8004518:	4b18      	ldr	r3, [pc, #96]	@ (800457c <Screen_HandleButton+0x338>)
 800451a:	801a      	strh	r2, [r3, #0]
 800451c:	e01e      	b.n	800455c <Screen_HandleButton+0x318>
            case UI_TWIST_EDIT_OFF:  if (edit_twist_off_s > 1) edit_twist_off_s--; break;
 800451e:	4b18      	ldr	r3, [pc, #96]	@ (8004580 <Screen_HandleButton+0x33c>)
 8004520:	881b      	ldrh	r3, [r3, #0]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d91c      	bls.n	8004560 <Screen_HandleButton+0x31c>
 8004526:	4b16      	ldr	r3, [pc, #88]	@ (8004580 <Screen_HandleButton+0x33c>)
 8004528:	881b      	ldrh	r3, [r3, #0]
 800452a:	3b01      	subs	r3, #1
 800452c:	b29a      	uxth	r2, r3
 800452e:	4b14      	ldr	r3, [pc, #80]	@ (8004580 <Screen_HandleButton+0x33c>)
 8004530:	801a      	strh	r2, [r3, #0]
 8004532:	e015      	b.n	8004560 <Screen_HandleButton+0x31c>
            default: break;
 8004534:	bf00      	nop
 8004536:	e014      	b.n	8004562 <Screen_HandleButton+0x31e>
            case UI_MENU: if (menu_idx < (int)(MAIN_MENU_COUNT-1)) menu_idx++; break;
 8004538:	bf00      	nop
 800453a:	e012      	b.n	8004562 <Screen_HandleButton+0x31e>
            case UI_TIMER_EDIT_ON_H: if (edit_timer_on_h > 0) edit_timer_on_h--; break;
 800453c:	bf00      	nop
 800453e:	e010      	b.n	8004562 <Screen_HandleButton+0x31e>
            case UI_TIMER_EDIT_ON_M: if (edit_timer_on_m > 0) edit_timer_on_m--; break;
 8004540:	bf00      	nop
 8004542:	e00e      	b.n	8004562 <Screen_HandleButton+0x31e>
            case UI_TIMER_EDIT_OFF_H: if (edit_timer_off_h > 0) edit_timer_off_h--; break;
 8004544:	bf00      	nop
 8004546:	e00c      	b.n	8004562 <Screen_HandleButton+0x31e>
            case UI_TIMER_EDIT_OFF_M: if (edit_timer_off_m > 0) edit_timer_off_m--; break;
 8004548:	bf00      	nop
 800454a:	e00a      	b.n	8004562 <Screen_HandleButton+0x31e>
            case UI_SEARCH_EDIT_GAP:  if (edit_search_gap_s > 5) edit_search_gap_s -= 5; break;
 800454c:	bf00      	nop
 800454e:	e008      	b.n	8004562 <Screen_HandleButton+0x31e>
            case UI_SEARCH_EDIT_DRY:  if (edit_search_dry_s > 0) edit_search_dry_s -= 1; break;
 8004550:	bf00      	nop
 8004552:	e006      	b.n	8004562 <Screen_HandleButton+0x31e>
            case UI_COUNTDOWN_EDIT_MIN: if (edit_countdown_min > 1) edit_countdown_min--; break;
 8004554:	bf00      	nop
 8004556:	e004      	b.n	8004562 <Screen_HandleButton+0x31e>
            case UI_COUNTDOWN_EDIT_REP: if (edit_countdown_rep > 1) edit_countdown_rep--; break; // NEW
 8004558:	bf00      	nop
 800455a:	e002      	b.n	8004562 <Screen_HandleButton+0x31e>
            case UI_TWIST_EDIT_ON:   if (edit_twist_on_s > 1) edit_twist_on_s--; break;
 800455c:	bf00      	nop
 800455e:	e000      	b.n	8004562 <Screen_HandleButton+0x31e>
            case UI_TWIST_EDIT_OFF:  if (edit_twist_off_s > 1) edit_twist_off_s--; break;
 8004560:	bf00      	nop
        }
        screenNeedsRefresh = true; return;
 8004562:	4b08      	ldr	r3, [pc, #32]	@ (8004584 <Screen_HandleButton+0x340>)
 8004564:	2201      	movs	r2, #1
 8004566:	701a      	strb	r2, [r3, #0]
 8004568:	e005      	b.n	8004576 <Screen_HandleButton+0x332>
    }
    if (b == BTN_SELECT) { menu_select(); return; }
 800456a:	79fb      	ldrb	r3, [r7, #7]
 800456c:	2b02      	cmp	r3, #2
 800456e:	d102      	bne.n	8004576 <Screen_HandleButton+0x332>
 8004570:	f7ff fd00 	bl	8003f74 <menu_select>
 8004574:	bf00      	nop
}
 8004576:	3708      	adds	r7, #8
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	20000050 	.word	0x20000050
 8004580:	20000052 	.word	0x20000052
 8004584:	200005e5 	.word	0x200005e5

08004588 <Screen_HandleSwitches>:

/* ===== Switch polling with long-press detection ===== */
void Screen_HandleSwitches(void){
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
        {SWITCH4_GPIO_Port, SWITCH4_Pin, BTN_DOWN, LED4_Pin}    // Down / Back
    };
    static bool prev[4] = {true,true,true,true};
    static uint32_t pressStart[4] = {0,0,0,0};

    for (int i=0; i<4; i++){
 800458e:	2300      	movs	r3, #0
 8004590:	60fb      	str	r3, [r7, #12]
 8004592:	e083      	b.n	800469c <Screen_HandleSwitches+0x114>
        bool pressed = (HAL_GPIO_ReadPin(switchMap[i].port, switchMap[i].pin) == GPIO_PIN_RESET);
 8004594:	4946      	ldr	r1, [pc, #280]	@ (80046b0 <Screen_HandleSwitches+0x128>)
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	4613      	mov	r3, r2
 800459a:	005b      	lsls	r3, r3, #1
 800459c:	4413      	add	r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	440b      	add	r3, r1
 80045a2:	6818      	ldr	r0, [r3, #0]
 80045a4:	4942      	ldr	r1, [pc, #264]	@ (80046b0 <Screen_HandleSwitches+0x128>)
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	4613      	mov	r3, r2
 80045aa:	005b      	lsls	r3, r3, #1
 80045ac:	4413      	add	r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	440b      	add	r3, r1
 80045b2:	3304      	adds	r3, #4
 80045b4:	881b      	ldrh	r3, [r3, #0]
 80045b6:	4619      	mov	r1, r3
 80045b8:	f001 fcec 	bl	8005f94 <HAL_GPIO_ReadPin>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	bf0c      	ite	eq
 80045c2:	2301      	moveq	r3, #1
 80045c4:	2300      	movne	r3, #0
 80045c6:	72fb      	strb	r3, [r7, #11]

        if (pressed && prev[i]) {
 80045c8:	7afb      	ldrb	r3, [r7, #11]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d012      	beq.n	80045f4 <Screen_HandleSwitches+0x6c>
 80045ce:	4a39      	ldr	r2, [pc, #228]	@ (80046b4 <Screen_HandleSwitches+0x12c>)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	4413      	add	r3, r2
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00c      	beq.n	80045f4 <Screen_HandleSwitches+0x6c>
            prev[i] = false;
 80045da:	4a36      	ldr	r2, [pc, #216]	@ (80046b4 <Screen_HandleSwitches+0x12c>)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	4413      	add	r3, r2
 80045e0:	2200      	movs	r2, #0
 80045e2:	701a      	strb	r2, [r3, #0]
            pressStart[i] = HAL_GetTick();
 80045e4:	f000 fc3e 	bl	8004e64 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	4933      	ldr	r1, [pc, #204]	@ (80046b8 <Screen_HandleSwitches+0x130>)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80045f2:	e050      	b.n	8004696 <Screen_HandleSwitches+0x10e>
        }
        else if (!pressed && !prev[i]) {
 80045f4:	7afb      	ldrb	r3, [r7, #11]
 80045f6:	f083 0301 	eor.w	r3, r3, #1
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d04a      	beq.n	8004696 <Screen_HandleSwitches+0x10e>
 8004600:	4a2c      	ldr	r2, [pc, #176]	@ (80046b4 <Screen_HandleSwitches+0x12c>)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	4413      	add	r3, r2
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	f083 0301 	eor.w	r3, r3, #1
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d041      	beq.n	8004696 <Screen_HandleSwitches+0x10e>
            uint32_t pressDuration = HAL_GetTick() - pressStart[i];
 8004612:	f000 fc27 	bl	8004e64 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	4927      	ldr	r1, [pc, #156]	@ (80046b8 <Screen_HandleSwitches+0x130>)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	607b      	str	r3, [r7, #4]
            prev[i] = true;
 8004624:	4a23      	ldr	r2, [pc, #140]	@ (80046b4 <Screen_HandleSwitches+0x12c>)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	4413      	add	r3, r2
 800462a:	2201      	movs	r2, #1
 800462c:	701a      	strb	r2, [r3, #0]

            if (i == 0 && pressDuration > 2000) {
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d106      	bne.n	8004642 <Screen_HandleSwitches+0xba>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800463a:	d902      	bls.n	8004642 <Screen_HandleSwitches+0xba>
                ModelHandle_ManualLongPress();
 800463c:	f7fe fa54 	bl	8002ae8 <ModelHandle_ManualLongPress>
 8004640:	e029      	b.n	8004696 <Screen_HandleSwitches+0x10e>
            } else if (i == 3 && pressDuration > 2000) {
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2b03      	cmp	r3, #3
 8004646:	d106      	bne.n	8004656 <Screen_HandleSwitches+0xce>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800464e:	d902      	bls.n	8004656 <Screen_HandleSwitches+0xce>
                menu_reset(); // SW4 long press = Back
 8004650:	f7ff fd9c 	bl	800418c <menu_reset>
 8004654:	e01f      	b.n	8004696 <Screen_HandleSwitches+0x10e>
            } else {
                HAL_GPIO_TogglePin(switchMap[i].port, switchMap[i].ledPin);
 8004656:	4916      	ldr	r1, [pc, #88]	@ (80046b0 <Screen_HandleSwitches+0x128>)
 8004658:	68fa      	ldr	r2, [r7, #12]
 800465a:	4613      	mov	r3, r2
 800465c:	005b      	lsls	r3, r3, #1
 800465e:	4413      	add	r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	440b      	add	r3, r1
 8004664:	6818      	ldr	r0, [r3, #0]
 8004666:	4912      	ldr	r1, [pc, #72]	@ (80046b0 <Screen_HandleSwitches+0x128>)
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	4613      	mov	r3, r2
 800466c:	005b      	lsls	r3, r3, #1
 800466e:	4413      	add	r3, r2
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	440b      	add	r3, r1
 8004674:	3308      	adds	r3, #8
 8004676:	881b      	ldrh	r3, [r3, #0]
 8004678:	4619      	mov	r1, r3
 800467a:	f001 fcba 	bl	8005ff2 <HAL_GPIO_TogglePin>
                Screen_HandleButton(switchMap[i].btn);
 800467e:	490c      	ldr	r1, [pc, #48]	@ (80046b0 <Screen_HandleSwitches+0x128>)
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	4613      	mov	r3, r2
 8004684:	005b      	lsls	r3, r3, #1
 8004686:	4413      	add	r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	440b      	add	r3, r1
 800468c:	3306      	adds	r3, #6
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	4618      	mov	r0, r3
 8004692:	f7ff fdd7 	bl	8004244 <Screen_HandleButton>
    for (int i=0; i<4; i++){
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	3301      	adds	r3, #1
 800469a:	60fb      	str	r3, [r7, #12]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2b03      	cmp	r3, #3
 80046a0:	f77f af78 	ble.w	8004594 <Screen_HandleSwitches+0xc>
            }
        }
    }
}
 80046a4:	bf00      	nop
 80046a6:	bf00      	nop
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	0800ca28 	.word	0x0800ca28
 80046b4:	20000058 	.word	0x20000058
 80046b8:	200005fc 	.word	0x200005fc

080046bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80046c2:	4b15      	ldr	r3, [pc, #84]	@ (8004718 <HAL_MspInit+0x5c>)
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	4a14      	ldr	r2, [pc, #80]	@ (8004718 <HAL_MspInit+0x5c>)
 80046c8:	f043 0301 	orr.w	r3, r3, #1
 80046cc:	6193      	str	r3, [r2, #24]
 80046ce:	4b12      	ldr	r3, [pc, #72]	@ (8004718 <HAL_MspInit+0x5c>)
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	60bb      	str	r3, [r7, #8]
 80046d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80046da:	4b0f      	ldr	r3, [pc, #60]	@ (8004718 <HAL_MspInit+0x5c>)
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	4a0e      	ldr	r2, [pc, #56]	@ (8004718 <HAL_MspInit+0x5c>)
 80046e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046e4:	61d3      	str	r3, [r2, #28]
 80046e6:	4b0c      	ldr	r3, [pc, #48]	@ (8004718 <HAL_MspInit+0x5c>)
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046ee:	607b      	str	r3, [r7, #4]
 80046f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80046f2:	4b0a      	ldr	r3, [pc, #40]	@ (800471c <HAL_MspInit+0x60>)
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	60fb      	str	r3, [r7, #12]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80046fe:	60fb      	str	r3, [r7, #12]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004706:	60fb      	str	r3, [r7, #12]
 8004708:	4a04      	ldr	r2, [pc, #16]	@ (800471c <HAL_MspInit+0x60>)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800470e:	bf00      	nop
 8004710:	3714      	adds	r7, #20
 8004712:	46bd      	mov	sp, r7
 8004714:	bc80      	pop	{r7}
 8004716:	4770      	bx	lr
 8004718:	40021000 	.word	0x40021000
 800471c:	40010000 	.word	0x40010000

08004720 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b088      	sub	sp, #32
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004728:	f107 0310 	add.w	r3, r7, #16
 800472c:	2200      	movs	r2, #0
 800472e:	601a      	str	r2, [r3, #0]
 8004730:	605a      	str	r2, [r3, #4]
 8004732:	609a      	str	r2, [r3, #8]
 8004734:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a18      	ldr	r2, [pc, #96]	@ (800479c <HAL_ADC_MspInit+0x7c>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d129      	bne.n	8004794 <HAL_ADC_MspInit+0x74>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004740:	4b17      	ldr	r3, [pc, #92]	@ (80047a0 <HAL_ADC_MspInit+0x80>)
 8004742:	699b      	ldr	r3, [r3, #24]
 8004744:	4a16      	ldr	r2, [pc, #88]	@ (80047a0 <HAL_ADC_MspInit+0x80>)
 8004746:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800474a:	6193      	str	r3, [r2, #24]
 800474c:	4b14      	ldr	r3, [pc, #80]	@ (80047a0 <HAL_ADC_MspInit+0x80>)
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004754:	60fb      	str	r3, [r7, #12]
 8004756:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004758:	4b11      	ldr	r3, [pc, #68]	@ (80047a0 <HAL_ADC_MspInit+0x80>)
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	4a10      	ldr	r2, [pc, #64]	@ (80047a0 <HAL_ADC_MspInit+0x80>)
 800475e:	f043 0304 	orr.w	r3, r3, #4
 8004762:	6193      	str	r3, [r2, #24]
 8004764:	4b0e      	ldr	r3, [pc, #56]	@ (80047a0 <HAL_ADC_MspInit+0x80>)
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	f003 0304 	and.w	r3, r3, #4
 800476c:	60bb      	str	r3, [r7, #8]
 800476e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004770:	23ff      	movs	r3, #255	@ 0xff
 8004772:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004774:	2303      	movs	r3, #3
 8004776:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004778:	f107 0310 	add.w	r3, r7, #16
 800477c:	4619      	mov	r1, r3
 800477e:	4809      	ldr	r0, [pc, #36]	@ (80047a4 <HAL_ADC_MspInit+0x84>)
 8004780:	f001 fa84 	bl	8005c8c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8004784:	2200      	movs	r2, #0
 8004786:	2100      	movs	r1, #0
 8004788:	2012      	movs	r0, #18
 800478a:	f001 fa48 	bl	8005c1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800478e:	2012      	movs	r0, #18
 8004790:	f001 fa61 	bl	8005c56 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8004794:	bf00      	nop
 8004796:	3720      	adds	r7, #32
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	40012400 	.word	0x40012400
 80047a0:	40021000 	.word	0x40021000
 80047a4:	40010800 	.word	0x40010800

080047a8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b088      	sub	sp, #32
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047b0:	f107 0310 	add.w	r3, r7, #16
 80047b4:	2200      	movs	r2, #0
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	605a      	str	r2, [r3, #4]
 80047ba:	609a      	str	r2, [r3, #8]
 80047bc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a16      	ldr	r2, [pc, #88]	@ (800481c <HAL_I2C_MspInit+0x74>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d124      	bne.n	8004812 <HAL_I2C_MspInit+0x6a>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047c8:	4b15      	ldr	r3, [pc, #84]	@ (8004820 <HAL_I2C_MspInit+0x78>)
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	4a14      	ldr	r2, [pc, #80]	@ (8004820 <HAL_I2C_MspInit+0x78>)
 80047ce:	f043 0308 	orr.w	r3, r3, #8
 80047d2:	6193      	str	r3, [r2, #24]
 80047d4:	4b12      	ldr	r3, [pc, #72]	@ (8004820 <HAL_I2C_MspInit+0x78>)
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	f003 0308 	and.w	r3, r3, #8
 80047dc:	60fb      	str	r3, [r7, #12]
 80047de:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80047e0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80047e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80047e6:	2312      	movs	r3, #18
 80047e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80047ea:	2303      	movs	r3, #3
 80047ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047ee:	f107 0310 	add.w	r3, r7, #16
 80047f2:	4619      	mov	r1, r3
 80047f4:	480b      	ldr	r0, [pc, #44]	@ (8004824 <HAL_I2C_MspInit+0x7c>)
 80047f6:	f001 fa49 	bl	8005c8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80047fa:	4b09      	ldr	r3, [pc, #36]	@ (8004820 <HAL_I2C_MspInit+0x78>)
 80047fc:	69db      	ldr	r3, [r3, #28]
 80047fe:	4a08      	ldr	r2, [pc, #32]	@ (8004820 <HAL_I2C_MspInit+0x78>)
 8004800:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004804:	61d3      	str	r3, [r2, #28]
 8004806:	4b06      	ldr	r3, [pc, #24]	@ (8004820 <HAL_I2C_MspInit+0x78>)
 8004808:	69db      	ldr	r3, [r3, #28]
 800480a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800480e:	60bb      	str	r3, [r7, #8]
 8004810:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8004812:	bf00      	nop
 8004814:	3720      	adds	r7, #32
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	40005800 	.word	0x40005800
 8004820:	40021000 	.word	0x40021000
 8004824:	40010c00 	.word	0x40010c00

08004828 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b08a      	sub	sp, #40	@ 0x28
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004830:	f107 0314 	add.w	r3, r7, #20
 8004834:	2200      	movs	r2, #0
 8004836:	601a      	str	r2, [r3, #0]
 8004838:	605a      	str	r2, [r3, #4]
 800483a:	609a      	str	r2, [r3, #8]
 800483c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a22      	ldr	r2, [pc, #136]	@ (80048cc <HAL_SPI_MspInit+0xa4>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d13d      	bne.n	80048c4 <HAL_SPI_MspInit+0x9c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004848:	4b21      	ldr	r3, [pc, #132]	@ (80048d0 <HAL_SPI_MspInit+0xa8>)
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	4a20      	ldr	r2, [pc, #128]	@ (80048d0 <HAL_SPI_MspInit+0xa8>)
 800484e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004852:	6193      	str	r3, [r2, #24]
 8004854:	4b1e      	ldr	r3, [pc, #120]	@ (80048d0 <HAL_SPI_MspInit+0xa8>)
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800485c:	613b      	str	r3, [r7, #16]
 800485e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004860:	4b1b      	ldr	r3, [pc, #108]	@ (80048d0 <HAL_SPI_MspInit+0xa8>)
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	4a1a      	ldr	r2, [pc, #104]	@ (80048d0 <HAL_SPI_MspInit+0xa8>)
 8004866:	f043 0308 	orr.w	r3, r3, #8
 800486a:	6193      	str	r3, [r2, #24]
 800486c:	4b18      	ldr	r3, [pc, #96]	@ (80048d0 <HAL_SPI_MspInit+0xa8>)
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	f003 0308 	and.w	r3, r3, #8
 8004874:	60fb      	str	r3, [r7, #12]
 8004876:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8004878:	2328      	movs	r3, #40	@ 0x28
 800487a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800487c:	2302      	movs	r3, #2
 800487e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004880:	2303      	movs	r3, #3
 8004882:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004884:	f107 0314 	add.w	r3, r7, #20
 8004888:	4619      	mov	r1, r3
 800488a:	4812      	ldr	r0, [pc, #72]	@ (80048d4 <HAL_SPI_MspInit+0xac>)
 800488c:	f001 f9fe 	bl	8005c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004890:	2310      	movs	r3, #16
 8004892:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004894:	2300      	movs	r3, #0
 8004896:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004898:	2300      	movs	r3, #0
 800489a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800489c:	f107 0314 	add.w	r3, r7, #20
 80048a0:	4619      	mov	r1, r3
 80048a2:	480c      	ldr	r0, [pc, #48]	@ (80048d4 <HAL_SPI_MspInit+0xac>)
 80048a4:	f001 f9f2 	bl	8005c8c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80048a8:	4b0b      	ldr	r3, [pc, #44]	@ (80048d8 <HAL_SPI_MspInit+0xb0>)
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80048ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b0:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80048b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80048b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b8:	f043 0301 	orr.w	r3, r3, #1
 80048bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80048be:	4a06      	ldr	r2, [pc, #24]	@ (80048d8 <HAL_SPI_MspInit+0xb0>)
 80048c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c2:	6053      	str	r3, [r2, #4]

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80048c4:	bf00      	nop
 80048c6:	3728      	adds	r7, #40	@ 0x28
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	40013000 	.word	0x40013000
 80048d0:	40021000 	.word	0x40021000
 80048d4:	40010c00 	.word	0x40010c00
 80048d8:	40010000 	.word	0x40010000

080048dc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a09      	ldr	r2, [pc, #36]	@ (8004910 <HAL_TIM_Base_MspInit+0x34>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d10b      	bne.n	8004906 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80048ee:	4b09      	ldr	r3, [pc, #36]	@ (8004914 <HAL_TIM_Base_MspInit+0x38>)
 80048f0:	69db      	ldr	r3, [r3, #28]
 80048f2:	4a08      	ldr	r2, [pc, #32]	@ (8004914 <HAL_TIM_Base_MspInit+0x38>)
 80048f4:	f043 0302 	orr.w	r3, r3, #2
 80048f8:	61d3      	str	r3, [r2, #28]
 80048fa:	4b06      	ldr	r3, [pc, #24]	@ (8004914 <HAL_TIM_Base_MspInit+0x38>)
 80048fc:	69db      	ldr	r3, [r3, #28]
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	60fb      	str	r3, [r7, #12]
 8004904:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8004906:	bf00      	nop
 8004908:	3714      	adds	r7, #20
 800490a:	46bd      	mov	sp, r7
 800490c:	bc80      	pop	{r7}
 800490e:	4770      	bx	lr
 8004910:	40000400 	.word	0x40000400
 8004914:	40021000 	.word	0x40021000

08004918 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b088      	sub	sp, #32
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004920:	f107 0310 	add.w	r3, r7, #16
 8004924:	2200      	movs	r2, #0
 8004926:	601a      	str	r2, [r3, #0]
 8004928:	605a      	str	r2, [r3, #4]
 800492a:	609a      	str	r2, [r3, #8]
 800492c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a1c      	ldr	r2, [pc, #112]	@ (80049a4 <HAL_UART_MspInit+0x8c>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d131      	bne.n	800499c <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004938:	4b1b      	ldr	r3, [pc, #108]	@ (80049a8 <HAL_UART_MspInit+0x90>)
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	4a1a      	ldr	r2, [pc, #104]	@ (80049a8 <HAL_UART_MspInit+0x90>)
 800493e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004942:	6193      	str	r3, [r2, #24]
 8004944:	4b18      	ldr	r3, [pc, #96]	@ (80049a8 <HAL_UART_MspInit+0x90>)
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800494c:	60fb      	str	r3, [r7, #12]
 800494e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004950:	4b15      	ldr	r3, [pc, #84]	@ (80049a8 <HAL_UART_MspInit+0x90>)
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	4a14      	ldr	r2, [pc, #80]	@ (80049a8 <HAL_UART_MspInit+0x90>)
 8004956:	f043 0304 	orr.w	r3, r3, #4
 800495a:	6193      	str	r3, [r2, #24]
 800495c:	4b12      	ldr	r3, [pc, #72]	@ (80049a8 <HAL_UART_MspInit+0x90>)
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	f003 0304 	and.w	r3, r3, #4
 8004964:	60bb      	str	r3, [r7, #8]
 8004966:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004968:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800496c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800496e:	2302      	movs	r3, #2
 8004970:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004972:	2303      	movs	r3, #3
 8004974:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004976:	f107 0310 	add.w	r3, r7, #16
 800497a:	4619      	mov	r1, r3
 800497c:	480b      	ldr	r0, [pc, #44]	@ (80049ac <HAL_UART_MspInit+0x94>)
 800497e:	f001 f985 	bl	8005c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004982:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004986:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004988:	2300      	movs	r3, #0
 800498a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800498c:	2300      	movs	r3, #0
 800498e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004990:	f107 0310 	add.w	r3, r7, #16
 8004994:	4619      	mov	r1, r3
 8004996:	4805      	ldr	r0, [pc, #20]	@ (80049ac <HAL_UART_MspInit+0x94>)
 8004998:	f001 f978 	bl	8005c8c <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800499c:	bf00      	nop
 800499e:	3720      	adds	r7, #32
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	40013800 	.word	0x40013800
 80049a8:	40021000 	.word	0x40021000
 80049ac:	40010800 	.word	0x40010800

080049b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80049b0:	b480      	push	{r7}
 80049b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80049b4:	bf00      	nop
 80049b6:	e7fd      	b.n	80049b4 <NMI_Handler+0x4>

080049b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049b8:	b480      	push	{r7}
 80049ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049bc:	bf00      	nop
 80049be:	e7fd      	b.n	80049bc <HardFault_Handler+0x4>

080049c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80049c0:	b480      	push	{r7}
 80049c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80049c4:	bf00      	nop
 80049c6:	e7fd      	b.n	80049c4 <MemManage_Handler+0x4>

080049c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80049c8:	b480      	push	{r7}
 80049ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80049cc:	bf00      	nop
 80049ce:	e7fd      	b.n	80049cc <BusFault_Handler+0x4>

080049d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80049d0:	b480      	push	{r7}
 80049d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80049d4:	bf00      	nop
 80049d6:	e7fd      	b.n	80049d4 <UsageFault_Handler+0x4>

080049d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80049d8:	b480      	push	{r7}
 80049da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80049dc:	bf00      	nop
 80049de:	46bd      	mov	sp, r7
 80049e0:	bc80      	pop	{r7}
 80049e2:	4770      	bx	lr

080049e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80049e4:	b480      	push	{r7}
 80049e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80049e8:	bf00      	nop
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bc80      	pop	{r7}
 80049ee:	4770      	bx	lr

080049f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80049f0:	b480      	push	{r7}
 80049f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80049f4:	bf00      	nop
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bc80      	pop	{r7}
 80049fa:	4770      	bx	lr

080049fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a00:	f000 fa1e 	bl	8004e40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a04:	bf00      	nop
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004a0c:	4802      	ldr	r0, [pc, #8]	@ (8004a18 <ADC1_2_IRQHandler+0x10>)
 8004a0e:	f000 fd1b 	bl	8005448 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8004a12:	bf00      	nop
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	20000320 	.word	0x20000320

08004a1c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8004a20:	4802      	ldr	r0, [pc, #8]	@ (8004a2c <RTC_Alarm_IRQHandler+0x10>)
 8004a22:	f003 fb8f 	bl	8008144 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8004a26:	bf00      	nop
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	200003a4 	.word	0x200003a4

08004a30 <now_ms>:
static GPIO_PinState last_raw[SWITCH_COUNT];       // last sampled raw pin

static uint32_t      press_start_ms[SWITCH_COUNT]; // for long press
static bool          long_fired[SWITCH_COUNT];

static inline uint32_t now_ms(void) { return HAL_GetTick(); }
 8004a30:	b580      	push	{r7, lr}
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	f000 fa16 	bl	8004e64 <HAL_GetTick>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	bd80      	pop	{r7, pc}
	...

08004a40 <Switches_Init>:
    }
}

/* --- Init all switches as input pullup --- */
void Switches_Init(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a46:	1d3b      	adds	r3, r7, #4
 8004a48:	2200      	movs	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]
 8004a4c:	605a      	str	r2, [r3, #4]
 8004a4e:	609a      	str	r2, [r3, #8]
 8004a50:	60da      	str	r2, [r3, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a52:	4b20      	ldr	r3, [pc, #128]	@ (8004ad4 <Switches_Init+0x94>)
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	4a1f      	ldr	r2, [pc, #124]	@ (8004ad4 <Switches_Init+0x94>)
 8004a58:	f043 0308 	orr.w	r3, r3, #8
 8004a5c:	6193      	str	r3, [r2, #24]
 8004a5e:	4b1d      	ldr	r3, [pc, #116]	@ (8004ad4 <Switches_Init+0x94>)
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	f003 0308 	and.w	r3, r3, #8
 8004a66:	603b      	str	r3, [r7, #0]
 8004a68:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pin  = SWITCH1_Pin|SWITCH2_Pin|SWITCH3_Pin|SWITCH4_Pin;
 8004a72:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8004a76:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(SWITCH1_GPIO_Port, &GPIO_InitStruct);
 8004a78:	1d3b      	adds	r3, r7, #4
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	4816      	ldr	r0, [pc, #88]	@ (8004ad8 <Switches_Init+0x98>)
 8004a7e:	f001 f905 	bl	8005c8c <HAL_GPIO_Init>

    for (int i = 0; i < SWITCH_COUNT; ++i) {
 8004a82:	2300      	movs	r3, #0
 8004a84:	617b      	str	r3, [r7, #20]
 8004a86:	e01d      	b.n	8004ac4 <Switches_Init+0x84>
        stable_state[i]   = GPIO_PIN_SET;  // released
 8004a88:	4a14      	ldr	r2, [pc, #80]	@ (8004adc <Switches_Init+0x9c>)
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	2201      	movs	r2, #1
 8004a90:	701a      	strb	r2, [r3, #0]
        last_raw[i]       = GPIO_PIN_SET;
 8004a92:	4a13      	ldr	r2, [pc, #76]	@ (8004ae0 <Switches_Init+0xa0>)
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	4413      	add	r3, r2
 8004a98:	2201      	movs	r2, #1
 8004a9a:	701a      	strb	r2, [r3, #0]
        last_change[i]    = now_ms();
 8004a9c:	f7ff ffc8 	bl	8004a30 <now_ms>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	4910      	ldr	r1, [pc, #64]	@ (8004ae4 <Switches_Init+0xa4>)
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        press_start_ms[i] = 0;
 8004aaa:	4a0f      	ldr	r2, [pc, #60]	@ (8004ae8 <Switches_Init+0xa8>)
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	2100      	movs	r1, #0
 8004ab0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        long_fired[i]     = false;
 8004ab4:	4a0d      	ldr	r2, [pc, #52]	@ (8004aec <Switches_Init+0xac>)
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	4413      	add	r3, r2
 8004aba:	2200      	movs	r2, #0
 8004abc:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < SWITCH_COUNT; ++i) {
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	617b      	str	r3, [r7, #20]
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	2b03      	cmp	r3, #3
 8004ac8:	ddde      	ble.n	8004a88 <Switches_Init+0x48>
    }
}
 8004aca:	bf00      	nop
 8004acc:	bf00      	nop
 8004ace:	3718      	adds	r7, #24
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	40021000 	.word	0x40021000
 8004ad8:	40010c00 	.word	0x40010c00
 8004adc:	2000060c 	.word	0x2000060c
 8004ae0:	20000620 	.word	0x20000620
 8004ae4:	20000610 	.word	0x20000610
 8004ae8:	20000624 	.word	0x20000624
 8004aec:	20000634 	.word	0x20000634

08004af0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004af0:	b480      	push	{r7}
 8004af2:	af00      	add	r7, sp, #0
  return 1;
 8004af4:	2301      	movs	r3, #1
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bc80      	pop	{r7}
 8004afc:	4770      	bx	lr

08004afe <_kill>:

int _kill(int pid, int sig)
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b082      	sub	sp, #8
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
 8004b06:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004b08:	f005 fd2a 	bl	800a560 <__errno>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2216      	movs	r2, #22
 8004b10:	601a      	str	r2, [r3, #0]
  return -1;
 8004b12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <_exit>:

void _exit (int status)
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b082      	sub	sp, #8
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004b26:	f04f 31ff 	mov.w	r1, #4294967295
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f7ff ffe7 	bl	8004afe <_kill>
  while (1) {}    /* Make sure we hang here */
 8004b30:	bf00      	nop
 8004b32:	e7fd      	b.n	8004b30 <_exit+0x12>

08004b34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b086      	sub	sp, #24
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b40:	2300      	movs	r3, #0
 8004b42:	617b      	str	r3, [r7, #20]
 8004b44:	e00a      	b.n	8004b5c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004b46:	f3af 8000 	nop.w
 8004b4a:	4601      	mov	r1, r0
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	1c5a      	adds	r2, r3, #1
 8004b50:	60ba      	str	r2, [r7, #8]
 8004b52:	b2ca      	uxtb	r2, r1
 8004b54:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	3301      	adds	r3, #1
 8004b5a:	617b      	str	r3, [r7, #20]
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	dbf0      	blt.n	8004b46 <_read+0x12>
  }

  return len;
 8004b64:	687b      	ldr	r3, [r7, #4]
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3718      	adds	r7, #24
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b086      	sub	sp, #24
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	60f8      	str	r0, [r7, #12]
 8004b76:	60b9      	str	r1, [r7, #8]
 8004b78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	617b      	str	r3, [r7, #20]
 8004b7e:	e009      	b.n	8004b94 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	1c5a      	adds	r2, r3, #1
 8004b84:	60ba      	str	r2, [r7, #8]
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	3301      	adds	r3, #1
 8004b92:	617b      	str	r3, [r7, #20]
 8004b94:	697a      	ldr	r2, [r7, #20]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	dbf1      	blt.n	8004b80 <_write+0x12>
  }
  return len;
 8004b9c:	687b      	ldr	r3, [r7, #4]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3718      	adds	r7, #24
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <_close>:

int _close(int file)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b083      	sub	sp, #12
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004bae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	370c      	adds	r7, #12
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bc80      	pop	{r7}
 8004bba:	4770      	bx	lr

08004bbc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004bcc:	605a      	str	r2, [r3, #4]
  return 0;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bc80      	pop	{r7}
 8004bd8:	4770      	bx	lr

08004bda <_isatty>:

int _isatty(int file)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	b083      	sub	sp, #12
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004be2:	2301      	movs	r3, #1
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bc80      	pop	{r7}
 8004bec:	4770      	bx	lr

08004bee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004bee:	b480      	push	{r7}
 8004bf0:	b085      	sub	sp, #20
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	60f8      	str	r0, [r7, #12]
 8004bf6:	60b9      	str	r1, [r7, #8]
 8004bf8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3714      	adds	r7, #20
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bc80      	pop	{r7}
 8004c04:	4770      	bx	lr
	...

08004c08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004c10:	4a14      	ldr	r2, [pc, #80]	@ (8004c64 <_sbrk+0x5c>)
 8004c12:	4b15      	ldr	r3, [pc, #84]	@ (8004c68 <_sbrk+0x60>)
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004c1c:	4b13      	ldr	r3, [pc, #76]	@ (8004c6c <_sbrk+0x64>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d102      	bne.n	8004c2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004c24:	4b11      	ldr	r3, [pc, #68]	@ (8004c6c <_sbrk+0x64>)
 8004c26:	4a12      	ldr	r2, [pc, #72]	@ (8004c70 <_sbrk+0x68>)
 8004c28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004c2a:	4b10      	ldr	r3, [pc, #64]	@ (8004c6c <_sbrk+0x64>)
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4413      	add	r3, r2
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d207      	bcs.n	8004c48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004c38:	f005 fc92 	bl	800a560 <__errno>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	220c      	movs	r2, #12
 8004c40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004c42:	f04f 33ff 	mov.w	r3, #4294967295
 8004c46:	e009      	b.n	8004c5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004c48:	4b08      	ldr	r3, [pc, #32]	@ (8004c6c <_sbrk+0x64>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004c4e:	4b07      	ldr	r3, [pc, #28]	@ (8004c6c <_sbrk+0x64>)
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4413      	add	r3, r2
 8004c56:	4a05      	ldr	r2, [pc, #20]	@ (8004c6c <_sbrk+0x64>)
 8004c58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3718      	adds	r7, #24
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	20005000 	.word	0x20005000
 8004c68:	00000400 	.word	0x00000400
 8004c6c:	20000638 	.word	0x20000638
 8004c70:	200007d8 	.word	0x200007d8

08004c74 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004c74:	b480      	push	{r7}
 8004c76:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004c78:	bf00      	nop
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bc80      	pop	{r7}
 8004c7e:	4770      	bx	lr

08004c80 <UART_Init>:

/**
  * @brief Initialize UART reception (interrupt mode, one byte at a time).
  */
void UART_Init(void)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	af00      	add	r7, sp, #0
    // Clear the buffer and reset index
    memset(rxBuffer, 0, sizeof(rxBuffer));
 8004c84:	2240      	movs	r2, #64	@ 0x40
 8004c86:	2100      	movs	r1, #0
 8004c88:	4807      	ldr	r0, [pc, #28]	@ (8004ca8 <UART_Init+0x28>)
 8004c8a:	f005 fbf1 	bl	800a470 <memset>
    rxIndex = 0;
 8004c8e:	4b07      	ldr	r3, [pc, #28]	@ (8004cac <UART_Init+0x2c>)
 8004c90:	2200      	movs	r2, #0
 8004c92:	801a      	strh	r2, [r3, #0]
    packetReady = false;
 8004c94:	4b06      	ldr	r3, [pc, #24]	@ (8004cb0 <UART_Init+0x30>)
 8004c96:	2200      	movs	r2, #0
 8004c98:	701a      	strb	r2, [r3, #0]

    // Start UART reception (non-blocking)
    HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	4905      	ldr	r1, [pc, #20]	@ (8004cb4 <UART_Init+0x34>)
 8004c9e:	4806      	ldr	r0, [pc, #24]	@ (8004cb8 <UART_Init+0x38>)
 8004ca0:	f004 fbb7 	bl	8009412 <HAL_UART_Receive_IT>
}
 8004ca4:	bf00      	nop
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	20000640 	.word	0x20000640
 8004cac:	20000680 	.word	0x20000680
 8004cb0:	20000682 	.word	0x20000682
 8004cb4:	2000063c 	.word	0x2000063c
 8004cb8:	20000458 	.word	0x20000458

08004cbc <UART_TransmitString>:

/**
  * @brief Transmit a null-terminated string.
  */
void UART_TransmitString(UART_HandleTypeDef *huart, const char *str)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8004cc6:	6838      	ldr	r0, [r7, #0]
 8004cc8:	f7fb fa4c 	bl	8000164 <strlen>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8004cd4:	6839      	ldr	r1, [r7, #0]
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f004 fb10 	bl	80092fc <HAL_UART_Transmit>
}
 8004cdc:	bf00      	nop
 8004cde:	3708      	adds	r7, #8
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <UART_GetReceivedPacket>:
        HAL_UART_Receive_IT(&huart1, &rxByte, 1);
    }
}

bool UART_GetReceivedPacket(char *buffer, size_t buffer_size)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
    if (packetReady)
 8004cee:	4b1b      	ldr	r3, [pc, #108]	@ (8004d5c <UART_GetReceivedPacket+0x78>)
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d02c      	beq.n	8004d50 <UART_GetReceivedPacket+0x6c>
    {
        // Ensure destination buffer is large enough
        size_t len = strlen(rxBuffer);
 8004cf6:	481a      	ldr	r0, [pc, #104]	@ (8004d60 <UART_GetReceivedPacket+0x7c>)
 8004cf8:	f7fb fa34 	bl	8000164 <strlen>
 8004cfc:	60f8      	str	r0, [r7, #12]
        if (len < buffer_size)
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d219      	bcs.n	8004d3a <UART_GetReceivedPacket+0x56>
        {
            strncpy(buffer, rxBuffer, buffer_size - 1);
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	4914      	ldr	r1, [pc, #80]	@ (8004d60 <UART_GetReceivedPacket+0x7c>)
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f005 fbc9 	bl	800a4a6 <strncpy>
            buffer[buffer_size - 1] = '\0'; // Ensure null-termination
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	3b01      	subs	r3, #1
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	701a      	strb	r2, [r3, #0]

            // Reset internal buffer for next packet
            memset(rxBuffer, 0, sizeof(rxBuffer));
 8004d20:	2240      	movs	r2, #64	@ 0x40
 8004d22:	2100      	movs	r1, #0
 8004d24:	480e      	ldr	r0, [pc, #56]	@ (8004d60 <UART_GetReceivedPacket+0x7c>)
 8004d26:	f005 fba3 	bl	800a470 <memset>
            rxIndex = 0;
 8004d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8004d64 <UART_GetReceivedPacket+0x80>)
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	801a      	strh	r2, [r3, #0]
            packetReady = false;
 8004d30:	4b0a      	ldr	r3, [pc, #40]	@ (8004d5c <UART_GetReceivedPacket+0x78>)
 8004d32:	2200      	movs	r2, #0
 8004d34:	701a      	strb	r2, [r3, #0]
            return true;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e00b      	b.n	8004d52 <UART_GetReceivedPacket+0x6e>
        }
        else
        {
            // Destination buffer too small, discard internal packet
            memset(rxBuffer, 0, sizeof(rxBuffer));
 8004d3a:	2240      	movs	r2, #64	@ 0x40
 8004d3c:	2100      	movs	r1, #0
 8004d3e:	4808      	ldr	r0, [pc, #32]	@ (8004d60 <UART_GetReceivedPacket+0x7c>)
 8004d40:	f005 fb96 	bl	800a470 <memset>
            rxIndex = 0;
 8004d44:	4b07      	ldr	r3, [pc, #28]	@ (8004d64 <UART_GetReceivedPacket+0x80>)
 8004d46:	2200      	movs	r2, #0
 8004d48:	801a      	strh	r2, [r3, #0]
            packetReady = false;
 8004d4a:	4b04      	ldr	r3, [pc, #16]	@ (8004d5c <UART_GetReceivedPacket+0x78>)
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	701a      	strb	r2, [r3, #0]
            // Optionally, log an error
        }
    }
    return false; // Ensure to return false if no packet is ready
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	20000682 	.word	0x20000682
 8004d60:	20000640 	.word	0x20000640
 8004d64:	20000680 	.word	0x20000680

08004d68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004d68:	f7ff ff84 	bl	8004c74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004d6c:	480b      	ldr	r0, [pc, #44]	@ (8004d9c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004d6e:	490c      	ldr	r1, [pc, #48]	@ (8004da0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004d70:	4a0c      	ldr	r2, [pc, #48]	@ (8004da4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004d72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004d74:	e002      	b.n	8004d7c <LoopCopyDataInit>

08004d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004d7a:	3304      	adds	r3, #4

08004d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004d80:	d3f9      	bcc.n	8004d76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004d82:	4a09      	ldr	r2, [pc, #36]	@ (8004da8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004d84:	4c09      	ldr	r4, [pc, #36]	@ (8004dac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004d88:	e001      	b.n	8004d8e <LoopFillZerobss>

08004d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004d8c:	3204      	adds	r2, #4

08004d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004d90:	d3fb      	bcc.n	8004d8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004d92:	f005 fbeb 	bl	800a56c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004d96:	f7fd faab 	bl	80022f0 <main>
  bx lr
 8004d9a:	4770      	bx	lr
  ldr r0, =_sdata
 8004d9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004da0:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 8004da4:	0800ce1c 	.word	0x0800ce1c
  ldr r2, =_sbss
 8004da8:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 8004dac:	200007d4 	.word	0x200007d4

08004db0 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004db0:	e7fe      	b.n	8004db0 <CAN1_RX1_IRQHandler>
	...

08004db4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004db8:	4b08      	ldr	r3, [pc, #32]	@ (8004ddc <HAL_Init+0x28>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a07      	ldr	r2, [pc, #28]	@ (8004ddc <HAL_Init+0x28>)
 8004dbe:	f043 0310 	orr.w	r3, r3, #16
 8004dc2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004dc4:	2003      	movs	r0, #3
 8004dc6:	f000 ff1f 	bl	8005c08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004dca:	2000      	movs	r0, #0
 8004dcc:	f000 f808 	bl	8004de0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004dd0:	f7ff fc74 	bl	80046bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	40022000 	.word	0x40022000

08004de0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004de8:	4b12      	ldr	r3, [pc, #72]	@ (8004e34 <HAL_InitTick+0x54>)
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	4b12      	ldr	r3, [pc, #72]	@ (8004e38 <HAL_InitTick+0x58>)
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	4619      	mov	r1, r3
 8004df2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004df6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f000 ff37 	bl	8005c72 <HAL_SYSTICK_Config>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d001      	beq.n	8004e0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e00e      	b.n	8004e2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2b0f      	cmp	r3, #15
 8004e12:	d80a      	bhi.n	8004e2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e14:	2200      	movs	r2, #0
 8004e16:	6879      	ldr	r1, [r7, #4]
 8004e18:	f04f 30ff 	mov.w	r0, #4294967295
 8004e1c:	f000 feff 	bl	8005c1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004e20:	4a06      	ldr	r2, [pc, #24]	@ (8004e3c <HAL_InitTick+0x5c>)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004e26:	2300      	movs	r3, #0
 8004e28:	e000      	b.n	8004e2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3708      	adds	r7, #8
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	2000005c 	.word	0x2000005c
 8004e38:	20000064 	.word	0x20000064
 8004e3c:	20000060 	.word	0x20000060

08004e40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e40:	b480      	push	{r7}
 8004e42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004e44:	4b05      	ldr	r3, [pc, #20]	@ (8004e5c <HAL_IncTick+0x1c>)
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	461a      	mov	r2, r3
 8004e4a:	4b05      	ldr	r3, [pc, #20]	@ (8004e60 <HAL_IncTick+0x20>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4413      	add	r3, r2
 8004e50:	4a03      	ldr	r2, [pc, #12]	@ (8004e60 <HAL_IncTick+0x20>)
 8004e52:	6013      	str	r3, [r2, #0]
}
 8004e54:	bf00      	nop
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bc80      	pop	{r7}
 8004e5a:	4770      	bx	lr
 8004e5c:	20000064 	.word	0x20000064
 8004e60:	20000684 	.word	0x20000684

08004e64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e64:	b480      	push	{r7}
 8004e66:	af00      	add	r7, sp, #0
  return uwTick;
 8004e68:	4b02      	ldr	r3, [pc, #8]	@ (8004e74 <HAL_GetTick+0x10>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bc80      	pop	{r7}
 8004e72:	4770      	bx	lr
 8004e74:	20000684 	.word	0x20000684

08004e78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004e80:	f7ff fff0 	bl	8004e64 <HAL_GetTick>
 8004e84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e90:	d005      	beq.n	8004e9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004e92:	4b0a      	ldr	r3, [pc, #40]	@ (8004ebc <HAL_Delay+0x44>)
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	461a      	mov	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004e9e:	bf00      	nop
 8004ea0:	f7ff ffe0 	bl	8004e64 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d8f7      	bhi.n	8004ea0 <HAL_Delay+0x28>
  {
  }
}
 8004eb0:	bf00      	nop
 8004eb2:	bf00      	nop
 8004eb4:	3710      	adds	r7, #16
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	20000064 	.word	0x20000064

08004ec0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b086      	sub	sp, #24
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d101      	bne.n	8004ee2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e0be      	b.n	8005060 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d109      	bne.n	8004f04 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f7ff fc0e 	bl	8004720 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 fcb9 	bl	800587c <ADC_ConversionStop_Disable>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f12:	f003 0310 	and.w	r3, r3, #16
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f040 8099 	bne.w	800504e <HAL_ADC_Init+0x18e>
 8004f1c:	7dfb      	ldrb	r3, [r7, #23]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	f040 8095 	bne.w	800504e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f28:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004f2c:	f023 0302 	bic.w	r3, r3, #2
 8004f30:	f043 0202 	orr.w	r2, r3, #2
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004f40:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	7b1b      	ldrb	r3, [r3, #12]
 8004f46:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004f48:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f58:	d003      	beq.n	8004f62 <HAL_ADC_Init+0xa2>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d102      	bne.n	8004f68 <HAL_ADC_Init+0xa8>
 8004f62:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004f66:	e000      	b.n	8004f6a <HAL_ADC_Init+0xaa>
 8004f68:	2300      	movs	r3, #0
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	7d1b      	ldrb	r3, [r3, #20]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d119      	bne.n	8004fac <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	7b1b      	ldrb	r3, [r3, #12]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d109      	bne.n	8004f94 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	3b01      	subs	r3, #1
 8004f86:	035a      	lsls	r2, r3, #13
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004f90:	613b      	str	r3, [r7, #16]
 8004f92:	e00b      	b.n	8004fac <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f98:	f043 0220 	orr.w	r2, r3, #32
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa4:	f043 0201 	orr.w	r2, r3, #1
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	693a      	ldr	r2, [r7, #16]
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	689a      	ldr	r2, [r3, #8]
 8004fc6:	4b28      	ldr	r3, [pc, #160]	@ (8005068 <HAL_ADC_Init+0x1a8>)
 8004fc8:	4013      	ands	r3, r2
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	6812      	ldr	r2, [r2, #0]
 8004fce:	68b9      	ldr	r1, [r7, #8]
 8004fd0:	430b      	orrs	r3, r1
 8004fd2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fdc:	d003      	beq.n	8004fe6 <HAL_ADC_Init+0x126>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d104      	bne.n	8004ff0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	3b01      	subs	r3, #1
 8004fec:	051b      	lsls	r3, r3, #20
 8004fee:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	430a      	orrs	r2, r1
 8005002:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	689a      	ldr	r2, [r3, #8]
 800500a:	4b18      	ldr	r3, [pc, #96]	@ (800506c <HAL_ADC_Init+0x1ac>)
 800500c:	4013      	ands	r3, r2
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	429a      	cmp	r2, r3
 8005012:	d10b      	bne.n	800502c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800501e:	f023 0303 	bic.w	r3, r3, #3
 8005022:	f043 0201 	orr.w	r2, r3, #1
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800502a:	e018      	b.n	800505e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005030:	f023 0312 	bic.w	r3, r3, #18
 8005034:	f043 0210 	orr.w	r2, r3, #16
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005040:	f043 0201 	orr.w	r2, r3, #1
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800504c:	e007      	b.n	800505e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005052:	f043 0210 	orr.w	r2, r3, #16
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800505e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005060:	4618      	mov	r0, r3
 8005062:	3718      	adds	r7, #24
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	ffe1f7fd 	.word	0xffe1f7fd
 800506c:	ff1f0efe 	.word	0xff1f0efe

08005070 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005078:	2300      	movs	r3, #0
 800507a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005082:	2b01      	cmp	r3, #1
 8005084:	d101      	bne.n	800508a <HAL_ADC_Start+0x1a>
 8005086:	2302      	movs	r3, #2
 8005088:	e098      	b.n	80051bc <HAL_ADC_Start+0x14c>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 fb98 	bl	80057c8 <ADC_Enable>
 8005098:	4603      	mov	r3, r0
 800509a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800509c:	7bfb      	ldrb	r3, [r7, #15]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f040 8087 	bne.w	80051b2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050ac:	f023 0301 	bic.w	r3, r3, #1
 80050b0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a41      	ldr	r2, [pc, #260]	@ (80051c4 <HAL_ADC_Start+0x154>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d105      	bne.n	80050ce <HAL_ADC_Start+0x5e>
 80050c2:	4b41      	ldr	r3, [pc, #260]	@ (80051c8 <HAL_ADC_Start+0x158>)
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d115      	bne.n	80050fa <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050d2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d026      	beq.n	8005136 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ec:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80050f0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80050f8:	e01d      	b.n	8005136 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050fe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a2f      	ldr	r2, [pc, #188]	@ (80051c8 <HAL_ADC_Start+0x158>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d004      	beq.n	800511a <HAL_ADC_Start+0xaa>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a2b      	ldr	r2, [pc, #172]	@ (80051c4 <HAL_ADC_Start+0x154>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d10d      	bne.n	8005136 <HAL_ADC_Start+0xc6>
 800511a:	4b2b      	ldr	r3, [pc, #172]	@ (80051c8 <HAL_ADC_Start+0x158>)
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005122:	2b00      	cmp	r3, #0
 8005124:	d007      	beq.n	8005136 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800512a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800512e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800513a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d006      	beq.n	8005150 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005146:	f023 0206 	bic.w	r2, r3, #6
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800514e:	e002      	b.n	8005156 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f06f 0202 	mvn.w	r2, #2
 8005166:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8005172:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8005176:	d113      	bne.n	80051a0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800517c:	4a11      	ldr	r2, [pc, #68]	@ (80051c4 <HAL_ADC_Start+0x154>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d105      	bne.n	800518e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8005182:	4b11      	ldr	r3, [pc, #68]	@ (80051c8 <HAL_ADC_Start+0x158>)
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800518a:	2b00      	cmp	r3, #0
 800518c:	d108      	bne.n	80051a0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	689a      	ldr	r2, [r3, #8]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800519c:	609a      	str	r2, [r3, #8]
 800519e:	e00c      	b.n	80051ba <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	689a      	ldr	r2, [r3, #8]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80051ae:	609a      	str	r2, [r3, #8]
 80051b0:	e003      	b.n	80051ba <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80051ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3710      	adds	r7, #16
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	40012800 	.word	0x40012800
 80051c8:	40012400 	.word	0x40012400

080051cc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80051d4:	2300      	movs	r3, #0
 80051d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d101      	bne.n	80051e6 <HAL_ADC_Stop+0x1a>
 80051e2:	2302      	movs	r3, #2
 80051e4:	e01a      	b.n	800521c <HAL_ADC_Stop+0x50>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2201      	movs	r2, #1
 80051ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 fb44 	bl	800587c <ADC_ConversionStop_Disable>
 80051f4:	4603      	mov	r3, r0
 80051f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80051f8:	7bfb      	ldrb	r3, [r7, #15]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d109      	bne.n	8005212 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005202:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005206:	f023 0301 	bic.w	r3, r3, #1
 800520a:	f043 0201 	orr.w	r2, r3, #1
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800521a:	7bfb      	ldrb	r3, [r7, #15]
}
 800521c:	4618      	mov	r0, r3
 800521e:	3710      	adds	r7, #16
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005224:	b590      	push	{r4, r7, lr}
 8005226:	b087      	sub	sp, #28
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800522e:	2300      	movs	r3, #0
 8005230:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8005232:	2300      	movs	r3, #0
 8005234:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8005236:	2300      	movs	r3, #0
 8005238:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800523a:	f7ff fe13 	bl	8004e64 <HAL_GetTick>
 800523e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00b      	beq.n	8005266 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005252:	f043 0220 	orr.w	r2, r3, #32
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e0d3      	b.n	800540e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005270:	2b00      	cmp	r3, #0
 8005272:	d131      	bne.n	80052d8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800527a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800527e:	2b00      	cmp	r3, #0
 8005280:	d12a      	bne.n	80052d8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8005282:	e021      	b.n	80052c8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800528a:	d01d      	beq.n	80052c8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d007      	beq.n	80052a2 <HAL_ADC_PollForConversion+0x7e>
 8005292:	f7ff fde7 	bl	8004e64 <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	683a      	ldr	r2, [r7, #0]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d212      	bcs.n	80052c8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0302 	and.w	r3, r3, #2
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d10b      	bne.n	80052c8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052b4:	f043 0204 	orr.w	r2, r3, #4
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e0a2      	b.n	800540e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0302 	and.w	r3, r3, #2
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d0d6      	beq.n	8005284 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80052d6:	e070      	b.n	80053ba <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80052d8:	4b4f      	ldr	r3, [pc, #316]	@ (8005418 <HAL_ADC_PollForConversion+0x1f4>)
 80052da:	681c      	ldr	r4, [r3, #0]
 80052dc:	2002      	movs	r0, #2
 80052de:	f002 fe7b 	bl	8007fd8 <HAL_RCCEx_GetPeriphCLKFreq>
 80052e2:	4603      	mov	r3, r0
 80052e4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6919      	ldr	r1, [r3, #16]
 80052ee:	4b4b      	ldr	r3, [pc, #300]	@ (800541c <HAL_ADC_PollForConversion+0x1f8>)
 80052f0:	400b      	ands	r3, r1
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d118      	bne.n	8005328 <HAL_ADC_PollForConversion+0x104>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68d9      	ldr	r1, [r3, #12]
 80052fc:	4b48      	ldr	r3, [pc, #288]	@ (8005420 <HAL_ADC_PollForConversion+0x1fc>)
 80052fe:	400b      	ands	r3, r1
 8005300:	2b00      	cmp	r3, #0
 8005302:	d111      	bne.n	8005328 <HAL_ADC_PollForConversion+0x104>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6919      	ldr	r1, [r3, #16]
 800530a:	4b46      	ldr	r3, [pc, #280]	@ (8005424 <HAL_ADC_PollForConversion+0x200>)
 800530c:	400b      	ands	r3, r1
 800530e:	2b00      	cmp	r3, #0
 8005310:	d108      	bne.n	8005324 <HAL_ADC_PollForConversion+0x100>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68d9      	ldr	r1, [r3, #12]
 8005318:	4b43      	ldr	r3, [pc, #268]	@ (8005428 <HAL_ADC_PollForConversion+0x204>)
 800531a:	400b      	ands	r3, r1
 800531c:	2b00      	cmp	r3, #0
 800531e:	d101      	bne.n	8005324 <HAL_ADC_PollForConversion+0x100>
 8005320:	2314      	movs	r3, #20
 8005322:	e020      	b.n	8005366 <HAL_ADC_PollForConversion+0x142>
 8005324:	2329      	movs	r3, #41	@ 0x29
 8005326:	e01e      	b.n	8005366 <HAL_ADC_PollForConversion+0x142>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6919      	ldr	r1, [r3, #16]
 800532e:	4b3d      	ldr	r3, [pc, #244]	@ (8005424 <HAL_ADC_PollForConversion+0x200>)
 8005330:	400b      	ands	r3, r1
 8005332:	2b00      	cmp	r3, #0
 8005334:	d106      	bne.n	8005344 <HAL_ADC_PollForConversion+0x120>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68d9      	ldr	r1, [r3, #12]
 800533c:	4b3a      	ldr	r3, [pc, #232]	@ (8005428 <HAL_ADC_PollForConversion+0x204>)
 800533e:	400b      	ands	r3, r1
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00d      	beq.n	8005360 <HAL_ADC_PollForConversion+0x13c>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	6919      	ldr	r1, [r3, #16]
 800534a:	4b38      	ldr	r3, [pc, #224]	@ (800542c <HAL_ADC_PollForConversion+0x208>)
 800534c:	400b      	ands	r3, r1
 800534e:	2b00      	cmp	r3, #0
 8005350:	d108      	bne.n	8005364 <HAL_ADC_PollForConversion+0x140>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68d9      	ldr	r1, [r3, #12]
 8005358:	4b34      	ldr	r3, [pc, #208]	@ (800542c <HAL_ADC_PollForConversion+0x208>)
 800535a:	400b      	ands	r3, r1
 800535c:	2b00      	cmp	r3, #0
 800535e:	d101      	bne.n	8005364 <HAL_ADC_PollForConversion+0x140>
 8005360:	2354      	movs	r3, #84	@ 0x54
 8005362:	e000      	b.n	8005366 <HAL_ADC_PollForConversion+0x142>
 8005364:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8005366:	fb02 f303 	mul.w	r3, r2, r3
 800536a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800536c:	e021      	b.n	80053b2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005374:	d01a      	beq.n	80053ac <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d007      	beq.n	800538c <HAL_ADC_PollForConversion+0x168>
 800537c:	f7ff fd72 	bl	8004e64 <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	683a      	ldr	r2, [r7, #0]
 8005388:	429a      	cmp	r2, r3
 800538a:	d20f      	bcs.n	80053ac <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	429a      	cmp	r2, r3
 8005392:	d90b      	bls.n	80053ac <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005398:	f043 0204 	orr.w	r2, r3, #4
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	e030      	b.n	800540e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	3301      	adds	r3, #1
 80053b0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	693a      	ldr	r2, [r7, #16]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d8d9      	bhi.n	800536e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f06f 0212 	mvn.w	r2, #18
 80053c2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053c8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80053da:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80053de:	d115      	bne.n	800540c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d111      	bne.n	800540c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d105      	bne.n	800540c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005404:	f043 0201 	orr.w	r2, r3, #1
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	371c      	adds	r7, #28
 8005412:	46bd      	mov	sp, r7
 8005414:	bd90      	pop	{r4, r7, pc}
 8005416:	bf00      	nop
 8005418:	2000005c 	.word	0x2000005c
 800541c:	24924924 	.word	0x24924924
 8005420:	00924924 	.word	0x00924924
 8005424:	12492492 	.word	0x12492492
 8005428:	00492492 	.word	0x00492492
 800542c:	00249249 	.word	0x00249249

08005430 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800543e:	4618      	mov	r0, r3
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	bc80      	pop	{r7}
 8005446:	4770      	bx	lr

08005448 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	f003 0320 	and.w	r3, r3, #32
 8005466:	2b00      	cmp	r3, #0
 8005468:	d03e      	beq.n	80054e8 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f003 0302 	and.w	r3, r3, #2
 8005470:	2b00      	cmp	r3, #0
 8005472:	d039      	beq.n	80054e8 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005478:	f003 0310 	and.w	r3, r3, #16
 800547c:	2b00      	cmp	r3, #0
 800547e:	d105      	bne.n	800548c <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005484:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8005496:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800549a:	d11d      	bne.n	80054d8 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d119      	bne.n	80054d8 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	685a      	ldr	r2, [r3, #4]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f022 0220 	bic.w	r2, r2, #32
 80054b2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d105      	bne.n	80054d8 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054d0:	f043 0201 	orr.w	r2, r3, #1
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f7fc feb3 	bl	8002244 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f06f 0212 	mvn.w	r2, #18
 80054e6:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d04d      	beq.n	800558e <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f003 0304 	and.w	r3, r3, #4
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d048      	beq.n	800558e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005500:	f003 0310 	and.w	r3, r3, #16
 8005504:	2b00      	cmp	r3, #0
 8005506:	d105      	bne.n	8005514 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800550c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800551e:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8005522:	d012      	beq.n	800554a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800552e:	2b00      	cmp	r3, #0
 8005530:	d125      	bne.n	800557e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800553c:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8005540:	d11d      	bne.n	800557e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8005546:	2b00      	cmp	r3, #0
 8005548:	d119      	bne.n	800557e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	685a      	ldr	r2, [r3, #4]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005558:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800555e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800556a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800556e:	2b00      	cmp	r3, #0
 8005570:	d105      	bne.n	800557e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005576:	f043 0201 	orr.w	r2, r3, #1
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 fa6c 	bl	8005a5c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f06f 020c 	mvn.w	r2, #12
 800558c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005594:	2b00      	cmp	r3, #0
 8005596:	d012      	beq.n	80055be <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00d      	beq.n	80055be <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055a6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 f809 	bl	80055c6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f06f 0201 	mvn.w	r2, #1
 80055bc:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80055be:	bf00      	nop
 80055c0:	3710      	adds	r7, #16
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80055c6:	b480      	push	{r7}
 80055c8:	b083      	sub	sp, #12
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80055ce:	bf00      	nop
 80055d0:	370c      	adds	r7, #12
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bc80      	pop	{r7}
 80055d6:	4770      	bx	lr

080055d8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055e2:	2300      	movs	r3, #0
 80055e4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80055e6:	2300      	movs	r3, #0
 80055e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d101      	bne.n	80055f8 <HAL_ADC_ConfigChannel+0x20>
 80055f4:	2302      	movs	r3, #2
 80055f6:	e0dc      	b.n	80057b2 <HAL_ADC_ConfigChannel+0x1da>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	2b06      	cmp	r3, #6
 8005606:	d81c      	bhi.n	8005642 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	685a      	ldr	r2, [r3, #4]
 8005612:	4613      	mov	r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	4413      	add	r3, r2
 8005618:	3b05      	subs	r3, #5
 800561a:	221f      	movs	r2, #31
 800561c:	fa02 f303 	lsl.w	r3, r2, r3
 8005620:	43db      	mvns	r3, r3
 8005622:	4019      	ands	r1, r3
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	6818      	ldr	r0, [r3, #0]
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	685a      	ldr	r2, [r3, #4]
 800562c:	4613      	mov	r3, r2
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	4413      	add	r3, r2
 8005632:	3b05      	subs	r3, #5
 8005634:	fa00 f203 	lsl.w	r2, r0, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	430a      	orrs	r2, r1
 800563e:	635a      	str	r2, [r3, #52]	@ 0x34
 8005640:	e03c      	b.n	80056bc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	2b0c      	cmp	r3, #12
 8005648:	d81c      	bhi.n	8005684 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	685a      	ldr	r2, [r3, #4]
 8005654:	4613      	mov	r3, r2
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	4413      	add	r3, r2
 800565a:	3b23      	subs	r3, #35	@ 0x23
 800565c:	221f      	movs	r2, #31
 800565e:	fa02 f303 	lsl.w	r3, r2, r3
 8005662:	43db      	mvns	r3, r3
 8005664:	4019      	ands	r1, r3
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	6818      	ldr	r0, [r3, #0]
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	685a      	ldr	r2, [r3, #4]
 800566e:	4613      	mov	r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	4413      	add	r3, r2
 8005674:	3b23      	subs	r3, #35	@ 0x23
 8005676:	fa00 f203 	lsl.w	r2, r0, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	631a      	str	r2, [r3, #48]	@ 0x30
 8005682:	e01b      	b.n	80056bc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	685a      	ldr	r2, [r3, #4]
 800568e:	4613      	mov	r3, r2
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	4413      	add	r3, r2
 8005694:	3b41      	subs	r3, #65	@ 0x41
 8005696:	221f      	movs	r2, #31
 8005698:	fa02 f303 	lsl.w	r3, r2, r3
 800569c:	43db      	mvns	r3, r3
 800569e:	4019      	ands	r1, r3
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	6818      	ldr	r0, [r3, #0]
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	685a      	ldr	r2, [r3, #4]
 80056a8:	4613      	mov	r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	4413      	add	r3, r2
 80056ae:	3b41      	subs	r3, #65	@ 0x41
 80056b0:	fa00 f203 	lsl.w	r2, r0, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	430a      	orrs	r2, r1
 80056ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2b09      	cmp	r3, #9
 80056c2:	d91c      	bls.n	80056fe <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68d9      	ldr	r1, [r3, #12]
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	4613      	mov	r3, r2
 80056d0:	005b      	lsls	r3, r3, #1
 80056d2:	4413      	add	r3, r2
 80056d4:	3b1e      	subs	r3, #30
 80056d6:	2207      	movs	r2, #7
 80056d8:	fa02 f303 	lsl.w	r3, r2, r3
 80056dc:	43db      	mvns	r3, r3
 80056de:	4019      	ands	r1, r3
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	6898      	ldr	r0, [r3, #8]
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	4613      	mov	r3, r2
 80056ea:	005b      	lsls	r3, r3, #1
 80056ec:	4413      	add	r3, r2
 80056ee:	3b1e      	subs	r3, #30
 80056f0:	fa00 f203 	lsl.w	r2, r0, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	430a      	orrs	r2, r1
 80056fa:	60da      	str	r2, [r3, #12]
 80056fc:	e019      	b.n	8005732 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	6919      	ldr	r1, [r3, #16]
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	4613      	mov	r3, r2
 800570a:	005b      	lsls	r3, r3, #1
 800570c:	4413      	add	r3, r2
 800570e:	2207      	movs	r2, #7
 8005710:	fa02 f303 	lsl.w	r3, r2, r3
 8005714:	43db      	mvns	r3, r3
 8005716:	4019      	ands	r1, r3
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	6898      	ldr	r0, [r3, #8]
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	4613      	mov	r3, r2
 8005722:	005b      	lsls	r3, r3, #1
 8005724:	4413      	add	r3, r2
 8005726:	fa00 f203 	lsl.w	r2, r0, r3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	430a      	orrs	r2, r1
 8005730:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2b10      	cmp	r3, #16
 8005738:	d003      	beq.n	8005742 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800573e:	2b11      	cmp	r3, #17
 8005740:	d132      	bne.n	80057a8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a1d      	ldr	r2, [pc, #116]	@ (80057bc <HAL_ADC_ConfigChannel+0x1e4>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d125      	bne.n	8005798 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d126      	bne.n	80057a8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	689a      	ldr	r2, [r3, #8]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8005768:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2b10      	cmp	r3, #16
 8005770:	d11a      	bne.n	80057a8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005772:	4b13      	ldr	r3, [pc, #76]	@ (80057c0 <HAL_ADC_ConfigChannel+0x1e8>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a13      	ldr	r2, [pc, #76]	@ (80057c4 <HAL_ADC_ConfigChannel+0x1ec>)
 8005778:	fba2 2303 	umull	r2, r3, r2, r3
 800577c:	0c9a      	lsrs	r2, r3, #18
 800577e:	4613      	mov	r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	4413      	add	r3, r2
 8005784:	005b      	lsls	r3, r3, #1
 8005786:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005788:	e002      	b.n	8005790 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	3b01      	subs	r3, #1
 800578e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1f9      	bne.n	800578a <HAL_ADC_ConfigChannel+0x1b2>
 8005796:	e007      	b.n	80057a8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800579c:	f043 0220 	orr.w	r2, r3, #32
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80057b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3714      	adds	r7, #20
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bc80      	pop	{r7}
 80057ba:	4770      	bx	lr
 80057bc:	40012400 	.word	0x40012400
 80057c0:	2000005c 	.word	0x2000005c
 80057c4:	431bde83 	.word	0x431bde83

080057c8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80057d0:	2300      	movs	r3, #0
 80057d2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80057d4:	2300      	movs	r3, #0
 80057d6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f003 0301 	and.w	r3, r3, #1
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d040      	beq.n	8005868 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	689a      	ldr	r2, [r3, #8]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f042 0201 	orr.w	r2, r2, #1
 80057f4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80057f6:	4b1f      	ldr	r3, [pc, #124]	@ (8005874 <ADC_Enable+0xac>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a1f      	ldr	r2, [pc, #124]	@ (8005878 <ADC_Enable+0xb0>)
 80057fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005800:	0c9b      	lsrs	r3, r3, #18
 8005802:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005804:	e002      	b.n	800580c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	3b01      	subs	r3, #1
 800580a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d1f9      	bne.n	8005806 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005812:	f7ff fb27 	bl	8004e64 <HAL_GetTick>
 8005816:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005818:	e01f      	b.n	800585a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800581a:	f7ff fb23 	bl	8004e64 <HAL_GetTick>
 800581e:	4602      	mov	r2, r0
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	2b02      	cmp	r3, #2
 8005826:	d918      	bls.n	800585a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	2b01      	cmp	r3, #1
 8005834:	d011      	beq.n	800585a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800583a:	f043 0210 	orr.w	r2, r3, #16
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005846:	f043 0201 	orr.w	r2, r3, #1
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e007      	b.n	800586a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f003 0301 	and.w	r3, r3, #1
 8005864:	2b01      	cmp	r3, #1
 8005866:	d1d8      	bne.n	800581a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	2000005c 	.word	0x2000005c
 8005878:	431bde83 	.word	0x431bde83

0800587c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005884:	2300      	movs	r3, #0
 8005886:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	2b01      	cmp	r3, #1
 8005894:	d12e      	bne.n	80058f4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	689a      	ldr	r2, [r3, #8]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f022 0201 	bic.w	r2, r2, #1
 80058a4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80058a6:	f7ff fadd 	bl	8004e64 <HAL_GetTick>
 80058aa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80058ac:	e01b      	b.n	80058e6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80058ae:	f7ff fad9 	bl	8004e64 <HAL_GetTick>
 80058b2:	4602      	mov	r2, r0
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d914      	bls.n	80058e6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d10d      	bne.n	80058e6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ce:	f043 0210 	orr.w	r2, r3, #16
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058da:	f043 0201 	orr.w	r2, r3, #1
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e007      	b.n	80058f6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f003 0301 	and.w	r3, r3, #1
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d0dc      	beq.n	80058ae <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
	...

08005900 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8005900:	b590      	push	{r4, r7, lr}
 8005902:	b087      	sub	sp, #28
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005908:	2300      	movs	r3, #0
 800590a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800590c:	2300      	movs	r3, #0
 800590e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005916:	2b01      	cmp	r3, #1
 8005918:	d101      	bne.n	800591e <HAL_ADCEx_Calibration_Start+0x1e>
 800591a:	2302      	movs	r3, #2
 800591c:	e097      	b.n	8005a4e <HAL_ADCEx_Calibration_Start+0x14e>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2201      	movs	r2, #1
 8005922:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f7ff ffa8 	bl	800587c <ADC_ConversionStop_Disable>
 800592c:	4603      	mov	r3, r0
 800592e:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f7ff ff49 	bl	80057c8 <ADC_Enable>
 8005936:	4603      	mov	r3, r0
 8005938:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 800593a:	7dfb      	ldrb	r3, [r7, #23]
 800593c:	2b00      	cmp	r3, #0
 800593e:	f040 8081 	bne.w	8005a44 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005946:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800594a:	f023 0302 	bic.w	r3, r3, #2
 800594e:	f043 0202 	orr.w	r2, r3, #2
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8005956:	4b40      	ldr	r3, [pc, #256]	@ (8005a58 <HAL_ADCEx_Calibration_Start+0x158>)
 8005958:	681c      	ldr	r4, [r3, #0]
 800595a:	2002      	movs	r0, #2
 800595c:	f002 fb3c 	bl	8007fd8 <HAL_RCCEx_GetPeriphCLKFreq>
 8005960:	4603      	mov	r3, r0
 8005962:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8005966:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8005968:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800596a:	e002      	b.n	8005972 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	3b01      	subs	r3, #1
 8005970:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d1f9      	bne.n	800596c <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	689a      	ldr	r2, [r3, #8]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f042 0208 	orr.w	r2, r2, #8
 8005986:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8005988:	f7ff fa6c 	bl	8004e64 <HAL_GetTick>
 800598c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800598e:	e01b      	b.n	80059c8 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8005990:	f7ff fa68 	bl	8004e64 <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	2b0a      	cmp	r3, #10
 800599c:	d914      	bls.n	80059c8 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	f003 0308 	and.w	r3, r3, #8
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00d      	beq.n	80059c8 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059b0:	f023 0312 	bic.w	r3, r3, #18
 80059b4:	f043 0210 	orr.w	r2, r3, #16
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e042      	b.n	8005a4e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f003 0308 	and.w	r3, r3, #8
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1dc      	bne.n	8005990 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	689a      	ldr	r2, [r3, #8]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f042 0204 	orr.w	r2, r2, #4
 80059e4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80059e6:	f7ff fa3d 	bl	8004e64 <HAL_GetTick>
 80059ea:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80059ec:	e01b      	b.n	8005a26 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80059ee:	f7ff fa39 	bl	8004e64 <HAL_GetTick>
 80059f2:	4602      	mov	r2, r0
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	2b0a      	cmp	r3, #10
 80059fa:	d914      	bls.n	8005a26 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	f003 0304 	and.w	r3, r3, #4
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00d      	beq.n	8005a26 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a0e:	f023 0312 	bic.w	r3, r3, #18
 8005a12:	f043 0210 	orr.w	r2, r3, #16
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e013      	b.n	8005a4e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f003 0304 	and.w	r3, r3, #4
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d1dc      	bne.n	80059ee <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a38:	f023 0303 	bic.w	r3, r3, #3
 8005a3c:	f043 0201 	orr.w	r2, r3, #1
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8005a4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	371c      	adds	r7, #28
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd90      	pop	{r4, r7, pc}
 8005a56:	bf00      	nop
 8005a58:	2000005c 	.word	0x2000005c

08005a5c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8005a64:	bf00      	nop
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bc80      	pop	{r7}
 8005a6c:	4770      	bx	lr
	...

08005a70 <__NVIC_SetPriorityGrouping>:
{
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f003 0307 	and.w	r3, r3, #7
 8005a7e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a80:	4b0c      	ldr	r3, [pc, #48]	@ (8005ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a86:	68ba      	ldr	r2, [r7, #8]
 8005a88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005a98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005a9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005aa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005aa2:	4a04      	ldr	r2, [pc, #16]	@ (8005ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	60d3      	str	r3, [r2, #12]
}
 8005aa8:	bf00      	nop
 8005aaa:	3714      	adds	r7, #20
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bc80      	pop	{r7}
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	e000ed00 	.word	0xe000ed00

08005ab8 <__NVIC_GetPriorityGrouping>:
{
 8005ab8:	b480      	push	{r7}
 8005aba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005abc:	4b04      	ldr	r3, [pc, #16]	@ (8005ad0 <__NVIC_GetPriorityGrouping+0x18>)
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	0a1b      	lsrs	r3, r3, #8
 8005ac2:	f003 0307 	and.w	r3, r3, #7
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bc80      	pop	{r7}
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	e000ed00 	.word	0xe000ed00

08005ad4 <__NVIC_EnableIRQ>:
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	4603      	mov	r3, r0
 8005adc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	db0b      	blt.n	8005afe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ae6:	79fb      	ldrb	r3, [r7, #7]
 8005ae8:	f003 021f 	and.w	r2, r3, #31
 8005aec:	4906      	ldr	r1, [pc, #24]	@ (8005b08 <__NVIC_EnableIRQ+0x34>)
 8005aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005af2:	095b      	lsrs	r3, r3, #5
 8005af4:	2001      	movs	r0, #1
 8005af6:	fa00 f202 	lsl.w	r2, r0, r2
 8005afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005afe:	bf00      	nop
 8005b00:	370c      	adds	r7, #12
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bc80      	pop	{r7}
 8005b06:	4770      	bx	lr
 8005b08:	e000e100 	.word	0xe000e100

08005b0c <__NVIC_SetPriority>:
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	4603      	mov	r3, r0
 8005b14:	6039      	str	r1, [r7, #0]
 8005b16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	db0a      	blt.n	8005b36 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	b2da      	uxtb	r2, r3
 8005b24:	490c      	ldr	r1, [pc, #48]	@ (8005b58 <__NVIC_SetPriority+0x4c>)
 8005b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b2a:	0112      	lsls	r2, r2, #4
 8005b2c:	b2d2      	uxtb	r2, r2
 8005b2e:	440b      	add	r3, r1
 8005b30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005b34:	e00a      	b.n	8005b4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	b2da      	uxtb	r2, r3
 8005b3a:	4908      	ldr	r1, [pc, #32]	@ (8005b5c <__NVIC_SetPriority+0x50>)
 8005b3c:	79fb      	ldrb	r3, [r7, #7]
 8005b3e:	f003 030f 	and.w	r3, r3, #15
 8005b42:	3b04      	subs	r3, #4
 8005b44:	0112      	lsls	r2, r2, #4
 8005b46:	b2d2      	uxtb	r2, r2
 8005b48:	440b      	add	r3, r1
 8005b4a:	761a      	strb	r2, [r3, #24]
}
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bc80      	pop	{r7}
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	e000e100 	.word	0xe000e100
 8005b5c:	e000ed00 	.word	0xe000ed00

08005b60 <NVIC_EncodePriority>:
{
 8005b60:	b480      	push	{r7}
 8005b62:	b089      	sub	sp, #36	@ 0x24
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f003 0307 	and.w	r3, r3, #7
 8005b72:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	f1c3 0307 	rsb	r3, r3, #7
 8005b7a:	2b04      	cmp	r3, #4
 8005b7c:	bf28      	it	cs
 8005b7e:	2304      	movcs	r3, #4
 8005b80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	3304      	adds	r3, #4
 8005b86:	2b06      	cmp	r3, #6
 8005b88:	d902      	bls.n	8005b90 <NVIC_EncodePriority+0x30>
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	3b03      	subs	r3, #3
 8005b8e:	e000      	b.n	8005b92 <NVIC_EncodePriority+0x32>
 8005b90:	2300      	movs	r3, #0
 8005b92:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b94:	f04f 32ff 	mov.w	r2, #4294967295
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b9e:	43da      	mvns	r2, r3
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	401a      	ands	r2, r3
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	fa01 f303 	lsl.w	r3, r1, r3
 8005bb2:	43d9      	mvns	r1, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bb8:	4313      	orrs	r3, r2
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3724      	adds	r7, #36	@ 0x24
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bc80      	pop	{r7}
 8005bc2:	4770      	bx	lr

08005bc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b082      	sub	sp, #8
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005bd4:	d301      	bcc.n	8005bda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e00f      	b.n	8005bfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005bda:	4a0a      	ldr	r2, [pc, #40]	@ (8005c04 <SysTick_Config+0x40>)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	3b01      	subs	r3, #1
 8005be0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005be2:	210f      	movs	r1, #15
 8005be4:	f04f 30ff 	mov.w	r0, #4294967295
 8005be8:	f7ff ff90 	bl	8005b0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005bec:	4b05      	ldr	r3, [pc, #20]	@ (8005c04 <SysTick_Config+0x40>)
 8005bee:	2200      	movs	r2, #0
 8005bf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005bf2:	4b04      	ldr	r3, [pc, #16]	@ (8005c04 <SysTick_Config+0x40>)
 8005bf4:	2207      	movs	r2, #7
 8005bf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3708      	adds	r7, #8
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	e000e010 	.word	0xe000e010

08005c08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f7ff ff2d 	bl	8005a70 <__NVIC_SetPriorityGrouping>
}
 8005c16:	bf00      	nop
 8005c18:	3708      	adds	r7, #8
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b086      	sub	sp, #24
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	4603      	mov	r3, r0
 8005c26:	60b9      	str	r1, [r7, #8]
 8005c28:	607a      	str	r2, [r7, #4]
 8005c2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005c30:	f7ff ff42 	bl	8005ab8 <__NVIC_GetPriorityGrouping>
 8005c34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	68b9      	ldr	r1, [r7, #8]
 8005c3a:	6978      	ldr	r0, [r7, #20]
 8005c3c:	f7ff ff90 	bl	8005b60 <NVIC_EncodePriority>
 8005c40:	4602      	mov	r2, r0
 8005c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c46:	4611      	mov	r1, r2
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f7ff ff5f 	bl	8005b0c <__NVIC_SetPriority>
}
 8005c4e:	bf00      	nop
 8005c50:	3718      	adds	r7, #24
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b082      	sub	sp, #8
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7ff ff35 	bl	8005ad4 <__NVIC_EnableIRQ>
}
 8005c6a:	bf00      	nop
 8005c6c:	3708      	adds	r7, #8
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c72:	b580      	push	{r7, lr}
 8005c74:	b082      	sub	sp, #8
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f7ff ffa2 	bl	8005bc4 <SysTick_Config>
 8005c80:	4603      	mov	r3, r0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3708      	adds	r7, #8
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
	...

08005c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b08b      	sub	sp, #44	@ 0x2c
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005c96:	2300      	movs	r3, #0
 8005c98:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005c9e:	e169      	b.n	8005f74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	69fa      	ldr	r2, [r7, #28]
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005cb4:	69ba      	ldr	r2, [r7, #24]
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	f040 8158 	bne.w	8005f6e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	4a9a      	ldr	r2, [pc, #616]	@ (8005f2c <HAL_GPIO_Init+0x2a0>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d05e      	beq.n	8005d86 <HAL_GPIO_Init+0xfa>
 8005cc8:	4a98      	ldr	r2, [pc, #608]	@ (8005f2c <HAL_GPIO_Init+0x2a0>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d875      	bhi.n	8005dba <HAL_GPIO_Init+0x12e>
 8005cce:	4a98      	ldr	r2, [pc, #608]	@ (8005f30 <HAL_GPIO_Init+0x2a4>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d058      	beq.n	8005d86 <HAL_GPIO_Init+0xfa>
 8005cd4:	4a96      	ldr	r2, [pc, #600]	@ (8005f30 <HAL_GPIO_Init+0x2a4>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d86f      	bhi.n	8005dba <HAL_GPIO_Init+0x12e>
 8005cda:	4a96      	ldr	r2, [pc, #600]	@ (8005f34 <HAL_GPIO_Init+0x2a8>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d052      	beq.n	8005d86 <HAL_GPIO_Init+0xfa>
 8005ce0:	4a94      	ldr	r2, [pc, #592]	@ (8005f34 <HAL_GPIO_Init+0x2a8>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d869      	bhi.n	8005dba <HAL_GPIO_Init+0x12e>
 8005ce6:	4a94      	ldr	r2, [pc, #592]	@ (8005f38 <HAL_GPIO_Init+0x2ac>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d04c      	beq.n	8005d86 <HAL_GPIO_Init+0xfa>
 8005cec:	4a92      	ldr	r2, [pc, #584]	@ (8005f38 <HAL_GPIO_Init+0x2ac>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d863      	bhi.n	8005dba <HAL_GPIO_Init+0x12e>
 8005cf2:	4a92      	ldr	r2, [pc, #584]	@ (8005f3c <HAL_GPIO_Init+0x2b0>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d046      	beq.n	8005d86 <HAL_GPIO_Init+0xfa>
 8005cf8:	4a90      	ldr	r2, [pc, #576]	@ (8005f3c <HAL_GPIO_Init+0x2b0>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d85d      	bhi.n	8005dba <HAL_GPIO_Init+0x12e>
 8005cfe:	2b12      	cmp	r3, #18
 8005d00:	d82a      	bhi.n	8005d58 <HAL_GPIO_Init+0xcc>
 8005d02:	2b12      	cmp	r3, #18
 8005d04:	d859      	bhi.n	8005dba <HAL_GPIO_Init+0x12e>
 8005d06:	a201      	add	r2, pc, #4	@ (adr r2, 8005d0c <HAL_GPIO_Init+0x80>)
 8005d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d0c:	08005d87 	.word	0x08005d87
 8005d10:	08005d61 	.word	0x08005d61
 8005d14:	08005d73 	.word	0x08005d73
 8005d18:	08005db5 	.word	0x08005db5
 8005d1c:	08005dbb 	.word	0x08005dbb
 8005d20:	08005dbb 	.word	0x08005dbb
 8005d24:	08005dbb 	.word	0x08005dbb
 8005d28:	08005dbb 	.word	0x08005dbb
 8005d2c:	08005dbb 	.word	0x08005dbb
 8005d30:	08005dbb 	.word	0x08005dbb
 8005d34:	08005dbb 	.word	0x08005dbb
 8005d38:	08005dbb 	.word	0x08005dbb
 8005d3c:	08005dbb 	.word	0x08005dbb
 8005d40:	08005dbb 	.word	0x08005dbb
 8005d44:	08005dbb 	.word	0x08005dbb
 8005d48:	08005dbb 	.word	0x08005dbb
 8005d4c:	08005dbb 	.word	0x08005dbb
 8005d50:	08005d69 	.word	0x08005d69
 8005d54:	08005d7d 	.word	0x08005d7d
 8005d58:	4a79      	ldr	r2, [pc, #484]	@ (8005f40 <HAL_GPIO_Init+0x2b4>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d013      	beq.n	8005d86 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005d5e:	e02c      	b.n	8005dba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	623b      	str	r3, [r7, #32]
          break;
 8005d66:	e029      	b.n	8005dbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	3304      	adds	r3, #4
 8005d6e:	623b      	str	r3, [r7, #32]
          break;
 8005d70:	e024      	b.n	8005dbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	3308      	adds	r3, #8
 8005d78:	623b      	str	r3, [r7, #32]
          break;
 8005d7a:	e01f      	b.n	8005dbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	330c      	adds	r3, #12
 8005d82:	623b      	str	r3, [r7, #32]
          break;
 8005d84:	e01a      	b.n	8005dbc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d102      	bne.n	8005d94 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005d8e:	2304      	movs	r3, #4
 8005d90:	623b      	str	r3, [r7, #32]
          break;
 8005d92:	e013      	b.n	8005dbc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d105      	bne.n	8005da8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005d9c:	2308      	movs	r3, #8
 8005d9e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	69fa      	ldr	r2, [r7, #28]
 8005da4:	611a      	str	r2, [r3, #16]
          break;
 8005da6:	e009      	b.n	8005dbc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005da8:	2308      	movs	r3, #8
 8005daa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	69fa      	ldr	r2, [r7, #28]
 8005db0:	615a      	str	r2, [r3, #20]
          break;
 8005db2:	e003      	b.n	8005dbc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005db4:	2300      	movs	r3, #0
 8005db6:	623b      	str	r3, [r7, #32]
          break;
 8005db8:	e000      	b.n	8005dbc <HAL_GPIO_Init+0x130>
          break;
 8005dba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	2bff      	cmp	r3, #255	@ 0xff
 8005dc0:	d801      	bhi.n	8005dc6 <HAL_GPIO_Init+0x13a>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	e001      	b.n	8005dca <HAL_GPIO_Init+0x13e>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	3304      	adds	r3, #4
 8005dca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	2bff      	cmp	r3, #255	@ 0xff
 8005dd0:	d802      	bhi.n	8005dd8 <HAL_GPIO_Init+0x14c>
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	e002      	b.n	8005dde <HAL_GPIO_Init+0x152>
 8005dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dda:	3b08      	subs	r3, #8
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	210f      	movs	r1, #15
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	fa01 f303 	lsl.w	r3, r1, r3
 8005dec:	43db      	mvns	r3, r3
 8005dee:	401a      	ands	r2, r3
 8005df0:	6a39      	ldr	r1, [r7, #32]
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	fa01 f303 	lsl.w	r3, r1, r3
 8005df8:	431a      	orrs	r2, r3
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	f000 80b1 	beq.w	8005f6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005e0c:	4b4d      	ldr	r3, [pc, #308]	@ (8005f44 <HAL_GPIO_Init+0x2b8>)
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	4a4c      	ldr	r2, [pc, #304]	@ (8005f44 <HAL_GPIO_Init+0x2b8>)
 8005e12:	f043 0301 	orr.w	r3, r3, #1
 8005e16:	6193      	str	r3, [r2, #24]
 8005e18:	4b4a      	ldr	r3, [pc, #296]	@ (8005f44 <HAL_GPIO_Init+0x2b8>)
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	f003 0301 	and.w	r3, r3, #1
 8005e20:	60bb      	str	r3, [r7, #8]
 8005e22:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005e24:	4a48      	ldr	r2, [pc, #288]	@ (8005f48 <HAL_GPIO_Init+0x2bc>)
 8005e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e28:	089b      	lsrs	r3, r3, #2
 8005e2a:	3302      	adds	r3, #2
 8005e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e30:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e34:	f003 0303 	and.w	r3, r3, #3
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	220f      	movs	r2, #15
 8005e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e40:	43db      	mvns	r3, r3
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	4013      	ands	r3, r2
 8005e46:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a40      	ldr	r2, [pc, #256]	@ (8005f4c <HAL_GPIO_Init+0x2c0>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d013      	beq.n	8005e78 <HAL_GPIO_Init+0x1ec>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a3f      	ldr	r2, [pc, #252]	@ (8005f50 <HAL_GPIO_Init+0x2c4>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d00d      	beq.n	8005e74 <HAL_GPIO_Init+0x1e8>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a3e      	ldr	r2, [pc, #248]	@ (8005f54 <HAL_GPIO_Init+0x2c8>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d007      	beq.n	8005e70 <HAL_GPIO_Init+0x1e4>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a3d      	ldr	r2, [pc, #244]	@ (8005f58 <HAL_GPIO_Init+0x2cc>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d101      	bne.n	8005e6c <HAL_GPIO_Init+0x1e0>
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e006      	b.n	8005e7a <HAL_GPIO_Init+0x1ee>
 8005e6c:	2304      	movs	r3, #4
 8005e6e:	e004      	b.n	8005e7a <HAL_GPIO_Init+0x1ee>
 8005e70:	2302      	movs	r3, #2
 8005e72:	e002      	b.n	8005e7a <HAL_GPIO_Init+0x1ee>
 8005e74:	2301      	movs	r3, #1
 8005e76:	e000      	b.n	8005e7a <HAL_GPIO_Init+0x1ee>
 8005e78:	2300      	movs	r3, #0
 8005e7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e7c:	f002 0203 	and.w	r2, r2, #3
 8005e80:	0092      	lsls	r2, r2, #2
 8005e82:	4093      	lsls	r3, r2
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005e8a:	492f      	ldr	r1, [pc, #188]	@ (8005f48 <HAL_GPIO_Init+0x2bc>)
 8005e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e8e:	089b      	lsrs	r3, r3, #2
 8005e90:	3302      	adds	r3, #2
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d006      	beq.n	8005eb2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005ea4:	4b2d      	ldr	r3, [pc, #180]	@ (8005f5c <HAL_GPIO_Init+0x2d0>)
 8005ea6:	689a      	ldr	r2, [r3, #8]
 8005ea8:	492c      	ldr	r1, [pc, #176]	@ (8005f5c <HAL_GPIO_Init+0x2d0>)
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	608b      	str	r3, [r1, #8]
 8005eb0:	e006      	b.n	8005ec0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005eb2:	4b2a      	ldr	r3, [pc, #168]	@ (8005f5c <HAL_GPIO_Init+0x2d0>)
 8005eb4:	689a      	ldr	r2, [r3, #8]
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	43db      	mvns	r3, r3
 8005eba:	4928      	ldr	r1, [pc, #160]	@ (8005f5c <HAL_GPIO_Init+0x2d0>)
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d006      	beq.n	8005eda <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005ecc:	4b23      	ldr	r3, [pc, #140]	@ (8005f5c <HAL_GPIO_Init+0x2d0>)
 8005ece:	68da      	ldr	r2, [r3, #12]
 8005ed0:	4922      	ldr	r1, [pc, #136]	@ (8005f5c <HAL_GPIO_Init+0x2d0>)
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	60cb      	str	r3, [r1, #12]
 8005ed8:	e006      	b.n	8005ee8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005eda:	4b20      	ldr	r3, [pc, #128]	@ (8005f5c <HAL_GPIO_Init+0x2d0>)
 8005edc:	68da      	ldr	r2, [r3, #12]
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	43db      	mvns	r3, r3
 8005ee2:	491e      	ldr	r1, [pc, #120]	@ (8005f5c <HAL_GPIO_Init+0x2d0>)
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d006      	beq.n	8005f02 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005ef4:	4b19      	ldr	r3, [pc, #100]	@ (8005f5c <HAL_GPIO_Init+0x2d0>)
 8005ef6:	685a      	ldr	r2, [r3, #4]
 8005ef8:	4918      	ldr	r1, [pc, #96]	@ (8005f5c <HAL_GPIO_Init+0x2d0>)
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	604b      	str	r3, [r1, #4]
 8005f00:	e006      	b.n	8005f10 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005f02:	4b16      	ldr	r3, [pc, #88]	@ (8005f5c <HAL_GPIO_Init+0x2d0>)
 8005f04:	685a      	ldr	r2, [r3, #4]
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	43db      	mvns	r3, r3
 8005f0a:	4914      	ldr	r1, [pc, #80]	@ (8005f5c <HAL_GPIO_Init+0x2d0>)
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d021      	beq.n	8005f60 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8005f5c <HAL_GPIO_Init+0x2d0>)
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	490e      	ldr	r1, [pc, #56]	@ (8005f5c <HAL_GPIO_Init+0x2d0>)
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	600b      	str	r3, [r1, #0]
 8005f28:	e021      	b.n	8005f6e <HAL_GPIO_Init+0x2e2>
 8005f2a:	bf00      	nop
 8005f2c:	10320000 	.word	0x10320000
 8005f30:	10310000 	.word	0x10310000
 8005f34:	10220000 	.word	0x10220000
 8005f38:	10210000 	.word	0x10210000
 8005f3c:	10120000 	.word	0x10120000
 8005f40:	10110000 	.word	0x10110000
 8005f44:	40021000 	.word	0x40021000
 8005f48:	40010000 	.word	0x40010000
 8005f4c:	40010800 	.word	0x40010800
 8005f50:	40010c00 	.word	0x40010c00
 8005f54:	40011000 	.word	0x40011000
 8005f58:	40011400 	.word	0x40011400
 8005f5c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005f60:	4b0b      	ldr	r3, [pc, #44]	@ (8005f90 <HAL_GPIO_Init+0x304>)
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	43db      	mvns	r3, r3
 8005f68:	4909      	ldr	r1, [pc, #36]	@ (8005f90 <HAL_GPIO_Init+0x304>)
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f70:	3301      	adds	r3, #1
 8005f72:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	f47f ae8e 	bne.w	8005ca0 <HAL_GPIO_Init+0x14>
  }
}
 8005f84:	bf00      	nop
 8005f86:	bf00      	nop
 8005f88:	372c      	adds	r7, #44	@ 0x2c
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bc80      	pop	{r7}
 8005f8e:	4770      	bx	lr
 8005f90:	40010400 	.word	0x40010400

08005f94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b085      	sub	sp, #20
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	689a      	ldr	r2, [r3, #8]
 8005fa4:	887b      	ldrh	r3, [r7, #2]
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d002      	beq.n	8005fb2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005fac:	2301      	movs	r3, #1
 8005fae:	73fb      	strb	r3, [r7, #15]
 8005fb0:	e001      	b.n	8005fb6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3714      	adds	r7, #20
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bc80      	pop	{r7}
 8005fc0:	4770      	bx	lr

08005fc2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b083      	sub	sp, #12
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
 8005fca:	460b      	mov	r3, r1
 8005fcc:	807b      	strh	r3, [r7, #2]
 8005fce:	4613      	mov	r3, r2
 8005fd0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005fd2:	787b      	ldrb	r3, [r7, #1]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d003      	beq.n	8005fe0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005fd8:	887a      	ldrh	r2, [r7, #2]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005fde:	e003      	b.n	8005fe8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005fe0:	887b      	ldrh	r3, [r7, #2]
 8005fe2:	041a      	lsls	r2, r3, #16
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	611a      	str	r2, [r3, #16]
}
 8005fe8:	bf00      	nop
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bc80      	pop	{r7}
 8005ff0:	4770      	bx	lr

08005ff2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005ff2:	b480      	push	{r7}
 8005ff4:	b085      	sub	sp, #20
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006004:	887a      	ldrh	r2, [r7, #2]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	4013      	ands	r3, r2
 800600a:	041a      	lsls	r2, r3, #16
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	43d9      	mvns	r1, r3
 8006010:	887b      	ldrh	r3, [r7, #2]
 8006012:	400b      	ands	r3, r1
 8006014:	431a      	orrs	r2, r3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	611a      	str	r2, [r3, #16]
}
 800601a:	bf00      	nop
 800601c:	3714      	adds	r7, #20
 800601e:	46bd      	mov	sp, r7
 8006020:	bc80      	pop	{r7}
 8006022:	4770      	bx	lr

08006024 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d101      	bne.n	8006036 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e12b      	b.n	800628e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800603c:	b2db      	uxtb	r3, r3
 800603e:	2b00      	cmp	r3, #0
 8006040:	d106      	bne.n	8006050 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f7fe fbac 	bl	80047a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2224      	movs	r2, #36	@ 0x24
 8006054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f022 0201 	bic.w	r2, r2, #1
 8006066:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006076:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006086:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006088:	f001 feaa 	bl	8007de0 <HAL_RCC_GetPCLK1Freq>
 800608c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	4a81      	ldr	r2, [pc, #516]	@ (8006298 <HAL_I2C_Init+0x274>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d807      	bhi.n	80060a8 <HAL_I2C_Init+0x84>
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	4a80      	ldr	r2, [pc, #512]	@ (800629c <HAL_I2C_Init+0x278>)
 800609c:	4293      	cmp	r3, r2
 800609e:	bf94      	ite	ls
 80060a0:	2301      	movls	r3, #1
 80060a2:	2300      	movhi	r3, #0
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	e006      	b.n	80060b6 <HAL_I2C_Init+0x92>
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	4a7d      	ldr	r2, [pc, #500]	@ (80062a0 <HAL_I2C_Init+0x27c>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	bf94      	ite	ls
 80060b0:	2301      	movls	r3, #1
 80060b2:	2300      	movhi	r3, #0
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d001      	beq.n	80060be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e0e7      	b.n	800628e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	4a78      	ldr	r2, [pc, #480]	@ (80062a4 <HAL_I2C_Init+0x280>)
 80060c2:	fba2 2303 	umull	r2, r3, r2, r3
 80060c6:	0c9b      	lsrs	r3, r3, #18
 80060c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68ba      	ldr	r2, [r7, #8]
 80060da:	430a      	orrs	r2, r1
 80060dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	6a1b      	ldr	r3, [r3, #32]
 80060e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	4a6a      	ldr	r2, [pc, #424]	@ (8006298 <HAL_I2C_Init+0x274>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d802      	bhi.n	80060f8 <HAL_I2C_Init+0xd4>
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	3301      	adds	r3, #1
 80060f6:	e009      	b.n	800610c <HAL_I2C_Init+0xe8>
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80060fe:	fb02 f303 	mul.w	r3, r2, r3
 8006102:	4a69      	ldr	r2, [pc, #420]	@ (80062a8 <HAL_I2C_Init+0x284>)
 8006104:	fba2 2303 	umull	r2, r3, r2, r3
 8006108:	099b      	lsrs	r3, r3, #6
 800610a:	3301      	adds	r3, #1
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	6812      	ldr	r2, [r2, #0]
 8006110:	430b      	orrs	r3, r1
 8006112:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	69db      	ldr	r3, [r3, #28]
 800611a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800611e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	495c      	ldr	r1, [pc, #368]	@ (8006298 <HAL_I2C_Init+0x274>)
 8006128:	428b      	cmp	r3, r1
 800612a:	d819      	bhi.n	8006160 <HAL_I2C_Init+0x13c>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	1e59      	subs	r1, r3, #1
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	005b      	lsls	r3, r3, #1
 8006136:	fbb1 f3f3 	udiv	r3, r1, r3
 800613a:	1c59      	adds	r1, r3, #1
 800613c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006140:	400b      	ands	r3, r1
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00a      	beq.n	800615c <HAL_I2C_Init+0x138>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	1e59      	subs	r1, r3, #1
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	005b      	lsls	r3, r3, #1
 8006150:	fbb1 f3f3 	udiv	r3, r1, r3
 8006154:	3301      	adds	r3, #1
 8006156:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800615a:	e051      	b.n	8006200 <HAL_I2C_Init+0x1dc>
 800615c:	2304      	movs	r3, #4
 800615e:	e04f      	b.n	8006200 <HAL_I2C_Init+0x1dc>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d111      	bne.n	800618c <HAL_I2C_Init+0x168>
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	1e58      	subs	r0, r3, #1
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6859      	ldr	r1, [r3, #4]
 8006170:	460b      	mov	r3, r1
 8006172:	005b      	lsls	r3, r3, #1
 8006174:	440b      	add	r3, r1
 8006176:	fbb0 f3f3 	udiv	r3, r0, r3
 800617a:	3301      	adds	r3, #1
 800617c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006180:	2b00      	cmp	r3, #0
 8006182:	bf0c      	ite	eq
 8006184:	2301      	moveq	r3, #1
 8006186:	2300      	movne	r3, #0
 8006188:	b2db      	uxtb	r3, r3
 800618a:	e012      	b.n	80061b2 <HAL_I2C_Init+0x18e>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	1e58      	subs	r0, r3, #1
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6859      	ldr	r1, [r3, #4]
 8006194:	460b      	mov	r3, r1
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	440b      	add	r3, r1
 800619a:	0099      	lsls	r1, r3, #2
 800619c:	440b      	add	r3, r1
 800619e:	fbb0 f3f3 	udiv	r3, r0, r3
 80061a2:	3301      	adds	r3, #1
 80061a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	bf0c      	ite	eq
 80061ac:	2301      	moveq	r3, #1
 80061ae:	2300      	movne	r3, #0
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d001      	beq.n	80061ba <HAL_I2C_Init+0x196>
 80061b6:	2301      	movs	r3, #1
 80061b8:	e022      	b.n	8006200 <HAL_I2C_Init+0x1dc>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d10e      	bne.n	80061e0 <HAL_I2C_Init+0x1bc>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	1e58      	subs	r0, r3, #1
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6859      	ldr	r1, [r3, #4]
 80061ca:	460b      	mov	r3, r1
 80061cc:	005b      	lsls	r3, r3, #1
 80061ce:	440b      	add	r3, r1
 80061d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80061d4:	3301      	adds	r3, #1
 80061d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061de:	e00f      	b.n	8006200 <HAL_I2C_Init+0x1dc>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	1e58      	subs	r0, r3, #1
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6859      	ldr	r1, [r3, #4]
 80061e8:	460b      	mov	r3, r1
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	440b      	add	r3, r1
 80061ee:	0099      	lsls	r1, r3, #2
 80061f0:	440b      	add	r3, r1
 80061f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80061f6:	3301      	adds	r3, #1
 80061f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006200:	6879      	ldr	r1, [r7, #4]
 8006202:	6809      	ldr	r1, [r1, #0]
 8006204:	4313      	orrs	r3, r2
 8006206:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	69da      	ldr	r2, [r3, #28]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a1b      	ldr	r3, [r3, #32]
 800621a:	431a      	orrs	r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	430a      	orrs	r2, r1
 8006222:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800622e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	6911      	ldr	r1, [r2, #16]
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	68d2      	ldr	r2, [r2, #12]
 800623a:	4311      	orrs	r1, r2
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	6812      	ldr	r2, [r2, #0]
 8006240:	430b      	orrs	r3, r1
 8006242:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	695a      	ldr	r2, [r3, #20]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	699b      	ldr	r3, [r3, #24]
 8006256:	431a      	orrs	r2, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	430a      	orrs	r2, r1
 800625e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f042 0201 	orr.w	r2, r2, #1
 800626e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2220      	movs	r2, #32
 800627a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	000186a0 	.word	0x000186a0
 800629c:	001e847f 	.word	0x001e847f
 80062a0:	003d08ff 	.word	0x003d08ff
 80062a4:	431bde83 	.word	0x431bde83
 80062a8:	10624dd3 	.word	0x10624dd3

080062ac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b088      	sub	sp, #32
 80062b0:	af02      	add	r7, sp, #8
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	607a      	str	r2, [r7, #4]
 80062b6:	461a      	mov	r2, r3
 80062b8:	460b      	mov	r3, r1
 80062ba:	817b      	strh	r3, [r7, #10]
 80062bc:	4613      	mov	r3, r2
 80062be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80062c0:	f7fe fdd0 	bl	8004e64 <HAL_GetTick>
 80062c4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	2b20      	cmp	r3, #32
 80062d0:	f040 80e0 	bne.w	8006494 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	9300      	str	r3, [sp, #0]
 80062d8:	2319      	movs	r3, #25
 80062da:	2201      	movs	r2, #1
 80062dc:	4970      	ldr	r1, [pc, #448]	@ (80064a0 <HAL_I2C_Master_Transmit+0x1f4>)
 80062de:	68f8      	ldr	r0, [r7, #12]
 80062e0:	f000 ff7e 	bl	80071e0 <I2C_WaitOnFlagUntilTimeout>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d001      	beq.n	80062ee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80062ea:	2302      	movs	r3, #2
 80062ec:	e0d3      	b.n	8006496 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d101      	bne.n	80062fc <HAL_I2C_Master_Transmit+0x50>
 80062f8:	2302      	movs	r3, #2
 80062fa:	e0cc      	b.n	8006496 <HAL_I2C_Master_Transmit+0x1ea>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0301 	and.w	r3, r3, #1
 800630e:	2b01      	cmp	r3, #1
 8006310:	d007      	beq.n	8006322 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f042 0201 	orr.w	r2, r2, #1
 8006320:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006330:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2221      	movs	r2, #33	@ 0x21
 8006336:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2210      	movs	r2, #16
 800633e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2200      	movs	r2, #0
 8006346:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	893a      	ldrh	r2, [r7, #8]
 8006352:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006358:	b29a      	uxth	r2, r3
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	4a50      	ldr	r2, [pc, #320]	@ (80064a4 <HAL_I2C_Master_Transmit+0x1f8>)
 8006362:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006364:	8979      	ldrh	r1, [r7, #10]
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	6a3a      	ldr	r2, [r7, #32]
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	f000 fd38 	bl	8006de0 <I2C_MasterRequestWrite>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d001      	beq.n	800637a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e08d      	b.n	8006496 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800637a:	2300      	movs	r3, #0
 800637c:	613b      	str	r3, [r7, #16]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	695b      	ldr	r3, [r3, #20]
 8006384:	613b      	str	r3, [r7, #16]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	699b      	ldr	r3, [r3, #24]
 800638c:	613b      	str	r3, [r7, #16]
 800638e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006390:	e066      	b.n	8006460 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	6a39      	ldr	r1, [r7, #32]
 8006396:	68f8      	ldr	r0, [r7, #12]
 8006398:	f001 f83c 	bl	8007414 <I2C_WaitOnTXEFlagUntilTimeout>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00d      	beq.n	80063be <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063a6:	2b04      	cmp	r3, #4
 80063a8:	d107      	bne.n	80063ba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e06b      	b.n	8006496 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c2:	781a      	ldrb	r2, [r3, #0]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ce:	1c5a      	adds	r2, r3, #1
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063d8:	b29b      	uxth	r3, r3
 80063da:	3b01      	subs	r3, #1
 80063dc:	b29a      	uxth	r2, r3
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063e6:	3b01      	subs	r3, #1
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	695b      	ldr	r3, [r3, #20]
 80063f4:	f003 0304 	and.w	r3, r3, #4
 80063f8:	2b04      	cmp	r3, #4
 80063fa:	d11b      	bne.n	8006434 <HAL_I2C_Master_Transmit+0x188>
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006400:	2b00      	cmp	r3, #0
 8006402:	d017      	beq.n	8006434 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006408:	781a      	ldrb	r2, [r3, #0]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006414:	1c5a      	adds	r2, r3, #1
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800641e:	b29b      	uxth	r3, r3
 8006420:	3b01      	subs	r3, #1
 8006422:	b29a      	uxth	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800642c:	3b01      	subs	r3, #1
 800642e:	b29a      	uxth	r2, r3
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006434:	697a      	ldr	r2, [r7, #20]
 8006436:	6a39      	ldr	r1, [r7, #32]
 8006438:	68f8      	ldr	r0, [r7, #12]
 800643a:	f001 f833 	bl	80074a4 <I2C_WaitOnBTFFlagUntilTimeout>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d00d      	beq.n	8006460 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006448:	2b04      	cmp	r3, #4
 800644a:	d107      	bne.n	800645c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800645a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	e01a      	b.n	8006496 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006464:	2b00      	cmp	r3, #0
 8006466:	d194      	bne.n	8006392 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006476:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2220      	movs	r2, #32
 800647c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2200      	movs	r2, #0
 800648c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006490:	2300      	movs	r3, #0
 8006492:	e000      	b.n	8006496 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006494:	2302      	movs	r3, #2
  }
}
 8006496:	4618      	mov	r0, r3
 8006498:	3718      	adds	r7, #24
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	00100002 	.word	0x00100002
 80064a4:	ffff0000 	.word	0xffff0000

080064a8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b088      	sub	sp, #32
 80064ac:	af02      	add	r7, sp, #8
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	4608      	mov	r0, r1
 80064b2:	4611      	mov	r1, r2
 80064b4:	461a      	mov	r2, r3
 80064b6:	4603      	mov	r3, r0
 80064b8:	817b      	strh	r3, [r7, #10]
 80064ba:	460b      	mov	r3, r1
 80064bc:	813b      	strh	r3, [r7, #8]
 80064be:	4613      	mov	r3, r2
 80064c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80064c2:	f7fe fccf 	bl	8004e64 <HAL_GetTick>
 80064c6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	2b20      	cmp	r3, #32
 80064d2:	f040 80d9 	bne.w	8006688 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	9300      	str	r3, [sp, #0]
 80064da:	2319      	movs	r3, #25
 80064dc:	2201      	movs	r2, #1
 80064de:	496d      	ldr	r1, [pc, #436]	@ (8006694 <HAL_I2C_Mem_Write+0x1ec>)
 80064e0:	68f8      	ldr	r0, [r7, #12]
 80064e2:	f000 fe7d 	bl	80071e0 <I2C_WaitOnFlagUntilTimeout>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d001      	beq.n	80064f0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80064ec:	2302      	movs	r3, #2
 80064ee:	e0cc      	b.n	800668a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d101      	bne.n	80064fe <HAL_I2C_Mem_Write+0x56>
 80064fa:	2302      	movs	r3, #2
 80064fc:	e0c5      	b.n	800668a <HAL_I2C_Mem_Write+0x1e2>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2201      	movs	r2, #1
 8006502:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 0301 	and.w	r3, r3, #1
 8006510:	2b01      	cmp	r3, #1
 8006512:	d007      	beq.n	8006524 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f042 0201 	orr.w	r2, r2, #1
 8006522:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006532:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2221      	movs	r2, #33	@ 0x21
 8006538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2240      	movs	r2, #64	@ 0x40
 8006540:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6a3a      	ldr	r2, [r7, #32]
 800654e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006554:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800655a:	b29a      	uxth	r2, r3
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	4a4d      	ldr	r2, [pc, #308]	@ (8006698 <HAL_I2C_Mem_Write+0x1f0>)
 8006564:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006566:	88f8      	ldrh	r0, [r7, #6]
 8006568:	893a      	ldrh	r2, [r7, #8]
 800656a:	8979      	ldrh	r1, [r7, #10]
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	9301      	str	r3, [sp, #4]
 8006570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006572:	9300      	str	r3, [sp, #0]
 8006574:	4603      	mov	r3, r0
 8006576:	68f8      	ldr	r0, [r7, #12]
 8006578:	f000 fcb4 	bl	8006ee4 <I2C_RequestMemoryWrite>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d052      	beq.n	8006628 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e081      	b.n	800668a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006586:	697a      	ldr	r2, [r7, #20]
 8006588:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800658a:	68f8      	ldr	r0, [r7, #12]
 800658c:	f000 ff42 	bl	8007414 <I2C_WaitOnTXEFlagUntilTimeout>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00d      	beq.n	80065b2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800659a:	2b04      	cmp	r3, #4
 800659c:	d107      	bne.n	80065ae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e06b      	b.n	800668a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065b6:	781a      	ldrb	r2, [r3, #0]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065c2:	1c5a      	adds	r2, r3, #1
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065cc:	3b01      	subs	r3, #1
 80065ce:	b29a      	uxth	r2, r3
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065d8:	b29b      	uxth	r3, r3
 80065da:	3b01      	subs	r3, #1
 80065dc:	b29a      	uxth	r2, r3
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	695b      	ldr	r3, [r3, #20]
 80065e8:	f003 0304 	and.w	r3, r3, #4
 80065ec:	2b04      	cmp	r3, #4
 80065ee:	d11b      	bne.n	8006628 <HAL_I2C_Mem_Write+0x180>
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d017      	beq.n	8006628 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065fc:	781a      	ldrb	r2, [r3, #0]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006608:	1c5a      	adds	r2, r3, #1
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006612:	3b01      	subs	r3, #1
 8006614:	b29a      	uxth	r2, r3
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800661e:	b29b      	uxth	r3, r3
 8006620:	3b01      	subs	r3, #1
 8006622:	b29a      	uxth	r2, r3
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800662c:	2b00      	cmp	r3, #0
 800662e:	d1aa      	bne.n	8006586 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006630:	697a      	ldr	r2, [r7, #20]
 8006632:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006634:	68f8      	ldr	r0, [r7, #12]
 8006636:	f000 ff35 	bl	80074a4 <I2C_WaitOnBTFFlagUntilTimeout>
 800663a:	4603      	mov	r3, r0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00d      	beq.n	800665c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006644:	2b04      	cmp	r3, #4
 8006646:	d107      	bne.n	8006658 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006656:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e016      	b.n	800668a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800666a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2220      	movs	r2, #32
 8006670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2200      	movs	r2, #0
 8006678:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006684:	2300      	movs	r3, #0
 8006686:	e000      	b.n	800668a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006688:	2302      	movs	r3, #2
  }
}
 800668a:	4618      	mov	r0, r3
 800668c:	3718      	adds	r7, #24
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	00100002 	.word	0x00100002
 8006698:	ffff0000 	.word	0xffff0000

0800669c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b08c      	sub	sp, #48	@ 0x30
 80066a0:	af02      	add	r7, sp, #8
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	4608      	mov	r0, r1
 80066a6:	4611      	mov	r1, r2
 80066a8:	461a      	mov	r2, r3
 80066aa:	4603      	mov	r3, r0
 80066ac:	817b      	strh	r3, [r7, #10]
 80066ae:	460b      	mov	r3, r1
 80066b0:	813b      	strh	r3, [r7, #8]
 80066b2:	4613      	mov	r3, r2
 80066b4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80066b6:	2300      	movs	r3, #0
 80066b8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80066ba:	f7fe fbd3 	bl	8004e64 <HAL_GetTick>
 80066be:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	2b20      	cmp	r3, #32
 80066ca:	f040 8250 	bne.w	8006b6e <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80066ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d0:	9300      	str	r3, [sp, #0]
 80066d2:	2319      	movs	r3, #25
 80066d4:	2201      	movs	r2, #1
 80066d6:	4982      	ldr	r1, [pc, #520]	@ (80068e0 <HAL_I2C_Mem_Read+0x244>)
 80066d8:	68f8      	ldr	r0, [r7, #12]
 80066da:	f000 fd81 	bl	80071e0 <I2C_WaitOnFlagUntilTimeout>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d001      	beq.n	80066e8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80066e4:	2302      	movs	r3, #2
 80066e6:	e243      	b.n	8006b70 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d101      	bne.n	80066f6 <HAL_I2C_Mem_Read+0x5a>
 80066f2:	2302      	movs	r3, #2
 80066f4:	e23c      	b.n	8006b70 <HAL_I2C_Mem_Read+0x4d4>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 0301 	and.w	r3, r3, #1
 8006708:	2b01      	cmp	r3, #1
 800670a:	d007      	beq.n	800671c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f042 0201 	orr.w	r2, r2, #1
 800671a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800672a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2222      	movs	r2, #34	@ 0x22
 8006730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2240      	movs	r2, #64	@ 0x40
 8006738:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006746:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800674c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006752:	b29a      	uxth	r2, r3
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	4a62      	ldr	r2, [pc, #392]	@ (80068e4 <HAL_I2C_Mem_Read+0x248>)
 800675c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800675e:	88f8      	ldrh	r0, [r7, #6]
 8006760:	893a      	ldrh	r2, [r7, #8]
 8006762:	8979      	ldrh	r1, [r7, #10]
 8006764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006766:	9301      	str	r3, [sp, #4]
 8006768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800676a:	9300      	str	r3, [sp, #0]
 800676c:	4603      	mov	r3, r0
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	f000 fc4e 	bl	8007010 <I2C_RequestMemoryRead>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d001      	beq.n	800677e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	e1f8      	b.n	8006b70 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006782:	2b00      	cmp	r3, #0
 8006784:	d113      	bne.n	80067ae <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006786:	2300      	movs	r3, #0
 8006788:	61fb      	str	r3, [r7, #28]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	695b      	ldr	r3, [r3, #20]
 8006790:	61fb      	str	r3, [r7, #28]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	61fb      	str	r3, [r7, #28]
 800679a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067aa:	601a      	str	r2, [r3, #0]
 80067ac:	e1cc      	b.n	8006b48 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d11e      	bne.n	80067f4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067c4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80067c6:	b672      	cpsid	i
}
 80067c8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067ca:	2300      	movs	r3, #0
 80067cc:	61bb      	str	r3, [r7, #24]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	695b      	ldr	r3, [r3, #20]
 80067d4:	61bb      	str	r3, [r7, #24]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	699b      	ldr	r3, [r3, #24]
 80067dc:	61bb      	str	r3, [r7, #24]
 80067de:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80067f0:	b662      	cpsie	i
}
 80067f2:	e035      	b.n	8006860 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	d11e      	bne.n	800683a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800680a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800680c:	b672      	cpsid	i
}
 800680e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006810:	2300      	movs	r3, #0
 8006812:	617b      	str	r3, [r7, #20]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	617b      	str	r3, [r7, #20]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	617b      	str	r3, [r7, #20]
 8006824:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006834:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006836:	b662      	cpsie	i
}
 8006838:	e012      	b.n	8006860 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006848:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800684a:	2300      	movs	r3, #0
 800684c:	613b      	str	r3, [r7, #16]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	695b      	ldr	r3, [r3, #20]
 8006854:	613b      	str	r3, [r7, #16]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	699b      	ldr	r3, [r3, #24]
 800685c:	613b      	str	r3, [r7, #16]
 800685e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8006860:	e172      	b.n	8006b48 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006866:	2b03      	cmp	r3, #3
 8006868:	f200 811f 	bhi.w	8006aaa <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006870:	2b01      	cmp	r3, #1
 8006872:	d123      	bne.n	80068bc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006874:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006876:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006878:	68f8      	ldr	r0, [r7, #12]
 800687a:	f000 fe5b 	bl	8007534 <I2C_WaitOnRXNEFlagUntilTimeout>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d001      	beq.n	8006888 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	e173      	b.n	8006b70 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	691a      	ldr	r2, [r3, #16]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006892:	b2d2      	uxtb	r2, r2
 8006894:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800689a:	1c5a      	adds	r2, r3, #1
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068a4:	3b01      	subs	r3, #1
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	3b01      	subs	r3, #1
 80068b4:	b29a      	uxth	r2, r3
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80068ba:	e145      	b.n	8006b48 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068c0:	2b02      	cmp	r3, #2
 80068c2:	d152      	bne.n	800696a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80068c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c6:	9300      	str	r3, [sp, #0]
 80068c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ca:	2200      	movs	r2, #0
 80068cc:	4906      	ldr	r1, [pc, #24]	@ (80068e8 <HAL_I2C_Mem_Read+0x24c>)
 80068ce:	68f8      	ldr	r0, [r7, #12]
 80068d0:	f000 fc86 	bl	80071e0 <I2C_WaitOnFlagUntilTimeout>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d008      	beq.n	80068ec <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e148      	b.n	8006b70 <HAL_I2C_Mem_Read+0x4d4>
 80068de:	bf00      	nop
 80068e0:	00100002 	.word	0x00100002
 80068e4:	ffff0000 	.word	0xffff0000
 80068e8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80068ec:	b672      	cpsid	i
}
 80068ee:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	691a      	ldr	r2, [r3, #16]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800690a:	b2d2      	uxtb	r2, r2
 800690c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006912:	1c5a      	adds	r2, r3, #1
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800691c:	3b01      	subs	r3, #1
 800691e:	b29a      	uxth	r2, r3
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006928:	b29b      	uxth	r3, r3
 800692a:	3b01      	subs	r3, #1
 800692c:	b29a      	uxth	r2, r3
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006932:	b662      	cpsie	i
}
 8006934:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	691a      	ldr	r2, [r3, #16]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006940:	b2d2      	uxtb	r2, r2
 8006942:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006948:	1c5a      	adds	r2, r3, #1
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006952:	3b01      	subs	r3, #1
 8006954:	b29a      	uxth	r2, r3
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800695e:	b29b      	uxth	r3, r3
 8006960:	3b01      	subs	r3, #1
 8006962:	b29a      	uxth	r2, r3
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006968:	e0ee      	b.n	8006b48 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800696a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800696c:	9300      	str	r3, [sp, #0]
 800696e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006970:	2200      	movs	r2, #0
 8006972:	4981      	ldr	r1, [pc, #516]	@ (8006b78 <HAL_I2C_Mem_Read+0x4dc>)
 8006974:	68f8      	ldr	r0, [r7, #12]
 8006976:	f000 fc33 	bl	80071e0 <I2C_WaitOnFlagUntilTimeout>
 800697a:	4603      	mov	r3, r0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d001      	beq.n	8006984 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	e0f5      	b.n	8006b70 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006992:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006994:	b672      	cpsid	i
}
 8006996:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	691a      	ldr	r2, [r3, #16]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069a2:	b2d2      	uxtb	r2, r2
 80069a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069aa:	1c5a      	adds	r2, r3, #1
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069b4:	3b01      	subs	r3, #1
 80069b6:	b29a      	uxth	r2, r3
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	3b01      	subs	r3, #1
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80069ca:	4b6c      	ldr	r3, [pc, #432]	@ (8006b7c <HAL_I2C_Mem_Read+0x4e0>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	08db      	lsrs	r3, r3, #3
 80069d0:	4a6b      	ldr	r2, [pc, #428]	@ (8006b80 <HAL_I2C_Mem_Read+0x4e4>)
 80069d2:	fba2 2303 	umull	r2, r3, r2, r3
 80069d6:	0a1a      	lsrs	r2, r3, #8
 80069d8:	4613      	mov	r3, r2
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	4413      	add	r3, r2
 80069de:	00da      	lsls	r2, r3, #3
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80069e4:	6a3b      	ldr	r3, [r7, #32]
 80069e6:	3b01      	subs	r3, #1
 80069e8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80069ea:	6a3b      	ldr	r3, [r7, #32]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d118      	bne.n	8006a22 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2200      	movs	r2, #0
 80069f4:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2220      	movs	r2, #32
 80069fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a0a:	f043 0220 	orr.w	r2, r3, #32
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8006a12:	b662      	cpsie	i
}
 8006a14:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e0a6      	b.n	8006b70 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	695b      	ldr	r3, [r3, #20]
 8006a28:	f003 0304 	and.w	r3, r3, #4
 8006a2c:	2b04      	cmp	r3, #4
 8006a2e:	d1d9      	bne.n	80069e4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	691a      	ldr	r2, [r3, #16]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a4a:	b2d2      	uxtb	r2, r2
 8006a4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a52:	1c5a      	adds	r2, r3, #1
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	3b01      	subs	r3, #1
 8006a6c:	b29a      	uxth	r2, r3
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006a72:	b662      	cpsie	i
}
 8006a74:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	691a      	ldr	r2, [r3, #16]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a80:	b2d2      	uxtb	r2, r2
 8006a82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a88:	1c5a      	adds	r2, r3, #1
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a92:	3b01      	subs	r3, #1
 8006a94:	b29a      	uxth	r2, r3
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	3b01      	subs	r3, #1
 8006aa2:	b29a      	uxth	r2, r3
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006aa8:	e04e      	b.n	8006b48 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006aaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006aac:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	f000 fd40 	bl	8007534 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d001      	beq.n	8006abe <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e058      	b.n	8006b70 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	691a      	ldr	r2, [r3, #16]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ac8:	b2d2      	uxtb	r2, r2
 8006aca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ad0:	1c5a      	adds	r2, r3, #1
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ada:	3b01      	subs	r3, #1
 8006adc:	b29a      	uxth	r2, r3
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	3b01      	subs	r3, #1
 8006aea:	b29a      	uxth	r2, r3
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	695b      	ldr	r3, [r3, #20]
 8006af6:	f003 0304 	and.w	r3, r3, #4
 8006afa:	2b04      	cmp	r3, #4
 8006afc:	d124      	bne.n	8006b48 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b02:	2b03      	cmp	r3, #3
 8006b04:	d107      	bne.n	8006b16 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b14:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	691a      	ldr	r2, [r3, #16]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b20:	b2d2      	uxtb	r2, r2
 8006b22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b28:	1c5a      	adds	r2, r3, #1
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b32:	3b01      	subs	r3, #1
 8006b34:	b29a      	uxth	r2, r3
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	3b01      	subs	r3, #1
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	f47f ae88 	bne.w	8006862 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2220      	movs	r2, #32
 8006b56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	e000      	b.n	8006b70 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8006b6e:	2302      	movs	r3, #2
  }
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3728      	adds	r7, #40	@ 0x28
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	00010004 	.word	0x00010004
 8006b7c:	2000005c 	.word	0x2000005c
 8006b80:	14f8b589 	.word	0x14f8b589

08006b84 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b08a      	sub	sp, #40	@ 0x28
 8006b88:	af02      	add	r7, sp, #8
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	607a      	str	r2, [r7, #4]
 8006b8e:	603b      	str	r3, [r7, #0]
 8006b90:	460b      	mov	r3, r1
 8006b92:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006b94:	f7fe f966 	bl	8004e64 <HAL_GetTick>
 8006b98:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	2b20      	cmp	r3, #32
 8006ba8:	f040 8111 	bne.w	8006dce <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	9300      	str	r3, [sp, #0]
 8006bb0:	2319      	movs	r3, #25
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	4988      	ldr	r1, [pc, #544]	@ (8006dd8 <HAL_I2C_IsDeviceReady+0x254>)
 8006bb6:	68f8      	ldr	r0, [r7, #12]
 8006bb8:	f000 fb12 	bl	80071e0 <I2C_WaitOnFlagUntilTimeout>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d001      	beq.n	8006bc6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8006bc2:	2302      	movs	r3, #2
 8006bc4:	e104      	b.n	8006dd0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d101      	bne.n	8006bd4 <HAL_I2C_IsDeviceReady+0x50>
 8006bd0:	2302      	movs	r3, #2
 8006bd2:	e0fd      	b.n	8006dd0 <HAL_I2C_IsDeviceReady+0x24c>
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 0301 	and.w	r3, r3, #1
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d007      	beq.n	8006bfa <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f042 0201 	orr.w	r2, r2, #1
 8006bf8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c08:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2224      	movs	r2, #36	@ 0x24
 8006c0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2200      	movs	r2, #0
 8006c16:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	4a70      	ldr	r2, [pc, #448]	@ (8006ddc <HAL_I2C_IsDeviceReady+0x258>)
 8006c1c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c2c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	9300      	str	r3, [sp, #0]
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006c3a:	68f8      	ldr	r0, [r7, #12]
 8006c3c:	f000 fad0 	bl	80071e0 <I2C_WaitOnFlagUntilTimeout>
 8006c40:	4603      	mov	r3, r0
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00d      	beq.n	8006c62 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c54:	d103      	bne.n	8006c5e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c5c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	e0b6      	b.n	8006dd0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006c62:	897b      	ldrh	r3, [r7, #10]
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	461a      	mov	r2, r3
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006c70:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8006c72:	f7fe f8f7 	bl	8004e64 <HAL_GetTick>
 8006c76:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	695b      	ldr	r3, [r3, #20]
 8006c7e:	f003 0302 	and.w	r3, r3, #2
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	bf0c      	ite	eq
 8006c86:	2301      	moveq	r3, #1
 8006c88:	2300      	movne	r3, #0
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	695b      	ldr	r3, [r3, #20]
 8006c94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c9c:	bf0c      	ite	eq
 8006c9e:	2301      	moveq	r3, #1
 8006ca0:	2300      	movne	r3, #0
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006ca6:	e025      	b.n	8006cf4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006ca8:	f7fe f8dc 	bl	8004e64 <HAL_GetTick>
 8006cac:	4602      	mov	r2, r0
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	683a      	ldr	r2, [r7, #0]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d302      	bcc.n	8006cbe <HAL_I2C_IsDeviceReady+0x13a>
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d103      	bne.n	8006cc6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	22a0      	movs	r2, #160	@ 0xa0
 8006cc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	695b      	ldr	r3, [r3, #20]
 8006ccc:	f003 0302 	and.w	r3, r3, #2
 8006cd0:	2b02      	cmp	r3, #2
 8006cd2:	bf0c      	ite	eq
 8006cd4:	2301      	moveq	r3, #1
 8006cd6:	2300      	movne	r3, #0
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	695b      	ldr	r3, [r3, #20]
 8006ce2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ce6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cea:	bf0c      	ite	eq
 8006cec:	2301      	moveq	r3, #1
 8006cee:	2300      	movne	r3, #0
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	2ba0      	cmp	r3, #160	@ 0xa0
 8006cfe:	d005      	beq.n	8006d0c <HAL_I2C_IsDeviceReady+0x188>
 8006d00:	7dfb      	ldrb	r3, [r7, #23]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d102      	bne.n	8006d0c <HAL_I2C_IsDeviceReady+0x188>
 8006d06:	7dbb      	ldrb	r3, [r7, #22]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d0cd      	beq.n	8006ca8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2220      	movs	r2, #32
 8006d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	695b      	ldr	r3, [r3, #20]
 8006d1a:	f003 0302 	and.w	r3, r3, #2
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	d129      	bne.n	8006d76 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d30:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d32:	2300      	movs	r3, #0
 8006d34:	613b      	str	r3, [r7, #16]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	695b      	ldr	r3, [r3, #20]
 8006d3c:	613b      	str	r3, [r7, #16]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	699b      	ldr	r3, [r3, #24]
 8006d44:	613b      	str	r3, [r7, #16]
 8006d46:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	9300      	str	r3, [sp, #0]
 8006d4c:	2319      	movs	r3, #25
 8006d4e:	2201      	movs	r2, #1
 8006d50:	4921      	ldr	r1, [pc, #132]	@ (8006dd8 <HAL_I2C_IsDeviceReady+0x254>)
 8006d52:	68f8      	ldr	r0, [r7, #12]
 8006d54:	f000 fa44 	bl	80071e0 <I2C_WaitOnFlagUntilTimeout>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d001      	beq.n	8006d62 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e036      	b.n	8006dd0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2220      	movs	r2, #32
 8006d66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8006d72:	2300      	movs	r3, #0
 8006d74:	e02c      	b.n	8006dd0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d84:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006d8e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	9300      	str	r3, [sp, #0]
 8006d94:	2319      	movs	r3, #25
 8006d96:	2201      	movs	r2, #1
 8006d98:	490f      	ldr	r1, [pc, #60]	@ (8006dd8 <HAL_I2C_IsDeviceReady+0x254>)
 8006d9a:	68f8      	ldr	r0, [r7, #12]
 8006d9c:	f000 fa20 	bl	80071e0 <I2C_WaitOnFlagUntilTimeout>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d001      	beq.n	8006daa <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e012      	b.n	8006dd0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	3301      	adds	r3, #1
 8006dae:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006db0:	69ba      	ldr	r2, [r7, #24]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	f4ff af32 	bcc.w	8006c1e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2220      	movs	r2, #32
 8006dbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e000      	b.n	8006dd0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8006dce:	2302      	movs	r3, #2
  }
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3720      	adds	r7, #32
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	00100002 	.word	0x00100002
 8006ddc:	ffff0000 	.word	0xffff0000

08006de0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b088      	sub	sp, #32
 8006de4:	af02      	add	r7, sp, #8
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	607a      	str	r2, [r7, #4]
 8006dea:	603b      	str	r3, [r7, #0]
 8006dec:	460b      	mov	r3, r1
 8006dee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006df4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	2b08      	cmp	r3, #8
 8006dfa:	d006      	beq.n	8006e0a <I2C_MasterRequestWrite+0x2a>
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d003      	beq.n	8006e0a <I2C_MasterRequestWrite+0x2a>
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006e08:	d108      	bne.n	8006e1c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e18:	601a      	str	r2, [r3, #0]
 8006e1a:	e00b      	b.n	8006e34 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e20:	2b12      	cmp	r3, #18
 8006e22:	d107      	bne.n	8006e34 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e32:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	9300      	str	r3, [sp, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006e40:	68f8      	ldr	r0, [r7, #12]
 8006e42:	f000 f9cd 	bl	80071e0 <I2C_WaitOnFlagUntilTimeout>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d00d      	beq.n	8006e68 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e5a:	d103      	bne.n	8006e64 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006e62:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006e64:	2303      	movs	r3, #3
 8006e66:	e035      	b.n	8006ed4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	691b      	ldr	r3, [r3, #16]
 8006e6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e70:	d108      	bne.n	8006e84 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006e72:	897b      	ldrh	r3, [r7, #10]
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	461a      	mov	r2, r3
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006e80:	611a      	str	r2, [r3, #16]
 8006e82:	e01b      	b.n	8006ebc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006e84:	897b      	ldrh	r3, [r7, #10]
 8006e86:	11db      	asrs	r3, r3, #7
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	f003 0306 	and.w	r3, r3, #6
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	f063 030f 	orn	r3, r3, #15
 8006e94:	b2da      	uxtb	r2, r3
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	490e      	ldr	r1, [pc, #56]	@ (8006edc <I2C_MasterRequestWrite+0xfc>)
 8006ea2:	68f8      	ldr	r0, [r7, #12]
 8006ea4:	f000 fa16 	bl	80072d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d001      	beq.n	8006eb2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e010      	b.n	8006ed4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006eb2:	897b      	ldrh	r3, [r7, #10]
 8006eb4:	b2da      	uxtb	r2, r3
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	4907      	ldr	r1, [pc, #28]	@ (8006ee0 <I2C_MasterRequestWrite+0x100>)
 8006ec2:	68f8      	ldr	r0, [r7, #12]
 8006ec4:	f000 fa06 	bl	80072d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d001      	beq.n	8006ed2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e000      	b.n	8006ed4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006ed2:	2300      	movs	r3, #0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3718      	adds	r7, #24
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	00010008 	.word	0x00010008
 8006ee0:	00010002 	.word	0x00010002

08006ee4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b088      	sub	sp, #32
 8006ee8:	af02      	add	r7, sp, #8
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	4608      	mov	r0, r1
 8006eee:	4611      	mov	r1, r2
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	817b      	strh	r3, [r7, #10]
 8006ef6:	460b      	mov	r3, r1
 8006ef8:	813b      	strh	r3, [r7, #8]
 8006efa:	4613      	mov	r3, r2
 8006efc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006f0c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f10:	9300      	str	r3, [sp, #0]
 8006f12:	6a3b      	ldr	r3, [r7, #32]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006f1a:	68f8      	ldr	r0, [r7, #12]
 8006f1c:	f000 f960 	bl	80071e0 <I2C_WaitOnFlagUntilTimeout>
 8006f20:	4603      	mov	r3, r0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00d      	beq.n	8006f42 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f34:	d103      	bne.n	8006f3e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f3c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	e05f      	b.n	8007002 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006f42:	897b      	ldrh	r3, [r7, #10]
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	461a      	mov	r2, r3
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006f50:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f54:	6a3a      	ldr	r2, [r7, #32]
 8006f56:	492d      	ldr	r1, [pc, #180]	@ (800700c <I2C_RequestMemoryWrite+0x128>)
 8006f58:	68f8      	ldr	r0, [r7, #12]
 8006f5a:	f000 f9bb 	bl	80072d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d001      	beq.n	8006f68 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	e04c      	b.n	8007002 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f68:	2300      	movs	r3, #0
 8006f6a:	617b      	str	r3, [r7, #20]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	695b      	ldr	r3, [r3, #20]
 8006f72:	617b      	str	r3, [r7, #20]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	699b      	ldr	r3, [r3, #24]
 8006f7a:	617b      	str	r3, [r7, #20]
 8006f7c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f80:	6a39      	ldr	r1, [r7, #32]
 8006f82:	68f8      	ldr	r0, [r7, #12]
 8006f84:	f000 fa46 	bl	8007414 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d00d      	beq.n	8006faa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f92:	2b04      	cmp	r3, #4
 8006f94:	d107      	bne.n	8006fa6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006fa4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e02b      	b.n	8007002 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006faa:	88fb      	ldrh	r3, [r7, #6]
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d105      	bne.n	8006fbc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006fb0:	893b      	ldrh	r3, [r7, #8]
 8006fb2:	b2da      	uxtb	r2, r3
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	611a      	str	r2, [r3, #16]
 8006fba:	e021      	b.n	8007000 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006fbc:	893b      	ldrh	r3, [r7, #8]
 8006fbe:	0a1b      	lsrs	r3, r3, #8
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	b2da      	uxtb	r2, r3
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fcc:	6a39      	ldr	r1, [r7, #32]
 8006fce:	68f8      	ldr	r0, [r7, #12]
 8006fd0:	f000 fa20 	bl	8007414 <I2C_WaitOnTXEFlagUntilTimeout>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d00d      	beq.n	8006ff6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fde:	2b04      	cmp	r3, #4
 8006fe0:	d107      	bne.n	8006ff2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ff0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e005      	b.n	8007002 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006ff6:	893b      	ldrh	r3, [r7, #8]
 8006ff8:	b2da      	uxtb	r2, r3
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007000:	2300      	movs	r3, #0
}
 8007002:	4618      	mov	r0, r3
 8007004:	3718      	adds	r7, #24
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	00010002 	.word	0x00010002

08007010 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b088      	sub	sp, #32
 8007014:	af02      	add	r7, sp, #8
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	4608      	mov	r0, r1
 800701a:	4611      	mov	r1, r2
 800701c:	461a      	mov	r2, r3
 800701e:	4603      	mov	r3, r0
 8007020:	817b      	strh	r3, [r7, #10]
 8007022:	460b      	mov	r3, r1
 8007024:	813b      	strh	r3, [r7, #8]
 8007026:	4613      	mov	r3, r2
 8007028:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007038:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007048:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800704a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800704c:	9300      	str	r3, [sp, #0]
 800704e:	6a3b      	ldr	r3, [r7, #32]
 8007050:	2200      	movs	r2, #0
 8007052:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007056:	68f8      	ldr	r0, [r7, #12]
 8007058:	f000 f8c2 	bl	80071e0 <I2C_WaitOnFlagUntilTimeout>
 800705c:	4603      	mov	r3, r0
 800705e:	2b00      	cmp	r3, #0
 8007060:	d00d      	beq.n	800707e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800706c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007070:	d103      	bne.n	800707a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007078:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800707a:	2303      	movs	r3, #3
 800707c:	e0aa      	b.n	80071d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800707e:	897b      	ldrh	r3, [r7, #10]
 8007080:	b2db      	uxtb	r3, r3
 8007082:	461a      	mov	r2, r3
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800708c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800708e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007090:	6a3a      	ldr	r2, [r7, #32]
 8007092:	4952      	ldr	r1, [pc, #328]	@ (80071dc <I2C_RequestMemoryRead+0x1cc>)
 8007094:	68f8      	ldr	r0, [r7, #12]
 8007096:	f000 f91d 	bl	80072d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d001      	beq.n	80070a4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80070a0:	2301      	movs	r3, #1
 80070a2:	e097      	b.n	80071d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070a4:	2300      	movs	r3, #0
 80070a6:	617b      	str	r3, [r7, #20]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	695b      	ldr	r3, [r3, #20]
 80070ae:	617b      	str	r3, [r7, #20]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	699b      	ldr	r3, [r3, #24]
 80070b6:	617b      	str	r3, [r7, #20]
 80070b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80070ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070bc:	6a39      	ldr	r1, [r7, #32]
 80070be:	68f8      	ldr	r0, [r7, #12]
 80070c0:	f000 f9a8 	bl	8007414 <I2C_WaitOnTXEFlagUntilTimeout>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00d      	beq.n	80070e6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ce:	2b04      	cmp	r3, #4
 80070d0:	d107      	bne.n	80070e2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80070e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e076      	b.n	80071d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80070e6:	88fb      	ldrh	r3, [r7, #6]
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d105      	bne.n	80070f8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80070ec:	893b      	ldrh	r3, [r7, #8]
 80070ee:	b2da      	uxtb	r2, r3
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	611a      	str	r2, [r3, #16]
 80070f6:	e021      	b.n	800713c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80070f8:	893b      	ldrh	r3, [r7, #8]
 80070fa:	0a1b      	lsrs	r3, r3, #8
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	b2da      	uxtb	r2, r3
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007106:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007108:	6a39      	ldr	r1, [r7, #32]
 800710a:	68f8      	ldr	r0, [r7, #12]
 800710c:	f000 f982 	bl	8007414 <I2C_WaitOnTXEFlagUntilTimeout>
 8007110:	4603      	mov	r3, r0
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00d      	beq.n	8007132 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800711a:	2b04      	cmp	r3, #4
 800711c:	d107      	bne.n	800712e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800712c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	e050      	b.n	80071d4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007132:	893b      	ldrh	r3, [r7, #8]
 8007134:	b2da      	uxtb	r2, r3
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800713c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800713e:	6a39      	ldr	r1, [r7, #32]
 8007140:	68f8      	ldr	r0, [r7, #12]
 8007142:	f000 f967 	bl	8007414 <I2C_WaitOnTXEFlagUntilTimeout>
 8007146:	4603      	mov	r3, r0
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00d      	beq.n	8007168 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007150:	2b04      	cmp	r3, #4
 8007152:	d107      	bne.n	8007164 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007162:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007164:	2301      	movs	r3, #1
 8007166:	e035      	b.n	80071d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007176:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800717a:	9300      	str	r3, [sp, #0]
 800717c:	6a3b      	ldr	r3, [r7, #32]
 800717e:	2200      	movs	r2, #0
 8007180:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007184:	68f8      	ldr	r0, [r7, #12]
 8007186:	f000 f82b 	bl	80071e0 <I2C_WaitOnFlagUntilTimeout>
 800718a:	4603      	mov	r3, r0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d00d      	beq.n	80071ac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800719a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800719e:	d103      	bne.n	80071a8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80071a6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80071a8:	2303      	movs	r3, #3
 80071aa:	e013      	b.n	80071d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80071ac:	897b      	ldrh	r3, [r7, #10]
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	f043 0301 	orr.w	r3, r3, #1
 80071b4:	b2da      	uxtb	r2, r3
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80071bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071be:	6a3a      	ldr	r2, [r7, #32]
 80071c0:	4906      	ldr	r1, [pc, #24]	@ (80071dc <I2C_RequestMemoryRead+0x1cc>)
 80071c2:	68f8      	ldr	r0, [r7, #12]
 80071c4:	f000 f886 	bl	80072d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d001      	beq.n	80071d2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	e000      	b.n	80071d4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3718      	adds	r7, #24
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	00010002 	.word	0x00010002

080071e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	603b      	str	r3, [r7, #0]
 80071ec:	4613      	mov	r3, r2
 80071ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80071f0:	e048      	b.n	8007284 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071f8:	d044      	beq.n	8007284 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071fa:	f7fd fe33 	bl	8004e64 <HAL_GetTick>
 80071fe:	4602      	mov	r2, r0
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	683a      	ldr	r2, [r7, #0]
 8007206:	429a      	cmp	r2, r3
 8007208:	d302      	bcc.n	8007210 <I2C_WaitOnFlagUntilTimeout+0x30>
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d139      	bne.n	8007284 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	0c1b      	lsrs	r3, r3, #16
 8007214:	b2db      	uxtb	r3, r3
 8007216:	2b01      	cmp	r3, #1
 8007218:	d10d      	bne.n	8007236 <I2C_WaitOnFlagUntilTimeout+0x56>
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	695b      	ldr	r3, [r3, #20]
 8007220:	43da      	mvns	r2, r3
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	4013      	ands	r3, r2
 8007226:	b29b      	uxth	r3, r3
 8007228:	2b00      	cmp	r3, #0
 800722a:	bf0c      	ite	eq
 800722c:	2301      	moveq	r3, #1
 800722e:	2300      	movne	r3, #0
 8007230:	b2db      	uxtb	r3, r3
 8007232:	461a      	mov	r2, r3
 8007234:	e00c      	b.n	8007250 <I2C_WaitOnFlagUntilTimeout+0x70>
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	43da      	mvns	r2, r3
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	4013      	ands	r3, r2
 8007242:	b29b      	uxth	r3, r3
 8007244:	2b00      	cmp	r3, #0
 8007246:	bf0c      	ite	eq
 8007248:	2301      	moveq	r3, #1
 800724a:	2300      	movne	r3, #0
 800724c:	b2db      	uxtb	r3, r3
 800724e:	461a      	mov	r2, r3
 8007250:	79fb      	ldrb	r3, [r7, #7]
 8007252:	429a      	cmp	r2, r3
 8007254:	d116      	bne.n	8007284 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2200      	movs	r2, #0
 800725a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2220      	movs	r2, #32
 8007260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2200      	movs	r2, #0
 8007268:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007270:	f043 0220 	orr.w	r2, r3, #32
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2200      	movs	r2, #0
 800727c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	e023      	b.n	80072cc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	0c1b      	lsrs	r3, r3, #16
 8007288:	b2db      	uxtb	r3, r3
 800728a:	2b01      	cmp	r3, #1
 800728c:	d10d      	bne.n	80072aa <I2C_WaitOnFlagUntilTimeout+0xca>
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	695b      	ldr	r3, [r3, #20]
 8007294:	43da      	mvns	r2, r3
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	4013      	ands	r3, r2
 800729a:	b29b      	uxth	r3, r3
 800729c:	2b00      	cmp	r3, #0
 800729e:	bf0c      	ite	eq
 80072a0:	2301      	moveq	r3, #1
 80072a2:	2300      	movne	r3, #0
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	461a      	mov	r2, r3
 80072a8:	e00c      	b.n	80072c4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	699b      	ldr	r3, [r3, #24]
 80072b0:	43da      	mvns	r2, r3
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	4013      	ands	r3, r2
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	bf0c      	ite	eq
 80072bc:	2301      	moveq	r3, #1
 80072be:	2300      	movne	r3, #0
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	461a      	mov	r2, r3
 80072c4:	79fb      	ldrb	r3, [r7, #7]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d093      	beq.n	80071f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80072ca:	2300      	movs	r3, #0
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3710      	adds	r7, #16
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	60f8      	str	r0, [r7, #12]
 80072dc:	60b9      	str	r1, [r7, #8]
 80072de:	607a      	str	r2, [r7, #4]
 80072e0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80072e2:	e071      	b.n	80073c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	695b      	ldr	r3, [r3, #20]
 80072ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072f2:	d123      	bne.n	800733c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007302:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800730c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2200      	movs	r2, #0
 8007312:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2220      	movs	r2, #32
 8007318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2200      	movs	r2, #0
 8007320:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007328:	f043 0204 	orr.w	r2, r3, #4
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2200      	movs	r2, #0
 8007334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	e067      	b.n	800740c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007342:	d041      	beq.n	80073c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007344:	f7fd fd8e 	bl	8004e64 <HAL_GetTick>
 8007348:	4602      	mov	r2, r0
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	1ad3      	subs	r3, r2, r3
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	429a      	cmp	r2, r3
 8007352:	d302      	bcc.n	800735a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d136      	bne.n	80073c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	0c1b      	lsrs	r3, r3, #16
 800735e:	b2db      	uxtb	r3, r3
 8007360:	2b01      	cmp	r3, #1
 8007362:	d10c      	bne.n	800737e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	695b      	ldr	r3, [r3, #20]
 800736a:	43da      	mvns	r2, r3
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	4013      	ands	r3, r2
 8007370:	b29b      	uxth	r3, r3
 8007372:	2b00      	cmp	r3, #0
 8007374:	bf14      	ite	ne
 8007376:	2301      	movne	r3, #1
 8007378:	2300      	moveq	r3, #0
 800737a:	b2db      	uxtb	r3, r3
 800737c:	e00b      	b.n	8007396 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	699b      	ldr	r3, [r3, #24]
 8007384:	43da      	mvns	r2, r3
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	4013      	ands	r3, r2
 800738a:	b29b      	uxth	r3, r3
 800738c:	2b00      	cmp	r3, #0
 800738e:	bf14      	ite	ne
 8007390:	2301      	movne	r3, #1
 8007392:	2300      	moveq	r3, #0
 8007394:	b2db      	uxtb	r3, r3
 8007396:	2b00      	cmp	r3, #0
 8007398:	d016      	beq.n	80073c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2200      	movs	r2, #0
 800739e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2220      	movs	r2, #32
 80073a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073b4:	f043 0220 	orr.w	r2, r3, #32
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2200      	movs	r2, #0
 80073c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	e021      	b.n	800740c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	0c1b      	lsrs	r3, r3, #16
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d10c      	bne.n	80073ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	695b      	ldr	r3, [r3, #20]
 80073d8:	43da      	mvns	r2, r3
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	4013      	ands	r3, r2
 80073de:	b29b      	uxth	r3, r3
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	bf14      	ite	ne
 80073e4:	2301      	movne	r3, #1
 80073e6:	2300      	moveq	r3, #0
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	e00b      	b.n	8007404 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	699b      	ldr	r3, [r3, #24]
 80073f2:	43da      	mvns	r2, r3
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	4013      	ands	r3, r2
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	bf14      	ite	ne
 80073fe:	2301      	movne	r3, #1
 8007400:	2300      	moveq	r3, #0
 8007402:	b2db      	uxtb	r3, r3
 8007404:	2b00      	cmp	r3, #0
 8007406:	f47f af6d 	bne.w	80072e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800740a:	2300      	movs	r3, #0
}
 800740c:	4618      	mov	r0, r3
 800740e:	3710      	adds	r7, #16
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007420:	e034      	b.n	800748c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007422:	68f8      	ldr	r0, [r7, #12]
 8007424:	f000 f8e3 	bl	80075ee <I2C_IsAcknowledgeFailed>
 8007428:	4603      	mov	r3, r0
 800742a:	2b00      	cmp	r3, #0
 800742c:	d001      	beq.n	8007432 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e034      	b.n	800749c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007438:	d028      	beq.n	800748c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800743a:	f7fd fd13 	bl	8004e64 <HAL_GetTick>
 800743e:	4602      	mov	r2, r0
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	1ad3      	subs	r3, r2, r3
 8007444:	68ba      	ldr	r2, [r7, #8]
 8007446:	429a      	cmp	r2, r3
 8007448:	d302      	bcc.n	8007450 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d11d      	bne.n	800748c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	695b      	ldr	r3, [r3, #20]
 8007456:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800745a:	2b80      	cmp	r3, #128	@ 0x80
 800745c:	d016      	beq.n	800748c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2200      	movs	r2, #0
 8007462:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2220      	movs	r2, #32
 8007468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2200      	movs	r2, #0
 8007470:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007478:	f043 0220 	orr.w	r2, r3, #32
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2200      	movs	r2, #0
 8007484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007488:	2301      	movs	r3, #1
 800748a:	e007      	b.n	800749c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	695b      	ldr	r3, [r3, #20]
 8007492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007496:	2b80      	cmp	r3, #128	@ 0x80
 8007498:	d1c3      	bne.n	8007422 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	3710      	adds	r7, #16
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80074b0:	e034      	b.n	800751c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f000 f89b 	bl	80075ee <I2C_IsAcknowledgeFailed>
 80074b8:	4603      	mov	r3, r0
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d001      	beq.n	80074c2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	e034      	b.n	800752c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074c8:	d028      	beq.n	800751c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074ca:	f7fd fccb 	bl	8004e64 <HAL_GetTick>
 80074ce:	4602      	mov	r2, r0
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	1ad3      	subs	r3, r2, r3
 80074d4:	68ba      	ldr	r2, [r7, #8]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d302      	bcc.n	80074e0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d11d      	bne.n	800751c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	695b      	ldr	r3, [r3, #20]
 80074e6:	f003 0304 	and.w	r3, r3, #4
 80074ea:	2b04      	cmp	r3, #4
 80074ec:	d016      	beq.n	800751c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2200      	movs	r2, #0
 80074f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2220      	movs	r2, #32
 80074f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2200      	movs	r2, #0
 8007500:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007508:	f043 0220 	orr.w	r2, r3, #32
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2200      	movs	r2, #0
 8007514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	e007      	b.n	800752c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	695b      	ldr	r3, [r3, #20]
 8007522:	f003 0304 	and.w	r3, r3, #4
 8007526:	2b04      	cmp	r3, #4
 8007528:	d1c3      	bne.n	80074b2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800752a:	2300      	movs	r3, #0
}
 800752c:	4618      	mov	r0, r3
 800752e:	3710      	adds	r7, #16
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	60b9      	str	r1, [r7, #8]
 800753e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007540:	e049      	b.n	80075d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	695b      	ldr	r3, [r3, #20]
 8007548:	f003 0310 	and.w	r3, r3, #16
 800754c:	2b10      	cmp	r3, #16
 800754e:	d119      	bne.n	8007584 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f06f 0210 	mvn.w	r2, #16
 8007558:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2200      	movs	r2, #0
 800755e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2220      	movs	r2, #32
 8007564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2200      	movs	r2, #0
 800756c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2200      	movs	r2, #0
 800757c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	e030      	b.n	80075e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007584:	f7fd fc6e 	bl	8004e64 <HAL_GetTick>
 8007588:	4602      	mov	r2, r0
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	1ad3      	subs	r3, r2, r3
 800758e:	68ba      	ldr	r2, [r7, #8]
 8007590:	429a      	cmp	r2, r3
 8007592:	d302      	bcc.n	800759a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d11d      	bne.n	80075d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	695b      	ldr	r3, [r3, #20]
 80075a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075a4:	2b40      	cmp	r3, #64	@ 0x40
 80075a6:	d016      	beq.n	80075d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2200      	movs	r2, #0
 80075ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2220      	movs	r2, #32
 80075b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2200      	movs	r2, #0
 80075ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075c2:	f043 0220 	orr.w	r2, r3, #32
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2200      	movs	r2, #0
 80075ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	e007      	b.n	80075e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	695b      	ldr	r3, [r3, #20]
 80075dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075e0:	2b40      	cmp	r3, #64	@ 0x40
 80075e2:	d1ae      	bne.n	8007542 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3710      	adds	r7, #16
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}

080075ee <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80075ee:	b480      	push	{r7}
 80075f0:	b083      	sub	sp, #12
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	695b      	ldr	r3, [r3, #20]
 80075fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007600:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007604:	d11b      	bne.n	800763e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800760e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2220      	movs	r2, #32
 800761a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800762a:	f043 0204 	orr.w	r2, r3, #4
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	e000      	b.n	8007640 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800763e:	2300      	movs	r3, #0
}
 8007640:	4618      	mov	r0, r3
 8007642:	370c      	adds	r7, #12
 8007644:	46bd      	mov	sp, r7
 8007646:	bc80      	pop	{r7}
 8007648:	4770      	bx	lr
	...

0800764c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b086      	sub	sp, #24
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d101      	bne.n	800765e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	e272      	b.n	8007b44 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f003 0301 	and.w	r3, r3, #1
 8007666:	2b00      	cmp	r3, #0
 8007668:	f000 8087 	beq.w	800777a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800766c:	4b92      	ldr	r3, [pc, #584]	@ (80078b8 <HAL_RCC_OscConfig+0x26c>)
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	f003 030c 	and.w	r3, r3, #12
 8007674:	2b04      	cmp	r3, #4
 8007676:	d00c      	beq.n	8007692 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007678:	4b8f      	ldr	r3, [pc, #572]	@ (80078b8 <HAL_RCC_OscConfig+0x26c>)
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	f003 030c 	and.w	r3, r3, #12
 8007680:	2b08      	cmp	r3, #8
 8007682:	d112      	bne.n	80076aa <HAL_RCC_OscConfig+0x5e>
 8007684:	4b8c      	ldr	r3, [pc, #560]	@ (80078b8 <HAL_RCC_OscConfig+0x26c>)
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800768c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007690:	d10b      	bne.n	80076aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007692:	4b89      	ldr	r3, [pc, #548]	@ (80078b8 <HAL_RCC_OscConfig+0x26c>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800769a:	2b00      	cmp	r3, #0
 800769c:	d06c      	beq.n	8007778 <HAL_RCC_OscConfig+0x12c>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d168      	bne.n	8007778 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	e24c      	b.n	8007b44 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076b2:	d106      	bne.n	80076c2 <HAL_RCC_OscConfig+0x76>
 80076b4:	4b80      	ldr	r3, [pc, #512]	@ (80078b8 <HAL_RCC_OscConfig+0x26c>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a7f      	ldr	r2, [pc, #508]	@ (80078b8 <HAL_RCC_OscConfig+0x26c>)
 80076ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80076be:	6013      	str	r3, [r2, #0]
 80076c0:	e02e      	b.n	8007720 <HAL_RCC_OscConfig+0xd4>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d10c      	bne.n	80076e4 <HAL_RCC_OscConfig+0x98>
 80076ca:	4b7b      	ldr	r3, [pc, #492]	@ (80078b8 <HAL_RCC_OscConfig+0x26c>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a7a      	ldr	r2, [pc, #488]	@ (80078b8 <HAL_RCC_OscConfig+0x26c>)
 80076d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80076d4:	6013      	str	r3, [r2, #0]
 80076d6:	4b78      	ldr	r3, [pc, #480]	@ (80078b8 <HAL_RCC_OscConfig+0x26c>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a77      	ldr	r2, [pc, #476]	@ (80078b8 <HAL_RCC_OscConfig+0x26c>)
 80076dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80076e0:	6013      	str	r3, [r2, #0]
 80076e2:	e01d      	b.n	8007720 <HAL_RCC_OscConfig+0xd4>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80076ec:	d10c      	bne.n	8007708 <HAL_RCC_OscConfig+0xbc>
 80076ee:	4b72      	ldr	r3, [pc, #456]	@ (80078b8 <HAL_RCC_OscConfig+0x26c>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a71      	ldr	r2, [pc, #452]	@ (80078b8 <HAL_RCC_OscConfig+0x26c>)
 80076f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80076f8:	6013      	str	r3, [r2, #0]
 80076fa:	4b6f      	ldr	r3, [pc, #444]	@ (80078b8 <HAL_RCC_OscConfig+0x26c>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a6e      	ldr	r2, [pc, #440]	@ (80078b8 <HAL_RCC_OscConfig+0x26c>)
 8007700:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007704:	6013      	str	r3, [r2, #0]
 8007706:	e00b      	b.n	8007720 <HAL_RCC_OscConfig+0xd4>
 8007708:	4b6b      	ldr	r3, [pc, #428]	@ (80078b8 <HAL_RCC_OscConfig+0x26c>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a6a      	ldr	r2, [pc, #424]	@ (80078b8 <HAL_RCC_OscConfig+0x26c>)
 800770e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007712:	6013      	str	r3, [r2, #0]
 8007714:	4b68      	ldr	r3, [pc, #416]	@ (80078b8 <HAL_RCC_OscConfig+0x26c>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a67      	ldr	r2, [pc, #412]	@ (80078b8 <HAL_RCC_OscConfig+0x26c>)
 800771a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800771e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d013      	beq.n	8007750 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007728:	f7fd fb9c 	bl	8004e64 <HAL_GetTick>
 800772c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800772e:	e008      	b.n	8007742 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007730:	f7fd fb98 	bl	8004e64 <HAL_GetTick>
 8007734:	4602      	mov	r2, r0
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	1ad3      	subs	r3, r2, r3
 800773a:	2b64      	cmp	r3, #100	@ 0x64
 800773c:	d901      	bls.n	8007742 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800773e:	2303      	movs	r3, #3
 8007740:	e200      	b.n	8007b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007742:	4b5d      	ldr	r3, [pc, #372]	@ (80078b8 <HAL_RCC_OscConfig+0x26c>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800774a:	2b00      	cmp	r3, #0
 800774c:	d0f0      	beq.n	8007730 <HAL_RCC_OscConfig+0xe4>
 800774e:	e014      	b.n	800777a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007750:	f7fd fb88 	bl	8004e64 <HAL_GetTick>
 8007754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007756:	e008      	b.n	800776a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007758:	f7fd fb84 	bl	8004e64 <HAL_GetTick>
 800775c:	4602      	mov	r2, r0
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	1ad3      	subs	r3, r2, r3
 8007762:	2b64      	cmp	r3, #100	@ 0x64
 8007764:	d901      	bls.n	800776a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007766:	2303      	movs	r3, #3
 8007768:	e1ec      	b.n	8007b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800776a:	4b53      	ldr	r3, [pc, #332]	@ (80078b8 <HAL_RCC_OscConfig+0x26c>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007772:	2b00      	cmp	r3, #0
 8007774:	d1f0      	bne.n	8007758 <HAL_RCC_OscConfig+0x10c>
 8007776:	e000      	b.n	800777a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f003 0302 	and.w	r3, r3, #2
 8007782:	2b00      	cmp	r3, #0
 8007784:	d063      	beq.n	800784e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007786:	4b4c      	ldr	r3, [pc, #304]	@ (80078b8 <HAL_RCC_OscConfig+0x26c>)
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	f003 030c 	and.w	r3, r3, #12
 800778e:	2b00      	cmp	r3, #0
 8007790:	d00b      	beq.n	80077aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007792:	4b49      	ldr	r3, [pc, #292]	@ (80078b8 <HAL_RCC_OscConfig+0x26c>)
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	f003 030c 	and.w	r3, r3, #12
 800779a:	2b08      	cmp	r3, #8
 800779c:	d11c      	bne.n	80077d8 <HAL_RCC_OscConfig+0x18c>
 800779e:	4b46      	ldr	r3, [pc, #280]	@ (80078b8 <HAL_RCC_OscConfig+0x26c>)
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d116      	bne.n	80077d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077aa:	4b43      	ldr	r3, [pc, #268]	@ (80078b8 <HAL_RCC_OscConfig+0x26c>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f003 0302 	and.w	r3, r3, #2
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d005      	beq.n	80077c2 <HAL_RCC_OscConfig+0x176>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	691b      	ldr	r3, [r3, #16]
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d001      	beq.n	80077c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	e1c0      	b.n	8007b44 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077c2:	4b3d      	ldr	r3, [pc, #244]	@ (80078b8 <HAL_RCC_OscConfig+0x26c>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	695b      	ldr	r3, [r3, #20]
 80077ce:	00db      	lsls	r3, r3, #3
 80077d0:	4939      	ldr	r1, [pc, #228]	@ (80078b8 <HAL_RCC_OscConfig+0x26c>)
 80077d2:	4313      	orrs	r3, r2
 80077d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077d6:	e03a      	b.n	800784e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	691b      	ldr	r3, [r3, #16]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d020      	beq.n	8007822 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80077e0:	4b36      	ldr	r3, [pc, #216]	@ (80078bc <HAL_RCC_OscConfig+0x270>)
 80077e2:	2201      	movs	r2, #1
 80077e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077e6:	f7fd fb3d 	bl	8004e64 <HAL_GetTick>
 80077ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077ec:	e008      	b.n	8007800 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077ee:	f7fd fb39 	bl	8004e64 <HAL_GetTick>
 80077f2:	4602      	mov	r2, r0
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	1ad3      	subs	r3, r2, r3
 80077f8:	2b02      	cmp	r3, #2
 80077fa:	d901      	bls.n	8007800 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80077fc:	2303      	movs	r3, #3
 80077fe:	e1a1      	b.n	8007b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007800:	4b2d      	ldr	r3, [pc, #180]	@ (80078b8 <HAL_RCC_OscConfig+0x26c>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f003 0302 	and.w	r3, r3, #2
 8007808:	2b00      	cmp	r3, #0
 800780a:	d0f0      	beq.n	80077ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800780c:	4b2a      	ldr	r3, [pc, #168]	@ (80078b8 <HAL_RCC_OscConfig+0x26c>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	695b      	ldr	r3, [r3, #20]
 8007818:	00db      	lsls	r3, r3, #3
 800781a:	4927      	ldr	r1, [pc, #156]	@ (80078b8 <HAL_RCC_OscConfig+0x26c>)
 800781c:	4313      	orrs	r3, r2
 800781e:	600b      	str	r3, [r1, #0]
 8007820:	e015      	b.n	800784e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007822:	4b26      	ldr	r3, [pc, #152]	@ (80078bc <HAL_RCC_OscConfig+0x270>)
 8007824:	2200      	movs	r2, #0
 8007826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007828:	f7fd fb1c 	bl	8004e64 <HAL_GetTick>
 800782c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800782e:	e008      	b.n	8007842 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007830:	f7fd fb18 	bl	8004e64 <HAL_GetTick>
 8007834:	4602      	mov	r2, r0
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	1ad3      	subs	r3, r2, r3
 800783a:	2b02      	cmp	r3, #2
 800783c:	d901      	bls.n	8007842 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800783e:	2303      	movs	r3, #3
 8007840:	e180      	b.n	8007b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007842:	4b1d      	ldr	r3, [pc, #116]	@ (80078b8 <HAL_RCC_OscConfig+0x26c>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f003 0302 	and.w	r3, r3, #2
 800784a:	2b00      	cmp	r3, #0
 800784c:	d1f0      	bne.n	8007830 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f003 0308 	and.w	r3, r3, #8
 8007856:	2b00      	cmp	r3, #0
 8007858:	d03a      	beq.n	80078d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	699b      	ldr	r3, [r3, #24]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d019      	beq.n	8007896 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007862:	4b17      	ldr	r3, [pc, #92]	@ (80078c0 <HAL_RCC_OscConfig+0x274>)
 8007864:	2201      	movs	r2, #1
 8007866:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007868:	f7fd fafc 	bl	8004e64 <HAL_GetTick>
 800786c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800786e:	e008      	b.n	8007882 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007870:	f7fd faf8 	bl	8004e64 <HAL_GetTick>
 8007874:	4602      	mov	r2, r0
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	1ad3      	subs	r3, r2, r3
 800787a:	2b02      	cmp	r3, #2
 800787c:	d901      	bls.n	8007882 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800787e:	2303      	movs	r3, #3
 8007880:	e160      	b.n	8007b44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007882:	4b0d      	ldr	r3, [pc, #52]	@ (80078b8 <HAL_RCC_OscConfig+0x26c>)
 8007884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007886:	f003 0302 	and.w	r3, r3, #2
 800788a:	2b00      	cmp	r3, #0
 800788c:	d0f0      	beq.n	8007870 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800788e:	2001      	movs	r0, #1
 8007890:	f000 face 	bl	8007e30 <RCC_Delay>
 8007894:	e01c      	b.n	80078d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007896:	4b0a      	ldr	r3, [pc, #40]	@ (80078c0 <HAL_RCC_OscConfig+0x274>)
 8007898:	2200      	movs	r2, #0
 800789a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800789c:	f7fd fae2 	bl	8004e64 <HAL_GetTick>
 80078a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80078a2:	e00f      	b.n	80078c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80078a4:	f7fd fade 	bl	8004e64 <HAL_GetTick>
 80078a8:	4602      	mov	r2, r0
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	1ad3      	subs	r3, r2, r3
 80078ae:	2b02      	cmp	r3, #2
 80078b0:	d908      	bls.n	80078c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80078b2:	2303      	movs	r3, #3
 80078b4:	e146      	b.n	8007b44 <HAL_RCC_OscConfig+0x4f8>
 80078b6:	bf00      	nop
 80078b8:	40021000 	.word	0x40021000
 80078bc:	42420000 	.word	0x42420000
 80078c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80078c4:	4b92      	ldr	r3, [pc, #584]	@ (8007b10 <HAL_RCC_OscConfig+0x4c4>)
 80078c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078c8:	f003 0302 	and.w	r3, r3, #2
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d1e9      	bne.n	80078a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f003 0304 	and.w	r3, r3, #4
 80078d8:	2b00      	cmp	r3, #0
 80078da:	f000 80a6 	beq.w	8007a2a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80078de:	2300      	movs	r3, #0
 80078e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80078e2:	4b8b      	ldr	r3, [pc, #556]	@ (8007b10 <HAL_RCC_OscConfig+0x4c4>)
 80078e4:	69db      	ldr	r3, [r3, #28]
 80078e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d10d      	bne.n	800790a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80078ee:	4b88      	ldr	r3, [pc, #544]	@ (8007b10 <HAL_RCC_OscConfig+0x4c4>)
 80078f0:	69db      	ldr	r3, [r3, #28]
 80078f2:	4a87      	ldr	r2, [pc, #540]	@ (8007b10 <HAL_RCC_OscConfig+0x4c4>)
 80078f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80078f8:	61d3      	str	r3, [r2, #28]
 80078fa:	4b85      	ldr	r3, [pc, #532]	@ (8007b10 <HAL_RCC_OscConfig+0x4c4>)
 80078fc:	69db      	ldr	r3, [r3, #28]
 80078fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007902:	60bb      	str	r3, [r7, #8]
 8007904:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007906:	2301      	movs	r3, #1
 8007908:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800790a:	4b82      	ldr	r3, [pc, #520]	@ (8007b14 <HAL_RCC_OscConfig+0x4c8>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007912:	2b00      	cmp	r3, #0
 8007914:	d118      	bne.n	8007948 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007916:	4b7f      	ldr	r3, [pc, #508]	@ (8007b14 <HAL_RCC_OscConfig+0x4c8>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a7e      	ldr	r2, [pc, #504]	@ (8007b14 <HAL_RCC_OscConfig+0x4c8>)
 800791c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007920:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007922:	f7fd fa9f 	bl	8004e64 <HAL_GetTick>
 8007926:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007928:	e008      	b.n	800793c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800792a:	f7fd fa9b 	bl	8004e64 <HAL_GetTick>
 800792e:	4602      	mov	r2, r0
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	1ad3      	subs	r3, r2, r3
 8007934:	2b64      	cmp	r3, #100	@ 0x64
 8007936:	d901      	bls.n	800793c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007938:	2303      	movs	r3, #3
 800793a:	e103      	b.n	8007b44 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800793c:	4b75      	ldr	r3, [pc, #468]	@ (8007b14 <HAL_RCC_OscConfig+0x4c8>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007944:	2b00      	cmp	r3, #0
 8007946:	d0f0      	beq.n	800792a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	2b01      	cmp	r3, #1
 800794e:	d106      	bne.n	800795e <HAL_RCC_OscConfig+0x312>
 8007950:	4b6f      	ldr	r3, [pc, #444]	@ (8007b10 <HAL_RCC_OscConfig+0x4c4>)
 8007952:	6a1b      	ldr	r3, [r3, #32]
 8007954:	4a6e      	ldr	r2, [pc, #440]	@ (8007b10 <HAL_RCC_OscConfig+0x4c4>)
 8007956:	f043 0301 	orr.w	r3, r3, #1
 800795a:	6213      	str	r3, [r2, #32]
 800795c:	e02d      	b.n	80079ba <HAL_RCC_OscConfig+0x36e>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d10c      	bne.n	8007980 <HAL_RCC_OscConfig+0x334>
 8007966:	4b6a      	ldr	r3, [pc, #424]	@ (8007b10 <HAL_RCC_OscConfig+0x4c4>)
 8007968:	6a1b      	ldr	r3, [r3, #32]
 800796a:	4a69      	ldr	r2, [pc, #420]	@ (8007b10 <HAL_RCC_OscConfig+0x4c4>)
 800796c:	f023 0301 	bic.w	r3, r3, #1
 8007970:	6213      	str	r3, [r2, #32]
 8007972:	4b67      	ldr	r3, [pc, #412]	@ (8007b10 <HAL_RCC_OscConfig+0x4c4>)
 8007974:	6a1b      	ldr	r3, [r3, #32]
 8007976:	4a66      	ldr	r2, [pc, #408]	@ (8007b10 <HAL_RCC_OscConfig+0x4c4>)
 8007978:	f023 0304 	bic.w	r3, r3, #4
 800797c:	6213      	str	r3, [r2, #32]
 800797e:	e01c      	b.n	80079ba <HAL_RCC_OscConfig+0x36e>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	2b05      	cmp	r3, #5
 8007986:	d10c      	bne.n	80079a2 <HAL_RCC_OscConfig+0x356>
 8007988:	4b61      	ldr	r3, [pc, #388]	@ (8007b10 <HAL_RCC_OscConfig+0x4c4>)
 800798a:	6a1b      	ldr	r3, [r3, #32]
 800798c:	4a60      	ldr	r2, [pc, #384]	@ (8007b10 <HAL_RCC_OscConfig+0x4c4>)
 800798e:	f043 0304 	orr.w	r3, r3, #4
 8007992:	6213      	str	r3, [r2, #32]
 8007994:	4b5e      	ldr	r3, [pc, #376]	@ (8007b10 <HAL_RCC_OscConfig+0x4c4>)
 8007996:	6a1b      	ldr	r3, [r3, #32]
 8007998:	4a5d      	ldr	r2, [pc, #372]	@ (8007b10 <HAL_RCC_OscConfig+0x4c4>)
 800799a:	f043 0301 	orr.w	r3, r3, #1
 800799e:	6213      	str	r3, [r2, #32]
 80079a0:	e00b      	b.n	80079ba <HAL_RCC_OscConfig+0x36e>
 80079a2:	4b5b      	ldr	r3, [pc, #364]	@ (8007b10 <HAL_RCC_OscConfig+0x4c4>)
 80079a4:	6a1b      	ldr	r3, [r3, #32]
 80079a6:	4a5a      	ldr	r2, [pc, #360]	@ (8007b10 <HAL_RCC_OscConfig+0x4c4>)
 80079a8:	f023 0301 	bic.w	r3, r3, #1
 80079ac:	6213      	str	r3, [r2, #32]
 80079ae:	4b58      	ldr	r3, [pc, #352]	@ (8007b10 <HAL_RCC_OscConfig+0x4c4>)
 80079b0:	6a1b      	ldr	r3, [r3, #32]
 80079b2:	4a57      	ldr	r2, [pc, #348]	@ (8007b10 <HAL_RCC_OscConfig+0x4c4>)
 80079b4:	f023 0304 	bic.w	r3, r3, #4
 80079b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d015      	beq.n	80079ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079c2:	f7fd fa4f 	bl	8004e64 <HAL_GetTick>
 80079c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079c8:	e00a      	b.n	80079e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079ca:	f7fd fa4b 	bl	8004e64 <HAL_GetTick>
 80079ce:	4602      	mov	r2, r0
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	1ad3      	subs	r3, r2, r3
 80079d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079d8:	4293      	cmp	r3, r2
 80079da:	d901      	bls.n	80079e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80079dc:	2303      	movs	r3, #3
 80079de:	e0b1      	b.n	8007b44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079e0:	4b4b      	ldr	r3, [pc, #300]	@ (8007b10 <HAL_RCC_OscConfig+0x4c4>)
 80079e2:	6a1b      	ldr	r3, [r3, #32]
 80079e4:	f003 0302 	and.w	r3, r3, #2
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d0ee      	beq.n	80079ca <HAL_RCC_OscConfig+0x37e>
 80079ec:	e014      	b.n	8007a18 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079ee:	f7fd fa39 	bl	8004e64 <HAL_GetTick>
 80079f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079f4:	e00a      	b.n	8007a0c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079f6:	f7fd fa35 	bl	8004e64 <HAL_GetTick>
 80079fa:	4602      	mov	r2, r0
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	1ad3      	subs	r3, r2, r3
 8007a00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d901      	bls.n	8007a0c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007a08:	2303      	movs	r3, #3
 8007a0a:	e09b      	b.n	8007b44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a0c:	4b40      	ldr	r3, [pc, #256]	@ (8007b10 <HAL_RCC_OscConfig+0x4c4>)
 8007a0e:	6a1b      	ldr	r3, [r3, #32]
 8007a10:	f003 0302 	and.w	r3, r3, #2
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d1ee      	bne.n	80079f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007a18:	7dfb      	ldrb	r3, [r7, #23]
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d105      	bne.n	8007a2a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a1e:	4b3c      	ldr	r3, [pc, #240]	@ (8007b10 <HAL_RCC_OscConfig+0x4c4>)
 8007a20:	69db      	ldr	r3, [r3, #28]
 8007a22:	4a3b      	ldr	r2, [pc, #236]	@ (8007b10 <HAL_RCC_OscConfig+0x4c4>)
 8007a24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a28:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	69db      	ldr	r3, [r3, #28]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	f000 8087 	beq.w	8007b42 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007a34:	4b36      	ldr	r3, [pc, #216]	@ (8007b10 <HAL_RCC_OscConfig+0x4c4>)
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	f003 030c 	and.w	r3, r3, #12
 8007a3c:	2b08      	cmp	r3, #8
 8007a3e:	d061      	beq.n	8007b04 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	69db      	ldr	r3, [r3, #28]
 8007a44:	2b02      	cmp	r3, #2
 8007a46:	d146      	bne.n	8007ad6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a48:	4b33      	ldr	r3, [pc, #204]	@ (8007b18 <HAL_RCC_OscConfig+0x4cc>)
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a4e:	f7fd fa09 	bl	8004e64 <HAL_GetTick>
 8007a52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007a54:	e008      	b.n	8007a68 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a56:	f7fd fa05 	bl	8004e64 <HAL_GetTick>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	1ad3      	subs	r3, r2, r3
 8007a60:	2b02      	cmp	r3, #2
 8007a62:	d901      	bls.n	8007a68 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007a64:	2303      	movs	r3, #3
 8007a66:	e06d      	b.n	8007b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007a68:	4b29      	ldr	r3, [pc, #164]	@ (8007b10 <HAL_RCC_OscConfig+0x4c4>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d1f0      	bne.n	8007a56 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6a1b      	ldr	r3, [r3, #32]
 8007a78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a7c:	d108      	bne.n	8007a90 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007a7e:	4b24      	ldr	r3, [pc, #144]	@ (8007b10 <HAL_RCC_OscConfig+0x4c4>)
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	4921      	ldr	r1, [pc, #132]	@ (8007b10 <HAL_RCC_OscConfig+0x4c4>)
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a90:	4b1f      	ldr	r3, [pc, #124]	@ (8007b10 <HAL_RCC_OscConfig+0x4c4>)
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6a19      	ldr	r1, [r3, #32]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aa0:	430b      	orrs	r3, r1
 8007aa2:	491b      	ldr	r1, [pc, #108]	@ (8007b10 <HAL_RCC_OscConfig+0x4c4>)
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8007b18 <HAL_RCC_OscConfig+0x4cc>)
 8007aaa:	2201      	movs	r2, #1
 8007aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007aae:	f7fd f9d9 	bl	8004e64 <HAL_GetTick>
 8007ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007ab4:	e008      	b.n	8007ac8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ab6:	f7fd f9d5 	bl	8004e64 <HAL_GetTick>
 8007aba:	4602      	mov	r2, r0
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	1ad3      	subs	r3, r2, r3
 8007ac0:	2b02      	cmp	r3, #2
 8007ac2:	d901      	bls.n	8007ac8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007ac4:	2303      	movs	r3, #3
 8007ac6:	e03d      	b.n	8007b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007ac8:	4b11      	ldr	r3, [pc, #68]	@ (8007b10 <HAL_RCC_OscConfig+0x4c4>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d0f0      	beq.n	8007ab6 <HAL_RCC_OscConfig+0x46a>
 8007ad4:	e035      	b.n	8007b42 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ad6:	4b10      	ldr	r3, [pc, #64]	@ (8007b18 <HAL_RCC_OscConfig+0x4cc>)
 8007ad8:	2200      	movs	r2, #0
 8007ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007adc:	f7fd f9c2 	bl	8004e64 <HAL_GetTick>
 8007ae0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007ae2:	e008      	b.n	8007af6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ae4:	f7fd f9be 	bl	8004e64 <HAL_GetTick>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	1ad3      	subs	r3, r2, r3
 8007aee:	2b02      	cmp	r3, #2
 8007af0:	d901      	bls.n	8007af6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007af2:	2303      	movs	r3, #3
 8007af4:	e026      	b.n	8007b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007af6:	4b06      	ldr	r3, [pc, #24]	@ (8007b10 <HAL_RCC_OscConfig+0x4c4>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d1f0      	bne.n	8007ae4 <HAL_RCC_OscConfig+0x498>
 8007b02:	e01e      	b.n	8007b42 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	69db      	ldr	r3, [r3, #28]
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d107      	bne.n	8007b1c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	e019      	b.n	8007b44 <HAL_RCC_OscConfig+0x4f8>
 8007b10:	40021000 	.word	0x40021000
 8007b14:	40007000 	.word	0x40007000
 8007b18:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8007b4c <HAL_RCC_OscConfig+0x500>)
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6a1b      	ldr	r3, [r3, #32]
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d106      	bne.n	8007b3e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d001      	beq.n	8007b42 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	e000      	b.n	8007b44 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007b42:	2300      	movs	r3, #0
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3718      	adds	r7, #24
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}
 8007b4c:	40021000 	.word	0x40021000

08007b50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b084      	sub	sp, #16
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d101      	bne.n	8007b64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	e0d0      	b.n	8007d06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007b64:	4b6a      	ldr	r3, [pc, #424]	@ (8007d10 <HAL_RCC_ClockConfig+0x1c0>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f003 0307 	and.w	r3, r3, #7
 8007b6c:	683a      	ldr	r2, [r7, #0]
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d910      	bls.n	8007b94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b72:	4b67      	ldr	r3, [pc, #412]	@ (8007d10 <HAL_RCC_ClockConfig+0x1c0>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f023 0207 	bic.w	r2, r3, #7
 8007b7a:	4965      	ldr	r1, [pc, #404]	@ (8007d10 <HAL_RCC_ClockConfig+0x1c0>)
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b82:	4b63      	ldr	r3, [pc, #396]	@ (8007d10 <HAL_RCC_ClockConfig+0x1c0>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f003 0307 	and.w	r3, r3, #7
 8007b8a:	683a      	ldr	r2, [r7, #0]
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d001      	beq.n	8007b94 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007b90:	2301      	movs	r3, #1
 8007b92:	e0b8      	b.n	8007d06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f003 0302 	and.w	r3, r3, #2
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d020      	beq.n	8007be2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f003 0304 	and.w	r3, r3, #4
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d005      	beq.n	8007bb8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007bac:	4b59      	ldr	r3, [pc, #356]	@ (8007d14 <HAL_RCC_ClockConfig+0x1c4>)
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	4a58      	ldr	r2, [pc, #352]	@ (8007d14 <HAL_RCC_ClockConfig+0x1c4>)
 8007bb2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007bb6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f003 0308 	and.w	r3, r3, #8
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d005      	beq.n	8007bd0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007bc4:	4b53      	ldr	r3, [pc, #332]	@ (8007d14 <HAL_RCC_ClockConfig+0x1c4>)
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	4a52      	ldr	r2, [pc, #328]	@ (8007d14 <HAL_RCC_ClockConfig+0x1c4>)
 8007bca:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8007bce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007bd0:	4b50      	ldr	r3, [pc, #320]	@ (8007d14 <HAL_RCC_ClockConfig+0x1c4>)
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	494d      	ldr	r1, [pc, #308]	@ (8007d14 <HAL_RCC_ClockConfig+0x1c4>)
 8007bde:	4313      	orrs	r3, r2
 8007be0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f003 0301 	and.w	r3, r3, #1
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d040      	beq.n	8007c70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d107      	bne.n	8007c06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bf6:	4b47      	ldr	r3, [pc, #284]	@ (8007d14 <HAL_RCC_ClockConfig+0x1c4>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d115      	bne.n	8007c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	e07f      	b.n	8007d06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	2b02      	cmp	r3, #2
 8007c0c:	d107      	bne.n	8007c1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c0e:	4b41      	ldr	r3, [pc, #260]	@ (8007d14 <HAL_RCC_ClockConfig+0x1c4>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d109      	bne.n	8007c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	e073      	b.n	8007d06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c1e:	4b3d      	ldr	r3, [pc, #244]	@ (8007d14 <HAL_RCC_ClockConfig+0x1c4>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f003 0302 	and.w	r3, r3, #2
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d101      	bne.n	8007c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	e06b      	b.n	8007d06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007c2e:	4b39      	ldr	r3, [pc, #228]	@ (8007d14 <HAL_RCC_ClockConfig+0x1c4>)
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	f023 0203 	bic.w	r2, r3, #3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	4936      	ldr	r1, [pc, #216]	@ (8007d14 <HAL_RCC_ClockConfig+0x1c4>)
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007c40:	f7fd f910 	bl	8004e64 <HAL_GetTick>
 8007c44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c46:	e00a      	b.n	8007c5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c48:	f7fd f90c 	bl	8004e64 <HAL_GetTick>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	1ad3      	subs	r3, r2, r3
 8007c52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d901      	bls.n	8007c5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007c5a:	2303      	movs	r3, #3
 8007c5c:	e053      	b.n	8007d06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c5e:	4b2d      	ldr	r3, [pc, #180]	@ (8007d14 <HAL_RCC_ClockConfig+0x1c4>)
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	f003 020c 	and.w	r2, r3, #12
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d1eb      	bne.n	8007c48 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007c70:	4b27      	ldr	r3, [pc, #156]	@ (8007d10 <HAL_RCC_ClockConfig+0x1c0>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f003 0307 	and.w	r3, r3, #7
 8007c78:	683a      	ldr	r2, [r7, #0]
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d210      	bcs.n	8007ca0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c7e:	4b24      	ldr	r3, [pc, #144]	@ (8007d10 <HAL_RCC_ClockConfig+0x1c0>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f023 0207 	bic.w	r2, r3, #7
 8007c86:	4922      	ldr	r1, [pc, #136]	@ (8007d10 <HAL_RCC_ClockConfig+0x1c0>)
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c8e:	4b20      	ldr	r3, [pc, #128]	@ (8007d10 <HAL_RCC_ClockConfig+0x1c0>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f003 0307 	and.w	r3, r3, #7
 8007c96:	683a      	ldr	r2, [r7, #0]
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d001      	beq.n	8007ca0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	e032      	b.n	8007d06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f003 0304 	and.w	r3, r3, #4
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d008      	beq.n	8007cbe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007cac:	4b19      	ldr	r3, [pc, #100]	@ (8007d14 <HAL_RCC_ClockConfig+0x1c4>)
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	68db      	ldr	r3, [r3, #12]
 8007cb8:	4916      	ldr	r1, [pc, #88]	@ (8007d14 <HAL_RCC_ClockConfig+0x1c4>)
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f003 0308 	and.w	r3, r3, #8
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d009      	beq.n	8007cde <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007cca:	4b12      	ldr	r3, [pc, #72]	@ (8007d14 <HAL_RCC_ClockConfig+0x1c4>)
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	691b      	ldr	r3, [r3, #16]
 8007cd6:	00db      	lsls	r3, r3, #3
 8007cd8:	490e      	ldr	r1, [pc, #56]	@ (8007d14 <HAL_RCC_ClockConfig+0x1c4>)
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007cde:	f000 f821 	bl	8007d24 <HAL_RCC_GetSysClockFreq>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8007d14 <HAL_RCC_ClockConfig+0x1c4>)
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	091b      	lsrs	r3, r3, #4
 8007cea:	f003 030f 	and.w	r3, r3, #15
 8007cee:	490a      	ldr	r1, [pc, #40]	@ (8007d18 <HAL_RCC_ClockConfig+0x1c8>)
 8007cf0:	5ccb      	ldrb	r3, [r1, r3]
 8007cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8007cf6:	4a09      	ldr	r2, [pc, #36]	@ (8007d1c <HAL_RCC_ClockConfig+0x1cc>)
 8007cf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007cfa:	4b09      	ldr	r3, [pc, #36]	@ (8007d20 <HAL_RCC_ClockConfig+0x1d0>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f7fd f86e 	bl	8004de0 <HAL_InitTick>

  return HAL_OK;
 8007d04:	2300      	movs	r3, #0
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3710      	adds	r7, #16
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
 8007d0e:	bf00      	nop
 8007d10:	40022000 	.word	0x40022000
 8007d14:	40021000 	.word	0x40021000
 8007d18:	0800ca58 	.word	0x0800ca58
 8007d1c:	2000005c 	.word	0x2000005c
 8007d20:	20000060 	.word	0x20000060

08007d24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b087      	sub	sp, #28
 8007d28:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	60fb      	str	r3, [r7, #12]
 8007d2e:	2300      	movs	r3, #0
 8007d30:	60bb      	str	r3, [r7, #8]
 8007d32:	2300      	movs	r3, #0
 8007d34:	617b      	str	r3, [r7, #20]
 8007d36:	2300      	movs	r3, #0
 8007d38:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007d3e:	4b1e      	ldr	r3, [pc, #120]	@ (8007db8 <HAL_RCC_GetSysClockFreq+0x94>)
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f003 030c 	and.w	r3, r3, #12
 8007d4a:	2b04      	cmp	r3, #4
 8007d4c:	d002      	beq.n	8007d54 <HAL_RCC_GetSysClockFreq+0x30>
 8007d4e:	2b08      	cmp	r3, #8
 8007d50:	d003      	beq.n	8007d5a <HAL_RCC_GetSysClockFreq+0x36>
 8007d52:	e027      	b.n	8007da4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007d54:	4b19      	ldr	r3, [pc, #100]	@ (8007dbc <HAL_RCC_GetSysClockFreq+0x98>)
 8007d56:	613b      	str	r3, [r7, #16]
      break;
 8007d58:	e027      	b.n	8007daa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	0c9b      	lsrs	r3, r3, #18
 8007d5e:	f003 030f 	and.w	r3, r3, #15
 8007d62:	4a17      	ldr	r2, [pc, #92]	@ (8007dc0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007d64:	5cd3      	ldrb	r3, [r2, r3]
 8007d66:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d010      	beq.n	8007d94 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007d72:	4b11      	ldr	r3, [pc, #68]	@ (8007db8 <HAL_RCC_GetSysClockFreq+0x94>)
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	0c5b      	lsrs	r3, r3, #17
 8007d78:	f003 0301 	and.w	r3, r3, #1
 8007d7c:	4a11      	ldr	r2, [pc, #68]	@ (8007dc4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8007d7e:	5cd3      	ldrb	r3, [r2, r3]
 8007d80:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4a0d      	ldr	r2, [pc, #52]	@ (8007dbc <HAL_RCC_GetSysClockFreq+0x98>)
 8007d86:	fb03 f202 	mul.w	r2, r3, r2
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d90:	617b      	str	r3, [r7, #20]
 8007d92:	e004      	b.n	8007d9e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	4a0c      	ldr	r2, [pc, #48]	@ (8007dc8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007d98:	fb02 f303 	mul.w	r3, r2, r3
 8007d9c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	613b      	str	r3, [r7, #16]
      break;
 8007da2:	e002      	b.n	8007daa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007da4:	4b05      	ldr	r3, [pc, #20]	@ (8007dbc <HAL_RCC_GetSysClockFreq+0x98>)
 8007da6:	613b      	str	r3, [r7, #16]
      break;
 8007da8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007daa:	693b      	ldr	r3, [r7, #16]
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	371c      	adds	r7, #28
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bc80      	pop	{r7}
 8007db4:	4770      	bx	lr
 8007db6:	bf00      	nop
 8007db8:	40021000 	.word	0x40021000
 8007dbc:	007a1200 	.word	0x007a1200
 8007dc0:	0800ca70 	.word	0x0800ca70
 8007dc4:	0800ca80 	.word	0x0800ca80
 8007dc8:	003d0900 	.word	0x003d0900

08007dcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007dd0:	4b02      	ldr	r3, [pc, #8]	@ (8007ddc <HAL_RCC_GetHCLKFreq+0x10>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bc80      	pop	{r7}
 8007dda:	4770      	bx	lr
 8007ddc:	2000005c 	.word	0x2000005c

08007de0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007de4:	f7ff fff2 	bl	8007dcc <HAL_RCC_GetHCLKFreq>
 8007de8:	4602      	mov	r2, r0
 8007dea:	4b05      	ldr	r3, [pc, #20]	@ (8007e00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	0a1b      	lsrs	r3, r3, #8
 8007df0:	f003 0307 	and.w	r3, r3, #7
 8007df4:	4903      	ldr	r1, [pc, #12]	@ (8007e04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007df6:	5ccb      	ldrb	r3, [r1, r3]
 8007df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	bd80      	pop	{r7, pc}
 8007e00:	40021000 	.word	0x40021000
 8007e04:	0800ca68 	.word	0x0800ca68

08007e08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007e0c:	f7ff ffde 	bl	8007dcc <HAL_RCC_GetHCLKFreq>
 8007e10:	4602      	mov	r2, r0
 8007e12:	4b05      	ldr	r3, [pc, #20]	@ (8007e28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	0adb      	lsrs	r3, r3, #11
 8007e18:	f003 0307 	and.w	r3, r3, #7
 8007e1c:	4903      	ldr	r1, [pc, #12]	@ (8007e2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e1e:	5ccb      	ldrb	r3, [r1, r3]
 8007e20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	40021000 	.word	0x40021000
 8007e2c:	0800ca68 	.word	0x0800ca68

08007e30 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b085      	sub	sp, #20
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007e38:	4b0a      	ldr	r3, [pc, #40]	@ (8007e64 <RCC_Delay+0x34>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a0a      	ldr	r2, [pc, #40]	@ (8007e68 <RCC_Delay+0x38>)
 8007e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e42:	0a5b      	lsrs	r3, r3, #9
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	fb02 f303 	mul.w	r3, r2, r3
 8007e4a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007e4c:	bf00      	nop
  }
  while (Delay --);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	1e5a      	subs	r2, r3, #1
 8007e52:	60fa      	str	r2, [r7, #12]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d1f9      	bne.n	8007e4c <RCC_Delay+0x1c>
}
 8007e58:	bf00      	nop
 8007e5a:	bf00      	nop
 8007e5c:	3714      	adds	r7, #20
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bc80      	pop	{r7}
 8007e62:	4770      	bx	lr
 8007e64:	2000005c 	.word	0x2000005c
 8007e68:	10624dd3 	.word	0x10624dd3

08007e6c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b086      	sub	sp, #24
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007e74:	2300      	movs	r3, #0
 8007e76:	613b      	str	r3, [r7, #16]
 8007e78:	2300      	movs	r3, #0
 8007e7a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f003 0301 	and.w	r3, r3, #1
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d07d      	beq.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e8c:	4b4f      	ldr	r3, [pc, #316]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e8e:	69db      	ldr	r3, [r3, #28]
 8007e90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d10d      	bne.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e98:	4b4c      	ldr	r3, [pc, #304]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e9a:	69db      	ldr	r3, [r3, #28]
 8007e9c:	4a4b      	ldr	r2, [pc, #300]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ea2:	61d3      	str	r3, [r2, #28]
 8007ea4:	4b49      	ldr	r3, [pc, #292]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ea6:	69db      	ldr	r3, [r3, #28]
 8007ea8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007eac:	60bb      	str	r3, [r7, #8]
 8007eae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007eb4:	4b46      	ldr	r3, [pc, #280]	@ (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d118      	bne.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007ec0:	4b43      	ldr	r3, [pc, #268]	@ (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a42      	ldr	r2, [pc, #264]	@ (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007ec6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007eca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007ecc:	f7fc ffca 	bl	8004e64 <HAL_GetTick>
 8007ed0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ed2:	e008      	b.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ed4:	f7fc ffc6 	bl	8004e64 <HAL_GetTick>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	1ad3      	subs	r3, r2, r3
 8007ede:	2b64      	cmp	r3, #100	@ 0x64
 8007ee0:	d901      	bls.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007ee2:	2303      	movs	r3, #3
 8007ee4:	e06d      	b.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ee6:	4b3a      	ldr	r3, [pc, #232]	@ (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d0f0      	beq.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007ef2:	4b36      	ldr	r3, [pc, #216]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ef4:	6a1b      	ldr	r3, [r3, #32]
 8007ef6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007efa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d02e      	beq.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f0a:	68fa      	ldr	r2, [r7, #12]
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d027      	beq.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007f10:	4b2e      	ldr	r3, [pc, #184]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f12:	6a1b      	ldr	r3, [r3, #32]
 8007f14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f18:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007f1a:	4b2e      	ldr	r3, [pc, #184]	@ (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007f20:	4b2c      	ldr	r3, [pc, #176]	@ (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007f22:	2200      	movs	r2, #0
 8007f24:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007f26:	4a29      	ldr	r2, [pc, #164]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f003 0301 	and.w	r3, r3, #1
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d014      	beq.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f36:	f7fc ff95 	bl	8004e64 <HAL_GetTick>
 8007f3a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f3c:	e00a      	b.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f3e:	f7fc ff91 	bl	8004e64 <HAL_GetTick>
 8007f42:	4602      	mov	r2, r0
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	1ad3      	subs	r3, r2, r3
 8007f48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d901      	bls.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007f50:	2303      	movs	r3, #3
 8007f52:	e036      	b.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f54:	4b1d      	ldr	r3, [pc, #116]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f56:	6a1b      	ldr	r3, [r3, #32]
 8007f58:	f003 0302 	and.w	r3, r3, #2
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d0ee      	beq.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007f60:	4b1a      	ldr	r3, [pc, #104]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f62:	6a1b      	ldr	r3, [r3, #32]
 8007f64:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	4917      	ldr	r1, [pc, #92]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007f72:	7dfb      	ldrb	r3, [r7, #23]
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d105      	bne.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f78:	4b14      	ldr	r3, [pc, #80]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f7a:	69db      	ldr	r3, [r3, #28]
 8007f7c:	4a13      	ldr	r2, [pc, #76]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007f82:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f003 0302 	and.w	r3, r3, #2
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d008      	beq.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007f90:	4b0e      	ldr	r3, [pc, #56]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	490b      	ldr	r1, [pc, #44]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f003 0310 	and.w	r3, r3, #16
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d008      	beq.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007fae:	4b07      	ldr	r3, [pc, #28]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	4904      	ldr	r1, [pc, #16]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007fc0:	2300      	movs	r3, #0
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3718      	adds	r7, #24
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	40021000 	.word	0x40021000
 8007fd0:	40007000 	.word	0x40007000
 8007fd4:	42420440 	.word	0x42420440

08007fd8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b088      	sub	sp, #32
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	617b      	str	r3, [r7, #20]
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	61fb      	str	r3, [r7, #28]
 8007fe8:	2300      	movs	r3, #0
 8007fea:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8007fec:	2300      	movs	r3, #0
 8007fee:	60fb      	str	r3, [r7, #12]
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2b10      	cmp	r3, #16
 8007ff8:	d00a      	beq.n	8008010 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2b10      	cmp	r3, #16
 8007ffe:	f200 808a 	bhi.w	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2b01      	cmp	r3, #1
 8008006:	d045      	beq.n	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2b02      	cmp	r3, #2
 800800c:	d075      	beq.n	80080fa <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800800e:	e082      	b.n	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8008010:	4b46      	ldr	r3, [pc, #280]	@ (800812c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8008016:	4b45      	ldr	r3, [pc, #276]	@ (800812c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800801e:	2b00      	cmp	r3, #0
 8008020:	d07b      	beq.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	0c9b      	lsrs	r3, r3, #18
 8008026:	f003 030f 	and.w	r3, r3, #15
 800802a:	4a41      	ldr	r2, [pc, #260]	@ (8008130 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800802c:	5cd3      	ldrb	r3, [r2, r3]
 800802e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008036:	2b00      	cmp	r3, #0
 8008038:	d015      	beq.n	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800803a:	4b3c      	ldr	r3, [pc, #240]	@ (800812c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	0c5b      	lsrs	r3, r3, #17
 8008040:	f003 0301 	and.w	r3, r3, #1
 8008044:	4a3b      	ldr	r2, [pc, #236]	@ (8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8008046:	5cd3      	ldrb	r3, [r2, r3]
 8008048:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008050:	2b00      	cmp	r3, #0
 8008052:	d00d      	beq.n	8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8008054:	4a38      	ldr	r2, [pc, #224]	@ (8008138 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	fbb2 f2f3 	udiv	r2, r2, r3
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	fb02 f303 	mul.w	r3, r2, r3
 8008062:	61fb      	str	r3, [r7, #28]
 8008064:	e004      	b.n	8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	4a34      	ldr	r2, [pc, #208]	@ (800813c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800806a:	fb02 f303 	mul.w	r3, r2, r3
 800806e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8008070:	4b2e      	ldr	r3, [pc, #184]	@ (800812c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008078:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800807c:	d102      	bne.n	8008084 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800807e:	69fb      	ldr	r3, [r7, #28]
 8008080:	61bb      	str	r3, [r7, #24]
      break;
 8008082:	e04a      	b.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8008084:	69fb      	ldr	r3, [r7, #28]
 8008086:	005b      	lsls	r3, r3, #1
 8008088:	4a2d      	ldr	r2, [pc, #180]	@ (8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800808a:	fba2 2303 	umull	r2, r3, r2, r3
 800808e:	085b      	lsrs	r3, r3, #1
 8008090:	61bb      	str	r3, [r7, #24]
      break;
 8008092:	e042      	b.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8008094:	4b25      	ldr	r3, [pc, #148]	@ (800812c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8008096:	6a1b      	ldr	r3, [r3, #32]
 8008098:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080a4:	d108      	bne.n	80080b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f003 0302 	and.w	r3, r3, #2
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d003      	beq.n	80080b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80080b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80080b4:	61bb      	str	r3, [r7, #24]
 80080b6:	e01f      	b.n	80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080c2:	d109      	bne.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80080c4:	4b19      	ldr	r3, [pc, #100]	@ (800812c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80080c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080c8:	f003 0302 	and.w	r3, r3, #2
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d003      	beq.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80080d0:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80080d4:	61bb      	str	r3, [r7, #24]
 80080d6:	e00f      	b.n	80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80080e2:	d11c      	bne.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80080e4:	4b11      	ldr	r3, [pc, #68]	@ (800812c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d016      	beq.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80080f0:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80080f4:	61bb      	str	r3, [r7, #24]
      break;
 80080f6:	e012      	b.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80080f8:	e011      	b.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80080fa:	f7ff fe85 	bl	8007e08 <HAL_RCC_GetPCLK2Freq>
 80080fe:	4602      	mov	r2, r0
 8008100:	4b0a      	ldr	r3, [pc, #40]	@ (800812c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	0b9b      	lsrs	r3, r3, #14
 8008106:	f003 0303 	and.w	r3, r3, #3
 800810a:	3301      	adds	r3, #1
 800810c:	005b      	lsls	r3, r3, #1
 800810e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008112:	61bb      	str	r3, [r7, #24]
      break;
 8008114:	e004      	b.n	8008120 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8008116:	bf00      	nop
 8008118:	e002      	b.n	8008120 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800811a:	bf00      	nop
 800811c:	e000      	b.n	8008120 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800811e:	bf00      	nop
    }
  }
  return (frequency);
 8008120:	69bb      	ldr	r3, [r7, #24]
}
 8008122:	4618      	mov	r0, r3
 8008124:	3720      	adds	r7, #32
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop
 800812c:	40021000 	.word	0x40021000
 8008130:	0800ca84 	.word	0x0800ca84
 8008134:	0800ca94 	.word	0x0800ca94
 8008138:	007a1200 	.word	0x007a1200
 800813c:	003d0900 	.word	0x003d0900
 8008140:	aaaaaaab 	.word	0xaaaaaaab

08008144 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f003 0302 	and.w	r3, r3, #2
 8008156:	2b00      	cmp	r3, #0
 8008158:	d011      	beq.n	800817e <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	f003 0302 	and.w	r3, r3, #2
 8008164:	2b00      	cmp	r3, #0
 8008166:	d00a      	beq.n	800817e <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 f815 	bl	8008198 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	685a      	ldr	r2, [r3, #4]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f022 0202 	bic.w	r2, r2, #2
 800817c:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800817e:	4b05      	ldr	r3, [pc, #20]	@ (8008194 <HAL_RTC_AlarmIRQHandler+0x50>)
 8008180:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8008184:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2201      	movs	r2, #1
 800818a:	745a      	strb	r2, [r3, #17]
}
 800818c:	bf00      	nop
 800818e:	3708      	adds	r7, #8
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}
 8008194:	40010400 	.word	0x40010400

08008198 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008198:	b480      	push	{r7}
 800819a:	b083      	sub	sp, #12
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80081a0:	bf00      	nop
 80081a2:	370c      	adds	r7, #12
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bc80      	pop	{r7}
 80081a8:	4770      	bx	lr

080081aa <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80081aa:	b580      	push	{r7, lr}
 80081ac:	b082      	sub	sp, #8
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d101      	bne.n	80081bc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80081b8:	2301      	movs	r3, #1
 80081ba:	e076      	b.n	80082aa <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d108      	bne.n	80081d6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80081cc:	d009      	beq.n	80081e2 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	61da      	str	r2, [r3, #28]
 80081d4:	e005      	b.n	80081e2 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d106      	bne.n	8008202 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f7fc fb13 	bl	8004828 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2202      	movs	r2, #2
 8008206:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008218:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800822a:	431a      	orrs	r2, r3
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	68db      	ldr	r3, [r3, #12]
 8008230:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008234:	431a      	orrs	r2, r3
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	691b      	ldr	r3, [r3, #16]
 800823a:	f003 0302 	and.w	r3, r3, #2
 800823e:	431a      	orrs	r2, r3
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	695b      	ldr	r3, [r3, #20]
 8008244:	f003 0301 	and.w	r3, r3, #1
 8008248:	431a      	orrs	r2, r3
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	699b      	ldr	r3, [r3, #24]
 800824e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008252:	431a      	orrs	r2, r3
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	69db      	ldr	r3, [r3, #28]
 8008258:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800825c:	431a      	orrs	r2, r3
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6a1b      	ldr	r3, [r3, #32]
 8008262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008266:	ea42 0103 	orr.w	r1, r2, r3
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800826e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	430a      	orrs	r2, r1
 8008278:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	699b      	ldr	r3, [r3, #24]
 800827e:	0c1a      	lsrs	r2, r3, #16
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f002 0204 	and.w	r2, r2, #4
 8008288:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	69da      	ldr	r2, [r3, #28]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008298:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2201      	movs	r2, #1
 80082a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80082a8:	2300      	movs	r3, #0
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3708      	adds	r7, #8
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}

080082b2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b088      	sub	sp, #32
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	60f8      	str	r0, [r7, #12]
 80082ba:	60b9      	str	r1, [r7, #8]
 80082bc:	603b      	str	r3, [r7, #0]
 80082be:	4613      	mov	r3, r2
 80082c0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80082c2:	f7fc fdcf 	bl	8004e64 <HAL_GetTick>
 80082c6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80082c8:	88fb      	ldrh	r3, [r7, #6]
 80082ca:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d001      	beq.n	80082dc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80082d8:	2302      	movs	r3, #2
 80082da:	e12a      	b.n	8008532 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d002      	beq.n	80082e8 <HAL_SPI_Transmit+0x36>
 80082e2:	88fb      	ldrh	r3, [r7, #6]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d101      	bne.n	80082ec <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80082e8:	2301      	movs	r3, #1
 80082ea:	e122      	b.n	8008532 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d101      	bne.n	80082fa <HAL_SPI_Transmit+0x48>
 80082f6:	2302      	movs	r3, #2
 80082f8:	e11b      	b.n	8008532 <HAL_SPI_Transmit+0x280>
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2201      	movs	r2, #1
 80082fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2203      	movs	r2, #3
 8008306:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2200      	movs	r2, #0
 800830e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	68ba      	ldr	r2, [r7, #8]
 8008314:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	88fa      	ldrh	r2, [r7, #6]
 800831a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	88fa      	ldrh	r2, [r7, #6]
 8008320:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2200      	movs	r2, #0
 8008326:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2200      	movs	r2, #0
 800832c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2200      	movs	r2, #0
 8008332:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2200      	movs	r2, #0
 8008338:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2200      	movs	r2, #0
 800833e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008348:	d10f      	bne.n	800836a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008358:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008368:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008374:	2b40      	cmp	r3, #64	@ 0x40
 8008376:	d007      	beq.n	8008388 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008386:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008390:	d152      	bne.n	8008438 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d002      	beq.n	80083a0 <HAL_SPI_Transmit+0xee>
 800839a:	8b7b      	ldrh	r3, [r7, #26]
 800839c:	2b01      	cmp	r3, #1
 800839e:	d145      	bne.n	800842c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083a4:	881a      	ldrh	r2, [r3, #0]
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083b0:	1c9a      	adds	r2, r3, #2
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	3b01      	subs	r3, #1
 80083be:	b29a      	uxth	r2, r3
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80083c4:	e032      	b.n	800842c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	f003 0302 	and.w	r3, r3, #2
 80083d0:	2b02      	cmp	r3, #2
 80083d2:	d112      	bne.n	80083fa <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083d8:	881a      	ldrh	r2, [r3, #0]
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083e4:	1c9a      	adds	r2, r3, #2
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	3b01      	subs	r3, #1
 80083f2:	b29a      	uxth	r2, r3
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80083f8:	e018      	b.n	800842c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80083fa:	f7fc fd33 	bl	8004e64 <HAL_GetTick>
 80083fe:	4602      	mov	r2, r0
 8008400:	69fb      	ldr	r3, [r7, #28]
 8008402:	1ad3      	subs	r3, r2, r3
 8008404:	683a      	ldr	r2, [r7, #0]
 8008406:	429a      	cmp	r2, r3
 8008408:	d803      	bhi.n	8008412 <HAL_SPI_Transmit+0x160>
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008410:	d102      	bne.n	8008418 <HAL_SPI_Transmit+0x166>
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d109      	bne.n	800842c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2201      	movs	r2, #1
 800841c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2200      	movs	r2, #0
 8008424:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008428:	2303      	movs	r3, #3
 800842a:	e082      	b.n	8008532 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008430:	b29b      	uxth	r3, r3
 8008432:	2b00      	cmp	r3, #0
 8008434:	d1c7      	bne.n	80083c6 <HAL_SPI_Transmit+0x114>
 8008436:	e053      	b.n	80084e0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d002      	beq.n	8008446 <HAL_SPI_Transmit+0x194>
 8008440:	8b7b      	ldrh	r3, [r7, #26]
 8008442:	2b01      	cmp	r3, #1
 8008444:	d147      	bne.n	80084d6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	330c      	adds	r3, #12
 8008450:	7812      	ldrb	r2, [r2, #0]
 8008452:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008458:	1c5a      	adds	r2, r3, #1
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008462:	b29b      	uxth	r3, r3
 8008464:	3b01      	subs	r3, #1
 8008466:	b29a      	uxth	r2, r3
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800846c:	e033      	b.n	80084d6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	f003 0302 	and.w	r3, r3, #2
 8008478:	2b02      	cmp	r3, #2
 800847a:	d113      	bne.n	80084a4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	330c      	adds	r3, #12
 8008486:	7812      	ldrb	r2, [r2, #0]
 8008488:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800848e:	1c5a      	adds	r2, r3, #1
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008498:	b29b      	uxth	r3, r3
 800849a:	3b01      	subs	r3, #1
 800849c:	b29a      	uxth	r2, r3
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80084a2:	e018      	b.n	80084d6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80084a4:	f7fc fcde 	bl	8004e64 <HAL_GetTick>
 80084a8:	4602      	mov	r2, r0
 80084aa:	69fb      	ldr	r3, [r7, #28]
 80084ac:	1ad3      	subs	r3, r2, r3
 80084ae:	683a      	ldr	r2, [r7, #0]
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d803      	bhi.n	80084bc <HAL_SPI_Transmit+0x20a>
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ba:	d102      	bne.n	80084c2 <HAL_SPI_Transmit+0x210>
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d109      	bne.n	80084d6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2201      	movs	r2, #1
 80084c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2200      	movs	r2, #0
 80084ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80084d2:	2303      	movs	r3, #3
 80084d4:	e02d      	b.n	8008532 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80084da:	b29b      	uxth	r3, r3
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d1c6      	bne.n	800846e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80084e0:	69fa      	ldr	r2, [r7, #28]
 80084e2:	6839      	ldr	r1, [r7, #0]
 80084e4:	68f8      	ldr	r0, [r7, #12]
 80084e6:	f000 fbc5 	bl	8008c74 <SPI_EndRxTxTransaction>
 80084ea:	4603      	mov	r3, r0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d002      	beq.n	80084f6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2220      	movs	r2, #32
 80084f4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d10a      	bne.n	8008514 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80084fe:	2300      	movs	r3, #0
 8008500:	617b      	str	r3, [r7, #20]
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	617b      	str	r3, [r7, #20]
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	617b      	str	r3, [r7, #20]
 8008512:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2201      	movs	r2, #1
 8008518:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2200      	movs	r2, #0
 8008520:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008528:	2b00      	cmp	r3, #0
 800852a:	d001      	beq.n	8008530 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800852c:	2301      	movs	r3, #1
 800852e:	e000      	b.n	8008532 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8008530:	2300      	movs	r3, #0
  }
}
 8008532:	4618      	mov	r0, r3
 8008534:	3720      	adds	r7, #32
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}

0800853a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800853a:	b580      	push	{r7, lr}
 800853c:	b088      	sub	sp, #32
 800853e:	af02      	add	r7, sp, #8
 8008540:	60f8      	str	r0, [r7, #12]
 8008542:	60b9      	str	r1, [r7, #8]
 8008544:	603b      	str	r3, [r7, #0]
 8008546:	4613      	mov	r3, r2
 8008548:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008550:	b2db      	uxtb	r3, r3
 8008552:	2b01      	cmp	r3, #1
 8008554:	d001      	beq.n	800855a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8008556:	2302      	movs	r3, #2
 8008558:	e104      	b.n	8008764 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008562:	d112      	bne.n	800858a <HAL_SPI_Receive+0x50>
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	689b      	ldr	r3, [r3, #8]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d10e      	bne.n	800858a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2204      	movs	r2, #4
 8008570:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008574:	88fa      	ldrh	r2, [r7, #6]
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	9300      	str	r3, [sp, #0]
 800857a:	4613      	mov	r3, r2
 800857c:	68ba      	ldr	r2, [r7, #8]
 800857e:	68b9      	ldr	r1, [r7, #8]
 8008580:	68f8      	ldr	r0, [r7, #12]
 8008582:	f000 f8f3 	bl	800876c <HAL_SPI_TransmitReceive>
 8008586:	4603      	mov	r3, r0
 8008588:	e0ec      	b.n	8008764 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800858a:	f7fc fc6b 	bl	8004e64 <HAL_GetTick>
 800858e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d002      	beq.n	800859c <HAL_SPI_Receive+0x62>
 8008596:	88fb      	ldrh	r3, [r7, #6]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d101      	bne.n	80085a0 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800859c:	2301      	movs	r3, #1
 800859e:	e0e1      	b.n	8008764 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d101      	bne.n	80085ae <HAL_SPI_Receive+0x74>
 80085aa:	2302      	movs	r3, #2
 80085ac:	e0da      	b.n	8008764 <HAL_SPI_Receive+0x22a>
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2201      	movs	r2, #1
 80085b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2204      	movs	r2, #4
 80085ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2200      	movs	r2, #0
 80085c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	68ba      	ldr	r2, [r7, #8]
 80085c8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	88fa      	ldrh	r2, [r7, #6]
 80085ce:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	88fa      	ldrh	r2, [r7, #6]
 80085d4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2200      	movs	r2, #0
 80085da:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2200      	movs	r2, #0
 80085e0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2200      	movs	r2, #0
 80085e6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2200      	movs	r2, #0
 80085ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2200      	movs	r2, #0
 80085f2:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085fc:	d10f      	bne.n	800861e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800860c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	681a      	ldr	r2, [r3, #0]
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800861c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008628:	2b40      	cmp	r3, #64	@ 0x40
 800862a:	d007      	beq.n	800863c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	681a      	ldr	r2, [r3, #0]
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800863a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	68db      	ldr	r3, [r3, #12]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d170      	bne.n	8008726 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008644:	e035      	b.n	80086b2 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	f003 0301 	and.w	r3, r3, #1
 8008650:	2b01      	cmp	r3, #1
 8008652:	d115      	bne.n	8008680 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f103 020c 	add.w	r2, r3, #12
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008660:	7812      	ldrb	r2, [r2, #0]
 8008662:	b2d2      	uxtb	r2, r2
 8008664:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800866a:	1c5a      	adds	r2, r3, #1
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008674:	b29b      	uxth	r3, r3
 8008676:	3b01      	subs	r3, #1
 8008678:	b29a      	uxth	r2, r3
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800867e:	e018      	b.n	80086b2 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008680:	f7fc fbf0 	bl	8004e64 <HAL_GetTick>
 8008684:	4602      	mov	r2, r0
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	1ad3      	subs	r3, r2, r3
 800868a:	683a      	ldr	r2, [r7, #0]
 800868c:	429a      	cmp	r2, r3
 800868e:	d803      	bhi.n	8008698 <HAL_SPI_Receive+0x15e>
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008696:	d102      	bne.n	800869e <HAL_SPI_Receive+0x164>
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d109      	bne.n	80086b2 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2201      	movs	r2, #1
 80086a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2200      	movs	r2, #0
 80086aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80086ae:	2303      	movs	r3, #3
 80086b0:	e058      	b.n	8008764 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d1c4      	bne.n	8008646 <HAL_SPI_Receive+0x10c>
 80086bc:	e038      	b.n	8008730 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	689b      	ldr	r3, [r3, #8]
 80086c4:	f003 0301 	and.w	r3, r3, #1
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	d113      	bne.n	80086f4 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	68da      	ldr	r2, [r3, #12]
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086d6:	b292      	uxth	r2, r2
 80086d8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086de:	1c9a      	adds	r2, r3, #2
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	3b01      	subs	r3, #1
 80086ec:	b29a      	uxth	r2, r3
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80086f2:	e018      	b.n	8008726 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80086f4:	f7fc fbb6 	bl	8004e64 <HAL_GetTick>
 80086f8:	4602      	mov	r2, r0
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	1ad3      	subs	r3, r2, r3
 80086fe:	683a      	ldr	r2, [r7, #0]
 8008700:	429a      	cmp	r2, r3
 8008702:	d803      	bhi.n	800870c <HAL_SPI_Receive+0x1d2>
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800870a:	d102      	bne.n	8008712 <HAL_SPI_Receive+0x1d8>
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d109      	bne.n	8008726 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2201      	movs	r2, #1
 8008716:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2200      	movs	r2, #0
 800871e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008722:	2303      	movs	r3, #3
 8008724:	e01e      	b.n	8008764 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800872a:	b29b      	uxth	r3, r3
 800872c:	2b00      	cmp	r3, #0
 800872e:	d1c6      	bne.n	80086be <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008730:	697a      	ldr	r2, [r7, #20]
 8008732:	6839      	ldr	r1, [r7, #0]
 8008734:	68f8      	ldr	r0, [r7, #12]
 8008736:	f000 fa4b 	bl	8008bd0 <SPI_EndRxTransaction>
 800873a:	4603      	mov	r3, r0
 800873c:	2b00      	cmp	r3, #0
 800873e:	d002      	beq.n	8008746 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2220      	movs	r2, #32
 8008744:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2201      	movs	r2, #1
 800874a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2200      	movs	r2, #0
 8008752:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800875a:	2b00      	cmp	r3, #0
 800875c:	d001      	beq.n	8008762 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800875e:	2301      	movs	r3, #1
 8008760:	e000      	b.n	8008764 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8008762:	2300      	movs	r3, #0
  }
}
 8008764:	4618      	mov	r0, r3
 8008766:	3718      	adds	r7, #24
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b08a      	sub	sp, #40	@ 0x28
 8008770:	af00      	add	r7, sp, #0
 8008772:	60f8      	str	r0, [r7, #12]
 8008774:	60b9      	str	r1, [r7, #8]
 8008776:	607a      	str	r2, [r7, #4]
 8008778:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800877a:	2301      	movs	r3, #1
 800877c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800877e:	f7fc fb71 	bl	8004e64 <HAL_GetTick>
 8008782:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800878a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008792:	887b      	ldrh	r3, [r7, #2]
 8008794:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008796:	7ffb      	ldrb	r3, [r7, #31]
 8008798:	2b01      	cmp	r3, #1
 800879a:	d00c      	beq.n	80087b6 <HAL_SPI_TransmitReceive+0x4a>
 800879c:	69bb      	ldr	r3, [r7, #24]
 800879e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80087a2:	d106      	bne.n	80087b2 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	689b      	ldr	r3, [r3, #8]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d102      	bne.n	80087b2 <HAL_SPI_TransmitReceive+0x46>
 80087ac:	7ffb      	ldrb	r3, [r7, #31]
 80087ae:	2b04      	cmp	r3, #4
 80087b0:	d001      	beq.n	80087b6 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80087b2:	2302      	movs	r3, #2
 80087b4:	e17f      	b.n	8008ab6 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d005      	beq.n	80087c8 <HAL_SPI_TransmitReceive+0x5c>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d002      	beq.n	80087c8 <HAL_SPI_TransmitReceive+0x5c>
 80087c2:	887b      	ldrh	r3, [r7, #2]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d101      	bne.n	80087cc <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80087c8:	2301      	movs	r3, #1
 80087ca:	e174      	b.n	8008ab6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	d101      	bne.n	80087da <HAL_SPI_TransmitReceive+0x6e>
 80087d6:	2302      	movs	r3, #2
 80087d8:	e16d      	b.n	8008ab6 <HAL_SPI_TransmitReceive+0x34a>
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2201      	movs	r2, #1
 80087de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	2b04      	cmp	r3, #4
 80087ec:	d003      	beq.n	80087f6 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2205      	movs	r2, #5
 80087f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2200      	movs	r2, #0
 80087fa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	887a      	ldrh	r2, [r7, #2]
 8008806:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	887a      	ldrh	r2, [r7, #2]
 800880c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	68ba      	ldr	r2, [r7, #8]
 8008812:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	887a      	ldrh	r2, [r7, #2]
 8008818:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	887a      	ldrh	r2, [r7, #2]
 800881e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2200      	movs	r2, #0
 8008824:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2200      	movs	r2, #0
 800882a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008836:	2b40      	cmp	r3, #64	@ 0x40
 8008838:	d007      	beq.n	800884a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	681a      	ldr	r2, [r3, #0]
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008848:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	68db      	ldr	r3, [r3, #12]
 800884e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008852:	d17e      	bne.n	8008952 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d002      	beq.n	8008862 <HAL_SPI_TransmitReceive+0xf6>
 800885c:	8afb      	ldrh	r3, [r7, #22]
 800885e:	2b01      	cmp	r3, #1
 8008860:	d16c      	bne.n	800893c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008866:	881a      	ldrh	r2, [r3, #0]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008872:	1c9a      	adds	r2, r3, #2
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800887c:	b29b      	uxth	r3, r3
 800887e:	3b01      	subs	r3, #1
 8008880:	b29a      	uxth	r2, r3
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008886:	e059      	b.n	800893c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	689b      	ldr	r3, [r3, #8]
 800888e:	f003 0302 	and.w	r3, r3, #2
 8008892:	2b02      	cmp	r3, #2
 8008894:	d11b      	bne.n	80088ce <HAL_SPI_TransmitReceive+0x162>
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800889a:	b29b      	uxth	r3, r3
 800889c:	2b00      	cmp	r3, #0
 800889e:	d016      	beq.n	80088ce <HAL_SPI_TransmitReceive+0x162>
 80088a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088a2:	2b01      	cmp	r3, #1
 80088a4:	d113      	bne.n	80088ce <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088aa:	881a      	ldrh	r2, [r3, #0]
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088b6:	1c9a      	adds	r2, r3, #2
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	3b01      	subs	r3, #1
 80088c4:	b29a      	uxth	r2, r3
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80088ca:	2300      	movs	r3, #0
 80088cc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	f003 0301 	and.w	r3, r3, #1
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d119      	bne.n	8008910 <HAL_SPI_TransmitReceive+0x1a4>
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80088e0:	b29b      	uxth	r3, r3
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d014      	beq.n	8008910 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	68da      	ldr	r2, [r3, #12]
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088f0:	b292      	uxth	r2, r2
 80088f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088f8:	1c9a      	adds	r2, r3, #2
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008902:	b29b      	uxth	r3, r3
 8008904:	3b01      	subs	r3, #1
 8008906:	b29a      	uxth	r2, r3
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800890c:	2301      	movs	r3, #1
 800890e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008910:	f7fc faa8 	bl	8004e64 <HAL_GetTick>
 8008914:	4602      	mov	r2, r0
 8008916:	6a3b      	ldr	r3, [r7, #32]
 8008918:	1ad3      	subs	r3, r2, r3
 800891a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800891c:	429a      	cmp	r2, r3
 800891e:	d80d      	bhi.n	800893c <HAL_SPI_TransmitReceive+0x1d0>
 8008920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008926:	d009      	beq.n	800893c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2201      	movs	r2, #1
 800892c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2200      	movs	r2, #0
 8008934:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8008938:	2303      	movs	r3, #3
 800893a:	e0bc      	b.n	8008ab6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008940:	b29b      	uxth	r3, r3
 8008942:	2b00      	cmp	r3, #0
 8008944:	d1a0      	bne.n	8008888 <HAL_SPI_TransmitReceive+0x11c>
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800894a:	b29b      	uxth	r3, r3
 800894c:	2b00      	cmp	r3, #0
 800894e:	d19b      	bne.n	8008888 <HAL_SPI_TransmitReceive+0x11c>
 8008950:	e082      	b.n	8008a58 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d002      	beq.n	8008960 <HAL_SPI_TransmitReceive+0x1f4>
 800895a:	8afb      	ldrh	r3, [r7, #22]
 800895c:	2b01      	cmp	r3, #1
 800895e:	d171      	bne.n	8008a44 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	330c      	adds	r3, #12
 800896a:	7812      	ldrb	r2, [r2, #0]
 800896c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008972:	1c5a      	adds	r2, r3, #1
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800897c:	b29b      	uxth	r3, r3
 800897e:	3b01      	subs	r3, #1
 8008980:	b29a      	uxth	r2, r3
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008986:	e05d      	b.n	8008a44 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	689b      	ldr	r3, [r3, #8]
 800898e:	f003 0302 	and.w	r3, r3, #2
 8008992:	2b02      	cmp	r3, #2
 8008994:	d11c      	bne.n	80089d0 <HAL_SPI_TransmitReceive+0x264>
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800899a:	b29b      	uxth	r3, r3
 800899c:	2b00      	cmp	r3, #0
 800899e:	d017      	beq.n	80089d0 <HAL_SPI_TransmitReceive+0x264>
 80089a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	d114      	bne.n	80089d0 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	330c      	adds	r3, #12
 80089b0:	7812      	ldrb	r2, [r2, #0]
 80089b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089b8:	1c5a      	adds	r2, r3, #1
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	3b01      	subs	r3, #1
 80089c6:	b29a      	uxth	r2, r3
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80089cc:	2300      	movs	r3, #0
 80089ce:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	689b      	ldr	r3, [r3, #8]
 80089d6:	f003 0301 	and.w	r3, r3, #1
 80089da:	2b01      	cmp	r3, #1
 80089dc:	d119      	bne.n	8008a12 <HAL_SPI_TransmitReceive+0x2a6>
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d014      	beq.n	8008a12 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	68da      	ldr	r2, [r3, #12]
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089f2:	b2d2      	uxtb	r2, r2
 80089f4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089fa:	1c5a      	adds	r2, r3, #1
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	3b01      	subs	r3, #1
 8008a08:	b29a      	uxth	r2, r3
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008a12:	f7fc fa27 	bl	8004e64 <HAL_GetTick>
 8008a16:	4602      	mov	r2, r0
 8008a18:	6a3b      	ldr	r3, [r7, #32]
 8008a1a:	1ad3      	subs	r3, r2, r3
 8008a1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a1e:	429a      	cmp	r2, r3
 8008a20:	d803      	bhi.n	8008a2a <HAL_SPI_TransmitReceive+0x2be>
 8008a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a28:	d102      	bne.n	8008a30 <HAL_SPI_TransmitReceive+0x2c4>
 8008a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d109      	bne.n	8008a44 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2201      	movs	r2, #1
 8008a34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8008a40:	2303      	movs	r3, #3
 8008a42:	e038      	b.n	8008ab6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d19c      	bne.n	8008988 <HAL_SPI_TransmitReceive+0x21c>
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d197      	bne.n	8008988 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008a58:	6a3a      	ldr	r2, [r7, #32]
 8008a5a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008a5c:	68f8      	ldr	r0, [r7, #12]
 8008a5e:	f000 f909 	bl	8008c74 <SPI_EndRxTxTransaction>
 8008a62:	4603      	mov	r3, r0
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d008      	beq.n	8008a7a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2220      	movs	r2, #32
 8008a6c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2200      	movs	r2, #0
 8008a72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	e01d      	b.n	8008ab6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	689b      	ldr	r3, [r3, #8]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d10a      	bne.n	8008a98 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008a82:	2300      	movs	r3, #0
 8008a84:	613b      	str	r3, [r7, #16]
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	68db      	ldr	r3, [r3, #12]
 8008a8c:	613b      	str	r3, [r7, #16]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	689b      	ldr	r3, [r3, #8]
 8008a94:	613b      	str	r3, [r7, #16]
 8008a96:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d001      	beq.n	8008ab4 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	e000      	b.n	8008ab6 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8008ab4:	2300      	movs	r3, #0
  }
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3728      	adds	r7, #40	@ 0x28
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
	...

08008ac0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b088      	sub	sp, #32
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	60f8      	str	r0, [r7, #12]
 8008ac8:	60b9      	str	r1, [r7, #8]
 8008aca:	603b      	str	r3, [r7, #0]
 8008acc:	4613      	mov	r3, r2
 8008ace:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008ad0:	f7fc f9c8 	bl	8004e64 <HAL_GetTick>
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ad8:	1a9b      	subs	r3, r3, r2
 8008ada:	683a      	ldr	r2, [r7, #0]
 8008adc:	4413      	add	r3, r2
 8008ade:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008ae0:	f7fc f9c0 	bl	8004e64 <HAL_GetTick>
 8008ae4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008ae6:	4b39      	ldr	r3, [pc, #228]	@ (8008bcc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	015b      	lsls	r3, r3, #5
 8008aec:	0d1b      	lsrs	r3, r3, #20
 8008aee:	69fa      	ldr	r2, [r7, #28]
 8008af0:	fb02 f303 	mul.w	r3, r2, r3
 8008af4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008af6:	e054      	b.n	8008ba2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008afe:	d050      	beq.n	8008ba2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008b00:	f7fc f9b0 	bl	8004e64 <HAL_GetTick>
 8008b04:	4602      	mov	r2, r0
 8008b06:	69bb      	ldr	r3, [r7, #24]
 8008b08:	1ad3      	subs	r3, r2, r3
 8008b0a:	69fa      	ldr	r2, [r7, #28]
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d902      	bls.n	8008b16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008b10:	69fb      	ldr	r3, [r7, #28]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d13d      	bne.n	8008b92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	685a      	ldr	r2, [r3, #4]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008b24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008b2e:	d111      	bne.n	8008b54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b38:	d004      	beq.n	8008b44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b42:	d107      	bne.n	8008b54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	681a      	ldr	r2, [r3, #0]
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008b52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b5c:	d10f      	bne.n	8008b7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008b6c:	601a      	str	r2, [r3, #0]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008b7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2201      	movs	r2, #1
 8008b82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8008b8e:	2303      	movs	r3, #3
 8008b90:	e017      	b.n	8008bc2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d101      	bne.n	8008b9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	3b01      	subs	r3, #1
 8008ba0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	689a      	ldr	r2, [r3, #8]
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	4013      	ands	r3, r2
 8008bac:	68ba      	ldr	r2, [r7, #8]
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	bf0c      	ite	eq
 8008bb2:	2301      	moveq	r3, #1
 8008bb4:	2300      	movne	r3, #0
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	461a      	mov	r2, r3
 8008bba:	79fb      	ldrb	r3, [r7, #7]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d19b      	bne.n	8008af8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008bc0:	2300      	movs	r3, #0
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3720      	adds	r7, #32
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	2000005c 	.word	0x2000005c

08008bd0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b086      	sub	sp, #24
 8008bd4:	af02      	add	r7, sp, #8
 8008bd6:	60f8      	str	r0, [r7, #12]
 8008bd8:	60b9      	str	r1, [r7, #8]
 8008bda:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008be4:	d111      	bne.n	8008c0a <SPI_EndRxTransaction+0x3a>
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	689b      	ldr	r3, [r3, #8]
 8008bea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008bee:	d004      	beq.n	8008bfa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	689b      	ldr	r3, [r3, #8]
 8008bf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008bf8:	d107      	bne.n	8008c0a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008c08:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008c12:	d117      	bne.n	8008c44 <SPI_EndRxTransaction+0x74>
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	689b      	ldr	r3, [r3, #8]
 8008c18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c1c:	d112      	bne.n	8008c44 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	9300      	str	r3, [sp, #0]
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	2200      	movs	r2, #0
 8008c26:	2101      	movs	r1, #1
 8008c28:	68f8      	ldr	r0, [r7, #12]
 8008c2a:	f7ff ff49 	bl	8008ac0 <SPI_WaitFlagStateUntilTimeout>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d01a      	beq.n	8008c6a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c38:	f043 0220 	orr.w	r2, r3, #32
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008c40:	2303      	movs	r3, #3
 8008c42:	e013      	b.n	8008c6c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	9300      	str	r3, [sp, #0]
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	2180      	movs	r1, #128	@ 0x80
 8008c4e:	68f8      	ldr	r0, [r7, #12]
 8008c50:	f7ff ff36 	bl	8008ac0 <SPI_WaitFlagStateUntilTimeout>
 8008c54:	4603      	mov	r3, r0
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d007      	beq.n	8008c6a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c5e:	f043 0220 	orr.w	r2, r3, #32
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008c66:	2303      	movs	r3, #3
 8008c68:	e000      	b.n	8008c6c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8008c6a:	2300      	movs	r3, #0
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3710      	adds	r7, #16
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b086      	sub	sp, #24
 8008c78:	af02      	add	r7, sp, #8
 8008c7a:	60f8      	str	r0, [r7, #12]
 8008c7c:	60b9      	str	r1, [r7, #8]
 8008c7e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	9300      	str	r3, [sp, #0]
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	2201      	movs	r2, #1
 8008c88:	2102      	movs	r1, #2
 8008c8a:	68f8      	ldr	r0, [r7, #12]
 8008c8c:	f7ff ff18 	bl	8008ac0 <SPI_WaitFlagStateUntilTimeout>
 8008c90:	4603      	mov	r3, r0
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d007      	beq.n	8008ca6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c9a:	f043 0220 	orr.w	r2, r3, #32
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8008ca2:	2303      	movs	r3, #3
 8008ca4:	e013      	b.n	8008cce <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	9300      	str	r3, [sp, #0]
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	2200      	movs	r2, #0
 8008cae:	2180      	movs	r1, #128	@ 0x80
 8008cb0:	68f8      	ldr	r0, [r7, #12]
 8008cb2:	f7ff ff05 	bl	8008ac0 <SPI_WaitFlagStateUntilTimeout>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d007      	beq.n	8008ccc <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cc0:	f043 0220 	orr.w	r2, r3, #32
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8008cc8:	2303      	movs	r3, #3
 8008cca:	e000      	b.n	8008cce <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8008ccc:	2300      	movs	r3, #0
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3710      	adds	r7, #16
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}

08008cd6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008cd6:	b580      	push	{r7, lr}
 8008cd8:	b082      	sub	sp, #8
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d101      	bne.n	8008ce8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	e041      	b.n	8008d6c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008cee:	b2db      	uxtb	r3, r3
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d106      	bne.n	8008d02 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f7fb fded 	bl	80048dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2202      	movs	r2, #2
 8008d06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681a      	ldr	r2, [r3, #0]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	3304      	adds	r3, #4
 8008d12:	4619      	mov	r1, r3
 8008d14:	4610      	mov	r0, r2
 8008d16:	f000 f93f 	bl	8008f98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2201      	movs	r2, #1
 8008d26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2201      	movs	r2, #1
 8008d36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2201      	movs	r2, #1
 8008d46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2201      	movs	r2, #1
 8008d56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2201      	movs	r2, #1
 8008d66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008d6a:	2300      	movs	r3, #0
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3708      	adds	r7, #8
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b085      	sub	sp, #20
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d001      	beq.n	8008d8c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	e032      	b.n	8008df2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2202      	movs	r2, #2
 8008d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4a18      	ldr	r2, [pc, #96]	@ (8008dfc <HAL_TIM_Base_Start+0x88>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d00e      	beq.n	8008dbc <HAL_TIM_Base_Start+0x48>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008da6:	d009      	beq.n	8008dbc <HAL_TIM_Base_Start+0x48>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a14      	ldr	r2, [pc, #80]	@ (8008e00 <HAL_TIM_Base_Start+0x8c>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d004      	beq.n	8008dbc <HAL_TIM_Base_Start+0x48>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4a13      	ldr	r2, [pc, #76]	@ (8008e04 <HAL_TIM_Base_Start+0x90>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d111      	bne.n	8008de0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	f003 0307 	and.w	r3, r3, #7
 8008dc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2b06      	cmp	r3, #6
 8008dcc:	d010      	beq.n	8008df0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f042 0201 	orr.w	r2, r2, #1
 8008ddc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dde:	e007      	b.n	8008df0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	681a      	ldr	r2, [r3, #0]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f042 0201 	orr.w	r2, r2, #1
 8008dee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008df0:	2300      	movs	r3, #0
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3714      	adds	r7, #20
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bc80      	pop	{r7}
 8008dfa:	4770      	bx	lr
 8008dfc:	40012c00 	.word	0x40012c00
 8008e00:	40000400 	.word	0x40000400
 8008e04:	40000800 	.word	0x40000800

08008e08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008e12:	2300      	movs	r3, #0
 8008e14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d101      	bne.n	8008e24 <HAL_TIM_ConfigClockSource+0x1c>
 8008e20:	2302      	movs	r3, #2
 8008e22:	e0b4      	b.n	8008f8e <HAL_TIM_ConfigClockSource+0x186>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2201      	movs	r2, #1
 8008e28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2202      	movs	r2, #2
 8008e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	689b      	ldr	r3, [r3, #8]
 8008e3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008e42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008e4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	68ba      	ldr	r2, [r7, #8]
 8008e52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e5c:	d03e      	beq.n	8008edc <HAL_TIM_ConfigClockSource+0xd4>
 8008e5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e62:	f200 8087 	bhi.w	8008f74 <HAL_TIM_ConfigClockSource+0x16c>
 8008e66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e6a:	f000 8086 	beq.w	8008f7a <HAL_TIM_ConfigClockSource+0x172>
 8008e6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e72:	d87f      	bhi.n	8008f74 <HAL_TIM_ConfigClockSource+0x16c>
 8008e74:	2b70      	cmp	r3, #112	@ 0x70
 8008e76:	d01a      	beq.n	8008eae <HAL_TIM_ConfigClockSource+0xa6>
 8008e78:	2b70      	cmp	r3, #112	@ 0x70
 8008e7a:	d87b      	bhi.n	8008f74 <HAL_TIM_ConfigClockSource+0x16c>
 8008e7c:	2b60      	cmp	r3, #96	@ 0x60
 8008e7e:	d050      	beq.n	8008f22 <HAL_TIM_ConfigClockSource+0x11a>
 8008e80:	2b60      	cmp	r3, #96	@ 0x60
 8008e82:	d877      	bhi.n	8008f74 <HAL_TIM_ConfigClockSource+0x16c>
 8008e84:	2b50      	cmp	r3, #80	@ 0x50
 8008e86:	d03c      	beq.n	8008f02 <HAL_TIM_ConfigClockSource+0xfa>
 8008e88:	2b50      	cmp	r3, #80	@ 0x50
 8008e8a:	d873      	bhi.n	8008f74 <HAL_TIM_ConfigClockSource+0x16c>
 8008e8c:	2b40      	cmp	r3, #64	@ 0x40
 8008e8e:	d058      	beq.n	8008f42 <HAL_TIM_ConfigClockSource+0x13a>
 8008e90:	2b40      	cmp	r3, #64	@ 0x40
 8008e92:	d86f      	bhi.n	8008f74 <HAL_TIM_ConfigClockSource+0x16c>
 8008e94:	2b30      	cmp	r3, #48	@ 0x30
 8008e96:	d064      	beq.n	8008f62 <HAL_TIM_ConfigClockSource+0x15a>
 8008e98:	2b30      	cmp	r3, #48	@ 0x30
 8008e9a:	d86b      	bhi.n	8008f74 <HAL_TIM_ConfigClockSource+0x16c>
 8008e9c:	2b20      	cmp	r3, #32
 8008e9e:	d060      	beq.n	8008f62 <HAL_TIM_ConfigClockSource+0x15a>
 8008ea0:	2b20      	cmp	r3, #32
 8008ea2:	d867      	bhi.n	8008f74 <HAL_TIM_ConfigClockSource+0x16c>
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d05c      	beq.n	8008f62 <HAL_TIM_ConfigClockSource+0x15a>
 8008ea8:	2b10      	cmp	r3, #16
 8008eaa:	d05a      	beq.n	8008f62 <HAL_TIM_ConfigClockSource+0x15a>
 8008eac:	e062      	b.n	8008f74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008ebe:	f000 f950 	bl	8009162 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	689b      	ldr	r3, [r3, #8]
 8008ec8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008ed0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	68ba      	ldr	r2, [r7, #8]
 8008ed8:	609a      	str	r2, [r3, #8]
      break;
 8008eda:	e04f      	b.n	8008f7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008eec:	f000 f939 	bl	8009162 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	689a      	ldr	r2, [r3, #8]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008efe:	609a      	str	r2, [r3, #8]
      break;
 8008f00:	e03c      	b.n	8008f7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f0e:	461a      	mov	r2, r3
 8008f10:	f000 f8b0 	bl	8009074 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	2150      	movs	r1, #80	@ 0x50
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f000 f907 	bl	800912e <TIM_ITRx_SetConfig>
      break;
 8008f20:	e02c      	b.n	8008f7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008f2e:	461a      	mov	r2, r3
 8008f30:	f000 f8ce 	bl	80090d0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	2160      	movs	r1, #96	@ 0x60
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f000 f8f7 	bl	800912e <TIM_ITRx_SetConfig>
      break;
 8008f40:	e01c      	b.n	8008f7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f4e:	461a      	mov	r2, r3
 8008f50:	f000 f890 	bl	8009074 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	2140      	movs	r1, #64	@ 0x40
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f000 f8e7 	bl	800912e <TIM_ITRx_SetConfig>
      break;
 8008f60:	e00c      	b.n	8008f7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681a      	ldr	r2, [r3, #0]
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	4610      	mov	r0, r2
 8008f6e:	f000 f8de 	bl	800912e <TIM_ITRx_SetConfig>
      break;
 8008f72:	e003      	b.n	8008f7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008f74:	2301      	movs	r3, #1
 8008f76:	73fb      	strb	r3, [r7, #15]
      break;
 8008f78:	e000      	b.n	8008f7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008f7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2200      	movs	r2, #0
 8008f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3710      	adds	r7, #16
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
	...

08008f98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b085      	sub	sp, #20
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	4a2f      	ldr	r2, [pc, #188]	@ (8009068 <TIM_Base_SetConfig+0xd0>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d00b      	beq.n	8008fc8 <TIM_Base_SetConfig+0x30>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fb6:	d007      	beq.n	8008fc8 <TIM_Base_SetConfig+0x30>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	4a2c      	ldr	r2, [pc, #176]	@ (800906c <TIM_Base_SetConfig+0xd4>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d003      	beq.n	8008fc8 <TIM_Base_SetConfig+0x30>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	4a2b      	ldr	r2, [pc, #172]	@ (8009070 <TIM_Base_SetConfig+0xd8>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d108      	bne.n	8008fda <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	68fa      	ldr	r2, [r7, #12]
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	4a22      	ldr	r2, [pc, #136]	@ (8009068 <TIM_Base_SetConfig+0xd0>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d00b      	beq.n	8008ffa <TIM_Base_SetConfig+0x62>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fe8:	d007      	beq.n	8008ffa <TIM_Base_SetConfig+0x62>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	4a1f      	ldr	r2, [pc, #124]	@ (800906c <TIM_Base_SetConfig+0xd4>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d003      	beq.n	8008ffa <TIM_Base_SetConfig+0x62>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	4a1e      	ldr	r2, [pc, #120]	@ (8009070 <TIM_Base_SetConfig+0xd8>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d108      	bne.n	800900c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009000:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	68db      	ldr	r3, [r3, #12]
 8009006:	68fa      	ldr	r2, [r7, #12]
 8009008:	4313      	orrs	r3, r2
 800900a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	695b      	ldr	r3, [r3, #20]
 8009016:	4313      	orrs	r3, r2
 8009018:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	68fa      	ldr	r2, [r7, #12]
 800901e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	689a      	ldr	r2, [r3, #8]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	681a      	ldr	r2, [r3, #0]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	4a0d      	ldr	r2, [pc, #52]	@ (8009068 <TIM_Base_SetConfig+0xd0>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d103      	bne.n	8009040 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	691a      	ldr	r2, [r3, #16]
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2201      	movs	r2, #1
 8009044:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	691b      	ldr	r3, [r3, #16]
 800904a:	f003 0301 	and.w	r3, r3, #1
 800904e:	2b00      	cmp	r3, #0
 8009050:	d005      	beq.n	800905e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	691b      	ldr	r3, [r3, #16]
 8009056:	f023 0201 	bic.w	r2, r3, #1
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	611a      	str	r2, [r3, #16]
  }
}
 800905e:	bf00      	nop
 8009060:	3714      	adds	r7, #20
 8009062:	46bd      	mov	sp, r7
 8009064:	bc80      	pop	{r7}
 8009066:	4770      	bx	lr
 8009068:	40012c00 	.word	0x40012c00
 800906c:	40000400 	.word	0x40000400
 8009070:	40000800 	.word	0x40000800

08009074 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009074:	b480      	push	{r7}
 8009076:	b087      	sub	sp, #28
 8009078:	af00      	add	r7, sp, #0
 800907a:	60f8      	str	r0, [r7, #12]
 800907c:	60b9      	str	r1, [r7, #8]
 800907e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6a1b      	ldr	r3, [r3, #32]
 8009084:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	6a1b      	ldr	r3, [r3, #32]
 800908a:	f023 0201 	bic.w	r2, r3, #1
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	699b      	ldr	r3, [r3, #24]
 8009096:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800909e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	011b      	lsls	r3, r3, #4
 80090a4:	693a      	ldr	r2, [r7, #16]
 80090a6:	4313      	orrs	r3, r2
 80090a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	f023 030a 	bic.w	r3, r3, #10
 80090b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80090b2:	697a      	ldr	r2, [r7, #20]
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	4313      	orrs	r3, r2
 80090b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	693a      	ldr	r2, [r7, #16]
 80090be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	697a      	ldr	r2, [r7, #20]
 80090c4:	621a      	str	r2, [r3, #32]
}
 80090c6:	bf00      	nop
 80090c8:	371c      	adds	r7, #28
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bc80      	pop	{r7}
 80090ce:	4770      	bx	lr

080090d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b087      	sub	sp, #28
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	60f8      	str	r0, [r7, #12]
 80090d8:	60b9      	str	r1, [r7, #8]
 80090da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	6a1b      	ldr	r3, [r3, #32]
 80090e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	6a1b      	ldr	r3, [r3, #32]
 80090e6:	f023 0210 	bic.w	r2, r3, #16
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	699b      	ldr	r3, [r3, #24]
 80090f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80090fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	031b      	lsls	r3, r3, #12
 8009100:	693a      	ldr	r2, [r7, #16]
 8009102:	4313      	orrs	r3, r2
 8009104:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800910c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	011b      	lsls	r3, r3, #4
 8009112:	697a      	ldr	r2, [r7, #20]
 8009114:	4313      	orrs	r3, r2
 8009116:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	693a      	ldr	r2, [r7, #16]
 800911c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	697a      	ldr	r2, [r7, #20]
 8009122:	621a      	str	r2, [r3, #32]
}
 8009124:	bf00      	nop
 8009126:	371c      	adds	r7, #28
 8009128:	46bd      	mov	sp, r7
 800912a:	bc80      	pop	{r7}
 800912c:	4770      	bx	lr

0800912e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800912e:	b480      	push	{r7}
 8009130:	b085      	sub	sp, #20
 8009132:	af00      	add	r7, sp, #0
 8009134:	6078      	str	r0, [r7, #4]
 8009136:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	689b      	ldr	r3, [r3, #8]
 800913c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009144:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009146:	683a      	ldr	r2, [r7, #0]
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	4313      	orrs	r3, r2
 800914c:	f043 0307 	orr.w	r3, r3, #7
 8009150:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	68fa      	ldr	r2, [r7, #12]
 8009156:	609a      	str	r2, [r3, #8]
}
 8009158:	bf00      	nop
 800915a:	3714      	adds	r7, #20
 800915c:	46bd      	mov	sp, r7
 800915e:	bc80      	pop	{r7}
 8009160:	4770      	bx	lr

08009162 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009162:	b480      	push	{r7}
 8009164:	b087      	sub	sp, #28
 8009166:	af00      	add	r7, sp, #0
 8009168:	60f8      	str	r0, [r7, #12]
 800916a:	60b9      	str	r1, [r7, #8]
 800916c:	607a      	str	r2, [r7, #4]
 800916e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800917c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	021a      	lsls	r2, r3, #8
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	431a      	orrs	r2, r3
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	4313      	orrs	r3, r2
 800918a:	697a      	ldr	r2, [r7, #20]
 800918c:	4313      	orrs	r3, r2
 800918e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	697a      	ldr	r2, [r7, #20]
 8009194:	609a      	str	r2, [r3, #8]
}
 8009196:	bf00      	nop
 8009198:	371c      	adds	r7, #28
 800919a:	46bd      	mov	sp, r7
 800919c:	bc80      	pop	{r7}
 800919e:	4770      	bx	lr

080091a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b085      	sub	sp, #20
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	d101      	bne.n	80091b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80091b4:	2302      	movs	r3, #2
 80091b6:	e046      	b.n	8009246 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2201      	movs	r2, #1
 80091bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2202      	movs	r2, #2
 80091c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	689b      	ldr	r3, [r3, #8]
 80091d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	68fa      	ldr	r2, [r7, #12]
 80091e6:	4313      	orrs	r3, r2
 80091e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	68fa      	ldr	r2, [r7, #12]
 80091f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4a16      	ldr	r2, [pc, #88]	@ (8009250 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d00e      	beq.n	800921a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009204:	d009      	beq.n	800921a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4a12      	ldr	r2, [pc, #72]	@ (8009254 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d004      	beq.n	800921a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a10      	ldr	r2, [pc, #64]	@ (8009258 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d10c      	bne.n	8009234 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009220:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	68ba      	ldr	r2, [r7, #8]
 8009228:	4313      	orrs	r3, r2
 800922a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	68ba      	ldr	r2, [r7, #8]
 8009232:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2201      	movs	r2, #1
 8009238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2200      	movs	r2, #0
 8009240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009244:	2300      	movs	r3, #0
}
 8009246:	4618      	mov	r0, r3
 8009248:	3714      	adds	r7, #20
 800924a:	46bd      	mov	sp, r7
 800924c:	bc80      	pop	{r7}
 800924e:	4770      	bx	lr
 8009250:	40012c00 	.word	0x40012c00
 8009254:	40000400 	.word	0x40000400
 8009258:	40000800 	.word	0x40000800

0800925c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b082      	sub	sp, #8
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d101      	bne.n	800926e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800926a:	2301      	movs	r3, #1
 800926c:	e042      	b.n	80092f4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009274:	b2db      	uxtb	r3, r3
 8009276:	2b00      	cmp	r3, #0
 8009278:	d106      	bne.n	8009288 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2200      	movs	r2, #0
 800927e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f7fb fb48 	bl	8004918 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2224      	movs	r2, #36	@ 0x24
 800928c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	68da      	ldr	r2, [r3, #12]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800929e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f000 f9cf 	bl	8009644 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	691a      	ldr	r2, [r3, #16]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80092b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	695a      	ldr	r2, [r3, #20]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80092c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	68da      	ldr	r2, [r3, #12]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80092d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2200      	movs	r2, #0
 80092da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2220      	movs	r2, #32
 80092e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2220      	movs	r2, #32
 80092e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2200      	movs	r2, #0
 80092f0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80092f2:	2300      	movs	r3, #0
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3708      	adds	r7, #8
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b08a      	sub	sp, #40	@ 0x28
 8009300:	af02      	add	r7, sp, #8
 8009302:	60f8      	str	r0, [r7, #12]
 8009304:	60b9      	str	r1, [r7, #8]
 8009306:	603b      	str	r3, [r7, #0]
 8009308:	4613      	mov	r3, r2
 800930a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800930c:	2300      	movs	r3, #0
 800930e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009316:	b2db      	uxtb	r3, r3
 8009318:	2b20      	cmp	r3, #32
 800931a:	d175      	bne.n	8009408 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d002      	beq.n	8009328 <HAL_UART_Transmit+0x2c>
 8009322:	88fb      	ldrh	r3, [r7, #6]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d101      	bne.n	800932c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009328:	2301      	movs	r3, #1
 800932a:	e06e      	b.n	800940a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2200      	movs	r2, #0
 8009330:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2221      	movs	r2, #33	@ 0x21
 8009336:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800933a:	f7fb fd93 	bl	8004e64 <HAL_GetTick>
 800933e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	88fa      	ldrh	r2, [r7, #6]
 8009344:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	88fa      	ldrh	r2, [r7, #6]
 800934a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	689b      	ldr	r3, [r3, #8]
 8009350:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009354:	d108      	bne.n	8009368 <HAL_UART_Transmit+0x6c>
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	691b      	ldr	r3, [r3, #16]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d104      	bne.n	8009368 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800935e:	2300      	movs	r3, #0
 8009360:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	61bb      	str	r3, [r7, #24]
 8009366:	e003      	b.n	8009370 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800936c:	2300      	movs	r3, #0
 800936e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009370:	e02e      	b.n	80093d0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	9300      	str	r3, [sp, #0]
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	2200      	movs	r2, #0
 800937a:	2180      	movs	r1, #128	@ 0x80
 800937c:	68f8      	ldr	r0, [r7, #12]
 800937e:	f000 f86d 	bl	800945c <UART_WaitOnFlagUntilTimeout>
 8009382:	4603      	mov	r3, r0
 8009384:	2b00      	cmp	r3, #0
 8009386:	d005      	beq.n	8009394 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2220      	movs	r2, #32
 800938c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009390:	2303      	movs	r3, #3
 8009392:	e03a      	b.n	800940a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009394:	69fb      	ldr	r3, [r7, #28]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d10b      	bne.n	80093b2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800939a:	69bb      	ldr	r3, [r7, #24]
 800939c:	881b      	ldrh	r3, [r3, #0]
 800939e:	461a      	mov	r2, r3
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80093a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80093aa:	69bb      	ldr	r3, [r7, #24]
 80093ac:	3302      	adds	r3, #2
 80093ae:	61bb      	str	r3, [r7, #24]
 80093b0:	e007      	b.n	80093c2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80093b2:	69fb      	ldr	r3, [r7, #28]
 80093b4:	781a      	ldrb	r2, [r3, #0]
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80093bc:	69fb      	ldr	r3, [r7, #28]
 80093be:	3301      	adds	r3, #1
 80093c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	3b01      	subs	r3, #1
 80093ca:	b29a      	uxth	r2, r3
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80093d4:	b29b      	uxth	r3, r3
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d1cb      	bne.n	8009372 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	9300      	str	r3, [sp, #0]
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	2200      	movs	r2, #0
 80093e2:	2140      	movs	r1, #64	@ 0x40
 80093e4:	68f8      	ldr	r0, [r7, #12]
 80093e6:	f000 f839 	bl	800945c <UART_WaitOnFlagUntilTimeout>
 80093ea:	4603      	mov	r3, r0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d005      	beq.n	80093fc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2220      	movs	r2, #32
 80093f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80093f8:	2303      	movs	r3, #3
 80093fa:	e006      	b.n	800940a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2220      	movs	r2, #32
 8009400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009404:	2300      	movs	r3, #0
 8009406:	e000      	b.n	800940a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009408:	2302      	movs	r3, #2
  }
}
 800940a:	4618      	mov	r0, r3
 800940c:	3720      	adds	r7, #32
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}

08009412 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009412:	b580      	push	{r7, lr}
 8009414:	b084      	sub	sp, #16
 8009416:	af00      	add	r7, sp, #0
 8009418:	60f8      	str	r0, [r7, #12]
 800941a:	60b9      	str	r1, [r7, #8]
 800941c:	4613      	mov	r3, r2
 800941e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009426:	b2db      	uxtb	r3, r3
 8009428:	2b20      	cmp	r3, #32
 800942a:	d112      	bne.n	8009452 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d002      	beq.n	8009438 <HAL_UART_Receive_IT+0x26>
 8009432:	88fb      	ldrh	r3, [r7, #6]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d101      	bne.n	800943c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009438:	2301      	movs	r3, #1
 800943a:	e00b      	b.n	8009454 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2200      	movs	r2, #0
 8009440:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009442:	88fb      	ldrh	r3, [r7, #6]
 8009444:	461a      	mov	r2, r3
 8009446:	68b9      	ldr	r1, [r7, #8]
 8009448:	68f8      	ldr	r0, [r7, #12]
 800944a:	f000 f860 	bl	800950e <UART_Start_Receive_IT>
 800944e:	4603      	mov	r3, r0
 8009450:	e000      	b.n	8009454 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8009452:	2302      	movs	r3, #2
  }
}
 8009454:	4618      	mov	r0, r3
 8009456:	3710      	adds	r7, #16
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b086      	sub	sp, #24
 8009460:	af00      	add	r7, sp, #0
 8009462:	60f8      	str	r0, [r7, #12]
 8009464:	60b9      	str	r1, [r7, #8]
 8009466:	603b      	str	r3, [r7, #0]
 8009468:	4613      	mov	r3, r2
 800946a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800946c:	e03b      	b.n	80094e6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800946e:	6a3b      	ldr	r3, [r7, #32]
 8009470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009474:	d037      	beq.n	80094e6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009476:	f7fb fcf5 	bl	8004e64 <HAL_GetTick>
 800947a:	4602      	mov	r2, r0
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	1ad3      	subs	r3, r2, r3
 8009480:	6a3a      	ldr	r2, [r7, #32]
 8009482:	429a      	cmp	r2, r3
 8009484:	d302      	bcc.n	800948c <UART_WaitOnFlagUntilTimeout+0x30>
 8009486:	6a3b      	ldr	r3, [r7, #32]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d101      	bne.n	8009490 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800948c:	2303      	movs	r3, #3
 800948e:	e03a      	b.n	8009506 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	68db      	ldr	r3, [r3, #12]
 8009496:	f003 0304 	and.w	r3, r3, #4
 800949a:	2b00      	cmp	r3, #0
 800949c:	d023      	beq.n	80094e6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	2b80      	cmp	r3, #128	@ 0x80
 80094a2:	d020      	beq.n	80094e6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	2b40      	cmp	r3, #64	@ 0x40
 80094a8:	d01d      	beq.n	80094e6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f003 0308 	and.w	r3, r3, #8
 80094b4:	2b08      	cmp	r3, #8
 80094b6:	d116      	bne.n	80094e6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80094b8:	2300      	movs	r3, #0
 80094ba:	617b      	str	r3, [r7, #20]
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	617b      	str	r3, [r7, #20]
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	617b      	str	r3, [r7, #20]
 80094cc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80094ce:	68f8      	ldr	r0, [r7, #12]
 80094d0:	f000 f856 	bl	8009580 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2208      	movs	r2, #8
 80094d8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2200      	movs	r2, #0
 80094de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80094e2:	2301      	movs	r3, #1
 80094e4:	e00f      	b.n	8009506 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	4013      	ands	r3, r2
 80094f0:	68ba      	ldr	r2, [r7, #8]
 80094f2:	429a      	cmp	r2, r3
 80094f4:	bf0c      	ite	eq
 80094f6:	2301      	moveq	r3, #1
 80094f8:	2300      	movne	r3, #0
 80094fa:	b2db      	uxtb	r3, r3
 80094fc:	461a      	mov	r2, r3
 80094fe:	79fb      	ldrb	r3, [r7, #7]
 8009500:	429a      	cmp	r2, r3
 8009502:	d0b4      	beq.n	800946e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009504:	2300      	movs	r3, #0
}
 8009506:	4618      	mov	r0, r3
 8009508:	3718      	adds	r7, #24
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}

0800950e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800950e:	b480      	push	{r7}
 8009510:	b085      	sub	sp, #20
 8009512:	af00      	add	r7, sp, #0
 8009514:	60f8      	str	r0, [r7, #12]
 8009516:	60b9      	str	r1, [r7, #8]
 8009518:	4613      	mov	r3, r2
 800951a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	68ba      	ldr	r2, [r7, #8]
 8009520:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	88fa      	ldrh	r2, [r7, #6]
 8009526:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	88fa      	ldrh	r2, [r7, #6]
 800952c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2200      	movs	r2, #0
 8009532:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2222      	movs	r2, #34	@ 0x22
 8009538:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	691b      	ldr	r3, [r3, #16]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d007      	beq.n	8009554 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	68da      	ldr	r2, [r3, #12]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009552:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	695a      	ldr	r2, [r3, #20]
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f042 0201 	orr.w	r2, r2, #1
 8009562:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	68da      	ldr	r2, [r3, #12]
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f042 0220 	orr.w	r2, r2, #32
 8009572:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009574:	2300      	movs	r3, #0
}
 8009576:	4618      	mov	r0, r3
 8009578:	3714      	adds	r7, #20
 800957a:	46bd      	mov	sp, r7
 800957c:	bc80      	pop	{r7}
 800957e:	4770      	bx	lr

08009580 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009580:	b480      	push	{r7}
 8009582:	b095      	sub	sp, #84	@ 0x54
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	330c      	adds	r3, #12
 800958e:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009590:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009592:	e853 3f00 	ldrex	r3, [r3]
 8009596:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800959a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800959e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	330c      	adds	r3, #12
 80095a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80095a8:	643a      	str	r2, [r7, #64]	@ 0x40
 80095aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80095ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80095b0:	e841 2300 	strex	r3, r2, [r1]
 80095b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80095b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d1e5      	bne.n	8009588 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	3314      	adds	r3, #20
 80095c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c4:	6a3b      	ldr	r3, [r7, #32]
 80095c6:	e853 3f00 	ldrex	r3, [r3]
 80095ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80095cc:	69fb      	ldr	r3, [r7, #28]
 80095ce:	f023 0301 	bic.w	r3, r3, #1
 80095d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	3314      	adds	r3, #20
 80095da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80095dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80095de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80095e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80095e4:	e841 2300 	strex	r3, r2, [r1]
 80095e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80095ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d1e5      	bne.n	80095bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	d119      	bne.n	800962c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	330c      	adds	r3, #12
 80095fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	e853 3f00 	ldrex	r3, [r3]
 8009606:	60bb      	str	r3, [r7, #8]
   return(result);
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	f023 0310 	bic.w	r3, r3, #16
 800960e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	330c      	adds	r3, #12
 8009616:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009618:	61ba      	str	r2, [r7, #24]
 800961a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800961c:	6979      	ldr	r1, [r7, #20]
 800961e:	69ba      	ldr	r2, [r7, #24]
 8009620:	e841 2300 	strex	r3, r2, [r1]
 8009624:	613b      	str	r3, [r7, #16]
   return(result);
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d1e5      	bne.n	80095f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2220      	movs	r2, #32
 8009630:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2200      	movs	r2, #0
 8009638:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800963a:	bf00      	nop
 800963c:	3754      	adds	r7, #84	@ 0x54
 800963e:	46bd      	mov	sp, r7
 8009640:	bc80      	pop	{r7}
 8009642:	4770      	bx	lr

08009644 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b084      	sub	sp, #16
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	691b      	ldr	r3, [r3, #16]
 8009652:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	68da      	ldr	r2, [r3, #12]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	430a      	orrs	r2, r1
 8009660:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	689a      	ldr	r2, [r3, #8]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	691b      	ldr	r3, [r3, #16]
 800966a:	431a      	orrs	r2, r3
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	695b      	ldr	r3, [r3, #20]
 8009670:	4313      	orrs	r3, r2
 8009672:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	68db      	ldr	r3, [r3, #12]
 800967a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800967e:	f023 030c 	bic.w	r3, r3, #12
 8009682:	687a      	ldr	r2, [r7, #4]
 8009684:	6812      	ldr	r2, [r2, #0]
 8009686:	68b9      	ldr	r1, [r7, #8]
 8009688:	430b      	orrs	r3, r1
 800968a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	695b      	ldr	r3, [r3, #20]
 8009692:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	699a      	ldr	r2, [r3, #24]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	430a      	orrs	r2, r1
 80096a0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4a2c      	ldr	r2, [pc, #176]	@ (8009758 <UART_SetConfig+0x114>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d103      	bne.n	80096b4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80096ac:	f7fe fbac 	bl	8007e08 <HAL_RCC_GetPCLK2Freq>
 80096b0:	60f8      	str	r0, [r7, #12]
 80096b2:	e002      	b.n	80096ba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80096b4:	f7fe fb94 	bl	8007de0 <HAL_RCC_GetPCLK1Freq>
 80096b8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80096ba:	68fa      	ldr	r2, [r7, #12]
 80096bc:	4613      	mov	r3, r2
 80096be:	009b      	lsls	r3, r3, #2
 80096c0:	4413      	add	r3, r2
 80096c2:	009a      	lsls	r2, r3, #2
 80096c4:	441a      	add	r2, r3
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	009b      	lsls	r3, r3, #2
 80096cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80096d0:	4a22      	ldr	r2, [pc, #136]	@ (800975c <UART_SetConfig+0x118>)
 80096d2:	fba2 2303 	umull	r2, r3, r2, r3
 80096d6:	095b      	lsrs	r3, r3, #5
 80096d8:	0119      	lsls	r1, r3, #4
 80096da:	68fa      	ldr	r2, [r7, #12]
 80096dc:	4613      	mov	r3, r2
 80096de:	009b      	lsls	r3, r3, #2
 80096e0:	4413      	add	r3, r2
 80096e2:	009a      	lsls	r2, r3, #2
 80096e4:	441a      	add	r2, r3
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	685b      	ldr	r3, [r3, #4]
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80096f0:	4b1a      	ldr	r3, [pc, #104]	@ (800975c <UART_SetConfig+0x118>)
 80096f2:	fba3 0302 	umull	r0, r3, r3, r2
 80096f6:	095b      	lsrs	r3, r3, #5
 80096f8:	2064      	movs	r0, #100	@ 0x64
 80096fa:	fb00 f303 	mul.w	r3, r0, r3
 80096fe:	1ad3      	subs	r3, r2, r3
 8009700:	011b      	lsls	r3, r3, #4
 8009702:	3332      	adds	r3, #50	@ 0x32
 8009704:	4a15      	ldr	r2, [pc, #84]	@ (800975c <UART_SetConfig+0x118>)
 8009706:	fba2 2303 	umull	r2, r3, r2, r3
 800970a:	095b      	lsrs	r3, r3, #5
 800970c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009710:	4419      	add	r1, r3
 8009712:	68fa      	ldr	r2, [r7, #12]
 8009714:	4613      	mov	r3, r2
 8009716:	009b      	lsls	r3, r3, #2
 8009718:	4413      	add	r3, r2
 800971a:	009a      	lsls	r2, r3, #2
 800971c:	441a      	add	r2, r3
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	009b      	lsls	r3, r3, #2
 8009724:	fbb2 f2f3 	udiv	r2, r2, r3
 8009728:	4b0c      	ldr	r3, [pc, #48]	@ (800975c <UART_SetConfig+0x118>)
 800972a:	fba3 0302 	umull	r0, r3, r3, r2
 800972e:	095b      	lsrs	r3, r3, #5
 8009730:	2064      	movs	r0, #100	@ 0x64
 8009732:	fb00 f303 	mul.w	r3, r0, r3
 8009736:	1ad3      	subs	r3, r2, r3
 8009738:	011b      	lsls	r3, r3, #4
 800973a:	3332      	adds	r3, #50	@ 0x32
 800973c:	4a07      	ldr	r2, [pc, #28]	@ (800975c <UART_SetConfig+0x118>)
 800973e:	fba2 2303 	umull	r2, r3, r2, r3
 8009742:	095b      	lsrs	r3, r3, #5
 8009744:	f003 020f 	and.w	r2, r3, #15
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	440a      	add	r2, r1
 800974e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009750:	bf00      	nop
 8009752:	3710      	adds	r7, #16
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}
 8009758:	40013800 	.word	0x40013800
 800975c:	51eb851f 	.word	0x51eb851f

08009760 <__cvt>:
 8009760:	2b00      	cmp	r3, #0
 8009762:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009766:	461d      	mov	r5, r3
 8009768:	bfbb      	ittet	lt
 800976a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800976e:	461d      	movlt	r5, r3
 8009770:	2300      	movge	r3, #0
 8009772:	232d      	movlt	r3, #45	@ 0x2d
 8009774:	b088      	sub	sp, #32
 8009776:	4614      	mov	r4, r2
 8009778:	bfb8      	it	lt
 800977a:	4614      	movlt	r4, r2
 800977c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800977e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8009780:	7013      	strb	r3, [r2, #0]
 8009782:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009784:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8009788:	f023 0820 	bic.w	r8, r3, #32
 800978c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009790:	d005      	beq.n	800979e <__cvt+0x3e>
 8009792:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009796:	d100      	bne.n	800979a <__cvt+0x3a>
 8009798:	3601      	adds	r6, #1
 800979a:	2302      	movs	r3, #2
 800979c:	e000      	b.n	80097a0 <__cvt+0x40>
 800979e:	2303      	movs	r3, #3
 80097a0:	aa07      	add	r2, sp, #28
 80097a2:	9204      	str	r2, [sp, #16]
 80097a4:	aa06      	add	r2, sp, #24
 80097a6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80097aa:	e9cd 3600 	strd	r3, r6, [sp]
 80097ae:	4622      	mov	r2, r4
 80097b0:	462b      	mov	r3, r5
 80097b2:	f000 ff99 	bl	800a6e8 <_dtoa_r>
 80097b6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80097ba:	4607      	mov	r7, r0
 80097bc:	d119      	bne.n	80097f2 <__cvt+0x92>
 80097be:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80097c0:	07db      	lsls	r3, r3, #31
 80097c2:	d50e      	bpl.n	80097e2 <__cvt+0x82>
 80097c4:	eb00 0906 	add.w	r9, r0, r6
 80097c8:	2200      	movs	r2, #0
 80097ca:	2300      	movs	r3, #0
 80097cc:	4620      	mov	r0, r4
 80097ce:	4629      	mov	r1, r5
 80097d0:	f7f7 f8f4 	bl	80009bc <__aeabi_dcmpeq>
 80097d4:	b108      	cbz	r0, 80097da <__cvt+0x7a>
 80097d6:	f8cd 901c 	str.w	r9, [sp, #28]
 80097da:	2230      	movs	r2, #48	@ 0x30
 80097dc:	9b07      	ldr	r3, [sp, #28]
 80097de:	454b      	cmp	r3, r9
 80097e0:	d31e      	bcc.n	8009820 <__cvt+0xc0>
 80097e2:	4638      	mov	r0, r7
 80097e4:	9b07      	ldr	r3, [sp, #28]
 80097e6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80097e8:	1bdb      	subs	r3, r3, r7
 80097ea:	6013      	str	r3, [r2, #0]
 80097ec:	b008      	add	sp, #32
 80097ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097f2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80097f6:	eb00 0906 	add.w	r9, r0, r6
 80097fa:	d1e5      	bne.n	80097c8 <__cvt+0x68>
 80097fc:	7803      	ldrb	r3, [r0, #0]
 80097fe:	2b30      	cmp	r3, #48	@ 0x30
 8009800:	d10a      	bne.n	8009818 <__cvt+0xb8>
 8009802:	2200      	movs	r2, #0
 8009804:	2300      	movs	r3, #0
 8009806:	4620      	mov	r0, r4
 8009808:	4629      	mov	r1, r5
 800980a:	f7f7 f8d7 	bl	80009bc <__aeabi_dcmpeq>
 800980e:	b918      	cbnz	r0, 8009818 <__cvt+0xb8>
 8009810:	f1c6 0601 	rsb	r6, r6, #1
 8009814:	f8ca 6000 	str.w	r6, [sl]
 8009818:	f8da 3000 	ldr.w	r3, [sl]
 800981c:	4499      	add	r9, r3
 800981e:	e7d3      	b.n	80097c8 <__cvt+0x68>
 8009820:	1c59      	adds	r1, r3, #1
 8009822:	9107      	str	r1, [sp, #28]
 8009824:	701a      	strb	r2, [r3, #0]
 8009826:	e7d9      	b.n	80097dc <__cvt+0x7c>

08009828 <__exponent>:
 8009828:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800982a:	2900      	cmp	r1, #0
 800982c:	bfb6      	itet	lt
 800982e:	232d      	movlt	r3, #45	@ 0x2d
 8009830:	232b      	movge	r3, #43	@ 0x2b
 8009832:	4249      	neglt	r1, r1
 8009834:	2909      	cmp	r1, #9
 8009836:	7002      	strb	r2, [r0, #0]
 8009838:	7043      	strb	r3, [r0, #1]
 800983a:	dd29      	ble.n	8009890 <__exponent+0x68>
 800983c:	f10d 0307 	add.w	r3, sp, #7
 8009840:	461d      	mov	r5, r3
 8009842:	270a      	movs	r7, #10
 8009844:	fbb1 f6f7 	udiv	r6, r1, r7
 8009848:	461a      	mov	r2, r3
 800984a:	fb07 1416 	mls	r4, r7, r6, r1
 800984e:	3430      	adds	r4, #48	@ 0x30
 8009850:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009854:	460c      	mov	r4, r1
 8009856:	2c63      	cmp	r4, #99	@ 0x63
 8009858:	4631      	mov	r1, r6
 800985a:	f103 33ff 	add.w	r3, r3, #4294967295
 800985e:	dcf1      	bgt.n	8009844 <__exponent+0x1c>
 8009860:	3130      	adds	r1, #48	@ 0x30
 8009862:	1e94      	subs	r4, r2, #2
 8009864:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009868:	4623      	mov	r3, r4
 800986a:	1c41      	adds	r1, r0, #1
 800986c:	42ab      	cmp	r3, r5
 800986e:	d30a      	bcc.n	8009886 <__exponent+0x5e>
 8009870:	f10d 0309 	add.w	r3, sp, #9
 8009874:	1a9b      	subs	r3, r3, r2
 8009876:	42ac      	cmp	r4, r5
 8009878:	bf88      	it	hi
 800987a:	2300      	movhi	r3, #0
 800987c:	3302      	adds	r3, #2
 800987e:	4403      	add	r3, r0
 8009880:	1a18      	subs	r0, r3, r0
 8009882:	b003      	add	sp, #12
 8009884:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009886:	f813 6b01 	ldrb.w	r6, [r3], #1
 800988a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800988e:	e7ed      	b.n	800986c <__exponent+0x44>
 8009890:	2330      	movs	r3, #48	@ 0x30
 8009892:	3130      	adds	r1, #48	@ 0x30
 8009894:	7083      	strb	r3, [r0, #2]
 8009896:	70c1      	strb	r1, [r0, #3]
 8009898:	1d03      	adds	r3, r0, #4
 800989a:	e7f1      	b.n	8009880 <__exponent+0x58>

0800989c <_printf_float>:
 800989c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098a0:	b091      	sub	sp, #68	@ 0x44
 80098a2:	460c      	mov	r4, r1
 80098a4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80098a8:	4616      	mov	r6, r2
 80098aa:	461f      	mov	r7, r3
 80098ac:	4605      	mov	r5, r0
 80098ae:	f000 fe0d 	bl	800a4cc <_localeconv_r>
 80098b2:	6803      	ldr	r3, [r0, #0]
 80098b4:	4618      	mov	r0, r3
 80098b6:	9308      	str	r3, [sp, #32]
 80098b8:	f7f6 fc54 	bl	8000164 <strlen>
 80098bc:	2300      	movs	r3, #0
 80098be:	930e      	str	r3, [sp, #56]	@ 0x38
 80098c0:	f8d8 3000 	ldr.w	r3, [r8]
 80098c4:	9009      	str	r0, [sp, #36]	@ 0x24
 80098c6:	3307      	adds	r3, #7
 80098c8:	f023 0307 	bic.w	r3, r3, #7
 80098cc:	f103 0208 	add.w	r2, r3, #8
 80098d0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80098d4:	f8d4 b000 	ldr.w	fp, [r4]
 80098d8:	f8c8 2000 	str.w	r2, [r8]
 80098dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80098e0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80098e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80098e6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80098ea:	f04f 32ff 	mov.w	r2, #4294967295
 80098ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80098f2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80098f6:	4b9c      	ldr	r3, [pc, #624]	@ (8009b68 <_printf_float+0x2cc>)
 80098f8:	f7f7 f892 	bl	8000a20 <__aeabi_dcmpun>
 80098fc:	bb70      	cbnz	r0, 800995c <_printf_float+0xc0>
 80098fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009902:	f04f 32ff 	mov.w	r2, #4294967295
 8009906:	4b98      	ldr	r3, [pc, #608]	@ (8009b68 <_printf_float+0x2cc>)
 8009908:	f7f7 f86c 	bl	80009e4 <__aeabi_dcmple>
 800990c:	bb30      	cbnz	r0, 800995c <_printf_float+0xc0>
 800990e:	2200      	movs	r2, #0
 8009910:	2300      	movs	r3, #0
 8009912:	4640      	mov	r0, r8
 8009914:	4649      	mov	r1, r9
 8009916:	f7f7 f85b 	bl	80009d0 <__aeabi_dcmplt>
 800991a:	b110      	cbz	r0, 8009922 <_printf_float+0x86>
 800991c:	232d      	movs	r3, #45	@ 0x2d
 800991e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009922:	4a92      	ldr	r2, [pc, #584]	@ (8009b6c <_printf_float+0x2d0>)
 8009924:	4b92      	ldr	r3, [pc, #584]	@ (8009b70 <_printf_float+0x2d4>)
 8009926:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800992a:	bf8c      	ite	hi
 800992c:	4690      	movhi	r8, r2
 800992e:	4698      	movls	r8, r3
 8009930:	2303      	movs	r3, #3
 8009932:	f04f 0900 	mov.w	r9, #0
 8009936:	6123      	str	r3, [r4, #16]
 8009938:	f02b 0304 	bic.w	r3, fp, #4
 800993c:	6023      	str	r3, [r4, #0]
 800993e:	4633      	mov	r3, r6
 8009940:	4621      	mov	r1, r4
 8009942:	4628      	mov	r0, r5
 8009944:	9700      	str	r7, [sp, #0]
 8009946:	aa0f      	add	r2, sp, #60	@ 0x3c
 8009948:	f000 f9d4 	bl	8009cf4 <_printf_common>
 800994c:	3001      	adds	r0, #1
 800994e:	f040 8090 	bne.w	8009a72 <_printf_float+0x1d6>
 8009952:	f04f 30ff 	mov.w	r0, #4294967295
 8009956:	b011      	add	sp, #68	@ 0x44
 8009958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800995c:	4642      	mov	r2, r8
 800995e:	464b      	mov	r3, r9
 8009960:	4640      	mov	r0, r8
 8009962:	4649      	mov	r1, r9
 8009964:	f7f7 f85c 	bl	8000a20 <__aeabi_dcmpun>
 8009968:	b148      	cbz	r0, 800997e <_printf_float+0xe2>
 800996a:	464b      	mov	r3, r9
 800996c:	2b00      	cmp	r3, #0
 800996e:	bfb8      	it	lt
 8009970:	232d      	movlt	r3, #45	@ 0x2d
 8009972:	4a80      	ldr	r2, [pc, #512]	@ (8009b74 <_printf_float+0x2d8>)
 8009974:	bfb8      	it	lt
 8009976:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800997a:	4b7f      	ldr	r3, [pc, #508]	@ (8009b78 <_printf_float+0x2dc>)
 800997c:	e7d3      	b.n	8009926 <_printf_float+0x8a>
 800997e:	6863      	ldr	r3, [r4, #4]
 8009980:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8009984:	1c5a      	adds	r2, r3, #1
 8009986:	d13f      	bne.n	8009a08 <_printf_float+0x16c>
 8009988:	2306      	movs	r3, #6
 800998a:	6063      	str	r3, [r4, #4]
 800998c:	2200      	movs	r2, #0
 800998e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8009992:	6023      	str	r3, [r4, #0]
 8009994:	9206      	str	r2, [sp, #24]
 8009996:	aa0e      	add	r2, sp, #56	@ 0x38
 8009998:	e9cd a204 	strd	sl, r2, [sp, #16]
 800999c:	aa0d      	add	r2, sp, #52	@ 0x34
 800999e:	9203      	str	r2, [sp, #12]
 80099a0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80099a4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80099a8:	6863      	ldr	r3, [r4, #4]
 80099aa:	4642      	mov	r2, r8
 80099ac:	9300      	str	r3, [sp, #0]
 80099ae:	4628      	mov	r0, r5
 80099b0:	464b      	mov	r3, r9
 80099b2:	910a      	str	r1, [sp, #40]	@ 0x28
 80099b4:	f7ff fed4 	bl	8009760 <__cvt>
 80099b8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80099ba:	4680      	mov	r8, r0
 80099bc:	2947      	cmp	r1, #71	@ 0x47
 80099be:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80099c0:	d128      	bne.n	8009a14 <_printf_float+0x178>
 80099c2:	1cc8      	adds	r0, r1, #3
 80099c4:	db02      	blt.n	80099cc <_printf_float+0x130>
 80099c6:	6863      	ldr	r3, [r4, #4]
 80099c8:	4299      	cmp	r1, r3
 80099ca:	dd40      	ble.n	8009a4e <_printf_float+0x1b2>
 80099cc:	f1aa 0a02 	sub.w	sl, sl, #2
 80099d0:	fa5f fa8a 	uxtb.w	sl, sl
 80099d4:	4652      	mov	r2, sl
 80099d6:	3901      	subs	r1, #1
 80099d8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80099dc:	910d      	str	r1, [sp, #52]	@ 0x34
 80099de:	f7ff ff23 	bl	8009828 <__exponent>
 80099e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80099e4:	4681      	mov	r9, r0
 80099e6:	1813      	adds	r3, r2, r0
 80099e8:	2a01      	cmp	r2, #1
 80099ea:	6123      	str	r3, [r4, #16]
 80099ec:	dc02      	bgt.n	80099f4 <_printf_float+0x158>
 80099ee:	6822      	ldr	r2, [r4, #0]
 80099f0:	07d2      	lsls	r2, r2, #31
 80099f2:	d501      	bpl.n	80099f8 <_printf_float+0x15c>
 80099f4:	3301      	adds	r3, #1
 80099f6:	6123      	str	r3, [r4, #16]
 80099f8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d09e      	beq.n	800993e <_printf_float+0xa2>
 8009a00:	232d      	movs	r3, #45	@ 0x2d
 8009a02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a06:	e79a      	b.n	800993e <_printf_float+0xa2>
 8009a08:	2947      	cmp	r1, #71	@ 0x47
 8009a0a:	d1bf      	bne.n	800998c <_printf_float+0xf0>
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d1bd      	bne.n	800998c <_printf_float+0xf0>
 8009a10:	2301      	movs	r3, #1
 8009a12:	e7ba      	b.n	800998a <_printf_float+0xee>
 8009a14:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009a18:	d9dc      	bls.n	80099d4 <_printf_float+0x138>
 8009a1a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009a1e:	d118      	bne.n	8009a52 <_printf_float+0x1b6>
 8009a20:	2900      	cmp	r1, #0
 8009a22:	6863      	ldr	r3, [r4, #4]
 8009a24:	dd0b      	ble.n	8009a3e <_printf_float+0x1a2>
 8009a26:	6121      	str	r1, [r4, #16]
 8009a28:	b913      	cbnz	r3, 8009a30 <_printf_float+0x194>
 8009a2a:	6822      	ldr	r2, [r4, #0]
 8009a2c:	07d0      	lsls	r0, r2, #31
 8009a2e:	d502      	bpl.n	8009a36 <_printf_float+0x19a>
 8009a30:	3301      	adds	r3, #1
 8009a32:	440b      	add	r3, r1
 8009a34:	6123      	str	r3, [r4, #16]
 8009a36:	f04f 0900 	mov.w	r9, #0
 8009a3a:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009a3c:	e7dc      	b.n	80099f8 <_printf_float+0x15c>
 8009a3e:	b913      	cbnz	r3, 8009a46 <_printf_float+0x1aa>
 8009a40:	6822      	ldr	r2, [r4, #0]
 8009a42:	07d2      	lsls	r2, r2, #31
 8009a44:	d501      	bpl.n	8009a4a <_printf_float+0x1ae>
 8009a46:	3302      	adds	r3, #2
 8009a48:	e7f4      	b.n	8009a34 <_printf_float+0x198>
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	e7f2      	b.n	8009a34 <_printf_float+0x198>
 8009a4e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009a52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a54:	4299      	cmp	r1, r3
 8009a56:	db05      	blt.n	8009a64 <_printf_float+0x1c8>
 8009a58:	6823      	ldr	r3, [r4, #0]
 8009a5a:	6121      	str	r1, [r4, #16]
 8009a5c:	07d8      	lsls	r0, r3, #31
 8009a5e:	d5ea      	bpl.n	8009a36 <_printf_float+0x19a>
 8009a60:	1c4b      	adds	r3, r1, #1
 8009a62:	e7e7      	b.n	8009a34 <_printf_float+0x198>
 8009a64:	2900      	cmp	r1, #0
 8009a66:	bfcc      	ite	gt
 8009a68:	2201      	movgt	r2, #1
 8009a6a:	f1c1 0202 	rsble	r2, r1, #2
 8009a6e:	4413      	add	r3, r2
 8009a70:	e7e0      	b.n	8009a34 <_printf_float+0x198>
 8009a72:	6823      	ldr	r3, [r4, #0]
 8009a74:	055a      	lsls	r2, r3, #21
 8009a76:	d407      	bmi.n	8009a88 <_printf_float+0x1ec>
 8009a78:	6923      	ldr	r3, [r4, #16]
 8009a7a:	4642      	mov	r2, r8
 8009a7c:	4631      	mov	r1, r6
 8009a7e:	4628      	mov	r0, r5
 8009a80:	47b8      	blx	r7
 8009a82:	3001      	adds	r0, #1
 8009a84:	d12b      	bne.n	8009ade <_printf_float+0x242>
 8009a86:	e764      	b.n	8009952 <_printf_float+0xb6>
 8009a88:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009a8c:	f240 80dc 	bls.w	8009c48 <_printf_float+0x3ac>
 8009a90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009a94:	2200      	movs	r2, #0
 8009a96:	2300      	movs	r3, #0
 8009a98:	f7f6 ff90 	bl	80009bc <__aeabi_dcmpeq>
 8009a9c:	2800      	cmp	r0, #0
 8009a9e:	d033      	beq.n	8009b08 <_printf_float+0x26c>
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	4631      	mov	r1, r6
 8009aa4:	4628      	mov	r0, r5
 8009aa6:	4a35      	ldr	r2, [pc, #212]	@ (8009b7c <_printf_float+0x2e0>)
 8009aa8:	47b8      	blx	r7
 8009aaa:	3001      	adds	r0, #1
 8009aac:	f43f af51 	beq.w	8009952 <_printf_float+0xb6>
 8009ab0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8009ab4:	4543      	cmp	r3, r8
 8009ab6:	db02      	blt.n	8009abe <_printf_float+0x222>
 8009ab8:	6823      	ldr	r3, [r4, #0]
 8009aba:	07d8      	lsls	r0, r3, #31
 8009abc:	d50f      	bpl.n	8009ade <_printf_float+0x242>
 8009abe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009ac2:	4631      	mov	r1, r6
 8009ac4:	4628      	mov	r0, r5
 8009ac6:	47b8      	blx	r7
 8009ac8:	3001      	adds	r0, #1
 8009aca:	f43f af42 	beq.w	8009952 <_printf_float+0xb6>
 8009ace:	f04f 0900 	mov.w	r9, #0
 8009ad2:	f108 38ff 	add.w	r8, r8, #4294967295
 8009ad6:	f104 0a1a 	add.w	sl, r4, #26
 8009ada:	45c8      	cmp	r8, r9
 8009adc:	dc09      	bgt.n	8009af2 <_printf_float+0x256>
 8009ade:	6823      	ldr	r3, [r4, #0]
 8009ae0:	079b      	lsls	r3, r3, #30
 8009ae2:	f100 8102 	bmi.w	8009cea <_printf_float+0x44e>
 8009ae6:	68e0      	ldr	r0, [r4, #12]
 8009ae8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009aea:	4298      	cmp	r0, r3
 8009aec:	bfb8      	it	lt
 8009aee:	4618      	movlt	r0, r3
 8009af0:	e731      	b.n	8009956 <_printf_float+0xba>
 8009af2:	2301      	movs	r3, #1
 8009af4:	4652      	mov	r2, sl
 8009af6:	4631      	mov	r1, r6
 8009af8:	4628      	mov	r0, r5
 8009afa:	47b8      	blx	r7
 8009afc:	3001      	adds	r0, #1
 8009afe:	f43f af28 	beq.w	8009952 <_printf_float+0xb6>
 8009b02:	f109 0901 	add.w	r9, r9, #1
 8009b06:	e7e8      	b.n	8009ada <_printf_float+0x23e>
 8009b08:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	dc38      	bgt.n	8009b80 <_printf_float+0x2e4>
 8009b0e:	2301      	movs	r3, #1
 8009b10:	4631      	mov	r1, r6
 8009b12:	4628      	mov	r0, r5
 8009b14:	4a19      	ldr	r2, [pc, #100]	@ (8009b7c <_printf_float+0x2e0>)
 8009b16:	47b8      	blx	r7
 8009b18:	3001      	adds	r0, #1
 8009b1a:	f43f af1a 	beq.w	8009952 <_printf_float+0xb6>
 8009b1e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8009b22:	ea59 0303 	orrs.w	r3, r9, r3
 8009b26:	d102      	bne.n	8009b2e <_printf_float+0x292>
 8009b28:	6823      	ldr	r3, [r4, #0]
 8009b2a:	07d9      	lsls	r1, r3, #31
 8009b2c:	d5d7      	bpl.n	8009ade <_printf_float+0x242>
 8009b2e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009b32:	4631      	mov	r1, r6
 8009b34:	4628      	mov	r0, r5
 8009b36:	47b8      	blx	r7
 8009b38:	3001      	adds	r0, #1
 8009b3a:	f43f af0a 	beq.w	8009952 <_printf_float+0xb6>
 8009b3e:	f04f 0a00 	mov.w	sl, #0
 8009b42:	f104 0b1a 	add.w	fp, r4, #26
 8009b46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009b48:	425b      	negs	r3, r3
 8009b4a:	4553      	cmp	r3, sl
 8009b4c:	dc01      	bgt.n	8009b52 <_printf_float+0x2b6>
 8009b4e:	464b      	mov	r3, r9
 8009b50:	e793      	b.n	8009a7a <_printf_float+0x1de>
 8009b52:	2301      	movs	r3, #1
 8009b54:	465a      	mov	r2, fp
 8009b56:	4631      	mov	r1, r6
 8009b58:	4628      	mov	r0, r5
 8009b5a:	47b8      	blx	r7
 8009b5c:	3001      	adds	r0, #1
 8009b5e:	f43f aef8 	beq.w	8009952 <_printf_float+0xb6>
 8009b62:	f10a 0a01 	add.w	sl, sl, #1
 8009b66:	e7ee      	b.n	8009b46 <_printf_float+0x2aa>
 8009b68:	7fefffff 	.word	0x7fefffff
 8009b6c:	0800ca9a 	.word	0x0800ca9a
 8009b70:	0800ca96 	.word	0x0800ca96
 8009b74:	0800caa2 	.word	0x0800caa2
 8009b78:	0800ca9e 	.word	0x0800ca9e
 8009b7c:	0800caa6 	.word	0x0800caa6
 8009b80:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009b82:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009b86:	4553      	cmp	r3, sl
 8009b88:	bfa8      	it	ge
 8009b8a:	4653      	movge	r3, sl
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	4699      	mov	r9, r3
 8009b90:	dc36      	bgt.n	8009c00 <_printf_float+0x364>
 8009b92:	f04f 0b00 	mov.w	fp, #0
 8009b96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009b9a:	f104 021a 	add.w	r2, r4, #26
 8009b9e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009ba0:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ba2:	eba3 0309 	sub.w	r3, r3, r9
 8009ba6:	455b      	cmp	r3, fp
 8009ba8:	dc31      	bgt.n	8009c0e <_printf_float+0x372>
 8009baa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009bac:	459a      	cmp	sl, r3
 8009bae:	dc3a      	bgt.n	8009c26 <_printf_float+0x38a>
 8009bb0:	6823      	ldr	r3, [r4, #0]
 8009bb2:	07da      	lsls	r2, r3, #31
 8009bb4:	d437      	bmi.n	8009c26 <_printf_float+0x38a>
 8009bb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009bb8:	ebaa 0903 	sub.w	r9, sl, r3
 8009bbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bbe:	ebaa 0303 	sub.w	r3, sl, r3
 8009bc2:	4599      	cmp	r9, r3
 8009bc4:	bfa8      	it	ge
 8009bc6:	4699      	movge	r9, r3
 8009bc8:	f1b9 0f00 	cmp.w	r9, #0
 8009bcc:	dc33      	bgt.n	8009c36 <_printf_float+0x39a>
 8009bce:	f04f 0800 	mov.w	r8, #0
 8009bd2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009bd6:	f104 0b1a 	add.w	fp, r4, #26
 8009bda:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009bdc:	ebaa 0303 	sub.w	r3, sl, r3
 8009be0:	eba3 0309 	sub.w	r3, r3, r9
 8009be4:	4543      	cmp	r3, r8
 8009be6:	f77f af7a 	ble.w	8009ade <_printf_float+0x242>
 8009bea:	2301      	movs	r3, #1
 8009bec:	465a      	mov	r2, fp
 8009bee:	4631      	mov	r1, r6
 8009bf0:	4628      	mov	r0, r5
 8009bf2:	47b8      	blx	r7
 8009bf4:	3001      	adds	r0, #1
 8009bf6:	f43f aeac 	beq.w	8009952 <_printf_float+0xb6>
 8009bfa:	f108 0801 	add.w	r8, r8, #1
 8009bfe:	e7ec      	b.n	8009bda <_printf_float+0x33e>
 8009c00:	4642      	mov	r2, r8
 8009c02:	4631      	mov	r1, r6
 8009c04:	4628      	mov	r0, r5
 8009c06:	47b8      	blx	r7
 8009c08:	3001      	adds	r0, #1
 8009c0a:	d1c2      	bne.n	8009b92 <_printf_float+0x2f6>
 8009c0c:	e6a1      	b.n	8009952 <_printf_float+0xb6>
 8009c0e:	2301      	movs	r3, #1
 8009c10:	4631      	mov	r1, r6
 8009c12:	4628      	mov	r0, r5
 8009c14:	920a      	str	r2, [sp, #40]	@ 0x28
 8009c16:	47b8      	blx	r7
 8009c18:	3001      	adds	r0, #1
 8009c1a:	f43f ae9a 	beq.w	8009952 <_printf_float+0xb6>
 8009c1e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009c20:	f10b 0b01 	add.w	fp, fp, #1
 8009c24:	e7bb      	b.n	8009b9e <_printf_float+0x302>
 8009c26:	4631      	mov	r1, r6
 8009c28:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009c2c:	4628      	mov	r0, r5
 8009c2e:	47b8      	blx	r7
 8009c30:	3001      	adds	r0, #1
 8009c32:	d1c0      	bne.n	8009bb6 <_printf_float+0x31a>
 8009c34:	e68d      	b.n	8009952 <_printf_float+0xb6>
 8009c36:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009c38:	464b      	mov	r3, r9
 8009c3a:	4631      	mov	r1, r6
 8009c3c:	4628      	mov	r0, r5
 8009c3e:	4442      	add	r2, r8
 8009c40:	47b8      	blx	r7
 8009c42:	3001      	adds	r0, #1
 8009c44:	d1c3      	bne.n	8009bce <_printf_float+0x332>
 8009c46:	e684      	b.n	8009952 <_printf_float+0xb6>
 8009c48:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009c4c:	f1ba 0f01 	cmp.w	sl, #1
 8009c50:	dc01      	bgt.n	8009c56 <_printf_float+0x3ba>
 8009c52:	07db      	lsls	r3, r3, #31
 8009c54:	d536      	bpl.n	8009cc4 <_printf_float+0x428>
 8009c56:	2301      	movs	r3, #1
 8009c58:	4642      	mov	r2, r8
 8009c5a:	4631      	mov	r1, r6
 8009c5c:	4628      	mov	r0, r5
 8009c5e:	47b8      	blx	r7
 8009c60:	3001      	adds	r0, #1
 8009c62:	f43f ae76 	beq.w	8009952 <_printf_float+0xb6>
 8009c66:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009c6a:	4631      	mov	r1, r6
 8009c6c:	4628      	mov	r0, r5
 8009c6e:	47b8      	blx	r7
 8009c70:	3001      	adds	r0, #1
 8009c72:	f43f ae6e 	beq.w	8009952 <_printf_float+0xb6>
 8009c76:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c82:	f7f6 fe9b 	bl	80009bc <__aeabi_dcmpeq>
 8009c86:	b9c0      	cbnz	r0, 8009cba <_printf_float+0x41e>
 8009c88:	4653      	mov	r3, sl
 8009c8a:	f108 0201 	add.w	r2, r8, #1
 8009c8e:	4631      	mov	r1, r6
 8009c90:	4628      	mov	r0, r5
 8009c92:	47b8      	blx	r7
 8009c94:	3001      	adds	r0, #1
 8009c96:	d10c      	bne.n	8009cb2 <_printf_float+0x416>
 8009c98:	e65b      	b.n	8009952 <_printf_float+0xb6>
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	465a      	mov	r2, fp
 8009c9e:	4631      	mov	r1, r6
 8009ca0:	4628      	mov	r0, r5
 8009ca2:	47b8      	blx	r7
 8009ca4:	3001      	adds	r0, #1
 8009ca6:	f43f ae54 	beq.w	8009952 <_printf_float+0xb6>
 8009caa:	f108 0801 	add.w	r8, r8, #1
 8009cae:	45d0      	cmp	r8, sl
 8009cb0:	dbf3      	blt.n	8009c9a <_printf_float+0x3fe>
 8009cb2:	464b      	mov	r3, r9
 8009cb4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009cb8:	e6e0      	b.n	8009a7c <_printf_float+0x1e0>
 8009cba:	f04f 0800 	mov.w	r8, #0
 8009cbe:	f104 0b1a 	add.w	fp, r4, #26
 8009cc2:	e7f4      	b.n	8009cae <_printf_float+0x412>
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	4642      	mov	r2, r8
 8009cc8:	e7e1      	b.n	8009c8e <_printf_float+0x3f2>
 8009cca:	2301      	movs	r3, #1
 8009ccc:	464a      	mov	r2, r9
 8009cce:	4631      	mov	r1, r6
 8009cd0:	4628      	mov	r0, r5
 8009cd2:	47b8      	blx	r7
 8009cd4:	3001      	adds	r0, #1
 8009cd6:	f43f ae3c 	beq.w	8009952 <_printf_float+0xb6>
 8009cda:	f108 0801 	add.w	r8, r8, #1
 8009cde:	68e3      	ldr	r3, [r4, #12]
 8009ce0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009ce2:	1a5b      	subs	r3, r3, r1
 8009ce4:	4543      	cmp	r3, r8
 8009ce6:	dcf0      	bgt.n	8009cca <_printf_float+0x42e>
 8009ce8:	e6fd      	b.n	8009ae6 <_printf_float+0x24a>
 8009cea:	f04f 0800 	mov.w	r8, #0
 8009cee:	f104 0919 	add.w	r9, r4, #25
 8009cf2:	e7f4      	b.n	8009cde <_printf_float+0x442>

08009cf4 <_printf_common>:
 8009cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cf8:	4616      	mov	r6, r2
 8009cfa:	4698      	mov	r8, r3
 8009cfc:	688a      	ldr	r2, [r1, #8]
 8009cfe:	690b      	ldr	r3, [r1, #16]
 8009d00:	4607      	mov	r7, r0
 8009d02:	4293      	cmp	r3, r2
 8009d04:	bfb8      	it	lt
 8009d06:	4613      	movlt	r3, r2
 8009d08:	6033      	str	r3, [r6, #0]
 8009d0a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009d0e:	460c      	mov	r4, r1
 8009d10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009d14:	b10a      	cbz	r2, 8009d1a <_printf_common+0x26>
 8009d16:	3301      	adds	r3, #1
 8009d18:	6033      	str	r3, [r6, #0]
 8009d1a:	6823      	ldr	r3, [r4, #0]
 8009d1c:	0699      	lsls	r1, r3, #26
 8009d1e:	bf42      	ittt	mi
 8009d20:	6833      	ldrmi	r3, [r6, #0]
 8009d22:	3302      	addmi	r3, #2
 8009d24:	6033      	strmi	r3, [r6, #0]
 8009d26:	6825      	ldr	r5, [r4, #0]
 8009d28:	f015 0506 	ands.w	r5, r5, #6
 8009d2c:	d106      	bne.n	8009d3c <_printf_common+0x48>
 8009d2e:	f104 0a19 	add.w	sl, r4, #25
 8009d32:	68e3      	ldr	r3, [r4, #12]
 8009d34:	6832      	ldr	r2, [r6, #0]
 8009d36:	1a9b      	subs	r3, r3, r2
 8009d38:	42ab      	cmp	r3, r5
 8009d3a:	dc2b      	bgt.n	8009d94 <_printf_common+0xa0>
 8009d3c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009d40:	6822      	ldr	r2, [r4, #0]
 8009d42:	3b00      	subs	r3, #0
 8009d44:	bf18      	it	ne
 8009d46:	2301      	movne	r3, #1
 8009d48:	0692      	lsls	r2, r2, #26
 8009d4a:	d430      	bmi.n	8009dae <_printf_common+0xba>
 8009d4c:	4641      	mov	r1, r8
 8009d4e:	4638      	mov	r0, r7
 8009d50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009d54:	47c8      	blx	r9
 8009d56:	3001      	adds	r0, #1
 8009d58:	d023      	beq.n	8009da2 <_printf_common+0xae>
 8009d5a:	6823      	ldr	r3, [r4, #0]
 8009d5c:	6922      	ldr	r2, [r4, #16]
 8009d5e:	f003 0306 	and.w	r3, r3, #6
 8009d62:	2b04      	cmp	r3, #4
 8009d64:	bf14      	ite	ne
 8009d66:	2500      	movne	r5, #0
 8009d68:	6833      	ldreq	r3, [r6, #0]
 8009d6a:	f04f 0600 	mov.w	r6, #0
 8009d6e:	bf08      	it	eq
 8009d70:	68e5      	ldreq	r5, [r4, #12]
 8009d72:	f104 041a 	add.w	r4, r4, #26
 8009d76:	bf08      	it	eq
 8009d78:	1aed      	subeq	r5, r5, r3
 8009d7a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009d7e:	bf08      	it	eq
 8009d80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d84:	4293      	cmp	r3, r2
 8009d86:	bfc4      	itt	gt
 8009d88:	1a9b      	subgt	r3, r3, r2
 8009d8a:	18ed      	addgt	r5, r5, r3
 8009d8c:	42b5      	cmp	r5, r6
 8009d8e:	d11a      	bne.n	8009dc6 <_printf_common+0xd2>
 8009d90:	2000      	movs	r0, #0
 8009d92:	e008      	b.n	8009da6 <_printf_common+0xb2>
 8009d94:	2301      	movs	r3, #1
 8009d96:	4652      	mov	r2, sl
 8009d98:	4641      	mov	r1, r8
 8009d9a:	4638      	mov	r0, r7
 8009d9c:	47c8      	blx	r9
 8009d9e:	3001      	adds	r0, #1
 8009da0:	d103      	bne.n	8009daa <_printf_common+0xb6>
 8009da2:	f04f 30ff 	mov.w	r0, #4294967295
 8009da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009daa:	3501      	adds	r5, #1
 8009dac:	e7c1      	b.n	8009d32 <_printf_common+0x3e>
 8009dae:	2030      	movs	r0, #48	@ 0x30
 8009db0:	18e1      	adds	r1, r4, r3
 8009db2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009db6:	1c5a      	adds	r2, r3, #1
 8009db8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009dbc:	4422      	add	r2, r4
 8009dbe:	3302      	adds	r3, #2
 8009dc0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009dc4:	e7c2      	b.n	8009d4c <_printf_common+0x58>
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	4622      	mov	r2, r4
 8009dca:	4641      	mov	r1, r8
 8009dcc:	4638      	mov	r0, r7
 8009dce:	47c8      	blx	r9
 8009dd0:	3001      	adds	r0, #1
 8009dd2:	d0e6      	beq.n	8009da2 <_printf_common+0xae>
 8009dd4:	3601      	adds	r6, #1
 8009dd6:	e7d9      	b.n	8009d8c <_printf_common+0x98>

08009dd8 <_printf_i>:
 8009dd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ddc:	7e0f      	ldrb	r7, [r1, #24]
 8009dde:	4691      	mov	r9, r2
 8009de0:	2f78      	cmp	r7, #120	@ 0x78
 8009de2:	4680      	mov	r8, r0
 8009de4:	460c      	mov	r4, r1
 8009de6:	469a      	mov	sl, r3
 8009de8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009dea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009dee:	d807      	bhi.n	8009e00 <_printf_i+0x28>
 8009df0:	2f62      	cmp	r7, #98	@ 0x62
 8009df2:	d80a      	bhi.n	8009e0a <_printf_i+0x32>
 8009df4:	2f00      	cmp	r7, #0
 8009df6:	f000 80d1 	beq.w	8009f9c <_printf_i+0x1c4>
 8009dfa:	2f58      	cmp	r7, #88	@ 0x58
 8009dfc:	f000 80b8 	beq.w	8009f70 <_printf_i+0x198>
 8009e00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009e04:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009e08:	e03a      	b.n	8009e80 <_printf_i+0xa8>
 8009e0a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009e0e:	2b15      	cmp	r3, #21
 8009e10:	d8f6      	bhi.n	8009e00 <_printf_i+0x28>
 8009e12:	a101      	add	r1, pc, #4	@ (adr r1, 8009e18 <_printf_i+0x40>)
 8009e14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e18:	08009e71 	.word	0x08009e71
 8009e1c:	08009e85 	.word	0x08009e85
 8009e20:	08009e01 	.word	0x08009e01
 8009e24:	08009e01 	.word	0x08009e01
 8009e28:	08009e01 	.word	0x08009e01
 8009e2c:	08009e01 	.word	0x08009e01
 8009e30:	08009e85 	.word	0x08009e85
 8009e34:	08009e01 	.word	0x08009e01
 8009e38:	08009e01 	.word	0x08009e01
 8009e3c:	08009e01 	.word	0x08009e01
 8009e40:	08009e01 	.word	0x08009e01
 8009e44:	08009f83 	.word	0x08009f83
 8009e48:	08009eaf 	.word	0x08009eaf
 8009e4c:	08009f3d 	.word	0x08009f3d
 8009e50:	08009e01 	.word	0x08009e01
 8009e54:	08009e01 	.word	0x08009e01
 8009e58:	08009fa5 	.word	0x08009fa5
 8009e5c:	08009e01 	.word	0x08009e01
 8009e60:	08009eaf 	.word	0x08009eaf
 8009e64:	08009e01 	.word	0x08009e01
 8009e68:	08009e01 	.word	0x08009e01
 8009e6c:	08009f45 	.word	0x08009f45
 8009e70:	6833      	ldr	r3, [r6, #0]
 8009e72:	1d1a      	adds	r2, r3, #4
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	6032      	str	r2, [r6, #0]
 8009e78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009e7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009e80:	2301      	movs	r3, #1
 8009e82:	e09c      	b.n	8009fbe <_printf_i+0x1e6>
 8009e84:	6833      	ldr	r3, [r6, #0]
 8009e86:	6820      	ldr	r0, [r4, #0]
 8009e88:	1d19      	adds	r1, r3, #4
 8009e8a:	6031      	str	r1, [r6, #0]
 8009e8c:	0606      	lsls	r6, r0, #24
 8009e8e:	d501      	bpl.n	8009e94 <_printf_i+0xbc>
 8009e90:	681d      	ldr	r5, [r3, #0]
 8009e92:	e003      	b.n	8009e9c <_printf_i+0xc4>
 8009e94:	0645      	lsls	r5, r0, #25
 8009e96:	d5fb      	bpl.n	8009e90 <_printf_i+0xb8>
 8009e98:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009e9c:	2d00      	cmp	r5, #0
 8009e9e:	da03      	bge.n	8009ea8 <_printf_i+0xd0>
 8009ea0:	232d      	movs	r3, #45	@ 0x2d
 8009ea2:	426d      	negs	r5, r5
 8009ea4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ea8:	230a      	movs	r3, #10
 8009eaa:	4858      	ldr	r0, [pc, #352]	@ (800a00c <_printf_i+0x234>)
 8009eac:	e011      	b.n	8009ed2 <_printf_i+0xfa>
 8009eae:	6821      	ldr	r1, [r4, #0]
 8009eb0:	6833      	ldr	r3, [r6, #0]
 8009eb2:	0608      	lsls	r0, r1, #24
 8009eb4:	f853 5b04 	ldr.w	r5, [r3], #4
 8009eb8:	d402      	bmi.n	8009ec0 <_printf_i+0xe8>
 8009eba:	0649      	lsls	r1, r1, #25
 8009ebc:	bf48      	it	mi
 8009ebe:	b2ad      	uxthmi	r5, r5
 8009ec0:	2f6f      	cmp	r7, #111	@ 0x6f
 8009ec2:	6033      	str	r3, [r6, #0]
 8009ec4:	bf14      	ite	ne
 8009ec6:	230a      	movne	r3, #10
 8009ec8:	2308      	moveq	r3, #8
 8009eca:	4850      	ldr	r0, [pc, #320]	@ (800a00c <_printf_i+0x234>)
 8009ecc:	2100      	movs	r1, #0
 8009ece:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009ed2:	6866      	ldr	r6, [r4, #4]
 8009ed4:	2e00      	cmp	r6, #0
 8009ed6:	60a6      	str	r6, [r4, #8]
 8009ed8:	db05      	blt.n	8009ee6 <_printf_i+0x10e>
 8009eda:	6821      	ldr	r1, [r4, #0]
 8009edc:	432e      	orrs	r6, r5
 8009ede:	f021 0104 	bic.w	r1, r1, #4
 8009ee2:	6021      	str	r1, [r4, #0]
 8009ee4:	d04b      	beq.n	8009f7e <_printf_i+0x1a6>
 8009ee6:	4616      	mov	r6, r2
 8009ee8:	fbb5 f1f3 	udiv	r1, r5, r3
 8009eec:	fb03 5711 	mls	r7, r3, r1, r5
 8009ef0:	5dc7      	ldrb	r7, [r0, r7]
 8009ef2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009ef6:	462f      	mov	r7, r5
 8009ef8:	42bb      	cmp	r3, r7
 8009efa:	460d      	mov	r5, r1
 8009efc:	d9f4      	bls.n	8009ee8 <_printf_i+0x110>
 8009efe:	2b08      	cmp	r3, #8
 8009f00:	d10b      	bne.n	8009f1a <_printf_i+0x142>
 8009f02:	6823      	ldr	r3, [r4, #0]
 8009f04:	07df      	lsls	r7, r3, #31
 8009f06:	d508      	bpl.n	8009f1a <_printf_i+0x142>
 8009f08:	6923      	ldr	r3, [r4, #16]
 8009f0a:	6861      	ldr	r1, [r4, #4]
 8009f0c:	4299      	cmp	r1, r3
 8009f0e:	bfde      	ittt	le
 8009f10:	2330      	movle	r3, #48	@ 0x30
 8009f12:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009f16:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009f1a:	1b92      	subs	r2, r2, r6
 8009f1c:	6122      	str	r2, [r4, #16]
 8009f1e:	464b      	mov	r3, r9
 8009f20:	4621      	mov	r1, r4
 8009f22:	4640      	mov	r0, r8
 8009f24:	f8cd a000 	str.w	sl, [sp]
 8009f28:	aa03      	add	r2, sp, #12
 8009f2a:	f7ff fee3 	bl	8009cf4 <_printf_common>
 8009f2e:	3001      	adds	r0, #1
 8009f30:	d14a      	bne.n	8009fc8 <_printf_i+0x1f0>
 8009f32:	f04f 30ff 	mov.w	r0, #4294967295
 8009f36:	b004      	add	sp, #16
 8009f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f3c:	6823      	ldr	r3, [r4, #0]
 8009f3e:	f043 0320 	orr.w	r3, r3, #32
 8009f42:	6023      	str	r3, [r4, #0]
 8009f44:	2778      	movs	r7, #120	@ 0x78
 8009f46:	4832      	ldr	r0, [pc, #200]	@ (800a010 <_printf_i+0x238>)
 8009f48:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009f4c:	6823      	ldr	r3, [r4, #0]
 8009f4e:	6831      	ldr	r1, [r6, #0]
 8009f50:	061f      	lsls	r7, r3, #24
 8009f52:	f851 5b04 	ldr.w	r5, [r1], #4
 8009f56:	d402      	bmi.n	8009f5e <_printf_i+0x186>
 8009f58:	065f      	lsls	r7, r3, #25
 8009f5a:	bf48      	it	mi
 8009f5c:	b2ad      	uxthmi	r5, r5
 8009f5e:	6031      	str	r1, [r6, #0]
 8009f60:	07d9      	lsls	r1, r3, #31
 8009f62:	bf44      	itt	mi
 8009f64:	f043 0320 	orrmi.w	r3, r3, #32
 8009f68:	6023      	strmi	r3, [r4, #0]
 8009f6a:	b11d      	cbz	r5, 8009f74 <_printf_i+0x19c>
 8009f6c:	2310      	movs	r3, #16
 8009f6e:	e7ad      	b.n	8009ecc <_printf_i+0xf4>
 8009f70:	4826      	ldr	r0, [pc, #152]	@ (800a00c <_printf_i+0x234>)
 8009f72:	e7e9      	b.n	8009f48 <_printf_i+0x170>
 8009f74:	6823      	ldr	r3, [r4, #0]
 8009f76:	f023 0320 	bic.w	r3, r3, #32
 8009f7a:	6023      	str	r3, [r4, #0]
 8009f7c:	e7f6      	b.n	8009f6c <_printf_i+0x194>
 8009f7e:	4616      	mov	r6, r2
 8009f80:	e7bd      	b.n	8009efe <_printf_i+0x126>
 8009f82:	6833      	ldr	r3, [r6, #0]
 8009f84:	6825      	ldr	r5, [r4, #0]
 8009f86:	1d18      	adds	r0, r3, #4
 8009f88:	6961      	ldr	r1, [r4, #20]
 8009f8a:	6030      	str	r0, [r6, #0]
 8009f8c:	062e      	lsls	r6, r5, #24
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	d501      	bpl.n	8009f96 <_printf_i+0x1be>
 8009f92:	6019      	str	r1, [r3, #0]
 8009f94:	e002      	b.n	8009f9c <_printf_i+0x1c4>
 8009f96:	0668      	lsls	r0, r5, #25
 8009f98:	d5fb      	bpl.n	8009f92 <_printf_i+0x1ba>
 8009f9a:	8019      	strh	r1, [r3, #0]
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	4616      	mov	r6, r2
 8009fa0:	6123      	str	r3, [r4, #16]
 8009fa2:	e7bc      	b.n	8009f1e <_printf_i+0x146>
 8009fa4:	6833      	ldr	r3, [r6, #0]
 8009fa6:	2100      	movs	r1, #0
 8009fa8:	1d1a      	adds	r2, r3, #4
 8009faa:	6032      	str	r2, [r6, #0]
 8009fac:	681e      	ldr	r6, [r3, #0]
 8009fae:	6862      	ldr	r2, [r4, #4]
 8009fb0:	4630      	mov	r0, r6
 8009fb2:	f000 fb02 	bl	800a5ba <memchr>
 8009fb6:	b108      	cbz	r0, 8009fbc <_printf_i+0x1e4>
 8009fb8:	1b80      	subs	r0, r0, r6
 8009fba:	6060      	str	r0, [r4, #4]
 8009fbc:	6863      	ldr	r3, [r4, #4]
 8009fbe:	6123      	str	r3, [r4, #16]
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009fc6:	e7aa      	b.n	8009f1e <_printf_i+0x146>
 8009fc8:	4632      	mov	r2, r6
 8009fca:	4649      	mov	r1, r9
 8009fcc:	4640      	mov	r0, r8
 8009fce:	6923      	ldr	r3, [r4, #16]
 8009fd0:	47d0      	blx	sl
 8009fd2:	3001      	adds	r0, #1
 8009fd4:	d0ad      	beq.n	8009f32 <_printf_i+0x15a>
 8009fd6:	6823      	ldr	r3, [r4, #0]
 8009fd8:	079b      	lsls	r3, r3, #30
 8009fda:	d413      	bmi.n	800a004 <_printf_i+0x22c>
 8009fdc:	68e0      	ldr	r0, [r4, #12]
 8009fde:	9b03      	ldr	r3, [sp, #12]
 8009fe0:	4298      	cmp	r0, r3
 8009fe2:	bfb8      	it	lt
 8009fe4:	4618      	movlt	r0, r3
 8009fe6:	e7a6      	b.n	8009f36 <_printf_i+0x15e>
 8009fe8:	2301      	movs	r3, #1
 8009fea:	4632      	mov	r2, r6
 8009fec:	4649      	mov	r1, r9
 8009fee:	4640      	mov	r0, r8
 8009ff0:	47d0      	blx	sl
 8009ff2:	3001      	adds	r0, #1
 8009ff4:	d09d      	beq.n	8009f32 <_printf_i+0x15a>
 8009ff6:	3501      	adds	r5, #1
 8009ff8:	68e3      	ldr	r3, [r4, #12]
 8009ffa:	9903      	ldr	r1, [sp, #12]
 8009ffc:	1a5b      	subs	r3, r3, r1
 8009ffe:	42ab      	cmp	r3, r5
 800a000:	dcf2      	bgt.n	8009fe8 <_printf_i+0x210>
 800a002:	e7eb      	b.n	8009fdc <_printf_i+0x204>
 800a004:	2500      	movs	r5, #0
 800a006:	f104 0619 	add.w	r6, r4, #25
 800a00a:	e7f5      	b.n	8009ff8 <_printf_i+0x220>
 800a00c:	0800caa8 	.word	0x0800caa8
 800a010:	0800cab9 	.word	0x0800cab9

0800a014 <std>:
 800a014:	2300      	movs	r3, #0
 800a016:	b510      	push	{r4, lr}
 800a018:	4604      	mov	r4, r0
 800a01a:	e9c0 3300 	strd	r3, r3, [r0]
 800a01e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a022:	6083      	str	r3, [r0, #8]
 800a024:	8181      	strh	r1, [r0, #12]
 800a026:	6643      	str	r3, [r0, #100]	@ 0x64
 800a028:	81c2      	strh	r2, [r0, #14]
 800a02a:	6183      	str	r3, [r0, #24]
 800a02c:	4619      	mov	r1, r3
 800a02e:	2208      	movs	r2, #8
 800a030:	305c      	adds	r0, #92	@ 0x5c
 800a032:	f000 fa1d 	bl	800a470 <memset>
 800a036:	4b0d      	ldr	r3, [pc, #52]	@ (800a06c <std+0x58>)
 800a038:	6224      	str	r4, [r4, #32]
 800a03a:	6263      	str	r3, [r4, #36]	@ 0x24
 800a03c:	4b0c      	ldr	r3, [pc, #48]	@ (800a070 <std+0x5c>)
 800a03e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a040:	4b0c      	ldr	r3, [pc, #48]	@ (800a074 <std+0x60>)
 800a042:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a044:	4b0c      	ldr	r3, [pc, #48]	@ (800a078 <std+0x64>)
 800a046:	6323      	str	r3, [r4, #48]	@ 0x30
 800a048:	4b0c      	ldr	r3, [pc, #48]	@ (800a07c <std+0x68>)
 800a04a:	429c      	cmp	r4, r3
 800a04c:	d006      	beq.n	800a05c <std+0x48>
 800a04e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a052:	4294      	cmp	r4, r2
 800a054:	d002      	beq.n	800a05c <std+0x48>
 800a056:	33d0      	adds	r3, #208	@ 0xd0
 800a058:	429c      	cmp	r4, r3
 800a05a:	d105      	bne.n	800a068 <std+0x54>
 800a05c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a064:	f000 baa6 	b.w	800a5b4 <__retarget_lock_init_recursive>
 800a068:	bd10      	pop	{r4, pc}
 800a06a:	bf00      	nop
 800a06c:	0800a2c1 	.word	0x0800a2c1
 800a070:	0800a2e3 	.word	0x0800a2e3
 800a074:	0800a31b 	.word	0x0800a31b
 800a078:	0800a33f 	.word	0x0800a33f
 800a07c:	20000688 	.word	0x20000688

0800a080 <stdio_exit_handler>:
 800a080:	4a02      	ldr	r2, [pc, #8]	@ (800a08c <stdio_exit_handler+0xc>)
 800a082:	4903      	ldr	r1, [pc, #12]	@ (800a090 <stdio_exit_handler+0x10>)
 800a084:	4803      	ldr	r0, [pc, #12]	@ (800a094 <stdio_exit_handler+0x14>)
 800a086:	f000 b869 	b.w	800a15c <_fwalk_sglue>
 800a08a:	bf00      	nop
 800a08c:	20000068 	.word	0x20000068
 800a090:	0800c1b1 	.word	0x0800c1b1
 800a094:	20000078 	.word	0x20000078

0800a098 <cleanup_stdio>:
 800a098:	6841      	ldr	r1, [r0, #4]
 800a09a:	4b0c      	ldr	r3, [pc, #48]	@ (800a0cc <cleanup_stdio+0x34>)
 800a09c:	b510      	push	{r4, lr}
 800a09e:	4299      	cmp	r1, r3
 800a0a0:	4604      	mov	r4, r0
 800a0a2:	d001      	beq.n	800a0a8 <cleanup_stdio+0x10>
 800a0a4:	f002 f884 	bl	800c1b0 <_fflush_r>
 800a0a8:	68a1      	ldr	r1, [r4, #8]
 800a0aa:	4b09      	ldr	r3, [pc, #36]	@ (800a0d0 <cleanup_stdio+0x38>)
 800a0ac:	4299      	cmp	r1, r3
 800a0ae:	d002      	beq.n	800a0b6 <cleanup_stdio+0x1e>
 800a0b0:	4620      	mov	r0, r4
 800a0b2:	f002 f87d 	bl	800c1b0 <_fflush_r>
 800a0b6:	68e1      	ldr	r1, [r4, #12]
 800a0b8:	4b06      	ldr	r3, [pc, #24]	@ (800a0d4 <cleanup_stdio+0x3c>)
 800a0ba:	4299      	cmp	r1, r3
 800a0bc:	d004      	beq.n	800a0c8 <cleanup_stdio+0x30>
 800a0be:	4620      	mov	r0, r4
 800a0c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0c4:	f002 b874 	b.w	800c1b0 <_fflush_r>
 800a0c8:	bd10      	pop	{r4, pc}
 800a0ca:	bf00      	nop
 800a0cc:	20000688 	.word	0x20000688
 800a0d0:	200006f0 	.word	0x200006f0
 800a0d4:	20000758 	.word	0x20000758

0800a0d8 <global_stdio_init.part.0>:
 800a0d8:	b510      	push	{r4, lr}
 800a0da:	4b0b      	ldr	r3, [pc, #44]	@ (800a108 <global_stdio_init.part.0+0x30>)
 800a0dc:	4c0b      	ldr	r4, [pc, #44]	@ (800a10c <global_stdio_init.part.0+0x34>)
 800a0de:	4a0c      	ldr	r2, [pc, #48]	@ (800a110 <global_stdio_init.part.0+0x38>)
 800a0e0:	4620      	mov	r0, r4
 800a0e2:	601a      	str	r2, [r3, #0]
 800a0e4:	2104      	movs	r1, #4
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	f7ff ff94 	bl	800a014 <std>
 800a0ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	2109      	movs	r1, #9
 800a0f4:	f7ff ff8e 	bl	800a014 <std>
 800a0f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a0fc:	2202      	movs	r2, #2
 800a0fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a102:	2112      	movs	r1, #18
 800a104:	f7ff bf86 	b.w	800a014 <std>
 800a108:	200007c0 	.word	0x200007c0
 800a10c:	20000688 	.word	0x20000688
 800a110:	0800a081 	.word	0x0800a081

0800a114 <__sfp_lock_acquire>:
 800a114:	4801      	ldr	r0, [pc, #4]	@ (800a11c <__sfp_lock_acquire+0x8>)
 800a116:	f000 ba4e 	b.w	800a5b6 <__retarget_lock_acquire_recursive>
 800a11a:	bf00      	nop
 800a11c:	200007c9 	.word	0x200007c9

0800a120 <__sfp_lock_release>:
 800a120:	4801      	ldr	r0, [pc, #4]	@ (800a128 <__sfp_lock_release+0x8>)
 800a122:	f000 ba49 	b.w	800a5b8 <__retarget_lock_release_recursive>
 800a126:	bf00      	nop
 800a128:	200007c9 	.word	0x200007c9

0800a12c <__sinit>:
 800a12c:	b510      	push	{r4, lr}
 800a12e:	4604      	mov	r4, r0
 800a130:	f7ff fff0 	bl	800a114 <__sfp_lock_acquire>
 800a134:	6a23      	ldr	r3, [r4, #32]
 800a136:	b11b      	cbz	r3, 800a140 <__sinit+0x14>
 800a138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a13c:	f7ff bff0 	b.w	800a120 <__sfp_lock_release>
 800a140:	4b04      	ldr	r3, [pc, #16]	@ (800a154 <__sinit+0x28>)
 800a142:	6223      	str	r3, [r4, #32]
 800a144:	4b04      	ldr	r3, [pc, #16]	@ (800a158 <__sinit+0x2c>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d1f5      	bne.n	800a138 <__sinit+0xc>
 800a14c:	f7ff ffc4 	bl	800a0d8 <global_stdio_init.part.0>
 800a150:	e7f2      	b.n	800a138 <__sinit+0xc>
 800a152:	bf00      	nop
 800a154:	0800a099 	.word	0x0800a099
 800a158:	200007c0 	.word	0x200007c0

0800a15c <_fwalk_sglue>:
 800a15c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a160:	4607      	mov	r7, r0
 800a162:	4688      	mov	r8, r1
 800a164:	4614      	mov	r4, r2
 800a166:	2600      	movs	r6, #0
 800a168:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a16c:	f1b9 0901 	subs.w	r9, r9, #1
 800a170:	d505      	bpl.n	800a17e <_fwalk_sglue+0x22>
 800a172:	6824      	ldr	r4, [r4, #0]
 800a174:	2c00      	cmp	r4, #0
 800a176:	d1f7      	bne.n	800a168 <_fwalk_sglue+0xc>
 800a178:	4630      	mov	r0, r6
 800a17a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a17e:	89ab      	ldrh	r3, [r5, #12]
 800a180:	2b01      	cmp	r3, #1
 800a182:	d907      	bls.n	800a194 <_fwalk_sglue+0x38>
 800a184:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a188:	3301      	adds	r3, #1
 800a18a:	d003      	beq.n	800a194 <_fwalk_sglue+0x38>
 800a18c:	4629      	mov	r1, r5
 800a18e:	4638      	mov	r0, r7
 800a190:	47c0      	blx	r8
 800a192:	4306      	orrs	r6, r0
 800a194:	3568      	adds	r5, #104	@ 0x68
 800a196:	e7e9      	b.n	800a16c <_fwalk_sglue+0x10>

0800a198 <_puts_r>:
 800a198:	6a03      	ldr	r3, [r0, #32]
 800a19a:	b570      	push	{r4, r5, r6, lr}
 800a19c:	4605      	mov	r5, r0
 800a19e:	460e      	mov	r6, r1
 800a1a0:	6884      	ldr	r4, [r0, #8]
 800a1a2:	b90b      	cbnz	r3, 800a1a8 <_puts_r+0x10>
 800a1a4:	f7ff ffc2 	bl	800a12c <__sinit>
 800a1a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a1aa:	07db      	lsls	r3, r3, #31
 800a1ac:	d405      	bmi.n	800a1ba <_puts_r+0x22>
 800a1ae:	89a3      	ldrh	r3, [r4, #12]
 800a1b0:	0598      	lsls	r0, r3, #22
 800a1b2:	d402      	bmi.n	800a1ba <_puts_r+0x22>
 800a1b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a1b6:	f000 f9fe 	bl	800a5b6 <__retarget_lock_acquire_recursive>
 800a1ba:	89a3      	ldrh	r3, [r4, #12]
 800a1bc:	0719      	lsls	r1, r3, #28
 800a1be:	d502      	bpl.n	800a1c6 <_puts_r+0x2e>
 800a1c0:	6923      	ldr	r3, [r4, #16]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d135      	bne.n	800a232 <_puts_r+0x9a>
 800a1c6:	4621      	mov	r1, r4
 800a1c8:	4628      	mov	r0, r5
 800a1ca:	f000 f8fb 	bl	800a3c4 <__swsetup_r>
 800a1ce:	b380      	cbz	r0, 800a232 <_puts_r+0x9a>
 800a1d0:	f04f 35ff 	mov.w	r5, #4294967295
 800a1d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a1d6:	07da      	lsls	r2, r3, #31
 800a1d8:	d405      	bmi.n	800a1e6 <_puts_r+0x4e>
 800a1da:	89a3      	ldrh	r3, [r4, #12]
 800a1dc:	059b      	lsls	r3, r3, #22
 800a1de:	d402      	bmi.n	800a1e6 <_puts_r+0x4e>
 800a1e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a1e2:	f000 f9e9 	bl	800a5b8 <__retarget_lock_release_recursive>
 800a1e6:	4628      	mov	r0, r5
 800a1e8:	bd70      	pop	{r4, r5, r6, pc}
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	da04      	bge.n	800a1f8 <_puts_r+0x60>
 800a1ee:	69a2      	ldr	r2, [r4, #24]
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	dc17      	bgt.n	800a224 <_puts_r+0x8c>
 800a1f4:	290a      	cmp	r1, #10
 800a1f6:	d015      	beq.n	800a224 <_puts_r+0x8c>
 800a1f8:	6823      	ldr	r3, [r4, #0]
 800a1fa:	1c5a      	adds	r2, r3, #1
 800a1fc:	6022      	str	r2, [r4, #0]
 800a1fe:	7019      	strb	r1, [r3, #0]
 800a200:	68a3      	ldr	r3, [r4, #8]
 800a202:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a206:	3b01      	subs	r3, #1
 800a208:	60a3      	str	r3, [r4, #8]
 800a20a:	2900      	cmp	r1, #0
 800a20c:	d1ed      	bne.n	800a1ea <_puts_r+0x52>
 800a20e:	2b00      	cmp	r3, #0
 800a210:	da11      	bge.n	800a236 <_puts_r+0x9e>
 800a212:	4622      	mov	r2, r4
 800a214:	210a      	movs	r1, #10
 800a216:	4628      	mov	r0, r5
 800a218:	f000 f895 	bl	800a346 <__swbuf_r>
 800a21c:	3001      	adds	r0, #1
 800a21e:	d0d7      	beq.n	800a1d0 <_puts_r+0x38>
 800a220:	250a      	movs	r5, #10
 800a222:	e7d7      	b.n	800a1d4 <_puts_r+0x3c>
 800a224:	4622      	mov	r2, r4
 800a226:	4628      	mov	r0, r5
 800a228:	f000 f88d 	bl	800a346 <__swbuf_r>
 800a22c:	3001      	adds	r0, #1
 800a22e:	d1e7      	bne.n	800a200 <_puts_r+0x68>
 800a230:	e7ce      	b.n	800a1d0 <_puts_r+0x38>
 800a232:	3e01      	subs	r6, #1
 800a234:	e7e4      	b.n	800a200 <_puts_r+0x68>
 800a236:	6823      	ldr	r3, [r4, #0]
 800a238:	1c5a      	adds	r2, r3, #1
 800a23a:	6022      	str	r2, [r4, #0]
 800a23c:	220a      	movs	r2, #10
 800a23e:	701a      	strb	r2, [r3, #0]
 800a240:	e7ee      	b.n	800a220 <_puts_r+0x88>
	...

0800a244 <puts>:
 800a244:	4b02      	ldr	r3, [pc, #8]	@ (800a250 <puts+0xc>)
 800a246:	4601      	mov	r1, r0
 800a248:	6818      	ldr	r0, [r3, #0]
 800a24a:	f7ff bfa5 	b.w	800a198 <_puts_r>
 800a24e:	bf00      	nop
 800a250:	20000074 	.word	0x20000074

0800a254 <sniprintf>:
 800a254:	b40c      	push	{r2, r3}
 800a256:	b530      	push	{r4, r5, lr}
 800a258:	4b18      	ldr	r3, [pc, #96]	@ (800a2bc <sniprintf+0x68>)
 800a25a:	1e0c      	subs	r4, r1, #0
 800a25c:	681d      	ldr	r5, [r3, #0]
 800a25e:	b09d      	sub	sp, #116	@ 0x74
 800a260:	da08      	bge.n	800a274 <sniprintf+0x20>
 800a262:	238b      	movs	r3, #139	@ 0x8b
 800a264:	f04f 30ff 	mov.w	r0, #4294967295
 800a268:	602b      	str	r3, [r5, #0]
 800a26a:	b01d      	add	sp, #116	@ 0x74
 800a26c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a270:	b002      	add	sp, #8
 800a272:	4770      	bx	lr
 800a274:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a278:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a27c:	f04f 0300 	mov.w	r3, #0
 800a280:	931b      	str	r3, [sp, #108]	@ 0x6c
 800a282:	bf0c      	ite	eq
 800a284:	4623      	moveq	r3, r4
 800a286:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a28a:	9304      	str	r3, [sp, #16]
 800a28c:	9307      	str	r3, [sp, #28]
 800a28e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a292:	9002      	str	r0, [sp, #8]
 800a294:	9006      	str	r0, [sp, #24]
 800a296:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a29a:	4628      	mov	r0, r5
 800a29c:	ab21      	add	r3, sp, #132	@ 0x84
 800a29e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a2a0:	a902      	add	r1, sp, #8
 800a2a2:	9301      	str	r3, [sp, #4]
 800a2a4:	f001 fcc8 	bl	800bc38 <_svfiprintf_r>
 800a2a8:	1c43      	adds	r3, r0, #1
 800a2aa:	bfbc      	itt	lt
 800a2ac:	238b      	movlt	r3, #139	@ 0x8b
 800a2ae:	602b      	strlt	r3, [r5, #0]
 800a2b0:	2c00      	cmp	r4, #0
 800a2b2:	d0da      	beq.n	800a26a <sniprintf+0x16>
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	9b02      	ldr	r3, [sp, #8]
 800a2b8:	701a      	strb	r2, [r3, #0]
 800a2ba:	e7d6      	b.n	800a26a <sniprintf+0x16>
 800a2bc:	20000074 	.word	0x20000074

0800a2c0 <__sread>:
 800a2c0:	b510      	push	{r4, lr}
 800a2c2:	460c      	mov	r4, r1
 800a2c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2c8:	f000 f926 	bl	800a518 <_read_r>
 800a2cc:	2800      	cmp	r0, #0
 800a2ce:	bfab      	itete	ge
 800a2d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a2d2:	89a3      	ldrhlt	r3, [r4, #12]
 800a2d4:	181b      	addge	r3, r3, r0
 800a2d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a2da:	bfac      	ite	ge
 800a2dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a2de:	81a3      	strhlt	r3, [r4, #12]
 800a2e0:	bd10      	pop	{r4, pc}

0800a2e2 <__swrite>:
 800a2e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2e6:	461f      	mov	r7, r3
 800a2e8:	898b      	ldrh	r3, [r1, #12]
 800a2ea:	4605      	mov	r5, r0
 800a2ec:	05db      	lsls	r3, r3, #23
 800a2ee:	460c      	mov	r4, r1
 800a2f0:	4616      	mov	r6, r2
 800a2f2:	d505      	bpl.n	800a300 <__swrite+0x1e>
 800a2f4:	2302      	movs	r3, #2
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2fc:	f000 f8fa 	bl	800a4f4 <_lseek_r>
 800a300:	89a3      	ldrh	r3, [r4, #12]
 800a302:	4632      	mov	r2, r6
 800a304:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a308:	81a3      	strh	r3, [r4, #12]
 800a30a:	4628      	mov	r0, r5
 800a30c:	463b      	mov	r3, r7
 800a30e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a312:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a316:	f000 b911 	b.w	800a53c <_write_r>

0800a31a <__sseek>:
 800a31a:	b510      	push	{r4, lr}
 800a31c:	460c      	mov	r4, r1
 800a31e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a322:	f000 f8e7 	bl	800a4f4 <_lseek_r>
 800a326:	1c43      	adds	r3, r0, #1
 800a328:	89a3      	ldrh	r3, [r4, #12]
 800a32a:	bf15      	itete	ne
 800a32c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a32e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a332:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a336:	81a3      	strheq	r3, [r4, #12]
 800a338:	bf18      	it	ne
 800a33a:	81a3      	strhne	r3, [r4, #12]
 800a33c:	bd10      	pop	{r4, pc}

0800a33e <__sclose>:
 800a33e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a342:	f000 b8c7 	b.w	800a4d4 <_close_r>

0800a346 <__swbuf_r>:
 800a346:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a348:	460e      	mov	r6, r1
 800a34a:	4614      	mov	r4, r2
 800a34c:	4605      	mov	r5, r0
 800a34e:	b118      	cbz	r0, 800a358 <__swbuf_r+0x12>
 800a350:	6a03      	ldr	r3, [r0, #32]
 800a352:	b90b      	cbnz	r3, 800a358 <__swbuf_r+0x12>
 800a354:	f7ff feea 	bl	800a12c <__sinit>
 800a358:	69a3      	ldr	r3, [r4, #24]
 800a35a:	60a3      	str	r3, [r4, #8]
 800a35c:	89a3      	ldrh	r3, [r4, #12]
 800a35e:	071a      	lsls	r2, r3, #28
 800a360:	d501      	bpl.n	800a366 <__swbuf_r+0x20>
 800a362:	6923      	ldr	r3, [r4, #16]
 800a364:	b943      	cbnz	r3, 800a378 <__swbuf_r+0x32>
 800a366:	4621      	mov	r1, r4
 800a368:	4628      	mov	r0, r5
 800a36a:	f000 f82b 	bl	800a3c4 <__swsetup_r>
 800a36e:	b118      	cbz	r0, 800a378 <__swbuf_r+0x32>
 800a370:	f04f 37ff 	mov.w	r7, #4294967295
 800a374:	4638      	mov	r0, r7
 800a376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a378:	6823      	ldr	r3, [r4, #0]
 800a37a:	6922      	ldr	r2, [r4, #16]
 800a37c:	b2f6      	uxtb	r6, r6
 800a37e:	1a98      	subs	r0, r3, r2
 800a380:	6963      	ldr	r3, [r4, #20]
 800a382:	4637      	mov	r7, r6
 800a384:	4283      	cmp	r3, r0
 800a386:	dc05      	bgt.n	800a394 <__swbuf_r+0x4e>
 800a388:	4621      	mov	r1, r4
 800a38a:	4628      	mov	r0, r5
 800a38c:	f001 ff10 	bl	800c1b0 <_fflush_r>
 800a390:	2800      	cmp	r0, #0
 800a392:	d1ed      	bne.n	800a370 <__swbuf_r+0x2a>
 800a394:	68a3      	ldr	r3, [r4, #8]
 800a396:	3b01      	subs	r3, #1
 800a398:	60a3      	str	r3, [r4, #8]
 800a39a:	6823      	ldr	r3, [r4, #0]
 800a39c:	1c5a      	adds	r2, r3, #1
 800a39e:	6022      	str	r2, [r4, #0]
 800a3a0:	701e      	strb	r6, [r3, #0]
 800a3a2:	6962      	ldr	r2, [r4, #20]
 800a3a4:	1c43      	adds	r3, r0, #1
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d004      	beq.n	800a3b4 <__swbuf_r+0x6e>
 800a3aa:	89a3      	ldrh	r3, [r4, #12]
 800a3ac:	07db      	lsls	r3, r3, #31
 800a3ae:	d5e1      	bpl.n	800a374 <__swbuf_r+0x2e>
 800a3b0:	2e0a      	cmp	r6, #10
 800a3b2:	d1df      	bne.n	800a374 <__swbuf_r+0x2e>
 800a3b4:	4621      	mov	r1, r4
 800a3b6:	4628      	mov	r0, r5
 800a3b8:	f001 fefa 	bl	800c1b0 <_fflush_r>
 800a3bc:	2800      	cmp	r0, #0
 800a3be:	d0d9      	beq.n	800a374 <__swbuf_r+0x2e>
 800a3c0:	e7d6      	b.n	800a370 <__swbuf_r+0x2a>
	...

0800a3c4 <__swsetup_r>:
 800a3c4:	b538      	push	{r3, r4, r5, lr}
 800a3c6:	4b29      	ldr	r3, [pc, #164]	@ (800a46c <__swsetup_r+0xa8>)
 800a3c8:	4605      	mov	r5, r0
 800a3ca:	6818      	ldr	r0, [r3, #0]
 800a3cc:	460c      	mov	r4, r1
 800a3ce:	b118      	cbz	r0, 800a3d8 <__swsetup_r+0x14>
 800a3d0:	6a03      	ldr	r3, [r0, #32]
 800a3d2:	b90b      	cbnz	r3, 800a3d8 <__swsetup_r+0x14>
 800a3d4:	f7ff feaa 	bl	800a12c <__sinit>
 800a3d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3dc:	0719      	lsls	r1, r3, #28
 800a3de:	d422      	bmi.n	800a426 <__swsetup_r+0x62>
 800a3e0:	06da      	lsls	r2, r3, #27
 800a3e2:	d407      	bmi.n	800a3f4 <__swsetup_r+0x30>
 800a3e4:	2209      	movs	r2, #9
 800a3e6:	602a      	str	r2, [r5, #0]
 800a3e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a3f0:	81a3      	strh	r3, [r4, #12]
 800a3f2:	e033      	b.n	800a45c <__swsetup_r+0x98>
 800a3f4:	0758      	lsls	r0, r3, #29
 800a3f6:	d512      	bpl.n	800a41e <__swsetup_r+0x5a>
 800a3f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a3fa:	b141      	cbz	r1, 800a40e <__swsetup_r+0x4a>
 800a3fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a400:	4299      	cmp	r1, r3
 800a402:	d002      	beq.n	800a40a <__swsetup_r+0x46>
 800a404:	4628      	mov	r0, r5
 800a406:	f000 ff43 	bl	800b290 <_free_r>
 800a40a:	2300      	movs	r3, #0
 800a40c:	6363      	str	r3, [r4, #52]	@ 0x34
 800a40e:	89a3      	ldrh	r3, [r4, #12]
 800a410:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a414:	81a3      	strh	r3, [r4, #12]
 800a416:	2300      	movs	r3, #0
 800a418:	6063      	str	r3, [r4, #4]
 800a41a:	6923      	ldr	r3, [r4, #16]
 800a41c:	6023      	str	r3, [r4, #0]
 800a41e:	89a3      	ldrh	r3, [r4, #12]
 800a420:	f043 0308 	orr.w	r3, r3, #8
 800a424:	81a3      	strh	r3, [r4, #12]
 800a426:	6923      	ldr	r3, [r4, #16]
 800a428:	b94b      	cbnz	r3, 800a43e <__swsetup_r+0x7a>
 800a42a:	89a3      	ldrh	r3, [r4, #12]
 800a42c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a430:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a434:	d003      	beq.n	800a43e <__swsetup_r+0x7a>
 800a436:	4621      	mov	r1, r4
 800a438:	4628      	mov	r0, r5
 800a43a:	f001 ff06 	bl	800c24a <__smakebuf_r>
 800a43e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a442:	f013 0201 	ands.w	r2, r3, #1
 800a446:	d00a      	beq.n	800a45e <__swsetup_r+0x9a>
 800a448:	2200      	movs	r2, #0
 800a44a:	60a2      	str	r2, [r4, #8]
 800a44c:	6962      	ldr	r2, [r4, #20]
 800a44e:	4252      	negs	r2, r2
 800a450:	61a2      	str	r2, [r4, #24]
 800a452:	6922      	ldr	r2, [r4, #16]
 800a454:	b942      	cbnz	r2, 800a468 <__swsetup_r+0xa4>
 800a456:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a45a:	d1c5      	bne.n	800a3e8 <__swsetup_r+0x24>
 800a45c:	bd38      	pop	{r3, r4, r5, pc}
 800a45e:	0799      	lsls	r1, r3, #30
 800a460:	bf58      	it	pl
 800a462:	6962      	ldrpl	r2, [r4, #20]
 800a464:	60a2      	str	r2, [r4, #8]
 800a466:	e7f4      	b.n	800a452 <__swsetup_r+0x8e>
 800a468:	2000      	movs	r0, #0
 800a46a:	e7f7      	b.n	800a45c <__swsetup_r+0x98>
 800a46c:	20000074 	.word	0x20000074

0800a470 <memset>:
 800a470:	4603      	mov	r3, r0
 800a472:	4402      	add	r2, r0
 800a474:	4293      	cmp	r3, r2
 800a476:	d100      	bne.n	800a47a <memset+0xa>
 800a478:	4770      	bx	lr
 800a47a:	f803 1b01 	strb.w	r1, [r3], #1
 800a47e:	e7f9      	b.n	800a474 <memset+0x4>

0800a480 <strncat>:
 800a480:	b530      	push	{r4, r5, lr}
 800a482:	4604      	mov	r4, r0
 800a484:	7825      	ldrb	r5, [r4, #0]
 800a486:	4623      	mov	r3, r4
 800a488:	3401      	adds	r4, #1
 800a48a:	2d00      	cmp	r5, #0
 800a48c:	d1fa      	bne.n	800a484 <strncat+0x4>
 800a48e:	3a01      	subs	r2, #1
 800a490:	d304      	bcc.n	800a49c <strncat+0x1c>
 800a492:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a496:	f803 4b01 	strb.w	r4, [r3], #1
 800a49a:	b904      	cbnz	r4, 800a49e <strncat+0x1e>
 800a49c:	bd30      	pop	{r4, r5, pc}
 800a49e:	2a00      	cmp	r2, #0
 800a4a0:	d1f5      	bne.n	800a48e <strncat+0xe>
 800a4a2:	701a      	strb	r2, [r3, #0]
 800a4a4:	e7f3      	b.n	800a48e <strncat+0xe>

0800a4a6 <strncpy>:
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	b510      	push	{r4, lr}
 800a4aa:	3901      	subs	r1, #1
 800a4ac:	b132      	cbz	r2, 800a4bc <strncpy+0x16>
 800a4ae:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a4b2:	3a01      	subs	r2, #1
 800a4b4:	f803 4b01 	strb.w	r4, [r3], #1
 800a4b8:	2c00      	cmp	r4, #0
 800a4ba:	d1f7      	bne.n	800a4ac <strncpy+0x6>
 800a4bc:	2100      	movs	r1, #0
 800a4be:	441a      	add	r2, r3
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d100      	bne.n	800a4c6 <strncpy+0x20>
 800a4c4:	bd10      	pop	{r4, pc}
 800a4c6:	f803 1b01 	strb.w	r1, [r3], #1
 800a4ca:	e7f9      	b.n	800a4c0 <strncpy+0x1a>

0800a4cc <_localeconv_r>:
 800a4cc:	4800      	ldr	r0, [pc, #0]	@ (800a4d0 <_localeconv_r+0x4>)
 800a4ce:	4770      	bx	lr
 800a4d0:	200001b4 	.word	0x200001b4

0800a4d4 <_close_r>:
 800a4d4:	b538      	push	{r3, r4, r5, lr}
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	4d05      	ldr	r5, [pc, #20]	@ (800a4f0 <_close_r+0x1c>)
 800a4da:	4604      	mov	r4, r0
 800a4dc:	4608      	mov	r0, r1
 800a4de:	602b      	str	r3, [r5, #0]
 800a4e0:	f7fa fb61 	bl	8004ba6 <_close>
 800a4e4:	1c43      	adds	r3, r0, #1
 800a4e6:	d102      	bne.n	800a4ee <_close_r+0x1a>
 800a4e8:	682b      	ldr	r3, [r5, #0]
 800a4ea:	b103      	cbz	r3, 800a4ee <_close_r+0x1a>
 800a4ec:	6023      	str	r3, [r4, #0]
 800a4ee:	bd38      	pop	{r3, r4, r5, pc}
 800a4f0:	200007c4 	.word	0x200007c4

0800a4f4 <_lseek_r>:
 800a4f4:	b538      	push	{r3, r4, r5, lr}
 800a4f6:	4604      	mov	r4, r0
 800a4f8:	4608      	mov	r0, r1
 800a4fa:	4611      	mov	r1, r2
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	4d05      	ldr	r5, [pc, #20]	@ (800a514 <_lseek_r+0x20>)
 800a500:	602a      	str	r2, [r5, #0]
 800a502:	461a      	mov	r2, r3
 800a504:	f7fa fb73 	bl	8004bee <_lseek>
 800a508:	1c43      	adds	r3, r0, #1
 800a50a:	d102      	bne.n	800a512 <_lseek_r+0x1e>
 800a50c:	682b      	ldr	r3, [r5, #0]
 800a50e:	b103      	cbz	r3, 800a512 <_lseek_r+0x1e>
 800a510:	6023      	str	r3, [r4, #0]
 800a512:	bd38      	pop	{r3, r4, r5, pc}
 800a514:	200007c4 	.word	0x200007c4

0800a518 <_read_r>:
 800a518:	b538      	push	{r3, r4, r5, lr}
 800a51a:	4604      	mov	r4, r0
 800a51c:	4608      	mov	r0, r1
 800a51e:	4611      	mov	r1, r2
 800a520:	2200      	movs	r2, #0
 800a522:	4d05      	ldr	r5, [pc, #20]	@ (800a538 <_read_r+0x20>)
 800a524:	602a      	str	r2, [r5, #0]
 800a526:	461a      	mov	r2, r3
 800a528:	f7fa fb04 	bl	8004b34 <_read>
 800a52c:	1c43      	adds	r3, r0, #1
 800a52e:	d102      	bne.n	800a536 <_read_r+0x1e>
 800a530:	682b      	ldr	r3, [r5, #0]
 800a532:	b103      	cbz	r3, 800a536 <_read_r+0x1e>
 800a534:	6023      	str	r3, [r4, #0]
 800a536:	bd38      	pop	{r3, r4, r5, pc}
 800a538:	200007c4 	.word	0x200007c4

0800a53c <_write_r>:
 800a53c:	b538      	push	{r3, r4, r5, lr}
 800a53e:	4604      	mov	r4, r0
 800a540:	4608      	mov	r0, r1
 800a542:	4611      	mov	r1, r2
 800a544:	2200      	movs	r2, #0
 800a546:	4d05      	ldr	r5, [pc, #20]	@ (800a55c <_write_r+0x20>)
 800a548:	602a      	str	r2, [r5, #0]
 800a54a:	461a      	mov	r2, r3
 800a54c:	f7fa fb0f 	bl	8004b6e <_write>
 800a550:	1c43      	adds	r3, r0, #1
 800a552:	d102      	bne.n	800a55a <_write_r+0x1e>
 800a554:	682b      	ldr	r3, [r5, #0]
 800a556:	b103      	cbz	r3, 800a55a <_write_r+0x1e>
 800a558:	6023      	str	r3, [r4, #0]
 800a55a:	bd38      	pop	{r3, r4, r5, pc}
 800a55c:	200007c4 	.word	0x200007c4

0800a560 <__errno>:
 800a560:	4b01      	ldr	r3, [pc, #4]	@ (800a568 <__errno+0x8>)
 800a562:	6818      	ldr	r0, [r3, #0]
 800a564:	4770      	bx	lr
 800a566:	bf00      	nop
 800a568:	20000074 	.word	0x20000074

0800a56c <__libc_init_array>:
 800a56c:	b570      	push	{r4, r5, r6, lr}
 800a56e:	2600      	movs	r6, #0
 800a570:	4d0c      	ldr	r5, [pc, #48]	@ (800a5a4 <__libc_init_array+0x38>)
 800a572:	4c0d      	ldr	r4, [pc, #52]	@ (800a5a8 <__libc_init_array+0x3c>)
 800a574:	1b64      	subs	r4, r4, r5
 800a576:	10a4      	asrs	r4, r4, #2
 800a578:	42a6      	cmp	r6, r4
 800a57a:	d109      	bne.n	800a590 <__libc_init_array+0x24>
 800a57c:	f001 ffe2 	bl	800c544 <_init>
 800a580:	2600      	movs	r6, #0
 800a582:	4d0a      	ldr	r5, [pc, #40]	@ (800a5ac <__libc_init_array+0x40>)
 800a584:	4c0a      	ldr	r4, [pc, #40]	@ (800a5b0 <__libc_init_array+0x44>)
 800a586:	1b64      	subs	r4, r4, r5
 800a588:	10a4      	asrs	r4, r4, #2
 800a58a:	42a6      	cmp	r6, r4
 800a58c:	d105      	bne.n	800a59a <__libc_init_array+0x2e>
 800a58e:	bd70      	pop	{r4, r5, r6, pc}
 800a590:	f855 3b04 	ldr.w	r3, [r5], #4
 800a594:	4798      	blx	r3
 800a596:	3601      	adds	r6, #1
 800a598:	e7ee      	b.n	800a578 <__libc_init_array+0xc>
 800a59a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a59e:	4798      	blx	r3
 800a5a0:	3601      	adds	r6, #1
 800a5a2:	e7f2      	b.n	800a58a <__libc_init_array+0x1e>
 800a5a4:	0800ce14 	.word	0x0800ce14
 800a5a8:	0800ce14 	.word	0x0800ce14
 800a5ac:	0800ce14 	.word	0x0800ce14
 800a5b0:	0800ce18 	.word	0x0800ce18

0800a5b4 <__retarget_lock_init_recursive>:
 800a5b4:	4770      	bx	lr

0800a5b6 <__retarget_lock_acquire_recursive>:
 800a5b6:	4770      	bx	lr

0800a5b8 <__retarget_lock_release_recursive>:
 800a5b8:	4770      	bx	lr

0800a5ba <memchr>:
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	b510      	push	{r4, lr}
 800a5be:	b2c9      	uxtb	r1, r1
 800a5c0:	4402      	add	r2, r0
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	d101      	bne.n	800a5cc <memchr+0x12>
 800a5c8:	2000      	movs	r0, #0
 800a5ca:	e003      	b.n	800a5d4 <memchr+0x1a>
 800a5cc:	7804      	ldrb	r4, [r0, #0]
 800a5ce:	3301      	adds	r3, #1
 800a5d0:	428c      	cmp	r4, r1
 800a5d2:	d1f6      	bne.n	800a5c2 <memchr+0x8>
 800a5d4:	bd10      	pop	{r4, pc}

0800a5d6 <quorem>:
 800a5d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5da:	6903      	ldr	r3, [r0, #16]
 800a5dc:	690c      	ldr	r4, [r1, #16]
 800a5de:	4607      	mov	r7, r0
 800a5e0:	42a3      	cmp	r3, r4
 800a5e2:	db7e      	blt.n	800a6e2 <quorem+0x10c>
 800a5e4:	3c01      	subs	r4, #1
 800a5e6:	00a3      	lsls	r3, r4, #2
 800a5e8:	f100 0514 	add.w	r5, r0, #20
 800a5ec:	f101 0814 	add.w	r8, r1, #20
 800a5f0:	9300      	str	r3, [sp, #0]
 800a5f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a5f6:	9301      	str	r3, [sp, #4]
 800a5f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a5fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a600:	3301      	adds	r3, #1
 800a602:	429a      	cmp	r2, r3
 800a604:	fbb2 f6f3 	udiv	r6, r2, r3
 800a608:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a60c:	d32e      	bcc.n	800a66c <quorem+0x96>
 800a60e:	f04f 0a00 	mov.w	sl, #0
 800a612:	46c4      	mov	ip, r8
 800a614:	46ae      	mov	lr, r5
 800a616:	46d3      	mov	fp, sl
 800a618:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a61c:	b298      	uxth	r0, r3
 800a61e:	fb06 a000 	mla	r0, r6, r0, sl
 800a622:	0c1b      	lsrs	r3, r3, #16
 800a624:	0c02      	lsrs	r2, r0, #16
 800a626:	fb06 2303 	mla	r3, r6, r3, r2
 800a62a:	f8de 2000 	ldr.w	r2, [lr]
 800a62e:	b280      	uxth	r0, r0
 800a630:	b292      	uxth	r2, r2
 800a632:	1a12      	subs	r2, r2, r0
 800a634:	445a      	add	r2, fp
 800a636:	f8de 0000 	ldr.w	r0, [lr]
 800a63a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a63e:	b29b      	uxth	r3, r3
 800a640:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a644:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a648:	b292      	uxth	r2, r2
 800a64a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a64e:	45e1      	cmp	r9, ip
 800a650:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a654:	f84e 2b04 	str.w	r2, [lr], #4
 800a658:	d2de      	bcs.n	800a618 <quorem+0x42>
 800a65a:	9b00      	ldr	r3, [sp, #0]
 800a65c:	58eb      	ldr	r3, [r5, r3]
 800a65e:	b92b      	cbnz	r3, 800a66c <quorem+0x96>
 800a660:	9b01      	ldr	r3, [sp, #4]
 800a662:	3b04      	subs	r3, #4
 800a664:	429d      	cmp	r5, r3
 800a666:	461a      	mov	r2, r3
 800a668:	d32f      	bcc.n	800a6ca <quorem+0xf4>
 800a66a:	613c      	str	r4, [r7, #16]
 800a66c:	4638      	mov	r0, r7
 800a66e:	f001 f97f 	bl	800b970 <__mcmp>
 800a672:	2800      	cmp	r0, #0
 800a674:	db25      	blt.n	800a6c2 <quorem+0xec>
 800a676:	4629      	mov	r1, r5
 800a678:	2000      	movs	r0, #0
 800a67a:	f858 2b04 	ldr.w	r2, [r8], #4
 800a67e:	f8d1 c000 	ldr.w	ip, [r1]
 800a682:	fa1f fe82 	uxth.w	lr, r2
 800a686:	fa1f f38c 	uxth.w	r3, ip
 800a68a:	eba3 030e 	sub.w	r3, r3, lr
 800a68e:	4403      	add	r3, r0
 800a690:	0c12      	lsrs	r2, r2, #16
 800a692:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a696:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a69a:	b29b      	uxth	r3, r3
 800a69c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6a0:	45c1      	cmp	r9, r8
 800a6a2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a6a6:	f841 3b04 	str.w	r3, [r1], #4
 800a6aa:	d2e6      	bcs.n	800a67a <quorem+0xa4>
 800a6ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a6b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a6b4:	b922      	cbnz	r2, 800a6c0 <quorem+0xea>
 800a6b6:	3b04      	subs	r3, #4
 800a6b8:	429d      	cmp	r5, r3
 800a6ba:	461a      	mov	r2, r3
 800a6bc:	d30b      	bcc.n	800a6d6 <quorem+0x100>
 800a6be:	613c      	str	r4, [r7, #16]
 800a6c0:	3601      	adds	r6, #1
 800a6c2:	4630      	mov	r0, r6
 800a6c4:	b003      	add	sp, #12
 800a6c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6ca:	6812      	ldr	r2, [r2, #0]
 800a6cc:	3b04      	subs	r3, #4
 800a6ce:	2a00      	cmp	r2, #0
 800a6d0:	d1cb      	bne.n	800a66a <quorem+0x94>
 800a6d2:	3c01      	subs	r4, #1
 800a6d4:	e7c6      	b.n	800a664 <quorem+0x8e>
 800a6d6:	6812      	ldr	r2, [r2, #0]
 800a6d8:	3b04      	subs	r3, #4
 800a6da:	2a00      	cmp	r2, #0
 800a6dc:	d1ef      	bne.n	800a6be <quorem+0xe8>
 800a6de:	3c01      	subs	r4, #1
 800a6e0:	e7ea      	b.n	800a6b8 <quorem+0xe2>
 800a6e2:	2000      	movs	r0, #0
 800a6e4:	e7ee      	b.n	800a6c4 <quorem+0xee>
	...

0800a6e8 <_dtoa_r>:
 800a6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6ec:	4614      	mov	r4, r2
 800a6ee:	461d      	mov	r5, r3
 800a6f0:	69c7      	ldr	r7, [r0, #28]
 800a6f2:	b097      	sub	sp, #92	@ 0x5c
 800a6f4:	4681      	mov	r9, r0
 800a6f6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800a6fa:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800a6fc:	b97f      	cbnz	r7, 800a71e <_dtoa_r+0x36>
 800a6fe:	2010      	movs	r0, #16
 800a700:	f000 fe0e 	bl	800b320 <malloc>
 800a704:	4602      	mov	r2, r0
 800a706:	f8c9 001c 	str.w	r0, [r9, #28]
 800a70a:	b920      	cbnz	r0, 800a716 <_dtoa_r+0x2e>
 800a70c:	21ef      	movs	r1, #239	@ 0xef
 800a70e:	4bac      	ldr	r3, [pc, #688]	@ (800a9c0 <_dtoa_r+0x2d8>)
 800a710:	48ac      	ldr	r0, [pc, #688]	@ (800a9c4 <_dtoa_r+0x2dc>)
 800a712:	f001 fe31 	bl	800c378 <__assert_func>
 800a716:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a71a:	6007      	str	r7, [r0, #0]
 800a71c:	60c7      	str	r7, [r0, #12]
 800a71e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a722:	6819      	ldr	r1, [r3, #0]
 800a724:	b159      	cbz	r1, 800a73e <_dtoa_r+0x56>
 800a726:	685a      	ldr	r2, [r3, #4]
 800a728:	2301      	movs	r3, #1
 800a72a:	4093      	lsls	r3, r2
 800a72c:	604a      	str	r2, [r1, #4]
 800a72e:	608b      	str	r3, [r1, #8]
 800a730:	4648      	mov	r0, r9
 800a732:	f000 feeb 	bl	800b50c <_Bfree>
 800a736:	2200      	movs	r2, #0
 800a738:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a73c:	601a      	str	r2, [r3, #0]
 800a73e:	1e2b      	subs	r3, r5, #0
 800a740:	bfaf      	iteee	ge
 800a742:	2300      	movge	r3, #0
 800a744:	2201      	movlt	r2, #1
 800a746:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a74a:	9307      	strlt	r3, [sp, #28]
 800a74c:	bfa8      	it	ge
 800a74e:	6033      	strge	r3, [r6, #0]
 800a750:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800a754:	4b9c      	ldr	r3, [pc, #624]	@ (800a9c8 <_dtoa_r+0x2e0>)
 800a756:	bfb8      	it	lt
 800a758:	6032      	strlt	r2, [r6, #0]
 800a75a:	ea33 0308 	bics.w	r3, r3, r8
 800a75e:	d112      	bne.n	800a786 <_dtoa_r+0x9e>
 800a760:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a764:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a766:	6013      	str	r3, [r2, #0]
 800a768:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a76c:	4323      	orrs	r3, r4
 800a76e:	f000 855e 	beq.w	800b22e <_dtoa_r+0xb46>
 800a772:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a774:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a9cc <_dtoa_r+0x2e4>
 800a778:	2b00      	cmp	r3, #0
 800a77a:	f000 8560 	beq.w	800b23e <_dtoa_r+0xb56>
 800a77e:	f10a 0303 	add.w	r3, sl, #3
 800a782:	f000 bd5a 	b.w	800b23a <_dtoa_r+0xb52>
 800a786:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a78a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a78e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a792:	2200      	movs	r2, #0
 800a794:	2300      	movs	r3, #0
 800a796:	f7f6 f911 	bl	80009bc <__aeabi_dcmpeq>
 800a79a:	4607      	mov	r7, r0
 800a79c:	b158      	cbz	r0, 800a7b6 <_dtoa_r+0xce>
 800a79e:	2301      	movs	r3, #1
 800a7a0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a7a2:	6013      	str	r3, [r2, #0]
 800a7a4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a7a6:	b113      	cbz	r3, 800a7ae <_dtoa_r+0xc6>
 800a7a8:	4b89      	ldr	r3, [pc, #548]	@ (800a9d0 <_dtoa_r+0x2e8>)
 800a7aa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a7ac:	6013      	str	r3, [r2, #0]
 800a7ae:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800a9d4 <_dtoa_r+0x2ec>
 800a7b2:	f000 bd44 	b.w	800b23e <_dtoa_r+0xb56>
 800a7b6:	ab14      	add	r3, sp, #80	@ 0x50
 800a7b8:	9301      	str	r3, [sp, #4]
 800a7ba:	ab15      	add	r3, sp, #84	@ 0x54
 800a7bc:	9300      	str	r3, [sp, #0]
 800a7be:	4648      	mov	r0, r9
 800a7c0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a7c4:	f001 f984 	bl	800bad0 <__d2b>
 800a7c8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800a7cc:	9003      	str	r0, [sp, #12]
 800a7ce:	2e00      	cmp	r6, #0
 800a7d0:	d078      	beq.n	800a8c4 <_dtoa_r+0x1dc>
 800a7d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a7d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a7d8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a7dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a7e0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a7e4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a7e8:	9712      	str	r7, [sp, #72]	@ 0x48
 800a7ea:	4619      	mov	r1, r3
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	4b7a      	ldr	r3, [pc, #488]	@ (800a9d8 <_dtoa_r+0x2f0>)
 800a7f0:	f7f5 fcc4 	bl	800017c <__aeabi_dsub>
 800a7f4:	a36c      	add	r3, pc, #432	@ (adr r3, 800a9a8 <_dtoa_r+0x2c0>)
 800a7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7fa:	f7f5 fe77 	bl	80004ec <__aeabi_dmul>
 800a7fe:	a36c      	add	r3, pc, #432	@ (adr r3, 800a9b0 <_dtoa_r+0x2c8>)
 800a800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a804:	f7f5 fcbc 	bl	8000180 <__adddf3>
 800a808:	4604      	mov	r4, r0
 800a80a:	4630      	mov	r0, r6
 800a80c:	460d      	mov	r5, r1
 800a80e:	f7f5 fe03 	bl	8000418 <__aeabi_i2d>
 800a812:	a369      	add	r3, pc, #420	@ (adr r3, 800a9b8 <_dtoa_r+0x2d0>)
 800a814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a818:	f7f5 fe68 	bl	80004ec <__aeabi_dmul>
 800a81c:	4602      	mov	r2, r0
 800a81e:	460b      	mov	r3, r1
 800a820:	4620      	mov	r0, r4
 800a822:	4629      	mov	r1, r5
 800a824:	f7f5 fcac 	bl	8000180 <__adddf3>
 800a828:	4604      	mov	r4, r0
 800a82a:	460d      	mov	r5, r1
 800a82c:	f7f6 f90e 	bl	8000a4c <__aeabi_d2iz>
 800a830:	2200      	movs	r2, #0
 800a832:	4607      	mov	r7, r0
 800a834:	2300      	movs	r3, #0
 800a836:	4620      	mov	r0, r4
 800a838:	4629      	mov	r1, r5
 800a83a:	f7f6 f8c9 	bl	80009d0 <__aeabi_dcmplt>
 800a83e:	b140      	cbz	r0, 800a852 <_dtoa_r+0x16a>
 800a840:	4638      	mov	r0, r7
 800a842:	f7f5 fde9 	bl	8000418 <__aeabi_i2d>
 800a846:	4622      	mov	r2, r4
 800a848:	462b      	mov	r3, r5
 800a84a:	f7f6 f8b7 	bl	80009bc <__aeabi_dcmpeq>
 800a84e:	b900      	cbnz	r0, 800a852 <_dtoa_r+0x16a>
 800a850:	3f01      	subs	r7, #1
 800a852:	2f16      	cmp	r7, #22
 800a854:	d854      	bhi.n	800a900 <_dtoa_r+0x218>
 800a856:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a85a:	4b60      	ldr	r3, [pc, #384]	@ (800a9dc <_dtoa_r+0x2f4>)
 800a85c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a860:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a864:	f7f6 f8b4 	bl	80009d0 <__aeabi_dcmplt>
 800a868:	2800      	cmp	r0, #0
 800a86a:	d04b      	beq.n	800a904 <_dtoa_r+0x21c>
 800a86c:	2300      	movs	r3, #0
 800a86e:	3f01      	subs	r7, #1
 800a870:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a872:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a874:	1b9b      	subs	r3, r3, r6
 800a876:	1e5a      	subs	r2, r3, #1
 800a878:	bf49      	itett	mi
 800a87a:	f1c3 0301 	rsbmi	r3, r3, #1
 800a87e:	2300      	movpl	r3, #0
 800a880:	9304      	strmi	r3, [sp, #16]
 800a882:	2300      	movmi	r3, #0
 800a884:	9209      	str	r2, [sp, #36]	@ 0x24
 800a886:	bf54      	ite	pl
 800a888:	9304      	strpl	r3, [sp, #16]
 800a88a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800a88c:	2f00      	cmp	r7, #0
 800a88e:	db3b      	blt.n	800a908 <_dtoa_r+0x220>
 800a890:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a892:	970e      	str	r7, [sp, #56]	@ 0x38
 800a894:	443b      	add	r3, r7
 800a896:	9309      	str	r3, [sp, #36]	@ 0x24
 800a898:	2300      	movs	r3, #0
 800a89a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a89c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a89e:	2b09      	cmp	r3, #9
 800a8a0:	d865      	bhi.n	800a96e <_dtoa_r+0x286>
 800a8a2:	2b05      	cmp	r3, #5
 800a8a4:	bfc4      	itt	gt
 800a8a6:	3b04      	subgt	r3, #4
 800a8a8:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800a8aa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a8ac:	bfc8      	it	gt
 800a8ae:	2400      	movgt	r4, #0
 800a8b0:	f1a3 0302 	sub.w	r3, r3, #2
 800a8b4:	bfd8      	it	le
 800a8b6:	2401      	movle	r4, #1
 800a8b8:	2b03      	cmp	r3, #3
 800a8ba:	d864      	bhi.n	800a986 <_dtoa_r+0x29e>
 800a8bc:	e8df f003 	tbb	[pc, r3]
 800a8c0:	2c385553 	.word	0x2c385553
 800a8c4:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a8c8:	441e      	add	r6, r3
 800a8ca:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a8ce:	2b20      	cmp	r3, #32
 800a8d0:	bfc1      	itttt	gt
 800a8d2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a8d6:	fa08 f803 	lslgt.w	r8, r8, r3
 800a8da:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a8de:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a8e2:	bfd6      	itet	le
 800a8e4:	f1c3 0320 	rsble	r3, r3, #32
 800a8e8:	ea48 0003 	orrgt.w	r0, r8, r3
 800a8ec:	fa04 f003 	lslle.w	r0, r4, r3
 800a8f0:	f7f5 fd82 	bl	80003f8 <__aeabi_ui2d>
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a8fa:	3e01      	subs	r6, #1
 800a8fc:	9212      	str	r2, [sp, #72]	@ 0x48
 800a8fe:	e774      	b.n	800a7ea <_dtoa_r+0x102>
 800a900:	2301      	movs	r3, #1
 800a902:	e7b5      	b.n	800a870 <_dtoa_r+0x188>
 800a904:	900f      	str	r0, [sp, #60]	@ 0x3c
 800a906:	e7b4      	b.n	800a872 <_dtoa_r+0x18a>
 800a908:	9b04      	ldr	r3, [sp, #16]
 800a90a:	1bdb      	subs	r3, r3, r7
 800a90c:	9304      	str	r3, [sp, #16]
 800a90e:	427b      	negs	r3, r7
 800a910:	930a      	str	r3, [sp, #40]	@ 0x28
 800a912:	2300      	movs	r3, #0
 800a914:	930e      	str	r3, [sp, #56]	@ 0x38
 800a916:	e7c1      	b.n	800a89c <_dtoa_r+0x1b4>
 800a918:	2301      	movs	r3, #1
 800a91a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a91c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a91e:	eb07 0b03 	add.w	fp, r7, r3
 800a922:	f10b 0301 	add.w	r3, fp, #1
 800a926:	2b01      	cmp	r3, #1
 800a928:	9308      	str	r3, [sp, #32]
 800a92a:	bfb8      	it	lt
 800a92c:	2301      	movlt	r3, #1
 800a92e:	e006      	b.n	800a93e <_dtoa_r+0x256>
 800a930:	2301      	movs	r3, #1
 800a932:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a934:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a936:	2b00      	cmp	r3, #0
 800a938:	dd28      	ble.n	800a98c <_dtoa_r+0x2a4>
 800a93a:	469b      	mov	fp, r3
 800a93c:	9308      	str	r3, [sp, #32]
 800a93e:	2100      	movs	r1, #0
 800a940:	2204      	movs	r2, #4
 800a942:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800a946:	f102 0514 	add.w	r5, r2, #20
 800a94a:	429d      	cmp	r5, r3
 800a94c:	d926      	bls.n	800a99c <_dtoa_r+0x2b4>
 800a94e:	6041      	str	r1, [r0, #4]
 800a950:	4648      	mov	r0, r9
 800a952:	f000 fd9b 	bl	800b48c <_Balloc>
 800a956:	4682      	mov	sl, r0
 800a958:	2800      	cmp	r0, #0
 800a95a:	d143      	bne.n	800a9e4 <_dtoa_r+0x2fc>
 800a95c:	4602      	mov	r2, r0
 800a95e:	f240 11af 	movw	r1, #431	@ 0x1af
 800a962:	4b1f      	ldr	r3, [pc, #124]	@ (800a9e0 <_dtoa_r+0x2f8>)
 800a964:	e6d4      	b.n	800a710 <_dtoa_r+0x28>
 800a966:	2300      	movs	r3, #0
 800a968:	e7e3      	b.n	800a932 <_dtoa_r+0x24a>
 800a96a:	2300      	movs	r3, #0
 800a96c:	e7d5      	b.n	800a91a <_dtoa_r+0x232>
 800a96e:	2401      	movs	r4, #1
 800a970:	2300      	movs	r3, #0
 800a972:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a974:	9320      	str	r3, [sp, #128]	@ 0x80
 800a976:	f04f 3bff 	mov.w	fp, #4294967295
 800a97a:	2200      	movs	r2, #0
 800a97c:	2312      	movs	r3, #18
 800a97e:	f8cd b020 	str.w	fp, [sp, #32]
 800a982:	9221      	str	r2, [sp, #132]	@ 0x84
 800a984:	e7db      	b.n	800a93e <_dtoa_r+0x256>
 800a986:	2301      	movs	r3, #1
 800a988:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a98a:	e7f4      	b.n	800a976 <_dtoa_r+0x28e>
 800a98c:	f04f 0b01 	mov.w	fp, #1
 800a990:	465b      	mov	r3, fp
 800a992:	f8cd b020 	str.w	fp, [sp, #32]
 800a996:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800a99a:	e7d0      	b.n	800a93e <_dtoa_r+0x256>
 800a99c:	3101      	adds	r1, #1
 800a99e:	0052      	lsls	r2, r2, #1
 800a9a0:	e7d1      	b.n	800a946 <_dtoa_r+0x25e>
 800a9a2:	bf00      	nop
 800a9a4:	f3af 8000 	nop.w
 800a9a8:	636f4361 	.word	0x636f4361
 800a9ac:	3fd287a7 	.word	0x3fd287a7
 800a9b0:	8b60c8b3 	.word	0x8b60c8b3
 800a9b4:	3fc68a28 	.word	0x3fc68a28
 800a9b8:	509f79fb 	.word	0x509f79fb
 800a9bc:	3fd34413 	.word	0x3fd34413
 800a9c0:	0800cad7 	.word	0x0800cad7
 800a9c4:	0800caee 	.word	0x0800caee
 800a9c8:	7ff00000 	.word	0x7ff00000
 800a9cc:	0800cad3 	.word	0x0800cad3
 800a9d0:	0800caa7 	.word	0x0800caa7
 800a9d4:	0800caa6 	.word	0x0800caa6
 800a9d8:	3ff80000 	.word	0x3ff80000
 800a9dc:	0800cc40 	.word	0x0800cc40
 800a9e0:	0800cb46 	.word	0x0800cb46
 800a9e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a9e8:	6018      	str	r0, [r3, #0]
 800a9ea:	9b08      	ldr	r3, [sp, #32]
 800a9ec:	2b0e      	cmp	r3, #14
 800a9ee:	f200 80a1 	bhi.w	800ab34 <_dtoa_r+0x44c>
 800a9f2:	2c00      	cmp	r4, #0
 800a9f4:	f000 809e 	beq.w	800ab34 <_dtoa_r+0x44c>
 800a9f8:	2f00      	cmp	r7, #0
 800a9fa:	dd33      	ble.n	800aa64 <_dtoa_r+0x37c>
 800a9fc:	4b9c      	ldr	r3, [pc, #624]	@ (800ac70 <_dtoa_r+0x588>)
 800a9fe:	f007 020f 	and.w	r2, r7, #15
 800aa02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa06:	05f8      	lsls	r0, r7, #23
 800aa08:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aa0c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 800aa10:	ea4f 1427 	mov.w	r4, r7, asr #4
 800aa14:	d516      	bpl.n	800aa44 <_dtoa_r+0x35c>
 800aa16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa1a:	4b96      	ldr	r3, [pc, #600]	@ (800ac74 <_dtoa_r+0x58c>)
 800aa1c:	2603      	movs	r6, #3
 800aa1e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aa22:	f7f5 fe8d 	bl	8000740 <__aeabi_ddiv>
 800aa26:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800aa2a:	f004 040f 	and.w	r4, r4, #15
 800aa2e:	4d91      	ldr	r5, [pc, #580]	@ (800ac74 <_dtoa_r+0x58c>)
 800aa30:	b954      	cbnz	r4, 800aa48 <_dtoa_r+0x360>
 800aa32:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800aa36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa3a:	f7f5 fe81 	bl	8000740 <__aeabi_ddiv>
 800aa3e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800aa42:	e028      	b.n	800aa96 <_dtoa_r+0x3ae>
 800aa44:	2602      	movs	r6, #2
 800aa46:	e7f2      	b.n	800aa2e <_dtoa_r+0x346>
 800aa48:	07e1      	lsls	r1, r4, #31
 800aa4a:	d508      	bpl.n	800aa5e <_dtoa_r+0x376>
 800aa4c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800aa50:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aa54:	f7f5 fd4a 	bl	80004ec <__aeabi_dmul>
 800aa58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800aa5c:	3601      	adds	r6, #1
 800aa5e:	1064      	asrs	r4, r4, #1
 800aa60:	3508      	adds	r5, #8
 800aa62:	e7e5      	b.n	800aa30 <_dtoa_r+0x348>
 800aa64:	f000 80af 	beq.w	800abc6 <_dtoa_r+0x4de>
 800aa68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa6c:	427c      	negs	r4, r7
 800aa6e:	4b80      	ldr	r3, [pc, #512]	@ (800ac70 <_dtoa_r+0x588>)
 800aa70:	f004 020f 	and.w	r2, r4, #15
 800aa74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa7c:	f7f5 fd36 	bl	80004ec <__aeabi_dmul>
 800aa80:	2602      	movs	r6, #2
 800aa82:	2300      	movs	r3, #0
 800aa84:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800aa88:	4d7a      	ldr	r5, [pc, #488]	@ (800ac74 <_dtoa_r+0x58c>)
 800aa8a:	1124      	asrs	r4, r4, #4
 800aa8c:	2c00      	cmp	r4, #0
 800aa8e:	f040 808f 	bne.w	800abb0 <_dtoa_r+0x4c8>
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d1d3      	bne.n	800aa3e <_dtoa_r+0x356>
 800aa96:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800aa9a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	f000 8094 	beq.w	800abca <_dtoa_r+0x4e2>
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	4620      	mov	r0, r4
 800aaa6:	4629      	mov	r1, r5
 800aaa8:	4b73      	ldr	r3, [pc, #460]	@ (800ac78 <_dtoa_r+0x590>)
 800aaaa:	f7f5 ff91 	bl	80009d0 <__aeabi_dcmplt>
 800aaae:	2800      	cmp	r0, #0
 800aab0:	f000 808b 	beq.w	800abca <_dtoa_r+0x4e2>
 800aab4:	9b08      	ldr	r3, [sp, #32]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	f000 8087 	beq.w	800abca <_dtoa_r+0x4e2>
 800aabc:	f1bb 0f00 	cmp.w	fp, #0
 800aac0:	dd34      	ble.n	800ab2c <_dtoa_r+0x444>
 800aac2:	4620      	mov	r0, r4
 800aac4:	2200      	movs	r2, #0
 800aac6:	4629      	mov	r1, r5
 800aac8:	4b6c      	ldr	r3, [pc, #432]	@ (800ac7c <_dtoa_r+0x594>)
 800aaca:	f7f5 fd0f 	bl	80004ec <__aeabi_dmul>
 800aace:	465c      	mov	r4, fp
 800aad0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800aad4:	f107 38ff 	add.w	r8, r7, #4294967295
 800aad8:	3601      	adds	r6, #1
 800aada:	4630      	mov	r0, r6
 800aadc:	f7f5 fc9c 	bl	8000418 <__aeabi_i2d>
 800aae0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aae4:	f7f5 fd02 	bl	80004ec <__aeabi_dmul>
 800aae8:	2200      	movs	r2, #0
 800aaea:	4b65      	ldr	r3, [pc, #404]	@ (800ac80 <_dtoa_r+0x598>)
 800aaec:	f7f5 fb48 	bl	8000180 <__adddf3>
 800aaf0:	4605      	mov	r5, r0
 800aaf2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800aaf6:	2c00      	cmp	r4, #0
 800aaf8:	d16a      	bne.n	800abd0 <_dtoa_r+0x4e8>
 800aafa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aafe:	2200      	movs	r2, #0
 800ab00:	4b60      	ldr	r3, [pc, #384]	@ (800ac84 <_dtoa_r+0x59c>)
 800ab02:	f7f5 fb3b 	bl	800017c <__aeabi_dsub>
 800ab06:	4602      	mov	r2, r0
 800ab08:	460b      	mov	r3, r1
 800ab0a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ab0e:	462a      	mov	r2, r5
 800ab10:	4633      	mov	r3, r6
 800ab12:	f7f5 ff7b 	bl	8000a0c <__aeabi_dcmpgt>
 800ab16:	2800      	cmp	r0, #0
 800ab18:	f040 8298 	bne.w	800b04c <_dtoa_r+0x964>
 800ab1c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab20:	462a      	mov	r2, r5
 800ab22:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ab26:	f7f5 ff53 	bl	80009d0 <__aeabi_dcmplt>
 800ab2a:	bb38      	cbnz	r0, 800ab7c <_dtoa_r+0x494>
 800ab2c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ab30:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800ab34:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	f2c0 8157 	blt.w	800adea <_dtoa_r+0x702>
 800ab3c:	2f0e      	cmp	r7, #14
 800ab3e:	f300 8154 	bgt.w	800adea <_dtoa_r+0x702>
 800ab42:	4b4b      	ldr	r3, [pc, #300]	@ (800ac70 <_dtoa_r+0x588>)
 800ab44:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ab48:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ab4c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ab50:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	f280 80e5 	bge.w	800ad22 <_dtoa_r+0x63a>
 800ab58:	9b08      	ldr	r3, [sp, #32]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	f300 80e1 	bgt.w	800ad22 <_dtoa_r+0x63a>
 800ab60:	d10c      	bne.n	800ab7c <_dtoa_r+0x494>
 800ab62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab66:	2200      	movs	r2, #0
 800ab68:	4b46      	ldr	r3, [pc, #280]	@ (800ac84 <_dtoa_r+0x59c>)
 800ab6a:	f7f5 fcbf 	bl	80004ec <__aeabi_dmul>
 800ab6e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ab72:	f7f5 ff41 	bl	80009f8 <__aeabi_dcmpge>
 800ab76:	2800      	cmp	r0, #0
 800ab78:	f000 8266 	beq.w	800b048 <_dtoa_r+0x960>
 800ab7c:	2400      	movs	r4, #0
 800ab7e:	4625      	mov	r5, r4
 800ab80:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ab82:	4656      	mov	r6, sl
 800ab84:	ea6f 0803 	mvn.w	r8, r3
 800ab88:	2700      	movs	r7, #0
 800ab8a:	4621      	mov	r1, r4
 800ab8c:	4648      	mov	r0, r9
 800ab8e:	f000 fcbd 	bl	800b50c <_Bfree>
 800ab92:	2d00      	cmp	r5, #0
 800ab94:	f000 80bd 	beq.w	800ad12 <_dtoa_r+0x62a>
 800ab98:	b12f      	cbz	r7, 800aba6 <_dtoa_r+0x4be>
 800ab9a:	42af      	cmp	r7, r5
 800ab9c:	d003      	beq.n	800aba6 <_dtoa_r+0x4be>
 800ab9e:	4639      	mov	r1, r7
 800aba0:	4648      	mov	r0, r9
 800aba2:	f000 fcb3 	bl	800b50c <_Bfree>
 800aba6:	4629      	mov	r1, r5
 800aba8:	4648      	mov	r0, r9
 800abaa:	f000 fcaf 	bl	800b50c <_Bfree>
 800abae:	e0b0      	b.n	800ad12 <_dtoa_r+0x62a>
 800abb0:	07e2      	lsls	r2, r4, #31
 800abb2:	d505      	bpl.n	800abc0 <_dtoa_r+0x4d8>
 800abb4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800abb8:	f7f5 fc98 	bl	80004ec <__aeabi_dmul>
 800abbc:	2301      	movs	r3, #1
 800abbe:	3601      	adds	r6, #1
 800abc0:	1064      	asrs	r4, r4, #1
 800abc2:	3508      	adds	r5, #8
 800abc4:	e762      	b.n	800aa8c <_dtoa_r+0x3a4>
 800abc6:	2602      	movs	r6, #2
 800abc8:	e765      	b.n	800aa96 <_dtoa_r+0x3ae>
 800abca:	46b8      	mov	r8, r7
 800abcc:	9c08      	ldr	r4, [sp, #32]
 800abce:	e784      	b.n	800aada <_dtoa_r+0x3f2>
 800abd0:	4b27      	ldr	r3, [pc, #156]	@ (800ac70 <_dtoa_r+0x588>)
 800abd2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800abd4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800abd8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800abdc:	4454      	add	r4, sl
 800abde:	2900      	cmp	r1, #0
 800abe0:	d054      	beq.n	800ac8c <_dtoa_r+0x5a4>
 800abe2:	2000      	movs	r0, #0
 800abe4:	4928      	ldr	r1, [pc, #160]	@ (800ac88 <_dtoa_r+0x5a0>)
 800abe6:	f7f5 fdab 	bl	8000740 <__aeabi_ddiv>
 800abea:	4633      	mov	r3, r6
 800abec:	462a      	mov	r2, r5
 800abee:	f7f5 fac5 	bl	800017c <__aeabi_dsub>
 800abf2:	4656      	mov	r6, sl
 800abf4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800abf8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800abfc:	f7f5 ff26 	bl	8000a4c <__aeabi_d2iz>
 800ac00:	4605      	mov	r5, r0
 800ac02:	f7f5 fc09 	bl	8000418 <__aeabi_i2d>
 800ac06:	4602      	mov	r2, r0
 800ac08:	460b      	mov	r3, r1
 800ac0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac0e:	f7f5 fab5 	bl	800017c <__aeabi_dsub>
 800ac12:	4602      	mov	r2, r0
 800ac14:	460b      	mov	r3, r1
 800ac16:	3530      	adds	r5, #48	@ 0x30
 800ac18:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ac1c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ac20:	f806 5b01 	strb.w	r5, [r6], #1
 800ac24:	f7f5 fed4 	bl	80009d0 <__aeabi_dcmplt>
 800ac28:	2800      	cmp	r0, #0
 800ac2a:	d172      	bne.n	800ad12 <_dtoa_r+0x62a>
 800ac2c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ac30:	2000      	movs	r0, #0
 800ac32:	4911      	ldr	r1, [pc, #68]	@ (800ac78 <_dtoa_r+0x590>)
 800ac34:	f7f5 faa2 	bl	800017c <__aeabi_dsub>
 800ac38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ac3c:	f7f5 fec8 	bl	80009d0 <__aeabi_dcmplt>
 800ac40:	2800      	cmp	r0, #0
 800ac42:	f040 80b4 	bne.w	800adae <_dtoa_r+0x6c6>
 800ac46:	42a6      	cmp	r6, r4
 800ac48:	f43f af70 	beq.w	800ab2c <_dtoa_r+0x444>
 800ac4c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ac50:	2200      	movs	r2, #0
 800ac52:	4b0a      	ldr	r3, [pc, #40]	@ (800ac7c <_dtoa_r+0x594>)
 800ac54:	f7f5 fc4a 	bl	80004ec <__aeabi_dmul>
 800ac58:	2200      	movs	r2, #0
 800ac5a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ac5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac62:	4b06      	ldr	r3, [pc, #24]	@ (800ac7c <_dtoa_r+0x594>)
 800ac64:	f7f5 fc42 	bl	80004ec <__aeabi_dmul>
 800ac68:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ac6c:	e7c4      	b.n	800abf8 <_dtoa_r+0x510>
 800ac6e:	bf00      	nop
 800ac70:	0800cc40 	.word	0x0800cc40
 800ac74:	0800cc18 	.word	0x0800cc18
 800ac78:	3ff00000 	.word	0x3ff00000
 800ac7c:	40240000 	.word	0x40240000
 800ac80:	401c0000 	.word	0x401c0000
 800ac84:	40140000 	.word	0x40140000
 800ac88:	3fe00000 	.word	0x3fe00000
 800ac8c:	4631      	mov	r1, r6
 800ac8e:	4628      	mov	r0, r5
 800ac90:	f7f5 fc2c 	bl	80004ec <__aeabi_dmul>
 800ac94:	4656      	mov	r6, sl
 800ac96:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ac9a:	9413      	str	r4, [sp, #76]	@ 0x4c
 800ac9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aca0:	f7f5 fed4 	bl	8000a4c <__aeabi_d2iz>
 800aca4:	4605      	mov	r5, r0
 800aca6:	f7f5 fbb7 	bl	8000418 <__aeabi_i2d>
 800acaa:	4602      	mov	r2, r0
 800acac:	460b      	mov	r3, r1
 800acae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800acb2:	f7f5 fa63 	bl	800017c <__aeabi_dsub>
 800acb6:	4602      	mov	r2, r0
 800acb8:	460b      	mov	r3, r1
 800acba:	3530      	adds	r5, #48	@ 0x30
 800acbc:	f806 5b01 	strb.w	r5, [r6], #1
 800acc0:	42a6      	cmp	r6, r4
 800acc2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800acc6:	f04f 0200 	mov.w	r2, #0
 800acca:	d124      	bne.n	800ad16 <_dtoa_r+0x62e>
 800accc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800acd0:	4bae      	ldr	r3, [pc, #696]	@ (800af8c <_dtoa_r+0x8a4>)
 800acd2:	f7f5 fa55 	bl	8000180 <__adddf3>
 800acd6:	4602      	mov	r2, r0
 800acd8:	460b      	mov	r3, r1
 800acda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800acde:	f7f5 fe95 	bl	8000a0c <__aeabi_dcmpgt>
 800ace2:	2800      	cmp	r0, #0
 800ace4:	d163      	bne.n	800adae <_dtoa_r+0x6c6>
 800ace6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800acea:	2000      	movs	r0, #0
 800acec:	49a7      	ldr	r1, [pc, #668]	@ (800af8c <_dtoa_r+0x8a4>)
 800acee:	f7f5 fa45 	bl	800017c <__aeabi_dsub>
 800acf2:	4602      	mov	r2, r0
 800acf4:	460b      	mov	r3, r1
 800acf6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800acfa:	f7f5 fe69 	bl	80009d0 <__aeabi_dcmplt>
 800acfe:	2800      	cmp	r0, #0
 800ad00:	f43f af14 	beq.w	800ab2c <_dtoa_r+0x444>
 800ad04:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800ad06:	1e73      	subs	r3, r6, #1
 800ad08:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ad0a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ad0e:	2b30      	cmp	r3, #48	@ 0x30
 800ad10:	d0f8      	beq.n	800ad04 <_dtoa_r+0x61c>
 800ad12:	4647      	mov	r7, r8
 800ad14:	e03b      	b.n	800ad8e <_dtoa_r+0x6a6>
 800ad16:	4b9e      	ldr	r3, [pc, #632]	@ (800af90 <_dtoa_r+0x8a8>)
 800ad18:	f7f5 fbe8 	bl	80004ec <__aeabi_dmul>
 800ad1c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ad20:	e7bc      	b.n	800ac9c <_dtoa_r+0x5b4>
 800ad22:	4656      	mov	r6, sl
 800ad24:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800ad28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad2c:	4620      	mov	r0, r4
 800ad2e:	4629      	mov	r1, r5
 800ad30:	f7f5 fd06 	bl	8000740 <__aeabi_ddiv>
 800ad34:	f7f5 fe8a 	bl	8000a4c <__aeabi_d2iz>
 800ad38:	4680      	mov	r8, r0
 800ad3a:	f7f5 fb6d 	bl	8000418 <__aeabi_i2d>
 800ad3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad42:	f7f5 fbd3 	bl	80004ec <__aeabi_dmul>
 800ad46:	4602      	mov	r2, r0
 800ad48:	460b      	mov	r3, r1
 800ad4a:	4620      	mov	r0, r4
 800ad4c:	4629      	mov	r1, r5
 800ad4e:	f7f5 fa15 	bl	800017c <__aeabi_dsub>
 800ad52:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ad56:	9d08      	ldr	r5, [sp, #32]
 800ad58:	f806 4b01 	strb.w	r4, [r6], #1
 800ad5c:	eba6 040a 	sub.w	r4, r6, sl
 800ad60:	42a5      	cmp	r5, r4
 800ad62:	4602      	mov	r2, r0
 800ad64:	460b      	mov	r3, r1
 800ad66:	d133      	bne.n	800add0 <_dtoa_r+0x6e8>
 800ad68:	f7f5 fa0a 	bl	8000180 <__adddf3>
 800ad6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad70:	4604      	mov	r4, r0
 800ad72:	460d      	mov	r5, r1
 800ad74:	f7f5 fe4a 	bl	8000a0c <__aeabi_dcmpgt>
 800ad78:	b9c0      	cbnz	r0, 800adac <_dtoa_r+0x6c4>
 800ad7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad7e:	4620      	mov	r0, r4
 800ad80:	4629      	mov	r1, r5
 800ad82:	f7f5 fe1b 	bl	80009bc <__aeabi_dcmpeq>
 800ad86:	b110      	cbz	r0, 800ad8e <_dtoa_r+0x6a6>
 800ad88:	f018 0f01 	tst.w	r8, #1
 800ad8c:	d10e      	bne.n	800adac <_dtoa_r+0x6c4>
 800ad8e:	4648      	mov	r0, r9
 800ad90:	9903      	ldr	r1, [sp, #12]
 800ad92:	f000 fbbb 	bl	800b50c <_Bfree>
 800ad96:	2300      	movs	r3, #0
 800ad98:	7033      	strb	r3, [r6, #0]
 800ad9a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800ad9c:	3701      	adds	r7, #1
 800ad9e:	601f      	str	r7, [r3, #0]
 800ada0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	f000 824b 	beq.w	800b23e <_dtoa_r+0xb56>
 800ada8:	601e      	str	r6, [r3, #0]
 800adaa:	e248      	b.n	800b23e <_dtoa_r+0xb56>
 800adac:	46b8      	mov	r8, r7
 800adae:	4633      	mov	r3, r6
 800adb0:	461e      	mov	r6, r3
 800adb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800adb6:	2a39      	cmp	r2, #57	@ 0x39
 800adb8:	d106      	bne.n	800adc8 <_dtoa_r+0x6e0>
 800adba:	459a      	cmp	sl, r3
 800adbc:	d1f8      	bne.n	800adb0 <_dtoa_r+0x6c8>
 800adbe:	2230      	movs	r2, #48	@ 0x30
 800adc0:	f108 0801 	add.w	r8, r8, #1
 800adc4:	f88a 2000 	strb.w	r2, [sl]
 800adc8:	781a      	ldrb	r2, [r3, #0]
 800adca:	3201      	adds	r2, #1
 800adcc:	701a      	strb	r2, [r3, #0]
 800adce:	e7a0      	b.n	800ad12 <_dtoa_r+0x62a>
 800add0:	2200      	movs	r2, #0
 800add2:	4b6f      	ldr	r3, [pc, #444]	@ (800af90 <_dtoa_r+0x8a8>)
 800add4:	f7f5 fb8a 	bl	80004ec <__aeabi_dmul>
 800add8:	2200      	movs	r2, #0
 800adda:	2300      	movs	r3, #0
 800addc:	4604      	mov	r4, r0
 800adde:	460d      	mov	r5, r1
 800ade0:	f7f5 fdec 	bl	80009bc <__aeabi_dcmpeq>
 800ade4:	2800      	cmp	r0, #0
 800ade6:	d09f      	beq.n	800ad28 <_dtoa_r+0x640>
 800ade8:	e7d1      	b.n	800ad8e <_dtoa_r+0x6a6>
 800adea:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800adec:	2a00      	cmp	r2, #0
 800adee:	f000 80ea 	beq.w	800afc6 <_dtoa_r+0x8de>
 800adf2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800adf4:	2a01      	cmp	r2, #1
 800adf6:	f300 80cd 	bgt.w	800af94 <_dtoa_r+0x8ac>
 800adfa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800adfc:	2a00      	cmp	r2, #0
 800adfe:	f000 80c1 	beq.w	800af84 <_dtoa_r+0x89c>
 800ae02:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ae06:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ae08:	9e04      	ldr	r6, [sp, #16]
 800ae0a:	9a04      	ldr	r2, [sp, #16]
 800ae0c:	2101      	movs	r1, #1
 800ae0e:	441a      	add	r2, r3
 800ae10:	9204      	str	r2, [sp, #16]
 800ae12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae14:	4648      	mov	r0, r9
 800ae16:	441a      	add	r2, r3
 800ae18:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae1a:	f000 fc2b 	bl	800b674 <__i2b>
 800ae1e:	4605      	mov	r5, r0
 800ae20:	b166      	cbz	r6, 800ae3c <_dtoa_r+0x754>
 800ae22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	dd09      	ble.n	800ae3c <_dtoa_r+0x754>
 800ae28:	42b3      	cmp	r3, r6
 800ae2a:	bfa8      	it	ge
 800ae2c:	4633      	movge	r3, r6
 800ae2e:	9a04      	ldr	r2, [sp, #16]
 800ae30:	1af6      	subs	r6, r6, r3
 800ae32:	1ad2      	subs	r2, r2, r3
 800ae34:	9204      	str	r2, [sp, #16]
 800ae36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae38:	1ad3      	subs	r3, r2, r3
 800ae3a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae3e:	b30b      	cbz	r3, 800ae84 <_dtoa_r+0x79c>
 800ae40:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	f000 80c6 	beq.w	800afd4 <_dtoa_r+0x8ec>
 800ae48:	2c00      	cmp	r4, #0
 800ae4a:	f000 80c0 	beq.w	800afce <_dtoa_r+0x8e6>
 800ae4e:	4629      	mov	r1, r5
 800ae50:	4622      	mov	r2, r4
 800ae52:	4648      	mov	r0, r9
 800ae54:	f000 fcc6 	bl	800b7e4 <__pow5mult>
 800ae58:	9a03      	ldr	r2, [sp, #12]
 800ae5a:	4601      	mov	r1, r0
 800ae5c:	4605      	mov	r5, r0
 800ae5e:	4648      	mov	r0, r9
 800ae60:	f000 fc1e 	bl	800b6a0 <__multiply>
 800ae64:	9903      	ldr	r1, [sp, #12]
 800ae66:	4680      	mov	r8, r0
 800ae68:	4648      	mov	r0, r9
 800ae6a:	f000 fb4f 	bl	800b50c <_Bfree>
 800ae6e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae70:	1b1b      	subs	r3, r3, r4
 800ae72:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae74:	f000 80b1 	beq.w	800afda <_dtoa_r+0x8f2>
 800ae78:	4641      	mov	r1, r8
 800ae7a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ae7c:	4648      	mov	r0, r9
 800ae7e:	f000 fcb1 	bl	800b7e4 <__pow5mult>
 800ae82:	9003      	str	r0, [sp, #12]
 800ae84:	2101      	movs	r1, #1
 800ae86:	4648      	mov	r0, r9
 800ae88:	f000 fbf4 	bl	800b674 <__i2b>
 800ae8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae8e:	4604      	mov	r4, r0
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	f000 81d8 	beq.w	800b246 <_dtoa_r+0xb5e>
 800ae96:	461a      	mov	r2, r3
 800ae98:	4601      	mov	r1, r0
 800ae9a:	4648      	mov	r0, r9
 800ae9c:	f000 fca2 	bl	800b7e4 <__pow5mult>
 800aea0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800aea2:	4604      	mov	r4, r0
 800aea4:	2b01      	cmp	r3, #1
 800aea6:	f300 809f 	bgt.w	800afe8 <_dtoa_r+0x900>
 800aeaa:	9b06      	ldr	r3, [sp, #24]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	f040 8097 	bne.w	800afe0 <_dtoa_r+0x8f8>
 800aeb2:	9b07      	ldr	r3, [sp, #28]
 800aeb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	f040 8093 	bne.w	800afe4 <_dtoa_r+0x8fc>
 800aebe:	9b07      	ldr	r3, [sp, #28]
 800aec0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800aec4:	0d1b      	lsrs	r3, r3, #20
 800aec6:	051b      	lsls	r3, r3, #20
 800aec8:	b133      	cbz	r3, 800aed8 <_dtoa_r+0x7f0>
 800aeca:	9b04      	ldr	r3, [sp, #16]
 800aecc:	3301      	adds	r3, #1
 800aece:	9304      	str	r3, [sp, #16]
 800aed0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aed2:	3301      	adds	r3, #1
 800aed4:	9309      	str	r3, [sp, #36]	@ 0x24
 800aed6:	2301      	movs	r3, #1
 800aed8:	930a      	str	r3, [sp, #40]	@ 0x28
 800aeda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aedc:	2b00      	cmp	r3, #0
 800aede:	f000 81b8 	beq.w	800b252 <_dtoa_r+0xb6a>
 800aee2:	6923      	ldr	r3, [r4, #16]
 800aee4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aee8:	6918      	ldr	r0, [r3, #16]
 800aeea:	f000 fb77 	bl	800b5dc <__hi0bits>
 800aeee:	f1c0 0020 	rsb	r0, r0, #32
 800aef2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aef4:	4418      	add	r0, r3
 800aef6:	f010 001f 	ands.w	r0, r0, #31
 800aefa:	f000 8082 	beq.w	800b002 <_dtoa_r+0x91a>
 800aefe:	f1c0 0320 	rsb	r3, r0, #32
 800af02:	2b04      	cmp	r3, #4
 800af04:	dd73      	ble.n	800afee <_dtoa_r+0x906>
 800af06:	9b04      	ldr	r3, [sp, #16]
 800af08:	f1c0 001c 	rsb	r0, r0, #28
 800af0c:	4403      	add	r3, r0
 800af0e:	9304      	str	r3, [sp, #16]
 800af10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af12:	4406      	add	r6, r0
 800af14:	4403      	add	r3, r0
 800af16:	9309      	str	r3, [sp, #36]	@ 0x24
 800af18:	9b04      	ldr	r3, [sp, #16]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	dd05      	ble.n	800af2a <_dtoa_r+0x842>
 800af1e:	461a      	mov	r2, r3
 800af20:	4648      	mov	r0, r9
 800af22:	9903      	ldr	r1, [sp, #12]
 800af24:	f000 fcb8 	bl	800b898 <__lshift>
 800af28:	9003      	str	r0, [sp, #12]
 800af2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	dd05      	ble.n	800af3c <_dtoa_r+0x854>
 800af30:	4621      	mov	r1, r4
 800af32:	461a      	mov	r2, r3
 800af34:	4648      	mov	r0, r9
 800af36:	f000 fcaf 	bl	800b898 <__lshift>
 800af3a:	4604      	mov	r4, r0
 800af3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d061      	beq.n	800b006 <_dtoa_r+0x91e>
 800af42:	4621      	mov	r1, r4
 800af44:	9803      	ldr	r0, [sp, #12]
 800af46:	f000 fd13 	bl	800b970 <__mcmp>
 800af4a:	2800      	cmp	r0, #0
 800af4c:	da5b      	bge.n	800b006 <_dtoa_r+0x91e>
 800af4e:	2300      	movs	r3, #0
 800af50:	220a      	movs	r2, #10
 800af52:	4648      	mov	r0, r9
 800af54:	9903      	ldr	r1, [sp, #12]
 800af56:	f000 fafb 	bl	800b550 <__multadd>
 800af5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af5c:	f107 38ff 	add.w	r8, r7, #4294967295
 800af60:	9003      	str	r0, [sp, #12]
 800af62:	2b00      	cmp	r3, #0
 800af64:	f000 8177 	beq.w	800b256 <_dtoa_r+0xb6e>
 800af68:	4629      	mov	r1, r5
 800af6a:	2300      	movs	r3, #0
 800af6c:	220a      	movs	r2, #10
 800af6e:	4648      	mov	r0, r9
 800af70:	f000 faee 	bl	800b550 <__multadd>
 800af74:	f1bb 0f00 	cmp.w	fp, #0
 800af78:	4605      	mov	r5, r0
 800af7a:	dc6f      	bgt.n	800b05c <_dtoa_r+0x974>
 800af7c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800af7e:	2b02      	cmp	r3, #2
 800af80:	dc49      	bgt.n	800b016 <_dtoa_r+0x92e>
 800af82:	e06b      	b.n	800b05c <_dtoa_r+0x974>
 800af84:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800af86:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800af8a:	e73c      	b.n	800ae06 <_dtoa_r+0x71e>
 800af8c:	3fe00000 	.word	0x3fe00000
 800af90:	40240000 	.word	0x40240000
 800af94:	9b08      	ldr	r3, [sp, #32]
 800af96:	1e5c      	subs	r4, r3, #1
 800af98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af9a:	42a3      	cmp	r3, r4
 800af9c:	db09      	blt.n	800afb2 <_dtoa_r+0x8ca>
 800af9e:	1b1c      	subs	r4, r3, r4
 800afa0:	9b08      	ldr	r3, [sp, #32]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	f6bf af30 	bge.w	800ae08 <_dtoa_r+0x720>
 800afa8:	9b04      	ldr	r3, [sp, #16]
 800afaa:	9a08      	ldr	r2, [sp, #32]
 800afac:	1a9e      	subs	r6, r3, r2
 800afae:	2300      	movs	r3, #0
 800afb0:	e72b      	b.n	800ae0a <_dtoa_r+0x722>
 800afb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afb4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800afb6:	1ae3      	subs	r3, r4, r3
 800afb8:	441a      	add	r2, r3
 800afba:	940a      	str	r4, [sp, #40]	@ 0x28
 800afbc:	9e04      	ldr	r6, [sp, #16]
 800afbe:	2400      	movs	r4, #0
 800afc0:	9b08      	ldr	r3, [sp, #32]
 800afc2:	920e      	str	r2, [sp, #56]	@ 0x38
 800afc4:	e721      	b.n	800ae0a <_dtoa_r+0x722>
 800afc6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800afc8:	9e04      	ldr	r6, [sp, #16]
 800afca:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800afcc:	e728      	b.n	800ae20 <_dtoa_r+0x738>
 800afce:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800afd2:	e751      	b.n	800ae78 <_dtoa_r+0x790>
 800afd4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800afd6:	9903      	ldr	r1, [sp, #12]
 800afd8:	e750      	b.n	800ae7c <_dtoa_r+0x794>
 800afda:	f8cd 800c 	str.w	r8, [sp, #12]
 800afde:	e751      	b.n	800ae84 <_dtoa_r+0x79c>
 800afe0:	2300      	movs	r3, #0
 800afe2:	e779      	b.n	800aed8 <_dtoa_r+0x7f0>
 800afe4:	9b06      	ldr	r3, [sp, #24]
 800afe6:	e777      	b.n	800aed8 <_dtoa_r+0x7f0>
 800afe8:	2300      	movs	r3, #0
 800afea:	930a      	str	r3, [sp, #40]	@ 0x28
 800afec:	e779      	b.n	800aee2 <_dtoa_r+0x7fa>
 800afee:	d093      	beq.n	800af18 <_dtoa_r+0x830>
 800aff0:	9a04      	ldr	r2, [sp, #16]
 800aff2:	331c      	adds	r3, #28
 800aff4:	441a      	add	r2, r3
 800aff6:	9204      	str	r2, [sp, #16]
 800aff8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800affa:	441e      	add	r6, r3
 800affc:	441a      	add	r2, r3
 800affe:	9209      	str	r2, [sp, #36]	@ 0x24
 800b000:	e78a      	b.n	800af18 <_dtoa_r+0x830>
 800b002:	4603      	mov	r3, r0
 800b004:	e7f4      	b.n	800aff0 <_dtoa_r+0x908>
 800b006:	9b08      	ldr	r3, [sp, #32]
 800b008:	46b8      	mov	r8, r7
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	dc20      	bgt.n	800b050 <_dtoa_r+0x968>
 800b00e:	469b      	mov	fp, r3
 800b010:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b012:	2b02      	cmp	r3, #2
 800b014:	dd1e      	ble.n	800b054 <_dtoa_r+0x96c>
 800b016:	f1bb 0f00 	cmp.w	fp, #0
 800b01a:	f47f adb1 	bne.w	800ab80 <_dtoa_r+0x498>
 800b01e:	4621      	mov	r1, r4
 800b020:	465b      	mov	r3, fp
 800b022:	2205      	movs	r2, #5
 800b024:	4648      	mov	r0, r9
 800b026:	f000 fa93 	bl	800b550 <__multadd>
 800b02a:	4601      	mov	r1, r0
 800b02c:	4604      	mov	r4, r0
 800b02e:	9803      	ldr	r0, [sp, #12]
 800b030:	f000 fc9e 	bl	800b970 <__mcmp>
 800b034:	2800      	cmp	r0, #0
 800b036:	f77f ada3 	ble.w	800ab80 <_dtoa_r+0x498>
 800b03a:	4656      	mov	r6, sl
 800b03c:	2331      	movs	r3, #49	@ 0x31
 800b03e:	f108 0801 	add.w	r8, r8, #1
 800b042:	f806 3b01 	strb.w	r3, [r6], #1
 800b046:	e59f      	b.n	800ab88 <_dtoa_r+0x4a0>
 800b048:	46b8      	mov	r8, r7
 800b04a:	9c08      	ldr	r4, [sp, #32]
 800b04c:	4625      	mov	r5, r4
 800b04e:	e7f4      	b.n	800b03a <_dtoa_r+0x952>
 800b050:	f8dd b020 	ldr.w	fp, [sp, #32]
 800b054:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b056:	2b00      	cmp	r3, #0
 800b058:	f000 8101 	beq.w	800b25e <_dtoa_r+0xb76>
 800b05c:	2e00      	cmp	r6, #0
 800b05e:	dd05      	ble.n	800b06c <_dtoa_r+0x984>
 800b060:	4629      	mov	r1, r5
 800b062:	4632      	mov	r2, r6
 800b064:	4648      	mov	r0, r9
 800b066:	f000 fc17 	bl	800b898 <__lshift>
 800b06a:	4605      	mov	r5, r0
 800b06c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d05c      	beq.n	800b12c <_dtoa_r+0xa44>
 800b072:	4648      	mov	r0, r9
 800b074:	6869      	ldr	r1, [r5, #4]
 800b076:	f000 fa09 	bl	800b48c <_Balloc>
 800b07a:	4606      	mov	r6, r0
 800b07c:	b928      	cbnz	r0, 800b08a <_dtoa_r+0x9a2>
 800b07e:	4602      	mov	r2, r0
 800b080:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b084:	4b80      	ldr	r3, [pc, #512]	@ (800b288 <_dtoa_r+0xba0>)
 800b086:	f7ff bb43 	b.w	800a710 <_dtoa_r+0x28>
 800b08a:	692a      	ldr	r2, [r5, #16]
 800b08c:	f105 010c 	add.w	r1, r5, #12
 800b090:	3202      	adds	r2, #2
 800b092:	0092      	lsls	r2, r2, #2
 800b094:	300c      	adds	r0, #12
 800b096:	f001 f961 	bl	800c35c <memcpy>
 800b09a:	2201      	movs	r2, #1
 800b09c:	4631      	mov	r1, r6
 800b09e:	4648      	mov	r0, r9
 800b0a0:	f000 fbfa 	bl	800b898 <__lshift>
 800b0a4:	462f      	mov	r7, r5
 800b0a6:	4605      	mov	r5, r0
 800b0a8:	f10a 0301 	add.w	r3, sl, #1
 800b0ac:	9304      	str	r3, [sp, #16]
 800b0ae:	eb0a 030b 	add.w	r3, sl, fp
 800b0b2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b0b4:	9b06      	ldr	r3, [sp, #24]
 800b0b6:	f003 0301 	and.w	r3, r3, #1
 800b0ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0bc:	9b04      	ldr	r3, [sp, #16]
 800b0be:	4621      	mov	r1, r4
 800b0c0:	9803      	ldr	r0, [sp, #12]
 800b0c2:	f103 3bff 	add.w	fp, r3, #4294967295
 800b0c6:	f7ff fa86 	bl	800a5d6 <quorem>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	4639      	mov	r1, r7
 800b0ce:	3330      	adds	r3, #48	@ 0x30
 800b0d0:	9006      	str	r0, [sp, #24]
 800b0d2:	9803      	ldr	r0, [sp, #12]
 800b0d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b0d6:	f000 fc4b 	bl	800b970 <__mcmp>
 800b0da:	462a      	mov	r2, r5
 800b0dc:	9008      	str	r0, [sp, #32]
 800b0de:	4621      	mov	r1, r4
 800b0e0:	4648      	mov	r0, r9
 800b0e2:	f000 fc61 	bl	800b9a8 <__mdiff>
 800b0e6:	68c2      	ldr	r2, [r0, #12]
 800b0e8:	4606      	mov	r6, r0
 800b0ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b0ec:	bb02      	cbnz	r2, 800b130 <_dtoa_r+0xa48>
 800b0ee:	4601      	mov	r1, r0
 800b0f0:	9803      	ldr	r0, [sp, #12]
 800b0f2:	f000 fc3d 	bl	800b970 <__mcmp>
 800b0f6:	4602      	mov	r2, r0
 800b0f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b0fa:	4631      	mov	r1, r6
 800b0fc:	4648      	mov	r0, r9
 800b0fe:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800b102:	f000 fa03 	bl	800b50c <_Bfree>
 800b106:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b108:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b10a:	9e04      	ldr	r6, [sp, #16]
 800b10c:	ea42 0103 	orr.w	r1, r2, r3
 800b110:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b112:	4319      	orrs	r1, r3
 800b114:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b116:	d10d      	bne.n	800b134 <_dtoa_r+0xa4c>
 800b118:	2b39      	cmp	r3, #57	@ 0x39
 800b11a:	d027      	beq.n	800b16c <_dtoa_r+0xa84>
 800b11c:	9a08      	ldr	r2, [sp, #32]
 800b11e:	2a00      	cmp	r2, #0
 800b120:	dd01      	ble.n	800b126 <_dtoa_r+0xa3e>
 800b122:	9b06      	ldr	r3, [sp, #24]
 800b124:	3331      	adds	r3, #49	@ 0x31
 800b126:	f88b 3000 	strb.w	r3, [fp]
 800b12a:	e52e      	b.n	800ab8a <_dtoa_r+0x4a2>
 800b12c:	4628      	mov	r0, r5
 800b12e:	e7b9      	b.n	800b0a4 <_dtoa_r+0x9bc>
 800b130:	2201      	movs	r2, #1
 800b132:	e7e2      	b.n	800b0fa <_dtoa_r+0xa12>
 800b134:	9908      	ldr	r1, [sp, #32]
 800b136:	2900      	cmp	r1, #0
 800b138:	db04      	blt.n	800b144 <_dtoa_r+0xa5c>
 800b13a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800b13c:	4301      	orrs	r1, r0
 800b13e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b140:	4301      	orrs	r1, r0
 800b142:	d120      	bne.n	800b186 <_dtoa_r+0xa9e>
 800b144:	2a00      	cmp	r2, #0
 800b146:	ddee      	ble.n	800b126 <_dtoa_r+0xa3e>
 800b148:	2201      	movs	r2, #1
 800b14a:	9903      	ldr	r1, [sp, #12]
 800b14c:	4648      	mov	r0, r9
 800b14e:	9304      	str	r3, [sp, #16]
 800b150:	f000 fba2 	bl	800b898 <__lshift>
 800b154:	4621      	mov	r1, r4
 800b156:	9003      	str	r0, [sp, #12]
 800b158:	f000 fc0a 	bl	800b970 <__mcmp>
 800b15c:	2800      	cmp	r0, #0
 800b15e:	9b04      	ldr	r3, [sp, #16]
 800b160:	dc02      	bgt.n	800b168 <_dtoa_r+0xa80>
 800b162:	d1e0      	bne.n	800b126 <_dtoa_r+0xa3e>
 800b164:	07da      	lsls	r2, r3, #31
 800b166:	d5de      	bpl.n	800b126 <_dtoa_r+0xa3e>
 800b168:	2b39      	cmp	r3, #57	@ 0x39
 800b16a:	d1da      	bne.n	800b122 <_dtoa_r+0xa3a>
 800b16c:	2339      	movs	r3, #57	@ 0x39
 800b16e:	f88b 3000 	strb.w	r3, [fp]
 800b172:	4633      	mov	r3, r6
 800b174:	461e      	mov	r6, r3
 800b176:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b17a:	3b01      	subs	r3, #1
 800b17c:	2a39      	cmp	r2, #57	@ 0x39
 800b17e:	d04e      	beq.n	800b21e <_dtoa_r+0xb36>
 800b180:	3201      	adds	r2, #1
 800b182:	701a      	strb	r2, [r3, #0]
 800b184:	e501      	b.n	800ab8a <_dtoa_r+0x4a2>
 800b186:	2a00      	cmp	r2, #0
 800b188:	dd03      	ble.n	800b192 <_dtoa_r+0xaaa>
 800b18a:	2b39      	cmp	r3, #57	@ 0x39
 800b18c:	d0ee      	beq.n	800b16c <_dtoa_r+0xa84>
 800b18e:	3301      	adds	r3, #1
 800b190:	e7c9      	b.n	800b126 <_dtoa_r+0xa3e>
 800b192:	9a04      	ldr	r2, [sp, #16]
 800b194:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b196:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b19a:	428a      	cmp	r2, r1
 800b19c:	d028      	beq.n	800b1f0 <_dtoa_r+0xb08>
 800b19e:	2300      	movs	r3, #0
 800b1a0:	220a      	movs	r2, #10
 800b1a2:	9903      	ldr	r1, [sp, #12]
 800b1a4:	4648      	mov	r0, r9
 800b1a6:	f000 f9d3 	bl	800b550 <__multadd>
 800b1aa:	42af      	cmp	r7, r5
 800b1ac:	9003      	str	r0, [sp, #12]
 800b1ae:	f04f 0300 	mov.w	r3, #0
 800b1b2:	f04f 020a 	mov.w	r2, #10
 800b1b6:	4639      	mov	r1, r7
 800b1b8:	4648      	mov	r0, r9
 800b1ba:	d107      	bne.n	800b1cc <_dtoa_r+0xae4>
 800b1bc:	f000 f9c8 	bl	800b550 <__multadd>
 800b1c0:	4607      	mov	r7, r0
 800b1c2:	4605      	mov	r5, r0
 800b1c4:	9b04      	ldr	r3, [sp, #16]
 800b1c6:	3301      	adds	r3, #1
 800b1c8:	9304      	str	r3, [sp, #16]
 800b1ca:	e777      	b.n	800b0bc <_dtoa_r+0x9d4>
 800b1cc:	f000 f9c0 	bl	800b550 <__multadd>
 800b1d0:	4629      	mov	r1, r5
 800b1d2:	4607      	mov	r7, r0
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	220a      	movs	r2, #10
 800b1d8:	4648      	mov	r0, r9
 800b1da:	f000 f9b9 	bl	800b550 <__multadd>
 800b1de:	4605      	mov	r5, r0
 800b1e0:	e7f0      	b.n	800b1c4 <_dtoa_r+0xadc>
 800b1e2:	f1bb 0f00 	cmp.w	fp, #0
 800b1e6:	bfcc      	ite	gt
 800b1e8:	465e      	movgt	r6, fp
 800b1ea:	2601      	movle	r6, #1
 800b1ec:	2700      	movs	r7, #0
 800b1ee:	4456      	add	r6, sl
 800b1f0:	2201      	movs	r2, #1
 800b1f2:	9903      	ldr	r1, [sp, #12]
 800b1f4:	4648      	mov	r0, r9
 800b1f6:	9304      	str	r3, [sp, #16]
 800b1f8:	f000 fb4e 	bl	800b898 <__lshift>
 800b1fc:	4621      	mov	r1, r4
 800b1fe:	9003      	str	r0, [sp, #12]
 800b200:	f000 fbb6 	bl	800b970 <__mcmp>
 800b204:	2800      	cmp	r0, #0
 800b206:	dcb4      	bgt.n	800b172 <_dtoa_r+0xa8a>
 800b208:	d102      	bne.n	800b210 <_dtoa_r+0xb28>
 800b20a:	9b04      	ldr	r3, [sp, #16]
 800b20c:	07db      	lsls	r3, r3, #31
 800b20e:	d4b0      	bmi.n	800b172 <_dtoa_r+0xa8a>
 800b210:	4633      	mov	r3, r6
 800b212:	461e      	mov	r6, r3
 800b214:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b218:	2a30      	cmp	r2, #48	@ 0x30
 800b21a:	d0fa      	beq.n	800b212 <_dtoa_r+0xb2a>
 800b21c:	e4b5      	b.n	800ab8a <_dtoa_r+0x4a2>
 800b21e:	459a      	cmp	sl, r3
 800b220:	d1a8      	bne.n	800b174 <_dtoa_r+0xa8c>
 800b222:	2331      	movs	r3, #49	@ 0x31
 800b224:	f108 0801 	add.w	r8, r8, #1
 800b228:	f88a 3000 	strb.w	r3, [sl]
 800b22c:	e4ad      	b.n	800ab8a <_dtoa_r+0x4a2>
 800b22e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b230:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b28c <_dtoa_r+0xba4>
 800b234:	b11b      	cbz	r3, 800b23e <_dtoa_r+0xb56>
 800b236:	f10a 0308 	add.w	r3, sl, #8
 800b23a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b23c:	6013      	str	r3, [r2, #0]
 800b23e:	4650      	mov	r0, sl
 800b240:	b017      	add	sp, #92	@ 0x5c
 800b242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b246:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b248:	2b01      	cmp	r3, #1
 800b24a:	f77f ae2e 	ble.w	800aeaa <_dtoa_r+0x7c2>
 800b24e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b250:	930a      	str	r3, [sp, #40]	@ 0x28
 800b252:	2001      	movs	r0, #1
 800b254:	e64d      	b.n	800aef2 <_dtoa_r+0x80a>
 800b256:	f1bb 0f00 	cmp.w	fp, #0
 800b25a:	f77f aed9 	ble.w	800b010 <_dtoa_r+0x928>
 800b25e:	4656      	mov	r6, sl
 800b260:	4621      	mov	r1, r4
 800b262:	9803      	ldr	r0, [sp, #12]
 800b264:	f7ff f9b7 	bl	800a5d6 <quorem>
 800b268:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b26c:	f806 3b01 	strb.w	r3, [r6], #1
 800b270:	eba6 020a 	sub.w	r2, r6, sl
 800b274:	4593      	cmp	fp, r2
 800b276:	ddb4      	ble.n	800b1e2 <_dtoa_r+0xafa>
 800b278:	2300      	movs	r3, #0
 800b27a:	220a      	movs	r2, #10
 800b27c:	4648      	mov	r0, r9
 800b27e:	9903      	ldr	r1, [sp, #12]
 800b280:	f000 f966 	bl	800b550 <__multadd>
 800b284:	9003      	str	r0, [sp, #12]
 800b286:	e7eb      	b.n	800b260 <_dtoa_r+0xb78>
 800b288:	0800cb46 	.word	0x0800cb46
 800b28c:	0800caca 	.word	0x0800caca

0800b290 <_free_r>:
 800b290:	b538      	push	{r3, r4, r5, lr}
 800b292:	4605      	mov	r5, r0
 800b294:	2900      	cmp	r1, #0
 800b296:	d040      	beq.n	800b31a <_free_r+0x8a>
 800b298:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b29c:	1f0c      	subs	r4, r1, #4
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	bfb8      	it	lt
 800b2a2:	18e4      	addlt	r4, r4, r3
 800b2a4:	f000 f8e6 	bl	800b474 <__malloc_lock>
 800b2a8:	4a1c      	ldr	r2, [pc, #112]	@ (800b31c <_free_r+0x8c>)
 800b2aa:	6813      	ldr	r3, [r2, #0]
 800b2ac:	b933      	cbnz	r3, 800b2bc <_free_r+0x2c>
 800b2ae:	6063      	str	r3, [r4, #4]
 800b2b0:	6014      	str	r4, [r2, #0]
 800b2b2:	4628      	mov	r0, r5
 800b2b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b2b8:	f000 b8e2 	b.w	800b480 <__malloc_unlock>
 800b2bc:	42a3      	cmp	r3, r4
 800b2be:	d908      	bls.n	800b2d2 <_free_r+0x42>
 800b2c0:	6820      	ldr	r0, [r4, #0]
 800b2c2:	1821      	adds	r1, r4, r0
 800b2c4:	428b      	cmp	r3, r1
 800b2c6:	bf01      	itttt	eq
 800b2c8:	6819      	ldreq	r1, [r3, #0]
 800b2ca:	685b      	ldreq	r3, [r3, #4]
 800b2cc:	1809      	addeq	r1, r1, r0
 800b2ce:	6021      	streq	r1, [r4, #0]
 800b2d0:	e7ed      	b.n	800b2ae <_free_r+0x1e>
 800b2d2:	461a      	mov	r2, r3
 800b2d4:	685b      	ldr	r3, [r3, #4]
 800b2d6:	b10b      	cbz	r3, 800b2dc <_free_r+0x4c>
 800b2d8:	42a3      	cmp	r3, r4
 800b2da:	d9fa      	bls.n	800b2d2 <_free_r+0x42>
 800b2dc:	6811      	ldr	r1, [r2, #0]
 800b2de:	1850      	adds	r0, r2, r1
 800b2e0:	42a0      	cmp	r0, r4
 800b2e2:	d10b      	bne.n	800b2fc <_free_r+0x6c>
 800b2e4:	6820      	ldr	r0, [r4, #0]
 800b2e6:	4401      	add	r1, r0
 800b2e8:	1850      	adds	r0, r2, r1
 800b2ea:	4283      	cmp	r3, r0
 800b2ec:	6011      	str	r1, [r2, #0]
 800b2ee:	d1e0      	bne.n	800b2b2 <_free_r+0x22>
 800b2f0:	6818      	ldr	r0, [r3, #0]
 800b2f2:	685b      	ldr	r3, [r3, #4]
 800b2f4:	4408      	add	r0, r1
 800b2f6:	6010      	str	r0, [r2, #0]
 800b2f8:	6053      	str	r3, [r2, #4]
 800b2fa:	e7da      	b.n	800b2b2 <_free_r+0x22>
 800b2fc:	d902      	bls.n	800b304 <_free_r+0x74>
 800b2fe:	230c      	movs	r3, #12
 800b300:	602b      	str	r3, [r5, #0]
 800b302:	e7d6      	b.n	800b2b2 <_free_r+0x22>
 800b304:	6820      	ldr	r0, [r4, #0]
 800b306:	1821      	adds	r1, r4, r0
 800b308:	428b      	cmp	r3, r1
 800b30a:	bf01      	itttt	eq
 800b30c:	6819      	ldreq	r1, [r3, #0]
 800b30e:	685b      	ldreq	r3, [r3, #4]
 800b310:	1809      	addeq	r1, r1, r0
 800b312:	6021      	streq	r1, [r4, #0]
 800b314:	6063      	str	r3, [r4, #4]
 800b316:	6054      	str	r4, [r2, #4]
 800b318:	e7cb      	b.n	800b2b2 <_free_r+0x22>
 800b31a:	bd38      	pop	{r3, r4, r5, pc}
 800b31c:	200007d0 	.word	0x200007d0

0800b320 <malloc>:
 800b320:	4b02      	ldr	r3, [pc, #8]	@ (800b32c <malloc+0xc>)
 800b322:	4601      	mov	r1, r0
 800b324:	6818      	ldr	r0, [r3, #0]
 800b326:	f000 b825 	b.w	800b374 <_malloc_r>
 800b32a:	bf00      	nop
 800b32c:	20000074 	.word	0x20000074

0800b330 <sbrk_aligned>:
 800b330:	b570      	push	{r4, r5, r6, lr}
 800b332:	4e0f      	ldr	r6, [pc, #60]	@ (800b370 <sbrk_aligned+0x40>)
 800b334:	460c      	mov	r4, r1
 800b336:	6831      	ldr	r1, [r6, #0]
 800b338:	4605      	mov	r5, r0
 800b33a:	b911      	cbnz	r1, 800b342 <sbrk_aligned+0x12>
 800b33c:	f000 fffe 	bl	800c33c <_sbrk_r>
 800b340:	6030      	str	r0, [r6, #0]
 800b342:	4621      	mov	r1, r4
 800b344:	4628      	mov	r0, r5
 800b346:	f000 fff9 	bl	800c33c <_sbrk_r>
 800b34a:	1c43      	adds	r3, r0, #1
 800b34c:	d103      	bne.n	800b356 <sbrk_aligned+0x26>
 800b34e:	f04f 34ff 	mov.w	r4, #4294967295
 800b352:	4620      	mov	r0, r4
 800b354:	bd70      	pop	{r4, r5, r6, pc}
 800b356:	1cc4      	adds	r4, r0, #3
 800b358:	f024 0403 	bic.w	r4, r4, #3
 800b35c:	42a0      	cmp	r0, r4
 800b35e:	d0f8      	beq.n	800b352 <sbrk_aligned+0x22>
 800b360:	1a21      	subs	r1, r4, r0
 800b362:	4628      	mov	r0, r5
 800b364:	f000 ffea 	bl	800c33c <_sbrk_r>
 800b368:	3001      	adds	r0, #1
 800b36a:	d1f2      	bne.n	800b352 <sbrk_aligned+0x22>
 800b36c:	e7ef      	b.n	800b34e <sbrk_aligned+0x1e>
 800b36e:	bf00      	nop
 800b370:	200007cc 	.word	0x200007cc

0800b374 <_malloc_r>:
 800b374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b378:	1ccd      	adds	r5, r1, #3
 800b37a:	f025 0503 	bic.w	r5, r5, #3
 800b37e:	3508      	adds	r5, #8
 800b380:	2d0c      	cmp	r5, #12
 800b382:	bf38      	it	cc
 800b384:	250c      	movcc	r5, #12
 800b386:	2d00      	cmp	r5, #0
 800b388:	4606      	mov	r6, r0
 800b38a:	db01      	blt.n	800b390 <_malloc_r+0x1c>
 800b38c:	42a9      	cmp	r1, r5
 800b38e:	d904      	bls.n	800b39a <_malloc_r+0x26>
 800b390:	230c      	movs	r3, #12
 800b392:	6033      	str	r3, [r6, #0]
 800b394:	2000      	movs	r0, #0
 800b396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b39a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b470 <_malloc_r+0xfc>
 800b39e:	f000 f869 	bl	800b474 <__malloc_lock>
 800b3a2:	f8d8 3000 	ldr.w	r3, [r8]
 800b3a6:	461c      	mov	r4, r3
 800b3a8:	bb44      	cbnz	r4, 800b3fc <_malloc_r+0x88>
 800b3aa:	4629      	mov	r1, r5
 800b3ac:	4630      	mov	r0, r6
 800b3ae:	f7ff ffbf 	bl	800b330 <sbrk_aligned>
 800b3b2:	1c43      	adds	r3, r0, #1
 800b3b4:	4604      	mov	r4, r0
 800b3b6:	d158      	bne.n	800b46a <_malloc_r+0xf6>
 800b3b8:	f8d8 4000 	ldr.w	r4, [r8]
 800b3bc:	4627      	mov	r7, r4
 800b3be:	2f00      	cmp	r7, #0
 800b3c0:	d143      	bne.n	800b44a <_malloc_r+0xd6>
 800b3c2:	2c00      	cmp	r4, #0
 800b3c4:	d04b      	beq.n	800b45e <_malloc_r+0xea>
 800b3c6:	6823      	ldr	r3, [r4, #0]
 800b3c8:	4639      	mov	r1, r7
 800b3ca:	4630      	mov	r0, r6
 800b3cc:	eb04 0903 	add.w	r9, r4, r3
 800b3d0:	f000 ffb4 	bl	800c33c <_sbrk_r>
 800b3d4:	4581      	cmp	r9, r0
 800b3d6:	d142      	bne.n	800b45e <_malloc_r+0xea>
 800b3d8:	6821      	ldr	r1, [r4, #0]
 800b3da:	4630      	mov	r0, r6
 800b3dc:	1a6d      	subs	r5, r5, r1
 800b3de:	4629      	mov	r1, r5
 800b3e0:	f7ff ffa6 	bl	800b330 <sbrk_aligned>
 800b3e4:	3001      	adds	r0, #1
 800b3e6:	d03a      	beq.n	800b45e <_malloc_r+0xea>
 800b3e8:	6823      	ldr	r3, [r4, #0]
 800b3ea:	442b      	add	r3, r5
 800b3ec:	6023      	str	r3, [r4, #0]
 800b3ee:	f8d8 3000 	ldr.w	r3, [r8]
 800b3f2:	685a      	ldr	r2, [r3, #4]
 800b3f4:	bb62      	cbnz	r2, 800b450 <_malloc_r+0xdc>
 800b3f6:	f8c8 7000 	str.w	r7, [r8]
 800b3fa:	e00f      	b.n	800b41c <_malloc_r+0xa8>
 800b3fc:	6822      	ldr	r2, [r4, #0]
 800b3fe:	1b52      	subs	r2, r2, r5
 800b400:	d420      	bmi.n	800b444 <_malloc_r+0xd0>
 800b402:	2a0b      	cmp	r2, #11
 800b404:	d917      	bls.n	800b436 <_malloc_r+0xc2>
 800b406:	1961      	adds	r1, r4, r5
 800b408:	42a3      	cmp	r3, r4
 800b40a:	6025      	str	r5, [r4, #0]
 800b40c:	bf18      	it	ne
 800b40e:	6059      	strne	r1, [r3, #4]
 800b410:	6863      	ldr	r3, [r4, #4]
 800b412:	bf08      	it	eq
 800b414:	f8c8 1000 	streq.w	r1, [r8]
 800b418:	5162      	str	r2, [r4, r5]
 800b41a:	604b      	str	r3, [r1, #4]
 800b41c:	4630      	mov	r0, r6
 800b41e:	f000 f82f 	bl	800b480 <__malloc_unlock>
 800b422:	f104 000b 	add.w	r0, r4, #11
 800b426:	1d23      	adds	r3, r4, #4
 800b428:	f020 0007 	bic.w	r0, r0, #7
 800b42c:	1ac2      	subs	r2, r0, r3
 800b42e:	bf1c      	itt	ne
 800b430:	1a1b      	subne	r3, r3, r0
 800b432:	50a3      	strne	r3, [r4, r2]
 800b434:	e7af      	b.n	800b396 <_malloc_r+0x22>
 800b436:	6862      	ldr	r2, [r4, #4]
 800b438:	42a3      	cmp	r3, r4
 800b43a:	bf0c      	ite	eq
 800b43c:	f8c8 2000 	streq.w	r2, [r8]
 800b440:	605a      	strne	r2, [r3, #4]
 800b442:	e7eb      	b.n	800b41c <_malloc_r+0xa8>
 800b444:	4623      	mov	r3, r4
 800b446:	6864      	ldr	r4, [r4, #4]
 800b448:	e7ae      	b.n	800b3a8 <_malloc_r+0x34>
 800b44a:	463c      	mov	r4, r7
 800b44c:	687f      	ldr	r7, [r7, #4]
 800b44e:	e7b6      	b.n	800b3be <_malloc_r+0x4a>
 800b450:	461a      	mov	r2, r3
 800b452:	685b      	ldr	r3, [r3, #4]
 800b454:	42a3      	cmp	r3, r4
 800b456:	d1fb      	bne.n	800b450 <_malloc_r+0xdc>
 800b458:	2300      	movs	r3, #0
 800b45a:	6053      	str	r3, [r2, #4]
 800b45c:	e7de      	b.n	800b41c <_malloc_r+0xa8>
 800b45e:	230c      	movs	r3, #12
 800b460:	4630      	mov	r0, r6
 800b462:	6033      	str	r3, [r6, #0]
 800b464:	f000 f80c 	bl	800b480 <__malloc_unlock>
 800b468:	e794      	b.n	800b394 <_malloc_r+0x20>
 800b46a:	6005      	str	r5, [r0, #0]
 800b46c:	e7d6      	b.n	800b41c <_malloc_r+0xa8>
 800b46e:	bf00      	nop
 800b470:	200007d0 	.word	0x200007d0

0800b474 <__malloc_lock>:
 800b474:	4801      	ldr	r0, [pc, #4]	@ (800b47c <__malloc_lock+0x8>)
 800b476:	f7ff b89e 	b.w	800a5b6 <__retarget_lock_acquire_recursive>
 800b47a:	bf00      	nop
 800b47c:	200007c8 	.word	0x200007c8

0800b480 <__malloc_unlock>:
 800b480:	4801      	ldr	r0, [pc, #4]	@ (800b488 <__malloc_unlock+0x8>)
 800b482:	f7ff b899 	b.w	800a5b8 <__retarget_lock_release_recursive>
 800b486:	bf00      	nop
 800b488:	200007c8 	.word	0x200007c8

0800b48c <_Balloc>:
 800b48c:	b570      	push	{r4, r5, r6, lr}
 800b48e:	69c6      	ldr	r6, [r0, #28]
 800b490:	4604      	mov	r4, r0
 800b492:	460d      	mov	r5, r1
 800b494:	b976      	cbnz	r6, 800b4b4 <_Balloc+0x28>
 800b496:	2010      	movs	r0, #16
 800b498:	f7ff ff42 	bl	800b320 <malloc>
 800b49c:	4602      	mov	r2, r0
 800b49e:	61e0      	str	r0, [r4, #28]
 800b4a0:	b920      	cbnz	r0, 800b4ac <_Balloc+0x20>
 800b4a2:	216b      	movs	r1, #107	@ 0x6b
 800b4a4:	4b17      	ldr	r3, [pc, #92]	@ (800b504 <_Balloc+0x78>)
 800b4a6:	4818      	ldr	r0, [pc, #96]	@ (800b508 <_Balloc+0x7c>)
 800b4a8:	f000 ff66 	bl	800c378 <__assert_func>
 800b4ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b4b0:	6006      	str	r6, [r0, #0]
 800b4b2:	60c6      	str	r6, [r0, #12]
 800b4b4:	69e6      	ldr	r6, [r4, #28]
 800b4b6:	68f3      	ldr	r3, [r6, #12]
 800b4b8:	b183      	cbz	r3, 800b4dc <_Balloc+0x50>
 800b4ba:	69e3      	ldr	r3, [r4, #28]
 800b4bc:	68db      	ldr	r3, [r3, #12]
 800b4be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b4c2:	b9b8      	cbnz	r0, 800b4f4 <_Balloc+0x68>
 800b4c4:	2101      	movs	r1, #1
 800b4c6:	fa01 f605 	lsl.w	r6, r1, r5
 800b4ca:	1d72      	adds	r2, r6, #5
 800b4cc:	4620      	mov	r0, r4
 800b4ce:	0092      	lsls	r2, r2, #2
 800b4d0:	f000 ff70 	bl	800c3b4 <_calloc_r>
 800b4d4:	b160      	cbz	r0, 800b4f0 <_Balloc+0x64>
 800b4d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b4da:	e00e      	b.n	800b4fa <_Balloc+0x6e>
 800b4dc:	2221      	movs	r2, #33	@ 0x21
 800b4de:	2104      	movs	r1, #4
 800b4e0:	4620      	mov	r0, r4
 800b4e2:	f000 ff67 	bl	800c3b4 <_calloc_r>
 800b4e6:	69e3      	ldr	r3, [r4, #28]
 800b4e8:	60f0      	str	r0, [r6, #12]
 800b4ea:	68db      	ldr	r3, [r3, #12]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d1e4      	bne.n	800b4ba <_Balloc+0x2e>
 800b4f0:	2000      	movs	r0, #0
 800b4f2:	bd70      	pop	{r4, r5, r6, pc}
 800b4f4:	6802      	ldr	r2, [r0, #0]
 800b4f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b500:	e7f7      	b.n	800b4f2 <_Balloc+0x66>
 800b502:	bf00      	nop
 800b504:	0800cad7 	.word	0x0800cad7
 800b508:	0800cb57 	.word	0x0800cb57

0800b50c <_Bfree>:
 800b50c:	b570      	push	{r4, r5, r6, lr}
 800b50e:	69c6      	ldr	r6, [r0, #28]
 800b510:	4605      	mov	r5, r0
 800b512:	460c      	mov	r4, r1
 800b514:	b976      	cbnz	r6, 800b534 <_Bfree+0x28>
 800b516:	2010      	movs	r0, #16
 800b518:	f7ff ff02 	bl	800b320 <malloc>
 800b51c:	4602      	mov	r2, r0
 800b51e:	61e8      	str	r0, [r5, #28]
 800b520:	b920      	cbnz	r0, 800b52c <_Bfree+0x20>
 800b522:	218f      	movs	r1, #143	@ 0x8f
 800b524:	4b08      	ldr	r3, [pc, #32]	@ (800b548 <_Bfree+0x3c>)
 800b526:	4809      	ldr	r0, [pc, #36]	@ (800b54c <_Bfree+0x40>)
 800b528:	f000 ff26 	bl	800c378 <__assert_func>
 800b52c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b530:	6006      	str	r6, [r0, #0]
 800b532:	60c6      	str	r6, [r0, #12]
 800b534:	b13c      	cbz	r4, 800b546 <_Bfree+0x3a>
 800b536:	69eb      	ldr	r3, [r5, #28]
 800b538:	6862      	ldr	r2, [r4, #4]
 800b53a:	68db      	ldr	r3, [r3, #12]
 800b53c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b540:	6021      	str	r1, [r4, #0]
 800b542:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b546:	bd70      	pop	{r4, r5, r6, pc}
 800b548:	0800cad7 	.word	0x0800cad7
 800b54c:	0800cb57 	.word	0x0800cb57

0800b550 <__multadd>:
 800b550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b554:	4607      	mov	r7, r0
 800b556:	460c      	mov	r4, r1
 800b558:	461e      	mov	r6, r3
 800b55a:	2000      	movs	r0, #0
 800b55c:	690d      	ldr	r5, [r1, #16]
 800b55e:	f101 0c14 	add.w	ip, r1, #20
 800b562:	f8dc 3000 	ldr.w	r3, [ip]
 800b566:	3001      	adds	r0, #1
 800b568:	b299      	uxth	r1, r3
 800b56a:	fb02 6101 	mla	r1, r2, r1, r6
 800b56e:	0c1e      	lsrs	r6, r3, #16
 800b570:	0c0b      	lsrs	r3, r1, #16
 800b572:	fb02 3306 	mla	r3, r2, r6, r3
 800b576:	b289      	uxth	r1, r1
 800b578:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b57c:	4285      	cmp	r5, r0
 800b57e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b582:	f84c 1b04 	str.w	r1, [ip], #4
 800b586:	dcec      	bgt.n	800b562 <__multadd+0x12>
 800b588:	b30e      	cbz	r6, 800b5ce <__multadd+0x7e>
 800b58a:	68a3      	ldr	r3, [r4, #8]
 800b58c:	42ab      	cmp	r3, r5
 800b58e:	dc19      	bgt.n	800b5c4 <__multadd+0x74>
 800b590:	6861      	ldr	r1, [r4, #4]
 800b592:	4638      	mov	r0, r7
 800b594:	3101      	adds	r1, #1
 800b596:	f7ff ff79 	bl	800b48c <_Balloc>
 800b59a:	4680      	mov	r8, r0
 800b59c:	b928      	cbnz	r0, 800b5aa <__multadd+0x5a>
 800b59e:	4602      	mov	r2, r0
 800b5a0:	21ba      	movs	r1, #186	@ 0xba
 800b5a2:	4b0c      	ldr	r3, [pc, #48]	@ (800b5d4 <__multadd+0x84>)
 800b5a4:	480c      	ldr	r0, [pc, #48]	@ (800b5d8 <__multadd+0x88>)
 800b5a6:	f000 fee7 	bl	800c378 <__assert_func>
 800b5aa:	6922      	ldr	r2, [r4, #16]
 800b5ac:	f104 010c 	add.w	r1, r4, #12
 800b5b0:	3202      	adds	r2, #2
 800b5b2:	0092      	lsls	r2, r2, #2
 800b5b4:	300c      	adds	r0, #12
 800b5b6:	f000 fed1 	bl	800c35c <memcpy>
 800b5ba:	4621      	mov	r1, r4
 800b5bc:	4638      	mov	r0, r7
 800b5be:	f7ff ffa5 	bl	800b50c <_Bfree>
 800b5c2:	4644      	mov	r4, r8
 800b5c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b5c8:	3501      	adds	r5, #1
 800b5ca:	615e      	str	r6, [r3, #20]
 800b5cc:	6125      	str	r5, [r4, #16]
 800b5ce:	4620      	mov	r0, r4
 800b5d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5d4:	0800cb46 	.word	0x0800cb46
 800b5d8:	0800cb57 	.word	0x0800cb57

0800b5dc <__hi0bits>:
 800b5dc:	4603      	mov	r3, r0
 800b5de:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b5e2:	bf3a      	itte	cc
 800b5e4:	0403      	lslcc	r3, r0, #16
 800b5e6:	2010      	movcc	r0, #16
 800b5e8:	2000      	movcs	r0, #0
 800b5ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b5ee:	bf3c      	itt	cc
 800b5f0:	021b      	lslcc	r3, r3, #8
 800b5f2:	3008      	addcc	r0, #8
 800b5f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b5f8:	bf3c      	itt	cc
 800b5fa:	011b      	lslcc	r3, r3, #4
 800b5fc:	3004      	addcc	r0, #4
 800b5fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b602:	bf3c      	itt	cc
 800b604:	009b      	lslcc	r3, r3, #2
 800b606:	3002      	addcc	r0, #2
 800b608:	2b00      	cmp	r3, #0
 800b60a:	db05      	blt.n	800b618 <__hi0bits+0x3c>
 800b60c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b610:	f100 0001 	add.w	r0, r0, #1
 800b614:	bf08      	it	eq
 800b616:	2020      	moveq	r0, #32
 800b618:	4770      	bx	lr

0800b61a <__lo0bits>:
 800b61a:	6803      	ldr	r3, [r0, #0]
 800b61c:	4602      	mov	r2, r0
 800b61e:	f013 0007 	ands.w	r0, r3, #7
 800b622:	d00b      	beq.n	800b63c <__lo0bits+0x22>
 800b624:	07d9      	lsls	r1, r3, #31
 800b626:	d421      	bmi.n	800b66c <__lo0bits+0x52>
 800b628:	0798      	lsls	r0, r3, #30
 800b62a:	bf49      	itett	mi
 800b62c:	085b      	lsrmi	r3, r3, #1
 800b62e:	089b      	lsrpl	r3, r3, #2
 800b630:	2001      	movmi	r0, #1
 800b632:	6013      	strmi	r3, [r2, #0]
 800b634:	bf5c      	itt	pl
 800b636:	2002      	movpl	r0, #2
 800b638:	6013      	strpl	r3, [r2, #0]
 800b63a:	4770      	bx	lr
 800b63c:	b299      	uxth	r1, r3
 800b63e:	b909      	cbnz	r1, 800b644 <__lo0bits+0x2a>
 800b640:	2010      	movs	r0, #16
 800b642:	0c1b      	lsrs	r3, r3, #16
 800b644:	b2d9      	uxtb	r1, r3
 800b646:	b909      	cbnz	r1, 800b64c <__lo0bits+0x32>
 800b648:	3008      	adds	r0, #8
 800b64a:	0a1b      	lsrs	r3, r3, #8
 800b64c:	0719      	lsls	r1, r3, #28
 800b64e:	bf04      	itt	eq
 800b650:	091b      	lsreq	r3, r3, #4
 800b652:	3004      	addeq	r0, #4
 800b654:	0799      	lsls	r1, r3, #30
 800b656:	bf04      	itt	eq
 800b658:	089b      	lsreq	r3, r3, #2
 800b65a:	3002      	addeq	r0, #2
 800b65c:	07d9      	lsls	r1, r3, #31
 800b65e:	d403      	bmi.n	800b668 <__lo0bits+0x4e>
 800b660:	085b      	lsrs	r3, r3, #1
 800b662:	f100 0001 	add.w	r0, r0, #1
 800b666:	d003      	beq.n	800b670 <__lo0bits+0x56>
 800b668:	6013      	str	r3, [r2, #0]
 800b66a:	4770      	bx	lr
 800b66c:	2000      	movs	r0, #0
 800b66e:	4770      	bx	lr
 800b670:	2020      	movs	r0, #32
 800b672:	4770      	bx	lr

0800b674 <__i2b>:
 800b674:	b510      	push	{r4, lr}
 800b676:	460c      	mov	r4, r1
 800b678:	2101      	movs	r1, #1
 800b67a:	f7ff ff07 	bl	800b48c <_Balloc>
 800b67e:	4602      	mov	r2, r0
 800b680:	b928      	cbnz	r0, 800b68e <__i2b+0x1a>
 800b682:	f240 1145 	movw	r1, #325	@ 0x145
 800b686:	4b04      	ldr	r3, [pc, #16]	@ (800b698 <__i2b+0x24>)
 800b688:	4804      	ldr	r0, [pc, #16]	@ (800b69c <__i2b+0x28>)
 800b68a:	f000 fe75 	bl	800c378 <__assert_func>
 800b68e:	2301      	movs	r3, #1
 800b690:	6144      	str	r4, [r0, #20]
 800b692:	6103      	str	r3, [r0, #16]
 800b694:	bd10      	pop	{r4, pc}
 800b696:	bf00      	nop
 800b698:	0800cb46 	.word	0x0800cb46
 800b69c:	0800cb57 	.word	0x0800cb57

0800b6a0 <__multiply>:
 800b6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6a4:	4617      	mov	r7, r2
 800b6a6:	690a      	ldr	r2, [r1, #16]
 800b6a8:	693b      	ldr	r3, [r7, #16]
 800b6aa:	4689      	mov	r9, r1
 800b6ac:	429a      	cmp	r2, r3
 800b6ae:	bfa2      	ittt	ge
 800b6b0:	463b      	movge	r3, r7
 800b6b2:	460f      	movge	r7, r1
 800b6b4:	4699      	movge	r9, r3
 800b6b6:	693d      	ldr	r5, [r7, #16]
 800b6b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	6879      	ldr	r1, [r7, #4]
 800b6c0:	eb05 060a 	add.w	r6, r5, sl
 800b6c4:	42b3      	cmp	r3, r6
 800b6c6:	b085      	sub	sp, #20
 800b6c8:	bfb8      	it	lt
 800b6ca:	3101      	addlt	r1, #1
 800b6cc:	f7ff fede 	bl	800b48c <_Balloc>
 800b6d0:	b930      	cbnz	r0, 800b6e0 <__multiply+0x40>
 800b6d2:	4602      	mov	r2, r0
 800b6d4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b6d8:	4b40      	ldr	r3, [pc, #256]	@ (800b7dc <__multiply+0x13c>)
 800b6da:	4841      	ldr	r0, [pc, #260]	@ (800b7e0 <__multiply+0x140>)
 800b6dc:	f000 fe4c 	bl	800c378 <__assert_func>
 800b6e0:	f100 0414 	add.w	r4, r0, #20
 800b6e4:	4623      	mov	r3, r4
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b6ec:	4573      	cmp	r3, lr
 800b6ee:	d320      	bcc.n	800b732 <__multiply+0x92>
 800b6f0:	f107 0814 	add.w	r8, r7, #20
 800b6f4:	f109 0114 	add.w	r1, r9, #20
 800b6f8:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b6fc:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b700:	9302      	str	r3, [sp, #8]
 800b702:	1beb      	subs	r3, r5, r7
 800b704:	3b15      	subs	r3, #21
 800b706:	f023 0303 	bic.w	r3, r3, #3
 800b70a:	3304      	adds	r3, #4
 800b70c:	3715      	adds	r7, #21
 800b70e:	42bd      	cmp	r5, r7
 800b710:	bf38      	it	cc
 800b712:	2304      	movcc	r3, #4
 800b714:	9301      	str	r3, [sp, #4]
 800b716:	9b02      	ldr	r3, [sp, #8]
 800b718:	9103      	str	r1, [sp, #12]
 800b71a:	428b      	cmp	r3, r1
 800b71c:	d80c      	bhi.n	800b738 <__multiply+0x98>
 800b71e:	2e00      	cmp	r6, #0
 800b720:	dd03      	ble.n	800b72a <__multiply+0x8a>
 800b722:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b726:	2b00      	cmp	r3, #0
 800b728:	d055      	beq.n	800b7d6 <__multiply+0x136>
 800b72a:	6106      	str	r6, [r0, #16]
 800b72c:	b005      	add	sp, #20
 800b72e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b732:	f843 2b04 	str.w	r2, [r3], #4
 800b736:	e7d9      	b.n	800b6ec <__multiply+0x4c>
 800b738:	f8b1 a000 	ldrh.w	sl, [r1]
 800b73c:	f1ba 0f00 	cmp.w	sl, #0
 800b740:	d01f      	beq.n	800b782 <__multiply+0xe2>
 800b742:	46c4      	mov	ip, r8
 800b744:	46a1      	mov	r9, r4
 800b746:	2700      	movs	r7, #0
 800b748:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b74c:	f8d9 3000 	ldr.w	r3, [r9]
 800b750:	fa1f fb82 	uxth.w	fp, r2
 800b754:	b29b      	uxth	r3, r3
 800b756:	fb0a 330b 	mla	r3, sl, fp, r3
 800b75a:	443b      	add	r3, r7
 800b75c:	f8d9 7000 	ldr.w	r7, [r9]
 800b760:	0c12      	lsrs	r2, r2, #16
 800b762:	0c3f      	lsrs	r7, r7, #16
 800b764:	fb0a 7202 	mla	r2, sl, r2, r7
 800b768:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b76c:	b29b      	uxth	r3, r3
 800b76e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b772:	4565      	cmp	r5, ip
 800b774:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b778:	f849 3b04 	str.w	r3, [r9], #4
 800b77c:	d8e4      	bhi.n	800b748 <__multiply+0xa8>
 800b77e:	9b01      	ldr	r3, [sp, #4]
 800b780:	50e7      	str	r7, [r4, r3]
 800b782:	9b03      	ldr	r3, [sp, #12]
 800b784:	3104      	adds	r1, #4
 800b786:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b78a:	f1b9 0f00 	cmp.w	r9, #0
 800b78e:	d020      	beq.n	800b7d2 <__multiply+0x132>
 800b790:	4647      	mov	r7, r8
 800b792:	46a4      	mov	ip, r4
 800b794:	f04f 0a00 	mov.w	sl, #0
 800b798:	6823      	ldr	r3, [r4, #0]
 800b79a:	f8b7 b000 	ldrh.w	fp, [r7]
 800b79e:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b7a2:	b29b      	uxth	r3, r3
 800b7a4:	fb09 220b 	mla	r2, r9, fp, r2
 800b7a8:	4452      	add	r2, sl
 800b7aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7ae:	f84c 3b04 	str.w	r3, [ip], #4
 800b7b2:	f857 3b04 	ldr.w	r3, [r7], #4
 800b7b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b7ba:	f8bc 3000 	ldrh.w	r3, [ip]
 800b7be:	42bd      	cmp	r5, r7
 800b7c0:	fb09 330a 	mla	r3, r9, sl, r3
 800b7c4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b7c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b7cc:	d8e5      	bhi.n	800b79a <__multiply+0xfa>
 800b7ce:	9a01      	ldr	r2, [sp, #4]
 800b7d0:	50a3      	str	r3, [r4, r2]
 800b7d2:	3404      	adds	r4, #4
 800b7d4:	e79f      	b.n	800b716 <__multiply+0x76>
 800b7d6:	3e01      	subs	r6, #1
 800b7d8:	e7a1      	b.n	800b71e <__multiply+0x7e>
 800b7da:	bf00      	nop
 800b7dc:	0800cb46 	.word	0x0800cb46
 800b7e0:	0800cb57 	.word	0x0800cb57

0800b7e4 <__pow5mult>:
 800b7e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7e8:	4615      	mov	r5, r2
 800b7ea:	f012 0203 	ands.w	r2, r2, #3
 800b7ee:	4607      	mov	r7, r0
 800b7f0:	460e      	mov	r6, r1
 800b7f2:	d007      	beq.n	800b804 <__pow5mult+0x20>
 800b7f4:	4c25      	ldr	r4, [pc, #148]	@ (800b88c <__pow5mult+0xa8>)
 800b7f6:	3a01      	subs	r2, #1
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b7fe:	f7ff fea7 	bl	800b550 <__multadd>
 800b802:	4606      	mov	r6, r0
 800b804:	10ad      	asrs	r5, r5, #2
 800b806:	d03d      	beq.n	800b884 <__pow5mult+0xa0>
 800b808:	69fc      	ldr	r4, [r7, #28]
 800b80a:	b97c      	cbnz	r4, 800b82c <__pow5mult+0x48>
 800b80c:	2010      	movs	r0, #16
 800b80e:	f7ff fd87 	bl	800b320 <malloc>
 800b812:	4602      	mov	r2, r0
 800b814:	61f8      	str	r0, [r7, #28]
 800b816:	b928      	cbnz	r0, 800b824 <__pow5mult+0x40>
 800b818:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b81c:	4b1c      	ldr	r3, [pc, #112]	@ (800b890 <__pow5mult+0xac>)
 800b81e:	481d      	ldr	r0, [pc, #116]	@ (800b894 <__pow5mult+0xb0>)
 800b820:	f000 fdaa 	bl	800c378 <__assert_func>
 800b824:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b828:	6004      	str	r4, [r0, #0]
 800b82a:	60c4      	str	r4, [r0, #12]
 800b82c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b830:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b834:	b94c      	cbnz	r4, 800b84a <__pow5mult+0x66>
 800b836:	f240 2171 	movw	r1, #625	@ 0x271
 800b83a:	4638      	mov	r0, r7
 800b83c:	f7ff ff1a 	bl	800b674 <__i2b>
 800b840:	2300      	movs	r3, #0
 800b842:	4604      	mov	r4, r0
 800b844:	f8c8 0008 	str.w	r0, [r8, #8]
 800b848:	6003      	str	r3, [r0, #0]
 800b84a:	f04f 0900 	mov.w	r9, #0
 800b84e:	07eb      	lsls	r3, r5, #31
 800b850:	d50a      	bpl.n	800b868 <__pow5mult+0x84>
 800b852:	4631      	mov	r1, r6
 800b854:	4622      	mov	r2, r4
 800b856:	4638      	mov	r0, r7
 800b858:	f7ff ff22 	bl	800b6a0 <__multiply>
 800b85c:	4680      	mov	r8, r0
 800b85e:	4631      	mov	r1, r6
 800b860:	4638      	mov	r0, r7
 800b862:	f7ff fe53 	bl	800b50c <_Bfree>
 800b866:	4646      	mov	r6, r8
 800b868:	106d      	asrs	r5, r5, #1
 800b86a:	d00b      	beq.n	800b884 <__pow5mult+0xa0>
 800b86c:	6820      	ldr	r0, [r4, #0]
 800b86e:	b938      	cbnz	r0, 800b880 <__pow5mult+0x9c>
 800b870:	4622      	mov	r2, r4
 800b872:	4621      	mov	r1, r4
 800b874:	4638      	mov	r0, r7
 800b876:	f7ff ff13 	bl	800b6a0 <__multiply>
 800b87a:	6020      	str	r0, [r4, #0]
 800b87c:	f8c0 9000 	str.w	r9, [r0]
 800b880:	4604      	mov	r4, r0
 800b882:	e7e4      	b.n	800b84e <__pow5mult+0x6a>
 800b884:	4630      	mov	r0, r6
 800b886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b88a:	bf00      	nop
 800b88c:	0800cc08 	.word	0x0800cc08
 800b890:	0800cad7 	.word	0x0800cad7
 800b894:	0800cb57 	.word	0x0800cb57

0800b898 <__lshift>:
 800b898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b89c:	460c      	mov	r4, r1
 800b89e:	4607      	mov	r7, r0
 800b8a0:	4691      	mov	r9, r2
 800b8a2:	6923      	ldr	r3, [r4, #16]
 800b8a4:	6849      	ldr	r1, [r1, #4]
 800b8a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b8aa:	68a3      	ldr	r3, [r4, #8]
 800b8ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b8b0:	f108 0601 	add.w	r6, r8, #1
 800b8b4:	42b3      	cmp	r3, r6
 800b8b6:	db0b      	blt.n	800b8d0 <__lshift+0x38>
 800b8b8:	4638      	mov	r0, r7
 800b8ba:	f7ff fde7 	bl	800b48c <_Balloc>
 800b8be:	4605      	mov	r5, r0
 800b8c0:	b948      	cbnz	r0, 800b8d6 <__lshift+0x3e>
 800b8c2:	4602      	mov	r2, r0
 800b8c4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b8c8:	4b27      	ldr	r3, [pc, #156]	@ (800b968 <__lshift+0xd0>)
 800b8ca:	4828      	ldr	r0, [pc, #160]	@ (800b96c <__lshift+0xd4>)
 800b8cc:	f000 fd54 	bl	800c378 <__assert_func>
 800b8d0:	3101      	adds	r1, #1
 800b8d2:	005b      	lsls	r3, r3, #1
 800b8d4:	e7ee      	b.n	800b8b4 <__lshift+0x1c>
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	f100 0114 	add.w	r1, r0, #20
 800b8dc:	f100 0210 	add.w	r2, r0, #16
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	4553      	cmp	r3, sl
 800b8e4:	db33      	blt.n	800b94e <__lshift+0xb6>
 800b8e6:	6920      	ldr	r0, [r4, #16]
 800b8e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b8ec:	f104 0314 	add.w	r3, r4, #20
 800b8f0:	f019 091f 	ands.w	r9, r9, #31
 800b8f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b8f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b8fc:	d02b      	beq.n	800b956 <__lshift+0xbe>
 800b8fe:	468a      	mov	sl, r1
 800b900:	2200      	movs	r2, #0
 800b902:	f1c9 0e20 	rsb	lr, r9, #32
 800b906:	6818      	ldr	r0, [r3, #0]
 800b908:	fa00 f009 	lsl.w	r0, r0, r9
 800b90c:	4310      	orrs	r0, r2
 800b90e:	f84a 0b04 	str.w	r0, [sl], #4
 800b912:	f853 2b04 	ldr.w	r2, [r3], #4
 800b916:	459c      	cmp	ip, r3
 800b918:	fa22 f20e 	lsr.w	r2, r2, lr
 800b91c:	d8f3      	bhi.n	800b906 <__lshift+0x6e>
 800b91e:	ebac 0304 	sub.w	r3, ip, r4
 800b922:	3b15      	subs	r3, #21
 800b924:	f023 0303 	bic.w	r3, r3, #3
 800b928:	3304      	adds	r3, #4
 800b92a:	f104 0015 	add.w	r0, r4, #21
 800b92e:	4560      	cmp	r0, ip
 800b930:	bf88      	it	hi
 800b932:	2304      	movhi	r3, #4
 800b934:	50ca      	str	r2, [r1, r3]
 800b936:	b10a      	cbz	r2, 800b93c <__lshift+0xa4>
 800b938:	f108 0602 	add.w	r6, r8, #2
 800b93c:	3e01      	subs	r6, #1
 800b93e:	4638      	mov	r0, r7
 800b940:	4621      	mov	r1, r4
 800b942:	612e      	str	r6, [r5, #16]
 800b944:	f7ff fde2 	bl	800b50c <_Bfree>
 800b948:	4628      	mov	r0, r5
 800b94a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b94e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b952:	3301      	adds	r3, #1
 800b954:	e7c5      	b.n	800b8e2 <__lshift+0x4a>
 800b956:	3904      	subs	r1, #4
 800b958:	f853 2b04 	ldr.w	r2, [r3], #4
 800b95c:	459c      	cmp	ip, r3
 800b95e:	f841 2f04 	str.w	r2, [r1, #4]!
 800b962:	d8f9      	bhi.n	800b958 <__lshift+0xc0>
 800b964:	e7ea      	b.n	800b93c <__lshift+0xa4>
 800b966:	bf00      	nop
 800b968:	0800cb46 	.word	0x0800cb46
 800b96c:	0800cb57 	.word	0x0800cb57

0800b970 <__mcmp>:
 800b970:	4603      	mov	r3, r0
 800b972:	690a      	ldr	r2, [r1, #16]
 800b974:	6900      	ldr	r0, [r0, #16]
 800b976:	b530      	push	{r4, r5, lr}
 800b978:	1a80      	subs	r0, r0, r2
 800b97a:	d10e      	bne.n	800b99a <__mcmp+0x2a>
 800b97c:	3314      	adds	r3, #20
 800b97e:	3114      	adds	r1, #20
 800b980:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b984:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b988:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b98c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b990:	4295      	cmp	r5, r2
 800b992:	d003      	beq.n	800b99c <__mcmp+0x2c>
 800b994:	d205      	bcs.n	800b9a2 <__mcmp+0x32>
 800b996:	f04f 30ff 	mov.w	r0, #4294967295
 800b99a:	bd30      	pop	{r4, r5, pc}
 800b99c:	42a3      	cmp	r3, r4
 800b99e:	d3f3      	bcc.n	800b988 <__mcmp+0x18>
 800b9a0:	e7fb      	b.n	800b99a <__mcmp+0x2a>
 800b9a2:	2001      	movs	r0, #1
 800b9a4:	e7f9      	b.n	800b99a <__mcmp+0x2a>
	...

0800b9a8 <__mdiff>:
 800b9a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9ac:	4689      	mov	r9, r1
 800b9ae:	4606      	mov	r6, r0
 800b9b0:	4611      	mov	r1, r2
 800b9b2:	4648      	mov	r0, r9
 800b9b4:	4614      	mov	r4, r2
 800b9b6:	f7ff ffdb 	bl	800b970 <__mcmp>
 800b9ba:	1e05      	subs	r5, r0, #0
 800b9bc:	d112      	bne.n	800b9e4 <__mdiff+0x3c>
 800b9be:	4629      	mov	r1, r5
 800b9c0:	4630      	mov	r0, r6
 800b9c2:	f7ff fd63 	bl	800b48c <_Balloc>
 800b9c6:	4602      	mov	r2, r0
 800b9c8:	b928      	cbnz	r0, 800b9d6 <__mdiff+0x2e>
 800b9ca:	f240 2137 	movw	r1, #567	@ 0x237
 800b9ce:	4b3e      	ldr	r3, [pc, #248]	@ (800bac8 <__mdiff+0x120>)
 800b9d0:	483e      	ldr	r0, [pc, #248]	@ (800bacc <__mdiff+0x124>)
 800b9d2:	f000 fcd1 	bl	800c378 <__assert_func>
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b9dc:	4610      	mov	r0, r2
 800b9de:	b003      	add	sp, #12
 800b9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9e4:	bfbc      	itt	lt
 800b9e6:	464b      	movlt	r3, r9
 800b9e8:	46a1      	movlt	r9, r4
 800b9ea:	4630      	mov	r0, r6
 800b9ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b9f0:	bfba      	itte	lt
 800b9f2:	461c      	movlt	r4, r3
 800b9f4:	2501      	movlt	r5, #1
 800b9f6:	2500      	movge	r5, #0
 800b9f8:	f7ff fd48 	bl	800b48c <_Balloc>
 800b9fc:	4602      	mov	r2, r0
 800b9fe:	b918      	cbnz	r0, 800ba08 <__mdiff+0x60>
 800ba00:	f240 2145 	movw	r1, #581	@ 0x245
 800ba04:	4b30      	ldr	r3, [pc, #192]	@ (800bac8 <__mdiff+0x120>)
 800ba06:	e7e3      	b.n	800b9d0 <__mdiff+0x28>
 800ba08:	f100 0b14 	add.w	fp, r0, #20
 800ba0c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ba10:	f109 0310 	add.w	r3, r9, #16
 800ba14:	60c5      	str	r5, [r0, #12]
 800ba16:	f04f 0c00 	mov.w	ip, #0
 800ba1a:	f109 0514 	add.w	r5, r9, #20
 800ba1e:	46d9      	mov	r9, fp
 800ba20:	6926      	ldr	r6, [r4, #16]
 800ba22:	f104 0e14 	add.w	lr, r4, #20
 800ba26:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ba2a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ba2e:	9301      	str	r3, [sp, #4]
 800ba30:	9b01      	ldr	r3, [sp, #4]
 800ba32:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ba36:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ba3a:	b281      	uxth	r1, r0
 800ba3c:	9301      	str	r3, [sp, #4]
 800ba3e:	fa1f f38a 	uxth.w	r3, sl
 800ba42:	1a5b      	subs	r3, r3, r1
 800ba44:	0c00      	lsrs	r0, r0, #16
 800ba46:	4463      	add	r3, ip
 800ba48:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ba4c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ba50:	b29b      	uxth	r3, r3
 800ba52:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ba56:	4576      	cmp	r6, lr
 800ba58:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ba5c:	f849 3b04 	str.w	r3, [r9], #4
 800ba60:	d8e6      	bhi.n	800ba30 <__mdiff+0x88>
 800ba62:	1b33      	subs	r3, r6, r4
 800ba64:	3b15      	subs	r3, #21
 800ba66:	f023 0303 	bic.w	r3, r3, #3
 800ba6a:	3415      	adds	r4, #21
 800ba6c:	3304      	adds	r3, #4
 800ba6e:	42a6      	cmp	r6, r4
 800ba70:	bf38      	it	cc
 800ba72:	2304      	movcc	r3, #4
 800ba74:	441d      	add	r5, r3
 800ba76:	445b      	add	r3, fp
 800ba78:	461e      	mov	r6, r3
 800ba7a:	462c      	mov	r4, r5
 800ba7c:	4544      	cmp	r4, r8
 800ba7e:	d30e      	bcc.n	800ba9e <__mdiff+0xf6>
 800ba80:	f108 0103 	add.w	r1, r8, #3
 800ba84:	1b49      	subs	r1, r1, r5
 800ba86:	f021 0103 	bic.w	r1, r1, #3
 800ba8a:	3d03      	subs	r5, #3
 800ba8c:	45a8      	cmp	r8, r5
 800ba8e:	bf38      	it	cc
 800ba90:	2100      	movcc	r1, #0
 800ba92:	440b      	add	r3, r1
 800ba94:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ba98:	b199      	cbz	r1, 800bac2 <__mdiff+0x11a>
 800ba9a:	6117      	str	r7, [r2, #16]
 800ba9c:	e79e      	b.n	800b9dc <__mdiff+0x34>
 800ba9e:	46e6      	mov	lr, ip
 800baa0:	f854 1b04 	ldr.w	r1, [r4], #4
 800baa4:	fa1f fc81 	uxth.w	ip, r1
 800baa8:	44f4      	add	ip, lr
 800baaa:	0c08      	lsrs	r0, r1, #16
 800baac:	4471      	add	r1, lr
 800baae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bab2:	b289      	uxth	r1, r1
 800bab4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bab8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800babc:	f846 1b04 	str.w	r1, [r6], #4
 800bac0:	e7dc      	b.n	800ba7c <__mdiff+0xd4>
 800bac2:	3f01      	subs	r7, #1
 800bac4:	e7e6      	b.n	800ba94 <__mdiff+0xec>
 800bac6:	bf00      	nop
 800bac8:	0800cb46 	.word	0x0800cb46
 800bacc:	0800cb57 	.word	0x0800cb57

0800bad0 <__d2b>:
 800bad0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800bad4:	2101      	movs	r1, #1
 800bad6:	4690      	mov	r8, r2
 800bad8:	4699      	mov	r9, r3
 800bada:	9e08      	ldr	r6, [sp, #32]
 800badc:	f7ff fcd6 	bl	800b48c <_Balloc>
 800bae0:	4604      	mov	r4, r0
 800bae2:	b930      	cbnz	r0, 800baf2 <__d2b+0x22>
 800bae4:	4602      	mov	r2, r0
 800bae6:	f240 310f 	movw	r1, #783	@ 0x30f
 800baea:	4b23      	ldr	r3, [pc, #140]	@ (800bb78 <__d2b+0xa8>)
 800baec:	4823      	ldr	r0, [pc, #140]	@ (800bb7c <__d2b+0xac>)
 800baee:	f000 fc43 	bl	800c378 <__assert_func>
 800baf2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800baf6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bafa:	b10d      	cbz	r5, 800bb00 <__d2b+0x30>
 800bafc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bb00:	9301      	str	r3, [sp, #4]
 800bb02:	f1b8 0300 	subs.w	r3, r8, #0
 800bb06:	d024      	beq.n	800bb52 <__d2b+0x82>
 800bb08:	4668      	mov	r0, sp
 800bb0a:	9300      	str	r3, [sp, #0]
 800bb0c:	f7ff fd85 	bl	800b61a <__lo0bits>
 800bb10:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bb14:	b1d8      	cbz	r0, 800bb4e <__d2b+0x7e>
 800bb16:	f1c0 0320 	rsb	r3, r0, #32
 800bb1a:	fa02 f303 	lsl.w	r3, r2, r3
 800bb1e:	430b      	orrs	r3, r1
 800bb20:	40c2      	lsrs	r2, r0
 800bb22:	6163      	str	r3, [r4, #20]
 800bb24:	9201      	str	r2, [sp, #4]
 800bb26:	9b01      	ldr	r3, [sp, #4]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	bf0c      	ite	eq
 800bb2c:	2201      	moveq	r2, #1
 800bb2e:	2202      	movne	r2, #2
 800bb30:	61a3      	str	r3, [r4, #24]
 800bb32:	6122      	str	r2, [r4, #16]
 800bb34:	b1ad      	cbz	r5, 800bb62 <__d2b+0x92>
 800bb36:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bb3a:	4405      	add	r5, r0
 800bb3c:	6035      	str	r5, [r6, #0]
 800bb3e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bb42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb44:	6018      	str	r0, [r3, #0]
 800bb46:	4620      	mov	r0, r4
 800bb48:	b002      	add	sp, #8
 800bb4a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800bb4e:	6161      	str	r1, [r4, #20]
 800bb50:	e7e9      	b.n	800bb26 <__d2b+0x56>
 800bb52:	a801      	add	r0, sp, #4
 800bb54:	f7ff fd61 	bl	800b61a <__lo0bits>
 800bb58:	9b01      	ldr	r3, [sp, #4]
 800bb5a:	2201      	movs	r2, #1
 800bb5c:	6163      	str	r3, [r4, #20]
 800bb5e:	3020      	adds	r0, #32
 800bb60:	e7e7      	b.n	800bb32 <__d2b+0x62>
 800bb62:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bb66:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bb6a:	6030      	str	r0, [r6, #0]
 800bb6c:	6918      	ldr	r0, [r3, #16]
 800bb6e:	f7ff fd35 	bl	800b5dc <__hi0bits>
 800bb72:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bb76:	e7e4      	b.n	800bb42 <__d2b+0x72>
 800bb78:	0800cb46 	.word	0x0800cb46
 800bb7c:	0800cb57 	.word	0x0800cb57

0800bb80 <__ssputs_r>:
 800bb80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb84:	461f      	mov	r7, r3
 800bb86:	688e      	ldr	r6, [r1, #8]
 800bb88:	4682      	mov	sl, r0
 800bb8a:	42be      	cmp	r6, r7
 800bb8c:	460c      	mov	r4, r1
 800bb8e:	4690      	mov	r8, r2
 800bb90:	680b      	ldr	r3, [r1, #0]
 800bb92:	d82d      	bhi.n	800bbf0 <__ssputs_r+0x70>
 800bb94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bb98:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bb9c:	d026      	beq.n	800bbec <__ssputs_r+0x6c>
 800bb9e:	6965      	ldr	r5, [r4, #20]
 800bba0:	6909      	ldr	r1, [r1, #16]
 800bba2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bba6:	eba3 0901 	sub.w	r9, r3, r1
 800bbaa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bbae:	1c7b      	adds	r3, r7, #1
 800bbb0:	444b      	add	r3, r9
 800bbb2:	106d      	asrs	r5, r5, #1
 800bbb4:	429d      	cmp	r5, r3
 800bbb6:	bf38      	it	cc
 800bbb8:	461d      	movcc	r5, r3
 800bbba:	0553      	lsls	r3, r2, #21
 800bbbc:	d527      	bpl.n	800bc0e <__ssputs_r+0x8e>
 800bbbe:	4629      	mov	r1, r5
 800bbc0:	f7ff fbd8 	bl	800b374 <_malloc_r>
 800bbc4:	4606      	mov	r6, r0
 800bbc6:	b360      	cbz	r0, 800bc22 <__ssputs_r+0xa2>
 800bbc8:	464a      	mov	r2, r9
 800bbca:	6921      	ldr	r1, [r4, #16]
 800bbcc:	f000 fbc6 	bl	800c35c <memcpy>
 800bbd0:	89a3      	ldrh	r3, [r4, #12]
 800bbd2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bbd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bbda:	81a3      	strh	r3, [r4, #12]
 800bbdc:	6126      	str	r6, [r4, #16]
 800bbde:	444e      	add	r6, r9
 800bbe0:	6026      	str	r6, [r4, #0]
 800bbe2:	463e      	mov	r6, r7
 800bbe4:	6165      	str	r5, [r4, #20]
 800bbe6:	eba5 0509 	sub.w	r5, r5, r9
 800bbea:	60a5      	str	r5, [r4, #8]
 800bbec:	42be      	cmp	r6, r7
 800bbee:	d900      	bls.n	800bbf2 <__ssputs_r+0x72>
 800bbf0:	463e      	mov	r6, r7
 800bbf2:	4632      	mov	r2, r6
 800bbf4:	4641      	mov	r1, r8
 800bbf6:	6820      	ldr	r0, [r4, #0]
 800bbf8:	f000 fb63 	bl	800c2c2 <memmove>
 800bbfc:	2000      	movs	r0, #0
 800bbfe:	68a3      	ldr	r3, [r4, #8]
 800bc00:	1b9b      	subs	r3, r3, r6
 800bc02:	60a3      	str	r3, [r4, #8]
 800bc04:	6823      	ldr	r3, [r4, #0]
 800bc06:	4433      	add	r3, r6
 800bc08:	6023      	str	r3, [r4, #0]
 800bc0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc0e:	462a      	mov	r2, r5
 800bc10:	f000 fbf6 	bl	800c400 <_realloc_r>
 800bc14:	4606      	mov	r6, r0
 800bc16:	2800      	cmp	r0, #0
 800bc18:	d1e0      	bne.n	800bbdc <__ssputs_r+0x5c>
 800bc1a:	4650      	mov	r0, sl
 800bc1c:	6921      	ldr	r1, [r4, #16]
 800bc1e:	f7ff fb37 	bl	800b290 <_free_r>
 800bc22:	230c      	movs	r3, #12
 800bc24:	f8ca 3000 	str.w	r3, [sl]
 800bc28:	89a3      	ldrh	r3, [r4, #12]
 800bc2a:	f04f 30ff 	mov.w	r0, #4294967295
 800bc2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc32:	81a3      	strh	r3, [r4, #12]
 800bc34:	e7e9      	b.n	800bc0a <__ssputs_r+0x8a>
	...

0800bc38 <_svfiprintf_r>:
 800bc38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc3c:	4698      	mov	r8, r3
 800bc3e:	898b      	ldrh	r3, [r1, #12]
 800bc40:	4607      	mov	r7, r0
 800bc42:	061b      	lsls	r3, r3, #24
 800bc44:	460d      	mov	r5, r1
 800bc46:	4614      	mov	r4, r2
 800bc48:	b09d      	sub	sp, #116	@ 0x74
 800bc4a:	d510      	bpl.n	800bc6e <_svfiprintf_r+0x36>
 800bc4c:	690b      	ldr	r3, [r1, #16]
 800bc4e:	b973      	cbnz	r3, 800bc6e <_svfiprintf_r+0x36>
 800bc50:	2140      	movs	r1, #64	@ 0x40
 800bc52:	f7ff fb8f 	bl	800b374 <_malloc_r>
 800bc56:	6028      	str	r0, [r5, #0]
 800bc58:	6128      	str	r0, [r5, #16]
 800bc5a:	b930      	cbnz	r0, 800bc6a <_svfiprintf_r+0x32>
 800bc5c:	230c      	movs	r3, #12
 800bc5e:	603b      	str	r3, [r7, #0]
 800bc60:	f04f 30ff 	mov.w	r0, #4294967295
 800bc64:	b01d      	add	sp, #116	@ 0x74
 800bc66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc6a:	2340      	movs	r3, #64	@ 0x40
 800bc6c:	616b      	str	r3, [r5, #20]
 800bc6e:	2300      	movs	r3, #0
 800bc70:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc72:	2320      	movs	r3, #32
 800bc74:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bc78:	2330      	movs	r3, #48	@ 0x30
 800bc7a:	f04f 0901 	mov.w	r9, #1
 800bc7e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc82:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800be1c <_svfiprintf_r+0x1e4>
 800bc86:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bc8a:	4623      	mov	r3, r4
 800bc8c:	469a      	mov	sl, r3
 800bc8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc92:	b10a      	cbz	r2, 800bc98 <_svfiprintf_r+0x60>
 800bc94:	2a25      	cmp	r2, #37	@ 0x25
 800bc96:	d1f9      	bne.n	800bc8c <_svfiprintf_r+0x54>
 800bc98:	ebba 0b04 	subs.w	fp, sl, r4
 800bc9c:	d00b      	beq.n	800bcb6 <_svfiprintf_r+0x7e>
 800bc9e:	465b      	mov	r3, fp
 800bca0:	4622      	mov	r2, r4
 800bca2:	4629      	mov	r1, r5
 800bca4:	4638      	mov	r0, r7
 800bca6:	f7ff ff6b 	bl	800bb80 <__ssputs_r>
 800bcaa:	3001      	adds	r0, #1
 800bcac:	f000 80a7 	beq.w	800bdfe <_svfiprintf_r+0x1c6>
 800bcb0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bcb2:	445a      	add	r2, fp
 800bcb4:	9209      	str	r2, [sp, #36]	@ 0x24
 800bcb6:	f89a 3000 	ldrb.w	r3, [sl]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	f000 809f 	beq.w	800bdfe <_svfiprintf_r+0x1c6>
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	f04f 32ff 	mov.w	r2, #4294967295
 800bcc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bcca:	f10a 0a01 	add.w	sl, sl, #1
 800bcce:	9304      	str	r3, [sp, #16]
 800bcd0:	9307      	str	r3, [sp, #28]
 800bcd2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bcd6:	931a      	str	r3, [sp, #104]	@ 0x68
 800bcd8:	4654      	mov	r4, sl
 800bcda:	2205      	movs	r2, #5
 800bcdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bce0:	484e      	ldr	r0, [pc, #312]	@ (800be1c <_svfiprintf_r+0x1e4>)
 800bce2:	f7fe fc6a 	bl	800a5ba <memchr>
 800bce6:	9a04      	ldr	r2, [sp, #16]
 800bce8:	b9d8      	cbnz	r0, 800bd22 <_svfiprintf_r+0xea>
 800bcea:	06d0      	lsls	r0, r2, #27
 800bcec:	bf44      	itt	mi
 800bcee:	2320      	movmi	r3, #32
 800bcf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bcf4:	0711      	lsls	r1, r2, #28
 800bcf6:	bf44      	itt	mi
 800bcf8:	232b      	movmi	r3, #43	@ 0x2b
 800bcfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bcfe:	f89a 3000 	ldrb.w	r3, [sl]
 800bd02:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd04:	d015      	beq.n	800bd32 <_svfiprintf_r+0xfa>
 800bd06:	4654      	mov	r4, sl
 800bd08:	2000      	movs	r0, #0
 800bd0a:	f04f 0c0a 	mov.w	ip, #10
 800bd0e:	9a07      	ldr	r2, [sp, #28]
 800bd10:	4621      	mov	r1, r4
 800bd12:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd16:	3b30      	subs	r3, #48	@ 0x30
 800bd18:	2b09      	cmp	r3, #9
 800bd1a:	d94b      	bls.n	800bdb4 <_svfiprintf_r+0x17c>
 800bd1c:	b1b0      	cbz	r0, 800bd4c <_svfiprintf_r+0x114>
 800bd1e:	9207      	str	r2, [sp, #28]
 800bd20:	e014      	b.n	800bd4c <_svfiprintf_r+0x114>
 800bd22:	eba0 0308 	sub.w	r3, r0, r8
 800bd26:	fa09 f303 	lsl.w	r3, r9, r3
 800bd2a:	4313      	orrs	r3, r2
 800bd2c:	46a2      	mov	sl, r4
 800bd2e:	9304      	str	r3, [sp, #16]
 800bd30:	e7d2      	b.n	800bcd8 <_svfiprintf_r+0xa0>
 800bd32:	9b03      	ldr	r3, [sp, #12]
 800bd34:	1d19      	adds	r1, r3, #4
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	9103      	str	r1, [sp, #12]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	bfbb      	ittet	lt
 800bd3e:	425b      	neglt	r3, r3
 800bd40:	f042 0202 	orrlt.w	r2, r2, #2
 800bd44:	9307      	strge	r3, [sp, #28]
 800bd46:	9307      	strlt	r3, [sp, #28]
 800bd48:	bfb8      	it	lt
 800bd4a:	9204      	strlt	r2, [sp, #16]
 800bd4c:	7823      	ldrb	r3, [r4, #0]
 800bd4e:	2b2e      	cmp	r3, #46	@ 0x2e
 800bd50:	d10a      	bne.n	800bd68 <_svfiprintf_r+0x130>
 800bd52:	7863      	ldrb	r3, [r4, #1]
 800bd54:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd56:	d132      	bne.n	800bdbe <_svfiprintf_r+0x186>
 800bd58:	9b03      	ldr	r3, [sp, #12]
 800bd5a:	3402      	adds	r4, #2
 800bd5c:	1d1a      	adds	r2, r3, #4
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	9203      	str	r2, [sp, #12]
 800bd62:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bd66:	9305      	str	r3, [sp, #20]
 800bd68:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800be20 <_svfiprintf_r+0x1e8>
 800bd6c:	2203      	movs	r2, #3
 800bd6e:	4650      	mov	r0, sl
 800bd70:	7821      	ldrb	r1, [r4, #0]
 800bd72:	f7fe fc22 	bl	800a5ba <memchr>
 800bd76:	b138      	cbz	r0, 800bd88 <_svfiprintf_r+0x150>
 800bd78:	2240      	movs	r2, #64	@ 0x40
 800bd7a:	9b04      	ldr	r3, [sp, #16]
 800bd7c:	eba0 000a 	sub.w	r0, r0, sl
 800bd80:	4082      	lsls	r2, r0
 800bd82:	4313      	orrs	r3, r2
 800bd84:	3401      	adds	r4, #1
 800bd86:	9304      	str	r3, [sp, #16]
 800bd88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd8c:	2206      	movs	r2, #6
 800bd8e:	4825      	ldr	r0, [pc, #148]	@ (800be24 <_svfiprintf_r+0x1ec>)
 800bd90:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bd94:	f7fe fc11 	bl	800a5ba <memchr>
 800bd98:	2800      	cmp	r0, #0
 800bd9a:	d036      	beq.n	800be0a <_svfiprintf_r+0x1d2>
 800bd9c:	4b22      	ldr	r3, [pc, #136]	@ (800be28 <_svfiprintf_r+0x1f0>)
 800bd9e:	bb1b      	cbnz	r3, 800bde8 <_svfiprintf_r+0x1b0>
 800bda0:	9b03      	ldr	r3, [sp, #12]
 800bda2:	3307      	adds	r3, #7
 800bda4:	f023 0307 	bic.w	r3, r3, #7
 800bda8:	3308      	adds	r3, #8
 800bdaa:	9303      	str	r3, [sp, #12]
 800bdac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdae:	4433      	add	r3, r6
 800bdb0:	9309      	str	r3, [sp, #36]	@ 0x24
 800bdb2:	e76a      	b.n	800bc8a <_svfiprintf_r+0x52>
 800bdb4:	460c      	mov	r4, r1
 800bdb6:	2001      	movs	r0, #1
 800bdb8:	fb0c 3202 	mla	r2, ip, r2, r3
 800bdbc:	e7a8      	b.n	800bd10 <_svfiprintf_r+0xd8>
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	f04f 0c0a 	mov.w	ip, #10
 800bdc4:	4619      	mov	r1, r3
 800bdc6:	3401      	adds	r4, #1
 800bdc8:	9305      	str	r3, [sp, #20]
 800bdca:	4620      	mov	r0, r4
 800bdcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdd0:	3a30      	subs	r2, #48	@ 0x30
 800bdd2:	2a09      	cmp	r2, #9
 800bdd4:	d903      	bls.n	800bdde <_svfiprintf_r+0x1a6>
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d0c6      	beq.n	800bd68 <_svfiprintf_r+0x130>
 800bdda:	9105      	str	r1, [sp, #20]
 800bddc:	e7c4      	b.n	800bd68 <_svfiprintf_r+0x130>
 800bdde:	4604      	mov	r4, r0
 800bde0:	2301      	movs	r3, #1
 800bde2:	fb0c 2101 	mla	r1, ip, r1, r2
 800bde6:	e7f0      	b.n	800bdca <_svfiprintf_r+0x192>
 800bde8:	ab03      	add	r3, sp, #12
 800bdea:	9300      	str	r3, [sp, #0]
 800bdec:	462a      	mov	r2, r5
 800bdee:	4638      	mov	r0, r7
 800bdf0:	4b0e      	ldr	r3, [pc, #56]	@ (800be2c <_svfiprintf_r+0x1f4>)
 800bdf2:	a904      	add	r1, sp, #16
 800bdf4:	f7fd fd52 	bl	800989c <_printf_float>
 800bdf8:	1c42      	adds	r2, r0, #1
 800bdfa:	4606      	mov	r6, r0
 800bdfc:	d1d6      	bne.n	800bdac <_svfiprintf_r+0x174>
 800bdfe:	89ab      	ldrh	r3, [r5, #12]
 800be00:	065b      	lsls	r3, r3, #25
 800be02:	f53f af2d 	bmi.w	800bc60 <_svfiprintf_r+0x28>
 800be06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800be08:	e72c      	b.n	800bc64 <_svfiprintf_r+0x2c>
 800be0a:	ab03      	add	r3, sp, #12
 800be0c:	9300      	str	r3, [sp, #0]
 800be0e:	462a      	mov	r2, r5
 800be10:	4638      	mov	r0, r7
 800be12:	4b06      	ldr	r3, [pc, #24]	@ (800be2c <_svfiprintf_r+0x1f4>)
 800be14:	a904      	add	r1, sp, #16
 800be16:	f7fd ffdf 	bl	8009dd8 <_printf_i>
 800be1a:	e7ed      	b.n	800bdf8 <_svfiprintf_r+0x1c0>
 800be1c:	0800cbb0 	.word	0x0800cbb0
 800be20:	0800cbb6 	.word	0x0800cbb6
 800be24:	0800cbba 	.word	0x0800cbba
 800be28:	0800989d 	.word	0x0800989d
 800be2c:	0800bb81 	.word	0x0800bb81

0800be30 <__sfputc_r>:
 800be30:	6893      	ldr	r3, [r2, #8]
 800be32:	b410      	push	{r4}
 800be34:	3b01      	subs	r3, #1
 800be36:	2b00      	cmp	r3, #0
 800be38:	6093      	str	r3, [r2, #8]
 800be3a:	da07      	bge.n	800be4c <__sfputc_r+0x1c>
 800be3c:	6994      	ldr	r4, [r2, #24]
 800be3e:	42a3      	cmp	r3, r4
 800be40:	db01      	blt.n	800be46 <__sfputc_r+0x16>
 800be42:	290a      	cmp	r1, #10
 800be44:	d102      	bne.n	800be4c <__sfputc_r+0x1c>
 800be46:	bc10      	pop	{r4}
 800be48:	f7fe ba7d 	b.w	800a346 <__swbuf_r>
 800be4c:	6813      	ldr	r3, [r2, #0]
 800be4e:	1c58      	adds	r0, r3, #1
 800be50:	6010      	str	r0, [r2, #0]
 800be52:	7019      	strb	r1, [r3, #0]
 800be54:	4608      	mov	r0, r1
 800be56:	bc10      	pop	{r4}
 800be58:	4770      	bx	lr

0800be5a <__sfputs_r>:
 800be5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be5c:	4606      	mov	r6, r0
 800be5e:	460f      	mov	r7, r1
 800be60:	4614      	mov	r4, r2
 800be62:	18d5      	adds	r5, r2, r3
 800be64:	42ac      	cmp	r4, r5
 800be66:	d101      	bne.n	800be6c <__sfputs_r+0x12>
 800be68:	2000      	movs	r0, #0
 800be6a:	e007      	b.n	800be7c <__sfputs_r+0x22>
 800be6c:	463a      	mov	r2, r7
 800be6e:	4630      	mov	r0, r6
 800be70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be74:	f7ff ffdc 	bl	800be30 <__sfputc_r>
 800be78:	1c43      	adds	r3, r0, #1
 800be7a:	d1f3      	bne.n	800be64 <__sfputs_r+0xa>
 800be7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800be80 <_vfiprintf_r>:
 800be80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be84:	460d      	mov	r5, r1
 800be86:	4614      	mov	r4, r2
 800be88:	4698      	mov	r8, r3
 800be8a:	4606      	mov	r6, r0
 800be8c:	b09d      	sub	sp, #116	@ 0x74
 800be8e:	b118      	cbz	r0, 800be98 <_vfiprintf_r+0x18>
 800be90:	6a03      	ldr	r3, [r0, #32]
 800be92:	b90b      	cbnz	r3, 800be98 <_vfiprintf_r+0x18>
 800be94:	f7fe f94a 	bl	800a12c <__sinit>
 800be98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800be9a:	07d9      	lsls	r1, r3, #31
 800be9c:	d405      	bmi.n	800beaa <_vfiprintf_r+0x2a>
 800be9e:	89ab      	ldrh	r3, [r5, #12]
 800bea0:	059a      	lsls	r2, r3, #22
 800bea2:	d402      	bmi.n	800beaa <_vfiprintf_r+0x2a>
 800bea4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bea6:	f7fe fb86 	bl	800a5b6 <__retarget_lock_acquire_recursive>
 800beaa:	89ab      	ldrh	r3, [r5, #12]
 800beac:	071b      	lsls	r3, r3, #28
 800beae:	d501      	bpl.n	800beb4 <_vfiprintf_r+0x34>
 800beb0:	692b      	ldr	r3, [r5, #16]
 800beb2:	b99b      	cbnz	r3, 800bedc <_vfiprintf_r+0x5c>
 800beb4:	4629      	mov	r1, r5
 800beb6:	4630      	mov	r0, r6
 800beb8:	f7fe fa84 	bl	800a3c4 <__swsetup_r>
 800bebc:	b170      	cbz	r0, 800bedc <_vfiprintf_r+0x5c>
 800bebe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bec0:	07dc      	lsls	r4, r3, #31
 800bec2:	d504      	bpl.n	800bece <_vfiprintf_r+0x4e>
 800bec4:	f04f 30ff 	mov.w	r0, #4294967295
 800bec8:	b01d      	add	sp, #116	@ 0x74
 800beca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bece:	89ab      	ldrh	r3, [r5, #12]
 800bed0:	0598      	lsls	r0, r3, #22
 800bed2:	d4f7      	bmi.n	800bec4 <_vfiprintf_r+0x44>
 800bed4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bed6:	f7fe fb6f 	bl	800a5b8 <__retarget_lock_release_recursive>
 800beda:	e7f3      	b.n	800bec4 <_vfiprintf_r+0x44>
 800bedc:	2300      	movs	r3, #0
 800bede:	9309      	str	r3, [sp, #36]	@ 0x24
 800bee0:	2320      	movs	r3, #32
 800bee2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bee6:	2330      	movs	r3, #48	@ 0x30
 800bee8:	f04f 0901 	mov.w	r9, #1
 800beec:	f8cd 800c 	str.w	r8, [sp, #12]
 800bef0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800c09c <_vfiprintf_r+0x21c>
 800bef4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bef8:	4623      	mov	r3, r4
 800befa:	469a      	mov	sl, r3
 800befc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf00:	b10a      	cbz	r2, 800bf06 <_vfiprintf_r+0x86>
 800bf02:	2a25      	cmp	r2, #37	@ 0x25
 800bf04:	d1f9      	bne.n	800befa <_vfiprintf_r+0x7a>
 800bf06:	ebba 0b04 	subs.w	fp, sl, r4
 800bf0a:	d00b      	beq.n	800bf24 <_vfiprintf_r+0xa4>
 800bf0c:	465b      	mov	r3, fp
 800bf0e:	4622      	mov	r2, r4
 800bf10:	4629      	mov	r1, r5
 800bf12:	4630      	mov	r0, r6
 800bf14:	f7ff ffa1 	bl	800be5a <__sfputs_r>
 800bf18:	3001      	adds	r0, #1
 800bf1a:	f000 80a7 	beq.w	800c06c <_vfiprintf_r+0x1ec>
 800bf1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf20:	445a      	add	r2, fp
 800bf22:	9209      	str	r2, [sp, #36]	@ 0x24
 800bf24:	f89a 3000 	ldrb.w	r3, [sl]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	f000 809f 	beq.w	800c06c <_vfiprintf_r+0x1ec>
 800bf2e:	2300      	movs	r3, #0
 800bf30:	f04f 32ff 	mov.w	r2, #4294967295
 800bf34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf38:	f10a 0a01 	add.w	sl, sl, #1
 800bf3c:	9304      	str	r3, [sp, #16]
 800bf3e:	9307      	str	r3, [sp, #28]
 800bf40:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bf44:	931a      	str	r3, [sp, #104]	@ 0x68
 800bf46:	4654      	mov	r4, sl
 800bf48:	2205      	movs	r2, #5
 800bf4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf4e:	4853      	ldr	r0, [pc, #332]	@ (800c09c <_vfiprintf_r+0x21c>)
 800bf50:	f7fe fb33 	bl	800a5ba <memchr>
 800bf54:	9a04      	ldr	r2, [sp, #16]
 800bf56:	b9d8      	cbnz	r0, 800bf90 <_vfiprintf_r+0x110>
 800bf58:	06d1      	lsls	r1, r2, #27
 800bf5a:	bf44      	itt	mi
 800bf5c:	2320      	movmi	r3, #32
 800bf5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf62:	0713      	lsls	r3, r2, #28
 800bf64:	bf44      	itt	mi
 800bf66:	232b      	movmi	r3, #43	@ 0x2b
 800bf68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf6c:	f89a 3000 	ldrb.w	r3, [sl]
 800bf70:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf72:	d015      	beq.n	800bfa0 <_vfiprintf_r+0x120>
 800bf74:	4654      	mov	r4, sl
 800bf76:	2000      	movs	r0, #0
 800bf78:	f04f 0c0a 	mov.w	ip, #10
 800bf7c:	9a07      	ldr	r2, [sp, #28]
 800bf7e:	4621      	mov	r1, r4
 800bf80:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf84:	3b30      	subs	r3, #48	@ 0x30
 800bf86:	2b09      	cmp	r3, #9
 800bf88:	d94b      	bls.n	800c022 <_vfiprintf_r+0x1a2>
 800bf8a:	b1b0      	cbz	r0, 800bfba <_vfiprintf_r+0x13a>
 800bf8c:	9207      	str	r2, [sp, #28]
 800bf8e:	e014      	b.n	800bfba <_vfiprintf_r+0x13a>
 800bf90:	eba0 0308 	sub.w	r3, r0, r8
 800bf94:	fa09 f303 	lsl.w	r3, r9, r3
 800bf98:	4313      	orrs	r3, r2
 800bf9a:	46a2      	mov	sl, r4
 800bf9c:	9304      	str	r3, [sp, #16]
 800bf9e:	e7d2      	b.n	800bf46 <_vfiprintf_r+0xc6>
 800bfa0:	9b03      	ldr	r3, [sp, #12]
 800bfa2:	1d19      	adds	r1, r3, #4
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	9103      	str	r1, [sp, #12]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	bfbb      	ittet	lt
 800bfac:	425b      	neglt	r3, r3
 800bfae:	f042 0202 	orrlt.w	r2, r2, #2
 800bfb2:	9307      	strge	r3, [sp, #28]
 800bfb4:	9307      	strlt	r3, [sp, #28]
 800bfb6:	bfb8      	it	lt
 800bfb8:	9204      	strlt	r2, [sp, #16]
 800bfba:	7823      	ldrb	r3, [r4, #0]
 800bfbc:	2b2e      	cmp	r3, #46	@ 0x2e
 800bfbe:	d10a      	bne.n	800bfd6 <_vfiprintf_r+0x156>
 800bfc0:	7863      	ldrb	r3, [r4, #1]
 800bfc2:	2b2a      	cmp	r3, #42	@ 0x2a
 800bfc4:	d132      	bne.n	800c02c <_vfiprintf_r+0x1ac>
 800bfc6:	9b03      	ldr	r3, [sp, #12]
 800bfc8:	3402      	adds	r4, #2
 800bfca:	1d1a      	adds	r2, r3, #4
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	9203      	str	r2, [sp, #12]
 800bfd0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bfd4:	9305      	str	r3, [sp, #20]
 800bfd6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800c0a0 <_vfiprintf_r+0x220>
 800bfda:	2203      	movs	r2, #3
 800bfdc:	4650      	mov	r0, sl
 800bfde:	7821      	ldrb	r1, [r4, #0]
 800bfe0:	f7fe faeb 	bl	800a5ba <memchr>
 800bfe4:	b138      	cbz	r0, 800bff6 <_vfiprintf_r+0x176>
 800bfe6:	2240      	movs	r2, #64	@ 0x40
 800bfe8:	9b04      	ldr	r3, [sp, #16]
 800bfea:	eba0 000a 	sub.w	r0, r0, sl
 800bfee:	4082      	lsls	r2, r0
 800bff0:	4313      	orrs	r3, r2
 800bff2:	3401      	adds	r4, #1
 800bff4:	9304      	str	r3, [sp, #16]
 800bff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bffa:	2206      	movs	r2, #6
 800bffc:	4829      	ldr	r0, [pc, #164]	@ (800c0a4 <_vfiprintf_r+0x224>)
 800bffe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c002:	f7fe fada 	bl	800a5ba <memchr>
 800c006:	2800      	cmp	r0, #0
 800c008:	d03f      	beq.n	800c08a <_vfiprintf_r+0x20a>
 800c00a:	4b27      	ldr	r3, [pc, #156]	@ (800c0a8 <_vfiprintf_r+0x228>)
 800c00c:	bb1b      	cbnz	r3, 800c056 <_vfiprintf_r+0x1d6>
 800c00e:	9b03      	ldr	r3, [sp, #12]
 800c010:	3307      	adds	r3, #7
 800c012:	f023 0307 	bic.w	r3, r3, #7
 800c016:	3308      	adds	r3, #8
 800c018:	9303      	str	r3, [sp, #12]
 800c01a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c01c:	443b      	add	r3, r7
 800c01e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c020:	e76a      	b.n	800bef8 <_vfiprintf_r+0x78>
 800c022:	460c      	mov	r4, r1
 800c024:	2001      	movs	r0, #1
 800c026:	fb0c 3202 	mla	r2, ip, r2, r3
 800c02a:	e7a8      	b.n	800bf7e <_vfiprintf_r+0xfe>
 800c02c:	2300      	movs	r3, #0
 800c02e:	f04f 0c0a 	mov.w	ip, #10
 800c032:	4619      	mov	r1, r3
 800c034:	3401      	adds	r4, #1
 800c036:	9305      	str	r3, [sp, #20]
 800c038:	4620      	mov	r0, r4
 800c03a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c03e:	3a30      	subs	r2, #48	@ 0x30
 800c040:	2a09      	cmp	r2, #9
 800c042:	d903      	bls.n	800c04c <_vfiprintf_r+0x1cc>
 800c044:	2b00      	cmp	r3, #0
 800c046:	d0c6      	beq.n	800bfd6 <_vfiprintf_r+0x156>
 800c048:	9105      	str	r1, [sp, #20]
 800c04a:	e7c4      	b.n	800bfd6 <_vfiprintf_r+0x156>
 800c04c:	4604      	mov	r4, r0
 800c04e:	2301      	movs	r3, #1
 800c050:	fb0c 2101 	mla	r1, ip, r1, r2
 800c054:	e7f0      	b.n	800c038 <_vfiprintf_r+0x1b8>
 800c056:	ab03      	add	r3, sp, #12
 800c058:	9300      	str	r3, [sp, #0]
 800c05a:	462a      	mov	r2, r5
 800c05c:	4630      	mov	r0, r6
 800c05e:	4b13      	ldr	r3, [pc, #76]	@ (800c0ac <_vfiprintf_r+0x22c>)
 800c060:	a904      	add	r1, sp, #16
 800c062:	f7fd fc1b 	bl	800989c <_printf_float>
 800c066:	4607      	mov	r7, r0
 800c068:	1c78      	adds	r0, r7, #1
 800c06a:	d1d6      	bne.n	800c01a <_vfiprintf_r+0x19a>
 800c06c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c06e:	07d9      	lsls	r1, r3, #31
 800c070:	d405      	bmi.n	800c07e <_vfiprintf_r+0x1fe>
 800c072:	89ab      	ldrh	r3, [r5, #12]
 800c074:	059a      	lsls	r2, r3, #22
 800c076:	d402      	bmi.n	800c07e <_vfiprintf_r+0x1fe>
 800c078:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c07a:	f7fe fa9d 	bl	800a5b8 <__retarget_lock_release_recursive>
 800c07e:	89ab      	ldrh	r3, [r5, #12]
 800c080:	065b      	lsls	r3, r3, #25
 800c082:	f53f af1f 	bmi.w	800bec4 <_vfiprintf_r+0x44>
 800c086:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c088:	e71e      	b.n	800bec8 <_vfiprintf_r+0x48>
 800c08a:	ab03      	add	r3, sp, #12
 800c08c:	9300      	str	r3, [sp, #0]
 800c08e:	462a      	mov	r2, r5
 800c090:	4630      	mov	r0, r6
 800c092:	4b06      	ldr	r3, [pc, #24]	@ (800c0ac <_vfiprintf_r+0x22c>)
 800c094:	a904      	add	r1, sp, #16
 800c096:	f7fd fe9f 	bl	8009dd8 <_printf_i>
 800c09a:	e7e4      	b.n	800c066 <_vfiprintf_r+0x1e6>
 800c09c:	0800cbb0 	.word	0x0800cbb0
 800c0a0:	0800cbb6 	.word	0x0800cbb6
 800c0a4:	0800cbba 	.word	0x0800cbba
 800c0a8:	0800989d 	.word	0x0800989d
 800c0ac:	0800be5b 	.word	0x0800be5b

0800c0b0 <__sflush_r>:
 800c0b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0b6:	0716      	lsls	r6, r2, #28
 800c0b8:	4605      	mov	r5, r0
 800c0ba:	460c      	mov	r4, r1
 800c0bc:	d454      	bmi.n	800c168 <__sflush_r+0xb8>
 800c0be:	684b      	ldr	r3, [r1, #4]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	dc02      	bgt.n	800c0ca <__sflush_r+0x1a>
 800c0c4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	dd48      	ble.n	800c15c <__sflush_r+0xac>
 800c0ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c0cc:	2e00      	cmp	r6, #0
 800c0ce:	d045      	beq.n	800c15c <__sflush_r+0xac>
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c0d6:	682f      	ldr	r7, [r5, #0]
 800c0d8:	6a21      	ldr	r1, [r4, #32]
 800c0da:	602b      	str	r3, [r5, #0]
 800c0dc:	d030      	beq.n	800c140 <__sflush_r+0x90>
 800c0de:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c0e0:	89a3      	ldrh	r3, [r4, #12]
 800c0e2:	0759      	lsls	r1, r3, #29
 800c0e4:	d505      	bpl.n	800c0f2 <__sflush_r+0x42>
 800c0e6:	6863      	ldr	r3, [r4, #4]
 800c0e8:	1ad2      	subs	r2, r2, r3
 800c0ea:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c0ec:	b10b      	cbz	r3, 800c0f2 <__sflush_r+0x42>
 800c0ee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c0f0:	1ad2      	subs	r2, r2, r3
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	4628      	mov	r0, r5
 800c0f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c0f8:	6a21      	ldr	r1, [r4, #32]
 800c0fa:	47b0      	blx	r6
 800c0fc:	1c43      	adds	r3, r0, #1
 800c0fe:	89a3      	ldrh	r3, [r4, #12]
 800c100:	d106      	bne.n	800c110 <__sflush_r+0x60>
 800c102:	6829      	ldr	r1, [r5, #0]
 800c104:	291d      	cmp	r1, #29
 800c106:	d82b      	bhi.n	800c160 <__sflush_r+0xb0>
 800c108:	4a28      	ldr	r2, [pc, #160]	@ (800c1ac <__sflush_r+0xfc>)
 800c10a:	40ca      	lsrs	r2, r1
 800c10c:	07d6      	lsls	r6, r2, #31
 800c10e:	d527      	bpl.n	800c160 <__sflush_r+0xb0>
 800c110:	2200      	movs	r2, #0
 800c112:	6062      	str	r2, [r4, #4]
 800c114:	6922      	ldr	r2, [r4, #16]
 800c116:	04d9      	lsls	r1, r3, #19
 800c118:	6022      	str	r2, [r4, #0]
 800c11a:	d504      	bpl.n	800c126 <__sflush_r+0x76>
 800c11c:	1c42      	adds	r2, r0, #1
 800c11e:	d101      	bne.n	800c124 <__sflush_r+0x74>
 800c120:	682b      	ldr	r3, [r5, #0]
 800c122:	b903      	cbnz	r3, 800c126 <__sflush_r+0x76>
 800c124:	6560      	str	r0, [r4, #84]	@ 0x54
 800c126:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c128:	602f      	str	r7, [r5, #0]
 800c12a:	b1b9      	cbz	r1, 800c15c <__sflush_r+0xac>
 800c12c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c130:	4299      	cmp	r1, r3
 800c132:	d002      	beq.n	800c13a <__sflush_r+0x8a>
 800c134:	4628      	mov	r0, r5
 800c136:	f7ff f8ab 	bl	800b290 <_free_r>
 800c13a:	2300      	movs	r3, #0
 800c13c:	6363      	str	r3, [r4, #52]	@ 0x34
 800c13e:	e00d      	b.n	800c15c <__sflush_r+0xac>
 800c140:	2301      	movs	r3, #1
 800c142:	4628      	mov	r0, r5
 800c144:	47b0      	blx	r6
 800c146:	4602      	mov	r2, r0
 800c148:	1c50      	adds	r0, r2, #1
 800c14a:	d1c9      	bne.n	800c0e0 <__sflush_r+0x30>
 800c14c:	682b      	ldr	r3, [r5, #0]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d0c6      	beq.n	800c0e0 <__sflush_r+0x30>
 800c152:	2b1d      	cmp	r3, #29
 800c154:	d001      	beq.n	800c15a <__sflush_r+0xaa>
 800c156:	2b16      	cmp	r3, #22
 800c158:	d11d      	bne.n	800c196 <__sflush_r+0xe6>
 800c15a:	602f      	str	r7, [r5, #0]
 800c15c:	2000      	movs	r0, #0
 800c15e:	e021      	b.n	800c1a4 <__sflush_r+0xf4>
 800c160:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c164:	b21b      	sxth	r3, r3
 800c166:	e01a      	b.n	800c19e <__sflush_r+0xee>
 800c168:	690f      	ldr	r7, [r1, #16]
 800c16a:	2f00      	cmp	r7, #0
 800c16c:	d0f6      	beq.n	800c15c <__sflush_r+0xac>
 800c16e:	0793      	lsls	r3, r2, #30
 800c170:	bf18      	it	ne
 800c172:	2300      	movne	r3, #0
 800c174:	680e      	ldr	r6, [r1, #0]
 800c176:	bf08      	it	eq
 800c178:	694b      	ldreq	r3, [r1, #20]
 800c17a:	1bf6      	subs	r6, r6, r7
 800c17c:	600f      	str	r7, [r1, #0]
 800c17e:	608b      	str	r3, [r1, #8]
 800c180:	2e00      	cmp	r6, #0
 800c182:	ddeb      	ble.n	800c15c <__sflush_r+0xac>
 800c184:	4633      	mov	r3, r6
 800c186:	463a      	mov	r2, r7
 800c188:	4628      	mov	r0, r5
 800c18a:	6a21      	ldr	r1, [r4, #32]
 800c18c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800c190:	47e0      	blx	ip
 800c192:	2800      	cmp	r0, #0
 800c194:	dc07      	bgt.n	800c1a6 <__sflush_r+0xf6>
 800c196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c19a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c19e:	f04f 30ff 	mov.w	r0, #4294967295
 800c1a2:	81a3      	strh	r3, [r4, #12]
 800c1a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1a6:	4407      	add	r7, r0
 800c1a8:	1a36      	subs	r6, r6, r0
 800c1aa:	e7e9      	b.n	800c180 <__sflush_r+0xd0>
 800c1ac:	20400001 	.word	0x20400001

0800c1b0 <_fflush_r>:
 800c1b0:	b538      	push	{r3, r4, r5, lr}
 800c1b2:	690b      	ldr	r3, [r1, #16]
 800c1b4:	4605      	mov	r5, r0
 800c1b6:	460c      	mov	r4, r1
 800c1b8:	b913      	cbnz	r3, 800c1c0 <_fflush_r+0x10>
 800c1ba:	2500      	movs	r5, #0
 800c1bc:	4628      	mov	r0, r5
 800c1be:	bd38      	pop	{r3, r4, r5, pc}
 800c1c0:	b118      	cbz	r0, 800c1ca <_fflush_r+0x1a>
 800c1c2:	6a03      	ldr	r3, [r0, #32]
 800c1c4:	b90b      	cbnz	r3, 800c1ca <_fflush_r+0x1a>
 800c1c6:	f7fd ffb1 	bl	800a12c <__sinit>
 800c1ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d0f3      	beq.n	800c1ba <_fflush_r+0xa>
 800c1d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c1d4:	07d0      	lsls	r0, r2, #31
 800c1d6:	d404      	bmi.n	800c1e2 <_fflush_r+0x32>
 800c1d8:	0599      	lsls	r1, r3, #22
 800c1da:	d402      	bmi.n	800c1e2 <_fflush_r+0x32>
 800c1dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c1de:	f7fe f9ea 	bl	800a5b6 <__retarget_lock_acquire_recursive>
 800c1e2:	4628      	mov	r0, r5
 800c1e4:	4621      	mov	r1, r4
 800c1e6:	f7ff ff63 	bl	800c0b0 <__sflush_r>
 800c1ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c1ec:	4605      	mov	r5, r0
 800c1ee:	07da      	lsls	r2, r3, #31
 800c1f0:	d4e4      	bmi.n	800c1bc <_fflush_r+0xc>
 800c1f2:	89a3      	ldrh	r3, [r4, #12]
 800c1f4:	059b      	lsls	r3, r3, #22
 800c1f6:	d4e1      	bmi.n	800c1bc <_fflush_r+0xc>
 800c1f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c1fa:	f7fe f9dd 	bl	800a5b8 <__retarget_lock_release_recursive>
 800c1fe:	e7dd      	b.n	800c1bc <_fflush_r+0xc>

0800c200 <__swhatbuf_r>:
 800c200:	b570      	push	{r4, r5, r6, lr}
 800c202:	460c      	mov	r4, r1
 800c204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c208:	4615      	mov	r5, r2
 800c20a:	2900      	cmp	r1, #0
 800c20c:	461e      	mov	r6, r3
 800c20e:	b096      	sub	sp, #88	@ 0x58
 800c210:	da0c      	bge.n	800c22c <__swhatbuf_r+0x2c>
 800c212:	89a3      	ldrh	r3, [r4, #12]
 800c214:	2100      	movs	r1, #0
 800c216:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c21a:	bf14      	ite	ne
 800c21c:	2340      	movne	r3, #64	@ 0x40
 800c21e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c222:	2000      	movs	r0, #0
 800c224:	6031      	str	r1, [r6, #0]
 800c226:	602b      	str	r3, [r5, #0]
 800c228:	b016      	add	sp, #88	@ 0x58
 800c22a:	bd70      	pop	{r4, r5, r6, pc}
 800c22c:	466a      	mov	r2, sp
 800c22e:	f000 f863 	bl	800c2f8 <_fstat_r>
 800c232:	2800      	cmp	r0, #0
 800c234:	dbed      	blt.n	800c212 <__swhatbuf_r+0x12>
 800c236:	9901      	ldr	r1, [sp, #4]
 800c238:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c23c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c240:	4259      	negs	r1, r3
 800c242:	4159      	adcs	r1, r3
 800c244:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c248:	e7eb      	b.n	800c222 <__swhatbuf_r+0x22>

0800c24a <__smakebuf_r>:
 800c24a:	898b      	ldrh	r3, [r1, #12]
 800c24c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c24e:	079d      	lsls	r5, r3, #30
 800c250:	4606      	mov	r6, r0
 800c252:	460c      	mov	r4, r1
 800c254:	d507      	bpl.n	800c266 <__smakebuf_r+0x1c>
 800c256:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c25a:	6023      	str	r3, [r4, #0]
 800c25c:	6123      	str	r3, [r4, #16]
 800c25e:	2301      	movs	r3, #1
 800c260:	6163      	str	r3, [r4, #20]
 800c262:	b003      	add	sp, #12
 800c264:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c266:	466a      	mov	r2, sp
 800c268:	ab01      	add	r3, sp, #4
 800c26a:	f7ff ffc9 	bl	800c200 <__swhatbuf_r>
 800c26e:	9f00      	ldr	r7, [sp, #0]
 800c270:	4605      	mov	r5, r0
 800c272:	4639      	mov	r1, r7
 800c274:	4630      	mov	r0, r6
 800c276:	f7ff f87d 	bl	800b374 <_malloc_r>
 800c27a:	b948      	cbnz	r0, 800c290 <__smakebuf_r+0x46>
 800c27c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c280:	059a      	lsls	r2, r3, #22
 800c282:	d4ee      	bmi.n	800c262 <__smakebuf_r+0x18>
 800c284:	f023 0303 	bic.w	r3, r3, #3
 800c288:	f043 0302 	orr.w	r3, r3, #2
 800c28c:	81a3      	strh	r3, [r4, #12]
 800c28e:	e7e2      	b.n	800c256 <__smakebuf_r+0xc>
 800c290:	89a3      	ldrh	r3, [r4, #12]
 800c292:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c296:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c29a:	81a3      	strh	r3, [r4, #12]
 800c29c:	9b01      	ldr	r3, [sp, #4]
 800c29e:	6020      	str	r0, [r4, #0]
 800c2a0:	b15b      	cbz	r3, 800c2ba <__smakebuf_r+0x70>
 800c2a2:	4630      	mov	r0, r6
 800c2a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2a8:	f000 f838 	bl	800c31c <_isatty_r>
 800c2ac:	b128      	cbz	r0, 800c2ba <__smakebuf_r+0x70>
 800c2ae:	89a3      	ldrh	r3, [r4, #12]
 800c2b0:	f023 0303 	bic.w	r3, r3, #3
 800c2b4:	f043 0301 	orr.w	r3, r3, #1
 800c2b8:	81a3      	strh	r3, [r4, #12]
 800c2ba:	89a3      	ldrh	r3, [r4, #12]
 800c2bc:	431d      	orrs	r5, r3
 800c2be:	81a5      	strh	r5, [r4, #12]
 800c2c0:	e7cf      	b.n	800c262 <__smakebuf_r+0x18>

0800c2c2 <memmove>:
 800c2c2:	4288      	cmp	r0, r1
 800c2c4:	b510      	push	{r4, lr}
 800c2c6:	eb01 0402 	add.w	r4, r1, r2
 800c2ca:	d902      	bls.n	800c2d2 <memmove+0x10>
 800c2cc:	4284      	cmp	r4, r0
 800c2ce:	4623      	mov	r3, r4
 800c2d0:	d807      	bhi.n	800c2e2 <memmove+0x20>
 800c2d2:	1e43      	subs	r3, r0, #1
 800c2d4:	42a1      	cmp	r1, r4
 800c2d6:	d008      	beq.n	800c2ea <memmove+0x28>
 800c2d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c2dc:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c2e0:	e7f8      	b.n	800c2d4 <memmove+0x12>
 800c2e2:	4601      	mov	r1, r0
 800c2e4:	4402      	add	r2, r0
 800c2e6:	428a      	cmp	r2, r1
 800c2e8:	d100      	bne.n	800c2ec <memmove+0x2a>
 800c2ea:	bd10      	pop	{r4, pc}
 800c2ec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c2f0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c2f4:	e7f7      	b.n	800c2e6 <memmove+0x24>
	...

0800c2f8 <_fstat_r>:
 800c2f8:	b538      	push	{r3, r4, r5, lr}
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	4d06      	ldr	r5, [pc, #24]	@ (800c318 <_fstat_r+0x20>)
 800c2fe:	4604      	mov	r4, r0
 800c300:	4608      	mov	r0, r1
 800c302:	4611      	mov	r1, r2
 800c304:	602b      	str	r3, [r5, #0]
 800c306:	f7f8 fc59 	bl	8004bbc <_fstat>
 800c30a:	1c43      	adds	r3, r0, #1
 800c30c:	d102      	bne.n	800c314 <_fstat_r+0x1c>
 800c30e:	682b      	ldr	r3, [r5, #0]
 800c310:	b103      	cbz	r3, 800c314 <_fstat_r+0x1c>
 800c312:	6023      	str	r3, [r4, #0]
 800c314:	bd38      	pop	{r3, r4, r5, pc}
 800c316:	bf00      	nop
 800c318:	200007c4 	.word	0x200007c4

0800c31c <_isatty_r>:
 800c31c:	b538      	push	{r3, r4, r5, lr}
 800c31e:	2300      	movs	r3, #0
 800c320:	4d05      	ldr	r5, [pc, #20]	@ (800c338 <_isatty_r+0x1c>)
 800c322:	4604      	mov	r4, r0
 800c324:	4608      	mov	r0, r1
 800c326:	602b      	str	r3, [r5, #0]
 800c328:	f7f8 fc57 	bl	8004bda <_isatty>
 800c32c:	1c43      	adds	r3, r0, #1
 800c32e:	d102      	bne.n	800c336 <_isatty_r+0x1a>
 800c330:	682b      	ldr	r3, [r5, #0]
 800c332:	b103      	cbz	r3, 800c336 <_isatty_r+0x1a>
 800c334:	6023      	str	r3, [r4, #0]
 800c336:	bd38      	pop	{r3, r4, r5, pc}
 800c338:	200007c4 	.word	0x200007c4

0800c33c <_sbrk_r>:
 800c33c:	b538      	push	{r3, r4, r5, lr}
 800c33e:	2300      	movs	r3, #0
 800c340:	4d05      	ldr	r5, [pc, #20]	@ (800c358 <_sbrk_r+0x1c>)
 800c342:	4604      	mov	r4, r0
 800c344:	4608      	mov	r0, r1
 800c346:	602b      	str	r3, [r5, #0]
 800c348:	f7f8 fc5e 	bl	8004c08 <_sbrk>
 800c34c:	1c43      	adds	r3, r0, #1
 800c34e:	d102      	bne.n	800c356 <_sbrk_r+0x1a>
 800c350:	682b      	ldr	r3, [r5, #0]
 800c352:	b103      	cbz	r3, 800c356 <_sbrk_r+0x1a>
 800c354:	6023      	str	r3, [r4, #0]
 800c356:	bd38      	pop	{r3, r4, r5, pc}
 800c358:	200007c4 	.word	0x200007c4

0800c35c <memcpy>:
 800c35c:	440a      	add	r2, r1
 800c35e:	4291      	cmp	r1, r2
 800c360:	f100 33ff 	add.w	r3, r0, #4294967295
 800c364:	d100      	bne.n	800c368 <memcpy+0xc>
 800c366:	4770      	bx	lr
 800c368:	b510      	push	{r4, lr}
 800c36a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c36e:	4291      	cmp	r1, r2
 800c370:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c374:	d1f9      	bne.n	800c36a <memcpy+0xe>
 800c376:	bd10      	pop	{r4, pc}

0800c378 <__assert_func>:
 800c378:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c37a:	4614      	mov	r4, r2
 800c37c:	461a      	mov	r2, r3
 800c37e:	4b09      	ldr	r3, [pc, #36]	@ (800c3a4 <__assert_func+0x2c>)
 800c380:	4605      	mov	r5, r0
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	68d8      	ldr	r0, [r3, #12]
 800c386:	b14c      	cbz	r4, 800c39c <__assert_func+0x24>
 800c388:	4b07      	ldr	r3, [pc, #28]	@ (800c3a8 <__assert_func+0x30>)
 800c38a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c38e:	9100      	str	r1, [sp, #0]
 800c390:	462b      	mov	r3, r5
 800c392:	4906      	ldr	r1, [pc, #24]	@ (800c3ac <__assert_func+0x34>)
 800c394:	f000 f870 	bl	800c478 <fiprintf>
 800c398:	f000 f880 	bl	800c49c <abort>
 800c39c:	4b04      	ldr	r3, [pc, #16]	@ (800c3b0 <__assert_func+0x38>)
 800c39e:	461c      	mov	r4, r3
 800c3a0:	e7f3      	b.n	800c38a <__assert_func+0x12>
 800c3a2:	bf00      	nop
 800c3a4:	20000074 	.word	0x20000074
 800c3a8:	0800cbcb 	.word	0x0800cbcb
 800c3ac:	0800cbd8 	.word	0x0800cbd8
 800c3b0:	0800cc06 	.word	0x0800cc06

0800c3b4 <_calloc_r>:
 800c3b4:	b570      	push	{r4, r5, r6, lr}
 800c3b6:	fba1 5402 	umull	r5, r4, r1, r2
 800c3ba:	b934      	cbnz	r4, 800c3ca <_calloc_r+0x16>
 800c3bc:	4629      	mov	r1, r5
 800c3be:	f7fe ffd9 	bl	800b374 <_malloc_r>
 800c3c2:	4606      	mov	r6, r0
 800c3c4:	b928      	cbnz	r0, 800c3d2 <_calloc_r+0x1e>
 800c3c6:	4630      	mov	r0, r6
 800c3c8:	bd70      	pop	{r4, r5, r6, pc}
 800c3ca:	220c      	movs	r2, #12
 800c3cc:	2600      	movs	r6, #0
 800c3ce:	6002      	str	r2, [r0, #0]
 800c3d0:	e7f9      	b.n	800c3c6 <_calloc_r+0x12>
 800c3d2:	462a      	mov	r2, r5
 800c3d4:	4621      	mov	r1, r4
 800c3d6:	f7fe f84b 	bl	800a470 <memset>
 800c3da:	e7f4      	b.n	800c3c6 <_calloc_r+0x12>

0800c3dc <__ascii_mbtowc>:
 800c3dc:	b082      	sub	sp, #8
 800c3de:	b901      	cbnz	r1, 800c3e2 <__ascii_mbtowc+0x6>
 800c3e0:	a901      	add	r1, sp, #4
 800c3e2:	b142      	cbz	r2, 800c3f6 <__ascii_mbtowc+0x1a>
 800c3e4:	b14b      	cbz	r3, 800c3fa <__ascii_mbtowc+0x1e>
 800c3e6:	7813      	ldrb	r3, [r2, #0]
 800c3e8:	600b      	str	r3, [r1, #0]
 800c3ea:	7812      	ldrb	r2, [r2, #0]
 800c3ec:	1e10      	subs	r0, r2, #0
 800c3ee:	bf18      	it	ne
 800c3f0:	2001      	movne	r0, #1
 800c3f2:	b002      	add	sp, #8
 800c3f4:	4770      	bx	lr
 800c3f6:	4610      	mov	r0, r2
 800c3f8:	e7fb      	b.n	800c3f2 <__ascii_mbtowc+0x16>
 800c3fa:	f06f 0001 	mvn.w	r0, #1
 800c3fe:	e7f8      	b.n	800c3f2 <__ascii_mbtowc+0x16>

0800c400 <_realloc_r>:
 800c400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c404:	4607      	mov	r7, r0
 800c406:	4614      	mov	r4, r2
 800c408:	460d      	mov	r5, r1
 800c40a:	b921      	cbnz	r1, 800c416 <_realloc_r+0x16>
 800c40c:	4611      	mov	r1, r2
 800c40e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c412:	f7fe bfaf 	b.w	800b374 <_malloc_r>
 800c416:	b92a      	cbnz	r2, 800c424 <_realloc_r+0x24>
 800c418:	f7fe ff3a 	bl	800b290 <_free_r>
 800c41c:	4625      	mov	r5, r4
 800c41e:	4628      	mov	r0, r5
 800c420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c424:	f000 f841 	bl	800c4aa <_malloc_usable_size_r>
 800c428:	4284      	cmp	r4, r0
 800c42a:	4606      	mov	r6, r0
 800c42c:	d802      	bhi.n	800c434 <_realloc_r+0x34>
 800c42e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c432:	d8f4      	bhi.n	800c41e <_realloc_r+0x1e>
 800c434:	4621      	mov	r1, r4
 800c436:	4638      	mov	r0, r7
 800c438:	f7fe ff9c 	bl	800b374 <_malloc_r>
 800c43c:	4680      	mov	r8, r0
 800c43e:	b908      	cbnz	r0, 800c444 <_realloc_r+0x44>
 800c440:	4645      	mov	r5, r8
 800c442:	e7ec      	b.n	800c41e <_realloc_r+0x1e>
 800c444:	42b4      	cmp	r4, r6
 800c446:	4622      	mov	r2, r4
 800c448:	4629      	mov	r1, r5
 800c44a:	bf28      	it	cs
 800c44c:	4632      	movcs	r2, r6
 800c44e:	f7ff ff85 	bl	800c35c <memcpy>
 800c452:	4629      	mov	r1, r5
 800c454:	4638      	mov	r0, r7
 800c456:	f7fe ff1b 	bl	800b290 <_free_r>
 800c45a:	e7f1      	b.n	800c440 <_realloc_r+0x40>

0800c45c <__ascii_wctomb>:
 800c45c:	4603      	mov	r3, r0
 800c45e:	4608      	mov	r0, r1
 800c460:	b141      	cbz	r1, 800c474 <__ascii_wctomb+0x18>
 800c462:	2aff      	cmp	r2, #255	@ 0xff
 800c464:	d904      	bls.n	800c470 <__ascii_wctomb+0x14>
 800c466:	228a      	movs	r2, #138	@ 0x8a
 800c468:	f04f 30ff 	mov.w	r0, #4294967295
 800c46c:	601a      	str	r2, [r3, #0]
 800c46e:	4770      	bx	lr
 800c470:	2001      	movs	r0, #1
 800c472:	700a      	strb	r2, [r1, #0]
 800c474:	4770      	bx	lr
	...

0800c478 <fiprintf>:
 800c478:	b40e      	push	{r1, r2, r3}
 800c47a:	b503      	push	{r0, r1, lr}
 800c47c:	4601      	mov	r1, r0
 800c47e:	ab03      	add	r3, sp, #12
 800c480:	4805      	ldr	r0, [pc, #20]	@ (800c498 <fiprintf+0x20>)
 800c482:	f853 2b04 	ldr.w	r2, [r3], #4
 800c486:	6800      	ldr	r0, [r0, #0]
 800c488:	9301      	str	r3, [sp, #4]
 800c48a:	f7ff fcf9 	bl	800be80 <_vfiprintf_r>
 800c48e:	b002      	add	sp, #8
 800c490:	f85d eb04 	ldr.w	lr, [sp], #4
 800c494:	b003      	add	sp, #12
 800c496:	4770      	bx	lr
 800c498:	20000074 	.word	0x20000074

0800c49c <abort>:
 800c49c:	2006      	movs	r0, #6
 800c49e:	b508      	push	{r3, lr}
 800c4a0:	f000 f834 	bl	800c50c <raise>
 800c4a4:	2001      	movs	r0, #1
 800c4a6:	f7f8 fb3a 	bl	8004b1e <_exit>

0800c4aa <_malloc_usable_size_r>:
 800c4aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4ae:	1f18      	subs	r0, r3, #4
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	bfbc      	itt	lt
 800c4b4:	580b      	ldrlt	r3, [r1, r0]
 800c4b6:	18c0      	addlt	r0, r0, r3
 800c4b8:	4770      	bx	lr

0800c4ba <_raise_r>:
 800c4ba:	291f      	cmp	r1, #31
 800c4bc:	b538      	push	{r3, r4, r5, lr}
 800c4be:	4605      	mov	r5, r0
 800c4c0:	460c      	mov	r4, r1
 800c4c2:	d904      	bls.n	800c4ce <_raise_r+0x14>
 800c4c4:	2316      	movs	r3, #22
 800c4c6:	6003      	str	r3, [r0, #0]
 800c4c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c4cc:	bd38      	pop	{r3, r4, r5, pc}
 800c4ce:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c4d0:	b112      	cbz	r2, 800c4d8 <_raise_r+0x1e>
 800c4d2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c4d6:	b94b      	cbnz	r3, 800c4ec <_raise_r+0x32>
 800c4d8:	4628      	mov	r0, r5
 800c4da:	f000 f831 	bl	800c540 <_getpid_r>
 800c4de:	4622      	mov	r2, r4
 800c4e0:	4601      	mov	r1, r0
 800c4e2:	4628      	mov	r0, r5
 800c4e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c4e8:	f000 b818 	b.w	800c51c <_kill_r>
 800c4ec:	2b01      	cmp	r3, #1
 800c4ee:	d00a      	beq.n	800c506 <_raise_r+0x4c>
 800c4f0:	1c59      	adds	r1, r3, #1
 800c4f2:	d103      	bne.n	800c4fc <_raise_r+0x42>
 800c4f4:	2316      	movs	r3, #22
 800c4f6:	6003      	str	r3, [r0, #0]
 800c4f8:	2001      	movs	r0, #1
 800c4fa:	e7e7      	b.n	800c4cc <_raise_r+0x12>
 800c4fc:	2100      	movs	r1, #0
 800c4fe:	4620      	mov	r0, r4
 800c500:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c504:	4798      	blx	r3
 800c506:	2000      	movs	r0, #0
 800c508:	e7e0      	b.n	800c4cc <_raise_r+0x12>
	...

0800c50c <raise>:
 800c50c:	4b02      	ldr	r3, [pc, #8]	@ (800c518 <raise+0xc>)
 800c50e:	4601      	mov	r1, r0
 800c510:	6818      	ldr	r0, [r3, #0]
 800c512:	f7ff bfd2 	b.w	800c4ba <_raise_r>
 800c516:	bf00      	nop
 800c518:	20000074 	.word	0x20000074

0800c51c <_kill_r>:
 800c51c:	b538      	push	{r3, r4, r5, lr}
 800c51e:	2300      	movs	r3, #0
 800c520:	4d06      	ldr	r5, [pc, #24]	@ (800c53c <_kill_r+0x20>)
 800c522:	4604      	mov	r4, r0
 800c524:	4608      	mov	r0, r1
 800c526:	4611      	mov	r1, r2
 800c528:	602b      	str	r3, [r5, #0]
 800c52a:	f7f8 fae8 	bl	8004afe <_kill>
 800c52e:	1c43      	adds	r3, r0, #1
 800c530:	d102      	bne.n	800c538 <_kill_r+0x1c>
 800c532:	682b      	ldr	r3, [r5, #0]
 800c534:	b103      	cbz	r3, 800c538 <_kill_r+0x1c>
 800c536:	6023      	str	r3, [r4, #0]
 800c538:	bd38      	pop	{r3, r4, r5, pc}
 800c53a:	bf00      	nop
 800c53c:	200007c4 	.word	0x200007c4

0800c540 <_getpid_r>:
 800c540:	f7f8 bad6 	b.w	8004af0 <_getpid>

0800c544 <_init>:
 800c544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c546:	bf00      	nop
 800c548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c54a:	bc08      	pop	{r3}
 800c54c:	469e      	mov	lr, r3
 800c54e:	4770      	bx	lr

0800c550 <_fini>:
 800c550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c552:	bf00      	nop
 800c554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c556:	bc08      	pop	{r3}
 800c558:	469e      	mov	lr, r3
 800c55a:	4770      	bx	lr
