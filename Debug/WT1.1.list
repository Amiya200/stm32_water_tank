
WT1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ecc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000034c  08006fd8  08006fd8  00007fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007324  08007324  00009078  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007324  08007324  00008324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800732c  0800732c  00009078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800732c  0800732c  0000832c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007330  08007330  00008330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08007334  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000042c  20000078  080073ac  00009078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004a4  080073ac  000094a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001305f  00000000  00000000  000090a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000399e  00000000  00000000  0001c100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001200  00000000  00000000  0001faa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dc6  00000000  00000000  00020ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a4da  00000000  00000000  00021a66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018407  00000000  00000000  0003bf40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ed31  00000000  00000000  00054347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e3078  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005138  00000000  00000000  000e30bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000e81f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08006fc0 	.word	0x08006fc0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08006fc0 	.word	0x08006fc0

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <__aeabi_uldivmod>:
 8000170:	b953      	cbnz	r3, 8000188 <__aeabi_uldivmod+0x18>
 8000172:	b94a      	cbnz	r2, 8000188 <__aeabi_uldivmod+0x18>
 8000174:	2900      	cmp	r1, #0
 8000176:	bf08      	it	eq
 8000178:	2800      	cmpeq	r0, #0
 800017a:	bf1c      	itt	ne
 800017c:	f04f 31ff 	movne.w	r1, #4294967295
 8000180:	f04f 30ff 	movne.w	r0, #4294967295
 8000184:	f000 b98c 	b.w	80004a0 <__aeabi_idiv0>
 8000188:	f1ad 0c08 	sub.w	ip, sp, #8
 800018c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000190:	f000 f806 	bl	80001a0 <__udivmoddi4>
 8000194:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000198:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800019c:	b004      	add	sp, #16
 800019e:	4770      	bx	lr

080001a0 <__udivmoddi4>:
 80001a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001a4:	9d08      	ldr	r5, [sp, #32]
 80001a6:	468e      	mov	lr, r1
 80001a8:	4604      	mov	r4, r0
 80001aa:	4688      	mov	r8, r1
 80001ac:	2b00      	cmp	r3, #0
 80001ae:	d14a      	bne.n	8000246 <__udivmoddi4+0xa6>
 80001b0:	428a      	cmp	r2, r1
 80001b2:	4617      	mov	r7, r2
 80001b4:	d962      	bls.n	800027c <__udivmoddi4+0xdc>
 80001b6:	fab2 f682 	clz	r6, r2
 80001ba:	b14e      	cbz	r6, 80001d0 <__udivmoddi4+0x30>
 80001bc:	f1c6 0320 	rsb	r3, r6, #32
 80001c0:	fa01 f806 	lsl.w	r8, r1, r6
 80001c4:	fa20 f303 	lsr.w	r3, r0, r3
 80001c8:	40b7      	lsls	r7, r6
 80001ca:	ea43 0808 	orr.w	r8, r3, r8
 80001ce:	40b4      	lsls	r4, r6
 80001d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80001d4:	fbb8 f1fe 	udiv	r1, r8, lr
 80001d8:	fa1f fc87 	uxth.w	ip, r7
 80001dc:	fb0e 8811 	mls	r8, lr, r1, r8
 80001e0:	fb01 f20c 	mul.w	r2, r1, ip
 80001e4:	0c23      	lsrs	r3, r4, #16
 80001e6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001ea:	429a      	cmp	r2, r3
 80001ec:	d909      	bls.n	8000202 <__udivmoddi4+0x62>
 80001ee:	18fb      	adds	r3, r7, r3
 80001f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80001f4:	f080 80eb 	bcs.w	80003ce <__udivmoddi4+0x22e>
 80001f8:	429a      	cmp	r2, r3
 80001fa:	f240 80e8 	bls.w	80003ce <__udivmoddi4+0x22e>
 80001fe:	3902      	subs	r1, #2
 8000200:	443b      	add	r3, r7
 8000202:	1a9a      	subs	r2, r3, r2
 8000204:	fbb2 f0fe 	udiv	r0, r2, lr
 8000208:	fb0e 2210 	mls	r2, lr, r0, r2
 800020c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000210:	b2a3      	uxth	r3, r4
 8000212:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000216:	459c      	cmp	ip, r3
 8000218:	d909      	bls.n	800022e <__udivmoddi4+0x8e>
 800021a:	18fb      	adds	r3, r7, r3
 800021c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000220:	f080 80d7 	bcs.w	80003d2 <__udivmoddi4+0x232>
 8000224:	459c      	cmp	ip, r3
 8000226:	f240 80d4 	bls.w	80003d2 <__udivmoddi4+0x232>
 800022a:	443b      	add	r3, r7
 800022c:	3802      	subs	r0, #2
 800022e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000232:	2100      	movs	r1, #0
 8000234:	eba3 030c 	sub.w	r3, r3, ip
 8000238:	b11d      	cbz	r5, 8000242 <__udivmoddi4+0xa2>
 800023a:	2200      	movs	r2, #0
 800023c:	40f3      	lsrs	r3, r6
 800023e:	e9c5 3200 	strd	r3, r2, [r5]
 8000242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000246:	428b      	cmp	r3, r1
 8000248:	d905      	bls.n	8000256 <__udivmoddi4+0xb6>
 800024a:	b10d      	cbz	r5, 8000250 <__udivmoddi4+0xb0>
 800024c:	e9c5 0100 	strd	r0, r1, [r5]
 8000250:	2100      	movs	r1, #0
 8000252:	4608      	mov	r0, r1
 8000254:	e7f5      	b.n	8000242 <__udivmoddi4+0xa2>
 8000256:	fab3 f183 	clz	r1, r3
 800025a:	2900      	cmp	r1, #0
 800025c:	d146      	bne.n	80002ec <__udivmoddi4+0x14c>
 800025e:	4573      	cmp	r3, lr
 8000260:	d302      	bcc.n	8000268 <__udivmoddi4+0xc8>
 8000262:	4282      	cmp	r2, r0
 8000264:	f200 8108 	bhi.w	8000478 <__udivmoddi4+0x2d8>
 8000268:	1a84      	subs	r4, r0, r2
 800026a:	eb6e 0203 	sbc.w	r2, lr, r3
 800026e:	2001      	movs	r0, #1
 8000270:	4690      	mov	r8, r2
 8000272:	2d00      	cmp	r5, #0
 8000274:	d0e5      	beq.n	8000242 <__udivmoddi4+0xa2>
 8000276:	e9c5 4800 	strd	r4, r8, [r5]
 800027a:	e7e2      	b.n	8000242 <__udivmoddi4+0xa2>
 800027c:	2a00      	cmp	r2, #0
 800027e:	f000 8091 	beq.w	80003a4 <__udivmoddi4+0x204>
 8000282:	fab2 f682 	clz	r6, r2
 8000286:	2e00      	cmp	r6, #0
 8000288:	f040 80a5 	bne.w	80003d6 <__udivmoddi4+0x236>
 800028c:	1a8a      	subs	r2, r1, r2
 800028e:	2101      	movs	r1, #1
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000296:	b280      	uxth	r0, r0
 8000298:	b2bc      	uxth	r4, r7
 800029a:	fbb2 fcfe 	udiv	ip, r2, lr
 800029e:	fb0e 221c 	mls	r2, lr, ip, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb04 f20c 	mul.w	r2, r4, ip
 80002aa:	429a      	cmp	r2, r3
 80002ac:	d907      	bls.n	80002be <__udivmoddi4+0x11e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80002b4:	d202      	bcs.n	80002bc <__udivmoddi4+0x11c>
 80002b6:	429a      	cmp	r2, r3
 80002b8:	f200 80e3 	bhi.w	8000482 <__udivmoddi4+0x2e2>
 80002bc:	46c4      	mov	ip, r8
 80002be:	1a9b      	subs	r3, r3, r2
 80002c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80002c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80002c8:	fb02 f404 	mul.w	r4, r2, r4
 80002cc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80002d0:	429c      	cmp	r4, r3
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0x144>
 80002d4:	18fb      	adds	r3, r7, r3
 80002d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0x142>
 80002dc:	429c      	cmp	r4, r3
 80002de:	f200 80cd 	bhi.w	800047c <__udivmoddi4+0x2dc>
 80002e2:	4602      	mov	r2, r0
 80002e4:	1b1b      	subs	r3, r3, r4
 80002e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80002ea:	e7a5      	b.n	8000238 <__udivmoddi4+0x98>
 80002ec:	f1c1 0620 	rsb	r6, r1, #32
 80002f0:	408b      	lsls	r3, r1
 80002f2:	fa22 f706 	lsr.w	r7, r2, r6
 80002f6:	431f      	orrs	r7, r3
 80002f8:	fa2e fa06 	lsr.w	sl, lr, r6
 80002fc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000300:	fbba f8f9 	udiv	r8, sl, r9
 8000304:	fa0e fe01 	lsl.w	lr, lr, r1
 8000308:	fa20 f306 	lsr.w	r3, r0, r6
 800030c:	fb09 aa18 	mls	sl, r9, r8, sl
 8000310:	fa1f fc87 	uxth.w	ip, r7
 8000314:	ea43 030e 	orr.w	r3, r3, lr
 8000318:	fa00 fe01 	lsl.w	lr, r0, r1
 800031c:	fb08 f00c 	mul.w	r0, r8, ip
 8000320:	0c1c      	lsrs	r4, r3, #16
 8000322:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000326:	42a0      	cmp	r0, r4
 8000328:	fa02 f201 	lsl.w	r2, r2, r1
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x1a4>
 800032e:	193c      	adds	r4, r7, r4
 8000330:	f108 3aff 	add.w	sl, r8, #4294967295
 8000334:	f080 809e 	bcs.w	8000474 <__udivmoddi4+0x2d4>
 8000338:	42a0      	cmp	r0, r4
 800033a:	f240 809b 	bls.w	8000474 <__udivmoddi4+0x2d4>
 800033e:	f1a8 0802 	sub.w	r8, r8, #2
 8000342:	443c      	add	r4, r7
 8000344:	1a24      	subs	r4, r4, r0
 8000346:	b298      	uxth	r0, r3
 8000348:	fbb4 f3f9 	udiv	r3, r4, r9
 800034c:	fb09 4413 	mls	r4, r9, r3, r4
 8000350:	fb03 fc0c 	mul.w	ip, r3, ip
 8000354:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000358:	45a4      	cmp	ip, r4
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x1d0>
 800035c:	193c      	adds	r4, r7, r4
 800035e:	f103 30ff 	add.w	r0, r3, #4294967295
 8000362:	f080 8085 	bcs.w	8000470 <__udivmoddi4+0x2d0>
 8000366:	45a4      	cmp	ip, r4
 8000368:	f240 8082 	bls.w	8000470 <__udivmoddi4+0x2d0>
 800036c:	3b02      	subs	r3, #2
 800036e:	443c      	add	r4, r7
 8000370:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000374:	eba4 040c 	sub.w	r4, r4, ip
 8000378:	fba0 8c02 	umull	r8, ip, r0, r2
 800037c:	4564      	cmp	r4, ip
 800037e:	4643      	mov	r3, r8
 8000380:	46e1      	mov	r9, ip
 8000382:	d364      	bcc.n	800044e <__udivmoddi4+0x2ae>
 8000384:	d061      	beq.n	800044a <__udivmoddi4+0x2aa>
 8000386:	b15d      	cbz	r5, 80003a0 <__udivmoddi4+0x200>
 8000388:	ebbe 0203 	subs.w	r2, lr, r3
 800038c:	eb64 0409 	sbc.w	r4, r4, r9
 8000390:	fa04 f606 	lsl.w	r6, r4, r6
 8000394:	fa22 f301 	lsr.w	r3, r2, r1
 8000398:	431e      	orrs	r6, r3
 800039a:	40cc      	lsrs	r4, r1
 800039c:	e9c5 6400 	strd	r6, r4, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	e74e      	b.n	8000242 <__udivmoddi4+0xa2>
 80003a4:	fbb1 fcf2 	udiv	ip, r1, r2
 80003a8:	0c01      	lsrs	r1, r0, #16
 80003aa:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80003ae:	b280      	uxth	r0, r0
 80003b0:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80003b4:	463b      	mov	r3, r7
 80003b6:	fbb1 f1f7 	udiv	r1, r1, r7
 80003ba:	4638      	mov	r0, r7
 80003bc:	463c      	mov	r4, r7
 80003be:	46b8      	mov	r8, r7
 80003c0:	46be      	mov	lr, r7
 80003c2:	2620      	movs	r6, #32
 80003c4:	eba2 0208 	sub.w	r2, r2, r8
 80003c8:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80003cc:	e765      	b.n	800029a <__udivmoddi4+0xfa>
 80003ce:	4601      	mov	r1, r0
 80003d0:	e717      	b.n	8000202 <__udivmoddi4+0x62>
 80003d2:	4610      	mov	r0, r2
 80003d4:	e72b      	b.n	800022e <__udivmoddi4+0x8e>
 80003d6:	f1c6 0120 	rsb	r1, r6, #32
 80003da:	fa2e fc01 	lsr.w	ip, lr, r1
 80003de:	40b7      	lsls	r7, r6
 80003e0:	fa0e fe06 	lsl.w	lr, lr, r6
 80003e4:	fa20 f101 	lsr.w	r1, r0, r1
 80003e8:	ea41 010e 	orr.w	r1, r1, lr
 80003ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f0:	fbbc f8fe 	udiv	r8, ip, lr
 80003f4:	b2bc      	uxth	r4, r7
 80003f6:	fb0e cc18 	mls	ip, lr, r8, ip
 80003fa:	fb08 f904 	mul.w	r9, r8, r4
 80003fe:	0c0a      	lsrs	r2, r1, #16
 8000400:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8000404:	40b0      	lsls	r0, r6
 8000406:	4591      	cmp	r9, r2
 8000408:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800040c:	b280      	uxth	r0, r0
 800040e:	d93e      	bls.n	800048e <__udivmoddi4+0x2ee>
 8000410:	18ba      	adds	r2, r7, r2
 8000412:	f108 3cff 	add.w	ip, r8, #4294967295
 8000416:	d201      	bcs.n	800041c <__udivmoddi4+0x27c>
 8000418:	4591      	cmp	r9, r2
 800041a:	d81f      	bhi.n	800045c <__udivmoddi4+0x2bc>
 800041c:	eba2 0209 	sub.w	r2, r2, r9
 8000420:	fbb2 f9fe 	udiv	r9, r2, lr
 8000424:	fb09 f804 	mul.w	r8, r9, r4
 8000428:	fb0e 2a19 	mls	sl, lr, r9, r2
 800042c:	b28a      	uxth	r2, r1
 800042e:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 8000432:	4542      	cmp	r2, r8
 8000434:	d229      	bcs.n	800048a <__udivmoddi4+0x2ea>
 8000436:	18ba      	adds	r2, r7, r2
 8000438:	f109 31ff 	add.w	r1, r9, #4294967295
 800043c:	d2c2      	bcs.n	80003c4 <__udivmoddi4+0x224>
 800043e:	4542      	cmp	r2, r8
 8000440:	d2c0      	bcs.n	80003c4 <__udivmoddi4+0x224>
 8000442:	f1a9 0102 	sub.w	r1, r9, #2
 8000446:	443a      	add	r2, r7
 8000448:	e7bc      	b.n	80003c4 <__udivmoddi4+0x224>
 800044a:	45c6      	cmp	lr, r8
 800044c:	d29b      	bcs.n	8000386 <__udivmoddi4+0x1e6>
 800044e:	ebb8 0302 	subs.w	r3, r8, r2
 8000452:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000456:	3801      	subs	r0, #1
 8000458:	46e1      	mov	r9, ip
 800045a:	e794      	b.n	8000386 <__udivmoddi4+0x1e6>
 800045c:	eba7 0909 	sub.w	r9, r7, r9
 8000460:	444a      	add	r2, r9
 8000462:	fbb2 f9fe 	udiv	r9, r2, lr
 8000466:	f1a8 0c02 	sub.w	ip, r8, #2
 800046a:	fb09 f804 	mul.w	r8, r9, r4
 800046e:	e7db      	b.n	8000428 <__udivmoddi4+0x288>
 8000470:	4603      	mov	r3, r0
 8000472:	e77d      	b.n	8000370 <__udivmoddi4+0x1d0>
 8000474:	46d0      	mov	r8, sl
 8000476:	e765      	b.n	8000344 <__udivmoddi4+0x1a4>
 8000478:	4608      	mov	r0, r1
 800047a:	e6fa      	b.n	8000272 <__udivmoddi4+0xd2>
 800047c:	443b      	add	r3, r7
 800047e:	3a02      	subs	r2, #2
 8000480:	e730      	b.n	80002e4 <__udivmoddi4+0x144>
 8000482:	f1ac 0c02 	sub.w	ip, ip, #2
 8000486:	443b      	add	r3, r7
 8000488:	e719      	b.n	80002be <__udivmoddi4+0x11e>
 800048a:	4649      	mov	r1, r9
 800048c:	e79a      	b.n	80003c4 <__udivmoddi4+0x224>
 800048e:	eba2 0209 	sub.w	r2, r2, r9
 8000492:	fbb2 f9fe 	udiv	r9, r2, lr
 8000496:	46c4      	mov	ip, r8
 8000498:	fb09 f804 	mul.w	r8, r9, r4
 800049c:	e7c4      	b.n	8000428 <__udivmoddi4+0x288>
 800049e:	bf00      	nop

080004a0 <__aeabi_idiv0>:
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop

080004a4 <ADC_Init>:
/**
  * @brief Initializes the ADC hardware
  * @param hadc: Pointer to ADC handle
  */
void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
    // Calibration
    if (HAL_ADCEx_Calibration_Start(hadc) != HAL_OK)
 80004ac:	6878      	ldr	r0, [r7, #4]
 80004ae:	f001 fefd 	bl	80022ac <HAL_ADCEx_Calibration_Start>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <ADC_Init+0x18>
    {
        Error_Handler();
 80004b8:	f000 fc7c 	bl	8000db4 <Error_Handler>
    }
}
 80004bc:	bf00      	nop
 80004be:	3708      	adds	r7, #8
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}

080004c4 <lcd_send_cmd>:
/** Put this in the src folder **/

extern I2C_HandleTypeDef hi2c2;  // use your I2C handler

void lcd_send_cmd(char cmd)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b086      	sub	sp, #24
 80004c8:	af02      	add	r7, sp, #8
 80004ca:	4603      	mov	r3, r0
 80004cc:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (cmd & 0xF0);
 80004ce:	79fb      	ldrb	r3, [r7, #7]
 80004d0:	f023 030f 	bic.w	r3, r3, #15
 80004d4:	73fb      	strb	r3, [r7, #15]
    data_l = ((cmd << 4) & 0xF0);
 80004d6:	79fb      	ldrb	r3, [r7, #7]
 80004d8:	011b      	lsls	r3, r3, #4
 80004da:	73bb      	strb	r3, [r7, #14]

    // Always keep backlight ON
    data_t[0] = data_u | 0x0C | LCD_BACKLIGHT;  // en=1, rs=0
 80004dc:	7bfb      	ldrb	r3, [r7, #15]
 80004de:	f043 030c 	orr.w	r3, r3, #12
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x08 | LCD_BACKLIGHT;  // en=0, rs=0
 80004e6:	7bfb      	ldrb	r3, [r7, #15]
 80004e8:	f043 0308 	orr.w	r3, r3, #8
 80004ec:	b2db      	uxtb	r3, r3
 80004ee:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0C | LCD_BACKLIGHT;  // en=1, rs=0
 80004f0:	7bbb      	ldrb	r3, [r7, #14]
 80004f2:	f043 030c 	orr.w	r3, r3, #12
 80004f6:	b2db      	uxtb	r3, r3
 80004f8:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x08 | LCD_BACKLIGHT;  // en=0, rs=0
 80004fa:	7bbb      	ldrb	r3, [r7, #14]
 80004fc:	f043 0308 	orr.w	r3, r3, #8
 8000500:	b2db      	uxtb	r3, r3
 8000502:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(&hi2c2, SLAVE_ADDRESS_LCD, (uint8_t *) data_t, 4, 100);
 8000504:	f107 0208 	add.w	r2, r7, #8
 8000508:	2364      	movs	r3, #100	@ 0x64
 800050a:	9300      	str	r3, [sp, #0]
 800050c:	2304      	movs	r3, #4
 800050e:	214e      	movs	r1, #78	@ 0x4e
 8000510:	4803      	ldr	r0, [pc, #12]	@ (8000520 <lcd_send_cmd+0x5c>)
 8000512:	f002 fb67 	bl	8002be4 <HAL_I2C_Master_Transmit>
}
 8000516:	bf00      	nop
 8000518:	3710      	adds	r7, #16
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	2000012c 	.word	0x2000012c

08000524 <lcd_init>:
    }
    lcd_send_cmd(col);
}

void lcd_init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
    HAL_Delay(50);  // wait >40ms after power-on
 8000528:	2032      	movs	r0, #50	@ 0x32
 800052a:	f001 fc2f 	bl	8001d8c <HAL_Delay>

    // 4-bit init sequence
    lcd_send_cmd(0x30);
 800052e:	2030      	movs	r0, #48	@ 0x30
 8000530:	f7ff ffc8 	bl	80004c4 <lcd_send_cmd>
    HAL_Delay(5);
 8000534:	2005      	movs	r0, #5
 8000536:	f001 fc29 	bl	8001d8c <HAL_Delay>
    lcd_send_cmd(0x30);
 800053a:	2030      	movs	r0, #48	@ 0x30
 800053c:	f7ff ffc2 	bl	80004c4 <lcd_send_cmd>
    HAL_Delay(1);
 8000540:	2001      	movs	r0, #1
 8000542:	f001 fc23 	bl	8001d8c <HAL_Delay>
    lcd_send_cmd(0x30);
 8000546:	2030      	movs	r0, #48	@ 0x30
 8000548:	f7ff ffbc 	bl	80004c4 <lcd_send_cmd>
    HAL_Delay(10);
 800054c:	200a      	movs	r0, #10
 800054e:	f001 fc1d 	bl	8001d8c <HAL_Delay>
    lcd_send_cmd(0x20);  // 4-bit mode
 8000552:	2020      	movs	r0, #32
 8000554:	f7ff ffb6 	bl	80004c4 <lcd_send_cmd>
    HAL_Delay(10);
 8000558:	200a      	movs	r0, #10
 800055a:	f001 fc17 	bl	8001d8c <HAL_Delay>

    // Function set: 2-line, 5x8 dots
    lcd_send_cmd(0x28);
 800055e:	2028      	movs	r0, #40	@ 0x28
 8000560:	f7ff ffb0 	bl	80004c4 <lcd_send_cmd>
    HAL_Delay(1);
 8000564:	2001      	movs	r0, #1
 8000566:	f001 fc11 	bl	8001d8c <HAL_Delay>

    // Display OFF
    lcd_send_cmd(0x08);
 800056a:	2008      	movs	r0, #8
 800056c:	f7ff ffaa 	bl	80004c4 <lcd_send_cmd>
    HAL_Delay(1);
 8000570:	2001      	movs	r0, #1
 8000572:	f001 fc0b 	bl	8001d8c <HAL_Delay>

    // Clear display
    lcd_send_cmd(0x01);
 8000576:	2001      	movs	r0, #1
 8000578:	f7ff ffa4 	bl	80004c4 <lcd_send_cmd>
    HAL_Delay(2);
 800057c:	2002      	movs	r0, #2
 800057e:	f001 fc05 	bl	8001d8c <HAL_Delay>

    // Entry mode set: increment cursor
    lcd_send_cmd(0x06);
 8000582:	2006      	movs	r0, #6
 8000584:	f7ff ff9e 	bl	80004c4 <lcd_send_cmd>
    HAL_Delay(1);
 8000588:	2001      	movs	r0, #1
 800058a:	f001 fbff 	bl	8001d8c <HAL_Delay>

    // Display ON, Cursor OFF, Blink OFF
    lcd_send_cmd(0x0C);
 800058e:	200c      	movs	r0, #12
 8000590:	f7ff ff98 	bl	80004c4 <lcd_send_cmd>
}
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}

08000598 <LED_ClearAllIntents>:
        }
    }
}

void LED_ClearAllIntents(void)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 800059e:	2300      	movs	r3, #0
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	e00d      	b.n	80005c0 <LED_ClearAllIntents+0x28>
        s_intent[i].mode = LED_MODE_OFF;
 80005a4:	4a0b      	ldr	r2, [pc, #44]	@ (80005d4 <LED_ClearAllIntents+0x3c>)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	2100      	movs	r1, #0
 80005aa:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
        s_intent[i].period_ms = 0;
 80005ae:	4a09      	ldr	r2, [pc, #36]	@ (80005d4 <LED_ClearAllIntents+0x3c>)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	009b      	lsls	r3, r3, #2
 80005b4:	4413      	add	r3, r2
 80005b6:	2200      	movs	r2, #0
 80005b8:	805a      	strh	r2, [r3, #2]
    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	3301      	adds	r3, #1
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2b03      	cmp	r3, #3
 80005c4:	ddee      	ble.n	80005a4 <LED_ClearAllIntents+0xc>
    }
}
 80005c6:	bf00      	nop
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bc80      	pop	{r7}
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20000098 	.word	0x20000098

080005d8 <LED_SetIntent>:

void LED_SetIntent(LedColor color, LedMode mode, uint16_t period_ms)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	71fb      	strb	r3, [r7, #7]
 80005e2:	460b      	mov	r3, r1
 80005e4:	71bb      	strb	r3, [r7, #6]
 80005e6:	4613      	mov	r3, r2
 80005e8:	80bb      	strh	r3, [r7, #4]
    if ((int)color < 0 || color >= LED_COLOR_COUNT) return;
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	2b03      	cmp	r3, #3
 80005ee:	d80b      	bhi.n	8000608 <LED_SetIntent+0x30>
    s_intent[color].mode = mode;
 80005f0:	79fb      	ldrb	r3, [r7, #7]
 80005f2:	4908      	ldr	r1, [pc, #32]	@ (8000614 <LED_SetIntent+0x3c>)
 80005f4:	79ba      	ldrb	r2, [r7, #6]
 80005f6:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
    s_intent[color].period_ms = period_ms;
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	4a05      	ldr	r2, [pc, #20]	@ (8000614 <LED_SetIntent+0x3c>)
 80005fe:	009b      	lsls	r3, r3, #2
 8000600:	4413      	add	r3, r2
 8000602:	88ba      	ldrh	r2, [r7, #4]
 8000604:	805a      	strh	r2, [r3, #2]
 8000606:	e000      	b.n	800060a <LED_SetIntent+0x32>
    if ((int)color < 0 || color >= LED_COLOR_COUNT) return;
 8000608:	bf00      	nop
}
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	bc80      	pop	{r7}
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	20000098 	.word	0x20000098

08000618 <LED_ApplyIntents>:

/* current implementation uses intents directly in LED_Task() */
void LED_ApplyIntents(void) { /* no-op, reserved for future resolve rules */ }
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	bc80      	pop	{r7}
 8000622:	4770      	bx	lr

08000624 <LoRa_WriteReg>:


//uint8_t rxBuffer[256]; // Buffer for received data

/* --- low-level SPI helpers --- */
void LoRa_WriteReg(uint8_t addr, uint8_t data) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	460a      	mov	r2, r1
 800062e:	71fb      	strb	r3, [r7, #7]
 8000630:	4613      	mov	r3, r2
 8000632:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2] = { (uint8_t)(addr | 0x80), data };
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800063a:	b2db      	uxtb	r3, r3
 800063c:	733b      	strb	r3, [r7, #12]
 800063e:	79bb      	ldrb	r3, [r7, #6]
 8000640:	737b      	strb	r3, [r7, #13]
    NSS_LOW();
 8000642:	2200      	movs	r2, #0
 8000644:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000648:	480a      	ldr	r0, [pc, #40]	@ (8000674 <LoRa_WriteReg+0x50>)
 800064a:	f002 f96f 	bl	800292c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, buf, 2, HAL_MAX_DELAY);
 800064e:	f107 010c 	add.w	r1, r7, #12
 8000652:	f04f 33ff 	mov.w	r3, #4294967295
 8000656:	2202      	movs	r2, #2
 8000658:	4807      	ldr	r0, [pc, #28]	@ (8000678 <LoRa_WriteReg+0x54>)
 800065a:	f004 fb93 	bl	8004d84 <HAL_SPI_Transmit>
    NSS_HIGH();
 800065e:	2201      	movs	r2, #1
 8000660:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000664:	4803      	ldr	r0, [pc, #12]	@ (8000674 <LoRa_WriteReg+0x50>)
 8000666:	f002 f961 	bl	800292c <HAL_GPIO_WritePin>
}
 800066a:	bf00      	nop
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40010800 	.word	0x40010800
 8000678:	20000194 	.word	0x20000194

0800067c <LoRa_ReadReg>:

uint8_t LoRa_ReadReg(uint8_t addr) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	71fb      	strb	r3, [r7, #7]
    uint8_t tx = addr & 0x7F;
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800068c:	b2db      	uxtb	r3, r3
 800068e:	73fb      	strb	r3, [r7, #15]
    uint8_t rx = 0;
 8000690:	2300      	movs	r3, #0
 8000692:	73bb      	strb	r3, [r7, #14]
    NSS_LOW();
 8000694:	2200      	movs	r2, #0
 8000696:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800069a:	480f      	ldr	r0, [pc, #60]	@ (80006d8 <LoRa_ReadReg+0x5c>)
 800069c:	f002 f946 	bl	800292c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &tx, 1, HAL_MAX_DELAY);
 80006a0:	f107 010f 	add.w	r1, r7, #15
 80006a4:	f04f 33ff 	mov.w	r3, #4294967295
 80006a8:	2201      	movs	r2, #1
 80006aa:	480c      	ldr	r0, [pc, #48]	@ (80006dc <LoRa_ReadReg+0x60>)
 80006ac:	f004 fb6a 	bl	8004d84 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, &rx, 1, HAL_MAX_DELAY);
 80006b0:	f107 010e 	add.w	r1, r7, #14
 80006b4:	f04f 33ff 	mov.w	r3, #4294967295
 80006b8:	2201      	movs	r2, #1
 80006ba:	4808      	ldr	r0, [pc, #32]	@ (80006dc <LoRa_ReadReg+0x60>)
 80006bc:	f004 fca6 	bl	800500c <HAL_SPI_Receive>
    NSS_HIGH();
 80006c0:	2201      	movs	r2, #1
 80006c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006c6:	4804      	ldr	r0, [pc, #16]	@ (80006d8 <LoRa_ReadReg+0x5c>)
 80006c8:	f002 f930 	bl	800292c <HAL_GPIO_WritePin>
    return rx;
 80006cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3710      	adds	r7, #16
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40010800 	.word	0x40010800
 80006dc:	20000194 	.word	0x20000194

080006e0 <LoRa_Reset>:
    HAL_SPI_Receive(&hspi1, buffer, size, HAL_MAX_DELAY);
    NSS_HIGH();
}

/* --- reset --- */
void LoRa_Reset(void) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LORA_RESET_PORT, LORA_RESET_PIN, GPIO_PIN_RESET);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2140      	movs	r1, #64	@ 0x40
 80006e8:	4807      	ldr	r0, [pc, #28]	@ (8000708 <LoRa_Reset+0x28>)
 80006ea:	f002 f91f 	bl	800292c <HAL_GPIO_WritePin>
    HAL_Delay(2);
 80006ee:	2002      	movs	r0, #2
 80006f0:	f001 fb4c 	bl	8001d8c <HAL_Delay>
    HAL_GPIO_WritePin(LORA_RESET_PORT, LORA_RESET_PIN, GPIO_PIN_SET);
 80006f4:	2201      	movs	r2, #1
 80006f6:	2140      	movs	r1, #64	@ 0x40
 80006f8:	4803      	ldr	r0, [pc, #12]	@ (8000708 <LoRa_Reset+0x28>)
 80006fa:	f002 f917 	bl	800292c <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80006fe:	200a      	movs	r0, #10
 8000700:	f001 fb44 	bl	8001d8c <HAL_Delay>
}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40010c00 	.word	0x40010c00

0800070c <LoRa_SetFrequency>:

/* --- set frequency (Hz) --- */
void LoRa_SetFrequency(uint32_t freqHz) {
 800070c:	b5b0      	push	{r4, r5, r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
    /* FRF = freq * 2^19 / 32e6 */
    uint64_t frf = ((uint64_t)freqHz << 19) / 32000000ULL;
 8000714:	6879      	ldr	r1, [r7, #4]
 8000716:	2000      	movs	r0, #0
 8000718:	460a      	mov	r2, r1
 800071a:	4603      	mov	r3, r0
 800071c:	0b55      	lsrs	r5, r2, #13
 800071e:	04d4      	lsls	r4, r2, #19
 8000720:	4a18      	ldr	r2, [pc, #96]	@ (8000784 <LoRa_SetFrequency+0x78>)
 8000722:	f04f 0300 	mov.w	r3, #0
 8000726:	4620      	mov	r0, r4
 8000728:	4629      	mov	r1, r5
 800072a:	f7ff fd21 	bl	8000170 <__aeabi_uldivmod>
 800072e:	4602      	mov	r2, r0
 8000730:	460b      	mov	r3, r1
 8000732:	e9c7 2302 	strd	r2, r3, [r7, #8]
    LoRa_WriteReg(0x06, (uint8_t)(frf >> 16));
 8000736:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800073a:	f04f 0200 	mov.w	r2, #0
 800073e:	f04f 0300 	mov.w	r3, #0
 8000742:	0c02      	lsrs	r2, r0, #16
 8000744:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000748:	0c0b      	lsrs	r3, r1, #16
 800074a:	b2d3      	uxtb	r3, r2
 800074c:	4619      	mov	r1, r3
 800074e:	2006      	movs	r0, #6
 8000750:	f7ff ff68 	bl	8000624 <LoRa_WriteReg>
    LoRa_WriteReg(0x07, (uint8_t)(frf >> 8));
 8000754:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000758:	f04f 0200 	mov.w	r2, #0
 800075c:	f04f 0300 	mov.w	r3, #0
 8000760:	0a02      	lsrs	r2, r0, #8
 8000762:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000766:	0a0b      	lsrs	r3, r1, #8
 8000768:	b2d3      	uxtb	r3, r2
 800076a:	4619      	mov	r1, r3
 800076c:	2007      	movs	r0, #7
 800076e:	f7ff ff59 	bl	8000624 <LoRa_WriteReg>
    LoRa_WriteReg(0x08, (uint8_t)(frf >> 0));
 8000772:	7a3b      	ldrb	r3, [r7, #8]
 8000774:	4619      	mov	r1, r3
 8000776:	2008      	movs	r0, #8
 8000778:	f7ff ff54 	bl	8000624 <LoRa_WriteReg>
}
 800077c:	bf00      	nop
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bdb0      	pop	{r4, r5, r7, pc}
 8000784:	01e84800 	.word	0x01e84800

08000788 <LoRa_Init>:

/* --- init with settings that match Arduino LoRa defaults --- */
void LoRa_Init(void) {
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
    LoRa_Reset();
 800078c:	f7ff ffa8 	bl	80006e0 <LoRa_Reset>

    /* Sleep, then LoRa sleep mode */
    LoRa_WriteReg(0x01, 0x00);
 8000790:	2100      	movs	r1, #0
 8000792:	2001      	movs	r0, #1
 8000794:	f7ff ff46 	bl	8000624 <LoRa_WriteReg>
    HAL_Delay(5);
 8000798:	2005      	movs	r0, #5
 800079a:	f001 faf7 	bl	8001d8c <HAL_Delay>
    LoRa_WriteReg(0x01, 0x80);
 800079e:	2180      	movs	r1, #128	@ 0x80
 80007a0:	2001      	movs	r0, #1
 80007a2:	f7ff ff3f 	bl	8000624 <LoRa_WriteReg>
    HAL_Delay(5);
 80007a6:	2005      	movs	r0, #5
 80007a8:	f001 faf0 	bl	8001d8c <HAL_Delay>

    /* Frequency (433 MHz) */
    LoRa_SetFrequency(LORA_FREQUENCY);
 80007ac:	4818      	ldr	r0, [pc, #96]	@ (8000810 <LoRa_Init+0x88>)
 80007ae:	f7ff ffad 	bl	800070c <LoRa_SetFrequency>

    /* PA config: PA_BOOST, max power (common for SX1278 Ra-02) */
    LoRa_WriteReg(0x09, 0x8F); // PA_BOOST, max power
 80007b2:	218f      	movs	r1, #143	@ 0x8f
 80007b4:	2009      	movs	r0, #9
 80007b6:	f7ff ff35 	bl	8000624 <LoRa_WriteReg>

    /* Enable high-power PA if module supports it (optional) */
    LoRa_WriteReg(0x4D, 0x87); // RegPaDac (only on SX1276/78 family)
 80007ba:	2187      	movs	r1, #135	@ 0x87
 80007bc:	204d      	movs	r0, #77	@ 0x4d
 80007be:	f7ff ff31 	bl	8000624 <LoRa_WriteReg>

    /* LNA */
    LoRa_WriteReg(0x0C, 0x23);
 80007c2:	2123      	movs	r1, #35	@ 0x23
 80007c4:	200c      	movs	r0, #12
 80007c6:	f7ff ff2d 	bl	8000624 <LoRa_WriteReg>
    /* Modem config:
       RegModemConfig1 = 0x72 -> BW=125kHz, CR=4/5, Explicit header
       RegModemConfig2 = 0x74 -> SF7, CRC ON (Arduino default)
       RegModemConfig3 = 0x04 -> LowDataRateOptimize off, AGC Auto On
    */
    LoRa_WriteReg(0x1D, 0x72);
 80007ca:	2172      	movs	r1, #114	@ 0x72
 80007cc:	201d      	movs	r0, #29
 80007ce:	f7ff ff29 	bl	8000624 <LoRa_WriteReg>
    LoRa_WriteReg(0x1E, 0x74);
 80007d2:	2174      	movs	r1, #116	@ 0x74
 80007d4:	201e      	movs	r0, #30
 80007d6:	f7ff ff25 	bl	8000624 <LoRa_WriteReg>
    LoRa_WriteReg(0x26, 0x04);
 80007da:	2104      	movs	r1, #4
 80007dc:	2026      	movs	r0, #38	@ 0x26
 80007de:	f7ff ff21 	bl	8000624 <LoRa_WriteReg>

    /* Preamble = 8 */
    LoRa_WriteReg(0x20, 0x00);
 80007e2:	2100      	movs	r1, #0
 80007e4:	2020      	movs	r0, #32
 80007e6:	f7ff ff1d 	bl	8000624 <LoRa_WriteReg>
    LoRa_WriteReg(0x21, 0x08);
 80007ea:	2108      	movs	r1, #8
 80007ec:	2021      	movs	r0, #33	@ 0x21
 80007ee:	f7ff ff19 	bl	8000624 <LoRa_WriteReg>

    /* SyncWord = 0x22 (matches LoRa.setSyncWord(0x22) on Arduino) */
    LoRa_WriteReg(0x39, 0x22);
 80007f2:	2122      	movs	r1, #34	@ 0x22
 80007f4:	2039      	movs	r0, #57	@ 0x39
 80007f6:	f7ff ff15 	bl	8000624 <LoRa_WriteReg>

    /* Map DIO0 = RxDone/TxDone as normal (we'll poll IRQs) */
    LoRa_WriteReg(0x40, 0x00);
 80007fa:	2100      	movs	r1, #0
 80007fc:	2040      	movs	r0, #64	@ 0x40
 80007fe:	f7ff ff11 	bl	8000624 <LoRa_WriteReg>

    /* Clear IRQs */
    LoRa_WriteReg(0x12, 0xFF);
 8000802:	21ff      	movs	r1, #255	@ 0xff
 8000804:	2012      	movs	r0, #18
 8000806:	f7ff ff0d 	bl	8000624 <LoRa_WriteReg>
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	19cf0e40 	.word	0x19cf0e40

08000814 <I2C_Scan>:
static void MX_RTC_Init(void);
static void MX_SPI1_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_I2C2_Init(void);
/* USER CODE BEGIN PFP */
void I2C_Scan(void) {
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
    for (uint8_t i = 1; i < 128; i++) {
 800081a:	2301      	movs	r3, #1
 800081c:	71fb      	strb	r3, [r7, #7]
 800081e:	e017      	b.n	8000850 <I2C_Scan+0x3c>
        if (HAL_I2C_IsDeviceReady(&hi2c2, (i << 1), 2, 10) == HAL_OK) {
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	b29b      	uxth	r3, r3
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	b299      	uxth	r1, r3
 8000828:	230a      	movs	r3, #10
 800082a:	2202      	movs	r2, #2
 800082c:	480d      	ldr	r0, [pc, #52]	@ (8000864 <I2C_Scan+0x50>)
 800082e:	f002 fad7 	bl	8002de0 <HAL_I2C_IsDeviceReady>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d108      	bne.n	800084a <I2C_Scan+0x36>
            sprintf(buf, "Found device at 0x%02X\r\n", i);
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	461a      	mov	r2, r3
 800083c:	490a      	ldr	r1, [pc, #40]	@ (8000868 <I2C_Scan+0x54>)
 800083e:	480b      	ldr	r0, [pc, #44]	@ (800086c <I2C_Scan+0x58>)
 8000840:	f005 fabe 	bl	8005dc0 <siprintf>
            Debug_Print(buf);
 8000844:	4809      	ldr	r0, [pc, #36]	@ (800086c <I2C_Scan+0x58>)
 8000846:	f000 f813 	bl	8000870 <Debug_Print>
    for (uint8_t i = 1; i < 128; i++) {
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	3301      	adds	r3, #1
 800084e:	71fb      	strb	r3, [r7, #7]
 8000850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000854:	2b00      	cmp	r3, #0
 8000856:	dae3      	bge.n	8000820 <I2C_Scan+0xc>
        }
    }
}
 8000858:	bf00      	nop
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	2000012c 	.word	0x2000012c
 8000868:	08006fd8 	.word	0x08006fd8
 800086c:	200000a8 	.word	0x200000a8

08000870 <Debug_Print>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Debug_Print(char *msg) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
    // Use the new UART_TransmitString function
    UART_TransmitString(&huart1, msg);
 8000878:	6879      	ldr	r1, [r7, #4]
 800087a:	4803      	ldr	r0, [pc, #12]	@ (8000888 <Debug_Print+0x18>)
 800087c:	f001 f9a8 	bl	8001bd0 <UART_TransmitString>
}
 8000880:	bf00      	nop
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	200001ec 	.word	0x200001ec

0800088c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b0a2      	sub	sp, #136	@ 0x88
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000892:	f001 fa19 	bl	8001cc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000896:	f000 f86b 	bl	8000970 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800089a:	f000 f9f7 	bl	8000c8c <MX_GPIO_Init>
  MX_ADC1_Init();
 800089e:	f000 f8c5 	bl	8000a2c <MX_ADC1_Init>
  MX_RTC_Init();
 80008a2:	f000 f92f 	bl	8000b04 <MX_RTC_Init>
  MX_SPI1_Init();
 80008a6:	f000 f991 	bl	8000bcc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80008aa:	f000 f9c5 	bl	8000c38 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 80008ae:	f000 f8fb 	bl	8000aa8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80008b2:	f7ff fe37 	bl	8000524 <lcd_init>
  ADC_Init(&hadc1);
 80008b6:	4825      	ldr	r0, [pc, #148]	@ (800094c <main+0xc0>)
 80008b8:	f7ff fdf4 	bl	80004a4 <ADC_Init>
  LoRa_Init(); // Initialize LoRa module
 80008bc:	f7ff ff64 	bl	8000788 <LoRa_Init>
  I2C_Scan();
 80008c0:	f7ff ffa8 	bl	8000814 <I2C_Scan>
  Screen_Init();
 80008c4:	f000 ff02 	bl	80016cc <Screen_Init>
  UART_Init(); // Initialize UART reception (starts the first IT)
 80008c8:	f001 f964 	bl	8001b94 <UART_Init>
  Switches_Init();
 80008cc:	f001 f8ce 	bl	8001a6c <Switches_Init>

  Debug_Print("System Initialized\r\n");
 80008d0:	481f      	ldr	r0, [pc, #124]	@ (8000950 <main+0xc4>)
 80008d2:	f7ff ffcd 	bl	8000870 <Debug_Print>
  uint8_t modem = LoRa_ReadReg(0x1D);
 80008d6:	201d      	movs	r0, #29
 80008d8:	f7ff fed0 	bl	800067c <LoRa_ReadReg>
 80008dc:	4603      	mov	r3, r0
 80008de:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  uint8_t modem2 = LoRa_ReadReg(0x1E);
 80008e2:	201e      	movs	r0, #30
 80008e4:	f7ff feca 	bl	800067c <LoRa_ReadReg>
 80008e8:	4603      	mov	r3, r0
 80008ea:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86


  sprintf(dbg, "ModemCfg1=0x%02X, ModemCfg2=0x%02X\r\n", modem, modem2);
 80008ee:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 80008f2:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80008f6:	4917      	ldr	r1, [pc, #92]	@ (8000954 <main+0xc8>)
 80008f8:	4817      	ldr	r0, [pc, #92]	@ (8000958 <main+0xcc>)
 80008fa:	f005 fa61 	bl	8005dc0 <siprintf>
  Debug_Print(dbg);
 80008fe:	4816      	ldr	r0, [pc, #88]	@ (8000958 <main+0xcc>)
 8000900:	f7ff ffb6 	bl	8000870 <Debug_Print>
  if (HAL_I2C_IsDeviceReady(&hi2c2, DS3231_ADDRESS, 2, 100) != HAL_OK) {
 8000904:	2364      	movs	r3, #100	@ 0x64
 8000906:	2202      	movs	r2, #2
 8000908:	21d0      	movs	r1, #208	@ 0xd0
 800090a:	4814      	ldr	r0, [pc, #80]	@ (800095c <main+0xd0>)
 800090c:	f002 fa68 	bl	8002de0 <HAL_I2C_IsDeviceReady>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d003      	beq.n	800091e <main+0x92>
      Debug_Print("❌ DS3231 not responding!\r\n");
 8000916:	4812      	ldr	r0, [pc, #72]	@ (8000960 <main+0xd4>)
 8000918:	f7ff ffaa 	bl	8000870 <Debug_Print>
 800091c:	e002      	b.n	8000924 <main+0x98>
  } else {
      Debug_Print("✅ DS3231 detected!\r\n");
 800091e:	4811      	ldr	r0, [pc, #68]	@ (8000964 <main+0xd8>)
 8000920:	f7ff ffa6 	bl	8000870 <Debug_Print>
  }
  // DELETE this whole block in main.c (right after peripheral init)
  if (packetReady) {
 8000924:	4b10      	ldr	r3, [pc, #64]	@ (8000968 <main+0xdc>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	b2db      	uxtb	r3, r3
 800092a:	2b00      	cmp	r3, #0
 800092c:	d00a      	beq.n	8000944 <main+0xb8>
      char buffer[128];
      if (UART_GetReceivedPacket(buffer, sizeof(buffer))) {
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	2180      	movs	r1, #128	@ 0x80
 8000932:	4618      	mov	r0, r3
 8000934:	f001 f960 	bl	8001bf8 <UART_GetReceivedPacket>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d002      	beq.n	8000944 <main+0xb8>
    	  ModelHandle_ProcessUartCommand(receivedUartPacket);
 800093e:	480b      	ldr	r0, [pc, #44]	@ (800096c <main+0xe0>)
 8000940:	f000 fcf6 	bl	8001330 <ModelHandle_ProcessUartCommand>

      }
  }

         // Process all active modes
         ModelHandle_Process();
 8000944:	f000 fe84 	bl	8001650 <ModelHandle_Process>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <main+0xbc>
 800094c:	200000fc 	.word	0x200000fc
 8000950:	0800704c 	.word	0x0800704c
 8000954:	08007064 	.word	0x08007064
 8000958:	200000c8 	.word	0x200000c8
 800095c:	2000012c 	.word	0x2000012c
 8000960:	0800708c 	.word	0x0800708c
 8000964:	080070ac 	.word	0x080070ac
 8000968:	20000094 	.word	0x20000094
 800096c:	20000234 	.word	0x20000234

08000970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b094      	sub	sp, #80	@ 0x50
 8000974:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000976:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800097a:	2228      	movs	r2, #40	@ 0x28
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f005 fa6e 	bl	8005e60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009a0:	2301      	movs	r3, #1
 80009a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80009aa:	2300      	movs	r3, #0
 80009ac:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009ae:	2301      	movs	r3, #1
 80009b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b2:	2302      	movs	r3, #2
 80009b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009bc:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80009c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009c6:	4618      	mov	r0, r3
 80009c8:	f002 fd9e 	bl	8003508 <HAL_RCC_OscConfig>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80009d2:	f000 f9ef 	bl	8000db4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d6:	230f      	movs	r3, #15
 80009d8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009da:	2302      	movs	r3, #2
 80009dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009de:	2300      	movs	r3, #0
 80009e0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009e6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	2102      	movs	r1, #2
 80009f2:	4618      	mov	r0, r3
 80009f4:	f003 f80a 	bl	8003a0c <HAL_RCC_ClockConfig>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80009fe:	f000 f9d9 	bl	8000db4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8000a02:	2303      	movs	r3, #3
 8000a04:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV128;
 8000a06:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a0a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000a0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a10:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	4618      	mov	r0, r3
 8000a16:	f003 f987 	bl	8003d28 <HAL_RCCEx_PeriphCLKConfig>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000a20:	f000 f9c8 	bl	8000db4 <Error_Handler>
  }
}
 8000a24:	bf00      	nop
 8000a26:	3750      	adds	r7, #80	@ 0x50
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a3c:	4b18      	ldr	r3, [pc, #96]	@ (8000aa0 <MX_ADC1_Init+0x74>)
 8000a3e:	4a19      	ldr	r2, [pc, #100]	@ (8000aa4 <MX_ADC1_Init+0x78>)
 8000a40:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a42:	4b17      	ldr	r3, [pc, #92]	@ (8000aa0 <MX_ADC1_Init+0x74>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a48:	4b15      	ldr	r3, [pc, #84]	@ (8000aa0 <MX_ADC1_Init+0x74>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a4e:	4b14      	ldr	r3, [pc, #80]	@ (8000aa0 <MX_ADC1_Init+0x74>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a54:	4b12      	ldr	r3, [pc, #72]	@ (8000aa0 <MX_ADC1_Init+0x74>)
 8000a56:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000a5a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a5c:	4b10      	ldr	r3, [pc, #64]	@ (8000aa0 <MX_ADC1_Init+0x74>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000a62:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa0 <MX_ADC1_Init+0x74>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a68:	480d      	ldr	r0, [pc, #52]	@ (8000aa0 <MX_ADC1_Init+0x74>)
 8000a6a:	f001 f9b3 	bl	8001dd4 <HAL_ADC_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000a74:	f000 f99e 	bl	8000db4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	4619      	mov	r1, r3
 8000a88:	4805      	ldr	r0, [pc, #20]	@ (8000aa0 <MX_ADC1_Init+0x74>)
 8000a8a:	f001 fa7b 	bl	8001f84 <HAL_ADC_ConfigChannel>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000a94:	f000 f98e 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a98:	bf00      	nop
 8000a9a:	3710      	adds	r7, #16
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	200000fc 	.word	0x200000fc
 8000aa4:	40012400 	.word	0x40012400

08000aa8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000aac:	4b12      	ldr	r3, [pc, #72]	@ (8000af8 <MX_I2C2_Init+0x50>)
 8000aae:	4a13      	ldr	r2, [pc, #76]	@ (8000afc <MX_I2C2_Init+0x54>)
 8000ab0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000ab2:	4b11      	ldr	r3, [pc, #68]	@ (8000af8 <MX_I2C2_Init+0x50>)
 8000ab4:	4a12      	ldr	r2, [pc, #72]	@ (8000b00 <MX_I2C2_Init+0x58>)
 8000ab6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8000af8 <MX_I2C2_Init+0x50>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000abe:	4b0e      	ldr	r3, [pc, #56]	@ (8000af8 <MX_I2C2_Init+0x50>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8000af8 <MX_I2C2_Init+0x50>)
 8000ac6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000aca:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000acc:	4b0a      	ldr	r3, [pc, #40]	@ (8000af8 <MX_I2C2_Init+0x50>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000ad2:	4b09      	ldr	r3, [pc, #36]	@ (8000af8 <MX_I2C2_Init+0x50>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ad8:	4b07      	ldr	r3, [pc, #28]	@ (8000af8 <MX_I2C2_Init+0x50>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ade:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <MX_I2C2_Init+0x50>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ae4:	4804      	ldr	r0, [pc, #16]	@ (8000af8 <MX_I2C2_Init+0x50>)
 8000ae6:	f001 ff39 	bl	800295c <HAL_I2C_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000af0:	f000 f960 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	2000012c 	.word	0x2000012c
 8000afc:	40005800 	.word	0x40005800
 8000b00:	000186a0 	.word	0x000186a0

08000b04 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000b0a:	f107 030c 	add.w	r3, r7, #12
 8000b0e:	2100      	movs	r1, #0
 8000b10:	460a      	mov	r2, r1
 8000b12:	801a      	strh	r2, [r3, #0]
 8000b14:	460a      	mov	r2, r1
 8000b16:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 8000b1c:	463b      	mov	r3, r7
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b24:	4b27      	ldr	r3, [pc, #156]	@ (8000bc4 <MX_RTC_Init+0xc0>)
 8000b26:	4a28      	ldr	r2, [pc, #160]	@ (8000bc8 <MX_RTC_Init+0xc4>)
 8000b28:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000b2a:	4b26      	ldr	r3, [pc, #152]	@ (8000bc4 <MX_RTC_Init+0xc0>)
 8000b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b30:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000b32:	4b24      	ldr	r3, [pc, #144]	@ (8000bc4 <MX_RTC_Init+0xc0>)
 8000b34:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b38:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b3a:	4822      	ldr	r0, [pc, #136]	@ (8000bc4 <MX_RTC_Init+0xc0>)
 8000b3c:	f003 fa60 	bl	8004000 <HAL_RTC_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8000b46:	f000 f935 	bl	8000db4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x13;
 8000b4a:	2313      	movs	r3, #19
 8000b4c:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000b56:	f107 030c 	add.w	r3, r7, #12
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4819      	ldr	r0, [pc, #100]	@ (8000bc4 <MX_RTC_Init+0xc0>)
 8000b60:	f003 fada 	bl	8004118 <HAL_RTC_SetTime>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 8000b6a:	f000 f923 	bl	8000db4 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000b72:	2301      	movs	r3, #1
 8000b74:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 0x1;
 8000b76:	2301      	movs	r3, #1
 8000b78:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0x0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000b7e:	f107 0308 	add.w	r3, r7, #8
 8000b82:	2201      	movs	r2, #1
 8000b84:	4619      	mov	r1, r3
 8000b86:	480f      	ldr	r0, [pc, #60]	@ (8000bc4 <MX_RTC_Init+0xc0>)
 8000b88:	f003 fc36 	bl	80043f8 <HAL_RTC_SetDate>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000b92:	f000 f90f 	bl	8000db4 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x13;
 8000b96:	2313      	movs	r3, #19
 8000b98:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000ba6:	463b      	mov	r3, r7
 8000ba8:	2201      	movs	r2, #1
 8000baa:	4619      	mov	r1, r3
 8000bac:	4805      	ldr	r0, [pc, #20]	@ (8000bc4 <MX_RTC_Init+0xc0>)
 8000bae:	f003 fcd9 	bl	8004564 <HAL_RTC_SetAlarm_IT>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8000bb8:	f000 f8fc 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000bbc:	bf00      	nop
 8000bbe:	3710      	adds	r7, #16
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000180 	.word	0x20000180
 8000bc8:	40002800 	.word	0x40002800

08000bcc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bd0:	4b17      	ldr	r3, [pc, #92]	@ (8000c30 <MX_SPI1_Init+0x64>)
 8000bd2:	4a18      	ldr	r2, [pc, #96]	@ (8000c34 <MX_SPI1_Init+0x68>)
 8000bd4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bd6:	4b16      	ldr	r3, [pc, #88]	@ (8000c30 <MX_SPI1_Init+0x64>)
 8000bd8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000bdc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bde:	4b14      	ldr	r3, [pc, #80]	@ (8000c30 <MX_SPI1_Init+0x64>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000be4:	4b12      	ldr	r3, [pc, #72]	@ (8000c30 <MX_SPI1_Init+0x64>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bea:	4b11      	ldr	r3, [pc, #68]	@ (8000c30 <MX_SPI1_Init+0x64>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c30 <MX_SPI1_Init+0x64>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c30 <MX_SPI1_Init+0x64>)
 8000bf8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bfc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8000c30 <MX_SPI1_Init+0x64>)
 8000c00:	2218      	movs	r2, #24
 8000c02:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c04:	4b0a      	ldr	r3, [pc, #40]	@ (8000c30 <MX_SPI1_Init+0x64>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c0a:	4b09      	ldr	r3, [pc, #36]	@ (8000c30 <MX_SPI1_Init+0x64>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c10:	4b07      	ldr	r3, [pc, #28]	@ (8000c30 <MX_SPI1_Init+0x64>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c16:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <MX_SPI1_Init+0x64>)
 8000c18:	220a      	movs	r2, #10
 8000c1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c1c:	4804      	ldr	r0, [pc, #16]	@ (8000c30 <MX_SPI1_Init+0x64>)
 8000c1e:	f004 f82d 	bl	8004c7c <HAL_SPI_Init>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c28:	f000 f8c4 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20000194 	.word	0x20000194
 8000c34:	40013000 	.word	0x40013000

08000c38 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c3c:	4b11      	ldr	r3, [pc, #68]	@ (8000c84 <MX_USART1_UART_Init+0x4c>)
 8000c3e:	4a12      	ldr	r2, [pc, #72]	@ (8000c88 <MX_USART1_UART_Init+0x50>)
 8000c40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c42:	4b10      	ldr	r3, [pc, #64]	@ (8000c84 <MX_USART1_UART_Init+0x4c>)
 8000c44:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c84 <MX_USART1_UART_Init+0x4c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c50:	4b0c      	ldr	r3, [pc, #48]	@ (8000c84 <MX_USART1_UART_Init+0x4c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c56:	4b0b      	ldr	r3, [pc, #44]	@ (8000c84 <MX_USART1_UART_Init+0x4c>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c5c:	4b09      	ldr	r3, [pc, #36]	@ (8000c84 <MX_USART1_UART_Init+0x4c>)
 8000c5e:	220c      	movs	r2, #12
 8000c60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c62:	4b08      	ldr	r3, [pc, #32]	@ (8000c84 <MX_USART1_UART_Init+0x4c>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c68:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <MX_USART1_UART_Init+0x4c>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c6e:	4805      	ldr	r0, [pc, #20]	@ (8000c84 <MX_USART1_UART_Init+0x4c>)
 8000c70:	f004 fd99 	bl	80057a6 <HAL_UART_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c7a:	f000 f89b 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	200001ec 	.word	0x200001ec
 8000c88:	40013800 	.word	0x40013800

08000c8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b088      	sub	sp, #32
 8000c90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c92:	f107 0310 	add.w	r3, r7, #16
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca0:	4b40      	ldr	r3, [pc, #256]	@ (8000da4 <MX_GPIO_Init+0x118>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	4a3f      	ldr	r2, [pc, #252]	@ (8000da4 <MX_GPIO_Init+0x118>)
 8000ca6:	f043 0310 	orr.w	r3, r3, #16
 8000caa:	6193      	str	r3, [r2, #24]
 8000cac:	4b3d      	ldr	r3, [pc, #244]	@ (8000da4 <MX_GPIO_Init+0x118>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	f003 0310 	and.w	r3, r3, #16
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb8:	4b3a      	ldr	r3, [pc, #232]	@ (8000da4 <MX_GPIO_Init+0x118>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	4a39      	ldr	r2, [pc, #228]	@ (8000da4 <MX_GPIO_Init+0x118>)
 8000cbe:	f043 0320 	orr.w	r3, r3, #32
 8000cc2:	6193      	str	r3, [r2, #24]
 8000cc4:	4b37      	ldr	r3, [pc, #220]	@ (8000da4 <MX_GPIO_Init+0x118>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	f003 0320 	and.w	r3, r3, #32
 8000ccc:	60bb      	str	r3, [r7, #8]
 8000cce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd0:	4b34      	ldr	r3, [pc, #208]	@ (8000da4 <MX_GPIO_Init+0x118>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	4a33      	ldr	r2, [pc, #204]	@ (8000da4 <MX_GPIO_Init+0x118>)
 8000cd6:	f043 0304 	orr.w	r3, r3, #4
 8000cda:	6193      	str	r3, [r2, #24]
 8000cdc:	4b31      	ldr	r3, [pc, #196]	@ (8000da4 <MX_GPIO_Init+0x118>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	f003 0304 	and.w	r3, r3, #4
 8000ce4:	607b      	str	r3, [r7, #4]
 8000ce6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce8:	4b2e      	ldr	r3, [pc, #184]	@ (8000da4 <MX_GPIO_Init+0x118>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	4a2d      	ldr	r2, [pc, #180]	@ (8000da4 <MX_GPIO_Init+0x118>)
 8000cee:	f043 0308 	orr.w	r3, r3, #8
 8000cf2:	6193      	str	r3, [r2, #24]
 8000cf4:	4b2b      	ldr	r3, [pc, #172]	@ (8000da4 <MX_GPIO_Init+0x118>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	f003 0308 	and.w	r3, r3, #8
 8000cfc:	603b      	str	r3, [r7, #0]
 8000cfe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Relay1_Pin|Relay2_Pin|Relay3_Pin|LORA_STATUS_Pin
 8000d00:	2200      	movs	r2, #0
 8000d02:	f240 3147 	movw	r1, #839	@ 0x347
 8000d06:	4828      	ldr	r0, [pc, #160]	@ (8000da8 <MX_GPIO_Init+0x11c>)
 8000d08:	f001 fe10 	bl	800292c <HAL_GPIO_WritePin>
                          |LED4_Pin|LED5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LORA_SELECT_Pin, GPIO_PIN_RESET);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f44f 4119 	mov.w	r1, #39168	@ 0x9900
 8000d12:	4826      	ldr	r0, [pc, #152]	@ (8000dac <MX_GPIO_Init+0x120>)
 8000d14:	f001 fe0a 	bl	800292c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : AC_voltage_Pin AC_current_Pin */
  GPIO_InitStruct.Pin = AC_voltage_Pin|AC_current_Pin;
 8000d18:	23c0      	movs	r3, #192	@ 0xc0
 8000d1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d20:	f107 0310 	add.w	r3, r7, #16
 8000d24:	4619      	mov	r1, r3
 8000d26:	4821      	ldr	r0, [pc, #132]	@ (8000dac <MX_GPIO_Init+0x120>)
 8000d28:	f001 fc7c 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pins : Relay1_Pin Relay2_Pin Relay3_Pin LORA_STATUS_Pin
                           LED4_Pin LED5_Pin */
  GPIO_InitStruct.Pin = Relay1_Pin|Relay2_Pin|Relay3_Pin|LORA_STATUS_Pin
 8000d2c:	f240 3347 	movw	r3, #839	@ 0x347
 8000d30:	613b      	str	r3, [r7, #16]
                          |LED4_Pin|LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d32:	2301      	movs	r3, #1
 8000d34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3e:	f107 0310 	add.w	r3, r7, #16
 8000d42:	4619      	mov	r1, r3
 8000d44:	4818      	ldr	r0, [pc, #96]	@ (8000da8 <MX_GPIO_Init+0x11c>)
 8000d46:	f001 fc6d 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWITCH1_Pin SWITCH2_Pin SWITCH3_Pin SWITCH4_Pin */
  GPIO_InitStruct.Pin = SWITCH1_Pin|SWITCH2_Pin|SWITCH3_Pin|SWITCH4_Pin;
 8000d4a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000d4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000d50:	4b17      	ldr	r3, [pc, #92]	@ (8000db0 <MX_GPIO_Init+0x124>)
 8000d52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d54:	2301      	movs	r3, #1
 8000d56:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d58:	f107 0310 	add.w	r3, r7, #16
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4812      	ldr	r0, [pc, #72]	@ (8000da8 <MX_GPIO_Init+0x11c>)
 8000d60:	f001 fc60 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LORA_SELECT_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LORA_SELECT_Pin;
 8000d64:	f44f 4319 	mov.w	r3, #39168	@ 0x9900
 8000d68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d72:	2302      	movs	r3, #2
 8000d74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d76:	f107 0310 	add.w	r3, r7, #16
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	480b      	ldr	r0, [pc, #44]	@ (8000dac <MX_GPIO_Init+0x120>)
 8000d7e:	f001 fc51 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_DATA_Pin */
  GPIO_InitStruct.Pin = RF_DATA_Pin;
 8000d82:	2380      	movs	r3, #128	@ 0x80
 8000d84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RF_DATA_GPIO_Port, &GPIO_InitStruct);
 8000d8e:	f107 0310 	add.w	r3, r7, #16
 8000d92:	4619      	mov	r1, r3
 8000d94:	4804      	ldr	r0, [pc, #16]	@ (8000da8 <MX_GPIO_Init+0x11c>)
 8000d96:	f001 fc45 	bl	8002624 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d9a:	bf00      	nop
 8000d9c:	3720      	adds	r7, #32
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40021000 	.word	0x40021000
 8000da8:	40010c00 	.word	0x40010c00
 8000dac:	40010800 	.word	0x40010800
 8000db0:	10310000 	.word	0x10310000

08000db4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db8:	b672      	cpsid	i
}
 8000dba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dbc:	bf00      	nop
 8000dbe:	e7fd      	b.n	8000dbc <Error_Handler+0x8>

08000dc0 <now_ms>:
static const uint32_t MAX_CONT_RUN_MS = 2UL * 60UL * 60UL * 1000UL; // 2h
static bool           maxRunTimerArmed = false;
static uint32_t       maxRunStartTick  = 0;

/* ===== Utilities ===== */
static inline uint32_t now_ms(void) { return HAL_GetTick(); }
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	f000 ffd8 	bl	8001d78 <HAL_GetTick>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	4618      	mov	r0, r3
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <ModelHandle_TimeToSeconds>:

uint32_t ModelHandle_TimeToSeconds(uint8_t hh, uint8_t mm) {
 8000dce:	b480      	push	{r7}
 8000dd0:	b083      	sub	sp, #12
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	460a      	mov	r2, r1
 8000dd8:	71fb      	strb	r3, [r7, #7]
 8000dda:	4613      	mov	r3, r2
 8000ddc:	71bb      	strb	r3, [r7, #6]
    return ((uint32_t)hh * 3600UL) + ((uint32_t)mm * 60UL);
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8000de4:	fb02 f103 	mul.w	r1, r2, r3
 8000de8:	79ba      	ldrb	r2, [r7, #6]
 8000dea:	4613      	mov	r3, r2
 8000dec:	011b      	lsls	r3, r3, #4
 8000dee:	1a9b      	subs	r3, r3, r2
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	440b      	add	r3, r1
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bc80      	pop	{r7}
 8000dfc:	4770      	bx	lr
	...

08000e00 <motor_apply>:
    if (mm) *mm = (uint8_t)((sec % 3600UL) / 60UL);
}

/* ===== Motor ===== */
static void motor_apply(bool on)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	71fb      	strb	r3, [r7, #7]
    Relay_Set(1, on);
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	f000 fc2e 	bl	8001670 <Relay_Set>
    motorStatus = on ? 1U : 0U;
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <motor_apply+0x1e>
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	e000      	b.n	8000e20 <motor_apply+0x20>
 8000e1e:	2200      	movs	r2, #0
 8000e20:	4b0d      	ldr	r3, [pc, #52]	@ (8000e58 <motor_apply+0x58>)
 8000e22:	701a      	strb	r2, [r3, #0]

    if (on) {
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d00f      	beq.n	8000e4a <motor_apply+0x4a>
        if (!maxRunTimerArmed) {
 8000e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e5c <motor_apply+0x5c>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	f083 0301 	eor.w	r3, r3, #1
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d00b      	beq.n	8000e50 <motor_apply+0x50>
            maxRunTimerArmed = true;
 8000e38:	4b08      	ldr	r3, [pc, #32]	@ (8000e5c <motor_apply+0x5c>)
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	701a      	strb	r2, [r3, #0]
            maxRunStartTick  = now_ms();
 8000e3e:	f7ff ffbf 	bl	8000dc0 <now_ms>
 8000e42:	4603      	mov	r3, r0
 8000e44:	4a06      	ldr	r2, [pc, #24]	@ (8000e60 <motor_apply+0x60>)
 8000e46:	6013      	str	r3, [r2, #0]
        }
    } else {
        maxRunTimerArmed = false;
    }
}
 8000e48:	e002      	b.n	8000e50 <motor_apply+0x50>
        maxRunTimerArmed = false;
 8000e4a:	4b04      	ldr	r3, [pc, #16]	@ (8000e5c <motor_apply+0x5c>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	701a      	strb	r2, [r3, #0]
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000274 	.word	0x20000274
 8000e5c:	200002c0 	.word	0x200002c0
 8000e60:	200002c4 	.word	0x200002c4

08000e64 <countdown_start>:

/* ===== Countdown ===== */
static void countdown_start(bool onMode, uint32_t seconds)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	6039      	str	r1, [r7, #0]
 8000e6e:	71fb      	strb	r3, [r7, #7]
    if (seconds == 0) { countdownActive = false; return; }
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d103      	bne.n	8000e7e <countdown_start+0x1a>
 8000e76:	4b12      	ldr	r3, [pc, #72]	@ (8000ec0 <countdown_start+0x5c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	701a      	strb	r2, [r3, #0]
 8000e7c:	e01d      	b.n	8000eba <countdown_start+0x56>
    countdownMode     = onMode;
 8000e7e:	4a11      	ldr	r2, [pc, #68]	@ (8000ec4 <countdown_start+0x60>)
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	7013      	strb	r3, [r2, #0]
    countdownDuration = seconds;
 8000e84:	4a10      	ldr	r2, [pc, #64]	@ (8000ec8 <countdown_start+0x64>)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	6013      	str	r3, [r2, #0]
    countdownActive   = true;
 8000e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec0 <countdown_start+0x5c>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	701a      	strb	r2, [r3, #0]
    countdownDeadline = now_ms() + (seconds * 1000UL);
 8000e90:	f7ff ff96 	bl	8000dc0 <now_ms>
 8000e94:	4602      	mov	r2, r0
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000e9c:	fb01 f303 	mul.w	r3, r1, r3
 8000ea0:	4413      	add	r3, r2
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ecc <countdown_start+0x68>)
 8000ea4:	6013      	str	r3, [r2, #0]

    if (onMode) motor_apply(true);
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d003      	beq.n	8000eb4 <countdown_start+0x50>
 8000eac:	2001      	movs	r0, #1
 8000eae:	f7ff ffa7 	bl	8000e00 <motor_apply>
 8000eb2:	e002      	b.n	8000eba <countdown_start+0x56>
    else        motor_apply(false);
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	f7ff ffa3 	bl	8000e00 <motor_apply>
}
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20000275 	.word	0x20000275
 8000ec4:	20000000 	.word	0x20000000
 8000ec8:	20000278 	.word	0x20000278
 8000ecc:	2000027c 	.word	0x2000027c

08000ed0 <countdown_tick>:

static void countdown_tick(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
    if (!countdownActive) return;
 8000ed6:	4b1b      	ldr	r3, [pc, #108]	@ (8000f44 <countdown_tick+0x74>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	f083 0301 	eor.w	r3, r3, #1
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d12a      	bne.n	8000f3c <countdown_tick+0x6c>

    uint32_t tnow = now_ms();
 8000ee6:	f7ff ff6b 	bl	8000dc0 <now_ms>
 8000eea:	6078      	str	r0, [r7, #4]
    if ((int32_t)(countdownDeadline - tnow) <= 0) {
 8000eec:	4b16      	ldr	r3, [pc, #88]	@ (8000f48 <countdown_tick+0x78>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	dc12      	bgt.n	8000f1e <countdown_tick+0x4e>
        if (countdownMode) motor_apply(false);
 8000ef8:	4b14      	ldr	r3, [pc, #80]	@ (8000f4c <countdown_tick+0x7c>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d003      	beq.n	8000f0a <countdown_tick+0x3a>
 8000f02:	2000      	movs	r0, #0
 8000f04:	f7ff ff7c 	bl	8000e00 <motor_apply>
 8000f08:	e002      	b.n	8000f10 <countdown_tick+0x40>
        else               motor_apply(true);
 8000f0a:	2001      	movs	r0, #1
 8000f0c:	f7ff ff78 	bl	8000e00 <motor_apply>
        countdownActive   = false;
 8000f10:	4b0c      	ldr	r3, [pc, #48]	@ (8000f44 <countdown_tick+0x74>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	701a      	strb	r2, [r3, #0]
        countdownDuration = 0;
 8000f16:	4b0e      	ldr	r3, [pc, #56]	@ (8000f50 <countdown_tick+0x80>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
        return;
 8000f1c:	e00f      	b.n	8000f3e <countdown_tick+0x6e>
    }

    uint32_t remaining_ms = countdownDeadline - tnow;
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f48 <countdown_tick+0x78>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	603b      	str	r3, [r7, #0]
    countdownDuration = (remaining_ms + 999) / 1000;
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 8000f2e:	4a09      	ldr	r2, [pc, #36]	@ (8000f54 <countdown_tick+0x84>)
 8000f30:	fba2 2303 	umull	r2, r3, r2, r3
 8000f34:	099b      	lsrs	r3, r3, #6
 8000f36:	4a06      	ldr	r2, [pc, #24]	@ (8000f50 <countdown_tick+0x80>)
 8000f38:	6013      	str	r3, [r2, #0]
 8000f3a:	e000      	b.n	8000f3e <countdown_tick+0x6e>
    if (!countdownActive) return;
 8000f3c:	bf00      	nop
}
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000275 	.word	0x20000275
 8000f48:	2000027c 	.word	0x2000027c
 8000f4c:	20000000 	.word	0x20000000
 8000f50:	20000278 	.word	0x20000278
 8000f54:	10624dd3 	.word	0x10624dd3

08000f58 <twist_tick>:
/* ===== Twist ===== */
static bool     twist_on_phase = false;
static uint32_t twist_phase_deadline = 0;

static void twist_tick(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
    if (!twistSettings.twistActive) return;
 8000f5e:	4b22      	ldr	r3, [pc, #136]	@ (8000fe8 <twist_tick+0x90>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	f083 0301 	eor.w	r3, r3, #1
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d137      	bne.n	8000fdc <twist_tick+0x84>

    uint32_t tnow = now_ms();
 8000f6c:	f7ff ff28 	bl	8000dc0 <now_ms>
 8000f70:	6078      	str	r0, [r7, #4]
    if ((int32_t)(twist_phase_deadline - tnow) > 0) return;
 8000f72:	4b1e      	ldr	r3, [pc, #120]	@ (8000fec <twist_tick+0x94>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	dc30      	bgt.n	8000fe0 <twist_tick+0x88>

    twist_on_phase = !twist_on_phase;
 8000f7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ff0 <twist_tick+0x98>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	bf14      	ite	ne
 8000f86:	2301      	movne	r3, #1
 8000f88:	2300      	moveq	r3, #0
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	f083 0301 	eor.w	r3, r3, #1
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	4b15      	ldr	r3, [pc, #84]	@ (8000ff0 <twist_tick+0x98>)
 8000f9a:	701a      	strb	r2, [r3, #0]
    if (twist_on_phase) {
 8000f9c:	4b14      	ldr	r3, [pc, #80]	@ (8000ff0 <twist_tick+0x98>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d00d      	beq.n	8000fc0 <twist_tick+0x68>
        motor_apply(true);
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	f7ff ff2b 	bl	8000e00 <motor_apply>
        twist_phase_deadline = tnow + (twistSettings.onDurationSeconds * 1000UL);
 8000faa:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe8 <twist_tick+0x90>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000fb2:	fb03 f202 	mul.w	r2, r3, r2
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4413      	add	r3, r2
 8000fba:	4a0c      	ldr	r2, [pc, #48]	@ (8000fec <twist_tick+0x94>)
 8000fbc:	6013      	str	r3, [r2, #0]
 8000fbe:	e010      	b.n	8000fe2 <twist_tick+0x8a>
    } else {
        motor_apply(false);
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f7ff ff1d 	bl	8000e00 <motor_apply>
        twist_phase_deadline = tnow + (twistSettings.offDurationSeconds * 1000UL);
 8000fc6:	4b08      	ldr	r3, [pc, #32]	@ (8000fe8 <twist_tick+0x90>)
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000fce:	fb03 f202 	mul.w	r2, r3, r2
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	4a05      	ldr	r2, [pc, #20]	@ (8000fec <twist_tick+0x94>)
 8000fd8:	6013      	str	r3, [r2, #0]
 8000fda:	e002      	b.n	8000fe2 <twist_tick+0x8a>
    if (!twistSettings.twistActive) return;
 8000fdc:	bf00      	nop
 8000fde:	e000      	b.n	8000fe2 <twist_tick+0x8a>
    if ((int32_t)(twist_phase_deadline - tnow) > 0) return;
 8000fe0:	bf00      	nop
    }
}
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000010 	.word	0x20000010
 8000fec:	200002cc 	.word	0x200002cc
 8000ff0:	200002c8 	.word	0x200002c8

08000ff4 <search_tick>:
/* ===== Search ===== */
static bool     search_in_test = false;
static uint32_t search_phase_deadline = 0;

static void search_tick(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
    if (!searchSettings.searchActive) return;
 8000ffa:	4b1f      	ldr	r3, [pc, #124]	@ (8001078 <search_tick+0x84>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	f083 0301 	eor.w	r3, r3, #1
 8001002:	b2db      	uxtb	r3, r3
 8001004:	2b00      	cmp	r3, #0
 8001006:	d131      	bne.n	800106c <search_tick+0x78>

    uint32_t tnow = now_ms();
 8001008:	f7ff feda 	bl	8000dc0 <now_ms>
 800100c:	6078      	str	r0, [r7, #4]
    if ((int32_t)(search_phase_deadline - tnow) > 0) return;
 800100e:	4b1b      	ldr	r3, [pc, #108]	@ (800107c <search_tick+0x88>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	2b00      	cmp	r3, #0
 8001018:	dc2a      	bgt.n	8001070 <search_tick+0x7c>

    if (!search_in_test) {
 800101a:	4b19      	ldr	r3, [pc, #100]	@ (8001080 <search_tick+0x8c>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	f083 0301 	eor.w	r3, r3, #1
 8001022:	b2db      	uxtb	r3, r3
 8001024:	2b00      	cmp	r3, #0
 8001026:	d010      	beq.n	800104a <search_tick+0x56>
        search_in_test = true;
 8001028:	4b15      	ldr	r3, [pc, #84]	@ (8001080 <search_tick+0x8c>)
 800102a:	2201      	movs	r2, #1
 800102c:	701a      	strb	r2, [r3, #0]
        motor_apply(true);
 800102e:	2001      	movs	r0, #1
 8001030:	f7ff fee6 	bl	8000e00 <motor_apply>
        search_phase_deadline = tnow + (searchSettings.dryRunTimeSeconds * 1000UL);
 8001034:	4b10      	ldr	r3, [pc, #64]	@ (8001078 <search_tick+0x84>)
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800103c:	fb03 f202 	mul.w	r2, r3, r2
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4413      	add	r3, r2
 8001044:	4a0d      	ldr	r2, [pc, #52]	@ (800107c <search_tick+0x88>)
 8001046:	6013      	str	r3, [r2, #0]
 8001048:	e013      	b.n	8001072 <search_tick+0x7e>
    } else {
        motor_apply(false);
 800104a:	2000      	movs	r0, #0
 800104c:	f7ff fed8 	bl	8000e00 <motor_apply>
        search_in_test = false;
 8001050:	4b0b      	ldr	r3, [pc, #44]	@ (8001080 <search_tick+0x8c>)
 8001052:	2200      	movs	r2, #0
 8001054:	701a      	strb	r2, [r3, #0]
        search_phase_deadline = tnow + (searchSettings.testingGapSeconds * 1000UL);
 8001056:	4b08      	ldr	r3, [pc, #32]	@ (8001078 <search_tick+0x84>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800105e:	fb03 f202 	mul.w	r2, r3, r2
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4413      	add	r3, r2
 8001066:	4a05      	ldr	r2, [pc, #20]	@ (800107c <search_tick+0x88>)
 8001068:	6013      	str	r3, [r2, #0]
 800106a:	e002      	b.n	8001072 <search_tick+0x7e>
    if (!searchSettings.searchActive) return;
 800106c:	bf00      	nop
 800106e:	e000      	b.n	8001072 <search_tick+0x7e>
    if ((int32_t)(search_phase_deadline - tnow) > 0) return;
 8001070:	bf00      	nop
    }
}
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000004 	.word	0x20000004
 800107c:	200002d4 	.word	0x200002d4
 8001080:	200002d0 	.word	0x200002d0

08001084 <seconds_since_midnight>:

/* ===== Timer (daily window) ===== */
static uint32_t seconds_since_midnight(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
    /* TODO: replace with RTC if available */
    uint32_t ms = now_ms() % (24UL*3600UL*1000UL);
 800108a:	f7ff fe99 	bl	8000dc0 <now_ms>
 800108e:	4603      	mov	r3, r0
 8001090:	4a08      	ldr	r2, [pc, #32]	@ (80010b4 <seconds_since_midnight+0x30>)
 8001092:	fba2 1203 	umull	r1, r2, r2, r3
 8001096:	0e12      	lsrs	r2, r2, #24
 8001098:	4907      	ldr	r1, [pc, #28]	@ (80010b8 <seconds_since_midnight+0x34>)
 800109a:	fb01 f202 	mul.w	r2, r1, r2
 800109e:	1a9b      	subs	r3, r3, r2
 80010a0:	607b      	str	r3, [r7, #4]
    return ms / 1000UL;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a05      	ldr	r2, [pc, #20]	@ (80010bc <seconds_since_midnight+0x38>)
 80010a6:	fba2 2303 	umull	r2, r3, r2, r3
 80010aa:	099b      	lsrs	r3, r3, #6
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	31b5d43b 	.word	0x31b5d43b
 80010b8:	05265c00 	.word	0x05265c00
 80010bc:	10624dd3 	.word	0x10624dd3

080010c0 <timer_tick>:

static void timer_tick(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
    uint32_t nowS = seconds_since_midnight();
 80010c6:	f7ff ffdd 	bl	8001084 <seconds_since_midnight>
 80010ca:	6078      	str	r0, [r7, #4]

    for (int i = 0; i < 5; i++) {
 80010cc:	2300      	movs	r3, #0
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	e045      	b.n	800115e <timer_tick+0x9e>
        TimerSlot* s = &timerSlots[i];
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	4613      	mov	r3, r2
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	4413      	add	r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	4a24      	ldr	r2, [pc, #144]	@ (8001170 <timer_tick+0xb0>)
 80010de:	4413      	add	r3, r2
 80010e0:	603b      	str	r3, [r7, #0]
        if (!s->active) continue;
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	7a1b      	ldrb	r3, [r3, #8]
 80010e6:	f083 0301 	eor.w	r3, r3, #1
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d132      	bne.n	8001156 <timer_tick+0x96>

        bool inWindow;
        if (s->onTimeSeconds <= s->offTimeSeconds) {
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d812      	bhi.n	8001122 <timer_tick+0x62>
            inWindow = (nowS >= s->onTimeSeconds) && (nowS < s->offTimeSeconds);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	429a      	cmp	r2, r3
 8001104:	d306      	bcc.n	8001114 <timer_tick+0x54>
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	429a      	cmp	r2, r3
 800110e:	d201      	bcs.n	8001114 <timer_tick+0x54>
 8001110:	2301      	movs	r3, #1
 8001112:	e000      	b.n	8001116 <timer_tick+0x56>
 8001114:	2300      	movs	r3, #0
 8001116:	72fb      	strb	r3, [r7, #11]
 8001118:	7afb      	ldrb	r3, [r7, #11]
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	72fb      	strb	r3, [r7, #11]
 8001120:	e011      	b.n	8001146 <timer_tick+0x86>
        } else {
            inWindow = (nowS >= s->onTimeSeconds) || (nowS < s->offTimeSeconds);
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	429a      	cmp	r2, r3
 800112a:	d204      	bcs.n	8001136 <timer_tick+0x76>
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	429a      	cmp	r2, r3
 8001134:	d201      	bcs.n	800113a <timer_tick+0x7a>
 8001136:	2301      	movs	r3, #1
 8001138:	e000      	b.n	800113c <timer_tick+0x7c>
 800113a:	2300      	movs	r3, #0
 800113c:	72fb      	strb	r3, [r7, #11]
 800113e:	7afb      	ldrb	r3, [r7, #11]
 8001140:	f003 0301 	and.w	r3, r3, #1
 8001144:	72fb      	strb	r3, [r7, #11]
        }

        if (i == 0) {
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d105      	bne.n	8001158 <timer_tick+0x98>
            motor_apply(inWindow);
 800114c:	7afb      	ldrb	r3, [r7, #11]
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff fe56 	bl	8000e00 <motor_apply>
 8001154:	e000      	b.n	8001158 <timer_tick+0x98>
        if (!s->active) continue;
 8001156:	bf00      	nop
    for (int i = 0; i < 5; i++) {
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	3301      	adds	r3, #1
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	2b04      	cmp	r3, #4
 8001162:	ddb6      	ble.n	80010d2 <timer_tick+0x12>
        }
    }
}
 8001164:	bf00      	nop
 8001166:	bf00      	nop
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000280 	.word	0x20000280

08001174 <protections_tick>:

/* ===== Protections ===== */
static void protections_tick(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
    if (senseDryRun && motorStatus == 1U) {
 8001178:	4b1c      	ldr	r3, [pc, #112]	@ (80011ec <protections_tick+0x78>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	b2db      	uxtb	r3, r3
 800117e:	2b00      	cmp	r3, #0
 8001180:	d007      	beq.n	8001192 <protections_tick+0x1e>
 8001182:	4b1b      	ldr	r3, [pc, #108]	@ (80011f0 <protections_tick+0x7c>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	b2db      	uxtb	r3, r3
 8001188:	2b01      	cmp	r3, #1
 800118a:	d102      	bne.n	8001192 <protections_tick+0x1e>
        motor_apply(false);
 800118c:	2000      	movs	r0, #0
 800118e:	f7ff fe37 	bl	8000e00 <motor_apply>
    }

    if (senseOverLoad && motorStatus == 1U) {
 8001192:	4b18      	ldr	r3, [pc, #96]	@ (80011f4 <protections_tick+0x80>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	b2db      	uxtb	r3, r3
 8001198:	2b00      	cmp	r3, #0
 800119a:	d007      	beq.n	80011ac <protections_tick+0x38>
 800119c:	4b14      	ldr	r3, [pc, #80]	@ (80011f0 <protections_tick+0x7c>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d102      	bne.n	80011ac <protections_tick+0x38>
        motor_apply(false);
 80011a6:	2000      	movs	r0, #0
 80011a8:	f7ff fe2a 	bl	8000e00 <motor_apply>
    }

    if (senseOverUnderVolt) {
 80011ac:	4b12      	ldr	r3, [pc, #72]	@ (80011f8 <protections_tick+0x84>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d002      	beq.n	80011bc <protections_tick+0x48>
        motor_apply(false);
 80011b6:	2000      	movs	r0, #0
 80011b8:	f7ff fe22 	bl	8000e00 <motor_apply>
    }

    if (maxRunTimerArmed && (now_ms() - maxRunStartTick) >= MAX_CONT_RUN_MS) {
 80011bc:	4b0f      	ldr	r3, [pc, #60]	@ (80011fc <protections_tick+0x88>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d011      	beq.n	80011e8 <protections_tick+0x74>
 80011c4:	f7ff fdfc 	bl	8000dc0 <now_ms>
 80011c8:	4602      	mov	r2, r0
 80011ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001200 <protections_tick+0x8c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	4a0c      	ldr	r2, [pc, #48]	@ (8001204 <protections_tick+0x90>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d308      	bcc.n	80011e8 <protections_tick+0x74>
        motor_apply(false);
 80011d6:	2000      	movs	r0, #0
 80011d8:	f7ff fe12 	bl	8000e00 <motor_apply>
        senseMaxRunReached = true;
 80011dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001208 <protections_tick+0x94>)
 80011de:	2201      	movs	r2, #1
 80011e0:	701a      	strb	r2, [r3, #0]
        maxRunTimerArmed = false;
 80011e2:	4b06      	ldr	r3, [pc, #24]	@ (80011fc <protections_tick+0x88>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	701a      	strb	r2, [r3, #0]
    }
}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	200002bc 	.word	0x200002bc
 80011f0:	20000274 	.word	0x20000274
 80011f4:	200002bd 	.word	0x200002bd
 80011f8:	200002be 	.word	0x200002be
 80011fc:	200002c0 	.word	0x200002c0
 8001200:	200002c4 	.word	0x200002c4
 8001204:	006ddd00 	.word	0x006ddd00
 8001208:	200002bf 	.word	0x200002bf

0800120c <leds_from_model>:

/* ===== LED synthesis ===== */
static void leds_from_model(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
    LED_ClearAllIntents();
 8001210:	f7ff f9c2 	bl	8000598 <LED_ClearAllIntents>

    if (motorStatus == 1U) {
 8001214:	4b24      	ldr	r3, [pc, #144]	@ (80012a8 <leds_from_model+0x9c>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2b01      	cmp	r3, #1
 800121c:	d104      	bne.n	8001228 <leds_from_model+0x1c>
        LED_SetIntent(LED_COLOR_GREEN, LED_MODE_STEADY, 0);
 800121e:	2200      	movs	r2, #0
 8001220:	2101      	movs	r1, #1
 8001222:	2000      	movs	r0, #0
 8001224:	f7ff f9d8 	bl	80005d8 <LED_SetIntent>
    }
    if (countdownActive && countdownMode) {
 8001228:	4b20      	ldr	r3, [pc, #128]	@ (80012ac <leds_from_model+0xa0>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2b00      	cmp	r3, #0
 8001230:	d00a      	beq.n	8001248 <leds_from_model+0x3c>
 8001232:	4b1f      	ldr	r3, [pc, #124]	@ (80012b0 <leds_from_model+0xa4>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	b2db      	uxtb	r3, r3
 8001238:	2b00      	cmp	r3, #0
 800123a:	d005      	beq.n	8001248 <leds_from_model+0x3c>
        LED_SetIntent(LED_COLOR_GREEN, LED_MODE_BLINK, 500);
 800123c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001240:	2102      	movs	r1, #2
 8001242:	2000      	movs	r0, #0
 8001244:	f7ff f9c8 	bl	80005d8 <LED_SetIntent>
    }
    if (senseDryRun) {
 8001248:	4b1a      	ldr	r3, [pc, #104]	@ (80012b4 <leds_from_model+0xa8>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b00      	cmp	r3, #0
 8001250:	d004      	beq.n	800125c <leds_from_model+0x50>
        LED_SetIntent(LED_COLOR_RED, LED_MODE_STEADY, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	2101      	movs	r1, #1
 8001256:	2001      	movs	r0, #1
 8001258:	f7ff f9be 	bl	80005d8 <LED_SetIntent>
    }
    if (senseMaxRunReached) {
 800125c:	4b16      	ldr	r3, [pc, #88]	@ (80012b8 <leds_from_model+0xac>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	b2db      	uxtb	r3, r3
 8001262:	2b00      	cmp	r3, #0
 8001264:	d005      	beq.n	8001272 <leds_from_model+0x66>
        LED_SetIntent(LED_COLOR_RED, LED_MODE_BLINK, 400);
 8001266:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800126a:	2102      	movs	r1, #2
 800126c:	2001      	movs	r0, #1
 800126e:	f7ff f9b3 	bl	80005d8 <LED_SetIntent>
    }
    if (senseOverLoad) {
 8001272:	4b12      	ldr	r3, [pc, #72]	@ (80012bc <leds_from_model+0xb0>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	b2db      	uxtb	r3, r3
 8001278:	2b00      	cmp	r3, #0
 800127a:	d005      	beq.n	8001288 <leds_from_model+0x7c>
        LED_SetIntent(LED_COLOR_BLUE, LED_MODE_BLINK, 350);
 800127c:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8001280:	2102      	movs	r1, #2
 8001282:	2002      	movs	r0, #2
 8001284:	f7ff f9a8 	bl	80005d8 <LED_SetIntent>
    }
    if (senseOverUnderVolt) {
 8001288:	4b0d      	ldr	r3, [pc, #52]	@ (80012c0 <leds_from_model+0xb4>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b00      	cmp	r3, #0
 8001290:	d005      	beq.n	800129e <leds_from_model+0x92>
        LED_SetIntent(LED_COLOR_PURPLE, LED_MODE_BLINK, 350);
 8001292:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8001296:	2102      	movs	r1, #2
 8001298:	2003      	movs	r0, #3
 800129a:	f7ff f99d 	bl	80005d8 <LED_SetIntent>
    }

    LED_ApplyIntents();
 800129e:	f7ff f9bb 	bl	8000618 <LED_ApplyIntents>
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000274 	.word	0x20000274
 80012ac:	20000275 	.word	0x20000275
 80012b0:	20000000 	.word	0x20000000
 80012b4:	200002bc 	.word	0x200002bc
 80012b8:	200002bf 	.word	0x200002bf
 80012bc:	200002bd 	.word	0x200002bd
 80012c0:	200002be 	.word	0x200002be

080012c4 <parse_mm_ss>:

/* ===== Helpers ===== */
static int parse_mm_ss(const char* p, uint8_t* mm, uint8_t* ss)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
    int m, s;
    if (sscanf(p, "%d:%d", &m, &s) == 2) {
 80012d0:	f107 0310 	add.w	r3, r7, #16
 80012d4:	f107 0214 	add.w	r2, r7, #20
 80012d8:	4914      	ldr	r1, [pc, #80]	@ (800132c <parse_mm_ss+0x68>)
 80012da:	68f8      	ldr	r0, [r7, #12]
 80012dc:	f004 fd92 	bl	8005e04 <siscanf>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d11d      	bne.n	8001322 <parse_mm_ss+0x5e>
        if (m < 0) { m = 0; } if (m > 59) { m = 59; }
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	da01      	bge.n	80012f0 <parse_mm_ss+0x2c>
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	2b3b      	cmp	r3, #59	@ 0x3b
 80012f4:	dd01      	ble.n	80012fa <parse_mm_ss+0x36>
 80012f6:	233b      	movs	r3, #59	@ 0x3b
 80012f8:	617b      	str	r3, [r7, #20]
        if (s < 0) { s = 0; } if (s > 59) { s = 59; }
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	da01      	bge.n	8001304 <parse_mm_ss+0x40>
 8001300:	2300      	movs	r3, #0
 8001302:	613b      	str	r3, [r7, #16]
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	2b3b      	cmp	r3, #59	@ 0x3b
 8001308:	dd01      	ble.n	800130e <parse_mm_ss+0x4a>
 800130a:	233b      	movs	r3, #59	@ 0x3b
 800130c:	613b      	str	r3, [r7, #16]
        *mm = (uint8_t)m; *ss = (uint8_t)s;
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	b2da      	uxtb	r2, r3
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	701a      	strb	r2, [r3, #0]
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	b2da      	uxtb	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	701a      	strb	r2, [r3, #0]
        return 1;
 800131e:	2301      	movs	r3, #1
 8001320:	e000      	b.n	8001324 <parse_mm_ss+0x60>
    }
    return 0;
 8001322:	2300      	movs	r3, #0
}
 8001324:	4618      	mov	r0, r3
 8001326:	3718      	adds	r7, #24
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	080070c4 	.word	0x080070c4

08001330 <ModelHandle_ProcessUartCommand>:

/* ===== Command parser (from LCD/UI or serial) ===== */
void ModelHandle_ProcessUartCommand(const char* cmd)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08a      	sub	sp, #40	@ 0x28
 8001334:	af02      	add	r7, sp, #8
 8001336:	6078      	str	r0, [r7, #4]
    if (!cmd || !*cmd) return;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	f000 815f 	beq.w	80015fe <ModelHandle_ProcessUartCommand+0x2ce>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	f000 815a 	beq.w	80015fe <ModelHandle_ProcessUartCommand+0x2ce>

    if (strcmp(cmd, "MOTOR_ON") == 0) {
 800134a:	49af      	ldr	r1, [pc, #700]	@ (8001608 <ModelHandle_ProcessUartCommand+0x2d8>)
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7fe fefd 	bl	800014c <strcmp>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d103      	bne.n	8001360 <ModelHandle_ProcessUartCommand+0x30>
        motor_apply(true);
 8001358:	2001      	movs	r0, #1
 800135a:	f7ff fd51 	bl	8000e00 <motor_apply>
 800135e:	e14f      	b.n	8001600 <ModelHandle_ProcessUartCommand+0x2d0>
    }
    else if (strcmp(cmd, "MOTOR_OFF") == 0) {
 8001360:	49aa      	ldr	r1, [pc, #680]	@ (800160c <ModelHandle_ProcessUartCommand+0x2dc>)
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7fe fef2 	bl	800014c <strcmp>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d103      	bne.n	8001376 <ModelHandle_ProcessUartCommand+0x46>
        motor_apply(false);
 800136e:	2000      	movs	r0, #0
 8001370:	f7ff fd46 	bl	8000e00 <motor_apply>
 8001374:	e144      	b.n	8001600 <ModelHandle_ProcessUartCommand+0x2d0>
    }
    else if (strncmp(cmd, "COUNTDOWN_ON:", 13) == 0) {
 8001376:	220d      	movs	r2, #13
 8001378:	49a5      	ldr	r1, [pc, #660]	@ (8001610 <ModelHandle_ProcessUartCommand+0x2e0>)
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f004 fd78 	bl	8005e70 <strncmp>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d11b      	bne.n	80013be <ModelHandle_ProcessUartCommand+0x8e>
        int minutes = atoi(cmd + 13);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	330d      	adds	r3, #13
 800138a:	4618      	mov	r0, r3
 800138c:	f004 fc8e 	bl	8005cac <atoi>
 8001390:	61f8      	str	r0, [r7, #28]
        if (minutes < 0) minutes = 0;
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	2b00      	cmp	r3, #0
 8001396:	da01      	bge.n	800139c <ModelHandle_ProcessUartCommand+0x6c>
 8001398:	2300      	movs	r3, #0
 800139a:	61fb      	str	r3, [r7, #28]
        if (minutes > 600) minutes = 600;
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 80013a2:	dd02      	ble.n	80013aa <ModelHandle_ProcessUartCommand+0x7a>
 80013a4:	f44f 7316 	mov.w	r3, #600	@ 0x258
 80013a8:	61fb      	str	r3, [r7, #28]
        countdown_start(true, (uint32_t)minutes * 60UL);
 80013aa:	69fa      	ldr	r2, [r7, #28]
 80013ac:	4613      	mov	r3, r2
 80013ae:	011b      	lsls	r3, r3, #4
 80013b0:	1a9b      	subs	r3, r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	4619      	mov	r1, r3
 80013b6:	2001      	movs	r0, #1
 80013b8:	f7ff fd54 	bl	8000e64 <countdown_start>
 80013bc:	e120      	b.n	8001600 <ModelHandle_ProcessUartCommand+0x2d0>
    }
    else if (strncmp(cmd, "COUNTDOWN_OFF:", 14) == 0) {
 80013be:	220e      	movs	r2, #14
 80013c0:	4994      	ldr	r1, [pc, #592]	@ (8001614 <ModelHandle_ProcessUartCommand+0x2e4>)
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f004 fd54 	bl	8005e70 <strncmp>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d11b      	bne.n	8001406 <ModelHandle_ProcessUartCommand+0xd6>
        int minutes = atoi(cmd + 14);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	330e      	adds	r3, #14
 80013d2:	4618      	mov	r0, r3
 80013d4:	f004 fc6a 	bl	8005cac <atoi>
 80013d8:	61b8      	str	r0, [r7, #24]
        if (minutes < 0) minutes = 0;
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	da01      	bge.n	80013e4 <ModelHandle_ProcessUartCommand+0xb4>
 80013e0:	2300      	movs	r3, #0
 80013e2:	61bb      	str	r3, [r7, #24]
        if (minutes > 600) minutes = 600;
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 80013ea:	dd02      	ble.n	80013f2 <ModelHandle_ProcessUartCommand+0xc2>
 80013ec:	f44f 7316 	mov.w	r3, #600	@ 0x258
 80013f0:	61bb      	str	r3, [r7, #24]
        countdown_start(false, (uint32_t)minutes * 60UL);
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4613      	mov	r3, r2
 80013f6:	011b      	lsls	r3, r3, #4
 80013f8:	1a9b      	subs	r3, r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4619      	mov	r1, r3
 80013fe:	2000      	movs	r0, #0
 8001400:	f7ff fd30 	bl	8000e64 <countdown_start>
 8001404:	e0fc      	b.n	8001600 <ModelHandle_ProcessUartCommand+0x2d0>
    }
    else if (strncmp(cmd, "TIMER_SET:1:", 12) == 0) {
 8001406:	220c      	movs	r2, #12
 8001408:	4983      	ldr	r1, [pc, #524]	@ (8001618 <ModelHandle_ProcessUartCommand+0x2e8>)
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f004 fd30 	bl	8005e70 <strncmp>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d136      	bne.n	8001484 <ModelHandle_ProcessUartCommand+0x154>
        uint8_t onH=0,onM=0,offH=0,offM=0;
 8001416:	2300      	movs	r3, #0
 8001418:	74fb      	strb	r3, [r7, #19]
 800141a:	2300      	movs	r3, #0
 800141c:	74bb      	strb	r3, [r7, #18]
 800141e:	2300      	movs	r3, #0
 8001420:	747b      	strb	r3, [r7, #17]
 8001422:	2300      	movs	r3, #0
 8001424:	743b      	strb	r3, [r7, #16]
        const char* p = cmd + 12;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	330c      	adds	r3, #12
 800142a:	617b      	str	r3, [r7, #20]
        if (sscanf(p, "%hhu:%hhu:%hhu:%hhu", &onH,&onM,&offH,&offM) == 4) {
 800142c:	f107 0112 	add.w	r1, r7, #18
 8001430:	f107 0213 	add.w	r2, r7, #19
 8001434:	f107 0310 	add.w	r3, r7, #16
 8001438:	9301      	str	r3, [sp, #4]
 800143a:	f107 0311 	add.w	r3, r7, #17
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	460b      	mov	r3, r1
 8001442:	4976      	ldr	r1, [pc, #472]	@ (800161c <ModelHandle_ProcessUartCommand+0x2ec>)
 8001444:	6978      	ldr	r0, [r7, #20]
 8001446:	f004 fcdd 	bl	8005e04 <siscanf>
 800144a:	4603      	mov	r3, r0
 800144c:	2b04      	cmp	r3, #4
 800144e:	f040 80d7 	bne.w	8001600 <ModelHandle_ProcessUartCommand+0x2d0>
            timerSlots[0].onTimeSeconds  = ModelHandle_TimeToSeconds(onH,onM);
 8001452:	7cfb      	ldrb	r3, [r7, #19]
 8001454:	7cba      	ldrb	r2, [r7, #18]
 8001456:	4611      	mov	r1, r2
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff fcb8 	bl	8000dce <ModelHandle_TimeToSeconds>
 800145e:	4603      	mov	r3, r0
 8001460:	4a6f      	ldr	r2, [pc, #444]	@ (8001620 <ModelHandle_ProcessUartCommand+0x2f0>)
 8001462:	6013      	str	r3, [r2, #0]
            timerSlots[0].offTimeSeconds = ModelHandle_TimeToSeconds(offH,offM);
 8001464:	7c7b      	ldrb	r3, [r7, #17]
 8001466:	7c3a      	ldrb	r2, [r7, #16]
 8001468:	4611      	mov	r1, r2
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff fcaf 	bl	8000dce <ModelHandle_TimeToSeconds>
 8001470:	4603      	mov	r3, r0
 8001472:	4a6b      	ldr	r2, [pc, #428]	@ (8001620 <ModelHandle_ProcessUartCommand+0x2f0>)
 8001474:	6053      	str	r3, [r2, #4]
            timerSlots[0].active = true;
 8001476:	4b6a      	ldr	r3, [pc, #424]	@ (8001620 <ModelHandle_ProcessUartCommand+0x2f0>)
 8001478:	2201      	movs	r2, #1
 800147a:	721a      	strb	r2, [r3, #8]
            timerSlots[0].executedToday = false;
 800147c:	4b68      	ldr	r3, [pc, #416]	@ (8001620 <ModelHandle_ProcessUartCommand+0x2f0>)
 800147e:	2200      	movs	r2, #0
 8001480:	725a      	strb	r2, [r3, #9]
 8001482:	e0bd      	b.n	8001600 <ModelHandle_ProcessUartCommand+0x2d0>
        }
    }
    else if (strncmp(cmd, "SEARCH_GAP:", 11) == 0) {
 8001484:	220b      	movs	r2, #11
 8001486:	4967      	ldr	r1, [pc, #412]	@ (8001624 <ModelHandle_ProcessUartCommand+0x2f4>)
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f004 fcf1 	bl	8005e70 <strncmp>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d11b      	bne.n	80014cc <ModelHandle_ProcessUartCommand+0x19c>
        uint8_t mm, ss;
        if (parse_mm_ss(cmd + 11, &mm, &ss)) {
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	330b      	adds	r3, #11
 8001498:	f107 020e 	add.w	r2, r7, #14
 800149c:	f107 010f 	add.w	r1, r7, #15
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff ff0f 	bl	80012c4 <parse_mm_ss>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	f000 80a9 	beq.w	8001600 <ModelHandle_ProcessUartCommand+0x2d0>
            searchSettings.testingGapSeconds = (uint32_t)mm*60UL + (uint32_t)ss;
 80014ae:	7bfb      	ldrb	r3, [r7, #15]
 80014b0:	461a      	mov	r2, r3
 80014b2:	4613      	mov	r3, r2
 80014b4:	011b      	lsls	r3, r3, #4
 80014b6:	1a9b      	subs	r3, r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	461a      	mov	r2, r3
 80014bc:	7bbb      	ldrb	r3, [r7, #14]
 80014be:	4413      	add	r3, r2
 80014c0:	4a59      	ldr	r2, [pc, #356]	@ (8001628 <ModelHandle_ProcessUartCommand+0x2f8>)
 80014c2:	6053      	str	r3, [r2, #4]
            searchSettings.searchActive = true;
 80014c4:	4b58      	ldr	r3, [pc, #352]	@ (8001628 <ModelHandle_ProcessUartCommand+0x2f8>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	701a      	strb	r2, [r3, #0]
 80014ca:	e099      	b.n	8001600 <ModelHandle_ProcessUartCommand+0x2d0>
        }
    }
    else if (strncmp(cmd, "SEARCH_DRYRUN:", 14) == 0) {
 80014cc:	220e      	movs	r2, #14
 80014ce:	4957      	ldr	r1, [pc, #348]	@ (800162c <ModelHandle_ProcessUartCommand+0x2fc>)
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f004 fccd 	bl	8005e70 <strncmp>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d11b      	bne.n	8001514 <ModelHandle_ProcessUartCommand+0x1e4>
        uint8_t mm, ss;
        if (parse_mm_ss(cmd + 14, &mm, &ss)) {
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	330e      	adds	r3, #14
 80014e0:	f107 020c 	add.w	r2, r7, #12
 80014e4:	f107 010d 	add.w	r1, r7, #13
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff feeb 	bl	80012c4 <parse_mm_ss>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	f000 8085 	beq.w	8001600 <ModelHandle_ProcessUartCommand+0x2d0>
            searchSettings.dryRunTimeSeconds = (uint32_t)mm*60UL + (uint32_t)ss;
 80014f6:	7b7b      	ldrb	r3, [r7, #13]
 80014f8:	461a      	mov	r2, r3
 80014fa:	4613      	mov	r3, r2
 80014fc:	011b      	lsls	r3, r3, #4
 80014fe:	1a9b      	subs	r3, r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	461a      	mov	r2, r3
 8001504:	7b3b      	ldrb	r3, [r7, #12]
 8001506:	4413      	add	r3, r2
 8001508:	4a47      	ldr	r2, [pc, #284]	@ (8001628 <ModelHandle_ProcessUartCommand+0x2f8>)
 800150a:	6093      	str	r3, [r2, #8]
            searchSettings.searchActive = true;
 800150c:	4b46      	ldr	r3, [pc, #280]	@ (8001628 <ModelHandle_ProcessUartCommand+0x2f8>)
 800150e:	2201      	movs	r2, #1
 8001510:	701a      	strb	r2, [r3, #0]
 8001512:	e075      	b.n	8001600 <ModelHandle_ProcessUartCommand+0x2d0>
        }
    }
    else if (strncmp(cmd, "TWIST_ONDUR:", 12) == 0) {
 8001514:	220c      	movs	r2, #12
 8001516:	4946      	ldr	r1, [pc, #280]	@ (8001630 <ModelHandle_ProcessUartCommand+0x300>)
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f004 fca9 	bl	8005e70 <strncmp>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d122      	bne.n	800156a <ModelHandle_ProcessUartCommand+0x23a>
        uint8_t mm, ss;
        if (parse_mm_ss(cmd + 12, &mm, &ss)) {
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	330c      	adds	r3, #12
 8001528:	f107 020a 	add.w	r2, r7, #10
 800152c:	f107 010b 	add.w	r1, r7, #11
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff fec7 	bl	80012c4 <parse_mm_ss>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d061      	beq.n	8001600 <ModelHandle_ProcessUartCommand+0x2d0>
            twistSettings.onDurationSeconds = (uint32_t)mm*60UL + (uint32_t)ss;
 800153c:	7afb      	ldrb	r3, [r7, #11]
 800153e:	461a      	mov	r2, r3
 8001540:	4613      	mov	r3, r2
 8001542:	011b      	lsls	r3, r3, #4
 8001544:	1a9b      	subs	r3, r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	461a      	mov	r2, r3
 800154a:	7abb      	ldrb	r3, [r7, #10]
 800154c:	4413      	add	r3, r2
 800154e:	4a39      	ldr	r2, [pc, #228]	@ (8001634 <ModelHandle_ProcessUartCommand+0x304>)
 8001550:	6053      	str	r3, [r2, #4]
            twistSettings.twistActive = true;
 8001552:	4b38      	ldr	r3, [pc, #224]	@ (8001634 <ModelHandle_ProcessUartCommand+0x304>)
 8001554:	2201      	movs	r2, #1
 8001556:	701a      	strb	r2, [r3, #0]
            twist_on_phase = false;
 8001558:	4b37      	ldr	r3, [pc, #220]	@ (8001638 <ModelHandle_ProcessUartCommand+0x308>)
 800155a:	2200      	movs	r2, #0
 800155c:	701a      	strb	r2, [r3, #0]
            twist_phase_deadline = now_ms();
 800155e:	f7ff fc2f 	bl	8000dc0 <now_ms>
 8001562:	4603      	mov	r3, r0
 8001564:	4a35      	ldr	r2, [pc, #212]	@ (800163c <ModelHandle_ProcessUartCommand+0x30c>)
 8001566:	6013      	str	r3, [r2, #0]
 8001568:	e04a      	b.n	8001600 <ModelHandle_ProcessUartCommand+0x2d0>
        }
    }
    else if (strncmp(cmd, "TWIST_OFFDUR:", 13) == 0) {
 800156a:	220d      	movs	r2, #13
 800156c:	4934      	ldr	r1, [pc, #208]	@ (8001640 <ModelHandle_ProcessUartCommand+0x310>)
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f004 fc7e 	bl	8005e70 <strncmp>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d122      	bne.n	80015c0 <ModelHandle_ProcessUartCommand+0x290>
        uint8_t mm, ss;
        if (parse_mm_ss(cmd + 13, &mm, &ss)) {
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	330d      	adds	r3, #13
 800157e:	f107 0208 	add.w	r2, r7, #8
 8001582:	f107 0109 	add.w	r1, r7, #9
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff fe9c 	bl	80012c4 <parse_mm_ss>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d036      	beq.n	8001600 <ModelHandle_ProcessUartCommand+0x2d0>
            twistSettings.offDurationSeconds = (uint32_t)mm*60UL + (uint32_t)ss;
 8001592:	7a7b      	ldrb	r3, [r7, #9]
 8001594:	461a      	mov	r2, r3
 8001596:	4613      	mov	r3, r2
 8001598:	011b      	lsls	r3, r3, #4
 800159a:	1a9b      	subs	r3, r3, r2
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	461a      	mov	r2, r3
 80015a0:	7a3b      	ldrb	r3, [r7, #8]
 80015a2:	4413      	add	r3, r2
 80015a4:	4a23      	ldr	r2, [pc, #140]	@ (8001634 <ModelHandle_ProcessUartCommand+0x304>)
 80015a6:	6093      	str	r3, [r2, #8]
            twistSettings.twistActive = true;
 80015a8:	4b22      	ldr	r3, [pc, #136]	@ (8001634 <ModelHandle_ProcessUartCommand+0x304>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	701a      	strb	r2, [r3, #0]
            twist_on_phase = false;
 80015ae:	4b22      	ldr	r3, [pc, #136]	@ (8001638 <ModelHandle_ProcessUartCommand+0x308>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	701a      	strb	r2, [r3, #0]
            twist_phase_deadline = now_ms();
 80015b4:	f7ff fc04 	bl	8000dc0 <now_ms>
 80015b8:	4603      	mov	r3, r0
 80015ba:	4a20      	ldr	r2, [pc, #128]	@ (800163c <ModelHandle_ProcessUartCommand+0x30c>)
 80015bc:	6013      	str	r3, [r2, #0]
 80015be:	e01f      	b.n	8001600 <ModelHandle_ProcessUartCommand+0x2d0>
        }
    }
    else if (strcmp(cmd, "TWIST_OFF") == 0) {
 80015c0:	4920      	ldr	r1, [pc, #128]	@ (8001644 <ModelHandle_ProcessUartCommand+0x314>)
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7fe fdc2 	bl	800014c <strcmp>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d106      	bne.n	80015dc <ModelHandle_ProcessUartCommand+0x2ac>
        twistSettings.twistActive = false;
 80015ce:	4b19      	ldr	r3, [pc, #100]	@ (8001634 <ModelHandle_ProcessUartCommand+0x304>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	701a      	strb	r2, [r3, #0]
        motor_apply(false);
 80015d4:	2000      	movs	r0, #0
 80015d6:	f7ff fc13 	bl	8000e00 <motor_apply>
 80015da:	e011      	b.n	8001600 <ModelHandle_ProcessUartCommand+0x2d0>
    }
    else if (strcmp(cmd, "SEARCH_OFF") == 0) {
 80015dc:	491a      	ldr	r1, [pc, #104]	@ (8001648 <ModelHandle_ProcessUartCommand+0x318>)
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7fe fdb4 	bl	800014c <strcmp>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d10a      	bne.n	8001600 <ModelHandle_ProcessUartCommand+0x2d0>
        searchSettings.searchActive = false;
 80015ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001628 <ModelHandle_ProcessUartCommand+0x2f8>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	701a      	strb	r2, [r3, #0]
        search_in_test = false;
 80015f0:	4b16      	ldr	r3, [pc, #88]	@ (800164c <ModelHandle_ProcessUartCommand+0x31c>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	701a      	strb	r2, [r3, #0]
        motor_apply(false);
 80015f6:	2000      	movs	r0, #0
 80015f8:	f7ff fc02 	bl	8000e00 <motor_apply>
 80015fc:	e000      	b.n	8001600 <ModelHandle_ProcessUartCommand+0x2d0>
    if (!cmd || !*cmd) return;
 80015fe:	bf00      	nop
    }
}
 8001600:	3720      	adds	r7, #32
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	080070cc 	.word	0x080070cc
 800160c:	080070d8 	.word	0x080070d8
 8001610:	080070e4 	.word	0x080070e4
 8001614:	080070f4 	.word	0x080070f4
 8001618:	08007104 	.word	0x08007104
 800161c:	08007114 	.word	0x08007114
 8001620:	20000280 	.word	0x20000280
 8001624:	08007128 	.word	0x08007128
 8001628:	20000004 	.word	0x20000004
 800162c:	08007134 	.word	0x08007134
 8001630:	08007144 	.word	0x08007144
 8001634:	20000010 	.word	0x20000010
 8001638:	200002c8 	.word	0x200002c8
 800163c:	200002cc 	.word	0x200002cc
 8001640:	08007154 	.word	0x08007154
 8001644:	08007164 	.word	0x08007164
 8001648:	08007170 	.word	0x08007170
 800164c:	200002d0 	.word	0x200002d0

08001650 <ModelHandle_Process>:
void ModelHandle_SetOverUnderVolt(bool on) { senseOverUnderVolt = on; }
void ModelHandle_ClearMaxRunFlag(void)     { senseMaxRunReached = false; }

/* ===== Main tick ===== */
void ModelHandle_Process(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
    countdown_tick();
 8001654:	f7ff fc3c 	bl	8000ed0 <countdown_tick>
    twist_tick();
 8001658:	f7ff fc7e 	bl	8000f58 <twist_tick>
    search_tick();
 800165c:	f7ff fcca 	bl	8000ff4 <search_tick>
    timer_tick();
 8001660:	f7ff fd2e 	bl	80010c0 <timer_tick>
    protections_tick();
 8001664:	f7ff fd86 	bl	8001174 <protections_tick>
    leds_from_model();
 8001668:	f7ff fdd0 	bl	800120c <leds_from_model>
}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}

08001670 <Relay_Set>:
    /* Ensure off on start (change if your relay is active-low) */
    HAL_GPIO_WritePin(Relay1_GPIO_Port, Relay1_Pin|Relay2_Pin|Relay3_Pin, GPIO_PIN_RESET);
}

void Relay_Set(uint8_t relay_no, bool on)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	460a      	mov	r2, r1
 800167a:	71fb      	strb	r3, [r7, #7]
 800167c:	4613      	mov	r3, r2
 800167e:	71bb      	strb	r3, [r7, #6]
    switch (relay_no) {
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	2b03      	cmp	r3, #3
 8001684:	d014      	beq.n	80016b0 <Relay_Set+0x40>
 8001686:	2b03      	cmp	r3, #3
 8001688:	dc19      	bgt.n	80016be <Relay_Set+0x4e>
 800168a:	2b01      	cmp	r3, #1
 800168c:	d002      	beq.n	8001694 <Relay_Set+0x24>
 800168e:	2b02      	cmp	r3, #2
 8001690:	d007      	beq.n	80016a2 <Relay_Set+0x32>
        case 1: HAL_GPIO_WritePin(Relay1_GPIO_Port, Relay1_Pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET); break;
        case 2: HAL_GPIO_WritePin(Relay2_GPIO_Port, Relay2_Pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET); break;
        case 3: HAL_GPIO_WritePin(Relay3_GPIO_Port, Relay3_Pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET); break;
        default: break;
 8001692:	e014      	b.n	80016be <Relay_Set+0x4e>
        case 1: HAL_GPIO_WritePin(Relay1_GPIO_Port, Relay1_Pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET); break;
 8001694:	79bb      	ldrb	r3, [r7, #6]
 8001696:	461a      	mov	r2, r3
 8001698:	2101      	movs	r1, #1
 800169a:	480b      	ldr	r0, [pc, #44]	@ (80016c8 <Relay_Set+0x58>)
 800169c:	f001 f946 	bl	800292c <HAL_GPIO_WritePin>
 80016a0:	e00e      	b.n	80016c0 <Relay_Set+0x50>
        case 2: HAL_GPIO_WritePin(Relay2_GPIO_Port, Relay2_Pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET); break;
 80016a2:	79bb      	ldrb	r3, [r7, #6]
 80016a4:	461a      	mov	r2, r3
 80016a6:	2102      	movs	r1, #2
 80016a8:	4807      	ldr	r0, [pc, #28]	@ (80016c8 <Relay_Set+0x58>)
 80016aa:	f001 f93f 	bl	800292c <HAL_GPIO_WritePin>
 80016ae:	e007      	b.n	80016c0 <Relay_Set+0x50>
        case 3: HAL_GPIO_WritePin(Relay3_GPIO_Port, Relay3_Pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET); break;
 80016b0:	79bb      	ldrb	r3, [r7, #6]
 80016b2:	461a      	mov	r2, r3
 80016b4:	2104      	movs	r1, #4
 80016b6:	4804      	ldr	r0, [pc, #16]	@ (80016c8 <Relay_Set+0x58>)
 80016b8:	f001 f938 	bl	800292c <HAL_GPIO_WritePin>
 80016bc:	e000      	b.n	80016c0 <Relay_Set+0x50>
        default: break;
 80016be:	bf00      	nop
    }
}
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40010c00 	.word	0x40010c00

080016cc <Screen_Init>:
    ModelHandle_ProcessUartCommand(cmd);
}

/* ================= Public API ================= */

void Screen_Init(void){
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
    lcd_init();
 80016d0:	f7fe ff28 	bl	8000524 <lcd_init>
    lastLcdUpdateTime = HAL_GetTick();
 80016d4:	f000 fb50 	bl	8001d78 <HAL_GetTick>
 80016d8:	4603      	mov	r3, r0
 80016da:	4a03      	ldr	r2, [pc, #12]	@ (80016e8 <Screen_Init+0x1c>)
 80016dc:	6013      	str	r3, [r2, #0]
    ui = UI_WELCOME;
 80016de:	4b03      	ldr	r3, [pc, #12]	@ (80016ec <Screen_Init+0x20>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	701a      	strb	r2, [r3, #0]
}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	200002d8 	.word	0x200002d8
 80016ec:	200002dc 	.word	0x200002dc

080016f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016f6:	4b15      	ldr	r3, [pc, #84]	@ (800174c <HAL_MspInit+0x5c>)
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	4a14      	ldr	r2, [pc, #80]	@ (800174c <HAL_MspInit+0x5c>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6193      	str	r3, [r2, #24]
 8001702:	4b12      	ldr	r3, [pc, #72]	@ (800174c <HAL_MspInit+0x5c>)
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	60bb      	str	r3, [r7, #8]
 800170c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800170e:	4b0f      	ldr	r3, [pc, #60]	@ (800174c <HAL_MspInit+0x5c>)
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	4a0e      	ldr	r2, [pc, #56]	@ (800174c <HAL_MspInit+0x5c>)
 8001714:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001718:	61d3      	str	r3, [r2, #28]
 800171a:	4b0c      	ldr	r3, [pc, #48]	@ (800174c <HAL_MspInit+0x5c>)
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001722:	607b      	str	r3, [r7, #4]
 8001724:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001726:	4b0a      	ldr	r3, [pc, #40]	@ (8001750 <HAL_MspInit+0x60>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	4a04      	ldr	r2, [pc, #16]	@ (8001750 <HAL_MspInit+0x60>)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001742:	bf00      	nop
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr
 800174c:	40021000 	.word	0x40021000
 8001750:	40010000 	.word	0x40010000

08001754 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b088      	sub	sp, #32
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175c:	f107 0310 	add.w	r3, r7, #16
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a14      	ldr	r2, [pc, #80]	@ (80017c0 <HAL_ADC_MspInit+0x6c>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d121      	bne.n	80017b8 <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001774:	4b13      	ldr	r3, [pc, #76]	@ (80017c4 <HAL_ADC_MspInit+0x70>)
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	4a12      	ldr	r2, [pc, #72]	@ (80017c4 <HAL_ADC_MspInit+0x70>)
 800177a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800177e:	6193      	str	r3, [r2, #24]
 8001780:	4b10      	ldr	r3, [pc, #64]	@ (80017c4 <HAL_ADC_MspInit+0x70>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800178c:	4b0d      	ldr	r3, [pc, #52]	@ (80017c4 <HAL_ADC_MspInit+0x70>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	4a0c      	ldr	r2, [pc, #48]	@ (80017c4 <HAL_ADC_MspInit+0x70>)
 8001792:	f043 0304 	orr.w	r3, r3, #4
 8001796:	6193      	str	r3, [r2, #24]
 8001798:	4b0a      	ldr	r3, [pc, #40]	@ (80017c4 <HAL_ADC_MspInit+0x70>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	f003 0304 	and.w	r3, r3, #4
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80017a4:	233f      	movs	r3, #63	@ 0x3f
 80017a6:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017a8:	2303      	movs	r3, #3
 80017aa:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ac:	f107 0310 	add.w	r3, r7, #16
 80017b0:	4619      	mov	r1, r3
 80017b2:	4805      	ldr	r0, [pc, #20]	@ (80017c8 <HAL_ADC_MspInit+0x74>)
 80017b4:	f000 ff36 	bl	8002624 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80017b8:	bf00      	nop
 80017ba:	3720      	adds	r7, #32
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40012400 	.word	0x40012400
 80017c4:	40021000 	.word	0x40021000
 80017c8:	40010800 	.word	0x40010800

080017cc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b088      	sub	sp, #32
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d4:	f107 0310 	add.w	r3, r7, #16
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a16      	ldr	r2, [pc, #88]	@ (8001840 <HAL_I2C_MspInit+0x74>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d124      	bne.n	8001836 <HAL_I2C_MspInit+0x6a>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ec:	4b15      	ldr	r3, [pc, #84]	@ (8001844 <HAL_I2C_MspInit+0x78>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	4a14      	ldr	r2, [pc, #80]	@ (8001844 <HAL_I2C_MspInit+0x78>)
 80017f2:	f043 0308 	orr.w	r3, r3, #8
 80017f6:	6193      	str	r3, [r2, #24]
 80017f8:	4b12      	ldr	r3, [pc, #72]	@ (8001844 <HAL_I2C_MspInit+0x78>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001804:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001808:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800180a:	2312      	movs	r3, #18
 800180c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800180e:	2303      	movs	r3, #3
 8001810:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001812:	f107 0310 	add.w	r3, r7, #16
 8001816:	4619      	mov	r1, r3
 8001818:	480b      	ldr	r0, [pc, #44]	@ (8001848 <HAL_I2C_MspInit+0x7c>)
 800181a:	f000 ff03 	bl	8002624 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800181e:	4b09      	ldr	r3, [pc, #36]	@ (8001844 <HAL_I2C_MspInit+0x78>)
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	4a08      	ldr	r2, [pc, #32]	@ (8001844 <HAL_I2C_MspInit+0x78>)
 8001824:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001828:	61d3      	str	r3, [r2, #28]
 800182a:	4b06      	ldr	r3, [pc, #24]	@ (8001844 <HAL_I2C_MspInit+0x78>)
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001832:	60bb      	str	r3, [r7, #8]
 8001834:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001836:	bf00      	nop
 8001838:	3720      	adds	r7, #32
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40005800 	.word	0x40005800
 8001844:	40021000 	.word	0x40021000
 8001848:	40010c00 	.word	0x40010c00

0800184c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a0f      	ldr	r2, [pc, #60]	@ (8001898 <HAL_RTC_MspInit+0x4c>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d118      	bne.n	8001890 <HAL_RTC_MspInit+0x44>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800185e:	f001 fe47 	bl	80034f0 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001862:	4b0e      	ldr	r3, [pc, #56]	@ (800189c <HAL_RTC_MspInit+0x50>)
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	4a0d      	ldr	r2, [pc, #52]	@ (800189c <HAL_RTC_MspInit+0x50>)
 8001868:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800186c:	61d3      	str	r3, [r2, #28]
 800186e:	4b0b      	ldr	r3, [pc, #44]	@ (800189c <HAL_RTC_MspInit+0x50>)
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800187a:	4b09      	ldr	r3, [pc, #36]	@ (80018a0 <HAL_RTC_MspInit+0x54>)
 800187c:	2201      	movs	r2, #1
 800187e:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001880:	2200      	movs	r2, #0
 8001882:	2100      	movs	r1, #0
 8001884:	2029      	movs	r0, #41	@ 0x29
 8001886:	f000 fe96 	bl	80025b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800188a:	2029      	movs	r0, #41	@ 0x29
 800188c:	f000 feaf 	bl	80025ee <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8001890:	bf00      	nop
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40002800 	.word	0x40002800
 800189c:	40021000 	.word	0x40021000
 80018a0:	4242043c 	.word	0x4242043c

080018a4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08a      	sub	sp, #40	@ 0x28
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a22      	ldr	r2, [pc, #136]	@ (8001948 <HAL_SPI_MspInit+0xa4>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d13d      	bne.n	8001940 <HAL_SPI_MspInit+0x9c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018c4:	4b21      	ldr	r3, [pc, #132]	@ (800194c <HAL_SPI_MspInit+0xa8>)
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	4a20      	ldr	r2, [pc, #128]	@ (800194c <HAL_SPI_MspInit+0xa8>)
 80018ca:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80018ce:	6193      	str	r3, [r2, #24]
 80018d0:	4b1e      	ldr	r3, [pc, #120]	@ (800194c <HAL_SPI_MspInit+0xa8>)
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018d8:	613b      	str	r3, [r7, #16]
 80018da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018dc:	4b1b      	ldr	r3, [pc, #108]	@ (800194c <HAL_SPI_MspInit+0xa8>)
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	4a1a      	ldr	r2, [pc, #104]	@ (800194c <HAL_SPI_MspInit+0xa8>)
 80018e2:	f043 0308 	orr.w	r3, r3, #8
 80018e6:	6193      	str	r3, [r2, #24]
 80018e8:	4b18      	ldr	r3, [pc, #96]	@ (800194c <HAL_SPI_MspInit+0xa8>)
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	f003 0308 	and.w	r3, r3, #8
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80018f4:	2328      	movs	r3, #40	@ 0x28
 80018f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f8:	2302      	movs	r3, #2
 80018fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018fc:	2303      	movs	r3, #3
 80018fe:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	4619      	mov	r1, r3
 8001906:	4812      	ldr	r0, [pc, #72]	@ (8001950 <HAL_SPI_MspInit+0xac>)
 8001908:	f000 fe8c 	bl	8002624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800190c:	2310      	movs	r3, #16
 800190e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001910:	2300      	movs	r3, #0
 8001912:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	4619      	mov	r1, r3
 800191e:	480c      	ldr	r0, [pc, #48]	@ (8001950 <HAL_SPI_MspInit+0xac>)
 8001920:	f000 fe80 	bl	8002624 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8001924:	4b0b      	ldr	r3, [pc, #44]	@ (8001954 <HAL_SPI_MspInit+0xb0>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	627b      	str	r3, [r7, #36]	@ 0x24
 800192a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001930:	627b      	str	r3, [r7, #36]	@ 0x24
 8001932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	627b      	str	r3, [r7, #36]	@ 0x24
 800193a:	4a06      	ldr	r2, [pc, #24]	@ (8001954 <HAL_SPI_MspInit+0xb0>)
 800193c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800193e:	6053      	str	r3, [r2, #4]

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001940:	bf00      	nop
 8001942:	3728      	adds	r7, #40	@ 0x28
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40013000 	.word	0x40013000
 800194c:	40021000 	.word	0x40021000
 8001950:	40010c00 	.word	0x40010c00
 8001954:	40010000 	.word	0x40010000

08001958 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b088      	sub	sp, #32
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001960:	f107 0310 	add.w	r3, r7, #16
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a1c      	ldr	r2, [pc, #112]	@ (80019e4 <HAL_UART_MspInit+0x8c>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d131      	bne.n	80019dc <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001978:	4b1b      	ldr	r3, [pc, #108]	@ (80019e8 <HAL_UART_MspInit+0x90>)
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	4a1a      	ldr	r2, [pc, #104]	@ (80019e8 <HAL_UART_MspInit+0x90>)
 800197e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001982:	6193      	str	r3, [r2, #24]
 8001984:	4b18      	ldr	r3, [pc, #96]	@ (80019e8 <HAL_UART_MspInit+0x90>)
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001990:	4b15      	ldr	r3, [pc, #84]	@ (80019e8 <HAL_UART_MspInit+0x90>)
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	4a14      	ldr	r2, [pc, #80]	@ (80019e8 <HAL_UART_MspInit+0x90>)
 8001996:	f043 0304 	orr.w	r3, r3, #4
 800199a:	6193      	str	r3, [r2, #24]
 800199c:	4b12      	ldr	r3, [pc, #72]	@ (80019e8 <HAL_UART_MspInit+0x90>)
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ae:	2302      	movs	r3, #2
 80019b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019b2:	2303      	movs	r3, #3
 80019b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b6:	f107 0310 	add.w	r3, r7, #16
 80019ba:	4619      	mov	r1, r3
 80019bc:	480b      	ldr	r0, [pc, #44]	@ (80019ec <HAL_UART_MspInit+0x94>)
 80019be:	f000 fe31 	bl	8002624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d0:	f107 0310 	add.w	r3, r7, #16
 80019d4:	4619      	mov	r1, r3
 80019d6:	4805      	ldr	r0, [pc, #20]	@ (80019ec <HAL_UART_MspInit+0x94>)
 80019d8:	f000 fe24 	bl	8002624 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80019dc:	bf00      	nop
 80019de:	3720      	adds	r7, #32
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40013800 	.word	0x40013800
 80019e8:	40021000 	.word	0x40021000
 80019ec:	40010800 	.word	0x40010800

080019f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019f4:	bf00      	nop
 80019f6:	e7fd      	b.n	80019f4 <NMI_Handler+0x4>

080019f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019fc:	bf00      	nop
 80019fe:	e7fd      	b.n	80019fc <HardFault_Handler+0x4>

08001a00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a04:	bf00      	nop
 8001a06:	e7fd      	b.n	8001a04 <MemManage_Handler+0x4>

08001a08 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a0c:	bf00      	nop
 8001a0e:	e7fd      	b.n	8001a0c <BusFault_Handler+0x4>

08001a10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a14:	bf00      	nop
 8001a16:	e7fd      	b.n	8001a14 <UsageFault_Handler+0x4>

08001a18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr

08001a24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr

08001a30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr

08001a3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a40:	f000 f988 	bl	8001d54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a44:	bf00      	nop
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001a4c:	4802      	ldr	r0, [pc, #8]	@ (8001a58 <RTC_Alarm_IRQHandler+0x10>)
 8001a4e:	f002 fe41 	bl	80046d4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20000180 	.word	0x20000180

08001a5c <now_ms>:
static uint32_t      last_change[SWITCH_COUNT];
static bool          pressed_reported[SWITCH_COUNT];  // for WasPressed()
static uint32_t      press_start_ms[SWITCH_COUNT];
static bool          long_fired[SWITCH_COUNT];        // true after LONG fired

static inline uint32_t now_ms(void){ return HAL_GetTick(); }
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	f000 f98a 	bl	8001d78 <HAL_GetTick>
 8001a64:	4603      	mov	r3, r0
 8001a66:	4618      	mov	r0, r3
 8001a68:	bd80      	pop	{r7, pc}
	...

08001a6c <Switches_Init>:
        default: return GPIO_PIN_SET; // invalid => not pressed
    }
}

void Switches_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a72:	1d3b      	adds	r3, r7, #4
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7e:	4b20      	ldr	r3, [pc, #128]	@ (8001b00 <Switches_Init+0x94>)
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	4a1f      	ldr	r2, [pc, #124]	@ (8001b00 <Switches_Init+0x94>)
 8001a84:	f043 0308 	orr.w	r3, r3, #8
 8001a88:	6193      	str	r3, [r2, #24]
 8001a8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001b00 <Switches_Init+0x94>)
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	f003 0308 	and.w	r3, r3, #8
 8001a92:	603b      	str	r3, [r7, #0]
 8001a94:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a96:	2300      	movs	r3, #0
 8001a98:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;  // pressed -> GND
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pin  = SWITCH1_Pin|SWITCH2_Pin|SWITCH3_Pin|SWITCH4_Pin;
 8001a9e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001aa2:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(SWITCH1_GPIO_Port, &GPIO_InitStruct);
 8001aa4:	1d3b      	adds	r3, r7, #4
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4816      	ldr	r0, [pc, #88]	@ (8001b04 <Switches_Init+0x98>)
 8001aaa:	f000 fdbb 	bl	8002624 <HAL_GPIO_Init>

    for (int i = 0; i < SWITCH_COUNT; ++i) {
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	e01d      	b.n	8001af0 <Switches_Init+0x84>
        last_state[i]       = GPIO_PIN_SET; // released
 8001ab4:	4a14      	ldr	r2, [pc, #80]	@ (8001b08 <Switches_Init+0x9c>)
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	4413      	add	r3, r2
 8001aba:	2201      	movs	r2, #1
 8001abc:	701a      	strb	r2, [r3, #0]
        last_change[i]      = now_ms();
 8001abe:	f7ff ffcd 	bl	8001a5c <now_ms>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	4911      	ldr	r1, [pc, #68]	@ (8001b0c <Switches_Init+0xa0>)
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        pressed_reported[i] = false;
 8001acc:	4a10      	ldr	r2, [pc, #64]	@ (8001b10 <Switches_Init+0xa4>)
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	701a      	strb	r2, [r3, #0]
        press_start_ms[i]   = 0;
 8001ad6:	4a0f      	ldr	r2, [pc, #60]	@ (8001b14 <Switches_Init+0xa8>)
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	2100      	movs	r1, #0
 8001adc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        long_fired[i]       = false;
 8001ae0:	4a0d      	ldr	r2, [pc, #52]	@ (8001b18 <Switches_Init+0xac>)
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < SWITCH_COUNT; ++i) {
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	3301      	adds	r3, #1
 8001aee:	617b      	str	r3, [r7, #20]
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	2b03      	cmp	r3, #3
 8001af4:	ddde      	ble.n	8001ab4 <Switches_Init+0x48>
    }
}
 8001af6:	bf00      	nop
 8001af8:	bf00      	nop
 8001afa:	3718      	adds	r7, #24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40021000 	.word	0x40021000
 8001b04:	40010c00 	.word	0x40010c00
 8001b08:	200002e0 	.word	0x200002e0
 8001b0c:	200002e4 	.word	0x200002e4
 8001b10:	200002f4 	.word	0x200002f4
 8001b14:	200002f8 	.word	0x200002f8
 8001b18:	20000308 	.word	0x20000308

08001b1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b24:	4a14      	ldr	r2, [pc, #80]	@ (8001b78 <_sbrk+0x5c>)
 8001b26:	4b15      	ldr	r3, [pc, #84]	@ (8001b7c <_sbrk+0x60>)
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b30:	4b13      	ldr	r3, [pc, #76]	@ (8001b80 <_sbrk+0x64>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d102      	bne.n	8001b3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b38:	4b11      	ldr	r3, [pc, #68]	@ (8001b80 <_sbrk+0x64>)
 8001b3a:	4a12      	ldr	r2, [pc, #72]	@ (8001b84 <_sbrk+0x68>)
 8001b3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b3e:	4b10      	ldr	r3, [pc, #64]	@ (8001b80 <_sbrk+0x64>)
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4413      	add	r3, r2
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d207      	bcs.n	8001b5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b4c:	f004 f9b6 	bl	8005ebc <__errno>
 8001b50:	4603      	mov	r3, r0
 8001b52:	220c      	movs	r2, #12
 8001b54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b56:	f04f 33ff 	mov.w	r3, #4294967295
 8001b5a:	e009      	b.n	8001b70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b5c:	4b08      	ldr	r3, [pc, #32]	@ (8001b80 <_sbrk+0x64>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b62:	4b07      	ldr	r3, [pc, #28]	@ (8001b80 <_sbrk+0x64>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4413      	add	r3, r2
 8001b6a:	4a05      	ldr	r2, [pc, #20]	@ (8001b80 <_sbrk+0x64>)
 8001b6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20005000 	.word	0x20005000
 8001b7c:	00000400 	.word	0x00000400
 8001b80:	2000030c 	.word	0x2000030c
 8001b84:	200004a8 	.word	0x200004a8

08001b88 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr

08001b94 <UART_Init>:

/**
  * @brief Initialize UART reception (interrupt mode, one byte at a time).
  */
void UART_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
    // Clear the buffer and reset index
    memset(rxBuffer, 0, sizeof(rxBuffer));
 8001b98:	2240      	movs	r2, #64	@ 0x40
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	4807      	ldr	r0, [pc, #28]	@ (8001bbc <UART_Init+0x28>)
 8001b9e:	f004 f95f 	bl	8005e60 <memset>
    rxIndex = 0;
 8001ba2:	4b07      	ldr	r3, [pc, #28]	@ (8001bc0 <UART_Init+0x2c>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	801a      	strh	r2, [r3, #0]
    packetReady = false;
 8001ba8:	4b06      	ldr	r3, [pc, #24]	@ (8001bc4 <UART_Init+0x30>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	701a      	strb	r2, [r3, #0]

    // Start UART reception (non-blocking)
    HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 8001bae:	2201      	movs	r2, #1
 8001bb0:	4905      	ldr	r1, [pc, #20]	@ (8001bc8 <UART_Init+0x34>)
 8001bb2:	4806      	ldr	r0, [pc, #24]	@ (8001bcc <UART_Init+0x38>)
 8001bb4:	f003 fed2 	bl	800595c <HAL_UART_Receive_IT>
}
 8001bb8:	bf00      	nop
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20000314 	.word	0x20000314
 8001bc0:	20000354 	.word	0x20000354
 8001bc4:	20000356 	.word	0x20000356
 8001bc8:	20000310 	.word	0x20000310
 8001bcc:	200001ec 	.word	0x200001ec

08001bd0 <UART_TransmitString>:

/**
  * @brief Transmit a null-terminated string.
  */
void UART_TransmitString(UART_HandleTypeDef *huart, const char *str)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8001bda:	6838      	ldr	r0, [r7, #0]
 8001bdc:	f7fe fac0 	bl	8000160 <strlen>
 8001be0:	4603      	mov	r3, r0
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	f04f 33ff 	mov.w	r3, #4294967295
 8001be8:	6839      	ldr	r1, [r7, #0]
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f003 fe2b 	bl	8005846 <HAL_UART_Transmit>
}
 8001bf0:	bf00      	nop
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <UART_GetReceivedPacket>:
        HAL_UART_Receive_IT(&huart1, &rxByte, 1);
    }
}

bool UART_GetReceivedPacket(char *buffer, size_t buffer_size)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
    if (packetReady)
 8001c02:	4b1b      	ldr	r3, [pc, #108]	@ (8001c70 <UART_GetReceivedPacket+0x78>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d02c      	beq.n	8001c64 <UART_GetReceivedPacket+0x6c>
    {
        // Ensure destination buffer is large enough
        size_t len = strlen(rxBuffer);
 8001c0a:	481a      	ldr	r0, [pc, #104]	@ (8001c74 <UART_GetReceivedPacket+0x7c>)
 8001c0c:	f7fe faa8 	bl	8000160 <strlen>
 8001c10:	60f8      	str	r0, [r7, #12]
        if (len < buffer_size)
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d219      	bcs.n	8001c4e <UART_GetReceivedPacket+0x56>
        {
            strncpy(buffer, rxBuffer, buffer_size - 1);
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	461a      	mov	r2, r3
 8001c20:	4914      	ldr	r1, [pc, #80]	@ (8001c74 <UART_GetReceivedPacket+0x7c>)
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f004 f936 	bl	8005e94 <strncpy>
            buffer[buffer_size - 1] = '\0'; // Ensure null-termination
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	4413      	add	r3, r2
 8001c30:	2200      	movs	r2, #0
 8001c32:	701a      	strb	r2, [r3, #0]

            // Reset internal buffer for next packet
            memset(rxBuffer, 0, sizeof(rxBuffer));
 8001c34:	2240      	movs	r2, #64	@ 0x40
 8001c36:	2100      	movs	r1, #0
 8001c38:	480e      	ldr	r0, [pc, #56]	@ (8001c74 <UART_GetReceivedPacket+0x7c>)
 8001c3a:	f004 f911 	bl	8005e60 <memset>
            rxIndex = 0;
 8001c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c78 <UART_GetReceivedPacket+0x80>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	801a      	strh	r2, [r3, #0]
            packetReady = false;
 8001c44:	4b0a      	ldr	r3, [pc, #40]	@ (8001c70 <UART_GetReceivedPacket+0x78>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	701a      	strb	r2, [r3, #0]
            return true;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e00b      	b.n	8001c66 <UART_GetReceivedPacket+0x6e>
        }
        else
        {
            // Destination buffer too small, discard internal packet
            memset(rxBuffer, 0, sizeof(rxBuffer));
 8001c4e:	2240      	movs	r2, #64	@ 0x40
 8001c50:	2100      	movs	r1, #0
 8001c52:	4808      	ldr	r0, [pc, #32]	@ (8001c74 <UART_GetReceivedPacket+0x7c>)
 8001c54:	f004 f904 	bl	8005e60 <memset>
            rxIndex = 0;
 8001c58:	4b07      	ldr	r3, [pc, #28]	@ (8001c78 <UART_GetReceivedPacket+0x80>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	801a      	strh	r2, [r3, #0]
            packetReady = false;
 8001c5e:	4b04      	ldr	r3, [pc, #16]	@ (8001c70 <UART_GetReceivedPacket+0x78>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	701a      	strb	r2, [r3, #0]
            // Optionally, log an error
        }
    }
    return false; // Ensure to return false if no packet is ready
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000356 	.word	0x20000356
 8001c74:	20000314 	.word	0x20000314
 8001c78:	20000354 	.word	0x20000354

08001c7c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c7c:	f7ff ff84 	bl	8001b88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c80:	480b      	ldr	r0, [pc, #44]	@ (8001cb0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c82:	490c      	ldr	r1, [pc, #48]	@ (8001cb4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c84:	4a0c      	ldr	r2, [pc, #48]	@ (8001cb8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c88:	e002      	b.n	8001c90 <LoopCopyDataInit>

08001c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c8e:	3304      	adds	r3, #4

08001c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c94:	d3f9      	bcc.n	8001c8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c96:	4a09      	ldr	r2, [pc, #36]	@ (8001cbc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c98:	4c09      	ldr	r4, [pc, #36]	@ (8001cc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c9c:	e001      	b.n	8001ca2 <LoopFillZerobss>

08001c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ca0:	3204      	adds	r2, #4

08001ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ca4:	d3fb      	bcc.n	8001c9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ca6:	f004 f90f 	bl	8005ec8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001caa:	f7fe fdef 	bl	800088c <main>
  bx lr
 8001cae:	4770      	bx	lr
  ldr r0, =_sdata
 8001cb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cb4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001cb8:	08007334 	.word	0x08007334
  ldr r2, =_sbss
 8001cbc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001cc0:	200004a4 	.word	0x200004a4

08001cc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cc4:	e7fe      	b.n	8001cc4 <ADC1_2_IRQHandler>
	...

08001cc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ccc:	4b08      	ldr	r3, [pc, #32]	@ (8001cf0 <HAL_Init+0x28>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a07      	ldr	r2, [pc, #28]	@ (8001cf0 <HAL_Init+0x28>)
 8001cd2:	f043 0310 	orr.w	r3, r3, #16
 8001cd6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cd8:	2003      	movs	r0, #3
 8001cda:	f000 fc61 	bl	80025a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cde:	2000      	movs	r0, #0
 8001ce0:	f000 f808 	bl	8001cf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ce4:	f7ff fd04 	bl	80016f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40022000 	.word	0x40022000

08001cf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cfc:	4b12      	ldr	r3, [pc, #72]	@ (8001d48 <HAL_InitTick+0x54>)
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	4b12      	ldr	r3, [pc, #72]	@ (8001d4c <HAL_InitTick+0x58>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	4619      	mov	r1, r3
 8001d06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d12:	4618      	mov	r0, r3
 8001d14:	f000 fc79 	bl	800260a <HAL_SYSTICK_Config>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e00e      	b.n	8001d40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b0f      	cmp	r3, #15
 8001d26:	d80a      	bhi.n	8001d3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d28:	2200      	movs	r2, #0
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d30:	f000 fc41 	bl	80025b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d34:	4a06      	ldr	r2, [pc, #24]	@ (8001d50 <HAL_InitTick+0x5c>)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	e000      	b.n	8001d40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	2000001c 	.word	0x2000001c
 8001d4c:	20000024 	.word	0x20000024
 8001d50:	20000020 	.word	0x20000020

08001d54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d58:	4b05      	ldr	r3, [pc, #20]	@ (8001d70 <HAL_IncTick+0x1c>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	4b05      	ldr	r3, [pc, #20]	@ (8001d74 <HAL_IncTick+0x20>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4413      	add	r3, r2
 8001d64:	4a03      	ldr	r2, [pc, #12]	@ (8001d74 <HAL_IncTick+0x20>)
 8001d66:	6013      	str	r3, [r2, #0]
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr
 8001d70:	20000024 	.word	0x20000024
 8001d74:	20000358 	.word	0x20000358

08001d78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d7c:	4b02      	ldr	r3, [pc, #8]	@ (8001d88 <HAL_GetTick+0x10>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr
 8001d88:	20000358 	.word	0x20000358

08001d8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d94:	f7ff fff0 	bl	8001d78 <HAL_GetTick>
 8001d98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da4:	d005      	beq.n	8001db2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001da6:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd0 <HAL_Delay+0x44>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	461a      	mov	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4413      	add	r3, r2
 8001db0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001db2:	bf00      	nop
 8001db4:	f7ff ffe0 	bl	8001d78 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d8f7      	bhi.n	8001db4 <HAL_Delay+0x28>
  {
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	bf00      	nop
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000024 	.word	0x20000024

08001dd4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001de0:	2300      	movs	r3, #0
 8001de2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001de4:	2300      	movs	r3, #0
 8001de6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001de8:	2300      	movs	r3, #0
 8001dea:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e0be      	b.n	8001f74 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d109      	bne.n	8001e18 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7ff fc9e 	bl	8001754 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 fa05 	bl	8002228 <ADC_ConversionStop_Disable>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e26:	f003 0310 	and.w	r3, r3, #16
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f040 8099 	bne.w	8001f62 <HAL_ADC_Init+0x18e>
 8001e30:	7dfb      	ldrb	r3, [r7, #23]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f040 8095 	bne.w	8001f62 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e3c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e40:	f023 0302 	bic.w	r3, r3, #2
 8001e44:	f043 0202 	orr.w	r2, r3, #2
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e54:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	7b1b      	ldrb	r3, [r3, #12]
 8001e5a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e5c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e5e:	68ba      	ldr	r2, [r7, #8]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e6c:	d003      	beq.n	8001e76 <HAL_ADC_Init+0xa2>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d102      	bne.n	8001e7c <HAL_ADC_Init+0xa8>
 8001e76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e7a:	e000      	b.n	8001e7e <HAL_ADC_Init+0xaa>
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	7d1b      	ldrb	r3, [r3, #20]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d119      	bne.n	8001ec0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	7b1b      	ldrb	r3, [r3, #12]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d109      	bne.n	8001ea8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	035a      	lsls	r2, r3, #13
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ea4:	613b      	str	r3, [r7, #16]
 8001ea6:	e00b      	b.n	8001ec0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eac:	f043 0220 	orr.w	r2, r3, #32
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eb8:	f043 0201 	orr.w	r2, r3, #1
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	689a      	ldr	r2, [r3, #8]
 8001eda:	4b28      	ldr	r3, [pc, #160]	@ (8001f7c <HAL_ADC_Init+0x1a8>)
 8001edc:	4013      	ands	r3, r2
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	6812      	ldr	r2, [r2, #0]
 8001ee2:	68b9      	ldr	r1, [r7, #8]
 8001ee4:	430b      	orrs	r3, r1
 8001ee6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ef0:	d003      	beq.n	8001efa <HAL_ADC_Init+0x126>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d104      	bne.n	8001f04 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	3b01      	subs	r3, #1
 8001f00:	051b      	lsls	r3, r3, #20
 8001f02:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f0a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	430a      	orrs	r2, r1
 8001f16:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	689a      	ldr	r2, [r3, #8]
 8001f1e:	4b18      	ldr	r3, [pc, #96]	@ (8001f80 <HAL_ADC_Init+0x1ac>)
 8001f20:	4013      	ands	r3, r2
 8001f22:	68ba      	ldr	r2, [r7, #8]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d10b      	bne.n	8001f40 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f32:	f023 0303 	bic.w	r3, r3, #3
 8001f36:	f043 0201 	orr.w	r2, r3, #1
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f3e:	e018      	b.n	8001f72 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f44:	f023 0312 	bic.w	r3, r3, #18
 8001f48:	f043 0210 	orr.w	r2, r3, #16
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f54:	f043 0201 	orr.w	r2, r3, #1
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f60:	e007      	b.n	8001f72 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f66:	f043 0210 	orr.w	r2, r3, #16
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3718      	adds	r7, #24
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	ffe1f7fd 	.word	0xffe1f7fd
 8001f80:	ff1f0efe 	.word	0xff1f0efe

08001f84 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001f92:	2300      	movs	r3, #0
 8001f94:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d101      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x20>
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	e0dc      	b.n	800215e <HAL_ADC_ConfigChannel+0x1da>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b06      	cmp	r3, #6
 8001fb2:	d81c      	bhi.n	8001fee <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685a      	ldr	r2, [r3, #4]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4413      	add	r3, r2
 8001fc4:	3b05      	subs	r3, #5
 8001fc6:	221f      	movs	r2, #31
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	4019      	ands	r1, r3
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	6818      	ldr	r0, [r3, #0]
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685a      	ldr	r2, [r3, #4]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4413      	add	r3, r2
 8001fde:	3b05      	subs	r3, #5
 8001fe0:	fa00 f203 	lsl.w	r2, r0, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	635a      	str	r2, [r3, #52]	@ 0x34
 8001fec:	e03c      	b.n	8002068 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b0c      	cmp	r3, #12
 8001ff4:	d81c      	bhi.n	8002030 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685a      	ldr	r2, [r3, #4]
 8002000:	4613      	mov	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	3b23      	subs	r3, #35	@ 0x23
 8002008:	221f      	movs	r2, #31
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43db      	mvns	r3, r3
 8002010:	4019      	ands	r1, r3
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	6818      	ldr	r0, [r3, #0]
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685a      	ldr	r2, [r3, #4]
 800201a:	4613      	mov	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4413      	add	r3, r2
 8002020:	3b23      	subs	r3, #35	@ 0x23
 8002022:	fa00 f203 	lsl.w	r2, r0, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	430a      	orrs	r2, r1
 800202c:	631a      	str	r2, [r3, #48]	@ 0x30
 800202e:	e01b      	b.n	8002068 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685a      	ldr	r2, [r3, #4]
 800203a:	4613      	mov	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4413      	add	r3, r2
 8002040:	3b41      	subs	r3, #65	@ 0x41
 8002042:	221f      	movs	r2, #31
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	43db      	mvns	r3, r3
 800204a:	4019      	ands	r1, r3
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	6818      	ldr	r0, [r3, #0]
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	4613      	mov	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4413      	add	r3, r2
 800205a:	3b41      	subs	r3, #65	@ 0x41
 800205c:	fa00 f203 	lsl.w	r2, r0, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	430a      	orrs	r2, r1
 8002066:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2b09      	cmp	r3, #9
 800206e:	d91c      	bls.n	80020aa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68d9      	ldr	r1, [r3, #12]
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	4613      	mov	r3, r2
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	4413      	add	r3, r2
 8002080:	3b1e      	subs	r3, #30
 8002082:	2207      	movs	r2, #7
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	43db      	mvns	r3, r3
 800208a:	4019      	ands	r1, r3
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	6898      	ldr	r0, [r3, #8]
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	4613      	mov	r3, r2
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	4413      	add	r3, r2
 800209a:	3b1e      	subs	r3, #30
 800209c:	fa00 f203 	lsl.w	r2, r0, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	430a      	orrs	r2, r1
 80020a6:	60da      	str	r2, [r3, #12]
 80020a8:	e019      	b.n	80020de <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6919      	ldr	r1, [r3, #16]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	4613      	mov	r3, r2
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	4413      	add	r3, r2
 80020ba:	2207      	movs	r2, #7
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	4019      	ands	r1, r3
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	6898      	ldr	r0, [r3, #8]
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	4613      	mov	r3, r2
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	4413      	add	r3, r2
 80020d2:	fa00 f203 	lsl.w	r2, r0, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	430a      	orrs	r2, r1
 80020dc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2b10      	cmp	r3, #16
 80020e4:	d003      	beq.n	80020ee <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80020ea:	2b11      	cmp	r3, #17
 80020ec:	d132      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a1d      	ldr	r2, [pc, #116]	@ (8002168 <HAL_ADC_ConfigChannel+0x1e4>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d125      	bne.n	8002144 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d126      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002114:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2b10      	cmp	r3, #16
 800211c:	d11a      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800211e:	4b13      	ldr	r3, [pc, #76]	@ (800216c <HAL_ADC_ConfigChannel+0x1e8>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a13      	ldr	r2, [pc, #76]	@ (8002170 <HAL_ADC_ConfigChannel+0x1ec>)
 8002124:	fba2 2303 	umull	r2, r3, r2, r3
 8002128:	0c9a      	lsrs	r2, r3, #18
 800212a:	4613      	mov	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002134:	e002      	b.n	800213c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	3b01      	subs	r3, #1
 800213a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1f9      	bne.n	8002136 <HAL_ADC_ConfigChannel+0x1b2>
 8002142:	e007      	b.n	8002154 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002148:	f043 0220 	orr.w	r2, r3, #32
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800215c:	7bfb      	ldrb	r3, [r7, #15]
}
 800215e:	4618      	mov	r0, r3
 8002160:	3714      	adds	r7, #20
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr
 8002168:	40012400 	.word	0x40012400
 800216c:	2000001c 	.word	0x2000001c
 8002170:	431bde83 	.word	0x431bde83

08002174 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800217c:	2300      	movs	r3, #0
 800217e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002180:	2300      	movs	r3, #0
 8002182:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	2b01      	cmp	r3, #1
 8002190:	d040      	beq.n	8002214 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f042 0201 	orr.w	r2, r2, #1
 80021a0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80021a2:	4b1f      	ldr	r3, [pc, #124]	@ (8002220 <ADC_Enable+0xac>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a1f      	ldr	r2, [pc, #124]	@ (8002224 <ADC_Enable+0xb0>)
 80021a8:	fba2 2303 	umull	r2, r3, r2, r3
 80021ac:	0c9b      	lsrs	r3, r3, #18
 80021ae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80021b0:	e002      	b.n	80021b8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	3b01      	subs	r3, #1
 80021b6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1f9      	bne.n	80021b2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80021be:	f7ff fddb 	bl	8001d78 <HAL_GetTick>
 80021c2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80021c4:	e01f      	b.n	8002206 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80021c6:	f7ff fdd7 	bl	8001d78 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d918      	bls.n	8002206 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d011      	beq.n	8002206 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021e6:	f043 0210 	orr.w	r2, r3, #16
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021f2:	f043 0201 	orr.w	r2, r3, #1
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e007      	b.n	8002216 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f003 0301 	and.w	r3, r3, #1
 8002210:	2b01      	cmp	r3, #1
 8002212:	d1d8      	bne.n	80021c6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	2000001c 	.word	0x2000001c
 8002224:	431bde83 	.word	0x431bde83

08002228 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002230:	2300      	movs	r3, #0
 8002232:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b01      	cmp	r3, #1
 8002240:	d12e      	bne.n	80022a0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 0201 	bic.w	r2, r2, #1
 8002250:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002252:	f7ff fd91 	bl	8001d78 <HAL_GetTick>
 8002256:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002258:	e01b      	b.n	8002292 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800225a:	f7ff fd8d 	bl	8001d78 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d914      	bls.n	8002292 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b01      	cmp	r3, #1
 8002274:	d10d      	bne.n	8002292 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800227a:	f043 0210 	orr.w	r2, r3, #16
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002286:	f043 0201 	orr.w	r2, r3, #1
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e007      	b.n	80022a2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	2b01      	cmp	r3, #1
 800229e:	d0dc      	beq.n	800225a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
	...

080022ac <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80022ac:	b590      	push	{r4, r7, lr}
 80022ae:	b087      	sub	sp, #28
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022b4:	2300      	movs	r3, #0
 80022b6:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80022b8:	2300      	movs	r3, #0
 80022ba:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d101      	bne.n	80022ca <HAL_ADCEx_Calibration_Start+0x1e>
 80022c6:	2302      	movs	r3, #2
 80022c8:	e097      	b.n	80023fa <HAL_ADCEx_Calibration_Start+0x14e>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7ff ffa8 	bl	8002228 <ADC_ConversionStop_Disable>
 80022d8:	4603      	mov	r3, r0
 80022da:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7ff ff49 	bl	8002174 <ADC_Enable>
 80022e2:	4603      	mov	r3, r0
 80022e4:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 80022e6:	7dfb      	ldrb	r3, [r7, #23]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f040 8081 	bne.w	80023f0 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80022f6:	f023 0302 	bic.w	r3, r3, #2
 80022fa:	f043 0202 	orr.w	r2, r3, #2
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002302:	4b40      	ldr	r3, [pc, #256]	@ (8002404 <HAL_ADCEx_Calibration_Start+0x158>)
 8002304:	681c      	ldr	r4, [r3, #0]
 8002306:	2002      	movs	r0, #2
 8002308:	f001 fdc4 	bl	8003e94 <HAL_RCCEx_GetPeriphCLKFreq>
 800230c:	4603      	mov	r3, r0
 800230e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002312:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002314:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002316:	e002      	b.n	800231e <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	3b01      	subs	r3, #1
 800231c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d1f9      	bne.n	8002318 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689a      	ldr	r2, [r3, #8]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f042 0208 	orr.w	r2, r2, #8
 8002332:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002334:	f7ff fd20 	bl	8001d78 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800233a:	e01b      	b.n	8002374 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800233c:	f7ff fd1c 	bl	8001d78 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b0a      	cmp	r3, #10
 8002348:	d914      	bls.n	8002374 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f003 0308 	and.w	r3, r3, #8
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00d      	beq.n	8002374 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800235c:	f023 0312 	bic.w	r3, r3, #18
 8002360:	f043 0210 	orr.w	r2, r3, #16
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e042      	b.n	80023fa <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f003 0308 	and.w	r3, r3, #8
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1dc      	bne.n	800233c <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f042 0204 	orr.w	r2, r2, #4
 8002390:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002392:	f7ff fcf1 	bl	8001d78 <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002398:	e01b      	b.n	80023d2 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800239a:	f7ff fced 	bl	8001d78 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b0a      	cmp	r3, #10
 80023a6:	d914      	bls.n	80023d2 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f003 0304 	and.w	r3, r3, #4
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00d      	beq.n	80023d2 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ba:	f023 0312 	bic.w	r3, r3, #18
 80023be:	f043 0210 	orr.w	r2, r3, #16
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e013      	b.n	80023fa <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f003 0304 	and.w	r3, r3, #4
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1dc      	bne.n	800239a <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e4:	f023 0303 	bic.w	r3, r3, #3
 80023e8:	f043 0201 	orr.w	r2, r3, #1
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80023f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	371c      	adds	r7, #28
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd90      	pop	{r4, r7, pc}
 8002402:	bf00      	nop
 8002404:	2000001c 	.word	0x2000001c

08002408 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002418:	4b0c      	ldr	r3, [pc, #48]	@ (800244c <__NVIC_SetPriorityGrouping+0x44>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800241e:	68ba      	ldr	r2, [r7, #8]
 8002420:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002424:	4013      	ands	r3, r2
 8002426:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002430:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002434:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002438:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800243a:	4a04      	ldr	r2, [pc, #16]	@ (800244c <__NVIC_SetPriorityGrouping+0x44>)
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	60d3      	str	r3, [r2, #12]
}
 8002440:	bf00      	nop
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	e000ed00 	.word	0xe000ed00

08002450 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002454:	4b04      	ldr	r3, [pc, #16]	@ (8002468 <__NVIC_GetPriorityGrouping+0x18>)
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	0a1b      	lsrs	r3, r3, #8
 800245a:	f003 0307 	and.w	r3, r3, #7
}
 800245e:	4618      	mov	r0, r3
 8002460:	46bd      	mov	sp, r7
 8002462:	bc80      	pop	{r7}
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	e000ed00 	.word	0xe000ed00

0800246c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247a:	2b00      	cmp	r3, #0
 800247c:	db0b      	blt.n	8002496 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800247e:	79fb      	ldrb	r3, [r7, #7]
 8002480:	f003 021f 	and.w	r2, r3, #31
 8002484:	4906      	ldr	r1, [pc, #24]	@ (80024a0 <__NVIC_EnableIRQ+0x34>)
 8002486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248a:	095b      	lsrs	r3, r3, #5
 800248c:	2001      	movs	r0, #1
 800248e:	fa00 f202 	lsl.w	r2, r0, r2
 8002492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002496:	bf00      	nop
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr
 80024a0:	e000e100 	.word	0xe000e100

080024a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	6039      	str	r1, [r7, #0]
 80024ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	db0a      	blt.n	80024ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	b2da      	uxtb	r2, r3
 80024bc:	490c      	ldr	r1, [pc, #48]	@ (80024f0 <__NVIC_SetPriority+0x4c>)
 80024be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c2:	0112      	lsls	r2, r2, #4
 80024c4:	b2d2      	uxtb	r2, r2
 80024c6:	440b      	add	r3, r1
 80024c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024cc:	e00a      	b.n	80024e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	4908      	ldr	r1, [pc, #32]	@ (80024f4 <__NVIC_SetPriority+0x50>)
 80024d4:	79fb      	ldrb	r3, [r7, #7]
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	3b04      	subs	r3, #4
 80024dc:	0112      	lsls	r2, r2, #4
 80024de:	b2d2      	uxtb	r2, r2
 80024e0:	440b      	add	r3, r1
 80024e2:	761a      	strb	r2, [r3, #24]
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bc80      	pop	{r7}
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	e000e100 	.word	0xe000e100
 80024f4:	e000ed00 	.word	0xe000ed00

080024f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b089      	sub	sp, #36	@ 0x24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	f1c3 0307 	rsb	r3, r3, #7
 8002512:	2b04      	cmp	r3, #4
 8002514:	bf28      	it	cs
 8002516:	2304      	movcs	r3, #4
 8002518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	3304      	adds	r3, #4
 800251e:	2b06      	cmp	r3, #6
 8002520:	d902      	bls.n	8002528 <NVIC_EncodePriority+0x30>
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	3b03      	subs	r3, #3
 8002526:	e000      	b.n	800252a <NVIC_EncodePriority+0x32>
 8002528:	2300      	movs	r3, #0
 800252a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800252c:	f04f 32ff 	mov.w	r2, #4294967295
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43da      	mvns	r2, r3
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	401a      	ands	r2, r3
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002540:	f04f 31ff 	mov.w	r1, #4294967295
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	fa01 f303 	lsl.w	r3, r1, r3
 800254a:	43d9      	mvns	r1, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002550:	4313      	orrs	r3, r2
         );
}
 8002552:	4618      	mov	r0, r3
 8002554:	3724      	adds	r7, #36	@ 0x24
 8002556:	46bd      	mov	sp, r7
 8002558:	bc80      	pop	{r7}
 800255a:	4770      	bx	lr

0800255c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3b01      	subs	r3, #1
 8002568:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800256c:	d301      	bcc.n	8002572 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800256e:	2301      	movs	r3, #1
 8002570:	e00f      	b.n	8002592 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002572:	4a0a      	ldr	r2, [pc, #40]	@ (800259c <SysTick_Config+0x40>)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	3b01      	subs	r3, #1
 8002578:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800257a:	210f      	movs	r1, #15
 800257c:	f04f 30ff 	mov.w	r0, #4294967295
 8002580:	f7ff ff90 	bl	80024a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002584:	4b05      	ldr	r3, [pc, #20]	@ (800259c <SysTick_Config+0x40>)
 8002586:	2200      	movs	r2, #0
 8002588:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800258a:	4b04      	ldr	r3, [pc, #16]	@ (800259c <SysTick_Config+0x40>)
 800258c:	2207      	movs	r2, #7
 800258e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	e000e010 	.word	0xe000e010

080025a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f7ff ff2d 	bl	8002408 <__NVIC_SetPriorityGrouping>
}
 80025ae:	bf00      	nop
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b086      	sub	sp, #24
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	4603      	mov	r3, r0
 80025be:	60b9      	str	r1, [r7, #8]
 80025c0:	607a      	str	r2, [r7, #4]
 80025c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025c8:	f7ff ff42 	bl	8002450 <__NVIC_GetPriorityGrouping>
 80025cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	68b9      	ldr	r1, [r7, #8]
 80025d2:	6978      	ldr	r0, [r7, #20]
 80025d4:	f7ff ff90 	bl	80024f8 <NVIC_EncodePriority>
 80025d8:	4602      	mov	r2, r0
 80025da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025de:	4611      	mov	r1, r2
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff ff5f 	bl	80024a4 <__NVIC_SetPriority>
}
 80025e6:	bf00      	nop
 80025e8:	3718      	adds	r7, #24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b082      	sub	sp, #8
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	4603      	mov	r3, r0
 80025f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff ff35 	bl	800246c <__NVIC_EnableIRQ>
}
 8002602:	bf00      	nop
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b082      	sub	sp, #8
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f7ff ffa2 	bl	800255c <SysTick_Config>
 8002618:	4603      	mov	r3, r0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
	...

08002624 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002624:	b480      	push	{r7}
 8002626:	b08b      	sub	sp, #44	@ 0x2c
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800262e:	2300      	movs	r3, #0
 8002630:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002632:	2300      	movs	r3, #0
 8002634:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002636:	e169      	b.n	800290c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002638:	2201      	movs	r2, #1
 800263a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	69fa      	ldr	r2, [r7, #28]
 8002648:	4013      	ands	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	429a      	cmp	r2, r3
 8002652:	f040 8158 	bne.w	8002906 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	4a9a      	ldr	r2, [pc, #616]	@ (80028c4 <HAL_GPIO_Init+0x2a0>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d05e      	beq.n	800271e <HAL_GPIO_Init+0xfa>
 8002660:	4a98      	ldr	r2, [pc, #608]	@ (80028c4 <HAL_GPIO_Init+0x2a0>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d875      	bhi.n	8002752 <HAL_GPIO_Init+0x12e>
 8002666:	4a98      	ldr	r2, [pc, #608]	@ (80028c8 <HAL_GPIO_Init+0x2a4>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d058      	beq.n	800271e <HAL_GPIO_Init+0xfa>
 800266c:	4a96      	ldr	r2, [pc, #600]	@ (80028c8 <HAL_GPIO_Init+0x2a4>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d86f      	bhi.n	8002752 <HAL_GPIO_Init+0x12e>
 8002672:	4a96      	ldr	r2, [pc, #600]	@ (80028cc <HAL_GPIO_Init+0x2a8>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d052      	beq.n	800271e <HAL_GPIO_Init+0xfa>
 8002678:	4a94      	ldr	r2, [pc, #592]	@ (80028cc <HAL_GPIO_Init+0x2a8>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d869      	bhi.n	8002752 <HAL_GPIO_Init+0x12e>
 800267e:	4a94      	ldr	r2, [pc, #592]	@ (80028d0 <HAL_GPIO_Init+0x2ac>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d04c      	beq.n	800271e <HAL_GPIO_Init+0xfa>
 8002684:	4a92      	ldr	r2, [pc, #584]	@ (80028d0 <HAL_GPIO_Init+0x2ac>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d863      	bhi.n	8002752 <HAL_GPIO_Init+0x12e>
 800268a:	4a92      	ldr	r2, [pc, #584]	@ (80028d4 <HAL_GPIO_Init+0x2b0>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d046      	beq.n	800271e <HAL_GPIO_Init+0xfa>
 8002690:	4a90      	ldr	r2, [pc, #576]	@ (80028d4 <HAL_GPIO_Init+0x2b0>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d85d      	bhi.n	8002752 <HAL_GPIO_Init+0x12e>
 8002696:	2b12      	cmp	r3, #18
 8002698:	d82a      	bhi.n	80026f0 <HAL_GPIO_Init+0xcc>
 800269a:	2b12      	cmp	r3, #18
 800269c:	d859      	bhi.n	8002752 <HAL_GPIO_Init+0x12e>
 800269e:	a201      	add	r2, pc, #4	@ (adr r2, 80026a4 <HAL_GPIO_Init+0x80>)
 80026a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026a4:	0800271f 	.word	0x0800271f
 80026a8:	080026f9 	.word	0x080026f9
 80026ac:	0800270b 	.word	0x0800270b
 80026b0:	0800274d 	.word	0x0800274d
 80026b4:	08002753 	.word	0x08002753
 80026b8:	08002753 	.word	0x08002753
 80026bc:	08002753 	.word	0x08002753
 80026c0:	08002753 	.word	0x08002753
 80026c4:	08002753 	.word	0x08002753
 80026c8:	08002753 	.word	0x08002753
 80026cc:	08002753 	.word	0x08002753
 80026d0:	08002753 	.word	0x08002753
 80026d4:	08002753 	.word	0x08002753
 80026d8:	08002753 	.word	0x08002753
 80026dc:	08002753 	.word	0x08002753
 80026e0:	08002753 	.word	0x08002753
 80026e4:	08002753 	.word	0x08002753
 80026e8:	08002701 	.word	0x08002701
 80026ec:	08002715 	.word	0x08002715
 80026f0:	4a79      	ldr	r2, [pc, #484]	@ (80028d8 <HAL_GPIO_Init+0x2b4>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d013      	beq.n	800271e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80026f6:	e02c      	b.n	8002752 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	623b      	str	r3, [r7, #32]
          break;
 80026fe:	e029      	b.n	8002754 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	3304      	adds	r3, #4
 8002706:	623b      	str	r3, [r7, #32]
          break;
 8002708:	e024      	b.n	8002754 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	3308      	adds	r3, #8
 8002710:	623b      	str	r3, [r7, #32]
          break;
 8002712:	e01f      	b.n	8002754 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	330c      	adds	r3, #12
 800271a:	623b      	str	r3, [r7, #32]
          break;
 800271c:	e01a      	b.n	8002754 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d102      	bne.n	800272c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002726:	2304      	movs	r3, #4
 8002728:	623b      	str	r3, [r7, #32]
          break;
 800272a:	e013      	b.n	8002754 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d105      	bne.n	8002740 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002734:	2308      	movs	r3, #8
 8002736:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	69fa      	ldr	r2, [r7, #28]
 800273c:	611a      	str	r2, [r3, #16]
          break;
 800273e:	e009      	b.n	8002754 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002740:	2308      	movs	r3, #8
 8002742:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	69fa      	ldr	r2, [r7, #28]
 8002748:	615a      	str	r2, [r3, #20]
          break;
 800274a:	e003      	b.n	8002754 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800274c:	2300      	movs	r3, #0
 800274e:	623b      	str	r3, [r7, #32]
          break;
 8002750:	e000      	b.n	8002754 <HAL_GPIO_Init+0x130>
          break;
 8002752:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	2bff      	cmp	r3, #255	@ 0xff
 8002758:	d801      	bhi.n	800275e <HAL_GPIO_Init+0x13a>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	e001      	b.n	8002762 <HAL_GPIO_Init+0x13e>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	3304      	adds	r3, #4
 8002762:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	2bff      	cmp	r3, #255	@ 0xff
 8002768:	d802      	bhi.n	8002770 <HAL_GPIO_Init+0x14c>
 800276a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	e002      	b.n	8002776 <HAL_GPIO_Init+0x152>
 8002770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002772:	3b08      	subs	r3, #8
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	210f      	movs	r1, #15
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	fa01 f303 	lsl.w	r3, r1, r3
 8002784:	43db      	mvns	r3, r3
 8002786:	401a      	ands	r2, r3
 8002788:	6a39      	ldr	r1, [r7, #32]
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	fa01 f303 	lsl.w	r3, r1, r3
 8002790:	431a      	orrs	r2, r3
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 80b1 	beq.w	8002906 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027a4:	4b4d      	ldr	r3, [pc, #308]	@ (80028dc <HAL_GPIO_Init+0x2b8>)
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	4a4c      	ldr	r2, [pc, #304]	@ (80028dc <HAL_GPIO_Init+0x2b8>)
 80027aa:	f043 0301 	orr.w	r3, r3, #1
 80027ae:	6193      	str	r3, [r2, #24]
 80027b0:	4b4a      	ldr	r3, [pc, #296]	@ (80028dc <HAL_GPIO_Init+0x2b8>)
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	60bb      	str	r3, [r7, #8]
 80027ba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80027bc:	4a48      	ldr	r2, [pc, #288]	@ (80028e0 <HAL_GPIO_Init+0x2bc>)
 80027be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c0:	089b      	lsrs	r3, r3, #2
 80027c2:	3302      	adds	r3, #2
 80027c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027c8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027cc:	f003 0303 	and.w	r3, r3, #3
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	220f      	movs	r2, #15
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	43db      	mvns	r3, r3
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	4013      	ands	r3, r2
 80027de:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a40      	ldr	r2, [pc, #256]	@ (80028e4 <HAL_GPIO_Init+0x2c0>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d013      	beq.n	8002810 <HAL_GPIO_Init+0x1ec>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a3f      	ldr	r2, [pc, #252]	@ (80028e8 <HAL_GPIO_Init+0x2c4>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d00d      	beq.n	800280c <HAL_GPIO_Init+0x1e8>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a3e      	ldr	r2, [pc, #248]	@ (80028ec <HAL_GPIO_Init+0x2c8>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d007      	beq.n	8002808 <HAL_GPIO_Init+0x1e4>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a3d      	ldr	r2, [pc, #244]	@ (80028f0 <HAL_GPIO_Init+0x2cc>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d101      	bne.n	8002804 <HAL_GPIO_Init+0x1e0>
 8002800:	2303      	movs	r3, #3
 8002802:	e006      	b.n	8002812 <HAL_GPIO_Init+0x1ee>
 8002804:	2304      	movs	r3, #4
 8002806:	e004      	b.n	8002812 <HAL_GPIO_Init+0x1ee>
 8002808:	2302      	movs	r3, #2
 800280a:	e002      	b.n	8002812 <HAL_GPIO_Init+0x1ee>
 800280c:	2301      	movs	r3, #1
 800280e:	e000      	b.n	8002812 <HAL_GPIO_Init+0x1ee>
 8002810:	2300      	movs	r3, #0
 8002812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002814:	f002 0203 	and.w	r2, r2, #3
 8002818:	0092      	lsls	r2, r2, #2
 800281a:	4093      	lsls	r3, r2
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	4313      	orrs	r3, r2
 8002820:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002822:	492f      	ldr	r1, [pc, #188]	@ (80028e0 <HAL_GPIO_Init+0x2bc>)
 8002824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002826:	089b      	lsrs	r3, r3, #2
 8002828:	3302      	adds	r3, #2
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d006      	beq.n	800284a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800283c:	4b2d      	ldr	r3, [pc, #180]	@ (80028f4 <HAL_GPIO_Init+0x2d0>)
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	492c      	ldr	r1, [pc, #176]	@ (80028f4 <HAL_GPIO_Init+0x2d0>)
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	4313      	orrs	r3, r2
 8002846:	608b      	str	r3, [r1, #8]
 8002848:	e006      	b.n	8002858 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800284a:	4b2a      	ldr	r3, [pc, #168]	@ (80028f4 <HAL_GPIO_Init+0x2d0>)
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	43db      	mvns	r3, r3
 8002852:	4928      	ldr	r1, [pc, #160]	@ (80028f4 <HAL_GPIO_Init+0x2d0>)
 8002854:	4013      	ands	r3, r2
 8002856:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d006      	beq.n	8002872 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002864:	4b23      	ldr	r3, [pc, #140]	@ (80028f4 <HAL_GPIO_Init+0x2d0>)
 8002866:	68da      	ldr	r2, [r3, #12]
 8002868:	4922      	ldr	r1, [pc, #136]	@ (80028f4 <HAL_GPIO_Init+0x2d0>)
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	4313      	orrs	r3, r2
 800286e:	60cb      	str	r3, [r1, #12]
 8002870:	e006      	b.n	8002880 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002872:	4b20      	ldr	r3, [pc, #128]	@ (80028f4 <HAL_GPIO_Init+0x2d0>)
 8002874:	68da      	ldr	r2, [r3, #12]
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	43db      	mvns	r3, r3
 800287a:	491e      	ldr	r1, [pc, #120]	@ (80028f4 <HAL_GPIO_Init+0x2d0>)
 800287c:	4013      	ands	r3, r2
 800287e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d006      	beq.n	800289a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800288c:	4b19      	ldr	r3, [pc, #100]	@ (80028f4 <HAL_GPIO_Init+0x2d0>)
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	4918      	ldr	r1, [pc, #96]	@ (80028f4 <HAL_GPIO_Init+0x2d0>)
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	4313      	orrs	r3, r2
 8002896:	604b      	str	r3, [r1, #4]
 8002898:	e006      	b.n	80028a8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800289a:	4b16      	ldr	r3, [pc, #88]	@ (80028f4 <HAL_GPIO_Init+0x2d0>)
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	43db      	mvns	r3, r3
 80028a2:	4914      	ldr	r1, [pc, #80]	@ (80028f4 <HAL_GPIO_Init+0x2d0>)
 80028a4:	4013      	ands	r3, r2
 80028a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d021      	beq.n	80028f8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80028b4:	4b0f      	ldr	r3, [pc, #60]	@ (80028f4 <HAL_GPIO_Init+0x2d0>)
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	490e      	ldr	r1, [pc, #56]	@ (80028f4 <HAL_GPIO_Init+0x2d0>)
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	4313      	orrs	r3, r2
 80028be:	600b      	str	r3, [r1, #0]
 80028c0:	e021      	b.n	8002906 <HAL_GPIO_Init+0x2e2>
 80028c2:	bf00      	nop
 80028c4:	10320000 	.word	0x10320000
 80028c8:	10310000 	.word	0x10310000
 80028cc:	10220000 	.word	0x10220000
 80028d0:	10210000 	.word	0x10210000
 80028d4:	10120000 	.word	0x10120000
 80028d8:	10110000 	.word	0x10110000
 80028dc:	40021000 	.word	0x40021000
 80028e0:	40010000 	.word	0x40010000
 80028e4:	40010800 	.word	0x40010800
 80028e8:	40010c00 	.word	0x40010c00
 80028ec:	40011000 	.word	0x40011000
 80028f0:	40011400 	.word	0x40011400
 80028f4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80028f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002928 <HAL_GPIO_Init+0x304>)
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	43db      	mvns	r3, r3
 8002900:	4909      	ldr	r1, [pc, #36]	@ (8002928 <HAL_GPIO_Init+0x304>)
 8002902:	4013      	ands	r3, r2
 8002904:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002908:	3301      	adds	r3, #1
 800290a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002912:	fa22 f303 	lsr.w	r3, r2, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	f47f ae8e 	bne.w	8002638 <HAL_GPIO_Init+0x14>
  }
}
 800291c:	bf00      	nop
 800291e:	bf00      	nop
 8002920:	372c      	adds	r7, #44	@ 0x2c
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr
 8002928:	40010400 	.word	0x40010400

0800292c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	460b      	mov	r3, r1
 8002936:	807b      	strh	r3, [r7, #2]
 8002938:	4613      	mov	r3, r2
 800293a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800293c:	787b      	ldrb	r3, [r7, #1]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002942:	887a      	ldrh	r2, [r7, #2]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002948:	e003      	b.n	8002952 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800294a:	887b      	ldrh	r3, [r7, #2]
 800294c:	041a      	lsls	r2, r3, #16
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	611a      	str	r2, [r3, #16]
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr

0800295c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e12b      	b.n	8002bc6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d106      	bne.n	8002988 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7fe ff22 	bl	80017cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2224      	movs	r2, #36	@ 0x24
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 0201 	bic.w	r2, r2, #1
 800299e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80029ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029c0:	f001 f96c 	bl	8003c9c <HAL_RCC_GetPCLK1Freq>
 80029c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	4a81      	ldr	r2, [pc, #516]	@ (8002bd0 <HAL_I2C_Init+0x274>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d807      	bhi.n	80029e0 <HAL_I2C_Init+0x84>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	4a80      	ldr	r2, [pc, #512]	@ (8002bd4 <HAL_I2C_Init+0x278>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	bf94      	ite	ls
 80029d8:	2301      	movls	r3, #1
 80029da:	2300      	movhi	r3, #0
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	e006      	b.n	80029ee <HAL_I2C_Init+0x92>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	4a7d      	ldr	r2, [pc, #500]	@ (8002bd8 <HAL_I2C_Init+0x27c>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	bf94      	ite	ls
 80029e8:	2301      	movls	r3, #1
 80029ea:	2300      	movhi	r3, #0
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e0e7      	b.n	8002bc6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	4a78      	ldr	r2, [pc, #480]	@ (8002bdc <HAL_I2C_Init+0x280>)
 80029fa:	fba2 2303 	umull	r2, r3, r2, r3
 80029fe:	0c9b      	lsrs	r3, r3, #18
 8002a00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68ba      	ldr	r2, [r7, #8]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	4a6a      	ldr	r2, [pc, #424]	@ (8002bd0 <HAL_I2C_Init+0x274>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d802      	bhi.n	8002a30 <HAL_I2C_Init+0xd4>
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	e009      	b.n	8002a44 <HAL_I2C_Init+0xe8>
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002a36:	fb02 f303 	mul.w	r3, r2, r3
 8002a3a:	4a69      	ldr	r2, [pc, #420]	@ (8002be0 <HAL_I2C_Init+0x284>)
 8002a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a40:	099b      	lsrs	r3, r3, #6
 8002a42:	3301      	adds	r3, #1
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	6812      	ldr	r2, [r2, #0]
 8002a48:	430b      	orrs	r3, r1
 8002a4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002a56:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	495c      	ldr	r1, [pc, #368]	@ (8002bd0 <HAL_I2C_Init+0x274>)
 8002a60:	428b      	cmp	r3, r1
 8002a62:	d819      	bhi.n	8002a98 <HAL_I2C_Init+0x13c>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	1e59      	subs	r1, r3, #1
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a72:	1c59      	adds	r1, r3, #1
 8002a74:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002a78:	400b      	ands	r3, r1
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00a      	beq.n	8002a94 <HAL_I2C_Init+0x138>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	1e59      	subs	r1, r3, #1
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a92:	e051      	b.n	8002b38 <HAL_I2C_Init+0x1dc>
 8002a94:	2304      	movs	r3, #4
 8002a96:	e04f      	b.n	8002b38 <HAL_I2C_Init+0x1dc>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d111      	bne.n	8002ac4 <HAL_I2C_Init+0x168>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	1e58      	subs	r0, r3, #1
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6859      	ldr	r1, [r3, #4]
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	440b      	add	r3, r1
 8002aae:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	bf0c      	ite	eq
 8002abc:	2301      	moveq	r3, #1
 8002abe:	2300      	movne	r3, #0
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	e012      	b.n	8002aea <HAL_I2C_Init+0x18e>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	1e58      	subs	r0, r3, #1
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6859      	ldr	r1, [r3, #4]
 8002acc:	460b      	mov	r3, r1
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	0099      	lsls	r1, r3, #2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ada:	3301      	adds	r3, #1
 8002adc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	bf0c      	ite	eq
 8002ae4:	2301      	moveq	r3, #1
 8002ae6:	2300      	movne	r3, #0
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <HAL_I2C_Init+0x196>
 8002aee:	2301      	movs	r3, #1
 8002af0:	e022      	b.n	8002b38 <HAL_I2C_Init+0x1dc>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10e      	bne.n	8002b18 <HAL_I2C_Init+0x1bc>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	1e58      	subs	r0, r3, #1
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6859      	ldr	r1, [r3, #4]
 8002b02:	460b      	mov	r3, r1
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	440b      	add	r3, r1
 8002b08:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b16:	e00f      	b.n	8002b38 <HAL_I2C_Init+0x1dc>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	1e58      	subs	r0, r3, #1
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6859      	ldr	r1, [r3, #4]
 8002b20:	460b      	mov	r3, r1
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	0099      	lsls	r1, r3, #2
 8002b28:	440b      	add	r3, r1
 8002b2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b2e:	3301      	adds	r3, #1
 8002b30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b34:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b38:	6879      	ldr	r1, [r7, #4]
 8002b3a:	6809      	ldr	r1, [r1, #0]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	69da      	ldr	r2, [r3, #28]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002b66:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6911      	ldr	r1, [r2, #16]
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	68d2      	ldr	r2, [r2, #12]
 8002b72:	4311      	orrs	r1, r2
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	6812      	ldr	r2, [r2, #0]
 8002b78:	430b      	orrs	r3, r1
 8002b7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	695a      	ldr	r2, [r3, #20]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 0201 	orr.w	r2, r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2220      	movs	r2, #32
 8002bb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	000186a0 	.word	0x000186a0
 8002bd4:	001e847f 	.word	0x001e847f
 8002bd8:	003d08ff 	.word	0x003d08ff
 8002bdc:	431bde83 	.word	0x431bde83
 8002be0:	10624dd3 	.word	0x10624dd3

08002be4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b088      	sub	sp, #32
 8002be8:	af02      	add	r7, sp, #8
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	607a      	str	r2, [r7, #4]
 8002bee:	461a      	mov	r2, r3
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	817b      	strh	r3, [r7, #10]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bf8:	f7ff f8be 	bl	8001d78 <HAL_GetTick>
 8002bfc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b20      	cmp	r3, #32
 8002c08:	f040 80e0 	bne.w	8002dcc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	2319      	movs	r3, #25
 8002c12:	2201      	movs	r2, #1
 8002c14:	4970      	ldr	r1, [pc, #448]	@ (8002dd8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 fa92 	bl	8003140 <I2C_WaitOnFlagUntilTimeout>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c22:	2302      	movs	r3, #2
 8002c24:	e0d3      	b.n	8002dce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d101      	bne.n	8002c34 <HAL_I2C_Master_Transmit+0x50>
 8002c30:	2302      	movs	r3, #2
 8002c32:	e0cc      	b.n	8002dce <HAL_I2C_Master_Transmit+0x1ea>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d007      	beq.n	8002c5a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f042 0201 	orr.w	r2, r2, #1
 8002c58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c68:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2221      	movs	r2, #33	@ 0x21
 8002c6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2210      	movs	r2, #16
 8002c76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	893a      	ldrh	r2, [r7, #8]
 8002c8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	4a50      	ldr	r2, [pc, #320]	@ (8002ddc <HAL_I2C_Master_Transmit+0x1f8>)
 8002c9a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c9c:	8979      	ldrh	r1, [r7, #10]
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	6a3a      	ldr	r2, [r7, #32]
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f000 f9ca 	bl	800303c <I2C_MasterRequestWrite>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e08d      	b.n	8002dce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	613b      	str	r3, [r7, #16]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	613b      	str	r3, [r7, #16]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	613b      	str	r3, [r7, #16]
 8002cc6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002cc8:	e066      	b.n	8002d98 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	6a39      	ldr	r1, [r7, #32]
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f000 fb50 	bl	8003374 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00d      	beq.n	8002cf6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cde:	2b04      	cmp	r3, #4
 8002ce0:	d107      	bne.n	8002cf2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cf0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e06b      	b.n	8002dce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfa:	781a      	ldrb	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d06:	1c5a      	adds	r2, r3, #1
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	3b01      	subs	r3, #1
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	f003 0304 	and.w	r3, r3, #4
 8002d30:	2b04      	cmp	r3, #4
 8002d32:	d11b      	bne.n	8002d6c <HAL_I2C_Master_Transmit+0x188>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d017      	beq.n	8002d6c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d40:	781a      	ldrb	r2, [r3, #0]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4c:	1c5a      	adds	r2, r3, #1
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d64:	3b01      	subs	r3, #1
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	6a39      	ldr	r1, [r7, #32]
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f000 fb47 	bl	8003404 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00d      	beq.n	8002d98 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d80:	2b04      	cmp	r3, #4
 8002d82:	d107      	bne.n	8002d94 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d92:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e01a      	b.n	8002dce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d194      	bne.n	8002cca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2220      	movs	r2, #32
 8002db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	e000      	b.n	8002dce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002dcc:	2302      	movs	r3, #2
  }
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3718      	adds	r7, #24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	00100002 	.word	0x00100002
 8002ddc:	ffff0000 	.word	0xffff0000

08002de0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b08a      	sub	sp, #40	@ 0x28
 8002de4:	af02      	add	r7, sp, #8
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	607a      	str	r2, [r7, #4]
 8002dea:	603b      	str	r3, [r7, #0]
 8002dec:	460b      	mov	r3, r1
 8002dee:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002df0:	f7fe ffc2 	bl	8001d78 <HAL_GetTick>
 8002df4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002df6:	2300      	movs	r3, #0
 8002df8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b20      	cmp	r3, #32
 8002e04:	f040 8111 	bne.w	800302a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	9300      	str	r3, [sp, #0]
 8002e0c:	2319      	movs	r3, #25
 8002e0e:	2201      	movs	r2, #1
 8002e10:	4988      	ldr	r1, [pc, #544]	@ (8003034 <HAL_I2C_IsDeviceReady+0x254>)
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 f994 	bl	8003140 <I2C_WaitOnFlagUntilTimeout>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002e1e:	2302      	movs	r3, #2
 8002e20:	e104      	b.n	800302c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d101      	bne.n	8002e30 <HAL_I2C_IsDeviceReady+0x50>
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	e0fd      	b.n	800302c <HAL_I2C_IsDeviceReady+0x24c>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d007      	beq.n	8002e56 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f042 0201 	orr.w	r2, r2, #1
 8002e54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e64:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2224      	movs	r2, #36	@ 0x24
 8002e6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	4a70      	ldr	r2, [pc, #448]	@ (8003038 <HAL_I2C_IsDeviceReady+0x258>)
 8002e78:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e88:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	9300      	str	r3, [sp, #0]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f000 f952 	bl	8003140 <I2C_WaitOnFlagUntilTimeout>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00d      	beq.n	8002ebe <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002eb0:	d103      	bne.n	8002eba <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002eb8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e0b6      	b.n	800302c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ebe:	897b      	ldrh	r3, [r7, #10]
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ecc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002ece:	f7fe ff53 	bl	8001d78 <HAL_GetTick>
 8002ed2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	bf0c      	ite	eq
 8002ee2:	2301      	moveq	r3, #1
 8002ee4:	2300      	movne	r3, #0
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ef4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ef8:	bf0c      	ite	eq
 8002efa:	2301      	moveq	r3, #1
 8002efc:	2300      	movne	r3, #0
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002f02:	e025      	b.n	8002f50 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f04:	f7fe ff38 	bl	8001d78 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	683a      	ldr	r2, [r7, #0]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d302      	bcc.n	8002f1a <HAL_I2C_IsDeviceReady+0x13a>
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d103      	bne.n	8002f22 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	22a0      	movs	r2, #160	@ 0xa0
 8002f1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	bf0c      	ite	eq
 8002f30:	2301      	moveq	r3, #1
 8002f32:	2300      	movne	r3, #0
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f46:	bf0c      	ite	eq
 8002f48:	2301      	moveq	r3, #1
 8002f4a:	2300      	movne	r3, #0
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2ba0      	cmp	r3, #160	@ 0xa0
 8002f5a:	d005      	beq.n	8002f68 <HAL_I2C_IsDeviceReady+0x188>
 8002f5c:	7dfb      	ldrb	r3, [r7, #23]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d102      	bne.n	8002f68 <HAL_I2C_IsDeviceReady+0x188>
 8002f62:	7dbb      	ldrb	r3, [r7, #22]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d0cd      	beq.n	8002f04 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d129      	bne.n	8002fd2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f8c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f8e:	2300      	movs	r3, #0
 8002f90:	613b      	str	r3, [r7, #16]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	695b      	ldr	r3, [r3, #20]
 8002f98:	613b      	str	r3, [r7, #16]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	613b      	str	r3, [r7, #16]
 8002fa2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	2319      	movs	r3, #25
 8002faa:	2201      	movs	r2, #1
 8002fac:	4921      	ldr	r1, [pc, #132]	@ (8003034 <HAL_I2C_IsDeviceReady+0x254>)
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f000 f8c6 	bl	8003140 <I2C_WaitOnFlagUntilTimeout>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e036      	b.n	800302c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2220      	movs	r2, #32
 8002fc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	e02c      	b.n	800302c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fe0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002fea:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	2319      	movs	r3, #25
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	490f      	ldr	r1, [pc, #60]	@ (8003034 <HAL_I2C_IsDeviceReady+0x254>)
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f000 f8a2 	bl	8003140 <I2C_WaitOnFlagUntilTimeout>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e012      	b.n	800302c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	3301      	adds	r3, #1
 800300a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	429a      	cmp	r2, r3
 8003012:	f4ff af32 	bcc.w	8002e7a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2220      	movs	r2, #32
 800301a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e000      	b.n	800302c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800302a:	2302      	movs	r3, #2
  }
}
 800302c:	4618      	mov	r0, r3
 800302e:	3720      	adds	r7, #32
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	00100002 	.word	0x00100002
 8003038:	ffff0000 	.word	0xffff0000

0800303c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b088      	sub	sp, #32
 8003040:	af02      	add	r7, sp, #8
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	607a      	str	r2, [r7, #4]
 8003046:	603b      	str	r3, [r7, #0]
 8003048:	460b      	mov	r3, r1
 800304a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003050:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	2b08      	cmp	r3, #8
 8003056:	d006      	beq.n	8003066 <I2C_MasterRequestWrite+0x2a>
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d003      	beq.n	8003066 <I2C_MasterRequestWrite+0x2a>
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003064:	d108      	bne.n	8003078 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	e00b      	b.n	8003090 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307c:	2b12      	cmp	r3, #18
 800307e:	d107      	bne.n	8003090 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800308e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	9300      	str	r3, [sp, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f000 f84f 	bl	8003140 <I2C_WaitOnFlagUntilTimeout>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00d      	beq.n	80030c4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030b6:	d103      	bne.n	80030c0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030be:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e035      	b.n	8003130 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80030cc:	d108      	bne.n	80030e0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030ce:	897b      	ldrh	r3, [r7, #10]
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	461a      	mov	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80030dc:	611a      	str	r2, [r3, #16]
 80030de:	e01b      	b.n	8003118 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80030e0:	897b      	ldrh	r3, [r7, #10]
 80030e2:	11db      	asrs	r3, r3, #7
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	f003 0306 	and.w	r3, r3, #6
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	f063 030f 	orn	r3, r3, #15
 80030f0:	b2da      	uxtb	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	490e      	ldr	r1, [pc, #56]	@ (8003138 <I2C_MasterRequestWrite+0xfc>)
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f000 f898 	bl	8003234 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e010      	b.n	8003130 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800310e:	897b      	ldrh	r3, [r7, #10]
 8003110:	b2da      	uxtb	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	4907      	ldr	r1, [pc, #28]	@ (800313c <I2C_MasterRequestWrite+0x100>)
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f000 f888 	bl	8003234 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e000      	b.n	8003130 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3718      	adds	r7, #24
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	00010008 	.word	0x00010008
 800313c:	00010002 	.word	0x00010002

08003140 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	603b      	str	r3, [r7, #0]
 800314c:	4613      	mov	r3, r2
 800314e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003150:	e048      	b.n	80031e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003158:	d044      	beq.n	80031e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800315a:	f7fe fe0d 	bl	8001d78 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	429a      	cmp	r2, r3
 8003168:	d302      	bcc.n	8003170 <I2C_WaitOnFlagUntilTimeout+0x30>
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d139      	bne.n	80031e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	0c1b      	lsrs	r3, r3, #16
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b01      	cmp	r3, #1
 8003178:	d10d      	bne.n	8003196 <I2C_WaitOnFlagUntilTimeout+0x56>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	43da      	mvns	r2, r3
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	4013      	ands	r3, r2
 8003186:	b29b      	uxth	r3, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	bf0c      	ite	eq
 800318c:	2301      	moveq	r3, #1
 800318e:	2300      	movne	r3, #0
 8003190:	b2db      	uxtb	r3, r3
 8003192:	461a      	mov	r2, r3
 8003194:	e00c      	b.n	80031b0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	43da      	mvns	r2, r3
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	4013      	ands	r3, r2
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	bf0c      	ite	eq
 80031a8:	2301      	moveq	r3, #1
 80031aa:	2300      	movne	r3, #0
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	461a      	mov	r2, r3
 80031b0:	79fb      	ldrb	r3, [r7, #7]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d116      	bne.n	80031e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2220      	movs	r2, #32
 80031c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d0:	f043 0220 	orr.w	r2, r3, #32
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e023      	b.n	800322c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	0c1b      	lsrs	r3, r3, #16
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d10d      	bne.n	800320a <I2C_WaitOnFlagUntilTimeout+0xca>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	695b      	ldr	r3, [r3, #20]
 80031f4:	43da      	mvns	r2, r3
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	4013      	ands	r3, r2
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	bf0c      	ite	eq
 8003200:	2301      	moveq	r3, #1
 8003202:	2300      	movne	r3, #0
 8003204:	b2db      	uxtb	r3, r3
 8003206:	461a      	mov	r2, r3
 8003208:	e00c      	b.n	8003224 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	43da      	mvns	r2, r3
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	4013      	ands	r3, r2
 8003216:	b29b      	uxth	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	bf0c      	ite	eq
 800321c:	2301      	moveq	r3, #1
 800321e:	2300      	movne	r3, #0
 8003220:	b2db      	uxtb	r3, r3
 8003222:	461a      	mov	r2, r3
 8003224:	79fb      	ldrb	r3, [r7, #7]
 8003226:	429a      	cmp	r2, r3
 8003228:	d093      	beq.n	8003152 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
 8003240:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003242:	e071      	b.n	8003328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800324e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003252:	d123      	bne.n	800329c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003262:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800326c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2220      	movs	r2, #32
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003288:	f043 0204 	orr.w	r2, r3, #4
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e067      	b.n	800336c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a2:	d041      	beq.n	8003328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032a4:	f7fe fd68 	bl	8001d78 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d302      	bcc.n	80032ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d136      	bne.n	8003328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	0c1b      	lsrs	r3, r3, #16
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d10c      	bne.n	80032de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	43da      	mvns	r2, r3
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	4013      	ands	r3, r2
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	bf14      	ite	ne
 80032d6:	2301      	movne	r3, #1
 80032d8:	2300      	moveq	r3, #0
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	e00b      	b.n	80032f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	43da      	mvns	r2, r3
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	4013      	ands	r3, r2
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	bf14      	ite	ne
 80032f0:	2301      	movne	r3, #1
 80032f2:	2300      	moveq	r3, #0
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d016      	beq.n	8003328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2220      	movs	r2, #32
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003314:	f043 0220 	orr.w	r2, r3, #32
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e021      	b.n	800336c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	0c1b      	lsrs	r3, r3, #16
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b01      	cmp	r3, #1
 8003330:	d10c      	bne.n	800334c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	43da      	mvns	r2, r3
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	4013      	ands	r3, r2
 800333e:	b29b      	uxth	r3, r3
 8003340:	2b00      	cmp	r3, #0
 8003342:	bf14      	ite	ne
 8003344:	2301      	movne	r3, #1
 8003346:	2300      	moveq	r3, #0
 8003348:	b2db      	uxtb	r3, r3
 800334a:	e00b      	b.n	8003364 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	43da      	mvns	r2, r3
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	4013      	ands	r3, r2
 8003358:	b29b      	uxth	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	bf14      	ite	ne
 800335e:	2301      	movne	r3, #1
 8003360:	2300      	moveq	r3, #0
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2b00      	cmp	r3, #0
 8003366:	f47f af6d 	bne.w	8003244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003380:	e034      	b.n	80033ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f000 f886 	bl	8003494 <I2C_IsAcknowledgeFailed>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e034      	b.n	80033fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003398:	d028      	beq.n	80033ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800339a:	f7fe fced 	bl	8001d78 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	68ba      	ldr	r2, [r7, #8]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d302      	bcc.n	80033b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d11d      	bne.n	80033ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033ba:	2b80      	cmp	r3, #128	@ 0x80
 80033bc:	d016      	beq.n	80033ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2220      	movs	r2, #32
 80033c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d8:	f043 0220 	orr.w	r2, r3, #32
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e007      	b.n	80033fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033f6:	2b80      	cmp	r3, #128	@ 0x80
 80033f8:	d1c3      	bne.n	8003382 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003410:	e034      	b.n	800347c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 f83e 	bl	8003494 <I2C_IsAcknowledgeFailed>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e034      	b.n	800348c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003428:	d028      	beq.n	800347c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800342a:	f7fe fca5 	bl	8001d78 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	68ba      	ldr	r2, [r7, #8]
 8003436:	429a      	cmp	r2, r3
 8003438:	d302      	bcc.n	8003440 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d11d      	bne.n	800347c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	f003 0304 	and.w	r3, r3, #4
 800344a:	2b04      	cmp	r3, #4
 800344c:	d016      	beq.n	800347c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2220      	movs	r2, #32
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003468:	f043 0220 	orr.w	r2, r3, #32
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e007      	b.n	800348c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	f003 0304 	and.w	r3, r3, #4
 8003486:	2b04      	cmp	r3, #4
 8003488:	d1c3      	bne.n	8003412 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034aa:	d11b      	bne.n	80034e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80034b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2220      	movs	r2, #32
 80034c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d0:	f043 0204 	orr.w	r2, r3, #4
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e000      	b.n	80034e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bc80      	pop	{r7}
 80034ee:	4770      	bx	lr

080034f0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80034f4:	4b03      	ldr	r3, [pc, #12]	@ (8003504 <HAL_PWR_EnableBkUpAccess+0x14>)
 80034f6:	2201      	movs	r2, #1
 80034f8:	601a      	str	r2, [r3, #0]
}
 80034fa:	bf00      	nop
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bc80      	pop	{r7}
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	420e0020 	.word	0x420e0020

08003508 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e272      	b.n	8003a00 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b00      	cmp	r3, #0
 8003524:	f000 8087 	beq.w	8003636 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003528:	4b92      	ldr	r3, [pc, #584]	@ (8003774 <HAL_RCC_OscConfig+0x26c>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f003 030c 	and.w	r3, r3, #12
 8003530:	2b04      	cmp	r3, #4
 8003532:	d00c      	beq.n	800354e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003534:	4b8f      	ldr	r3, [pc, #572]	@ (8003774 <HAL_RCC_OscConfig+0x26c>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f003 030c 	and.w	r3, r3, #12
 800353c:	2b08      	cmp	r3, #8
 800353e:	d112      	bne.n	8003566 <HAL_RCC_OscConfig+0x5e>
 8003540:	4b8c      	ldr	r3, [pc, #560]	@ (8003774 <HAL_RCC_OscConfig+0x26c>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003548:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800354c:	d10b      	bne.n	8003566 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800354e:	4b89      	ldr	r3, [pc, #548]	@ (8003774 <HAL_RCC_OscConfig+0x26c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d06c      	beq.n	8003634 <HAL_RCC_OscConfig+0x12c>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d168      	bne.n	8003634 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e24c      	b.n	8003a00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800356e:	d106      	bne.n	800357e <HAL_RCC_OscConfig+0x76>
 8003570:	4b80      	ldr	r3, [pc, #512]	@ (8003774 <HAL_RCC_OscConfig+0x26c>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a7f      	ldr	r2, [pc, #508]	@ (8003774 <HAL_RCC_OscConfig+0x26c>)
 8003576:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800357a:	6013      	str	r3, [r2, #0]
 800357c:	e02e      	b.n	80035dc <HAL_RCC_OscConfig+0xd4>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10c      	bne.n	80035a0 <HAL_RCC_OscConfig+0x98>
 8003586:	4b7b      	ldr	r3, [pc, #492]	@ (8003774 <HAL_RCC_OscConfig+0x26c>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a7a      	ldr	r2, [pc, #488]	@ (8003774 <HAL_RCC_OscConfig+0x26c>)
 800358c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003590:	6013      	str	r3, [r2, #0]
 8003592:	4b78      	ldr	r3, [pc, #480]	@ (8003774 <HAL_RCC_OscConfig+0x26c>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a77      	ldr	r2, [pc, #476]	@ (8003774 <HAL_RCC_OscConfig+0x26c>)
 8003598:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800359c:	6013      	str	r3, [r2, #0]
 800359e:	e01d      	b.n	80035dc <HAL_RCC_OscConfig+0xd4>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035a8:	d10c      	bne.n	80035c4 <HAL_RCC_OscConfig+0xbc>
 80035aa:	4b72      	ldr	r3, [pc, #456]	@ (8003774 <HAL_RCC_OscConfig+0x26c>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a71      	ldr	r2, [pc, #452]	@ (8003774 <HAL_RCC_OscConfig+0x26c>)
 80035b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035b4:	6013      	str	r3, [r2, #0]
 80035b6:	4b6f      	ldr	r3, [pc, #444]	@ (8003774 <HAL_RCC_OscConfig+0x26c>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a6e      	ldr	r2, [pc, #440]	@ (8003774 <HAL_RCC_OscConfig+0x26c>)
 80035bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035c0:	6013      	str	r3, [r2, #0]
 80035c2:	e00b      	b.n	80035dc <HAL_RCC_OscConfig+0xd4>
 80035c4:	4b6b      	ldr	r3, [pc, #428]	@ (8003774 <HAL_RCC_OscConfig+0x26c>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a6a      	ldr	r2, [pc, #424]	@ (8003774 <HAL_RCC_OscConfig+0x26c>)
 80035ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035ce:	6013      	str	r3, [r2, #0]
 80035d0:	4b68      	ldr	r3, [pc, #416]	@ (8003774 <HAL_RCC_OscConfig+0x26c>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a67      	ldr	r2, [pc, #412]	@ (8003774 <HAL_RCC_OscConfig+0x26c>)
 80035d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d013      	beq.n	800360c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e4:	f7fe fbc8 	bl	8001d78 <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035ec:	f7fe fbc4 	bl	8001d78 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b64      	cmp	r3, #100	@ 0x64
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e200      	b.n	8003a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035fe:	4b5d      	ldr	r3, [pc, #372]	@ (8003774 <HAL_RCC_OscConfig+0x26c>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d0f0      	beq.n	80035ec <HAL_RCC_OscConfig+0xe4>
 800360a:	e014      	b.n	8003636 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360c:	f7fe fbb4 	bl	8001d78 <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003614:	f7fe fbb0 	bl	8001d78 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b64      	cmp	r3, #100	@ 0x64
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e1ec      	b.n	8003a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003626:	4b53      	ldr	r3, [pc, #332]	@ (8003774 <HAL_RCC_OscConfig+0x26c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1f0      	bne.n	8003614 <HAL_RCC_OscConfig+0x10c>
 8003632:	e000      	b.n	8003636 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003634:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d063      	beq.n	800370a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003642:	4b4c      	ldr	r3, [pc, #304]	@ (8003774 <HAL_RCC_OscConfig+0x26c>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f003 030c 	and.w	r3, r3, #12
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00b      	beq.n	8003666 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800364e:	4b49      	ldr	r3, [pc, #292]	@ (8003774 <HAL_RCC_OscConfig+0x26c>)
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f003 030c 	and.w	r3, r3, #12
 8003656:	2b08      	cmp	r3, #8
 8003658:	d11c      	bne.n	8003694 <HAL_RCC_OscConfig+0x18c>
 800365a:	4b46      	ldr	r3, [pc, #280]	@ (8003774 <HAL_RCC_OscConfig+0x26c>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d116      	bne.n	8003694 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003666:	4b43      	ldr	r3, [pc, #268]	@ (8003774 <HAL_RCC_OscConfig+0x26c>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d005      	beq.n	800367e <HAL_RCC_OscConfig+0x176>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d001      	beq.n	800367e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e1c0      	b.n	8003a00 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800367e:	4b3d      	ldr	r3, [pc, #244]	@ (8003774 <HAL_RCC_OscConfig+0x26c>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	4939      	ldr	r1, [pc, #228]	@ (8003774 <HAL_RCC_OscConfig+0x26c>)
 800368e:	4313      	orrs	r3, r2
 8003690:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003692:	e03a      	b.n	800370a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d020      	beq.n	80036de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800369c:	4b36      	ldr	r3, [pc, #216]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 800369e:	2201      	movs	r2, #1
 80036a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a2:	f7fe fb69 	bl	8001d78 <HAL_GetTick>
 80036a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036aa:	f7fe fb65 	bl	8001d78 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e1a1      	b.n	8003a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036bc:	4b2d      	ldr	r3, [pc, #180]	@ (8003774 <HAL_RCC_OscConfig+0x26c>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0f0      	beq.n	80036aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c8:	4b2a      	ldr	r3, [pc, #168]	@ (8003774 <HAL_RCC_OscConfig+0x26c>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	00db      	lsls	r3, r3, #3
 80036d6:	4927      	ldr	r1, [pc, #156]	@ (8003774 <HAL_RCC_OscConfig+0x26c>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	600b      	str	r3, [r1, #0]
 80036dc:	e015      	b.n	800370a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036de:	4b26      	ldr	r3, [pc, #152]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e4:	f7fe fb48 	bl	8001d78 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ec:	f7fe fb44 	bl	8001d78 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e180      	b.n	8003a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036fe:	4b1d      	ldr	r3, [pc, #116]	@ (8003774 <HAL_RCC_OscConfig+0x26c>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1f0      	bne.n	80036ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0308 	and.w	r3, r3, #8
 8003712:	2b00      	cmp	r3, #0
 8003714:	d03a      	beq.n	800378c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d019      	beq.n	8003752 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800371e:	4b17      	ldr	r3, [pc, #92]	@ (800377c <HAL_RCC_OscConfig+0x274>)
 8003720:	2201      	movs	r2, #1
 8003722:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003724:	f7fe fb28 	bl	8001d78 <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800372c:	f7fe fb24 	bl	8001d78 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e160      	b.n	8003a00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800373e:	4b0d      	ldr	r3, [pc, #52]	@ (8003774 <HAL_RCC_OscConfig+0x26c>)
 8003740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d0f0      	beq.n	800372c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800374a:	2001      	movs	r0, #1
 800374c:	f000 face 	bl	8003cec <RCC_Delay>
 8003750:	e01c      	b.n	800378c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003752:	4b0a      	ldr	r3, [pc, #40]	@ (800377c <HAL_RCC_OscConfig+0x274>)
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003758:	f7fe fb0e 	bl	8001d78 <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800375e:	e00f      	b.n	8003780 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003760:	f7fe fb0a 	bl	8001d78 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d908      	bls.n	8003780 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e146      	b.n	8003a00 <HAL_RCC_OscConfig+0x4f8>
 8003772:	bf00      	nop
 8003774:	40021000 	.word	0x40021000
 8003778:	42420000 	.word	0x42420000
 800377c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003780:	4b92      	ldr	r3, [pc, #584]	@ (80039cc <HAL_RCC_OscConfig+0x4c4>)
 8003782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1e9      	bne.n	8003760 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0304 	and.w	r3, r3, #4
 8003794:	2b00      	cmp	r3, #0
 8003796:	f000 80a6 	beq.w	80038e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800379a:	2300      	movs	r3, #0
 800379c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800379e:	4b8b      	ldr	r3, [pc, #556]	@ (80039cc <HAL_RCC_OscConfig+0x4c4>)
 80037a0:	69db      	ldr	r3, [r3, #28]
 80037a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10d      	bne.n	80037c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037aa:	4b88      	ldr	r3, [pc, #544]	@ (80039cc <HAL_RCC_OscConfig+0x4c4>)
 80037ac:	69db      	ldr	r3, [r3, #28]
 80037ae:	4a87      	ldr	r2, [pc, #540]	@ (80039cc <HAL_RCC_OscConfig+0x4c4>)
 80037b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037b4:	61d3      	str	r3, [r2, #28]
 80037b6:	4b85      	ldr	r3, [pc, #532]	@ (80039cc <HAL_RCC_OscConfig+0x4c4>)
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037be:	60bb      	str	r3, [r7, #8]
 80037c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037c2:	2301      	movs	r3, #1
 80037c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c6:	4b82      	ldr	r3, [pc, #520]	@ (80039d0 <HAL_RCC_OscConfig+0x4c8>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d118      	bne.n	8003804 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037d2:	4b7f      	ldr	r3, [pc, #508]	@ (80039d0 <HAL_RCC_OscConfig+0x4c8>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a7e      	ldr	r2, [pc, #504]	@ (80039d0 <HAL_RCC_OscConfig+0x4c8>)
 80037d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037de:	f7fe facb 	bl	8001d78 <HAL_GetTick>
 80037e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e4:	e008      	b.n	80037f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037e6:	f7fe fac7 	bl	8001d78 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b64      	cmp	r3, #100	@ 0x64
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e103      	b.n	8003a00 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f8:	4b75      	ldr	r3, [pc, #468]	@ (80039d0 <HAL_RCC_OscConfig+0x4c8>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003800:	2b00      	cmp	r3, #0
 8003802:	d0f0      	beq.n	80037e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d106      	bne.n	800381a <HAL_RCC_OscConfig+0x312>
 800380c:	4b6f      	ldr	r3, [pc, #444]	@ (80039cc <HAL_RCC_OscConfig+0x4c4>)
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	4a6e      	ldr	r2, [pc, #440]	@ (80039cc <HAL_RCC_OscConfig+0x4c4>)
 8003812:	f043 0301 	orr.w	r3, r3, #1
 8003816:	6213      	str	r3, [r2, #32]
 8003818:	e02d      	b.n	8003876 <HAL_RCC_OscConfig+0x36e>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10c      	bne.n	800383c <HAL_RCC_OscConfig+0x334>
 8003822:	4b6a      	ldr	r3, [pc, #424]	@ (80039cc <HAL_RCC_OscConfig+0x4c4>)
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	4a69      	ldr	r2, [pc, #420]	@ (80039cc <HAL_RCC_OscConfig+0x4c4>)
 8003828:	f023 0301 	bic.w	r3, r3, #1
 800382c:	6213      	str	r3, [r2, #32]
 800382e:	4b67      	ldr	r3, [pc, #412]	@ (80039cc <HAL_RCC_OscConfig+0x4c4>)
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	4a66      	ldr	r2, [pc, #408]	@ (80039cc <HAL_RCC_OscConfig+0x4c4>)
 8003834:	f023 0304 	bic.w	r3, r3, #4
 8003838:	6213      	str	r3, [r2, #32]
 800383a:	e01c      	b.n	8003876 <HAL_RCC_OscConfig+0x36e>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	2b05      	cmp	r3, #5
 8003842:	d10c      	bne.n	800385e <HAL_RCC_OscConfig+0x356>
 8003844:	4b61      	ldr	r3, [pc, #388]	@ (80039cc <HAL_RCC_OscConfig+0x4c4>)
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	4a60      	ldr	r2, [pc, #384]	@ (80039cc <HAL_RCC_OscConfig+0x4c4>)
 800384a:	f043 0304 	orr.w	r3, r3, #4
 800384e:	6213      	str	r3, [r2, #32]
 8003850:	4b5e      	ldr	r3, [pc, #376]	@ (80039cc <HAL_RCC_OscConfig+0x4c4>)
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	4a5d      	ldr	r2, [pc, #372]	@ (80039cc <HAL_RCC_OscConfig+0x4c4>)
 8003856:	f043 0301 	orr.w	r3, r3, #1
 800385a:	6213      	str	r3, [r2, #32]
 800385c:	e00b      	b.n	8003876 <HAL_RCC_OscConfig+0x36e>
 800385e:	4b5b      	ldr	r3, [pc, #364]	@ (80039cc <HAL_RCC_OscConfig+0x4c4>)
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	4a5a      	ldr	r2, [pc, #360]	@ (80039cc <HAL_RCC_OscConfig+0x4c4>)
 8003864:	f023 0301 	bic.w	r3, r3, #1
 8003868:	6213      	str	r3, [r2, #32]
 800386a:	4b58      	ldr	r3, [pc, #352]	@ (80039cc <HAL_RCC_OscConfig+0x4c4>)
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	4a57      	ldr	r2, [pc, #348]	@ (80039cc <HAL_RCC_OscConfig+0x4c4>)
 8003870:	f023 0304 	bic.w	r3, r3, #4
 8003874:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d015      	beq.n	80038aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800387e:	f7fe fa7b 	bl	8001d78 <HAL_GetTick>
 8003882:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003884:	e00a      	b.n	800389c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003886:	f7fe fa77 	bl	8001d78 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003894:	4293      	cmp	r3, r2
 8003896:	d901      	bls.n	800389c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e0b1      	b.n	8003a00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800389c:	4b4b      	ldr	r3, [pc, #300]	@ (80039cc <HAL_RCC_OscConfig+0x4c4>)
 800389e:	6a1b      	ldr	r3, [r3, #32]
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d0ee      	beq.n	8003886 <HAL_RCC_OscConfig+0x37e>
 80038a8:	e014      	b.n	80038d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038aa:	f7fe fa65 	bl	8001d78 <HAL_GetTick>
 80038ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038b0:	e00a      	b.n	80038c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038b2:	f7fe fa61 	bl	8001d78 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e09b      	b.n	8003a00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038c8:	4b40      	ldr	r3, [pc, #256]	@ (80039cc <HAL_RCC_OscConfig+0x4c4>)
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1ee      	bne.n	80038b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038d4:	7dfb      	ldrb	r3, [r7, #23]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d105      	bne.n	80038e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038da:	4b3c      	ldr	r3, [pc, #240]	@ (80039cc <HAL_RCC_OscConfig+0x4c4>)
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	4a3b      	ldr	r2, [pc, #236]	@ (80039cc <HAL_RCC_OscConfig+0x4c4>)
 80038e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f000 8087 	beq.w	80039fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038f0:	4b36      	ldr	r3, [pc, #216]	@ (80039cc <HAL_RCC_OscConfig+0x4c4>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f003 030c 	and.w	r3, r3, #12
 80038f8:	2b08      	cmp	r3, #8
 80038fa:	d061      	beq.n	80039c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	69db      	ldr	r3, [r3, #28]
 8003900:	2b02      	cmp	r3, #2
 8003902:	d146      	bne.n	8003992 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003904:	4b33      	ldr	r3, [pc, #204]	@ (80039d4 <HAL_RCC_OscConfig+0x4cc>)
 8003906:	2200      	movs	r2, #0
 8003908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800390a:	f7fe fa35 	bl	8001d78 <HAL_GetTick>
 800390e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003910:	e008      	b.n	8003924 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003912:	f7fe fa31 	bl	8001d78 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	2b02      	cmp	r3, #2
 800391e:	d901      	bls.n	8003924 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e06d      	b.n	8003a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003924:	4b29      	ldr	r3, [pc, #164]	@ (80039cc <HAL_RCC_OscConfig+0x4c4>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1f0      	bne.n	8003912 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003938:	d108      	bne.n	800394c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800393a:	4b24      	ldr	r3, [pc, #144]	@ (80039cc <HAL_RCC_OscConfig+0x4c4>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	4921      	ldr	r1, [pc, #132]	@ (80039cc <HAL_RCC_OscConfig+0x4c4>)
 8003948:	4313      	orrs	r3, r2
 800394a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800394c:	4b1f      	ldr	r3, [pc, #124]	@ (80039cc <HAL_RCC_OscConfig+0x4c4>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a19      	ldr	r1, [r3, #32]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395c:	430b      	orrs	r3, r1
 800395e:	491b      	ldr	r1, [pc, #108]	@ (80039cc <HAL_RCC_OscConfig+0x4c4>)
 8003960:	4313      	orrs	r3, r2
 8003962:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003964:	4b1b      	ldr	r3, [pc, #108]	@ (80039d4 <HAL_RCC_OscConfig+0x4cc>)
 8003966:	2201      	movs	r2, #1
 8003968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800396a:	f7fe fa05 	bl	8001d78 <HAL_GetTick>
 800396e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003970:	e008      	b.n	8003984 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003972:	f7fe fa01 	bl	8001d78 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d901      	bls.n	8003984 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e03d      	b.n	8003a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003984:	4b11      	ldr	r3, [pc, #68]	@ (80039cc <HAL_RCC_OscConfig+0x4c4>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d0f0      	beq.n	8003972 <HAL_RCC_OscConfig+0x46a>
 8003990:	e035      	b.n	80039fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003992:	4b10      	ldr	r3, [pc, #64]	@ (80039d4 <HAL_RCC_OscConfig+0x4cc>)
 8003994:	2200      	movs	r2, #0
 8003996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003998:	f7fe f9ee 	bl	8001d78 <HAL_GetTick>
 800399c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800399e:	e008      	b.n	80039b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039a0:	f7fe f9ea 	bl	8001d78 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e026      	b.n	8003a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039b2:	4b06      	ldr	r3, [pc, #24]	@ (80039cc <HAL_RCC_OscConfig+0x4c4>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1f0      	bne.n	80039a0 <HAL_RCC_OscConfig+0x498>
 80039be:	e01e      	b.n	80039fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	69db      	ldr	r3, [r3, #28]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d107      	bne.n	80039d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e019      	b.n	8003a00 <HAL_RCC_OscConfig+0x4f8>
 80039cc:	40021000 	.word	0x40021000
 80039d0:	40007000 	.word	0x40007000
 80039d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003a08 <HAL_RCC_OscConfig+0x500>)
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d106      	bne.n	80039fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d001      	beq.n	80039fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e000      	b.n	8003a00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3718      	adds	r7, #24
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	40021000 	.word	0x40021000

08003a0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d101      	bne.n	8003a20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e0d0      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a20:	4b6a      	ldr	r3, [pc, #424]	@ (8003bcc <HAL_RCC_ClockConfig+0x1c0>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0307 	and.w	r3, r3, #7
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d910      	bls.n	8003a50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a2e:	4b67      	ldr	r3, [pc, #412]	@ (8003bcc <HAL_RCC_ClockConfig+0x1c0>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f023 0207 	bic.w	r2, r3, #7
 8003a36:	4965      	ldr	r1, [pc, #404]	@ (8003bcc <HAL_RCC_ClockConfig+0x1c0>)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a3e:	4b63      	ldr	r3, [pc, #396]	@ (8003bcc <HAL_RCC_ClockConfig+0x1c0>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0307 	and.w	r3, r3, #7
 8003a46:	683a      	ldr	r2, [r7, #0]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d001      	beq.n	8003a50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e0b8      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d020      	beq.n	8003a9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0304 	and.w	r3, r3, #4
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d005      	beq.n	8003a74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a68:	4b59      	ldr	r3, [pc, #356]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	4a58      	ldr	r2, [pc, #352]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a6e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003a72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0308 	and.w	r3, r3, #8
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d005      	beq.n	8003a8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a80:	4b53      	ldr	r3, [pc, #332]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	4a52      	ldr	r2, [pc, #328]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a86:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003a8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a8c:	4b50      	ldr	r3, [pc, #320]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	494d      	ldr	r1, [pc, #308]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d040      	beq.n	8003b2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d107      	bne.n	8003ac2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ab2:	4b47      	ldr	r3, [pc, #284]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d115      	bne.n	8003aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e07f      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d107      	bne.n	8003ada <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aca:	4b41      	ldr	r3, [pc, #260]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d109      	bne.n	8003aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e073      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ada:	4b3d      	ldr	r3, [pc, #244]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e06b      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aea:	4b39      	ldr	r3, [pc, #228]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f023 0203 	bic.w	r2, r3, #3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	4936      	ldr	r1, [pc, #216]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003afc:	f7fe f93c 	bl	8001d78 <HAL_GetTick>
 8003b00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b02:	e00a      	b.n	8003b1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b04:	f7fe f938 	bl	8001d78 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e053      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b1a:	4b2d      	ldr	r3, [pc, #180]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f003 020c 	and.w	r2, r3, #12
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d1eb      	bne.n	8003b04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b2c:	4b27      	ldr	r3, [pc, #156]	@ (8003bcc <HAL_RCC_ClockConfig+0x1c0>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0307 	and.w	r3, r3, #7
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d210      	bcs.n	8003b5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b3a:	4b24      	ldr	r3, [pc, #144]	@ (8003bcc <HAL_RCC_ClockConfig+0x1c0>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f023 0207 	bic.w	r2, r3, #7
 8003b42:	4922      	ldr	r1, [pc, #136]	@ (8003bcc <HAL_RCC_ClockConfig+0x1c0>)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b4a:	4b20      	ldr	r3, [pc, #128]	@ (8003bcc <HAL_RCC_ClockConfig+0x1c0>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0307 	and.w	r3, r3, #7
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d001      	beq.n	8003b5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e032      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0304 	and.w	r3, r3, #4
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d008      	beq.n	8003b7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b68:	4b19      	ldr	r3, [pc, #100]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	4916      	ldr	r1, [pc, #88]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0308 	and.w	r3, r3, #8
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d009      	beq.n	8003b9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b86:	4b12      	ldr	r3, [pc, #72]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	490e      	ldr	r1, [pc, #56]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b9a:	f000 f821 	bl	8003be0 <HAL_RCC_GetSysClockFreq>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	091b      	lsrs	r3, r3, #4
 8003ba6:	f003 030f 	and.w	r3, r3, #15
 8003baa:	490a      	ldr	r1, [pc, #40]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003bac:	5ccb      	ldrb	r3, [r1, r3]
 8003bae:	fa22 f303 	lsr.w	r3, r2, r3
 8003bb2:	4a09      	ldr	r2, [pc, #36]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1cc>)
 8003bb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003bb6:	4b09      	ldr	r3, [pc, #36]	@ (8003bdc <HAL_RCC_ClockConfig+0x1d0>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7fe f89a 	bl	8001cf4 <HAL_InitTick>

  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	40022000 	.word	0x40022000
 8003bd0:	40021000 	.word	0x40021000
 8003bd4:	08007194 	.word	0x08007194
 8003bd8:	2000001c 	.word	0x2000001c
 8003bdc:	20000020 	.word	0x20000020

08003be0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b087      	sub	sp, #28
 8003be4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003be6:	2300      	movs	r3, #0
 8003be8:	60fb      	str	r3, [r7, #12]
 8003bea:	2300      	movs	r3, #0
 8003bec:	60bb      	str	r3, [r7, #8]
 8003bee:	2300      	movs	r3, #0
 8003bf0:	617b      	str	r3, [r7, #20]
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003bfa:	4b1e      	ldr	r3, [pc, #120]	@ (8003c74 <HAL_RCC_GetSysClockFreq+0x94>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f003 030c 	and.w	r3, r3, #12
 8003c06:	2b04      	cmp	r3, #4
 8003c08:	d002      	beq.n	8003c10 <HAL_RCC_GetSysClockFreq+0x30>
 8003c0a:	2b08      	cmp	r3, #8
 8003c0c:	d003      	beq.n	8003c16 <HAL_RCC_GetSysClockFreq+0x36>
 8003c0e:	e027      	b.n	8003c60 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c10:	4b19      	ldr	r3, [pc, #100]	@ (8003c78 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c12:	613b      	str	r3, [r7, #16]
      break;
 8003c14:	e027      	b.n	8003c66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	0c9b      	lsrs	r3, r3, #18
 8003c1a:	f003 030f 	and.w	r3, r3, #15
 8003c1e:	4a17      	ldr	r2, [pc, #92]	@ (8003c7c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003c20:	5cd3      	ldrb	r3, [r2, r3]
 8003c22:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d010      	beq.n	8003c50 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c2e:	4b11      	ldr	r3, [pc, #68]	@ (8003c74 <HAL_RCC_GetSysClockFreq+0x94>)
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	0c5b      	lsrs	r3, r3, #17
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	4a11      	ldr	r2, [pc, #68]	@ (8003c80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003c3a:	5cd3      	ldrb	r3, [r2, r3]
 8003c3c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a0d      	ldr	r2, [pc, #52]	@ (8003c78 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c42:	fb03 f202 	mul.w	r2, r3, r2
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c4c:	617b      	str	r3, [r7, #20]
 8003c4e:	e004      	b.n	8003c5a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a0c      	ldr	r2, [pc, #48]	@ (8003c84 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003c54:	fb02 f303 	mul.w	r3, r2, r3
 8003c58:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	613b      	str	r3, [r7, #16]
      break;
 8003c5e:	e002      	b.n	8003c66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c60:	4b05      	ldr	r3, [pc, #20]	@ (8003c78 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c62:	613b      	str	r3, [r7, #16]
      break;
 8003c64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c66:	693b      	ldr	r3, [r7, #16]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	371c      	adds	r7, #28
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bc80      	pop	{r7}
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	40021000 	.word	0x40021000
 8003c78:	007a1200 	.word	0x007a1200
 8003c7c:	080071ac 	.word	0x080071ac
 8003c80:	080071bc 	.word	0x080071bc
 8003c84:	003d0900 	.word	0x003d0900

08003c88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c8c:	4b02      	ldr	r3, [pc, #8]	@ (8003c98 <HAL_RCC_GetHCLKFreq+0x10>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bc80      	pop	{r7}
 8003c96:	4770      	bx	lr
 8003c98:	2000001c 	.word	0x2000001c

08003c9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ca0:	f7ff fff2 	bl	8003c88 <HAL_RCC_GetHCLKFreq>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	4b05      	ldr	r3, [pc, #20]	@ (8003cbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	0a1b      	lsrs	r3, r3, #8
 8003cac:	f003 0307 	and.w	r3, r3, #7
 8003cb0:	4903      	ldr	r1, [pc, #12]	@ (8003cc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cb2:	5ccb      	ldrb	r3, [r1, r3]
 8003cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	40021000 	.word	0x40021000
 8003cc0:	080071a4 	.word	0x080071a4

08003cc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003cc8:	f7ff ffde 	bl	8003c88 <HAL_RCC_GetHCLKFreq>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	4b05      	ldr	r3, [pc, #20]	@ (8003ce4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	0adb      	lsrs	r3, r3, #11
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	4903      	ldr	r1, [pc, #12]	@ (8003ce8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cda:	5ccb      	ldrb	r3, [r1, r3]
 8003cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	080071a4 	.word	0x080071a4

08003cec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8003d20 <RCC_Delay+0x34>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a0a      	ldr	r2, [pc, #40]	@ (8003d24 <RCC_Delay+0x38>)
 8003cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfe:	0a5b      	lsrs	r3, r3, #9
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	fb02 f303 	mul.w	r3, r2, r3
 8003d06:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d08:	bf00      	nop
  }
  while (Delay --);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	1e5a      	subs	r2, r3, #1
 8003d0e:	60fa      	str	r2, [r7, #12]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1f9      	bne.n	8003d08 <RCC_Delay+0x1c>
}
 8003d14:	bf00      	nop
 8003d16:	bf00      	nop
 8003d18:	3714      	adds	r7, #20
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bc80      	pop	{r7}
 8003d1e:	4770      	bx	lr
 8003d20:	2000001c 	.word	0x2000001c
 8003d24:	10624dd3 	.word	0x10624dd3

08003d28 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003d30:	2300      	movs	r3, #0
 8003d32:	613b      	str	r3, [r7, #16]
 8003d34:	2300      	movs	r3, #0
 8003d36:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d07d      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003d44:	2300      	movs	r3, #0
 8003d46:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d48:	4b4f      	ldr	r3, [pc, #316]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d4a:	69db      	ldr	r3, [r3, #28]
 8003d4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10d      	bne.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d54:	4b4c      	ldr	r3, [pc, #304]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d56:	69db      	ldr	r3, [r3, #28]
 8003d58:	4a4b      	ldr	r2, [pc, #300]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d5e:	61d3      	str	r3, [r2, #28]
 8003d60:	4b49      	ldr	r3, [pc, #292]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d62:	69db      	ldr	r3, [r3, #28]
 8003d64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d68:	60bb      	str	r3, [r7, #8]
 8003d6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d70:	4b46      	ldr	r3, [pc, #280]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d118      	bne.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d7c:	4b43      	ldr	r3, [pc, #268]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a42      	ldr	r2, [pc, #264]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d88:	f7fd fff6 	bl	8001d78 <HAL_GetTick>
 8003d8c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d8e:	e008      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d90:	f7fd fff2 	bl	8001d78 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b64      	cmp	r3, #100	@ 0x64
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e06d      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da2:	4b3a      	ldr	r3, [pc, #232]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d0f0      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003dae:	4b36      	ldr	r3, [pc, #216]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003db6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d02e      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d027      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dcc:	4b2e      	ldr	r3, [pc, #184]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dce:	6a1b      	ldr	r3, [r3, #32]
 8003dd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dd4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003dd6:	4b2e      	ldr	r3, [pc, #184]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003dd8:	2201      	movs	r2, #1
 8003dda:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ddc:	4b2c      	ldr	r3, [pc, #176]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003de2:	4a29      	ldr	r2, [pc, #164]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d014      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df2:	f7fd ffc1 	bl	8001d78 <HAL_GetTick>
 8003df6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003df8:	e00a      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dfa:	f7fd ffbd 	bl	8001d78 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d901      	bls.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e036      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e10:	4b1d      	ldr	r3, [pc, #116]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d0ee      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e1c:	4b1a      	ldr	r3, [pc, #104]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
 8003e20:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	4917      	ldr	r1, [pc, #92]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e2e:	7dfb      	ldrb	r3, [r7, #23]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d105      	bne.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e34:	4b14      	ldr	r3, [pc, #80]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	4a13      	ldr	r2, [pc, #76]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e3e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d008      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e4c:	4b0e      	ldr	r3, [pc, #56]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	490b      	ldr	r1, [pc, #44]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0310 	and.w	r3, r3, #16
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d008      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e6a:	4b07      	ldr	r3, [pc, #28]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	4904      	ldr	r1, [pc, #16]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3718      	adds	r7, #24
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	40021000 	.word	0x40021000
 8003e8c:	40007000 	.word	0x40007000
 8003e90:	42420440 	.word	0x42420440

08003e94 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b088      	sub	sp, #32
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	617b      	str	r3, [r7, #20]
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	61fb      	str	r3, [r7, #28]
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	60fb      	str	r3, [r7, #12]
 8003eac:	2300      	movs	r3, #0
 8003eae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b10      	cmp	r3, #16
 8003eb4:	d00a      	beq.n	8003ecc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2b10      	cmp	r3, #16
 8003eba:	f200 808a 	bhi.w	8003fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d045      	beq.n	8003f50 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d075      	beq.n	8003fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003eca:	e082      	b.n	8003fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003ecc:	4b46      	ldr	r3, [pc, #280]	@ (8003fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003ed2:	4b45      	ldr	r3, [pc, #276]	@ (8003fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d07b      	beq.n	8003fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	0c9b      	lsrs	r3, r3, #18
 8003ee2:	f003 030f 	and.w	r3, r3, #15
 8003ee6:	4a41      	ldr	r2, [pc, #260]	@ (8003fec <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003ee8:	5cd3      	ldrb	r3, [r2, r3]
 8003eea:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d015      	beq.n	8003f22 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ef6:	4b3c      	ldr	r3, [pc, #240]	@ (8003fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	0c5b      	lsrs	r3, r3, #17
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	4a3b      	ldr	r2, [pc, #236]	@ (8003ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003f02:	5cd3      	ldrb	r3, [r2, r3]
 8003f04:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00d      	beq.n	8003f2c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003f10:	4a38      	ldr	r2, [pc, #224]	@ (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	fb02 f303 	mul.w	r3, r2, r3
 8003f1e:	61fb      	str	r3, [r7, #28]
 8003f20:	e004      	b.n	8003f2c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	4a34      	ldr	r2, [pc, #208]	@ (8003ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003f26:	fb02 f303 	mul.w	r3, r2, r3
 8003f2a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003f2c:	4b2e      	ldr	r3, [pc, #184]	@ (8003fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f34:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f38:	d102      	bne.n	8003f40 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	61bb      	str	r3, [r7, #24]
      break;
 8003f3e:	e04a      	b.n	8003fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	005b      	lsls	r3, r3, #1
 8003f44:	4a2d      	ldr	r2, [pc, #180]	@ (8003ffc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003f46:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4a:	085b      	lsrs	r3, r3, #1
 8003f4c:	61bb      	str	r3, [r7, #24]
      break;
 8003f4e:	e042      	b.n	8003fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003f50:	4b25      	ldr	r3, [pc, #148]	@ (8003fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003f52:	6a1b      	ldr	r3, [r3, #32]
 8003f54:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f60:	d108      	bne.n	8003f74 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d003      	beq.n	8003f74 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003f6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f70:	61bb      	str	r3, [r7, #24]
 8003f72:	e01f      	b.n	8003fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f7e:	d109      	bne.n	8003f94 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003f80:	4b19      	ldr	r3, [pc, #100]	@ (8003fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f84:	f003 0302 	and.w	r3, r3, #2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d003      	beq.n	8003f94 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003f8c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003f90:	61bb      	str	r3, [r7, #24]
 8003f92:	e00f      	b.n	8003fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f9e:	d11c      	bne.n	8003fda <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003fa0:	4b11      	ldr	r3, [pc, #68]	@ (8003fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d016      	beq.n	8003fda <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003fac:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003fb0:	61bb      	str	r3, [r7, #24]
      break;
 8003fb2:	e012      	b.n	8003fda <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003fb4:	e011      	b.n	8003fda <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003fb6:	f7ff fe85 	bl	8003cc4 <HAL_RCC_GetPCLK2Freq>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8003fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	0b9b      	lsrs	r3, r3, #14
 8003fc2:	f003 0303 	and.w	r3, r3, #3
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	005b      	lsls	r3, r3, #1
 8003fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fce:	61bb      	str	r3, [r7, #24]
      break;
 8003fd0:	e004      	b.n	8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003fd2:	bf00      	nop
 8003fd4:	e002      	b.n	8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003fd6:	bf00      	nop
 8003fd8:	e000      	b.n	8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003fda:	bf00      	nop
    }
  }
  return (frequency);
 8003fdc:	69bb      	ldr	r3, [r7, #24]
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3720      	adds	r7, #32
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	40021000 	.word	0x40021000
 8003fec:	080071c0 	.word	0x080071c0
 8003ff0:	080071d0 	.word	0x080071d0
 8003ff4:	007a1200 	.word	0x007a1200
 8003ff8:	003d0900 	.word	0x003d0900
 8003ffc:	aaaaaaab 	.word	0xaaaaaaab

08004000 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8004008:	2300      	movs	r3, #0
 800400a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e07a      	b.n	800410c <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	7c5b      	ldrb	r3, [r3, #17]
 800401a:	b2db      	uxtb	r3, r3
 800401c:	2b00      	cmp	r3, #0
 800401e:	d105      	bne.n	800402c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7fd fc10 	bl	800184c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2202      	movs	r2, #2
 8004030:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 fb81 	bl	800473a <HAL_RTC_WaitForSynchro>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d004      	beq.n	8004048 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2204      	movs	r2, #4
 8004042:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e061      	b.n	800410c <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 fc3a 	bl	80048c2 <RTC_EnterInitMode>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d004      	beq.n	800405e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2204      	movs	r2, #4
 8004058:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e056      	b.n	800410c <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	685a      	ldr	r2, [r3, #4]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f022 0207 	bic.w	r2, r2, #7
 800406c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d005      	beq.n	8004082 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8004076:	4b27      	ldr	r3, [pc, #156]	@ (8004114 <HAL_RTC_Init+0x114>)
 8004078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800407a:	4a26      	ldr	r2, [pc, #152]	@ (8004114 <HAL_RTC_Init+0x114>)
 800407c:	f023 0301 	bic.w	r3, r3, #1
 8004080:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8004082:	4b24      	ldr	r3, [pc, #144]	@ (8004114 <HAL_RTC_Init+0x114>)
 8004084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004086:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	4921      	ldr	r1, [pc, #132]	@ (8004114 <HAL_RTC_Init+0x114>)
 8004090:	4313      	orrs	r3, r2
 8004092:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409c:	d003      	beq.n	80040a6 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	60fb      	str	r3, [r7, #12]
 80040a4:	e00e      	b.n	80040c4 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80040a6:	2001      	movs	r0, #1
 80040a8:	f7ff fef4 	bl	8003e94 <HAL_RCCEx_GetPeriphCLKFreq>
 80040ac:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d104      	bne.n	80040be <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2204      	movs	r2, #4
 80040b8:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e026      	b.n	800410c <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	3b01      	subs	r3, #1
 80040c2:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	0c1a      	lsrs	r2, r3, #16
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f002 020f 	and.w	r2, r2, #15
 80040d0:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	b292      	uxth	r2, r2
 80040da:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 fc18 	bl	8004912 <RTC_ExitInitMode>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d004      	beq.n	80040f2 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2204      	movs	r2, #4
 80040ec:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e00c      	b.n	800410c <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800410a:	2300      	movs	r3, #0
  }
}
 800410c:	4618      	mov	r0, r3
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	40006c00 	.word	0x40006c00

08004118 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004118:	b590      	push	{r4, r7, lr}
 800411a:	b087      	sub	sp, #28
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8004124:	2300      	movs	r3, #0
 8004126:	617b      	str	r3, [r7, #20]
 8004128:	2300      	movs	r3, #0
 800412a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d002      	beq.n	8004138 <HAL_RTC_SetTime+0x20>
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d101      	bne.n	800413c <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e080      	b.n	800423e <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	7c1b      	ldrb	r3, [r3, #16]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d101      	bne.n	8004148 <HAL_RTC_SetTime+0x30>
 8004144:	2302      	movs	r3, #2
 8004146:	e07a      	b.n	800423e <HAL_RTC_SetTime+0x126>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2201      	movs	r2, #1
 800414c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2202      	movs	r2, #2
 8004152:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d113      	bne.n	8004182 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	461a      	mov	r2, r3
 8004160:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8004164:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	785b      	ldrb	r3, [r3, #1]
 800416c:	4619      	mov	r1, r3
 800416e:	460b      	mov	r3, r1
 8004170:	011b      	lsls	r3, r3, #4
 8004172:	1a5b      	subs	r3, r3, r1
 8004174:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004176:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8004178:	68ba      	ldr	r2, [r7, #8]
 800417a:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800417c:	4413      	add	r3, r2
 800417e:	617b      	str	r3, [r7, #20]
 8004180:	e01e      	b.n	80041c0 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	4618      	mov	r0, r3
 8004188:	f000 fc08 	bl	800499c <RTC_Bcd2ToByte>
 800418c:	4603      	mov	r3, r0
 800418e:	461a      	mov	r2, r3
 8004190:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8004194:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	785b      	ldrb	r3, [r3, #1]
 800419c:	4618      	mov	r0, r3
 800419e:	f000 fbfd 	bl	800499c <RTC_Bcd2ToByte>
 80041a2:	4603      	mov	r3, r0
 80041a4:	461a      	mov	r2, r3
 80041a6:	4613      	mov	r3, r2
 80041a8:	011b      	lsls	r3, r3, #4
 80041aa:	1a9b      	subs	r3, r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80041ae:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	789b      	ldrb	r3, [r3, #2]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f000 fbf1 	bl	800499c <RTC_Bcd2ToByte>
 80041ba:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80041bc:	4423      	add	r3, r4
 80041be:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80041c0:	6979      	ldr	r1, [r7, #20]
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f000 fb16 	bl	80047f4 <RTC_WriteTimeCounter>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d007      	beq.n	80041de <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2204      	movs	r2, #4
 80041d2:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e02f      	b.n	800423e <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	685a      	ldr	r2, [r3, #4]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f022 0205 	bic.w	r2, r2, #5
 80041ec:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f000 fb27 	bl	8004842 <RTC_ReadAlarmCounter>
 80041f4:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041fc:	d018      	beq.n	8004230 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	429a      	cmp	r2, r3
 8004204:	d214      	bcs.n	8004230 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 800420c:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8004210:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004212:	6939      	ldr	r1, [r7, #16]
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f000 fb2d 	bl	8004874 <RTC_WriteAlarmCounter>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d007      	beq.n	8004230 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2204      	movs	r2, #4
 8004224:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e006      	b.n	800423e <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2201      	movs	r2, #1
 8004234:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 800423c:	2300      	movs	r3, #0
  }
}
 800423e:	4618      	mov	r0, r3
 8004240:	371c      	adds	r7, #28
 8004242:	46bd      	mov	sp, r7
 8004244:	bd90      	pop	{r4, r7, pc}
	...

08004248 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b088      	sub	sp, #32
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8004254:	2300      	movs	r3, #0
 8004256:	61bb      	str	r3, [r7, #24]
 8004258:	2300      	movs	r3, #0
 800425a:	61fb      	str	r3, [r7, #28]
 800425c:	2300      	movs	r3, #0
 800425e:	617b      	str	r3, [r7, #20]
 8004260:	2300      	movs	r3, #0
 8004262:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d002      	beq.n	8004270 <HAL_RTC_GetTime+0x28>
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d101      	bne.n	8004274 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e0b5      	b.n	80043e0 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f003 0304 	and.w	r3, r3, #4
 800427e:	2b00      	cmp	r3, #0
 8004280:	d001      	beq.n	8004286 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e0ac      	b.n	80043e0 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	f000 fa84 	bl	8004794 <RTC_ReadTimeCounter>
 800428c:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	4a55      	ldr	r2, [pc, #340]	@ (80043e8 <HAL_RTC_GetTime+0x1a0>)
 8004292:	fba2 2303 	umull	r2, r3, r2, r3
 8004296:	0adb      	lsrs	r3, r3, #11
 8004298:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 800429a:	69ba      	ldr	r2, [r7, #24]
 800429c:	4b52      	ldr	r3, [pc, #328]	@ (80043e8 <HAL_RTC_GetTime+0x1a0>)
 800429e:	fba3 1302 	umull	r1, r3, r3, r2
 80042a2:	0adb      	lsrs	r3, r3, #11
 80042a4:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 80042a8:	fb01 f303 	mul.w	r3, r1, r3
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	4a4f      	ldr	r2, [pc, #316]	@ (80043ec <HAL_RTC_GetTime+0x1a4>)
 80042b0:	fba2 2303 	umull	r2, r3, r2, r3
 80042b4:	095b      	lsrs	r3, r3, #5
 80042b6:	b2da      	uxtb	r2, r3
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	4a4a      	ldr	r2, [pc, #296]	@ (80043e8 <HAL_RTC_GetTime+0x1a0>)
 80042c0:	fba2 1203 	umull	r1, r2, r2, r3
 80042c4:	0ad2      	lsrs	r2, r2, #11
 80042c6:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 80042ca:	fb01 f202 	mul.w	r2, r1, r2
 80042ce:	1a9a      	subs	r2, r3, r2
 80042d0:	4b46      	ldr	r3, [pc, #280]	@ (80043ec <HAL_RTC_GetTime+0x1a4>)
 80042d2:	fba3 1302 	umull	r1, r3, r3, r2
 80042d6:	0959      	lsrs	r1, r3, #5
 80042d8:	460b      	mov	r3, r1
 80042da:	011b      	lsls	r3, r3, #4
 80042dc:	1a5b      	subs	r3, r3, r1
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	1ad1      	subs	r1, r2, r3
 80042e2:	b2ca      	uxtb	r2, r1
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	2b17      	cmp	r3, #23
 80042ec:	d955      	bls.n	800439a <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	4a3f      	ldr	r2, [pc, #252]	@ (80043f0 <HAL_RTC_GetTime+0x1a8>)
 80042f2:	fba2 2303 	umull	r2, r3, r2, r3
 80042f6:	091b      	lsrs	r3, r3, #4
 80042f8:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80042fa:	6939      	ldr	r1, [r7, #16]
 80042fc:	4b3c      	ldr	r3, [pc, #240]	@ (80043f0 <HAL_RTC_GetTime+0x1a8>)
 80042fe:	fba3 2301 	umull	r2, r3, r3, r1
 8004302:	091a      	lsrs	r2, r3, #4
 8004304:	4613      	mov	r3, r2
 8004306:	005b      	lsls	r3, r3, #1
 8004308:	4413      	add	r3, r2
 800430a:	00db      	lsls	r3, r3, #3
 800430c:	1aca      	subs	r2, r1, r3
 800430e:	b2d2      	uxtb	r2, r2
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f000 fa94 	bl	8004842 <RTC_ReadAlarmCounter>
 800431a:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004322:	d008      	beq.n	8004336 <HAL_RTC_GetTime+0xee>
 8004324:	69fa      	ldr	r2, [r7, #28]
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	429a      	cmp	r2, r3
 800432a:	d904      	bls.n	8004336 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 800432c:	69fa      	ldr	r2, [r7, #28]
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	61fb      	str	r3, [r7, #28]
 8004334:	e002      	b.n	800433c <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8004336:	f04f 33ff 	mov.w	r3, #4294967295
 800433a:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	4a2d      	ldr	r2, [pc, #180]	@ (80043f4 <HAL_RTC_GetTime+0x1ac>)
 8004340:	fb02 f303 	mul.w	r3, r2, r3
 8004344:	69ba      	ldr	r2, [r7, #24]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800434a:	69b9      	ldr	r1, [r7, #24]
 800434c:	68f8      	ldr	r0, [r7, #12]
 800434e:	f000 fa51 	bl	80047f4 <RTC_WriteTimeCounter>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d001      	beq.n	800435c <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e041      	b.n	80043e0 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004362:	d00c      	beq.n	800437e <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8004364:	69fa      	ldr	r2, [r7, #28]
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	4413      	add	r3, r2
 800436a:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800436c:	69f9      	ldr	r1, [r7, #28]
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f000 fa80 	bl	8004874 <RTC_WriteAlarmCounter>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00a      	beq.n	8004390 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e030      	b.n	80043e0 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800437e:	69f9      	ldr	r1, [r7, #28]
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f000 fa77 	bl	8004874 <RTC_WriteAlarmCounter>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d001      	beq.n	8004390 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e027      	b.n	80043e0 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8004390:	6979      	ldr	r1, [r7, #20]
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f000 fb1f 	bl	80049d6 <RTC_DateUpdate>
 8004398:	e003      	b.n	80043a2 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	b2da      	uxtb	r2, r3
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d01a      	beq.n	80043de <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f000 fad8 	bl	8004962 <RTC_ByteToBcd2>
 80043b2:	4603      	mov	r3, r0
 80043b4:	461a      	mov	r2, r3
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	785b      	ldrb	r3, [r3, #1]
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 facf 	bl	8004962 <RTC_ByteToBcd2>
 80043c4:	4603      	mov	r3, r0
 80043c6:	461a      	mov	r2, r3
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	789b      	ldrb	r3, [r3, #2]
 80043d0:	4618      	mov	r0, r3
 80043d2:	f000 fac6 	bl	8004962 <RTC_ByteToBcd2>
 80043d6:	4603      	mov	r3, r0
 80043d8:	461a      	mov	r2, r3
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3720      	adds	r7, #32
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	91a2b3c5 	.word	0x91a2b3c5
 80043ec:	88888889 	.word	0x88888889
 80043f0:	aaaaaaab 	.word	0xaaaaaaab
 80043f4:	00015180 	.word	0x00015180

080043f8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b088      	sub	sp, #32
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8004404:	2300      	movs	r3, #0
 8004406:	61fb      	str	r3, [r7, #28]
 8004408:	2300      	movs	r3, #0
 800440a:	61bb      	str	r3, [r7, #24]
 800440c:	2300      	movs	r3, #0
 800440e:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d002      	beq.n	800441c <HAL_RTC_SetDate+0x24>
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d101      	bne.n	8004420 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e097      	b.n	8004550 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	7c1b      	ldrb	r3, [r3, #16]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d101      	bne.n	800442c <HAL_RTC_SetDate+0x34>
 8004428:	2302      	movs	r3, #2
 800442a:	e091      	b.n	8004550 <HAL_RTC_SetDate+0x158>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2201      	movs	r2, #1
 8004430:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2202      	movs	r2, #2
 8004436:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10c      	bne.n	8004458 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	78da      	ldrb	r2, [r3, #3]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	785a      	ldrb	r2, [r3, #1]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	789a      	ldrb	r2, [r3, #2]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	739a      	strb	r2, [r3, #14]
 8004456:	e01a      	b.n	800448e <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	78db      	ldrb	r3, [r3, #3]
 800445c:	4618      	mov	r0, r3
 800445e:	f000 fa9d 	bl	800499c <RTC_Bcd2ToByte>
 8004462:	4603      	mov	r3, r0
 8004464:	461a      	mov	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	785b      	ldrb	r3, [r3, #1]
 800446e:	4618      	mov	r0, r3
 8004470:	f000 fa94 	bl	800499c <RTC_Bcd2ToByte>
 8004474:	4603      	mov	r3, r0
 8004476:	461a      	mov	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	789b      	ldrb	r3, [r3, #2]
 8004480:	4618      	mov	r0, r3
 8004482:	f000 fa8b 	bl	800499c <RTC_Bcd2ToByte>
 8004486:	4603      	mov	r3, r0
 8004488:	461a      	mov	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	7bdb      	ldrb	r3, [r3, #15]
 8004492:	4618      	mov	r0, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	7b59      	ldrb	r1, [r3, #13]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	7b9b      	ldrb	r3, [r3, #14]
 800449c:	461a      	mov	r2, r3
 800449e:	f000 fb75 	bl	8004b8c <RTC_WeekDayNum>
 80044a2:	4603      	mov	r3, r0
 80044a4:	461a      	mov	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	7b1a      	ldrb	r2, [r3, #12]
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80044b2:	68f8      	ldr	r0, [r7, #12]
 80044b4:	f000 f96e 	bl	8004794 <RTC_ReadTimeCounter>
 80044b8:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	4a26      	ldr	r2, [pc, #152]	@ (8004558 <HAL_RTC_SetDate+0x160>)
 80044be:	fba2 2303 	umull	r2, r3, r2, r3
 80044c2:	0adb      	lsrs	r3, r3, #11
 80044c4:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	2b18      	cmp	r3, #24
 80044ca:	d93a      	bls.n	8004542 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	4a23      	ldr	r2, [pc, #140]	@ (800455c <HAL_RTC_SetDate+0x164>)
 80044d0:	fba2 2303 	umull	r2, r3, r2, r3
 80044d4:	091b      	lsrs	r3, r3, #4
 80044d6:	4a22      	ldr	r2, [pc, #136]	@ (8004560 <HAL_RTC_SetDate+0x168>)
 80044d8:	fb02 f303 	mul.w	r3, r2, r3
 80044dc:	69fa      	ldr	r2, [r7, #28]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80044e2:	69f9      	ldr	r1, [r7, #28]
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f000 f985 	bl	80047f4 <RTC_WriteTimeCounter>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d007      	beq.n	8004500 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2204      	movs	r2, #4
 80044f4:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e027      	b.n	8004550 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f000 f99e 	bl	8004842 <RTC_ReadAlarmCounter>
 8004506:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800450e:	d018      	beq.n	8004542 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8004510:	69ba      	ldr	r2, [r7, #24]
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	429a      	cmp	r2, r3
 8004516:	d214      	bcs.n	8004542 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 800451e:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8004522:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004524:	69b9      	ldr	r1, [r7, #24]
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f000 f9a4 	bl	8004874 <RTC_WriteAlarmCounter>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d007      	beq.n	8004542 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2204      	movs	r2, #4
 8004536:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e006      	b.n	8004550 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2201      	movs	r2, #1
 8004546:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3720      	adds	r7, #32
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	91a2b3c5 	.word	0x91a2b3c5
 800455c:	aaaaaaab 	.word	0xaaaaaaab
 8004560:	00015180 	.word	0x00015180

08004564 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004564:	b590      	push	{r4, r7, lr}
 8004566:	b089      	sub	sp, #36	@ 0x24
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8004570:	2300      	movs	r3, #0
 8004572:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8004574:	f107 0314 	add.w	r3, r7, #20
 8004578:	2100      	movs	r1, #0
 800457a:	460a      	mov	r2, r1
 800457c:	801a      	strh	r2, [r3, #0]
 800457e:	460a      	mov	r2, r1
 8004580:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d002      	beq.n	800458e <HAL_RTC_SetAlarm_IT+0x2a>
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e099      	b.n	80046c6 <HAL_RTC_SetAlarm_IT+0x162>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	7c1b      	ldrb	r3, [r3, #16]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d101      	bne.n	800459e <HAL_RTC_SetAlarm_IT+0x3a>
 800459a:	2302      	movs	r3, #2
 800459c:	e093      	b.n	80046c6 <HAL_RTC_SetAlarm_IT+0x162>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2201      	movs	r2, #1
 80045a2:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2202      	movs	r2, #2
 80045a8:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80045aa:	f107 0314 	add.w	r3, r7, #20
 80045ae:	2200      	movs	r2, #0
 80045b0:	4619      	mov	r1, r3
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f7ff fe48 	bl	8004248 <HAL_RTC_GetTime>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d001      	beq.n	80045c2 <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e081      	b.n	80046c6 <HAL_RTC_SetAlarm_IT+0x162>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80045c2:	7d3b      	ldrb	r3, [r7, #20]
 80045c4:	461a      	mov	r2, r3
 80045c6:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80045ca:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 80045ce:	7d7b      	ldrb	r3, [r7, #21]
 80045d0:	4619      	mov	r1, r3
 80045d2:	460b      	mov	r3, r1
 80045d4:	011b      	lsls	r3, r3, #4
 80045d6:	1a5b      	subs	r3, r3, r1
 80045d8:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80045da:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 80045dc:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80045de:	4413      	add	r3, r2
 80045e0:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d113      	bne.n	8004610 <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	461a      	mov	r2, r3
 80045ee:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80045f2:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	785b      	ldrb	r3, [r3, #1]
 80045fa:	4619      	mov	r1, r3
 80045fc:	460b      	mov	r3, r1
 80045fe:	011b      	lsls	r3, r3, #4
 8004600:	1a5b      	subs	r3, r3, r1
 8004602:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8004604:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 800460a:	4413      	add	r3, r2
 800460c:	61fb      	str	r3, [r7, #28]
 800460e:	e01e      	b.n	800464e <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	4618      	mov	r0, r3
 8004616:	f000 f9c1 	bl	800499c <RTC_Bcd2ToByte>
 800461a:	4603      	mov	r3, r0
 800461c:	461a      	mov	r2, r3
 800461e:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8004622:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	785b      	ldrb	r3, [r3, #1]
 800462a:	4618      	mov	r0, r3
 800462c:	f000 f9b6 	bl	800499c <RTC_Bcd2ToByte>
 8004630:	4603      	mov	r3, r0
 8004632:	461a      	mov	r2, r3
 8004634:	4613      	mov	r3, r2
 8004636:	011b      	lsls	r3, r3, #4
 8004638:	1a9b      	subs	r3, r3, r2
 800463a:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 800463c:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	789b      	ldrb	r3, [r3, #2]
 8004642:	4618      	mov	r0, r3
 8004644:	f000 f9aa 	bl	800499c <RTC_Bcd2ToByte>
 8004648:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 800464a:	4423      	add	r3, r4
 800464c:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 800464e:	69fa      	ldr	r2, [r7, #28]
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	429a      	cmp	r2, r3
 8004654:	d205      	bcs.n	8004662 <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 800465c:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8004660:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004662:	69f9      	ldr	r1, [r7, #28]
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f000 f905 	bl	8004874 <RTC_WriteAlarmCounter>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d007      	beq.n	8004680 <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2204      	movs	r2, #4
 8004674:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e022      	b.n	80046c6 <HAL_RTC_SetAlarm_IT+0x162>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f022 0202 	bic.w	r2, r2, #2
 800468e:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f042 0202 	orr.w	r2, r2, #2
 800469e:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80046a0:	4b0b      	ldr	r3, [pc, #44]	@ (80046d0 <HAL_RTC_SetAlarm_IT+0x16c>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a0a      	ldr	r2, [pc, #40]	@ (80046d0 <HAL_RTC_SetAlarm_IT+0x16c>)
 80046a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046aa:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80046ac:	4b08      	ldr	r3, [pc, #32]	@ (80046d0 <HAL_RTC_SetAlarm_IT+0x16c>)
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	4a07      	ldr	r2, [pc, #28]	@ (80046d0 <HAL_RTC_SetAlarm_IT+0x16c>)
 80046b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046b6:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2201      	movs	r2, #1
 80046bc:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80046c4:	2300      	movs	r3, #0
  }
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3724      	adds	r7, #36	@ 0x24
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd90      	pop	{r4, r7, pc}
 80046ce:	bf00      	nop
 80046d0:	40010400 	.word	0x40010400

080046d4 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d011      	beq.n	800470e <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00a      	beq.n	800470e <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 f815 	bl	8004728 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f022 0202 	bic.w	r2, r2, #2
 800470c:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800470e:	4b05      	ldr	r3, [pc, #20]	@ (8004724 <HAL_RTC_AlarmIRQHandler+0x50>)
 8004710:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004714:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	745a      	strb	r2, [r3, #17]
}
 800471c:	bf00      	nop
 800471e:	3708      	adds	r7, #8
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	40010400 	.word	0x40010400

08004728 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	bc80      	pop	{r7}
 8004738:	4770      	bx	lr

0800473a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800473a:	b580      	push	{r7, lr}
 800473c:	b084      	sub	sp, #16
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004742:	2300      	movs	r3, #0
 8004744:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d101      	bne.n	8004750 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e01d      	b.n	800478c <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685a      	ldr	r2, [r3, #4]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f022 0208 	bic.w	r2, r2, #8
 800475e:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004760:	f7fd fb0a 	bl	8001d78 <HAL_GetTick>
 8004764:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004766:	e009      	b.n	800477c <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004768:	f7fd fb06 	bl	8001d78 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004776:	d901      	bls.n	800477c <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e007      	b.n	800478c <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f003 0308 	and.w	r3, r3, #8
 8004786:	2b00      	cmp	r3, #0
 8004788:	d0ee      	beq.n	8004768 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8004794:	b480      	push	{r7}
 8004796:	b087      	sub	sp, #28
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800479c:	2300      	movs	r3, #0
 800479e:	827b      	strh	r3, [r7, #18]
 80047a0:	2300      	movs	r3, #0
 80047a2:	823b      	strh	r3, [r7, #16]
 80047a4:	2300      	movs	r3, #0
 80047a6:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80047a8:	2300      	movs	r3, #0
 80047aa:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80047c4:	8a7a      	ldrh	r2, [r7, #18]
 80047c6:	8a3b      	ldrh	r3, [r7, #16]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d008      	beq.n	80047de <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80047cc:	8a3b      	ldrh	r3, [r7, #16]
 80047ce:	041a      	lsls	r2, r3, #16
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	69db      	ldr	r3, [r3, #28]
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	4313      	orrs	r3, r2
 80047da:	617b      	str	r3, [r7, #20]
 80047dc:	e004      	b.n	80047e8 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80047de:	8a7b      	ldrh	r3, [r7, #18]
 80047e0:	041a      	lsls	r2, r3, #16
 80047e2:	89fb      	ldrh	r3, [r7, #14]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80047e8:	697b      	ldr	r3, [r7, #20]
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	371c      	adds	r7, #28
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bc80      	pop	{r7}
 80047f2:	4770      	bx	lr

080047f4 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047fe:	2300      	movs	r3, #0
 8004800:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 f85d 	bl	80048c2 <RTC_EnterInitMode>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d002      	beq.n	8004814 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	73fb      	strb	r3, [r7, #15]
 8004812:	e011      	b.n	8004838 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	683a      	ldr	r2, [r7, #0]
 800481a:	0c12      	lsrs	r2, r2, #16
 800481c:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	b292      	uxth	r2, r2
 8004826:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 f872 	bl	8004912 <RTC_ExitInitMode>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d001      	beq.n	8004838 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004838:	7bfb      	ldrb	r3, [r7, #15]
}
 800483a:	4618      	mov	r0, r3
 800483c:	3710      	adds	r7, #16
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8004842:	b480      	push	{r7}
 8004844:	b085      	sub	sp, #20
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 800484a:	2300      	movs	r3, #0
 800484c:	81fb      	strh	r3, [r7, #14]
 800484e:	2300      	movs	r3, #0
 8004850:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004860:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8004862:	89fb      	ldrh	r3, [r7, #14]
 8004864:	041a      	lsls	r2, r3, #16
 8004866:	89bb      	ldrh	r3, [r7, #12]
 8004868:	4313      	orrs	r3, r2
}
 800486a:	4618      	mov	r0, r3
 800486c:	3714      	adds	r7, #20
 800486e:	46bd      	mov	sp, r7
 8004870:	bc80      	pop	{r7}
 8004872:	4770      	bx	lr

08004874 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800487e:	2300      	movs	r3, #0
 8004880:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f81d 	bl	80048c2 <RTC_EnterInitMode>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d002      	beq.n	8004894 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	73fb      	strb	r3, [r7, #15]
 8004892:	e011      	b.n	80048b8 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	0c12      	lsrs	r2, r2, #16
 800489c:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	b292      	uxth	r2, r2
 80048a6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 f832 	bl	8004912 <RTC_ExitInitMode>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d001      	beq.n	80048b8 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80048b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3710      	adds	r7, #16
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b084      	sub	sp, #16
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048ca:	2300      	movs	r3, #0
 80048cc:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80048ce:	f7fd fa53 	bl	8001d78 <HAL_GetTick>
 80048d2:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80048d4:	e009      	b.n	80048ea <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80048d6:	f7fd fa4f 	bl	8001d78 <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80048e4:	d901      	bls.n	80048ea <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e00f      	b.n	800490a <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f003 0320 	and.w	r3, r3, #32
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d0ee      	beq.n	80048d6 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f042 0210 	orr.w	r2, r2, #16
 8004906:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b084      	sub	sp, #16
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800491a:	2300      	movs	r3, #0
 800491c:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f022 0210 	bic.w	r2, r2, #16
 800492c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800492e:	f7fd fa23 	bl	8001d78 <HAL_GetTick>
 8004932:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004934:	e009      	b.n	800494a <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004936:	f7fd fa1f 	bl	8001d78 <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004944:	d901      	bls.n	800494a <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e007      	b.n	800495a <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f003 0320 	and.w	r3, r3, #32
 8004954:	2b00      	cmp	r3, #0
 8004956:	d0ee      	beq.n	8004936 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004962:	b480      	push	{r7}
 8004964:	b085      	sub	sp, #20
 8004966:	af00      	add	r7, sp, #0
 8004968:	4603      	mov	r3, r0
 800496a:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800496c:	2300      	movs	r3, #0
 800496e:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8004970:	e005      	b.n	800497e <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	3301      	adds	r3, #1
 8004976:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8004978:	79fb      	ldrb	r3, [r7, #7]
 800497a:	3b0a      	subs	r3, #10
 800497c:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 800497e:	79fb      	ldrb	r3, [r7, #7]
 8004980:	2b09      	cmp	r3, #9
 8004982:	d8f6      	bhi.n	8004972 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	b2db      	uxtb	r3, r3
 8004988:	011b      	lsls	r3, r3, #4
 800498a:	b2da      	uxtb	r2, r3
 800498c:	79fb      	ldrb	r3, [r7, #7]
 800498e:	4313      	orrs	r3, r2
 8004990:	b2db      	uxtb	r3, r3
}
 8004992:	4618      	mov	r0, r3
 8004994:	3714      	adds	r7, #20
 8004996:	46bd      	mov	sp, r7
 8004998:	bc80      	pop	{r7}
 800499a:	4770      	bx	lr

0800499c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	4603      	mov	r3, r0
 80049a4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80049a6:	2300      	movs	r3, #0
 80049a8:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80049aa:	79fb      	ldrb	r3, [r7, #7]
 80049ac:	091b      	lsrs	r3, r3, #4
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	461a      	mov	r2, r3
 80049b2:	4613      	mov	r3, r2
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	4413      	add	r3, r2
 80049b8:	005b      	lsls	r3, r3, #1
 80049ba:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80049bc:	79fb      	ldrb	r3, [r7, #7]
 80049be:	f003 030f 	and.w	r3, r3, #15
 80049c2:	b2da      	uxtb	r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	4413      	add	r3, r2
 80049ca:	b2db      	uxtb	r3, r3
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3714      	adds	r7, #20
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bc80      	pop	{r7}
 80049d4:	4770      	bx	lr

080049d6 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b086      	sub	sp, #24
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
 80049de:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 80049e0:	2300      	movs	r3, #0
 80049e2:	617b      	str	r3, [r7, #20]
 80049e4:	2300      	movs	r3, #0
 80049e6:	613b      	str	r3, [r7, #16]
 80049e8:	2300      	movs	r3, #0
 80049ea:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 80049ec:	2300      	movs	r3, #0
 80049ee:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	7bdb      	ldrb	r3, [r3, #15]
 80049f4:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	7b5b      	ldrb	r3, [r3, #13]
 80049fa:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	7b9b      	ldrb	r3, [r3, #14]
 8004a00:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8004a02:	2300      	movs	r3, #0
 8004a04:	60bb      	str	r3, [r7, #8]
 8004a06:	e06f      	b.n	8004ae8 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d011      	beq.n	8004a32 <RTC_DateUpdate+0x5c>
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	2b03      	cmp	r3, #3
 8004a12:	d00e      	beq.n	8004a32 <RTC_DateUpdate+0x5c>
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	2b05      	cmp	r3, #5
 8004a18:	d00b      	beq.n	8004a32 <RTC_DateUpdate+0x5c>
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	2b07      	cmp	r3, #7
 8004a1e:	d008      	beq.n	8004a32 <RTC_DateUpdate+0x5c>
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	2b08      	cmp	r3, #8
 8004a24:	d005      	beq.n	8004a32 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	2b0a      	cmp	r3, #10
 8004a2a:	d002      	beq.n	8004a32 <RTC_DateUpdate+0x5c>
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	2b0c      	cmp	r3, #12
 8004a30:	d117      	bne.n	8004a62 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2b1e      	cmp	r3, #30
 8004a36:	d803      	bhi.n	8004a40 <RTC_DateUpdate+0x6a>
      {
        day++;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004a3e:	e050      	b.n	8004ae2 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	2b0c      	cmp	r3, #12
 8004a44:	d005      	beq.n	8004a52 <RTC_DateUpdate+0x7c>
        {
          month++;
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004a50:	e047      	b.n	8004ae2 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8004a52:	2301      	movs	r3, #1
 8004a54:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004a56:	2301      	movs	r3, #1
 8004a58:	60fb      	str	r3, [r7, #12]
          year++;
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8004a60:	e03f      	b.n	8004ae2 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	2b04      	cmp	r3, #4
 8004a66:	d008      	beq.n	8004a7a <RTC_DateUpdate+0xa4>
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	2b06      	cmp	r3, #6
 8004a6c:	d005      	beq.n	8004a7a <RTC_DateUpdate+0xa4>
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	2b09      	cmp	r3, #9
 8004a72:	d002      	beq.n	8004a7a <RTC_DateUpdate+0xa4>
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	2b0b      	cmp	r3, #11
 8004a78:	d10c      	bne.n	8004a94 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2b1d      	cmp	r3, #29
 8004a7e:	d803      	bhi.n	8004a88 <RTC_DateUpdate+0xb2>
      {
        day++;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	3301      	adds	r3, #1
 8004a84:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8004a86:	e02c      	b.n	8004ae2 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8004a92:	e026      	b.n	8004ae2 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d123      	bne.n	8004ae2 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2b1b      	cmp	r3, #27
 8004a9e:	d803      	bhi.n	8004aa8 <RTC_DateUpdate+0xd2>
      {
        day++;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	60fb      	str	r3, [r7, #12]
 8004aa6:	e01c      	b.n	8004ae2 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2b1c      	cmp	r3, #28
 8004aac:	d111      	bne.n	8004ad2 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f000 f838 	bl	8004b28 <RTC_IsLeapYear>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <RTC_DateUpdate+0xf0>
        {
          day++;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	60fb      	str	r3, [r7, #12]
 8004ac4:	e00d      	b.n	8004ae2 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004acc:	2301      	movs	r3, #1
 8004ace:	60fb      	str	r3, [r7, #12]
 8004ad0:	e007      	b.n	8004ae2 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2b1d      	cmp	r3, #29
 8004ad6:	d104      	bne.n	8004ae2 <RTC_DateUpdate+0x10c>
      {
        month++;
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	3301      	adds	r3, #1
 8004adc:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	60bb      	str	r3, [r7, #8]
 8004ae8:	68ba      	ldr	r2, [r7, #8]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d38b      	bcc.n	8004a08 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	b2da      	uxtb	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	b2da      	uxtb	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	b2da      	uxtb	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	b2d2      	uxtb	r2, r2
 8004b10:	4619      	mov	r1, r3
 8004b12:	6978      	ldr	r0, [r7, #20]
 8004b14:	f000 f83a 	bl	8004b8c <RTC_WeekDayNum>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	731a      	strb	r2, [r3, #12]
}
 8004b20:	bf00      	nop
 8004b22:	3718      	adds	r7, #24
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	4603      	mov	r3, r0
 8004b30:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8004b32:	88fb      	ldrh	r3, [r7, #6]
 8004b34:	f003 0303 	and.w	r3, r3, #3
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d001      	beq.n	8004b42 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	e01d      	b.n	8004b7e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8004b42:	88fb      	ldrh	r3, [r7, #6]
 8004b44:	4a10      	ldr	r2, [pc, #64]	@ (8004b88 <RTC_IsLeapYear+0x60>)
 8004b46:	fba2 1203 	umull	r1, r2, r2, r3
 8004b4a:	0952      	lsrs	r2, r2, #5
 8004b4c:	2164      	movs	r1, #100	@ 0x64
 8004b4e:	fb01 f202 	mul.w	r2, r1, r2
 8004b52:	1a9b      	subs	r3, r3, r2
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d001      	beq.n	8004b5e <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e00f      	b.n	8004b7e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8004b5e:	88fb      	ldrh	r3, [r7, #6]
 8004b60:	4a09      	ldr	r2, [pc, #36]	@ (8004b88 <RTC_IsLeapYear+0x60>)
 8004b62:	fba2 1203 	umull	r1, r2, r2, r3
 8004b66:	09d2      	lsrs	r2, r2, #7
 8004b68:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8004b6c:	fb01 f202 	mul.w	r2, r1, r2
 8004b70:	1a9b      	subs	r3, r3, r2
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d101      	bne.n	8004b7c <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e000      	b.n	8004b7e <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8004b7c:	2300      	movs	r3, #0
  }
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	370c      	adds	r7, #12
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bc80      	pop	{r7}
 8004b86:	4770      	bx	lr
 8004b88:	51eb851f 	.word	0x51eb851f

08004b8c <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	460b      	mov	r3, r1
 8004b96:	70fb      	strb	r3, [r7, #3]
 8004b98:	4613      	mov	r3, r2
 8004b9a:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	60bb      	str	r3, [r7, #8]
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8004baa:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8004bac:	78fb      	ldrb	r3, [r7, #3]
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d82d      	bhi.n	8004c0e <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8004bb2:	78fa      	ldrb	r2, [r7, #3]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	005b      	lsls	r3, r3, #1
 8004bb8:	4413      	add	r3, r2
 8004bba:	00db      	lsls	r3, r3, #3
 8004bbc:	1a9b      	subs	r3, r3, r2
 8004bbe:	4a2c      	ldr	r2, [pc, #176]	@ (8004c70 <RTC_WeekDayNum+0xe4>)
 8004bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc4:	085a      	lsrs	r2, r3, #1
 8004bc6:	78bb      	ldrb	r3, [r7, #2]
 8004bc8:	441a      	add	r2, r3
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	441a      	add	r2, r3
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	089b      	lsrs	r3, r3, #2
 8004bd4:	441a      	add	r2, r3
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	4926      	ldr	r1, [pc, #152]	@ (8004c74 <RTC_WeekDayNum+0xe8>)
 8004bdc:	fba1 1303 	umull	r1, r3, r1, r3
 8004be0:	095b      	lsrs	r3, r3, #5
 8004be2:	1ad2      	subs	r2, r2, r3
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	3b01      	subs	r3, #1
 8004be8:	4922      	ldr	r1, [pc, #136]	@ (8004c74 <RTC_WeekDayNum+0xe8>)
 8004bea:	fba1 1303 	umull	r1, r3, r1, r3
 8004bee:	09db      	lsrs	r3, r3, #7
 8004bf0:	4413      	add	r3, r2
 8004bf2:	1d1a      	adds	r2, r3, #4
 8004bf4:	4b20      	ldr	r3, [pc, #128]	@ (8004c78 <RTC_WeekDayNum+0xec>)
 8004bf6:	fba3 1302 	umull	r1, r3, r3, r2
 8004bfa:	1ad1      	subs	r1, r2, r3
 8004bfc:	0849      	lsrs	r1, r1, #1
 8004bfe:	440b      	add	r3, r1
 8004c00:	0899      	lsrs	r1, r3, #2
 8004c02:	460b      	mov	r3, r1
 8004c04:	00db      	lsls	r3, r3, #3
 8004c06:	1a5b      	subs	r3, r3, r1
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	60fb      	str	r3, [r7, #12]
 8004c0c:	e029      	b.n	8004c62 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8004c0e:	78fa      	ldrb	r2, [r7, #3]
 8004c10:	4613      	mov	r3, r2
 8004c12:	005b      	lsls	r3, r3, #1
 8004c14:	4413      	add	r3, r2
 8004c16:	00db      	lsls	r3, r3, #3
 8004c18:	1a9b      	subs	r3, r3, r2
 8004c1a:	4a15      	ldr	r2, [pc, #84]	@ (8004c70 <RTC_WeekDayNum+0xe4>)
 8004c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c20:	085a      	lsrs	r2, r3, #1
 8004c22:	78bb      	ldrb	r3, [r7, #2]
 8004c24:	441a      	add	r2, r3
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	441a      	add	r2, r3
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	089b      	lsrs	r3, r3, #2
 8004c2e:	441a      	add	r2, r3
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	4910      	ldr	r1, [pc, #64]	@ (8004c74 <RTC_WeekDayNum+0xe8>)
 8004c34:	fba1 1303 	umull	r1, r3, r1, r3
 8004c38:	095b      	lsrs	r3, r3, #5
 8004c3a:	1ad2      	subs	r2, r2, r3
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	490d      	ldr	r1, [pc, #52]	@ (8004c74 <RTC_WeekDayNum+0xe8>)
 8004c40:	fba1 1303 	umull	r1, r3, r1, r3
 8004c44:	09db      	lsrs	r3, r3, #7
 8004c46:	4413      	add	r3, r2
 8004c48:	1c9a      	adds	r2, r3, #2
 8004c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8004c78 <RTC_WeekDayNum+0xec>)
 8004c4c:	fba3 1302 	umull	r1, r3, r3, r2
 8004c50:	1ad1      	subs	r1, r2, r3
 8004c52:	0849      	lsrs	r1, r1, #1
 8004c54:	440b      	add	r3, r1
 8004c56:	0899      	lsrs	r1, r3, #2
 8004c58:	460b      	mov	r3, r1
 8004c5a:	00db      	lsls	r3, r3, #3
 8004c5c:	1a5b      	subs	r3, r3, r1
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	b2db      	uxtb	r3, r3
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3714      	adds	r7, #20
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bc80      	pop	{r7}
 8004c6e:	4770      	bx	lr
 8004c70:	38e38e39 	.word	0x38e38e39
 8004c74:	51eb851f 	.word	0x51eb851f
 8004c78:	24924925 	.word	0x24924925

08004c7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e076      	b.n	8004d7c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d108      	bne.n	8004ca8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c9e:	d009      	beq.n	8004cb4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	61da      	str	r2, [r3, #28]
 8004ca6:	e005      	b.n	8004cb4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d106      	bne.n	8004cd4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f7fc fde8 	bl	80018a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d06:	431a      	orrs	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	f003 0302 	and.w	r3, r3, #2
 8004d10:	431a      	orrs	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	f003 0301 	and.w	r3, r3, #1
 8004d1a:	431a      	orrs	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d24:	431a      	orrs	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	69db      	ldr	r3, [r3, #28]
 8004d2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d2e:	431a      	orrs	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a1b      	ldr	r3, [r3, #32]
 8004d34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d38:	ea42 0103 	orr.w	r1, r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d40:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	0c1a      	lsrs	r2, r3, #16
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f002 0204 	and.w	r2, r2, #4
 8004d5a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	69da      	ldr	r2, [r3, #28]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d6a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3708      	adds	r7, #8
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b088      	sub	sp, #32
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	603b      	str	r3, [r7, #0]
 8004d90:	4613      	mov	r3, r2
 8004d92:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d94:	f7fc fff0 	bl	8001d78 <HAL_GetTick>
 8004d98:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004d9a:	88fb      	ldrh	r3, [r7, #6]
 8004d9c:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d001      	beq.n	8004dae <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004daa:	2302      	movs	r3, #2
 8004dac:	e12a      	b.n	8005004 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d002      	beq.n	8004dba <HAL_SPI_Transmit+0x36>
 8004db4:	88fb      	ldrh	r3, [r7, #6]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e122      	b.n	8005004 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d101      	bne.n	8004dcc <HAL_SPI_Transmit+0x48>
 8004dc8:	2302      	movs	r3, #2
 8004dca:	e11b      	b.n	8005004 <HAL_SPI_Transmit+0x280>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2203      	movs	r2, #3
 8004dd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	68ba      	ldr	r2, [r7, #8]
 8004de6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	88fa      	ldrh	r2, [r7, #6]
 8004dec:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	88fa      	ldrh	r2, [r7, #6]
 8004df2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2200      	movs	r2, #0
 8004df8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2200      	movs	r2, #0
 8004e04:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e1a:	d10f      	bne.n	8004e3c <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e2a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e3a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e46:	2b40      	cmp	r3, #64	@ 0x40
 8004e48:	d007      	beq.n	8004e5a <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e58:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e62:	d152      	bne.n	8004f0a <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d002      	beq.n	8004e72 <HAL_SPI_Transmit+0xee>
 8004e6c:	8b7b      	ldrh	r3, [r7, #26]
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d145      	bne.n	8004efe <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e76:	881a      	ldrh	r2, [r3, #0]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e82:	1c9a      	adds	r2, r3, #2
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004e96:	e032      	b.n	8004efe <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f003 0302 	and.w	r3, r3, #2
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d112      	bne.n	8004ecc <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eaa:	881a      	ldrh	r2, [r3, #0]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb6:	1c9a      	adds	r2, r3, #2
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004eca:	e018      	b.n	8004efe <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ecc:	f7fc ff54 	bl	8001d78 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d803      	bhi.n	8004ee4 <HAL_SPI_Transmit+0x160>
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee2:	d102      	bne.n	8004eea <HAL_SPI_Transmit+0x166>
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d109      	bne.n	8004efe <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e082      	b.n	8005004 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d1c7      	bne.n	8004e98 <HAL_SPI_Transmit+0x114>
 8004f08:	e053      	b.n	8004fb2 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d002      	beq.n	8004f18 <HAL_SPI_Transmit+0x194>
 8004f12:	8b7b      	ldrh	r3, [r7, #26]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d147      	bne.n	8004fa8 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	330c      	adds	r3, #12
 8004f22:	7812      	ldrb	r2, [r2, #0]
 8004f24:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f2a:	1c5a      	adds	r2, r3, #1
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	3b01      	subs	r3, #1
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004f3e:	e033      	b.n	8004fa8 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d113      	bne.n	8004f76 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	330c      	adds	r3, #12
 8004f58:	7812      	ldrb	r2, [r2, #0]
 8004f5a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f60:	1c5a      	adds	r2, r3, #1
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004f74:	e018      	b.n	8004fa8 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f76:	f7fc feff 	bl	8001d78 <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	683a      	ldr	r2, [r7, #0]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d803      	bhi.n	8004f8e <HAL_SPI_Transmit+0x20a>
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f8c:	d102      	bne.n	8004f94 <HAL_SPI_Transmit+0x210>
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d109      	bne.n	8004fa8 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e02d      	b.n	8005004 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1c6      	bne.n	8004f40 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fb2:	69fa      	ldr	r2, [r7, #28]
 8004fb4:	6839      	ldr	r1, [r7, #0]
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	f000 fbc4 	bl	8005744 <SPI_EndRxTxTransaction>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d002      	beq.n	8004fc8 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d10a      	bne.n	8004fe6 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	617b      	str	r3, [r7, #20]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	617b      	str	r3, [r7, #20]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	617b      	str	r3, [r7, #20]
 8004fe4:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d001      	beq.n	8005002 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e000      	b.n	8005004 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005002:	2300      	movs	r3, #0
  }
}
 8005004:	4618      	mov	r0, r3
 8005006:	3720      	adds	r7, #32
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b088      	sub	sp, #32
 8005010:	af02      	add	r7, sp, #8
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	603b      	str	r3, [r7, #0]
 8005018:	4613      	mov	r3, r2
 800501a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005022:	b2db      	uxtb	r3, r3
 8005024:	2b01      	cmp	r3, #1
 8005026:	d001      	beq.n	800502c <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005028:	2302      	movs	r3, #2
 800502a:	e104      	b.n	8005236 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005034:	d112      	bne.n	800505c <HAL_SPI_Receive+0x50>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d10e      	bne.n	800505c <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2204      	movs	r2, #4
 8005042:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005046:	88fa      	ldrh	r2, [r7, #6]
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	9300      	str	r3, [sp, #0]
 800504c:	4613      	mov	r3, r2
 800504e:	68ba      	ldr	r2, [r7, #8]
 8005050:	68b9      	ldr	r1, [r7, #8]
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f000 f8f3 	bl	800523e <HAL_SPI_TransmitReceive>
 8005058:	4603      	mov	r3, r0
 800505a:	e0ec      	b.n	8005236 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800505c:	f7fc fe8c 	bl	8001d78 <HAL_GetTick>
 8005060:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d002      	beq.n	800506e <HAL_SPI_Receive+0x62>
 8005068:	88fb      	ldrh	r3, [r7, #6]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d101      	bne.n	8005072 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e0e1      	b.n	8005236 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005078:	2b01      	cmp	r3, #1
 800507a:	d101      	bne.n	8005080 <HAL_SPI_Receive+0x74>
 800507c:	2302      	movs	r3, #2
 800507e:	e0da      	b.n	8005236 <HAL_SPI_Receive+0x22a>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2204      	movs	r2, #4
 800508c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	68ba      	ldr	r2, [r7, #8]
 800509a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	88fa      	ldrh	r2, [r7, #6]
 80050a0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	88fa      	ldrh	r2, [r7, #6]
 80050a6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050ce:	d10f      	bne.n	80050f0 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050de:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80050ee:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050fa:	2b40      	cmp	r3, #64	@ 0x40
 80050fc:	d007      	beq.n	800510e <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800510c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d170      	bne.n	80051f8 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005116:	e035      	b.n	8005184 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f003 0301 	and.w	r3, r3, #1
 8005122:	2b01      	cmp	r3, #1
 8005124:	d115      	bne.n	8005152 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f103 020c 	add.w	r2, r3, #12
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005132:	7812      	ldrb	r2, [r2, #0]
 8005134:	b2d2      	uxtb	r2, r2
 8005136:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800513c:	1c5a      	adds	r2, r3, #1
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005146:	b29b      	uxth	r3, r3
 8005148:	3b01      	subs	r3, #1
 800514a:	b29a      	uxth	r2, r3
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005150:	e018      	b.n	8005184 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005152:	f7fc fe11 	bl	8001d78 <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	683a      	ldr	r2, [r7, #0]
 800515e:	429a      	cmp	r2, r3
 8005160:	d803      	bhi.n	800516a <HAL_SPI_Receive+0x15e>
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005168:	d102      	bne.n	8005170 <HAL_SPI_Receive+0x164>
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d109      	bne.n	8005184 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e058      	b.n	8005236 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005188:	b29b      	uxth	r3, r3
 800518a:	2b00      	cmp	r3, #0
 800518c:	d1c4      	bne.n	8005118 <HAL_SPI_Receive+0x10c>
 800518e:	e038      	b.n	8005202 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f003 0301 	and.w	r3, r3, #1
 800519a:	2b01      	cmp	r3, #1
 800519c:	d113      	bne.n	80051c6 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68da      	ldr	r2, [r3, #12]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a8:	b292      	uxth	r2, r2
 80051aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051b0:	1c9a      	adds	r2, r3, #2
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	3b01      	subs	r3, #1
 80051be:	b29a      	uxth	r2, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80051c4:	e018      	b.n	80051f8 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051c6:	f7fc fdd7 	bl	8001d78 <HAL_GetTick>
 80051ca:	4602      	mov	r2, r0
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	683a      	ldr	r2, [r7, #0]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d803      	bhi.n	80051de <HAL_SPI_Receive+0x1d2>
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051dc:	d102      	bne.n	80051e4 <HAL_SPI_Receive+0x1d8>
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d109      	bne.n	80051f8 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e01e      	b.n	8005236 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1c6      	bne.n	8005190 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005202:	697a      	ldr	r2, [r7, #20]
 8005204:	6839      	ldr	r1, [r7, #0]
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	f000 fa4a 	bl	80056a0 <SPI_EndRxTransaction>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d002      	beq.n	8005218 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2220      	movs	r2, #32
 8005216:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800522c:	2b00      	cmp	r3, #0
 800522e:	d001      	beq.n	8005234 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e000      	b.n	8005236 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005234:	2300      	movs	r3, #0
  }
}
 8005236:	4618      	mov	r0, r3
 8005238:	3718      	adds	r7, #24
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800523e:	b580      	push	{r7, lr}
 8005240:	b08a      	sub	sp, #40	@ 0x28
 8005242:	af00      	add	r7, sp, #0
 8005244:	60f8      	str	r0, [r7, #12]
 8005246:	60b9      	str	r1, [r7, #8]
 8005248:	607a      	str	r2, [r7, #4]
 800524a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800524c:	2301      	movs	r3, #1
 800524e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005250:	f7fc fd92 	bl	8001d78 <HAL_GetTick>
 8005254:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800525c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005264:	887b      	ldrh	r3, [r7, #2]
 8005266:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005268:	7ffb      	ldrb	r3, [r7, #31]
 800526a:	2b01      	cmp	r3, #1
 800526c:	d00c      	beq.n	8005288 <HAL_SPI_TransmitReceive+0x4a>
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005274:	d106      	bne.n	8005284 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d102      	bne.n	8005284 <HAL_SPI_TransmitReceive+0x46>
 800527e:	7ffb      	ldrb	r3, [r7, #31]
 8005280:	2b04      	cmp	r3, #4
 8005282:	d001      	beq.n	8005288 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005284:	2302      	movs	r3, #2
 8005286:	e17f      	b.n	8005588 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d005      	beq.n	800529a <HAL_SPI_TransmitReceive+0x5c>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d002      	beq.n	800529a <HAL_SPI_TransmitReceive+0x5c>
 8005294:	887b      	ldrh	r3, [r7, #2]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d101      	bne.n	800529e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e174      	b.n	8005588 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d101      	bne.n	80052ac <HAL_SPI_TransmitReceive+0x6e>
 80052a8:	2302      	movs	r3, #2
 80052aa:	e16d      	b.n	8005588 <HAL_SPI_TransmitReceive+0x34a>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	2b04      	cmp	r3, #4
 80052be:	d003      	beq.n	80052c8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2205      	movs	r2, #5
 80052c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	887a      	ldrh	r2, [r7, #2]
 80052d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	887a      	ldrh	r2, [r7, #2]
 80052de:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	68ba      	ldr	r2, [r7, #8]
 80052e4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	887a      	ldrh	r2, [r7, #2]
 80052ea:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	887a      	ldrh	r2, [r7, #2]
 80052f0:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2200      	movs	r2, #0
 80052fc:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005308:	2b40      	cmp	r3, #64	@ 0x40
 800530a:	d007      	beq.n	800531c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800531a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005324:	d17e      	bne.n	8005424 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d002      	beq.n	8005334 <HAL_SPI_TransmitReceive+0xf6>
 800532e:	8afb      	ldrh	r3, [r7, #22]
 8005330:	2b01      	cmp	r3, #1
 8005332:	d16c      	bne.n	800540e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005338:	881a      	ldrh	r2, [r3, #0]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005344:	1c9a      	adds	r2, r3, #2
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800534e:	b29b      	uxth	r3, r3
 8005350:	3b01      	subs	r3, #1
 8005352:	b29a      	uxth	r2, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005358:	e059      	b.n	800540e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f003 0302 	and.w	r3, r3, #2
 8005364:	2b02      	cmp	r3, #2
 8005366:	d11b      	bne.n	80053a0 <HAL_SPI_TransmitReceive+0x162>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800536c:	b29b      	uxth	r3, r3
 800536e:	2b00      	cmp	r3, #0
 8005370:	d016      	beq.n	80053a0 <HAL_SPI_TransmitReceive+0x162>
 8005372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005374:	2b01      	cmp	r3, #1
 8005376:	d113      	bne.n	80053a0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800537c:	881a      	ldrh	r2, [r3, #0]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005388:	1c9a      	adds	r2, r3, #2
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005392:	b29b      	uxth	r3, r3
 8005394:	3b01      	subs	r3, #1
 8005396:	b29a      	uxth	r2, r3
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800539c:	2300      	movs	r3, #0
 800539e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d119      	bne.n	80053e2 <HAL_SPI_TransmitReceive+0x1a4>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d014      	beq.n	80053e2 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68da      	ldr	r2, [r3, #12]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053c2:	b292      	uxth	r2, r2
 80053c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ca:	1c9a      	adds	r2, r3, #2
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	3b01      	subs	r3, #1
 80053d8:	b29a      	uxth	r2, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80053de:	2301      	movs	r3, #1
 80053e0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80053e2:	f7fc fcc9 	bl	8001d78 <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	6a3b      	ldr	r3, [r7, #32]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d80d      	bhi.n	800540e <HAL_SPI_TransmitReceive+0x1d0>
 80053f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f8:	d009      	beq.n	800540e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e0bc      	b.n	8005588 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005412:	b29b      	uxth	r3, r3
 8005414:	2b00      	cmp	r3, #0
 8005416:	d1a0      	bne.n	800535a <HAL_SPI_TransmitReceive+0x11c>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800541c:	b29b      	uxth	r3, r3
 800541e:	2b00      	cmp	r3, #0
 8005420:	d19b      	bne.n	800535a <HAL_SPI_TransmitReceive+0x11c>
 8005422:	e082      	b.n	800552a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d002      	beq.n	8005432 <HAL_SPI_TransmitReceive+0x1f4>
 800542c:	8afb      	ldrh	r3, [r7, #22]
 800542e:	2b01      	cmp	r3, #1
 8005430:	d171      	bne.n	8005516 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	330c      	adds	r3, #12
 800543c:	7812      	ldrb	r2, [r2, #0]
 800543e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005444:	1c5a      	adds	r2, r3, #1
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800544e:	b29b      	uxth	r3, r3
 8005450:	3b01      	subs	r3, #1
 8005452:	b29a      	uxth	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005458:	e05d      	b.n	8005516 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	f003 0302 	and.w	r3, r3, #2
 8005464:	2b02      	cmp	r3, #2
 8005466:	d11c      	bne.n	80054a2 <HAL_SPI_TransmitReceive+0x264>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800546c:	b29b      	uxth	r3, r3
 800546e:	2b00      	cmp	r3, #0
 8005470:	d017      	beq.n	80054a2 <HAL_SPI_TransmitReceive+0x264>
 8005472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005474:	2b01      	cmp	r3, #1
 8005476:	d114      	bne.n	80054a2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	330c      	adds	r3, #12
 8005482:	7812      	ldrb	r2, [r2, #0]
 8005484:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800548a:	1c5a      	adds	r2, r3, #1
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005494:	b29b      	uxth	r3, r3
 8005496:	3b01      	subs	r3, #1
 8005498:	b29a      	uxth	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800549e:	2300      	movs	r3, #0
 80054a0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f003 0301 	and.w	r3, r3, #1
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d119      	bne.n	80054e4 <HAL_SPI_TransmitReceive+0x2a6>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d014      	beq.n	80054e4 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68da      	ldr	r2, [r3, #12]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054c4:	b2d2      	uxtb	r2, r2
 80054c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054cc:	1c5a      	adds	r2, r3, #1
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	3b01      	subs	r3, #1
 80054da:	b29a      	uxth	r2, r3
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80054e0:	2301      	movs	r3, #1
 80054e2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80054e4:	f7fc fc48 	bl	8001d78 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	6a3b      	ldr	r3, [r7, #32]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d803      	bhi.n	80054fc <HAL_SPI_TransmitReceive+0x2be>
 80054f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054fa:	d102      	bne.n	8005502 <HAL_SPI_TransmitReceive+0x2c4>
 80054fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d109      	bne.n	8005516 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2201      	movs	r2, #1
 8005506:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e038      	b.n	8005588 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800551a:	b29b      	uxth	r3, r3
 800551c:	2b00      	cmp	r3, #0
 800551e:	d19c      	bne.n	800545a <HAL_SPI_TransmitReceive+0x21c>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005524:	b29b      	uxth	r3, r3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d197      	bne.n	800545a <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800552a:	6a3a      	ldr	r2, [r7, #32]
 800552c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f000 f908 	bl	8005744 <SPI_EndRxTxTransaction>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d008      	beq.n	800554c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2220      	movs	r2, #32
 800553e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e01d      	b.n	8005588 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10a      	bne.n	800556a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005554:	2300      	movs	r3, #0
 8005556:	613b      	str	r3, [r7, #16]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	613b      	str	r3, [r7, #16]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	613b      	str	r3, [r7, #16]
 8005568:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2201      	movs	r2, #1
 800556e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800557e:	2b00      	cmp	r3, #0
 8005580:	d001      	beq.n	8005586 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e000      	b.n	8005588 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005586:	2300      	movs	r3, #0
  }
}
 8005588:	4618      	mov	r0, r3
 800558a:	3728      	adds	r7, #40	@ 0x28
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b088      	sub	sp, #32
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	603b      	str	r3, [r7, #0]
 800559c:	4613      	mov	r3, r2
 800559e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80055a0:	f7fc fbea 	bl	8001d78 <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a8:	1a9b      	subs	r3, r3, r2
 80055aa:	683a      	ldr	r2, [r7, #0]
 80055ac:	4413      	add	r3, r2
 80055ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80055b0:	f7fc fbe2 	bl	8001d78 <HAL_GetTick>
 80055b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80055b6:	4b39      	ldr	r3, [pc, #228]	@ (800569c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	015b      	lsls	r3, r3, #5
 80055bc:	0d1b      	lsrs	r3, r3, #20
 80055be:	69fa      	ldr	r2, [r7, #28]
 80055c0:	fb02 f303 	mul.w	r3, r2, r3
 80055c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055c6:	e054      	b.n	8005672 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ce:	d050      	beq.n	8005672 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80055d0:	f7fc fbd2 	bl	8001d78 <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	69fa      	ldr	r2, [r7, #28]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d902      	bls.n	80055e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d13d      	bne.n	8005662 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	685a      	ldr	r2, [r3, #4]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80055f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055fe:	d111      	bne.n	8005624 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005608:	d004      	beq.n	8005614 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005612:	d107      	bne.n	8005624 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005622:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005628:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800562c:	d10f      	bne.n	800564e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800563c:	601a      	str	r2, [r3, #0]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800564c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2201      	movs	r2, #1
 8005652:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e017      	b.n	8005692 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d101      	bne.n	800566c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005668:	2300      	movs	r3, #0
 800566a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	3b01      	subs	r3, #1
 8005670:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	689a      	ldr	r2, [r3, #8]
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	4013      	ands	r3, r2
 800567c:	68ba      	ldr	r2, [r7, #8]
 800567e:	429a      	cmp	r2, r3
 8005680:	bf0c      	ite	eq
 8005682:	2301      	moveq	r3, #1
 8005684:	2300      	movne	r3, #0
 8005686:	b2db      	uxtb	r3, r3
 8005688:	461a      	mov	r2, r3
 800568a:	79fb      	ldrb	r3, [r7, #7]
 800568c:	429a      	cmp	r2, r3
 800568e:	d19b      	bne.n	80055c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3720      	adds	r7, #32
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	2000001c 	.word	0x2000001c

080056a0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b086      	sub	sp, #24
 80056a4:	af02      	add	r7, sp, #8
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056b4:	d111      	bne.n	80056da <SPI_EndRxTransaction+0x3a>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056be:	d004      	beq.n	80056ca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056c8:	d107      	bne.n	80056da <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056d8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056e2:	d117      	bne.n	8005714 <SPI_EndRxTransaction+0x74>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056ec:	d112      	bne.n	8005714 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	9300      	str	r3, [sp, #0]
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	2200      	movs	r2, #0
 80056f6:	2101      	movs	r1, #1
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f7ff ff49 	bl	8005590 <SPI_WaitFlagStateUntilTimeout>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d01a      	beq.n	800573a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005708:	f043 0220 	orr.w	r2, r3, #32
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	e013      	b.n	800573c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	9300      	str	r3, [sp, #0]
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	2200      	movs	r2, #0
 800571c:	2180      	movs	r1, #128	@ 0x80
 800571e:	68f8      	ldr	r0, [r7, #12]
 8005720:	f7ff ff36 	bl	8005590 <SPI_WaitFlagStateUntilTimeout>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d007      	beq.n	800573a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800572e:	f043 0220 	orr.w	r2, r3, #32
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e000      	b.n	800573c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	3710      	adds	r7, #16
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b086      	sub	sp, #24
 8005748:	af02      	add	r7, sp, #8
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	9300      	str	r3, [sp, #0]
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	2201      	movs	r2, #1
 8005758:	2102      	movs	r1, #2
 800575a:	68f8      	ldr	r0, [r7, #12]
 800575c:	f7ff ff18 	bl	8005590 <SPI_WaitFlagStateUntilTimeout>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d007      	beq.n	8005776 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800576a:	f043 0220 	orr.w	r2, r3, #32
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e013      	b.n	800579e <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	9300      	str	r3, [sp, #0]
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	2200      	movs	r2, #0
 800577e:	2180      	movs	r1, #128	@ 0x80
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f7ff ff05 	bl	8005590 <SPI_WaitFlagStateUntilTimeout>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d007      	beq.n	800579c <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005790:	f043 0220 	orr.w	r2, r3, #32
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005798:	2303      	movs	r3, #3
 800579a:	e000      	b.n	800579e <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b082      	sub	sp, #8
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d101      	bne.n	80057b8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e042      	b.n	800583e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d106      	bne.n	80057d2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f7fc f8c3 	bl	8001958 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2224      	movs	r2, #36	@ 0x24
 80057d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68da      	ldr	r2, [r3, #12]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80057e8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 f9d0 	bl	8005b90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	691a      	ldr	r2, [r3, #16]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80057fe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	695a      	ldr	r2, [r3, #20]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800580e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68da      	ldr	r2, [r3, #12]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800581e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2220      	movs	r2, #32
 800582a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2220      	movs	r2, #32
 8005832:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005846:	b580      	push	{r7, lr}
 8005848:	b08a      	sub	sp, #40	@ 0x28
 800584a:	af02      	add	r7, sp, #8
 800584c:	60f8      	str	r0, [r7, #12]
 800584e:	60b9      	str	r1, [r7, #8]
 8005850:	603b      	str	r3, [r7, #0]
 8005852:	4613      	mov	r3, r2
 8005854:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005856:	2300      	movs	r3, #0
 8005858:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005860:	b2db      	uxtb	r3, r3
 8005862:	2b20      	cmp	r3, #32
 8005864:	d175      	bne.n	8005952 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d002      	beq.n	8005872 <HAL_UART_Transmit+0x2c>
 800586c:	88fb      	ldrh	r3, [r7, #6]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d101      	bne.n	8005876 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e06e      	b.n	8005954 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2221      	movs	r2, #33	@ 0x21
 8005880:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005884:	f7fc fa78 	bl	8001d78 <HAL_GetTick>
 8005888:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	88fa      	ldrh	r2, [r7, #6]
 800588e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	88fa      	ldrh	r2, [r7, #6]
 8005894:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800589e:	d108      	bne.n	80058b2 <HAL_UART_Transmit+0x6c>
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d104      	bne.n	80058b2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80058a8:	2300      	movs	r3, #0
 80058aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	61bb      	str	r3, [r7, #24]
 80058b0:	e003      	b.n	80058ba <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058b6:	2300      	movs	r3, #0
 80058b8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80058ba:	e02e      	b.n	800591a <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	9300      	str	r3, [sp, #0]
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	2200      	movs	r2, #0
 80058c4:	2180      	movs	r1, #128	@ 0x80
 80058c6:	68f8      	ldr	r0, [r7, #12]
 80058c8:	f000 f86d 	bl	80059a6 <UART_WaitOnFlagUntilTimeout>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d005      	beq.n	80058de <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2220      	movs	r2, #32
 80058d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e03a      	b.n	8005954 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d10b      	bne.n	80058fc <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	881b      	ldrh	r3, [r3, #0]
 80058e8:	461a      	mov	r2, r3
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058f2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	3302      	adds	r3, #2
 80058f8:	61bb      	str	r3, [r7, #24]
 80058fa:	e007      	b.n	800590c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	781a      	ldrb	r2, [r3, #0]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	3301      	adds	r3, #1
 800590a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005910:	b29b      	uxth	r3, r3
 8005912:	3b01      	subs	r3, #1
 8005914:	b29a      	uxth	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800591e:	b29b      	uxth	r3, r3
 8005920:	2b00      	cmp	r3, #0
 8005922:	d1cb      	bne.n	80058bc <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	9300      	str	r3, [sp, #0]
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	2200      	movs	r2, #0
 800592c:	2140      	movs	r1, #64	@ 0x40
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f000 f839 	bl	80059a6 <UART_WaitOnFlagUntilTimeout>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d005      	beq.n	8005946 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2220      	movs	r2, #32
 800593e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e006      	b.n	8005954 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2220      	movs	r2, #32
 800594a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800594e:	2300      	movs	r3, #0
 8005950:	e000      	b.n	8005954 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005952:	2302      	movs	r3, #2
  }
}
 8005954:	4618      	mov	r0, r3
 8005956:	3720      	adds	r7, #32
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	4613      	mov	r3, r2
 8005968:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005970:	b2db      	uxtb	r3, r3
 8005972:	2b20      	cmp	r3, #32
 8005974:	d112      	bne.n	800599c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d002      	beq.n	8005982 <HAL_UART_Receive_IT+0x26>
 800597c:	88fb      	ldrh	r3, [r7, #6]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d101      	bne.n	8005986 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e00b      	b.n	800599e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2200      	movs	r2, #0
 800598a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800598c:	88fb      	ldrh	r3, [r7, #6]
 800598e:	461a      	mov	r2, r3
 8005990:	68b9      	ldr	r1, [r7, #8]
 8005992:	68f8      	ldr	r0, [r7, #12]
 8005994:	f000 f860 	bl	8005a58 <UART_Start_Receive_IT>
 8005998:	4603      	mov	r3, r0
 800599a:	e000      	b.n	800599e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800599c:	2302      	movs	r3, #2
  }
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b086      	sub	sp, #24
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	60f8      	str	r0, [r7, #12]
 80059ae:	60b9      	str	r1, [r7, #8]
 80059b0:	603b      	str	r3, [r7, #0]
 80059b2:	4613      	mov	r3, r2
 80059b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059b6:	e03b      	b.n	8005a30 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059b8:	6a3b      	ldr	r3, [r7, #32]
 80059ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059be:	d037      	beq.n	8005a30 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059c0:	f7fc f9da 	bl	8001d78 <HAL_GetTick>
 80059c4:	4602      	mov	r2, r0
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	6a3a      	ldr	r2, [r7, #32]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d302      	bcc.n	80059d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80059d0:	6a3b      	ldr	r3, [r7, #32]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d101      	bne.n	80059da <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e03a      	b.n	8005a50 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	f003 0304 	and.w	r3, r3, #4
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d023      	beq.n	8005a30 <UART_WaitOnFlagUntilTimeout+0x8a>
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	2b80      	cmp	r3, #128	@ 0x80
 80059ec:	d020      	beq.n	8005a30 <UART_WaitOnFlagUntilTimeout+0x8a>
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	2b40      	cmp	r3, #64	@ 0x40
 80059f2:	d01d      	beq.n	8005a30 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0308 	and.w	r3, r3, #8
 80059fe:	2b08      	cmp	r3, #8
 8005a00:	d116      	bne.n	8005a30 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005a02:	2300      	movs	r3, #0
 8005a04:	617b      	str	r3, [r7, #20]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	617b      	str	r3, [r7, #20]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	617b      	str	r3, [r7, #20]
 8005a16:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a18:	68f8      	ldr	r0, [r7, #12]
 8005a1a:	f000 f856 	bl	8005aca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2208      	movs	r2, #8
 8005a22:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e00f      	b.n	8005a50 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	4013      	ands	r3, r2
 8005a3a:	68ba      	ldr	r2, [r7, #8]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	bf0c      	ite	eq
 8005a40:	2301      	moveq	r3, #1
 8005a42:	2300      	movne	r3, #0
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	461a      	mov	r2, r3
 8005a48:	79fb      	ldrb	r3, [r7, #7]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d0b4      	beq.n	80059b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3718      	adds	r7, #24
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	4613      	mov	r3, r2
 8005a64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	68ba      	ldr	r2, [r7, #8]
 8005a6a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	88fa      	ldrh	r2, [r7, #6]
 8005a70:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	88fa      	ldrh	r2, [r7, #6]
 8005a76:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2222      	movs	r2, #34	@ 0x22
 8005a82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d007      	beq.n	8005a9e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68da      	ldr	r2, [r3, #12]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a9c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	695a      	ldr	r2, [r3, #20]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f042 0201 	orr.w	r2, r2, #1
 8005aac:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68da      	ldr	r2, [r3, #12]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f042 0220 	orr.w	r2, r2, #32
 8005abc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3714      	adds	r7, #20
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bc80      	pop	{r7}
 8005ac8:	4770      	bx	lr

08005aca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005aca:	b480      	push	{r7}
 8005acc:	b095      	sub	sp, #84	@ 0x54
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	330c      	adds	r3, #12
 8005ad8:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005adc:	e853 3f00 	ldrex	r3, [r3]
 8005ae0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ae8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	330c      	adds	r3, #12
 8005af0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005af2:	643a      	str	r2, [r7, #64]	@ 0x40
 8005af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005af8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005afa:	e841 2300 	strex	r3, r2, [r1]
 8005afe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d1e5      	bne.n	8005ad2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	3314      	adds	r3, #20
 8005b0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0e:	6a3b      	ldr	r3, [r7, #32]
 8005b10:	e853 3f00 	ldrex	r3, [r3]
 8005b14:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	f023 0301 	bic.w	r3, r3, #1
 8005b1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	3314      	adds	r3, #20
 8005b24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b28:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b2e:	e841 2300 	strex	r3, r2, [r1]
 8005b32:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1e5      	bne.n	8005b06 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d119      	bne.n	8005b76 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	330c      	adds	r3, #12
 8005b48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	e853 3f00 	ldrex	r3, [r3]
 8005b50:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	f023 0310 	bic.w	r3, r3, #16
 8005b58:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	330c      	adds	r3, #12
 8005b60:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b62:	61ba      	str	r2, [r7, #24]
 8005b64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b66:	6979      	ldr	r1, [r7, #20]
 8005b68:	69ba      	ldr	r2, [r7, #24]
 8005b6a:	e841 2300 	strex	r3, r2, [r1]
 8005b6e:	613b      	str	r3, [r7, #16]
   return(result);
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d1e5      	bne.n	8005b42 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2220      	movs	r2, #32
 8005b7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005b84:	bf00      	nop
 8005b86:	3754      	adds	r7, #84	@ 0x54
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bc80      	pop	{r7}
 8005b8c:	4770      	bx	lr
	...

08005b90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	68da      	ldr	r2, [r3, #12]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	430a      	orrs	r2, r1
 8005bac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	689a      	ldr	r2, [r3, #8]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	431a      	orrs	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	695b      	ldr	r3, [r3, #20]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005bca:	f023 030c 	bic.w	r3, r3, #12
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	6812      	ldr	r2, [r2, #0]
 8005bd2:	68b9      	ldr	r1, [r7, #8]
 8005bd4:	430b      	orrs	r3, r1
 8005bd6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	695b      	ldr	r3, [r3, #20]
 8005bde:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	699a      	ldr	r2, [r3, #24]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	430a      	orrs	r2, r1
 8005bec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a2c      	ldr	r2, [pc, #176]	@ (8005ca4 <UART_SetConfig+0x114>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d103      	bne.n	8005c00 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005bf8:	f7fe f864 	bl	8003cc4 <HAL_RCC_GetPCLK2Freq>
 8005bfc:	60f8      	str	r0, [r7, #12]
 8005bfe:	e002      	b.n	8005c06 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005c00:	f7fe f84c 	bl	8003c9c <HAL_RCC_GetPCLK1Freq>
 8005c04:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	4613      	mov	r3, r2
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	4413      	add	r3, r2
 8005c0e:	009a      	lsls	r2, r3, #2
 8005c10:	441a      	add	r2, r3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c1c:	4a22      	ldr	r2, [pc, #136]	@ (8005ca8 <UART_SetConfig+0x118>)
 8005c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c22:	095b      	lsrs	r3, r3, #5
 8005c24:	0119      	lsls	r1, r3, #4
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	4613      	mov	r3, r2
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	4413      	add	r3, r2
 8005c2e:	009a      	lsls	r2, r3, #2
 8005c30:	441a      	add	r2, r3
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c3c:	4b1a      	ldr	r3, [pc, #104]	@ (8005ca8 <UART_SetConfig+0x118>)
 8005c3e:	fba3 0302 	umull	r0, r3, r3, r2
 8005c42:	095b      	lsrs	r3, r3, #5
 8005c44:	2064      	movs	r0, #100	@ 0x64
 8005c46:	fb00 f303 	mul.w	r3, r0, r3
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	011b      	lsls	r3, r3, #4
 8005c4e:	3332      	adds	r3, #50	@ 0x32
 8005c50:	4a15      	ldr	r2, [pc, #84]	@ (8005ca8 <UART_SetConfig+0x118>)
 8005c52:	fba2 2303 	umull	r2, r3, r2, r3
 8005c56:	095b      	lsrs	r3, r3, #5
 8005c58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c5c:	4419      	add	r1, r3
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	4613      	mov	r3, r2
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	4413      	add	r3, r2
 8005c66:	009a      	lsls	r2, r3, #2
 8005c68:	441a      	add	r2, r3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c74:	4b0c      	ldr	r3, [pc, #48]	@ (8005ca8 <UART_SetConfig+0x118>)
 8005c76:	fba3 0302 	umull	r0, r3, r3, r2
 8005c7a:	095b      	lsrs	r3, r3, #5
 8005c7c:	2064      	movs	r0, #100	@ 0x64
 8005c7e:	fb00 f303 	mul.w	r3, r0, r3
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	011b      	lsls	r3, r3, #4
 8005c86:	3332      	adds	r3, #50	@ 0x32
 8005c88:	4a07      	ldr	r2, [pc, #28]	@ (8005ca8 <UART_SetConfig+0x118>)
 8005c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c8e:	095b      	lsrs	r3, r3, #5
 8005c90:	f003 020f 	and.w	r2, r3, #15
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	440a      	add	r2, r1
 8005c9a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005c9c:	bf00      	nop
 8005c9e:	3710      	adds	r7, #16
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	40013800 	.word	0x40013800
 8005ca8:	51eb851f 	.word	0x51eb851f

08005cac <atoi>:
 8005cac:	220a      	movs	r2, #10
 8005cae:	2100      	movs	r1, #0
 8005cb0:	f000 b87c 	b.w	8005dac <strtol>

08005cb4 <_strtol_l.isra.0>:
 8005cb4:	2b24      	cmp	r3, #36	@ 0x24
 8005cb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cba:	4686      	mov	lr, r0
 8005cbc:	4690      	mov	r8, r2
 8005cbe:	d801      	bhi.n	8005cc4 <_strtol_l.isra.0+0x10>
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d106      	bne.n	8005cd2 <_strtol_l.isra.0+0x1e>
 8005cc4:	f000 f8fa 	bl	8005ebc <__errno>
 8005cc8:	2316      	movs	r3, #22
 8005cca:	6003      	str	r3, [r0, #0]
 8005ccc:	2000      	movs	r0, #0
 8005cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cd2:	460d      	mov	r5, r1
 8005cd4:	4833      	ldr	r0, [pc, #204]	@ (8005da4 <_strtol_l.isra.0+0xf0>)
 8005cd6:	462a      	mov	r2, r5
 8005cd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005cdc:	5d06      	ldrb	r6, [r0, r4]
 8005cde:	f016 0608 	ands.w	r6, r6, #8
 8005ce2:	d1f8      	bne.n	8005cd6 <_strtol_l.isra.0+0x22>
 8005ce4:	2c2d      	cmp	r4, #45	@ 0x2d
 8005ce6:	d110      	bne.n	8005d0a <_strtol_l.isra.0+0x56>
 8005ce8:	2601      	movs	r6, #1
 8005cea:	782c      	ldrb	r4, [r5, #0]
 8005cec:	1c95      	adds	r5, r2, #2
 8005cee:	f033 0210 	bics.w	r2, r3, #16
 8005cf2:	d115      	bne.n	8005d20 <_strtol_l.isra.0+0x6c>
 8005cf4:	2c30      	cmp	r4, #48	@ 0x30
 8005cf6:	d10d      	bne.n	8005d14 <_strtol_l.isra.0+0x60>
 8005cf8:	782a      	ldrb	r2, [r5, #0]
 8005cfa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005cfe:	2a58      	cmp	r2, #88	@ 0x58
 8005d00:	d108      	bne.n	8005d14 <_strtol_l.isra.0+0x60>
 8005d02:	786c      	ldrb	r4, [r5, #1]
 8005d04:	3502      	adds	r5, #2
 8005d06:	2310      	movs	r3, #16
 8005d08:	e00a      	b.n	8005d20 <_strtol_l.isra.0+0x6c>
 8005d0a:	2c2b      	cmp	r4, #43	@ 0x2b
 8005d0c:	bf04      	itt	eq
 8005d0e:	782c      	ldrbeq	r4, [r5, #0]
 8005d10:	1c95      	addeq	r5, r2, #2
 8005d12:	e7ec      	b.n	8005cee <_strtol_l.isra.0+0x3a>
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1f6      	bne.n	8005d06 <_strtol_l.isra.0+0x52>
 8005d18:	2c30      	cmp	r4, #48	@ 0x30
 8005d1a:	bf14      	ite	ne
 8005d1c:	230a      	movne	r3, #10
 8005d1e:	2308      	moveq	r3, #8
 8005d20:	2200      	movs	r2, #0
 8005d22:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005d26:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005d2a:	fbbc f9f3 	udiv	r9, ip, r3
 8005d2e:	4610      	mov	r0, r2
 8005d30:	fb03 ca19 	mls	sl, r3, r9, ip
 8005d34:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005d38:	2f09      	cmp	r7, #9
 8005d3a:	d80f      	bhi.n	8005d5c <_strtol_l.isra.0+0xa8>
 8005d3c:	463c      	mov	r4, r7
 8005d3e:	42a3      	cmp	r3, r4
 8005d40:	dd1b      	ble.n	8005d7a <_strtol_l.isra.0+0xc6>
 8005d42:	1c57      	adds	r7, r2, #1
 8005d44:	d007      	beq.n	8005d56 <_strtol_l.isra.0+0xa2>
 8005d46:	4581      	cmp	r9, r0
 8005d48:	d314      	bcc.n	8005d74 <_strtol_l.isra.0+0xc0>
 8005d4a:	d101      	bne.n	8005d50 <_strtol_l.isra.0+0x9c>
 8005d4c:	45a2      	cmp	sl, r4
 8005d4e:	db11      	blt.n	8005d74 <_strtol_l.isra.0+0xc0>
 8005d50:	2201      	movs	r2, #1
 8005d52:	fb00 4003 	mla	r0, r0, r3, r4
 8005d56:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d5a:	e7eb      	b.n	8005d34 <_strtol_l.isra.0+0x80>
 8005d5c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005d60:	2f19      	cmp	r7, #25
 8005d62:	d801      	bhi.n	8005d68 <_strtol_l.isra.0+0xb4>
 8005d64:	3c37      	subs	r4, #55	@ 0x37
 8005d66:	e7ea      	b.n	8005d3e <_strtol_l.isra.0+0x8a>
 8005d68:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005d6c:	2f19      	cmp	r7, #25
 8005d6e:	d804      	bhi.n	8005d7a <_strtol_l.isra.0+0xc6>
 8005d70:	3c57      	subs	r4, #87	@ 0x57
 8005d72:	e7e4      	b.n	8005d3e <_strtol_l.isra.0+0x8a>
 8005d74:	f04f 32ff 	mov.w	r2, #4294967295
 8005d78:	e7ed      	b.n	8005d56 <_strtol_l.isra.0+0xa2>
 8005d7a:	1c53      	adds	r3, r2, #1
 8005d7c:	d108      	bne.n	8005d90 <_strtol_l.isra.0+0xdc>
 8005d7e:	2322      	movs	r3, #34	@ 0x22
 8005d80:	4660      	mov	r0, ip
 8005d82:	f8ce 3000 	str.w	r3, [lr]
 8005d86:	f1b8 0f00 	cmp.w	r8, #0
 8005d8a:	d0a0      	beq.n	8005cce <_strtol_l.isra.0+0x1a>
 8005d8c:	1e69      	subs	r1, r5, #1
 8005d8e:	e006      	b.n	8005d9e <_strtol_l.isra.0+0xea>
 8005d90:	b106      	cbz	r6, 8005d94 <_strtol_l.isra.0+0xe0>
 8005d92:	4240      	negs	r0, r0
 8005d94:	f1b8 0f00 	cmp.w	r8, #0
 8005d98:	d099      	beq.n	8005cce <_strtol_l.isra.0+0x1a>
 8005d9a:	2a00      	cmp	r2, #0
 8005d9c:	d1f6      	bne.n	8005d8c <_strtol_l.isra.0+0xd8>
 8005d9e:	f8c8 1000 	str.w	r1, [r8]
 8005da2:	e794      	b.n	8005cce <_strtol_l.isra.0+0x1a>
 8005da4:	080071d3 	.word	0x080071d3

08005da8 <_strtol_r>:
 8005da8:	f7ff bf84 	b.w	8005cb4 <_strtol_l.isra.0>

08005dac <strtol>:
 8005dac:	4613      	mov	r3, r2
 8005dae:	460a      	mov	r2, r1
 8005db0:	4601      	mov	r1, r0
 8005db2:	4802      	ldr	r0, [pc, #8]	@ (8005dbc <strtol+0x10>)
 8005db4:	6800      	ldr	r0, [r0, #0]
 8005db6:	f7ff bf7d 	b.w	8005cb4 <_strtol_l.isra.0>
 8005dba:	bf00      	nop
 8005dbc:	20000028 	.word	0x20000028

08005dc0 <siprintf>:
 8005dc0:	b40e      	push	{r1, r2, r3}
 8005dc2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005dc6:	b510      	push	{r4, lr}
 8005dc8:	2400      	movs	r4, #0
 8005dca:	b09d      	sub	sp, #116	@ 0x74
 8005dcc:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005dce:	9002      	str	r0, [sp, #8]
 8005dd0:	9006      	str	r0, [sp, #24]
 8005dd2:	9107      	str	r1, [sp, #28]
 8005dd4:	9104      	str	r1, [sp, #16]
 8005dd6:	4809      	ldr	r0, [pc, #36]	@ (8005dfc <siprintf+0x3c>)
 8005dd8:	4909      	ldr	r1, [pc, #36]	@ (8005e00 <siprintf+0x40>)
 8005dda:	f853 2b04 	ldr.w	r2, [r3], #4
 8005dde:	9105      	str	r1, [sp, #20]
 8005de0:	6800      	ldr	r0, [r0, #0]
 8005de2:	a902      	add	r1, sp, #8
 8005de4:	9301      	str	r3, [sp, #4]
 8005de6:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005de8:	f000 f9e6 	bl	80061b8 <_svfiprintf_r>
 8005dec:	9b02      	ldr	r3, [sp, #8]
 8005dee:	701c      	strb	r4, [r3, #0]
 8005df0:	b01d      	add	sp, #116	@ 0x74
 8005df2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005df6:	b003      	add	sp, #12
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop
 8005dfc:	20000028 	.word	0x20000028
 8005e00:	ffff0208 	.word	0xffff0208

08005e04 <siscanf>:
 8005e04:	b40e      	push	{r1, r2, r3}
 8005e06:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8005e0a:	b570      	push	{r4, r5, r6, lr}
 8005e0c:	2500      	movs	r5, #0
 8005e0e:	b09d      	sub	sp, #116	@ 0x74
 8005e10:	ac21      	add	r4, sp, #132	@ 0x84
 8005e12:	f854 6b04 	ldr.w	r6, [r4], #4
 8005e16:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005e1a:	951b      	str	r5, [sp, #108]	@ 0x6c
 8005e1c:	9002      	str	r0, [sp, #8]
 8005e1e:	9006      	str	r0, [sp, #24]
 8005e20:	f7fa f99e 	bl	8000160 <strlen>
 8005e24:	4b0b      	ldr	r3, [pc, #44]	@ (8005e54 <siscanf+0x50>)
 8005e26:	9003      	str	r0, [sp, #12]
 8005e28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e2a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005e2e:	9007      	str	r0, [sp, #28]
 8005e30:	4809      	ldr	r0, [pc, #36]	@ (8005e58 <siscanf+0x54>)
 8005e32:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005e36:	4632      	mov	r2, r6
 8005e38:	4623      	mov	r3, r4
 8005e3a:	a902      	add	r1, sp, #8
 8005e3c:	6800      	ldr	r0, [r0, #0]
 8005e3e:	950f      	str	r5, [sp, #60]	@ 0x3c
 8005e40:	9514      	str	r5, [sp, #80]	@ 0x50
 8005e42:	9401      	str	r4, [sp, #4]
 8005e44:	f000 fb0e 	bl	8006464 <__ssvfiscanf_r>
 8005e48:	b01d      	add	sp, #116	@ 0x74
 8005e4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005e4e:	b003      	add	sp, #12
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	08005e5d 	.word	0x08005e5d
 8005e58:	20000028 	.word	0x20000028

08005e5c <__seofread>:
 8005e5c:	2000      	movs	r0, #0
 8005e5e:	4770      	bx	lr

08005e60 <memset>:
 8005e60:	4603      	mov	r3, r0
 8005e62:	4402      	add	r2, r0
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d100      	bne.n	8005e6a <memset+0xa>
 8005e68:	4770      	bx	lr
 8005e6a:	f803 1b01 	strb.w	r1, [r3], #1
 8005e6e:	e7f9      	b.n	8005e64 <memset+0x4>

08005e70 <strncmp>:
 8005e70:	b510      	push	{r4, lr}
 8005e72:	b16a      	cbz	r2, 8005e90 <strncmp+0x20>
 8005e74:	3901      	subs	r1, #1
 8005e76:	1884      	adds	r4, r0, r2
 8005e78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e7c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d103      	bne.n	8005e8c <strncmp+0x1c>
 8005e84:	42a0      	cmp	r0, r4
 8005e86:	d001      	beq.n	8005e8c <strncmp+0x1c>
 8005e88:	2a00      	cmp	r2, #0
 8005e8a:	d1f5      	bne.n	8005e78 <strncmp+0x8>
 8005e8c:	1ad0      	subs	r0, r2, r3
 8005e8e:	bd10      	pop	{r4, pc}
 8005e90:	4610      	mov	r0, r2
 8005e92:	e7fc      	b.n	8005e8e <strncmp+0x1e>

08005e94 <strncpy>:
 8005e94:	4603      	mov	r3, r0
 8005e96:	b510      	push	{r4, lr}
 8005e98:	3901      	subs	r1, #1
 8005e9a:	b132      	cbz	r2, 8005eaa <strncpy+0x16>
 8005e9c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005ea0:	3a01      	subs	r2, #1
 8005ea2:	f803 4b01 	strb.w	r4, [r3], #1
 8005ea6:	2c00      	cmp	r4, #0
 8005ea8:	d1f7      	bne.n	8005e9a <strncpy+0x6>
 8005eaa:	2100      	movs	r1, #0
 8005eac:	441a      	add	r2, r3
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d100      	bne.n	8005eb4 <strncpy+0x20>
 8005eb2:	bd10      	pop	{r4, pc}
 8005eb4:	f803 1b01 	strb.w	r1, [r3], #1
 8005eb8:	e7f9      	b.n	8005eae <strncpy+0x1a>
	...

08005ebc <__errno>:
 8005ebc:	4b01      	ldr	r3, [pc, #4]	@ (8005ec4 <__errno+0x8>)
 8005ebe:	6818      	ldr	r0, [r3, #0]
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	20000028 	.word	0x20000028

08005ec8 <__libc_init_array>:
 8005ec8:	b570      	push	{r4, r5, r6, lr}
 8005eca:	2600      	movs	r6, #0
 8005ecc:	4d0c      	ldr	r5, [pc, #48]	@ (8005f00 <__libc_init_array+0x38>)
 8005ece:	4c0d      	ldr	r4, [pc, #52]	@ (8005f04 <__libc_init_array+0x3c>)
 8005ed0:	1b64      	subs	r4, r4, r5
 8005ed2:	10a4      	asrs	r4, r4, #2
 8005ed4:	42a6      	cmp	r6, r4
 8005ed6:	d109      	bne.n	8005eec <__libc_init_array+0x24>
 8005ed8:	f001 f872 	bl	8006fc0 <_init>
 8005edc:	2600      	movs	r6, #0
 8005ede:	4d0a      	ldr	r5, [pc, #40]	@ (8005f08 <__libc_init_array+0x40>)
 8005ee0:	4c0a      	ldr	r4, [pc, #40]	@ (8005f0c <__libc_init_array+0x44>)
 8005ee2:	1b64      	subs	r4, r4, r5
 8005ee4:	10a4      	asrs	r4, r4, #2
 8005ee6:	42a6      	cmp	r6, r4
 8005ee8:	d105      	bne.n	8005ef6 <__libc_init_array+0x2e>
 8005eea:	bd70      	pop	{r4, r5, r6, pc}
 8005eec:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ef0:	4798      	blx	r3
 8005ef2:	3601      	adds	r6, #1
 8005ef4:	e7ee      	b.n	8005ed4 <__libc_init_array+0xc>
 8005ef6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005efa:	4798      	blx	r3
 8005efc:	3601      	adds	r6, #1
 8005efe:	e7f2      	b.n	8005ee6 <__libc_init_array+0x1e>
 8005f00:	0800732c 	.word	0x0800732c
 8005f04:	0800732c 	.word	0x0800732c
 8005f08:	0800732c 	.word	0x0800732c
 8005f0c:	08007330 	.word	0x08007330

08005f10 <__retarget_lock_acquire_recursive>:
 8005f10:	4770      	bx	lr

08005f12 <__retarget_lock_release_recursive>:
 8005f12:	4770      	bx	lr

08005f14 <_free_r>:
 8005f14:	b538      	push	{r3, r4, r5, lr}
 8005f16:	4605      	mov	r5, r0
 8005f18:	2900      	cmp	r1, #0
 8005f1a:	d040      	beq.n	8005f9e <_free_r+0x8a>
 8005f1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f20:	1f0c      	subs	r4, r1, #4
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	bfb8      	it	lt
 8005f26:	18e4      	addlt	r4, r4, r3
 8005f28:	f000 f8de 	bl	80060e8 <__malloc_lock>
 8005f2c:	4a1c      	ldr	r2, [pc, #112]	@ (8005fa0 <_free_r+0x8c>)
 8005f2e:	6813      	ldr	r3, [r2, #0]
 8005f30:	b933      	cbnz	r3, 8005f40 <_free_r+0x2c>
 8005f32:	6063      	str	r3, [r4, #4]
 8005f34:	6014      	str	r4, [r2, #0]
 8005f36:	4628      	mov	r0, r5
 8005f38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f3c:	f000 b8da 	b.w	80060f4 <__malloc_unlock>
 8005f40:	42a3      	cmp	r3, r4
 8005f42:	d908      	bls.n	8005f56 <_free_r+0x42>
 8005f44:	6820      	ldr	r0, [r4, #0]
 8005f46:	1821      	adds	r1, r4, r0
 8005f48:	428b      	cmp	r3, r1
 8005f4a:	bf01      	itttt	eq
 8005f4c:	6819      	ldreq	r1, [r3, #0]
 8005f4e:	685b      	ldreq	r3, [r3, #4]
 8005f50:	1809      	addeq	r1, r1, r0
 8005f52:	6021      	streq	r1, [r4, #0]
 8005f54:	e7ed      	b.n	8005f32 <_free_r+0x1e>
 8005f56:	461a      	mov	r2, r3
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	b10b      	cbz	r3, 8005f60 <_free_r+0x4c>
 8005f5c:	42a3      	cmp	r3, r4
 8005f5e:	d9fa      	bls.n	8005f56 <_free_r+0x42>
 8005f60:	6811      	ldr	r1, [r2, #0]
 8005f62:	1850      	adds	r0, r2, r1
 8005f64:	42a0      	cmp	r0, r4
 8005f66:	d10b      	bne.n	8005f80 <_free_r+0x6c>
 8005f68:	6820      	ldr	r0, [r4, #0]
 8005f6a:	4401      	add	r1, r0
 8005f6c:	1850      	adds	r0, r2, r1
 8005f6e:	4283      	cmp	r3, r0
 8005f70:	6011      	str	r1, [r2, #0]
 8005f72:	d1e0      	bne.n	8005f36 <_free_r+0x22>
 8005f74:	6818      	ldr	r0, [r3, #0]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	4408      	add	r0, r1
 8005f7a:	6010      	str	r0, [r2, #0]
 8005f7c:	6053      	str	r3, [r2, #4]
 8005f7e:	e7da      	b.n	8005f36 <_free_r+0x22>
 8005f80:	d902      	bls.n	8005f88 <_free_r+0x74>
 8005f82:	230c      	movs	r3, #12
 8005f84:	602b      	str	r3, [r5, #0]
 8005f86:	e7d6      	b.n	8005f36 <_free_r+0x22>
 8005f88:	6820      	ldr	r0, [r4, #0]
 8005f8a:	1821      	adds	r1, r4, r0
 8005f8c:	428b      	cmp	r3, r1
 8005f8e:	bf01      	itttt	eq
 8005f90:	6819      	ldreq	r1, [r3, #0]
 8005f92:	685b      	ldreq	r3, [r3, #4]
 8005f94:	1809      	addeq	r1, r1, r0
 8005f96:	6021      	streq	r1, [r4, #0]
 8005f98:	6063      	str	r3, [r4, #4]
 8005f9a:	6054      	str	r4, [r2, #4]
 8005f9c:	e7cb      	b.n	8005f36 <_free_r+0x22>
 8005f9e:	bd38      	pop	{r3, r4, r5, pc}
 8005fa0:	200004a0 	.word	0x200004a0

08005fa4 <sbrk_aligned>:
 8005fa4:	b570      	push	{r4, r5, r6, lr}
 8005fa6:	4e0f      	ldr	r6, [pc, #60]	@ (8005fe4 <sbrk_aligned+0x40>)
 8005fa8:	460c      	mov	r4, r1
 8005faa:	6831      	ldr	r1, [r6, #0]
 8005fac:	4605      	mov	r5, r0
 8005fae:	b911      	cbnz	r1, 8005fb6 <sbrk_aligned+0x12>
 8005fb0:	f000 ff34 	bl	8006e1c <_sbrk_r>
 8005fb4:	6030      	str	r0, [r6, #0]
 8005fb6:	4621      	mov	r1, r4
 8005fb8:	4628      	mov	r0, r5
 8005fba:	f000 ff2f 	bl	8006e1c <_sbrk_r>
 8005fbe:	1c43      	adds	r3, r0, #1
 8005fc0:	d103      	bne.n	8005fca <sbrk_aligned+0x26>
 8005fc2:	f04f 34ff 	mov.w	r4, #4294967295
 8005fc6:	4620      	mov	r0, r4
 8005fc8:	bd70      	pop	{r4, r5, r6, pc}
 8005fca:	1cc4      	adds	r4, r0, #3
 8005fcc:	f024 0403 	bic.w	r4, r4, #3
 8005fd0:	42a0      	cmp	r0, r4
 8005fd2:	d0f8      	beq.n	8005fc6 <sbrk_aligned+0x22>
 8005fd4:	1a21      	subs	r1, r4, r0
 8005fd6:	4628      	mov	r0, r5
 8005fd8:	f000 ff20 	bl	8006e1c <_sbrk_r>
 8005fdc:	3001      	adds	r0, #1
 8005fde:	d1f2      	bne.n	8005fc6 <sbrk_aligned+0x22>
 8005fe0:	e7ef      	b.n	8005fc2 <sbrk_aligned+0x1e>
 8005fe2:	bf00      	nop
 8005fe4:	2000049c 	.word	0x2000049c

08005fe8 <_malloc_r>:
 8005fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fec:	1ccd      	adds	r5, r1, #3
 8005fee:	f025 0503 	bic.w	r5, r5, #3
 8005ff2:	3508      	adds	r5, #8
 8005ff4:	2d0c      	cmp	r5, #12
 8005ff6:	bf38      	it	cc
 8005ff8:	250c      	movcc	r5, #12
 8005ffa:	2d00      	cmp	r5, #0
 8005ffc:	4606      	mov	r6, r0
 8005ffe:	db01      	blt.n	8006004 <_malloc_r+0x1c>
 8006000:	42a9      	cmp	r1, r5
 8006002:	d904      	bls.n	800600e <_malloc_r+0x26>
 8006004:	230c      	movs	r3, #12
 8006006:	6033      	str	r3, [r6, #0]
 8006008:	2000      	movs	r0, #0
 800600a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800600e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80060e4 <_malloc_r+0xfc>
 8006012:	f000 f869 	bl	80060e8 <__malloc_lock>
 8006016:	f8d8 3000 	ldr.w	r3, [r8]
 800601a:	461c      	mov	r4, r3
 800601c:	bb44      	cbnz	r4, 8006070 <_malloc_r+0x88>
 800601e:	4629      	mov	r1, r5
 8006020:	4630      	mov	r0, r6
 8006022:	f7ff ffbf 	bl	8005fa4 <sbrk_aligned>
 8006026:	1c43      	adds	r3, r0, #1
 8006028:	4604      	mov	r4, r0
 800602a:	d158      	bne.n	80060de <_malloc_r+0xf6>
 800602c:	f8d8 4000 	ldr.w	r4, [r8]
 8006030:	4627      	mov	r7, r4
 8006032:	2f00      	cmp	r7, #0
 8006034:	d143      	bne.n	80060be <_malloc_r+0xd6>
 8006036:	2c00      	cmp	r4, #0
 8006038:	d04b      	beq.n	80060d2 <_malloc_r+0xea>
 800603a:	6823      	ldr	r3, [r4, #0]
 800603c:	4639      	mov	r1, r7
 800603e:	4630      	mov	r0, r6
 8006040:	eb04 0903 	add.w	r9, r4, r3
 8006044:	f000 feea 	bl	8006e1c <_sbrk_r>
 8006048:	4581      	cmp	r9, r0
 800604a:	d142      	bne.n	80060d2 <_malloc_r+0xea>
 800604c:	6821      	ldr	r1, [r4, #0]
 800604e:	4630      	mov	r0, r6
 8006050:	1a6d      	subs	r5, r5, r1
 8006052:	4629      	mov	r1, r5
 8006054:	f7ff ffa6 	bl	8005fa4 <sbrk_aligned>
 8006058:	3001      	adds	r0, #1
 800605a:	d03a      	beq.n	80060d2 <_malloc_r+0xea>
 800605c:	6823      	ldr	r3, [r4, #0]
 800605e:	442b      	add	r3, r5
 8006060:	6023      	str	r3, [r4, #0]
 8006062:	f8d8 3000 	ldr.w	r3, [r8]
 8006066:	685a      	ldr	r2, [r3, #4]
 8006068:	bb62      	cbnz	r2, 80060c4 <_malloc_r+0xdc>
 800606a:	f8c8 7000 	str.w	r7, [r8]
 800606e:	e00f      	b.n	8006090 <_malloc_r+0xa8>
 8006070:	6822      	ldr	r2, [r4, #0]
 8006072:	1b52      	subs	r2, r2, r5
 8006074:	d420      	bmi.n	80060b8 <_malloc_r+0xd0>
 8006076:	2a0b      	cmp	r2, #11
 8006078:	d917      	bls.n	80060aa <_malloc_r+0xc2>
 800607a:	1961      	adds	r1, r4, r5
 800607c:	42a3      	cmp	r3, r4
 800607e:	6025      	str	r5, [r4, #0]
 8006080:	bf18      	it	ne
 8006082:	6059      	strne	r1, [r3, #4]
 8006084:	6863      	ldr	r3, [r4, #4]
 8006086:	bf08      	it	eq
 8006088:	f8c8 1000 	streq.w	r1, [r8]
 800608c:	5162      	str	r2, [r4, r5]
 800608e:	604b      	str	r3, [r1, #4]
 8006090:	4630      	mov	r0, r6
 8006092:	f000 f82f 	bl	80060f4 <__malloc_unlock>
 8006096:	f104 000b 	add.w	r0, r4, #11
 800609a:	1d23      	adds	r3, r4, #4
 800609c:	f020 0007 	bic.w	r0, r0, #7
 80060a0:	1ac2      	subs	r2, r0, r3
 80060a2:	bf1c      	itt	ne
 80060a4:	1a1b      	subne	r3, r3, r0
 80060a6:	50a3      	strne	r3, [r4, r2]
 80060a8:	e7af      	b.n	800600a <_malloc_r+0x22>
 80060aa:	6862      	ldr	r2, [r4, #4]
 80060ac:	42a3      	cmp	r3, r4
 80060ae:	bf0c      	ite	eq
 80060b0:	f8c8 2000 	streq.w	r2, [r8]
 80060b4:	605a      	strne	r2, [r3, #4]
 80060b6:	e7eb      	b.n	8006090 <_malloc_r+0xa8>
 80060b8:	4623      	mov	r3, r4
 80060ba:	6864      	ldr	r4, [r4, #4]
 80060bc:	e7ae      	b.n	800601c <_malloc_r+0x34>
 80060be:	463c      	mov	r4, r7
 80060c0:	687f      	ldr	r7, [r7, #4]
 80060c2:	e7b6      	b.n	8006032 <_malloc_r+0x4a>
 80060c4:	461a      	mov	r2, r3
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	42a3      	cmp	r3, r4
 80060ca:	d1fb      	bne.n	80060c4 <_malloc_r+0xdc>
 80060cc:	2300      	movs	r3, #0
 80060ce:	6053      	str	r3, [r2, #4]
 80060d0:	e7de      	b.n	8006090 <_malloc_r+0xa8>
 80060d2:	230c      	movs	r3, #12
 80060d4:	4630      	mov	r0, r6
 80060d6:	6033      	str	r3, [r6, #0]
 80060d8:	f000 f80c 	bl	80060f4 <__malloc_unlock>
 80060dc:	e794      	b.n	8006008 <_malloc_r+0x20>
 80060de:	6005      	str	r5, [r0, #0]
 80060e0:	e7d6      	b.n	8006090 <_malloc_r+0xa8>
 80060e2:	bf00      	nop
 80060e4:	200004a0 	.word	0x200004a0

080060e8 <__malloc_lock>:
 80060e8:	4801      	ldr	r0, [pc, #4]	@ (80060f0 <__malloc_lock+0x8>)
 80060ea:	f7ff bf11 	b.w	8005f10 <__retarget_lock_acquire_recursive>
 80060ee:	bf00      	nop
 80060f0:	20000498 	.word	0x20000498

080060f4 <__malloc_unlock>:
 80060f4:	4801      	ldr	r0, [pc, #4]	@ (80060fc <__malloc_unlock+0x8>)
 80060f6:	f7ff bf0c 	b.w	8005f12 <__retarget_lock_release_recursive>
 80060fa:	bf00      	nop
 80060fc:	20000498 	.word	0x20000498

08006100 <__ssputs_r>:
 8006100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006104:	461f      	mov	r7, r3
 8006106:	688e      	ldr	r6, [r1, #8]
 8006108:	4682      	mov	sl, r0
 800610a:	42be      	cmp	r6, r7
 800610c:	460c      	mov	r4, r1
 800610e:	4690      	mov	r8, r2
 8006110:	680b      	ldr	r3, [r1, #0]
 8006112:	d82d      	bhi.n	8006170 <__ssputs_r+0x70>
 8006114:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006118:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800611c:	d026      	beq.n	800616c <__ssputs_r+0x6c>
 800611e:	6965      	ldr	r5, [r4, #20]
 8006120:	6909      	ldr	r1, [r1, #16]
 8006122:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006126:	eba3 0901 	sub.w	r9, r3, r1
 800612a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800612e:	1c7b      	adds	r3, r7, #1
 8006130:	444b      	add	r3, r9
 8006132:	106d      	asrs	r5, r5, #1
 8006134:	429d      	cmp	r5, r3
 8006136:	bf38      	it	cc
 8006138:	461d      	movcc	r5, r3
 800613a:	0553      	lsls	r3, r2, #21
 800613c:	d527      	bpl.n	800618e <__ssputs_r+0x8e>
 800613e:	4629      	mov	r1, r5
 8006140:	f7ff ff52 	bl	8005fe8 <_malloc_r>
 8006144:	4606      	mov	r6, r0
 8006146:	b360      	cbz	r0, 80061a2 <__ssputs_r+0xa2>
 8006148:	464a      	mov	r2, r9
 800614a:	6921      	ldr	r1, [r4, #16]
 800614c:	f000 fe84 	bl	8006e58 <memcpy>
 8006150:	89a3      	ldrh	r3, [r4, #12]
 8006152:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006156:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800615a:	81a3      	strh	r3, [r4, #12]
 800615c:	6126      	str	r6, [r4, #16]
 800615e:	444e      	add	r6, r9
 8006160:	6026      	str	r6, [r4, #0]
 8006162:	463e      	mov	r6, r7
 8006164:	6165      	str	r5, [r4, #20]
 8006166:	eba5 0509 	sub.w	r5, r5, r9
 800616a:	60a5      	str	r5, [r4, #8]
 800616c:	42be      	cmp	r6, r7
 800616e:	d900      	bls.n	8006172 <__ssputs_r+0x72>
 8006170:	463e      	mov	r6, r7
 8006172:	4632      	mov	r2, r6
 8006174:	4641      	mov	r1, r8
 8006176:	6820      	ldr	r0, [r4, #0]
 8006178:	f000 fe35 	bl	8006de6 <memmove>
 800617c:	2000      	movs	r0, #0
 800617e:	68a3      	ldr	r3, [r4, #8]
 8006180:	1b9b      	subs	r3, r3, r6
 8006182:	60a3      	str	r3, [r4, #8]
 8006184:	6823      	ldr	r3, [r4, #0]
 8006186:	4433      	add	r3, r6
 8006188:	6023      	str	r3, [r4, #0]
 800618a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800618e:	462a      	mov	r2, r5
 8006190:	f000 fe70 	bl	8006e74 <_realloc_r>
 8006194:	4606      	mov	r6, r0
 8006196:	2800      	cmp	r0, #0
 8006198:	d1e0      	bne.n	800615c <__ssputs_r+0x5c>
 800619a:	4650      	mov	r0, sl
 800619c:	6921      	ldr	r1, [r4, #16]
 800619e:	f7ff feb9 	bl	8005f14 <_free_r>
 80061a2:	230c      	movs	r3, #12
 80061a4:	f8ca 3000 	str.w	r3, [sl]
 80061a8:	89a3      	ldrh	r3, [r4, #12]
 80061aa:	f04f 30ff 	mov.w	r0, #4294967295
 80061ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061b2:	81a3      	strh	r3, [r4, #12]
 80061b4:	e7e9      	b.n	800618a <__ssputs_r+0x8a>
	...

080061b8 <_svfiprintf_r>:
 80061b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061bc:	4698      	mov	r8, r3
 80061be:	898b      	ldrh	r3, [r1, #12]
 80061c0:	4607      	mov	r7, r0
 80061c2:	061b      	lsls	r3, r3, #24
 80061c4:	460d      	mov	r5, r1
 80061c6:	4614      	mov	r4, r2
 80061c8:	b09d      	sub	sp, #116	@ 0x74
 80061ca:	d510      	bpl.n	80061ee <_svfiprintf_r+0x36>
 80061cc:	690b      	ldr	r3, [r1, #16]
 80061ce:	b973      	cbnz	r3, 80061ee <_svfiprintf_r+0x36>
 80061d0:	2140      	movs	r1, #64	@ 0x40
 80061d2:	f7ff ff09 	bl	8005fe8 <_malloc_r>
 80061d6:	6028      	str	r0, [r5, #0]
 80061d8:	6128      	str	r0, [r5, #16]
 80061da:	b930      	cbnz	r0, 80061ea <_svfiprintf_r+0x32>
 80061dc:	230c      	movs	r3, #12
 80061de:	603b      	str	r3, [r7, #0]
 80061e0:	f04f 30ff 	mov.w	r0, #4294967295
 80061e4:	b01d      	add	sp, #116	@ 0x74
 80061e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061ea:	2340      	movs	r3, #64	@ 0x40
 80061ec:	616b      	str	r3, [r5, #20]
 80061ee:	2300      	movs	r3, #0
 80061f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80061f2:	2320      	movs	r3, #32
 80061f4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80061f8:	2330      	movs	r3, #48	@ 0x30
 80061fa:	f04f 0901 	mov.w	r9, #1
 80061fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8006202:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800639c <_svfiprintf_r+0x1e4>
 8006206:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800620a:	4623      	mov	r3, r4
 800620c:	469a      	mov	sl, r3
 800620e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006212:	b10a      	cbz	r2, 8006218 <_svfiprintf_r+0x60>
 8006214:	2a25      	cmp	r2, #37	@ 0x25
 8006216:	d1f9      	bne.n	800620c <_svfiprintf_r+0x54>
 8006218:	ebba 0b04 	subs.w	fp, sl, r4
 800621c:	d00b      	beq.n	8006236 <_svfiprintf_r+0x7e>
 800621e:	465b      	mov	r3, fp
 8006220:	4622      	mov	r2, r4
 8006222:	4629      	mov	r1, r5
 8006224:	4638      	mov	r0, r7
 8006226:	f7ff ff6b 	bl	8006100 <__ssputs_r>
 800622a:	3001      	adds	r0, #1
 800622c:	f000 80a7 	beq.w	800637e <_svfiprintf_r+0x1c6>
 8006230:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006232:	445a      	add	r2, fp
 8006234:	9209      	str	r2, [sp, #36]	@ 0x24
 8006236:	f89a 3000 	ldrb.w	r3, [sl]
 800623a:	2b00      	cmp	r3, #0
 800623c:	f000 809f 	beq.w	800637e <_svfiprintf_r+0x1c6>
 8006240:	2300      	movs	r3, #0
 8006242:	f04f 32ff 	mov.w	r2, #4294967295
 8006246:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800624a:	f10a 0a01 	add.w	sl, sl, #1
 800624e:	9304      	str	r3, [sp, #16]
 8006250:	9307      	str	r3, [sp, #28]
 8006252:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006256:	931a      	str	r3, [sp, #104]	@ 0x68
 8006258:	4654      	mov	r4, sl
 800625a:	2205      	movs	r2, #5
 800625c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006260:	484e      	ldr	r0, [pc, #312]	@ (800639c <_svfiprintf_r+0x1e4>)
 8006262:	f000 fdeb 	bl	8006e3c <memchr>
 8006266:	9a04      	ldr	r2, [sp, #16]
 8006268:	b9d8      	cbnz	r0, 80062a2 <_svfiprintf_r+0xea>
 800626a:	06d0      	lsls	r0, r2, #27
 800626c:	bf44      	itt	mi
 800626e:	2320      	movmi	r3, #32
 8006270:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006274:	0711      	lsls	r1, r2, #28
 8006276:	bf44      	itt	mi
 8006278:	232b      	movmi	r3, #43	@ 0x2b
 800627a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800627e:	f89a 3000 	ldrb.w	r3, [sl]
 8006282:	2b2a      	cmp	r3, #42	@ 0x2a
 8006284:	d015      	beq.n	80062b2 <_svfiprintf_r+0xfa>
 8006286:	4654      	mov	r4, sl
 8006288:	2000      	movs	r0, #0
 800628a:	f04f 0c0a 	mov.w	ip, #10
 800628e:	9a07      	ldr	r2, [sp, #28]
 8006290:	4621      	mov	r1, r4
 8006292:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006296:	3b30      	subs	r3, #48	@ 0x30
 8006298:	2b09      	cmp	r3, #9
 800629a:	d94b      	bls.n	8006334 <_svfiprintf_r+0x17c>
 800629c:	b1b0      	cbz	r0, 80062cc <_svfiprintf_r+0x114>
 800629e:	9207      	str	r2, [sp, #28]
 80062a0:	e014      	b.n	80062cc <_svfiprintf_r+0x114>
 80062a2:	eba0 0308 	sub.w	r3, r0, r8
 80062a6:	fa09 f303 	lsl.w	r3, r9, r3
 80062aa:	4313      	orrs	r3, r2
 80062ac:	46a2      	mov	sl, r4
 80062ae:	9304      	str	r3, [sp, #16]
 80062b0:	e7d2      	b.n	8006258 <_svfiprintf_r+0xa0>
 80062b2:	9b03      	ldr	r3, [sp, #12]
 80062b4:	1d19      	adds	r1, r3, #4
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	9103      	str	r1, [sp, #12]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	bfbb      	ittet	lt
 80062be:	425b      	neglt	r3, r3
 80062c0:	f042 0202 	orrlt.w	r2, r2, #2
 80062c4:	9307      	strge	r3, [sp, #28]
 80062c6:	9307      	strlt	r3, [sp, #28]
 80062c8:	bfb8      	it	lt
 80062ca:	9204      	strlt	r2, [sp, #16]
 80062cc:	7823      	ldrb	r3, [r4, #0]
 80062ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80062d0:	d10a      	bne.n	80062e8 <_svfiprintf_r+0x130>
 80062d2:	7863      	ldrb	r3, [r4, #1]
 80062d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80062d6:	d132      	bne.n	800633e <_svfiprintf_r+0x186>
 80062d8:	9b03      	ldr	r3, [sp, #12]
 80062da:	3402      	adds	r4, #2
 80062dc:	1d1a      	adds	r2, r3, #4
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	9203      	str	r2, [sp, #12]
 80062e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80062e6:	9305      	str	r3, [sp, #20]
 80062e8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80063a0 <_svfiprintf_r+0x1e8>
 80062ec:	2203      	movs	r2, #3
 80062ee:	4650      	mov	r0, sl
 80062f0:	7821      	ldrb	r1, [r4, #0]
 80062f2:	f000 fda3 	bl	8006e3c <memchr>
 80062f6:	b138      	cbz	r0, 8006308 <_svfiprintf_r+0x150>
 80062f8:	2240      	movs	r2, #64	@ 0x40
 80062fa:	9b04      	ldr	r3, [sp, #16]
 80062fc:	eba0 000a 	sub.w	r0, r0, sl
 8006300:	4082      	lsls	r2, r0
 8006302:	4313      	orrs	r3, r2
 8006304:	3401      	adds	r4, #1
 8006306:	9304      	str	r3, [sp, #16]
 8006308:	f814 1b01 	ldrb.w	r1, [r4], #1
 800630c:	2206      	movs	r2, #6
 800630e:	4825      	ldr	r0, [pc, #148]	@ (80063a4 <_svfiprintf_r+0x1ec>)
 8006310:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006314:	f000 fd92 	bl	8006e3c <memchr>
 8006318:	2800      	cmp	r0, #0
 800631a:	d036      	beq.n	800638a <_svfiprintf_r+0x1d2>
 800631c:	4b22      	ldr	r3, [pc, #136]	@ (80063a8 <_svfiprintf_r+0x1f0>)
 800631e:	bb1b      	cbnz	r3, 8006368 <_svfiprintf_r+0x1b0>
 8006320:	9b03      	ldr	r3, [sp, #12]
 8006322:	3307      	adds	r3, #7
 8006324:	f023 0307 	bic.w	r3, r3, #7
 8006328:	3308      	adds	r3, #8
 800632a:	9303      	str	r3, [sp, #12]
 800632c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800632e:	4433      	add	r3, r6
 8006330:	9309      	str	r3, [sp, #36]	@ 0x24
 8006332:	e76a      	b.n	800620a <_svfiprintf_r+0x52>
 8006334:	460c      	mov	r4, r1
 8006336:	2001      	movs	r0, #1
 8006338:	fb0c 3202 	mla	r2, ip, r2, r3
 800633c:	e7a8      	b.n	8006290 <_svfiprintf_r+0xd8>
 800633e:	2300      	movs	r3, #0
 8006340:	f04f 0c0a 	mov.w	ip, #10
 8006344:	4619      	mov	r1, r3
 8006346:	3401      	adds	r4, #1
 8006348:	9305      	str	r3, [sp, #20]
 800634a:	4620      	mov	r0, r4
 800634c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006350:	3a30      	subs	r2, #48	@ 0x30
 8006352:	2a09      	cmp	r2, #9
 8006354:	d903      	bls.n	800635e <_svfiprintf_r+0x1a6>
 8006356:	2b00      	cmp	r3, #0
 8006358:	d0c6      	beq.n	80062e8 <_svfiprintf_r+0x130>
 800635a:	9105      	str	r1, [sp, #20]
 800635c:	e7c4      	b.n	80062e8 <_svfiprintf_r+0x130>
 800635e:	4604      	mov	r4, r0
 8006360:	2301      	movs	r3, #1
 8006362:	fb0c 2101 	mla	r1, ip, r1, r2
 8006366:	e7f0      	b.n	800634a <_svfiprintf_r+0x192>
 8006368:	ab03      	add	r3, sp, #12
 800636a:	9300      	str	r3, [sp, #0]
 800636c:	462a      	mov	r2, r5
 800636e:	4638      	mov	r0, r7
 8006370:	4b0e      	ldr	r3, [pc, #56]	@ (80063ac <_svfiprintf_r+0x1f4>)
 8006372:	a904      	add	r1, sp, #16
 8006374:	f3af 8000 	nop.w
 8006378:	1c42      	adds	r2, r0, #1
 800637a:	4606      	mov	r6, r0
 800637c:	d1d6      	bne.n	800632c <_svfiprintf_r+0x174>
 800637e:	89ab      	ldrh	r3, [r5, #12]
 8006380:	065b      	lsls	r3, r3, #25
 8006382:	f53f af2d 	bmi.w	80061e0 <_svfiprintf_r+0x28>
 8006386:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006388:	e72c      	b.n	80061e4 <_svfiprintf_r+0x2c>
 800638a:	ab03      	add	r3, sp, #12
 800638c:	9300      	str	r3, [sp, #0]
 800638e:	462a      	mov	r2, r5
 8006390:	4638      	mov	r0, r7
 8006392:	4b06      	ldr	r3, [pc, #24]	@ (80063ac <_svfiprintf_r+0x1f4>)
 8006394:	a904      	add	r1, sp, #16
 8006396:	f000 fa4b 	bl	8006830 <_printf_i>
 800639a:	e7ed      	b.n	8006378 <_svfiprintf_r+0x1c0>
 800639c:	080072d3 	.word	0x080072d3
 80063a0:	080072d9 	.word	0x080072d9
 80063a4:	080072dd 	.word	0x080072dd
 80063a8:	00000000 	.word	0x00000000
 80063ac:	08006101 	.word	0x08006101

080063b0 <_sungetc_r>:
 80063b0:	b538      	push	{r3, r4, r5, lr}
 80063b2:	1c4b      	adds	r3, r1, #1
 80063b4:	4614      	mov	r4, r2
 80063b6:	d103      	bne.n	80063c0 <_sungetc_r+0x10>
 80063b8:	f04f 35ff 	mov.w	r5, #4294967295
 80063bc:	4628      	mov	r0, r5
 80063be:	bd38      	pop	{r3, r4, r5, pc}
 80063c0:	8993      	ldrh	r3, [r2, #12]
 80063c2:	b2cd      	uxtb	r5, r1
 80063c4:	f023 0320 	bic.w	r3, r3, #32
 80063c8:	8193      	strh	r3, [r2, #12]
 80063ca:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80063cc:	6852      	ldr	r2, [r2, #4]
 80063ce:	b18b      	cbz	r3, 80063f4 <_sungetc_r+0x44>
 80063d0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80063d2:	4293      	cmp	r3, r2
 80063d4:	dd08      	ble.n	80063e8 <_sungetc_r+0x38>
 80063d6:	6823      	ldr	r3, [r4, #0]
 80063d8:	1e5a      	subs	r2, r3, #1
 80063da:	6022      	str	r2, [r4, #0]
 80063dc:	f803 5c01 	strb.w	r5, [r3, #-1]
 80063e0:	6863      	ldr	r3, [r4, #4]
 80063e2:	3301      	adds	r3, #1
 80063e4:	6063      	str	r3, [r4, #4]
 80063e6:	e7e9      	b.n	80063bc <_sungetc_r+0xc>
 80063e8:	4621      	mov	r1, r4
 80063ea:	f000 fcc4 	bl	8006d76 <__submore>
 80063ee:	2800      	cmp	r0, #0
 80063f0:	d0f1      	beq.n	80063d6 <_sungetc_r+0x26>
 80063f2:	e7e1      	b.n	80063b8 <_sungetc_r+0x8>
 80063f4:	6921      	ldr	r1, [r4, #16]
 80063f6:	6823      	ldr	r3, [r4, #0]
 80063f8:	b151      	cbz	r1, 8006410 <_sungetc_r+0x60>
 80063fa:	4299      	cmp	r1, r3
 80063fc:	d208      	bcs.n	8006410 <_sungetc_r+0x60>
 80063fe:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8006402:	42a9      	cmp	r1, r5
 8006404:	d104      	bne.n	8006410 <_sungetc_r+0x60>
 8006406:	3b01      	subs	r3, #1
 8006408:	3201      	adds	r2, #1
 800640a:	6023      	str	r3, [r4, #0]
 800640c:	6062      	str	r2, [r4, #4]
 800640e:	e7d5      	b.n	80063bc <_sungetc_r+0xc>
 8006410:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8006414:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006418:	6363      	str	r3, [r4, #52]	@ 0x34
 800641a:	2303      	movs	r3, #3
 800641c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800641e:	4623      	mov	r3, r4
 8006420:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006424:	6023      	str	r3, [r4, #0]
 8006426:	2301      	movs	r3, #1
 8006428:	e7dc      	b.n	80063e4 <_sungetc_r+0x34>

0800642a <__ssrefill_r>:
 800642a:	b510      	push	{r4, lr}
 800642c:	460c      	mov	r4, r1
 800642e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8006430:	b169      	cbz	r1, 800644e <__ssrefill_r+0x24>
 8006432:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006436:	4299      	cmp	r1, r3
 8006438:	d001      	beq.n	800643e <__ssrefill_r+0x14>
 800643a:	f7ff fd6b 	bl	8005f14 <_free_r>
 800643e:	2000      	movs	r0, #0
 8006440:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006442:	6360      	str	r0, [r4, #52]	@ 0x34
 8006444:	6063      	str	r3, [r4, #4]
 8006446:	b113      	cbz	r3, 800644e <__ssrefill_r+0x24>
 8006448:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800644a:	6023      	str	r3, [r4, #0]
 800644c:	bd10      	pop	{r4, pc}
 800644e:	6923      	ldr	r3, [r4, #16]
 8006450:	f04f 30ff 	mov.w	r0, #4294967295
 8006454:	6023      	str	r3, [r4, #0]
 8006456:	2300      	movs	r3, #0
 8006458:	6063      	str	r3, [r4, #4]
 800645a:	89a3      	ldrh	r3, [r4, #12]
 800645c:	f043 0320 	orr.w	r3, r3, #32
 8006460:	81a3      	strh	r3, [r4, #12]
 8006462:	e7f3      	b.n	800644c <__ssrefill_r+0x22>

08006464 <__ssvfiscanf_r>:
 8006464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006468:	460c      	mov	r4, r1
 800646a:	2100      	movs	r1, #0
 800646c:	4606      	mov	r6, r0
 800646e:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8006472:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8006476:	49ab      	ldr	r1, [pc, #684]	@ (8006724 <__ssvfiscanf_r+0x2c0>)
 8006478:	f10d 0804 	add.w	r8, sp, #4
 800647c:	91a0      	str	r1, [sp, #640]	@ 0x280
 800647e:	49aa      	ldr	r1, [pc, #680]	@ (8006728 <__ssvfiscanf_r+0x2c4>)
 8006480:	4faa      	ldr	r7, [pc, #680]	@ (800672c <__ssvfiscanf_r+0x2c8>)
 8006482:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8006486:	91a1      	str	r1, [sp, #644]	@ 0x284
 8006488:	9300      	str	r3, [sp, #0]
 800648a:	f892 9000 	ldrb.w	r9, [r2]
 800648e:	f1b9 0f00 	cmp.w	r9, #0
 8006492:	f000 8159 	beq.w	8006748 <__ssvfiscanf_r+0x2e4>
 8006496:	f817 3009 	ldrb.w	r3, [r7, r9]
 800649a:	1c55      	adds	r5, r2, #1
 800649c:	f013 0308 	ands.w	r3, r3, #8
 80064a0:	d019      	beq.n	80064d6 <__ssvfiscanf_r+0x72>
 80064a2:	6863      	ldr	r3, [r4, #4]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	dd0f      	ble.n	80064c8 <__ssvfiscanf_r+0x64>
 80064a8:	6823      	ldr	r3, [r4, #0]
 80064aa:	781a      	ldrb	r2, [r3, #0]
 80064ac:	5cba      	ldrb	r2, [r7, r2]
 80064ae:	0712      	lsls	r2, r2, #28
 80064b0:	d401      	bmi.n	80064b6 <__ssvfiscanf_r+0x52>
 80064b2:	462a      	mov	r2, r5
 80064b4:	e7e9      	b.n	800648a <__ssvfiscanf_r+0x26>
 80064b6:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80064b8:	3301      	adds	r3, #1
 80064ba:	3201      	adds	r2, #1
 80064bc:	9245      	str	r2, [sp, #276]	@ 0x114
 80064be:	6862      	ldr	r2, [r4, #4]
 80064c0:	6023      	str	r3, [r4, #0]
 80064c2:	3a01      	subs	r2, #1
 80064c4:	6062      	str	r2, [r4, #4]
 80064c6:	e7ec      	b.n	80064a2 <__ssvfiscanf_r+0x3e>
 80064c8:	4621      	mov	r1, r4
 80064ca:	4630      	mov	r0, r6
 80064cc:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80064ce:	4798      	blx	r3
 80064d0:	2800      	cmp	r0, #0
 80064d2:	d0e9      	beq.n	80064a8 <__ssvfiscanf_r+0x44>
 80064d4:	e7ed      	b.n	80064b2 <__ssvfiscanf_r+0x4e>
 80064d6:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 80064da:	f040 8086 	bne.w	80065ea <__ssvfiscanf_r+0x186>
 80064de:	9341      	str	r3, [sp, #260]	@ 0x104
 80064e0:	9343      	str	r3, [sp, #268]	@ 0x10c
 80064e2:	7853      	ldrb	r3, [r2, #1]
 80064e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80064e6:	bf04      	itt	eq
 80064e8:	2310      	moveq	r3, #16
 80064ea:	1c95      	addeq	r5, r2, #2
 80064ec:	f04f 020a 	mov.w	r2, #10
 80064f0:	bf08      	it	eq
 80064f2:	9341      	streq	r3, [sp, #260]	@ 0x104
 80064f4:	46aa      	mov	sl, r5
 80064f6:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80064fa:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80064fe:	2b09      	cmp	r3, #9
 8006500:	d91e      	bls.n	8006540 <__ssvfiscanf_r+0xdc>
 8006502:	f8df b22c 	ldr.w	fp, [pc, #556]	@ 8006730 <__ssvfiscanf_r+0x2cc>
 8006506:	2203      	movs	r2, #3
 8006508:	4658      	mov	r0, fp
 800650a:	f000 fc97 	bl	8006e3c <memchr>
 800650e:	b138      	cbz	r0, 8006520 <__ssvfiscanf_r+0xbc>
 8006510:	2301      	movs	r3, #1
 8006512:	4655      	mov	r5, sl
 8006514:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006516:	eba0 000b 	sub.w	r0, r0, fp
 800651a:	4083      	lsls	r3, r0
 800651c:	4313      	orrs	r3, r2
 800651e:	9341      	str	r3, [sp, #260]	@ 0x104
 8006520:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006524:	2b78      	cmp	r3, #120	@ 0x78
 8006526:	d806      	bhi.n	8006536 <__ssvfiscanf_r+0xd2>
 8006528:	2b57      	cmp	r3, #87	@ 0x57
 800652a:	d810      	bhi.n	800654e <__ssvfiscanf_r+0xea>
 800652c:	2b25      	cmp	r3, #37	@ 0x25
 800652e:	d05c      	beq.n	80065ea <__ssvfiscanf_r+0x186>
 8006530:	d856      	bhi.n	80065e0 <__ssvfiscanf_r+0x17c>
 8006532:	2b00      	cmp	r3, #0
 8006534:	d074      	beq.n	8006620 <__ssvfiscanf_r+0x1bc>
 8006536:	2303      	movs	r3, #3
 8006538:	9347      	str	r3, [sp, #284]	@ 0x11c
 800653a:	230a      	movs	r3, #10
 800653c:	9342      	str	r3, [sp, #264]	@ 0x108
 800653e:	e087      	b.n	8006650 <__ssvfiscanf_r+0x1ec>
 8006540:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8006542:	4655      	mov	r5, sl
 8006544:	fb02 1103 	mla	r1, r2, r3, r1
 8006548:	3930      	subs	r1, #48	@ 0x30
 800654a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800654c:	e7d2      	b.n	80064f4 <__ssvfiscanf_r+0x90>
 800654e:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8006552:	2a20      	cmp	r2, #32
 8006554:	d8ef      	bhi.n	8006536 <__ssvfiscanf_r+0xd2>
 8006556:	a101      	add	r1, pc, #4	@ (adr r1, 800655c <__ssvfiscanf_r+0xf8>)
 8006558:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800655c:	0800662f 	.word	0x0800662f
 8006560:	08006537 	.word	0x08006537
 8006564:	08006537 	.word	0x08006537
 8006568:	08006689 	.word	0x08006689
 800656c:	08006537 	.word	0x08006537
 8006570:	08006537 	.word	0x08006537
 8006574:	08006537 	.word	0x08006537
 8006578:	08006537 	.word	0x08006537
 800657c:	08006537 	.word	0x08006537
 8006580:	08006537 	.word	0x08006537
 8006584:	08006537 	.word	0x08006537
 8006588:	0800669f 	.word	0x0800669f
 800658c:	08006685 	.word	0x08006685
 8006590:	080065e7 	.word	0x080065e7
 8006594:	080065e7 	.word	0x080065e7
 8006598:	080065e7 	.word	0x080065e7
 800659c:	08006537 	.word	0x08006537
 80065a0:	08006641 	.word	0x08006641
 80065a4:	08006537 	.word	0x08006537
 80065a8:	08006537 	.word	0x08006537
 80065ac:	08006537 	.word	0x08006537
 80065b0:	08006537 	.word	0x08006537
 80065b4:	080066af 	.word	0x080066af
 80065b8:	08006649 	.word	0x08006649
 80065bc:	08006627 	.word	0x08006627
 80065c0:	08006537 	.word	0x08006537
 80065c4:	08006537 	.word	0x08006537
 80065c8:	080066ab 	.word	0x080066ab
 80065cc:	08006537 	.word	0x08006537
 80065d0:	08006685 	.word	0x08006685
 80065d4:	08006537 	.word	0x08006537
 80065d8:	08006537 	.word	0x08006537
 80065dc:	0800662f 	.word	0x0800662f
 80065e0:	3b45      	subs	r3, #69	@ 0x45
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d8a7      	bhi.n	8006536 <__ssvfiscanf_r+0xd2>
 80065e6:	2305      	movs	r3, #5
 80065e8:	e031      	b.n	800664e <__ssvfiscanf_r+0x1ea>
 80065ea:	6863      	ldr	r3, [r4, #4]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	dd0d      	ble.n	800660c <__ssvfiscanf_r+0x1a8>
 80065f0:	6823      	ldr	r3, [r4, #0]
 80065f2:	781a      	ldrb	r2, [r3, #0]
 80065f4:	454a      	cmp	r2, r9
 80065f6:	f040 80a7 	bne.w	8006748 <__ssvfiscanf_r+0x2e4>
 80065fa:	3301      	adds	r3, #1
 80065fc:	6862      	ldr	r2, [r4, #4]
 80065fe:	6023      	str	r3, [r4, #0]
 8006600:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8006602:	3a01      	subs	r2, #1
 8006604:	3301      	adds	r3, #1
 8006606:	6062      	str	r2, [r4, #4]
 8006608:	9345      	str	r3, [sp, #276]	@ 0x114
 800660a:	e752      	b.n	80064b2 <__ssvfiscanf_r+0x4e>
 800660c:	4621      	mov	r1, r4
 800660e:	4630      	mov	r0, r6
 8006610:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006612:	4798      	blx	r3
 8006614:	2800      	cmp	r0, #0
 8006616:	d0eb      	beq.n	80065f0 <__ssvfiscanf_r+0x18c>
 8006618:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800661a:	2800      	cmp	r0, #0
 800661c:	f040 808c 	bne.w	8006738 <__ssvfiscanf_r+0x2d4>
 8006620:	f04f 30ff 	mov.w	r0, #4294967295
 8006624:	e08c      	b.n	8006740 <__ssvfiscanf_r+0x2dc>
 8006626:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006628:	f042 0220 	orr.w	r2, r2, #32
 800662c:	9241      	str	r2, [sp, #260]	@ 0x104
 800662e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006630:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006634:	9241      	str	r2, [sp, #260]	@ 0x104
 8006636:	2210      	movs	r2, #16
 8006638:	2b6e      	cmp	r3, #110	@ 0x6e
 800663a:	9242      	str	r2, [sp, #264]	@ 0x108
 800663c:	d902      	bls.n	8006644 <__ssvfiscanf_r+0x1e0>
 800663e:	e005      	b.n	800664c <__ssvfiscanf_r+0x1e8>
 8006640:	2300      	movs	r3, #0
 8006642:	9342      	str	r3, [sp, #264]	@ 0x108
 8006644:	2303      	movs	r3, #3
 8006646:	e002      	b.n	800664e <__ssvfiscanf_r+0x1ea>
 8006648:	2308      	movs	r3, #8
 800664a:	9342      	str	r3, [sp, #264]	@ 0x108
 800664c:	2304      	movs	r3, #4
 800664e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8006650:	6863      	ldr	r3, [r4, #4]
 8006652:	2b00      	cmp	r3, #0
 8006654:	dd39      	ble.n	80066ca <__ssvfiscanf_r+0x266>
 8006656:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006658:	0659      	lsls	r1, r3, #25
 800665a:	d404      	bmi.n	8006666 <__ssvfiscanf_r+0x202>
 800665c:	6823      	ldr	r3, [r4, #0]
 800665e:	781a      	ldrb	r2, [r3, #0]
 8006660:	5cba      	ldrb	r2, [r7, r2]
 8006662:	0712      	lsls	r2, r2, #28
 8006664:	d438      	bmi.n	80066d8 <__ssvfiscanf_r+0x274>
 8006666:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8006668:	2b02      	cmp	r3, #2
 800666a:	dc47      	bgt.n	80066fc <__ssvfiscanf_r+0x298>
 800666c:	466b      	mov	r3, sp
 800666e:	4622      	mov	r2, r4
 8006670:	4630      	mov	r0, r6
 8006672:	a941      	add	r1, sp, #260	@ 0x104
 8006674:	f000 f9fa 	bl	8006a6c <_scanf_chars>
 8006678:	2801      	cmp	r0, #1
 800667a:	d065      	beq.n	8006748 <__ssvfiscanf_r+0x2e4>
 800667c:	2802      	cmp	r0, #2
 800667e:	f47f af18 	bne.w	80064b2 <__ssvfiscanf_r+0x4e>
 8006682:	e7c9      	b.n	8006618 <__ssvfiscanf_r+0x1b4>
 8006684:	220a      	movs	r2, #10
 8006686:	e7d7      	b.n	8006638 <__ssvfiscanf_r+0x1d4>
 8006688:	4629      	mov	r1, r5
 800668a:	4640      	mov	r0, r8
 800668c:	f000 fb3a 	bl	8006d04 <__sccl>
 8006690:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006692:	4605      	mov	r5, r0
 8006694:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006698:	9341      	str	r3, [sp, #260]	@ 0x104
 800669a:	2301      	movs	r3, #1
 800669c:	e7d7      	b.n	800664e <__ssvfiscanf_r+0x1ea>
 800669e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80066a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066a4:	9341      	str	r3, [sp, #260]	@ 0x104
 80066a6:	2300      	movs	r3, #0
 80066a8:	e7d1      	b.n	800664e <__ssvfiscanf_r+0x1ea>
 80066aa:	2302      	movs	r3, #2
 80066ac:	e7cf      	b.n	800664e <__ssvfiscanf_r+0x1ea>
 80066ae:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80066b0:	06c3      	lsls	r3, r0, #27
 80066b2:	f53f aefe 	bmi.w	80064b2 <__ssvfiscanf_r+0x4e>
 80066b6:	9b00      	ldr	r3, [sp, #0]
 80066b8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80066ba:	1d19      	adds	r1, r3, #4
 80066bc:	9100      	str	r1, [sp, #0]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	07c0      	lsls	r0, r0, #31
 80066c2:	bf4c      	ite	mi
 80066c4:	801a      	strhmi	r2, [r3, #0]
 80066c6:	601a      	strpl	r2, [r3, #0]
 80066c8:	e6f3      	b.n	80064b2 <__ssvfiscanf_r+0x4e>
 80066ca:	4621      	mov	r1, r4
 80066cc:	4630      	mov	r0, r6
 80066ce:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80066d0:	4798      	blx	r3
 80066d2:	2800      	cmp	r0, #0
 80066d4:	d0bf      	beq.n	8006656 <__ssvfiscanf_r+0x1f2>
 80066d6:	e79f      	b.n	8006618 <__ssvfiscanf_r+0x1b4>
 80066d8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80066da:	3201      	adds	r2, #1
 80066dc:	9245      	str	r2, [sp, #276]	@ 0x114
 80066de:	6862      	ldr	r2, [r4, #4]
 80066e0:	3a01      	subs	r2, #1
 80066e2:	2a00      	cmp	r2, #0
 80066e4:	6062      	str	r2, [r4, #4]
 80066e6:	dd02      	ble.n	80066ee <__ssvfiscanf_r+0x28a>
 80066e8:	3301      	adds	r3, #1
 80066ea:	6023      	str	r3, [r4, #0]
 80066ec:	e7b6      	b.n	800665c <__ssvfiscanf_r+0x1f8>
 80066ee:	4621      	mov	r1, r4
 80066f0:	4630      	mov	r0, r6
 80066f2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80066f4:	4798      	blx	r3
 80066f6:	2800      	cmp	r0, #0
 80066f8:	d0b0      	beq.n	800665c <__ssvfiscanf_r+0x1f8>
 80066fa:	e78d      	b.n	8006618 <__ssvfiscanf_r+0x1b4>
 80066fc:	2b04      	cmp	r3, #4
 80066fe:	dc06      	bgt.n	800670e <__ssvfiscanf_r+0x2aa>
 8006700:	466b      	mov	r3, sp
 8006702:	4622      	mov	r2, r4
 8006704:	4630      	mov	r0, r6
 8006706:	a941      	add	r1, sp, #260	@ 0x104
 8006708:	f000 fa0a 	bl	8006b20 <_scanf_i>
 800670c:	e7b4      	b.n	8006678 <__ssvfiscanf_r+0x214>
 800670e:	4b09      	ldr	r3, [pc, #36]	@ (8006734 <__ssvfiscanf_r+0x2d0>)
 8006710:	2b00      	cmp	r3, #0
 8006712:	f43f aece 	beq.w	80064b2 <__ssvfiscanf_r+0x4e>
 8006716:	466b      	mov	r3, sp
 8006718:	4622      	mov	r2, r4
 800671a:	4630      	mov	r0, r6
 800671c:	a941      	add	r1, sp, #260	@ 0x104
 800671e:	f3af 8000 	nop.w
 8006722:	e7a9      	b.n	8006678 <__ssvfiscanf_r+0x214>
 8006724:	080063b1 	.word	0x080063b1
 8006728:	0800642b 	.word	0x0800642b
 800672c:	080071d3 	.word	0x080071d3
 8006730:	080072d9 	.word	0x080072d9
 8006734:	00000000 	.word	0x00000000
 8006738:	89a3      	ldrh	r3, [r4, #12]
 800673a:	065b      	lsls	r3, r3, #25
 800673c:	f53f af70 	bmi.w	8006620 <__ssvfiscanf_r+0x1bc>
 8006740:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8006744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006748:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800674a:	e7f9      	b.n	8006740 <__ssvfiscanf_r+0x2dc>

0800674c <_printf_common>:
 800674c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006750:	4616      	mov	r6, r2
 8006752:	4698      	mov	r8, r3
 8006754:	688a      	ldr	r2, [r1, #8]
 8006756:	690b      	ldr	r3, [r1, #16]
 8006758:	4607      	mov	r7, r0
 800675a:	4293      	cmp	r3, r2
 800675c:	bfb8      	it	lt
 800675e:	4613      	movlt	r3, r2
 8006760:	6033      	str	r3, [r6, #0]
 8006762:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006766:	460c      	mov	r4, r1
 8006768:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800676c:	b10a      	cbz	r2, 8006772 <_printf_common+0x26>
 800676e:	3301      	adds	r3, #1
 8006770:	6033      	str	r3, [r6, #0]
 8006772:	6823      	ldr	r3, [r4, #0]
 8006774:	0699      	lsls	r1, r3, #26
 8006776:	bf42      	ittt	mi
 8006778:	6833      	ldrmi	r3, [r6, #0]
 800677a:	3302      	addmi	r3, #2
 800677c:	6033      	strmi	r3, [r6, #0]
 800677e:	6825      	ldr	r5, [r4, #0]
 8006780:	f015 0506 	ands.w	r5, r5, #6
 8006784:	d106      	bne.n	8006794 <_printf_common+0x48>
 8006786:	f104 0a19 	add.w	sl, r4, #25
 800678a:	68e3      	ldr	r3, [r4, #12]
 800678c:	6832      	ldr	r2, [r6, #0]
 800678e:	1a9b      	subs	r3, r3, r2
 8006790:	42ab      	cmp	r3, r5
 8006792:	dc2b      	bgt.n	80067ec <_printf_common+0xa0>
 8006794:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006798:	6822      	ldr	r2, [r4, #0]
 800679a:	3b00      	subs	r3, #0
 800679c:	bf18      	it	ne
 800679e:	2301      	movne	r3, #1
 80067a0:	0692      	lsls	r2, r2, #26
 80067a2:	d430      	bmi.n	8006806 <_printf_common+0xba>
 80067a4:	4641      	mov	r1, r8
 80067a6:	4638      	mov	r0, r7
 80067a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80067ac:	47c8      	blx	r9
 80067ae:	3001      	adds	r0, #1
 80067b0:	d023      	beq.n	80067fa <_printf_common+0xae>
 80067b2:	6823      	ldr	r3, [r4, #0]
 80067b4:	6922      	ldr	r2, [r4, #16]
 80067b6:	f003 0306 	and.w	r3, r3, #6
 80067ba:	2b04      	cmp	r3, #4
 80067bc:	bf14      	ite	ne
 80067be:	2500      	movne	r5, #0
 80067c0:	6833      	ldreq	r3, [r6, #0]
 80067c2:	f04f 0600 	mov.w	r6, #0
 80067c6:	bf08      	it	eq
 80067c8:	68e5      	ldreq	r5, [r4, #12]
 80067ca:	f104 041a 	add.w	r4, r4, #26
 80067ce:	bf08      	it	eq
 80067d0:	1aed      	subeq	r5, r5, r3
 80067d2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80067d6:	bf08      	it	eq
 80067d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067dc:	4293      	cmp	r3, r2
 80067de:	bfc4      	itt	gt
 80067e0:	1a9b      	subgt	r3, r3, r2
 80067e2:	18ed      	addgt	r5, r5, r3
 80067e4:	42b5      	cmp	r5, r6
 80067e6:	d11a      	bne.n	800681e <_printf_common+0xd2>
 80067e8:	2000      	movs	r0, #0
 80067ea:	e008      	b.n	80067fe <_printf_common+0xb2>
 80067ec:	2301      	movs	r3, #1
 80067ee:	4652      	mov	r2, sl
 80067f0:	4641      	mov	r1, r8
 80067f2:	4638      	mov	r0, r7
 80067f4:	47c8      	blx	r9
 80067f6:	3001      	adds	r0, #1
 80067f8:	d103      	bne.n	8006802 <_printf_common+0xb6>
 80067fa:	f04f 30ff 	mov.w	r0, #4294967295
 80067fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006802:	3501      	adds	r5, #1
 8006804:	e7c1      	b.n	800678a <_printf_common+0x3e>
 8006806:	2030      	movs	r0, #48	@ 0x30
 8006808:	18e1      	adds	r1, r4, r3
 800680a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800680e:	1c5a      	adds	r2, r3, #1
 8006810:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006814:	4422      	add	r2, r4
 8006816:	3302      	adds	r3, #2
 8006818:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800681c:	e7c2      	b.n	80067a4 <_printf_common+0x58>
 800681e:	2301      	movs	r3, #1
 8006820:	4622      	mov	r2, r4
 8006822:	4641      	mov	r1, r8
 8006824:	4638      	mov	r0, r7
 8006826:	47c8      	blx	r9
 8006828:	3001      	adds	r0, #1
 800682a:	d0e6      	beq.n	80067fa <_printf_common+0xae>
 800682c:	3601      	adds	r6, #1
 800682e:	e7d9      	b.n	80067e4 <_printf_common+0x98>

08006830 <_printf_i>:
 8006830:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006834:	7e0f      	ldrb	r7, [r1, #24]
 8006836:	4691      	mov	r9, r2
 8006838:	2f78      	cmp	r7, #120	@ 0x78
 800683a:	4680      	mov	r8, r0
 800683c:	460c      	mov	r4, r1
 800683e:	469a      	mov	sl, r3
 8006840:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006842:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006846:	d807      	bhi.n	8006858 <_printf_i+0x28>
 8006848:	2f62      	cmp	r7, #98	@ 0x62
 800684a:	d80a      	bhi.n	8006862 <_printf_i+0x32>
 800684c:	2f00      	cmp	r7, #0
 800684e:	f000 80d1 	beq.w	80069f4 <_printf_i+0x1c4>
 8006852:	2f58      	cmp	r7, #88	@ 0x58
 8006854:	f000 80b8 	beq.w	80069c8 <_printf_i+0x198>
 8006858:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800685c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006860:	e03a      	b.n	80068d8 <_printf_i+0xa8>
 8006862:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006866:	2b15      	cmp	r3, #21
 8006868:	d8f6      	bhi.n	8006858 <_printf_i+0x28>
 800686a:	a101      	add	r1, pc, #4	@ (adr r1, 8006870 <_printf_i+0x40>)
 800686c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006870:	080068c9 	.word	0x080068c9
 8006874:	080068dd 	.word	0x080068dd
 8006878:	08006859 	.word	0x08006859
 800687c:	08006859 	.word	0x08006859
 8006880:	08006859 	.word	0x08006859
 8006884:	08006859 	.word	0x08006859
 8006888:	080068dd 	.word	0x080068dd
 800688c:	08006859 	.word	0x08006859
 8006890:	08006859 	.word	0x08006859
 8006894:	08006859 	.word	0x08006859
 8006898:	08006859 	.word	0x08006859
 800689c:	080069db 	.word	0x080069db
 80068a0:	08006907 	.word	0x08006907
 80068a4:	08006995 	.word	0x08006995
 80068a8:	08006859 	.word	0x08006859
 80068ac:	08006859 	.word	0x08006859
 80068b0:	080069fd 	.word	0x080069fd
 80068b4:	08006859 	.word	0x08006859
 80068b8:	08006907 	.word	0x08006907
 80068bc:	08006859 	.word	0x08006859
 80068c0:	08006859 	.word	0x08006859
 80068c4:	0800699d 	.word	0x0800699d
 80068c8:	6833      	ldr	r3, [r6, #0]
 80068ca:	1d1a      	adds	r2, r3, #4
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	6032      	str	r2, [r6, #0]
 80068d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80068d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80068d8:	2301      	movs	r3, #1
 80068da:	e09c      	b.n	8006a16 <_printf_i+0x1e6>
 80068dc:	6833      	ldr	r3, [r6, #0]
 80068de:	6820      	ldr	r0, [r4, #0]
 80068e0:	1d19      	adds	r1, r3, #4
 80068e2:	6031      	str	r1, [r6, #0]
 80068e4:	0606      	lsls	r6, r0, #24
 80068e6:	d501      	bpl.n	80068ec <_printf_i+0xbc>
 80068e8:	681d      	ldr	r5, [r3, #0]
 80068ea:	e003      	b.n	80068f4 <_printf_i+0xc4>
 80068ec:	0645      	lsls	r5, r0, #25
 80068ee:	d5fb      	bpl.n	80068e8 <_printf_i+0xb8>
 80068f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80068f4:	2d00      	cmp	r5, #0
 80068f6:	da03      	bge.n	8006900 <_printf_i+0xd0>
 80068f8:	232d      	movs	r3, #45	@ 0x2d
 80068fa:	426d      	negs	r5, r5
 80068fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006900:	230a      	movs	r3, #10
 8006902:	4858      	ldr	r0, [pc, #352]	@ (8006a64 <_printf_i+0x234>)
 8006904:	e011      	b.n	800692a <_printf_i+0xfa>
 8006906:	6821      	ldr	r1, [r4, #0]
 8006908:	6833      	ldr	r3, [r6, #0]
 800690a:	0608      	lsls	r0, r1, #24
 800690c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006910:	d402      	bmi.n	8006918 <_printf_i+0xe8>
 8006912:	0649      	lsls	r1, r1, #25
 8006914:	bf48      	it	mi
 8006916:	b2ad      	uxthmi	r5, r5
 8006918:	2f6f      	cmp	r7, #111	@ 0x6f
 800691a:	6033      	str	r3, [r6, #0]
 800691c:	bf14      	ite	ne
 800691e:	230a      	movne	r3, #10
 8006920:	2308      	moveq	r3, #8
 8006922:	4850      	ldr	r0, [pc, #320]	@ (8006a64 <_printf_i+0x234>)
 8006924:	2100      	movs	r1, #0
 8006926:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800692a:	6866      	ldr	r6, [r4, #4]
 800692c:	2e00      	cmp	r6, #0
 800692e:	60a6      	str	r6, [r4, #8]
 8006930:	db05      	blt.n	800693e <_printf_i+0x10e>
 8006932:	6821      	ldr	r1, [r4, #0]
 8006934:	432e      	orrs	r6, r5
 8006936:	f021 0104 	bic.w	r1, r1, #4
 800693a:	6021      	str	r1, [r4, #0]
 800693c:	d04b      	beq.n	80069d6 <_printf_i+0x1a6>
 800693e:	4616      	mov	r6, r2
 8006940:	fbb5 f1f3 	udiv	r1, r5, r3
 8006944:	fb03 5711 	mls	r7, r3, r1, r5
 8006948:	5dc7      	ldrb	r7, [r0, r7]
 800694a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800694e:	462f      	mov	r7, r5
 8006950:	42bb      	cmp	r3, r7
 8006952:	460d      	mov	r5, r1
 8006954:	d9f4      	bls.n	8006940 <_printf_i+0x110>
 8006956:	2b08      	cmp	r3, #8
 8006958:	d10b      	bne.n	8006972 <_printf_i+0x142>
 800695a:	6823      	ldr	r3, [r4, #0]
 800695c:	07df      	lsls	r7, r3, #31
 800695e:	d508      	bpl.n	8006972 <_printf_i+0x142>
 8006960:	6923      	ldr	r3, [r4, #16]
 8006962:	6861      	ldr	r1, [r4, #4]
 8006964:	4299      	cmp	r1, r3
 8006966:	bfde      	ittt	le
 8006968:	2330      	movle	r3, #48	@ 0x30
 800696a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800696e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006972:	1b92      	subs	r2, r2, r6
 8006974:	6122      	str	r2, [r4, #16]
 8006976:	464b      	mov	r3, r9
 8006978:	4621      	mov	r1, r4
 800697a:	4640      	mov	r0, r8
 800697c:	f8cd a000 	str.w	sl, [sp]
 8006980:	aa03      	add	r2, sp, #12
 8006982:	f7ff fee3 	bl	800674c <_printf_common>
 8006986:	3001      	adds	r0, #1
 8006988:	d14a      	bne.n	8006a20 <_printf_i+0x1f0>
 800698a:	f04f 30ff 	mov.w	r0, #4294967295
 800698e:	b004      	add	sp, #16
 8006990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006994:	6823      	ldr	r3, [r4, #0]
 8006996:	f043 0320 	orr.w	r3, r3, #32
 800699a:	6023      	str	r3, [r4, #0]
 800699c:	2778      	movs	r7, #120	@ 0x78
 800699e:	4832      	ldr	r0, [pc, #200]	@ (8006a68 <_printf_i+0x238>)
 80069a0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80069a4:	6823      	ldr	r3, [r4, #0]
 80069a6:	6831      	ldr	r1, [r6, #0]
 80069a8:	061f      	lsls	r7, r3, #24
 80069aa:	f851 5b04 	ldr.w	r5, [r1], #4
 80069ae:	d402      	bmi.n	80069b6 <_printf_i+0x186>
 80069b0:	065f      	lsls	r7, r3, #25
 80069b2:	bf48      	it	mi
 80069b4:	b2ad      	uxthmi	r5, r5
 80069b6:	6031      	str	r1, [r6, #0]
 80069b8:	07d9      	lsls	r1, r3, #31
 80069ba:	bf44      	itt	mi
 80069bc:	f043 0320 	orrmi.w	r3, r3, #32
 80069c0:	6023      	strmi	r3, [r4, #0]
 80069c2:	b11d      	cbz	r5, 80069cc <_printf_i+0x19c>
 80069c4:	2310      	movs	r3, #16
 80069c6:	e7ad      	b.n	8006924 <_printf_i+0xf4>
 80069c8:	4826      	ldr	r0, [pc, #152]	@ (8006a64 <_printf_i+0x234>)
 80069ca:	e7e9      	b.n	80069a0 <_printf_i+0x170>
 80069cc:	6823      	ldr	r3, [r4, #0]
 80069ce:	f023 0320 	bic.w	r3, r3, #32
 80069d2:	6023      	str	r3, [r4, #0]
 80069d4:	e7f6      	b.n	80069c4 <_printf_i+0x194>
 80069d6:	4616      	mov	r6, r2
 80069d8:	e7bd      	b.n	8006956 <_printf_i+0x126>
 80069da:	6833      	ldr	r3, [r6, #0]
 80069dc:	6825      	ldr	r5, [r4, #0]
 80069de:	1d18      	adds	r0, r3, #4
 80069e0:	6961      	ldr	r1, [r4, #20]
 80069e2:	6030      	str	r0, [r6, #0]
 80069e4:	062e      	lsls	r6, r5, #24
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	d501      	bpl.n	80069ee <_printf_i+0x1be>
 80069ea:	6019      	str	r1, [r3, #0]
 80069ec:	e002      	b.n	80069f4 <_printf_i+0x1c4>
 80069ee:	0668      	lsls	r0, r5, #25
 80069f0:	d5fb      	bpl.n	80069ea <_printf_i+0x1ba>
 80069f2:	8019      	strh	r1, [r3, #0]
 80069f4:	2300      	movs	r3, #0
 80069f6:	4616      	mov	r6, r2
 80069f8:	6123      	str	r3, [r4, #16]
 80069fa:	e7bc      	b.n	8006976 <_printf_i+0x146>
 80069fc:	6833      	ldr	r3, [r6, #0]
 80069fe:	2100      	movs	r1, #0
 8006a00:	1d1a      	adds	r2, r3, #4
 8006a02:	6032      	str	r2, [r6, #0]
 8006a04:	681e      	ldr	r6, [r3, #0]
 8006a06:	6862      	ldr	r2, [r4, #4]
 8006a08:	4630      	mov	r0, r6
 8006a0a:	f000 fa17 	bl	8006e3c <memchr>
 8006a0e:	b108      	cbz	r0, 8006a14 <_printf_i+0x1e4>
 8006a10:	1b80      	subs	r0, r0, r6
 8006a12:	6060      	str	r0, [r4, #4]
 8006a14:	6863      	ldr	r3, [r4, #4]
 8006a16:	6123      	str	r3, [r4, #16]
 8006a18:	2300      	movs	r3, #0
 8006a1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a1e:	e7aa      	b.n	8006976 <_printf_i+0x146>
 8006a20:	4632      	mov	r2, r6
 8006a22:	4649      	mov	r1, r9
 8006a24:	4640      	mov	r0, r8
 8006a26:	6923      	ldr	r3, [r4, #16]
 8006a28:	47d0      	blx	sl
 8006a2a:	3001      	adds	r0, #1
 8006a2c:	d0ad      	beq.n	800698a <_printf_i+0x15a>
 8006a2e:	6823      	ldr	r3, [r4, #0]
 8006a30:	079b      	lsls	r3, r3, #30
 8006a32:	d413      	bmi.n	8006a5c <_printf_i+0x22c>
 8006a34:	68e0      	ldr	r0, [r4, #12]
 8006a36:	9b03      	ldr	r3, [sp, #12]
 8006a38:	4298      	cmp	r0, r3
 8006a3a:	bfb8      	it	lt
 8006a3c:	4618      	movlt	r0, r3
 8006a3e:	e7a6      	b.n	800698e <_printf_i+0x15e>
 8006a40:	2301      	movs	r3, #1
 8006a42:	4632      	mov	r2, r6
 8006a44:	4649      	mov	r1, r9
 8006a46:	4640      	mov	r0, r8
 8006a48:	47d0      	blx	sl
 8006a4a:	3001      	adds	r0, #1
 8006a4c:	d09d      	beq.n	800698a <_printf_i+0x15a>
 8006a4e:	3501      	adds	r5, #1
 8006a50:	68e3      	ldr	r3, [r4, #12]
 8006a52:	9903      	ldr	r1, [sp, #12]
 8006a54:	1a5b      	subs	r3, r3, r1
 8006a56:	42ab      	cmp	r3, r5
 8006a58:	dcf2      	bgt.n	8006a40 <_printf_i+0x210>
 8006a5a:	e7eb      	b.n	8006a34 <_printf_i+0x204>
 8006a5c:	2500      	movs	r5, #0
 8006a5e:	f104 0619 	add.w	r6, r4, #25
 8006a62:	e7f5      	b.n	8006a50 <_printf_i+0x220>
 8006a64:	080072e4 	.word	0x080072e4
 8006a68:	080072f5 	.word	0x080072f5

08006a6c <_scanf_chars>:
 8006a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a70:	4615      	mov	r5, r2
 8006a72:	688a      	ldr	r2, [r1, #8]
 8006a74:	4680      	mov	r8, r0
 8006a76:	460c      	mov	r4, r1
 8006a78:	b932      	cbnz	r2, 8006a88 <_scanf_chars+0x1c>
 8006a7a:	698a      	ldr	r2, [r1, #24]
 8006a7c:	2a00      	cmp	r2, #0
 8006a7e:	bf14      	ite	ne
 8006a80:	f04f 32ff 	movne.w	r2, #4294967295
 8006a84:	2201      	moveq	r2, #1
 8006a86:	608a      	str	r2, [r1, #8]
 8006a88:	2700      	movs	r7, #0
 8006a8a:	6822      	ldr	r2, [r4, #0]
 8006a8c:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8006b1c <_scanf_chars+0xb0>
 8006a90:	06d1      	lsls	r1, r2, #27
 8006a92:	bf5f      	itttt	pl
 8006a94:	681a      	ldrpl	r2, [r3, #0]
 8006a96:	1d11      	addpl	r1, r2, #4
 8006a98:	6019      	strpl	r1, [r3, #0]
 8006a9a:	6816      	ldrpl	r6, [r2, #0]
 8006a9c:	69a0      	ldr	r0, [r4, #24]
 8006a9e:	b188      	cbz	r0, 8006ac4 <_scanf_chars+0x58>
 8006aa0:	2801      	cmp	r0, #1
 8006aa2:	d107      	bne.n	8006ab4 <_scanf_chars+0x48>
 8006aa4:	682b      	ldr	r3, [r5, #0]
 8006aa6:	781a      	ldrb	r2, [r3, #0]
 8006aa8:	6963      	ldr	r3, [r4, #20]
 8006aaa:	5c9b      	ldrb	r3, [r3, r2]
 8006aac:	b953      	cbnz	r3, 8006ac4 <_scanf_chars+0x58>
 8006aae:	2f00      	cmp	r7, #0
 8006ab0:	d031      	beq.n	8006b16 <_scanf_chars+0xaa>
 8006ab2:	e022      	b.n	8006afa <_scanf_chars+0x8e>
 8006ab4:	2802      	cmp	r0, #2
 8006ab6:	d120      	bne.n	8006afa <_scanf_chars+0x8e>
 8006ab8:	682b      	ldr	r3, [r5, #0]
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	f819 3003 	ldrb.w	r3, [r9, r3]
 8006ac0:	071b      	lsls	r3, r3, #28
 8006ac2:	d41a      	bmi.n	8006afa <_scanf_chars+0x8e>
 8006ac4:	6823      	ldr	r3, [r4, #0]
 8006ac6:	3701      	adds	r7, #1
 8006ac8:	06da      	lsls	r2, r3, #27
 8006aca:	bf5e      	ittt	pl
 8006acc:	682b      	ldrpl	r3, [r5, #0]
 8006ace:	781b      	ldrbpl	r3, [r3, #0]
 8006ad0:	f806 3b01 	strbpl.w	r3, [r6], #1
 8006ad4:	682a      	ldr	r2, [r5, #0]
 8006ad6:	686b      	ldr	r3, [r5, #4]
 8006ad8:	3201      	adds	r2, #1
 8006ada:	602a      	str	r2, [r5, #0]
 8006adc:	68a2      	ldr	r2, [r4, #8]
 8006ade:	3b01      	subs	r3, #1
 8006ae0:	3a01      	subs	r2, #1
 8006ae2:	606b      	str	r3, [r5, #4]
 8006ae4:	60a2      	str	r2, [r4, #8]
 8006ae6:	b142      	cbz	r2, 8006afa <_scanf_chars+0x8e>
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	dcd7      	bgt.n	8006a9c <_scanf_chars+0x30>
 8006aec:	4629      	mov	r1, r5
 8006aee:	4640      	mov	r0, r8
 8006af0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006af4:	4798      	blx	r3
 8006af6:	2800      	cmp	r0, #0
 8006af8:	d0d0      	beq.n	8006a9c <_scanf_chars+0x30>
 8006afa:	6823      	ldr	r3, [r4, #0]
 8006afc:	f013 0310 	ands.w	r3, r3, #16
 8006b00:	d105      	bne.n	8006b0e <_scanf_chars+0xa2>
 8006b02:	68e2      	ldr	r2, [r4, #12]
 8006b04:	3201      	adds	r2, #1
 8006b06:	60e2      	str	r2, [r4, #12]
 8006b08:	69a2      	ldr	r2, [r4, #24]
 8006b0a:	b102      	cbz	r2, 8006b0e <_scanf_chars+0xa2>
 8006b0c:	7033      	strb	r3, [r6, #0]
 8006b0e:	2000      	movs	r0, #0
 8006b10:	6923      	ldr	r3, [r4, #16]
 8006b12:	443b      	add	r3, r7
 8006b14:	6123      	str	r3, [r4, #16]
 8006b16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b1a:	bf00      	nop
 8006b1c:	080071d3 	.word	0x080071d3

08006b20 <_scanf_i>:
 8006b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b24:	460c      	mov	r4, r1
 8006b26:	4698      	mov	r8, r3
 8006b28:	4b72      	ldr	r3, [pc, #456]	@ (8006cf4 <_scanf_i+0x1d4>)
 8006b2a:	b087      	sub	sp, #28
 8006b2c:	4682      	mov	sl, r0
 8006b2e:	4616      	mov	r6, r2
 8006b30:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006b34:	ab03      	add	r3, sp, #12
 8006b36:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006b3a:	4b6f      	ldr	r3, [pc, #444]	@ (8006cf8 <_scanf_i+0x1d8>)
 8006b3c:	69a1      	ldr	r1, [r4, #24]
 8006b3e:	4a6f      	ldr	r2, [pc, #444]	@ (8006cfc <_scanf_i+0x1dc>)
 8006b40:	4627      	mov	r7, r4
 8006b42:	2903      	cmp	r1, #3
 8006b44:	bf08      	it	eq
 8006b46:	461a      	moveq	r2, r3
 8006b48:	68a3      	ldr	r3, [r4, #8]
 8006b4a:	9201      	str	r2, [sp, #4]
 8006b4c:	1e5a      	subs	r2, r3, #1
 8006b4e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006b52:	bf81      	itttt	hi
 8006b54:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006b58:	eb03 0905 	addhi.w	r9, r3, r5
 8006b5c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006b60:	60a3      	strhi	r3, [r4, #8]
 8006b62:	f857 3b1c 	ldr.w	r3, [r7], #28
 8006b66:	bf98      	it	ls
 8006b68:	f04f 0900 	movls.w	r9, #0
 8006b6c:	463d      	mov	r5, r7
 8006b6e:	f04f 0b00 	mov.w	fp, #0
 8006b72:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8006b76:	6023      	str	r3, [r4, #0]
 8006b78:	6831      	ldr	r1, [r6, #0]
 8006b7a:	ab03      	add	r3, sp, #12
 8006b7c:	2202      	movs	r2, #2
 8006b7e:	7809      	ldrb	r1, [r1, #0]
 8006b80:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8006b84:	f000 f95a 	bl	8006e3c <memchr>
 8006b88:	b328      	cbz	r0, 8006bd6 <_scanf_i+0xb6>
 8006b8a:	f1bb 0f01 	cmp.w	fp, #1
 8006b8e:	d159      	bne.n	8006c44 <_scanf_i+0x124>
 8006b90:	6862      	ldr	r2, [r4, #4]
 8006b92:	b92a      	cbnz	r2, 8006ba0 <_scanf_i+0x80>
 8006b94:	2108      	movs	r1, #8
 8006b96:	6822      	ldr	r2, [r4, #0]
 8006b98:	6061      	str	r1, [r4, #4]
 8006b9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b9e:	6022      	str	r2, [r4, #0]
 8006ba0:	6822      	ldr	r2, [r4, #0]
 8006ba2:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8006ba6:	6022      	str	r2, [r4, #0]
 8006ba8:	68a2      	ldr	r2, [r4, #8]
 8006baa:	1e51      	subs	r1, r2, #1
 8006bac:	60a1      	str	r1, [r4, #8]
 8006bae:	b192      	cbz	r2, 8006bd6 <_scanf_i+0xb6>
 8006bb0:	6832      	ldr	r2, [r6, #0]
 8006bb2:	1c51      	adds	r1, r2, #1
 8006bb4:	6031      	str	r1, [r6, #0]
 8006bb6:	7812      	ldrb	r2, [r2, #0]
 8006bb8:	f805 2b01 	strb.w	r2, [r5], #1
 8006bbc:	6872      	ldr	r2, [r6, #4]
 8006bbe:	3a01      	subs	r2, #1
 8006bc0:	2a00      	cmp	r2, #0
 8006bc2:	6072      	str	r2, [r6, #4]
 8006bc4:	dc07      	bgt.n	8006bd6 <_scanf_i+0xb6>
 8006bc6:	4631      	mov	r1, r6
 8006bc8:	4650      	mov	r0, sl
 8006bca:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8006bce:	4790      	blx	r2
 8006bd0:	2800      	cmp	r0, #0
 8006bd2:	f040 8085 	bne.w	8006ce0 <_scanf_i+0x1c0>
 8006bd6:	f10b 0b01 	add.w	fp, fp, #1
 8006bda:	f1bb 0f03 	cmp.w	fp, #3
 8006bde:	d1cb      	bne.n	8006b78 <_scanf_i+0x58>
 8006be0:	6863      	ldr	r3, [r4, #4]
 8006be2:	b90b      	cbnz	r3, 8006be8 <_scanf_i+0xc8>
 8006be4:	230a      	movs	r3, #10
 8006be6:	6063      	str	r3, [r4, #4]
 8006be8:	6863      	ldr	r3, [r4, #4]
 8006bea:	4945      	ldr	r1, [pc, #276]	@ (8006d00 <_scanf_i+0x1e0>)
 8006bec:	6960      	ldr	r0, [r4, #20]
 8006bee:	1ac9      	subs	r1, r1, r3
 8006bf0:	f000 f888 	bl	8006d04 <__sccl>
 8006bf4:	f04f 0b00 	mov.w	fp, #0
 8006bf8:	68a3      	ldr	r3, [r4, #8]
 8006bfa:	6822      	ldr	r2, [r4, #0]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d03d      	beq.n	8006c7c <_scanf_i+0x15c>
 8006c00:	6831      	ldr	r1, [r6, #0]
 8006c02:	6960      	ldr	r0, [r4, #20]
 8006c04:	f891 c000 	ldrb.w	ip, [r1]
 8006c08:	f810 000c 	ldrb.w	r0, [r0, ip]
 8006c0c:	2800      	cmp	r0, #0
 8006c0e:	d035      	beq.n	8006c7c <_scanf_i+0x15c>
 8006c10:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8006c14:	d124      	bne.n	8006c60 <_scanf_i+0x140>
 8006c16:	0510      	lsls	r0, r2, #20
 8006c18:	d522      	bpl.n	8006c60 <_scanf_i+0x140>
 8006c1a:	f10b 0b01 	add.w	fp, fp, #1
 8006c1e:	f1b9 0f00 	cmp.w	r9, #0
 8006c22:	d003      	beq.n	8006c2c <_scanf_i+0x10c>
 8006c24:	3301      	adds	r3, #1
 8006c26:	f109 39ff 	add.w	r9, r9, #4294967295
 8006c2a:	60a3      	str	r3, [r4, #8]
 8006c2c:	6873      	ldr	r3, [r6, #4]
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	6073      	str	r3, [r6, #4]
 8006c34:	dd1b      	ble.n	8006c6e <_scanf_i+0x14e>
 8006c36:	6833      	ldr	r3, [r6, #0]
 8006c38:	3301      	adds	r3, #1
 8006c3a:	6033      	str	r3, [r6, #0]
 8006c3c:	68a3      	ldr	r3, [r4, #8]
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	60a3      	str	r3, [r4, #8]
 8006c42:	e7d9      	b.n	8006bf8 <_scanf_i+0xd8>
 8006c44:	f1bb 0f02 	cmp.w	fp, #2
 8006c48:	d1ae      	bne.n	8006ba8 <_scanf_i+0x88>
 8006c4a:	6822      	ldr	r2, [r4, #0]
 8006c4c:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8006c50:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8006c54:	d1c4      	bne.n	8006be0 <_scanf_i+0xc0>
 8006c56:	2110      	movs	r1, #16
 8006c58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c5c:	6061      	str	r1, [r4, #4]
 8006c5e:	e7a2      	b.n	8006ba6 <_scanf_i+0x86>
 8006c60:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8006c64:	6022      	str	r2, [r4, #0]
 8006c66:	780b      	ldrb	r3, [r1, #0]
 8006c68:	f805 3b01 	strb.w	r3, [r5], #1
 8006c6c:	e7de      	b.n	8006c2c <_scanf_i+0x10c>
 8006c6e:	4631      	mov	r1, r6
 8006c70:	4650      	mov	r0, sl
 8006c72:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006c76:	4798      	blx	r3
 8006c78:	2800      	cmp	r0, #0
 8006c7a:	d0df      	beq.n	8006c3c <_scanf_i+0x11c>
 8006c7c:	6823      	ldr	r3, [r4, #0]
 8006c7e:	05d9      	lsls	r1, r3, #23
 8006c80:	d50d      	bpl.n	8006c9e <_scanf_i+0x17e>
 8006c82:	42bd      	cmp	r5, r7
 8006c84:	d909      	bls.n	8006c9a <_scanf_i+0x17a>
 8006c86:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006c8a:	4632      	mov	r2, r6
 8006c8c:	4650      	mov	r0, sl
 8006c8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006c92:	f105 39ff 	add.w	r9, r5, #4294967295
 8006c96:	4798      	blx	r3
 8006c98:	464d      	mov	r5, r9
 8006c9a:	42bd      	cmp	r5, r7
 8006c9c:	d028      	beq.n	8006cf0 <_scanf_i+0x1d0>
 8006c9e:	6822      	ldr	r2, [r4, #0]
 8006ca0:	f012 0210 	ands.w	r2, r2, #16
 8006ca4:	d113      	bne.n	8006cce <_scanf_i+0x1ae>
 8006ca6:	702a      	strb	r2, [r5, #0]
 8006ca8:	4639      	mov	r1, r7
 8006caa:	6863      	ldr	r3, [r4, #4]
 8006cac:	4650      	mov	r0, sl
 8006cae:	9e01      	ldr	r6, [sp, #4]
 8006cb0:	47b0      	blx	r6
 8006cb2:	f8d8 3000 	ldr.w	r3, [r8]
 8006cb6:	6821      	ldr	r1, [r4, #0]
 8006cb8:	1d1a      	adds	r2, r3, #4
 8006cba:	f8c8 2000 	str.w	r2, [r8]
 8006cbe:	f011 0f20 	tst.w	r1, #32
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	d00f      	beq.n	8006ce6 <_scanf_i+0x1c6>
 8006cc6:	6018      	str	r0, [r3, #0]
 8006cc8:	68e3      	ldr	r3, [r4, #12]
 8006cca:	3301      	adds	r3, #1
 8006ccc:	60e3      	str	r3, [r4, #12]
 8006cce:	2000      	movs	r0, #0
 8006cd0:	6923      	ldr	r3, [r4, #16]
 8006cd2:	1bed      	subs	r5, r5, r7
 8006cd4:	445d      	add	r5, fp
 8006cd6:	442b      	add	r3, r5
 8006cd8:	6123      	str	r3, [r4, #16]
 8006cda:	b007      	add	sp, #28
 8006cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ce0:	f04f 0b00 	mov.w	fp, #0
 8006ce4:	e7ca      	b.n	8006c7c <_scanf_i+0x15c>
 8006ce6:	07ca      	lsls	r2, r1, #31
 8006ce8:	bf4c      	ite	mi
 8006cea:	8018      	strhmi	r0, [r3, #0]
 8006cec:	6018      	strpl	r0, [r3, #0]
 8006cee:	e7eb      	b.n	8006cc8 <_scanf_i+0x1a8>
 8006cf0:	2001      	movs	r0, #1
 8006cf2:	e7f2      	b.n	8006cda <_scanf_i+0x1ba>
 8006cf4:	08007188 	.word	0x08007188
 8006cf8:	08005da9 	.word	0x08005da9
 8006cfc:	08006fad 	.word	0x08006fad
 8006d00:	08007316 	.word	0x08007316

08006d04 <__sccl>:
 8006d04:	b570      	push	{r4, r5, r6, lr}
 8006d06:	780b      	ldrb	r3, [r1, #0]
 8006d08:	4604      	mov	r4, r0
 8006d0a:	2b5e      	cmp	r3, #94	@ 0x5e
 8006d0c:	bf0b      	itete	eq
 8006d0e:	784b      	ldrbeq	r3, [r1, #1]
 8006d10:	1c4a      	addne	r2, r1, #1
 8006d12:	1c8a      	addeq	r2, r1, #2
 8006d14:	2100      	movne	r1, #0
 8006d16:	bf08      	it	eq
 8006d18:	2101      	moveq	r1, #1
 8006d1a:	3801      	subs	r0, #1
 8006d1c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8006d20:	f800 1f01 	strb.w	r1, [r0, #1]!
 8006d24:	42a8      	cmp	r0, r5
 8006d26:	d1fb      	bne.n	8006d20 <__sccl+0x1c>
 8006d28:	b90b      	cbnz	r3, 8006d2e <__sccl+0x2a>
 8006d2a:	1e50      	subs	r0, r2, #1
 8006d2c:	bd70      	pop	{r4, r5, r6, pc}
 8006d2e:	f081 0101 	eor.w	r1, r1, #1
 8006d32:	4610      	mov	r0, r2
 8006d34:	54e1      	strb	r1, [r4, r3]
 8006d36:	4602      	mov	r2, r0
 8006d38:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006d3c:	2d2d      	cmp	r5, #45	@ 0x2d
 8006d3e:	d005      	beq.n	8006d4c <__sccl+0x48>
 8006d40:	2d5d      	cmp	r5, #93	@ 0x5d
 8006d42:	d016      	beq.n	8006d72 <__sccl+0x6e>
 8006d44:	2d00      	cmp	r5, #0
 8006d46:	d0f1      	beq.n	8006d2c <__sccl+0x28>
 8006d48:	462b      	mov	r3, r5
 8006d4a:	e7f2      	b.n	8006d32 <__sccl+0x2e>
 8006d4c:	7846      	ldrb	r6, [r0, #1]
 8006d4e:	2e5d      	cmp	r6, #93	@ 0x5d
 8006d50:	d0fa      	beq.n	8006d48 <__sccl+0x44>
 8006d52:	42b3      	cmp	r3, r6
 8006d54:	dcf8      	bgt.n	8006d48 <__sccl+0x44>
 8006d56:	461a      	mov	r2, r3
 8006d58:	3002      	adds	r0, #2
 8006d5a:	3201      	adds	r2, #1
 8006d5c:	4296      	cmp	r6, r2
 8006d5e:	54a1      	strb	r1, [r4, r2]
 8006d60:	dcfb      	bgt.n	8006d5a <__sccl+0x56>
 8006d62:	1af2      	subs	r2, r6, r3
 8006d64:	3a01      	subs	r2, #1
 8006d66:	42b3      	cmp	r3, r6
 8006d68:	bfa8      	it	ge
 8006d6a:	2200      	movge	r2, #0
 8006d6c:	1c5d      	adds	r5, r3, #1
 8006d6e:	18ab      	adds	r3, r5, r2
 8006d70:	e7e1      	b.n	8006d36 <__sccl+0x32>
 8006d72:	4610      	mov	r0, r2
 8006d74:	e7da      	b.n	8006d2c <__sccl+0x28>

08006d76 <__submore>:
 8006d76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d7a:	460c      	mov	r4, r1
 8006d7c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8006d7e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006d82:	4299      	cmp	r1, r3
 8006d84:	d11b      	bne.n	8006dbe <__submore+0x48>
 8006d86:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006d8a:	f7ff f92d 	bl	8005fe8 <_malloc_r>
 8006d8e:	b918      	cbnz	r0, 8006d98 <__submore+0x22>
 8006d90:	f04f 30ff 	mov.w	r0, #4294967295
 8006d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006d9c:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006d9e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8006da2:	6360      	str	r0, [r4, #52]	@ 0x34
 8006da4:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8006da8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8006dac:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8006db0:	7043      	strb	r3, [r0, #1]
 8006db2:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8006db6:	7003      	strb	r3, [r0, #0]
 8006db8:	6020      	str	r0, [r4, #0]
 8006dba:	2000      	movs	r0, #0
 8006dbc:	e7ea      	b.n	8006d94 <__submore+0x1e>
 8006dbe:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8006dc0:	0077      	lsls	r7, r6, #1
 8006dc2:	463a      	mov	r2, r7
 8006dc4:	f000 f856 	bl	8006e74 <_realloc_r>
 8006dc8:	4605      	mov	r5, r0
 8006dca:	2800      	cmp	r0, #0
 8006dcc:	d0e0      	beq.n	8006d90 <__submore+0x1a>
 8006dce:	eb00 0806 	add.w	r8, r0, r6
 8006dd2:	4601      	mov	r1, r0
 8006dd4:	4632      	mov	r2, r6
 8006dd6:	4640      	mov	r0, r8
 8006dd8:	f000 f83e 	bl	8006e58 <memcpy>
 8006ddc:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8006de0:	f8c4 8000 	str.w	r8, [r4]
 8006de4:	e7e9      	b.n	8006dba <__submore+0x44>

08006de6 <memmove>:
 8006de6:	4288      	cmp	r0, r1
 8006de8:	b510      	push	{r4, lr}
 8006dea:	eb01 0402 	add.w	r4, r1, r2
 8006dee:	d902      	bls.n	8006df6 <memmove+0x10>
 8006df0:	4284      	cmp	r4, r0
 8006df2:	4623      	mov	r3, r4
 8006df4:	d807      	bhi.n	8006e06 <memmove+0x20>
 8006df6:	1e43      	subs	r3, r0, #1
 8006df8:	42a1      	cmp	r1, r4
 8006dfa:	d008      	beq.n	8006e0e <memmove+0x28>
 8006dfc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e00:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e04:	e7f8      	b.n	8006df8 <memmove+0x12>
 8006e06:	4601      	mov	r1, r0
 8006e08:	4402      	add	r2, r0
 8006e0a:	428a      	cmp	r2, r1
 8006e0c:	d100      	bne.n	8006e10 <memmove+0x2a>
 8006e0e:	bd10      	pop	{r4, pc}
 8006e10:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e14:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e18:	e7f7      	b.n	8006e0a <memmove+0x24>
	...

08006e1c <_sbrk_r>:
 8006e1c:	b538      	push	{r3, r4, r5, lr}
 8006e1e:	2300      	movs	r3, #0
 8006e20:	4d05      	ldr	r5, [pc, #20]	@ (8006e38 <_sbrk_r+0x1c>)
 8006e22:	4604      	mov	r4, r0
 8006e24:	4608      	mov	r0, r1
 8006e26:	602b      	str	r3, [r5, #0]
 8006e28:	f7fa fe78 	bl	8001b1c <_sbrk>
 8006e2c:	1c43      	adds	r3, r0, #1
 8006e2e:	d102      	bne.n	8006e36 <_sbrk_r+0x1a>
 8006e30:	682b      	ldr	r3, [r5, #0]
 8006e32:	b103      	cbz	r3, 8006e36 <_sbrk_r+0x1a>
 8006e34:	6023      	str	r3, [r4, #0]
 8006e36:	bd38      	pop	{r3, r4, r5, pc}
 8006e38:	20000494 	.word	0x20000494

08006e3c <memchr>:
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	b510      	push	{r4, lr}
 8006e40:	b2c9      	uxtb	r1, r1
 8006e42:	4402      	add	r2, r0
 8006e44:	4293      	cmp	r3, r2
 8006e46:	4618      	mov	r0, r3
 8006e48:	d101      	bne.n	8006e4e <memchr+0x12>
 8006e4a:	2000      	movs	r0, #0
 8006e4c:	e003      	b.n	8006e56 <memchr+0x1a>
 8006e4e:	7804      	ldrb	r4, [r0, #0]
 8006e50:	3301      	adds	r3, #1
 8006e52:	428c      	cmp	r4, r1
 8006e54:	d1f6      	bne.n	8006e44 <memchr+0x8>
 8006e56:	bd10      	pop	{r4, pc}

08006e58 <memcpy>:
 8006e58:	440a      	add	r2, r1
 8006e5a:	4291      	cmp	r1, r2
 8006e5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e60:	d100      	bne.n	8006e64 <memcpy+0xc>
 8006e62:	4770      	bx	lr
 8006e64:	b510      	push	{r4, lr}
 8006e66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e6a:	4291      	cmp	r1, r2
 8006e6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e70:	d1f9      	bne.n	8006e66 <memcpy+0xe>
 8006e72:	bd10      	pop	{r4, pc}

08006e74 <_realloc_r>:
 8006e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e78:	4607      	mov	r7, r0
 8006e7a:	4614      	mov	r4, r2
 8006e7c:	460d      	mov	r5, r1
 8006e7e:	b921      	cbnz	r1, 8006e8a <_realloc_r+0x16>
 8006e80:	4611      	mov	r1, r2
 8006e82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e86:	f7ff b8af 	b.w	8005fe8 <_malloc_r>
 8006e8a:	b92a      	cbnz	r2, 8006e98 <_realloc_r+0x24>
 8006e8c:	f7ff f842 	bl	8005f14 <_free_r>
 8006e90:	4625      	mov	r5, r4
 8006e92:	4628      	mov	r0, r5
 8006e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e98:	f000 f88a 	bl	8006fb0 <_malloc_usable_size_r>
 8006e9c:	4284      	cmp	r4, r0
 8006e9e:	4606      	mov	r6, r0
 8006ea0:	d802      	bhi.n	8006ea8 <_realloc_r+0x34>
 8006ea2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006ea6:	d8f4      	bhi.n	8006e92 <_realloc_r+0x1e>
 8006ea8:	4621      	mov	r1, r4
 8006eaa:	4638      	mov	r0, r7
 8006eac:	f7ff f89c 	bl	8005fe8 <_malloc_r>
 8006eb0:	4680      	mov	r8, r0
 8006eb2:	b908      	cbnz	r0, 8006eb8 <_realloc_r+0x44>
 8006eb4:	4645      	mov	r5, r8
 8006eb6:	e7ec      	b.n	8006e92 <_realloc_r+0x1e>
 8006eb8:	42b4      	cmp	r4, r6
 8006eba:	4622      	mov	r2, r4
 8006ebc:	4629      	mov	r1, r5
 8006ebe:	bf28      	it	cs
 8006ec0:	4632      	movcs	r2, r6
 8006ec2:	f7ff ffc9 	bl	8006e58 <memcpy>
 8006ec6:	4629      	mov	r1, r5
 8006ec8:	4638      	mov	r0, r7
 8006eca:	f7ff f823 	bl	8005f14 <_free_r>
 8006ece:	e7f1      	b.n	8006eb4 <_realloc_r+0x40>

08006ed0 <_strtoul_l.isra.0>:
 8006ed0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006ed4:	4686      	mov	lr, r0
 8006ed6:	460d      	mov	r5, r1
 8006ed8:	4e33      	ldr	r6, [pc, #204]	@ (8006fa8 <_strtoul_l.isra.0+0xd8>)
 8006eda:	4628      	mov	r0, r5
 8006edc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006ee0:	5d37      	ldrb	r7, [r6, r4]
 8006ee2:	f017 0708 	ands.w	r7, r7, #8
 8006ee6:	d1f8      	bne.n	8006eda <_strtoul_l.isra.0+0xa>
 8006ee8:	2c2d      	cmp	r4, #45	@ 0x2d
 8006eea:	d110      	bne.n	8006f0e <_strtoul_l.isra.0+0x3e>
 8006eec:	2701      	movs	r7, #1
 8006eee:	782c      	ldrb	r4, [r5, #0]
 8006ef0:	1c85      	adds	r5, r0, #2
 8006ef2:	f033 0010 	bics.w	r0, r3, #16
 8006ef6:	d115      	bne.n	8006f24 <_strtoul_l.isra.0+0x54>
 8006ef8:	2c30      	cmp	r4, #48	@ 0x30
 8006efa:	d10d      	bne.n	8006f18 <_strtoul_l.isra.0+0x48>
 8006efc:	7828      	ldrb	r0, [r5, #0]
 8006efe:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8006f02:	2858      	cmp	r0, #88	@ 0x58
 8006f04:	d108      	bne.n	8006f18 <_strtoul_l.isra.0+0x48>
 8006f06:	786c      	ldrb	r4, [r5, #1]
 8006f08:	3502      	adds	r5, #2
 8006f0a:	2310      	movs	r3, #16
 8006f0c:	e00a      	b.n	8006f24 <_strtoul_l.isra.0+0x54>
 8006f0e:	2c2b      	cmp	r4, #43	@ 0x2b
 8006f10:	bf04      	itt	eq
 8006f12:	782c      	ldrbeq	r4, [r5, #0]
 8006f14:	1c85      	addeq	r5, r0, #2
 8006f16:	e7ec      	b.n	8006ef2 <_strtoul_l.isra.0+0x22>
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d1f6      	bne.n	8006f0a <_strtoul_l.isra.0+0x3a>
 8006f1c:	2c30      	cmp	r4, #48	@ 0x30
 8006f1e:	bf14      	ite	ne
 8006f20:	230a      	movne	r3, #10
 8006f22:	2308      	moveq	r3, #8
 8006f24:	f04f 38ff 	mov.w	r8, #4294967295
 8006f28:	fbb8 f8f3 	udiv	r8, r8, r3
 8006f2c:	2600      	movs	r6, #0
 8006f2e:	fb03 f908 	mul.w	r9, r3, r8
 8006f32:	4630      	mov	r0, r6
 8006f34:	ea6f 0909 	mvn.w	r9, r9
 8006f38:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8006f3c:	f1bc 0f09 	cmp.w	ip, #9
 8006f40:	d810      	bhi.n	8006f64 <_strtoul_l.isra.0+0x94>
 8006f42:	4664      	mov	r4, ip
 8006f44:	42a3      	cmp	r3, r4
 8006f46:	dd1e      	ble.n	8006f86 <_strtoul_l.isra.0+0xb6>
 8006f48:	f1b6 3fff 	cmp.w	r6, #4294967295
 8006f4c:	d007      	beq.n	8006f5e <_strtoul_l.isra.0+0x8e>
 8006f4e:	4580      	cmp	r8, r0
 8006f50:	d316      	bcc.n	8006f80 <_strtoul_l.isra.0+0xb0>
 8006f52:	d101      	bne.n	8006f58 <_strtoul_l.isra.0+0x88>
 8006f54:	45a1      	cmp	r9, r4
 8006f56:	db13      	blt.n	8006f80 <_strtoul_l.isra.0+0xb0>
 8006f58:	2601      	movs	r6, #1
 8006f5a:	fb00 4003 	mla	r0, r0, r3, r4
 8006f5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006f62:	e7e9      	b.n	8006f38 <_strtoul_l.isra.0+0x68>
 8006f64:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8006f68:	f1bc 0f19 	cmp.w	ip, #25
 8006f6c:	d801      	bhi.n	8006f72 <_strtoul_l.isra.0+0xa2>
 8006f6e:	3c37      	subs	r4, #55	@ 0x37
 8006f70:	e7e8      	b.n	8006f44 <_strtoul_l.isra.0+0x74>
 8006f72:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8006f76:	f1bc 0f19 	cmp.w	ip, #25
 8006f7a:	d804      	bhi.n	8006f86 <_strtoul_l.isra.0+0xb6>
 8006f7c:	3c57      	subs	r4, #87	@ 0x57
 8006f7e:	e7e1      	b.n	8006f44 <_strtoul_l.isra.0+0x74>
 8006f80:	f04f 36ff 	mov.w	r6, #4294967295
 8006f84:	e7eb      	b.n	8006f5e <_strtoul_l.isra.0+0x8e>
 8006f86:	1c73      	adds	r3, r6, #1
 8006f88:	d106      	bne.n	8006f98 <_strtoul_l.isra.0+0xc8>
 8006f8a:	2322      	movs	r3, #34	@ 0x22
 8006f8c:	4630      	mov	r0, r6
 8006f8e:	f8ce 3000 	str.w	r3, [lr]
 8006f92:	b932      	cbnz	r2, 8006fa2 <_strtoul_l.isra.0+0xd2>
 8006f94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f98:	b107      	cbz	r7, 8006f9c <_strtoul_l.isra.0+0xcc>
 8006f9a:	4240      	negs	r0, r0
 8006f9c:	2a00      	cmp	r2, #0
 8006f9e:	d0f9      	beq.n	8006f94 <_strtoul_l.isra.0+0xc4>
 8006fa0:	b106      	cbz	r6, 8006fa4 <_strtoul_l.isra.0+0xd4>
 8006fa2:	1e69      	subs	r1, r5, #1
 8006fa4:	6011      	str	r1, [r2, #0]
 8006fa6:	e7f5      	b.n	8006f94 <_strtoul_l.isra.0+0xc4>
 8006fa8:	080071d3 	.word	0x080071d3

08006fac <_strtoul_r>:
 8006fac:	f7ff bf90 	b.w	8006ed0 <_strtoul_l.isra.0>

08006fb0 <_malloc_usable_size_r>:
 8006fb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fb4:	1f18      	subs	r0, r3, #4
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	bfbc      	itt	lt
 8006fba:	580b      	ldrlt	r3, [r1, r0]
 8006fbc:	18c0      	addlt	r0, r0, r3
 8006fbe:	4770      	bx	lr

08006fc0 <_init>:
 8006fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fc2:	bf00      	nop
 8006fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fc6:	bc08      	pop	{r3}
 8006fc8:	469e      	mov	lr, r3
 8006fca:	4770      	bx	lr

08006fcc <_fini>:
 8006fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fce:	bf00      	nop
 8006fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fd2:	bc08      	pop	{r3}
 8006fd4:	469e      	mov	lr, r3
 8006fd6:	4770      	bx	lr
