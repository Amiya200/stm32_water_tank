
WT1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000569c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  080057a8  080057a8  000067a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a60  08005a60  00007060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005a60  08005a60  00006a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a68  08005a68  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a68  08005a68  00006a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a6c  08005a6c  00006a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005a70  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  20000060  08005ad0  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  08005ad0  00007330  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f610  00000000  00000000  00007089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002775  00000000  00000000  00016699  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  00018e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ab4  00000000  00000000  00019bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000190d3  00000000  00000000  0001a68c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012494  00000000  00000000  0003375f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d8f1  00000000  00000000  00045bf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d34e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003de8  00000000  00000000  000d3528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000d7310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08005790 	.word	0x08005790

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08005790 	.word	0x08005790

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_uldivmod>:
 800015c:	b953      	cbnz	r3, 8000174 <__aeabi_uldivmod+0x18>
 800015e:	b94a      	cbnz	r2, 8000174 <__aeabi_uldivmod+0x18>
 8000160:	2900      	cmp	r1, #0
 8000162:	bf08      	it	eq
 8000164:	2800      	cmpeq	r0, #0
 8000166:	bf1c      	itt	ne
 8000168:	f04f 31ff 	movne.w	r1, #4294967295
 800016c:	f04f 30ff 	movne.w	r0, #4294967295
 8000170:	f000 b98c 	b.w	800048c <__aeabi_idiv0>
 8000174:	f1ad 0c08 	sub.w	ip, sp, #8
 8000178:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800017c:	f000 f806 	bl	800018c <__udivmoddi4>
 8000180:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000184:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000188:	b004      	add	sp, #16
 800018a:	4770      	bx	lr

0800018c <__udivmoddi4>:
 800018c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000190:	9d08      	ldr	r5, [sp, #32]
 8000192:	468e      	mov	lr, r1
 8000194:	4604      	mov	r4, r0
 8000196:	4688      	mov	r8, r1
 8000198:	2b00      	cmp	r3, #0
 800019a:	d14a      	bne.n	8000232 <__udivmoddi4+0xa6>
 800019c:	428a      	cmp	r2, r1
 800019e:	4617      	mov	r7, r2
 80001a0:	d962      	bls.n	8000268 <__udivmoddi4+0xdc>
 80001a2:	fab2 f682 	clz	r6, r2
 80001a6:	b14e      	cbz	r6, 80001bc <__udivmoddi4+0x30>
 80001a8:	f1c6 0320 	rsb	r3, r6, #32
 80001ac:	fa01 f806 	lsl.w	r8, r1, r6
 80001b0:	fa20 f303 	lsr.w	r3, r0, r3
 80001b4:	40b7      	lsls	r7, r6
 80001b6:	ea43 0808 	orr.w	r8, r3, r8
 80001ba:	40b4      	lsls	r4, r6
 80001bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80001c0:	fbb8 f1fe 	udiv	r1, r8, lr
 80001c4:	fa1f fc87 	uxth.w	ip, r7
 80001c8:	fb0e 8811 	mls	r8, lr, r1, r8
 80001cc:	fb01 f20c 	mul.w	r2, r1, ip
 80001d0:	0c23      	lsrs	r3, r4, #16
 80001d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001d6:	429a      	cmp	r2, r3
 80001d8:	d909      	bls.n	80001ee <__udivmoddi4+0x62>
 80001da:	18fb      	adds	r3, r7, r3
 80001dc:	f101 30ff 	add.w	r0, r1, #4294967295
 80001e0:	f080 80eb 	bcs.w	80003ba <__udivmoddi4+0x22e>
 80001e4:	429a      	cmp	r2, r3
 80001e6:	f240 80e8 	bls.w	80003ba <__udivmoddi4+0x22e>
 80001ea:	3902      	subs	r1, #2
 80001ec:	443b      	add	r3, r7
 80001ee:	1a9a      	subs	r2, r3, r2
 80001f0:	fbb2 f0fe 	udiv	r0, r2, lr
 80001f4:	fb0e 2210 	mls	r2, lr, r0, r2
 80001f8:	fb00 fc0c 	mul.w	ip, r0, ip
 80001fc:	b2a3      	uxth	r3, r4
 80001fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000202:	459c      	cmp	ip, r3
 8000204:	d909      	bls.n	800021a <__udivmoddi4+0x8e>
 8000206:	18fb      	adds	r3, r7, r3
 8000208:	f100 32ff 	add.w	r2, r0, #4294967295
 800020c:	f080 80d7 	bcs.w	80003be <__udivmoddi4+0x232>
 8000210:	459c      	cmp	ip, r3
 8000212:	f240 80d4 	bls.w	80003be <__udivmoddi4+0x232>
 8000216:	443b      	add	r3, r7
 8000218:	3802      	subs	r0, #2
 800021a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800021e:	2100      	movs	r1, #0
 8000220:	eba3 030c 	sub.w	r3, r3, ip
 8000224:	b11d      	cbz	r5, 800022e <__udivmoddi4+0xa2>
 8000226:	2200      	movs	r2, #0
 8000228:	40f3      	lsrs	r3, r6
 800022a:	e9c5 3200 	strd	r3, r2, [r5]
 800022e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000232:	428b      	cmp	r3, r1
 8000234:	d905      	bls.n	8000242 <__udivmoddi4+0xb6>
 8000236:	b10d      	cbz	r5, 800023c <__udivmoddi4+0xb0>
 8000238:	e9c5 0100 	strd	r0, r1, [r5]
 800023c:	2100      	movs	r1, #0
 800023e:	4608      	mov	r0, r1
 8000240:	e7f5      	b.n	800022e <__udivmoddi4+0xa2>
 8000242:	fab3 f183 	clz	r1, r3
 8000246:	2900      	cmp	r1, #0
 8000248:	d146      	bne.n	80002d8 <__udivmoddi4+0x14c>
 800024a:	4573      	cmp	r3, lr
 800024c:	d302      	bcc.n	8000254 <__udivmoddi4+0xc8>
 800024e:	4282      	cmp	r2, r0
 8000250:	f200 8108 	bhi.w	8000464 <__udivmoddi4+0x2d8>
 8000254:	1a84      	subs	r4, r0, r2
 8000256:	eb6e 0203 	sbc.w	r2, lr, r3
 800025a:	2001      	movs	r0, #1
 800025c:	4690      	mov	r8, r2
 800025e:	2d00      	cmp	r5, #0
 8000260:	d0e5      	beq.n	800022e <__udivmoddi4+0xa2>
 8000262:	e9c5 4800 	strd	r4, r8, [r5]
 8000266:	e7e2      	b.n	800022e <__udivmoddi4+0xa2>
 8000268:	2a00      	cmp	r2, #0
 800026a:	f000 8091 	beq.w	8000390 <__udivmoddi4+0x204>
 800026e:	fab2 f682 	clz	r6, r2
 8000272:	2e00      	cmp	r6, #0
 8000274:	f040 80a5 	bne.w	80003c2 <__udivmoddi4+0x236>
 8000278:	1a8a      	subs	r2, r1, r2
 800027a:	2101      	movs	r1, #1
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000282:	b280      	uxth	r0, r0
 8000284:	b2bc      	uxth	r4, r7
 8000286:	fbb2 fcfe 	udiv	ip, r2, lr
 800028a:	fb0e 221c 	mls	r2, lr, ip, r2
 800028e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000292:	fb04 f20c 	mul.w	r2, r4, ip
 8000296:	429a      	cmp	r2, r3
 8000298:	d907      	bls.n	80002aa <__udivmoddi4+0x11e>
 800029a:	18fb      	adds	r3, r7, r3
 800029c:	f10c 38ff 	add.w	r8, ip, #4294967295
 80002a0:	d202      	bcs.n	80002a8 <__udivmoddi4+0x11c>
 80002a2:	429a      	cmp	r2, r3
 80002a4:	f200 80e3 	bhi.w	800046e <__udivmoddi4+0x2e2>
 80002a8:	46c4      	mov	ip, r8
 80002aa:	1a9b      	subs	r3, r3, r2
 80002ac:	fbb3 f2fe 	udiv	r2, r3, lr
 80002b0:	fb0e 3312 	mls	r3, lr, r2, r3
 80002b4:	fb02 f404 	mul.w	r4, r2, r4
 80002b8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80002bc:	429c      	cmp	r4, r3
 80002be:	d907      	bls.n	80002d0 <__udivmoddi4+0x144>
 80002c0:	18fb      	adds	r3, r7, r3
 80002c2:	f102 30ff 	add.w	r0, r2, #4294967295
 80002c6:	d202      	bcs.n	80002ce <__udivmoddi4+0x142>
 80002c8:	429c      	cmp	r4, r3
 80002ca:	f200 80cd 	bhi.w	8000468 <__udivmoddi4+0x2dc>
 80002ce:	4602      	mov	r2, r0
 80002d0:	1b1b      	subs	r3, r3, r4
 80002d2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80002d6:	e7a5      	b.n	8000224 <__udivmoddi4+0x98>
 80002d8:	f1c1 0620 	rsb	r6, r1, #32
 80002dc:	408b      	lsls	r3, r1
 80002de:	fa22 f706 	lsr.w	r7, r2, r6
 80002e2:	431f      	orrs	r7, r3
 80002e4:	fa2e fa06 	lsr.w	sl, lr, r6
 80002e8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80002ec:	fbba f8f9 	udiv	r8, sl, r9
 80002f0:	fa0e fe01 	lsl.w	lr, lr, r1
 80002f4:	fa20 f306 	lsr.w	r3, r0, r6
 80002f8:	fb09 aa18 	mls	sl, r9, r8, sl
 80002fc:	fa1f fc87 	uxth.w	ip, r7
 8000300:	ea43 030e 	orr.w	r3, r3, lr
 8000304:	fa00 fe01 	lsl.w	lr, r0, r1
 8000308:	fb08 f00c 	mul.w	r0, r8, ip
 800030c:	0c1c      	lsrs	r4, r3, #16
 800030e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000312:	42a0      	cmp	r0, r4
 8000314:	fa02 f201 	lsl.w	r2, r2, r1
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x1a4>
 800031a:	193c      	adds	r4, r7, r4
 800031c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000320:	f080 809e 	bcs.w	8000460 <__udivmoddi4+0x2d4>
 8000324:	42a0      	cmp	r0, r4
 8000326:	f240 809b 	bls.w	8000460 <__udivmoddi4+0x2d4>
 800032a:	f1a8 0802 	sub.w	r8, r8, #2
 800032e:	443c      	add	r4, r7
 8000330:	1a24      	subs	r4, r4, r0
 8000332:	b298      	uxth	r0, r3
 8000334:	fbb4 f3f9 	udiv	r3, r4, r9
 8000338:	fb09 4413 	mls	r4, r9, r3, r4
 800033c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000340:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x1d0>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f103 30ff 	add.w	r0, r3, #4294967295
 800034e:	f080 8085 	bcs.w	800045c <__udivmoddi4+0x2d0>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8082 	bls.w	800045c <__udivmoddi4+0x2d0>
 8000358:	3b02      	subs	r3, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	fba0 8c02 	umull	r8, ip, r0, r2
 8000368:	4564      	cmp	r4, ip
 800036a:	4643      	mov	r3, r8
 800036c:	46e1      	mov	r9, ip
 800036e:	d364      	bcc.n	800043a <__udivmoddi4+0x2ae>
 8000370:	d061      	beq.n	8000436 <__udivmoddi4+0x2aa>
 8000372:	b15d      	cbz	r5, 800038c <__udivmoddi4+0x200>
 8000374:	ebbe 0203 	subs.w	r2, lr, r3
 8000378:	eb64 0409 	sbc.w	r4, r4, r9
 800037c:	fa04 f606 	lsl.w	r6, r4, r6
 8000380:	fa22 f301 	lsr.w	r3, r2, r1
 8000384:	431e      	orrs	r6, r3
 8000386:	40cc      	lsrs	r4, r1
 8000388:	e9c5 6400 	strd	r6, r4, [r5]
 800038c:	2100      	movs	r1, #0
 800038e:	e74e      	b.n	800022e <__udivmoddi4+0xa2>
 8000390:	fbb1 fcf2 	udiv	ip, r1, r2
 8000394:	0c01      	lsrs	r1, r0, #16
 8000396:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800039a:	b280      	uxth	r0, r0
 800039c:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80003a0:	463b      	mov	r3, r7
 80003a2:	fbb1 f1f7 	udiv	r1, r1, r7
 80003a6:	4638      	mov	r0, r7
 80003a8:	463c      	mov	r4, r7
 80003aa:	46b8      	mov	r8, r7
 80003ac:	46be      	mov	lr, r7
 80003ae:	2620      	movs	r6, #32
 80003b0:	eba2 0208 	sub.w	r2, r2, r8
 80003b4:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80003b8:	e765      	b.n	8000286 <__udivmoddi4+0xfa>
 80003ba:	4601      	mov	r1, r0
 80003bc:	e717      	b.n	80001ee <__udivmoddi4+0x62>
 80003be:	4610      	mov	r0, r2
 80003c0:	e72b      	b.n	800021a <__udivmoddi4+0x8e>
 80003c2:	f1c6 0120 	rsb	r1, r6, #32
 80003c6:	fa2e fc01 	lsr.w	ip, lr, r1
 80003ca:	40b7      	lsls	r7, r6
 80003cc:	fa0e fe06 	lsl.w	lr, lr, r6
 80003d0:	fa20 f101 	lsr.w	r1, r0, r1
 80003d4:	ea41 010e 	orr.w	r1, r1, lr
 80003d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003dc:	fbbc f8fe 	udiv	r8, ip, lr
 80003e0:	b2bc      	uxth	r4, r7
 80003e2:	fb0e cc18 	mls	ip, lr, r8, ip
 80003e6:	fb08 f904 	mul.w	r9, r8, r4
 80003ea:	0c0a      	lsrs	r2, r1, #16
 80003ec:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80003f0:	40b0      	lsls	r0, r6
 80003f2:	4591      	cmp	r9, r2
 80003f4:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80003f8:	b280      	uxth	r0, r0
 80003fa:	d93e      	bls.n	800047a <__udivmoddi4+0x2ee>
 80003fc:	18ba      	adds	r2, r7, r2
 80003fe:	f108 3cff 	add.w	ip, r8, #4294967295
 8000402:	d201      	bcs.n	8000408 <__udivmoddi4+0x27c>
 8000404:	4591      	cmp	r9, r2
 8000406:	d81f      	bhi.n	8000448 <__udivmoddi4+0x2bc>
 8000408:	eba2 0209 	sub.w	r2, r2, r9
 800040c:	fbb2 f9fe 	udiv	r9, r2, lr
 8000410:	fb09 f804 	mul.w	r8, r9, r4
 8000414:	fb0e 2a19 	mls	sl, lr, r9, r2
 8000418:	b28a      	uxth	r2, r1
 800041a:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 800041e:	4542      	cmp	r2, r8
 8000420:	d229      	bcs.n	8000476 <__udivmoddi4+0x2ea>
 8000422:	18ba      	adds	r2, r7, r2
 8000424:	f109 31ff 	add.w	r1, r9, #4294967295
 8000428:	d2c2      	bcs.n	80003b0 <__udivmoddi4+0x224>
 800042a:	4542      	cmp	r2, r8
 800042c:	d2c0      	bcs.n	80003b0 <__udivmoddi4+0x224>
 800042e:	f1a9 0102 	sub.w	r1, r9, #2
 8000432:	443a      	add	r2, r7
 8000434:	e7bc      	b.n	80003b0 <__udivmoddi4+0x224>
 8000436:	45c6      	cmp	lr, r8
 8000438:	d29b      	bcs.n	8000372 <__udivmoddi4+0x1e6>
 800043a:	ebb8 0302 	subs.w	r3, r8, r2
 800043e:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000442:	3801      	subs	r0, #1
 8000444:	46e1      	mov	r9, ip
 8000446:	e794      	b.n	8000372 <__udivmoddi4+0x1e6>
 8000448:	eba7 0909 	sub.w	r9, r7, r9
 800044c:	444a      	add	r2, r9
 800044e:	fbb2 f9fe 	udiv	r9, r2, lr
 8000452:	f1a8 0c02 	sub.w	ip, r8, #2
 8000456:	fb09 f804 	mul.w	r8, r9, r4
 800045a:	e7db      	b.n	8000414 <__udivmoddi4+0x288>
 800045c:	4603      	mov	r3, r0
 800045e:	e77d      	b.n	800035c <__udivmoddi4+0x1d0>
 8000460:	46d0      	mov	r8, sl
 8000462:	e765      	b.n	8000330 <__udivmoddi4+0x1a4>
 8000464:	4608      	mov	r0, r1
 8000466:	e6fa      	b.n	800025e <__udivmoddi4+0xd2>
 8000468:	443b      	add	r3, r7
 800046a:	3a02      	subs	r2, #2
 800046c:	e730      	b.n	80002d0 <__udivmoddi4+0x144>
 800046e:	f1ac 0c02 	sub.w	ip, ip, #2
 8000472:	443b      	add	r3, r7
 8000474:	e719      	b.n	80002aa <__udivmoddi4+0x11e>
 8000476:	4649      	mov	r1, r9
 8000478:	e79a      	b.n	80003b0 <__udivmoddi4+0x224>
 800047a:	eba2 0209 	sub.w	r2, r2, r9
 800047e:	fbb2 f9fe 	udiv	r9, r2, lr
 8000482:	46c4      	mov	ip, r8
 8000484:	fb09 f804 	mul.w	r8, r9, r4
 8000488:	e7c4      	b.n	8000414 <__udivmoddi4+0x288>
 800048a:	bf00      	nop

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop

08000490 <ADC_Init>:
/**
  * @brief Initializes the ADC hardware
  * @param hadc: Pointer to ADC handle
  */
void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
    // Calibration
    if (HAL_ADCEx_Calibration_Start(hadc) != HAL_OK)
 8000498:	6878      	ldr	r0, [r7, #4]
 800049a:	f001 fbfd 	bl	8001c98 <HAL_ADCEx_Calibration_Start>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <ADC_Init+0x18>
    {
        Error_Handler();
 80004a4:	f000 feb6 	bl	8001214 <Error_Handler>
    }
}
 80004a8:	bf00      	nop
 80004aa:	3708      	adds	r7, #8
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}

080004b0 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c2;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup (e.g., 0x4E or 0x7E)

void lcd_send_cmd (char cmd)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b086      	sub	sp, #24
 80004b4:	af02      	add	r7, sp, #8
 80004b6:	4603      	mov	r3, r0
 80004b8:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80004ba:	79fb      	ldrb	r3, [r7, #7]
 80004bc:	f023 030f 	bic.w	r3, r3, #15
 80004c0:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80004c2:	79fb      	ldrb	r3, [r7, #7]
 80004c4:	011b      	lsls	r3, r3, #4
 80004c6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0 (Command mode, Enable high)
 80004c8:	7bfb      	ldrb	r3, [r7, #15]
 80004ca:	f043 030c 	orr.w	r3, r3, #12
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 (Command mode, Enable low)
 80004d2:	7bfb      	ldrb	r3, [r7, #15]
 80004d4:	f043 0308 	orr.w	r3, r3, #8
 80004d8:	b2db      	uxtb	r3, r3
 80004da:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 (Command mode, Enable high)
 80004dc:	7bbb      	ldrb	r3, [r7, #14]
 80004de:	f043 030c 	orr.w	r3, r3, #12
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 (Command mode, Enable low)
 80004e6:	7bbb      	ldrb	r3, [r7, #14]
 80004e8:	f043 0308 	orr.w	r3, r3, #8
 80004ec:	b2db      	uxtb	r3, r3
 80004ee:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80004f0:	f107 0208 	add.w	r2, r7, #8
 80004f4:	2364      	movs	r3, #100	@ 0x64
 80004f6:	9300      	str	r3, [sp, #0]
 80004f8:	2304      	movs	r3, #4
 80004fa:	214e      	movs	r1, #78	@ 0x4e
 80004fc:	4803      	ldr	r0, [pc, #12]	@ (800050c <lcd_send_cmd+0x5c>)
 80004fe:	f002 f83d 	bl	800257c <HAL_I2C_Master_Transmit>
}
 8000502:	bf00      	nop
 8000504:	3710      	adds	r7, #16
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	200000ac 	.word	0x200000ac

08000510 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b086      	sub	sp, #24
 8000514:	af02      	add	r7, sp, #8
 8000516:	4603      	mov	r3, r0
 8000518:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	f023 030f 	bic.w	r3, r3, #15
 8000520:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000522:	79fb      	ldrb	r3, [r7, #7]
 8000524:	011b      	lsls	r3, r3, #4
 8000526:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1 (Data mode, Enable high)
 8000528:	7bfb      	ldrb	r3, [r7, #15]
 800052a:	f043 030d 	orr.w	r3, r3, #13
 800052e:	b2db      	uxtb	r3, r3
 8000530:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1 (Data mode, Enable low)
 8000532:	7bfb      	ldrb	r3, [r7, #15]
 8000534:	f043 0309 	orr.w	r3, r3, #9
 8000538:	b2db      	uxtb	r3, r3
 800053a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1 (Data mode, Enable high)
 800053c:	7bbb      	ldrb	r3, [r7, #14]
 800053e:	f043 030d 	orr.w	r3, r3, #13
 8000542:	b2db      	uxtb	r3, r3
 8000544:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1 (Data mode, Enable low)
 8000546:	7bbb      	ldrb	r3, [r7, #14]
 8000548:	f043 0309 	orr.w	r3, r3, #9
 800054c:	b2db      	uxtb	r3, r3
 800054e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000550:	f107 0208 	add.w	r2, r7, #8
 8000554:	2364      	movs	r3, #100	@ 0x64
 8000556:	9300      	str	r3, [sp, #0]
 8000558:	2304      	movs	r3, #4
 800055a:	214e      	movs	r1, #78	@ 0x4e
 800055c:	4803      	ldr	r0, [pc, #12]	@ (800056c <lcd_send_data+0x5c>)
 800055e:	f002 f80d 	bl	800257c <HAL_I2C_Master_Transmit>
}
 8000562:	bf00      	nop
 8000564:	3710      	adds	r7, #16
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	200000ac 	.word	0x200000ac

08000570 <lcd_put_cur>:
	HAL_Delay(2); // Wait for clear command to execute
	lcd_send_cmd (0x80); // Set cursor to home position (0,0)
}

void lcd_put_cur(int row, int col)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
    switch (row)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d003      	beq.n	8000588 <lcd_put_cur+0x18>
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	2b01      	cmp	r3, #1
 8000584:	d005      	beq.n	8000592 <lcd_put_cur+0x22>
 8000586:	e009      	b.n	800059c <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80; // Address for first row
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800058e:	603b      	str	r3, [r7, #0]
            break;
 8000590:	e004      	b.n	800059c <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0; // Address for second row
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000598:	603b      	str	r3, [r7, #0]
            break;
 800059a:	bf00      	nop
    }

    lcd_send_cmd (col);
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	4618      	mov	r0, r3
 80005a2:	f7ff ff85 	bl	80004b0 <lcd_send_cmd>
}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}

080005ae <lcd_init>:


void lcd_init (void)
{
 80005ae:	b580      	push	{r7, lr}
 80005b0:	af00      	add	r7, sp, #0
	// 4 bit initialisation sequence (standard for PCF8574 based LCDs)
	HAL_Delay(50);  // wait for >40ms after power-on
 80005b2:	2032      	movs	r0, #50	@ 0x32
 80005b4:	f001 f8e0 	bl	8001778 <HAL_Delay>
	lcd_send_cmd (0x30); // Function set (8-bit mode)
 80005b8:	2030      	movs	r0, #48	@ 0x30
 80005ba:	f7ff ff79 	bl	80004b0 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80005be:	2005      	movs	r0, #5
 80005c0:	f001 f8da 	bl	8001778 <HAL_Delay>
	lcd_send_cmd (0x30); // Function set (8-bit mode)
 80005c4:	2030      	movs	r0, #48	@ 0x30
 80005c6:	f7ff ff73 	bl	80004b0 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80005ca:	2001      	movs	r0, #1
 80005cc:	f001 f8d4 	bl	8001778 <HAL_Delay>
	lcd_send_cmd (0x30); // Function set (8-bit mode)
 80005d0:	2030      	movs	r0, #48	@ 0x30
 80005d2:	f7ff ff6d 	bl	80004b0 <lcd_send_cmd>
	HAL_Delay(10);
 80005d6:	200a      	movs	r0, #10
 80005d8:	f001 f8ce 	bl	8001778 <HAL_Delay>
	lcd_send_cmd (0x20);  // Function set (4-bit mode)
 80005dc:	2020      	movs	r0, #32
 80005de:	f7ff ff67 	bl	80004b0 <lcd_send_cmd>
	HAL_Delay(10);
 80005e2:	200a      	movs	r0, #10
 80005e4:	f001 f8c8 	bl	8001778 <HAL_Delay>

  // Display initialisation commands (after 4-bit mode is set)
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80005e8:	2028      	movs	r0, #40	@ 0x28
 80005ea:	f7ff ff61 	bl	80004b0 <lcd_send_cmd>
	HAL_Delay(1);
 80005ee:	2001      	movs	r0, #1
 80005f0:	f001 f8c2 	bl	8001778 <HAL_Delay>
	lcd_send_cmd (0x08); // Display on/off control --> D=0,C=0, B=0  ---> display off
 80005f4:	2008      	movs	r0, #8
 80005f6:	f7ff ff5b 	bl	80004b0 <lcd_send_cmd>
	HAL_Delay(1);
 80005fa:	2001      	movs	r0, #1
 80005fc:	f001 f8bc 	bl	8001778 <HAL_Delay>
	lcd_send_cmd (0x01);  // Clear display
 8000600:	2001      	movs	r0, #1
 8000602:	f7ff ff55 	bl	80004b0 <lcd_send_cmd>
	HAL_Delay(2); // Longer delay for clear display
 8000606:	2002      	movs	r0, #2
 8000608:	f001 f8b6 	bl	8001778 <HAL_Delay>
	lcd_send_cmd (0x06); // Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800060c:	2006      	movs	r0, #6
 800060e:	f7ff ff4f 	bl	80004b0 <lcd_send_cmd>
	HAL_Delay(1);
 8000612:	2001      	movs	r0, #1
 8000614:	f001 f8b0 	bl	8001778 <HAL_Delay>
	lcd_send_cmd (0x0C); // Display on/off control --> D = 1, C and B = 0. (Display ON, Cursor OFF, Blink OFF)
 8000618:	200c      	movs	r0, #12
 800061a:	f7ff ff49 	bl	80004b0 <lcd_send_cmd>
}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}

08000622 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000622:	b580      	push	{r7, lr}
 8000624:	b082      	sub	sp, #8
 8000626:	af00      	add	r7, sp, #0
 8000628:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800062a:	e006      	b.n	800063a <lcd_send_string+0x18>
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	1c5a      	adds	r2, r3, #1
 8000630:	607a      	str	r2, [r7, #4]
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	4618      	mov	r0, r3
 8000636:	f7ff ff6b 	bl	8000510 <lcd_send_data>
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d1f4      	bne.n	800062c <lcd_send_string+0xa>
}
 8000642:	bf00      	nop
 8000644:	bf00      	nop
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <LoRa_WriteReg>:

#define NSS_LOW()   HAL_GPIO_WritePin(LORA_NSS_PORT, LORA_NSS_PIN, GPIO_PIN_RESET)
#define NSS_HIGH()  HAL_GPIO_WritePin(LORA_NSS_PORT, LORA_NSS_PIN, GPIO_PIN_SET)

/* --- low-level SPI helpers --- */
void LoRa_WriteReg(uint8_t addr, uint8_t data) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	460a      	mov	r2, r1
 8000656:	71fb      	strb	r3, [r7, #7]
 8000658:	4613      	mov	r3, r2
 800065a:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2] = { (uint8_t)(addr | 0x80), data };
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000662:	b2db      	uxtb	r3, r3
 8000664:	733b      	strb	r3, [r7, #12]
 8000666:	79bb      	ldrb	r3, [r7, #6]
 8000668:	737b      	strb	r3, [r7, #13]
    NSS_LOW();
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000670:	480a      	ldr	r0, [pc, #40]	@ (800069c <LoRa_WriteReg+0x50>)
 8000672:	f001 fe27 	bl	80022c4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, buf, 2, HAL_MAX_DELAY);
 8000676:	f107 010c 	add.w	r1, r7, #12
 800067a:	f04f 33ff 	mov.w	r3, #4294967295
 800067e:	2202      	movs	r2, #2
 8000680:	4807      	ldr	r0, [pc, #28]	@ (80006a0 <LoRa_WriteReg+0x54>)
 8000682:	f003 fc8d 	bl	8003fa0 <HAL_SPI_Transmit>
    NSS_HIGH();
 8000686:	2201      	movs	r2, #1
 8000688:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800068c:	4803      	ldr	r0, [pc, #12]	@ (800069c <LoRa_WriteReg+0x50>)
 800068e:	f001 fe19 	bl	80022c4 <HAL_GPIO_WritePin>
}
 8000692:	bf00      	nop
 8000694:	3710      	adds	r7, #16
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40010800 	.word	0x40010800
 80006a0:	20000100 	.word	0x20000100

080006a4 <LoRa_ReadReg>:

uint8_t LoRa_ReadReg(uint8_t addr) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	71fb      	strb	r3, [r7, #7]
    uint8_t tx = addr & 0x7F;
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	73fb      	strb	r3, [r7, #15]
    uint8_t rx = 0;
 80006b8:	2300      	movs	r3, #0
 80006ba:	73bb      	strb	r3, [r7, #14]
    NSS_LOW();
 80006bc:	2200      	movs	r2, #0
 80006be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006c2:	480f      	ldr	r0, [pc, #60]	@ (8000700 <LoRa_ReadReg+0x5c>)
 80006c4:	f001 fdfe 	bl	80022c4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &tx, 1, HAL_MAX_DELAY);
 80006c8:	f107 010f 	add.w	r1, r7, #15
 80006cc:	f04f 33ff 	mov.w	r3, #4294967295
 80006d0:	2201      	movs	r2, #1
 80006d2:	480c      	ldr	r0, [pc, #48]	@ (8000704 <LoRa_ReadReg+0x60>)
 80006d4:	f003 fc64 	bl	8003fa0 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, &rx, 1, HAL_MAX_DELAY);
 80006d8:	f107 010e 	add.w	r1, r7, #14
 80006dc:	f04f 33ff 	mov.w	r3, #4294967295
 80006e0:	2201      	movs	r2, #1
 80006e2:	4808      	ldr	r0, [pc, #32]	@ (8000704 <LoRa_ReadReg+0x60>)
 80006e4:	f003 fda0 	bl	8004228 <HAL_SPI_Receive>
    NSS_HIGH();
 80006e8:	2201      	movs	r2, #1
 80006ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006ee:	4804      	ldr	r0, [pc, #16]	@ (8000700 <LoRa_ReadReg+0x5c>)
 80006f0:	f001 fde8 	bl	80022c4 <HAL_GPIO_WritePin>
    return rx;
 80006f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40010800 	.word	0x40010800
 8000704:	20000100 	.word	0x20000100

08000708 <LoRa_WriteBuffer>:

void LoRa_WriteBuffer(uint8_t addr, const uint8_t *buffer, uint8_t size) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	6039      	str	r1, [r7, #0]
 8000712:	71fb      	strb	r3, [r7, #7]
 8000714:	4613      	mov	r3, r2
 8000716:	71bb      	strb	r3, [r7, #6]
    uint8_t a = addr | 0x80;
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800071e:	b2db      	uxtb	r3, r3
 8000720:	73fb      	strb	r3, [r7, #15]
    NSS_LOW();
 8000722:	2200      	movs	r2, #0
 8000724:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000728:	480e      	ldr	r0, [pc, #56]	@ (8000764 <LoRa_WriteBuffer+0x5c>)
 800072a:	f001 fdcb 	bl	80022c4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &a, 1, HAL_MAX_DELAY);
 800072e:	f107 010f 	add.w	r1, r7, #15
 8000732:	f04f 33ff 	mov.w	r3, #4294967295
 8000736:	2201      	movs	r2, #1
 8000738:	480b      	ldr	r0, [pc, #44]	@ (8000768 <LoRa_WriteBuffer+0x60>)
 800073a:	f003 fc31 	bl	8003fa0 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)buffer, size, HAL_MAX_DELAY);
 800073e:	79bb      	ldrb	r3, [r7, #6]
 8000740:	b29a      	uxth	r2, r3
 8000742:	f04f 33ff 	mov.w	r3, #4294967295
 8000746:	6839      	ldr	r1, [r7, #0]
 8000748:	4807      	ldr	r0, [pc, #28]	@ (8000768 <LoRa_WriteBuffer+0x60>)
 800074a:	f003 fc29 	bl	8003fa0 <HAL_SPI_Transmit>
    NSS_HIGH();
 800074e:	2201      	movs	r2, #1
 8000750:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000754:	4803      	ldr	r0, [pc, #12]	@ (8000764 <LoRa_WriteBuffer+0x5c>)
 8000756:	f001 fdb5 	bl	80022c4 <HAL_GPIO_WritePin>
}
 800075a:	bf00      	nop
 800075c:	3710      	adds	r7, #16
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40010800 	.word	0x40010800
 8000768:	20000100 	.word	0x20000100

0800076c <LoRa_ReadBuffer>:

void LoRa_ReadBuffer(uint8_t addr, uint8_t *buffer, uint8_t size) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	6039      	str	r1, [r7, #0]
 8000776:	71fb      	strb	r3, [r7, #7]
 8000778:	4613      	mov	r3, r2
 800077a:	71bb      	strb	r3, [r7, #6]
    uint8_t a = addr & 0x7F;
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000782:	b2db      	uxtb	r3, r3
 8000784:	73fb      	strb	r3, [r7, #15]
    NSS_LOW();
 8000786:	2200      	movs	r2, #0
 8000788:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800078c:	480e      	ldr	r0, [pc, #56]	@ (80007c8 <LoRa_ReadBuffer+0x5c>)
 800078e:	f001 fd99 	bl	80022c4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &a, 1, HAL_MAX_DELAY);
 8000792:	f107 010f 	add.w	r1, r7, #15
 8000796:	f04f 33ff 	mov.w	r3, #4294967295
 800079a:	2201      	movs	r2, #1
 800079c:	480b      	ldr	r0, [pc, #44]	@ (80007cc <LoRa_ReadBuffer+0x60>)
 800079e:	f003 fbff 	bl	8003fa0 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, buffer, size, HAL_MAX_DELAY);
 80007a2:	79bb      	ldrb	r3, [r7, #6]
 80007a4:	b29a      	uxth	r2, r3
 80007a6:	f04f 33ff 	mov.w	r3, #4294967295
 80007aa:	6839      	ldr	r1, [r7, #0]
 80007ac:	4807      	ldr	r0, [pc, #28]	@ (80007cc <LoRa_ReadBuffer+0x60>)
 80007ae:	f003 fd3b 	bl	8004228 <HAL_SPI_Receive>
    NSS_HIGH();
 80007b2:	2201      	movs	r2, #1
 80007b4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007b8:	4803      	ldr	r0, [pc, #12]	@ (80007c8 <LoRa_ReadBuffer+0x5c>)
 80007ba:	f001 fd83 	bl	80022c4 <HAL_GPIO_WritePin>
}
 80007be:	bf00      	nop
 80007c0:	3710      	adds	r7, #16
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40010800 	.word	0x40010800
 80007cc:	20000100 	.word	0x20000100

080007d0 <LoRa_Reset>:

/* --- reset --- */
void LoRa_Reset(void) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LORA_RESET_PORT, LORA_RESET_PIN, GPIO_PIN_RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2140      	movs	r1, #64	@ 0x40
 80007d8:	4807      	ldr	r0, [pc, #28]	@ (80007f8 <LoRa_Reset+0x28>)
 80007da:	f001 fd73 	bl	80022c4 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 80007de:	2002      	movs	r0, #2
 80007e0:	f000 ffca 	bl	8001778 <HAL_Delay>
    HAL_GPIO_WritePin(LORA_RESET_PORT, LORA_RESET_PIN, GPIO_PIN_SET);
 80007e4:	2201      	movs	r2, #1
 80007e6:	2140      	movs	r1, #64	@ 0x40
 80007e8:	4803      	ldr	r0, [pc, #12]	@ (80007f8 <LoRa_Reset+0x28>)
 80007ea:	f001 fd6b 	bl	80022c4 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80007ee:	200a      	movs	r0, #10
 80007f0:	f000 ffc2 	bl	8001778 <HAL_Delay>
}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40010c00 	.word	0x40010c00

080007fc <LoRa_SetFrequency>:

/* --- set frequency (Hz) --- */
void LoRa_SetFrequency(uint32_t freqHz) {
 80007fc:	b5b0      	push	{r4, r5, r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
    /* FRF = freq * 2^19 / 32e6 */
    uint64_t frf = ((uint64_t)freqHz << 19) / 32000000ULL;
 8000804:	6879      	ldr	r1, [r7, #4]
 8000806:	2000      	movs	r0, #0
 8000808:	460a      	mov	r2, r1
 800080a:	4603      	mov	r3, r0
 800080c:	0b55      	lsrs	r5, r2, #13
 800080e:	04d4      	lsls	r4, r2, #19
 8000810:	4a18      	ldr	r2, [pc, #96]	@ (8000874 <LoRa_SetFrequency+0x78>)
 8000812:	f04f 0300 	mov.w	r3, #0
 8000816:	4620      	mov	r0, r4
 8000818:	4629      	mov	r1, r5
 800081a:	f7ff fc9f 	bl	800015c <__aeabi_uldivmod>
 800081e:	4602      	mov	r2, r0
 8000820:	460b      	mov	r3, r1
 8000822:	e9c7 2302 	strd	r2, r3, [r7, #8]
    LoRa_WriteReg(0x06, (uint8_t)(frf >> 16));
 8000826:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800082a:	f04f 0200 	mov.w	r2, #0
 800082e:	f04f 0300 	mov.w	r3, #0
 8000832:	0c02      	lsrs	r2, r0, #16
 8000834:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000838:	0c0b      	lsrs	r3, r1, #16
 800083a:	b2d3      	uxtb	r3, r2
 800083c:	4619      	mov	r1, r3
 800083e:	2006      	movs	r0, #6
 8000840:	f7ff ff04 	bl	800064c <LoRa_WriteReg>
    LoRa_WriteReg(0x07, (uint8_t)(frf >> 8));
 8000844:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000848:	f04f 0200 	mov.w	r2, #0
 800084c:	f04f 0300 	mov.w	r3, #0
 8000850:	0a02      	lsrs	r2, r0, #8
 8000852:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000856:	0a0b      	lsrs	r3, r1, #8
 8000858:	b2d3      	uxtb	r3, r2
 800085a:	4619      	mov	r1, r3
 800085c:	2007      	movs	r0, #7
 800085e:	f7ff fef5 	bl	800064c <LoRa_WriteReg>
    LoRa_WriteReg(0x08, (uint8_t)(frf >> 0));
 8000862:	7a3b      	ldrb	r3, [r7, #8]
 8000864:	4619      	mov	r1, r3
 8000866:	2008      	movs	r0, #8
 8000868:	f7ff fef0 	bl	800064c <LoRa_WriteReg>
}
 800086c:	bf00      	nop
 800086e:	3710      	adds	r7, #16
 8000870:	46bd      	mov	sp, r7
 8000872:	bdb0      	pop	{r4, r5, r7, pc}
 8000874:	01e84800 	.word	0x01e84800

08000878 <LoRa_Init>:

/* --- init with settings that match Arduino LoRa defaults --- */
void LoRa_Init(void) {
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
    LoRa_Reset();
 800087c:	f7ff ffa8 	bl	80007d0 <LoRa_Reset>

    /* Sleep, then LoRa sleep mode */
    LoRa_WriteReg(0x01, 0x00);
 8000880:	2100      	movs	r1, #0
 8000882:	2001      	movs	r0, #1
 8000884:	f7ff fee2 	bl	800064c <LoRa_WriteReg>
    HAL_Delay(5);
 8000888:	2005      	movs	r0, #5
 800088a:	f000 ff75 	bl	8001778 <HAL_Delay>
    LoRa_WriteReg(0x01, 0x80);
 800088e:	2180      	movs	r1, #128	@ 0x80
 8000890:	2001      	movs	r0, #1
 8000892:	f7ff fedb 	bl	800064c <LoRa_WriteReg>
    HAL_Delay(5);
 8000896:	2005      	movs	r0, #5
 8000898:	f000 ff6e 	bl	8001778 <HAL_Delay>

    /* Frequency (433 MHz) */
    LoRa_SetFrequency(433000000);
 800089c:	4818      	ldr	r0, [pc, #96]	@ (8000900 <LoRa_Init+0x88>)
 800089e:	f7ff ffad 	bl	80007fc <LoRa_SetFrequency>

    /* PA config: PA_BOOST, max power (common for SX1278 Ra-02) */
    LoRa_WriteReg(0x09, 0x8F); // PA_BOOST, max power
 80008a2:	218f      	movs	r1, #143	@ 0x8f
 80008a4:	2009      	movs	r0, #9
 80008a6:	f7ff fed1 	bl	800064c <LoRa_WriteReg>

    /* Enable high-power PA if module supports it (optional) */
    LoRa_WriteReg(0x4D, 0x87); // RegPaDac (only on SX1276/78 family)
 80008aa:	2187      	movs	r1, #135	@ 0x87
 80008ac:	204d      	movs	r0, #77	@ 0x4d
 80008ae:	f7ff fecd 	bl	800064c <LoRa_WriteReg>

    /* LNA */
    LoRa_WriteReg(0x0C, 0x23);
 80008b2:	2123      	movs	r1, #35	@ 0x23
 80008b4:	200c      	movs	r0, #12
 80008b6:	f7ff fec9 	bl	800064c <LoRa_WriteReg>
    /* Modem config:
       RegModemConfig1 = 0x72 -> BW=125kHz, CR=4/5, Explicit header
       RegModemConfig2 = 0x74 -> SF7, CRC ON (Arduino default)
       RegModemConfig3 = 0x04 -> LowDataRateOptimize off, AGC Auto On
    */
    LoRa_WriteReg(0x1D, 0x72);
 80008ba:	2172      	movs	r1, #114	@ 0x72
 80008bc:	201d      	movs	r0, #29
 80008be:	f7ff fec5 	bl	800064c <LoRa_WriteReg>
    LoRa_WriteReg(0x1E, 0x74);
 80008c2:	2174      	movs	r1, #116	@ 0x74
 80008c4:	201e      	movs	r0, #30
 80008c6:	f7ff fec1 	bl	800064c <LoRa_WriteReg>
    LoRa_WriteReg(0x26, 0x04);
 80008ca:	2104      	movs	r1, #4
 80008cc:	2026      	movs	r0, #38	@ 0x26
 80008ce:	f7ff febd 	bl	800064c <LoRa_WriteReg>

    /* Preamble = 8 */
    LoRa_WriteReg(0x20, 0x00);
 80008d2:	2100      	movs	r1, #0
 80008d4:	2020      	movs	r0, #32
 80008d6:	f7ff feb9 	bl	800064c <LoRa_WriteReg>
    LoRa_WriteReg(0x21, 0x08);
 80008da:	2108      	movs	r1, #8
 80008dc:	2021      	movs	r0, #33	@ 0x21
 80008de:	f7ff feb5 	bl	800064c <LoRa_WriteReg>

    /* SyncWord = 0x22 (matches LoRa.setSyncWord(0x22) on Arduino) */
    LoRa_WriteReg(0x39, 0x22);
 80008e2:	2122      	movs	r1, #34	@ 0x22
 80008e4:	2039      	movs	r0, #57	@ 0x39
 80008e6:	f7ff feb1 	bl	800064c <LoRa_WriteReg>

    /* Map DIO0 = RxDone/TxDone as normal (we'll poll IRQs) */
    LoRa_WriteReg(0x40, 0x00);
 80008ea:	2100      	movs	r1, #0
 80008ec:	2040      	movs	r0, #64	@ 0x40
 80008ee:	f7ff fead 	bl	800064c <LoRa_WriteReg>

    /* Clear IRQs */
    LoRa_WriteReg(0x12, 0xFF);
 80008f2:	21ff      	movs	r1, #255	@ 0xff
 80008f4:	2012      	movs	r0, #18
 80008f6:	f7ff fea9 	bl	800064c <LoRa_WriteReg>
}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	19cf0e40 	.word	0x19cf0e40

08000904 <LoRa_SetStandby>:

/**
  * @brief Sets the LoRa module to Standby mode.
  */
void LoRa_SetStandby(void) {
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
    LoRa_WriteReg(0x01, 0x81); // Standby mode
 8000908:	2181      	movs	r1, #129	@ 0x81
 800090a:	2001      	movs	r0, #1
 800090c:	f7ff fe9e 	bl	800064c <LoRa_WriteReg>
    HAL_Delay(2);
 8000910:	2002      	movs	r0, #2
 8000912:	f000 ff31 	bl	8001778 <HAL_Delay>
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}

0800091a <LoRa_SetRxContinuous>:

/**
  * @brief Sets the LoRa module to Continuous Receive mode.
  */
void LoRa_SetRxContinuous(void) {
 800091a:	b580      	push	{r7, lr}
 800091c:	af00      	add	r7, sp, #0
    LoRa_WriteReg(0x01, 0x85); // Continuous RX mode
 800091e:	2185      	movs	r1, #133	@ 0x85
 8000920:	2001      	movs	r0, #1
 8000922:	f7ff fe93 	bl	800064c <LoRa_WriteReg>
    HAL_Delay(2);
 8000926:	2002      	movs	r0, #2
 8000928:	f000 ff26 	bl	8001778 <HAL_Delay>
}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}

08000930 <LoRa_SetTx>:

/**
  * @brief Sets the LoRa module to Transmit mode.
  */
void LoRa_SetTx(void) {
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
    LoRa_WriteReg(0x01, 0x83); // TX mode
 8000934:	2183      	movs	r1, #131	@ 0x83
 8000936:	2001      	movs	r0, #1
 8000938:	f7ff fe88 	bl	800064c <LoRa_WriteReg>
    HAL_Delay(2);
 800093c:	2002      	movs	r0, #2
 800093e:	f000 ff1b 	bl	8001778 <HAL_Delay>
}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}

08000946 <LoRa_SendPacket>:

/* --- send packet, poll TxDone, return to RX --- */
void LoRa_SendPacket(const uint8_t *buffer, uint8_t size) {
 8000946:	b580      	push	{r7, lr}
 8000948:	b084      	sub	sp, #16
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
 800094e:	460b      	mov	r3, r1
 8000950:	70fb      	strb	r3, [r7, #3]
    LoRa_SetStandby(); // Go to Standby before TX
 8000952:	f7ff ffd7 	bl	8000904 <LoRa_SetStandby>

    /* Reset FIFO pointers */
    LoRa_WriteReg(0x0E, 0x00);
 8000956:	2100      	movs	r1, #0
 8000958:	200e      	movs	r0, #14
 800095a:	f7ff fe77 	bl	800064c <LoRa_WriteReg>
    LoRa_WriteReg(0x0D, 0x00);
 800095e:	2100      	movs	r1, #0
 8000960:	200d      	movs	r0, #13
 8000962:	f7ff fe73 	bl	800064c <LoRa_WriteReg>

    /* Write payload */
    LoRa_WriteBuffer(0x00, buffer, size);
 8000966:	78fb      	ldrb	r3, [r7, #3]
 8000968:	461a      	mov	r2, r3
 800096a:	6879      	ldr	r1, [r7, #4]
 800096c:	2000      	movs	r0, #0
 800096e:	f7ff fecb 	bl	8000708 <LoRa_WriteBuffer>
    LoRa_WriteReg(0x22, size);
 8000972:	78fb      	ldrb	r3, [r7, #3]
 8000974:	4619      	mov	r1, r3
 8000976:	2022      	movs	r0, #34	@ 0x22
 8000978:	f7ff fe68 	bl	800064c <LoRa_WriteReg>

    /* Clear IRQs */
    LoRa_WriteReg(0x12, 0xFF);
 800097c:	21ff      	movs	r1, #255	@ 0xff
 800097e:	2012      	movs	r0, #18
 8000980:	f7ff fe64 	bl	800064c <LoRa_WriteReg>

    LoRa_SetTx(); // Enter TX
 8000984:	f7ff ffd4 	bl	8000930 <LoRa_SetTx>

    /* Wait for TxDone */
    uint32_t t0 = HAL_GetTick();
 8000988:	f000 feec 	bl	8001764 <HAL_GetTick>
 800098c:	60f8      	str	r0, [r7, #12]
    while ((LoRa_ReadReg(0x12) & 0x08) == 0) {
 800098e:	e00a      	b.n	80009a6 <LoRa_SendPacket+0x60>
        if ((HAL_GetTick() - t0) > 2000) break; // timeout 2s
 8000990:	f000 fee8 	bl	8001764 <HAL_GetTick>
 8000994:	4602      	mov	r2, r0
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	1ad3      	subs	r3, r2, r3
 800099a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800099e:	d80b      	bhi.n	80009b8 <LoRa_SendPacket+0x72>
        HAL_Delay(1);
 80009a0:	2001      	movs	r0, #1
 80009a2:	f000 fee9 	bl	8001778 <HAL_Delay>
    while ((LoRa_ReadReg(0x12) & 0x08) == 0) {
 80009a6:	2012      	movs	r0, #18
 80009a8:	f7ff fe7c 	bl	80006a4 <LoRa_ReadReg>
 80009ac:	4603      	mov	r3, r0
 80009ae:	f003 0308 	and.w	r3, r3, #8
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d0ec      	beq.n	8000990 <LoRa_SendPacket+0x4a>
 80009b6:	e000      	b.n	80009ba <LoRa_SendPacket+0x74>
        if ((HAL_GetTick() - t0) > 2000) break; // timeout 2s
 80009b8:	bf00      	nop
    }

    /* Clear TxDone (if set) */
    LoRa_WriteReg(0x12, 0x08);
 80009ba:	2108      	movs	r1, #8
 80009bc:	2012      	movs	r0, #18
 80009be:	f7ff fe45 	bl	800064c <LoRa_WriteReg>

    LoRa_SetRxContinuous(); // Back to RX after TX
 80009c2:	f7ff ffaa 	bl	800091a <LoRa_SetRxContinuous>
}
 80009c6:	bf00      	nop
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}

080009ce <LoRa_ReceivePacket>:

/* --- receive helper: returns length or 0 --- */
uint8_t LoRa_ReceivePacket(uint8_t *buffer) {
 80009ce:	b580      	push	{r7, lr}
 80009d0:	b084      	sub	sp, #16
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	6078      	str	r0, [r7, #4]
    uint8_t irq = LoRa_ReadReg(0x12);
 80009d6:	2012      	movs	r0, #18
 80009d8:	f7ff fe64 	bl	80006a4 <LoRa_ReadReg>
 80009dc:	4603      	mov	r3, r0
 80009de:	73fb      	strb	r3, [r7, #15]
    if (irq & 0x40) { // RxDone
 80009e0:	7bfb      	ldrb	r3, [r7, #15]
 80009e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d025      	beq.n	8000a36 <LoRa_ReceivePacket+0x68>
        /* If CRC error bit (0x20) is set, ignore */
        if (irq & 0x20) {
 80009ea:	7bfb      	ldrb	r3, [r7, #15]
 80009ec:	f003 0320 	and.w	r3, r3, #32
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d005      	beq.n	8000a00 <LoRa_ReceivePacket+0x32>
            /* CRC error */
            LoRa_WriteReg(0x12, 0xFF);
 80009f4:	21ff      	movs	r1, #255	@ 0xff
 80009f6:	2012      	movs	r0, #18
 80009f8:	f7ff fe28 	bl	800064c <LoRa_WriteReg>
            return 0;
 80009fc:	2300      	movs	r3, #0
 80009fe:	e01b      	b.n	8000a38 <LoRa_ReceivePacket+0x6a>
        }
        uint8_t nb = LoRa_ReadReg(0x13);   // RegRxNbBytes
 8000a00:	2013      	movs	r0, #19
 8000a02:	f7ff fe4f 	bl	80006a4 <LoRa_ReadReg>
 8000a06:	4603      	mov	r3, r0
 8000a08:	73bb      	strb	r3, [r7, #14]
        uint8_t addr = LoRa_ReadReg(0x10); // RegFifoRxCurrentAddr
 8000a0a:	2010      	movs	r0, #16
 8000a0c:	f7ff fe4a 	bl	80006a4 <LoRa_ReadReg>
 8000a10:	4603      	mov	r3, r0
 8000a12:	737b      	strb	r3, [r7, #13]
        LoRa_WriteReg(0x0D, addr);
 8000a14:	7b7b      	ldrb	r3, [r7, #13]
 8000a16:	4619      	mov	r1, r3
 8000a18:	200d      	movs	r0, #13
 8000a1a:	f7ff fe17 	bl	800064c <LoRa_WriteReg>
        LoRa_ReadBuffer(0x00, buffer, nb);
 8000a1e:	7bbb      	ldrb	r3, [r7, #14]
 8000a20:	461a      	mov	r2, r3
 8000a22:	6879      	ldr	r1, [r7, #4]
 8000a24:	2000      	movs	r0, #0
 8000a26:	f7ff fea1 	bl	800076c <LoRa_ReadBuffer>
        LoRa_WriteReg(0x12, 0xFF); // clear IRQs
 8000a2a:	21ff      	movs	r1, #255	@ 0xff
 8000a2c:	2012      	movs	r0, #18
 8000a2e:	f7ff fe0d 	bl	800064c <LoRa_WriteReg>
        return nb;
 8000a32:	7bbb      	ldrb	r3, [r7, #14]
 8000a34:	e000      	b.n	8000a38 <LoRa_ReceivePacket+0x6a>
    }
    return 0;
 8000a36:	2300      	movs	r3, #0
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3710      	adds	r7, #16
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <Debug_Print>:
static void MX_USART1_UART_Init(void);
static void MX_I2C2_Init(void);
static uint8_t z = 0;

/* USER CODE BEGIN 0 */
void Debug_Print(char *msg) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f7ff fb7f 	bl	800014c <strlen>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	b29a      	uxth	r2, r3
 8000a52:	f04f 33ff 	mov.w	r3, #4294967295
 8000a56:	6879      	ldr	r1, [r7, #4]
 8000a58:	4803      	ldr	r0, [pc, #12]	@ (8000a68 <Debug_Print+0x28>)
 8000a5a:	f004 f802 	bl	8004a62 <HAL_UART_Transmit>
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000158 	.word	0x20000158

08000a6c <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b0a8      	sub	sp, #160	@ 0xa0
 8000a70:	af02      	add	r7, sp, #8

  /* MCU Configuration */
  HAL_Init();
 8000a72:	f000 fe1f 	bl	80016b4 <HAL_Init>
  SystemClock_Config();
 8000a76:	f000 f9ff 	bl	8000e78 <SystemClock_Config>

  MX_GPIO_Init();
 8000a7a:	f000 fb23 	bl	80010c4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000a7e:	f000 fa55 	bl	8000f2c <MX_ADC1_Init>
//  MX_RTC_Init(); // RTC is commented out in original, keeping it that way
  MX_SPI1_Init();
 8000a82:	f000 fabf 	bl	8001004 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000a86:	f000 faf3 	bl	8001070 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8000a8a:	f000 fa8d 	bl	8000fa8 <MX_I2C2_Init>

  /* USER CODE BEGIN 2 */
  lcd_init();
 8000a8e:	f7ff fd8e 	bl	80005ae <lcd_init>
  ADC_Init(&hadc1);
 8000a92:	48be      	ldr	r0, [pc, #760]	@ (8000d8c <main+0x320>)
 8000a94:	f7ff fcfc 	bl	8000490 <ADC_Init>
  LoRa_Init(); // Initialize LoRa module
 8000a98:	f7ff feee 	bl	8000878 <LoRa_Init>

  Debug_Print("System Initialized\r\n");
 8000a9c:	48bc      	ldr	r0, [pc, #752]	@ (8000d90 <main+0x324>)
 8000a9e:	f7ff ffcf 	bl	8000a40 <Debug_Print>
  uint8_t modem = LoRa_ReadReg(0x1D);
 8000aa2:	201d      	movs	r0, #29
 8000aa4:	f7ff fdfe 	bl	80006a4 <LoRa_ReadReg>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint8_t modem2 = LoRa_ReadReg(0x1E);
 8000aae:	201e      	movs	r0, #30
 8000ab0:	f7ff fdf8 	bl	80006a4 <LoRa_ReadReg>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  char dbg[50];
  sprintf(dbg, "ModemCfg1=0x%02X, ModemCfg2=0x%02X\r\n", modem, modem2);
 8000aba:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 8000abe:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8000ac2:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8000ac6:	49b3      	ldr	r1, [pc, #716]	@ (8000d94 <main+0x328>)
 8000ac8:	f004 f9a0 	bl	8004e0c <siprintf>
  Debug_Print(dbg);
 8000acc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff ffb5 	bl	8000a40 <Debug_Print>

  // Set initial LoRa mode
  if (loraMode == LORA_MODE_RECEIVER || loraMode == LORA_MODE_TRANCEIVER) {
 8000ad6:	4bb0      	ldr	r3, [pc, #704]	@ (8000d98 <main+0x32c>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	2b02      	cmp	r3, #2
 8000adc:	d003      	beq.n	8000ae6 <main+0x7a>
 8000ade:	4bae      	ldr	r3, [pc, #696]	@ (8000d98 <main+0x32c>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b03      	cmp	r3, #3
 8000ae4:	d105      	bne.n	8000af2 <main+0x86>
      LoRa_SetRxContinuous(); // Start in RX mode if receiver or transceiver
 8000ae6:	f7ff ff18 	bl	800091a <LoRa_SetRxContinuous>
      Debug_Print("LoRa set to RX Continuous mode.\r\n");
 8000aea:	48ac      	ldr	r0, [pc, #688]	@ (8000d9c <main+0x330>)
 8000aec:	f7ff ffa8 	bl	8000a40 <Debug_Print>
  if (loraMode == LORA_MODE_RECEIVER || loraMode == LORA_MODE_TRANCEIVER) {
 8000af0:	e004      	b.n	8000afc <main+0x90>
  } else {
      LoRa_SetStandby(); // Otherwise, start in Standby
 8000af2:	f7ff ff07 	bl	8000904 <LoRa_SetStandby>
      Debug_Print("LoRa set to Standby mode.\r\n");
 8000af6:	48aa      	ldr	r0, [pc, #680]	@ (8000da0 <main+0x334>)
 8000af8:	f7ff ffa2 	bl	8000a40 <Debug_Print>
  /* USER CODE END 2 */

  /* Infinite loop */
  while (1) {
      // === Verify LoRa chip ===
      uint8_t version = LoRa_ReadReg(0x42);  // SX1278 RegVersion
 8000afc:	2042      	movs	r0, #66	@ 0x42
 8000afe:	f7ff fdd1 	bl	80006a4 <LoRa_ReadReg>
 8000b02:	4603      	mov	r3, r0
 8000b04:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
      if (version != 0x12) {
 8000b08:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 8000b0c:	2b12      	cmp	r3, #18
 8000b0e:	d012      	beq.n	8000b36 <main+0xca>
          z = 1;
 8000b10:	4ba4      	ldr	r3, [pc, #656]	@ (8000da4 <main+0x338>)
 8000b12:	2201      	movs	r2, #1
 8000b14:	701a      	strb	r2, [r3, #0]
          char errMsg[50];
          sprintf(errMsg, "LoRa not found! RegVersion=0x%02X\r\n", version);
 8000b16:	f897 208d 	ldrb.w	r2, [r7, #141]	@ 0x8d
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	49a2      	ldr	r1, [pc, #648]	@ (8000da8 <main+0x33c>)
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f004 f974 	bl	8004e0c <siprintf>
          Debug_Print(errMsg);
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff ff8a 	bl	8000a40 <Debug_Print>
          HAL_Delay(2000);
 8000b2c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b30:	f000 fe22 	bl	8001778 <HAL_Delay>
          continue; // retry until chip responds
 8000b34:	e194      	b.n	8000e60 <main+0x3f4>
      }

      switch (loraMode) {
 8000b36:	4b98      	ldr	r3, [pc, #608]	@ (8000d98 <main+0x32c>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b03      	cmp	r3, #3
 8000b3c:	f000 809a 	beq.w	8000c74 <main+0x208>
 8000b40:	2b03      	cmp	r3, #3
 8000b42:	f300 8159 	bgt.w	8000df8 <main+0x38c>
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d002      	beq.n	8000b50 <main+0xe4>
 8000b4a:	2b02      	cmp	r3, #2
 8000b4c:	d01a      	beq.n	8000b84 <main+0x118>
 8000b4e:	e153      	b.n	8000df8 <main+0x38c>
          case LORA_MODE_TRANSMITTER:
              // Transmitter logic
              Debug_Print("LoRa Mode: Transmitter\r\n");
 8000b50:	4896      	ldr	r0, [pc, #600]	@ (8000dac <main+0x340>)
 8000b52:	f7ff ff75 	bl	8000a40 <Debug_Print>
              uint8_t tx_msg[] = "HELLO_TX";
 8000b56:	4a96      	ldr	r2, [pc, #600]	@ (8000db0 <main+0x344>)
 8000b58:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000b5c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b5e:	c303      	stmia	r3!, {r0, r1}
 8000b60:	701a      	strb	r2, [r3, #0]
              z=5;
 8000b62:	4b90      	ldr	r3, [pc, #576]	@ (8000da4 <main+0x338>)
 8000b64:	2205      	movs	r2, #5
 8000b66:	701a      	strb	r2, [r3, #0]
              LoRa_SendPacket(tx_msg, sizeof(tx_msg) - 1);
 8000b68:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000b6c:	2108      	movs	r1, #8
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff fee9 	bl	8000946 <LoRa_SendPacket>
              Debug_Print("Sent: HELLO_TX\r\n");
 8000b74:	488f      	ldr	r0, [pc, #572]	@ (8000db4 <main+0x348>)
 8000b76:	f7ff ff63 	bl	8000a40 <Debug_Print>
              HAL_Delay(2000); // Send every 2 seconds
 8000b7a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b7e:	f000 fdfb 	bl	8001778 <HAL_Delay>
              break;
 8000b82:	e141      	b.n	8000e08 <main+0x39c>
          case LORA_MODE_RECEIVER:
              Debug_Print("LoRa Mode: Receiver\r\n");
 8000b84:	488c      	ldr	r0, [pc, #560]	@ (8000db8 <main+0x34c>)
 8000b86:	f7ff ff5b 	bl	8000a40 <Debug_Print>

              connectionStatus = 0; // Reset connection status
 8000b8a:	4b8c      	ldr	r3, [pc, #560]	@ (8000dbc <main+0x350>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	701a      	strb	r2, [r3, #0]

              // Step 1: Wait for "PING" from transmitter
              for (int i = 0; i < 40; i++) {   // ~1s timeout (40 x 25ms)
 8000b90:	2300      	movs	r3, #0
 8000b92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000b96:	e03a      	b.n	8000c0e <main+0x1a2>
                  uint8_t len = LoRa_ReceivePacket(rxBuffer);
 8000b98:	4889      	ldr	r0, [pc, #548]	@ (8000dc0 <main+0x354>)
 8000b9a:	f7ff ff18 	bl	80009ce <LoRa_ReceivePacket>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
                  if (len > 0) {
 8000ba4:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d028      	beq.n	8000bfe <main+0x192>
                      rxBuffer[len] = '\0'; // null terminate
 8000bac:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8000bb0:	4a83      	ldr	r2, [pc, #524]	@ (8000dc0 <main+0x354>)
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	54d1      	strb	r1, [r2, r3]
                      char dbg_rx[50];
                      sprintf(dbg_rx, "Received: %s\r\n", rxBuffer);
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	4a81      	ldr	r2, [pc, #516]	@ (8000dc0 <main+0x354>)
 8000bba:	4982      	ldr	r1, [pc, #520]	@ (8000dc4 <main+0x358>)
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f004 f925 	bl	8004e0c <siprintf>
                      Debug_Print(dbg_rx);
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff ff3b 	bl	8000a40 <Debug_Print>

                      if (strncmp((char*)rxBuffer, "PING", 4) == 0) {
 8000bca:	2204      	movs	r2, #4
 8000bcc:	497e      	ldr	r1, [pc, #504]	@ (8000dc8 <main+0x35c>)
 8000bce:	487c      	ldr	r0, [pc, #496]	@ (8000dc0 <main+0x354>)
 8000bd0:	f004 f946 	bl	8004e60 <strncmp>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d111      	bne.n	8000bfe <main+0x192>
                          // Step 2: Reply with "ACK"
                          uint8_t ack_msg[] = "ACK";
 8000bda:	4b7c      	ldr	r3, [pc, #496]	@ (8000dcc <main+0x360>)
 8000bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
                          LoRa_SendPacket(ack_msg, sizeof(ack_msg) - 1);
 8000bde:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000be2:	2103      	movs	r1, #3
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff feae 	bl	8000946 <LoRa_SendPacket>
                          Debug_Print("Sent: ACK\r\n");
 8000bea:	4879      	ldr	r0, [pc, #484]	@ (8000dd0 <main+0x364>)
 8000bec:	f7ff ff28 	bl	8000a40 <Debug_Print>

                          connectionStatus = 1;
 8000bf0:	4b72      	ldr	r3, [pc, #456]	@ (8000dbc <main+0x350>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	701a      	strb	r2, [r3, #0]
                          z = 6; // connection established
 8000bf6:	4b6b      	ldr	r3, [pc, #428]	@ (8000da4 <main+0x338>)
 8000bf8:	2206      	movs	r2, #6
 8000bfa:	701a      	strb	r2, [r3, #0]
                          break;
 8000bfc:	e00b      	b.n	8000c16 <main+0x1aa>
                      }
                  }
                  HAL_Delay(25);
 8000bfe:	2019      	movs	r0, #25
 8000c00:	f000 fdba 	bl	8001778 <HAL_Delay>
              for (int i = 0; i < 40; i++) {   // ~1s timeout (40 x 25ms)
 8000c04:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000c08:	3301      	adds	r3, #1
 8000c0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000c0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000c12:	2b27      	cmp	r3, #39	@ 0x27
 8000c14:	ddc0      	ble.n	8000b98 <main+0x12c>
              }

              // Step 3: Handle failed connection
              if (!connectionStatus) {
 8000c16:	4b69      	ldr	r3, [pc, #420]	@ (8000dbc <main+0x350>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d10a      	bne.n	8000c34 <main+0x1c8>
                  Debug_Print("Connection failed. No PING received.\r\n");
 8000c1e:	486d      	ldr	r0, [pc, #436]	@ (8000dd4 <main+0x368>)
 8000c20:	f7ff ff0e 	bl	8000a40 <Debug_Print>
                  z = 7;
 8000c24:	4b5f      	ldr	r3, [pc, #380]	@ (8000da4 <main+0x338>)
 8000c26:	2207      	movs	r2, #7
 8000c28:	701a      	strb	r2, [r3, #0]
                  HAL_Delay(1000); // retry delay
 8000c2a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c2e:	f000 fda3 	bl	8001778 <HAL_Delay>
 8000c32:	e01b      	b.n	8000c6c <main+0x200>
              } else {
                  // Step 4: Ready to receive normal data
                  uint8_t rx_len = LoRa_ReceivePacket(rxBuffer);
 8000c34:	4862      	ldr	r0, [pc, #392]	@ (8000dc0 <main+0x354>)
 8000c36:	f7ff feca 	bl	80009ce <LoRa_ReceivePacket>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
                  if (rx_len > 0) {
 8000c40:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d011      	beq.n	8000c6c <main+0x200>
                      rxBuffer[rx_len] = '\0';
 8000c48:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 8000c4c:	4a5c      	ldr	r2, [pc, #368]	@ (8000dc0 <main+0x354>)
 8000c4e:	2100      	movs	r1, #0
 8000c50:	54d1      	strb	r1, [r2, r3]
                      char dbg_rx2[50];
                      sprintf(dbg_rx2, "Data Received: %s\r\n", rxBuffer);
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	4a5a      	ldr	r2, [pc, #360]	@ (8000dc0 <main+0x354>)
 8000c56:	4960      	ldr	r1, [pc, #384]	@ (8000dd8 <main+0x36c>)
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f004 f8d7 	bl	8004e0c <siprintf>
                      Debug_Print(dbg_rx2);
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff feed 	bl	8000a40 <Debug_Print>
                      z = 8;
 8000c66:	4b4f      	ldr	r3, [pc, #316]	@ (8000da4 <main+0x338>)
 8000c68:	2208      	movs	r2, #8
 8000c6a:	701a      	strb	r2, [r3, #0]
                  }
              }

              HAL_Delay(100);
 8000c6c:	2064      	movs	r0, #100	@ 0x64
 8000c6e:	f000 fd83 	bl	8001778 <HAL_Delay>
              break;
 8000c72:	e0c9      	b.n	8000e08 <main+0x39c>
//              HAL_Delay(100); // Check for packets frequently
//              break;

          case LORA_MODE_TRANCEIVER:
              // Transceiver logic (send and receive)
              Debug_Print("LoRa Mode: Transceiver\r\n");
 8000c74:	4859      	ldr	r0, [pc, #356]	@ (8000ddc <main+0x370>)
 8000c76:	f7ff fee3 	bl	8000a40 <Debug_Print>

              // Try to receive first
              uint8_t rx_len_tr = LoRa_ReceivePacket(rxBuffer);
 8000c7a:	4851      	ldr	r0, [pc, #324]	@ (8000dc0 <main+0x354>)
 8000c7c:	f7ff fea7 	bl	80009ce <LoRa_ReceivePacket>
 8000c80:	4603      	mov	r3, r0
 8000c82:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
              if (rx_len_tr > 0) {
 8000c86:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d021      	beq.n	8000cd2 <main+0x266>
                  rxBuffer[rx_len_tr] = '\0'; // null terminate
 8000c8e:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 8000c92:	4a4b      	ldr	r2, [pc, #300]	@ (8000dc0 <main+0x354>)
 8000c94:	2100      	movs	r1, #0
 8000c96:	54d1      	strb	r1, [r2, r3]
                  char dbg_rx_tr[50];
                  sprintf(dbg_rx_tr, "Received: %s\r\n", rxBuffer);
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	4a49      	ldr	r2, [pc, #292]	@ (8000dc0 <main+0x354>)
 8000c9c:	4949      	ldr	r1, [pc, #292]	@ (8000dc4 <main+0x358>)
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f004 f8b4 	bl	8004e0c <siprintf>
                  Debug_Print(dbg_rx_tr);
 8000ca4:	1d3b      	adds	r3, r7, #4
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff feca 	bl	8000a40 <Debug_Print>

                  // If "PING" is received, send "ACK"
                  if (strncmp((char*)rxBuffer, "PING", 4) == 0) {
 8000cac:	2204      	movs	r2, #4
 8000cae:	4946      	ldr	r1, [pc, #280]	@ (8000dc8 <main+0x35c>)
 8000cb0:	4843      	ldr	r0, [pc, #268]	@ (8000dc0 <main+0x354>)
 8000cb2:	f004 f8d5 	bl	8004e60 <strncmp>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d10a      	bne.n	8000cd2 <main+0x266>
                      uint8_t ack_msg[] = "ACK";
 8000cbc:	4b43      	ldr	r3, [pc, #268]	@ (8000dcc <main+0x360>)
 8000cbe:	63bb      	str	r3, [r7, #56]	@ 0x38
                      LoRa_SendPacket(ack_msg, sizeof(ack_msg) - 1);
 8000cc0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000cc4:	2103      	movs	r1, #3
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff fe3d 	bl	8000946 <LoRa_SendPacket>
                      Debug_Print("Sent: ACK\r\n");
 8000ccc:	4840      	ldr	r0, [pc, #256]	@ (8000dd0 <main+0x364>)
 8000cce:	f7ff feb7 	bl	8000a40 <Debug_Print>
                  }
              }

              // Then send a PING
              uint8_t tx_msg_tr[] = "PING";
 8000cd2:	4b43      	ldr	r3, [pc, #268]	@ (8000de0 <main+0x374>)
 8000cd4:	643b      	str	r3, [r7, #64]	@ 0x40
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
              LoRa_SendPacket(tx_msg_tr, sizeof(tx_msg_tr) - 1);
 8000cdc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000ce0:	2104      	movs	r1, #4
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff fe2f 	bl	8000946 <LoRa_SendPacket>
              Debug_Print("Sent: PING\r\n");
 8000ce8:	483e      	ldr	r0, [pc, #248]	@ (8000de4 <main+0x378>)
 8000cea:	f7ff fea9 	bl	8000a40 <Debug_Print>

              // Wait for ACK (max 500 ms)
              connectionStatus = 0;
 8000cee:	4b33      	ldr	r3, [pc, #204]	@ (8000dbc <main+0x350>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	701a      	strb	r2, [r3, #0]
              for (int i = 0; i < 20; i++) {   // 20 x 25ms = 500ms
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000cfa:	e02f      	b.n	8000d5c <main+0x2f0>
                  uint8_t len = LoRa_ReceivePacket(rxBuffer);
 8000cfc:	4830      	ldr	r0, [pc, #192]	@ (8000dc0 <main+0x354>)
 8000cfe:	f7ff fe66 	bl	80009ce <LoRa_ReceivePacket>
 8000d02:	4603      	mov	r3, r0
 8000d04:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
                  if (len > 0) {
 8000d08:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d01d      	beq.n	8000d4c <main+0x2e0>
                      rxBuffer[len] = '\0'; // null terminate
 8000d10:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8000d14:	4a2a      	ldr	r2, [pc, #168]	@ (8000dc0 <main+0x354>)
 8000d16:	2100      	movs	r1, #0
 8000d18:	54d1      	strb	r1, [r2, r3]
                      char dbg_ack[50];
                      sprintf(dbg_ack, "Received ACK check: %s\r\n", rxBuffer);
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	4a28      	ldr	r2, [pc, #160]	@ (8000dc0 <main+0x354>)
 8000d1e:	4932      	ldr	r1, [pc, #200]	@ (8000de8 <main+0x37c>)
 8000d20:	4618      	mov	r0, r3
 8000d22:	f004 f873 	bl	8004e0c <siprintf>
                      Debug_Print(dbg_ack);
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff fe89 	bl	8000a40 <Debug_Print>

                      if (strncmp((char*)rxBuffer, "ACK", 3) == 0) {
 8000d2e:	2203      	movs	r2, #3
 8000d30:	492e      	ldr	r1, [pc, #184]	@ (8000dec <main+0x380>)
 8000d32:	4823      	ldr	r0, [pc, #140]	@ (8000dc0 <main+0x354>)
 8000d34:	f004 f894 	bl	8004e60 <strncmp>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d106      	bne.n	8000d4c <main+0x2e0>
                          connectionStatus = 1;
 8000d3e:	4b1f      	ldr	r3, [pc, #124]	@ (8000dbc <main+0x350>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	701a      	strb	r2, [r3, #0]
                          z = 3;
 8000d44:	4b17      	ldr	r3, [pc, #92]	@ (8000da4 <main+0x338>)
 8000d46:	2203      	movs	r2, #3
 8000d48:	701a      	strb	r2, [r3, #0]
 8000d4a:	e00b      	b.n	8000d64 <main+0x2f8>
                          break;
                      }
                  }
                  HAL_Delay(25);
 8000d4c:	2019      	movs	r0, #25
 8000d4e:	f000 fd13 	bl	8001778 <HAL_Delay>
              for (int i = 0; i < 20; i++) {   // 20 x 25ms = 500ms
 8000d52:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000d56:	3301      	adds	r3, #1
 8000d58:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000d5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000d60:	2b13      	cmp	r3, #19
 8000d62:	ddcb      	ble.n	8000cfc <main+0x290>
              }

              if (!connectionStatus) {
 8000d64:	4b15      	ldr	r3, [pc, #84]	@ (8000dbc <main+0x350>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d106      	bne.n	8000d7a <main+0x30e>
                  Debug_Print("Connection: LOST\r\n");
 8000d6c:	4820      	ldr	r0, [pc, #128]	@ (8000df0 <main+0x384>)
 8000d6e:	f7ff fe67 	bl	8000a40 <Debug_Print>
                  z = 4;
 8000d72:	4b0c      	ldr	r3, [pc, #48]	@ (8000da4 <main+0x338>)
 8000d74:	2204      	movs	r2, #4
 8000d76:	701a      	strb	r2, [r3, #0]
 8000d78:	e002      	b.n	8000d80 <main+0x314>
              } else {
                  Debug_Print("Connection: OK\r\n");
 8000d7a:	481e      	ldr	r0, [pc, #120]	@ (8000df4 <main+0x388>)
 8000d7c:	f7ff fe60 	bl	8000a40 <Debug_Print>
              }

              HAL_Delay(1000); // Delay before next cycle in transceiver mode
 8000d80:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d84:	f000 fcf8 	bl	8001778 <HAL_Delay>
              break;
 8000d88:	e03e      	b.n	8000e08 <main+0x39c>
 8000d8a:	bf00      	nop
 8000d8c:	2000007c 	.word	0x2000007c
 8000d90:	080057a8 	.word	0x080057a8
 8000d94:	080057c0 	.word	0x080057c0
 8000d98:	20000000 	.word	0x20000000
 8000d9c:	080057e8 	.word	0x080057e8
 8000da0:	0800580c 	.word	0x0800580c
 8000da4:	200001d5 	.word	0x200001d5
 8000da8:	08005828 	.word	0x08005828
 8000dac:	0800584c 	.word	0x0800584c
 8000db0:	080059a4 	.word	0x080059a4
 8000db4:	08005868 	.word	0x08005868
 8000db8:	0800587c 	.word	0x0800587c
 8000dbc:	200001d4 	.word	0x200001d4
 8000dc0:	200001b4 	.word	0x200001b4
 8000dc4:	08005894 	.word	0x08005894
 8000dc8:	080058a4 	.word	0x080058a4
 8000dcc:	004b4341 	.word	0x004b4341
 8000dd0:	080058ac 	.word	0x080058ac
 8000dd4:	080058b8 	.word	0x080058b8
 8000dd8:	080058e0 	.word	0x080058e0
 8000ddc:	080058f4 	.word	0x080058f4
 8000de0:	474e4950 	.word	0x474e4950
 8000de4:	08005910 	.word	0x08005910
 8000de8:	08005920 	.word	0x08005920
 8000dec:	0800593c 	.word	0x0800593c
 8000df0:	08005940 	.word	0x08005940
 8000df4:	08005954 	.word	0x08005954

          default:
              Debug_Print("Invalid LoRa Mode!\r\n");
 8000df8:	481a      	ldr	r0, [pc, #104]	@ (8000e64 <main+0x3f8>)
 8000dfa:	f7ff fe21 	bl	8000a40 <Debug_Print>
              HAL_Delay(1000);
 8000dfe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e02:	f000 fcb9 	bl	8001778 <HAL_Delay>
              break;
 8000e06:	bf00      	nop
      }

      // === Display RTC (remains unchanged) ===
      Get_Time();
 8000e08:	f000 fa22 	bl	8001250 <Get_Time>
      sprintf(lcdBuffer, "%02d:%02d:%02d", time.hour, time.minutes, time.seconds);
 8000e0c:	4b16      	ldr	r3, [pc, #88]	@ (8000e68 <main+0x3fc>)
 8000e0e:	789b      	ldrb	r3, [r3, #2]
 8000e10:	461a      	mov	r2, r3
 8000e12:	4b15      	ldr	r3, [pc, #84]	@ (8000e68 <main+0x3fc>)
 8000e14:	785b      	ldrb	r3, [r3, #1]
 8000e16:	4619      	mov	r1, r3
 8000e18:	4b13      	ldr	r3, [pc, #76]	@ (8000e68 <main+0x3fc>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	9300      	str	r3, [sp, #0]
 8000e1e:	460b      	mov	r3, r1
 8000e20:	4912      	ldr	r1, [pc, #72]	@ (8000e6c <main+0x400>)
 8000e22:	4813      	ldr	r0, [pc, #76]	@ (8000e70 <main+0x404>)
 8000e24:	f003 fff2 	bl	8004e0c <siprintf>
      lcd_put_cur(0, 0);
 8000e28:	2100      	movs	r1, #0
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f7ff fba0 	bl	8000570 <lcd_put_cur>
      lcd_send_string(lcdBuffer);
 8000e30:	480f      	ldr	r0, [pc, #60]	@ (8000e70 <main+0x404>)
 8000e32:	f7ff fbf6 	bl	8000622 <lcd_send_string>

      sprintf(lcdBuffer, "%02d-%02d-20%02d", time.dayofmonth, time.month, time.year);
 8000e36:	4b0c      	ldr	r3, [pc, #48]	@ (8000e68 <main+0x3fc>)
 8000e38:	791b      	ldrb	r3, [r3, #4]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e68 <main+0x3fc>)
 8000e3e:	795b      	ldrb	r3, [r3, #5]
 8000e40:	4619      	mov	r1, r3
 8000e42:	4b09      	ldr	r3, [pc, #36]	@ (8000e68 <main+0x3fc>)
 8000e44:	799b      	ldrb	r3, [r3, #6]
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	460b      	mov	r3, r1
 8000e4a:	490a      	ldr	r1, [pc, #40]	@ (8000e74 <main+0x408>)
 8000e4c:	4808      	ldr	r0, [pc, #32]	@ (8000e70 <main+0x404>)
 8000e4e:	f003 ffdd 	bl	8004e0c <siprintf>
      lcd_put_cur(1, 0);
 8000e52:	2100      	movs	r1, #0
 8000e54:	2001      	movs	r0, #1
 8000e56:	f7ff fb8b 	bl	8000570 <lcd_put_cur>
      lcd_send_string(lcdBuffer);
 8000e5a:	4805      	ldr	r0, [pc, #20]	@ (8000e70 <main+0x404>)
 8000e5c:	f7ff fbe1 	bl	8000622 <lcd_send_string>
  while (1) {
 8000e60:	e64c      	b.n	8000afc <main+0x90>
 8000e62:	bf00      	nop
 8000e64:	08005968 	.word	0x08005968
 8000e68:	200001d8 	.word	0x200001d8
 8000e6c:	08005980 	.word	0x08005980
 8000e70:	200001a0 	.word	0x200001a0
 8000e74:	08005990 	.word	0x08005990

08000e78 <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b094      	sub	sp, #80	@ 0x50
 8000e7c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e7e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e82:	2228      	movs	r2, #40	@ 0x28
 8000e84:	2100      	movs	r1, #0
 8000e86:	4618      	mov	r0, r3
 8000e88:	f003 ffe2 	bl	8004e50 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]

    // Use HSI (8 MHz internal) with PLL
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eac:	2301      	movs	r3, #1
 8000eae:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eb0:	2310      	movs	r3, #16
 8000eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2; // HSI/2 = 4 MHz
 8000eb8:	2300      	movs	r3, #0
 8000eba:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;             // 4*16 = 64 MHz
 8000ebc:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000ec0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) { Error_Handler(); }
 8000ec2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f002 fa6a 	bl	80033a0 <HAL_RCC_OscConfig>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <SystemClock_Config+0x5e>
 8000ed2:	f000 f99f 	bl	8001214 <Error_Handler>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000ed6:	230f      	movs	r3, #15
 8000ed8:	617b      	str	r3, [r7, #20]
                                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK; // Updated line
 8000eda:	2302      	movs	r3, #2
 8000edc:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61fb      	str	r3, [r7, #28]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ee2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ee6:	623b      	str	r3, [r7, #32]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) { Error_Handler(); }
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	2102      	movs	r1, #2
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f002 fcd6 	bl	80038a4 <HAL_RCC_ClockConfig>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <SystemClock_Config+0x8a>
 8000efe:	f000 f989 	bl	8001214 <Error_Handler>

    // Use LSI (internal ~40 kHz) for RTC, and HSI/6 for ADC
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC | RCC_PERIPHCLK_ADC;
 8000f02:	2303      	movs	r3, #3
 8000f04:	607b      	str	r3, [r7, #4]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000f06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f0a:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000f0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f10:	60fb      	str	r3, [r7, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) { Error_Handler(); }
 8000f12:	1d3b      	adds	r3, r7, #4
 8000f14:	4618      	mov	r0, r3
 8000f16:	f002 fe53 	bl	8003bc0 <HAL_RCCEx_PeriphCLKConfig>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <SystemClock_Config+0xac>
 8000f20:	f000 f978 	bl	8001214 <Error_Handler>
}
 8000f24:	bf00      	nop
 8000f26:	3750      	adds	r7, #80	@ 0x50
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f3c:	4b18      	ldr	r3, [pc, #96]	@ (8000fa0 <MX_ADC1_Init+0x74>)
 8000f3e:	4a19      	ldr	r2, [pc, #100]	@ (8000fa4 <MX_ADC1_Init+0x78>)
 8000f40:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f42:	4b17      	ldr	r3, [pc, #92]	@ (8000fa0 <MX_ADC1_Init+0x74>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f48:	4b15      	ldr	r3, [pc, #84]	@ (8000fa0 <MX_ADC1_Init+0x74>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f4e:	4b14      	ldr	r3, [pc, #80]	@ (8000fa0 <MX_ADC1_Init+0x74>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f54:	4b12      	ldr	r3, [pc, #72]	@ (8000fa0 <MX_ADC1_Init+0x74>)
 8000f56:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000f5a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f5c:	4b10      	ldr	r3, [pc, #64]	@ (8000fa0 <MX_ADC1_Init+0x74>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000f62:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa0 <MX_ADC1_Init+0x74>)
 8000f64:	2201      	movs	r2, #1
 8000f66:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f68:	480d      	ldr	r0, [pc, #52]	@ (8000fa0 <MX_ADC1_Init+0x74>)
 8000f6a:	f000 fc29 	bl	80017c0 <HAL_ADC_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000f74:	f000 f94e 	bl	8001214 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f80:	2300      	movs	r3, #0
 8000f82:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	4619      	mov	r1, r3
 8000f88:	4805      	ldr	r0, [pc, #20]	@ (8000fa0 <MX_ADC1_Init+0x74>)
 8000f8a:	f000 fcf1 	bl	8001970 <HAL_ADC_ConfigChannel>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000f94:	f000 f93e 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f98:	bf00      	nop
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	2000007c 	.word	0x2000007c
 8000fa4:	40012400 	.word	0x40012400

08000fa8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000fac:	4b12      	ldr	r3, [pc, #72]	@ (8000ff8 <MX_I2C2_Init+0x50>)
 8000fae:	4a13      	ldr	r2, [pc, #76]	@ (8000ffc <MX_I2C2_Init+0x54>)
 8000fb0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000fb2:	4b11      	ldr	r3, [pc, #68]	@ (8000ff8 <MX_I2C2_Init+0x50>)
 8000fb4:	4a12      	ldr	r2, [pc, #72]	@ (8001000 <MX_I2C2_Init+0x58>)
 8000fb6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff8 <MX_I2C2_Init+0x50>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff8 <MX_I2C2_Init+0x50>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff8 <MX_I2C2_Init+0x50>)
 8000fc6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000fca:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff8 <MX_I2C2_Init+0x50>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000fd2:	4b09      	ldr	r3, [pc, #36]	@ (8000ff8 <MX_I2C2_Init+0x50>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fd8:	4b07      	ldr	r3, [pc, #28]	@ (8000ff8 <MX_I2C2_Init+0x50>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fde:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <MX_I2C2_Init+0x50>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000fe4:	4804      	ldr	r0, [pc, #16]	@ (8000ff8 <MX_I2C2_Init+0x50>)
 8000fe6:	f001 f985 	bl	80022f4 <HAL_I2C_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000ff0:	f000 f910 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	200000ac 	.word	0x200000ac
 8000ffc:	40005800 	.word	0x40005800
 8001000:	000186a0 	.word	0x000186a0

08001004 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001008:	4b17      	ldr	r3, [pc, #92]	@ (8001068 <MX_SPI1_Init+0x64>)
 800100a:	4a18      	ldr	r2, [pc, #96]	@ (800106c <MX_SPI1_Init+0x68>)
 800100c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800100e:	4b16      	ldr	r3, [pc, #88]	@ (8001068 <MX_SPI1_Init+0x64>)
 8001010:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001014:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001016:	4b14      	ldr	r3, [pc, #80]	@ (8001068 <MX_SPI1_Init+0x64>)
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800101c:	4b12      	ldr	r3, [pc, #72]	@ (8001068 <MX_SPI1_Init+0x64>)
 800101e:	2200      	movs	r2, #0
 8001020:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001022:	4b11      	ldr	r3, [pc, #68]	@ (8001068 <MX_SPI1_Init+0x64>)
 8001024:	2200      	movs	r2, #0
 8001026:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001028:	4b0f      	ldr	r3, [pc, #60]	@ (8001068 <MX_SPI1_Init+0x64>)
 800102a:	2200      	movs	r2, #0
 800102c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800102e:	4b0e      	ldr	r3, [pc, #56]	@ (8001068 <MX_SPI1_Init+0x64>)
 8001030:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001034:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001036:	4b0c      	ldr	r3, [pc, #48]	@ (8001068 <MX_SPI1_Init+0x64>)
 8001038:	2218      	movs	r2, #24
 800103a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800103c:	4b0a      	ldr	r3, [pc, #40]	@ (8001068 <MX_SPI1_Init+0x64>)
 800103e:	2200      	movs	r2, #0
 8001040:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001042:	4b09      	ldr	r3, [pc, #36]	@ (8001068 <MX_SPI1_Init+0x64>)
 8001044:	2200      	movs	r2, #0
 8001046:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001048:	4b07      	ldr	r3, [pc, #28]	@ (8001068 <MX_SPI1_Init+0x64>)
 800104a:	2200      	movs	r2, #0
 800104c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800104e:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <MX_SPI1_Init+0x64>)
 8001050:	220a      	movs	r2, #10
 8001052:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001054:	4804      	ldr	r0, [pc, #16]	@ (8001068 <MX_SPI1_Init+0x64>)
 8001056:	f002 ff1f 	bl	8003e98 <HAL_SPI_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001060:	f000 f8d8 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000100 	.word	0x20000100
 800106c:	40013000 	.word	0x40013000

08001070 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001074:	4b11      	ldr	r3, [pc, #68]	@ (80010bc <MX_USART1_UART_Init+0x4c>)
 8001076:	4a12      	ldr	r2, [pc, #72]	@ (80010c0 <MX_USART1_UART_Init+0x50>)
 8001078:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800107a:	4b10      	ldr	r3, [pc, #64]	@ (80010bc <MX_USART1_UART_Init+0x4c>)
 800107c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001080:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001082:	4b0e      	ldr	r3, [pc, #56]	@ (80010bc <MX_USART1_UART_Init+0x4c>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001088:	4b0c      	ldr	r3, [pc, #48]	@ (80010bc <MX_USART1_UART_Init+0x4c>)
 800108a:	2200      	movs	r2, #0
 800108c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800108e:	4b0b      	ldr	r3, [pc, #44]	@ (80010bc <MX_USART1_UART_Init+0x4c>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001094:	4b09      	ldr	r3, [pc, #36]	@ (80010bc <MX_USART1_UART_Init+0x4c>)
 8001096:	220c      	movs	r2, #12
 8001098:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800109a:	4b08      	ldr	r3, [pc, #32]	@ (80010bc <MX_USART1_UART_Init+0x4c>)
 800109c:	2200      	movs	r2, #0
 800109e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a0:	4b06      	ldr	r3, [pc, #24]	@ (80010bc <MX_USART1_UART_Init+0x4c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010a6:	4805      	ldr	r0, [pc, #20]	@ (80010bc <MX_USART1_UART_Init+0x4c>)
 80010a8:	f003 fc8b 	bl	80049c2 <HAL_UART_Init>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80010b2:	f000 f8af 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000158 	.word	0x20000158
 80010c0:	40013800 	.word	0x40013800

080010c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b088      	sub	sp, #32
 80010c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ca:	f107 0310 	add.w	r3, r7, #16
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d8:	4b4a      	ldr	r3, [pc, #296]	@ (8001204 <MX_GPIO_Init+0x140>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	4a49      	ldr	r2, [pc, #292]	@ (8001204 <MX_GPIO_Init+0x140>)
 80010de:	f043 0310 	orr.w	r3, r3, #16
 80010e2:	6193      	str	r3, [r2, #24]
 80010e4:	4b47      	ldr	r3, [pc, #284]	@ (8001204 <MX_GPIO_Init+0x140>)
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	f003 0310 	and.w	r3, r3, #16
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010f0:	4b44      	ldr	r3, [pc, #272]	@ (8001204 <MX_GPIO_Init+0x140>)
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	4a43      	ldr	r2, [pc, #268]	@ (8001204 <MX_GPIO_Init+0x140>)
 80010f6:	f043 0320 	orr.w	r3, r3, #32
 80010fa:	6193      	str	r3, [r2, #24]
 80010fc:	4b41      	ldr	r3, [pc, #260]	@ (8001204 <MX_GPIO_Init+0x140>)
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	f003 0320 	and.w	r3, r3, #32
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001108:	4b3e      	ldr	r3, [pc, #248]	@ (8001204 <MX_GPIO_Init+0x140>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	4a3d      	ldr	r2, [pc, #244]	@ (8001204 <MX_GPIO_Init+0x140>)
 800110e:	f043 0304 	orr.w	r3, r3, #4
 8001112:	6193      	str	r3, [r2, #24]
 8001114:	4b3b      	ldr	r3, [pc, #236]	@ (8001204 <MX_GPIO_Init+0x140>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	f003 0304 	and.w	r3, r3, #4
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001120:	4b38      	ldr	r3, [pc, #224]	@ (8001204 <MX_GPIO_Init+0x140>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	4a37      	ldr	r2, [pc, #220]	@ (8001204 <MX_GPIO_Init+0x140>)
 8001126:	f043 0308 	orr.w	r3, r3, #8
 800112a:	6193      	str	r3, [r2, #24]
 800112c:	4b35      	ldr	r3, [pc, #212]	@ (8001204 <MX_GPIO_Init+0x140>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	f003 0308 	and.w	r3, r3, #8
 8001134:	603b      	str	r3, [r7, #0]
 8001136:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001138:	2201      	movs	r2, #1
 800113a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800113e:	4832      	ldr	r0, [pc, #200]	@ (8001208 <MX_GPIO_Init+0x144>)
 8001140:	f001 f8c0 	bl	80022c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Relay1_Pin|Relay2_Pin|Relay3_Pin|SWITCH4_Pin
 8001144:	2200      	movs	r2, #0
 8001146:	f248 0147 	movw	r1, #32839	@ 0x8047
 800114a:	4830      	ldr	r0, [pc, #192]	@ (800120c <MX_GPIO_Init+0x148>)
 800114c:	f001 f8ba 	bl	80022c4 <HAL_GPIO_WritePin>
                          |LORA_STATUS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_SET);
 8001150:	2201      	movs	r2, #1
 8001152:	f44f 51c8 	mov.w	r1, #6400	@ 0x1900
 8001156:	482e      	ldr	r0, [pc, #184]	@ (8001210 <MX_GPIO_Init+0x14c>)
 8001158:	f001 f8b4 	bl	80022c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_SELECT_GPIO_Port, LORA_SELECT_Pin, GPIO_PIN_RESET);
 800115c:	2200      	movs	r2, #0
 800115e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001162:	482b      	ldr	r0, [pc, #172]	@ (8001210 <MX_GPIO_Init+0x14c>)
 8001164:	f001 f8ae 	bl	80022c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED4_Pin|LED5_Pin, GPIO_PIN_SET);
 8001168:	2201      	movs	r2, #1
 800116a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800116e:	4827      	ldr	r0, [pc, #156]	@ (800120c <MX_GPIO_Init+0x148>)
 8001170:	f001 f8a8 	bl	80022c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001174:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001178:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117a:	2301      	movs	r3, #1
 800117c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001182:	2302      	movs	r3, #2
 8001184:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001186:	f107 0310 	add.w	r3, r7, #16
 800118a:	4619      	mov	r1, r3
 800118c:	481e      	ldr	r0, [pc, #120]	@ (8001208 <MX_GPIO_Init+0x144>)
 800118e:	f000 ff15 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : AC_voltage_Pin AC_current_Pin */
  GPIO_InitStruct.Pin = AC_voltage_Pin|AC_current_Pin;
 8001192:	23c0      	movs	r3, #192	@ 0xc0
 8001194:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001196:	2303      	movs	r3, #3
 8001198:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119a:	f107 0310 	add.w	r3, r7, #16
 800119e:	4619      	mov	r1, r3
 80011a0:	481b      	ldr	r0, [pc, #108]	@ (8001210 <MX_GPIO_Init+0x14c>)
 80011a2:	f000 ff0b 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : Relay1_Pin Relay2_Pin Relay3_Pin SWITCH4_Pin
                           LORA_STATUS_Pin LED4_Pin LED5_Pin */
  GPIO_InitStruct.Pin = Relay1_Pin|Relay2_Pin|Relay3_Pin|SWITCH4_Pin
 80011a6:	f248 3347 	movw	r3, #33607	@ 0x8347
 80011aa:	613b      	str	r3, [r7, #16]
                          |LORA_STATUS_Pin|LED4_Pin|LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ac:	2301      	movs	r3, #1
 80011ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b4:	2302      	movs	r3, #2
 80011b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b8:	f107 0310 	add.w	r3, r7, #16
 80011bc:	4619      	mov	r1, r3
 80011be:	4813      	ldr	r0, [pc, #76]	@ (800120c <MX_GPIO_Init+0x148>)
 80011c0:	f000 fefc 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : SWITCH1_Pin SWITCH2_Pin SWITCH3_Pin RF_DATA_Pin */
  GPIO_InitStruct.Pin = SWITCH1_Pin|SWITCH2_Pin|SWITCH3_Pin|RF_DATA_Pin;
 80011c4:	f44f 43e1 	mov.w	r3, #28800	@ 0x7080
 80011c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ca:	2300      	movs	r3, #0
 80011cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d2:	f107 0310 	add.w	r3, r7, #16
 80011d6:	4619      	mov	r1, r3
 80011d8:	480c      	ldr	r0, [pc, #48]	@ (800120c <MX_GPIO_Init+0x148>)
 80011da:	f000 feef 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LORA_SELECT_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LORA_SELECT_Pin;
 80011de:	f44f 4319 	mov.w	r3, #39168	@ 0x9900
 80011e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e4:	2301      	movs	r3, #1
 80011e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	2302      	movs	r3, #2
 80011ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f0:	f107 0310 	add.w	r3, r7, #16
 80011f4:	4619      	mov	r1, r3
 80011f6:	4806      	ldr	r0, [pc, #24]	@ (8001210 <MX_GPIO_Init+0x14c>)
 80011f8:	f000 fee0 	bl	8001fbc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80011fc:	bf00      	nop
 80011fe:	3720      	adds	r7, #32
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40021000 	.word	0x40021000
 8001208:	40011000 	.word	0x40011000
 800120c:	40010c00 	.word	0x40010c00
 8001210:	40010800 	.word	0x40010800

08001214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001218:	b672      	cpsid	i
}
 800121a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800121c:	bf00      	nop
 800121e:	e7fd      	b.n	800121c <Error_Handler+0x8>

08001220 <bcdToDec>:
  * @brief Converts a Binary Coded Decimal (BCD) number to a normal decimal number.
  * @param val: The BCD value to convert.
  * @retval The decimal representation of the value.
  */
int bcdToDec(uint8_t val)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	091b      	lsrs	r3, r3, #4
 800122e:	b2db      	uxtb	r3, r3
 8001230:	461a      	mov	r2, r3
 8001232:	4613      	mov	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4413      	add	r3, r2
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	461a      	mov	r2, r3
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	f003 030f 	and.w	r3, r3, #15
 8001242:	4413      	add	r3, r2
}
 8001244:	4618      	mov	r0, r3
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr
	...

08001250 <Get_Time>:
  *        The read values are stored in the global 'time' structure.
  * @param None
  * @retval None
  */
void Get_Time (void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af04      	add	r7, sp, #16
	uint8_t get_time[7];
	// Read 7 bytes starting from address 0x00 (seconds register)
	HAL_I2C_Mem_Read(&hi2c2, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000);
 8001256:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800125a:	9302      	str	r3, [sp, #8]
 800125c:	2307      	movs	r3, #7
 800125e:	9301      	str	r3, [sp, #4]
 8001260:	463b      	mov	r3, r7
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	2301      	movs	r3, #1
 8001266:	2200      	movs	r2, #0
 8001268:	21d0      	movs	r1, #208	@ 0xd0
 800126a:	481f      	ldr	r0, [pc, #124]	@ (80012e8 <Get_Time+0x98>)
 800126c:	f001 fa84 	bl	8002778 <HAL_I2C_Mem_Read>
	time.seconds = bcdToDec(get_time[0]);
 8001270:	783b      	ldrb	r3, [r7, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff ffd4 	bl	8001220 <bcdToDec>
 8001278:	4603      	mov	r3, r0
 800127a:	b2da      	uxtb	r2, r3
 800127c:	4b1b      	ldr	r3, [pc, #108]	@ (80012ec <Get_Time+0x9c>)
 800127e:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(get_time[1]);
 8001280:	787b      	ldrb	r3, [r7, #1]
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff ffcc 	bl	8001220 <bcdToDec>
 8001288:	4603      	mov	r3, r0
 800128a:	b2da      	uxtb	r2, r3
 800128c:	4b17      	ldr	r3, [pc, #92]	@ (80012ec <Get_Time+0x9c>)
 800128e:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(get_time[2]);
 8001290:	78bb      	ldrb	r3, [r7, #2]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff ffc4 	bl	8001220 <bcdToDec>
 8001298:	4603      	mov	r3, r0
 800129a:	b2da      	uxtb	r2, r3
 800129c:	4b13      	ldr	r3, [pc, #76]	@ (80012ec <Get_Time+0x9c>)
 800129e:	709a      	strb	r2, [r3, #2]
	time.dayofweek = bcdToDec(get_time[3]);
 80012a0:	78fb      	ldrb	r3, [r7, #3]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff ffbc 	bl	8001220 <bcdToDec>
 80012a8:	4603      	mov	r3, r0
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	4b0f      	ldr	r3, [pc, #60]	@ (80012ec <Get_Time+0x9c>)
 80012ae:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(get_time[4]);
 80012b0:	793b      	ldrb	r3, [r7, #4]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff ffb4 	bl	8001220 <bcdToDec>
 80012b8:	4603      	mov	r3, r0
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	4b0b      	ldr	r3, [pc, #44]	@ (80012ec <Get_Time+0x9c>)
 80012be:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(get_time[5]);
 80012c0:	797b      	ldrb	r3, [r7, #5]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff ffac 	bl	8001220 <bcdToDec>
 80012c8:	4603      	mov	r3, r0
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	4b07      	ldr	r3, [pc, #28]	@ (80012ec <Get_Time+0x9c>)
 80012ce:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(get_time[6]);
 80012d0:	79bb      	ldrb	r3, [r7, #6]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff ffa4 	bl	8001220 <bcdToDec>
 80012d8:	4603      	mov	r3, r0
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	4b03      	ldr	r3, [pc, #12]	@ (80012ec <Get_Time+0x9c>)
 80012de:	719a      	strb	r2, [r3, #6]
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	200000ac 	.word	0x200000ac
 80012ec:	200001d8 	.word	0x200001d8

080012f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012f6:	4b15      	ldr	r3, [pc, #84]	@ (800134c <HAL_MspInit+0x5c>)
 80012f8:	699b      	ldr	r3, [r3, #24]
 80012fa:	4a14      	ldr	r2, [pc, #80]	@ (800134c <HAL_MspInit+0x5c>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	6193      	str	r3, [r2, #24]
 8001302:	4b12      	ldr	r3, [pc, #72]	@ (800134c <HAL_MspInit+0x5c>)
 8001304:	699b      	ldr	r3, [r3, #24]
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800130e:	4b0f      	ldr	r3, [pc, #60]	@ (800134c <HAL_MspInit+0x5c>)
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	4a0e      	ldr	r2, [pc, #56]	@ (800134c <HAL_MspInit+0x5c>)
 8001314:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001318:	61d3      	str	r3, [r2, #28]
 800131a:	4b0c      	ldr	r3, [pc, #48]	@ (800134c <HAL_MspInit+0x5c>)
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001326:	4b0a      	ldr	r3, [pc, #40]	@ (8001350 <HAL_MspInit+0x60>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	4a04      	ldr	r2, [pc, #16]	@ (8001350 <HAL_MspInit+0x60>)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001342:	bf00      	nop
 8001344:	3714      	adds	r7, #20
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr
 800134c:	40021000 	.word	0x40021000
 8001350:	40010000 	.word	0x40010000

08001354 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b088      	sub	sp, #32
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 0310 	add.w	r3, r7, #16
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a14      	ldr	r2, [pc, #80]	@ (80013c0 <HAL_ADC_MspInit+0x6c>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d121      	bne.n	80013b8 <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001374:	4b13      	ldr	r3, [pc, #76]	@ (80013c4 <HAL_ADC_MspInit+0x70>)
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	4a12      	ldr	r2, [pc, #72]	@ (80013c4 <HAL_ADC_MspInit+0x70>)
 800137a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800137e:	6193      	str	r3, [r2, #24]
 8001380:	4b10      	ldr	r3, [pc, #64]	@ (80013c4 <HAL_ADC_MspInit+0x70>)
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138c:	4b0d      	ldr	r3, [pc, #52]	@ (80013c4 <HAL_ADC_MspInit+0x70>)
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	4a0c      	ldr	r2, [pc, #48]	@ (80013c4 <HAL_ADC_MspInit+0x70>)
 8001392:	f043 0304 	orr.w	r3, r3, #4
 8001396:	6193      	str	r3, [r2, #24]
 8001398:	4b0a      	ldr	r3, [pc, #40]	@ (80013c4 <HAL_ADC_MspInit+0x70>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	f003 0304 	and.w	r3, r3, #4
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80013a4:	233f      	movs	r3, #63	@ 0x3f
 80013a6:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013a8:	2303      	movs	r3, #3
 80013aa:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ac:	f107 0310 	add.w	r3, r7, #16
 80013b0:	4619      	mov	r1, r3
 80013b2:	4805      	ldr	r0, [pc, #20]	@ (80013c8 <HAL_ADC_MspInit+0x74>)
 80013b4:	f000 fe02 	bl	8001fbc <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80013b8:	bf00      	nop
 80013ba:	3720      	adds	r7, #32
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40012400 	.word	0x40012400
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40010800 	.word	0x40010800

080013cc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b088      	sub	sp, #32
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 0310 	add.w	r3, r7, #16
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a16      	ldr	r2, [pc, #88]	@ (8001440 <HAL_I2C_MspInit+0x74>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d124      	bne.n	8001436 <HAL_I2C_MspInit+0x6a>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ec:	4b15      	ldr	r3, [pc, #84]	@ (8001444 <HAL_I2C_MspInit+0x78>)
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	4a14      	ldr	r2, [pc, #80]	@ (8001444 <HAL_I2C_MspInit+0x78>)
 80013f2:	f043 0308 	orr.w	r3, r3, #8
 80013f6:	6193      	str	r3, [r2, #24]
 80013f8:	4b12      	ldr	r3, [pc, #72]	@ (8001444 <HAL_I2C_MspInit+0x78>)
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	f003 0308 	and.w	r3, r3, #8
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001404:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001408:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800140a:	2312      	movs	r3, #18
 800140c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800140e:	2303      	movs	r3, #3
 8001410:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001412:	f107 0310 	add.w	r3, r7, #16
 8001416:	4619      	mov	r1, r3
 8001418:	480b      	ldr	r0, [pc, #44]	@ (8001448 <HAL_I2C_MspInit+0x7c>)
 800141a:	f000 fdcf 	bl	8001fbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800141e:	4b09      	ldr	r3, [pc, #36]	@ (8001444 <HAL_I2C_MspInit+0x78>)
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	4a08      	ldr	r2, [pc, #32]	@ (8001444 <HAL_I2C_MspInit+0x78>)
 8001424:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001428:	61d3      	str	r3, [r2, #28]
 800142a:	4b06      	ldr	r3, [pc, #24]	@ (8001444 <HAL_I2C_MspInit+0x78>)
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001436:	bf00      	nop
 8001438:	3720      	adds	r7, #32
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40005800 	.word	0x40005800
 8001444:	40021000 	.word	0x40021000
 8001448:	40010c00 	.word	0x40010c00

0800144c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	@ 0x28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a22      	ldr	r2, [pc, #136]	@ (80014f0 <HAL_SPI_MspInit+0xa4>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d13d      	bne.n	80014e8 <HAL_SPI_MspInit+0x9c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800146c:	4b21      	ldr	r3, [pc, #132]	@ (80014f4 <HAL_SPI_MspInit+0xa8>)
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	4a20      	ldr	r2, [pc, #128]	@ (80014f4 <HAL_SPI_MspInit+0xa8>)
 8001472:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001476:	6193      	str	r3, [r2, #24]
 8001478:	4b1e      	ldr	r3, [pc, #120]	@ (80014f4 <HAL_SPI_MspInit+0xa8>)
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001480:	613b      	str	r3, [r7, #16]
 8001482:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001484:	4b1b      	ldr	r3, [pc, #108]	@ (80014f4 <HAL_SPI_MspInit+0xa8>)
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	4a1a      	ldr	r2, [pc, #104]	@ (80014f4 <HAL_SPI_MspInit+0xa8>)
 800148a:	f043 0308 	orr.w	r3, r3, #8
 800148e:	6193      	str	r3, [r2, #24]
 8001490:	4b18      	ldr	r3, [pc, #96]	@ (80014f4 <HAL_SPI_MspInit+0xa8>)
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	f003 0308 	and.w	r3, r3, #8
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800149c:	2328      	movs	r3, #40	@ 0x28
 800149e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a0:	2302      	movs	r3, #2
 80014a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014a4:	2303      	movs	r3, #3
 80014a6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	4619      	mov	r1, r3
 80014ae:	4812      	ldr	r0, [pc, #72]	@ (80014f8 <HAL_SPI_MspInit+0xac>)
 80014b0:	f000 fd84 	bl	8001fbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014b4:	2310      	movs	r3, #16
 80014b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	4619      	mov	r1, r3
 80014c6:	480c      	ldr	r0, [pc, #48]	@ (80014f8 <HAL_SPI_MspInit+0xac>)
 80014c8:	f000 fd78 	bl	8001fbc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80014cc:	4b0b      	ldr	r3, [pc, #44]	@ (80014fc <HAL_SPI_MspInit+0xb0>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80014d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d4:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80014d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80014da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80014e2:	4a06      	ldr	r2, [pc, #24]	@ (80014fc <HAL_SPI_MspInit+0xb0>)
 80014e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e6:	6053      	str	r3, [r2, #4]

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80014e8:	bf00      	nop
 80014ea:	3728      	adds	r7, #40	@ 0x28
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40013000 	.word	0x40013000
 80014f4:	40021000 	.word	0x40021000
 80014f8:	40010c00 	.word	0x40010c00
 80014fc:	40010000 	.word	0x40010000

08001500 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b088      	sub	sp, #32
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001508:	f107 0310 	add.w	r3, r7, #16
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a1c      	ldr	r2, [pc, #112]	@ (800158c <HAL_UART_MspInit+0x8c>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d131      	bne.n	8001584 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001520:	4b1b      	ldr	r3, [pc, #108]	@ (8001590 <HAL_UART_MspInit+0x90>)
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	4a1a      	ldr	r2, [pc, #104]	@ (8001590 <HAL_UART_MspInit+0x90>)
 8001526:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800152a:	6193      	str	r3, [r2, #24]
 800152c:	4b18      	ldr	r3, [pc, #96]	@ (8001590 <HAL_UART_MspInit+0x90>)
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001538:	4b15      	ldr	r3, [pc, #84]	@ (8001590 <HAL_UART_MspInit+0x90>)
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	4a14      	ldr	r2, [pc, #80]	@ (8001590 <HAL_UART_MspInit+0x90>)
 800153e:	f043 0304 	orr.w	r3, r3, #4
 8001542:	6193      	str	r3, [r2, #24]
 8001544:	4b12      	ldr	r3, [pc, #72]	@ (8001590 <HAL_UART_MspInit+0x90>)
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	f003 0304 	and.w	r3, r3, #4
 800154c:	60bb      	str	r3, [r7, #8]
 800154e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001550:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001554:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001556:	2302      	movs	r3, #2
 8001558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800155a:	2303      	movs	r3, #3
 800155c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155e:	f107 0310 	add.w	r3, r7, #16
 8001562:	4619      	mov	r1, r3
 8001564:	480b      	ldr	r0, [pc, #44]	@ (8001594 <HAL_UART_MspInit+0x94>)
 8001566:	f000 fd29 	bl	8001fbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800156a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800156e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001578:	f107 0310 	add.w	r3, r7, #16
 800157c:	4619      	mov	r1, r3
 800157e:	4805      	ldr	r0, [pc, #20]	@ (8001594 <HAL_UART_MspInit+0x94>)
 8001580:	f000 fd1c 	bl	8001fbc <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001584:	bf00      	nop
 8001586:	3720      	adds	r7, #32
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40013800 	.word	0x40013800
 8001590:	40021000 	.word	0x40021000
 8001594:	40010800 	.word	0x40010800

08001598 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800159c:	bf00      	nop
 800159e:	e7fd      	b.n	800159c <NMI_Handler+0x4>

080015a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015a4:	bf00      	nop
 80015a6:	e7fd      	b.n	80015a4 <HardFault_Handler+0x4>

080015a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015ac:	bf00      	nop
 80015ae:	e7fd      	b.n	80015ac <MemManage_Handler+0x4>

080015b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015b4:	bf00      	nop
 80015b6:	e7fd      	b.n	80015b4 <BusFault_Handler+0x4>

080015b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015bc:	bf00      	nop
 80015be:	e7fd      	b.n	80015bc <UsageFault_Handler+0x4>

080015c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr

080015cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr

080015d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr

080015e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015e8:	f000 f8aa 	bl	8001740 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015f8:	4a14      	ldr	r2, [pc, #80]	@ (800164c <_sbrk+0x5c>)
 80015fa:	4b15      	ldr	r3, [pc, #84]	@ (8001650 <_sbrk+0x60>)
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001604:	4b13      	ldr	r3, [pc, #76]	@ (8001654 <_sbrk+0x64>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d102      	bne.n	8001612 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800160c:	4b11      	ldr	r3, [pc, #68]	@ (8001654 <_sbrk+0x64>)
 800160e:	4a12      	ldr	r2, [pc, #72]	@ (8001658 <_sbrk+0x68>)
 8001610:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001612:	4b10      	ldr	r3, [pc, #64]	@ (8001654 <_sbrk+0x64>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4413      	add	r3, r2
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	429a      	cmp	r2, r3
 800161e:	d207      	bcs.n	8001630 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001620:	f003 fc30 	bl	8004e84 <__errno>
 8001624:	4603      	mov	r3, r0
 8001626:	220c      	movs	r2, #12
 8001628:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800162a:	f04f 33ff 	mov.w	r3, #4294967295
 800162e:	e009      	b.n	8001644 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001630:	4b08      	ldr	r3, [pc, #32]	@ (8001654 <_sbrk+0x64>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001636:	4b07      	ldr	r3, [pc, #28]	@ (8001654 <_sbrk+0x64>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4413      	add	r3, r2
 800163e:	4a05      	ldr	r2, [pc, #20]	@ (8001654 <_sbrk+0x64>)
 8001640:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001642:	68fb      	ldr	r3, [r7, #12]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3718      	adds	r7, #24
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20005000 	.word	0x20005000
 8001650:	00000400 	.word	0x00000400
 8001654:	200001e0 	.word	0x200001e0
 8001658:	20000330 	.word	0x20000330

0800165c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr

08001668 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001668:	f7ff fff8 	bl	800165c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800166c:	480b      	ldr	r0, [pc, #44]	@ (800169c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800166e:	490c      	ldr	r1, [pc, #48]	@ (80016a0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001670:	4a0c      	ldr	r2, [pc, #48]	@ (80016a4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001672:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001674:	e002      	b.n	800167c <LoopCopyDataInit>

08001676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800167a:	3304      	adds	r3, #4

0800167c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800167c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800167e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001680:	d3f9      	bcc.n	8001676 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001682:	4a09      	ldr	r2, [pc, #36]	@ (80016a8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001684:	4c09      	ldr	r4, [pc, #36]	@ (80016ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001688:	e001      	b.n	800168e <LoopFillZerobss>

0800168a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800168a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800168c:	3204      	adds	r2, #4

0800168e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800168e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001690:	d3fb      	bcc.n	800168a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001692:	f003 fbfd 	bl	8004e90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001696:	f7ff f9e9 	bl	8000a6c <main>
  bx lr
 800169a:	4770      	bx	lr
  ldr r0, =_sdata
 800169c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016a0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80016a4:	08005a70 	.word	0x08005a70
  ldr r2, =_sbss
 80016a8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80016ac:	20000330 	.word	0x20000330

080016b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016b0:	e7fe      	b.n	80016b0 <ADC1_2_IRQHandler>
	...

080016b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016b8:	4b08      	ldr	r3, [pc, #32]	@ (80016dc <HAL_Init+0x28>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a07      	ldr	r2, [pc, #28]	@ (80016dc <HAL_Init+0x28>)
 80016be:	f043 0310 	orr.w	r3, r3, #16
 80016c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016c4:	2003      	movs	r0, #3
 80016c6:	f000 fc45 	bl	8001f54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ca:	2000      	movs	r0, #0
 80016cc:	f000 f808 	bl	80016e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016d0:	f7ff fe0e 	bl	80012f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40022000 	.word	0x40022000

080016e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016e8:	4b12      	ldr	r3, [pc, #72]	@ (8001734 <HAL_InitTick+0x54>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4b12      	ldr	r3, [pc, #72]	@ (8001738 <HAL_InitTick+0x58>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	4619      	mov	r1, r3
 80016f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 fc4f 	bl	8001fa2 <HAL_SYSTICK_Config>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e00e      	b.n	800172c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b0f      	cmp	r3, #15
 8001712:	d80a      	bhi.n	800172a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001714:	2200      	movs	r2, #0
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	f04f 30ff 	mov.w	r0, #4294967295
 800171c:	f000 fc25 	bl	8001f6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001720:	4a06      	ldr	r2, [pc, #24]	@ (800173c <HAL_InitTick+0x5c>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001726:	2300      	movs	r3, #0
 8001728:	e000      	b.n	800172c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
}
 800172c:	4618      	mov	r0, r3
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20000004 	.word	0x20000004
 8001738:	2000000c 	.word	0x2000000c
 800173c:	20000008 	.word	0x20000008

08001740 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001744:	4b05      	ldr	r3, [pc, #20]	@ (800175c <HAL_IncTick+0x1c>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	461a      	mov	r2, r3
 800174a:	4b05      	ldr	r3, [pc, #20]	@ (8001760 <HAL_IncTick+0x20>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4413      	add	r3, r2
 8001750:	4a03      	ldr	r2, [pc, #12]	@ (8001760 <HAL_IncTick+0x20>)
 8001752:	6013      	str	r3, [r2, #0]
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr
 800175c:	2000000c 	.word	0x2000000c
 8001760:	200001e4 	.word	0x200001e4

08001764 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  return uwTick;
 8001768:	4b02      	ldr	r3, [pc, #8]	@ (8001774 <HAL_GetTick+0x10>)
 800176a:	681b      	ldr	r3, [r3, #0]
}
 800176c:	4618      	mov	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr
 8001774:	200001e4 	.word	0x200001e4

08001778 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001780:	f7ff fff0 	bl	8001764 <HAL_GetTick>
 8001784:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001790:	d005      	beq.n	800179e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001792:	4b0a      	ldr	r3, [pc, #40]	@ (80017bc <HAL_Delay+0x44>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	461a      	mov	r2, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	4413      	add	r3, r2
 800179c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800179e:	bf00      	nop
 80017a0:	f7ff ffe0 	bl	8001764 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d8f7      	bhi.n	80017a0 <HAL_Delay+0x28>
  {
  }
}
 80017b0:	bf00      	nop
 80017b2:	bf00      	nop
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	2000000c 	.word	0x2000000c

080017c0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017c8:	2300      	movs	r3, #0
 80017ca:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80017cc:	2300      	movs	r3, #0
 80017ce:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80017d0:	2300      	movs	r3, #0
 80017d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80017d4:	2300      	movs	r3, #0
 80017d6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d101      	bne.n	80017e2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e0be      	b.n	8001960 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d109      	bne.n	8001804 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7ff fda8 	bl	8001354 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f000 fa05 	bl	8001c14 <ADC_ConversionStop_Disable>
 800180a:	4603      	mov	r3, r0
 800180c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001812:	f003 0310 	and.w	r3, r3, #16
 8001816:	2b00      	cmp	r3, #0
 8001818:	f040 8099 	bne.w	800194e <HAL_ADC_Init+0x18e>
 800181c:	7dfb      	ldrb	r3, [r7, #23]
 800181e:	2b00      	cmp	r3, #0
 8001820:	f040 8095 	bne.w	800194e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001828:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800182c:	f023 0302 	bic.w	r3, r3, #2
 8001830:	f043 0202 	orr.w	r2, r3, #2
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001840:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	7b1b      	ldrb	r3, [r3, #12]
 8001846:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001848:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800184a:	68ba      	ldr	r2, [r7, #8]
 800184c:	4313      	orrs	r3, r2
 800184e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001858:	d003      	beq.n	8001862 <HAL_ADC_Init+0xa2>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d102      	bne.n	8001868 <HAL_ADC_Init+0xa8>
 8001862:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001866:	e000      	b.n	800186a <HAL_ADC_Init+0xaa>
 8001868:	2300      	movs	r3, #0
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	4313      	orrs	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	7d1b      	ldrb	r3, [r3, #20]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d119      	bne.n	80018ac <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	7b1b      	ldrb	r3, [r3, #12]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d109      	bne.n	8001894 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	3b01      	subs	r3, #1
 8001886:	035a      	lsls	r2, r3, #13
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	4313      	orrs	r3, r2
 800188c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	e00b      	b.n	80018ac <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001898:	f043 0220 	orr.w	r2, r3, #32
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018a4:	f043 0201 	orr.w	r2, r3, #1
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	430a      	orrs	r2, r1
 80018be:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	689a      	ldr	r2, [r3, #8]
 80018c6:	4b28      	ldr	r3, [pc, #160]	@ (8001968 <HAL_ADC_Init+0x1a8>)
 80018c8:	4013      	ands	r3, r2
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6812      	ldr	r2, [r2, #0]
 80018ce:	68b9      	ldr	r1, [r7, #8]
 80018d0:	430b      	orrs	r3, r1
 80018d2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80018dc:	d003      	beq.n	80018e6 <HAL_ADC_Init+0x126>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d104      	bne.n	80018f0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	051b      	lsls	r3, r3, #20
 80018ee:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018f6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	430a      	orrs	r2, r1
 8001902:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	689a      	ldr	r2, [r3, #8]
 800190a:	4b18      	ldr	r3, [pc, #96]	@ (800196c <HAL_ADC_Init+0x1ac>)
 800190c:	4013      	ands	r3, r2
 800190e:	68ba      	ldr	r2, [r7, #8]
 8001910:	429a      	cmp	r2, r3
 8001912:	d10b      	bne.n	800192c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800191e:	f023 0303 	bic.w	r3, r3, #3
 8001922:	f043 0201 	orr.w	r2, r3, #1
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800192a:	e018      	b.n	800195e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001930:	f023 0312 	bic.w	r3, r3, #18
 8001934:	f043 0210 	orr.w	r2, r3, #16
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001940:	f043 0201 	orr.w	r2, r3, #1
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800194c:	e007      	b.n	800195e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001952:	f043 0210 	orr.w	r2, r3, #16
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800195e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001960:	4618      	mov	r0, r3
 8001962:	3718      	adds	r7, #24
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	ffe1f7fd 	.word	0xffe1f7fd
 800196c:	ff1f0efe 	.word	0xff1f0efe

08001970 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800197a:	2300      	movs	r3, #0
 800197c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800197e:	2300      	movs	r3, #0
 8001980:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001988:	2b01      	cmp	r3, #1
 800198a:	d101      	bne.n	8001990 <HAL_ADC_ConfigChannel+0x20>
 800198c:	2302      	movs	r3, #2
 800198e:	e0dc      	b.n	8001b4a <HAL_ADC_ConfigChannel+0x1da>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	2b06      	cmp	r3, #6
 800199e:	d81c      	bhi.n	80019da <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685a      	ldr	r2, [r3, #4]
 80019aa:	4613      	mov	r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	4413      	add	r3, r2
 80019b0:	3b05      	subs	r3, #5
 80019b2:	221f      	movs	r2, #31
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	4019      	ands	r1, r3
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	6818      	ldr	r0, [r3, #0]
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	3b05      	subs	r3, #5
 80019cc:	fa00 f203 	lsl.w	r2, r0, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	635a      	str	r2, [r3, #52]	@ 0x34
 80019d8:	e03c      	b.n	8001a54 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b0c      	cmp	r3, #12
 80019e0:	d81c      	bhi.n	8001a1c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685a      	ldr	r2, [r3, #4]
 80019ec:	4613      	mov	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4413      	add	r3, r2
 80019f2:	3b23      	subs	r3, #35	@ 0x23
 80019f4:	221f      	movs	r2, #31
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	43db      	mvns	r3, r3
 80019fc:	4019      	ands	r1, r3
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	6818      	ldr	r0, [r3, #0]
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	4613      	mov	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	3b23      	subs	r3, #35	@ 0x23
 8001a0e:	fa00 f203 	lsl.w	r2, r0, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	430a      	orrs	r2, r1
 8001a18:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a1a:	e01b      	b.n	8001a54 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685a      	ldr	r2, [r3, #4]
 8001a26:	4613      	mov	r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	3b41      	subs	r3, #65	@ 0x41
 8001a2e:	221f      	movs	r2, #31
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	43db      	mvns	r3, r3
 8001a36:	4019      	ands	r1, r3
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	6818      	ldr	r0, [r3, #0]
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685a      	ldr	r2, [r3, #4]
 8001a40:	4613      	mov	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	3b41      	subs	r3, #65	@ 0x41
 8001a48:	fa00 f203 	lsl.w	r2, r0, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	430a      	orrs	r2, r1
 8001a52:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2b09      	cmp	r3, #9
 8001a5a:	d91c      	bls.n	8001a96 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	68d9      	ldr	r1, [r3, #12]
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	4613      	mov	r3, r2
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	4413      	add	r3, r2
 8001a6c:	3b1e      	subs	r3, #30
 8001a6e:	2207      	movs	r2, #7
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	43db      	mvns	r3, r3
 8001a76:	4019      	ands	r1, r3
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	6898      	ldr	r0, [r3, #8]
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4613      	mov	r3, r2
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	4413      	add	r3, r2
 8001a86:	3b1e      	subs	r3, #30
 8001a88:	fa00 f203 	lsl.w	r2, r0, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	430a      	orrs	r2, r1
 8001a92:	60da      	str	r2, [r3, #12]
 8001a94:	e019      	b.n	8001aca <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	6919      	ldr	r1, [r3, #16]
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	4413      	add	r3, r2
 8001aa6:	2207      	movs	r2, #7
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	43db      	mvns	r3, r3
 8001aae:	4019      	ands	r1, r3
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	6898      	ldr	r0, [r3, #8]
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	4413      	add	r3, r2
 8001abe:	fa00 f203 	lsl.w	r2, r0, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2b10      	cmp	r3, #16
 8001ad0:	d003      	beq.n	8001ada <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ad6:	2b11      	cmp	r3, #17
 8001ad8:	d132      	bne.n	8001b40 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a1d      	ldr	r2, [pc, #116]	@ (8001b54 <HAL_ADC_ConfigChannel+0x1e4>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d125      	bne.n	8001b30 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d126      	bne.n	8001b40 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001b00:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2b10      	cmp	r3, #16
 8001b08:	d11a      	bne.n	8001b40 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b0a:	4b13      	ldr	r3, [pc, #76]	@ (8001b58 <HAL_ADC_ConfigChannel+0x1e8>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a13      	ldr	r2, [pc, #76]	@ (8001b5c <HAL_ADC_ConfigChannel+0x1ec>)
 8001b10:	fba2 2303 	umull	r2, r3, r2, r3
 8001b14:	0c9a      	lsrs	r2, r3, #18
 8001b16:	4613      	mov	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4413      	add	r3, r2
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b20:	e002      	b.n	8001b28 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	3b01      	subs	r3, #1
 8001b26:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1f9      	bne.n	8001b22 <HAL_ADC_ConfigChannel+0x1b2>
 8001b2e:	e007      	b.n	8001b40 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b34:	f043 0220 	orr.w	r2, r3, #32
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr
 8001b54:	40012400 	.word	0x40012400
 8001b58:	20000004 	.word	0x20000004
 8001b5c:	431bde83 	.word	0x431bde83

08001b60 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d040      	beq.n	8001c00 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f042 0201 	orr.w	r2, r2, #1
 8001b8c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b8e:	4b1f      	ldr	r3, [pc, #124]	@ (8001c0c <ADC_Enable+0xac>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a1f      	ldr	r2, [pc, #124]	@ (8001c10 <ADC_Enable+0xb0>)
 8001b94:	fba2 2303 	umull	r2, r3, r2, r3
 8001b98:	0c9b      	lsrs	r3, r3, #18
 8001b9a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b9c:	e002      	b.n	8001ba4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1f9      	bne.n	8001b9e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001baa:	f7ff fddb 	bl	8001764 <HAL_GetTick>
 8001bae:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001bb0:	e01f      	b.n	8001bf2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001bb2:	f7ff fdd7 	bl	8001764 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d918      	bls.n	8001bf2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d011      	beq.n	8001bf2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bd2:	f043 0210 	orr.w	r2, r3, #16
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bde:	f043 0201 	orr.w	r2, r3, #1
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e007      	b.n	8001c02 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d1d8      	bne.n	8001bb2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000004 	.word	0x20000004
 8001c10:	431bde83 	.word	0x431bde83

08001c14 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d12e      	bne.n	8001c8c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f022 0201 	bic.w	r2, r2, #1
 8001c3c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c3e:	f7ff fd91 	bl	8001764 <HAL_GetTick>
 8001c42:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c44:	e01b      	b.n	8001c7e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c46:	f7ff fd8d 	bl	8001764 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d914      	bls.n	8001c7e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d10d      	bne.n	8001c7e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c66:	f043 0210 	orr.w	r2, r3, #16
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c72:	f043 0201 	orr.w	r2, r3, #1
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e007      	b.n	8001c8e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d0dc      	beq.n	8001c46 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
	...

08001c98 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001c98:	b590      	push	{r4, r7, lr}
 8001c9a:	b087      	sub	sp, #28
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d101      	bne.n	8001cb6 <HAL_ADCEx_Calibration_Start+0x1e>
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	e097      	b.n	8001de6 <HAL_ADCEx_Calibration_Start+0x14e>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7ff ffa8 	bl	8001c14 <ADC_ConversionStop_Disable>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f7ff ff49 	bl	8001b60 <ADC_Enable>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8001cd2:	7dfb      	ldrb	r3, [r7, #23]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f040 8081 	bne.w	8001ddc <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cde:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001ce2:	f023 0302 	bic.w	r3, r3, #2
 8001ce6:	f043 0202 	orr.w	r2, r3, #2
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001cee:	4b40      	ldr	r3, [pc, #256]	@ (8001df0 <HAL_ADCEx_Calibration_Start+0x158>)
 8001cf0:	681c      	ldr	r4, [r3, #0]
 8001cf2:	2002      	movs	r0, #2
 8001cf4:	f002 f81a 	bl	8003d2c <HAL_RCCEx_GetPeriphCLKFreq>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001cfe:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001d00:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001d02:	e002      	b.n	8001d0a <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	3b01      	subs	r3, #1
 8001d08:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d1f9      	bne.n	8001d04 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	689a      	ldr	r2, [r3, #8]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f042 0208 	orr.w	r2, r2, #8
 8001d1e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001d20:	f7ff fd20 	bl	8001764 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001d26:	e01b      	b.n	8001d60 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001d28:	f7ff fd1c 	bl	8001764 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b0a      	cmp	r3, #10
 8001d34:	d914      	bls.n	8001d60 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f003 0308 	and.w	r3, r3, #8
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d00d      	beq.n	8001d60 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d48:	f023 0312 	bic.w	r3, r3, #18
 8001d4c:	f043 0210 	orr.w	r2, r3, #16
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e042      	b.n	8001de6 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1dc      	bne.n	8001d28 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f042 0204 	orr.w	r2, r2, #4
 8001d7c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001d7e:	f7ff fcf1 	bl	8001764 <HAL_GetTick>
 8001d82:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001d84:	e01b      	b.n	8001dbe <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001d86:	f7ff fced 	bl	8001764 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b0a      	cmp	r3, #10
 8001d92:	d914      	bls.n	8001dbe <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f003 0304 	and.w	r3, r3, #4
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d00d      	beq.n	8001dbe <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da6:	f023 0312 	bic.w	r3, r3, #18
 8001daa:	f043 0210 	orr.w	r2, r3, #16
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e013      	b.n	8001de6 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1dc      	bne.n	8001d86 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd0:	f023 0303 	bic.w	r3, r3, #3
 8001dd4:	f043 0201 	orr.w	r2, r3, #1
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001de4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	371c      	adds	r7, #28
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd90      	pop	{r4, r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000004 	.word	0x20000004

08001df4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e04:	4b0c      	ldr	r3, [pc, #48]	@ (8001e38 <__NVIC_SetPriorityGrouping+0x44>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e10:	4013      	ands	r3, r2
 8001e12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e26:	4a04      	ldr	r2, [pc, #16]	@ (8001e38 <__NVIC_SetPriorityGrouping+0x44>)
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	60d3      	str	r3, [r2, #12]
}
 8001e2c:	bf00      	nop
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bc80      	pop	{r7}
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e40:	4b04      	ldr	r3, [pc, #16]	@ (8001e54 <__NVIC_GetPriorityGrouping+0x18>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	0a1b      	lsrs	r3, r3, #8
 8001e46:	f003 0307 	and.w	r3, r3, #7
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bc80      	pop	{r7}
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	6039      	str	r1, [r7, #0]
 8001e62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	db0a      	blt.n	8001e82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	b2da      	uxtb	r2, r3
 8001e70:	490c      	ldr	r1, [pc, #48]	@ (8001ea4 <__NVIC_SetPriority+0x4c>)
 8001e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e76:	0112      	lsls	r2, r2, #4
 8001e78:	b2d2      	uxtb	r2, r2
 8001e7a:	440b      	add	r3, r1
 8001e7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e80:	e00a      	b.n	8001e98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	4908      	ldr	r1, [pc, #32]	@ (8001ea8 <__NVIC_SetPriority+0x50>)
 8001e88:	79fb      	ldrb	r3, [r7, #7]
 8001e8a:	f003 030f 	and.w	r3, r3, #15
 8001e8e:	3b04      	subs	r3, #4
 8001e90:	0112      	lsls	r2, r2, #4
 8001e92:	b2d2      	uxtb	r2, r2
 8001e94:	440b      	add	r3, r1
 8001e96:	761a      	strb	r2, [r3, #24]
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bc80      	pop	{r7}
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	e000e100 	.word	0xe000e100
 8001ea8:	e000ed00 	.word	0xe000ed00

08001eac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b089      	sub	sp, #36	@ 0x24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	f1c3 0307 	rsb	r3, r3, #7
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	bf28      	it	cs
 8001eca:	2304      	movcs	r3, #4
 8001ecc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	2b06      	cmp	r3, #6
 8001ed4:	d902      	bls.n	8001edc <NVIC_EncodePriority+0x30>
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	3b03      	subs	r3, #3
 8001eda:	e000      	b.n	8001ede <NVIC_EncodePriority+0x32>
 8001edc:	2300      	movs	r3, #0
 8001ede:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	43da      	mvns	r2, r3
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	401a      	ands	r2, r3
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ef4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	fa01 f303 	lsl.w	r3, r1, r3
 8001efe:	43d9      	mvns	r1, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f04:	4313      	orrs	r3, r2
         );
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3724      	adds	r7, #36	@ 0x24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr

08001f10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f20:	d301      	bcc.n	8001f26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f22:	2301      	movs	r3, #1
 8001f24:	e00f      	b.n	8001f46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f26:	4a0a      	ldr	r2, [pc, #40]	@ (8001f50 <SysTick_Config+0x40>)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f2e:	210f      	movs	r1, #15
 8001f30:	f04f 30ff 	mov.w	r0, #4294967295
 8001f34:	f7ff ff90 	bl	8001e58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f38:	4b05      	ldr	r3, [pc, #20]	@ (8001f50 <SysTick_Config+0x40>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f3e:	4b04      	ldr	r3, [pc, #16]	@ (8001f50 <SysTick_Config+0x40>)
 8001f40:	2207      	movs	r2, #7
 8001f42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	e000e010 	.word	0xe000e010

08001f54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f7ff ff49 	bl	8001df4 <__NVIC_SetPriorityGrouping>
}
 8001f62:	bf00      	nop
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b086      	sub	sp, #24
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	4603      	mov	r3, r0
 8001f72:	60b9      	str	r1, [r7, #8]
 8001f74:	607a      	str	r2, [r7, #4]
 8001f76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f7c:	f7ff ff5e 	bl	8001e3c <__NVIC_GetPriorityGrouping>
 8001f80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	68b9      	ldr	r1, [r7, #8]
 8001f86:	6978      	ldr	r0, [r7, #20]
 8001f88:	f7ff ff90 	bl	8001eac <NVIC_EncodePriority>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f92:	4611      	mov	r1, r2
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff ff5f 	bl	8001e58 <__NVIC_SetPriority>
}
 8001f9a:	bf00      	nop
 8001f9c:	3718      	adds	r7, #24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b082      	sub	sp, #8
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7ff ffb0 	bl	8001f10 <SysTick_Config>
 8001fb0:	4603      	mov	r3, r0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
	...

08001fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b08b      	sub	sp, #44	@ 0x2c
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fce:	e169      	b.n	80022a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	69fa      	ldr	r2, [r7, #28]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	f040 8158 	bne.w	800229e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	4a9a      	ldr	r2, [pc, #616]	@ (800225c <HAL_GPIO_Init+0x2a0>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d05e      	beq.n	80020b6 <HAL_GPIO_Init+0xfa>
 8001ff8:	4a98      	ldr	r2, [pc, #608]	@ (800225c <HAL_GPIO_Init+0x2a0>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d875      	bhi.n	80020ea <HAL_GPIO_Init+0x12e>
 8001ffe:	4a98      	ldr	r2, [pc, #608]	@ (8002260 <HAL_GPIO_Init+0x2a4>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d058      	beq.n	80020b6 <HAL_GPIO_Init+0xfa>
 8002004:	4a96      	ldr	r2, [pc, #600]	@ (8002260 <HAL_GPIO_Init+0x2a4>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d86f      	bhi.n	80020ea <HAL_GPIO_Init+0x12e>
 800200a:	4a96      	ldr	r2, [pc, #600]	@ (8002264 <HAL_GPIO_Init+0x2a8>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d052      	beq.n	80020b6 <HAL_GPIO_Init+0xfa>
 8002010:	4a94      	ldr	r2, [pc, #592]	@ (8002264 <HAL_GPIO_Init+0x2a8>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d869      	bhi.n	80020ea <HAL_GPIO_Init+0x12e>
 8002016:	4a94      	ldr	r2, [pc, #592]	@ (8002268 <HAL_GPIO_Init+0x2ac>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d04c      	beq.n	80020b6 <HAL_GPIO_Init+0xfa>
 800201c:	4a92      	ldr	r2, [pc, #584]	@ (8002268 <HAL_GPIO_Init+0x2ac>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d863      	bhi.n	80020ea <HAL_GPIO_Init+0x12e>
 8002022:	4a92      	ldr	r2, [pc, #584]	@ (800226c <HAL_GPIO_Init+0x2b0>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d046      	beq.n	80020b6 <HAL_GPIO_Init+0xfa>
 8002028:	4a90      	ldr	r2, [pc, #576]	@ (800226c <HAL_GPIO_Init+0x2b0>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d85d      	bhi.n	80020ea <HAL_GPIO_Init+0x12e>
 800202e:	2b12      	cmp	r3, #18
 8002030:	d82a      	bhi.n	8002088 <HAL_GPIO_Init+0xcc>
 8002032:	2b12      	cmp	r3, #18
 8002034:	d859      	bhi.n	80020ea <HAL_GPIO_Init+0x12e>
 8002036:	a201      	add	r2, pc, #4	@ (adr r2, 800203c <HAL_GPIO_Init+0x80>)
 8002038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800203c:	080020b7 	.word	0x080020b7
 8002040:	08002091 	.word	0x08002091
 8002044:	080020a3 	.word	0x080020a3
 8002048:	080020e5 	.word	0x080020e5
 800204c:	080020eb 	.word	0x080020eb
 8002050:	080020eb 	.word	0x080020eb
 8002054:	080020eb 	.word	0x080020eb
 8002058:	080020eb 	.word	0x080020eb
 800205c:	080020eb 	.word	0x080020eb
 8002060:	080020eb 	.word	0x080020eb
 8002064:	080020eb 	.word	0x080020eb
 8002068:	080020eb 	.word	0x080020eb
 800206c:	080020eb 	.word	0x080020eb
 8002070:	080020eb 	.word	0x080020eb
 8002074:	080020eb 	.word	0x080020eb
 8002078:	080020eb 	.word	0x080020eb
 800207c:	080020eb 	.word	0x080020eb
 8002080:	08002099 	.word	0x08002099
 8002084:	080020ad 	.word	0x080020ad
 8002088:	4a79      	ldr	r2, [pc, #484]	@ (8002270 <HAL_GPIO_Init+0x2b4>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d013      	beq.n	80020b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800208e:	e02c      	b.n	80020ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	623b      	str	r3, [r7, #32]
          break;
 8002096:	e029      	b.n	80020ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	3304      	adds	r3, #4
 800209e:	623b      	str	r3, [r7, #32]
          break;
 80020a0:	e024      	b.n	80020ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	3308      	adds	r3, #8
 80020a8:	623b      	str	r3, [r7, #32]
          break;
 80020aa:	e01f      	b.n	80020ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	330c      	adds	r3, #12
 80020b2:	623b      	str	r3, [r7, #32]
          break;
 80020b4:	e01a      	b.n	80020ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d102      	bne.n	80020c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020be:	2304      	movs	r3, #4
 80020c0:	623b      	str	r3, [r7, #32]
          break;
 80020c2:	e013      	b.n	80020ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d105      	bne.n	80020d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020cc:	2308      	movs	r3, #8
 80020ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	69fa      	ldr	r2, [r7, #28]
 80020d4:	611a      	str	r2, [r3, #16]
          break;
 80020d6:	e009      	b.n	80020ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020d8:	2308      	movs	r3, #8
 80020da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	69fa      	ldr	r2, [r7, #28]
 80020e0:	615a      	str	r2, [r3, #20]
          break;
 80020e2:	e003      	b.n	80020ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020e4:	2300      	movs	r3, #0
 80020e6:	623b      	str	r3, [r7, #32]
          break;
 80020e8:	e000      	b.n	80020ec <HAL_GPIO_Init+0x130>
          break;
 80020ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	2bff      	cmp	r3, #255	@ 0xff
 80020f0:	d801      	bhi.n	80020f6 <HAL_GPIO_Init+0x13a>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	e001      	b.n	80020fa <HAL_GPIO_Init+0x13e>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	3304      	adds	r3, #4
 80020fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	2bff      	cmp	r3, #255	@ 0xff
 8002100:	d802      	bhi.n	8002108 <HAL_GPIO_Init+0x14c>
 8002102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	e002      	b.n	800210e <HAL_GPIO_Init+0x152>
 8002108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210a:	3b08      	subs	r3, #8
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	210f      	movs	r1, #15
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	fa01 f303 	lsl.w	r3, r1, r3
 800211c:	43db      	mvns	r3, r3
 800211e:	401a      	ands	r2, r3
 8002120:	6a39      	ldr	r1, [r7, #32]
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	fa01 f303 	lsl.w	r3, r1, r3
 8002128:	431a      	orrs	r2, r3
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 80b1 	beq.w	800229e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800213c:	4b4d      	ldr	r3, [pc, #308]	@ (8002274 <HAL_GPIO_Init+0x2b8>)
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	4a4c      	ldr	r2, [pc, #304]	@ (8002274 <HAL_GPIO_Init+0x2b8>)
 8002142:	f043 0301 	orr.w	r3, r3, #1
 8002146:	6193      	str	r3, [r2, #24]
 8002148:	4b4a      	ldr	r3, [pc, #296]	@ (8002274 <HAL_GPIO_Init+0x2b8>)
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	60bb      	str	r3, [r7, #8]
 8002152:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002154:	4a48      	ldr	r2, [pc, #288]	@ (8002278 <HAL_GPIO_Init+0x2bc>)
 8002156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002158:	089b      	lsrs	r3, r3, #2
 800215a:	3302      	adds	r3, #2
 800215c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002160:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002164:	f003 0303 	and.w	r3, r3, #3
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	220f      	movs	r2, #15
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	43db      	mvns	r3, r3
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	4013      	ands	r3, r2
 8002176:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a40      	ldr	r2, [pc, #256]	@ (800227c <HAL_GPIO_Init+0x2c0>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d013      	beq.n	80021a8 <HAL_GPIO_Init+0x1ec>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a3f      	ldr	r2, [pc, #252]	@ (8002280 <HAL_GPIO_Init+0x2c4>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d00d      	beq.n	80021a4 <HAL_GPIO_Init+0x1e8>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a3e      	ldr	r2, [pc, #248]	@ (8002284 <HAL_GPIO_Init+0x2c8>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d007      	beq.n	80021a0 <HAL_GPIO_Init+0x1e4>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a3d      	ldr	r2, [pc, #244]	@ (8002288 <HAL_GPIO_Init+0x2cc>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d101      	bne.n	800219c <HAL_GPIO_Init+0x1e0>
 8002198:	2303      	movs	r3, #3
 800219a:	e006      	b.n	80021aa <HAL_GPIO_Init+0x1ee>
 800219c:	2304      	movs	r3, #4
 800219e:	e004      	b.n	80021aa <HAL_GPIO_Init+0x1ee>
 80021a0:	2302      	movs	r3, #2
 80021a2:	e002      	b.n	80021aa <HAL_GPIO_Init+0x1ee>
 80021a4:	2301      	movs	r3, #1
 80021a6:	e000      	b.n	80021aa <HAL_GPIO_Init+0x1ee>
 80021a8:	2300      	movs	r3, #0
 80021aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021ac:	f002 0203 	and.w	r2, r2, #3
 80021b0:	0092      	lsls	r2, r2, #2
 80021b2:	4093      	lsls	r3, r2
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021ba:	492f      	ldr	r1, [pc, #188]	@ (8002278 <HAL_GPIO_Init+0x2bc>)
 80021bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021be:	089b      	lsrs	r3, r3, #2
 80021c0:	3302      	adds	r3, #2
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d006      	beq.n	80021e2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021d4:	4b2d      	ldr	r3, [pc, #180]	@ (800228c <HAL_GPIO_Init+0x2d0>)
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	492c      	ldr	r1, [pc, #176]	@ (800228c <HAL_GPIO_Init+0x2d0>)
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	4313      	orrs	r3, r2
 80021de:	608b      	str	r3, [r1, #8]
 80021e0:	e006      	b.n	80021f0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021e2:	4b2a      	ldr	r3, [pc, #168]	@ (800228c <HAL_GPIO_Init+0x2d0>)
 80021e4:	689a      	ldr	r2, [r3, #8]
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	43db      	mvns	r3, r3
 80021ea:	4928      	ldr	r1, [pc, #160]	@ (800228c <HAL_GPIO_Init+0x2d0>)
 80021ec:	4013      	ands	r3, r2
 80021ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d006      	beq.n	800220a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021fc:	4b23      	ldr	r3, [pc, #140]	@ (800228c <HAL_GPIO_Init+0x2d0>)
 80021fe:	68da      	ldr	r2, [r3, #12]
 8002200:	4922      	ldr	r1, [pc, #136]	@ (800228c <HAL_GPIO_Init+0x2d0>)
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	4313      	orrs	r3, r2
 8002206:	60cb      	str	r3, [r1, #12]
 8002208:	e006      	b.n	8002218 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800220a:	4b20      	ldr	r3, [pc, #128]	@ (800228c <HAL_GPIO_Init+0x2d0>)
 800220c:	68da      	ldr	r2, [r3, #12]
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	43db      	mvns	r3, r3
 8002212:	491e      	ldr	r1, [pc, #120]	@ (800228c <HAL_GPIO_Init+0x2d0>)
 8002214:	4013      	ands	r3, r2
 8002216:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d006      	beq.n	8002232 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002224:	4b19      	ldr	r3, [pc, #100]	@ (800228c <HAL_GPIO_Init+0x2d0>)
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	4918      	ldr	r1, [pc, #96]	@ (800228c <HAL_GPIO_Init+0x2d0>)
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	4313      	orrs	r3, r2
 800222e:	604b      	str	r3, [r1, #4]
 8002230:	e006      	b.n	8002240 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002232:	4b16      	ldr	r3, [pc, #88]	@ (800228c <HAL_GPIO_Init+0x2d0>)
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	43db      	mvns	r3, r3
 800223a:	4914      	ldr	r1, [pc, #80]	@ (800228c <HAL_GPIO_Init+0x2d0>)
 800223c:	4013      	ands	r3, r2
 800223e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d021      	beq.n	8002290 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800224c:	4b0f      	ldr	r3, [pc, #60]	@ (800228c <HAL_GPIO_Init+0x2d0>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	490e      	ldr	r1, [pc, #56]	@ (800228c <HAL_GPIO_Init+0x2d0>)
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	4313      	orrs	r3, r2
 8002256:	600b      	str	r3, [r1, #0]
 8002258:	e021      	b.n	800229e <HAL_GPIO_Init+0x2e2>
 800225a:	bf00      	nop
 800225c:	10320000 	.word	0x10320000
 8002260:	10310000 	.word	0x10310000
 8002264:	10220000 	.word	0x10220000
 8002268:	10210000 	.word	0x10210000
 800226c:	10120000 	.word	0x10120000
 8002270:	10110000 	.word	0x10110000
 8002274:	40021000 	.word	0x40021000
 8002278:	40010000 	.word	0x40010000
 800227c:	40010800 	.word	0x40010800
 8002280:	40010c00 	.word	0x40010c00
 8002284:	40011000 	.word	0x40011000
 8002288:	40011400 	.word	0x40011400
 800228c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002290:	4b0b      	ldr	r3, [pc, #44]	@ (80022c0 <HAL_GPIO_Init+0x304>)
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	43db      	mvns	r3, r3
 8002298:	4909      	ldr	r1, [pc, #36]	@ (80022c0 <HAL_GPIO_Init+0x304>)
 800229a:	4013      	ands	r3, r2
 800229c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800229e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a0:	3301      	adds	r3, #1
 80022a2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022aa:	fa22 f303 	lsr.w	r3, r2, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f47f ae8e 	bne.w	8001fd0 <HAL_GPIO_Init+0x14>
  }
}
 80022b4:	bf00      	nop
 80022b6:	bf00      	nop
 80022b8:	372c      	adds	r7, #44	@ 0x2c
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bc80      	pop	{r7}
 80022be:	4770      	bx	lr
 80022c0:	40010400 	.word	0x40010400

080022c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	807b      	strh	r3, [r7, #2]
 80022d0:	4613      	mov	r3, r2
 80022d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022d4:	787b      	ldrb	r3, [r7, #1]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022da:	887a      	ldrh	r2, [r7, #2]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80022e0:	e003      	b.n	80022ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022e2:	887b      	ldrh	r3, [r7, #2]
 80022e4:	041a      	lsls	r2, r3, #16
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	611a      	str	r2, [r3, #16]
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr

080022f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e12b      	b.n	800255e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d106      	bne.n	8002320 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f7ff f856 	bl	80013cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2224      	movs	r2, #36	@ 0x24
 8002324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f022 0201 	bic.w	r2, r2, #1
 8002336:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002346:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002356:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002358:	f001 fbec 	bl	8003b34 <HAL_RCC_GetPCLK1Freq>
 800235c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	4a81      	ldr	r2, [pc, #516]	@ (8002568 <HAL_I2C_Init+0x274>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d807      	bhi.n	8002378 <HAL_I2C_Init+0x84>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	4a80      	ldr	r2, [pc, #512]	@ (800256c <HAL_I2C_Init+0x278>)
 800236c:	4293      	cmp	r3, r2
 800236e:	bf94      	ite	ls
 8002370:	2301      	movls	r3, #1
 8002372:	2300      	movhi	r3, #0
 8002374:	b2db      	uxtb	r3, r3
 8002376:	e006      	b.n	8002386 <HAL_I2C_Init+0x92>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	4a7d      	ldr	r2, [pc, #500]	@ (8002570 <HAL_I2C_Init+0x27c>)
 800237c:	4293      	cmp	r3, r2
 800237e:	bf94      	ite	ls
 8002380:	2301      	movls	r3, #1
 8002382:	2300      	movhi	r3, #0
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e0e7      	b.n	800255e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	4a78      	ldr	r2, [pc, #480]	@ (8002574 <HAL_I2C_Init+0x280>)
 8002392:	fba2 2303 	umull	r2, r3, r2, r3
 8002396:	0c9b      	lsrs	r3, r3, #18
 8002398:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68ba      	ldr	r2, [r7, #8]
 80023aa:	430a      	orrs	r2, r1
 80023ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	4a6a      	ldr	r2, [pc, #424]	@ (8002568 <HAL_I2C_Init+0x274>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d802      	bhi.n	80023c8 <HAL_I2C_Init+0xd4>
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	3301      	adds	r3, #1
 80023c6:	e009      	b.n	80023dc <HAL_I2C_Init+0xe8>
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80023ce:	fb02 f303 	mul.w	r3, r2, r3
 80023d2:	4a69      	ldr	r2, [pc, #420]	@ (8002578 <HAL_I2C_Init+0x284>)
 80023d4:	fba2 2303 	umull	r2, r3, r2, r3
 80023d8:	099b      	lsrs	r3, r3, #6
 80023da:	3301      	adds	r3, #1
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	6812      	ldr	r2, [r2, #0]
 80023e0:	430b      	orrs	r3, r1
 80023e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80023ee:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	495c      	ldr	r1, [pc, #368]	@ (8002568 <HAL_I2C_Init+0x274>)
 80023f8:	428b      	cmp	r3, r1
 80023fa:	d819      	bhi.n	8002430 <HAL_I2C_Init+0x13c>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	1e59      	subs	r1, r3, #1
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	fbb1 f3f3 	udiv	r3, r1, r3
 800240a:	1c59      	adds	r1, r3, #1
 800240c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002410:	400b      	ands	r3, r1
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00a      	beq.n	800242c <HAL_I2C_Init+0x138>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	1e59      	subs	r1, r3, #1
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	fbb1 f3f3 	udiv	r3, r1, r3
 8002424:	3301      	adds	r3, #1
 8002426:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800242a:	e051      	b.n	80024d0 <HAL_I2C_Init+0x1dc>
 800242c:	2304      	movs	r3, #4
 800242e:	e04f      	b.n	80024d0 <HAL_I2C_Init+0x1dc>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d111      	bne.n	800245c <HAL_I2C_Init+0x168>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	1e58      	subs	r0, r3, #1
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6859      	ldr	r1, [r3, #4]
 8002440:	460b      	mov	r3, r1
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	440b      	add	r3, r1
 8002446:	fbb0 f3f3 	udiv	r3, r0, r3
 800244a:	3301      	adds	r3, #1
 800244c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002450:	2b00      	cmp	r3, #0
 8002452:	bf0c      	ite	eq
 8002454:	2301      	moveq	r3, #1
 8002456:	2300      	movne	r3, #0
 8002458:	b2db      	uxtb	r3, r3
 800245a:	e012      	b.n	8002482 <HAL_I2C_Init+0x18e>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	1e58      	subs	r0, r3, #1
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6859      	ldr	r1, [r3, #4]
 8002464:	460b      	mov	r3, r1
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	440b      	add	r3, r1
 800246a:	0099      	lsls	r1, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002472:	3301      	adds	r3, #1
 8002474:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002478:	2b00      	cmp	r3, #0
 800247a:	bf0c      	ite	eq
 800247c:	2301      	moveq	r3, #1
 800247e:	2300      	movne	r3, #0
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <HAL_I2C_Init+0x196>
 8002486:	2301      	movs	r3, #1
 8002488:	e022      	b.n	80024d0 <HAL_I2C_Init+0x1dc>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10e      	bne.n	80024b0 <HAL_I2C_Init+0x1bc>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	1e58      	subs	r0, r3, #1
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6859      	ldr	r1, [r3, #4]
 800249a:	460b      	mov	r3, r1
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	440b      	add	r3, r1
 80024a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80024a4:	3301      	adds	r3, #1
 80024a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024ae:	e00f      	b.n	80024d0 <HAL_I2C_Init+0x1dc>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	1e58      	subs	r0, r3, #1
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6859      	ldr	r1, [r3, #4]
 80024b8:	460b      	mov	r3, r1
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	440b      	add	r3, r1
 80024be:	0099      	lsls	r1, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80024c6:	3301      	adds	r3, #1
 80024c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	6809      	ldr	r1, [r1, #0]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69da      	ldr	r2, [r3, #28]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a1b      	ldr	r3, [r3, #32]
 80024ea:	431a      	orrs	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80024fe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	6911      	ldr	r1, [r2, #16]
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	68d2      	ldr	r2, [r2, #12]
 800250a:	4311      	orrs	r1, r2
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	6812      	ldr	r2, [r2, #0]
 8002510:	430b      	orrs	r3, r1
 8002512:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	695a      	ldr	r2, [r3, #20]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	431a      	orrs	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	430a      	orrs	r2, r1
 800252e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f042 0201 	orr.w	r2, r2, #1
 800253e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2220      	movs	r2, #32
 800254a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	000186a0 	.word	0x000186a0
 800256c:	001e847f 	.word	0x001e847f
 8002570:	003d08ff 	.word	0x003d08ff
 8002574:	431bde83 	.word	0x431bde83
 8002578:	10624dd3 	.word	0x10624dd3

0800257c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b088      	sub	sp, #32
 8002580:	af02      	add	r7, sp, #8
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	607a      	str	r2, [r7, #4]
 8002586:	461a      	mov	r2, r3
 8002588:	460b      	mov	r3, r1
 800258a:	817b      	strh	r3, [r7, #10]
 800258c:	4613      	mov	r3, r2
 800258e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002590:	f7ff f8e8 	bl	8001764 <HAL_GetTick>
 8002594:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b20      	cmp	r3, #32
 80025a0:	f040 80e0 	bne.w	8002764 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	2319      	movs	r3, #25
 80025aa:	2201      	movs	r2, #1
 80025ac:	4970      	ldr	r1, [pc, #448]	@ (8002770 <HAL_I2C_Master_Transmit+0x1f4>)
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f000 fcc0 	bl	8002f34 <I2C_WaitOnFlagUntilTimeout>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80025ba:	2302      	movs	r3, #2
 80025bc:	e0d3      	b.n	8002766 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d101      	bne.n	80025cc <HAL_I2C_Master_Transmit+0x50>
 80025c8:	2302      	movs	r3, #2
 80025ca:	e0cc      	b.n	8002766 <HAL_I2C_Master_Transmit+0x1ea>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d007      	beq.n	80025f2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f042 0201 	orr.w	r2, r2, #1
 80025f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002600:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2221      	movs	r2, #33	@ 0x21
 8002606:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2210      	movs	r2, #16
 800260e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	893a      	ldrh	r2, [r7, #8]
 8002622:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002628:	b29a      	uxth	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	4a50      	ldr	r2, [pc, #320]	@ (8002774 <HAL_I2C_Master_Transmit+0x1f8>)
 8002632:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002634:	8979      	ldrh	r1, [r7, #10]
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	6a3a      	ldr	r2, [r7, #32]
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f000 fb10 	bl	8002c60 <I2C_MasterRequestWrite>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e08d      	b.n	8002766 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800264a:	2300      	movs	r3, #0
 800264c:	613b      	str	r3, [r7, #16]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	695b      	ldr	r3, [r3, #20]
 8002654:	613b      	str	r3, [r7, #16]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	613b      	str	r3, [r7, #16]
 800265e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002660:	e066      	b.n	8002730 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	6a39      	ldr	r1, [r7, #32]
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f000 fd7e 	bl	8003168 <I2C_WaitOnTXEFlagUntilTimeout>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00d      	beq.n	800268e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002676:	2b04      	cmp	r3, #4
 8002678:	d107      	bne.n	800268a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002688:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e06b      	b.n	8002766 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002692:	781a      	ldrb	r2, [r3, #0]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800269e:	1c5a      	adds	r2, r3, #1
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	3b01      	subs	r3, #1
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026b6:	3b01      	subs	r3, #1
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	695b      	ldr	r3, [r3, #20]
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	2b04      	cmp	r3, #4
 80026ca:	d11b      	bne.n	8002704 <HAL_I2C_Master_Transmit+0x188>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d017      	beq.n	8002704 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d8:	781a      	ldrb	r2, [r3, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e4:	1c5a      	adds	r2, r3, #1
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	3b01      	subs	r3, #1
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026fc:	3b01      	subs	r3, #1
 80026fe:	b29a      	uxth	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002704:	697a      	ldr	r2, [r7, #20]
 8002706:	6a39      	ldr	r1, [r7, #32]
 8002708:	68f8      	ldr	r0, [r7, #12]
 800270a:	f000 fd75 	bl	80031f8 <I2C_WaitOnBTFFlagUntilTimeout>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00d      	beq.n	8002730 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002718:	2b04      	cmp	r3, #4
 800271a:	d107      	bne.n	800272c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800272a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e01a      	b.n	8002766 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002734:	2b00      	cmp	r3, #0
 8002736:	d194      	bne.n	8002662 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002746:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2220      	movs	r2, #32
 800274c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002760:	2300      	movs	r3, #0
 8002762:	e000      	b.n	8002766 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002764:	2302      	movs	r3, #2
  }
}
 8002766:	4618      	mov	r0, r3
 8002768:	3718      	adds	r7, #24
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	00100002 	.word	0x00100002
 8002774:	ffff0000 	.word	0xffff0000

08002778 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b08c      	sub	sp, #48	@ 0x30
 800277c:	af02      	add	r7, sp, #8
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	4608      	mov	r0, r1
 8002782:	4611      	mov	r1, r2
 8002784:	461a      	mov	r2, r3
 8002786:	4603      	mov	r3, r0
 8002788:	817b      	strh	r3, [r7, #10]
 800278a:	460b      	mov	r3, r1
 800278c:	813b      	strh	r3, [r7, #8]
 800278e:	4613      	mov	r3, r2
 8002790:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002792:	2300      	movs	r3, #0
 8002794:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002796:	f7fe ffe5 	bl	8001764 <HAL_GetTick>
 800279a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	2b20      	cmp	r3, #32
 80027a6:	f040 8250 	bne.w	8002c4a <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ac:	9300      	str	r3, [sp, #0]
 80027ae:	2319      	movs	r3, #25
 80027b0:	2201      	movs	r2, #1
 80027b2:	4982      	ldr	r1, [pc, #520]	@ (80029bc <HAL_I2C_Mem_Read+0x244>)
 80027b4:	68f8      	ldr	r0, [r7, #12]
 80027b6:	f000 fbbd 	bl	8002f34 <I2C_WaitOnFlagUntilTimeout>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80027c0:	2302      	movs	r3, #2
 80027c2:	e243      	b.n	8002c4c <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d101      	bne.n	80027d2 <HAL_I2C_Mem_Read+0x5a>
 80027ce:	2302      	movs	r3, #2
 80027d0:	e23c      	b.n	8002c4c <HAL_I2C_Mem_Read+0x4d4>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d007      	beq.n	80027f8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f042 0201 	orr.w	r2, r2, #1
 80027f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002806:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2222      	movs	r2, #34	@ 0x22
 800280c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2240      	movs	r2, #64	@ 0x40
 8002814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002822:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002828:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800282e:	b29a      	uxth	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	4a62      	ldr	r2, [pc, #392]	@ (80029c0 <HAL_I2C_Mem_Read+0x248>)
 8002838:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800283a:	88f8      	ldrh	r0, [r7, #6]
 800283c:	893a      	ldrh	r2, [r7, #8]
 800283e:	8979      	ldrh	r1, [r7, #10]
 8002840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002842:	9301      	str	r3, [sp, #4]
 8002844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002846:	9300      	str	r3, [sp, #0]
 8002848:	4603      	mov	r3, r0
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f000 fa8a 	bl	8002d64 <I2C_RequestMemoryRead>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e1f8      	b.n	8002c4c <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800285e:	2b00      	cmp	r3, #0
 8002860:	d113      	bne.n	800288a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002862:	2300      	movs	r3, #0
 8002864:	61fb      	str	r3, [r7, #28]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	61fb      	str	r3, [r7, #28]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	61fb      	str	r3, [r7, #28]
 8002876:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	e1cc      	b.n	8002c24 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800288e:	2b01      	cmp	r3, #1
 8002890:	d11e      	bne.n	80028d0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028a0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80028a2:	b672      	cpsid	i
}
 80028a4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028a6:	2300      	movs	r3, #0
 80028a8:	61bb      	str	r3, [r7, #24]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	695b      	ldr	r3, [r3, #20]
 80028b0:	61bb      	str	r3, [r7, #24]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	61bb      	str	r3, [r7, #24]
 80028ba:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028ca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80028cc:	b662      	cpsie	i
}
 80028ce:	e035      	b.n	800293c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d11e      	bne.n	8002916 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028e6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80028e8:	b672      	cpsid	i
}
 80028ea:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ec:	2300      	movs	r3, #0
 80028ee:	617b      	str	r3, [r7, #20]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	617b      	str	r3, [r7, #20]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	617b      	str	r3, [r7, #20]
 8002900:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002910:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002912:	b662      	cpsie	i
}
 8002914:	e012      	b.n	800293c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002924:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002926:	2300      	movs	r3, #0
 8002928:	613b      	str	r3, [r7, #16]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	613b      	str	r3, [r7, #16]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	613b      	str	r3, [r7, #16]
 800293a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800293c:	e172      	b.n	8002c24 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002942:	2b03      	cmp	r3, #3
 8002944:	f200 811f 	bhi.w	8002b86 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800294c:	2b01      	cmp	r3, #1
 800294e:	d123      	bne.n	8002998 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002950:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002952:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f000 fc97 	bl	8003288 <I2C_WaitOnRXNEFlagUntilTimeout>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e173      	b.n	8002c4c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	691a      	ldr	r2, [r3, #16]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002976:	1c5a      	adds	r2, r3, #1
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002980:	3b01      	subs	r3, #1
 8002982:	b29a      	uxth	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800298c:	b29b      	uxth	r3, r3
 800298e:	3b01      	subs	r3, #1
 8002990:	b29a      	uxth	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002996:	e145      	b.n	8002c24 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800299c:	2b02      	cmp	r3, #2
 800299e:	d152      	bne.n	8002a46 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a2:	9300      	str	r3, [sp, #0]
 80029a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029a6:	2200      	movs	r2, #0
 80029a8:	4906      	ldr	r1, [pc, #24]	@ (80029c4 <HAL_I2C_Mem_Read+0x24c>)
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f000 fac2 	bl	8002f34 <I2C_WaitOnFlagUntilTimeout>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d008      	beq.n	80029c8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e148      	b.n	8002c4c <HAL_I2C_Mem_Read+0x4d4>
 80029ba:	bf00      	nop
 80029bc:	00100002 	.word	0x00100002
 80029c0:	ffff0000 	.word	0xffff0000
 80029c4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80029c8:	b672      	cpsid	i
}
 80029ca:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	691a      	ldr	r2, [r3, #16]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ee:	1c5a      	adds	r2, r3, #1
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029f8:	3b01      	subs	r3, #1
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	3b01      	subs	r3, #1
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002a0e:	b662      	cpsie	i
}
 8002a10:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	691a      	ldr	r2, [r3, #16]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a24:	1c5a      	adds	r2, r3, #1
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a44:	e0ee      	b.n	8002c24 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a48:	9300      	str	r3, [sp, #0]
 8002a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	4981      	ldr	r1, [pc, #516]	@ (8002c54 <HAL_I2C_Mem_Read+0x4dc>)
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f000 fa6f 	bl	8002f34 <I2C_WaitOnFlagUntilTimeout>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e0f5      	b.n	8002c4c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a6e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a70:	b672      	cpsid	i
}
 8002a72:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	691a      	ldr	r2, [r3, #16]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a86:	1c5a      	adds	r2, r3, #1
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a90:	3b01      	subs	r3, #1
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002aa6:	4b6c      	ldr	r3, [pc, #432]	@ (8002c58 <HAL_I2C_Mem_Read+0x4e0>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	08db      	lsrs	r3, r3, #3
 8002aac:	4a6b      	ldr	r2, [pc, #428]	@ (8002c5c <HAL_I2C_Mem_Read+0x4e4>)
 8002aae:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab2:	0a1a      	lsrs	r2, r3, #8
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4413      	add	r3, r2
 8002aba:	00da      	lsls	r2, r3, #3
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002ac0:	6a3b      	ldr	r3, [r7, #32]
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002ac6:	6a3b      	ldr	r3, [r7, #32]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d118      	bne.n	8002afe <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2220      	movs	r2, #32
 8002ad6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae6:	f043 0220 	orr.w	r2, r3, #32
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002aee:	b662      	cpsie	i
}
 8002af0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e0a6      	b.n	8002c4c <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	695b      	ldr	r3, [r3, #20]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b04      	cmp	r3, #4
 8002b0a:	d1d9      	bne.n	8002ac0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	691a      	ldr	r2, [r3, #16]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2e:	1c5a      	adds	r2, r3, #1
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	3b01      	subs	r3, #1
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002b4e:	b662      	cpsie	i
}
 8002b50:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	691a      	ldr	r2, [r3, #16]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b5c:	b2d2      	uxtb	r2, r2
 8002b5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b64:	1c5a      	adds	r2, r3, #1
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b84:	e04e      	b.n	8002c24 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b88:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 fb7c 	bl	8003288 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e058      	b.n	8002c4c <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	691a      	ldr	r2, [r3, #16]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bac:	1c5a      	adds	r2, r3, #1
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	f003 0304 	and.w	r3, r3, #4
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	d124      	bne.n	8002c24 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bde:	2b03      	cmp	r3, #3
 8002be0:	d107      	bne.n	8002bf2 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bf0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	691a      	ldr	r2, [r3, #16]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfc:	b2d2      	uxtb	r2, r2
 8002bfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c04:	1c5a      	adds	r2, r3, #1
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f47f ae88 	bne.w	800293e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2220      	movs	r2, #32
 8002c32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002c46:	2300      	movs	r3, #0
 8002c48:	e000      	b.n	8002c4c <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8002c4a:	2302      	movs	r3, #2
  }
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3728      	adds	r7, #40	@ 0x28
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	00010004 	.word	0x00010004
 8002c58:	20000004 	.word	0x20000004
 8002c5c:	14f8b589 	.word	0x14f8b589

08002c60 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b088      	sub	sp, #32
 8002c64:	af02      	add	r7, sp, #8
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	607a      	str	r2, [r7, #4]
 8002c6a:	603b      	str	r3, [r7, #0]
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c74:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	2b08      	cmp	r3, #8
 8002c7a:	d006      	beq.n	8002c8a <I2C_MasterRequestWrite+0x2a>
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d003      	beq.n	8002c8a <I2C_MasterRequestWrite+0x2a>
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c88:	d108      	bne.n	8002c9c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	e00b      	b.n	8002cb4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca0:	2b12      	cmp	r3, #18
 8002ca2:	d107      	bne.n	8002cb4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cb2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f000 f937 	bl	8002f34 <I2C_WaitOnFlagUntilTimeout>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00d      	beq.n	8002ce8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cda:	d103      	bne.n	8002ce4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ce2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e035      	b.n	8002d54 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002cf0:	d108      	bne.n	8002d04 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cf2:	897b      	ldrh	r3, [r7, #10]
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002d00:	611a      	str	r2, [r3, #16]
 8002d02:	e01b      	b.n	8002d3c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d04:	897b      	ldrh	r3, [r7, #10]
 8002d06:	11db      	asrs	r3, r3, #7
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	f003 0306 	and.w	r3, r3, #6
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	f063 030f 	orn	r3, r3, #15
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	490e      	ldr	r1, [pc, #56]	@ (8002d5c <I2C_MasterRequestWrite+0xfc>)
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f000 f980 	bl	8003028 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e010      	b.n	8002d54 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d32:	897b      	ldrh	r3, [r7, #10]
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	4907      	ldr	r1, [pc, #28]	@ (8002d60 <I2C_MasterRequestWrite+0x100>)
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f000 f970 	bl	8003028 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e000      	b.n	8002d54 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3718      	adds	r7, #24
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	00010008 	.word	0x00010008
 8002d60:	00010002 	.word	0x00010002

08002d64 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b088      	sub	sp, #32
 8002d68:	af02      	add	r7, sp, #8
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	4608      	mov	r0, r1
 8002d6e:	4611      	mov	r1, r2
 8002d70:	461a      	mov	r2, r3
 8002d72:	4603      	mov	r3, r0
 8002d74:	817b      	strh	r3, [r7, #10]
 8002d76:	460b      	mov	r3, r1
 8002d78:	813b      	strh	r3, [r7, #8]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d8c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da0:	9300      	str	r3, [sp, #0]
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	f000 f8c2 	bl	8002f34 <I2C_WaitOnFlagUntilTimeout>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00d      	beq.n	8002dd2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002dc4:	d103      	bne.n	8002dce <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dcc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e0aa      	b.n	8002f28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002dd2:	897b      	ldrh	r3, [r7, #10]
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002de0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de4:	6a3a      	ldr	r2, [r7, #32]
 8002de6:	4952      	ldr	r1, [pc, #328]	@ (8002f30 <I2C_RequestMemoryRead+0x1cc>)
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f000 f91d 	bl	8003028 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e097      	b.n	8002f28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002df8:	2300      	movs	r3, #0
 8002dfa:	617b      	str	r3, [r7, #20]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	617b      	str	r3, [r7, #20]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	617b      	str	r3, [r7, #20]
 8002e0c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e10:	6a39      	ldr	r1, [r7, #32]
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 f9a8 	bl	8003168 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00d      	beq.n	8002e3a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e22:	2b04      	cmp	r3, #4
 8002e24:	d107      	bne.n	8002e36 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e34:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e076      	b.n	8002f28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e3a:	88fb      	ldrh	r3, [r7, #6]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d105      	bne.n	8002e4c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e40:	893b      	ldrh	r3, [r7, #8]
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	611a      	str	r2, [r3, #16]
 8002e4a:	e021      	b.n	8002e90 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e4c:	893b      	ldrh	r3, [r7, #8]
 8002e4e:	0a1b      	lsrs	r3, r3, #8
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	b2da      	uxtb	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e5c:	6a39      	ldr	r1, [r7, #32]
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f000 f982 	bl	8003168 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00d      	beq.n	8002e86 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6e:	2b04      	cmp	r3, #4
 8002e70:	d107      	bne.n	8002e82 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e80:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e050      	b.n	8002f28 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e86:	893b      	ldrh	r3, [r7, #8]
 8002e88:	b2da      	uxtb	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e92:	6a39      	ldr	r1, [r7, #32]
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f000 f967 	bl	8003168 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00d      	beq.n	8002ebc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea4:	2b04      	cmp	r3, #4
 8002ea6:	d107      	bne.n	8002eb8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eb6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e035      	b.n	8002f28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002eca:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	6a3b      	ldr	r3, [r7, #32]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f000 f82b 	bl	8002f34 <I2C_WaitOnFlagUntilTimeout>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00d      	beq.n	8002f00 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ef2:	d103      	bne.n	8002efc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002efa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e013      	b.n	8002f28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002f00:	897b      	ldrh	r3, [r7, #10]
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	f043 0301 	orr.w	r3, r3, #1
 8002f08:	b2da      	uxtb	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f12:	6a3a      	ldr	r2, [r7, #32]
 8002f14:	4906      	ldr	r1, [pc, #24]	@ (8002f30 <I2C_RequestMemoryRead+0x1cc>)
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f000 f886 	bl	8003028 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e000      	b.n	8002f28 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3718      	adds	r7, #24
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	00010002 	.word	0x00010002

08002f34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	603b      	str	r3, [r7, #0]
 8002f40:	4613      	mov	r3, r2
 8002f42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f44:	e048      	b.n	8002fd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4c:	d044      	beq.n	8002fd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f4e:	f7fe fc09 	bl	8001764 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d302      	bcc.n	8002f64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d139      	bne.n	8002fd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	0c1b      	lsrs	r3, r3, #16
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d10d      	bne.n	8002f8a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	43da      	mvns	r2, r3
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	bf0c      	ite	eq
 8002f80:	2301      	moveq	r3, #1
 8002f82:	2300      	movne	r3, #0
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	461a      	mov	r2, r3
 8002f88:	e00c      	b.n	8002fa4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	43da      	mvns	r2, r3
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	4013      	ands	r3, r2
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	bf0c      	ite	eq
 8002f9c:	2301      	moveq	r3, #1
 8002f9e:	2300      	movne	r3, #0
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	79fb      	ldrb	r3, [r7, #7]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d116      	bne.n	8002fd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc4:	f043 0220 	orr.w	r2, r3, #32
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e023      	b.n	8003020 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	0c1b      	lsrs	r3, r3, #16
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d10d      	bne.n	8002ffe <I2C_WaitOnFlagUntilTimeout+0xca>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	43da      	mvns	r2, r3
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	4013      	ands	r3, r2
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	bf0c      	ite	eq
 8002ff4:	2301      	moveq	r3, #1
 8002ff6:	2300      	movne	r3, #0
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	e00c      	b.n	8003018 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	43da      	mvns	r2, r3
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	4013      	ands	r3, r2
 800300a:	b29b      	uxth	r3, r3
 800300c:	2b00      	cmp	r3, #0
 800300e:	bf0c      	ite	eq
 8003010:	2301      	moveq	r3, #1
 8003012:	2300      	movne	r3, #0
 8003014:	b2db      	uxtb	r3, r3
 8003016:	461a      	mov	r2, r3
 8003018:	79fb      	ldrb	r3, [r7, #7]
 800301a:	429a      	cmp	r2, r3
 800301c:	d093      	beq.n	8002f46 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
 8003034:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003036:	e071      	b.n	800311c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003042:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003046:	d123      	bne.n	8003090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003056:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003060:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2220      	movs	r2, #32
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307c:	f043 0204 	orr.w	r2, r3, #4
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e067      	b.n	8003160 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003096:	d041      	beq.n	800311c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003098:	f7fe fb64 	bl	8001764 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d302      	bcc.n	80030ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d136      	bne.n	800311c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	0c1b      	lsrs	r3, r3, #16
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d10c      	bne.n	80030d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	43da      	mvns	r2, r3
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	4013      	ands	r3, r2
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	bf14      	ite	ne
 80030ca:	2301      	movne	r3, #1
 80030cc:	2300      	moveq	r3, #0
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	e00b      	b.n	80030ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	43da      	mvns	r2, r3
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	4013      	ands	r3, r2
 80030de:	b29b      	uxth	r3, r3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	bf14      	ite	ne
 80030e4:	2301      	movne	r3, #1
 80030e6:	2300      	moveq	r3, #0
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d016      	beq.n	800311c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2220      	movs	r2, #32
 80030f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003108:	f043 0220 	orr.w	r2, r3, #32
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e021      	b.n	8003160 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	0c1b      	lsrs	r3, r3, #16
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b01      	cmp	r3, #1
 8003124:	d10c      	bne.n	8003140 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	43da      	mvns	r2, r3
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	4013      	ands	r3, r2
 8003132:	b29b      	uxth	r3, r3
 8003134:	2b00      	cmp	r3, #0
 8003136:	bf14      	ite	ne
 8003138:	2301      	movne	r3, #1
 800313a:	2300      	moveq	r3, #0
 800313c:	b2db      	uxtb	r3, r3
 800313e:	e00b      	b.n	8003158 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	43da      	mvns	r2, r3
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	4013      	ands	r3, r2
 800314c:	b29b      	uxth	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	bf14      	ite	ne
 8003152:	2301      	movne	r3, #1
 8003154:	2300      	moveq	r3, #0
 8003156:	b2db      	uxtb	r3, r3
 8003158:	2b00      	cmp	r3, #0
 800315a:	f47f af6d 	bne.w	8003038 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003174:	e034      	b.n	80031e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f000 f8e3 	bl	8003342 <I2C_IsAcknowledgeFailed>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e034      	b.n	80031f0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800318c:	d028      	beq.n	80031e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800318e:	f7fe fae9 	bl	8001764 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	68ba      	ldr	r2, [r7, #8]
 800319a:	429a      	cmp	r2, r3
 800319c:	d302      	bcc.n	80031a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d11d      	bne.n	80031e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031ae:	2b80      	cmp	r3, #128	@ 0x80
 80031b0:	d016      	beq.n	80031e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2220      	movs	r2, #32
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031cc:	f043 0220 	orr.w	r2, r3, #32
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e007      	b.n	80031f0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031ea:	2b80      	cmp	r3, #128	@ 0x80
 80031ec:	d1c3      	bne.n	8003176 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3710      	adds	r7, #16
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003204:	e034      	b.n	8003270 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f000 f89b 	bl	8003342 <I2C_IsAcknowledgeFailed>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e034      	b.n	8003280 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800321c:	d028      	beq.n	8003270 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800321e:	f7fe faa1 	bl	8001764 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	429a      	cmp	r2, r3
 800322c:	d302      	bcc.n	8003234 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d11d      	bne.n	8003270 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	f003 0304 	and.w	r3, r3, #4
 800323e:	2b04      	cmp	r3, #4
 8003240:	d016      	beq.n	8003270 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2220      	movs	r2, #32
 800324c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325c:	f043 0220 	orr.w	r2, r3, #32
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e007      	b.n	8003280 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	f003 0304 	and.w	r3, r3, #4
 800327a:	2b04      	cmp	r3, #4
 800327c:	d1c3      	bne.n	8003206 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	3710      	adds	r7, #16
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003294:	e049      	b.n	800332a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	f003 0310 	and.w	r3, r3, #16
 80032a0:	2b10      	cmp	r3, #16
 80032a2:	d119      	bne.n	80032d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f06f 0210 	mvn.w	r2, #16
 80032ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2220      	movs	r2, #32
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e030      	b.n	800333a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032d8:	f7fe fa44 	bl	8001764 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d302      	bcc.n	80032ee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d11d      	bne.n	800332a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032f8:	2b40      	cmp	r3, #64	@ 0x40
 80032fa:	d016      	beq.n	800332a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2220      	movs	r2, #32
 8003306:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003316:	f043 0220 	orr.w	r2, r3, #32
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e007      	b.n	800333a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	695b      	ldr	r3, [r3, #20]
 8003330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003334:	2b40      	cmp	r3, #64	@ 0x40
 8003336:	d1ae      	bne.n	8003296 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003342:	b480      	push	{r7}
 8003344:	b083      	sub	sp, #12
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	695b      	ldr	r3, [r3, #20]
 8003350:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003354:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003358:	d11b      	bne.n	8003392 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003362:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2220      	movs	r2, #32
 800336e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337e:	f043 0204 	orr.w	r2, r3, #4
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e000      	b.n	8003394 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	bc80      	pop	{r7}
 800339c:	4770      	bx	lr
	...

080033a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e272      	b.n	8003898 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f000 8087 	beq.w	80034ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033c0:	4b92      	ldr	r3, [pc, #584]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f003 030c 	and.w	r3, r3, #12
 80033c8:	2b04      	cmp	r3, #4
 80033ca:	d00c      	beq.n	80033e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80033cc:	4b8f      	ldr	r3, [pc, #572]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f003 030c 	and.w	r3, r3, #12
 80033d4:	2b08      	cmp	r3, #8
 80033d6:	d112      	bne.n	80033fe <HAL_RCC_OscConfig+0x5e>
 80033d8:	4b8c      	ldr	r3, [pc, #560]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033e4:	d10b      	bne.n	80033fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033e6:	4b89      	ldr	r3, [pc, #548]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d06c      	beq.n	80034cc <HAL_RCC_OscConfig+0x12c>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d168      	bne.n	80034cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e24c      	b.n	8003898 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003406:	d106      	bne.n	8003416 <HAL_RCC_OscConfig+0x76>
 8003408:	4b80      	ldr	r3, [pc, #512]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a7f      	ldr	r2, [pc, #508]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 800340e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003412:	6013      	str	r3, [r2, #0]
 8003414:	e02e      	b.n	8003474 <HAL_RCC_OscConfig+0xd4>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10c      	bne.n	8003438 <HAL_RCC_OscConfig+0x98>
 800341e:	4b7b      	ldr	r3, [pc, #492]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a7a      	ldr	r2, [pc, #488]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 8003424:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003428:	6013      	str	r3, [r2, #0]
 800342a:	4b78      	ldr	r3, [pc, #480]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a77      	ldr	r2, [pc, #476]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 8003430:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003434:	6013      	str	r3, [r2, #0]
 8003436:	e01d      	b.n	8003474 <HAL_RCC_OscConfig+0xd4>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003440:	d10c      	bne.n	800345c <HAL_RCC_OscConfig+0xbc>
 8003442:	4b72      	ldr	r3, [pc, #456]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a71      	ldr	r2, [pc, #452]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 8003448:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800344c:	6013      	str	r3, [r2, #0]
 800344e:	4b6f      	ldr	r3, [pc, #444]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a6e      	ldr	r2, [pc, #440]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 8003454:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003458:	6013      	str	r3, [r2, #0]
 800345a:	e00b      	b.n	8003474 <HAL_RCC_OscConfig+0xd4>
 800345c:	4b6b      	ldr	r3, [pc, #428]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a6a      	ldr	r2, [pc, #424]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 8003462:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003466:	6013      	str	r3, [r2, #0]
 8003468:	4b68      	ldr	r3, [pc, #416]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a67      	ldr	r2, [pc, #412]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 800346e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003472:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d013      	beq.n	80034a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800347c:	f7fe f972 	bl	8001764 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003484:	f7fe f96e 	bl	8001764 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b64      	cmp	r3, #100	@ 0x64
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e200      	b.n	8003898 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003496:	4b5d      	ldr	r3, [pc, #372]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d0f0      	beq.n	8003484 <HAL_RCC_OscConfig+0xe4>
 80034a2:	e014      	b.n	80034ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a4:	f7fe f95e 	bl	8001764 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034ac:	f7fe f95a 	bl	8001764 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b64      	cmp	r3, #100	@ 0x64
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e1ec      	b.n	8003898 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034be:	4b53      	ldr	r3, [pc, #332]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1f0      	bne.n	80034ac <HAL_RCC_OscConfig+0x10c>
 80034ca:	e000      	b.n	80034ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d063      	beq.n	80035a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034da:	4b4c      	ldr	r3, [pc, #304]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f003 030c 	and.w	r3, r3, #12
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00b      	beq.n	80034fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80034e6:	4b49      	ldr	r3, [pc, #292]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f003 030c 	and.w	r3, r3, #12
 80034ee:	2b08      	cmp	r3, #8
 80034f0:	d11c      	bne.n	800352c <HAL_RCC_OscConfig+0x18c>
 80034f2:	4b46      	ldr	r3, [pc, #280]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d116      	bne.n	800352c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034fe:	4b43      	ldr	r3, [pc, #268]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d005      	beq.n	8003516 <HAL_RCC_OscConfig+0x176>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d001      	beq.n	8003516 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e1c0      	b.n	8003898 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003516:	4b3d      	ldr	r3, [pc, #244]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	4939      	ldr	r1, [pc, #228]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 8003526:	4313      	orrs	r3, r2
 8003528:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800352a:	e03a      	b.n	80035a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d020      	beq.n	8003576 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003534:	4b36      	ldr	r3, [pc, #216]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 8003536:	2201      	movs	r2, #1
 8003538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800353a:	f7fe f913 	bl	8001764 <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003540:	e008      	b.n	8003554 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003542:	f7fe f90f 	bl	8001764 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e1a1      	b.n	8003898 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003554:	4b2d      	ldr	r3, [pc, #180]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0f0      	beq.n	8003542 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003560:	4b2a      	ldr	r3, [pc, #168]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	695b      	ldr	r3, [r3, #20]
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	4927      	ldr	r1, [pc, #156]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 8003570:	4313      	orrs	r3, r2
 8003572:	600b      	str	r3, [r1, #0]
 8003574:	e015      	b.n	80035a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003576:	4b26      	ldr	r3, [pc, #152]	@ (8003610 <HAL_RCC_OscConfig+0x270>)
 8003578:	2200      	movs	r2, #0
 800357a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357c:	f7fe f8f2 	bl	8001764 <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003584:	f7fe f8ee 	bl	8001764 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e180      	b.n	8003898 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003596:	4b1d      	ldr	r3, [pc, #116]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1f0      	bne.n	8003584 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0308 	and.w	r3, r3, #8
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d03a      	beq.n	8003624 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d019      	beq.n	80035ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035b6:	4b17      	ldr	r3, [pc, #92]	@ (8003614 <HAL_RCC_OscConfig+0x274>)
 80035b8:	2201      	movs	r2, #1
 80035ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035bc:	f7fe f8d2 	bl	8001764 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035c4:	f7fe f8ce 	bl	8001764 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e160      	b.n	8003898 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035d6:	4b0d      	ldr	r3, [pc, #52]	@ (800360c <HAL_RCC_OscConfig+0x26c>)
 80035d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d0f0      	beq.n	80035c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80035e2:	2001      	movs	r0, #1
 80035e4:	f000 face 	bl	8003b84 <RCC_Delay>
 80035e8:	e01c      	b.n	8003624 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003614 <HAL_RCC_OscConfig+0x274>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035f0:	f7fe f8b8 	bl	8001764 <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035f6:	e00f      	b.n	8003618 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035f8:	f7fe f8b4 	bl	8001764 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d908      	bls.n	8003618 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e146      	b.n	8003898 <HAL_RCC_OscConfig+0x4f8>
 800360a:	bf00      	nop
 800360c:	40021000 	.word	0x40021000
 8003610:	42420000 	.word	0x42420000
 8003614:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003618:	4b92      	ldr	r3, [pc, #584]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 800361a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1e9      	bne.n	80035f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0304 	and.w	r3, r3, #4
 800362c:	2b00      	cmp	r3, #0
 800362e:	f000 80a6 	beq.w	800377e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003632:	2300      	movs	r3, #0
 8003634:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003636:	4b8b      	ldr	r3, [pc, #556]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10d      	bne.n	800365e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003642:	4b88      	ldr	r3, [pc, #544]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 8003644:	69db      	ldr	r3, [r3, #28]
 8003646:	4a87      	ldr	r2, [pc, #540]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 8003648:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800364c:	61d3      	str	r3, [r2, #28]
 800364e:	4b85      	ldr	r3, [pc, #532]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003656:	60bb      	str	r3, [r7, #8]
 8003658:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800365a:	2301      	movs	r3, #1
 800365c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800365e:	4b82      	ldr	r3, [pc, #520]	@ (8003868 <HAL_RCC_OscConfig+0x4c8>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003666:	2b00      	cmp	r3, #0
 8003668:	d118      	bne.n	800369c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800366a:	4b7f      	ldr	r3, [pc, #508]	@ (8003868 <HAL_RCC_OscConfig+0x4c8>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a7e      	ldr	r2, [pc, #504]	@ (8003868 <HAL_RCC_OscConfig+0x4c8>)
 8003670:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003674:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003676:	f7fe f875 	bl	8001764 <HAL_GetTick>
 800367a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800367c:	e008      	b.n	8003690 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800367e:	f7fe f871 	bl	8001764 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	2b64      	cmp	r3, #100	@ 0x64
 800368a:	d901      	bls.n	8003690 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e103      	b.n	8003898 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003690:	4b75      	ldr	r3, [pc, #468]	@ (8003868 <HAL_RCC_OscConfig+0x4c8>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003698:	2b00      	cmp	r3, #0
 800369a:	d0f0      	beq.n	800367e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d106      	bne.n	80036b2 <HAL_RCC_OscConfig+0x312>
 80036a4:	4b6f      	ldr	r3, [pc, #444]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	4a6e      	ldr	r2, [pc, #440]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 80036aa:	f043 0301 	orr.w	r3, r3, #1
 80036ae:	6213      	str	r3, [r2, #32]
 80036b0:	e02d      	b.n	800370e <HAL_RCC_OscConfig+0x36e>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10c      	bne.n	80036d4 <HAL_RCC_OscConfig+0x334>
 80036ba:	4b6a      	ldr	r3, [pc, #424]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	4a69      	ldr	r2, [pc, #420]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 80036c0:	f023 0301 	bic.w	r3, r3, #1
 80036c4:	6213      	str	r3, [r2, #32]
 80036c6:	4b67      	ldr	r3, [pc, #412]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	4a66      	ldr	r2, [pc, #408]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 80036cc:	f023 0304 	bic.w	r3, r3, #4
 80036d0:	6213      	str	r3, [r2, #32]
 80036d2:	e01c      	b.n	800370e <HAL_RCC_OscConfig+0x36e>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	2b05      	cmp	r3, #5
 80036da:	d10c      	bne.n	80036f6 <HAL_RCC_OscConfig+0x356>
 80036dc:	4b61      	ldr	r3, [pc, #388]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	4a60      	ldr	r2, [pc, #384]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 80036e2:	f043 0304 	orr.w	r3, r3, #4
 80036e6:	6213      	str	r3, [r2, #32]
 80036e8:	4b5e      	ldr	r3, [pc, #376]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	4a5d      	ldr	r2, [pc, #372]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 80036ee:	f043 0301 	orr.w	r3, r3, #1
 80036f2:	6213      	str	r3, [r2, #32]
 80036f4:	e00b      	b.n	800370e <HAL_RCC_OscConfig+0x36e>
 80036f6:	4b5b      	ldr	r3, [pc, #364]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	4a5a      	ldr	r2, [pc, #360]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 80036fc:	f023 0301 	bic.w	r3, r3, #1
 8003700:	6213      	str	r3, [r2, #32]
 8003702:	4b58      	ldr	r3, [pc, #352]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	4a57      	ldr	r2, [pc, #348]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 8003708:	f023 0304 	bic.w	r3, r3, #4
 800370c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d015      	beq.n	8003742 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003716:	f7fe f825 	bl	8001764 <HAL_GetTick>
 800371a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800371c:	e00a      	b.n	8003734 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800371e:	f7fe f821 	bl	8001764 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	f241 3288 	movw	r2, #5000	@ 0x1388
 800372c:	4293      	cmp	r3, r2
 800372e:	d901      	bls.n	8003734 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e0b1      	b.n	8003898 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003734:	4b4b      	ldr	r3, [pc, #300]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0ee      	beq.n	800371e <HAL_RCC_OscConfig+0x37e>
 8003740:	e014      	b.n	800376c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003742:	f7fe f80f 	bl	8001764 <HAL_GetTick>
 8003746:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003748:	e00a      	b.n	8003760 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800374a:	f7fe f80b 	bl	8001764 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003758:	4293      	cmp	r3, r2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e09b      	b.n	8003898 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003760:	4b40      	ldr	r3, [pc, #256]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1ee      	bne.n	800374a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800376c:	7dfb      	ldrb	r3, [r7, #23]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d105      	bne.n	800377e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003772:	4b3c      	ldr	r3, [pc, #240]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	4a3b      	ldr	r2, [pc, #236]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 8003778:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800377c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	2b00      	cmp	r3, #0
 8003784:	f000 8087 	beq.w	8003896 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003788:	4b36      	ldr	r3, [pc, #216]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f003 030c 	and.w	r3, r3, #12
 8003790:	2b08      	cmp	r3, #8
 8003792:	d061      	beq.n	8003858 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	69db      	ldr	r3, [r3, #28]
 8003798:	2b02      	cmp	r3, #2
 800379a:	d146      	bne.n	800382a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800379c:	4b33      	ldr	r3, [pc, #204]	@ (800386c <HAL_RCC_OscConfig+0x4cc>)
 800379e:	2200      	movs	r2, #0
 80037a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a2:	f7fd ffdf 	bl	8001764 <HAL_GetTick>
 80037a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037a8:	e008      	b.n	80037bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037aa:	f7fd ffdb 	bl	8001764 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e06d      	b.n	8003898 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037bc:	4b29      	ldr	r3, [pc, #164]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1f0      	bne.n	80037aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037d0:	d108      	bne.n	80037e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80037d2:	4b24      	ldr	r3, [pc, #144]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	4921      	ldr	r1, [pc, #132]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037e4:	4b1f      	ldr	r3, [pc, #124]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a19      	ldr	r1, [r3, #32]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f4:	430b      	orrs	r3, r1
 80037f6:	491b      	ldr	r1, [pc, #108]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037fc:	4b1b      	ldr	r3, [pc, #108]	@ (800386c <HAL_RCC_OscConfig+0x4cc>)
 80037fe:	2201      	movs	r2, #1
 8003800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003802:	f7fd ffaf 	bl	8001764 <HAL_GetTick>
 8003806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003808:	e008      	b.n	800381c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800380a:	f7fd ffab 	bl	8001764 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d901      	bls.n	800381c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e03d      	b.n	8003898 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800381c:	4b11      	ldr	r3, [pc, #68]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d0f0      	beq.n	800380a <HAL_RCC_OscConfig+0x46a>
 8003828:	e035      	b.n	8003896 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800382a:	4b10      	ldr	r3, [pc, #64]	@ (800386c <HAL_RCC_OscConfig+0x4cc>)
 800382c:	2200      	movs	r2, #0
 800382e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003830:	f7fd ff98 	bl	8001764 <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003838:	f7fd ff94 	bl	8001764 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e026      	b.n	8003898 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800384a:	4b06      	ldr	r3, [pc, #24]	@ (8003864 <HAL_RCC_OscConfig+0x4c4>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1f0      	bne.n	8003838 <HAL_RCC_OscConfig+0x498>
 8003856:	e01e      	b.n	8003896 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	69db      	ldr	r3, [r3, #28]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d107      	bne.n	8003870 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e019      	b.n	8003898 <HAL_RCC_OscConfig+0x4f8>
 8003864:	40021000 	.word	0x40021000
 8003868:	40007000 	.word	0x40007000
 800386c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003870:	4b0b      	ldr	r3, [pc, #44]	@ (80038a0 <HAL_RCC_OscConfig+0x500>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	429a      	cmp	r2, r3
 8003882:	d106      	bne.n	8003892 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800388e:	429a      	cmp	r2, r3
 8003890:	d001      	beq.n	8003896 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e000      	b.n	8003898 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40021000 	.word	0x40021000

080038a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d101      	bne.n	80038b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e0d0      	b.n	8003a5a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038b8:	4b6a      	ldr	r3, [pc, #424]	@ (8003a64 <HAL_RCC_ClockConfig+0x1c0>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d910      	bls.n	80038e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038c6:	4b67      	ldr	r3, [pc, #412]	@ (8003a64 <HAL_RCC_ClockConfig+0x1c0>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f023 0207 	bic.w	r2, r3, #7
 80038ce:	4965      	ldr	r1, [pc, #404]	@ (8003a64 <HAL_RCC_ClockConfig+0x1c0>)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038d6:	4b63      	ldr	r3, [pc, #396]	@ (8003a64 <HAL_RCC_ClockConfig+0x1c0>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0307 	and.w	r3, r3, #7
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d001      	beq.n	80038e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e0b8      	b.n	8003a5a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d020      	beq.n	8003936 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0304 	and.w	r3, r3, #4
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d005      	beq.n	800390c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003900:	4b59      	ldr	r3, [pc, #356]	@ (8003a68 <HAL_RCC_ClockConfig+0x1c4>)
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	4a58      	ldr	r2, [pc, #352]	@ (8003a68 <HAL_RCC_ClockConfig+0x1c4>)
 8003906:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800390a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0308 	and.w	r3, r3, #8
 8003914:	2b00      	cmp	r3, #0
 8003916:	d005      	beq.n	8003924 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003918:	4b53      	ldr	r3, [pc, #332]	@ (8003a68 <HAL_RCC_ClockConfig+0x1c4>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	4a52      	ldr	r2, [pc, #328]	@ (8003a68 <HAL_RCC_ClockConfig+0x1c4>)
 800391e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003922:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003924:	4b50      	ldr	r3, [pc, #320]	@ (8003a68 <HAL_RCC_ClockConfig+0x1c4>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	494d      	ldr	r1, [pc, #308]	@ (8003a68 <HAL_RCC_ClockConfig+0x1c4>)
 8003932:	4313      	orrs	r3, r2
 8003934:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d040      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d107      	bne.n	800395a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800394a:	4b47      	ldr	r3, [pc, #284]	@ (8003a68 <HAL_RCC_ClockConfig+0x1c4>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d115      	bne.n	8003982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e07f      	b.n	8003a5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	2b02      	cmp	r3, #2
 8003960:	d107      	bne.n	8003972 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003962:	4b41      	ldr	r3, [pc, #260]	@ (8003a68 <HAL_RCC_ClockConfig+0x1c4>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d109      	bne.n	8003982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e073      	b.n	8003a5a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003972:	4b3d      	ldr	r3, [pc, #244]	@ (8003a68 <HAL_RCC_ClockConfig+0x1c4>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e06b      	b.n	8003a5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003982:	4b39      	ldr	r3, [pc, #228]	@ (8003a68 <HAL_RCC_ClockConfig+0x1c4>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f023 0203 	bic.w	r2, r3, #3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	4936      	ldr	r1, [pc, #216]	@ (8003a68 <HAL_RCC_ClockConfig+0x1c4>)
 8003990:	4313      	orrs	r3, r2
 8003992:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003994:	f7fd fee6 	bl	8001764 <HAL_GetTick>
 8003998:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800399a:	e00a      	b.n	80039b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800399c:	f7fd fee2 	bl	8001764 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e053      	b.n	8003a5a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039b2:	4b2d      	ldr	r3, [pc, #180]	@ (8003a68 <HAL_RCC_ClockConfig+0x1c4>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f003 020c 	and.w	r2, r3, #12
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d1eb      	bne.n	800399c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039c4:	4b27      	ldr	r3, [pc, #156]	@ (8003a64 <HAL_RCC_ClockConfig+0x1c0>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d210      	bcs.n	80039f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d2:	4b24      	ldr	r3, [pc, #144]	@ (8003a64 <HAL_RCC_ClockConfig+0x1c0>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f023 0207 	bic.w	r2, r3, #7
 80039da:	4922      	ldr	r1, [pc, #136]	@ (8003a64 <HAL_RCC_ClockConfig+0x1c0>)
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	4313      	orrs	r3, r2
 80039e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e2:	4b20      	ldr	r3, [pc, #128]	@ (8003a64 <HAL_RCC_ClockConfig+0x1c0>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0307 	and.w	r3, r3, #7
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d001      	beq.n	80039f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e032      	b.n	8003a5a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0304 	and.w	r3, r3, #4
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d008      	beq.n	8003a12 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a00:	4b19      	ldr	r3, [pc, #100]	@ (8003a68 <HAL_RCC_ClockConfig+0x1c4>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	4916      	ldr	r1, [pc, #88]	@ (8003a68 <HAL_RCC_ClockConfig+0x1c4>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0308 	and.w	r3, r3, #8
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d009      	beq.n	8003a32 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a1e:	4b12      	ldr	r3, [pc, #72]	@ (8003a68 <HAL_RCC_ClockConfig+0x1c4>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	490e      	ldr	r1, [pc, #56]	@ (8003a68 <HAL_RCC_ClockConfig+0x1c4>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a32:	f000 f821 	bl	8003a78 <HAL_RCC_GetSysClockFreq>
 8003a36:	4602      	mov	r2, r0
 8003a38:	4b0b      	ldr	r3, [pc, #44]	@ (8003a68 <HAL_RCC_ClockConfig+0x1c4>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	091b      	lsrs	r3, r3, #4
 8003a3e:	f003 030f 	and.w	r3, r3, #15
 8003a42:	490a      	ldr	r1, [pc, #40]	@ (8003a6c <HAL_RCC_ClockConfig+0x1c8>)
 8003a44:	5ccb      	ldrb	r3, [r1, r3]
 8003a46:	fa22 f303 	lsr.w	r3, r2, r3
 8003a4a:	4a09      	ldr	r2, [pc, #36]	@ (8003a70 <HAL_RCC_ClockConfig+0x1cc>)
 8003a4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a4e:	4b09      	ldr	r3, [pc, #36]	@ (8003a74 <HAL_RCC_ClockConfig+0x1d0>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7fd fe44 	bl	80016e0 <HAL_InitTick>

  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	40022000 	.word	0x40022000
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	080059ec 	.word	0x080059ec
 8003a70:	20000004 	.word	0x20000004
 8003a74:	20000008 	.word	0x20000008

08003a78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b087      	sub	sp, #28
 8003a7c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	60fb      	str	r3, [r7, #12]
 8003a82:	2300      	movs	r3, #0
 8003a84:	60bb      	str	r3, [r7, #8]
 8003a86:	2300      	movs	r3, #0
 8003a88:	617b      	str	r3, [r7, #20]
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a92:	4b1e      	ldr	r3, [pc, #120]	@ (8003b0c <HAL_RCC_GetSysClockFreq+0x94>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f003 030c 	and.w	r3, r3, #12
 8003a9e:	2b04      	cmp	r3, #4
 8003aa0:	d002      	beq.n	8003aa8 <HAL_RCC_GetSysClockFreq+0x30>
 8003aa2:	2b08      	cmp	r3, #8
 8003aa4:	d003      	beq.n	8003aae <HAL_RCC_GetSysClockFreq+0x36>
 8003aa6:	e027      	b.n	8003af8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003aa8:	4b19      	ldr	r3, [pc, #100]	@ (8003b10 <HAL_RCC_GetSysClockFreq+0x98>)
 8003aaa:	613b      	str	r3, [r7, #16]
      break;
 8003aac:	e027      	b.n	8003afe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	0c9b      	lsrs	r3, r3, #18
 8003ab2:	f003 030f 	and.w	r3, r3, #15
 8003ab6:	4a17      	ldr	r2, [pc, #92]	@ (8003b14 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003ab8:	5cd3      	ldrb	r3, [r2, r3]
 8003aba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d010      	beq.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ac6:	4b11      	ldr	r3, [pc, #68]	@ (8003b0c <HAL_RCC_GetSysClockFreq+0x94>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	0c5b      	lsrs	r3, r3, #17
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	4a11      	ldr	r2, [pc, #68]	@ (8003b18 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003ad2:	5cd3      	ldrb	r3, [r2, r3]
 8003ad4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a0d      	ldr	r2, [pc, #52]	@ (8003b10 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ada:	fb03 f202 	mul.w	r2, r3, r2
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae4:	617b      	str	r3, [r7, #20]
 8003ae6:	e004      	b.n	8003af2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a0c      	ldr	r2, [pc, #48]	@ (8003b1c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003aec:	fb02 f303 	mul.w	r3, r2, r3
 8003af0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	613b      	str	r3, [r7, #16]
      break;
 8003af6:	e002      	b.n	8003afe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003af8:	4b05      	ldr	r3, [pc, #20]	@ (8003b10 <HAL_RCC_GetSysClockFreq+0x98>)
 8003afa:	613b      	str	r3, [r7, #16]
      break;
 8003afc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003afe:	693b      	ldr	r3, [r7, #16]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	371c      	adds	r7, #28
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bc80      	pop	{r7}
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	007a1200 	.word	0x007a1200
 8003b14:	08005a04 	.word	0x08005a04
 8003b18:	08005a14 	.word	0x08005a14
 8003b1c:	003d0900 	.word	0x003d0900

08003b20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b24:	4b02      	ldr	r3, [pc, #8]	@ (8003b30 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b26:	681b      	ldr	r3, [r3, #0]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bc80      	pop	{r7}
 8003b2e:	4770      	bx	lr
 8003b30:	20000004 	.word	0x20000004

08003b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b38:	f7ff fff2 	bl	8003b20 <HAL_RCC_GetHCLKFreq>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	4b05      	ldr	r3, [pc, #20]	@ (8003b54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	0a1b      	lsrs	r3, r3, #8
 8003b44:	f003 0307 	and.w	r3, r3, #7
 8003b48:	4903      	ldr	r1, [pc, #12]	@ (8003b58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b4a:	5ccb      	ldrb	r3, [r1, r3]
 8003b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	40021000 	.word	0x40021000
 8003b58:	080059fc 	.word	0x080059fc

08003b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b60:	f7ff ffde 	bl	8003b20 <HAL_RCC_GetHCLKFreq>
 8003b64:	4602      	mov	r2, r0
 8003b66:	4b05      	ldr	r3, [pc, #20]	@ (8003b7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	0adb      	lsrs	r3, r3, #11
 8003b6c:	f003 0307 	and.w	r3, r3, #7
 8003b70:	4903      	ldr	r1, [pc, #12]	@ (8003b80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b72:	5ccb      	ldrb	r3, [r1, r3]
 8003b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	080059fc 	.word	0x080059fc

08003b84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8003bb8 <RCC_Delay+0x34>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a0a      	ldr	r2, [pc, #40]	@ (8003bbc <RCC_Delay+0x38>)
 8003b92:	fba2 2303 	umull	r2, r3, r2, r3
 8003b96:	0a5b      	lsrs	r3, r3, #9
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	fb02 f303 	mul.w	r3, r2, r3
 8003b9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ba0:	bf00      	nop
  }
  while (Delay --);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	1e5a      	subs	r2, r3, #1
 8003ba6:	60fa      	str	r2, [r7, #12]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1f9      	bne.n	8003ba0 <RCC_Delay+0x1c>
}
 8003bac:	bf00      	nop
 8003bae:	bf00      	nop
 8003bb0:	3714      	adds	r7, #20
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bc80      	pop	{r7}
 8003bb6:	4770      	bx	lr
 8003bb8:	20000004 	.word	0x20000004
 8003bbc:	10624dd3 	.word	0x10624dd3

08003bc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b086      	sub	sp, #24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	613b      	str	r3, [r7, #16]
 8003bcc:	2300      	movs	r3, #0
 8003bce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d07d      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003be0:	4b4f      	ldr	r3, [pc, #316]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003be2:	69db      	ldr	r3, [r3, #28]
 8003be4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d10d      	bne.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bec:	4b4c      	ldr	r3, [pc, #304]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bee:	69db      	ldr	r3, [r3, #28]
 8003bf0:	4a4b      	ldr	r2, [pc, #300]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bf2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bf6:	61d3      	str	r3, [r2, #28]
 8003bf8:	4b49      	ldr	r3, [pc, #292]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bfa:	69db      	ldr	r3, [r3, #28]
 8003bfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c00:	60bb      	str	r3, [r7, #8]
 8003c02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c04:	2301      	movs	r3, #1
 8003c06:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c08:	4b46      	ldr	r3, [pc, #280]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d118      	bne.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c14:	4b43      	ldr	r3, [pc, #268]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a42      	ldr	r2, [pc, #264]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c20:	f7fd fda0 	bl	8001764 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c26:	e008      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c28:	f7fd fd9c 	bl	8001764 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b64      	cmp	r3, #100	@ 0x64
 8003c34:	d901      	bls.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e06d      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c3a:	4b3a      	ldr	r3, [pc, #232]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d0f0      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c46:	4b36      	ldr	r3, [pc, #216]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c4e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d02e      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d027      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c64:	4b2e      	ldr	r3, [pc, #184]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c6c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c6e:	4b2e      	ldr	r3, [pc, #184]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c70:	2201      	movs	r2, #1
 8003c72:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c74:	4b2c      	ldr	r3, [pc, #176]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c7a:	4a29      	ldr	r2, [pc, #164]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d014      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c8a:	f7fd fd6b 	bl	8001764 <HAL_GetTick>
 8003c8e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c90:	e00a      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c92:	f7fd fd67 	bl	8001764 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e036      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d0ee      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cb4:	4b1a      	ldr	r3, [pc, #104]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cb6:	6a1b      	ldr	r3, [r3, #32]
 8003cb8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	4917      	ldr	r1, [pc, #92]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003cc6:	7dfb      	ldrb	r3, [r7, #23]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d105      	bne.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ccc:	4b14      	ldr	r3, [pc, #80]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cce:	69db      	ldr	r3, [r3, #28]
 8003cd0:	4a13      	ldr	r2, [pc, #76]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cd6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d008      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ce4:	4b0e      	ldr	r3, [pc, #56]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	490b      	ldr	r1, [pc, #44]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0310 	and.w	r3, r3, #16
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d008      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d02:	4b07      	ldr	r3, [pc, #28]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	4904      	ldr	r1, [pc, #16]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3718      	adds	r7, #24
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	40021000 	.word	0x40021000
 8003d24:	40007000 	.word	0x40007000
 8003d28:	42420440 	.word	0x42420440

08003d2c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b088      	sub	sp, #32
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003d34:	2300      	movs	r3, #0
 8003d36:	617b      	str	r3, [r7, #20]
 8003d38:	2300      	movs	r3, #0
 8003d3a:	61fb      	str	r3, [r7, #28]
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003d40:	2300      	movs	r3, #0
 8003d42:	60fb      	str	r3, [r7, #12]
 8003d44:	2300      	movs	r3, #0
 8003d46:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b10      	cmp	r3, #16
 8003d4c:	d00a      	beq.n	8003d64 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b10      	cmp	r3, #16
 8003d52:	f200 808a 	bhi.w	8003e6a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d045      	beq.n	8003de8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d075      	beq.n	8003e4e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003d62:	e082      	b.n	8003e6a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003d64:	4b46      	ldr	r3, [pc, #280]	@ (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003d6a:	4b45      	ldr	r3, [pc, #276]	@ (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d07b      	beq.n	8003e6e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	0c9b      	lsrs	r3, r3, #18
 8003d7a:	f003 030f 	and.w	r3, r3, #15
 8003d7e:	4a41      	ldr	r2, [pc, #260]	@ (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003d80:	5cd3      	ldrb	r3, [r2, r3]
 8003d82:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d015      	beq.n	8003dba <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d8e:	4b3c      	ldr	r3, [pc, #240]	@ (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	0c5b      	lsrs	r3, r3, #17
 8003d94:	f003 0301 	and.w	r3, r3, #1
 8003d98:	4a3b      	ldr	r2, [pc, #236]	@ (8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003d9a:	5cd3      	ldrb	r3, [r2, r3]
 8003d9c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00d      	beq.n	8003dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003da8:	4a38      	ldr	r2, [pc, #224]	@ (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	fbb2 f2f3 	udiv	r2, r2, r3
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	fb02 f303 	mul.w	r3, r2, r3
 8003db6:	61fb      	str	r3, [r7, #28]
 8003db8:	e004      	b.n	8003dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	4a34      	ldr	r2, [pc, #208]	@ (8003e90 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003dbe:	fb02 f303 	mul.w	r3, r2, r3
 8003dc2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003dc4:	4b2e      	ldr	r3, [pc, #184]	@ (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dcc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dd0:	d102      	bne.n	8003dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	61bb      	str	r3, [r7, #24]
      break;
 8003dd6:	e04a      	b.n	8003e6e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	4a2d      	ldr	r2, [pc, #180]	@ (8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003dde:	fba2 2303 	umull	r2, r3, r2, r3
 8003de2:	085b      	lsrs	r3, r3, #1
 8003de4:	61bb      	str	r3, [r7, #24]
      break;
 8003de6:	e042      	b.n	8003e6e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003de8:	4b25      	ldr	r3, [pc, #148]	@ (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003dea:	6a1b      	ldr	r3, [r3, #32]
 8003dec:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003df4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003df8:	d108      	bne.n	8003e0c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d003      	beq.n	8003e0c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003e04:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e08:	61bb      	str	r3, [r7, #24]
 8003e0a:	e01f      	b.n	8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e16:	d109      	bne.n	8003e2c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003e18:	4b19      	ldr	r3, [pc, #100]	@ (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d003      	beq.n	8003e2c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003e24:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003e28:	61bb      	str	r3, [r7, #24]
 8003e2a:	e00f      	b.n	8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e36:	d11c      	bne.n	8003e72 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003e38:	4b11      	ldr	r3, [pc, #68]	@ (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d016      	beq.n	8003e72 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003e44:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003e48:	61bb      	str	r3, [r7, #24]
      break;
 8003e4a:	e012      	b.n	8003e72 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003e4c:	e011      	b.n	8003e72 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003e4e:	f7ff fe85 	bl	8003b5c <HAL_RCC_GetPCLK2Freq>
 8003e52:	4602      	mov	r2, r0
 8003e54:	4b0a      	ldr	r3, [pc, #40]	@ (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	0b9b      	lsrs	r3, r3, #14
 8003e5a:	f003 0303 	and.w	r3, r3, #3
 8003e5e:	3301      	adds	r3, #1
 8003e60:	005b      	lsls	r3, r3, #1
 8003e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e66:	61bb      	str	r3, [r7, #24]
      break;
 8003e68:	e004      	b.n	8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003e6a:	bf00      	nop
 8003e6c:	e002      	b.n	8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003e6e:	bf00      	nop
 8003e70:	e000      	b.n	8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003e72:	bf00      	nop
    }
  }
  return (frequency);
 8003e74:	69bb      	ldr	r3, [r7, #24]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3720      	adds	r7, #32
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	40021000 	.word	0x40021000
 8003e84:	08005a18 	.word	0x08005a18
 8003e88:	08005a28 	.word	0x08005a28
 8003e8c:	007a1200 	.word	0x007a1200
 8003e90:	003d0900 	.word	0x003d0900
 8003e94:	aaaaaaab 	.word	0xaaaaaaab

08003e98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e076      	b.n	8003f98 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d108      	bne.n	8003ec4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003eba:	d009      	beq.n	8003ed0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	61da      	str	r2, [r3, #28]
 8003ec2:	e005      	b.n	8003ed0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d106      	bne.n	8003ef0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f7fd faae 	bl	800144c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f06:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003f18:	431a      	orrs	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f22:	431a      	orrs	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	431a      	orrs	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f40:	431a      	orrs	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	69db      	ldr	r3, [r3, #28]
 8003f46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a1b      	ldr	r3, [r3, #32]
 8003f50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f54:	ea42 0103 	orr.w	r1, r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f5c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	430a      	orrs	r2, r1
 8003f66:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	0c1a      	lsrs	r2, r3, #16
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f002 0204 	and.w	r2, r2, #4
 8003f76:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	69da      	ldr	r2, [r3, #28]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f86:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3708      	adds	r7, #8
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b088      	sub	sp, #32
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	603b      	str	r3, [r7, #0]
 8003fac:	4613      	mov	r3, r2
 8003fae:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fb0:	f7fd fbd8 	bl	8001764 <HAL_GetTick>
 8003fb4:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003fb6:	88fb      	ldrh	r3, [r7, #6]
 8003fb8:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d001      	beq.n	8003fca <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	e12a      	b.n	8004220 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d002      	beq.n	8003fd6 <HAL_SPI_Transmit+0x36>
 8003fd0:	88fb      	ldrh	r3, [r7, #6]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e122      	b.n	8004220 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d101      	bne.n	8003fe8 <HAL_SPI_Transmit+0x48>
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	e11b      	b.n	8004220 <HAL_SPI_Transmit+0x280>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2203      	movs	r2, #3
 8003ff4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	88fa      	ldrh	r2, [r7, #6]
 8004008:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	88fa      	ldrh	r2, [r7, #6]
 800400e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004036:	d10f      	bne.n	8004058 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004046:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004056:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004062:	2b40      	cmp	r3, #64	@ 0x40
 8004064:	d007      	beq.n	8004076 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004074:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800407e:	d152      	bne.n	8004126 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d002      	beq.n	800408e <HAL_SPI_Transmit+0xee>
 8004088:	8b7b      	ldrh	r3, [r7, #26]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d145      	bne.n	800411a <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004092:	881a      	ldrh	r2, [r3, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800409e:	1c9a      	adds	r2, r3, #2
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	3b01      	subs	r3, #1
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80040b2:	e032      	b.n	800411a <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d112      	bne.n	80040e8 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c6:	881a      	ldrh	r2, [r3, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d2:	1c9a      	adds	r2, r3, #2
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040dc:	b29b      	uxth	r3, r3
 80040de:	3b01      	subs	r3, #1
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80040e6:	e018      	b.n	800411a <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040e8:	f7fd fb3c 	bl	8001764 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d803      	bhi.n	8004100 <HAL_SPI_Transmit+0x160>
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040fe:	d102      	bne.n	8004106 <HAL_SPI_Transmit+0x166>
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d109      	bne.n	800411a <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e082      	b.n	8004220 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800411e:	b29b      	uxth	r3, r3
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1c7      	bne.n	80040b4 <HAL_SPI_Transmit+0x114>
 8004124:	e053      	b.n	80041ce <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d002      	beq.n	8004134 <HAL_SPI_Transmit+0x194>
 800412e:	8b7b      	ldrh	r3, [r7, #26]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d147      	bne.n	80041c4 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	330c      	adds	r3, #12
 800413e:	7812      	ldrb	r2, [r2, #0]
 8004140:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004146:	1c5a      	adds	r2, r3, #1
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004150:	b29b      	uxth	r3, r3
 8004152:	3b01      	subs	r3, #1
 8004154:	b29a      	uxth	r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800415a:	e033      	b.n	80041c4 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b02      	cmp	r3, #2
 8004168:	d113      	bne.n	8004192 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	330c      	adds	r3, #12
 8004174:	7812      	ldrb	r2, [r2, #0]
 8004176:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800417c:	1c5a      	adds	r2, r3, #1
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004186:	b29b      	uxth	r3, r3
 8004188:	3b01      	subs	r3, #1
 800418a:	b29a      	uxth	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004190:	e018      	b.n	80041c4 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004192:	f7fd fae7 	bl	8001764 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d803      	bhi.n	80041aa <HAL_SPI_Transmit+0x20a>
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a8:	d102      	bne.n	80041b0 <HAL_SPI_Transmit+0x210>
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d109      	bne.n	80041c4 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e02d      	b.n	8004220 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1c6      	bne.n	800415c <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041ce:	69fa      	ldr	r2, [r7, #28]
 80041d0:	6839      	ldr	r1, [r7, #0]
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f000 fbc4 	bl	8004960 <SPI_EndRxTxTransaction>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d002      	beq.n	80041e4 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2220      	movs	r2, #32
 80041e2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10a      	bne.n	8004202 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041ec:	2300      	movs	r3, #0
 80041ee:	617b      	str	r3, [r7, #20]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	617b      	str	r3, [r7, #20]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	617b      	str	r3, [r7, #20]
 8004200:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e000      	b.n	8004220 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800421e:	2300      	movs	r3, #0
  }
}
 8004220:	4618      	mov	r0, r3
 8004222:	3720      	adds	r7, #32
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b088      	sub	sp, #32
 800422c:	af02      	add	r7, sp, #8
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	603b      	str	r3, [r7, #0]
 8004234:	4613      	mov	r3, r2
 8004236:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800423e:	b2db      	uxtb	r3, r3
 8004240:	2b01      	cmp	r3, #1
 8004242:	d001      	beq.n	8004248 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004244:	2302      	movs	r3, #2
 8004246:	e104      	b.n	8004452 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004250:	d112      	bne.n	8004278 <HAL_SPI_Receive+0x50>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10e      	bne.n	8004278 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2204      	movs	r2, #4
 800425e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004262:	88fa      	ldrh	r2, [r7, #6]
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	9300      	str	r3, [sp, #0]
 8004268:	4613      	mov	r3, r2
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	68b9      	ldr	r1, [r7, #8]
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f000 f8f3 	bl	800445a <HAL_SPI_TransmitReceive>
 8004274:	4603      	mov	r3, r0
 8004276:	e0ec      	b.n	8004452 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004278:	f7fd fa74 	bl	8001764 <HAL_GetTick>
 800427c:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d002      	beq.n	800428a <HAL_SPI_Receive+0x62>
 8004284:	88fb      	ldrh	r3, [r7, #6]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e0e1      	b.n	8004452 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004294:	2b01      	cmp	r3, #1
 8004296:	d101      	bne.n	800429c <HAL_SPI_Receive+0x74>
 8004298:	2302      	movs	r3, #2
 800429a:	e0da      	b.n	8004452 <HAL_SPI_Receive+0x22a>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2204      	movs	r2, #4
 80042a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	68ba      	ldr	r2, [r7, #8]
 80042b6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	88fa      	ldrh	r2, [r7, #6]
 80042bc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	88fa      	ldrh	r2, [r7, #6]
 80042c2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042ea:	d10f      	bne.n	800430c <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042fa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800430a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004316:	2b40      	cmp	r3, #64	@ 0x40
 8004318:	d007      	beq.n	800432a <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004328:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d170      	bne.n	8004414 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004332:	e035      	b.n	80043a0 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	2b01      	cmp	r3, #1
 8004340:	d115      	bne.n	800436e <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f103 020c 	add.w	r2, r3, #12
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800434e:	7812      	ldrb	r2, [r2, #0]
 8004350:	b2d2      	uxtb	r2, r2
 8004352:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004358:	1c5a      	adds	r2, r3, #1
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004362:	b29b      	uxth	r3, r3
 8004364:	3b01      	subs	r3, #1
 8004366:	b29a      	uxth	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800436c:	e018      	b.n	80043a0 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800436e:	f7fd f9f9 	bl	8001764 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	683a      	ldr	r2, [r7, #0]
 800437a:	429a      	cmp	r2, r3
 800437c:	d803      	bhi.n	8004386 <HAL_SPI_Receive+0x15e>
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004384:	d102      	bne.n	800438c <HAL_SPI_Receive+0x164>
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d109      	bne.n	80043a0 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e058      	b.n	8004452 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1c4      	bne.n	8004334 <HAL_SPI_Receive+0x10c>
 80043aa:	e038      	b.n	800441e <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d113      	bne.n	80043e2 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68da      	ldr	r2, [r3, #12]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043c4:	b292      	uxth	r2, r2
 80043c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043cc:	1c9a      	adds	r2, r3, #2
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	3b01      	subs	r3, #1
 80043da:	b29a      	uxth	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80043e0:	e018      	b.n	8004414 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043e2:	f7fd f9bf 	bl	8001764 <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	683a      	ldr	r2, [r7, #0]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d803      	bhi.n	80043fa <HAL_SPI_Receive+0x1d2>
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f8:	d102      	bne.n	8004400 <HAL_SPI_Receive+0x1d8>
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d109      	bne.n	8004414 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e01e      	b.n	8004452 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004418:	b29b      	uxth	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1c6      	bne.n	80043ac <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	6839      	ldr	r1, [r7, #0]
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	f000 fa4a 	bl	80048bc <SPI_EndRxTransaction>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d002      	beq.n	8004434 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2220      	movs	r2, #32
 8004432:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004448:	2b00      	cmp	r3, #0
 800444a:	d001      	beq.n	8004450 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e000      	b.n	8004452 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8004450:	2300      	movs	r3, #0
  }
}
 8004452:	4618      	mov	r0, r3
 8004454:	3718      	adds	r7, #24
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}

0800445a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800445a:	b580      	push	{r7, lr}
 800445c:	b08a      	sub	sp, #40	@ 0x28
 800445e:	af00      	add	r7, sp, #0
 8004460:	60f8      	str	r0, [r7, #12]
 8004462:	60b9      	str	r1, [r7, #8]
 8004464:	607a      	str	r2, [r7, #4]
 8004466:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004468:	2301      	movs	r3, #1
 800446a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800446c:	f7fd f97a 	bl	8001764 <HAL_GetTick>
 8004470:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004478:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004480:	887b      	ldrh	r3, [r7, #2]
 8004482:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004484:	7ffb      	ldrb	r3, [r7, #31]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d00c      	beq.n	80044a4 <HAL_SPI_TransmitReceive+0x4a>
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004490:	d106      	bne.n	80044a0 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d102      	bne.n	80044a0 <HAL_SPI_TransmitReceive+0x46>
 800449a:	7ffb      	ldrb	r3, [r7, #31]
 800449c:	2b04      	cmp	r3, #4
 800449e:	d001      	beq.n	80044a4 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80044a0:	2302      	movs	r3, #2
 80044a2:	e17f      	b.n	80047a4 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d005      	beq.n	80044b6 <HAL_SPI_TransmitReceive+0x5c>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d002      	beq.n	80044b6 <HAL_SPI_TransmitReceive+0x5c>
 80044b0:	887b      	ldrh	r3, [r7, #2]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e174      	b.n	80047a4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d101      	bne.n	80044c8 <HAL_SPI_TransmitReceive+0x6e>
 80044c4:	2302      	movs	r3, #2
 80044c6:	e16d      	b.n	80047a4 <HAL_SPI_TransmitReceive+0x34a>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b04      	cmp	r3, #4
 80044da:	d003      	beq.n	80044e4 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2205      	movs	r2, #5
 80044e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	887a      	ldrh	r2, [r7, #2]
 80044f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	887a      	ldrh	r2, [r7, #2]
 80044fa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	887a      	ldrh	r2, [r7, #2]
 8004506:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	887a      	ldrh	r2, [r7, #2]
 800450c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004524:	2b40      	cmp	r3, #64	@ 0x40
 8004526:	d007      	beq.n	8004538 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004536:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004540:	d17e      	bne.n	8004640 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d002      	beq.n	8004550 <HAL_SPI_TransmitReceive+0xf6>
 800454a:	8afb      	ldrh	r3, [r7, #22]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d16c      	bne.n	800462a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004554:	881a      	ldrh	r2, [r3, #0]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004560:	1c9a      	adds	r2, r3, #2
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800456a:	b29b      	uxth	r3, r3
 800456c:	3b01      	subs	r3, #1
 800456e:	b29a      	uxth	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004574:	e059      	b.n	800462a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b02      	cmp	r3, #2
 8004582:	d11b      	bne.n	80045bc <HAL_SPI_TransmitReceive+0x162>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004588:	b29b      	uxth	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d016      	beq.n	80045bc <HAL_SPI_TransmitReceive+0x162>
 800458e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004590:	2b01      	cmp	r3, #1
 8004592:	d113      	bne.n	80045bc <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004598:	881a      	ldrh	r2, [r3, #0]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a4:	1c9a      	adds	r2, r3, #2
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	3b01      	subs	r3, #1
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80045b8:	2300      	movs	r3, #0
 80045ba:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d119      	bne.n	80045fe <HAL_SPI_TransmitReceive+0x1a4>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d014      	beq.n	80045fe <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68da      	ldr	r2, [r3, #12]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045de:	b292      	uxth	r2, r2
 80045e0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e6:	1c9a      	adds	r2, r3, #2
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	3b01      	subs	r3, #1
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80045fa:	2301      	movs	r3, #1
 80045fc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80045fe:	f7fd f8b1 	bl	8001764 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800460a:	429a      	cmp	r2, r3
 800460c:	d80d      	bhi.n	800462a <HAL_SPI_TransmitReceive+0x1d0>
 800460e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004614:	d009      	beq.n	800462a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2201      	movs	r2, #1
 800461a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e0bc      	b.n	80047a4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800462e:	b29b      	uxth	r3, r3
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1a0      	bne.n	8004576 <HAL_SPI_TransmitReceive+0x11c>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004638:	b29b      	uxth	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d19b      	bne.n	8004576 <HAL_SPI_TransmitReceive+0x11c>
 800463e:	e082      	b.n	8004746 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d002      	beq.n	800464e <HAL_SPI_TransmitReceive+0x1f4>
 8004648:	8afb      	ldrh	r3, [r7, #22]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d171      	bne.n	8004732 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	330c      	adds	r3, #12
 8004658:	7812      	ldrb	r2, [r2, #0]
 800465a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004660:	1c5a      	adds	r2, r3, #1
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800466a:	b29b      	uxth	r3, r3
 800466c:	3b01      	subs	r3, #1
 800466e:	b29a      	uxth	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004674:	e05d      	b.n	8004732 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b02      	cmp	r3, #2
 8004682:	d11c      	bne.n	80046be <HAL_SPI_TransmitReceive+0x264>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004688:	b29b      	uxth	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d017      	beq.n	80046be <HAL_SPI_TransmitReceive+0x264>
 800468e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004690:	2b01      	cmp	r3, #1
 8004692:	d114      	bne.n	80046be <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	330c      	adds	r3, #12
 800469e:	7812      	ldrb	r2, [r2, #0]
 80046a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a6:	1c5a      	adds	r2, r3, #1
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	3b01      	subs	r3, #1
 80046b4:	b29a      	uxth	r2, r3
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80046ba:	2300      	movs	r3, #0
 80046bc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f003 0301 	and.w	r3, r3, #1
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d119      	bne.n	8004700 <HAL_SPI_TransmitReceive+0x2a6>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d014      	beq.n	8004700 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68da      	ldr	r2, [r3, #12]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046e0:	b2d2      	uxtb	r2, r2
 80046e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046e8:	1c5a      	adds	r2, r3, #1
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	3b01      	subs	r3, #1
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046fc:	2301      	movs	r3, #1
 80046fe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004700:	f7fd f830 	bl	8001764 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	6a3b      	ldr	r3, [r7, #32]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800470c:	429a      	cmp	r2, r3
 800470e:	d803      	bhi.n	8004718 <HAL_SPI_TransmitReceive+0x2be>
 8004710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004716:	d102      	bne.n	800471e <HAL_SPI_TransmitReceive+0x2c4>
 8004718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800471a:	2b00      	cmp	r3, #0
 800471c:	d109      	bne.n	8004732 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e038      	b.n	80047a4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004736:	b29b      	uxth	r3, r3
 8004738:	2b00      	cmp	r3, #0
 800473a:	d19c      	bne.n	8004676 <HAL_SPI_TransmitReceive+0x21c>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004740:	b29b      	uxth	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d197      	bne.n	8004676 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004746:	6a3a      	ldr	r2, [r7, #32]
 8004748:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f000 f908 	bl	8004960 <SPI_EndRxTxTransaction>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d008      	beq.n	8004768 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2220      	movs	r2, #32
 800475a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e01d      	b.n	80047a4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d10a      	bne.n	8004786 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004770:	2300      	movs	r3, #0
 8004772:	613b      	str	r3, [r7, #16]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	613b      	str	r3, [r7, #16]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	613b      	str	r3, [r7, #16]
 8004784:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800479a:	2b00      	cmp	r3, #0
 800479c:	d001      	beq.n	80047a2 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e000      	b.n	80047a4 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80047a2:	2300      	movs	r3, #0
  }
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3728      	adds	r7, #40	@ 0x28
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b088      	sub	sp, #32
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	603b      	str	r3, [r7, #0]
 80047b8:	4613      	mov	r3, r2
 80047ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80047bc:	f7fc ffd2 	bl	8001764 <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047c4:	1a9b      	subs	r3, r3, r2
 80047c6:	683a      	ldr	r2, [r7, #0]
 80047c8:	4413      	add	r3, r2
 80047ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80047cc:	f7fc ffca 	bl	8001764 <HAL_GetTick>
 80047d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80047d2:	4b39      	ldr	r3, [pc, #228]	@ (80048b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	015b      	lsls	r3, r3, #5
 80047d8:	0d1b      	lsrs	r3, r3, #20
 80047da:	69fa      	ldr	r2, [r7, #28]
 80047dc:	fb02 f303 	mul.w	r3, r2, r3
 80047e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047e2:	e054      	b.n	800488e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ea:	d050      	beq.n	800488e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047ec:	f7fc ffba 	bl	8001764 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	69fa      	ldr	r2, [r7, #28]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d902      	bls.n	8004802 <SPI_WaitFlagStateUntilTimeout+0x56>
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d13d      	bne.n	800487e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	685a      	ldr	r2, [r3, #4]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004810:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800481a:	d111      	bne.n	8004840 <SPI_WaitFlagStateUntilTimeout+0x94>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004824:	d004      	beq.n	8004830 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800482e:	d107      	bne.n	8004840 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800483e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004844:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004848:	d10f      	bne.n	800486a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004858:	601a      	str	r2, [r3, #0]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004868:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e017      	b.n	80048ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d101      	bne.n	8004888 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004884:	2300      	movs	r3, #0
 8004886:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	3b01      	subs	r3, #1
 800488c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	689a      	ldr	r2, [r3, #8]
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	4013      	ands	r3, r2
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	429a      	cmp	r2, r3
 800489c:	bf0c      	ite	eq
 800489e:	2301      	moveq	r3, #1
 80048a0:	2300      	movne	r3, #0
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	461a      	mov	r2, r3
 80048a6:	79fb      	ldrb	r3, [r7, #7]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d19b      	bne.n	80047e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3720      	adds	r7, #32
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	20000004 	.word	0x20000004

080048bc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af02      	add	r7, sp, #8
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80048d0:	d111      	bne.n	80048f6 <SPI_EndRxTransaction+0x3a>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048da:	d004      	beq.n	80048e6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048e4:	d107      	bne.n	80048f6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048f4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80048fe:	d117      	bne.n	8004930 <SPI_EndRxTransaction+0x74>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004908:	d112      	bne.n	8004930 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	9300      	str	r3, [sp, #0]
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	2200      	movs	r2, #0
 8004912:	2101      	movs	r1, #1
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	f7ff ff49 	bl	80047ac <SPI_WaitFlagStateUntilTimeout>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d01a      	beq.n	8004956 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004924:	f043 0220 	orr.w	r2, r3, #32
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e013      	b.n	8004958 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	9300      	str	r3, [sp, #0]
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	2200      	movs	r2, #0
 8004938:	2180      	movs	r1, #128	@ 0x80
 800493a:	68f8      	ldr	r0, [r7, #12]
 800493c:	f7ff ff36 	bl	80047ac <SPI_WaitFlagStateUntilTimeout>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d007      	beq.n	8004956 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800494a:	f043 0220 	orr.w	r2, r3, #32
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e000      	b.n	8004958 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af02      	add	r7, sp, #8
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	9300      	str	r3, [sp, #0]
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	2201      	movs	r2, #1
 8004974:	2102      	movs	r1, #2
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	f7ff ff18 	bl	80047ac <SPI_WaitFlagStateUntilTimeout>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d007      	beq.n	8004992 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004986:	f043 0220 	orr.w	r2, r3, #32
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e013      	b.n	80049ba <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	9300      	str	r3, [sp, #0]
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	2200      	movs	r2, #0
 800499a:	2180      	movs	r1, #128	@ 0x80
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f7ff ff05 	bl	80047ac <SPI_WaitFlagStateUntilTimeout>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d007      	beq.n	80049b8 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ac:	f043 0220 	orr.w	r2, r3, #32
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e000      	b.n	80049ba <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b082      	sub	sp, #8
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d101      	bne.n	80049d4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e042      	b.n	8004a5a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d106      	bne.n	80049ee <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f7fc fd89 	bl	8001500 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2224      	movs	r2, #36	@ 0x24
 80049f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68da      	ldr	r2, [r3, #12]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a04:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f972 	bl	8004cf0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	691a      	ldr	r2, [r3, #16]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a1a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	695a      	ldr	r2, [r3, #20]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a2a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68da      	ldr	r2, [r3, #12]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a3a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2220      	movs	r2, #32
 8004a46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2220      	movs	r2, #32
 8004a4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3708      	adds	r7, #8
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b08a      	sub	sp, #40	@ 0x28
 8004a66:	af02      	add	r7, sp, #8
 8004a68:	60f8      	str	r0, [r7, #12]
 8004a6a:	60b9      	str	r1, [r7, #8]
 8004a6c:	603b      	str	r3, [r7, #0]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a72:	2300      	movs	r3, #0
 8004a74:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b20      	cmp	r3, #32
 8004a80:	d175      	bne.n	8004b6e <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d002      	beq.n	8004a8e <HAL_UART_Transmit+0x2c>
 8004a88:	88fb      	ldrh	r3, [r7, #6]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e06e      	b.n	8004b70 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2221      	movs	r2, #33	@ 0x21
 8004a9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004aa0:	f7fc fe60 	bl	8001764 <HAL_GetTick>
 8004aa4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	88fa      	ldrh	r2, [r7, #6]
 8004aaa:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	88fa      	ldrh	r2, [r7, #6]
 8004ab0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004aba:	d108      	bne.n	8004ace <HAL_UART_Transmit+0x6c>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d104      	bne.n	8004ace <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	61bb      	str	r3, [r7, #24]
 8004acc:	e003      	b.n	8004ad6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ad6:	e02e      	b.n	8004b36 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	9300      	str	r3, [sp, #0]
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	2180      	movs	r1, #128	@ 0x80
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f000 f848 	bl	8004b78 <UART_WaitOnFlagUntilTimeout>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d005      	beq.n	8004afa <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2220      	movs	r2, #32
 8004af2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e03a      	b.n	8004b70 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d10b      	bne.n	8004b18 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	881b      	ldrh	r3, [r3, #0]
 8004b04:	461a      	mov	r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b0e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	3302      	adds	r3, #2
 8004b14:	61bb      	str	r3, [r7, #24]
 8004b16:	e007      	b.n	8004b28 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	781a      	ldrb	r2, [r3, #0]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	3301      	adds	r3, #1
 8004b26:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1cb      	bne.n	8004ad8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	9300      	str	r3, [sp, #0]
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	2200      	movs	r2, #0
 8004b48:	2140      	movs	r1, #64	@ 0x40
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f000 f814 	bl	8004b78 <UART_WaitOnFlagUntilTimeout>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d005      	beq.n	8004b62 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2220      	movs	r2, #32
 8004b5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e006      	b.n	8004b70 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2220      	movs	r2, #32
 8004b66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	e000      	b.n	8004b70 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004b6e:	2302      	movs	r3, #2
  }
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3720      	adds	r7, #32
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b086      	sub	sp, #24
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	603b      	str	r3, [r7, #0]
 8004b84:	4613      	mov	r3, r2
 8004b86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b88:	e03b      	b.n	8004c02 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b8a:	6a3b      	ldr	r3, [r7, #32]
 8004b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b90:	d037      	beq.n	8004c02 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b92:	f7fc fde7 	bl	8001764 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	6a3a      	ldr	r2, [r7, #32]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d302      	bcc.n	8004ba8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ba2:	6a3b      	ldr	r3, [r7, #32]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d101      	bne.n	8004bac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e03a      	b.n	8004c22 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	f003 0304 	and.w	r3, r3, #4
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d023      	beq.n	8004c02 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	2b80      	cmp	r3, #128	@ 0x80
 8004bbe:	d020      	beq.n	8004c02 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	2b40      	cmp	r3, #64	@ 0x40
 8004bc4:	d01d      	beq.n	8004c02 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0308 	and.w	r3, r3, #8
 8004bd0:	2b08      	cmp	r3, #8
 8004bd2:	d116      	bne.n	8004c02 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	617b      	str	r3, [r7, #20]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	617b      	str	r3, [r7, #20]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	617b      	str	r3, [r7, #20]
 8004be8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f000 f81d 	bl	8004c2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2208      	movs	r2, #8
 8004bf4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e00f      	b.n	8004c22 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	bf0c      	ite	eq
 8004c12:	2301      	moveq	r3, #1
 8004c14:	2300      	movne	r3, #0
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	461a      	mov	r2, r3
 8004c1a:	79fb      	ldrb	r3, [r7, #7]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d0b4      	beq.n	8004b8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3718      	adds	r7, #24
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b095      	sub	sp, #84	@ 0x54
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	330c      	adds	r3, #12
 8004c38:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c3c:	e853 3f00 	ldrex	r3, [r3]
 8004c40:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	330c      	adds	r3, #12
 8004c50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c52:	643a      	str	r2, [r7, #64]	@ 0x40
 8004c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c56:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c58:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c5a:	e841 2300 	strex	r3, r2, [r1]
 8004c5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1e5      	bne.n	8004c32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	3314      	adds	r3, #20
 8004c6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c6e:	6a3b      	ldr	r3, [r7, #32]
 8004c70:	e853 3f00 	ldrex	r3, [r3]
 8004c74:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	f023 0301 	bic.w	r3, r3, #1
 8004c7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	3314      	adds	r3, #20
 8004c84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c88:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c8e:	e841 2300 	strex	r3, r2, [r1]
 8004c92:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1e5      	bne.n	8004c66 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d119      	bne.n	8004cd6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	330c      	adds	r3, #12
 8004ca8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	e853 3f00 	ldrex	r3, [r3]
 8004cb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	f023 0310 	bic.w	r3, r3, #16
 8004cb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	330c      	adds	r3, #12
 8004cc0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004cc2:	61ba      	str	r2, [r7, #24]
 8004cc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc6:	6979      	ldr	r1, [r7, #20]
 8004cc8:	69ba      	ldr	r2, [r7, #24]
 8004cca:	e841 2300 	strex	r3, r2, [r1]
 8004cce:	613b      	str	r3, [r7, #16]
   return(result);
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1e5      	bne.n	8004ca2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2220      	movs	r2, #32
 8004cda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004ce4:	bf00      	nop
 8004ce6:	3754      	adds	r7, #84	@ 0x54
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bc80      	pop	{r7}
 8004cec:	4770      	bx	lr
	...

08004cf0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	68da      	ldr	r2, [r3, #12]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	689a      	ldr	r2, [r3, #8]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	431a      	orrs	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	695b      	ldr	r3, [r3, #20]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004d2a:	f023 030c 	bic.w	r3, r3, #12
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	6812      	ldr	r2, [r2, #0]
 8004d32:	68b9      	ldr	r1, [r7, #8]
 8004d34:	430b      	orrs	r3, r1
 8004d36:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	699a      	ldr	r2, [r3, #24]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a2c      	ldr	r2, [pc, #176]	@ (8004e04 <UART_SetConfig+0x114>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d103      	bne.n	8004d60 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004d58:	f7fe ff00 	bl	8003b5c <HAL_RCC_GetPCLK2Freq>
 8004d5c:	60f8      	str	r0, [r7, #12]
 8004d5e:	e002      	b.n	8004d66 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004d60:	f7fe fee8 	bl	8003b34 <HAL_RCC_GetPCLK1Freq>
 8004d64:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	4613      	mov	r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	4413      	add	r3, r2
 8004d6e:	009a      	lsls	r2, r3, #2
 8004d70:	441a      	add	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d7c:	4a22      	ldr	r2, [pc, #136]	@ (8004e08 <UART_SetConfig+0x118>)
 8004d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d82:	095b      	lsrs	r3, r3, #5
 8004d84:	0119      	lsls	r1, r3, #4
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	4413      	add	r3, r2
 8004d8e:	009a      	lsls	r2, r3, #2
 8004d90:	441a      	add	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d9c:	4b1a      	ldr	r3, [pc, #104]	@ (8004e08 <UART_SetConfig+0x118>)
 8004d9e:	fba3 0302 	umull	r0, r3, r3, r2
 8004da2:	095b      	lsrs	r3, r3, #5
 8004da4:	2064      	movs	r0, #100	@ 0x64
 8004da6:	fb00 f303 	mul.w	r3, r0, r3
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	011b      	lsls	r3, r3, #4
 8004dae:	3332      	adds	r3, #50	@ 0x32
 8004db0:	4a15      	ldr	r2, [pc, #84]	@ (8004e08 <UART_SetConfig+0x118>)
 8004db2:	fba2 2303 	umull	r2, r3, r2, r3
 8004db6:	095b      	lsrs	r3, r3, #5
 8004db8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004dbc:	4419      	add	r1, r3
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	4413      	add	r3, r2
 8004dc6:	009a      	lsls	r2, r3, #2
 8004dc8:	441a      	add	r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8004e08 <UART_SetConfig+0x118>)
 8004dd6:	fba3 0302 	umull	r0, r3, r3, r2
 8004dda:	095b      	lsrs	r3, r3, #5
 8004ddc:	2064      	movs	r0, #100	@ 0x64
 8004dde:	fb00 f303 	mul.w	r3, r0, r3
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	011b      	lsls	r3, r3, #4
 8004de6:	3332      	adds	r3, #50	@ 0x32
 8004de8:	4a07      	ldr	r2, [pc, #28]	@ (8004e08 <UART_SetConfig+0x118>)
 8004dea:	fba2 2303 	umull	r2, r3, r2, r3
 8004dee:	095b      	lsrs	r3, r3, #5
 8004df0:	f003 020f 	and.w	r2, r3, #15
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	440a      	add	r2, r1
 8004dfa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004dfc:	bf00      	nop
 8004dfe:	3710      	adds	r7, #16
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	40013800 	.word	0x40013800
 8004e08:	51eb851f 	.word	0x51eb851f

08004e0c <siprintf>:
 8004e0c:	b40e      	push	{r1, r2, r3}
 8004e0e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004e12:	b510      	push	{r4, lr}
 8004e14:	2400      	movs	r4, #0
 8004e16:	b09d      	sub	sp, #116	@ 0x74
 8004e18:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004e1a:	9002      	str	r0, [sp, #8]
 8004e1c:	9006      	str	r0, [sp, #24]
 8004e1e:	9107      	str	r1, [sp, #28]
 8004e20:	9104      	str	r1, [sp, #16]
 8004e22:	4809      	ldr	r0, [pc, #36]	@ (8004e48 <siprintf+0x3c>)
 8004e24:	4909      	ldr	r1, [pc, #36]	@ (8004e4c <siprintf+0x40>)
 8004e26:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e2a:	9105      	str	r1, [sp, #20]
 8004e2c:	6800      	ldr	r0, [r0, #0]
 8004e2e:	a902      	add	r1, sp, #8
 8004e30:	9301      	str	r3, [sp, #4]
 8004e32:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004e34:	f000 f9a4 	bl	8005180 <_svfiprintf_r>
 8004e38:	9b02      	ldr	r3, [sp, #8]
 8004e3a:	701c      	strb	r4, [r3, #0]
 8004e3c:	b01d      	add	sp, #116	@ 0x74
 8004e3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e42:	b003      	add	sp, #12
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	20000010 	.word	0x20000010
 8004e4c:	ffff0208 	.word	0xffff0208

08004e50 <memset>:
 8004e50:	4603      	mov	r3, r0
 8004e52:	4402      	add	r2, r0
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d100      	bne.n	8004e5a <memset+0xa>
 8004e58:	4770      	bx	lr
 8004e5a:	f803 1b01 	strb.w	r1, [r3], #1
 8004e5e:	e7f9      	b.n	8004e54 <memset+0x4>

08004e60 <strncmp>:
 8004e60:	b510      	push	{r4, lr}
 8004e62:	b16a      	cbz	r2, 8004e80 <strncmp+0x20>
 8004e64:	3901      	subs	r1, #1
 8004e66:	1884      	adds	r4, r0, r2
 8004e68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e6c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d103      	bne.n	8004e7c <strncmp+0x1c>
 8004e74:	42a0      	cmp	r0, r4
 8004e76:	d001      	beq.n	8004e7c <strncmp+0x1c>
 8004e78:	2a00      	cmp	r2, #0
 8004e7a:	d1f5      	bne.n	8004e68 <strncmp+0x8>
 8004e7c:	1ad0      	subs	r0, r2, r3
 8004e7e:	bd10      	pop	{r4, pc}
 8004e80:	4610      	mov	r0, r2
 8004e82:	e7fc      	b.n	8004e7e <strncmp+0x1e>

08004e84 <__errno>:
 8004e84:	4b01      	ldr	r3, [pc, #4]	@ (8004e8c <__errno+0x8>)
 8004e86:	6818      	ldr	r0, [r3, #0]
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	20000010 	.word	0x20000010

08004e90 <__libc_init_array>:
 8004e90:	b570      	push	{r4, r5, r6, lr}
 8004e92:	2600      	movs	r6, #0
 8004e94:	4d0c      	ldr	r5, [pc, #48]	@ (8004ec8 <__libc_init_array+0x38>)
 8004e96:	4c0d      	ldr	r4, [pc, #52]	@ (8004ecc <__libc_init_array+0x3c>)
 8004e98:	1b64      	subs	r4, r4, r5
 8004e9a:	10a4      	asrs	r4, r4, #2
 8004e9c:	42a6      	cmp	r6, r4
 8004e9e:	d109      	bne.n	8004eb4 <__libc_init_array+0x24>
 8004ea0:	f000 fc76 	bl	8005790 <_init>
 8004ea4:	2600      	movs	r6, #0
 8004ea6:	4d0a      	ldr	r5, [pc, #40]	@ (8004ed0 <__libc_init_array+0x40>)
 8004ea8:	4c0a      	ldr	r4, [pc, #40]	@ (8004ed4 <__libc_init_array+0x44>)
 8004eaa:	1b64      	subs	r4, r4, r5
 8004eac:	10a4      	asrs	r4, r4, #2
 8004eae:	42a6      	cmp	r6, r4
 8004eb0:	d105      	bne.n	8004ebe <__libc_init_array+0x2e>
 8004eb2:	bd70      	pop	{r4, r5, r6, pc}
 8004eb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eb8:	4798      	blx	r3
 8004eba:	3601      	adds	r6, #1
 8004ebc:	e7ee      	b.n	8004e9c <__libc_init_array+0xc>
 8004ebe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ec2:	4798      	blx	r3
 8004ec4:	3601      	adds	r6, #1
 8004ec6:	e7f2      	b.n	8004eae <__libc_init_array+0x1e>
 8004ec8:	08005a68 	.word	0x08005a68
 8004ecc:	08005a68 	.word	0x08005a68
 8004ed0:	08005a68 	.word	0x08005a68
 8004ed4:	08005a6c 	.word	0x08005a6c

08004ed8 <__retarget_lock_acquire_recursive>:
 8004ed8:	4770      	bx	lr

08004eda <__retarget_lock_release_recursive>:
 8004eda:	4770      	bx	lr

08004edc <_free_r>:
 8004edc:	b538      	push	{r3, r4, r5, lr}
 8004ede:	4605      	mov	r5, r0
 8004ee0:	2900      	cmp	r1, #0
 8004ee2:	d040      	beq.n	8004f66 <_free_r+0x8a>
 8004ee4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ee8:	1f0c      	subs	r4, r1, #4
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	bfb8      	it	lt
 8004eee:	18e4      	addlt	r4, r4, r3
 8004ef0:	f000 f8de 	bl	80050b0 <__malloc_lock>
 8004ef4:	4a1c      	ldr	r2, [pc, #112]	@ (8004f68 <_free_r+0x8c>)
 8004ef6:	6813      	ldr	r3, [r2, #0]
 8004ef8:	b933      	cbnz	r3, 8004f08 <_free_r+0x2c>
 8004efa:	6063      	str	r3, [r4, #4]
 8004efc:	6014      	str	r4, [r2, #0]
 8004efe:	4628      	mov	r0, r5
 8004f00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f04:	f000 b8da 	b.w	80050bc <__malloc_unlock>
 8004f08:	42a3      	cmp	r3, r4
 8004f0a:	d908      	bls.n	8004f1e <_free_r+0x42>
 8004f0c:	6820      	ldr	r0, [r4, #0]
 8004f0e:	1821      	adds	r1, r4, r0
 8004f10:	428b      	cmp	r3, r1
 8004f12:	bf01      	itttt	eq
 8004f14:	6819      	ldreq	r1, [r3, #0]
 8004f16:	685b      	ldreq	r3, [r3, #4]
 8004f18:	1809      	addeq	r1, r1, r0
 8004f1a:	6021      	streq	r1, [r4, #0]
 8004f1c:	e7ed      	b.n	8004efa <_free_r+0x1e>
 8004f1e:	461a      	mov	r2, r3
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	b10b      	cbz	r3, 8004f28 <_free_r+0x4c>
 8004f24:	42a3      	cmp	r3, r4
 8004f26:	d9fa      	bls.n	8004f1e <_free_r+0x42>
 8004f28:	6811      	ldr	r1, [r2, #0]
 8004f2a:	1850      	adds	r0, r2, r1
 8004f2c:	42a0      	cmp	r0, r4
 8004f2e:	d10b      	bne.n	8004f48 <_free_r+0x6c>
 8004f30:	6820      	ldr	r0, [r4, #0]
 8004f32:	4401      	add	r1, r0
 8004f34:	1850      	adds	r0, r2, r1
 8004f36:	4283      	cmp	r3, r0
 8004f38:	6011      	str	r1, [r2, #0]
 8004f3a:	d1e0      	bne.n	8004efe <_free_r+0x22>
 8004f3c:	6818      	ldr	r0, [r3, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	4408      	add	r0, r1
 8004f42:	6010      	str	r0, [r2, #0]
 8004f44:	6053      	str	r3, [r2, #4]
 8004f46:	e7da      	b.n	8004efe <_free_r+0x22>
 8004f48:	d902      	bls.n	8004f50 <_free_r+0x74>
 8004f4a:	230c      	movs	r3, #12
 8004f4c:	602b      	str	r3, [r5, #0]
 8004f4e:	e7d6      	b.n	8004efe <_free_r+0x22>
 8004f50:	6820      	ldr	r0, [r4, #0]
 8004f52:	1821      	adds	r1, r4, r0
 8004f54:	428b      	cmp	r3, r1
 8004f56:	bf01      	itttt	eq
 8004f58:	6819      	ldreq	r1, [r3, #0]
 8004f5a:	685b      	ldreq	r3, [r3, #4]
 8004f5c:	1809      	addeq	r1, r1, r0
 8004f5e:	6021      	streq	r1, [r4, #0]
 8004f60:	6063      	str	r3, [r4, #4]
 8004f62:	6054      	str	r4, [r2, #4]
 8004f64:	e7cb      	b.n	8004efe <_free_r+0x22>
 8004f66:	bd38      	pop	{r3, r4, r5, pc}
 8004f68:	2000032c 	.word	0x2000032c

08004f6c <sbrk_aligned>:
 8004f6c:	b570      	push	{r4, r5, r6, lr}
 8004f6e:	4e0f      	ldr	r6, [pc, #60]	@ (8004fac <sbrk_aligned+0x40>)
 8004f70:	460c      	mov	r4, r1
 8004f72:	6831      	ldr	r1, [r6, #0]
 8004f74:	4605      	mov	r5, r0
 8004f76:	b911      	cbnz	r1, 8004f7e <sbrk_aligned+0x12>
 8004f78:	f000 fba8 	bl	80056cc <_sbrk_r>
 8004f7c:	6030      	str	r0, [r6, #0]
 8004f7e:	4621      	mov	r1, r4
 8004f80:	4628      	mov	r0, r5
 8004f82:	f000 fba3 	bl	80056cc <_sbrk_r>
 8004f86:	1c43      	adds	r3, r0, #1
 8004f88:	d103      	bne.n	8004f92 <sbrk_aligned+0x26>
 8004f8a:	f04f 34ff 	mov.w	r4, #4294967295
 8004f8e:	4620      	mov	r0, r4
 8004f90:	bd70      	pop	{r4, r5, r6, pc}
 8004f92:	1cc4      	adds	r4, r0, #3
 8004f94:	f024 0403 	bic.w	r4, r4, #3
 8004f98:	42a0      	cmp	r0, r4
 8004f9a:	d0f8      	beq.n	8004f8e <sbrk_aligned+0x22>
 8004f9c:	1a21      	subs	r1, r4, r0
 8004f9e:	4628      	mov	r0, r5
 8004fa0:	f000 fb94 	bl	80056cc <_sbrk_r>
 8004fa4:	3001      	adds	r0, #1
 8004fa6:	d1f2      	bne.n	8004f8e <sbrk_aligned+0x22>
 8004fa8:	e7ef      	b.n	8004f8a <sbrk_aligned+0x1e>
 8004faa:	bf00      	nop
 8004fac:	20000328 	.word	0x20000328

08004fb0 <_malloc_r>:
 8004fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fb4:	1ccd      	adds	r5, r1, #3
 8004fb6:	f025 0503 	bic.w	r5, r5, #3
 8004fba:	3508      	adds	r5, #8
 8004fbc:	2d0c      	cmp	r5, #12
 8004fbe:	bf38      	it	cc
 8004fc0:	250c      	movcc	r5, #12
 8004fc2:	2d00      	cmp	r5, #0
 8004fc4:	4606      	mov	r6, r0
 8004fc6:	db01      	blt.n	8004fcc <_malloc_r+0x1c>
 8004fc8:	42a9      	cmp	r1, r5
 8004fca:	d904      	bls.n	8004fd6 <_malloc_r+0x26>
 8004fcc:	230c      	movs	r3, #12
 8004fce:	6033      	str	r3, [r6, #0]
 8004fd0:	2000      	movs	r0, #0
 8004fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80050ac <_malloc_r+0xfc>
 8004fda:	f000 f869 	bl	80050b0 <__malloc_lock>
 8004fde:	f8d8 3000 	ldr.w	r3, [r8]
 8004fe2:	461c      	mov	r4, r3
 8004fe4:	bb44      	cbnz	r4, 8005038 <_malloc_r+0x88>
 8004fe6:	4629      	mov	r1, r5
 8004fe8:	4630      	mov	r0, r6
 8004fea:	f7ff ffbf 	bl	8004f6c <sbrk_aligned>
 8004fee:	1c43      	adds	r3, r0, #1
 8004ff0:	4604      	mov	r4, r0
 8004ff2:	d158      	bne.n	80050a6 <_malloc_r+0xf6>
 8004ff4:	f8d8 4000 	ldr.w	r4, [r8]
 8004ff8:	4627      	mov	r7, r4
 8004ffa:	2f00      	cmp	r7, #0
 8004ffc:	d143      	bne.n	8005086 <_malloc_r+0xd6>
 8004ffe:	2c00      	cmp	r4, #0
 8005000:	d04b      	beq.n	800509a <_malloc_r+0xea>
 8005002:	6823      	ldr	r3, [r4, #0]
 8005004:	4639      	mov	r1, r7
 8005006:	4630      	mov	r0, r6
 8005008:	eb04 0903 	add.w	r9, r4, r3
 800500c:	f000 fb5e 	bl	80056cc <_sbrk_r>
 8005010:	4581      	cmp	r9, r0
 8005012:	d142      	bne.n	800509a <_malloc_r+0xea>
 8005014:	6821      	ldr	r1, [r4, #0]
 8005016:	4630      	mov	r0, r6
 8005018:	1a6d      	subs	r5, r5, r1
 800501a:	4629      	mov	r1, r5
 800501c:	f7ff ffa6 	bl	8004f6c <sbrk_aligned>
 8005020:	3001      	adds	r0, #1
 8005022:	d03a      	beq.n	800509a <_malloc_r+0xea>
 8005024:	6823      	ldr	r3, [r4, #0]
 8005026:	442b      	add	r3, r5
 8005028:	6023      	str	r3, [r4, #0]
 800502a:	f8d8 3000 	ldr.w	r3, [r8]
 800502e:	685a      	ldr	r2, [r3, #4]
 8005030:	bb62      	cbnz	r2, 800508c <_malloc_r+0xdc>
 8005032:	f8c8 7000 	str.w	r7, [r8]
 8005036:	e00f      	b.n	8005058 <_malloc_r+0xa8>
 8005038:	6822      	ldr	r2, [r4, #0]
 800503a:	1b52      	subs	r2, r2, r5
 800503c:	d420      	bmi.n	8005080 <_malloc_r+0xd0>
 800503e:	2a0b      	cmp	r2, #11
 8005040:	d917      	bls.n	8005072 <_malloc_r+0xc2>
 8005042:	1961      	adds	r1, r4, r5
 8005044:	42a3      	cmp	r3, r4
 8005046:	6025      	str	r5, [r4, #0]
 8005048:	bf18      	it	ne
 800504a:	6059      	strne	r1, [r3, #4]
 800504c:	6863      	ldr	r3, [r4, #4]
 800504e:	bf08      	it	eq
 8005050:	f8c8 1000 	streq.w	r1, [r8]
 8005054:	5162      	str	r2, [r4, r5]
 8005056:	604b      	str	r3, [r1, #4]
 8005058:	4630      	mov	r0, r6
 800505a:	f000 f82f 	bl	80050bc <__malloc_unlock>
 800505e:	f104 000b 	add.w	r0, r4, #11
 8005062:	1d23      	adds	r3, r4, #4
 8005064:	f020 0007 	bic.w	r0, r0, #7
 8005068:	1ac2      	subs	r2, r0, r3
 800506a:	bf1c      	itt	ne
 800506c:	1a1b      	subne	r3, r3, r0
 800506e:	50a3      	strne	r3, [r4, r2]
 8005070:	e7af      	b.n	8004fd2 <_malloc_r+0x22>
 8005072:	6862      	ldr	r2, [r4, #4]
 8005074:	42a3      	cmp	r3, r4
 8005076:	bf0c      	ite	eq
 8005078:	f8c8 2000 	streq.w	r2, [r8]
 800507c:	605a      	strne	r2, [r3, #4]
 800507e:	e7eb      	b.n	8005058 <_malloc_r+0xa8>
 8005080:	4623      	mov	r3, r4
 8005082:	6864      	ldr	r4, [r4, #4]
 8005084:	e7ae      	b.n	8004fe4 <_malloc_r+0x34>
 8005086:	463c      	mov	r4, r7
 8005088:	687f      	ldr	r7, [r7, #4]
 800508a:	e7b6      	b.n	8004ffa <_malloc_r+0x4a>
 800508c:	461a      	mov	r2, r3
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	42a3      	cmp	r3, r4
 8005092:	d1fb      	bne.n	800508c <_malloc_r+0xdc>
 8005094:	2300      	movs	r3, #0
 8005096:	6053      	str	r3, [r2, #4]
 8005098:	e7de      	b.n	8005058 <_malloc_r+0xa8>
 800509a:	230c      	movs	r3, #12
 800509c:	4630      	mov	r0, r6
 800509e:	6033      	str	r3, [r6, #0]
 80050a0:	f000 f80c 	bl	80050bc <__malloc_unlock>
 80050a4:	e794      	b.n	8004fd0 <_malloc_r+0x20>
 80050a6:	6005      	str	r5, [r0, #0]
 80050a8:	e7d6      	b.n	8005058 <_malloc_r+0xa8>
 80050aa:	bf00      	nop
 80050ac:	2000032c 	.word	0x2000032c

080050b0 <__malloc_lock>:
 80050b0:	4801      	ldr	r0, [pc, #4]	@ (80050b8 <__malloc_lock+0x8>)
 80050b2:	f7ff bf11 	b.w	8004ed8 <__retarget_lock_acquire_recursive>
 80050b6:	bf00      	nop
 80050b8:	20000324 	.word	0x20000324

080050bc <__malloc_unlock>:
 80050bc:	4801      	ldr	r0, [pc, #4]	@ (80050c4 <__malloc_unlock+0x8>)
 80050be:	f7ff bf0c 	b.w	8004eda <__retarget_lock_release_recursive>
 80050c2:	bf00      	nop
 80050c4:	20000324 	.word	0x20000324

080050c8 <__ssputs_r>:
 80050c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050cc:	461f      	mov	r7, r3
 80050ce:	688e      	ldr	r6, [r1, #8]
 80050d0:	4682      	mov	sl, r0
 80050d2:	42be      	cmp	r6, r7
 80050d4:	460c      	mov	r4, r1
 80050d6:	4690      	mov	r8, r2
 80050d8:	680b      	ldr	r3, [r1, #0]
 80050da:	d82d      	bhi.n	8005138 <__ssputs_r+0x70>
 80050dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80050e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80050e4:	d026      	beq.n	8005134 <__ssputs_r+0x6c>
 80050e6:	6965      	ldr	r5, [r4, #20]
 80050e8:	6909      	ldr	r1, [r1, #16]
 80050ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80050ee:	eba3 0901 	sub.w	r9, r3, r1
 80050f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80050f6:	1c7b      	adds	r3, r7, #1
 80050f8:	444b      	add	r3, r9
 80050fa:	106d      	asrs	r5, r5, #1
 80050fc:	429d      	cmp	r5, r3
 80050fe:	bf38      	it	cc
 8005100:	461d      	movcc	r5, r3
 8005102:	0553      	lsls	r3, r2, #21
 8005104:	d527      	bpl.n	8005156 <__ssputs_r+0x8e>
 8005106:	4629      	mov	r1, r5
 8005108:	f7ff ff52 	bl	8004fb0 <_malloc_r>
 800510c:	4606      	mov	r6, r0
 800510e:	b360      	cbz	r0, 800516a <__ssputs_r+0xa2>
 8005110:	464a      	mov	r2, r9
 8005112:	6921      	ldr	r1, [r4, #16]
 8005114:	f000 faf8 	bl	8005708 <memcpy>
 8005118:	89a3      	ldrh	r3, [r4, #12]
 800511a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800511e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005122:	81a3      	strh	r3, [r4, #12]
 8005124:	6126      	str	r6, [r4, #16]
 8005126:	444e      	add	r6, r9
 8005128:	6026      	str	r6, [r4, #0]
 800512a:	463e      	mov	r6, r7
 800512c:	6165      	str	r5, [r4, #20]
 800512e:	eba5 0509 	sub.w	r5, r5, r9
 8005132:	60a5      	str	r5, [r4, #8]
 8005134:	42be      	cmp	r6, r7
 8005136:	d900      	bls.n	800513a <__ssputs_r+0x72>
 8005138:	463e      	mov	r6, r7
 800513a:	4632      	mov	r2, r6
 800513c:	4641      	mov	r1, r8
 800513e:	6820      	ldr	r0, [r4, #0]
 8005140:	f000 faaa 	bl	8005698 <memmove>
 8005144:	2000      	movs	r0, #0
 8005146:	68a3      	ldr	r3, [r4, #8]
 8005148:	1b9b      	subs	r3, r3, r6
 800514a:	60a3      	str	r3, [r4, #8]
 800514c:	6823      	ldr	r3, [r4, #0]
 800514e:	4433      	add	r3, r6
 8005150:	6023      	str	r3, [r4, #0]
 8005152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005156:	462a      	mov	r2, r5
 8005158:	f000 fae4 	bl	8005724 <_realloc_r>
 800515c:	4606      	mov	r6, r0
 800515e:	2800      	cmp	r0, #0
 8005160:	d1e0      	bne.n	8005124 <__ssputs_r+0x5c>
 8005162:	4650      	mov	r0, sl
 8005164:	6921      	ldr	r1, [r4, #16]
 8005166:	f7ff feb9 	bl	8004edc <_free_r>
 800516a:	230c      	movs	r3, #12
 800516c:	f8ca 3000 	str.w	r3, [sl]
 8005170:	89a3      	ldrh	r3, [r4, #12]
 8005172:	f04f 30ff 	mov.w	r0, #4294967295
 8005176:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800517a:	81a3      	strh	r3, [r4, #12]
 800517c:	e7e9      	b.n	8005152 <__ssputs_r+0x8a>
	...

08005180 <_svfiprintf_r>:
 8005180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005184:	4698      	mov	r8, r3
 8005186:	898b      	ldrh	r3, [r1, #12]
 8005188:	4607      	mov	r7, r0
 800518a:	061b      	lsls	r3, r3, #24
 800518c:	460d      	mov	r5, r1
 800518e:	4614      	mov	r4, r2
 8005190:	b09d      	sub	sp, #116	@ 0x74
 8005192:	d510      	bpl.n	80051b6 <_svfiprintf_r+0x36>
 8005194:	690b      	ldr	r3, [r1, #16]
 8005196:	b973      	cbnz	r3, 80051b6 <_svfiprintf_r+0x36>
 8005198:	2140      	movs	r1, #64	@ 0x40
 800519a:	f7ff ff09 	bl	8004fb0 <_malloc_r>
 800519e:	6028      	str	r0, [r5, #0]
 80051a0:	6128      	str	r0, [r5, #16]
 80051a2:	b930      	cbnz	r0, 80051b2 <_svfiprintf_r+0x32>
 80051a4:	230c      	movs	r3, #12
 80051a6:	603b      	str	r3, [r7, #0]
 80051a8:	f04f 30ff 	mov.w	r0, #4294967295
 80051ac:	b01d      	add	sp, #116	@ 0x74
 80051ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051b2:	2340      	movs	r3, #64	@ 0x40
 80051b4:	616b      	str	r3, [r5, #20]
 80051b6:	2300      	movs	r3, #0
 80051b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80051ba:	2320      	movs	r3, #32
 80051bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80051c0:	2330      	movs	r3, #48	@ 0x30
 80051c2:	f04f 0901 	mov.w	r9, #1
 80051c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80051ca:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005364 <_svfiprintf_r+0x1e4>
 80051ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80051d2:	4623      	mov	r3, r4
 80051d4:	469a      	mov	sl, r3
 80051d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051da:	b10a      	cbz	r2, 80051e0 <_svfiprintf_r+0x60>
 80051dc:	2a25      	cmp	r2, #37	@ 0x25
 80051de:	d1f9      	bne.n	80051d4 <_svfiprintf_r+0x54>
 80051e0:	ebba 0b04 	subs.w	fp, sl, r4
 80051e4:	d00b      	beq.n	80051fe <_svfiprintf_r+0x7e>
 80051e6:	465b      	mov	r3, fp
 80051e8:	4622      	mov	r2, r4
 80051ea:	4629      	mov	r1, r5
 80051ec:	4638      	mov	r0, r7
 80051ee:	f7ff ff6b 	bl	80050c8 <__ssputs_r>
 80051f2:	3001      	adds	r0, #1
 80051f4:	f000 80a7 	beq.w	8005346 <_svfiprintf_r+0x1c6>
 80051f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80051fa:	445a      	add	r2, fp
 80051fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80051fe:	f89a 3000 	ldrb.w	r3, [sl]
 8005202:	2b00      	cmp	r3, #0
 8005204:	f000 809f 	beq.w	8005346 <_svfiprintf_r+0x1c6>
 8005208:	2300      	movs	r3, #0
 800520a:	f04f 32ff 	mov.w	r2, #4294967295
 800520e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005212:	f10a 0a01 	add.w	sl, sl, #1
 8005216:	9304      	str	r3, [sp, #16]
 8005218:	9307      	str	r3, [sp, #28]
 800521a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800521e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005220:	4654      	mov	r4, sl
 8005222:	2205      	movs	r2, #5
 8005224:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005228:	484e      	ldr	r0, [pc, #312]	@ (8005364 <_svfiprintf_r+0x1e4>)
 800522a:	f000 fa5f 	bl	80056ec <memchr>
 800522e:	9a04      	ldr	r2, [sp, #16]
 8005230:	b9d8      	cbnz	r0, 800526a <_svfiprintf_r+0xea>
 8005232:	06d0      	lsls	r0, r2, #27
 8005234:	bf44      	itt	mi
 8005236:	2320      	movmi	r3, #32
 8005238:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800523c:	0711      	lsls	r1, r2, #28
 800523e:	bf44      	itt	mi
 8005240:	232b      	movmi	r3, #43	@ 0x2b
 8005242:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005246:	f89a 3000 	ldrb.w	r3, [sl]
 800524a:	2b2a      	cmp	r3, #42	@ 0x2a
 800524c:	d015      	beq.n	800527a <_svfiprintf_r+0xfa>
 800524e:	4654      	mov	r4, sl
 8005250:	2000      	movs	r0, #0
 8005252:	f04f 0c0a 	mov.w	ip, #10
 8005256:	9a07      	ldr	r2, [sp, #28]
 8005258:	4621      	mov	r1, r4
 800525a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800525e:	3b30      	subs	r3, #48	@ 0x30
 8005260:	2b09      	cmp	r3, #9
 8005262:	d94b      	bls.n	80052fc <_svfiprintf_r+0x17c>
 8005264:	b1b0      	cbz	r0, 8005294 <_svfiprintf_r+0x114>
 8005266:	9207      	str	r2, [sp, #28]
 8005268:	e014      	b.n	8005294 <_svfiprintf_r+0x114>
 800526a:	eba0 0308 	sub.w	r3, r0, r8
 800526e:	fa09 f303 	lsl.w	r3, r9, r3
 8005272:	4313      	orrs	r3, r2
 8005274:	46a2      	mov	sl, r4
 8005276:	9304      	str	r3, [sp, #16]
 8005278:	e7d2      	b.n	8005220 <_svfiprintf_r+0xa0>
 800527a:	9b03      	ldr	r3, [sp, #12]
 800527c:	1d19      	adds	r1, r3, #4
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	9103      	str	r1, [sp, #12]
 8005282:	2b00      	cmp	r3, #0
 8005284:	bfbb      	ittet	lt
 8005286:	425b      	neglt	r3, r3
 8005288:	f042 0202 	orrlt.w	r2, r2, #2
 800528c:	9307      	strge	r3, [sp, #28]
 800528e:	9307      	strlt	r3, [sp, #28]
 8005290:	bfb8      	it	lt
 8005292:	9204      	strlt	r2, [sp, #16]
 8005294:	7823      	ldrb	r3, [r4, #0]
 8005296:	2b2e      	cmp	r3, #46	@ 0x2e
 8005298:	d10a      	bne.n	80052b0 <_svfiprintf_r+0x130>
 800529a:	7863      	ldrb	r3, [r4, #1]
 800529c:	2b2a      	cmp	r3, #42	@ 0x2a
 800529e:	d132      	bne.n	8005306 <_svfiprintf_r+0x186>
 80052a0:	9b03      	ldr	r3, [sp, #12]
 80052a2:	3402      	adds	r4, #2
 80052a4:	1d1a      	adds	r2, r3, #4
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	9203      	str	r2, [sp, #12]
 80052aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80052ae:	9305      	str	r3, [sp, #20]
 80052b0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005368 <_svfiprintf_r+0x1e8>
 80052b4:	2203      	movs	r2, #3
 80052b6:	4650      	mov	r0, sl
 80052b8:	7821      	ldrb	r1, [r4, #0]
 80052ba:	f000 fa17 	bl	80056ec <memchr>
 80052be:	b138      	cbz	r0, 80052d0 <_svfiprintf_r+0x150>
 80052c0:	2240      	movs	r2, #64	@ 0x40
 80052c2:	9b04      	ldr	r3, [sp, #16]
 80052c4:	eba0 000a 	sub.w	r0, r0, sl
 80052c8:	4082      	lsls	r2, r0
 80052ca:	4313      	orrs	r3, r2
 80052cc:	3401      	adds	r4, #1
 80052ce:	9304      	str	r3, [sp, #16]
 80052d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052d4:	2206      	movs	r2, #6
 80052d6:	4825      	ldr	r0, [pc, #148]	@ (800536c <_svfiprintf_r+0x1ec>)
 80052d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80052dc:	f000 fa06 	bl	80056ec <memchr>
 80052e0:	2800      	cmp	r0, #0
 80052e2:	d036      	beq.n	8005352 <_svfiprintf_r+0x1d2>
 80052e4:	4b22      	ldr	r3, [pc, #136]	@ (8005370 <_svfiprintf_r+0x1f0>)
 80052e6:	bb1b      	cbnz	r3, 8005330 <_svfiprintf_r+0x1b0>
 80052e8:	9b03      	ldr	r3, [sp, #12]
 80052ea:	3307      	adds	r3, #7
 80052ec:	f023 0307 	bic.w	r3, r3, #7
 80052f0:	3308      	adds	r3, #8
 80052f2:	9303      	str	r3, [sp, #12]
 80052f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052f6:	4433      	add	r3, r6
 80052f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80052fa:	e76a      	b.n	80051d2 <_svfiprintf_r+0x52>
 80052fc:	460c      	mov	r4, r1
 80052fe:	2001      	movs	r0, #1
 8005300:	fb0c 3202 	mla	r2, ip, r2, r3
 8005304:	e7a8      	b.n	8005258 <_svfiprintf_r+0xd8>
 8005306:	2300      	movs	r3, #0
 8005308:	f04f 0c0a 	mov.w	ip, #10
 800530c:	4619      	mov	r1, r3
 800530e:	3401      	adds	r4, #1
 8005310:	9305      	str	r3, [sp, #20]
 8005312:	4620      	mov	r0, r4
 8005314:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005318:	3a30      	subs	r2, #48	@ 0x30
 800531a:	2a09      	cmp	r2, #9
 800531c:	d903      	bls.n	8005326 <_svfiprintf_r+0x1a6>
 800531e:	2b00      	cmp	r3, #0
 8005320:	d0c6      	beq.n	80052b0 <_svfiprintf_r+0x130>
 8005322:	9105      	str	r1, [sp, #20]
 8005324:	e7c4      	b.n	80052b0 <_svfiprintf_r+0x130>
 8005326:	4604      	mov	r4, r0
 8005328:	2301      	movs	r3, #1
 800532a:	fb0c 2101 	mla	r1, ip, r1, r2
 800532e:	e7f0      	b.n	8005312 <_svfiprintf_r+0x192>
 8005330:	ab03      	add	r3, sp, #12
 8005332:	9300      	str	r3, [sp, #0]
 8005334:	462a      	mov	r2, r5
 8005336:	4638      	mov	r0, r7
 8005338:	4b0e      	ldr	r3, [pc, #56]	@ (8005374 <_svfiprintf_r+0x1f4>)
 800533a:	a904      	add	r1, sp, #16
 800533c:	f3af 8000 	nop.w
 8005340:	1c42      	adds	r2, r0, #1
 8005342:	4606      	mov	r6, r0
 8005344:	d1d6      	bne.n	80052f4 <_svfiprintf_r+0x174>
 8005346:	89ab      	ldrh	r3, [r5, #12]
 8005348:	065b      	lsls	r3, r3, #25
 800534a:	f53f af2d 	bmi.w	80051a8 <_svfiprintf_r+0x28>
 800534e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005350:	e72c      	b.n	80051ac <_svfiprintf_r+0x2c>
 8005352:	ab03      	add	r3, sp, #12
 8005354:	9300      	str	r3, [sp, #0]
 8005356:	462a      	mov	r2, r5
 8005358:	4638      	mov	r0, r7
 800535a:	4b06      	ldr	r3, [pc, #24]	@ (8005374 <_svfiprintf_r+0x1f4>)
 800535c:	a904      	add	r1, sp, #16
 800535e:	f000 f87d 	bl	800545c <_printf_i>
 8005362:	e7ed      	b.n	8005340 <_svfiprintf_r+0x1c0>
 8005364:	08005a2a 	.word	0x08005a2a
 8005368:	08005a30 	.word	0x08005a30
 800536c:	08005a34 	.word	0x08005a34
 8005370:	00000000 	.word	0x00000000
 8005374:	080050c9 	.word	0x080050c9

08005378 <_printf_common>:
 8005378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800537c:	4616      	mov	r6, r2
 800537e:	4698      	mov	r8, r3
 8005380:	688a      	ldr	r2, [r1, #8]
 8005382:	690b      	ldr	r3, [r1, #16]
 8005384:	4607      	mov	r7, r0
 8005386:	4293      	cmp	r3, r2
 8005388:	bfb8      	it	lt
 800538a:	4613      	movlt	r3, r2
 800538c:	6033      	str	r3, [r6, #0]
 800538e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005392:	460c      	mov	r4, r1
 8005394:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005398:	b10a      	cbz	r2, 800539e <_printf_common+0x26>
 800539a:	3301      	adds	r3, #1
 800539c:	6033      	str	r3, [r6, #0]
 800539e:	6823      	ldr	r3, [r4, #0]
 80053a0:	0699      	lsls	r1, r3, #26
 80053a2:	bf42      	ittt	mi
 80053a4:	6833      	ldrmi	r3, [r6, #0]
 80053a6:	3302      	addmi	r3, #2
 80053a8:	6033      	strmi	r3, [r6, #0]
 80053aa:	6825      	ldr	r5, [r4, #0]
 80053ac:	f015 0506 	ands.w	r5, r5, #6
 80053b0:	d106      	bne.n	80053c0 <_printf_common+0x48>
 80053b2:	f104 0a19 	add.w	sl, r4, #25
 80053b6:	68e3      	ldr	r3, [r4, #12]
 80053b8:	6832      	ldr	r2, [r6, #0]
 80053ba:	1a9b      	subs	r3, r3, r2
 80053bc:	42ab      	cmp	r3, r5
 80053be:	dc2b      	bgt.n	8005418 <_printf_common+0xa0>
 80053c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80053c4:	6822      	ldr	r2, [r4, #0]
 80053c6:	3b00      	subs	r3, #0
 80053c8:	bf18      	it	ne
 80053ca:	2301      	movne	r3, #1
 80053cc:	0692      	lsls	r2, r2, #26
 80053ce:	d430      	bmi.n	8005432 <_printf_common+0xba>
 80053d0:	4641      	mov	r1, r8
 80053d2:	4638      	mov	r0, r7
 80053d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80053d8:	47c8      	blx	r9
 80053da:	3001      	adds	r0, #1
 80053dc:	d023      	beq.n	8005426 <_printf_common+0xae>
 80053de:	6823      	ldr	r3, [r4, #0]
 80053e0:	6922      	ldr	r2, [r4, #16]
 80053e2:	f003 0306 	and.w	r3, r3, #6
 80053e6:	2b04      	cmp	r3, #4
 80053e8:	bf14      	ite	ne
 80053ea:	2500      	movne	r5, #0
 80053ec:	6833      	ldreq	r3, [r6, #0]
 80053ee:	f04f 0600 	mov.w	r6, #0
 80053f2:	bf08      	it	eq
 80053f4:	68e5      	ldreq	r5, [r4, #12]
 80053f6:	f104 041a 	add.w	r4, r4, #26
 80053fa:	bf08      	it	eq
 80053fc:	1aed      	subeq	r5, r5, r3
 80053fe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005402:	bf08      	it	eq
 8005404:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005408:	4293      	cmp	r3, r2
 800540a:	bfc4      	itt	gt
 800540c:	1a9b      	subgt	r3, r3, r2
 800540e:	18ed      	addgt	r5, r5, r3
 8005410:	42b5      	cmp	r5, r6
 8005412:	d11a      	bne.n	800544a <_printf_common+0xd2>
 8005414:	2000      	movs	r0, #0
 8005416:	e008      	b.n	800542a <_printf_common+0xb2>
 8005418:	2301      	movs	r3, #1
 800541a:	4652      	mov	r2, sl
 800541c:	4641      	mov	r1, r8
 800541e:	4638      	mov	r0, r7
 8005420:	47c8      	blx	r9
 8005422:	3001      	adds	r0, #1
 8005424:	d103      	bne.n	800542e <_printf_common+0xb6>
 8005426:	f04f 30ff 	mov.w	r0, #4294967295
 800542a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800542e:	3501      	adds	r5, #1
 8005430:	e7c1      	b.n	80053b6 <_printf_common+0x3e>
 8005432:	2030      	movs	r0, #48	@ 0x30
 8005434:	18e1      	adds	r1, r4, r3
 8005436:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800543a:	1c5a      	adds	r2, r3, #1
 800543c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005440:	4422      	add	r2, r4
 8005442:	3302      	adds	r3, #2
 8005444:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005448:	e7c2      	b.n	80053d0 <_printf_common+0x58>
 800544a:	2301      	movs	r3, #1
 800544c:	4622      	mov	r2, r4
 800544e:	4641      	mov	r1, r8
 8005450:	4638      	mov	r0, r7
 8005452:	47c8      	blx	r9
 8005454:	3001      	adds	r0, #1
 8005456:	d0e6      	beq.n	8005426 <_printf_common+0xae>
 8005458:	3601      	adds	r6, #1
 800545a:	e7d9      	b.n	8005410 <_printf_common+0x98>

0800545c <_printf_i>:
 800545c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005460:	7e0f      	ldrb	r7, [r1, #24]
 8005462:	4691      	mov	r9, r2
 8005464:	2f78      	cmp	r7, #120	@ 0x78
 8005466:	4680      	mov	r8, r0
 8005468:	460c      	mov	r4, r1
 800546a:	469a      	mov	sl, r3
 800546c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800546e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005472:	d807      	bhi.n	8005484 <_printf_i+0x28>
 8005474:	2f62      	cmp	r7, #98	@ 0x62
 8005476:	d80a      	bhi.n	800548e <_printf_i+0x32>
 8005478:	2f00      	cmp	r7, #0
 800547a:	f000 80d1 	beq.w	8005620 <_printf_i+0x1c4>
 800547e:	2f58      	cmp	r7, #88	@ 0x58
 8005480:	f000 80b8 	beq.w	80055f4 <_printf_i+0x198>
 8005484:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005488:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800548c:	e03a      	b.n	8005504 <_printf_i+0xa8>
 800548e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005492:	2b15      	cmp	r3, #21
 8005494:	d8f6      	bhi.n	8005484 <_printf_i+0x28>
 8005496:	a101      	add	r1, pc, #4	@ (adr r1, 800549c <_printf_i+0x40>)
 8005498:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800549c:	080054f5 	.word	0x080054f5
 80054a0:	08005509 	.word	0x08005509
 80054a4:	08005485 	.word	0x08005485
 80054a8:	08005485 	.word	0x08005485
 80054ac:	08005485 	.word	0x08005485
 80054b0:	08005485 	.word	0x08005485
 80054b4:	08005509 	.word	0x08005509
 80054b8:	08005485 	.word	0x08005485
 80054bc:	08005485 	.word	0x08005485
 80054c0:	08005485 	.word	0x08005485
 80054c4:	08005485 	.word	0x08005485
 80054c8:	08005607 	.word	0x08005607
 80054cc:	08005533 	.word	0x08005533
 80054d0:	080055c1 	.word	0x080055c1
 80054d4:	08005485 	.word	0x08005485
 80054d8:	08005485 	.word	0x08005485
 80054dc:	08005629 	.word	0x08005629
 80054e0:	08005485 	.word	0x08005485
 80054e4:	08005533 	.word	0x08005533
 80054e8:	08005485 	.word	0x08005485
 80054ec:	08005485 	.word	0x08005485
 80054f0:	080055c9 	.word	0x080055c9
 80054f4:	6833      	ldr	r3, [r6, #0]
 80054f6:	1d1a      	adds	r2, r3, #4
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	6032      	str	r2, [r6, #0]
 80054fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005500:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005504:	2301      	movs	r3, #1
 8005506:	e09c      	b.n	8005642 <_printf_i+0x1e6>
 8005508:	6833      	ldr	r3, [r6, #0]
 800550a:	6820      	ldr	r0, [r4, #0]
 800550c:	1d19      	adds	r1, r3, #4
 800550e:	6031      	str	r1, [r6, #0]
 8005510:	0606      	lsls	r6, r0, #24
 8005512:	d501      	bpl.n	8005518 <_printf_i+0xbc>
 8005514:	681d      	ldr	r5, [r3, #0]
 8005516:	e003      	b.n	8005520 <_printf_i+0xc4>
 8005518:	0645      	lsls	r5, r0, #25
 800551a:	d5fb      	bpl.n	8005514 <_printf_i+0xb8>
 800551c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005520:	2d00      	cmp	r5, #0
 8005522:	da03      	bge.n	800552c <_printf_i+0xd0>
 8005524:	232d      	movs	r3, #45	@ 0x2d
 8005526:	426d      	negs	r5, r5
 8005528:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800552c:	230a      	movs	r3, #10
 800552e:	4858      	ldr	r0, [pc, #352]	@ (8005690 <_printf_i+0x234>)
 8005530:	e011      	b.n	8005556 <_printf_i+0xfa>
 8005532:	6821      	ldr	r1, [r4, #0]
 8005534:	6833      	ldr	r3, [r6, #0]
 8005536:	0608      	lsls	r0, r1, #24
 8005538:	f853 5b04 	ldr.w	r5, [r3], #4
 800553c:	d402      	bmi.n	8005544 <_printf_i+0xe8>
 800553e:	0649      	lsls	r1, r1, #25
 8005540:	bf48      	it	mi
 8005542:	b2ad      	uxthmi	r5, r5
 8005544:	2f6f      	cmp	r7, #111	@ 0x6f
 8005546:	6033      	str	r3, [r6, #0]
 8005548:	bf14      	ite	ne
 800554a:	230a      	movne	r3, #10
 800554c:	2308      	moveq	r3, #8
 800554e:	4850      	ldr	r0, [pc, #320]	@ (8005690 <_printf_i+0x234>)
 8005550:	2100      	movs	r1, #0
 8005552:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005556:	6866      	ldr	r6, [r4, #4]
 8005558:	2e00      	cmp	r6, #0
 800555a:	60a6      	str	r6, [r4, #8]
 800555c:	db05      	blt.n	800556a <_printf_i+0x10e>
 800555e:	6821      	ldr	r1, [r4, #0]
 8005560:	432e      	orrs	r6, r5
 8005562:	f021 0104 	bic.w	r1, r1, #4
 8005566:	6021      	str	r1, [r4, #0]
 8005568:	d04b      	beq.n	8005602 <_printf_i+0x1a6>
 800556a:	4616      	mov	r6, r2
 800556c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005570:	fb03 5711 	mls	r7, r3, r1, r5
 8005574:	5dc7      	ldrb	r7, [r0, r7]
 8005576:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800557a:	462f      	mov	r7, r5
 800557c:	42bb      	cmp	r3, r7
 800557e:	460d      	mov	r5, r1
 8005580:	d9f4      	bls.n	800556c <_printf_i+0x110>
 8005582:	2b08      	cmp	r3, #8
 8005584:	d10b      	bne.n	800559e <_printf_i+0x142>
 8005586:	6823      	ldr	r3, [r4, #0]
 8005588:	07df      	lsls	r7, r3, #31
 800558a:	d508      	bpl.n	800559e <_printf_i+0x142>
 800558c:	6923      	ldr	r3, [r4, #16]
 800558e:	6861      	ldr	r1, [r4, #4]
 8005590:	4299      	cmp	r1, r3
 8005592:	bfde      	ittt	le
 8005594:	2330      	movle	r3, #48	@ 0x30
 8005596:	f806 3c01 	strble.w	r3, [r6, #-1]
 800559a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800559e:	1b92      	subs	r2, r2, r6
 80055a0:	6122      	str	r2, [r4, #16]
 80055a2:	464b      	mov	r3, r9
 80055a4:	4621      	mov	r1, r4
 80055a6:	4640      	mov	r0, r8
 80055a8:	f8cd a000 	str.w	sl, [sp]
 80055ac:	aa03      	add	r2, sp, #12
 80055ae:	f7ff fee3 	bl	8005378 <_printf_common>
 80055b2:	3001      	adds	r0, #1
 80055b4:	d14a      	bne.n	800564c <_printf_i+0x1f0>
 80055b6:	f04f 30ff 	mov.w	r0, #4294967295
 80055ba:	b004      	add	sp, #16
 80055bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055c0:	6823      	ldr	r3, [r4, #0]
 80055c2:	f043 0320 	orr.w	r3, r3, #32
 80055c6:	6023      	str	r3, [r4, #0]
 80055c8:	2778      	movs	r7, #120	@ 0x78
 80055ca:	4832      	ldr	r0, [pc, #200]	@ (8005694 <_printf_i+0x238>)
 80055cc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80055d0:	6823      	ldr	r3, [r4, #0]
 80055d2:	6831      	ldr	r1, [r6, #0]
 80055d4:	061f      	lsls	r7, r3, #24
 80055d6:	f851 5b04 	ldr.w	r5, [r1], #4
 80055da:	d402      	bmi.n	80055e2 <_printf_i+0x186>
 80055dc:	065f      	lsls	r7, r3, #25
 80055de:	bf48      	it	mi
 80055e0:	b2ad      	uxthmi	r5, r5
 80055e2:	6031      	str	r1, [r6, #0]
 80055e4:	07d9      	lsls	r1, r3, #31
 80055e6:	bf44      	itt	mi
 80055e8:	f043 0320 	orrmi.w	r3, r3, #32
 80055ec:	6023      	strmi	r3, [r4, #0]
 80055ee:	b11d      	cbz	r5, 80055f8 <_printf_i+0x19c>
 80055f0:	2310      	movs	r3, #16
 80055f2:	e7ad      	b.n	8005550 <_printf_i+0xf4>
 80055f4:	4826      	ldr	r0, [pc, #152]	@ (8005690 <_printf_i+0x234>)
 80055f6:	e7e9      	b.n	80055cc <_printf_i+0x170>
 80055f8:	6823      	ldr	r3, [r4, #0]
 80055fa:	f023 0320 	bic.w	r3, r3, #32
 80055fe:	6023      	str	r3, [r4, #0]
 8005600:	e7f6      	b.n	80055f0 <_printf_i+0x194>
 8005602:	4616      	mov	r6, r2
 8005604:	e7bd      	b.n	8005582 <_printf_i+0x126>
 8005606:	6833      	ldr	r3, [r6, #0]
 8005608:	6825      	ldr	r5, [r4, #0]
 800560a:	1d18      	adds	r0, r3, #4
 800560c:	6961      	ldr	r1, [r4, #20]
 800560e:	6030      	str	r0, [r6, #0]
 8005610:	062e      	lsls	r6, r5, #24
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	d501      	bpl.n	800561a <_printf_i+0x1be>
 8005616:	6019      	str	r1, [r3, #0]
 8005618:	e002      	b.n	8005620 <_printf_i+0x1c4>
 800561a:	0668      	lsls	r0, r5, #25
 800561c:	d5fb      	bpl.n	8005616 <_printf_i+0x1ba>
 800561e:	8019      	strh	r1, [r3, #0]
 8005620:	2300      	movs	r3, #0
 8005622:	4616      	mov	r6, r2
 8005624:	6123      	str	r3, [r4, #16]
 8005626:	e7bc      	b.n	80055a2 <_printf_i+0x146>
 8005628:	6833      	ldr	r3, [r6, #0]
 800562a:	2100      	movs	r1, #0
 800562c:	1d1a      	adds	r2, r3, #4
 800562e:	6032      	str	r2, [r6, #0]
 8005630:	681e      	ldr	r6, [r3, #0]
 8005632:	6862      	ldr	r2, [r4, #4]
 8005634:	4630      	mov	r0, r6
 8005636:	f000 f859 	bl	80056ec <memchr>
 800563a:	b108      	cbz	r0, 8005640 <_printf_i+0x1e4>
 800563c:	1b80      	subs	r0, r0, r6
 800563e:	6060      	str	r0, [r4, #4]
 8005640:	6863      	ldr	r3, [r4, #4]
 8005642:	6123      	str	r3, [r4, #16]
 8005644:	2300      	movs	r3, #0
 8005646:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800564a:	e7aa      	b.n	80055a2 <_printf_i+0x146>
 800564c:	4632      	mov	r2, r6
 800564e:	4649      	mov	r1, r9
 8005650:	4640      	mov	r0, r8
 8005652:	6923      	ldr	r3, [r4, #16]
 8005654:	47d0      	blx	sl
 8005656:	3001      	adds	r0, #1
 8005658:	d0ad      	beq.n	80055b6 <_printf_i+0x15a>
 800565a:	6823      	ldr	r3, [r4, #0]
 800565c:	079b      	lsls	r3, r3, #30
 800565e:	d413      	bmi.n	8005688 <_printf_i+0x22c>
 8005660:	68e0      	ldr	r0, [r4, #12]
 8005662:	9b03      	ldr	r3, [sp, #12]
 8005664:	4298      	cmp	r0, r3
 8005666:	bfb8      	it	lt
 8005668:	4618      	movlt	r0, r3
 800566a:	e7a6      	b.n	80055ba <_printf_i+0x15e>
 800566c:	2301      	movs	r3, #1
 800566e:	4632      	mov	r2, r6
 8005670:	4649      	mov	r1, r9
 8005672:	4640      	mov	r0, r8
 8005674:	47d0      	blx	sl
 8005676:	3001      	adds	r0, #1
 8005678:	d09d      	beq.n	80055b6 <_printf_i+0x15a>
 800567a:	3501      	adds	r5, #1
 800567c:	68e3      	ldr	r3, [r4, #12]
 800567e:	9903      	ldr	r1, [sp, #12]
 8005680:	1a5b      	subs	r3, r3, r1
 8005682:	42ab      	cmp	r3, r5
 8005684:	dcf2      	bgt.n	800566c <_printf_i+0x210>
 8005686:	e7eb      	b.n	8005660 <_printf_i+0x204>
 8005688:	2500      	movs	r5, #0
 800568a:	f104 0619 	add.w	r6, r4, #25
 800568e:	e7f5      	b.n	800567c <_printf_i+0x220>
 8005690:	08005a3b 	.word	0x08005a3b
 8005694:	08005a4c 	.word	0x08005a4c

08005698 <memmove>:
 8005698:	4288      	cmp	r0, r1
 800569a:	b510      	push	{r4, lr}
 800569c:	eb01 0402 	add.w	r4, r1, r2
 80056a0:	d902      	bls.n	80056a8 <memmove+0x10>
 80056a2:	4284      	cmp	r4, r0
 80056a4:	4623      	mov	r3, r4
 80056a6:	d807      	bhi.n	80056b8 <memmove+0x20>
 80056a8:	1e43      	subs	r3, r0, #1
 80056aa:	42a1      	cmp	r1, r4
 80056ac:	d008      	beq.n	80056c0 <memmove+0x28>
 80056ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80056b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80056b6:	e7f8      	b.n	80056aa <memmove+0x12>
 80056b8:	4601      	mov	r1, r0
 80056ba:	4402      	add	r2, r0
 80056bc:	428a      	cmp	r2, r1
 80056be:	d100      	bne.n	80056c2 <memmove+0x2a>
 80056c0:	bd10      	pop	{r4, pc}
 80056c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80056c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80056ca:	e7f7      	b.n	80056bc <memmove+0x24>

080056cc <_sbrk_r>:
 80056cc:	b538      	push	{r3, r4, r5, lr}
 80056ce:	2300      	movs	r3, #0
 80056d0:	4d05      	ldr	r5, [pc, #20]	@ (80056e8 <_sbrk_r+0x1c>)
 80056d2:	4604      	mov	r4, r0
 80056d4:	4608      	mov	r0, r1
 80056d6:	602b      	str	r3, [r5, #0]
 80056d8:	f7fb ff8a 	bl	80015f0 <_sbrk>
 80056dc:	1c43      	adds	r3, r0, #1
 80056de:	d102      	bne.n	80056e6 <_sbrk_r+0x1a>
 80056e0:	682b      	ldr	r3, [r5, #0]
 80056e2:	b103      	cbz	r3, 80056e6 <_sbrk_r+0x1a>
 80056e4:	6023      	str	r3, [r4, #0]
 80056e6:	bd38      	pop	{r3, r4, r5, pc}
 80056e8:	20000320 	.word	0x20000320

080056ec <memchr>:
 80056ec:	4603      	mov	r3, r0
 80056ee:	b510      	push	{r4, lr}
 80056f0:	b2c9      	uxtb	r1, r1
 80056f2:	4402      	add	r2, r0
 80056f4:	4293      	cmp	r3, r2
 80056f6:	4618      	mov	r0, r3
 80056f8:	d101      	bne.n	80056fe <memchr+0x12>
 80056fa:	2000      	movs	r0, #0
 80056fc:	e003      	b.n	8005706 <memchr+0x1a>
 80056fe:	7804      	ldrb	r4, [r0, #0]
 8005700:	3301      	adds	r3, #1
 8005702:	428c      	cmp	r4, r1
 8005704:	d1f6      	bne.n	80056f4 <memchr+0x8>
 8005706:	bd10      	pop	{r4, pc}

08005708 <memcpy>:
 8005708:	440a      	add	r2, r1
 800570a:	4291      	cmp	r1, r2
 800570c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005710:	d100      	bne.n	8005714 <memcpy+0xc>
 8005712:	4770      	bx	lr
 8005714:	b510      	push	{r4, lr}
 8005716:	f811 4b01 	ldrb.w	r4, [r1], #1
 800571a:	4291      	cmp	r1, r2
 800571c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005720:	d1f9      	bne.n	8005716 <memcpy+0xe>
 8005722:	bd10      	pop	{r4, pc}

08005724 <_realloc_r>:
 8005724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005728:	4607      	mov	r7, r0
 800572a:	4614      	mov	r4, r2
 800572c:	460d      	mov	r5, r1
 800572e:	b921      	cbnz	r1, 800573a <_realloc_r+0x16>
 8005730:	4611      	mov	r1, r2
 8005732:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005736:	f7ff bc3b 	b.w	8004fb0 <_malloc_r>
 800573a:	b92a      	cbnz	r2, 8005748 <_realloc_r+0x24>
 800573c:	f7ff fbce 	bl	8004edc <_free_r>
 8005740:	4625      	mov	r5, r4
 8005742:	4628      	mov	r0, r5
 8005744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005748:	f000 f81a 	bl	8005780 <_malloc_usable_size_r>
 800574c:	4284      	cmp	r4, r0
 800574e:	4606      	mov	r6, r0
 8005750:	d802      	bhi.n	8005758 <_realloc_r+0x34>
 8005752:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005756:	d8f4      	bhi.n	8005742 <_realloc_r+0x1e>
 8005758:	4621      	mov	r1, r4
 800575a:	4638      	mov	r0, r7
 800575c:	f7ff fc28 	bl	8004fb0 <_malloc_r>
 8005760:	4680      	mov	r8, r0
 8005762:	b908      	cbnz	r0, 8005768 <_realloc_r+0x44>
 8005764:	4645      	mov	r5, r8
 8005766:	e7ec      	b.n	8005742 <_realloc_r+0x1e>
 8005768:	42b4      	cmp	r4, r6
 800576a:	4622      	mov	r2, r4
 800576c:	4629      	mov	r1, r5
 800576e:	bf28      	it	cs
 8005770:	4632      	movcs	r2, r6
 8005772:	f7ff ffc9 	bl	8005708 <memcpy>
 8005776:	4629      	mov	r1, r5
 8005778:	4638      	mov	r0, r7
 800577a:	f7ff fbaf 	bl	8004edc <_free_r>
 800577e:	e7f1      	b.n	8005764 <_realloc_r+0x40>

08005780 <_malloc_usable_size_r>:
 8005780:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005784:	1f18      	subs	r0, r3, #4
 8005786:	2b00      	cmp	r3, #0
 8005788:	bfbc      	itt	lt
 800578a:	580b      	ldrlt	r3, [r1, r0]
 800578c:	18c0      	addlt	r0, r0, r3
 800578e:	4770      	bx	lr

08005790 <_init>:
 8005790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005792:	bf00      	nop
 8005794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005796:	bc08      	pop	{r3}
 8005798:	469e      	mov	lr, r3
 800579a:	4770      	bx	lr

0800579c <_fini>:
 800579c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800579e:	bf00      	nop
 80057a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057a2:	bc08      	pop	{r3}
 80057a4:	469e      	mov	lr, r3
 80057a6:	4770      	bx	lr
