
WT1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005468  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08005574  08005574  00006574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056bc  080056bc  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080056bc  080056bc  000066bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056c4  080056c4  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056c4  080056c4  000066c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080056c8  080056c8  000066c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080056cc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  2000005c  08005728  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000032c  08005728  0000732c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f45e  00000000  00000000  00007085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002760  00000000  00000000  000164e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  00018c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aa2  00000000  00000000  000199f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000190c1  00000000  00000000  0001a49a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012389  00000000  00000000  0003355b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d829  00000000  00000000  000458e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d310d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d94  00000000  00000000  000d3150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000d6ee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800555c 	.word	0x0800555c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	0800555c 	.word	0x0800555c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_uldivmod>:
 800015c:	b953      	cbnz	r3, 8000174 <__aeabi_uldivmod+0x18>
 800015e:	b94a      	cbnz	r2, 8000174 <__aeabi_uldivmod+0x18>
 8000160:	2900      	cmp	r1, #0
 8000162:	bf08      	it	eq
 8000164:	2800      	cmpeq	r0, #0
 8000166:	bf1c      	itt	ne
 8000168:	f04f 31ff 	movne.w	r1, #4294967295
 800016c:	f04f 30ff 	movne.w	r0, #4294967295
 8000170:	f000 b98c 	b.w	800048c <__aeabi_idiv0>
 8000174:	f1ad 0c08 	sub.w	ip, sp, #8
 8000178:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800017c:	f000 f806 	bl	800018c <__udivmoddi4>
 8000180:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000184:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000188:	b004      	add	sp, #16
 800018a:	4770      	bx	lr

0800018c <__udivmoddi4>:
 800018c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000190:	9d08      	ldr	r5, [sp, #32]
 8000192:	468e      	mov	lr, r1
 8000194:	4604      	mov	r4, r0
 8000196:	4688      	mov	r8, r1
 8000198:	2b00      	cmp	r3, #0
 800019a:	d14a      	bne.n	8000232 <__udivmoddi4+0xa6>
 800019c:	428a      	cmp	r2, r1
 800019e:	4617      	mov	r7, r2
 80001a0:	d962      	bls.n	8000268 <__udivmoddi4+0xdc>
 80001a2:	fab2 f682 	clz	r6, r2
 80001a6:	b14e      	cbz	r6, 80001bc <__udivmoddi4+0x30>
 80001a8:	f1c6 0320 	rsb	r3, r6, #32
 80001ac:	fa01 f806 	lsl.w	r8, r1, r6
 80001b0:	fa20 f303 	lsr.w	r3, r0, r3
 80001b4:	40b7      	lsls	r7, r6
 80001b6:	ea43 0808 	orr.w	r8, r3, r8
 80001ba:	40b4      	lsls	r4, r6
 80001bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80001c0:	fbb8 f1fe 	udiv	r1, r8, lr
 80001c4:	fa1f fc87 	uxth.w	ip, r7
 80001c8:	fb0e 8811 	mls	r8, lr, r1, r8
 80001cc:	fb01 f20c 	mul.w	r2, r1, ip
 80001d0:	0c23      	lsrs	r3, r4, #16
 80001d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001d6:	429a      	cmp	r2, r3
 80001d8:	d909      	bls.n	80001ee <__udivmoddi4+0x62>
 80001da:	18fb      	adds	r3, r7, r3
 80001dc:	f101 30ff 	add.w	r0, r1, #4294967295
 80001e0:	f080 80eb 	bcs.w	80003ba <__udivmoddi4+0x22e>
 80001e4:	429a      	cmp	r2, r3
 80001e6:	f240 80e8 	bls.w	80003ba <__udivmoddi4+0x22e>
 80001ea:	3902      	subs	r1, #2
 80001ec:	443b      	add	r3, r7
 80001ee:	1a9a      	subs	r2, r3, r2
 80001f0:	fbb2 f0fe 	udiv	r0, r2, lr
 80001f4:	fb0e 2210 	mls	r2, lr, r0, r2
 80001f8:	fb00 fc0c 	mul.w	ip, r0, ip
 80001fc:	b2a3      	uxth	r3, r4
 80001fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000202:	459c      	cmp	ip, r3
 8000204:	d909      	bls.n	800021a <__udivmoddi4+0x8e>
 8000206:	18fb      	adds	r3, r7, r3
 8000208:	f100 32ff 	add.w	r2, r0, #4294967295
 800020c:	f080 80d7 	bcs.w	80003be <__udivmoddi4+0x232>
 8000210:	459c      	cmp	ip, r3
 8000212:	f240 80d4 	bls.w	80003be <__udivmoddi4+0x232>
 8000216:	443b      	add	r3, r7
 8000218:	3802      	subs	r0, #2
 800021a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800021e:	2100      	movs	r1, #0
 8000220:	eba3 030c 	sub.w	r3, r3, ip
 8000224:	b11d      	cbz	r5, 800022e <__udivmoddi4+0xa2>
 8000226:	2200      	movs	r2, #0
 8000228:	40f3      	lsrs	r3, r6
 800022a:	e9c5 3200 	strd	r3, r2, [r5]
 800022e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000232:	428b      	cmp	r3, r1
 8000234:	d905      	bls.n	8000242 <__udivmoddi4+0xb6>
 8000236:	b10d      	cbz	r5, 800023c <__udivmoddi4+0xb0>
 8000238:	e9c5 0100 	strd	r0, r1, [r5]
 800023c:	2100      	movs	r1, #0
 800023e:	4608      	mov	r0, r1
 8000240:	e7f5      	b.n	800022e <__udivmoddi4+0xa2>
 8000242:	fab3 f183 	clz	r1, r3
 8000246:	2900      	cmp	r1, #0
 8000248:	d146      	bne.n	80002d8 <__udivmoddi4+0x14c>
 800024a:	4573      	cmp	r3, lr
 800024c:	d302      	bcc.n	8000254 <__udivmoddi4+0xc8>
 800024e:	4282      	cmp	r2, r0
 8000250:	f200 8108 	bhi.w	8000464 <__udivmoddi4+0x2d8>
 8000254:	1a84      	subs	r4, r0, r2
 8000256:	eb6e 0203 	sbc.w	r2, lr, r3
 800025a:	2001      	movs	r0, #1
 800025c:	4690      	mov	r8, r2
 800025e:	2d00      	cmp	r5, #0
 8000260:	d0e5      	beq.n	800022e <__udivmoddi4+0xa2>
 8000262:	e9c5 4800 	strd	r4, r8, [r5]
 8000266:	e7e2      	b.n	800022e <__udivmoddi4+0xa2>
 8000268:	2a00      	cmp	r2, #0
 800026a:	f000 8091 	beq.w	8000390 <__udivmoddi4+0x204>
 800026e:	fab2 f682 	clz	r6, r2
 8000272:	2e00      	cmp	r6, #0
 8000274:	f040 80a5 	bne.w	80003c2 <__udivmoddi4+0x236>
 8000278:	1a8a      	subs	r2, r1, r2
 800027a:	2101      	movs	r1, #1
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000282:	b280      	uxth	r0, r0
 8000284:	b2bc      	uxth	r4, r7
 8000286:	fbb2 fcfe 	udiv	ip, r2, lr
 800028a:	fb0e 221c 	mls	r2, lr, ip, r2
 800028e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000292:	fb04 f20c 	mul.w	r2, r4, ip
 8000296:	429a      	cmp	r2, r3
 8000298:	d907      	bls.n	80002aa <__udivmoddi4+0x11e>
 800029a:	18fb      	adds	r3, r7, r3
 800029c:	f10c 38ff 	add.w	r8, ip, #4294967295
 80002a0:	d202      	bcs.n	80002a8 <__udivmoddi4+0x11c>
 80002a2:	429a      	cmp	r2, r3
 80002a4:	f200 80e3 	bhi.w	800046e <__udivmoddi4+0x2e2>
 80002a8:	46c4      	mov	ip, r8
 80002aa:	1a9b      	subs	r3, r3, r2
 80002ac:	fbb3 f2fe 	udiv	r2, r3, lr
 80002b0:	fb0e 3312 	mls	r3, lr, r2, r3
 80002b4:	fb02 f404 	mul.w	r4, r2, r4
 80002b8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80002bc:	429c      	cmp	r4, r3
 80002be:	d907      	bls.n	80002d0 <__udivmoddi4+0x144>
 80002c0:	18fb      	adds	r3, r7, r3
 80002c2:	f102 30ff 	add.w	r0, r2, #4294967295
 80002c6:	d202      	bcs.n	80002ce <__udivmoddi4+0x142>
 80002c8:	429c      	cmp	r4, r3
 80002ca:	f200 80cd 	bhi.w	8000468 <__udivmoddi4+0x2dc>
 80002ce:	4602      	mov	r2, r0
 80002d0:	1b1b      	subs	r3, r3, r4
 80002d2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80002d6:	e7a5      	b.n	8000224 <__udivmoddi4+0x98>
 80002d8:	f1c1 0620 	rsb	r6, r1, #32
 80002dc:	408b      	lsls	r3, r1
 80002de:	fa22 f706 	lsr.w	r7, r2, r6
 80002e2:	431f      	orrs	r7, r3
 80002e4:	fa2e fa06 	lsr.w	sl, lr, r6
 80002e8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80002ec:	fbba f8f9 	udiv	r8, sl, r9
 80002f0:	fa0e fe01 	lsl.w	lr, lr, r1
 80002f4:	fa20 f306 	lsr.w	r3, r0, r6
 80002f8:	fb09 aa18 	mls	sl, r9, r8, sl
 80002fc:	fa1f fc87 	uxth.w	ip, r7
 8000300:	ea43 030e 	orr.w	r3, r3, lr
 8000304:	fa00 fe01 	lsl.w	lr, r0, r1
 8000308:	fb08 f00c 	mul.w	r0, r8, ip
 800030c:	0c1c      	lsrs	r4, r3, #16
 800030e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000312:	42a0      	cmp	r0, r4
 8000314:	fa02 f201 	lsl.w	r2, r2, r1
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x1a4>
 800031a:	193c      	adds	r4, r7, r4
 800031c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000320:	f080 809e 	bcs.w	8000460 <__udivmoddi4+0x2d4>
 8000324:	42a0      	cmp	r0, r4
 8000326:	f240 809b 	bls.w	8000460 <__udivmoddi4+0x2d4>
 800032a:	f1a8 0802 	sub.w	r8, r8, #2
 800032e:	443c      	add	r4, r7
 8000330:	1a24      	subs	r4, r4, r0
 8000332:	b298      	uxth	r0, r3
 8000334:	fbb4 f3f9 	udiv	r3, r4, r9
 8000338:	fb09 4413 	mls	r4, r9, r3, r4
 800033c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000340:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x1d0>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f103 30ff 	add.w	r0, r3, #4294967295
 800034e:	f080 8085 	bcs.w	800045c <__udivmoddi4+0x2d0>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8082 	bls.w	800045c <__udivmoddi4+0x2d0>
 8000358:	3b02      	subs	r3, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	fba0 8c02 	umull	r8, ip, r0, r2
 8000368:	4564      	cmp	r4, ip
 800036a:	4643      	mov	r3, r8
 800036c:	46e1      	mov	r9, ip
 800036e:	d364      	bcc.n	800043a <__udivmoddi4+0x2ae>
 8000370:	d061      	beq.n	8000436 <__udivmoddi4+0x2aa>
 8000372:	b15d      	cbz	r5, 800038c <__udivmoddi4+0x200>
 8000374:	ebbe 0203 	subs.w	r2, lr, r3
 8000378:	eb64 0409 	sbc.w	r4, r4, r9
 800037c:	fa04 f606 	lsl.w	r6, r4, r6
 8000380:	fa22 f301 	lsr.w	r3, r2, r1
 8000384:	431e      	orrs	r6, r3
 8000386:	40cc      	lsrs	r4, r1
 8000388:	e9c5 6400 	strd	r6, r4, [r5]
 800038c:	2100      	movs	r1, #0
 800038e:	e74e      	b.n	800022e <__udivmoddi4+0xa2>
 8000390:	fbb1 fcf2 	udiv	ip, r1, r2
 8000394:	0c01      	lsrs	r1, r0, #16
 8000396:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800039a:	b280      	uxth	r0, r0
 800039c:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80003a0:	463b      	mov	r3, r7
 80003a2:	fbb1 f1f7 	udiv	r1, r1, r7
 80003a6:	4638      	mov	r0, r7
 80003a8:	463c      	mov	r4, r7
 80003aa:	46b8      	mov	r8, r7
 80003ac:	46be      	mov	lr, r7
 80003ae:	2620      	movs	r6, #32
 80003b0:	eba2 0208 	sub.w	r2, r2, r8
 80003b4:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80003b8:	e765      	b.n	8000286 <__udivmoddi4+0xfa>
 80003ba:	4601      	mov	r1, r0
 80003bc:	e717      	b.n	80001ee <__udivmoddi4+0x62>
 80003be:	4610      	mov	r0, r2
 80003c0:	e72b      	b.n	800021a <__udivmoddi4+0x8e>
 80003c2:	f1c6 0120 	rsb	r1, r6, #32
 80003c6:	fa2e fc01 	lsr.w	ip, lr, r1
 80003ca:	40b7      	lsls	r7, r6
 80003cc:	fa0e fe06 	lsl.w	lr, lr, r6
 80003d0:	fa20 f101 	lsr.w	r1, r0, r1
 80003d4:	ea41 010e 	orr.w	r1, r1, lr
 80003d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003dc:	fbbc f8fe 	udiv	r8, ip, lr
 80003e0:	b2bc      	uxth	r4, r7
 80003e2:	fb0e cc18 	mls	ip, lr, r8, ip
 80003e6:	fb08 f904 	mul.w	r9, r8, r4
 80003ea:	0c0a      	lsrs	r2, r1, #16
 80003ec:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80003f0:	40b0      	lsls	r0, r6
 80003f2:	4591      	cmp	r9, r2
 80003f4:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80003f8:	b280      	uxth	r0, r0
 80003fa:	d93e      	bls.n	800047a <__udivmoddi4+0x2ee>
 80003fc:	18ba      	adds	r2, r7, r2
 80003fe:	f108 3cff 	add.w	ip, r8, #4294967295
 8000402:	d201      	bcs.n	8000408 <__udivmoddi4+0x27c>
 8000404:	4591      	cmp	r9, r2
 8000406:	d81f      	bhi.n	8000448 <__udivmoddi4+0x2bc>
 8000408:	eba2 0209 	sub.w	r2, r2, r9
 800040c:	fbb2 f9fe 	udiv	r9, r2, lr
 8000410:	fb09 f804 	mul.w	r8, r9, r4
 8000414:	fb0e 2a19 	mls	sl, lr, r9, r2
 8000418:	b28a      	uxth	r2, r1
 800041a:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 800041e:	4542      	cmp	r2, r8
 8000420:	d229      	bcs.n	8000476 <__udivmoddi4+0x2ea>
 8000422:	18ba      	adds	r2, r7, r2
 8000424:	f109 31ff 	add.w	r1, r9, #4294967295
 8000428:	d2c2      	bcs.n	80003b0 <__udivmoddi4+0x224>
 800042a:	4542      	cmp	r2, r8
 800042c:	d2c0      	bcs.n	80003b0 <__udivmoddi4+0x224>
 800042e:	f1a9 0102 	sub.w	r1, r9, #2
 8000432:	443a      	add	r2, r7
 8000434:	e7bc      	b.n	80003b0 <__udivmoddi4+0x224>
 8000436:	45c6      	cmp	lr, r8
 8000438:	d29b      	bcs.n	8000372 <__udivmoddi4+0x1e6>
 800043a:	ebb8 0302 	subs.w	r3, r8, r2
 800043e:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000442:	3801      	subs	r0, #1
 8000444:	46e1      	mov	r9, ip
 8000446:	e794      	b.n	8000372 <__udivmoddi4+0x1e6>
 8000448:	eba7 0909 	sub.w	r9, r7, r9
 800044c:	444a      	add	r2, r9
 800044e:	fbb2 f9fe 	udiv	r9, r2, lr
 8000452:	f1a8 0c02 	sub.w	ip, r8, #2
 8000456:	fb09 f804 	mul.w	r8, r9, r4
 800045a:	e7db      	b.n	8000414 <__udivmoddi4+0x288>
 800045c:	4603      	mov	r3, r0
 800045e:	e77d      	b.n	800035c <__udivmoddi4+0x1d0>
 8000460:	46d0      	mov	r8, sl
 8000462:	e765      	b.n	8000330 <__udivmoddi4+0x1a4>
 8000464:	4608      	mov	r0, r1
 8000466:	e6fa      	b.n	800025e <__udivmoddi4+0xd2>
 8000468:	443b      	add	r3, r7
 800046a:	3a02      	subs	r2, #2
 800046c:	e730      	b.n	80002d0 <__udivmoddi4+0x144>
 800046e:	f1ac 0c02 	sub.w	ip, ip, #2
 8000472:	443b      	add	r3, r7
 8000474:	e719      	b.n	80002aa <__udivmoddi4+0x11e>
 8000476:	4649      	mov	r1, r9
 8000478:	e79a      	b.n	80003b0 <__udivmoddi4+0x224>
 800047a:	eba2 0209 	sub.w	r2, r2, r9
 800047e:	fbb2 f9fe 	udiv	r9, r2, lr
 8000482:	46c4      	mov	ip, r8
 8000484:	fb09 f804 	mul.w	r8, r9, r4
 8000488:	e7c4      	b.n	8000414 <__udivmoddi4+0x288>
 800048a:	bf00      	nop

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop

08000490 <ADC_Init>:
/**
  * @brief Initializes the ADC hardware
  * @param hadc: Pointer to ADC handle
  */
void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
    // Calibration
    if (HAL_ADCEx_Calibration_Start(hadc) != HAL_OK)
 8000498:	6878      	ldr	r0, [r7, #4]
 800049a:	f001 fae3 	bl	8001a64 <HAL_ADCEx_Calibration_Start>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <ADC_Init+0x18>
    {
        Error_Handler();
 80004a4:	f000 fd9c 	bl	8000fe0 <Error_Handler>
    }
}
 80004a8:	bf00      	nop
 80004aa:	3708      	adds	r7, #8
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}

080004b0 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c2;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup (e.g., 0x4E or 0x7E)

void lcd_send_cmd (char cmd)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b086      	sub	sp, #24
 80004b4:	af02      	add	r7, sp, #8
 80004b6:	4603      	mov	r3, r0
 80004b8:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80004ba:	79fb      	ldrb	r3, [r7, #7]
 80004bc:	f023 030f 	bic.w	r3, r3, #15
 80004c0:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80004c2:	79fb      	ldrb	r3, [r7, #7]
 80004c4:	011b      	lsls	r3, r3, #4
 80004c6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0 (Command mode, Enable high)
 80004c8:	7bfb      	ldrb	r3, [r7, #15]
 80004ca:	f043 030c 	orr.w	r3, r3, #12
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 (Command mode, Enable low)
 80004d2:	7bfb      	ldrb	r3, [r7, #15]
 80004d4:	f043 0308 	orr.w	r3, r3, #8
 80004d8:	b2db      	uxtb	r3, r3
 80004da:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 (Command mode, Enable high)
 80004dc:	7bbb      	ldrb	r3, [r7, #14]
 80004de:	f043 030c 	orr.w	r3, r3, #12
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 (Command mode, Enable low)
 80004e6:	7bbb      	ldrb	r3, [r7, #14]
 80004e8:	f043 0308 	orr.w	r3, r3, #8
 80004ec:	b2db      	uxtb	r3, r3
 80004ee:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80004f0:	f107 0208 	add.w	r2, r7, #8
 80004f4:	2364      	movs	r3, #100	@ 0x64
 80004f6:	9300      	str	r3, [sp, #0]
 80004f8:	2304      	movs	r3, #4
 80004fa:	214e      	movs	r1, #78	@ 0x4e
 80004fc:	4803      	ldr	r0, [pc, #12]	@ (800050c <lcd_send_cmd+0x5c>)
 80004fe:	f001 ff23 	bl	8002348 <HAL_I2C_Master_Transmit>
}
 8000502:	bf00      	nop
 8000504:	3710      	adds	r7, #16
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	200000a8 	.word	0x200000a8

08000510 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b086      	sub	sp, #24
 8000514:	af02      	add	r7, sp, #8
 8000516:	4603      	mov	r3, r0
 8000518:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	f023 030f 	bic.w	r3, r3, #15
 8000520:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000522:	79fb      	ldrb	r3, [r7, #7]
 8000524:	011b      	lsls	r3, r3, #4
 8000526:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1 (Data mode, Enable high)
 8000528:	7bfb      	ldrb	r3, [r7, #15]
 800052a:	f043 030d 	orr.w	r3, r3, #13
 800052e:	b2db      	uxtb	r3, r3
 8000530:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1 (Data mode, Enable low)
 8000532:	7bfb      	ldrb	r3, [r7, #15]
 8000534:	f043 0309 	orr.w	r3, r3, #9
 8000538:	b2db      	uxtb	r3, r3
 800053a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1 (Data mode, Enable high)
 800053c:	7bbb      	ldrb	r3, [r7, #14]
 800053e:	f043 030d 	orr.w	r3, r3, #13
 8000542:	b2db      	uxtb	r3, r3
 8000544:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1 (Data mode, Enable low)
 8000546:	7bbb      	ldrb	r3, [r7, #14]
 8000548:	f043 0309 	orr.w	r3, r3, #9
 800054c:	b2db      	uxtb	r3, r3
 800054e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000550:	f107 0208 	add.w	r2, r7, #8
 8000554:	2364      	movs	r3, #100	@ 0x64
 8000556:	9300      	str	r3, [sp, #0]
 8000558:	2304      	movs	r3, #4
 800055a:	214e      	movs	r1, #78	@ 0x4e
 800055c:	4803      	ldr	r0, [pc, #12]	@ (800056c <lcd_send_data+0x5c>)
 800055e:	f001 fef3 	bl	8002348 <HAL_I2C_Master_Transmit>
}
 8000562:	bf00      	nop
 8000564:	3710      	adds	r7, #16
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	200000a8 	.word	0x200000a8

08000570 <lcd_put_cur>:
	HAL_Delay(2); // Wait for clear command to execute
	lcd_send_cmd (0x80); // Set cursor to home position (0,0)
}

void lcd_put_cur(int row, int col)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
    switch (row)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d003      	beq.n	8000588 <lcd_put_cur+0x18>
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	2b01      	cmp	r3, #1
 8000584:	d005      	beq.n	8000592 <lcd_put_cur+0x22>
 8000586:	e009      	b.n	800059c <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80; // Address for first row
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800058e:	603b      	str	r3, [r7, #0]
            break;
 8000590:	e004      	b.n	800059c <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0; // Address for second row
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000598:	603b      	str	r3, [r7, #0]
            break;
 800059a:	bf00      	nop
    }

    lcd_send_cmd (col);
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	4618      	mov	r0, r3
 80005a2:	f7ff ff85 	bl	80004b0 <lcd_send_cmd>
}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}

080005ae <lcd_init>:


void lcd_init (void)
{
 80005ae:	b580      	push	{r7, lr}
 80005b0:	af00      	add	r7, sp, #0
	// 4 bit initialisation sequence (standard for PCF8574 based LCDs)
	HAL_Delay(50);  // wait for >40ms after power-on
 80005b2:	2032      	movs	r0, #50	@ 0x32
 80005b4:	f000 ffc6 	bl	8001544 <HAL_Delay>
	lcd_send_cmd (0x30); // Function set (8-bit mode)
 80005b8:	2030      	movs	r0, #48	@ 0x30
 80005ba:	f7ff ff79 	bl	80004b0 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80005be:	2005      	movs	r0, #5
 80005c0:	f000 ffc0 	bl	8001544 <HAL_Delay>
	lcd_send_cmd (0x30); // Function set (8-bit mode)
 80005c4:	2030      	movs	r0, #48	@ 0x30
 80005c6:	f7ff ff73 	bl	80004b0 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80005ca:	2001      	movs	r0, #1
 80005cc:	f000 ffba 	bl	8001544 <HAL_Delay>
	lcd_send_cmd (0x30); // Function set (8-bit mode)
 80005d0:	2030      	movs	r0, #48	@ 0x30
 80005d2:	f7ff ff6d 	bl	80004b0 <lcd_send_cmd>
	HAL_Delay(10);
 80005d6:	200a      	movs	r0, #10
 80005d8:	f000 ffb4 	bl	8001544 <HAL_Delay>
	lcd_send_cmd (0x20);  // Function set (4-bit mode)
 80005dc:	2020      	movs	r0, #32
 80005de:	f7ff ff67 	bl	80004b0 <lcd_send_cmd>
	HAL_Delay(10);
 80005e2:	200a      	movs	r0, #10
 80005e4:	f000 ffae 	bl	8001544 <HAL_Delay>

  // Display initialisation commands (after 4-bit mode is set)
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80005e8:	2028      	movs	r0, #40	@ 0x28
 80005ea:	f7ff ff61 	bl	80004b0 <lcd_send_cmd>
	HAL_Delay(1);
 80005ee:	2001      	movs	r0, #1
 80005f0:	f000 ffa8 	bl	8001544 <HAL_Delay>
	lcd_send_cmd (0x08); // Display on/off control --> D=0,C=0, B=0  ---> display off
 80005f4:	2008      	movs	r0, #8
 80005f6:	f7ff ff5b 	bl	80004b0 <lcd_send_cmd>
	HAL_Delay(1);
 80005fa:	2001      	movs	r0, #1
 80005fc:	f000 ffa2 	bl	8001544 <HAL_Delay>
	lcd_send_cmd (0x01);  // Clear display
 8000600:	2001      	movs	r0, #1
 8000602:	f7ff ff55 	bl	80004b0 <lcd_send_cmd>
	HAL_Delay(2); // Longer delay for clear display
 8000606:	2002      	movs	r0, #2
 8000608:	f000 ff9c 	bl	8001544 <HAL_Delay>
	lcd_send_cmd (0x06); // Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800060c:	2006      	movs	r0, #6
 800060e:	f7ff ff4f 	bl	80004b0 <lcd_send_cmd>
	HAL_Delay(1);
 8000612:	2001      	movs	r0, #1
 8000614:	f000 ff96 	bl	8001544 <HAL_Delay>
	lcd_send_cmd (0x0C); // Display on/off control --> D = 1, C and B = 0. (Display ON, Cursor OFF, Blink OFF)
 8000618:	200c      	movs	r0, #12
 800061a:	f7ff ff49 	bl	80004b0 <lcd_send_cmd>
}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}

08000622 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000622:	b580      	push	{r7, lr}
 8000624:	b082      	sub	sp, #8
 8000626:	af00      	add	r7, sp, #0
 8000628:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800062a:	e006      	b.n	800063a <lcd_send_string+0x18>
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	1c5a      	adds	r2, r3, #1
 8000630:	607a      	str	r2, [r7, #4]
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	4618      	mov	r0, r3
 8000636:	f7ff ff6b 	bl	8000510 <lcd_send_data>
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d1f4      	bne.n	800062c <lcd_send_string+0xa>
}
 8000642:	bf00      	nop
 8000644:	bf00      	nop
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <LoRa_WriteReg>:

#define NSS_LOW()   HAL_GPIO_WritePin(LORA_NSS_PORT, LORA_NSS_PIN, GPIO_PIN_RESET)
#define NSS_HIGH()  HAL_GPIO_WritePin(LORA_NSS_PORT, LORA_NSS_PIN, GPIO_PIN_SET)

/* --- low-level SPI helpers --- */
void LoRa_WriteReg(uint8_t addr, uint8_t data) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	460a      	mov	r2, r1
 8000656:	71fb      	strb	r3, [r7, #7]
 8000658:	4613      	mov	r3, r2
 800065a:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2] = { (uint8_t)(addr | 0x80), data };
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000662:	b2db      	uxtb	r3, r3
 8000664:	733b      	strb	r3, [r7, #12]
 8000666:	79bb      	ldrb	r3, [r7, #6]
 8000668:	737b      	strb	r3, [r7, #13]
    NSS_LOW();
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000670:	480a      	ldr	r0, [pc, #40]	@ (800069c <LoRa_WriteReg+0x50>)
 8000672:	f001 fd0d 	bl	8002090 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, buf, 2, HAL_MAX_DELAY);
 8000676:	f107 010c 	add.w	r1, r7, #12
 800067a:	f04f 33ff 	mov.w	r3, #4294967295
 800067e:	2202      	movs	r2, #2
 8000680:	4807      	ldr	r0, [pc, #28]	@ (80006a0 <LoRa_WriteReg+0x54>)
 8000682:	f003 fb73 	bl	8003d6c <HAL_SPI_Transmit>
    NSS_HIGH();
 8000686:	2201      	movs	r2, #1
 8000688:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800068c:	4803      	ldr	r0, [pc, #12]	@ (800069c <LoRa_WriteReg+0x50>)
 800068e:	f001 fcff 	bl	8002090 <HAL_GPIO_WritePin>
}
 8000692:	bf00      	nop
 8000694:	3710      	adds	r7, #16
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40010800 	.word	0x40010800
 80006a0:	200000fc 	.word	0x200000fc

080006a4 <LoRa_ReadReg>:

uint8_t LoRa_ReadReg(uint8_t addr) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	71fb      	strb	r3, [r7, #7]
    uint8_t tx = addr & 0x7F;
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	73fb      	strb	r3, [r7, #15]
    uint8_t rx = 0;
 80006b8:	2300      	movs	r3, #0
 80006ba:	73bb      	strb	r3, [r7, #14]
    NSS_LOW();
 80006bc:	2200      	movs	r2, #0
 80006be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006c2:	480f      	ldr	r0, [pc, #60]	@ (8000700 <LoRa_ReadReg+0x5c>)
 80006c4:	f001 fce4 	bl	8002090 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &tx, 1, HAL_MAX_DELAY);
 80006c8:	f107 010f 	add.w	r1, r7, #15
 80006cc:	f04f 33ff 	mov.w	r3, #4294967295
 80006d0:	2201      	movs	r2, #1
 80006d2:	480c      	ldr	r0, [pc, #48]	@ (8000704 <LoRa_ReadReg+0x60>)
 80006d4:	f003 fb4a 	bl	8003d6c <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, &rx, 1, HAL_MAX_DELAY);
 80006d8:	f107 010e 	add.w	r1, r7, #14
 80006dc:	f04f 33ff 	mov.w	r3, #4294967295
 80006e0:	2201      	movs	r2, #1
 80006e2:	4808      	ldr	r0, [pc, #32]	@ (8000704 <LoRa_ReadReg+0x60>)
 80006e4:	f003 fc86 	bl	8003ff4 <HAL_SPI_Receive>
    NSS_HIGH();
 80006e8:	2201      	movs	r2, #1
 80006ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006ee:	4804      	ldr	r0, [pc, #16]	@ (8000700 <LoRa_ReadReg+0x5c>)
 80006f0:	f001 fcce 	bl	8002090 <HAL_GPIO_WritePin>
    return rx;
 80006f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40010800 	.word	0x40010800
 8000704:	200000fc 	.word	0x200000fc

08000708 <LoRa_WriteBuffer>:

void LoRa_WriteBuffer(uint8_t addr, const uint8_t *buffer, uint8_t size) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	6039      	str	r1, [r7, #0]
 8000712:	71fb      	strb	r3, [r7, #7]
 8000714:	4613      	mov	r3, r2
 8000716:	71bb      	strb	r3, [r7, #6]
    uint8_t a = addr | 0x80;
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800071e:	b2db      	uxtb	r3, r3
 8000720:	73fb      	strb	r3, [r7, #15]
    NSS_LOW();
 8000722:	2200      	movs	r2, #0
 8000724:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000728:	480e      	ldr	r0, [pc, #56]	@ (8000764 <LoRa_WriteBuffer+0x5c>)
 800072a:	f001 fcb1 	bl	8002090 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &a, 1, HAL_MAX_DELAY);
 800072e:	f107 010f 	add.w	r1, r7, #15
 8000732:	f04f 33ff 	mov.w	r3, #4294967295
 8000736:	2201      	movs	r2, #1
 8000738:	480b      	ldr	r0, [pc, #44]	@ (8000768 <LoRa_WriteBuffer+0x60>)
 800073a:	f003 fb17 	bl	8003d6c <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)buffer, size, HAL_MAX_DELAY);
 800073e:	79bb      	ldrb	r3, [r7, #6]
 8000740:	b29a      	uxth	r2, r3
 8000742:	f04f 33ff 	mov.w	r3, #4294967295
 8000746:	6839      	ldr	r1, [r7, #0]
 8000748:	4807      	ldr	r0, [pc, #28]	@ (8000768 <LoRa_WriteBuffer+0x60>)
 800074a:	f003 fb0f 	bl	8003d6c <HAL_SPI_Transmit>
    NSS_HIGH();
 800074e:	2201      	movs	r2, #1
 8000750:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000754:	4803      	ldr	r0, [pc, #12]	@ (8000764 <LoRa_WriteBuffer+0x5c>)
 8000756:	f001 fc9b 	bl	8002090 <HAL_GPIO_WritePin>
}
 800075a:	bf00      	nop
 800075c:	3710      	adds	r7, #16
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40010800 	.word	0x40010800
 8000768:	200000fc 	.word	0x200000fc

0800076c <LoRa_ReadBuffer>:

void LoRa_ReadBuffer(uint8_t addr, uint8_t *buffer, uint8_t size) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	6039      	str	r1, [r7, #0]
 8000776:	71fb      	strb	r3, [r7, #7]
 8000778:	4613      	mov	r3, r2
 800077a:	71bb      	strb	r3, [r7, #6]
    uint8_t a = addr & 0x7F;
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000782:	b2db      	uxtb	r3, r3
 8000784:	73fb      	strb	r3, [r7, #15]
    NSS_LOW();
 8000786:	2200      	movs	r2, #0
 8000788:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800078c:	480e      	ldr	r0, [pc, #56]	@ (80007c8 <LoRa_ReadBuffer+0x5c>)
 800078e:	f001 fc7f 	bl	8002090 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &a, 1, HAL_MAX_DELAY);
 8000792:	f107 010f 	add.w	r1, r7, #15
 8000796:	f04f 33ff 	mov.w	r3, #4294967295
 800079a:	2201      	movs	r2, #1
 800079c:	480b      	ldr	r0, [pc, #44]	@ (80007cc <LoRa_ReadBuffer+0x60>)
 800079e:	f003 fae5 	bl	8003d6c <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, buffer, size, HAL_MAX_DELAY);
 80007a2:	79bb      	ldrb	r3, [r7, #6]
 80007a4:	b29a      	uxth	r2, r3
 80007a6:	f04f 33ff 	mov.w	r3, #4294967295
 80007aa:	6839      	ldr	r1, [r7, #0]
 80007ac:	4807      	ldr	r0, [pc, #28]	@ (80007cc <LoRa_ReadBuffer+0x60>)
 80007ae:	f003 fc21 	bl	8003ff4 <HAL_SPI_Receive>
    NSS_HIGH();
 80007b2:	2201      	movs	r2, #1
 80007b4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007b8:	4803      	ldr	r0, [pc, #12]	@ (80007c8 <LoRa_ReadBuffer+0x5c>)
 80007ba:	f001 fc69 	bl	8002090 <HAL_GPIO_WritePin>
}
 80007be:	bf00      	nop
 80007c0:	3710      	adds	r7, #16
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40010800 	.word	0x40010800
 80007cc:	200000fc 	.word	0x200000fc

080007d0 <LoRa_Reset>:

/* --- reset --- */
void LoRa_Reset(void) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LORA_RESET_PORT, LORA_RESET_PIN, GPIO_PIN_RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2140      	movs	r1, #64	@ 0x40
 80007d8:	4807      	ldr	r0, [pc, #28]	@ (80007f8 <LoRa_Reset+0x28>)
 80007da:	f001 fc59 	bl	8002090 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 80007de:	2002      	movs	r0, #2
 80007e0:	f000 feb0 	bl	8001544 <HAL_Delay>
    HAL_GPIO_WritePin(LORA_RESET_PORT, LORA_RESET_PIN, GPIO_PIN_SET);
 80007e4:	2201      	movs	r2, #1
 80007e6:	2140      	movs	r1, #64	@ 0x40
 80007e8:	4803      	ldr	r0, [pc, #12]	@ (80007f8 <LoRa_Reset+0x28>)
 80007ea:	f001 fc51 	bl	8002090 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80007ee:	200a      	movs	r0, #10
 80007f0:	f000 fea8 	bl	8001544 <HAL_Delay>
}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40010c00 	.word	0x40010c00

080007fc <LoRa_SetFrequency>:

/* --- set frequency (Hz) --- */
void LoRa_SetFrequency(uint32_t freqHz) {
 80007fc:	b5b0      	push	{r4, r5, r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
    /* FRF = freq * 2^19 / 32e6 */
    uint64_t frf = ((uint64_t)freqHz << 19) / 32000000ULL;
 8000804:	6879      	ldr	r1, [r7, #4]
 8000806:	2000      	movs	r0, #0
 8000808:	460a      	mov	r2, r1
 800080a:	4603      	mov	r3, r0
 800080c:	0b55      	lsrs	r5, r2, #13
 800080e:	04d4      	lsls	r4, r2, #19
 8000810:	4a18      	ldr	r2, [pc, #96]	@ (8000874 <LoRa_SetFrequency+0x78>)
 8000812:	f04f 0300 	mov.w	r3, #0
 8000816:	4620      	mov	r0, r4
 8000818:	4629      	mov	r1, r5
 800081a:	f7ff fc9f 	bl	800015c <__aeabi_uldivmod>
 800081e:	4602      	mov	r2, r0
 8000820:	460b      	mov	r3, r1
 8000822:	e9c7 2302 	strd	r2, r3, [r7, #8]
    LoRa_WriteReg(0x06, (uint8_t)(frf >> 16));
 8000826:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800082a:	f04f 0200 	mov.w	r2, #0
 800082e:	f04f 0300 	mov.w	r3, #0
 8000832:	0c02      	lsrs	r2, r0, #16
 8000834:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000838:	0c0b      	lsrs	r3, r1, #16
 800083a:	b2d3      	uxtb	r3, r2
 800083c:	4619      	mov	r1, r3
 800083e:	2006      	movs	r0, #6
 8000840:	f7ff ff04 	bl	800064c <LoRa_WriteReg>
    LoRa_WriteReg(0x07, (uint8_t)(frf >> 8));
 8000844:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000848:	f04f 0200 	mov.w	r2, #0
 800084c:	f04f 0300 	mov.w	r3, #0
 8000850:	0a02      	lsrs	r2, r0, #8
 8000852:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000856:	0a0b      	lsrs	r3, r1, #8
 8000858:	b2d3      	uxtb	r3, r2
 800085a:	4619      	mov	r1, r3
 800085c:	2007      	movs	r0, #7
 800085e:	f7ff fef5 	bl	800064c <LoRa_WriteReg>
    LoRa_WriteReg(0x08, (uint8_t)(frf >> 0));
 8000862:	7a3b      	ldrb	r3, [r7, #8]
 8000864:	4619      	mov	r1, r3
 8000866:	2008      	movs	r0, #8
 8000868:	f7ff fef0 	bl	800064c <LoRa_WriteReg>
}
 800086c:	bf00      	nop
 800086e:	3710      	adds	r7, #16
 8000870:	46bd      	mov	sp, r7
 8000872:	bdb0      	pop	{r4, r5, r7, pc}
 8000874:	01e84800 	.word	0x01e84800

08000878 <LoRa_Init>:

/* --- init with settings that match Arduino LoRa defaults --- */
void LoRa_Init(void) {
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
    LoRa_Reset();
 800087c:	f7ff ffa8 	bl	80007d0 <LoRa_Reset>

    /* Sleep, then LoRa sleep mode */
    LoRa_WriteReg(0x01, 0x00);
 8000880:	2100      	movs	r1, #0
 8000882:	2001      	movs	r0, #1
 8000884:	f7ff fee2 	bl	800064c <LoRa_WriteReg>
    HAL_Delay(5);
 8000888:	2005      	movs	r0, #5
 800088a:	f000 fe5b 	bl	8001544 <HAL_Delay>
    LoRa_WriteReg(0x01, 0x80);
 800088e:	2180      	movs	r1, #128	@ 0x80
 8000890:	2001      	movs	r0, #1
 8000892:	f7ff fedb 	bl	800064c <LoRa_WriteReg>
    HAL_Delay(5);
 8000896:	2005      	movs	r0, #5
 8000898:	f000 fe54 	bl	8001544 <HAL_Delay>

    /* Frequency (433 MHz) */
    LoRa_SetFrequency(433000000);
 800089c:	481d      	ldr	r0, [pc, #116]	@ (8000914 <LoRa_Init+0x9c>)
 800089e:	f7ff ffad 	bl	80007fc <LoRa_SetFrequency>

    /* PA config: PA_BOOST, max power (common for SX1278 Ra-02) */

    LoRa_WriteReg(0x09, 0x8F); // PA_BOOST, max power
 80008a2:	218f      	movs	r1, #143	@ 0x8f
 80008a4:	2009      	movs	r0, #9
 80008a6:	f7ff fed1 	bl	800064c <LoRa_WriteReg>
 // RegPaConfig

    /* Enable high-power PA if module supports it (optional) */
    LoRa_WriteReg(0x4D, 0x87); // RegPaDac (only on SX1276/78 family)
 80008aa:	2187      	movs	r1, #135	@ 0x87
 80008ac:	204d      	movs	r0, #77	@ 0x4d
 80008ae:	f7ff fecd 	bl	800064c <LoRa_WriteReg>

    /* LNA */
    LoRa_WriteReg(0x0C, 0x23);
 80008b2:	2123      	movs	r1, #35	@ 0x23
 80008b4:	200c      	movs	r0, #12
 80008b6:	f7ff fec9 	bl	800064c <LoRa_WriteReg>
    /* Modem config:
       RegModemConfig1 = 0x72 -> BW=125kHz, CR=4/5, Explicit header
       RegModemConfig2 = 0x74 -> SF7, CRC ON (Arduino default)
       RegModemConfig3 = 0x04 -> LowDataRateOptimize off, AGC Auto On
    */
    LoRa_WriteReg(0x1D, 0x72);
 80008ba:	2172      	movs	r1, #114	@ 0x72
 80008bc:	201d      	movs	r0, #29
 80008be:	f7ff fec5 	bl	800064c <LoRa_WriteReg>
    LoRa_WriteReg(0x1E, 0x74);
 80008c2:	2174      	movs	r1, #116	@ 0x74
 80008c4:	201e      	movs	r0, #30
 80008c6:	f7ff fec1 	bl	800064c <LoRa_WriteReg>
    LoRa_WriteReg(0x26, 0x04);
 80008ca:	2104      	movs	r1, #4
 80008cc:	2026      	movs	r0, #38	@ 0x26
 80008ce:	f7ff febd 	bl	800064c <LoRa_WriteReg>

    /* Preamble = 8 */
    LoRa_WriteReg(0x20, 0x00);
 80008d2:	2100      	movs	r1, #0
 80008d4:	2020      	movs	r0, #32
 80008d6:	f7ff feb9 	bl	800064c <LoRa_WriteReg>
    LoRa_WriteReg(0x21, 0x08);
 80008da:	2108      	movs	r1, #8
 80008dc:	2021      	movs	r0, #33	@ 0x21
 80008de:	f7ff feb5 	bl	800064c <LoRa_WriteReg>

    /* SyncWord = 0x22 (matches LoRa.setSyncWord(0x22) on Arduino) */
    LoRa_WriteReg(0x39, 0x22);
 80008e2:	2122      	movs	r1, #34	@ 0x22
 80008e4:	2039      	movs	r0, #57	@ 0x39
 80008e6:	f7ff feb1 	bl	800064c <LoRa_WriteReg>

    /* Map DIO0 = RxDone/TxDone as normal (we'll poll IRQs) */
    LoRa_WriteReg(0x40, 0x00);
 80008ea:	2100      	movs	r1, #0
 80008ec:	2040      	movs	r0, #64	@ 0x40
 80008ee:	f7ff fead 	bl	800064c <LoRa_WriteReg>

    /* Clear IRQs and go to continuous RX */
    LoRa_WriteReg(0x12, 0xFF);
 80008f2:	21ff      	movs	r1, #255	@ 0xff
 80008f4:	2012      	movs	r0, #18
 80008f6:	f7ff fea9 	bl	800064c <LoRa_WriteReg>
    LoRa_WriteReg(0x01, 0x81); // Standby
 80008fa:	2181      	movs	r1, #129	@ 0x81
 80008fc:	2001      	movs	r0, #1
 80008fe:	f7ff fea5 	bl	800064c <LoRa_WriteReg>
    HAL_Delay(2);
 8000902:	2002      	movs	r0, #2
 8000904:	f000 fe1e 	bl	8001544 <HAL_Delay>
    LoRa_WriteReg(0x01, 0x85); // Continuous RX
 8000908:	2185      	movs	r1, #133	@ 0x85
 800090a:	2001      	movs	r0, #1
 800090c:	f7ff fe9e 	bl	800064c <LoRa_WriteReg>
}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	19cf0e40 	.word	0x19cf0e40

08000918 <LoRa_SendPacket>:

/* --- send packet, poll TxDone, return to RX --- */
void LoRa_SendPacket(const uint8_t *buffer, uint8_t size) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	460b      	mov	r3, r1
 8000922:	70fb      	strb	r3, [r7, #3]
    /* Standby */
    LoRa_WriteReg(0x01, 0x81);
 8000924:	2181      	movs	r1, #129	@ 0x81
 8000926:	2001      	movs	r0, #1
 8000928:	f7ff fe90 	bl	800064c <LoRa_WriteReg>

    /* Reset FIFO pointers */
    LoRa_WriteReg(0x0E, 0x00);
 800092c:	2100      	movs	r1, #0
 800092e:	200e      	movs	r0, #14
 8000930:	f7ff fe8c 	bl	800064c <LoRa_WriteReg>
    LoRa_WriteReg(0x0D, 0x00);
 8000934:	2100      	movs	r1, #0
 8000936:	200d      	movs	r0, #13
 8000938:	f7ff fe88 	bl	800064c <LoRa_WriteReg>

    /* Write payload */
    LoRa_WriteBuffer(0x00, buffer, size);
 800093c:	78fb      	ldrb	r3, [r7, #3]
 800093e:	461a      	mov	r2, r3
 8000940:	6879      	ldr	r1, [r7, #4]
 8000942:	2000      	movs	r0, #0
 8000944:	f7ff fee0 	bl	8000708 <LoRa_WriteBuffer>
    LoRa_WriteReg(0x22, size);
 8000948:	78fb      	ldrb	r3, [r7, #3]
 800094a:	4619      	mov	r1, r3
 800094c:	2022      	movs	r0, #34	@ 0x22
 800094e:	f7ff fe7d 	bl	800064c <LoRa_WriteReg>

    /* Clear IRQs */
    LoRa_WriteReg(0x12, 0xFF);
 8000952:	21ff      	movs	r1, #255	@ 0xff
 8000954:	2012      	movs	r0, #18
 8000956:	f7ff fe79 	bl	800064c <LoRa_WriteReg>

    /* Enter TX */
    LoRa_WriteReg(0x01, 0x83);
 800095a:	2183      	movs	r1, #131	@ 0x83
 800095c:	2001      	movs	r0, #1
 800095e:	f7ff fe75 	bl	800064c <LoRa_WriteReg>

    /* Wait for TxDone */
    uint32_t t0 = HAL_GetTick();
 8000962:	f000 fde5 	bl	8001530 <HAL_GetTick>
 8000966:	60f8      	str	r0, [r7, #12]
    while ((LoRa_ReadReg(0x12) & 0x08) == 0) {
 8000968:	e00a      	b.n	8000980 <LoRa_SendPacket+0x68>
        if ((HAL_GetTick() - t0) > 2000) break; // timeout 2s
 800096a:	f000 fde1 	bl	8001530 <HAL_GetTick>
 800096e:	4602      	mov	r2, r0
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	1ad3      	subs	r3, r2, r3
 8000974:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000978:	d80b      	bhi.n	8000992 <LoRa_SendPacket+0x7a>
        HAL_Delay(1);
 800097a:	2001      	movs	r0, #1
 800097c:	f000 fde2 	bl	8001544 <HAL_Delay>
    while ((LoRa_ReadReg(0x12) & 0x08) == 0) {
 8000980:	2012      	movs	r0, #18
 8000982:	f7ff fe8f 	bl	80006a4 <LoRa_ReadReg>
 8000986:	4603      	mov	r3, r0
 8000988:	f003 0308 	and.w	r3, r3, #8
 800098c:	2b00      	cmp	r3, #0
 800098e:	d0ec      	beq.n	800096a <LoRa_SendPacket+0x52>
 8000990:	e000      	b.n	8000994 <LoRa_SendPacket+0x7c>
        if ((HAL_GetTick() - t0) > 2000) break; // timeout 2s
 8000992:	bf00      	nop
    }

    /* Clear TxDone (if set) */
    LoRa_WriteReg(0x12, 0x08);
 8000994:	2108      	movs	r1, #8
 8000996:	2012      	movs	r0, #18
 8000998:	f7ff fe58 	bl	800064c <LoRa_WriteReg>

    /* Back to RX */
    LoRa_WriteReg(0x01, 0x85);
 800099c:	2185      	movs	r1, #133	@ 0x85
 800099e:	2001      	movs	r0, #1
 80009a0:	f7ff fe54 	bl	800064c <LoRa_WriteReg>
}
 80009a4:	bf00      	nop
 80009a6:	3710      	adds	r7, #16
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <LoRa_ReceivePacket>:

/* --- receive helper: returns length or 0 --- */
uint8_t LoRa_ReceivePacket(uint8_t *buffer) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
    uint8_t irq = LoRa_ReadReg(0x12);
 80009b4:	2012      	movs	r0, #18
 80009b6:	f7ff fe75 	bl	80006a4 <LoRa_ReadReg>
 80009ba:	4603      	mov	r3, r0
 80009bc:	73fb      	strb	r3, [r7, #15]
    if (irq & 0x40) { // RxDone
 80009be:	7bfb      	ldrb	r3, [r7, #15]
 80009c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d025      	beq.n	8000a14 <LoRa_ReceivePacket+0x68>
        /* If CRC error bit (0x20) is set, ignore */
        if (irq & 0x20) {
 80009c8:	7bfb      	ldrb	r3, [r7, #15]
 80009ca:	f003 0320 	and.w	r3, r3, #32
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d005      	beq.n	80009de <LoRa_ReceivePacket+0x32>
            /* CRC error */
            LoRa_WriteReg(0x12, 0xFF);
 80009d2:	21ff      	movs	r1, #255	@ 0xff
 80009d4:	2012      	movs	r0, #18
 80009d6:	f7ff fe39 	bl	800064c <LoRa_WriteReg>
            return 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	e01b      	b.n	8000a16 <LoRa_ReceivePacket+0x6a>
        }
        uint8_t nb = LoRa_ReadReg(0x13);   // RegRxNbBytes
 80009de:	2013      	movs	r0, #19
 80009e0:	f7ff fe60 	bl	80006a4 <LoRa_ReadReg>
 80009e4:	4603      	mov	r3, r0
 80009e6:	73bb      	strb	r3, [r7, #14]
        uint8_t addr = LoRa_ReadReg(0x10); // RegFifoRxCurrentAddr
 80009e8:	2010      	movs	r0, #16
 80009ea:	f7ff fe5b 	bl	80006a4 <LoRa_ReadReg>
 80009ee:	4603      	mov	r3, r0
 80009f0:	737b      	strb	r3, [r7, #13]
        LoRa_WriteReg(0x0D, addr);
 80009f2:	7b7b      	ldrb	r3, [r7, #13]
 80009f4:	4619      	mov	r1, r3
 80009f6:	200d      	movs	r0, #13
 80009f8:	f7ff fe28 	bl	800064c <LoRa_WriteReg>
        LoRa_ReadBuffer(0x00, buffer, nb);
 80009fc:	7bbb      	ldrb	r3, [r7, #14]
 80009fe:	461a      	mov	r2, r3
 8000a00:	6879      	ldr	r1, [r7, #4]
 8000a02:	2000      	movs	r0, #0
 8000a04:	f7ff feb2 	bl	800076c <LoRa_ReadBuffer>
        LoRa_WriteReg(0x12, 0xFF); // clear IRQs
 8000a08:	21ff      	movs	r1, #255	@ 0xff
 8000a0a:	2012      	movs	r0, #18
 8000a0c:	f7ff fe1e 	bl	800064c <LoRa_WriteReg>
        return nb;
 8000a10:	7bbb      	ldrb	r3, [r7, #14]
 8000a12:	e000      	b.n	8000a16 <LoRa_ReceivePacket+0x6a>
    }
    return 0;
 8000a14:	2300      	movs	r3, #0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
	...

08000a20 <Debug_Print>:
static void MX_USART1_UART_Init(void);
static void MX_I2C2_Init(void);
static uint8_t z = 0;

/* USER CODE BEGIN 0 */
void Debug_Print(char *msg) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	f7ff fb8f 	bl	800014c <strlen>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	f04f 33ff 	mov.w	r3, #4294967295
 8000a36:	6879      	ldr	r1, [r7, #4]
 8000a38:	4803      	ldr	r0, [pc, #12]	@ (8000a48 <Debug_Print+0x28>)
 8000a3a:	f003 fef8 	bl	800482e <HAL_UART_Transmit>
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000154 	.word	0x20000154

08000a4c <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b0a0      	sub	sp, #128	@ 0x80
 8000a50:	af02      	add	r7, sp, #8

  /* MCU Configuration */
  HAL_Init();
 8000a52:	f000 fd15 	bl	8001480 <HAL_Init>
  SystemClock_Config();
 8000a56:	f000 f8f5 	bl	8000c44 <SystemClock_Config>

  MX_GPIO_Init();
 8000a5a:	f000 fa19 	bl	8000e90 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000a5e:	f000 f94b 	bl	8000cf8 <MX_ADC1_Init>
//  MX_RTC_Init();
  MX_SPI1_Init();
 8000a62:	f000 f9b5 	bl	8000dd0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000a66:	f000 f9e9 	bl	8000e3c <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8000a6a:	f000 f983 	bl	8000d74 <MX_I2C2_Init>

  /* USER CODE BEGIN 2 */
  lcd_init();
 8000a6e:	f7ff fd9e 	bl	80005ae <lcd_init>
  ADC_Init(&hadc1);
 8000a72:	4863      	ldr	r0, [pc, #396]	@ (8000c00 <main+0x1b4>)
 8000a74:	f7ff fd0c 	bl	8000490 <ADC_Init>
  LoRa_Init();
 8000a78:	f7ff fefe 	bl	8000878 <LoRa_Init>

  Debug_Print("System Initialized\r\n");uint8_t modem = LoRa_ReadReg(0x1D);
 8000a7c:	4861      	ldr	r0, [pc, #388]	@ (8000c04 <main+0x1b8>)
 8000a7e:	f7ff ffcf 	bl	8000a20 <Debug_Print>
 8000a82:	201d      	movs	r0, #29
 8000a84:	f7ff fe0e 	bl	80006a4 <LoRa_ReadReg>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
  uint8_t modem2 = LoRa_ReadReg(0x1E);
 8000a8e:	201e      	movs	r0, #30
 8000a90:	f7ff fe08 	bl	80006a4 <LoRa_ReadReg>
 8000a94:	4603      	mov	r3, r0
 8000a96:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
  char dbg[50];
  sprintf(dbg, "ModemCfg1=0x%02X, ModemCfg2=0x%02X\r\n", modem, modem2);
 8000a9a:	f897 2073 	ldrb.w	r2, [r7, #115]	@ 0x73
 8000a9e:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8000aa2:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8000aa6:	4958      	ldr	r1, [pc, #352]	@ (8000c08 <main+0x1bc>)
 8000aa8:	f004 f896 	bl	8004bd8 <siprintf>
  Debug_Print(dbg);
 8000aac:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff ffb5 	bl	8000a20 <Debug_Print>
  /* USER CODE END 2 */

  /* Infinite loop */
  while (1) {
      // === Verify LoRa chip ===
      uint8_t version = LoRa_ReadReg(0x42);  // SX1278 RegVersion
 8000ab6:	2042      	movs	r0, #66	@ 0x42
 8000ab8:	f7ff fdf4 	bl	80006a4 <LoRa_ReadReg>
 8000abc:	4603      	mov	r3, r0
 8000abe:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
      if (version != 0x12) {
 8000ac2:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8000ac6:	2b12      	cmp	r3, #18
 8000ac8:	d012      	beq.n	8000af0 <main+0xa4>
          z = 1;
 8000aca:	4b50      	ldr	r3, [pc, #320]	@ (8000c0c <main+0x1c0>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	701a      	strb	r2, [r3, #0]
          char errMsg[50];
          sprintf(errMsg, "LoRa not found! RegVersion=0x%02X\r\n", version);
 8000ad0:	f897 2071 	ldrb.w	r2, [r7, #113]	@ 0x71
 8000ad4:	463b      	mov	r3, r7
 8000ad6:	494e      	ldr	r1, [pc, #312]	@ (8000c10 <main+0x1c4>)
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f004 f87d 	bl	8004bd8 <siprintf>
          Debug_Print(errMsg);
 8000ade:	463b      	mov	r3, r7
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff ff9d 	bl	8000a20 <Debug_Print>
          HAL_Delay(2000);
 8000ae6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000aea:	f000 fd2b 	bl	8001544 <HAL_Delay>
          continue; // retry until chip responds
 8000aee:	e085      	b.n	8000bfc <main+0x1b0>
      }

      // === Transmit PING ===
      uint8_t msg[] = "PING";
 8000af0:	4b48      	ldr	r3, [pc, #288]	@ (8000c14 <main+0x1c8>)
 8000af2:	637b      	str	r3, [r7, #52]	@ 0x34
 8000af4:	2300      	movs	r3, #0
 8000af6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
      LoRa_SendPacket(msg, sizeof(msg) - 1);
 8000afa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000afe:	2104      	movs	r1, #4
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff ff09 	bl	8000918 <LoRa_SendPacket>
      z = 2;
 8000b06:	4b41      	ldr	r3, [pc, #260]	@ (8000c0c <main+0x1c0>)
 8000b08:	2202      	movs	r2, #2
 8000b0a:	701a      	strb	r2, [r3, #0]
      Debug_Print("Sent: PING\r\n");
 8000b0c:	4842      	ldr	r0, [pc, #264]	@ (8000c18 <main+0x1cc>)
 8000b0e:	f7ff ff87 	bl	8000a20 <Debug_Print>

      // === Wait for ACK (max 500 ms) ===
      connectionStatus = 0;
 8000b12:	4b42      	ldr	r3, [pc, #264]	@ (8000c1c <main+0x1d0>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < 20; i++) {   // 20 x 25ms = 500ms
 8000b18:	2300      	movs	r3, #0
 8000b1a:	677b      	str	r3, [r7, #116]	@ 0x74
 8000b1c:	e02d      	b.n	8000b7a <main+0x12e>
          uint8_t len = LoRa_ReceivePacket(rxBuffer);
 8000b1e:	4840      	ldr	r0, [pc, #256]	@ (8000c20 <main+0x1d4>)
 8000b20:	f7ff ff44 	bl	80009ac <LoRa_ReceivePacket>
 8000b24:	4603      	mov	r3, r0
 8000b26:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
          if (len > 0) {
 8000b2a:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d01d      	beq.n	8000b6e <main+0x122>
              rxBuffer[len] = '\0'; // null terminate
 8000b32:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8000b36:	4a3a      	ldr	r2, [pc, #232]	@ (8000c20 <main+0x1d4>)
 8000b38:	2100      	movs	r1, #0
 8000b3a:	54d1      	strb	r1, [r2, r3]
              char dbg[50];
              sprintf(dbg, "Received: %s\r\n", rxBuffer);
 8000b3c:	463b      	mov	r3, r7
 8000b3e:	4a38      	ldr	r2, [pc, #224]	@ (8000c20 <main+0x1d4>)
 8000b40:	4938      	ldr	r1, [pc, #224]	@ (8000c24 <main+0x1d8>)
 8000b42:	4618      	mov	r0, r3
 8000b44:	f004 f848 	bl	8004bd8 <siprintf>
              Debug_Print(dbg);
 8000b48:	463b      	mov	r3, r7
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff ff68 	bl	8000a20 <Debug_Print>

              if (strncmp((char*)rxBuffer, "ACK", 3) == 0) {
 8000b50:	2203      	movs	r2, #3
 8000b52:	4935      	ldr	r1, [pc, #212]	@ (8000c28 <main+0x1dc>)
 8000b54:	4832      	ldr	r0, [pc, #200]	@ (8000c20 <main+0x1d4>)
 8000b56:	f004 f869 	bl	8004c2c <strncmp>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d106      	bne.n	8000b6e <main+0x122>
                  connectionStatus = 1;
 8000b60:	4b2e      	ldr	r3, [pc, #184]	@ (8000c1c <main+0x1d0>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	701a      	strb	r2, [r3, #0]
                  z = 3;
 8000b66:	4b29      	ldr	r3, [pc, #164]	@ (8000c0c <main+0x1c0>)
 8000b68:	2203      	movs	r2, #3
 8000b6a:	701a      	strb	r2, [r3, #0]
 8000b6c:	e008      	b.n	8000b80 <main+0x134>
                  break;
              }
          }
          HAL_Delay(25);
 8000b6e:	2019      	movs	r0, #25
 8000b70:	f000 fce8 	bl	8001544 <HAL_Delay>
      for (int i = 0; i < 20; i++) {   // 20 x 25ms = 500ms
 8000b74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000b76:	3301      	adds	r3, #1
 8000b78:	677b      	str	r3, [r7, #116]	@ 0x74
 8000b7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000b7c:	2b13      	cmp	r3, #19
 8000b7e:	ddce      	ble.n	8000b1e <main+0xd2>
      }

      if (!connectionStatus) {
 8000b80:	4b26      	ldr	r3, [pc, #152]	@ (8000c1c <main+0x1d0>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d106      	bne.n	8000b96 <main+0x14a>
          Debug_Print("Connection: LOST\r\n");
 8000b88:	4828      	ldr	r0, [pc, #160]	@ (8000c2c <main+0x1e0>)
 8000b8a:	f7ff ff49 	bl	8000a20 <Debug_Print>
          z = 4;
 8000b8e:	4b1f      	ldr	r3, [pc, #124]	@ (8000c0c <main+0x1c0>)
 8000b90:	2204      	movs	r2, #4
 8000b92:	701a      	strb	r2, [r3, #0]
 8000b94:	e002      	b.n	8000b9c <main+0x150>
      } else {
          Debug_Print("Connection: OK\r\n");
 8000b96:	4826      	ldr	r0, [pc, #152]	@ (8000c30 <main+0x1e4>)
 8000b98:	f7ff ff42 	bl	8000a20 <Debug_Print>
      }

      // === Display RTC ===
      Get_Time();
 8000b9c:	f000 fa3e 	bl	800101c <Get_Time>
      sprintf(lcdBuffer, "%02d:%02d:%02d", time.hour, time.minutes, time.seconds);
 8000ba0:	4b24      	ldr	r3, [pc, #144]	@ (8000c34 <main+0x1e8>)
 8000ba2:	789b      	ldrb	r3, [r3, #2]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4b23      	ldr	r3, [pc, #140]	@ (8000c34 <main+0x1e8>)
 8000ba8:	785b      	ldrb	r3, [r3, #1]
 8000baa:	4619      	mov	r1, r3
 8000bac:	4b21      	ldr	r3, [pc, #132]	@ (8000c34 <main+0x1e8>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	9300      	str	r3, [sp, #0]
 8000bb2:	460b      	mov	r3, r1
 8000bb4:	4920      	ldr	r1, [pc, #128]	@ (8000c38 <main+0x1ec>)
 8000bb6:	4821      	ldr	r0, [pc, #132]	@ (8000c3c <main+0x1f0>)
 8000bb8:	f004 f80e 	bl	8004bd8 <siprintf>
      lcd_put_cur(0, 0);
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f7ff fcd6 	bl	8000570 <lcd_put_cur>
      lcd_send_string(lcdBuffer);
 8000bc4:	481d      	ldr	r0, [pc, #116]	@ (8000c3c <main+0x1f0>)
 8000bc6:	f7ff fd2c 	bl	8000622 <lcd_send_string>

      sprintf(lcdBuffer, "%02d-%02d-20%02d", time.dayofmonth, time.month, time.year);
 8000bca:	4b1a      	ldr	r3, [pc, #104]	@ (8000c34 <main+0x1e8>)
 8000bcc:	791b      	ldrb	r3, [r3, #4]
 8000bce:	461a      	mov	r2, r3
 8000bd0:	4b18      	ldr	r3, [pc, #96]	@ (8000c34 <main+0x1e8>)
 8000bd2:	795b      	ldrb	r3, [r3, #5]
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4b17      	ldr	r3, [pc, #92]	@ (8000c34 <main+0x1e8>)
 8000bd8:	799b      	ldrb	r3, [r3, #6]
 8000bda:	9300      	str	r3, [sp, #0]
 8000bdc:	460b      	mov	r3, r1
 8000bde:	4918      	ldr	r1, [pc, #96]	@ (8000c40 <main+0x1f4>)
 8000be0:	4816      	ldr	r0, [pc, #88]	@ (8000c3c <main+0x1f0>)
 8000be2:	f003 fff9 	bl	8004bd8 <siprintf>
      lcd_put_cur(1, 0);
 8000be6:	2100      	movs	r1, #0
 8000be8:	2001      	movs	r0, #1
 8000bea:	f7ff fcc1 	bl	8000570 <lcd_put_cur>
      lcd_send_string(lcdBuffer);
 8000bee:	4813      	ldr	r0, [pc, #76]	@ (8000c3c <main+0x1f0>)
 8000bf0:	f7ff fd17 	bl	8000622 <lcd_send_string>

      HAL_Delay(1000);
 8000bf4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bf8:	f000 fca4 	bl	8001544 <HAL_Delay>
  while (1) {
 8000bfc:	e75b      	b.n	8000ab6 <main+0x6a>
 8000bfe:	bf00      	nop
 8000c00:	20000078 	.word	0x20000078
 8000c04:	08005574 	.word	0x08005574
 8000c08:	0800558c 	.word	0x0800558c
 8000c0c:	200001d1 	.word	0x200001d1
 8000c10:	080055b4 	.word	0x080055b4
 8000c14:	474e4950 	.word	0x474e4950
 8000c18:	080055d8 	.word	0x080055d8
 8000c1c:	200001d0 	.word	0x200001d0
 8000c20:	200001b0 	.word	0x200001b0
 8000c24:	080055e8 	.word	0x080055e8
 8000c28:	080055f8 	.word	0x080055f8
 8000c2c:	080055fc 	.word	0x080055fc
 8000c30:	08005610 	.word	0x08005610
 8000c34:	200001d4 	.word	0x200001d4
 8000c38:	08005624 	.word	0x08005624
 8000c3c:	2000019c 	.word	0x2000019c
 8000c40:	08005634 	.word	0x08005634

08000c44 <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b094      	sub	sp, #80	@ 0x50
 8000c48:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c4a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c4e:	2228      	movs	r2, #40	@ 0x28
 8000c50:	2100      	movs	r1, #0
 8000c52:	4618      	mov	r0, r3
 8000c54:	f003 ffe2 	bl	8004c1c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	609a      	str	r2, [r3, #8]
 8000c72:	60da      	str	r2, [r3, #12]

    // Use HSI (8 MHz internal) with PLL
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c74:	2302      	movs	r3, #2
 8000c76:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c7c:	2310      	movs	r3, #16
 8000c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c80:	2302      	movs	r3, #2
 8000c82:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2; // HSI/2 = 4 MHz
 8000c84:	2300      	movs	r3, #0
 8000c86:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;             // 4*16 = 64 MHz
 8000c88:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000c8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) { Error_Handler(); }
 8000c8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c92:	4618      	mov	r0, r3
 8000c94:	f002 fa6a 	bl	800316c <HAL_RCC_OscConfig>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <SystemClock_Config+0x5e>
 8000c9e:	f000 f99f 	bl	8000fe0 <Error_Handler>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000ca2:	230f      	movs	r3, #15
 8000ca4:	617b      	str	r3, [r7, #20]
                                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cb2:	623b      	str	r3, [r7, #32]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) { Error_Handler(); }
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	2102      	movs	r1, #2
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f002 fcd6 	bl	8003670 <HAL_RCC_ClockConfig>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <SystemClock_Config+0x8a>
 8000cca:	f000 f989 	bl	8000fe0 <Error_Handler>

    // Use LSI (internal ~40 kHz) for RTC, and HSI/6 for ADC
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC | RCC_PERIPHCLK_ADC;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	607b      	str	r3, [r7, #4]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000cd2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cd6:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000cd8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000cdc:	60fb      	str	r3, [r7, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) { Error_Handler(); }
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f002 fe53 	bl	800398c <HAL_RCCEx_PeriphCLKConfig>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <SystemClock_Config+0xac>
 8000cec:	f000 f978 	bl	8000fe0 <Error_Handler>
}
 8000cf0:	bf00      	nop
 8000cf2:	3750      	adds	r7, #80	@ 0x50
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cfe:	1d3b      	adds	r3, r7, #4
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d08:	4b18      	ldr	r3, [pc, #96]	@ (8000d6c <MX_ADC1_Init+0x74>)
 8000d0a:	4a19      	ldr	r2, [pc, #100]	@ (8000d70 <MX_ADC1_Init+0x78>)
 8000d0c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d0e:	4b17      	ldr	r3, [pc, #92]	@ (8000d6c <MX_ADC1_Init+0x74>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d14:	4b15      	ldr	r3, [pc, #84]	@ (8000d6c <MX_ADC1_Init+0x74>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d1a:	4b14      	ldr	r3, [pc, #80]	@ (8000d6c <MX_ADC1_Init+0x74>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d20:	4b12      	ldr	r3, [pc, #72]	@ (8000d6c <MX_ADC1_Init+0x74>)
 8000d22:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000d26:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d28:	4b10      	ldr	r3, [pc, #64]	@ (8000d6c <MX_ADC1_Init+0x74>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000d2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d6c <MX_ADC1_Init+0x74>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d34:	480d      	ldr	r0, [pc, #52]	@ (8000d6c <MX_ADC1_Init+0x74>)
 8000d36:	f000 fc29 	bl	800158c <HAL_ADC_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000d40:	f000 f94e 	bl	8000fe0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d50:	1d3b      	adds	r3, r7, #4
 8000d52:	4619      	mov	r1, r3
 8000d54:	4805      	ldr	r0, [pc, #20]	@ (8000d6c <MX_ADC1_Init+0x74>)
 8000d56:	f000 fcf1 	bl	800173c <HAL_ADC_ConfigChannel>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000d60:	f000 f93e 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d64:	bf00      	nop
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000078 	.word	0x20000078
 8000d70:	40012400 	.word	0x40012400

08000d74 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d78:	4b12      	ldr	r3, [pc, #72]	@ (8000dc4 <MX_I2C2_Init+0x50>)
 8000d7a:	4a13      	ldr	r2, [pc, #76]	@ (8000dc8 <MX_I2C2_Init+0x54>)
 8000d7c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000d7e:	4b11      	ldr	r3, [pc, #68]	@ (8000dc4 <MX_I2C2_Init+0x50>)
 8000d80:	4a12      	ldr	r2, [pc, #72]	@ (8000dcc <MX_I2C2_Init+0x58>)
 8000d82:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d84:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc4 <MX_I2C2_Init+0x50>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc4 <MX_I2C2_Init+0x50>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc4 <MX_I2C2_Init+0x50>)
 8000d92:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d96:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d98:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc4 <MX_I2C2_Init+0x50>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000d9e:	4b09      	ldr	r3, [pc, #36]	@ (8000dc4 <MX_I2C2_Init+0x50>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000da4:	4b07      	ldr	r3, [pc, #28]	@ (8000dc4 <MX_I2C2_Init+0x50>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000daa:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <MX_I2C2_Init+0x50>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000db0:	4804      	ldr	r0, [pc, #16]	@ (8000dc4 <MX_I2C2_Init+0x50>)
 8000db2:	f001 f985 	bl	80020c0 <HAL_I2C_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000dbc:	f000 f910 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	200000a8 	.word	0x200000a8
 8000dc8:	40005800 	.word	0x40005800
 8000dcc:	000186a0 	.word	0x000186a0

08000dd0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000dd4:	4b17      	ldr	r3, [pc, #92]	@ (8000e34 <MX_SPI1_Init+0x64>)
 8000dd6:	4a18      	ldr	r2, [pc, #96]	@ (8000e38 <MX_SPI1_Init+0x68>)
 8000dd8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dda:	4b16      	ldr	r3, [pc, #88]	@ (8000e34 <MX_SPI1_Init+0x64>)
 8000ddc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000de0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000de2:	4b14      	ldr	r3, [pc, #80]	@ (8000e34 <MX_SPI1_Init+0x64>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000de8:	4b12      	ldr	r3, [pc, #72]	@ (8000e34 <MX_SPI1_Init+0x64>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dee:	4b11      	ldr	r3, [pc, #68]	@ (8000e34 <MX_SPI1_Init+0x64>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000df4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e34 <MX_SPI1_Init+0x64>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8000e34 <MX_SPI1_Init+0x64>)
 8000dfc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e00:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000e02:	4b0c      	ldr	r3, [pc, #48]	@ (8000e34 <MX_SPI1_Init+0x64>)
 8000e04:	2218      	movs	r2, #24
 8000e06:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e08:	4b0a      	ldr	r3, [pc, #40]	@ (8000e34 <MX_SPI1_Init+0x64>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e0e:	4b09      	ldr	r3, [pc, #36]	@ (8000e34 <MX_SPI1_Init+0x64>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e14:	4b07      	ldr	r3, [pc, #28]	@ (8000e34 <MX_SPI1_Init+0x64>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e1a:	4b06      	ldr	r3, [pc, #24]	@ (8000e34 <MX_SPI1_Init+0x64>)
 8000e1c:	220a      	movs	r2, #10
 8000e1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e20:	4804      	ldr	r0, [pc, #16]	@ (8000e34 <MX_SPI1_Init+0x64>)
 8000e22:	f002 ff1f 	bl	8003c64 <HAL_SPI_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e2c:	f000 f8d8 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	200000fc 	.word	0x200000fc
 8000e38:	40013000 	.word	0x40013000

08000e3c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e40:	4b11      	ldr	r3, [pc, #68]	@ (8000e88 <MX_USART1_UART_Init+0x4c>)
 8000e42:	4a12      	ldr	r2, [pc, #72]	@ (8000e8c <MX_USART1_UART_Init+0x50>)
 8000e44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e46:	4b10      	ldr	r3, [pc, #64]	@ (8000e88 <MX_USART1_UART_Init+0x4c>)
 8000e48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e88 <MX_USART1_UART_Init+0x4c>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e54:	4b0c      	ldr	r3, [pc, #48]	@ (8000e88 <MX_USART1_UART_Init+0x4c>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e88 <MX_USART1_UART_Init+0x4c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e60:	4b09      	ldr	r3, [pc, #36]	@ (8000e88 <MX_USART1_UART_Init+0x4c>)
 8000e62:	220c      	movs	r2, #12
 8000e64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e66:	4b08      	ldr	r3, [pc, #32]	@ (8000e88 <MX_USART1_UART_Init+0x4c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e6c:	4b06      	ldr	r3, [pc, #24]	@ (8000e88 <MX_USART1_UART_Init+0x4c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e72:	4805      	ldr	r0, [pc, #20]	@ (8000e88 <MX_USART1_UART_Init+0x4c>)
 8000e74:	f003 fc8b 	bl	800478e <HAL_UART_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e7e:	f000 f8af 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000154 	.word	0x20000154
 8000e8c:	40013800 	.word	0x40013800

08000e90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b088      	sub	sp, #32
 8000e94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e96:	f107 0310 	add.w	r3, r7, #16
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea4:	4b4a      	ldr	r3, [pc, #296]	@ (8000fd0 <MX_GPIO_Init+0x140>)
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	4a49      	ldr	r2, [pc, #292]	@ (8000fd0 <MX_GPIO_Init+0x140>)
 8000eaa:	f043 0310 	orr.w	r3, r3, #16
 8000eae:	6193      	str	r3, [r2, #24]
 8000eb0:	4b47      	ldr	r3, [pc, #284]	@ (8000fd0 <MX_GPIO_Init+0x140>)
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	f003 0310 	and.w	r3, r3, #16
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ebc:	4b44      	ldr	r3, [pc, #272]	@ (8000fd0 <MX_GPIO_Init+0x140>)
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	4a43      	ldr	r2, [pc, #268]	@ (8000fd0 <MX_GPIO_Init+0x140>)
 8000ec2:	f043 0320 	orr.w	r3, r3, #32
 8000ec6:	6193      	str	r3, [r2, #24]
 8000ec8:	4b41      	ldr	r3, [pc, #260]	@ (8000fd0 <MX_GPIO_Init+0x140>)
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	f003 0320 	and.w	r3, r3, #32
 8000ed0:	60bb      	str	r3, [r7, #8]
 8000ed2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed4:	4b3e      	ldr	r3, [pc, #248]	@ (8000fd0 <MX_GPIO_Init+0x140>)
 8000ed6:	699b      	ldr	r3, [r3, #24]
 8000ed8:	4a3d      	ldr	r2, [pc, #244]	@ (8000fd0 <MX_GPIO_Init+0x140>)
 8000eda:	f043 0304 	orr.w	r3, r3, #4
 8000ede:	6193      	str	r3, [r2, #24]
 8000ee0:	4b3b      	ldr	r3, [pc, #236]	@ (8000fd0 <MX_GPIO_Init+0x140>)
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	f003 0304 	and.w	r3, r3, #4
 8000ee8:	607b      	str	r3, [r7, #4]
 8000eea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eec:	4b38      	ldr	r3, [pc, #224]	@ (8000fd0 <MX_GPIO_Init+0x140>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	4a37      	ldr	r2, [pc, #220]	@ (8000fd0 <MX_GPIO_Init+0x140>)
 8000ef2:	f043 0308 	orr.w	r3, r3, #8
 8000ef6:	6193      	str	r3, [r2, #24]
 8000ef8:	4b35      	ldr	r3, [pc, #212]	@ (8000fd0 <MX_GPIO_Init+0x140>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	f003 0308 	and.w	r3, r3, #8
 8000f00:	603b      	str	r3, [r7, #0]
 8000f02:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000f04:	2201      	movs	r2, #1
 8000f06:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f0a:	4832      	ldr	r0, [pc, #200]	@ (8000fd4 <MX_GPIO_Init+0x144>)
 8000f0c:	f001 f8c0 	bl	8002090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Relay1_Pin|Relay2_Pin|Relay3_Pin|SWITCH4_Pin
 8000f10:	2200      	movs	r2, #0
 8000f12:	f248 0147 	movw	r1, #32839	@ 0x8047
 8000f16:	4830      	ldr	r0, [pc, #192]	@ (8000fd8 <MX_GPIO_Init+0x148>)
 8000f18:	f001 f8ba 	bl	8002090 <HAL_GPIO_WritePin>
                          |LORA_STATUS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_SET);
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	f44f 51c8 	mov.w	r1, #6400	@ 0x1900
 8000f22:	482e      	ldr	r0, [pc, #184]	@ (8000fdc <MX_GPIO_Init+0x14c>)
 8000f24:	f001 f8b4 	bl	8002090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_SELECT_GPIO_Port, LORA_SELECT_Pin, GPIO_PIN_RESET);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f2e:	482b      	ldr	r0, [pc, #172]	@ (8000fdc <MX_GPIO_Init+0x14c>)
 8000f30:	f001 f8ae 	bl	8002090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED4_Pin|LED5_Pin, GPIO_PIN_SET);
 8000f34:	2201      	movs	r2, #1
 8000f36:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000f3a:	4827      	ldr	r0, [pc, #156]	@ (8000fd8 <MX_GPIO_Init+0x148>)
 8000f3c:	f001 f8a8 	bl	8002090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f40:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f46:	2301      	movs	r3, #1
 8000f48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f52:	f107 0310 	add.w	r3, r7, #16
 8000f56:	4619      	mov	r1, r3
 8000f58:	481e      	ldr	r0, [pc, #120]	@ (8000fd4 <MX_GPIO_Init+0x144>)
 8000f5a:	f000 ff15 	bl	8001d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : AC_voltage_Pin AC_current_Pin */
  GPIO_InitStruct.Pin = AC_voltage_Pin|AC_current_Pin;
 8000f5e:	23c0      	movs	r3, #192	@ 0xc0
 8000f60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f62:	2303      	movs	r3, #3
 8000f64:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f66:	f107 0310 	add.w	r3, r7, #16
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	481b      	ldr	r0, [pc, #108]	@ (8000fdc <MX_GPIO_Init+0x14c>)
 8000f6e:	f000 ff0b 	bl	8001d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : Relay1_Pin Relay2_Pin Relay3_Pin SWITCH4_Pin
                           LORA_STATUS_Pin LED4_Pin LED5_Pin */
  GPIO_InitStruct.Pin = Relay1_Pin|Relay2_Pin|Relay3_Pin|SWITCH4_Pin
 8000f72:	f248 3347 	movw	r3, #33607	@ 0x8347
 8000f76:	613b      	str	r3, [r7, #16]
                          |LORA_STATUS_Pin|LED4_Pin|LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f80:	2302      	movs	r3, #2
 8000f82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f84:	f107 0310 	add.w	r3, r7, #16
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4813      	ldr	r0, [pc, #76]	@ (8000fd8 <MX_GPIO_Init+0x148>)
 8000f8c:	f000 fefc 	bl	8001d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWITCH1_Pin SWITCH2_Pin SWITCH3_Pin RF_DATA_Pin */
  GPIO_InitStruct.Pin = SWITCH1_Pin|SWITCH2_Pin|SWITCH3_Pin|RF_DATA_Pin;
 8000f90:	f44f 43e1 	mov.w	r3, #28800	@ 0x7080
 8000f94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f9e:	f107 0310 	add.w	r3, r7, #16
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	480c      	ldr	r0, [pc, #48]	@ (8000fd8 <MX_GPIO_Init+0x148>)
 8000fa6:	f000 feef 	bl	8001d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LORA_SELECT_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LORA_SELECT_Pin;
 8000faa:	f44f 4319 	mov.w	r3, #39168	@ 0x9900
 8000fae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbc:	f107 0310 	add.w	r3, r7, #16
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4806      	ldr	r0, [pc, #24]	@ (8000fdc <MX_GPIO_Init+0x14c>)
 8000fc4:	f000 fee0 	bl	8001d88 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000fc8:	bf00      	nop
 8000fca:	3720      	adds	r7, #32
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	40011000 	.word	0x40011000
 8000fd8:	40010c00 	.word	0x40010c00
 8000fdc:	40010800 	.word	0x40010800

08000fe0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe4:	b672      	cpsid	i
}
 8000fe6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <Error_Handler+0x8>

08000fec <bcdToDec>:
  * @brief Converts a Binary Coded Decimal (BCD) number to a normal decimal number.
  * @param val: The BCD value to convert.
  * @retval The decimal representation of the value.
  */
int bcdToDec(uint8_t val)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	091b      	lsrs	r3, r3, #4
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4613      	mov	r3, r2
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	4413      	add	r3, r2
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	461a      	mov	r2, r3
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	f003 030f 	and.w	r3, r3, #15
 800100e:	4413      	add	r3, r2
}
 8001010:	4618      	mov	r0, r3
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr
	...

0800101c <Get_Time>:
  *        The read values are stored in the global 'time' structure.
  * @param None
  * @retval None
  */
void Get_Time (void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af04      	add	r7, sp, #16
	uint8_t get_time[7];
	// Read 7 bytes starting from address 0x00 (seconds register)
	HAL_I2C_Mem_Read(&hi2c2, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000);
 8001022:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001026:	9302      	str	r3, [sp, #8]
 8001028:	2307      	movs	r3, #7
 800102a:	9301      	str	r3, [sp, #4]
 800102c:	463b      	mov	r3, r7
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	2301      	movs	r3, #1
 8001032:	2200      	movs	r2, #0
 8001034:	21d0      	movs	r1, #208	@ 0xd0
 8001036:	481f      	ldr	r0, [pc, #124]	@ (80010b4 <Get_Time+0x98>)
 8001038:	f001 fa84 	bl	8002544 <HAL_I2C_Mem_Read>
	time.seconds = bcdToDec(get_time[0]);
 800103c:	783b      	ldrb	r3, [r7, #0]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff ffd4 	bl	8000fec <bcdToDec>
 8001044:	4603      	mov	r3, r0
 8001046:	b2da      	uxtb	r2, r3
 8001048:	4b1b      	ldr	r3, [pc, #108]	@ (80010b8 <Get_Time+0x9c>)
 800104a:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(get_time[1]);
 800104c:	787b      	ldrb	r3, [r7, #1]
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff ffcc 	bl	8000fec <bcdToDec>
 8001054:	4603      	mov	r3, r0
 8001056:	b2da      	uxtb	r2, r3
 8001058:	4b17      	ldr	r3, [pc, #92]	@ (80010b8 <Get_Time+0x9c>)
 800105a:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(get_time[2]);
 800105c:	78bb      	ldrb	r3, [r7, #2]
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff ffc4 	bl	8000fec <bcdToDec>
 8001064:	4603      	mov	r3, r0
 8001066:	b2da      	uxtb	r2, r3
 8001068:	4b13      	ldr	r3, [pc, #76]	@ (80010b8 <Get_Time+0x9c>)
 800106a:	709a      	strb	r2, [r3, #2]
	time.dayofweek = bcdToDec(get_time[3]);
 800106c:	78fb      	ldrb	r3, [r7, #3]
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff ffbc 	bl	8000fec <bcdToDec>
 8001074:	4603      	mov	r3, r0
 8001076:	b2da      	uxtb	r2, r3
 8001078:	4b0f      	ldr	r3, [pc, #60]	@ (80010b8 <Get_Time+0x9c>)
 800107a:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(get_time[4]);
 800107c:	793b      	ldrb	r3, [r7, #4]
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff ffb4 	bl	8000fec <bcdToDec>
 8001084:	4603      	mov	r3, r0
 8001086:	b2da      	uxtb	r2, r3
 8001088:	4b0b      	ldr	r3, [pc, #44]	@ (80010b8 <Get_Time+0x9c>)
 800108a:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(get_time[5]);
 800108c:	797b      	ldrb	r3, [r7, #5]
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff ffac 	bl	8000fec <bcdToDec>
 8001094:	4603      	mov	r3, r0
 8001096:	b2da      	uxtb	r2, r3
 8001098:	4b07      	ldr	r3, [pc, #28]	@ (80010b8 <Get_Time+0x9c>)
 800109a:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(get_time[6]);
 800109c:	79bb      	ldrb	r3, [r7, #6]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ffa4 	bl	8000fec <bcdToDec>
 80010a4:	4603      	mov	r3, r0
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	4b03      	ldr	r3, [pc, #12]	@ (80010b8 <Get_Time+0x9c>)
 80010aa:	719a      	strb	r2, [r3, #6]
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	200000a8 	.word	0x200000a8
 80010b8:	200001d4 	.word	0x200001d4

080010bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010c2:	4b15      	ldr	r3, [pc, #84]	@ (8001118 <HAL_MspInit+0x5c>)
 80010c4:	699b      	ldr	r3, [r3, #24]
 80010c6:	4a14      	ldr	r2, [pc, #80]	@ (8001118 <HAL_MspInit+0x5c>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	6193      	str	r3, [r2, #24]
 80010ce:	4b12      	ldr	r3, [pc, #72]	@ (8001118 <HAL_MspInit+0x5c>)
 80010d0:	699b      	ldr	r3, [r3, #24]
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010da:	4b0f      	ldr	r3, [pc, #60]	@ (8001118 <HAL_MspInit+0x5c>)
 80010dc:	69db      	ldr	r3, [r3, #28]
 80010de:	4a0e      	ldr	r2, [pc, #56]	@ (8001118 <HAL_MspInit+0x5c>)
 80010e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010e4:	61d3      	str	r3, [r2, #28]
 80010e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001118 <HAL_MspInit+0x5c>)
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010f2:	4b0a      	ldr	r3, [pc, #40]	@ (800111c <HAL_MspInit+0x60>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	4a04      	ldr	r2, [pc, #16]	@ (800111c <HAL_MspInit+0x60>)
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800110e:	bf00      	nop
 8001110:	3714      	adds	r7, #20
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr
 8001118:	40021000 	.word	0x40021000
 800111c:	40010000 	.word	0x40010000

08001120 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b088      	sub	sp, #32
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f107 0310 	add.w	r3, r7, #16
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a14      	ldr	r2, [pc, #80]	@ (800118c <HAL_ADC_MspInit+0x6c>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d121      	bne.n	8001184 <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001140:	4b13      	ldr	r3, [pc, #76]	@ (8001190 <HAL_ADC_MspInit+0x70>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	4a12      	ldr	r2, [pc, #72]	@ (8001190 <HAL_ADC_MspInit+0x70>)
 8001146:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800114a:	6193      	str	r3, [r2, #24]
 800114c:	4b10      	ldr	r3, [pc, #64]	@ (8001190 <HAL_ADC_MspInit+0x70>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001158:	4b0d      	ldr	r3, [pc, #52]	@ (8001190 <HAL_ADC_MspInit+0x70>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	4a0c      	ldr	r2, [pc, #48]	@ (8001190 <HAL_ADC_MspInit+0x70>)
 800115e:	f043 0304 	orr.w	r3, r3, #4
 8001162:	6193      	str	r3, [r2, #24]
 8001164:	4b0a      	ldr	r3, [pc, #40]	@ (8001190 <HAL_ADC_MspInit+0x70>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	f003 0304 	and.w	r3, r3, #4
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001170:	233f      	movs	r3, #63	@ 0x3f
 8001172:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001174:	2303      	movs	r3, #3
 8001176:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001178:	f107 0310 	add.w	r3, r7, #16
 800117c:	4619      	mov	r1, r3
 800117e:	4805      	ldr	r0, [pc, #20]	@ (8001194 <HAL_ADC_MspInit+0x74>)
 8001180:	f000 fe02 	bl	8001d88 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001184:	bf00      	nop
 8001186:	3720      	adds	r7, #32
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40012400 	.word	0x40012400
 8001190:	40021000 	.word	0x40021000
 8001194:	40010800 	.word	0x40010800

08001198 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 0310 	add.w	r3, r7, #16
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a16      	ldr	r2, [pc, #88]	@ (800120c <HAL_I2C_MspInit+0x74>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d124      	bne.n	8001202 <HAL_I2C_MspInit+0x6a>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b8:	4b15      	ldr	r3, [pc, #84]	@ (8001210 <HAL_I2C_MspInit+0x78>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	4a14      	ldr	r2, [pc, #80]	@ (8001210 <HAL_I2C_MspInit+0x78>)
 80011be:	f043 0308 	orr.w	r3, r3, #8
 80011c2:	6193      	str	r3, [r2, #24]
 80011c4:	4b12      	ldr	r3, [pc, #72]	@ (8001210 <HAL_I2C_MspInit+0x78>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	f003 0308 	and.w	r3, r3, #8
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80011d0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80011d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011d6:	2312      	movs	r3, #18
 80011d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011da:	2303      	movs	r3, #3
 80011dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011de:	f107 0310 	add.w	r3, r7, #16
 80011e2:	4619      	mov	r1, r3
 80011e4:	480b      	ldr	r0, [pc, #44]	@ (8001214 <HAL_I2C_MspInit+0x7c>)
 80011e6:	f000 fdcf 	bl	8001d88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011ea:	4b09      	ldr	r3, [pc, #36]	@ (8001210 <HAL_I2C_MspInit+0x78>)
 80011ec:	69db      	ldr	r3, [r3, #28]
 80011ee:	4a08      	ldr	r2, [pc, #32]	@ (8001210 <HAL_I2C_MspInit+0x78>)
 80011f0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011f4:	61d3      	str	r3, [r2, #28]
 80011f6:	4b06      	ldr	r3, [pc, #24]	@ (8001210 <HAL_I2C_MspInit+0x78>)
 80011f8:	69db      	ldr	r3, [r3, #28]
 80011fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001202:	bf00      	nop
 8001204:	3720      	adds	r7, #32
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40005800 	.word	0x40005800
 8001210:	40021000 	.word	0x40021000
 8001214:	40010c00 	.word	0x40010c00

08001218 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08a      	sub	sp, #40	@ 0x28
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a22      	ldr	r2, [pc, #136]	@ (80012bc <HAL_SPI_MspInit+0xa4>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d13d      	bne.n	80012b4 <HAL_SPI_MspInit+0x9c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001238:	4b21      	ldr	r3, [pc, #132]	@ (80012c0 <HAL_SPI_MspInit+0xa8>)
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	4a20      	ldr	r2, [pc, #128]	@ (80012c0 <HAL_SPI_MspInit+0xa8>)
 800123e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001242:	6193      	str	r3, [r2, #24]
 8001244:	4b1e      	ldr	r3, [pc, #120]	@ (80012c0 <HAL_SPI_MspInit+0xa8>)
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800124c:	613b      	str	r3, [r7, #16]
 800124e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001250:	4b1b      	ldr	r3, [pc, #108]	@ (80012c0 <HAL_SPI_MspInit+0xa8>)
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	4a1a      	ldr	r2, [pc, #104]	@ (80012c0 <HAL_SPI_MspInit+0xa8>)
 8001256:	f043 0308 	orr.w	r3, r3, #8
 800125a:	6193      	str	r3, [r2, #24]
 800125c:	4b18      	ldr	r3, [pc, #96]	@ (80012c0 <HAL_SPI_MspInit+0xa8>)
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	f003 0308 	and.w	r3, r3, #8
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001268:	2328      	movs	r3, #40	@ 0x28
 800126a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126c:	2302      	movs	r3, #2
 800126e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001270:	2303      	movs	r3, #3
 8001272:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	4619      	mov	r1, r3
 800127a:	4812      	ldr	r0, [pc, #72]	@ (80012c4 <HAL_SPI_MspInit+0xac>)
 800127c:	f000 fd84 	bl	8001d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001280:	2310      	movs	r3, #16
 8001282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001284:	2300      	movs	r3, #0
 8001286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	4619      	mov	r1, r3
 8001292:	480c      	ldr	r0, [pc, #48]	@ (80012c4 <HAL_SPI_MspInit+0xac>)
 8001294:	f000 fd78 	bl	8001d88 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8001298:	4b0b      	ldr	r3, [pc, #44]	@ (80012c8 <HAL_SPI_MspInit+0xb0>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	627b      	str	r3, [r7, #36]	@ 0x24
 800129e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a0:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80012a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80012a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80012ae:	4a06      	ldr	r2, [pc, #24]	@ (80012c8 <HAL_SPI_MspInit+0xb0>)
 80012b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b2:	6053      	str	r3, [r2, #4]

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80012b4:	bf00      	nop
 80012b6:	3728      	adds	r7, #40	@ 0x28
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40013000 	.word	0x40013000
 80012c0:	40021000 	.word	0x40021000
 80012c4:	40010c00 	.word	0x40010c00
 80012c8:	40010000 	.word	0x40010000

080012cc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b088      	sub	sp, #32
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f107 0310 	add.w	r3, r7, #16
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a1c      	ldr	r2, [pc, #112]	@ (8001358 <HAL_UART_MspInit+0x8c>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d131      	bne.n	8001350 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012ec:	4b1b      	ldr	r3, [pc, #108]	@ (800135c <HAL_UART_MspInit+0x90>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	4a1a      	ldr	r2, [pc, #104]	@ (800135c <HAL_UART_MspInit+0x90>)
 80012f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012f6:	6193      	str	r3, [r2, #24]
 80012f8:	4b18      	ldr	r3, [pc, #96]	@ (800135c <HAL_UART_MspInit+0x90>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001304:	4b15      	ldr	r3, [pc, #84]	@ (800135c <HAL_UART_MspInit+0x90>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	4a14      	ldr	r2, [pc, #80]	@ (800135c <HAL_UART_MspInit+0x90>)
 800130a:	f043 0304 	orr.w	r3, r3, #4
 800130e:	6193      	str	r3, [r2, #24]
 8001310:	4b12      	ldr	r3, [pc, #72]	@ (800135c <HAL_UART_MspInit+0x90>)
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	f003 0304 	and.w	r3, r3, #4
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800131c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001320:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001322:	2302      	movs	r3, #2
 8001324:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001326:	2303      	movs	r3, #3
 8001328:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132a:	f107 0310 	add.w	r3, r7, #16
 800132e:	4619      	mov	r1, r3
 8001330:	480b      	ldr	r0, [pc, #44]	@ (8001360 <HAL_UART_MspInit+0x94>)
 8001332:	f000 fd29 	bl	8001d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001336:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800133a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001344:	f107 0310 	add.w	r3, r7, #16
 8001348:	4619      	mov	r1, r3
 800134a:	4805      	ldr	r0, [pc, #20]	@ (8001360 <HAL_UART_MspInit+0x94>)
 800134c:	f000 fd1c 	bl	8001d88 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001350:	bf00      	nop
 8001352:	3720      	adds	r7, #32
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40013800 	.word	0x40013800
 800135c:	40021000 	.word	0x40021000
 8001360:	40010800 	.word	0x40010800

08001364 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001368:	bf00      	nop
 800136a:	e7fd      	b.n	8001368 <NMI_Handler+0x4>

0800136c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001370:	bf00      	nop
 8001372:	e7fd      	b.n	8001370 <HardFault_Handler+0x4>

08001374 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001378:	bf00      	nop
 800137a:	e7fd      	b.n	8001378 <MemManage_Handler+0x4>

0800137c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001380:	bf00      	nop
 8001382:	e7fd      	b.n	8001380 <BusFault_Handler+0x4>

08001384 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001388:	bf00      	nop
 800138a:	e7fd      	b.n	8001388 <UsageFault_Handler+0x4>

0800138c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr

08001398 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr

080013a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr

080013b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013b4:	f000 f8aa 	bl	800150c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}

080013bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013c4:	4a14      	ldr	r2, [pc, #80]	@ (8001418 <_sbrk+0x5c>)
 80013c6:	4b15      	ldr	r3, [pc, #84]	@ (800141c <_sbrk+0x60>)
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013d0:	4b13      	ldr	r3, [pc, #76]	@ (8001420 <_sbrk+0x64>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d102      	bne.n	80013de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013d8:	4b11      	ldr	r3, [pc, #68]	@ (8001420 <_sbrk+0x64>)
 80013da:	4a12      	ldr	r2, [pc, #72]	@ (8001424 <_sbrk+0x68>)
 80013dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013de:	4b10      	ldr	r3, [pc, #64]	@ (8001420 <_sbrk+0x64>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4413      	add	r3, r2
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d207      	bcs.n	80013fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013ec:	f003 fc30 	bl	8004c50 <__errno>
 80013f0:	4603      	mov	r3, r0
 80013f2:	220c      	movs	r2, #12
 80013f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013f6:	f04f 33ff 	mov.w	r3, #4294967295
 80013fa:	e009      	b.n	8001410 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013fc:	4b08      	ldr	r3, [pc, #32]	@ (8001420 <_sbrk+0x64>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001402:	4b07      	ldr	r3, [pc, #28]	@ (8001420 <_sbrk+0x64>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4413      	add	r3, r2
 800140a:	4a05      	ldr	r2, [pc, #20]	@ (8001420 <_sbrk+0x64>)
 800140c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800140e:	68fb      	ldr	r3, [r7, #12]
}
 8001410:	4618      	mov	r0, r3
 8001412:	3718      	adds	r7, #24
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20005000 	.word	0x20005000
 800141c:	00000400 	.word	0x00000400
 8001420:	200001dc 	.word	0x200001dc
 8001424:	20000330 	.word	0x20000330

08001428 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr

08001434 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001434:	f7ff fff8 	bl	8001428 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001438:	480b      	ldr	r0, [pc, #44]	@ (8001468 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800143a:	490c      	ldr	r1, [pc, #48]	@ (800146c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800143c:	4a0c      	ldr	r2, [pc, #48]	@ (8001470 <LoopFillZerobss+0x16>)
  movs r3, #0
 800143e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001440:	e002      	b.n	8001448 <LoopCopyDataInit>

08001442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001446:	3304      	adds	r3, #4

08001448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800144a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800144c:	d3f9      	bcc.n	8001442 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800144e:	4a09      	ldr	r2, [pc, #36]	@ (8001474 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001450:	4c09      	ldr	r4, [pc, #36]	@ (8001478 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001452:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001454:	e001      	b.n	800145a <LoopFillZerobss>

08001456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001458:	3204      	adds	r2, #4

0800145a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800145a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800145c:	d3fb      	bcc.n	8001456 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800145e:	f003 fbfd 	bl	8004c5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001462:	f7ff faf3 	bl	8000a4c <main>
  bx lr
 8001466:	4770      	bx	lr
  ldr r0, =_sdata
 8001468:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800146c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001470:	080056cc 	.word	0x080056cc
  ldr r2, =_sbss
 8001474:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001478:	2000032c 	.word	0x2000032c

0800147c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800147c:	e7fe      	b.n	800147c <ADC1_2_IRQHandler>
	...

08001480 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001484:	4b08      	ldr	r3, [pc, #32]	@ (80014a8 <HAL_Init+0x28>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a07      	ldr	r2, [pc, #28]	@ (80014a8 <HAL_Init+0x28>)
 800148a:	f043 0310 	orr.w	r3, r3, #16
 800148e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001490:	2003      	movs	r0, #3
 8001492:	f000 fc45 	bl	8001d20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001496:	2000      	movs	r0, #0
 8001498:	f000 f808 	bl	80014ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800149c:	f7ff fe0e 	bl	80010bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40022000 	.word	0x40022000

080014ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014b4:	4b12      	ldr	r3, [pc, #72]	@ (8001500 <HAL_InitTick+0x54>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	4b12      	ldr	r3, [pc, #72]	@ (8001504 <HAL_InitTick+0x58>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	4619      	mov	r1, r3
 80014be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ca:	4618      	mov	r0, r3
 80014cc:	f000 fc4f 	bl	8001d6e <HAL_SYSTICK_Config>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e00e      	b.n	80014f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2b0f      	cmp	r3, #15
 80014de:	d80a      	bhi.n	80014f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014e0:	2200      	movs	r2, #0
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	f04f 30ff 	mov.w	r0, #4294967295
 80014e8:	f000 fc25 	bl	8001d36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014ec:	4a06      	ldr	r2, [pc, #24]	@ (8001508 <HAL_InitTick+0x5c>)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014f2:	2300      	movs	r3, #0
 80014f4:	e000      	b.n	80014f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20000000 	.word	0x20000000
 8001504:	20000008 	.word	0x20000008
 8001508:	20000004 	.word	0x20000004

0800150c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001510:	4b05      	ldr	r3, [pc, #20]	@ (8001528 <HAL_IncTick+0x1c>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	461a      	mov	r2, r3
 8001516:	4b05      	ldr	r3, [pc, #20]	@ (800152c <HAL_IncTick+0x20>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4413      	add	r3, r2
 800151c:	4a03      	ldr	r2, [pc, #12]	@ (800152c <HAL_IncTick+0x20>)
 800151e:	6013      	str	r3, [r2, #0]
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr
 8001528:	20000008 	.word	0x20000008
 800152c:	200001e0 	.word	0x200001e0

08001530 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  return uwTick;
 8001534:	4b02      	ldr	r3, [pc, #8]	@ (8001540 <HAL_GetTick+0x10>)
 8001536:	681b      	ldr	r3, [r3, #0]
}
 8001538:	4618      	mov	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr
 8001540:	200001e0 	.word	0x200001e0

08001544 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800154c:	f7ff fff0 	bl	8001530 <HAL_GetTick>
 8001550:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800155c:	d005      	beq.n	800156a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800155e:	4b0a      	ldr	r3, [pc, #40]	@ (8001588 <HAL_Delay+0x44>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	461a      	mov	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	4413      	add	r3, r2
 8001568:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800156a:	bf00      	nop
 800156c:	f7ff ffe0 	bl	8001530 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	429a      	cmp	r2, r3
 800157a:	d8f7      	bhi.n	800156c <HAL_Delay+0x28>
  {
  }
}
 800157c:	bf00      	nop
 800157e:	bf00      	nop
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000008 	.word	0x20000008

0800158c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001594:	2300      	movs	r3, #0
 8001596:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001598:	2300      	movs	r3, #0
 800159a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800159c:	2300      	movs	r3, #0
 800159e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80015a0:	2300      	movs	r3, #0
 80015a2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d101      	bne.n	80015ae <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e0be      	b.n	800172c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d109      	bne.n	80015d0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff fda8 	bl	8001120 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f000 fa05 	bl	80019e0 <ADC_ConversionStop_Disable>
 80015d6:	4603      	mov	r3, r0
 80015d8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015de:	f003 0310 	and.w	r3, r3, #16
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f040 8099 	bne.w	800171a <HAL_ADC_Init+0x18e>
 80015e8:	7dfb      	ldrb	r3, [r7, #23]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f040 8095 	bne.w	800171a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015f4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80015f8:	f023 0302 	bic.w	r3, r3, #2
 80015fc:	f043 0202 	orr.w	r2, r3, #2
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800160c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	7b1b      	ldrb	r3, [r3, #12]
 8001612:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001614:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001616:	68ba      	ldr	r2, [r7, #8]
 8001618:	4313      	orrs	r3, r2
 800161a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001624:	d003      	beq.n	800162e <HAL_ADC_Init+0xa2>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d102      	bne.n	8001634 <HAL_ADC_Init+0xa8>
 800162e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001632:	e000      	b.n	8001636 <HAL_ADC_Init+0xaa>
 8001634:	2300      	movs	r3, #0
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	4313      	orrs	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	7d1b      	ldrb	r3, [r3, #20]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d119      	bne.n	8001678 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	7b1b      	ldrb	r3, [r3, #12]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d109      	bne.n	8001660 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	3b01      	subs	r3, #1
 8001652:	035a      	lsls	r2, r3, #13
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	4313      	orrs	r3, r2
 8001658:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	e00b      	b.n	8001678 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001664:	f043 0220 	orr.w	r2, r3, #32
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001670:	f043 0201 	orr.w	r2, r3, #1
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	430a      	orrs	r2, r1
 800168a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	689a      	ldr	r2, [r3, #8]
 8001692:	4b28      	ldr	r3, [pc, #160]	@ (8001734 <HAL_ADC_Init+0x1a8>)
 8001694:	4013      	ands	r3, r2
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	6812      	ldr	r2, [r2, #0]
 800169a:	68b9      	ldr	r1, [r7, #8]
 800169c:	430b      	orrs	r3, r1
 800169e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80016a8:	d003      	beq.n	80016b2 <HAL_ADC_Init+0x126>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d104      	bne.n	80016bc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	051b      	lsls	r3, r3, #20
 80016ba:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016c2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	430a      	orrs	r2, r1
 80016ce:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	689a      	ldr	r2, [r3, #8]
 80016d6:	4b18      	ldr	r3, [pc, #96]	@ (8001738 <HAL_ADC_Init+0x1ac>)
 80016d8:	4013      	ands	r3, r2
 80016da:	68ba      	ldr	r2, [r7, #8]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d10b      	bne.n	80016f8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ea:	f023 0303 	bic.w	r3, r3, #3
 80016ee:	f043 0201 	orr.w	r2, r3, #1
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016f6:	e018      	b.n	800172a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016fc:	f023 0312 	bic.w	r3, r3, #18
 8001700:	f043 0210 	orr.w	r2, r3, #16
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800170c:	f043 0201 	orr.w	r2, r3, #1
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001718:	e007      	b.n	800172a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800171e:	f043 0210 	orr.w	r2, r3, #16
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800172a:	7dfb      	ldrb	r3, [r7, #23]
}
 800172c:	4618      	mov	r0, r3
 800172e:	3718      	adds	r7, #24
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	ffe1f7fd 	.word	0xffe1f7fd
 8001738:	ff1f0efe 	.word	0xff1f0efe

0800173c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001746:	2300      	movs	r3, #0
 8001748:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800174a:	2300      	movs	r3, #0
 800174c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001754:	2b01      	cmp	r3, #1
 8001756:	d101      	bne.n	800175c <HAL_ADC_ConfigChannel+0x20>
 8001758:	2302      	movs	r3, #2
 800175a:	e0dc      	b.n	8001916 <HAL_ADC_ConfigChannel+0x1da>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2201      	movs	r2, #1
 8001760:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	2b06      	cmp	r3, #6
 800176a:	d81c      	bhi.n	80017a6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685a      	ldr	r2, [r3, #4]
 8001776:	4613      	mov	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	4413      	add	r3, r2
 800177c:	3b05      	subs	r3, #5
 800177e:	221f      	movs	r2, #31
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	4019      	ands	r1, r3
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	6818      	ldr	r0, [r3, #0]
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685a      	ldr	r2, [r3, #4]
 8001790:	4613      	mov	r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4413      	add	r3, r2
 8001796:	3b05      	subs	r3, #5
 8001798:	fa00 f203 	lsl.w	r2, r0, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	430a      	orrs	r2, r1
 80017a2:	635a      	str	r2, [r3, #52]	@ 0x34
 80017a4:	e03c      	b.n	8001820 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b0c      	cmp	r3, #12
 80017ac:	d81c      	bhi.n	80017e8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685a      	ldr	r2, [r3, #4]
 80017b8:	4613      	mov	r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4413      	add	r3, r2
 80017be:	3b23      	subs	r3, #35	@ 0x23
 80017c0:	221f      	movs	r2, #31
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43db      	mvns	r3, r3
 80017c8:	4019      	ands	r1, r3
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	6818      	ldr	r0, [r3, #0]
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	4613      	mov	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4413      	add	r3, r2
 80017d8:	3b23      	subs	r3, #35	@ 0x23
 80017da:	fa00 f203 	lsl.w	r2, r0, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	430a      	orrs	r2, r1
 80017e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80017e6:	e01b      	b.n	8001820 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685a      	ldr	r2, [r3, #4]
 80017f2:	4613      	mov	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4413      	add	r3, r2
 80017f8:	3b41      	subs	r3, #65	@ 0x41
 80017fa:	221f      	movs	r2, #31
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	4019      	ands	r1, r3
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	6818      	ldr	r0, [r3, #0]
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685a      	ldr	r2, [r3, #4]
 800180c:	4613      	mov	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4413      	add	r3, r2
 8001812:	3b41      	subs	r3, #65	@ 0x41
 8001814:	fa00 f203 	lsl.w	r2, r0, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	430a      	orrs	r2, r1
 800181e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b09      	cmp	r3, #9
 8001826:	d91c      	bls.n	8001862 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	68d9      	ldr	r1, [r3, #12]
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	4613      	mov	r3, r2
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	4413      	add	r3, r2
 8001838:	3b1e      	subs	r3, #30
 800183a:	2207      	movs	r2, #7
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	4019      	ands	r1, r3
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	6898      	ldr	r0, [r3, #8]
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	4613      	mov	r3, r2
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	4413      	add	r3, r2
 8001852:	3b1e      	subs	r3, #30
 8001854:	fa00 f203 	lsl.w	r2, r0, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	430a      	orrs	r2, r1
 800185e:	60da      	str	r2, [r3, #12]
 8001860:	e019      	b.n	8001896 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6919      	ldr	r1, [r3, #16]
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4613      	mov	r3, r2
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	4413      	add	r3, r2
 8001872:	2207      	movs	r2, #7
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	4019      	ands	r1, r3
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	6898      	ldr	r0, [r3, #8]
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	4613      	mov	r3, r2
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	4413      	add	r3, r2
 800188a:	fa00 f203 	lsl.w	r2, r0, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	430a      	orrs	r2, r1
 8001894:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2b10      	cmp	r3, #16
 800189c:	d003      	beq.n	80018a6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80018a2:	2b11      	cmp	r3, #17
 80018a4:	d132      	bne.n	800190c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a1d      	ldr	r2, [pc, #116]	@ (8001920 <HAL_ADC_ConfigChannel+0x1e4>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d125      	bne.n	80018fc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d126      	bne.n	800190c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	689a      	ldr	r2, [r3, #8]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80018cc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2b10      	cmp	r3, #16
 80018d4:	d11a      	bne.n	800190c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018d6:	4b13      	ldr	r3, [pc, #76]	@ (8001924 <HAL_ADC_ConfigChannel+0x1e8>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a13      	ldr	r2, [pc, #76]	@ (8001928 <HAL_ADC_ConfigChannel+0x1ec>)
 80018dc:	fba2 2303 	umull	r2, r3, r2, r3
 80018e0:	0c9a      	lsrs	r2, r3, #18
 80018e2:	4613      	mov	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018ec:	e002      	b.n	80018f4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	3b01      	subs	r3, #1
 80018f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1f9      	bne.n	80018ee <HAL_ADC_ConfigChannel+0x1b2>
 80018fa:	e007      	b.n	800190c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001900:	f043 0220 	orr.w	r2, r3, #32
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001914:	7bfb      	ldrb	r3, [r7, #15]
}
 8001916:	4618      	mov	r0, r3
 8001918:	3714      	adds	r7, #20
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr
 8001920:	40012400 	.word	0x40012400
 8001924:	20000000 	.word	0x20000000
 8001928:	431bde83 	.word	0x431bde83

0800192c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001934:	2300      	movs	r3, #0
 8001936:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001938:	2300      	movs	r3, #0
 800193a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	2b01      	cmp	r3, #1
 8001948:	d040      	beq.n	80019cc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f042 0201 	orr.w	r2, r2, #1
 8001958:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800195a:	4b1f      	ldr	r3, [pc, #124]	@ (80019d8 <ADC_Enable+0xac>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a1f      	ldr	r2, [pc, #124]	@ (80019dc <ADC_Enable+0xb0>)
 8001960:	fba2 2303 	umull	r2, r3, r2, r3
 8001964:	0c9b      	lsrs	r3, r3, #18
 8001966:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001968:	e002      	b.n	8001970 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	3b01      	subs	r3, #1
 800196e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1f9      	bne.n	800196a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001976:	f7ff fddb 	bl	8001530 <HAL_GetTick>
 800197a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800197c:	e01f      	b.n	80019be <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800197e:	f7ff fdd7 	bl	8001530 <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d918      	bls.n	80019be <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	2b01      	cmp	r3, #1
 8001998:	d011      	beq.n	80019be <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800199e:	f043 0210 	orr.w	r2, r3, #16
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019aa:	f043 0201 	orr.w	r2, r3, #1
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e007      	b.n	80019ce <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d1d8      	bne.n	800197e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000000 	.word	0x20000000
 80019dc:	431bde83 	.word	0x431bde83

080019e0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019e8:	2300      	movs	r3, #0
 80019ea:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d12e      	bne.n	8001a58 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f022 0201 	bic.w	r2, r2, #1
 8001a08:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a0a:	f7ff fd91 	bl	8001530 <HAL_GetTick>
 8001a0e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a10:	e01b      	b.n	8001a4a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a12:	f7ff fd8d 	bl	8001530 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d914      	bls.n	8001a4a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d10d      	bne.n	8001a4a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a32:	f043 0210 	orr.w	r2, r3, #16
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a3e:	f043 0201 	orr.w	r2, r3, #1
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e007      	b.n	8001a5a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d0dc      	beq.n	8001a12 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
	...

08001a64 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001a64:	b590      	push	{r4, r7, lr}
 8001a66:	b087      	sub	sp, #28
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001a70:	2300      	movs	r3, #0
 8001a72:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d101      	bne.n	8001a82 <HAL_ADCEx_Calibration_Start+0x1e>
 8001a7e:	2302      	movs	r3, #2
 8001a80:	e097      	b.n	8001bb2 <HAL_ADCEx_Calibration_Start+0x14e>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2201      	movs	r2, #1
 8001a86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff ffa8 	bl	80019e0 <ADC_ConversionStop_Disable>
 8001a90:	4603      	mov	r3, r0
 8001a92:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f7ff ff49 	bl	800192c <ADC_Enable>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8001a9e:	7dfb      	ldrb	r3, [r7, #23]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f040 8081 	bne.w	8001ba8 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aaa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001aae:	f023 0302 	bic.w	r3, r3, #2
 8001ab2:	f043 0202 	orr.w	r2, r3, #2
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001aba:	4b40      	ldr	r3, [pc, #256]	@ (8001bbc <HAL_ADCEx_Calibration_Start+0x158>)
 8001abc:	681c      	ldr	r4, [r3, #0]
 8001abe:	2002      	movs	r0, #2
 8001ac0:	f002 f81a 	bl	8003af8 <HAL_RCCEx_GetPeriphCLKFreq>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001aca:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001acc:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001ace:	e002      	b.n	8001ad6 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1f9      	bne.n	8001ad0 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	689a      	ldr	r2, [r3, #8]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f042 0208 	orr.w	r2, r2, #8
 8001aea:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001aec:	f7ff fd20 	bl	8001530 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001af2:	e01b      	b.n	8001b2c <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001af4:	f7ff fd1c 	bl	8001530 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b0a      	cmp	r3, #10
 8001b00:	d914      	bls.n	8001b2c <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f003 0308 	and.w	r3, r3, #8
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d00d      	beq.n	8001b2c <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b14:	f023 0312 	bic.w	r3, r3, #18
 8001b18:	f043 0210 	orr.w	r2, r3, #16
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e042      	b.n	8001bb2 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f003 0308 	and.w	r3, r3, #8
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1dc      	bne.n	8001af4 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f042 0204 	orr.w	r2, r2, #4
 8001b48:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001b4a:	f7ff fcf1 	bl	8001530 <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001b50:	e01b      	b.n	8001b8a <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001b52:	f7ff fced 	bl	8001530 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b0a      	cmp	r3, #10
 8001b5e:	d914      	bls.n	8001b8a <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f003 0304 	and.w	r3, r3, #4
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d00d      	beq.n	8001b8a <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b72:	f023 0312 	bic.w	r3, r3, #18
 8001b76:	f043 0210 	orr.w	r2, r3, #16
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e013      	b.n	8001bb2 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 0304 	and.w	r3, r3, #4
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1dc      	bne.n	8001b52 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b9c:	f023 0303 	bic.w	r3, r3, #3
 8001ba0:	f043 0201 	orr.w	r2, r3, #1
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001bb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	371c      	adds	r7, #28
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd90      	pop	{r4, r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20000000 	.word	0x20000000

08001bc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001c04 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bd6:	68ba      	ldr	r2, [r7, #8]
 8001bd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bdc:	4013      	ands	r3, r2
 8001bde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001be8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bf2:	4a04      	ldr	r2, [pc, #16]	@ (8001c04 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	60d3      	str	r3, [r2, #12]
}
 8001bf8:	bf00      	nop
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bc80      	pop	{r7}
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	e000ed00 	.word	0xe000ed00

08001c08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c0c:	4b04      	ldr	r3, [pc, #16]	@ (8001c20 <__NVIC_GetPriorityGrouping+0x18>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	0a1b      	lsrs	r3, r3, #8
 8001c12:	f003 0307 	and.w	r3, r3, #7
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bc80      	pop	{r7}
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	6039      	str	r1, [r7, #0]
 8001c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	db0a      	blt.n	8001c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	490c      	ldr	r1, [pc, #48]	@ (8001c70 <__NVIC_SetPriority+0x4c>)
 8001c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c42:	0112      	lsls	r2, r2, #4
 8001c44:	b2d2      	uxtb	r2, r2
 8001c46:	440b      	add	r3, r1
 8001c48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c4c:	e00a      	b.n	8001c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	4908      	ldr	r1, [pc, #32]	@ (8001c74 <__NVIC_SetPriority+0x50>)
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	3b04      	subs	r3, #4
 8001c5c:	0112      	lsls	r2, r2, #4
 8001c5e:	b2d2      	uxtb	r2, r2
 8001c60:	440b      	add	r3, r1
 8001c62:	761a      	strb	r2, [r3, #24]
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	e000e100 	.word	0xe000e100
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b089      	sub	sp, #36	@ 0x24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	f1c3 0307 	rsb	r3, r3, #7
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	bf28      	it	cs
 8001c96:	2304      	movcs	r3, #4
 8001c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	2b06      	cmp	r3, #6
 8001ca0:	d902      	bls.n	8001ca8 <NVIC_EncodePriority+0x30>
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	3b03      	subs	r3, #3
 8001ca6:	e000      	b.n	8001caa <NVIC_EncodePriority+0x32>
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cac:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43da      	mvns	r2, r3
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	401a      	ands	r2, r3
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cca:	43d9      	mvns	r1, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd0:	4313      	orrs	r3, r2
         );
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3724      	adds	r7, #36	@ 0x24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr

08001cdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cec:	d301      	bcc.n	8001cf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e00f      	b.n	8001d12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cf2:	4a0a      	ldr	r2, [pc, #40]	@ (8001d1c <SysTick_Config+0x40>)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cfa:	210f      	movs	r1, #15
 8001cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001d00:	f7ff ff90 	bl	8001c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d04:	4b05      	ldr	r3, [pc, #20]	@ (8001d1c <SysTick_Config+0x40>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d0a:	4b04      	ldr	r3, [pc, #16]	@ (8001d1c <SysTick_Config+0x40>)
 8001d0c:	2207      	movs	r2, #7
 8001d0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	e000e010 	.word	0xe000e010

08001d20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7ff ff49 	bl	8001bc0 <__NVIC_SetPriorityGrouping>
}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b086      	sub	sp, #24
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	60b9      	str	r1, [r7, #8]
 8001d40:	607a      	str	r2, [r7, #4]
 8001d42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d48:	f7ff ff5e 	bl	8001c08 <__NVIC_GetPriorityGrouping>
 8001d4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	68b9      	ldr	r1, [r7, #8]
 8001d52:	6978      	ldr	r0, [r7, #20]
 8001d54:	f7ff ff90 	bl	8001c78 <NVIC_EncodePriority>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d5e:	4611      	mov	r1, r2
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff ff5f 	bl	8001c24 <__NVIC_SetPriority>
}
 8001d66:	bf00      	nop
 8001d68:	3718      	adds	r7, #24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b082      	sub	sp, #8
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f7ff ffb0 	bl	8001cdc <SysTick_Config>
 8001d7c:	4603      	mov	r3, r0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
	...

08001d88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b08b      	sub	sp, #44	@ 0x2c
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d92:	2300      	movs	r3, #0
 8001d94:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d96:	2300      	movs	r3, #0
 8001d98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d9a:	e169      	b.n	8002070 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	69fa      	ldr	r2, [r7, #28]
 8001dac:	4013      	ands	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	f040 8158 	bne.w	800206a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	4a9a      	ldr	r2, [pc, #616]	@ (8002028 <HAL_GPIO_Init+0x2a0>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d05e      	beq.n	8001e82 <HAL_GPIO_Init+0xfa>
 8001dc4:	4a98      	ldr	r2, [pc, #608]	@ (8002028 <HAL_GPIO_Init+0x2a0>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d875      	bhi.n	8001eb6 <HAL_GPIO_Init+0x12e>
 8001dca:	4a98      	ldr	r2, [pc, #608]	@ (800202c <HAL_GPIO_Init+0x2a4>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d058      	beq.n	8001e82 <HAL_GPIO_Init+0xfa>
 8001dd0:	4a96      	ldr	r2, [pc, #600]	@ (800202c <HAL_GPIO_Init+0x2a4>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d86f      	bhi.n	8001eb6 <HAL_GPIO_Init+0x12e>
 8001dd6:	4a96      	ldr	r2, [pc, #600]	@ (8002030 <HAL_GPIO_Init+0x2a8>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d052      	beq.n	8001e82 <HAL_GPIO_Init+0xfa>
 8001ddc:	4a94      	ldr	r2, [pc, #592]	@ (8002030 <HAL_GPIO_Init+0x2a8>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d869      	bhi.n	8001eb6 <HAL_GPIO_Init+0x12e>
 8001de2:	4a94      	ldr	r2, [pc, #592]	@ (8002034 <HAL_GPIO_Init+0x2ac>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d04c      	beq.n	8001e82 <HAL_GPIO_Init+0xfa>
 8001de8:	4a92      	ldr	r2, [pc, #584]	@ (8002034 <HAL_GPIO_Init+0x2ac>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d863      	bhi.n	8001eb6 <HAL_GPIO_Init+0x12e>
 8001dee:	4a92      	ldr	r2, [pc, #584]	@ (8002038 <HAL_GPIO_Init+0x2b0>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d046      	beq.n	8001e82 <HAL_GPIO_Init+0xfa>
 8001df4:	4a90      	ldr	r2, [pc, #576]	@ (8002038 <HAL_GPIO_Init+0x2b0>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d85d      	bhi.n	8001eb6 <HAL_GPIO_Init+0x12e>
 8001dfa:	2b12      	cmp	r3, #18
 8001dfc:	d82a      	bhi.n	8001e54 <HAL_GPIO_Init+0xcc>
 8001dfe:	2b12      	cmp	r3, #18
 8001e00:	d859      	bhi.n	8001eb6 <HAL_GPIO_Init+0x12e>
 8001e02:	a201      	add	r2, pc, #4	@ (adr r2, 8001e08 <HAL_GPIO_Init+0x80>)
 8001e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e08:	08001e83 	.word	0x08001e83
 8001e0c:	08001e5d 	.word	0x08001e5d
 8001e10:	08001e6f 	.word	0x08001e6f
 8001e14:	08001eb1 	.word	0x08001eb1
 8001e18:	08001eb7 	.word	0x08001eb7
 8001e1c:	08001eb7 	.word	0x08001eb7
 8001e20:	08001eb7 	.word	0x08001eb7
 8001e24:	08001eb7 	.word	0x08001eb7
 8001e28:	08001eb7 	.word	0x08001eb7
 8001e2c:	08001eb7 	.word	0x08001eb7
 8001e30:	08001eb7 	.word	0x08001eb7
 8001e34:	08001eb7 	.word	0x08001eb7
 8001e38:	08001eb7 	.word	0x08001eb7
 8001e3c:	08001eb7 	.word	0x08001eb7
 8001e40:	08001eb7 	.word	0x08001eb7
 8001e44:	08001eb7 	.word	0x08001eb7
 8001e48:	08001eb7 	.word	0x08001eb7
 8001e4c:	08001e65 	.word	0x08001e65
 8001e50:	08001e79 	.word	0x08001e79
 8001e54:	4a79      	ldr	r2, [pc, #484]	@ (800203c <HAL_GPIO_Init+0x2b4>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d013      	beq.n	8001e82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e5a:	e02c      	b.n	8001eb6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	623b      	str	r3, [r7, #32]
          break;
 8001e62:	e029      	b.n	8001eb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	3304      	adds	r3, #4
 8001e6a:	623b      	str	r3, [r7, #32]
          break;
 8001e6c:	e024      	b.n	8001eb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	3308      	adds	r3, #8
 8001e74:	623b      	str	r3, [r7, #32]
          break;
 8001e76:	e01f      	b.n	8001eb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	330c      	adds	r3, #12
 8001e7e:	623b      	str	r3, [r7, #32]
          break;
 8001e80:	e01a      	b.n	8001eb8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d102      	bne.n	8001e90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e8a:	2304      	movs	r3, #4
 8001e8c:	623b      	str	r3, [r7, #32]
          break;
 8001e8e:	e013      	b.n	8001eb8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d105      	bne.n	8001ea4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e98:	2308      	movs	r3, #8
 8001e9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	69fa      	ldr	r2, [r7, #28]
 8001ea0:	611a      	str	r2, [r3, #16]
          break;
 8001ea2:	e009      	b.n	8001eb8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ea4:	2308      	movs	r3, #8
 8001ea6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	69fa      	ldr	r2, [r7, #28]
 8001eac:	615a      	str	r2, [r3, #20]
          break;
 8001eae:	e003      	b.n	8001eb8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	623b      	str	r3, [r7, #32]
          break;
 8001eb4:	e000      	b.n	8001eb8 <HAL_GPIO_Init+0x130>
          break;
 8001eb6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	2bff      	cmp	r3, #255	@ 0xff
 8001ebc:	d801      	bhi.n	8001ec2 <HAL_GPIO_Init+0x13a>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	e001      	b.n	8001ec6 <HAL_GPIO_Init+0x13e>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	2bff      	cmp	r3, #255	@ 0xff
 8001ecc:	d802      	bhi.n	8001ed4 <HAL_GPIO_Init+0x14c>
 8001ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	e002      	b.n	8001eda <HAL_GPIO_Init+0x152>
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed6:	3b08      	subs	r3, #8
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	210f      	movs	r1, #15
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	401a      	ands	r2, r3
 8001eec:	6a39      	ldr	r1, [r7, #32]
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef4:	431a      	orrs	r2, r3
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f000 80b1 	beq.w	800206a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f08:	4b4d      	ldr	r3, [pc, #308]	@ (8002040 <HAL_GPIO_Init+0x2b8>)
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	4a4c      	ldr	r2, [pc, #304]	@ (8002040 <HAL_GPIO_Init+0x2b8>)
 8001f0e:	f043 0301 	orr.w	r3, r3, #1
 8001f12:	6193      	str	r3, [r2, #24]
 8001f14:	4b4a      	ldr	r3, [pc, #296]	@ (8002040 <HAL_GPIO_Init+0x2b8>)
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	60bb      	str	r3, [r7, #8]
 8001f1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f20:	4a48      	ldr	r2, [pc, #288]	@ (8002044 <HAL_GPIO_Init+0x2bc>)
 8001f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f24:	089b      	lsrs	r3, r3, #2
 8001f26:	3302      	adds	r3, #2
 8001f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f30:	f003 0303 	and.w	r3, r3, #3
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	220f      	movs	r2, #15
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	4013      	ands	r3, r2
 8001f42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a40      	ldr	r2, [pc, #256]	@ (8002048 <HAL_GPIO_Init+0x2c0>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d013      	beq.n	8001f74 <HAL_GPIO_Init+0x1ec>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a3f      	ldr	r2, [pc, #252]	@ (800204c <HAL_GPIO_Init+0x2c4>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d00d      	beq.n	8001f70 <HAL_GPIO_Init+0x1e8>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a3e      	ldr	r2, [pc, #248]	@ (8002050 <HAL_GPIO_Init+0x2c8>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d007      	beq.n	8001f6c <HAL_GPIO_Init+0x1e4>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a3d      	ldr	r2, [pc, #244]	@ (8002054 <HAL_GPIO_Init+0x2cc>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d101      	bne.n	8001f68 <HAL_GPIO_Init+0x1e0>
 8001f64:	2303      	movs	r3, #3
 8001f66:	e006      	b.n	8001f76 <HAL_GPIO_Init+0x1ee>
 8001f68:	2304      	movs	r3, #4
 8001f6a:	e004      	b.n	8001f76 <HAL_GPIO_Init+0x1ee>
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	e002      	b.n	8001f76 <HAL_GPIO_Init+0x1ee>
 8001f70:	2301      	movs	r3, #1
 8001f72:	e000      	b.n	8001f76 <HAL_GPIO_Init+0x1ee>
 8001f74:	2300      	movs	r3, #0
 8001f76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f78:	f002 0203 	and.w	r2, r2, #3
 8001f7c:	0092      	lsls	r2, r2, #2
 8001f7e:	4093      	lsls	r3, r2
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f86:	492f      	ldr	r1, [pc, #188]	@ (8002044 <HAL_GPIO_Init+0x2bc>)
 8001f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8a:	089b      	lsrs	r3, r3, #2
 8001f8c:	3302      	adds	r3, #2
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d006      	beq.n	8001fae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fa0:	4b2d      	ldr	r3, [pc, #180]	@ (8002058 <HAL_GPIO_Init+0x2d0>)
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	492c      	ldr	r1, [pc, #176]	@ (8002058 <HAL_GPIO_Init+0x2d0>)
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	608b      	str	r3, [r1, #8]
 8001fac:	e006      	b.n	8001fbc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fae:	4b2a      	ldr	r3, [pc, #168]	@ (8002058 <HAL_GPIO_Init+0x2d0>)
 8001fb0:	689a      	ldr	r2, [r3, #8]
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	4928      	ldr	r1, [pc, #160]	@ (8002058 <HAL_GPIO_Init+0x2d0>)
 8001fb8:	4013      	ands	r3, r2
 8001fba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d006      	beq.n	8001fd6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fc8:	4b23      	ldr	r3, [pc, #140]	@ (8002058 <HAL_GPIO_Init+0x2d0>)
 8001fca:	68da      	ldr	r2, [r3, #12]
 8001fcc:	4922      	ldr	r1, [pc, #136]	@ (8002058 <HAL_GPIO_Init+0x2d0>)
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	60cb      	str	r3, [r1, #12]
 8001fd4:	e006      	b.n	8001fe4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fd6:	4b20      	ldr	r3, [pc, #128]	@ (8002058 <HAL_GPIO_Init+0x2d0>)
 8001fd8:	68da      	ldr	r2, [r3, #12]
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	491e      	ldr	r1, [pc, #120]	@ (8002058 <HAL_GPIO_Init+0x2d0>)
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d006      	beq.n	8001ffe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ff0:	4b19      	ldr	r3, [pc, #100]	@ (8002058 <HAL_GPIO_Init+0x2d0>)
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	4918      	ldr	r1, [pc, #96]	@ (8002058 <HAL_GPIO_Init+0x2d0>)
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	604b      	str	r3, [r1, #4]
 8001ffc:	e006      	b.n	800200c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ffe:	4b16      	ldr	r3, [pc, #88]	@ (8002058 <HAL_GPIO_Init+0x2d0>)
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	43db      	mvns	r3, r3
 8002006:	4914      	ldr	r1, [pc, #80]	@ (8002058 <HAL_GPIO_Init+0x2d0>)
 8002008:	4013      	ands	r3, r2
 800200a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d021      	beq.n	800205c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002018:	4b0f      	ldr	r3, [pc, #60]	@ (8002058 <HAL_GPIO_Init+0x2d0>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	490e      	ldr	r1, [pc, #56]	@ (8002058 <HAL_GPIO_Init+0x2d0>)
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	4313      	orrs	r3, r2
 8002022:	600b      	str	r3, [r1, #0]
 8002024:	e021      	b.n	800206a <HAL_GPIO_Init+0x2e2>
 8002026:	bf00      	nop
 8002028:	10320000 	.word	0x10320000
 800202c:	10310000 	.word	0x10310000
 8002030:	10220000 	.word	0x10220000
 8002034:	10210000 	.word	0x10210000
 8002038:	10120000 	.word	0x10120000
 800203c:	10110000 	.word	0x10110000
 8002040:	40021000 	.word	0x40021000
 8002044:	40010000 	.word	0x40010000
 8002048:	40010800 	.word	0x40010800
 800204c:	40010c00 	.word	0x40010c00
 8002050:	40011000 	.word	0x40011000
 8002054:	40011400 	.word	0x40011400
 8002058:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800205c:	4b0b      	ldr	r3, [pc, #44]	@ (800208c <HAL_GPIO_Init+0x304>)
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	43db      	mvns	r3, r3
 8002064:	4909      	ldr	r1, [pc, #36]	@ (800208c <HAL_GPIO_Init+0x304>)
 8002066:	4013      	ands	r3, r2
 8002068:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800206a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206c:	3301      	adds	r3, #1
 800206e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002076:	fa22 f303 	lsr.w	r3, r2, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	f47f ae8e 	bne.w	8001d9c <HAL_GPIO_Init+0x14>
  }
}
 8002080:	bf00      	nop
 8002082:	bf00      	nop
 8002084:	372c      	adds	r7, #44	@ 0x2c
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr
 800208c:	40010400 	.word	0x40010400

08002090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	460b      	mov	r3, r1
 800209a:	807b      	strh	r3, [r7, #2]
 800209c:	4613      	mov	r3, r2
 800209e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020a0:	787b      	ldrb	r3, [r7, #1]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020a6:	887a      	ldrh	r2, [r7, #2]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020ac:	e003      	b.n	80020b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020ae:	887b      	ldrh	r3, [r7, #2]
 80020b0:	041a      	lsls	r2, r3, #16
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	611a      	str	r2, [r3, #16]
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr

080020c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e12b      	b.n	800232a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d106      	bne.n	80020ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f7ff f856 	bl	8001198 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2224      	movs	r2, #36	@ 0x24
 80020f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f022 0201 	bic.w	r2, r2, #1
 8002102:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002112:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002122:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002124:	f001 fbec 	bl	8003900 <HAL_RCC_GetPCLK1Freq>
 8002128:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	4a81      	ldr	r2, [pc, #516]	@ (8002334 <HAL_I2C_Init+0x274>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d807      	bhi.n	8002144 <HAL_I2C_Init+0x84>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	4a80      	ldr	r2, [pc, #512]	@ (8002338 <HAL_I2C_Init+0x278>)
 8002138:	4293      	cmp	r3, r2
 800213a:	bf94      	ite	ls
 800213c:	2301      	movls	r3, #1
 800213e:	2300      	movhi	r3, #0
 8002140:	b2db      	uxtb	r3, r3
 8002142:	e006      	b.n	8002152 <HAL_I2C_Init+0x92>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	4a7d      	ldr	r2, [pc, #500]	@ (800233c <HAL_I2C_Init+0x27c>)
 8002148:	4293      	cmp	r3, r2
 800214a:	bf94      	ite	ls
 800214c:	2301      	movls	r3, #1
 800214e:	2300      	movhi	r3, #0
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e0e7      	b.n	800232a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	4a78      	ldr	r2, [pc, #480]	@ (8002340 <HAL_I2C_Init+0x280>)
 800215e:	fba2 2303 	umull	r2, r3, r2, r3
 8002162:	0c9b      	lsrs	r3, r3, #18
 8002164:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68ba      	ldr	r2, [r7, #8]
 8002176:	430a      	orrs	r2, r1
 8002178:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	4a6a      	ldr	r2, [pc, #424]	@ (8002334 <HAL_I2C_Init+0x274>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d802      	bhi.n	8002194 <HAL_I2C_Init+0xd4>
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	3301      	adds	r3, #1
 8002192:	e009      	b.n	80021a8 <HAL_I2C_Init+0xe8>
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800219a:	fb02 f303 	mul.w	r3, r2, r3
 800219e:	4a69      	ldr	r2, [pc, #420]	@ (8002344 <HAL_I2C_Init+0x284>)
 80021a0:	fba2 2303 	umull	r2, r3, r2, r3
 80021a4:	099b      	lsrs	r3, r3, #6
 80021a6:	3301      	adds	r3, #1
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	6812      	ldr	r2, [r2, #0]
 80021ac:	430b      	orrs	r3, r1
 80021ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80021ba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	495c      	ldr	r1, [pc, #368]	@ (8002334 <HAL_I2C_Init+0x274>)
 80021c4:	428b      	cmp	r3, r1
 80021c6:	d819      	bhi.n	80021fc <HAL_I2C_Init+0x13c>
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	1e59      	subs	r1, r3, #1
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80021d6:	1c59      	adds	r1, r3, #1
 80021d8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80021dc:	400b      	ands	r3, r1
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00a      	beq.n	80021f8 <HAL_I2C_Init+0x138>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	1e59      	subs	r1, r3, #1
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80021f0:	3301      	adds	r3, #1
 80021f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021f6:	e051      	b.n	800229c <HAL_I2C_Init+0x1dc>
 80021f8:	2304      	movs	r3, #4
 80021fa:	e04f      	b.n	800229c <HAL_I2C_Init+0x1dc>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d111      	bne.n	8002228 <HAL_I2C_Init+0x168>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	1e58      	subs	r0, r3, #1
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6859      	ldr	r1, [r3, #4]
 800220c:	460b      	mov	r3, r1
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	440b      	add	r3, r1
 8002212:	fbb0 f3f3 	udiv	r3, r0, r3
 8002216:	3301      	adds	r3, #1
 8002218:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800221c:	2b00      	cmp	r3, #0
 800221e:	bf0c      	ite	eq
 8002220:	2301      	moveq	r3, #1
 8002222:	2300      	movne	r3, #0
 8002224:	b2db      	uxtb	r3, r3
 8002226:	e012      	b.n	800224e <HAL_I2C_Init+0x18e>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	1e58      	subs	r0, r3, #1
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6859      	ldr	r1, [r3, #4]
 8002230:	460b      	mov	r3, r1
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	440b      	add	r3, r1
 8002236:	0099      	lsls	r1, r3, #2
 8002238:	440b      	add	r3, r1
 800223a:	fbb0 f3f3 	udiv	r3, r0, r3
 800223e:	3301      	adds	r3, #1
 8002240:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002244:	2b00      	cmp	r3, #0
 8002246:	bf0c      	ite	eq
 8002248:	2301      	moveq	r3, #1
 800224a:	2300      	movne	r3, #0
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <HAL_I2C_Init+0x196>
 8002252:	2301      	movs	r3, #1
 8002254:	e022      	b.n	800229c <HAL_I2C_Init+0x1dc>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d10e      	bne.n	800227c <HAL_I2C_Init+0x1bc>
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	1e58      	subs	r0, r3, #1
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6859      	ldr	r1, [r3, #4]
 8002266:	460b      	mov	r3, r1
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	440b      	add	r3, r1
 800226c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002270:	3301      	adds	r3, #1
 8002272:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002276:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800227a:	e00f      	b.n	800229c <HAL_I2C_Init+0x1dc>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	1e58      	subs	r0, r3, #1
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6859      	ldr	r1, [r3, #4]
 8002284:	460b      	mov	r3, r1
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	440b      	add	r3, r1
 800228a:	0099      	lsls	r1, r3, #2
 800228c:	440b      	add	r3, r1
 800228e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002292:	3301      	adds	r3, #1
 8002294:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002298:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800229c:	6879      	ldr	r1, [r7, #4]
 800229e:	6809      	ldr	r1, [r1, #0]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	69da      	ldr	r2, [r3, #28]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	431a      	orrs	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	430a      	orrs	r2, r1
 80022be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80022ca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	6911      	ldr	r1, [r2, #16]
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	68d2      	ldr	r2, [r2, #12]
 80022d6:	4311      	orrs	r1, r2
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	6812      	ldr	r2, [r2, #0]
 80022dc:	430b      	orrs	r3, r1
 80022de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	695a      	ldr	r2, [r3, #20]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	431a      	orrs	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	430a      	orrs	r2, r1
 80022fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0201 	orr.w	r2, r2, #1
 800230a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2220      	movs	r2, #32
 8002316:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	000186a0 	.word	0x000186a0
 8002338:	001e847f 	.word	0x001e847f
 800233c:	003d08ff 	.word	0x003d08ff
 8002340:	431bde83 	.word	0x431bde83
 8002344:	10624dd3 	.word	0x10624dd3

08002348 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b088      	sub	sp, #32
 800234c:	af02      	add	r7, sp, #8
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	607a      	str	r2, [r7, #4]
 8002352:	461a      	mov	r2, r3
 8002354:	460b      	mov	r3, r1
 8002356:	817b      	strh	r3, [r7, #10]
 8002358:	4613      	mov	r3, r2
 800235a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800235c:	f7ff f8e8 	bl	8001530 <HAL_GetTick>
 8002360:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b20      	cmp	r3, #32
 800236c:	f040 80e0 	bne.w	8002530 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	2319      	movs	r3, #25
 8002376:	2201      	movs	r2, #1
 8002378:	4970      	ldr	r1, [pc, #448]	@ (800253c <HAL_I2C_Master_Transmit+0x1f4>)
 800237a:	68f8      	ldr	r0, [r7, #12]
 800237c:	f000 fcc0 	bl	8002d00 <I2C_WaitOnFlagUntilTimeout>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002386:	2302      	movs	r3, #2
 8002388:	e0d3      	b.n	8002532 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002390:	2b01      	cmp	r3, #1
 8002392:	d101      	bne.n	8002398 <HAL_I2C_Master_Transmit+0x50>
 8002394:	2302      	movs	r3, #2
 8002396:	e0cc      	b.n	8002532 <HAL_I2C_Master_Transmit+0x1ea>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d007      	beq.n	80023be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f042 0201 	orr.w	r2, r2, #1
 80023bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2221      	movs	r2, #33	@ 0x21
 80023d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2210      	movs	r2, #16
 80023da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	893a      	ldrh	r2, [r7, #8]
 80023ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	4a50      	ldr	r2, [pc, #320]	@ (8002540 <HAL_I2C_Master_Transmit+0x1f8>)
 80023fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002400:	8979      	ldrh	r1, [r7, #10]
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	6a3a      	ldr	r2, [r7, #32]
 8002406:	68f8      	ldr	r0, [r7, #12]
 8002408:	f000 fb10 	bl	8002a2c <I2C_MasterRequestWrite>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e08d      	b.n	8002532 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002416:	2300      	movs	r3, #0
 8002418:	613b      	str	r3, [r7, #16]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	613b      	str	r3, [r7, #16]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	613b      	str	r3, [r7, #16]
 800242a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800242c:	e066      	b.n	80024fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	6a39      	ldr	r1, [r7, #32]
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f000 fd7e 	bl	8002f34 <I2C_WaitOnTXEFlagUntilTimeout>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00d      	beq.n	800245a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002442:	2b04      	cmp	r3, #4
 8002444:	d107      	bne.n	8002456 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002454:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e06b      	b.n	8002532 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245e:	781a      	ldrb	r2, [r3, #0]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800246a:	1c5a      	adds	r2, r3, #1
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002474:	b29b      	uxth	r3, r3
 8002476:	3b01      	subs	r3, #1
 8002478:	b29a      	uxth	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002482:	3b01      	subs	r3, #1
 8002484:	b29a      	uxth	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	695b      	ldr	r3, [r3, #20]
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	2b04      	cmp	r3, #4
 8002496:	d11b      	bne.n	80024d0 <HAL_I2C_Master_Transmit+0x188>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800249c:	2b00      	cmp	r3, #0
 800249e:	d017      	beq.n	80024d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a4:	781a      	ldrb	r2, [r3, #0]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b0:	1c5a      	adds	r2, r3, #1
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	3b01      	subs	r3, #1
 80024be:	b29a      	uxth	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024c8:	3b01      	subs	r3, #1
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	6a39      	ldr	r1, [r7, #32]
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f000 fd75 	bl	8002fc4 <I2C_WaitOnBTFFlagUntilTimeout>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00d      	beq.n	80024fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e4:	2b04      	cmp	r3, #4
 80024e6:	d107      	bne.n	80024f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e01a      	b.n	8002532 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002500:	2b00      	cmp	r3, #0
 8002502:	d194      	bne.n	800242e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002512:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2220      	movs	r2, #32
 8002518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800252c:	2300      	movs	r3, #0
 800252e:	e000      	b.n	8002532 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002530:	2302      	movs	r3, #2
  }
}
 8002532:	4618      	mov	r0, r3
 8002534:	3718      	adds	r7, #24
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	00100002 	.word	0x00100002
 8002540:	ffff0000 	.word	0xffff0000

08002544 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08c      	sub	sp, #48	@ 0x30
 8002548:	af02      	add	r7, sp, #8
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	4608      	mov	r0, r1
 800254e:	4611      	mov	r1, r2
 8002550:	461a      	mov	r2, r3
 8002552:	4603      	mov	r3, r0
 8002554:	817b      	strh	r3, [r7, #10]
 8002556:	460b      	mov	r3, r1
 8002558:	813b      	strh	r3, [r7, #8]
 800255a:	4613      	mov	r3, r2
 800255c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800255e:	2300      	movs	r3, #0
 8002560:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002562:	f7fe ffe5 	bl	8001530 <HAL_GetTick>
 8002566:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b20      	cmp	r3, #32
 8002572:	f040 8250 	bne.w	8002a16 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	2319      	movs	r3, #25
 800257c:	2201      	movs	r2, #1
 800257e:	4982      	ldr	r1, [pc, #520]	@ (8002788 <HAL_I2C_Mem_Read+0x244>)
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	f000 fbbd 	bl	8002d00 <I2C_WaitOnFlagUntilTimeout>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800258c:	2302      	movs	r3, #2
 800258e:	e243      	b.n	8002a18 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002596:	2b01      	cmp	r3, #1
 8002598:	d101      	bne.n	800259e <HAL_I2C_Mem_Read+0x5a>
 800259a:	2302      	movs	r3, #2
 800259c:	e23c      	b.n	8002a18 <HAL_I2C_Mem_Read+0x4d4>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2201      	movs	r2, #1
 80025a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d007      	beq.n	80025c4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f042 0201 	orr.w	r2, r2, #1
 80025c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2222      	movs	r2, #34	@ 0x22
 80025d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2240      	movs	r2, #64	@ 0x40
 80025e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80025f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	4a62      	ldr	r2, [pc, #392]	@ (800278c <HAL_I2C_Mem_Read+0x248>)
 8002604:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002606:	88f8      	ldrh	r0, [r7, #6]
 8002608:	893a      	ldrh	r2, [r7, #8]
 800260a:	8979      	ldrh	r1, [r7, #10]
 800260c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260e:	9301      	str	r3, [sp, #4]
 8002610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002612:	9300      	str	r3, [sp, #0]
 8002614:	4603      	mov	r3, r0
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f000 fa8a 	bl	8002b30 <I2C_RequestMemoryRead>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e1f8      	b.n	8002a18 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800262a:	2b00      	cmp	r3, #0
 800262c:	d113      	bne.n	8002656 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800262e:	2300      	movs	r3, #0
 8002630:	61fb      	str	r3, [r7, #28]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	695b      	ldr	r3, [r3, #20]
 8002638:	61fb      	str	r3, [r7, #28]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	61fb      	str	r3, [r7, #28]
 8002642:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	e1cc      	b.n	80029f0 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800265a:	2b01      	cmp	r3, #1
 800265c:	d11e      	bne.n	800269c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800266c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800266e:	b672      	cpsid	i
}
 8002670:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002672:	2300      	movs	r3, #0
 8002674:	61bb      	str	r3, [r7, #24]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	61bb      	str	r3, [r7, #24]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	61bb      	str	r3, [r7, #24]
 8002686:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002696:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002698:	b662      	cpsie	i
}
 800269a:	e035      	b.n	8002708 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d11e      	bne.n	80026e2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026b2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80026b4:	b672      	cpsid	i
}
 80026b6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026b8:	2300      	movs	r3, #0
 80026ba:	617b      	str	r3, [r7, #20]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	617b      	str	r3, [r7, #20]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	617b      	str	r3, [r7, #20]
 80026cc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80026de:	b662      	cpsie	i
}
 80026e0:	e012      	b.n	8002708 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80026f0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026f2:	2300      	movs	r3, #0
 80026f4:	613b      	str	r3, [r7, #16]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	613b      	str	r3, [r7, #16]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	613b      	str	r3, [r7, #16]
 8002706:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002708:	e172      	b.n	80029f0 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800270e:	2b03      	cmp	r3, #3
 8002710:	f200 811f 	bhi.w	8002952 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002718:	2b01      	cmp	r3, #1
 800271a:	d123      	bne.n	8002764 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800271c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800271e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f000 fc97 	bl	8003054 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e173      	b.n	8002a18 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	691a      	ldr	r2, [r3, #16]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002742:	1c5a      	adds	r2, r3, #1
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800274c:	3b01      	subs	r3, #1
 800274e:	b29a      	uxth	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002758:	b29b      	uxth	r3, r3
 800275a:	3b01      	subs	r3, #1
 800275c:	b29a      	uxth	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002762:	e145      	b.n	80029f0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002768:	2b02      	cmp	r3, #2
 800276a:	d152      	bne.n	8002812 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800276c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276e:	9300      	str	r3, [sp, #0]
 8002770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002772:	2200      	movs	r2, #0
 8002774:	4906      	ldr	r1, [pc, #24]	@ (8002790 <HAL_I2C_Mem_Read+0x24c>)
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f000 fac2 	bl	8002d00 <I2C_WaitOnFlagUntilTimeout>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d008      	beq.n	8002794 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e148      	b.n	8002a18 <HAL_I2C_Mem_Read+0x4d4>
 8002786:	bf00      	nop
 8002788:	00100002 	.word	0x00100002
 800278c:	ffff0000 	.word	0xffff0000
 8002790:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002794:	b672      	cpsid	i
}
 8002796:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	691a      	ldr	r2, [r3, #16]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b2:	b2d2      	uxtb	r2, r2
 80027b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ba:	1c5a      	adds	r2, r3, #1
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027c4:	3b01      	subs	r3, #1
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	3b01      	subs	r3, #1
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80027da:	b662      	cpsie	i
}
 80027dc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	691a      	ldr	r2, [r3, #16]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f0:	1c5a      	adds	r2, r3, #1
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027fa:	3b01      	subs	r3, #1
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002806:	b29b      	uxth	r3, r3
 8002808:	3b01      	subs	r3, #1
 800280a:	b29a      	uxth	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002810:	e0ee      	b.n	80029f0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002818:	2200      	movs	r2, #0
 800281a:	4981      	ldr	r1, [pc, #516]	@ (8002a20 <HAL_I2C_Mem_Read+0x4dc>)
 800281c:	68f8      	ldr	r0, [r7, #12]
 800281e:	f000 fa6f 	bl	8002d00 <I2C_WaitOnFlagUntilTimeout>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e0f5      	b.n	8002a18 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800283a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800283c:	b672      	cpsid	i
}
 800283e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	691a      	ldr	r2, [r3, #16]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002852:	1c5a      	adds	r2, r3, #1
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800285c:	3b01      	subs	r3, #1
 800285e:	b29a      	uxth	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002868:	b29b      	uxth	r3, r3
 800286a:	3b01      	subs	r3, #1
 800286c:	b29a      	uxth	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002872:	4b6c      	ldr	r3, [pc, #432]	@ (8002a24 <HAL_I2C_Mem_Read+0x4e0>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	08db      	lsrs	r3, r3, #3
 8002878:	4a6b      	ldr	r2, [pc, #428]	@ (8002a28 <HAL_I2C_Mem_Read+0x4e4>)
 800287a:	fba2 2303 	umull	r2, r3, r2, r3
 800287e:	0a1a      	lsrs	r2, r3, #8
 8002880:	4613      	mov	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4413      	add	r3, r2
 8002886:	00da      	lsls	r2, r3, #3
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800288c:	6a3b      	ldr	r3, [r7, #32]
 800288e:	3b01      	subs	r3, #1
 8002890:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002892:	6a3b      	ldr	r3, [r7, #32]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d118      	bne.n	80028ca <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2220      	movs	r2, #32
 80028a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b2:	f043 0220 	orr.w	r2, r3, #32
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80028ba:	b662      	cpsie	i
}
 80028bc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e0a6      	b.n	8002a18 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	f003 0304 	and.w	r3, r3, #4
 80028d4:	2b04      	cmp	r3, #4
 80028d6:	d1d9      	bne.n	800288c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	691a      	ldr	r2, [r3, #16]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f2:	b2d2      	uxtb	r2, r2
 80028f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fa:	1c5a      	adds	r2, r3, #1
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002904:	3b01      	subs	r3, #1
 8002906:	b29a      	uxth	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002910:	b29b      	uxth	r3, r3
 8002912:	3b01      	subs	r3, #1
 8002914:	b29a      	uxth	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800291a:	b662      	cpsie	i
}
 800291c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	691a      	ldr	r2, [r3, #16]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002928:	b2d2      	uxtb	r2, r2
 800292a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002930:	1c5a      	adds	r2, r3, #1
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800293a:	3b01      	subs	r3, #1
 800293c:	b29a      	uxth	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002946:	b29b      	uxth	r3, r3
 8002948:	3b01      	subs	r3, #1
 800294a:	b29a      	uxth	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002950:	e04e      	b.n	80029f0 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002952:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002954:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f000 fb7c 	bl	8003054 <I2C_WaitOnRXNEFlagUntilTimeout>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e058      	b.n	8002a18 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	691a      	ldr	r2, [r3, #16]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002978:	1c5a      	adds	r2, r3, #1
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002982:	3b01      	subs	r3, #1
 8002984:	b29a      	uxth	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800298e:	b29b      	uxth	r3, r3
 8002990:	3b01      	subs	r3, #1
 8002992:	b29a      	uxth	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	f003 0304 	and.w	r3, r3, #4
 80029a2:	2b04      	cmp	r3, #4
 80029a4:	d124      	bne.n	80029f0 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029aa:	2b03      	cmp	r3, #3
 80029ac:	d107      	bne.n	80029be <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029bc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	691a      	ldr	r2, [r3, #16]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c8:	b2d2      	uxtb	r2, r2
 80029ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d0:	1c5a      	adds	r2, r3, #1
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029da:	3b01      	subs	r3, #1
 80029dc:	b29a      	uxth	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	3b01      	subs	r3, #1
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f47f ae88 	bne.w	800270a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2220      	movs	r2, #32
 80029fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002a12:	2300      	movs	r3, #0
 8002a14:	e000      	b.n	8002a18 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8002a16:	2302      	movs	r3, #2
  }
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3728      	adds	r7, #40	@ 0x28
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	00010004 	.word	0x00010004
 8002a24:	20000000 	.word	0x20000000
 8002a28:	14f8b589 	.word	0x14f8b589

08002a2c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b088      	sub	sp, #32
 8002a30:	af02      	add	r7, sp, #8
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	607a      	str	r2, [r7, #4]
 8002a36:	603b      	str	r3, [r7, #0]
 8002a38:	460b      	mov	r3, r1
 8002a3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a40:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	2b08      	cmp	r3, #8
 8002a46:	d006      	beq.n	8002a56 <I2C_MasterRequestWrite+0x2a>
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d003      	beq.n	8002a56 <I2C_MasterRequestWrite+0x2a>
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002a54:	d108      	bne.n	8002a68 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	e00b      	b.n	8002a80 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6c:	2b12      	cmp	r3, #18
 8002a6e:	d107      	bne.n	8002a80 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a7e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f000 f937 	bl	8002d00 <I2C_WaitOnFlagUntilTimeout>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00d      	beq.n	8002ab4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aa2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002aa6:	d103      	bne.n	8002ab0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002aae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e035      	b.n	8002b20 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002abc:	d108      	bne.n	8002ad0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002abe:	897b      	ldrh	r3, [r7, #10]
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002acc:	611a      	str	r2, [r3, #16]
 8002ace:	e01b      	b.n	8002b08 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ad0:	897b      	ldrh	r3, [r7, #10]
 8002ad2:	11db      	asrs	r3, r3, #7
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	f003 0306 	and.w	r3, r3, #6
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	f063 030f 	orn	r3, r3, #15
 8002ae0:	b2da      	uxtb	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	490e      	ldr	r1, [pc, #56]	@ (8002b28 <I2C_MasterRequestWrite+0xfc>)
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f000 f980 	bl	8002df4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e010      	b.n	8002b20 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002afe:	897b      	ldrh	r3, [r7, #10]
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	4907      	ldr	r1, [pc, #28]	@ (8002b2c <I2C_MasterRequestWrite+0x100>)
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f000 f970 	bl	8002df4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e000      	b.n	8002b20 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3718      	adds	r7, #24
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	00010008 	.word	0x00010008
 8002b2c:	00010002 	.word	0x00010002

08002b30 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b088      	sub	sp, #32
 8002b34:	af02      	add	r7, sp, #8
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	4608      	mov	r0, r1
 8002b3a:	4611      	mov	r1, r2
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	4603      	mov	r3, r0
 8002b40:	817b      	strh	r3, [r7, #10]
 8002b42:	460b      	mov	r3, r1
 8002b44:	813b      	strh	r3, [r7, #8]
 8002b46:	4613      	mov	r3, r2
 8002b48:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b58:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b68:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6c:	9300      	str	r3, [sp, #0]
 8002b6e:	6a3b      	ldr	r3, [r7, #32]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b76:	68f8      	ldr	r0, [r7, #12]
 8002b78:	f000 f8c2 	bl	8002d00 <I2C_WaitOnFlagUntilTimeout>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00d      	beq.n	8002b9e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b90:	d103      	bne.n	8002b9a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b98:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e0aa      	b.n	8002cf4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b9e:	897b      	ldrh	r3, [r7, #10]
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002bac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb0:	6a3a      	ldr	r2, [r7, #32]
 8002bb2:	4952      	ldr	r1, [pc, #328]	@ (8002cfc <I2C_RequestMemoryRead+0x1cc>)
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f000 f91d 	bl	8002df4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e097      	b.n	8002cf4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	617b      	str	r3, [r7, #20]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	617b      	str	r3, [r7, #20]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	617b      	str	r3, [r7, #20]
 8002bd8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bdc:	6a39      	ldr	r1, [r7, #32]
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f000 f9a8 	bl	8002f34 <I2C_WaitOnTXEFlagUntilTimeout>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00d      	beq.n	8002c06 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	d107      	bne.n	8002c02 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e076      	b.n	8002cf4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c06:	88fb      	ldrh	r3, [r7, #6]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d105      	bne.n	8002c18 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c0c:	893b      	ldrh	r3, [r7, #8]
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	611a      	str	r2, [r3, #16]
 8002c16:	e021      	b.n	8002c5c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c18:	893b      	ldrh	r3, [r7, #8]
 8002c1a:	0a1b      	lsrs	r3, r3, #8
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	b2da      	uxtb	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c28:	6a39      	ldr	r1, [r7, #32]
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f000 f982 	bl	8002f34 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00d      	beq.n	8002c52 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	d107      	bne.n	8002c4e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e050      	b.n	8002cf4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c52:	893b      	ldrh	r3, [r7, #8]
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c5e:	6a39      	ldr	r1, [r7, #32]
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f000 f967 	bl	8002f34 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00d      	beq.n	8002c88 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c70:	2b04      	cmp	r3, #4
 8002c72:	d107      	bne.n	8002c84 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c82:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e035      	b.n	8002cf4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c96:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	6a3b      	ldr	r3, [r7, #32]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f000 f82b 	bl	8002d00 <I2C_WaitOnFlagUntilTimeout>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00d      	beq.n	8002ccc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cbe:	d103      	bne.n	8002cc8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cc6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e013      	b.n	8002cf4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002ccc:	897b      	ldrh	r3, [r7, #10]
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	f043 0301 	orr.w	r3, r3, #1
 8002cd4:	b2da      	uxtb	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cde:	6a3a      	ldr	r2, [r7, #32]
 8002ce0:	4906      	ldr	r1, [pc, #24]	@ (8002cfc <I2C_RequestMemoryRead+0x1cc>)
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 f886 	bl	8002df4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e000      	b.n	8002cf4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3718      	adds	r7, #24
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	00010002 	.word	0x00010002

08002d00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	603b      	str	r3, [r7, #0]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d10:	e048      	b.n	8002da4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d18:	d044      	beq.n	8002da4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d1a:	f7fe fc09 	bl	8001530 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d302      	bcc.n	8002d30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d139      	bne.n	8002da4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	0c1b      	lsrs	r3, r3, #16
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d10d      	bne.n	8002d56 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	695b      	ldr	r3, [r3, #20]
 8002d40:	43da      	mvns	r2, r3
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	4013      	ands	r3, r2
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	bf0c      	ite	eq
 8002d4c:	2301      	moveq	r3, #1
 8002d4e:	2300      	movne	r3, #0
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	461a      	mov	r2, r3
 8002d54:	e00c      	b.n	8002d70 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	43da      	mvns	r2, r3
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	4013      	ands	r3, r2
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	bf0c      	ite	eq
 8002d68:	2301      	moveq	r3, #1
 8002d6a:	2300      	movne	r3, #0
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	461a      	mov	r2, r3
 8002d70:	79fb      	ldrb	r3, [r7, #7]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d116      	bne.n	8002da4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d90:	f043 0220 	orr.w	r2, r3, #32
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e023      	b.n	8002dec <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	0c1b      	lsrs	r3, r3, #16
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d10d      	bne.n	8002dca <I2C_WaitOnFlagUntilTimeout+0xca>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	43da      	mvns	r2, r3
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	4013      	ands	r3, r2
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	bf0c      	ite	eq
 8002dc0:	2301      	moveq	r3, #1
 8002dc2:	2300      	movne	r3, #0
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	e00c      	b.n	8002de4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	43da      	mvns	r2, r3
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	bf0c      	ite	eq
 8002ddc:	2301      	moveq	r3, #1
 8002dde:	2300      	movne	r3, #0
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	461a      	mov	r2, r3
 8002de4:	79fb      	ldrb	r3, [r7, #7]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d093      	beq.n	8002d12 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
 8002e00:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e02:	e071      	b.n	8002ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e12:	d123      	bne.n	8002e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e22:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2220      	movs	r2, #32
 8002e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e48:	f043 0204 	orr.w	r2, r3, #4
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e067      	b.n	8002f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e62:	d041      	beq.n	8002ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e64:	f7fe fb64 	bl	8001530 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d302      	bcc.n	8002e7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d136      	bne.n	8002ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	0c1b      	lsrs	r3, r3, #16
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d10c      	bne.n	8002e9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	43da      	mvns	r2, r3
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	bf14      	ite	ne
 8002e96:	2301      	movne	r3, #1
 8002e98:	2300      	moveq	r3, #0
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	e00b      	b.n	8002eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	43da      	mvns	r2, r3
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	bf14      	ite	ne
 8002eb0:	2301      	movne	r3, #1
 8002eb2:	2300      	moveq	r3, #0
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d016      	beq.n	8002ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed4:	f043 0220 	orr.w	r2, r3, #32
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e021      	b.n	8002f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	0c1b      	lsrs	r3, r3, #16
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d10c      	bne.n	8002f0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	695b      	ldr	r3, [r3, #20]
 8002ef8:	43da      	mvns	r2, r3
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	4013      	ands	r3, r2
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	bf14      	ite	ne
 8002f04:	2301      	movne	r3, #1
 8002f06:	2300      	moveq	r3, #0
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	e00b      	b.n	8002f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	43da      	mvns	r2, r3
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	4013      	ands	r3, r2
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	bf14      	ite	ne
 8002f1e:	2301      	movne	r3, #1
 8002f20:	2300      	moveq	r3, #0
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f47f af6d 	bne.w	8002e04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f40:	e034      	b.n	8002fac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f000 f8e3 	bl	800310e <I2C_IsAcknowledgeFailed>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e034      	b.n	8002fbc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f58:	d028      	beq.n	8002fac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f5a:	f7fe fae9 	bl	8001530 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	68ba      	ldr	r2, [r7, #8]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d302      	bcc.n	8002f70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d11d      	bne.n	8002fac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f7a:	2b80      	cmp	r3, #128	@ 0x80
 8002f7c:	d016      	beq.n	8002fac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2220      	movs	r2, #32
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f98:	f043 0220 	orr.w	r2, r3, #32
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e007      	b.n	8002fbc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fb6:	2b80      	cmp	r3, #128	@ 0x80
 8002fb8:	d1c3      	bne.n	8002f42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fd0:	e034      	b.n	800303c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f000 f89b 	bl	800310e <I2C_IsAcknowledgeFailed>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e034      	b.n	800304c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe8:	d028      	beq.n	800303c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fea:	f7fe faa1 	bl	8001530 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	68ba      	ldr	r2, [r7, #8]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d302      	bcc.n	8003000 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d11d      	bne.n	800303c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	f003 0304 	and.w	r3, r3, #4
 800300a:	2b04      	cmp	r3, #4
 800300c:	d016      	beq.n	800303c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2220      	movs	r2, #32
 8003018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003028:	f043 0220 	orr.w	r2, r3, #32
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e007      	b.n	800304c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	f003 0304 	and.w	r3, r3, #4
 8003046:	2b04      	cmp	r3, #4
 8003048:	d1c3      	bne.n	8002fd2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003060:	e049      	b.n	80030f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	f003 0310 	and.w	r3, r3, #16
 800306c:	2b10      	cmp	r3, #16
 800306e:	d119      	bne.n	80030a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f06f 0210 	mvn.w	r2, #16
 8003078:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2220      	movs	r2, #32
 8003084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e030      	b.n	8003106 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030a4:	f7fe fa44 	bl	8001530 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	68ba      	ldr	r2, [r7, #8]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d302      	bcc.n	80030ba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d11d      	bne.n	80030f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030c4:	2b40      	cmp	r3, #64	@ 0x40
 80030c6:	d016      	beq.n	80030f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2220      	movs	r2, #32
 80030d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e2:	f043 0220 	orr.w	r2, r3, #32
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e007      	b.n	8003106 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003100:	2b40      	cmp	r3, #64	@ 0x40
 8003102:	d1ae      	bne.n	8003062 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800310e:	b480      	push	{r7}
 8003110:	b083      	sub	sp, #12
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	695b      	ldr	r3, [r3, #20]
 800311c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003120:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003124:	d11b      	bne.n	800315e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800312e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2220      	movs	r2, #32
 800313a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314a:	f043 0204 	orr.w	r2, r3, #4
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e000      	b.n	8003160 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	bc80      	pop	{r7}
 8003168:	4770      	bx	lr
	...

0800316c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e272      	b.n	8003664 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b00      	cmp	r3, #0
 8003188:	f000 8087 	beq.w	800329a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800318c:	4b92      	ldr	r3, [pc, #584]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f003 030c 	and.w	r3, r3, #12
 8003194:	2b04      	cmp	r3, #4
 8003196:	d00c      	beq.n	80031b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003198:	4b8f      	ldr	r3, [pc, #572]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f003 030c 	and.w	r3, r3, #12
 80031a0:	2b08      	cmp	r3, #8
 80031a2:	d112      	bne.n	80031ca <HAL_RCC_OscConfig+0x5e>
 80031a4:	4b8c      	ldr	r3, [pc, #560]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031b0:	d10b      	bne.n	80031ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031b2:	4b89      	ldr	r3, [pc, #548]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d06c      	beq.n	8003298 <HAL_RCC_OscConfig+0x12c>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d168      	bne.n	8003298 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e24c      	b.n	8003664 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031d2:	d106      	bne.n	80031e2 <HAL_RCC_OscConfig+0x76>
 80031d4:	4b80      	ldr	r3, [pc, #512]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a7f      	ldr	r2, [pc, #508]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 80031da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031de:	6013      	str	r3, [r2, #0]
 80031e0:	e02e      	b.n	8003240 <HAL_RCC_OscConfig+0xd4>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10c      	bne.n	8003204 <HAL_RCC_OscConfig+0x98>
 80031ea:	4b7b      	ldr	r3, [pc, #492]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a7a      	ldr	r2, [pc, #488]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 80031f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031f4:	6013      	str	r3, [r2, #0]
 80031f6:	4b78      	ldr	r3, [pc, #480]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a77      	ldr	r2, [pc, #476]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 80031fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003200:	6013      	str	r3, [r2, #0]
 8003202:	e01d      	b.n	8003240 <HAL_RCC_OscConfig+0xd4>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800320c:	d10c      	bne.n	8003228 <HAL_RCC_OscConfig+0xbc>
 800320e:	4b72      	ldr	r3, [pc, #456]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a71      	ldr	r2, [pc, #452]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 8003214:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003218:	6013      	str	r3, [r2, #0]
 800321a:	4b6f      	ldr	r3, [pc, #444]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a6e      	ldr	r2, [pc, #440]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 8003220:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003224:	6013      	str	r3, [r2, #0]
 8003226:	e00b      	b.n	8003240 <HAL_RCC_OscConfig+0xd4>
 8003228:	4b6b      	ldr	r3, [pc, #428]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a6a      	ldr	r2, [pc, #424]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 800322e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003232:	6013      	str	r3, [r2, #0]
 8003234:	4b68      	ldr	r3, [pc, #416]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a67      	ldr	r2, [pc, #412]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 800323a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800323e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d013      	beq.n	8003270 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003248:	f7fe f972 	bl	8001530 <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003250:	f7fe f96e 	bl	8001530 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b64      	cmp	r3, #100	@ 0x64
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e200      	b.n	8003664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003262:	4b5d      	ldr	r3, [pc, #372]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d0f0      	beq.n	8003250 <HAL_RCC_OscConfig+0xe4>
 800326e:	e014      	b.n	800329a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003270:	f7fe f95e 	bl	8001530 <HAL_GetTick>
 8003274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003276:	e008      	b.n	800328a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003278:	f7fe f95a 	bl	8001530 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b64      	cmp	r3, #100	@ 0x64
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e1ec      	b.n	8003664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800328a:	4b53      	ldr	r3, [pc, #332]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1f0      	bne.n	8003278 <HAL_RCC_OscConfig+0x10c>
 8003296:	e000      	b.n	800329a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003298:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d063      	beq.n	800336e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032a6:	4b4c      	ldr	r3, [pc, #304]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f003 030c 	and.w	r3, r3, #12
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00b      	beq.n	80032ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80032b2:	4b49      	ldr	r3, [pc, #292]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f003 030c 	and.w	r3, r3, #12
 80032ba:	2b08      	cmp	r3, #8
 80032bc:	d11c      	bne.n	80032f8 <HAL_RCC_OscConfig+0x18c>
 80032be:	4b46      	ldr	r3, [pc, #280]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d116      	bne.n	80032f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ca:	4b43      	ldr	r3, [pc, #268]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d005      	beq.n	80032e2 <HAL_RCC_OscConfig+0x176>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d001      	beq.n	80032e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e1c0      	b.n	8003664 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032e2:	4b3d      	ldr	r3, [pc, #244]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	4939      	ldr	r1, [pc, #228]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032f6:	e03a      	b.n	800336e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d020      	beq.n	8003342 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003300:	4b36      	ldr	r3, [pc, #216]	@ (80033dc <HAL_RCC_OscConfig+0x270>)
 8003302:	2201      	movs	r2, #1
 8003304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003306:	f7fe f913 	bl	8001530 <HAL_GetTick>
 800330a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800330c:	e008      	b.n	8003320 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800330e:	f7fe f90f 	bl	8001530 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e1a1      	b.n	8003664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003320:	4b2d      	ldr	r3, [pc, #180]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d0f0      	beq.n	800330e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800332c:	4b2a      	ldr	r3, [pc, #168]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	4927      	ldr	r1, [pc, #156]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 800333c:	4313      	orrs	r3, r2
 800333e:	600b      	str	r3, [r1, #0]
 8003340:	e015      	b.n	800336e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003342:	4b26      	ldr	r3, [pc, #152]	@ (80033dc <HAL_RCC_OscConfig+0x270>)
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003348:	f7fe f8f2 	bl	8001530 <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003350:	f7fe f8ee 	bl	8001530 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e180      	b.n	8003664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003362:	4b1d      	ldr	r3, [pc, #116]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1f0      	bne.n	8003350 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0308 	and.w	r3, r3, #8
 8003376:	2b00      	cmp	r3, #0
 8003378:	d03a      	beq.n	80033f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d019      	beq.n	80033b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003382:	4b17      	ldr	r3, [pc, #92]	@ (80033e0 <HAL_RCC_OscConfig+0x274>)
 8003384:	2201      	movs	r2, #1
 8003386:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003388:	f7fe f8d2 	bl	8001530 <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003390:	f7fe f8ce 	bl	8001530 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e160      	b.n	8003664 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033a2:	4b0d      	ldr	r3, [pc, #52]	@ (80033d8 <HAL_RCC_OscConfig+0x26c>)
 80033a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d0f0      	beq.n	8003390 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80033ae:	2001      	movs	r0, #1
 80033b0:	f000 face 	bl	8003950 <RCC_Delay>
 80033b4:	e01c      	b.n	80033f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033b6:	4b0a      	ldr	r3, [pc, #40]	@ (80033e0 <HAL_RCC_OscConfig+0x274>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033bc:	f7fe f8b8 	bl	8001530 <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033c2:	e00f      	b.n	80033e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033c4:	f7fe f8b4 	bl	8001530 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d908      	bls.n	80033e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e146      	b.n	8003664 <HAL_RCC_OscConfig+0x4f8>
 80033d6:	bf00      	nop
 80033d8:	40021000 	.word	0x40021000
 80033dc:	42420000 	.word	0x42420000
 80033e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033e4:	4b92      	ldr	r3, [pc, #584]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 80033e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1e9      	bne.n	80033c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0304 	and.w	r3, r3, #4
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f000 80a6 	beq.w	800354a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033fe:	2300      	movs	r3, #0
 8003400:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003402:	4b8b      	ldr	r3, [pc, #556]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10d      	bne.n	800342a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800340e:	4b88      	ldr	r3, [pc, #544]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 8003410:	69db      	ldr	r3, [r3, #28]
 8003412:	4a87      	ldr	r2, [pc, #540]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 8003414:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003418:	61d3      	str	r3, [r2, #28]
 800341a:	4b85      	ldr	r3, [pc, #532]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003422:	60bb      	str	r3, [r7, #8]
 8003424:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003426:	2301      	movs	r3, #1
 8003428:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800342a:	4b82      	ldr	r3, [pc, #520]	@ (8003634 <HAL_RCC_OscConfig+0x4c8>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003432:	2b00      	cmp	r3, #0
 8003434:	d118      	bne.n	8003468 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003436:	4b7f      	ldr	r3, [pc, #508]	@ (8003634 <HAL_RCC_OscConfig+0x4c8>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a7e      	ldr	r2, [pc, #504]	@ (8003634 <HAL_RCC_OscConfig+0x4c8>)
 800343c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003440:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003442:	f7fe f875 	bl	8001530 <HAL_GetTick>
 8003446:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003448:	e008      	b.n	800345c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800344a:	f7fe f871 	bl	8001530 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b64      	cmp	r3, #100	@ 0x64
 8003456:	d901      	bls.n	800345c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e103      	b.n	8003664 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800345c:	4b75      	ldr	r3, [pc, #468]	@ (8003634 <HAL_RCC_OscConfig+0x4c8>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003464:	2b00      	cmp	r3, #0
 8003466:	d0f0      	beq.n	800344a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d106      	bne.n	800347e <HAL_RCC_OscConfig+0x312>
 8003470:	4b6f      	ldr	r3, [pc, #444]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	4a6e      	ldr	r2, [pc, #440]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 8003476:	f043 0301 	orr.w	r3, r3, #1
 800347a:	6213      	str	r3, [r2, #32]
 800347c:	e02d      	b.n	80034da <HAL_RCC_OscConfig+0x36e>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10c      	bne.n	80034a0 <HAL_RCC_OscConfig+0x334>
 8003486:	4b6a      	ldr	r3, [pc, #424]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	4a69      	ldr	r2, [pc, #420]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 800348c:	f023 0301 	bic.w	r3, r3, #1
 8003490:	6213      	str	r3, [r2, #32]
 8003492:	4b67      	ldr	r3, [pc, #412]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	4a66      	ldr	r2, [pc, #408]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 8003498:	f023 0304 	bic.w	r3, r3, #4
 800349c:	6213      	str	r3, [r2, #32]
 800349e:	e01c      	b.n	80034da <HAL_RCC_OscConfig+0x36e>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	2b05      	cmp	r3, #5
 80034a6:	d10c      	bne.n	80034c2 <HAL_RCC_OscConfig+0x356>
 80034a8:	4b61      	ldr	r3, [pc, #388]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	4a60      	ldr	r2, [pc, #384]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 80034ae:	f043 0304 	orr.w	r3, r3, #4
 80034b2:	6213      	str	r3, [r2, #32]
 80034b4:	4b5e      	ldr	r3, [pc, #376]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	4a5d      	ldr	r2, [pc, #372]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 80034ba:	f043 0301 	orr.w	r3, r3, #1
 80034be:	6213      	str	r3, [r2, #32]
 80034c0:	e00b      	b.n	80034da <HAL_RCC_OscConfig+0x36e>
 80034c2:	4b5b      	ldr	r3, [pc, #364]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	4a5a      	ldr	r2, [pc, #360]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 80034c8:	f023 0301 	bic.w	r3, r3, #1
 80034cc:	6213      	str	r3, [r2, #32]
 80034ce:	4b58      	ldr	r3, [pc, #352]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 80034d0:	6a1b      	ldr	r3, [r3, #32]
 80034d2:	4a57      	ldr	r2, [pc, #348]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 80034d4:	f023 0304 	bic.w	r3, r3, #4
 80034d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d015      	beq.n	800350e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034e2:	f7fe f825 	bl	8001530 <HAL_GetTick>
 80034e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e8:	e00a      	b.n	8003500 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ea:	f7fe f821 	bl	8001530 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e0b1      	b.n	8003664 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003500:	4b4b      	ldr	r3, [pc, #300]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0ee      	beq.n	80034ea <HAL_RCC_OscConfig+0x37e>
 800350c:	e014      	b.n	8003538 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800350e:	f7fe f80f 	bl	8001530 <HAL_GetTick>
 8003512:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003514:	e00a      	b.n	800352c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003516:	f7fe f80b 	bl	8001530 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003524:	4293      	cmp	r3, r2
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e09b      	b.n	8003664 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800352c:	4b40      	ldr	r3, [pc, #256]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1ee      	bne.n	8003516 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003538:	7dfb      	ldrb	r3, [r7, #23]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d105      	bne.n	800354a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800353e:	4b3c      	ldr	r3, [pc, #240]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	4a3b      	ldr	r2, [pc, #236]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 8003544:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003548:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	2b00      	cmp	r3, #0
 8003550:	f000 8087 	beq.w	8003662 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003554:	4b36      	ldr	r3, [pc, #216]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f003 030c 	and.w	r3, r3, #12
 800355c:	2b08      	cmp	r3, #8
 800355e:	d061      	beq.n	8003624 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	69db      	ldr	r3, [r3, #28]
 8003564:	2b02      	cmp	r3, #2
 8003566:	d146      	bne.n	80035f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003568:	4b33      	ldr	r3, [pc, #204]	@ (8003638 <HAL_RCC_OscConfig+0x4cc>)
 800356a:	2200      	movs	r2, #0
 800356c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356e:	f7fd ffdf 	bl	8001530 <HAL_GetTick>
 8003572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003574:	e008      	b.n	8003588 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003576:	f7fd ffdb 	bl	8001530 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d901      	bls.n	8003588 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e06d      	b.n	8003664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003588:	4b29      	ldr	r3, [pc, #164]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1f0      	bne.n	8003576 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800359c:	d108      	bne.n	80035b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800359e:	4b24      	ldr	r3, [pc, #144]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	4921      	ldr	r1, [pc, #132]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035b0:	4b1f      	ldr	r3, [pc, #124]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a19      	ldr	r1, [r3, #32]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c0:	430b      	orrs	r3, r1
 80035c2:	491b      	ldr	r1, [pc, #108]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003638 <HAL_RCC_OscConfig+0x4cc>)
 80035ca:	2201      	movs	r2, #1
 80035cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ce:	f7fd ffaf 	bl	8001530 <HAL_GetTick>
 80035d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035d4:	e008      	b.n	80035e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035d6:	f7fd ffab 	bl	8001530 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d901      	bls.n	80035e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e03d      	b.n	8003664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035e8:	4b11      	ldr	r3, [pc, #68]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d0f0      	beq.n	80035d6 <HAL_RCC_OscConfig+0x46a>
 80035f4:	e035      	b.n	8003662 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035f6:	4b10      	ldr	r3, [pc, #64]	@ (8003638 <HAL_RCC_OscConfig+0x4cc>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035fc:	f7fd ff98 	bl	8001530 <HAL_GetTick>
 8003600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003602:	e008      	b.n	8003616 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003604:	f7fd ff94 	bl	8001530 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b02      	cmp	r3, #2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e026      	b.n	8003664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003616:	4b06      	ldr	r3, [pc, #24]	@ (8003630 <HAL_RCC_OscConfig+0x4c4>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1f0      	bne.n	8003604 <HAL_RCC_OscConfig+0x498>
 8003622:	e01e      	b.n	8003662 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	69db      	ldr	r3, [r3, #28]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d107      	bne.n	800363c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e019      	b.n	8003664 <HAL_RCC_OscConfig+0x4f8>
 8003630:	40021000 	.word	0x40021000
 8003634:	40007000 	.word	0x40007000
 8003638:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800363c:	4b0b      	ldr	r3, [pc, #44]	@ (800366c <HAL_RCC_OscConfig+0x500>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	429a      	cmp	r2, r3
 800364e:	d106      	bne.n	800365e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800365a:	429a      	cmp	r2, r3
 800365c:	d001      	beq.n	8003662 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e000      	b.n	8003664 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3718      	adds	r7, #24
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	40021000 	.word	0x40021000

08003670 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d101      	bne.n	8003684 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e0d0      	b.n	8003826 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003684:	4b6a      	ldr	r3, [pc, #424]	@ (8003830 <HAL_RCC_ClockConfig+0x1c0>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0307 	and.w	r3, r3, #7
 800368c:	683a      	ldr	r2, [r7, #0]
 800368e:	429a      	cmp	r2, r3
 8003690:	d910      	bls.n	80036b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003692:	4b67      	ldr	r3, [pc, #412]	@ (8003830 <HAL_RCC_ClockConfig+0x1c0>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f023 0207 	bic.w	r2, r3, #7
 800369a:	4965      	ldr	r1, [pc, #404]	@ (8003830 <HAL_RCC_ClockConfig+0x1c0>)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	4313      	orrs	r3, r2
 80036a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036a2:	4b63      	ldr	r3, [pc, #396]	@ (8003830 <HAL_RCC_ClockConfig+0x1c0>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0307 	and.w	r3, r3, #7
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d001      	beq.n	80036b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e0b8      	b.n	8003826 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d020      	beq.n	8003702 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d005      	beq.n	80036d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036cc:	4b59      	ldr	r3, [pc, #356]	@ (8003834 <HAL_RCC_ClockConfig+0x1c4>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	4a58      	ldr	r2, [pc, #352]	@ (8003834 <HAL_RCC_ClockConfig+0x1c4>)
 80036d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80036d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0308 	and.w	r3, r3, #8
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d005      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036e4:	4b53      	ldr	r3, [pc, #332]	@ (8003834 <HAL_RCC_ClockConfig+0x1c4>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	4a52      	ldr	r2, [pc, #328]	@ (8003834 <HAL_RCC_ClockConfig+0x1c4>)
 80036ea:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80036ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036f0:	4b50      	ldr	r3, [pc, #320]	@ (8003834 <HAL_RCC_ClockConfig+0x1c4>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	494d      	ldr	r1, [pc, #308]	@ (8003834 <HAL_RCC_ClockConfig+0x1c4>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b00      	cmp	r3, #0
 800370c:	d040      	beq.n	8003790 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d107      	bne.n	8003726 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003716:	4b47      	ldr	r3, [pc, #284]	@ (8003834 <HAL_RCC_ClockConfig+0x1c4>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d115      	bne.n	800374e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e07f      	b.n	8003826 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	2b02      	cmp	r3, #2
 800372c:	d107      	bne.n	800373e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800372e:	4b41      	ldr	r3, [pc, #260]	@ (8003834 <HAL_RCC_ClockConfig+0x1c4>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d109      	bne.n	800374e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e073      	b.n	8003826 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800373e:	4b3d      	ldr	r3, [pc, #244]	@ (8003834 <HAL_RCC_ClockConfig+0x1c4>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e06b      	b.n	8003826 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800374e:	4b39      	ldr	r3, [pc, #228]	@ (8003834 <HAL_RCC_ClockConfig+0x1c4>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f023 0203 	bic.w	r2, r3, #3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	4936      	ldr	r1, [pc, #216]	@ (8003834 <HAL_RCC_ClockConfig+0x1c4>)
 800375c:	4313      	orrs	r3, r2
 800375e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003760:	f7fd fee6 	bl	8001530 <HAL_GetTick>
 8003764:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003766:	e00a      	b.n	800377e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003768:	f7fd fee2 	bl	8001530 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003776:	4293      	cmp	r3, r2
 8003778:	d901      	bls.n	800377e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e053      	b.n	8003826 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800377e:	4b2d      	ldr	r3, [pc, #180]	@ (8003834 <HAL_RCC_ClockConfig+0x1c4>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f003 020c 	and.w	r2, r3, #12
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	429a      	cmp	r2, r3
 800378e:	d1eb      	bne.n	8003768 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003790:	4b27      	ldr	r3, [pc, #156]	@ (8003830 <HAL_RCC_ClockConfig+0x1c0>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	429a      	cmp	r2, r3
 800379c:	d210      	bcs.n	80037c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800379e:	4b24      	ldr	r3, [pc, #144]	@ (8003830 <HAL_RCC_ClockConfig+0x1c0>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f023 0207 	bic.w	r2, r3, #7
 80037a6:	4922      	ldr	r1, [pc, #136]	@ (8003830 <HAL_RCC_ClockConfig+0x1c0>)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ae:	4b20      	ldr	r3, [pc, #128]	@ (8003830 <HAL_RCC_ClockConfig+0x1c0>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0307 	and.w	r3, r3, #7
 80037b6:	683a      	ldr	r2, [r7, #0]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d001      	beq.n	80037c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e032      	b.n	8003826 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0304 	and.w	r3, r3, #4
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d008      	beq.n	80037de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037cc:	4b19      	ldr	r3, [pc, #100]	@ (8003834 <HAL_RCC_ClockConfig+0x1c4>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	4916      	ldr	r1, [pc, #88]	@ (8003834 <HAL_RCC_ClockConfig+0x1c4>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0308 	and.w	r3, r3, #8
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d009      	beq.n	80037fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037ea:	4b12      	ldr	r3, [pc, #72]	@ (8003834 <HAL_RCC_ClockConfig+0x1c4>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	490e      	ldr	r1, [pc, #56]	@ (8003834 <HAL_RCC_ClockConfig+0x1c4>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037fe:	f000 f821 	bl	8003844 <HAL_RCC_GetSysClockFreq>
 8003802:	4602      	mov	r2, r0
 8003804:	4b0b      	ldr	r3, [pc, #44]	@ (8003834 <HAL_RCC_ClockConfig+0x1c4>)
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	091b      	lsrs	r3, r3, #4
 800380a:	f003 030f 	and.w	r3, r3, #15
 800380e:	490a      	ldr	r1, [pc, #40]	@ (8003838 <HAL_RCC_ClockConfig+0x1c8>)
 8003810:	5ccb      	ldrb	r3, [r1, r3]
 8003812:	fa22 f303 	lsr.w	r3, r2, r3
 8003816:	4a09      	ldr	r2, [pc, #36]	@ (800383c <HAL_RCC_ClockConfig+0x1cc>)
 8003818:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800381a:	4b09      	ldr	r3, [pc, #36]	@ (8003840 <HAL_RCC_ClockConfig+0x1d0>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4618      	mov	r0, r3
 8003820:	f7fd fe44 	bl	80014ac <HAL_InitTick>

  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	40022000 	.word	0x40022000
 8003834:	40021000 	.word	0x40021000
 8003838:	08005648 	.word	0x08005648
 800383c:	20000000 	.word	0x20000000
 8003840:	20000004 	.word	0x20000004

08003844 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003844:	b480      	push	{r7}
 8003846:	b087      	sub	sp, #28
 8003848:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800384a:	2300      	movs	r3, #0
 800384c:	60fb      	str	r3, [r7, #12]
 800384e:	2300      	movs	r3, #0
 8003850:	60bb      	str	r3, [r7, #8]
 8003852:	2300      	movs	r3, #0
 8003854:	617b      	str	r3, [r7, #20]
 8003856:	2300      	movs	r3, #0
 8003858:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800385a:	2300      	movs	r3, #0
 800385c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800385e:	4b1e      	ldr	r3, [pc, #120]	@ (80038d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f003 030c 	and.w	r3, r3, #12
 800386a:	2b04      	cmp	r3, #4
 800386c:	d002      	beq.n	8003874 <HAL_RCC_GetSysClockFreq+0x30>
 800386e:	2b08      	cmp	r3, #8
 8003870:	d003      	beq.n	800387a <HAL_RCC_GetSysClockFreq+0x36>
 8003872:	e027      	b.n	80038c4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003874:	4b19      	ldr	r3, [pc, #100]	@ (80038dc <HAL_RCC_GetSysClockFreq+0x98>)
 8003876:	613b      	str	r3, [r7, #16]
      break;
 8003878:	e027      	b.n	80038ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	0c9b      	lsrs	r3, r3, #18
 800387e:	f003 030f 	and.w	r3, r3, #15
 8003882:	4a17      	ldr	r2, [pc, #92]	@ (80038e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003884:	5cd3      	ldrb	r3, [r2, r3]
 8003886:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d010      	beq.n	80038b4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003892:	4b11      	ldr	r3, [pc, #68]	@ (80038d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	0c5b      	lsrs	r3, r3, #17
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	4a11      	ldr	r2, [pc, #68]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800389e:	5cd3      	ldrb	r3, [r2, r3]
 80038a0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a0d      	ldr	r2, [pc, #52]	@ (80038dc <HAL_RCC_GetSysClockFreq+0x98>)
 80038a6:	fb03 f202 	mul.w	r2, r3, r2
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b0:	617b      	str	r3, [r7, #20]
 80038b2:	e004      	b.n	80038be <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a0c      	ldr	r2, [pc, #48]	@ (80038e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80038b8:	fb02 f303 	mul.w	r3, r2, r3
 80038bc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	613b      	str	r3, [r7, #16]
      break;
 80038c2:	e002      	b.n	80038ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038c4:	4b05      	ldr	r3, [pc, #20]	@ (80038dc <HAL_RCC_GetSysClockFreq+0x98>)
 80038c6:	613b      	str	r3, [r7, #16]
      break;
 80038c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038ca:	693b      	ldr	r3, [r7, #16]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	371c      	adds	r7, #28
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bc80      	pop	{r7}
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	40021000 	.word	0x40021000
 80038dc:	007a1200 	.word	0x007a1200
 80038e0:	08005660 	.word	0x08005660
 80038e4:	08005670 	.word	0x08005670
 80038e8:	003d0900 	.word	0x003d0900

080038ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038f0:	4b02      	ldr	r3, [pc, #8]	@ (80038fc <HAL_RCC_GetHCLKFreq+0x10>)
 80038f2:	681b      	ldr	r3, [r3, #0]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bc80      	pop	{r7}
 80038fa:	4770      	bx	lr
 80038fc:	20000000 	.word	0x20000000

08003900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003904:	f7ff fff2 	bl	80038ec <HAL_RCC_GetHCLKFreq>
 8003908:	4602      	mov	r2, r0
 800390a:	4b05      	ldr	r3, [pc, #20]	@ (8003920 <HAL_RCC_GetPCLK1Freq+0x20>)
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	0a1b      	lsrs	r3, r3, #8
 8003910:	f003 0307 	and.w	r3, r3, #7
 8003914:	4903      	ldr	r1, [pc, #12]	@ (8003924 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003916:	5ccb      	ldrb	r3, [r1, r3]
 8003918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800391c:	4618      	mov	r0, r3
 800391e:	bd80      	pop	{r7, pc}
 8003920:	40021000 	.word	0x40021000
 8003924:	08005658 	.word	0x08005658

08003928 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800392c:	f7ff ffde 	bl	80038ec <HAL_RCC_GetHCLKFreq>
 8003930:	4602      	mov	r2, r0
 8003932:	4b05      	ldr	r3, [pc, #20]	@ (8003948 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	0adb      	lsrs	r3, r3, #11
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	4903      	ldr	r1, [pc, #12]	@ (800394c <HAL_RCC_GetPCLK2Freq+0x24>)
 800393e:	5ccb      	ldrb	r3, [r1, r3]
 8003940:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003944:	4618      	mov	r0, r3
 8003946:	bd80      	pop	{r7, pc}
 8003948:	40021000 	.word	0x40021000
 800394c:	08005658 	.word	0x08005658

08003950 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003958:	4b0a      	ldr	r3, [pc, #40]	@ (8003984 <RCC_Delay+0x34>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a0a      	ldr	r2, [pc, #40]	@ (8003988 <RCC_Delay+0x38>)
 800395e:	fba2 2303 	umull	r2, r3, r2, r3
 8003962:	0a5b      	lsrs	r3, r3, #9
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	fb02 f303 	mul.w	r3, r2, r3
 800396a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800396c:	bf00      	nop
  }
  while (Delay --);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	1e5a      	subs	r2, r3, #1
 8003972:	60fa      	str	r2, [r7, #12]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1f9      	bne.n	800396c <RCC_Delay+0x1c>
}
 8003978:	bf00      	nop
 800397a:	bf00      	nop
 800397c:	3714      	adds	r7, #20
 800397e:	46bd      	mov	sp, r7
 8003980:	bc80      	pop	{r7}
 8003982:	4770      	bx	lr
 8003984:	20000000 	.word	0x20000000
 8003988:	10624dd3 	.word	0x10624dd3

0800398c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003994:	2300      	movs	r3, #0
 8003996:	613b      	str	r3, [r7, #16]
 8003998:	2300      	movs	r3, #0
 800399a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d07d      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80039a8:	2300      	movs	r3, #0
 80039aa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039ac:	4b4f      	ldr	r3, [pc, #316]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ae:	69db      	ldr	r3, [r3, #28]
 80039b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10d      	bne.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039b8:	4b4c      	ldr	r3, [pc, #304]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ba:	69db      	ldr	r3, [r3, #28]
 80039bc:	4a4b      	ldr	r2, [pc, #300]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039c2:	61d3      	str	r3, [r2, #28]
 80039c4:	4b49      	ldr	r3, [pc, #292]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039c6:	69db      	ldr	r3, [r3, #28]
 80039c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039cc:	60bb      	str	r3, [r7, #8]
 80039ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039d0:	2301      	movs	r3, #1
 80039d2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d4:	4b46      	ldr	r3, [pc, #280]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d118      	bne.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039e0:	4b43      	ldr	r3, [pc, #268]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a42      	ldr	r2, [pc, #264]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ec:	f7fd fda0 	bl	8001530 <HAL_GetTick>
 80039f0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f2:	e008      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039f4:	f7fd fd9c 	bl	8001530 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b64      	cmp	r3, #100	@ 0x64
 8003a00:	d901      	bls.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e06d      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a06:	4b3a      	ldr	r3, [pc, #232]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d0f0      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a12:	4b36      	ldr	r3, [pc, #216]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a1a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d02e      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d027      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a30:	4b2e      	ldr	r3, [pc, #184]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a38:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a3a:	4b2e      	ldr	r3, [pc, #184]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a40:	4b2c      	ldr	r3, [pc, #176]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a46:	4a29      	ldr	r2, [pc, #164]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d014      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a56:	f7fd fd6b 	bl	8001530 <HAL_GetTick>
 8003a5a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a5c:	e00a      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a5e:	f7fd fd67 	bl	8001530 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d901      	bls.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e036      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a74:	4b1d      	ldr	r3, [pc, #116]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d0ee      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a80:	4b1a      	ldr	r3, [pc, #104]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	4917      	ldr	r1, [pc, #92]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a92:	7dfb      	ldrb	r3, [r7, #23]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d105      	bne.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a98:	4b14      	ldr	r3, [pc, #80]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	4a13      	ldr	r2, [pc, #76]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003aa2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d008      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ab0:	4b0e      	ldr	r3, [pc, #56]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	490b      	ldr	r1, [pc, #44]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0310 	and.w	r3, r3, #16
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d008      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ace:	4b07      	ldr	r3, [pc, #28]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	4904      	ldr	r1, [pc, #16]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3718      	adds	r7, #24
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	40021000 	.word	0x40021000
 8003af0:	40007000 	.word	0x40007000
 8003af4:	42420440 	.word	0x42420440

08003af8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b088      	sub	sp, #32
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	617b      	str	r3, [r7, #20]
 8003b04:	2300      	movs	r3, #0
 8003b06:	61fb      	str	r3, [r7, #28]
 8003b08:	2300      	movs	r3, #0
 8003b0a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	60fb      	str	r3, [r7, #12]
 8003b10:	2300      	movs	r3, #0
 8003b12:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b10      	cmp	r3, #16
 8003b18:	d00a      	beq.n	8003b30 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2b10      	cmp	r3, #16
 8003b1e:	f200 808a 	bhi.w	8003c36 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d045      	beq.n	8003bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d075      	beq.n	8003c1a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003b2e:	e082      	b.n	8003c36 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003b30:	4b46      	ldr	r3, [pc, #280]	@ (8003c4c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003b36:	4b45      	ldr	r3, [pc, #276]	@ (8003c4c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d07b      	beq.n	8003c3a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	0c9b      	lsrs	r3, r3, #18
 8003b46:	f003 030f 	and.w	r3, r3, #15
 8003b4a:	4a41      	ldr	r2, [pc, #260]	@ (8003c50 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003b4c:	5cd3      	ldrb	r3, [r2, r3]
 8003b4e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d015      	beq.n	8003b86 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b5a:	4b3c      	ldr	r3, [pc, #240]	@ (8003c4c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	0c5b      	lsrs	r3, r3, #17
 8003b60:	f003 0301 	and.w	r3, r3, #1
 8003b64:	4a3b      	ldr	r2, [pc, #236]	@ (8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003b66:	5cd3      	ldrb	r3, [r2, r3]
 8003b68:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d00d      	beq.n	8003b90 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003b74:	4a38      	ldr	r2, [pc, #224]	@ (8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	fb02 f303 	mul.w	r3, r2, r3
 8003b82:	61fb      	str	r3, [r7, #28]
 8003b84:	e004      	b.n	8003b90 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	4a34      	ldr	r2, [pc, #208]	@ (8003c5c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003b8a:	fb02 f303 	mul.w	r3, r2, r3
 8003b8e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003b90:	4b2e      	ldr	r3, [pc, #184]	@ (8003c4c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b9c:	d102      	bne.n	8003ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	61bb      	str	r3, [r7, #24]
      break;
 8003ba2:	e04a      	b.n	8003c3a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	4a2d      	ldr	r2, [pc, #180]	@ (8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003baa:	fba2 2303 	umull	r2, r3, r2, r3
 8003bae:	085b      	lsrs	r3, r3, #1
 8003bb0:	61bb      	str	r3, [r7, #24]
      break;
 8003bb2:	e042      	b.n	8003c3a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003bb4:	4b25      	ldr	r3, [pc, #148]	@ (8003c4c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bc4:	d108      	bne.n	8003bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d003      	beq.n	8003bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003bd0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bd4:	61bb      	str	r3, [r7, #24]
 8003bd6:	e01f      	b.n	8003c18 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003be2:	d109      	bne.n	8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003be4:	4b19      	ldr	r3, [pc, #100]	@ (8003c4c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be8:	f003 0302 	and.w	r3, r3, #2
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d003      	beq.n	8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003bf0:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003bf4:	61bb      	str	r3, [r7, #24]
 8003bf6:	e00f      	b.n	8003c18 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bfe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c02:	d11c      	bne.n	8003c3e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003c04:	4b11      	ldr	r3, [pc, #68]	@ (8003c4c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d016      	beq.n	8003c3e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003c10:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003c14:	61bb      	str	r3, [r7, #24]
      break;
 8003c16:	e012      	b.n	8003c3e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003c18:	e011      	b.n	8003c3e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003c1a:	f7ff fe85 	bl	8003928 <HAL_RCC_GetPCLK2Freq>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	4b0a      	ldr	r3, [pc, #40]	@ (8003c4c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	0b9b      	lsrs	r3, r3, #14
 8003c26:	f003 0303 	and.w	r3, r3, #3
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	005b      	lsls	r3, r3, #1
 8003c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c32:	61bb      	str	r3, [r7, #24]
      break;
 8003c34:	e004      	b.n	8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003c36:	bf00      	nop
 8003c38:	e002      	b.n	8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003c3a:	bf00      	nop
 8003c3c:	e000      	b.n	8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003c3e:	bf00      	nop
    }
  }
  return (frequency);
 8003c40:	69bb      	ldr	r3, [r7, #24]
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3720      	adds	r7, #32
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	40021000 	.word	0x40021000
 8003c50:	08005674 	.word	0x08005674
 8003c54:	08005684 	.word	0x08005684
 8003c58:	007a1200 	.word	0x007a1200
 8003c5c:	003d0900 	.word	0x003d0900
 8003c60:	aaaaaaab 	.word	0xaaaaaaab

08003c64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e076      	b.n	8003d64 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d108      	bne.n	8003c90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c86:	d009      	beq.n	8003c9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	61da      	str	r2, [r3, #28]
 8003c8e:	e005      	b.n	8003c9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d106      	bne.n	8003cbc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f7fd faae 	bl	8001218 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cd2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	431a      	orrs	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	431a      	orrs	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d16:	431a      	orrs	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d20:	ea42 0103 	orr.w	r1, r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d28:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	430a      	orrs	r2, r1
 8003d32:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	0c1a      	lsrs	r2, r3, #16
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f002 0204 	and.w	r2, r2, #4
 8003d42:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	69da      	ldr	r2, [r3, #28]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d52:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3708      	adds	r7, #8
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b088      	sub	sp, #32
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	603b      	str	r3, [r7, #0]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d7c:	f7fd fbd8 	bl	8001530 <HAL_GetTick>
 8003d80:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003d82:	88fb      	ldrh	r3, [r7, #6]
 8003d84:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d001      	beq.n	8003d96 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003d92:	2302      	movs	r3, #2
 8003d94:	e12a      	b.n	8003fec <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d002      	beq.n	8003da2 <HAL_SPI_Transmit+0x36>
 8003d9c:	88fb      	ldrh	r3, [r7, #6]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d101      	bne.n	8003da6 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e122      	b.n	8003fec <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d101      	bne.n	8003db4 <HAL_SPI_Transmit+0x48>
 8003db0:	2302      	movs	r3, #2
 8003db2:	e11b      	b.n	8003fec <HAL_SPI_Transmit+0x280>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2203      	movs	r2, #3
 8003dc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	68ba      	ldr	r2, [r7, #8]
 8003dce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	88fa      	ldrh	r2, [r7, #6]
 8003dd4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	88fa      	ldrh	r2, [r7, #6]
 8003dda:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e02:	d10f      	bne.n	8003e24 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e12:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e22:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e2e:	2b40      	cmp	r3, #64	@ 0x40
 8003e30:	d007      	beq.n	8003e42 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e40:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e4a:	d152      	bne.n	8003ef2 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d002      	beq.n	8003e5a <HAL_SPI_Transmit+0xee>
 8003e54:	8b7b      	ldrh	r3, [r7, #26]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d145      	bne.n	8003ee6 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e5e:	881a      	ldrh	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e6a:	1c9a      	adds	r2, r3, #2
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	3b01      	subs	r3, #1
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e7e:	e032      	b.n	8003ee6 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d112      	bne.n	8003eb4 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e92:	881a      	ldrh	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e9e:	1c9a      	adds	r2, r3, #2
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003eb2:	e018      	b.n	8003ee6 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003eb4:	f7fd fb3c 	bl	8001530 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	683a      	ldr	r2, [r7, #0]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d803      	bhi.n	8003ecc <HAL_SPI_Transmit+0x160>
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eca:	d102      	bne.n	8003ed2 <HAL_SPI_Transmit+0x166>
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d109      	bne.n	8003ee6 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e082      	b.n	8003fec <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1c7      	bne.n	8003e80 <HAL_SPI_Transmit+0x114>
 8003ef0:	e053      	b.n	8003f9a <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d002      	beq.n	8003f00 <HAL_SPI_Transmit+0x194>
 8003efa:	8b7b      	ldrh	r3, [r7, #26]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d147      	bne.n	8003f90 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	330c      	adds	r3, #12
 8003f0a:	7812      	ldrb	r2, [r2, #0]
 8003f0c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f12:	1c5a      	adds	r2, r3, #1
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003f26:	e033      	b.n	8003f90 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d113      	bne.n	8003f5e <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	330c      	adds	r3, #12
 8003f40:	7812      	ldrb	r2, [r2, #0]
 8003f42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f48:	1c5a      	adds	r2, r3, #1
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	3b01      	subs	r3, #1
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003f5c:	e018      	b.n	8003f90 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f5e:	f7fd fae7 	bl	8001530 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	683a      	ldr	r2, [r7, #0]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d803      	bhi.n	8003f76 <HAL_SPI_Transmit+0x20a>
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f74:	d102      	bne.n	8003f7c <HAL_SPI_Transmit+0x210>
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d109      	bne.n	8003f90 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e02d      	b.n	8003fec <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1c6      	bne.n	8003f28 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f9a:	69fa      	ldr	r2, [r7, #28]
 8003f9c:	6839      	ldr	r1, [r7, #0]
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f000 fbc4 	bl	800472c <SPI_EndRxTxTransaction>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d002      	beq.n	8003fb0 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2220      	movs	r2, #32
 8003fae:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d10a      	bne.n	8003fce <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fb8:	2300      	movs	r3, #0
 8003fba:	617b      	str	r3, [r7, #20]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	617b      	str	r3, [r7, #20]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	617b      	str	r3, [r7, #20]
 8003fcc:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e000      	b.n	8003fec <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003fea:	2300      	movs	r3, #0
  }
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3720      	adds	r7, #32
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b088      	sub	sp, #32
 8003ff8:	af02      	add	r7, sp, #8
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	603b      	str	r3, [r7, #0]
 8004000:	4613      	mov	r3, r2
 8004002:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800400a:	b2db      	uxtb	r3, r3
 800400c:	2b01      	cmp	r3, #1
 800400e:	d001      	beq.n	8004014 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004010:	2302      	movs	r3, #2
 8004012:	e104      	b.n	800421e <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800401c:	d112      	bne.n	8004044 <HAL_SPI_Receive+0x50>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10e      	bne.n	8004044 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2204      	movs	r2, #4
 800402a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800402e:	88fa      	ldrh	r2, [r7, #6]
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	9300      	str	r3, [sp, #0]
 8004034:	4613      	mov	r3, r2
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	68b9      	ldr	r1, [r7, #8]
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f000 f8f3 	bl	8004226 <HAL_SPI_TransmitReceive>
 8004040:	4603      	mov	r3, r0
 8004042:	e0ec      	b.n	800421e <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004044:	f7fd fa74 	bl	8001530 <HAL_GetTick>
 8004048:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d002      	beq.n	8004056 <HAL_SPI_Receive+0x62>
 8004050:	88fb      	ldrh	r3, [r7, #6]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e0e1      	b.n	800421e <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004060:	2b01      	cmp	r3, #1
 8004062:	d101      	bne.n	8004068 <HAL_SPI_Receive+0x74>
 8004064:	2302      	movs	r3, #2
 8004066:	e0da      	b.n	800421e <HAL_SPI_Receive+0x22a>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2204      	movs	r2, #4
 8004074:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2200      	movs	r2, #0
 800407c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	68ba      	ldr	r2, [r7, #8]
 8004082:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	88fa      	ldrh	r2, [r7, #6]
 8004088:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	88fa      	ldrh	r2, [r7, #6]
 800408e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040b6:	d10f      	bne.n	80040d8 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040c6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80040d6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040e2:	2b40      	cmp	r3, #64	@ 0x40
 80040e4:	d007      	beq.n	80040f6 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80040f4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d170      	bne.n	80041e0 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80040fe:	e035      	b.n	800416c <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b01      	cmp	r3, #1
 800410c:	d115      	bne.n	800413a <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f103 020c 	add.w	r2, r3, #12
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800411a:	7812      	ldrb	r2, [r2, #0]
 800411c:	b2d2      	uxtb	r2, r2
 800411e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004124:	1c5a      	adds	r2, r3, #1
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800412e:	b29b      	uxth	r3, r3
 8004130:	3b01      	subs	r3, #1
 8004132:	b29a      	uxth	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004138:	e018      	b.n	800416c <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800413a:	f7fd f9f9 	bl	8001530 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	429a      	cmp	r2, r3
 8004148:	d803      	bhi.n	8004152 <HAL_SPI_Receive+0x15e>
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004150:	d102      	bne.n	8004158 <HAL_SPI_Receive+0x164>
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d109      	bne.n	800416c <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e058      	b.n	800421e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004170:	b29b      	uxth	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1c4      	bne.n	8004100 <HAL_SPI_Receive+0x10c>
 8004176:	e038      	b.n	80041ea <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b01      	cmp	r3, #1
 8004184:	d113      	bne.n	80041ae <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68da      	ldr	r2, [r3, #12]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004190:	b292      	uxth	r2, r2
 8004192:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004198:	1c9a      	adds	r2, r3, #2
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	3b01      	subs	r3, #1
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80041ac:	e018      	b.n	80041e0 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041ae:	f7fd f9bf 	bl	8001530 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d803      	bhi.n	80041c6 <HAL_SPI_Receive+0x1d2>
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c4:	d102      	bne.n	80041cc <HAL_SPI_Receive+0x1d8>
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d109      	bne.n	80041e0 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e01e      	b.n	800421e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1c6      	bne.n	8004178 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	6839      	ldr	r1, [r7, #0]
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f000 fa4a 	bl	8004688 <SPI_EndRxTransaction>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d002      	beq.n	8004200 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2220      	movs	r2, #32
 80041fe:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004214:	2b00      	cmp	r3, #0
 8004216:	d001      	beq.n	800421c <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e000      	b.n	800421e <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800421c:	2300      	movs	r3, #0
  }
}
 800421e:	4618      	mov	r0, r3
 8004220:	3718      	adds	r7, #24
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b08a      	sub	sp, #40	@ 0x28
 800422a:	af00      	add	r7, sp, #0
 800422c:	60f8      	str	r0, [r7, #12]
 800422e:	60b9      	str	r1, [r7, #8]
 8004230:	607a      	str	r2, [r7, #4]
 8004232:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004234:	2301      	movs	r3, #1
 8004236:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004238:	f7fd f97a 	bl	8001530 <HAL_GetTick>
 800423c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004244:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800424c:	887b      	ldrh	r3, [r7, #2]
 800424e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004250:	7ffb      	ldrb	r3, [r7, #31]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d00c      	beq.n	8004270 <HAL_SPI_TransmitReceive+0x4a>
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800425c:	d106      	bne.n	800426c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d102      	bne.n	800426c <HAL_SPI_TransmitReceive+0x46>
 8004266:	7ffb      	ldrb	r3, [r7, #31]
 8004268:	2b04      	cmp	r3, #4
 800426a:	d001      	beq.n	8004270 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800426c:	2302      	movs	r3, #2
 800426e:	e17f      	b.n	8004570 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d005      	beq.n	8004282 <HAL_SPI_TransmitReceive+0x5c>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d002      	beq.n	8004282 <HAL_SPI_TransmitReceive+0x5c>
 800427c:	887b      	ldrh	r3, [r7, #2]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d101      	bne.n	8004286 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e174      	b.n	8004570 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800428c:	2b01      	cmp	r3, #1
 800428e:	d101      	bne.n	8004294 <HAL_SPI_TransmitReceive+0x6e>
 8004290:	2302      	movs	r3, #2
 8004292:	e16d      	b.n	8004570 <HAL_SPI_TransmitReceive+0x34a>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	2b04      	cmp	r3, #4
 80042a6:	d003      	beq.n	80042b0 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2205      	movs	r2, #5
 80042ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	887a      	ldrh	r2, [r7, #2]
 80042c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	887a      	ldrh	r2, [r7, #2]
 80042c6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	68ba      	ldr	r2, [r7, #8]
 80042cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	887a      	ldrh	r2, [r7, #2]
 80042d2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	887a      	ldrh	r2, [r7, #2]
 80042d8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f0:	2b40      	cmp	r3, #64	@ 0x40
 80042f2:	d007      	beq.n	8004304 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004302:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800430c:	d17e      	bne.n	800440c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d002      	beq.n	800431c <HAL_SPI_TransmitReceive+0xf6>
 8004316:	8afb      	ldrh	r3, [r7, #22]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d16c      	bne.n	80043f6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004320:	881a      	ldrh	r2, [r3, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800432c:	1c9a      	adds	r2, r3, #2
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004336:	b29b      	uxth	r3, r3
 8004338:	3b01      	subs	r3, #1
 800433a:	b29a      	uxth	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004340:	e059      	b.n	80043f6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f003 0302 	and.w	r3, r3, #2
 800434c:	2b02      	cmp	r3, #2
 800434e:	d11b      	bne.n	8004388 <HAL_SPI_TransmitReceive+0x162>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004354:	b29b      	uxth	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d016      	beq.n	8004388 <HAL_SPI_TransmitReceive+0x162>
 800435a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435c:	2b01      	cmp	r3, #1
 800435e:	d113      	bne.n	8004388 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004364:	881a      	ldrh	r2, [r3, #0]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004370:	1c9a      	adds	r2, r3, #2
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800437a:	b29b      	uxth	r3, r3
 800437c:	3b01      	subs	r3, #1
 800437e:	b29a      	uxth	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004384:	2300      	movs	r3, #0
 8004386:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b01      	cmp	r3, #1
 8004394:	d119      	bne.n	80043ca <HAL_SPI_TransmitReceive+0x1a4>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800439a:	b29b      	uxth	r3, r3
 800439c:	2b00      	cmp	r3, #0
 800439e:	d014      	beq.n	80043ca <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68da      	ldr	r2, [r3, #12]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043aa:	b292      	uxth	r2, r2
 80043ac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043b2:	1c9a      	adds	r2, r3, #2
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043bc:	b29b      	uxth	r3, r3
 80043be:	3b01      	subs	r3, #1
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043c6:	2301      	movs	r3, #1
 80043c8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80043ca:	f7fd f8b1 	bl	8001530 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	6a3b      	ldr	r3, [r7, #32]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d80d      	bhi.n	80043f6 <HAL_SPI_TransmitReceive+0x1d0>
 80043da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e0:	d009      	beq.n	80043f6 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e0bc      	b.n	8004570 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1a0      	bne.n	8004342 <HAL_SPI_TransmitReceive+0x11c>
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004404:	b29b      	uxth	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d19b      	bne.n	8004342 <HAL_SPI_TransmitReceive+0x11c>
 800440a:	e082      	b.n	8004512 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d002      	beq.n	800441a <HAL_SPI_TransmitReceive+0x1f4>
 8004414:	8afb      	ldrh	r3, [r7, #22]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d171      	bne.n	80044fe <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	330c      	adds	r3, #12
 8004424:	7812      	ldrb	r2, [r2, #0]
 8004426:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800442c:	1c5a      	adds	r2, r3, #1
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004436:	b29b      	uxth	r3, r3
 8004438:	3b01      	subs	r3, #1
 800443a:	b29a      	uxth	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004440:	e05d      	b.n	80044fe <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f003 0302 	and.w	r3, r3, #2
 800444c:	2b02      	cmp	r3, #2
 800444e:	d11c      	bne.n	800448a <HAL_SPI_TransmitReceive+0x264>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004454:	b29b      	uxth	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d017      	beq.n	800448a <HAL_SPI_TransmitReceive+0x264>
 800445a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800445c:	2b01      	cmp	r3, #1
 800445e:	d114      	bne.n	800448a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	330c      	adds	r3, #12
 800446a:	7812      	ldrb	r2, [r2, #0]
 800446c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004472:	1c5a      	adds	r2, r3, #1
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800447c:	b29b      	uxth	r3, r3
 800447e:	3b01      	subs	r3, #1
 8004480:	b29a      	uxth	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004486:	2300      	movs	r3, #0
 8004488:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f003 0301 	and.w	r3, r3, #1
 8004494:	2b01      	cmp	r3, #1
 8004496:	d119      	bne.n	80044cc <HAL_SPI_TransmitReceive+0x2a6>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800449c:	b29b      	uxth	r3, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d014      	beq.n	80044cc <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68da      	ldr	r2, [r3, #12]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ac:	b2d2      	uxtb	r2, r2
 80044ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044b4:	1c5a      	adds	r2, r3, #1
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044be:	b29b      	uxth	r3, r3
 80044c0:	3b01      	subs	r3, #1
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80044c8:	2301      	movs	r3, #1
 80044ca:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80044cc:	f7fd f830 	bl	8001530 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	6a3b      	ldr	r3, [r7, #32]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044d8:	429a      	cmp	r2, r3
 80044da:	d803      	bhi.n	80044e4 <HAL_SPI_TransmitReceive+0x2be>
 80044dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e2:	d102      	bne.n	80044ea <HAL_SPI_TransmitReceive+0x2c4>
 80044e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d109      	bne.n	80044fe <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e038      	b.n	8004570 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004502:	b29b      	uxth	r3, r3
 8004504:	2b00      	cmp	r3, #0
 8004506:	d19c      	bne.n	8004442 <HAL_SPI_TransmitReceive+0x21c>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800450c:	b29b      	uxth	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d197      	bne.n	8004442 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004512:	6a3a      	ldr	r2, [r7, #32]
 8004514:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f000 f908 	bl	800472c <SPI_EndRxTxTransaction>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d008      	beq.n	8004534 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2220      	movs	r2, #32
 8004526:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e01d      	b.n	8004570 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10a      	bne.n	8004552 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800453c:	2300      	movs	r3, #0
 800453e:	613b      	str	r3, [r7, #16]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	613b      	str	r3, [r7, #16]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	613b      	str	r3, [r7, #16]
 8004550:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e000      	b.n	8004570 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800456e:	2300      	movs	r3, #0
  }
}
 8004570:	4618      	mov	r0, r3
 8004572:	3728      	adds	r7, #40	@ 0x28
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b088      	sub	sp, #32
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	603b      	str	r3, [r7, #0]
 8004584:	4613      	mov	r3, r2
 8004586:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004588:	f7fc ffd2 	bl	8001530 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004590:	1a9b      	subs	r3, r3, r2
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	4413      	add	r3, r2
 8004596:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004598:	f7fc ffca 	bl	8001530 <HAL_GetTick>
 800459c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800459e:	4b39      	ldr	r3, [pc, #228]	@ (8004684 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	015b      	lsls	r3, r3, #5
 80045a4:	0d1b      	lsrs	r3, r3, #20
 80045a6:	69fa      	ldr	r2, [r7, #28]
 80045a8:	fb02 f303 	mul.w	r3, r2, r3
 80045ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045ae:	e054      	b.n	800465a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b6:	d050      	beq.n	800465a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045b8:	f7fc ffba 	bl	8001530 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	69fa      	ldr	r2, [r7, #28]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d902      	bls.n	80045ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d13d      	bne.n	800464a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	685a      	ldr	r2, [r3, #4]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80045dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045e6:	d111      	bne.n	800460c <SPI_WaitFlagStateUntilTimeout+0x94>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045f0:	d004      	beq.n	80045fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045fa:	d107      	bne.n	800460c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800460a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004610:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004614:	d10f      	bne.n	8004636 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004624:	601a      	str	r2, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004634:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e017      	b.n	800467a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d101      	bne.n	8004654 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004650:	2300      	movs	r3, #0
 8004652:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	3b01      	subs	r3, #1
 8004658:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	689a      	ldr	r2, [r3, #8]
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	4013      	ands	r3, r2
 8004664:	68ba      	ldr	r2, [r7, #8]
 8004666:	429a      	cmp	r2, r3
 8004668:	bf0c      	ite	eq
 800466a:	2301      	moveq	r3, #1
 800466c:	2300      	movne	r3, #0
 800466e:	b2db      	uxtb	r3, r3
 8004670:	461a      	mov	r2, r3
 8004672:	79fb      	ldrb	r3, [r7, #7]
 8004674:	429a      	cmp	r2, r3
 8004676:	d19b      	bne.n	80045b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3720      	adds	r7, #32
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	20000000 	.word	0x20000000

08004688 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b086      	sub	sp, #24
 800468c:	af02      	add	r7, sp, #8
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800469c:	d111      	bne.n	80046c2 <SPI_EndRxTransaction+0x3a>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046a6:	d004      	beq.n	80046b2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046b0:	d107      	bne.n	80046c2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046c0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046ca:	d117      	bne.n	80046fc <SPI_EndRxTransaction+0x74>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046d4:	d112      	bne.n	80046fc <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	9300      	str	r3, [sp, #0]
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	2200      	movs	r2, #0
 80046de:	2101      	movs	r1, #1
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f7ff ff49 	bl	8004578 <SPI_WaitFlagStateUntilTimeout>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d01a      	beq.n	8004722 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046f0:	f043 0220 	orr.w	r2, r3, #32
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e013      	b.n	8004724 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	9300      	str	r3, [sp, #0]
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	2200      	movs	r2, #0
 8004704:	2180      	movs	r1, #128	@ 0x80
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f7ff ff36 	bl	8004578 <SPI_WaitFlagStateUntilTimeout>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d007      	beq.n	8004722 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004716:	f043 0220 	orr.w	r2, r3, #32
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e000      	b.n	8004724 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b086      	sub	sp, #24
 8004730:	af02      	add	r7, sp, #8
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	9300      	str	r3, [sp, #0]
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	2201      	movs	r2, #1
 8004740:	2102      	movs	r1, #2
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f7ff ff18 	bl	8004578 <SPI_WaitFlagStateUntilTimeout>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d007      	beq.n	800475e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004752:	f043 0220 	orr.w	r2, r3, #32
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e013      	b.n	8004786 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	9300      	str	r3, [sp, #0]
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	2200      	movs	r2, #0
 8004766:	2180      	movs	r1, #128	@ 0x80
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	f7ff ff05 	bl	8004578 <SPI_WaitFlagStateUntilTimeout>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d007      	beq.n	8004784 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004778:	f043 0220 	orr.w	r2, r3, #32
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e000      	b.n	8004786 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800478e:	b580      	push	{r7, lr}
 8004790:	b082      	sub	sp, #8
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d101      	bne.n	80047a0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e042      	b.n	8004826 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d106      	bne.n	80047ba <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f7fc fd89 	bl	80012cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2224      	movs	r2, #36	@ 0x24
 80047be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68da      	ldr	r2, [r3, #12]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80047d0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f972 	bl	8004abc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	691a      	ldr	r2, [r3, #16]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80047e6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	695a      	ldr	r2, [r3, #20]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80047f6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68da      	ldr	r2, [r3, #12]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004806:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2220      	movs	r2, #32
 8004812:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2220      	movs	r2, #32
 800481a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3708      	adds	r7, #8
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b08a      	sub	sp, #40	@ 0x28
 8004832:	af02      	add	r7, sp, #8
 8004834:	60f8      	str	r0, [r7, #12]
 8004836:	60b9      	str	r1, [r7, #8]
 8004838:	603b      	str	r3, [r7, #0]
 800483a:	4613      	mov	r3, r2
 800483c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800483e:	2300      	movs	r3, #0
 8004840:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b20      	cmp	r3, #32
 800484c:	d175      	bne.n	800493a <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d002      	beq.n	800485a <HAL_UART_Transmit+0x2c>
 8004854:	88fb      	ldrh	r3, [r7, #6]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e06e      	b.n	800493c <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2221      	movs	r2, #33	@ 0x21
 8004868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800486c:	f7fc fe60 	bl	8001530 <HAL_GetTick>
 8004870:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	88fa      	ldrh	r2, [r7, #6]
 8004876:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	88fa      	ldrh	r2, [r7, #6]
 800487c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004886:	d108      	bne.n	800489a <HAL_UART_Transmit+0x6c>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d104      	bne.n	800489a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004890:	2300      	movs	r3, #0
 8004892:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	61bb      	str	r3, [r7, #24]
 8004898:	e003      	b.n	80048a2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800489e:	2300      	movs	r3, #0
 80048a0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80048a2:	e02e      	b.n	8004902 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	9300      	str	r3, [sp, #0]
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	2200      	movs	r2, #0
 80048ac:	2180      	movs	r1, #128	@ 0x80
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	f000 f848 	bl	8004944 <UART_WaitOnFlagUntilTimeout>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d005      	beq.n	80048c6 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2220      	movs	r2, #32
 80048be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e03a      	b.n	800493c <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d10b      	bne.n	80048e4 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	881b      	ldrh	r3, [r3, #0]
 80048d0:	461a      	mov	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048da:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	3302      	adds	r3, #2
 80048e0:	61bb      	str	r3, [r7, #24]
 80048e2:	e007      	b.n	80048f4 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	781a      	ldrb	r2, [r3, #0]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	3301      	adds	r3, #1
 80048f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	3b01      	subs	r3, #1
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004906:	b29b      	uxth	r3, r3
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1cb      	bne.n	80048a4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	9300      	str	r3, [sp, #0]
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	2200      	movs	r2, #0
 8004914:	2140      	movs	r1, #64	@ 0x40
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f000 f814 	bl	8004944 <UART_WaitOnFlagUntilTimeout>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d005      	beq.n	800492e <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2220      	movs	r2, #32
 8004926:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e006      	b.n	800493c <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2220      	movs	r2, #32
 8004932:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004936:	2300      	movs	r3, #0
 8004938:	e000      	b.n	800493c <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800493a:	2302      	movs	r3, #2
  }
}
 800493c:	4618      	mov	r0, r3
 800493e:	3720      	adds	r7, #32
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	603b      	str	r3, [r7, #0]
 8004950:	4613      	mov	r3, r2
 8004952:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004954:	e03b      	b.n	80049ce <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004956:	6a3b      	ldr	r3, [r7, #32]
 8004958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800495c:	d037      	beq.n	80049ce <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800495e:	f7fc fde7 	bl	8001530 <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	6a3a      	ldr	r2, [r7, #32]
 800496a:	429a      	cmp	r2, r3
 800496c:	d302      	bcc.n	8004974 <UART_WaitOnFlagUntilTimeout+0x30>
 800496e:	6a3b      	ldr	r3, [r7, #32]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d101      	bne.n	8004978 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e03a      	b.n	80049ee <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	f003 0304 	and.w	r3, r3, #4
 8004982:	2b00      	cmp	r3, #0
 8004984:	d023      	beq.n	80049ce <UART_WaitOnFlagUntilTimeout+0x8a>
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	2b80      	cmp	r3, #128	@ 0x80
 800498a:	d020      	beq.n	80049ce <UART_WaitOnFlagUntilTimeout+0x8a>
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	2b40      	cmp	r3, #64	@ 0x40
 8004990:	d01d      	beq.n	80049ce <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0308 	and.w	r3, r3, #8
 800499c:	2b08      	cmp	r3, #8
 800499e:	d116      	bne.n	80049ce <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80049a0:	2300      	movs	r3, #0
 80049a2:	617b      	str	r3, [r7, #20]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	617b      	str	r3, [r7, #20]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	617b      	str	r3, [r7, #20]
 80049b4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f000 f81d 	bl	80049f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2208      	movs	r2, #8
 80049c0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e00f      	b.n	80049ee <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	4013      	ands	r3, r2
 80049d8:	68ba      	ldr	r2, [r7, #8]
 80049da:	429a      	cmp	r2, r3
 80049dc:	bf0c      	ite	eq
 80049de:	2301      	moveq	r3, #1
 80049e0:	2300      	movne	r3, #0
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	461a      	mov	r2, r3
 80049e6:	79fb      	ldrb	r3, [r7, #7]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d0b4      	beq.n	8004956 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3718      	adds	r7, #24
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049f6:	b480      	push	{r7}
 80049f8:	b095      	sub	sp, #84	@ 0x54
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	330c      	adds	r3, #12
 8004a04:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a08:	e853 3f00 	ldrex	r3, [r3]
 8004a0c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	330c      	adds	r3, #12
 8004a1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a1e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a22:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a24:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a26:	e841 2300 	strex	r3, r2, [r1]
 8004a2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1e5      	bne.n	80049fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	3314      	adds	r3, #20
 8004a38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a3a:	6a3b      	ldr	r3, [r7, #32]
 8004a3c:	e853 3f00 	ldrex	r3, [r3]
 8004a40:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	f023 0301 	bic.w	r3, r3, #1
 8004a48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	3314      	adds	r3, #20
 8004a50:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a54:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a5a:	e841 2300 	strex	r3, r2, [r1]
 8004a5e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1e5      	bne.n	8004a32 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d119      	bne.n	8004aa2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	330c      	adds	r3, #12
 8004a74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	e853 3f00 	ldrex	r3, [r3]
 8004a7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	f023 0310 	bic.w	r3, r3, #16
 8004a84:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	330c      	adds	r3, #12
 8004a8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a8e:	61ba      	str	r2, [r7, #24]
 8004a90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a92:	6979      	ldr	r1, [r7, #20]
 8004a94:	69ba      	ldr	r2, [r7, #24]
 8004a96:	e841 2300 	strex	r3, r2, [r1]
 8004a9a:	613b      	str	r3, [r7, #16]
   return(result);
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1e5      	bne.n	8004a6e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2220      	movs	r2, #32
 8004aa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004ab0:	bf00      	nop
 8004ab2:	3754      	adds	r7, #84	@ 0x54
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bc80      	pop	{r7}
 8004ab8:	4770      	bx	lr
	...

08004abc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	68da      	ldr	r2, [r3, #12]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	689a      	ldr	r2, [r3, #8]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	695b      	ldr	r3, [r3, #20]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004af6:	f023 030c 	bic.w	r3, r3, #12
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	6812      	ldr	r2, [r2, #0]
 8004afe:	68b9      	ldr	r1, [r7, #8]
 8004b00:	430b      	orrs	r3, r1
 8004b02:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	699a      	ldr	r2, [r3, #24]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	430a      	orrs	r2, r1
 8004b18:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a2c      	ldr	r2, [pc, #176]	@ (8004bd0 <UART_SetConfig+0x114>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d103      	bne.n	8004b2c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004b24:	f7fe ff00 	bl	8003928 <HAL_RCC_GetPCLK2Freq>
 8004b28:	60f8      	str	r0, [r7, #12]
 8004b2a:	e002      	b.n	8004b32 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004b2c:	f7fe fee8 	bl	8003900 <HAL_RCC_GetPCLK1Freq>
 8004b30:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	4613      	mov	r3, r2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	4413      	add	r3, r2
 8004b3a:	009a      	lsls	r2, r3, #2
 8004b3c:	441a      	add	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b48:	4a22      	ldr	r2, [pc, #136]	@ (8004bd4 <UART_SetConfig+0x118>)
 8004b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b4e:	095b      	lsrs	r3, r3, #5
 8004b50:	0119      	lsls	r1, r3, #4
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	4613      	mov	r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	4413      	add	r3, r2
 8004b5a:	009a      	lsls	r2, r3, #2
 8004b5c:	441a      	add	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b68:	4b1a      	ldr	r3, [pc, #104]	@ (8004bd4 <UART_SetConfig+0x118>)
 8004b6a:	fba3 0302 	umull	r0, r3, r3, r2
 8004b6e:	095b      	lsrs	r3, r3, #5
 8004b70:	2064      	movs	r0, #100	@ 0x64
 8004b72:	fb00 f303 	mul.w	r3, r0, r3
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	011b      	lsls	r3, r3, #4
 8004b7a:	3332      	adds	r3, #50	@ 0x32
 8004b7c:	4a15      	ldr	r2, [pc, #84]	@ (8004bd4 <UART_SetConfig+0x118>)
 8004b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b82:	095b      	lsrs	r3, r3, #5
 8004b84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b88:	4419      	add	r1, r3
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	4413      	add	r3, r2
 8004b92:	009a      	lsls	r2, r3, #2
 8004b94:	441a      	add	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8004bd4 <UART_SetConfig+0x118>)
 8004ba2:	fba3 0302 	umull	r0, r3, r3, r2
 8004ba6:	095b      	lsrs	r3, r3, #5
 8004ba8:	2064      	movs	r0, #100	@ 0x64
 8004baa:	fb00 f303 	mul.w	r3, r0, r3
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	011b      	lsls	r3, r3, #4
 8004bb2:	3332      	adds	r3, #50	@ 0x32
 8004bb4:	4a07      	ldr	r2, [pc, #28]	@ (8004bd4 <UART_SetConfig+0x118>)
 8004bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bba:	095b      	lsrs	r3, r3, #5
 8004bbc:	f003 020f 	and.w	r2, r3, #15
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	440a      	add	r2, r1
 8004bc6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004bc8:	bf00      	nop
 8004bca:	3710      	adds	r7, #16
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	40013800 	.word	0x40013800
 8004bd4:	51eb851f 	.word	0x51eb851f

08004bd8 <siprintf>:
 8004bd8:	b40e      	push	{r1, r2, r3}
 8004bda:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004bde:	b510      	push	{r4, lr}
 8004be0:	2400      	movs	r4, #0
 8004be2:	b09d      	sub	sp, #116	@ 0x74
 8004be4:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004be6:	9002      	str	r0, [sp, #8]
 8004be8:	9006      	str	r0, [sp, #24]
 8004bea:	9107      	str	r1, [sp, #28]
 8004bec:	9104      	str	r1, [sp, #16]
 8004bee:	4809      	ldr	r0, [pc, #36]	@ (8004c14 <siprintf+0x3c>)
 8004bf0:	4909      	ldr	r1, [pc, #36]	@ (8004c18 <siprintf+0x40>)
 8004bf2:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bf6:	9105      	str	r1, [sp, #20]
 8004bf8:	6800      	ldr	r0, [r0, #0]
 8004bfa:	a902      	add	r1, sp, #8
 8004bfc:	9301      	str	r3, [sp, #4]
 8004bfe:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004c00:	f000 f9a4 	bl	8004f4c <_svfiprintf_r>
 8004c04:	9b02      	ldr	r3, [sp, #8]
 8004c06:	701c      	strb	r4, [r3, #0]
 8004c08:	b01d      	add	sp, #116	@ 0x74
 8004c0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c0e:	b003      	add	sp, #12
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	2000000c 	.word	0x2000000c
 8004c18:	ffff0208 	.word	0xffff0208

08004c1c <memset>:
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	4402      	add	r2, r0
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d100      	bne.n	8004c26 <memset+0xa>
 8004c24:	4770      	bx	lr
 8004c26:	f803 1b01 	strb.w	r1, [r3], #1
 8004c2a:	e7f9      	b.n	8004c20 <memset+0x4>

08004c2c <strncmp>:
 8004c2c:	b510      	push	{r4, lr}
 8004c2e:	b16a      	cbz	r2, 8004c4c <strncmp+0x20>
 8004c30:	3901      	subs	r1, #1
 8004c32:	1884      	adds	r4, r0, r2
 8004c34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c38:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d103      	bne.n	8004c48 <strncmp+0x1c>
 8004c40:	42a0      	cmp	r0, r4
 8004c42:	d001      	beq.n	8004c48 <strncmp+0x1c>
 8004c44:	2a00      	cmp	r2, #0
 8004c46:	d1f5      	bne.n	8004c34 <strncmp+0x8>
 8004c48:	1ad0      	subs	r0, r2, r3
 8004c4a:	bd10      	pop	{r4, pc}
 8004c4c:	4610      	mov	r0, r2
 8004c4e:	e7fc      	b.n	8004c4a <strncmp+0x1e>

08004c50 <__errno>:
 8004c50:	4b01      	ldr	r3, [pc, #4]	@ (8004c58 <__errno+0x8>)
 8004c52:	6818      	ldr	r0, [r3, #0]
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	2000000c 	.word	0x2000000c

08004c5c <__libc_init_array>:
 8004c5c:	b570      	push	{r4, r5, r6, lr}
 8004c5e:	2600      	movs	r6, #0
 8004c60:	4d0c      	ldr	r5, [pc, #48]	@ (8004c94 <__libc_init_array+0x38>)
 8004c62:	4c0d      	ldr	r4, [pc, #52]	@ (8004c98 <__libc_init_array+0x3c>)
 8004c64:	1b64      	subs	r4, r4, r5
 8004c66:	10a4      	asrs	r4, r4, #2
 8004c68:	42a6      	cmp	r6, r4
 8004c6a:	d109      	bne.n	8004c80 <__libc_init_array+0x24>
 8004c6c:	f000 fc76 	bl	800555c <_init>
 8004c70:	2600      	movs	r6, #0
 8004c72:	4d0a      	ldr	r5, [pc, #40]	@ (8004c9c <__libc_init_array+0x40>)
 8004c74:	4c0a      	ldr	r4, [pc, #40]	@ (8004ca0 <__libc_init_array+0x44>)
 8004c76:	1b64      	subs	r4, r4, r5
 8004c78:	10a4      	asrs	r4, r4, #2
 8004c7a:	42a6      	cmp	r6, r4
 8004c7c:	d105      	bne.n	8004c8a <__libc_init_array+0x2e>
 8004c7e:	bd70      	pop	{r4, r5, r6, pc}
 8004c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c84:	4798      	blx	r3
 8004c86:	3601      	adds	r6, #1
 8004c88:	e7ee      	b.n	8004c68 <__libc_init_array+0xc>
 8004c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c8e:	4798      	blx	r3
 8004c90:	3601      	adds	r6, #1
 8004c92:	e7f2      	b.n	8004c7a <__libc_init_array+0x1e>
 8004c94:	080056c4 	.word	0x080056c4
 8004c98:	080056c4 	.word	0x080056c4
 8004c9c:	080056c4 	.word	0x080056c4
 8004ca0:	080056c8 	.word	0x080056c8

08004ca4 <__retarget_lock_acquire_recursive>:
 8004ca4:	4770      	bx	lr

08004ca6 <__retarget_lock_release_recursive>:
 8004ca6:	4770      	bx	lr

08004ca8 <_free_r>:
 8004ca8:	b538      	push	{r3, r4, r5, lr}
 8004caa:	4605      	mov	r5, r0
 8004cac:	2900      	cmp	r1, #0
 8004cae:	d040      	beq.n	8004d32 <_free_r+0x8a>
 8004cb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cb4:	1f0c      	subs	r4, r1, #4
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	bfb8      	it	lt
 8004cba:	18e4      	addlt	r4, r4, r3
 8004cbc:	f000 f8de 	bl	8004e7c <__malloc_lock>
 8004cc0:	4a1c      	ldr	r2, [pc, #112]	@ (8004d34 <_free_r+0x8c>)
 8004cc2:	6813      	ldr	r3, [r2, #0]
 8004cc4:	b933      	cbnz	r3, 8004cd4 <_free_r+0x2c>
 8004cc6:	6063      	str	r3, [r4, #4]
 8004cc8:	6014      	str	r4, [r2, #0]
 8004cca:	4628      	mov	r0, r5
 8004ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004cd0:	f000 b8da 	b.w	8004e88 <__malloc_unlock>
 8004cd4:	42a3      	cmp	r3, r4
 8004cd6:	d908      	bls.n	8004cea <_free_r+0x42>
 8004cd8:	6820      	ldr	r0, [r4, #0]
 8004cda:	1821      	adds	r1, r4, r0
 8004cdc:	428b      	cmp	r3, r1
 8004cde:	bf01      	itttt	eq
 8004ce0:	6819      	ldreq	r1, [r3, #0]
 8004ce2:	685b      	ldreq	r3, [r3, #4]
 8004ce4:	1809      	addeq	r1, r1, r0
 8004ce6:	6021      	streq	r1, [r4, #0]
 8004ce8:	e7ed      	b.n	8004cc6 <_free_r+0x1e>
 8004cea:	461a      	mov	r2, r3
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	b10b      	cbz	r3, 8004cf4 <_free_r+0x4c>
 8004cf0:	42a3      	cmp	r3, r4
 8004cf2:	d9fa      	bls.n	8004cea <_free_r+0x42>
 8004cf4:	6811      	ldr	r1, [r2, #0]
 8004cf6:	1850      	adds	r0, r2, r1
 8004cf8:	42a0      	cmp	r0, r4
 8004cfa:	d10b      	bne.n	8004d14 <_free_r+0x6c>
 8004cfc:	6820      	ldr	r0, [r4, #0]
 8004cfe:	4401      	add	r1, r0
 8004d00:	1850      	adds	r0, r2, r1
 8004d02:	4283      	cmp	r3, r0
 8004d04:	6011      	str	r1, [r2, #0]
 8004d06:	d1e0      	bne.n	8004cca <_free_r+0x22>
 8004d08:	6818      	ldr	r0, [r3, #0]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	4408      	add	r0, r1
 8004d0e:	6010      	str	r0, [r2, #0]
 8004d10:	6053      	str	r3, [r2, #4]
 8004d12:	e7da      	b.n	8004cca <_free_r+0x22>
 8004d14:	d902      	bls.n	8004d1c <_free_r+0x74>
 8004d16:	230c      	movs	r3, #12
 8004d18:	602b      	str	r3, [r5, #0]
 8004d1a:	e7d6      	b.n	8004cca <_free_r+0x22>
 8004d1c:	6820      	ldr	r0, [r4, #0]
 8004d1e:	1821      	adds	r1, r4, r0
 8004d20:	428b      	cmp	r3, r1
 8004d22:	bf01      	itttt	eq
 8004d24:	6819      	ldreq	r1, [r3, #0]
 8004d26:	685b      	ldreq	r3, [r3, #4]
 8004d28:	1809      	addeq	r1, r1, r0
 8004d2a:	6021      	streq	r1, [r4, #0]
 8004d2c:	6063      	str	r3, [r4, #4]
 8004d2e:	6054      	str	r4, [r2, #4]
 8004d30:	e7cb      	b.n	8004cca <_free_r+0x22>
 8004d32:	bd38      	pop	{r3, r4, r5, pc}
 8004d34:	20000328 	.word	0x20000328

08004d38 <sbrk_aligned>:
 8004d38:	b570      	push	{r4, r5, r6, lr}
 8004d3a:	4e0f      	ldr	r6, [pc, #60]	@ (8004d78 <sbrk_aligned+0x40>)
 8004d3c:	460c      	mov	r4, r1
 8004d3e:	6831      	ldr	r1, [r6, #0]
 8004d40:	4605      	mov	r5, r0
 8004d42:	b911      	cbnz	r1, 8004d4a <sbrk_aligned+0x12>
 8004d44:	f000 fba8 	bl	8005498 <_sbrk_r>
 8004d48:	6030      	str	r0, [r6, #0]
 8004d4a:	4621      	mov	r1, r4
 8004d4c:	4628      	mov	r0, r5
 8004d4e:	f000 fba3 	bl	8005498 <_sbrk_r>
 8004d52:	1c43      	adds	r3, r0, #1
 8004d54:	d103      	bne.n	8004d5e <sbrk_aligned+0x26>
 8004d56:	f04f 34ff 	mov.w	r4, #4294967295
 8004d5a:	4620      	mov	r0, r4
 8004d5c:	bd70      	pop	{r4, r5, r6, pc}
 8004d5e:	1cc4      	adds	r4, r0, #3
 8004d60:	f024 0403 	bic.w	r4, r4, #3
 8004d64:	42a0      	cmp	r0, r4
 8004d66:	d0f8      	beq.n	8004d5a <sbrk_aligned+0x22>
 8004d68:	1a21      	subs	r1, r4, r0
 8004d6a:	4628      	mov	r0, r5
 8004d6c:	f000 fb94 	bl	8005498 <_sbrk_r>
 8004d70:	3001      	adds	r0, #1
 8004d72:	d1f2      	bne.n	8004d5a <sbrk_aligned+0x22>
 8004d74:	e7ef      	b.n	8004d56 <sbrk_aligned+0x1e>
 8004d76:	bf00      	nop
 8004d78:	20000324 	.word	0x20000324

08004d7c <_malloc_r>:
 8004d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d80:	1ccd      	adds	r5, r1, #3
 8004d82:	f025 0503 	bic.w	r5, r5, #3
 8004d86:	3508      	adds	r5, #8
 8004d88:	2d0c      	cmp	r5, #12
 8004d8a:	bf38      	it	cc
 8004d8c:	250c      	movcc	r5, #12
 8004d8e:	2d00      	cmp	r5, #0
 8004d90:	4606      	mov	r6, r0
 8004d92:	db01      	blt.n	8004d98 <_malloc_r+0x1c>
 8004d94:	42a9      	cmp	r1, r5
 8004d96:	d904      	bls.n	8004da2 <_malloc_r+0x26>
 8004d98:	230c      	movs	r3, #12
 8004d9a:	6033      	str	r3, [r6, #0]
 8004d9c:	2000      	movs	r0, #0
 8004d9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004da2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004e78 <_malloc_r+0xfc>
 8004da6:	f000 f869 	bl	8004e7c <__malloc_lock>
 8004daa:	f8d8 3000 	ldr.w	r3, [r8]
 8004dae:	461c      	mov	r4, r3
 8004db0:	bb44      	cbnz	r4, 8004e04 <_malloc_r+0x88>
 8004db2:	4629      	mov	r1, r5
 8004db4:	4630      	mov	r0, r6
 8004db6:	f7ff ffbf 	bl	8004d38 <sbrk_aligned>
 8004dba:	1c43      	adds	r3, r0, #1
 8004dbc:	4604      	mov	r4, r0
 8004dbe:	d158      	bne.n	8004e72 <_malloc_r+0xf6>
 8004dc0:	f8d8 4000 	ldr.w	r4, [r8]
 8004dc4:	4627      	mov	r7, r4
 8004dc6:	2f00      	cmp	r7, #0
 8004dc8:	d143      	bne.n	8004e52 <_malloc_r+0xd6>
 8004dca:	2c00      	cmp	r4, #0
 8004dcc:	d04b      	beq.n	8004e66 <_malloc_r+0xea>
 8004dce:	6823      	ldr	r3, [r4, #0]
 8004dd0:	4639      	mov	r1, r7
 8004dd2:	4630      	mov	r0, r6
 8004dd4:	eb04 0903 	add.w	r9, r4, r3
 8004dd8:	f000 fb5e 	bl	8005498 <_sbrk_r>
 8004ddc:	4581      	cmp	r9, r0
 8004dde:	d142      	bne.n	8004e66 <_malloc_r+0xea>
 8004de0:	6821      	ldr	r1, [r4, #0]
 8004de2:	4630      	mov	r0, r6
 8004de4:	1a6d      	subs	r5, r5, r1
 8004de6:	4629      	mov	r1, r5
 8004de8:	f7ff ffa6 	bl	8004d38 <sbrk_aligned>
 8004dec:	3001      	adds	r0, #1
 8004dee:	d03a      	beq.n	8004e66 <_malloc_r+0xea>
 8004df0:	6823      	ldr	r3, [r4, #0]
 8004df2:	442b      	add	r3, r5
 8004df4:	6023      	str	r3, [r4, #0]
 8004df6:	f8d8 3000 	ldr.w	r3, [r8]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	bb62      	cbnz	r2, 8004e58 <_malloc_r+0xdc>
 8004dfe:	f8c8 7000 	str.w	r7, [r8]
 8004e02:	e00f      	b.n	8004e24 <_malloc_r+0xa8>
 8004e04:	6822      	ldr	r2, [r4, #0]
 8004e06:	1b52      	subs	r2, r2, r5
 8004e08:	d420      	bmi.n	8004e4c <_malloc_r+0xd0>
 8004e0a:	2a0b      	cmp	r2, #11
 8004e0c:	d917      	bls.n	8004e3e <_malloc_r+0xc2>
 8004e0e:	1961      	adds	r1, r4, r5
 8004e10:	42a3      	cmp	r3, r4
 8004e12:	6025      	str	r5, [r4, #0]
 8004e14:	bf18      	it	ne
 8004e16:	6059      	strne	r1, [r3, #4]
 8004e18:	6863      	ldr	r3, [r4, #4]
 8004e1a:	bf08      	it	eq
 8004e1c:	f8c8 1000 	streq.w	r1, [r8]
 8004e20:	5162      	str	r2, [r4, r5]
 8004e22:	604b      	str	r3, [r1, #4]
 8004e24:	4630      	mov	r0, r6
 8004e26:	f000 f82f 	bl	8004e88 <__malloc_unlock>
 8004e2a:	f104 000b 	add.w	r0, r4, #11
 8004e2e:	1d23      	adds	r3, r4, #4
 8004e30:	f020 0007 	bic.w	r0, r0, #7
 8004e34:	1ac2      	subs	r2, r0, r3
 8004e36:	bf1c      	itt	ne
 8004e38:	1a1b      	subne	r3, r3, r0
 8004e3a:	50a3      	strne	r3, [r4, r2]
 8004e3c:	e7af      	b.n	8004d9e <_malloc_r+0x22>
 8004e3e:	6862      	ldr	r2, [r4, #4]
 8004e40:	42a3      	cmp	r3, r4
 8004e42:	bf0c      	ite	eq
 8004e44:	f8c8 2000 	streq.w	r2, [r8]
 8004e48:	605a      	strne	r2, [r3, #4]
 8004e4a:	e7eb      	b.n	8004e24 <_malloc_r+0xa8>
 8004e4c:	4623      	mov	r3, r4
 8004e4e:	6864      	ldr	r4, [r4, #4]
 8004e50:	e7ae      	b.n	8004db0 <_malloc_r+0x34>
 8004e52:	463c      	mov	r4, r7
 8004e54:	687f      	ldr	r7, [r7, #4]
 8004e56:	e7b6      	b.n	8004dc6 <_malloc_r+0x4a>
 8004e58:	461a      	mov	r2, r3
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	42a3      	cmp	r3, r4
 8004e5e:	d1fb      	bne.n	8004e58 <_malloc_r+0xdc>
 8004e60:	2300      	movs	r3, #0
 8004e62:	6053      	str	r3, [r2, #4]
 8004e64:	e7de      	b.n	8004e24 <_malloc_r+0xa8>
 8004e66:	230c      	movs	r3, #12
 8004e68:	4630      	mov	r0, r6
 8004e6a:	6033      	str	r3, [r6, #0]
 8004e6c:	f000 f80c 	bl	8004e88 <__malloc_unlock>
 8004e70:	e794      	b.n	8004d9c <_malloc_r+0x20>
 8004e72:	6005      	str	r5, [r0, #0]
 8004e74:	e7d6      	b.n	8004e24 <_malloc_r+0xa8>
 8004e76:	bf00      	nop
 8004e78:	20000328 	.word	0x20000328

08004e7c <__malloc_lock>:
 8004e7c:	4801      	ldr	r0, [pc, #4]	@ (8004e84 <__malloc_lock+0x8>)
 8004e7e:	f7ff bf11 	b.w	8004ca4 <__retarget_lock_acquire_recursive>
 8004e82:	bf00      	nop
 8004e84:	20000320 	.word	0x20000320

08004e88 <__malloc_unlock>:
 8004e88:	4801      	ldr	r0, [pc, #4]	@ (8004e90 <__malloc_unlock+0x8>)
 8004e8a:	f7ff bf0c 	b.w	8004ca6 <__retarget_lock_release_recursive>
 8004e8e:	bf00      	nop
 8004e90:	20000320 	.word	0x20000320

08004e94 <__ssputs_r>:
 8004e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e98:	461f      	mov	r7, r3
 8004e9a:	688e      	ldr	r6, [r1, #8]
 8004e9c:	4682      	mov	sl, r0
 8004e9e:	42be      	cmp	r6, r7
 8004ea0:	460c      	mov	r4, r1
 8004ea2:	4690      	mov	r8, r2
 8004ea4:	680b      	ldr	r3, [r1, #0]
 8004ea6:	d82d      	bhi.n	8004f04 <__ssputs_r+0x70>
 8004ea8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004eac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004eb0:	d026      	beq.n	8004f00 <__ssputs_r+0x6c>
 8004eb2:	6965      	ldr	r5, [r4, #20]
 8004eb4:	6909      	ldr	r1, [r1, #16]
 8004eb6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004eba:	eba3 0901 	sub.w	r9, r3, r1
 8004ebe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ec2:	1c7b      	adds	r3, r7, #1
 8004ec4:	444b      	add	r3, r9
 8004ec6:	106d      	asrs	r5, r5, #1
 8004ec8:	429d      	cmp	r5, r3
 8004eca:	bf38      	it	cc
 8004ecc:	461d      	movcc	r5, r3
 8004ece:	0553      	lsls	r3, r2, #21
 8004ed0:	d527      	bpl.n	8004f22 <__ssputs_r+0x8e>
 8004ed2:	4629      	mov	r1, r5
 8004ed4:	f7ff ff52 	bl	8004d7c <_malloc_r>
 8004ed8:	4606      	mov	r6, r0
 8004eda:	b360      	cbz	r0, 8004f36 <__ssputs_r+0xa2>
 8004edc:	464a      	mov	r2, r9
 8004ede:	6921      	ldr	r1, [r4, #16]
 8004ee0:	f000 faf8 	bl	80054d4 <memcpy>
 8004ee4:	89a3      	ldrh	r3, [r4, #12]
 8004ee6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004eea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004eee:	81a3      	strh	r3, [r4, #12]
 8004ef0:	6126      	str	r6, [r4, #16]
 8004ef2:	444e      	add	r6, r9
 8004ef4:	6026      	str	r6, [r4, #0]
 8004ef6:	463e      	mov	r6, r7
 8004ef8:	6165      	str	r5, [r4, #20]
 8004efa:	eba5 0509 	sub.w	r5, r5, r9
 8004efe:	60a5      	str	r5, [r4, #8]
 8004f00:	42be      	cmp	r6, r7
 8004f02:	d900      	bls.n	8004f06 <__ssputs_r+0x72>
 8004f04:	463e      	mov	r6, r7
 8004f06:	4632      	mov	r2, r6
 8004f08:	4641      	mov	r1, r8
 8004f0a:	6820      	ldr	r0, [r4, #0]
 8004f0c:	f000 faaa 	bl	8005464 <memmove>
 8004f10:	2000      	movs	r0, #0
 8004f12:	68a3      	ldr	r3, [r4, #8]
 8004f14:	1b9b      	subs	r3, r3, r6
 8004f16:	60a3      	str	r3, [r4, #8]
 8004f18:	6823      	ldr	r3, [r4, #0]
 8004f1a:	4433      	add	r3, r6
 8004f1c:	6023      	str	r3, [r4, #0]
 8004f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f22:	462a      	mov	r2, r5
 8004f24:	f000 fae4 	bl	80054f0 <_realloc_r>
 8004f28:	4606      	mov	r6, r0
 8004f2a:	2800      	cmp	r0, #0
 8004f2c:	d1e0      	bne.n	8004ef0 <__ssputs_r+0x5c>
 8004f2e:	4650      	mov	r0, sl
 8004f30:	6921      	ldr	r1, [r4, #16]
 8004f32:	f7ff feb9 	bl	8004ca8 <_free_r>
 8004f36:	230c      	movs	r3, #12
 8004f38:	f8ca 3000 	str.w	r3, [sl]
 8004f3c:	89a3      	ldrh	r3, [r4, #12]
 8004f3e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f46:	81a3      	strh	r3, [r4, #12]
 8004f48:	e7e9      	b.n	8004f1e <__ssputs_r+0x8a>
	...

08004f4c <_svfiprintf_r>:
 8004f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f50:	4698      	mov	r8, r3
 8004f52:	898b      	ldrh	r3, [r1, #12]
 8004f54:	4607      	mov	r7, r0
 8004f56:	061b      	lsls	r3, r3, #24
 8004f58:	460d      	mov	r5, r1
 8004f5a:	4614      	mov	r4, r2
 8004f5c:	b09d      	sub	sp, #116	@ 0x74
 8004f5e:	d510      	bpl.n	8004f82 <_svfiprintf_r+0x36>
 8004f60:	690b      	ldr	r3, [r1, #16]
 8004f62:	b973      	cbnz	r3, 8004f82 <_svfiprintf_r+0x36>
 8004f64:	2140      	movs	r1, #64	@ 0x40
 8004f66:	f7ff ff09 	bl	8004d7c <_malloc_r>
 8004f6a:	6028      	str	r0, [r5, #0]
 8004f6c:	6128      	str	r0, [r5, #16]
 8004f6e:	b930      	cbnz	r0, 8004f7e <_svfiprintf_r+0x32>
 8004f70:	230c      	movs	r3, #12
 8004f72:	603b      	str	r3, [r7, #0]
 8004f74:	f04f 30ff 	mov.w	r0, #4294967295
 8004f78:	b01d      	add	sp, #116	@ 0x74
 8004f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f7e:	2340      	movs	r3, #64	@ 0x40
 8004f80:	616b      	str	r3, [r5, #20]
 8004f82:	2300      	movs	r3, #0
 8004f84:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f86:	2320      	movs	r3, #32
 8004f88:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004f8c:	2330      	movs	r3, #48	@ 0x30
 8004f8e:	f04f 0901 	mov.w	r9, #1
 8004f92:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f96:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005130 <_svfiprintf_r+0x1e4>
 8004f9a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004f9e:	4623      	mov	r3, r4
 8004fa0:	469a      	mov	sl, r3
 8004fa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004fa6:	b10a      	cbz	r2, 8004fac <_svfiprintf_r+0x60>
 8004fa8:	2a25      	cmp	r2, #37	@ 0x25
 8004faa:	d1f9      	bne.n	8004fa0 <_svfiprintf_r+0x54>
 8004fac:	ebba 0b04 	subs.w	fp, sl, r4
 8004fb0:	d00b      	beq.n	8004fca <_svfiprintf_r+0x7e>
 8004fb2:	465b      	mov	r3, fp
 8004fb4:	4622      	mov	r2, r4
 8004fb6:	4629      	mov	r1, r5
 8004fb8:	4638      	mov	r0, r7
 8004fba:	f7ff ff6b 	bl	8004e94 <__ssputs_r>
 8004fbe:	3001      	adds	r0, #1
 8004fc0:	f000 80a7 	beq.w	8005112 <_svfiprintf_r+0x1c6>
 8004fc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004fc6:	445a      	add	r2, fp
 8004fc8:	9209      	str	r2, [sp, #36]	@ 0x24
 8004fca:	f89a 3000 	ldrb.w	r3, [sl]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f000 809f 	beq.w	8005112 <_svfiprintf_r+0x1c6>
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8004fda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fde:	f10a 0a01 	add.w	sl, sl, #1
 8004fe2:	9304      	str	r3, [sp, #16]
 8004fe4:	9307      	str	r3, [sp, #28]
 8004fe6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004fea:	931a      	str	r3, [sp, #104]	@ 0x68
 8004fec:	4654      	mov	r4, sl
 8004fee:	2205      	movs	r2, #5
 8004ff0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ff4:	484e      	ldr	r0, [pc, #312]	@ (8005130 <_svfiprintf_r+0x1e4>)
 8004ff6:	f000 fa5f 	bl	80054b8 <memchr>
 8004ffa:	9a04      	ldr	r2, [sp, #16]
 8004ffc:	b9d8      	cbnz	r0, 8005036 <_svfiprintf_r+0xea>
 8004ffe:	06d0      	lsls	r0, r2, #27
 8005000:	bf44      	itt	mi
 8005002:	2320      	movmi	r3, #32
 8005004:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005008:	0711      	lsls	r1, r2, #28
 800500a:	bf44      	itt	mi
 800500c:	232b      	movmi	r3, #43	@ 0x2b
 800500e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005012:	f89a 3000 	ldrb.w	r3, [sl]
 8005016:	2b2a      	cmp	r3, #42	@ 0x2a
 8005018:	d015      	beq.n	8005046 <_svfiprintf_r+0xfa>
 800501a:	4654      	mov	r4, sl
 800501c:	2000      	movs	r0, #0
 800501e:	f04f 0c0a 	mov.w	ip, #10
 8005022:	9a07      	ldr	r2, [sp, #28]
 8005024:	4621      	mov	r1, r4
 8005026:	f811 3b01 	ldrb.w	r3, [r1], #1
 800502a:	3b30      	subs	r3, #48	@ 0x30
 800502c:	2b09      	cmp	r3, #9
 800502e:	d94b      	bls.n	80050c8 <_svfiprintf_r+0x17c>
 8005030:	b1b0      	cbz	r0, 8005060 <_svfiprintf_r+0x114>
 8005032:	9207      	str	r2, [sp, #28]
 8005034:	e014      	b.n	8005060 <_svfiprintf_r+0x114>
 8005036:	eba0 0308 	sub.w	r3, r0, r8
 800503a:	fa09 f303 	lsl.w	r3, r9, r3
 800503e:	4313      	orrs	r3, r2
 8005040:	46a2      	mov	sl, r4
 8005042:	9304      	str	r3, [sp, #16]
 8005044:	e7d2      	b.n	8004fec <_svfiprintf_r+0xa0>
 8005046:	9b03      	ldr	r3, [sp, #12]
 8005048:	1d19      	adds	r1, r3, #4
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	9103      	str	r1, [sp, #12]
 800504e:	2b00      	cmp	r3, #0
 8005050:	bfbb      	ittet	lt
 8005052:	425b      	neglt	r3, r3
 8005054:	f042 0202 	orrlt.w	r2, r2, #2
 8005058:	9307      	strge	r3, [sp, #28]
 800505a:	9307      	strlt	r3, [sp, #28]
 800505c:	bfb8      	it	lt
 800505e:	9204      	strlt	r2, [sp, #16]
 8005060:	7823      	ldrb	r3, [r4, #0]
 8005062:	2b2e      	cmp	r3, #46	@ 0x2e
 8005064:	d10a      	bne.n	800507c <_svfiprintf_r+0x130>
 8005066:	7863      	ldrb	r3, [r4, #1]
 8005068:	2b2a      	cmp	r3, #42	@ 0x2a
 800506a:	d132      	bne.n	80050d2 <_svfiprintf_r+0x186>
 800506c:	9b03      	ldr	r3, [sp, #12]
 800506e:	3402      	adds	r4, #2
 8005070:	1d1a      	adds	r2, r3, #4
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	9203      	str	r2, [sp, #12]
 8005076:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800507a:	9305      	str	r3, [sp, #20]
 800507c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005134 <_svfiprintf_r+0x1e8>
 8005080:	2203      	movs	r2, #3
 8005082:	4650      	mov	r0, sl
 8005084:	7821      	ldrb	r1, [r4, #0]
 8005086:	f000 fa17 	bl	80054b8 <memchr>
 800508a:	b138      	cbz	r0, 800509c <_svfiprintf_r+0x150>
 800508c:	2240      	movs	r2, #64	@ 0x40
 800508e:	9b04      	ldr	r3, [sp, #16]
 8005090:	eba0 000a 	sub.w	r0, r0, sl
 8005094:	4082      	lsls	r2, r0
 8005096:	4313      	orrs	r3, r2
 8005098:	3401      	adds	r4, #1
 800509a:	9304      	str	r3, [sp, #16]
 800509c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050a0:	2206      	movs	r2, #6
 80050a2:	4825      	ldr	r0, [pc, #148]	@ (8005138 <_svfiprintf_r+0x1ec>)
 80050a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80050a8:	f000 fa06 	bl	80054b8 <memchr>
 80050ac:	2800      	cmp	r0, #0
 80050ae:	d036      	beq.n	800511e <_svfiprintf_r+0x1d2>
 80050b0:	4b22      	ldr	r3, [pc, #136]	@ (800513c <_svfiprintf_r+0x1f0>)
 80050b2:	bb1b      	cbnz	r3, 80050fc <_svfiprintf_r+0x1b0>
 80050b4:	9b03      	ldr	r3, [sp, #12]
 80050b6:	3307      	adds	r3, #7
 80050b8:	f023 0307 	bic.w	r3, r3, #7
 80050bc:	3308      	adds	r3, #8
 80050be:	9303      	str	r3, [sp, #12]
 80050c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050c2:	4433      	add	r3, r6
 80050c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80050c6:	e76a      	b.n	8004f9e <_svfiprintf_r+0x52>
 80050c8:	460c      	mov	r4, r1
 80050ca:	2001      	movs	r0, #1
 80050cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80050d0:	e7a8      	b.n	8005024 <_svfiprintf_r+0xd8>
 80050d2:	2300      	movs	r3, #0
 80050d4:	f04f 0c0a 	mov.w	ip, #10
 80050d8:	4619      	mov	r1, r3
 80050da:	3401      	adds	r4, #1
 80050dc:	9305      	str	r3, [sp, #20]
 80050de:	4620      	mov	r0, r4
 80050e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050e4:	3a30      	subs	r2, #48	@ 0x30
 80050e6:	2a09      	cmp	r2, #9
 80050e8:	d903      	bls.n	80050f2 <_svfiprintf_r+0x1a6>
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d0c6      	beq.n	800507c <_svfiprintf_r+0x130>
 80050ee:	9105      	str	r1, [sp, #20]
 80050f0:	e7c4      	b.n	800507c <_svfiprintf_r+0x130>
 80050f2:	4604      	mov	r4, r0
 80050f4:	2301      	movs	r3, #1
 80050f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80050fa:	e7f0      	b.n	80050de <_svfiprintf_r+0x192>
 80050fc:	ab03      	add	r3, sp, #12
 80050fe:	9300      	str	r3, [sp, #0]
 8005100:	462a      	mov	r2, r5
 8005102:	4638      	mov	r0, r7
 8005104:	4b0e      	ldr	r3, [pc, #56]	@ (8005140 <_svfiprintf_r+0x1f4>)
 8005106:	a904      	add	r1, sp, #16
 8005108:	f3af 8000 	nop.w
 800510c:	1c42      	adds	r2, r0, #1
 800510e:	4606      	mov	r6, r0
 8005110:	d1d6      	bne.n	80050c0 <_svfiprintf_r+0x174>
 8005112:	89ab      	ldrh	r3, [r5, #12]
 8005114:	065b      	lsls	r3, r3, #25
 8005116:	f53f af2d 	bmi.w	8004f74 <_svfiprintf_r+0x28>
 800511a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800511c:	e72c      	b.n	8004f78 <_svfiprintf_r+0x2c>
 800511e:	ab03      	add	r3, sp, #12
 8005120:	9300      	str	r3, [sp, #0]
 8005122:	462a      	mov	r2, r5
 8005124:	4638      	mov	r0, r7
 8005126:	4b06      	ldr	r3, [pc, #24]	@ (8005140 <_svfiprintf_r+0x1f4>)
 8005128:	a904      	add	r1, sp, #16
 800512a:	f000 f87d 	bl	8005228 <_printf_i>
 800512e:	e7ed      	b.n	800510c <_svfiprintf_r+0x1c0>
 8005130:	08005686 	.word	0x08005686
 8005134:	0800568c 	.word	0x0800568c
 8005138:	08005690 	.word	0x08005690
 800513c:	00000000 	.word	0x00000000
 8005140:	08004e95 	.word	0x08004e95

08005144 <_printf_common>:
 8005144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005148:	4616      	mov	r6, r2
 800514a:	4698      	mov	r8, r3
 800514c:	688a      	ldr	r2, [r1, #8]
 800514e:	690b      	ldr	r3, [r1, #16]
 8005150:	4607      	mov	r7, r0
 8005152:	4293      	cmp	r3, r2
 8005154:	bfb8      	it	lt
 8005156:	4613      	movlt	r3, r2
 8005158:	6033      	str	r3, [r6, #0]
 800515a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800515e:	460c      	mov	r4, r1
 8005160:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005164:	b10a      	cbz	r2, 800516a <_printf_common+0x26>
 8005166:	3301      	adds	r3, #1
 8005168:	6033      	str	r3, [r6, #0]
 800516a:	6823      	ldr	r3, [r4, #0]
 800516c:	0699      	lsls	r1, r3, #26
 800516e:	bf42      	ittt	mi
 8005170:	6833      	ldrmi	r3, [r6, #0]
 8005172:	3302      	addmi	r3, #2
 8005174:	6033      	strmi	r3, [r6, #0]
 8005176:	6825      	ldr	r5, [r4, #0]
 8005178:	f015 0506 	ands.w	r5, r5, #6
 800517c:	d106      	bne.n	800518c <_printf_common+0x48>
 800517e:	f104 0a19 	add.w	sl, r4, #25
 8005182:	68e3      	ldr	r3, [r4, #12]
 8005184:	6832      	ldr	r2, [r6, #0]
 8005186:	1a9b      	subs	r3, r3, r2
 8005188:	42ab      	cmp	r3, r5
 800518a:	dc2b      	bgt.n	80051e4 <_printf_common+0xa0>
 800518c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005190:	6822      	ldr	r2, [r4, #0]
 8005192:	3b00      	subs	r3, #0
 8005194:	bf18      	it	ne
 8005196:	2301      	movne	r3, #1
 8005198:	0692      	lsls	r2, r2, #26
 800519a:	d430      	bmi.n	80051fe <_printf_common+0xba>
 800519c:	4641      	mov	r1, r8
 800519e:	4638      	mov	r0, r7
 80051a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80051a4:	47c8      	blx	r9
 80051a6:	3001      	adds	r0, #1
 80051a8:	d023      	beq.n	80051f2 <_printf_common+0xae>
 80051aa:	6823      	ldr	r3, [r4, #0]
 80051ac:	6922      	ldr	r2, [r4, #16]
 80051ae:	f003 0306 	and.w	r3, r3, #6
 80051b2:	2b04      	cmp	r3, #4
 80051b4:	bf14      	ite	ne
 80051b6:	2500      	movne	r5, #0
 80051b8:	6833      	ldreq	r3, [r6, #0]
 80051ba:	f04f 0600 	mov.w	r6, #0
 80051be:	bf08      	it	eq
 80051c0:	68e5      	ldreq	r5, [r4, #12]
 80051c2:	f104 041a 	add.w	r4, r4, #26
 80051c6:	bf08      	it	eq
 80051c8:	1aed      	subeq	r5, r5, r3
 80051ca:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80051ce:	bf08      	it	eq
 80051d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051d4:	4293      	cmp	r3, r2
 80051d6:	bfc4      	itt	gt
 80051d8:	1a9b      	subgt	r3, r3, r2
 80051da:	18ed      	addgt	r5, r5, r3
 80051dc:	42b5      	cmp	r5, r6
 80051de:	d11a      	bne.n	8005216 <_printf_common+0xd2>
 80051e0:	2000      	movs	r0, #0
 80051e2:	e008      	b.n	80051f6 <_printf_common+0xb2>
 80051e4:	2301      	movs	r3, #1
 80051e6:	4652      	mov	r2, sl
 80051e8:	4641      	mov	r1, r8
 80051ea:	4638      	mov	r0, r7
 80051ec:	47c8      	blx	r9
 80051ee:	3001      	adds	r0, #1
 80051f0:	d103      	bne.n	80051fa <_printf_common+0xb6>
 80051f2:	f04f 30ff 	mov.w	r0, #4294967295
 80051f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051fa:	3501      	adds	r5, #1
 80051fc:	e7c1      	b.n	8005182 <_printf_common+0x3e>
 80051fe:	2030      	movs	r0, #48	@ 0x30
 8005200:	18e1      	adds	r1, r4, r3
 8005202:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005206:	1c5a      	adds	r2, r3, #1
 8005208:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800520c:	4422      	add	r2, r4
 800520e:	3302      	adds	r3, #2
 8005210:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005214:	e7c2      	b.n	800519c <_printf_common+0x58>
 8005216:	2301      	movs	r3, #1
 8005218:	4622      	mov	r2, r4
 800521a:	4641      	mov	r1, r8
 800521c:	4638      	mov	r0, r7
 800521e:	47c8      	blx	r9
 8005220:	3001      	adds	r0, #1
 8005222:	d0e6      	beq.n	80051f2 <_printf_common+0xae>
 8005224:	3601      	adds	r6, #1
 8005226:	e7d9      	b.n	80051dc <_printf_common+0x98>

08005228 <_printf_i>:
 8005228:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800522c:	7e0f      	ldrb	r7, [r1, #24]
 800522e:	4691      	mov	r9, r2
 8005230:	2f78      	cmp	r7, #120	@ 0x78
 8005232:	4680      	mov	r8, r0
 8005234:	460c      	mov	r4, r1
 8005236:	469a      	mov	sl, r3
 8005238:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800523a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800523e:	d807      	bhi.n	8005250 <_printf_i+0x28>
 8005240:	2f62      	cmp	r7, #98	@ 0x62
 8005242:	d80a      	bhi.n	800525a <_printf_i+0x32>
 8005244:	2f00      	cmp	r7, #0
 8005246:	f000 80d1 	beq.w	80053ec <_printf_i+0x1c4>
 800524a:	2f58      	cmp	r7, #88	@ 0x58
 800524c:	f000 80b8 	beq.w	80053c0 <_printf_i+0x198>
 8005250:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005254:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005258:	e03a      	b.n	80052d0 <_printf_i+0xa8>
 800525a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800525e:	2b15      	cmp	r3, #21
 8005260:	d8f6      	bhi.n	8005250 <_printf_i+0x28>
 8005262:	a101      	add	r1, pc, #4	@ (adr r1, 8005268 <_printf_i+0x40>)
 8005264:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005268:	080052c1 	.word	0x080052c1
 800526c:	080052d5 	.word	0x080052d5
 8005270:	08005251 	.word	0x08005251
 8005274:	08005251 	.word	0x08005251
 8005278:	08005251 	.word	0x08005251
 800527c:	08005251 	.word	0x08005251
 8005280:	080052d5 	.word	0x080052d5
 8005284:	08005251 	.word	0x08005251
 8005288:	08005251 	.word	0x08005251
 800528c:	08005251 	.word	0x08005251
 8005290:	08005251 	.word	0x08005251
 8005294:	080053d3 	.word	0x080053d3
 8005298:	080052ff 	.word	0x080052ff
 800529c:	0800538d 	.word	0x0800538d
 80052a0:	08005251 	.word	0x08005251
 80052a4:	08005251 	.word	0x08005251
 80052a8:	080053f5 	.word	0x080053f5
 80052ac:	08005251 	.word	0x08005251
 80052b0:	080052ff 	.word	0x080052ff
 80052b4:	08005251 	.word	0x08005251
 80052b8:	08005251 	.word	0x08005251
 80052bc:	08005395 	.word	0x08005395
 80052c0:	6833      	ldr	r3, [r6, #0]
 80052c2:	1d1a      	adds	r2, r3, #4
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	6032      	str	r2, [r6, #0]
 80052c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80052cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80052d0:	2301      	movs	r3, #1
 80052d2:	e09c      	b.n	800540e <_printf_i+0x1e6>
 80052d4:	6833      	ldr	r3, [r6, #0]
 80052d6:	6820      	ldr	r0, [r4, #0]
 80052d8:	1d19      	adds	r1, r3, #4
 80052da:	6031      	str	r1, [r6, #0]
 80052dc:	0606      	lsls	r6, r0, #24
 80052de:	d501      	bpl.n	80052e4 <_printf_i+0xbc>
 80052e0:	681d      	ldr	r5, [r3, #0]
 80052e2:	e003      	b.n	80052ec <_printf_i+0xc4>
 80052e4:	0645      	lsls	r5, r0, #25
 80052e6:	d5fb      	bpl.n	80052e0 <_printf_i+0xb8>
 80052e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80052ec:	2d00      	cmp	r5, #0
 80052ee:	da03      	bge.n	80052f8 <_printf_i+0xd0>
 80052f0:	232d      	movs	r3, #45	@ 0x2d
 80052f2:	426d      	negs	r5, r5
 80052f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052f8:	230a      	movs	r3, #10
 80052fa:	4858      	ldr	r0, [pc, #352]	@ (800545c <_printf_i+0x234>)
 80052fc:	e011      	b.n	8005322 <_printf_i+0xfa>
 80052fe:	6821      	ldr	r1, [r4, #0]
 8005300:	6833      	ldr	r3, [r6, #0]
 8005302:	0608      	lsls	r0, r1, #24
 8005304:	f853 5b04 	ldr.w	r5, [r3], #4
 8005308:	d402      	bmi.n	8005310 <_printf_i+0xe8>
 800530a:	0649      	lsls	r1, r1, #25
 800530c:	bf48      	it	mi
 800530e:	b2ad      	uxthmi	r5, r5
 8005310:	2f6f      	cmp	r7, #111	@ 0x6f
 8005312:	6033      	str	r3, [r6, #0]
 8005314:	bf14      	ite	ne
 8005316:	230a      	movne	r3, #10
 8005318:	2308      	moveq	r3, #8
 800531a:	4850      	ldr	r0, [pc, #320]	@ (800545c <_printf_i+0x234>)
 800531c:	2100      	movs	r1, #0
 800531e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005322:	6866      	ldr	r6, [r4, #4]
 8005324:	2e00      	cmp	r6, #0
 8005326:	60a6      	str	r6, [r4, #8]
 8005328:	db05      	blt.n	8005336 <_printf_i+0x10e>
 800532a:	6821      	ldr	r1, [r4, #0]
 800532c:	432e      	orrs	r6, r5
 800532e:	f021 0104 	bic.w	r1, r1, #4
 8005332:	6021      	str	r1, [r4, #0]
 8005334:	d04b      	beq.n	80053ce <_printf_i+0x1a6>
 8005336:	4616      	mov	r6, r2
 8005338:	fbb5 f1f3 	udiv	r1, r5, r3
 800533c:	fb03 5711 	mls	r7, r3, r1, r5
 8005340:	5dc7      	ldrb	r7, [r0, r7]
 8005342:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005346:	462f      	mov	r7, r5
 8005348:	42bb      	cmp	r3, r7
 800534a:	460d      	mov	r5, r1
 800534c:	d9f4      	bls.n	8005338 <_printf_i+0x110>
 800534e:	2b08      	cmp	r3, #8
 8005350:	d10b      	bne.n	800536a <_printf_i+0x142>
 8005352:	6823      	ldr	r3, [r4, #0]
 8005354:	07df      	lsls	r7, r3, #31
 8005356:	d508      	bpl.n	800536a <_printf_i+0x142>
 8005358:	6923      	ldr	r3, [r4, #16]
 800535a:	6861      	ldr	r1, [r4, #4]
 800535c:	4299      	cmp	r1, r3
 800535e:	bfde      	ittt	le
 8005360:	2330      	movle	r3, #48	@ 0x30
 8005362:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005366:	f106 36ff 	addle.w	r6, r6, #4294967295
 800536a:	1b92      	subs	r2, r2, r6
 800536c:	6122      	str	r2, [r4, #16]
 800536e:	464b      	mov	r3, r9
 8005370:	4621      	mov	r1, r4
 8005372:	4640      	mov	r0, r8
 8005374:	f8cd a000 	str.w	sl, [sp]
 8005378:	aa03      	add	r2, sp, #12
 800537a:	f7ff fee3 	bl	8005144 <_printf_common>
 800537e:	3001      	adds	r0, #1
 8005380:	d14a      	bne.n	8005418 <_printf_i+0x1f0>
 8005382:	f04f 30ff 	mov.w	r0, #4294967295
 8005386:	b004      	add	sp, #16
 8005388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800538c:	6823      	ldr	r3, [r4, #0]
 800538e:	f043 0320 	orr.w	r3, r3, #32
 8005392:	6023      	str	r3, [r4, #0]
 8005394:	2778      	movs	r7, #120	@ 0x78
 8005396:	4832      	ldr	r0, [pc, #200]	@ (8005460 <_printf_i+0x238>)
 8005398:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800539c:	6823      	ldr	r3, [r4, #0]
 800539e:	6831      	ldr	r1, [r6, #0]
 80053a0:	061f      	lsls	r7, r3, #24
 80053a2:	f851 5b04 	ldr.w	r5, [r1], #4
 80053a6:	d402      	bmi.n	80053ae <_printf_i+0x186>
 80053a8:	065f      	lsls	r7, r3, #25
 80053aa:	bf48      	it	mi
 80053ac:	b2ad      	uxthmi	r5, r5
 80053ae:	6031      	str	r1, [r6, #0]
 80053b0:	07d9      	lsls	r1, r3, #31
 80053b2:	bf44      	itt	mi
 80053b4:	f043 0320 	orrmi.w	r3, r3, #32
 80053b8:	6023      	strmi	r3, [r4, #0]
 80053ba:	b11d      	cbz	r5, 80053c4 <_printf_i+0x19c>
 80053bc:	2310      	movs	r3, #16
 80053be:	e7ad      	b.n	800531c <_printf_i+0xf4>
 80053c0:	4826      	ldr	r0, [pc, #152]	@ (800545c <_printf_i+0x234>)
 80053c2:	e7e9      	b.n	8005398 <_printf_i+0x170>
 80053c4:	6823      	ldr	r3, [r4, #0]
 80053c6:	f023 0320 	bic.w	r3, r3, #32
 80053ca:	6023      	str	r3, [r4, #0]
 80053cc:	e7f6      	b.n	80053bc <_printf_i+0x194>
 80053ce:	4616      	mov	r6, r2
 80053d0:	e7bd      	b.n	800534e <_printf_i+0x126>
 80053d2:	6833      	ldr	r3, [r6, #0]
 80053d4:	6825      	ldr	r5, [r4, #0]
 80053d6:	1d18      	adds	r0, r3, #4
 80053d8:	6961      	ldr	r1, [r4, #20]
 80053da:	6030      	str	r0, [r6, #0]
 80053dc:	062e      	lsls	r6, r5, #24
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	d501      	bpl.n	80053e6 <_printf_i+0x1be>
 80053e2:	6019      	str	r1, [r3, #0]
 80053e4:	e002      	b.n	80053ec <_printf_i+0x1c4>
 80053e6:	0668      	lsls	r0, r5, #25
 80053e8:	d5fb      	bpl.n	80053e2 <_printf_i+0x1ba>
 80053ea:	8019      	strh	r1, [r3, #0]
 80053ec:	2300      	movs	r3, #0
 80053ee:	4616      	mov	r6, r2
 80053f0:	6123      	str	r3, [r4, #16]
 80053f2:	e7bc      	b.n	800536e <_printf_i+0x146>
 80053f4:	6833      	ldr	r3, [r6, #0]
 80053f6:	2100      	movs	r1, #0
 80053f8:	1d1a      	adds	r2, r3, #4
 80053fa:	6032      	str	r2, [r6, #0]
 80053fc:	681e      	ldr	r6, [r3, #0]
 80053fe:	6862      	ldr	r2, [r4, #4]
 8005400:	4630      	mov	r0, r6
 8005402:	f000 f859 	bl	80054b8 <memchr>
 8005406:	b108      	cbz	r0, 800540c <_printf_i+0x1e4>
 8005408:	1b80      	subs	r0, r0, r6
 800540a:	6060      	str	r0, [r4, #4]
 800540c:	6863      	ldr	r3, [r4, #4]
 800540e:	6123      	str	r3, [r4, #16]
 8005410:	2300      	movs	r3, #0
 8005412:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005416:	e7aa      	b.n	800536e <_printf_i+0x146>
 8005418:	4632      	mov	r2, r6
 800541a:	4649      	mov	r1, r9
 800541c:	4640      	mov	r0, r8
 800541e:	6923      	ldr	r3, [r4, #16]
 8005420:	47d0      	blx	sl
 8005422:	3001      	adds	r0, #1
 8005424:	d0ad      	beq.n	8005382 <_printf_i+0x15a>
 8005426:	6823      	ldr	r3, [r4, #0]
 8005428:	079b      	lsls	r3, r3, #30
 800542a:	d413      	bmi.n	8005454 <_printf_i+0x22c>
 800542c:	68e0      	ldr	r0, [r4, #12]
 800542e:	9b03      	ldr	r3, [sp, #12]
 8005430:	4298      	cmp	r0, r3
 8005432:	bfb8      	it	lt
 8005434:	4618      	movlt	r0, r3
 8005436:	e7a6      	b.n	8005386 <_printf_i+0x15e>
 8005438:	2301      	movs	r3, #1
 800543a:	4632      	mov	r2, r6
 800543c:	4649      	mov	r1, r9
 800543e:	4640      	mov	r0, r8
 8005440:	47d0      	blx	sl
 8005442:	3001      	adds	r0, #1
 8005444:	d09d      	beq.n	8005382 <_printf_i+0x15a>
 8005446:	3501      	adds	r5, #1
 8005448:	68e3      	ldr	r3, [r4, #12]
 800544a:	9903      	ldr	r1, [sp, #12]
 800544c:	1a5b      	subs	r3, r3, r1
 800544e:	42ab      	cmp	r3, r5
 8005450:	dcf2      	bgt.n	8005438 <_printf_i+0x210>
 8005452:	e7eb      	b.n	800542c <_printf_i+0x204>
 8005454:	2500      	movs	r5, #0
 8005456:	f104 0619 	add.w	r6, r4, #25
 800545a:	e7f5      	b.n	8005448 <_printf_i+0x220>
 800545c:	08005697 	.word	0x08005697
 8005460:	080056a8 	.word	0x080056a8

08005464 <memmove>:
 8005464:	4288      	cmp	r0, r1
 8005466:	b510      	push	{r4, lr}
 8005468:	eb01 0402 	add.w	r4, r1, r2
 800546c:	d902      	bls.n	8005474 <memmove+0x10>
 800546e:	4284      	cmp	r4, r0
 8005470:	4623      	mov	r3, r4
 8005472:	d807      	bhi.n	8005484 <memmove+0x20>
 8005474:	1e43      	subs	r3, r0, #1
 8005476:	42a1      	cmp	r1, r4
 8005478:	d008      	beq.n	800548c <memmove+0x28>
 800547a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800547e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005482:	e7f8      	b.n	8005476 <memmove+0x12>
 8005484:	4601      	mov	r1, r0
 8005486:	4402      	add	r2, r0
 8005488:	428a      	cmp	r2, r1
 800548a:	d100      	bne.n	800548e <memmove+0x2a>
 800548c:	bd10      	pop	{r4, pc}
 800548e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005492:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005496:	e7f7      	b.n	8005488 <memmove+0x24>

08005498 <_sbrk_r>:
 8005498:	b538      	push	{r3, r4, r5, lr}
 800549a:	2300      	movs	r3, #0
 800549c:	4d05      	ldr	r5, [pc, #20]	@ (80054b4 <_sbrk_r+0x1c>)
 800549e:	4604      	mov	r4, r0
 80054a0:	4608      	mov	r0, r1
 80054a2:	602b      	str	r3, [r5, #0]
 80054a4:	f7fb ff8a 	bl	80013bc <_sbrk>
 80054a8:	1c43      	adds	r3, r0, #1
 80054aa:	d102      	bne.n	80054b2 <_sbrk_r+0x1a>
 80054ac:	682b      	ldr	r3, [r5, #0]
 80054ae:	b103      	cbz	r3, 80054b2 <_sbrk_r+0x1a>
 80054b0:	6023      	str	r3, [r4, #0]
 80054b2:	bd38      	pop	{r3, r4, r5, pc}
 80054b4:	2000031c 	.word	0x2000031c

080054b8 <memchr>:
 80054b8:	4603      	mov	r3, r0
 80054ba:	b510      	push	{r4, lr}
 80054bc:	b2c9      	uxtb	r1, r1
 80054be:	4402      	add	r2, r0
 80054c0:	4293      	cmp	r3, r2
 80054c2:	4618      	mov	r0, r3
 80054c4:	d101      	bne.n	80054ca <memchr+0x12>
 80054c6:	2000      	movs	r0, #0
 80054c8:	e003      	b.n	80054d2 <memchr+0x1a>
 80054ca:	7804      	ldrb	r4, [r0, #0]
 80054cc:	3301      	adds	r3, #1
 80054ce:	428c      	cmp	r4, r1
 80054d0:	d1f6      	bne.n	80054c0 <memchr+0x8>
 80054d2:	bd10      	pop	{r4, pc}

080054d4 <memcpy>:
 80054d4:	440a      	add	r2, r1
 80054d6:	4291      	cmp	r1, r2
 80054d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80054dc:	d100      	bne.n	80054e0 <memcpy+0xc>
 80054de:	4770      	bx	lr
 80054e0:	b510      	push	{r4, lr}
 80054e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054e6:	4291      	cmp	r1, r2
 80054e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054ec:	d1f9      	bne.n	80054e2 <memcpy+0xe>
 80054ee:	bd10      	pop	{r4, pc}

080054f0 <_realloc_r>:
 80054f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054f4:	4607      	mov	r7, r0
 80054f6:	4614      	mov	r4, r2
 80054f8:	460d      	mov	r5, r1
 80054fa:	b921      	cbnz	r1, 8005506 <_realloc_r+0x16>
 80054fc:	4611      	mov	r1, r2
 80054fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005502:	f7ff bc3b 	b.w	8004d7c <_malloc_r>
 8005506:	b92a      	cbnz	r2, 8005514 <_realloc_r+0x24>
 8005508:	f7ff fbce 	bl	8004ca8 <_free_r>
 800550c:	4625      	mov	r5, r4
 800550e:	4628      	mov	r0, r5
 8005510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005514:	f000 f81a 	bl	800554c <_malloc_usable_size_r>
 8005518:	4284      	cmp	r4, r0
 800551a:	4606      	mov	r6, r0
 800551c:	d802      	bhi.n	8005524 <_realloc_r+0x34>
 800551e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005522:	d8f4      	bhi.n	800550e <_realloc_r+0x1e>
 8005524:	4621      	mov	r1, r4
 8005526:	4638      	mov	r0, r7
 8005528:	f7ff fc28 	bl	8004d7c <_malloc_r>
 800552c:	4680      	mov	r8, r0
 800552e:	b908      	cbnz	r0, 8005534 <_realloc_r+0x44>
 8005530:	4645      	mov	r5, r8
 8005532:	e7ec      	b.n	800550e <_realloc_r+0x1e>
 8005534:	42b4      	cmp	r4, r6
 8005536:	4622      	mov	r2, r4
 8005538:	4629      	mov	r1, r5
 800553a:	bf28      	it	cs
 800553c:	4632      	movcs	r2, r6
 800553e:	f7ff ffc9 	bl	80054d4 <memcpy>
 8005542:	4629      	mov	r1, r5
 8005544:	4638      	mov	r0, r7
 8005546:	f7ff fbaf 	bl	8004ca8 <_free_r>
 800554a:	e7f1      	b.n	8005530 <_realloc_r+0x40>

0800554c <_malloc_usable_size_r>:
 800554c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005550:	1f18      	subs	r0, r3, #4
 8005552:	2b00      	cmp	r3, #0
 8005554:	bfbc      	itt	lt
 8005556:	580b      	ldrlt	r3, [r1, r0]
 8005558:	18c0      	addlt	r0, r0, r3
 800555a:	4770      	bx	lr

0800555c <_init>:
 800555c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800555e:	bf00      	nop
 8005560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005562:	bc08      	pop	{r3}
 8005564:	469e      	mov	lr, r3
 8005566:	4770      	bx	lr

08005568 <_fini>:
 8005568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800556a:	bf00      	nop
 800556c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800556e:	bc08      	pop	{r3}
 8005570:	469e      	mov	lr, r3
 8005572:	4770      	bx	lr
