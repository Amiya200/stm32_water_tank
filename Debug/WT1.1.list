
WT1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000831c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000072c  08008428  08008428  00009428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b54  08008b54  0000a0c0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008b54  08008b54  00009b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b5c  08008b5c  0000a0c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b5c  08008b5c  00009b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008b60  08008b60  00009b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c0  20000000  08008b64  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000474  200000c0  08008c24  0000a0c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000534  08008c24  0000a534  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a0c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000134ec  00000000  00000000  0000a0e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a52  00000000  00000000  0001d5d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b8  00000000  00000000  00021028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000da7  00000000  00000000  000221e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a505  00000000  00000000  00022f87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017d8f  00000000  00000000  0003d48c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e9a6  00000000  00000000  0005521b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e3bc1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005274  00000000  00000000  000e3c04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000e8e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000c0 	.word	0x200000c0
 8000128:	00000000 	.word	0x00000000
 800012c:	08008410 	.word	0x08008410

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000c4 	.word	0x200000c4
 8000148:	08008410 	.word	0x08008410

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <__aeabi_frsub>:
 8000170:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000174:	e002      	b.n	800017c <__addsf3>
 8000176:	bf00      	nop

08000178 <__aeabi_fsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800017c <__addsf3>:
 800017c:	0042      	lsls	r2, r0, #1
 800017e:	bf1f      	itttt	ne
 8000180:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000184:	ea92 0f03 	teqne	r2, r3
 8000188:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800018c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000190:	d06a      	beq.n	8000268 <__addsf3+0xec>
 8000192:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000196:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019a:	bfc1      	itttt	gt
 800019c:	18d2      	addgt	r2, r2, r3
 800019e:	4041      	eorgt	r1, r0
 80001a0:	4048      	eorgt	r0, r1
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	2b19      	cmp	r3, #25
 80001aa:	bf88      	it	hi
 80001ac:	4770      	bxhi	lr
 80001ae:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80001b2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001b6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4240      	negne	r0, r0
 80001be:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001c6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4249      	negne	r1, r1
 80001ce:	ea92 0f03 	teq	r2, r3
 80001d2:	d03f      	beq.n	8000254 <__addsf3+0xd8>
 80001d4:	f1a2 0201 	sub.w	r2, r2, #1
 80001d8:	fa41 fc03 	asr.w	ip, r1, r3
 80001dc:	eb10 000c 	adds.w	r0, r0, ip
 80001e0:	f1c3 0320 	rsb	r3, r3, #32
 80001e4:	fa01 f103 	lsl.w	r1, r1, r3
 80001e8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001ec:	d502      	bpl.n	80001f4 <__addsf3+0x78>
 80001ee:	4249      	negs	r1, r1
 80001f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001f8:	d313      	bcc.n	8000222 <__addsf3+0xa6>
 80001fa:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001fe:	d306      	bcc.n	800020e <__addsf3+0x92>
 8000200:	0840      	lsrs	r0, r0, #1
 8000202:	ea4f 0131 	mov.w	r1, r1, rrx
 8000206:	f102 0201 	add.w	r2, r2, #1
 800020a:	2afe      	cmp	r2, #254	@ 0xfe
 800020c:	d251      	bcs.n	80002b2 <__addsf3+0x136>
 800020e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000212:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000216:	bf08      	it	eq
 8000218:	f020 0001 	biceq.w	r0, r0, #1
 800021c:	ea40 0003 	orr.w	r0, r0, r3
 8000220:	4770      	bx	lr
 8000222:	0049      	lsls	r1, r1, #1
 8000224:	eb40 0000 	adc.w	r0, r0, r0
 8000228:	3a01      	subs	r2, #1
 800022a:	bf28      	it	cs
 800022c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000230:	d2ed      	bcs.n	800020e <__addsf3+0x92>
 8000232:	fab0 fc80 	clz	ip, r0
 8000236:	f1ac 0c08 	sub.w	ip, ip, #8
 800023a:	ebb2 020c 	subs.w	r2, r2, ip
 800023e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000242:	bfaa      	itet	ge
 8000244:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000248:	4252      	neglt	r2, r2
 800024a:	4318      	orrge	r0, r3
 800024c:	bfbc      	itt	lt
 800024e:	40d0      	lsrlt	r0, r2
 8000250:	4318      	orrlt	r0, r3
 8000252:	4770      	bx	lr
 8000254:	f092 0f00 	teq	r2, #0
 8000258:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800025c:	bf06      	itte	eq
 800025e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000262:	3201      	addeq	r2, #1
 8000264:	3b01      	subne	r3, #1
 8000266:	e7b5      	b.n	80001d4 <__addsf3+0x58>
 8000268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800026c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000270:	bf18      	it	ne
 8000272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000276:	d021      	beq.n	80002bc <__addsf3+0x140>
 8000278:	ea92 0f03 	teq	r2, r3
 800027c:	d004      	beq.n	8000288 <__addsf3+0x10c>
 800027e:	f092 0f00 	teq	r2, #0
 8000282:	bf08      	it	eq
 8000284:	4608      	moveq	r0, r1
 8000286:	4770      	bx	lr
 8000288:	ea90 0f01 	teq	r0, r1
 800028c:	bf1c      	itt	ne
 800028e:	2000      	movne	r0, #0
 8000290:	4770      	bxne	lr
 8000292:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000296:	d104      	bne.n	80002a2 <__addsf3+0x126>
 8000298:	0040      	lsls	r0, r0, #1
 800029a:	bf28      	it	cs
 800029c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80002a0:	4770      	bx	lr
 80002a2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80002a6:	bf3c      	itt	cc
 80002a8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80002ac:	4770      	bxcc	lr
 80002ae:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80002b2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ba:	4770      	bx	lr
 80002bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c0:	bf16      	itet	ne
 80002c2:	4608      	movne	r0, r1
 80002c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002c8:	4601      	movne	r1, r0
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	bf06      	itte	eq
 80002ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d2:	ea90 0f01 	teqeq	r0, r1
 80002d6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002da:	4770      	bx	lr

080002dc <__aeabi_ui2f>:
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	e004      	b.n	80002ec <__aeabi_i2f+0x8>
 80002e2:	bf00      	nop

080002e4 <__aeabi_i2f>:
 80002e4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002e8:	bf48      	it	mi
 80002ea:	4240      	negmi	r0, r0
 80002ec:	ea5f 0c00 	movs.w	ip, r0
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002f8:	4601      	mov	r1, r0
 80002fa:	f04f 0000 	mov.w	r0, #0
 80002fe:	e01c      	b.n	800033a <__aeabi_l2f+0x2a>

08000300 <__aeabi_ul2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	e00a      	b.n	8000324 <__aeabi_l2f+0x14>
 800030e:	bf00      	nop

08000310 <__aeabi_l2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800031c:	d502      	bpl.n	8000324 <__aeabi_l2f+0x14>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	ea5f 0c01 	movs.w	ip, r1
 8000328:	bf02      	ittt	eq
 800032a:	4684      	moveq	ip, r0
 800032c:	4601      	moveq	r1, r0
 800032e:	2000      	moveq	r0, #0
 8000330:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000334:	bf08      	it	eq
 8000336:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800033a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800033e:	fabc f28c 	clz	r2, ip
 8000342:	3a08      	subs	r2, #8
 8000344:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000348:	db10      	blt.n	800036c <__aeabi_l2f+0x5c>
 800034a:	fa01 fc02 	lsl.w	ip, r1, r2
 800034e:	4463      	add	r3, ip
 8000350:	fa00 fc02 	lsl.w	ip, r0, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800035c:	fa20 f202 	lsr.w	r2, r0, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	f020 0001 	biceq.w	r0, r0, #1
 800036a:	4770      	bx	lr
 800036c:	f102 0220 	add.w	r2, r2, #32
 8000370:	fa01 fc02 	lsl.w	ip, r1, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800037c:	fa21 f202 	lsr.w	r2, r1, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038a:	4770      	bx	lr

0800038c <__aeabi_fmul>:
 800038c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000390:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000394:	bf1e      	ittt	ne
 8000396:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039a:	ea92 0f0c 	teqne	r2, ip
 800039e:	ea93 0f0c 	teqne	r3, ip
 80003a2:	d06f      	beq.n	8000484 <__aeabi_fmul+0xf8>
 80003a4:	441a      	add	r2, r3
 80003a6:	ea80 0c01 	eor.w	ip, r0, r1
 80003aa:	0240      	lsls	r0, r0, #9
 80003ac:	bf18      	it	ne
 80003ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b2:	d01e      	beq.n	80003f2 <__aeabi_fmul+0x66>
 80003b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c0:	fba0 3101 	umull	r3, r1, r0, r1
 80003c4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003c8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003cc:	bf3e      	ittt	cc
 80003ce:	0049      	lslcc	r1, r1, #1
 80003d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d4:	005b      	lslcc	r3, r3, #1
 80003d6:	ea40 0001 	orr.w	r0, r0, r1
 80003da:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003de:	2afd      	cmp	r2, #253	@ 0xfd
 80003e0:	d81d      	bhi.n	800041e <__aeabi_fmul+0x92>
 80003e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ea:	bf08      	it	eq
 80003ec:	f020 0001 	biceq.w	r0, r0, #1
 80003f0:	4770      	bx	lr
 80003f2:	f090 0f00 	teq	r0, #0
 80003f6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003fa:	bf08      	it	eq
 80003fc:	0249      	lsleq	r1, r1, #9
 80003fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000402:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000406:	3a7f      	subs	r2, #127	@ 0x7f
 8000408:	bfc2      	ittt	gt
 800040a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800040e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000412:	4770      	bxgt	lr
 8000414:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	3a01      	subs	r2, #1
 800041e:	dc5d      	bgt.n	80004dc <__aeabi_fmul+0x150>
 8000420:	f112 0f19 	cmn.w	r2, #25
 8000424:	bfdc      	itt	le
 8000426:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800042a:	4770      	bxle	lr
 800042c:	f1c2 0200 	rsb	r2, r2, #0
 8000430:	0041      	lsls	r1, r0, #1
 8000432:	fa21 f102 	lsr.w	r1, r1, r2
 8000436:	f1c2 0220 	rsb	r2, r2, #32
 800043a:	fa00 fc02 	lsl.w	ip, r0, r2
 800043e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000442:	f140 0000 	adc.w	r0, r0, #0
 8000446:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044a:	bf08      	it	eq
 800044c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000450:	4770      	bx	lr
 8000452:	f092 0f00 	teq	r2, #0
 8000456:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800045a:	bf02      	ittt	eq
 800045c:	0040      	lsleq	r0, r0, #1
 800045e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000462:	3a01      	subeq	r2, #1
 8000464:	d0f9      	beq.n	800045a <__aeabi_fmul+0xce>
 8000466:	ea40 000c 	orr.w	r0, r0, ip
 800046a:	f093 0f00 	teq	r3, #0
 800046e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0049      	lsleq	r1, r1, #1
 8000476:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800047a:	3b01      	subeq	r3, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xe6>
 800047e:	ea41 010c 	orr.w	r1, r1, ip
 8000482:	e78f      	b.n	80003a4 <__aeabi_fmul+0x18>
 8000484:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000488:	ea92 0f0c 	teq	r2, ip
 800048c:	bf18      	it	ne
 800048e:	ea93 0f0c 	teqne	r3, ip
 8000492:	d00a      	beq.n	80004aa <__aeabi_fmul+0x11e>
 8000494:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000498:	bf18      	it	ne
 800049a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800049e:	d1d8      	bne.n	8000452 <__aeabi_fmul+0xc6>
 80004a0:	ea80 0001 	eor.w	r0, r0, r1
 80004a4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004a8:	4770      	bx	lr
 80004aa:	f090 0f00 	teq	r0, #0
 80004ae:	bf17      	itett	ne
 80004b0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004b4:	4608      	moveq	r0, r1
 80004b6:	f091 0f00 	teqne	r1, #0
 80004ba:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004be:	d014      	beq.n	80004ea <__aeabi_fmul+0x15e>
 80004c0:	ea92 0f0c 	teq	r2, ip
 80004c4:	d101      	bne.n	80004ca <__aeabi_fmul+0x13e>
 80004c6:	0242      	lsls	r2, r0, #9
 80004c8:	d10f      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004ca:	ea93 0f0c 	teq	r3, ip
 80004ce:	d103      	bne.n	80004d8 <__aeabi_fmul+0x14c>
 80004d0:	024b      	lsls	r3, r1, #9
 80004d2:	bf18      	it	ne
 80004d4:	4608      	movne	r0, r1
 80004d6:	d108      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004d8:	ea80 0001 	eor.w	r0, r0, r1
 80004dc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004e0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004e8:	4770      	bx	lr
 80004ea:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ee:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_fdiv>:
 80004f4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004fc:	bf1e      	ittt	ne
 80004fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000502:	ea92 0f0c 	teqne	r2, ip
 8000506:	ea93 0f0c 	teqne	r3, ip
 800050a:	d069      	beq.n	80005e0 <__aeabi_fdiv+0xec>
 800050c:	eba2 0203 	sub.w	r2, r2, r3
 8000510:	ea80 0c01 	eor.w	ip, r0, r1
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051a:	d037      	beq.n	800058c <__aeabi_fdiv+0x98>
 800051c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000520:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000524:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000528:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800052c:	428b      	cmp	r3, r1
 800052e:	bf38      	it	cc
 8000530:	005b      	lslcc	r3, r3, #1
 8000532:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000536:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800053a:	428b      	cmp	r3, r1
 800053c:	bf24      	itt	cs
 800053e:	1a5b      	subcs	r3, r3, r1
 8000540:	ea40 000c 	orrcs.w	r0, r0, ip
 8000544:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000548:	bf24      	itt	cs
 800054a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800054e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000552:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000556:	bf24      	itt	cs
 8000558:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800055c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000560:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000564:	bf24      	itt	cs
 8000566:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	bf18      	it	ne
 8000572:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000576:	d1e0      	bne.n	800053a <__aeabi_fdiv+0x46>
 8000578:	2afd      	cmp	r2, #253	@ 0xfd
 800057a:	f63f af50 	bhi.w	800041e <__aeabi_fmul+0x92>
 800057e:	428b      	cmp	r3, r1
 8000580:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000590:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000594:	327f      	adds	r2, #127	@ 0x7f
 8000596:	bfc2      	ittt	gt
 8000598:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800059c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a0:	4770      	bxgt	lr
 80005a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	3a01      	subs	r2, #1
 80005ac:	e737      	b.n	800041e <__aeabi_fmul+0x92>
 80005ae:	f092 0f00 	teq	r2, #0
 80005b2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005b6:	bf02      	ittt	eq
 80005b8:	0040      	lsleq	r0, r0, #1
 80005ba:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005be:	3a01      	subeq	r2, #1
 80005c0:	d0f9      	beq.n	80005b6 <__aeabi_fdiv+0xc2>
 80005c2:	ea40 000c 	orr.w	r0, r0, ip
 80005c6:	f093 0f00 	teq	r3, #0
 80005ca:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0049      	lsleq	r1, r1, #1
 80005d2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005d6:	3b01      	subeq	r3, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xda>
 80005da:	ea41 010c 	orr.w	r1, r1, ip
 80005de:	e795      	b.n	800050c <__aeabi_fdiv+0x18>
 80005e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e4:	ea92 0f0c 	teq	r2, ip
 80005e8:	d108      	bne.n	80005fc <__aeabi_fdiv+0x108>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	f47f af7d 	bne.w	80004ea <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	f47f af70 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e776      	b.n	80004ea <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	d104      	bne.n	800060c <__aeabi_fdiv+0x118>
 8000602:	024b      	lsls	r3, r1, #9
 8000604:	f43f af4c 	beq.w	80004a0 <__aeabi_fmul+0x114>
 8000608:	4608      	mov	r0, r1
 800060a:	e76e      	b.n	80004ea <__aeabi_fmul+0x15e>
 800060c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000610:	bf18      	it	ne
 8000612:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000616:	d1ca      	bne.n	80005ae <__aeabi_fdiv+0xba>
 8000618:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800061c:	f47f af5c 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 8000620:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000624:	f47f af3c 	bne.w	80004a0 <__aeabi_fmul+0x114>
 8000628:	e75f      	b.n	80004ea <__aeabi_fmul+0x15e>
 800062a:	bf00      	nop

0800062c <__gesf2>:
 800062c:	f04f 3cff 	mov.w	ip, #4294967295
 8000630:	e006      	b.n	8000640 <__cmpsf2+0x4>
 8000632:	bf00      	nop

08000634 <__lesf2>:
 8000634:	f04f 0c01 	mov.w	ip, #1
 8000638:	e002      	b.n	8000640 <__cmpsf2+0x4>
 800063a:	bf00      	nop

0800063c <__cmpsf2>:
 800063c:	f04f 0c01 	mov.w	ip, #1
 8000640:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000644:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000648:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800064c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000650:	bf18      	it	ne
 8000652:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000656:	d011      	beq.n	800067c <__cmpsf2+0x40>
 8000658:	b001      	add	sp, #4
 800065a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800065e:	bf18      	it	ne
 8000660:	ea90 0f01 	teqne	r0, r1
 8000664:	bf58      	it	pl
 8000666:	ebb2 0003 	subspl.w	r0, r2, r3
 800066a:	bf88      	it	hi
 800066c:	17c8      	asrhi	r0, r1, #31
 800066e:	bf38      	it	cc
 8000670:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000674:	bf18      	it	ne
 8000676:	f040 0001 	orrne.w	r0, r0, #1
 800067a:	4770      	bx	lr
 800067c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000680:	d102      	bne.n	8000688 <__cmpsf2+0x4c>
 8000682:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000686:	d105      	bne.n	8000694 <__cmpsf2+0x58>
 8000688:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800068c:	d1e4      	bne.n	8000658 <__cmpsf2+0x1c>
 800068e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000692:	d0e1      	beq.n	8000658 <__cmpsf2+0x1c>
 8000694:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <__aeabi_cfrcmple>:
 800069c:	4684      	mov	ip, r0
 800069e:	4608      	mov	r0, r1
 80006a0:	4661      	mov	r1, ip
 80006a2:	e7ff      	b.n	80006a4 <__aeabi_cfcmpeq>

080006a4 <__aeabi_cfcmpeq>:
 80006a4:	b50f      	push	{r0, r1, r2, r3, lr}
 80006a6:	f7ff ffc9 	bl	800063c <__cmpsf2>
 80006aa:	2800      	cmp	r0, #0
 80006ac:	bf48      	it	mi
 80006ae:	f110 0f00 	cmnmi.w	r0, #0
 80006b2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006b4 <__aeabi_fcmpeq>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff fff4 	bl	80006a4 <__aeabi_cfcmpeq>
 80006bc:	bf0c      	ite	eq
 80006be:	2001      	moveq	r0, #1
 80006c0:	2000      	movne	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmplt>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffea 	bl	80006a4 <__aeabi_cfcmpeq>
 80006d0:	bf34      	ite	cc
 80006d2:	2001      	movcc	r0, #1
 80006d4:	2000      	movcs	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmple>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffe0 	bl	80006a4 <__aeabi_cfcmpeq>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpge>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffd2 	bl	800069c <__aeabi_cfrcmple>
 80006f8:	bf94      	ite	ls
 80006fa:	2001      	movls	r0, #1
 80006fc:	2000      	movhi	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_fcmpgt>:
 8000704:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000708:	f7ff ffc8 	bl	800069c <__aeabi_cfrcmple>
 800070c:	bf34      	ite	cc
 800070e:	2001      	movcc	r0, #1
 8000710:	2000      	movcs	r0, #0
 8000712:	f85d fb08 	ldr.w	pc, [sp], #8
 8000716:	bf00      	nop

08000718 <__aeabi_uldivmod>:
 8000718:	b953      	cbnz	r3, 8000730 <__aeabi_uldivmod+0x18>
 800071a:	b94a      	cbnz	r2, 8000730 <__aeabi_uldivmod+0x18>
 800071c:	2900      	cmp	r1, #0
 800071e:	bf08      	it	eq
 8000720:	2800      	cmpeq	r0, #0
 8000722:	bf1c      	itt	ne
 8000724:	f04f 31ff 	movne.w	r1, #4294967295
 8000728:	f04f 30ff 	movne.w	r0, #4294967295
 800072c:	f000 b98c 	b.w	8000a48 <__aeabi_idiv0>
 8000730:	f1ad 0c08 	sub.w	ip, sp, #8
 8000734:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000738:	f000 f806 	bl	8000748 <__udivmoddi4>
 800073c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000740:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000744:	b004      	add	sp, #16
 8000746:	4770      	bx	lr

08000748 <__udivmoddi4>:
 8000748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800074c:	9d08      	ldr	r5, [sp, #32]
 800074e:	468e      	mov	lr, r1
 8000750:	4604      	mov	r4, r0
 8000752:	4688      	mov	r8, r1
 8000754:	2b00      	cmp	r3, #0
 8000756:	d14a      	bne.n	80007ee <__udivmoddi4+0xa6>
 8000758:	428a      	cmp	r2, r1
 800075a:	4617      	mov	r7, r2
 800075c:	d962      	bls.n	8000824 <__udivmoddi4+0xdc>
 800075e:	fab2 f682 	clz	r6, r2
 8000762:	b14e      	cbz	r6, 8000778 <__udivmoddi4+0x30>
 8000764:	f1c6 0320 	rsb	r3, r6, #32
 8000768:	fa01 f806 	lsl.w	r8, r1, r6
 800076c:	fa20 f303 	lsr.w	r3, r0, r3
 8000770:	40b7      	lsls	r7, r6
 8000772:	ea43 0808 	orr.w	r8, r3, r8
 8000776:	40b4      	lsls	r4, r6
 8000778:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800077c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000780:	fa1f fc87 	uxth.w	ip, r7
 8000784:	fb0e 8811 	mls	r8, lr, r1, r8
 8000788:	fb01 f20c 	mul.w	r2, r1, ip
 800078c:	0c23      	lsrs	r3, r4, #16
 800078e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000792:	429a      	cmp	r2, r3
 8000794:	d909      	bls.n	80007aa <__udivmoddi4+0x62>
 8000796:	18fb      	adds	r3, r7, r3
 8000798:	f101 30ff 	add.w	r0, r1, #4294967295
 800079c:	f080 80eb 	bcs.w	8000976 <__udivmoddi4+0x22e>
 80007a0:	429a      	cmp	r2, r3
 80007a2:	f240 80e8 	bls.w	8000976 <__udivmoddi4+0x22e>
 80007a6:	3902      	subs	r1, #2
 80007a8:	443b      	add	r3, r7
 80007aa:	1a9a      	subs	r2, r3, r2
 80007ac:	fbb2 f0fe 	udiv	r0, r2, lr
 80007b0:	fb0e 2210 	mls	r2, lr, r0, r2
 80007b4:	fb00 fc0c 	mul.w	ip, r0, ip
 80007b8:	b2a3      	uxth	r3, r4
 80007ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80007be:	459c      	cmp	ip, r3
 80007c0:	d909      	bls.n	80007d6 <__udivmoddi4+0x8e>
 80007c2:	18fb      	adds	r3, r7, r3
 80007c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80007c8:	f080 80d7 	bcs.w	800097a <__udivmoddi4+0x232>
 80007cc:	459c      	cmp	ip, r3
 80007ce:	f240 80d4 	bls.w	800097a <__udivmoddi4+0x232>
 80007d2:	443b      	add	r3, r7
 80007d4:	3802      	subs	r0, #2
 80007d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80007da:	2100      	movs	r1, #0
 80007dc:	eba3 030c 	sub.w	r3, r3, ip
 80007e0:	b11d      	cbz	r5, 80007ea <__udivmoddi4+0xa2>
 80007e2:	2200      	movs	r2, #0
 80007e4:	40f3      	lsrs	r3, r6
 80007e6:	e9c5 3200 	strd	r3, r2, [r5]
 80007ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ee:	428b      	cmp	r3, r1
 80007f0:	d905      	bls.n	80007fe <__udivmoddi4+0xb6>
 80007f2:	b10d      	cbz	r5, 80007f8 <__udivmoddi4+0xb0>
 80007f4:	e9c5 0100 	strd	r0, r1, [r5]
 80007f8:	2100      	movs	r1, #0
 80007fa:	4608      	mov	r0, r1
 80007fc:	e7f5      	b.n	80007ea <__udivmoddi4+0xa2>
 80007fe:	fab3 f183 	clz	r1, r3
 8000802:	2900      	cmp	r1, #0
 8000804:	d146      	bne.n	8000894 <__udivmoddi4+0x14c>
 8000806:	4573      	cmp	r3, lr
 8000808:	d302      	bcc.n	8000810 <__udivmoddi4+0xc8>
 800080a:	4282      	cmp	r2, r0
 800080c:	f200 8108 	bhi.w	8000a20 <__udivmoddi4+0x2d8>
 8000810:	1a84      	subs	r4, r0, r2
 8000812:	eb6e 0203 	sbc.w	r2, lr, r3
 8000816:	2001      	movs	r0, #1
 8000818:	4690      	mov	r8, r2
 800081a:	2d00      	cmp	r5, #0
 800081c:	d0e5      	beq.n	80007ea <__udivmoddi4+0xa2>
 800081e:	e9c5 4800 	strd	r4, r8, [r5]
 8000822:	e7e2      	b.n	80007ea <__udivmoddi4+0xa2>
 8000824:	2a00      	cmp	r2, #0
 8000826:	f000 8091 	beq.w	800094c <__udivmoddi4+0x204>
 800082a:	fab2 f682 	clz	r6, r2
 800082e:	2e00      	cmp	r6, #0
 8000830:	f040 80a5 	bne.w	800097e <__udivmoddi4+0x236>
 8000834:	1a8a      	subs	r2, r1, r2
 8000836:	2101      	movs	r1, #1
 8000838:	0c03      	lsrs	r3, r0, #16
 800083a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800083e:	b280      	uxth	r0, r0
 8000840:	b2bc      	uxth	r4, r7
 8000842:	fbb2 fcfe 	udiv	ip, r2, lr
 8000846:	fb0e 221c 	mls	r2, lr, ip, r2
 800084a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800084e:	fb04 f20c 	mul.w	r2, r4, ip
 8000852:	429a      	cmp	r2, r3
 8000854:	d907      	bls.n	8000866 <__udivmoddi4+0x11e>
 8000856:	18fb      	adds	r3, r7, r3
 8000858:	f10c 38ff 	add.w	r8, ip, #4294967295
 800085c:	d202      	bcs.n	8000864 <__udivmoddi4+0x11c>
 800085e:	429a      	cmp	r2, r3
 8000860:	f200 80e3 	bhi.w	8000a2a <__udivmoddi4+0x2e2>
 8000864:	46c4      	mov	ip, r8
 8000866:	1a9b      	subs	r3, r3, r2
 8000868:	fbb3 f2fe 	udiv	r2, r3, lr
 800086c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000870:	fb02 f404 	mul.w	r4, r2, r4
 8000874:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000878:	429c      	cmp	r4, r3
 800087a:	d907      	bls.n	800088c <__udivmoddi4+0x144>
 800087c:	18fb      	adds	r3, r7, r3
 800087e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000882:	d202      	bcs.n	800088a <__udivmoddi4+0x142>
 8000884:	429c      	cmp	r4, r3
 8000886:	f200 80cd 	bhi.w	8000a24 <__udivmoddi4+0x2dc>
 800088a:	4602      	mov	r2, r0
 800088c:	1b1b      	subs	r3, r3, r4
 800088e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000892:	e7a5      	b.n	80007e0 <__udivmoddi4+0x98>
 8000894:	f1c1 0620 	rsb	r6, r1, #32
 8000898:	408b      	lsls	r3, r1
 800089a:	fa22 f706 	lsr.w	r7, r2, r6
 800089e:	431f      	orrs	r7, r3
 80008a0:	fa2e fa06 	lsr.w	sl, lr, r6
 80008a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80008a8:	fbba f8f9 	udiv	r8, sl, r9
 80008ac:	fa0e fe01 	lsl.w	lr, lr, r1
 80008b0:	fa20 f306 	lsr.w	r3, r0, r6
 80008b4:	fb09 aa18 	mls	sl, r9, r8, sl
 80008b8:	fa1f fc87 	uxth.w	ip, r7
 80008bc:	ea43 030e 	orr.w	r3, r3, lr
 80008c0:	fa00 fe01 	lsl.w	lr, r0, r1
 80008c4:	fb08 f00c 	mul.w	r0, r8, ip
 80008c8:	0c1c      	lsrs	r4, r3, #16
 80008ca:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80008ce:	42a0      	cmp	r0, r4
 80008d0:	fa02 f201 	lsl.w	r2, r2, r1
 80008d4:	d90a      	bls.n	80008ec <__udivmoddi4+0x1a4>
 80008d6:	193c      	adds	r4, r7, r4
 80008d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80008dc:	f080 809e 	bcs.w	8000a1c <__udivmoddi4+0x2d4>
 80008e0:	42a0      	cmp	r0, r4
 80008e2:	f240 809b 	bls.w	8000a1c <__udivmoddi4+0x2d4>
 80008e6:	f1a8 0802 	sub.w	r8, r8, #2
 80008ea:	443c      	add	r4, r7
 80008ec:	1a24      	subs	r4, r4, r0
 80008ee:	b298      	uxth	r0, r3
 80008f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80008f4:	fb09 4413 	mls	r4, r9, r3, r4
 80008f8:	fb03 fc0c 	mul.w	ip, r3, ip
 80008fc:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000900:	45a4      	cmp	ip, r4
 8000902:	d909      	bls.n	8000918 <__udivmoddi4+0x1d0>
 8000904:	193c      	adds	r4, r7, r4
 8000906:	f103 30ff 	add.w	r0, r3, #4294967295
 800090a:	f080 8085 	bcs.w	8000a18 <__udivmoddi4+0x2d0>
 800090e:	45a4      	cmp	ip, r4
 8000910:	f240 8082 	bls.w	8000a18 <__udivmoddi4+0x2d0>
 8000914:	3b02      	subs	r3, #2
 8000916:	443c      	add	r4, r7
 8000918:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800091c:	eba4 040c 	sub.w	r4, r4, ip
 8000920:	fba0 8c02 	umull	r8, ip, r0, r2
 8000924:	4564      	cmp	r4, ip
 8000926:	4643      	mov	r3, r8
 8000928:	46e1      	mov	r9, ip
 800092a:	d364      	bcc.n	80009f6 <__udivmoddi4+0x2ae>
 800092c:	d061      	beq.n	80009f2 <__udivmoddi4+0x2aa>
 800092e:	b15d      	cbz	r5, 8000948 <__udivmoddi4+0x200>
 8000930:	ebbe 0203 	subs.w	r2, lr, r3
 8000934:	eb64 0409 	sbc.w	r4, r4, r9
 8000938:	fa04 f606 	lsl.w	r6, r4, r6
 800093c:	fa22 f301 	lsr.w	r3, r2, r1
 8000940:	431e      	orrs	r6, r3
 8000942:	40cc      	lsrs	r4, r1
 8000944:	e9c5 6400 	strd	r6, r4, [r5]
 8000948:	2100      	movs	r1, #0
 800094a:	e74e      	b.n	80007ea <__udivmoddi4+0xa2>
 800094c:	fbb1 fcf2 	udiv	ip, r1, r2
 8000950:	0c01      	lsrs	r1, r0, #16
 8000952:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000956:	b280      	uxth	r0, r0
 8000958:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800095c:	463b      	mov	r3, r7
 800095e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000962:	4638      	mov	r0, r7
 8000964:	463c      	mov	r4, r7
 8000966:	46b8      	mov	r8, r7
 8000968:	46be      	mov	lr, r7
 800096a:	2620      	movs	r6, #32
 800096c:	eba2 0208 	sub.w	r2, r2, r8
 8000970:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000974:	e765      	b.n	8000842 <__udivmoddi4+0xfa>
 8000976:	4601      	mov	r1, r0
 8000978:	e717      	b.n	80007aa <__udivmoddi4+0x62>
 800097a:	4610      	mov	r0, r2
 800097c:	e72b      	b.n	80007d6 <__udivmoddi4+0x8e>
 800097e:	f1c6 0120 	rsb	r1, r6, #32
 8000982:	fa2e fc01 	lsr.w	ip, lr, r1
 8000986:	40b7      	lsls	r7, r6
 8000988:	fa0e fe06 	lsl.w	lr, lr, r6
 800098c:	fa20 f101 	lsr.w	r1, r0, r1
 8000990:	ea41 010e 	orr.w	r1, r1, lr
 8000994:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000998:	fbbc f8fe 	udiv	r8, ip, lr
 800099c:	b2bc      	uxth	r4, r7
 800099e:	fb0e cc18 	mls	ip, lr, r8, ip
 80009a2:	fb08 f904 	mul.w	r9, r8, r4
 80009a6:	0c0a      	lsrs	r2, r1, #16
 80009a8:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80009ac:	40b0      	lsls	r0, r6
 80009ae:	4591      	cmp	r9, r2
 80009b0:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80009b4:	b280      	uxth	r0, r0
 80009b6:	d93e      	bls.n	8000a36 <__udivmoddi4+0x2ee>
 80009b8:	18ba      	adds	r2, r7, r2
 80009ba:	f108 3cff 	add.w	ip, r8, #4294967295
 80009be:	d201      	bcs.n	80009c4 <__udivmoddi4+0x27c>
 80009c0:	4591      	cmp	r9, r2
 80009c2:	d81f      	bhi.n	8000a04 <__udivmoddi4+0x2bc>
 80009c4:	eba2 0209 	sub.w	r2, r2, r9
 80009c8:	fbb2 f9fe 	udiv	r9, r2, lr
 80009cc:	fb09 f804 	mul.w	r8, r9, r4
 80009d0:	fb0e 2a19 	mls	sl, lr, r9, r2
 80009d4:	b28a      	uxth	r2, r1
 80009d6:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 80009da:	4542      	cmp	r2, r8
 80009dc:	d229      	bcs.n	8000a32 <__udivmoddi4+0x2ea>
 80009de:	18ba      	adds	r2, r7, r2
 80009e0:	f109 31ff 	add.w	r1, r9, #4294967295
 80009e4:	d2c2      	bcs.n	800096c <__udivmoddi4+0x224>
 80009e6:	4542      	cmp	r2, r8
 80009e8:	d2c0      	bcs.n	800096c <__udivmoddi4+0x224>
 80009ea:	f1a9 0102 	sub.w	r1, r9, #2
 80009ee:	443a      	add	r2, r7
 80009f0:	e7bc      	b.n	800096c <__udivmoddi4+0x224>
 80009f2:	45c6      	cmp	lr, r8
 80009f4:	d29b      	bcs.n	800092e <__udivmoddi4+0x1e6>
 80009f6:	ebb8 0302 	subs.w	r3, r8, r2
 80009fa:	eb6c 0c07 	sbc.w	ip, ip, r7
 80009fe:	3801      	subs	r0, #1
 8000a00:	46e1      	mov	r9, ip
 8000a02:	e794      	b.n	800092e <__udivmoddi4+0x1e6>
 8000a04:	eba7 0909 	sub.w	r9, r7, r9
 8000a08:	444a      	add	r2, r9
 8000a0a:	fbb2 f9fe 	udiv	r9, r2, lr
 8000a0e:	f1a8 0c02 	sub.w	ip, r8, #2
 8000a12:	fb09 f804 	mul.w	r8, r9, r4
 8000a16:	e7db      	b.n	80009d0 <__udivmoddi4+0x288>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	e77d      	b.n	8000918 <__udivmoddi4+0x1d0>
 8000a1c:	46d0      	mov	r8, sl
 8000a1e:	e765      	b.n	80008ec <__udivmoddi4+0x1a4>
 8000a20:	4608      	mov	r0, r1
 8000a22:	e6fa      	b.n	800081a <__udivmoddi4+0xd2>
 8000a24:	443b      	add	r3, r7
 8000a26:	3a02      	subs	r2, #2
 8000a28:	e730      	b.n	800088c <__udivmoddi4+0x144>
 8000a2a:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a2e:	443b      	add	r3, r7
 8000a30:	e719      	b.n	8000866 <__udivmoddi4+0x11e>
 8000a32:	4649      	mov	r1, r9
 8000a34:	e79a      	b.n	800096c <__udivmoddi4+0x224>
 8000a36:	eba2 0209 	sub.w	r2, r2, r9
 8000a3a:	fbb2 f9fe 	udiv	r9, r2, lr
 8000a3e:	46c4      	mov	ip, r8
 8000a40:	fb09 f804 	mul.w	r8, r9, r4
 8000a44:	e7c4      	b.n	80009d0 <__udivmoddi4+0x288>
 8000a46:	bf00      	nop

08000a48 <__aeabi_idiv0>:
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <ADC_Init>:
/**
  * @brief Initializes the ADC hardware
  * @param hadc: Pointer to ADC handle
  */
void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
    // Calibration
    if (HAL_ADCEx_Calibration_Start(hadc) != HAL_OK)
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	f003 f993 	bl	8003d80 <HAL_ADCEx_Calibration_Start>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <ADC_Init+0x18>
    {
        Error_Handler();
 8000a60:	f001 f998 	bl	8001d94 <Error_Handler>
    }
}
 8000a64:	bf00      	nop
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <ADC_ReadAllChannels>:
  * @brief Reads all ADC channels and transmits UART messages if thresholds are met.
  * @param hadc: Pointer to ADC handle
  * @param data: Pointer to ADC_Data struct to store results
  */
void ADC_ReadAllChannels(ADC_HandleTypeDef* hadc, ADC_Data* data)
{
 8000a6c:	b590      	push	{r4, r7, lr}
 8000a6e:	b08b      	sub	sp, #44	@ 0x2c
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	6039      	str	r1, [r7, #0]
    ADC_ChannelConfTypeDef sConfig = {0};
 8000a76:	f107 030c 	add.w	r3, r7, #12
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
    sConfig.Rank = 1;
 8000a82:	2301      	movs	r3, #1
 8000a84:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000a86:	2306      	movs	r3, #6
 8000a88:	617b      	str	r3, [r7, #20]

    // Define the voltage threshold for UART transmission
    const float UART_TRANSMIT_THRESHOLD = 3.0f; // Proper 3V or above
 8000a8a:	4b88      	ldr	r3, [pc, #544]	@ (8000cac <ADC_ReadAllChannels+0x240>)
 8000a8c:	623b      	str	r3, [r7, #32]
    const float DRY_RUN_THRESHOLD = .0f; // Threshold for dry run detection
 8000a8e:	f04f 0300 	mov.w	r3, #0
 8000a92:	61fb      	str	r3, [r7, #28]
    const float GROUND_THRESHOLD = 0.1f; // Threshold to consider as ground (0V)
 8000a94:	4b86      	ldr	r3, [pc, #536]	@ (8000cb0 <ADC_ReadAllChannels+0x244>)
 8000a96:	61bb      	str	r3, [r7, #24]

    for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++)
 8000a98:	2300      	movs	r3, #0
 8000a9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000a9e:	e0fb      	b.n	8000c98 <ADC_ReadAllChannels+0x22c>
    {
        // Configure channel
        sConfig.Channel = adcChannels[i];
 8000aa0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000aa4:	4a83      	ldr	r2, [pc, #524]	@ (8000cb4 <ADC_ReadAllChannels+0x248>)
 8000aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aaa:	60fb      	str	r3, [r7, #12]
        HAL_ADC_ConfigChannel(hadc, &sConfig);
 8000aac:	f107 030c 	add.w	r3, r7, #12
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f002 ffd0 	bl	8003a58 <HAL_ADC_ConfigChannel>

        // Start conversion
        HAL_ADC_Start(hadc);
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f002 fe0d 	bl	80036d8 <HAL_ADC_Start>
        if (HAL_ADC_PollForConversion(hadc, 10) == HAL_OK)
 8000abe:	210a      	movs	r1, #10
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f002 feb7 	bl	8003834 <HAL_ADC_PollForConversion>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	f040 80c9 	bne.w	8000c60 <ADC_ReadAllChannels+0x1f4>
        {
            data->rawValues[i] = HAL_ADC_GetValue(hadc);
 8000ace:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f002 ffb4 	bl	8003a40 <HAL_ADC_GetValue>
 8000ad8:	4602      	mov	r2, r0
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
            data->voltages[i] = (data->rawValues[i] * 3.3f) / 4095.0f;
 8000ae0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fbf6 	bl	80002dc <__aeabi_ui2f>
 8000af0:	4603      	mov	r3, r0
 8000af2:	4971      	ldr	r1, [pc, #452]	@ (8000cb8 <ADC_ReadAllChannels+0x24c>)
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff fc49 	bl	800038c <__aeabi_fmul>
 8000afa:	4603      	mov	r3, r0
 8000afc:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 8000b00:	496e      	ldr	r1, [pc, #440]	@ (8000cbc <ADC_ReadAllChannels+0x250>)
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff fcf6 	bl	80004f4 <__aeabi_fdiv>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	1da2      	adds	r2, r4, #6
 8000b10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            data->maxReached[i] = (data->voltages[i] >= 3.2f) ? 1 : 0; // Original 3.2V threshold for maxReached flag
 8000b14:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	3206      	adds	r2, #6
 8000b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b20:	2201      	movs	r2, #1
 8000b22:	4614      	mov	r4, r2
 8000b24:	4966      	ldr	r1, [pc, #408]	@ (8000cc0 <ADC_ReadAllChannels+0x254>)
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff fde2 	bl	80006f0 <__aeabi_fcmpge>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d101      	bne.n	8000b36 <ADC_ReadAllChannels+0xca>
 8000b32:	2300      	movs	r3, #0
 8000b34:	461c      	mov	r4, r3
 8000b36:	b2e2      	uxtb	r2, r4
 8000b38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000b3c:	4611      	mov	r1, r2
 8000b3e:	683a      	ldr	r2, [r7, #0]
 8000b40:	4413      	add	r3, r2
 8000b42:	460a      	mov	r2, r1
 8000b44:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

            // Check if the voltage is close to ground
            if (data->voltages[i] < GROUND_THRESHOLD)
 8000b48:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	3206      	adds	r2, #6
 8000b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b54:	4619      	mov	r1, r3
 8000b56:	69b8      	ldr	r0, [r7, #24]
 8000b58:	f7ff fdd4 	bl	8000704 <__aeabi_fcmpgt>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d00d      	beq.n	8000b7e <ADC_ReadAllChannels+0x112>
            {
                data->rawValues[i] = 0; // Set raw value to 0
 8000b62:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	2100      	movs	r1, #0
 8000b6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                data->voltages[i] = 0.0f; // Set voltage to 0.0V
 8000b6e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	3206      	adds	r2, #6
 8000b76:	f04f 0100 	mov.w	r1, #0
 8000b7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            }

            // Check voltage for UART transmission
            if (data->voltages[i] >= UART_TRANSMIT_THRESHOLD)
 8000b7e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	3206      	adds	r2, #6
 8000b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	6a38      	ldr	r0, [r7, #32]
 8000b8e:	f7ff fda5 	bl	80006dc <__aeabi_fcmple>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d04d      	beq.n	8000c34 <ADC_ReadAllChannels+0x1c8>
            {
                switch (i)
 8000b98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000b9c:	2b04      	cmp	r3, #4
 8000b9e:	d875      	bhi.n	8000c8c <ADC_ReadAllChannels+0x220>
 8000ba0:	a201      	add	r2, pc, #4	@ (adr r2, 8000ba8 <ADC_ReadAllChannels+0x13c>)
 8000ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ba6:	bf00      	nop
 8000ba8:	08000bbd 	.word	0x08000bbd
 8000bac:	08000bd5 	.word	0x08000bd5
 8000bb0:	08000bed 	.word	0x08000bed
 8000bb4:	08000c05 	.word	0x08000c05
 8000bb8:	08000c1d 	.word	0x08000c1d
                {
                    case 0: // IN0
                        sprintf(dataPacketTx, "@10W#"); // Use sprintf to format the string
 8000bbc:	4941      	ldr	r1, [pc, #260]	@ (8000cc4 <ADC_ReadAllChannels+0x258>)
 8000bbe:	4842      	ldr	r0, [pc, #264]	@ (8000cc8 <ADC_ReadAllChannels+0x25c>)
 8000bc0:	f006 fb26 	bl	8007210 <siprintf>
                        UART_TransmitString(&huart1, dataPacketTx);
 8000bc4:	4940      	ldr	r1, [pc, #256]	@ (8000cc8 <ADC_ReadAllChannels+0x25c>)
 8000bc6:	4841      	ldr	r0, [pc, #260]	@ (8000ccc <ADC_ReadAllChannels+0x260>)
 8000bc8:	f002 fbac 	bl	8003324 <UART_TransmitString>
                        motorStatus = 1; // Motor is on
 8000bcc:	4b40      	ldr	r3, [pc, #256]	@ (8000cd0 <ADC_ReadAllChannels+0x264>)
 8000bce:	2201      	movs	r2, #1
 8000bd0:	701a      	strb	r2, [r3, #0]
                        break;
 8000bd2:	e05c      	b.n	8000c8e <ADC_ReadAllChannels+0x222>
                    case 1: // IN1
                        sprintf(dataPacketTx, "@30W#");
 8000bd4:	493f      	ldr	r1, [pc, #252]	@ (8000cd4 <ADC_ReadAllChannels+0x268>)
 8000bd6:	483c      	ldr	r0, [pc, #240]	@ (8000cc8 <ADC_ReadAllChannels+0x25c>)
 8000bd8:	f006 fb1a 	bl	8007210 <siprintf>
                        UART_TransmitString(&huart1, dataPacketTx);
 8000bdc:	493a      	ldr	r1, [pc, #232]	@ (8000cc8 <ADC_ReadAllChannels+0x25c>)
 8000bde:	483b      	ldr	r0, [pc, #236]	@ (8000ccc <ADC_ReadAllChannels+0x260>)
 8000be0:	f002 fba0 	bl	8003324 <UART_TransmitString>
                        motorStatus = 1; // Motor is on
 8000be4:	4b3a      	ldr	r3, [pc, #232]	@ (8000cd0 <ADC_ReadAllChannels+0x264>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	701a      	strb	r2, [r3, #0]
                        break;
 8000bea:	e050      	b.n	8000c8e <ADC_ReadAllChannels+0x222>
                    case 2: // IN2
                        sprintf(dataPacketTx, "@70W#");
 8000bec:	493a      	ldr	r1, [pc, #232]	@ (8000cd8 <ADC_ReadAllChannels+0x26c>)
 8000bee:	4836      	ldr	r0, [pc, #216]	@ (8000cc8 <ADC_ReadAllChannels+0x25c>)
 8000bf0:	f006 fb0e 	bl	8007210 <siprintf>
                        UART_TransmitString(&huart1, dataPacketTx);
 8000bf4:	4934      	ldr	r1, [pc, #208]	@ (8000cc8 <ADC_ReadAllChannels+0x25c>)
 8000bf6:	4835      	ldr	r0, [pc, #212]	@ (8000ccc <ADC_ReadAllChannels+0x260>)
 8000bf8:	f002 fb94 	bl	8003324 <UART_TransmitString>
                        motorStatus = 1; // Motor is on
 8000bfc:	4b34      	ldr	r3, [pc, #208]	@ (8000cd0 <ADC_ReadAllChannels+0x264>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	701a      	strb	r2, [r3, #0]
                        break;
 8000c02:	e044      	b.n	8000c8e <ADC_ReadAllChannels+0x222>
                    case 3: // IN3
                        sprintf(dataPacketTx, "@1:W#");
 8000c04:	4935      	ldr	r1, [pc, #212]	@ (8000cdc <ADC_ReadAllChannels+0x270>)
 8000c06:	4830      	ldr	r0, [pc, #192]	@ (8000cc8 <ADC_ReadAllChannels+0x25c>)
 8000c08:	f006 fb02 	bl	8007210 <siprintf>
                        UART_TransmitString(&huart1, dataPacketTx);
 8000c0c:	492e      	ldr	r1, [pc, #184]	@ (8000cc8 <ADC_ReadAllChannels+0x25c>)
 8000c0e:	482f      	ldr	r0, [pc, #188]	@ (8000ccc <ADC_ReadAllChannels+0x260>)
 8000c10:	f002 fb88 	bl	8003324 <UART_TransmitString>
                        motorStatus = 1; // Motor is on
 8000c14:	4b2e      	ldr	r3, [pc, #184]	@ (8000cd0 <ADC_ReadAllChannels+0x264>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	701a      	strb	r2, [r3, #0]
                        break;
 8000c1a:	e038      	b.n	8000c8e <ADC_ReadAllChannels+0x222>
                    case 4: // IN4
                        sprintf(dataPacketTx, "@DRY#");
 8000c1c:	4930      	ldr	r1, [pc, #192]	@ (8000ce0 <ADC_ReadAllChannels+0x274>)
 8000c1e:	482a      	ldr	r0, [pc, #168]	@ (8000cc8 <ADC_ReadAllChannels+0x25c>)
 8000c20:	f006 faf6 	bl	8007210 <siprintf>
                        UART_TransmitString(&huart1, dataPacketTx);
 8000c24:	4928      	ldr	r1, [pc, #160]	@ (8000cc8 <ADC_ReadAllChannels+0x25c>)
 8000c26:	4829      	ldr	r0, [pc, #164]	@ (8000ccc <ADC_ReadAllChannels+0x260>)
 8000c28:	f002 fb7c 	bl	8003324 <UART_TransmitString>
                        motorStatus = 1; // Set motor status to on for dry run
 8000c2c:	4b28      	ldr	r3, [pc, #160]	@ (8000cd0 <ADC_ReadAllChannels+0x264>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	701a      	strb	r2, [r3, #0]
                        break;
 8000c32:	e02c      	b.n	8000c8e <ADC_ReadAllChannels+0x222>
                    // Cases for IN5 are not specified for UART transmission
                    default:
                        break;
                }
            }
            else if (data->voltages[i] < DRY_RUN_THRESHOLD && motorStatus == 1)
 8000c34:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	3206      	adds	r2, #6
 8000c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c40:	4619      	mov	r1, r3
 8000c42:	69f8      	ldr	r0, [r7, #28]
 8000c44:	f7ff fd5e 	bl	8000704 <__aeabi_fcmpgt>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d01f      	beq.n	8000c8e <ADC_ReadAllChannels+0x222>
 8000c4e:	4b20      	ldr	r3, [pc, #128]	@ (8000cd0 <ADC_ReadAllChannels+0x264>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d11a      	bne.n	8000c8e <ADC_ReadAllChannels+0x222>
            {
                // If the voltage is below the dry run threshold and the motor is on
                // This part was commented out in the original, keeping it commented for consistency
                // sprintf(dataPacketTx, "@MT0#");
                // UART_TransmitString(&huart1, dataPacketTx);
                motorStatus = 0; // Set motor status to off
 8000c58:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd0 <ADC_ReadAllChannels+0x264>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	701a      	strb	r2, [r3, #0]
 8000c5e:	e016      	b.n	8000c8e <ADC_ReadAllChannels+0x222>
        }
        else
        {
            // Handle ADC conversion timeout or error if necessary
            // For simplicity, we'll just set values to 0 on error
            data->rawValues[i] = 0;
 8000c60:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	2100      	movs	r1, #0
 8000c68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            data->voltages[i] = 0.0f;
 8000c6c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	3206      	adds	r2, #6
 8000c74:	f04f 0100 	mov.w	r1, #0
 8000c78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            data->maxReached[i] = 0;
 8000c7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000c80:	683a      	ldr	r2, [r7, #0]
 8000c82:	4413      	add	r3, r2
 8000c84:	2200      	movs	r2, #0
 8000c86:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8000c8a:	e000      	b.n	8000c8e <ADC_ReadAllChannels+0x222>
                        break;
 8000c8c:	bf00      	nop
    for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++)
 8000c8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000c92:	3301      	adds	r3, #1
 8000c94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000c98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000c9c:	2b05      	cmp	r3, #5
 8000c9e:	f67f aeff 	bls.w	8000aa0 <ADC_ReadAllChannels+0x34>
        }
    }
}
 8000ca2:	bf00      	nop
 8000ca4:	bf00      	nop
 8000ca6:	372c      	adds	r7, #44	@ 0x2c
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd90      	pop	{r4, r7, pc}
 8000cac:	40400000 	.word	0x40400000
 8000cb0:	3dcccccd 	.word	0x3dcccccd
 8000cb4:	0800896c 	.word	0x0800896c
 8000cb8:	40533333 	.word	0x40533333
 8000cbc:	457ff000 	.word	0x457ff000
 8000cc0:	404ccccd 	.word	0x404ccccd
 8000cc4:	08008428 	.word	0x08008428
 8000cc8:	200000dc 	.word	0x200000dc
 8000ccc:	20000220 	.word	0x20000220
 8000cd0:	200002e0 	.word	0x200002e0
 8000cd4:	08008430 	.word	0x08008430
 8000cd8:	08008438 	.word	0x08008438
 8000cdc:	08008440 	.word	0x08008440
 8000ce0:	08008448 	.word	0x08008448

08000ce4 <map_nibble_ctrl>:
   Build a PCF8574 byte from a 4-bit data nibble and RS/EN flags according to LCD_PINMAP.
*/

static inline uint8_t map_nibble_ctrl(uint8_t nibble /*D7..D4 or D4..D7 per map*/,
                                      uint8_t rs, uint8_t en, uint8_t bl_on)
{
 8000ce4:	b490      	push	{r4, r7}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4604      	mov	r4, r0
 8000cec:	4608      	mov	r0, r1
 8000cee:	4611      	mov	r1, r2
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4623      	mov	r3, r4
 8000cf4:	71fb      	strb	r3, [r7, #7]
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71bb      	strb	r3, [r7, #6]
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	717b      	strb	r3, [r7, #5]
 8000cfe:	4613      	mov	r3, r2
 8000d00:	713b      	strb	r3, [r7, #4]
#if (LCD_PINMAP == LCD_PINMAP_A)
    /* Map A: D7..D4 -> P7..P4, EN=P2, RW=P1(0), RS=P0, BL=P3
       Byte: [D7 D6 D5 D4 BL EN RW RS] */
    uint8_t b = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	73fb      	strb	r3, [r7, #15]
    b |= (nibble & 0xF0);           // D7..D4 already in high nibble
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	f023 030f 	bic.w	r3, r3, #15
 8000d0e:	b25a      	sxtb	r2, r3
 8000d10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	b25b      	sxtb	r3, r3
 8000d18:	73fb      	strb	r3, [r7, #15]
    b |= (bl_on ? 0x08 : 0x00);     // BL=P3
 8000d1a:	793b      	ldrb	r3, [r7, #4]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <map_nibble_ctrl+0x40>
 8000d20:	2208      	movs	r2, #8
 8000d22:	e000      	b.n	8000d26 <map_nibble_ctrl+0x42>
 8000d24:	2200      	movs	r2, #0
 8000d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	b25b      	sxtb	r3, r3
 8000d2e:	73fb      	strb	r3, [r7, #15]
    b |= (en ? 0x04 : 0x00);        // EN=P2
 8000d30:	797b      	ldrb	r3, [r7, #5]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <map_nibble_ctrl+0x56>
 8000d36:	2204      	movs	r2, #4
 8000d38:	e000      	b.n	8000d3c <map_nibble_ctrl+0x58>
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	b25b      	sxtb	r3, r3
 8000d44:	73fb      	strb	r3, [r7, #15]
    b |= 0x00;                      // RW=P1 forced 0 (write)
    b |= (rs ? 0x01 : 0x00);        // RS=P0
 8000d46:	79bb      	ldrb	r3, [r7, #6]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	bf14      	ite	ne
 8000d4c:	2301      	movne	r3, #1
 8000d4e:	2300      	moveq	r3, #0
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	b25a      	sxtb	r2, r3
 8000d54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	b25b      	sxtb	r3, r3
 8000d5c:	73fb      	strb	r3, [r7, #15]
    return b;
 8000d5e:	7bfb      	ldrb	r3, [r7, #15]
    b |= (bl_on ? 0x80 : 0x00);           // BL=P7
    return b;
#else
# error "Unsupported LCD_PINMAP selection"
#endif
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3710      	adds	r7, #16
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc90      	pop	{r4, r7}
 8000d68:	4770      	bx	lr
	...

08000d6c <expander_write>:

static void expander_write(uint8_t data)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af02      	add	r7, sp, #8
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Master_Transmit(&hi2c2, SLAVE_ADDRESS_LCD, &data, 1, 100);
 8000d76:	1dfa      	adds	r2, r7, #7
 8000d78:	2364      	movs	r3, #100	@ 0x64
 8000d7a:	9300      	str	r3, [sp, #0]
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	214e      	movs	r1, #78	@ 0x4e
 8000d80:	4803      	ldr	r0, [pc, #12]	@ (8000d90 <expander_write+0x24>)
 8000d82:	f003 fc9f 	bl	80046c4 <HAL_I2C_Master_Transmit>
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000160 	.word	0x20000160

08000d94 <pulse_enable>:

static void pulse_enable(uint8_t data)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
#if (LCD_PINMAP == LCD_PINMAP_A)
    expander_write(data | 0x04);  // EN=1
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	f043 0304 	orr.w	r3, r3, #4
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff ffe0 	bl	8000d6c <expander_write>
    HAL_Delay(1);
 8000dac:	2001      	movs	r0, #1
 8000dae:	f002 fb97 	bl	80034e0 <HAL_Delay>
    expander_write(data & ~0x04); // EN=0
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	f023 0304 	bic.w	r3, r3, #4
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff ffd6 	bl	8000d6c <expander_write>
#elif (LCD_PINMAP == LCD_PINMAP_B)
    expander_write(data | 0x10);  // EN=1
    HAL_Delay(1);
    expander_write(data & ~0x10); // EN=0
#endif
    HAL_Delay(1);
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	f002 fb8d 	bl	80034e0 <HAL_Delay>
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <write4bits>:

static void write4bits(uint8_t nibble /*D7..D4 in high nibble*/, uint8_t rs, uint8_t bl_on)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b084      	sub	sp, #16
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	71fb      	strb	r3, [r7, #7]
 8000dd8:	460b      	mov	r3, r1
 8000dda:	71bb      	strb	r3, [r7, #6]
 8000ddc:	4613      	mov	r3, r2
 8000dde:	717b      	strb	r3, [r7, #5]
    uint8_t x = map_nibble_ctrl(nibble, rs, 1 /*en edge*/, bl_on);
 8000de0:	797b      	ldrb	r3, [r7, #5]
 8000de2:	79b9      	ldrb	r1, [r7, #6]
 8000de4:	79f8      	ldrb	r0, [r7, #7]
 8000de6:	2201      	movs	r2, #1
 8000de8:	f7ff ff7c 	bl	8000ce4 <map_nibble_ctrl>
 8000dec:	4603      	mov	r3, r0
 8000dee:	73fb      	strb	r3, [r7, #15]
    expander_write(x);
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff ffba 	bl	8000d6c <expander_write>
    pulse_enable(x);
 8000df8:	7bfb      	ldrb	r3, [r7, #15]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff ffca 	bl	8000d94 <pulse_enable>
}
 8000e00:	bf00      	nop
 8000e02:	3710      	adds	r7, #16
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <lcd_backlight_on>:

/* -------- Public API -------- */

void lcd_backlight_on(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
#if (LCD_PINMAP == LCD_PINMAP_A)
    uint8_t b = 0x08; // BL=1, others 0
 8000e0e:	2308      	movs	r3, #8
 8000e10:	71fb      	strb	r3, [r7, #7]
#elif (LCD_PINMAP == LCD_PINMAP_B)
    uint8_t b = 0x80; // BL=1, others 0
#endif
    expander_write(b);
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff ffa9 	bl	8000d6c <expander_write>
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <lcd_send_cmd>:
    uint8_t b = 0x00;
    expander_write(b);
}

void lcd_send_cmd(uint8_t cmd)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b082      	sub	sp, #8
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	4603      	mov	r3, r0
 8000e2a:	71fb      	strb	r3, [r7, #7]
    /* high then low nibble, RS=0 */
    write4bits(cmd & 0xF0, 0, 1);
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	f023 030f 	bic.w	r3, r3, #15
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	2201      	movs	r2, #1
 8000e36:	2100      	movs	r1, #0
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff ffc8 	bl	8000dce <write4bits>
    write4bits((cmd << 4) & 0xF0, 0, 1);
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	011b      	lsls	r3, r3, #4
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	2201      	movs	r2, #1
 8000e46:	2100      	movs	r1, #0
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff ffc0 	bl	8000dce <write4bits>
}
 8000e4e:	bf00      	nop
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <lcd_send_data>:

void lcd_send_data(uint8_t data)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b082      	sub	sp, #8
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	71fb      	strb	r3, [r7, #7]
    /* high then low nibble, RS=1 */
    write4bits(data & 0xF0, 1, 1);
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	f023 030f 	bic.w	r3, r3, #15
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	2201      	movs	r2, #1
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff ffae 	bl	8000dce <write4bits>
    write4bits((data << 4) & 0xF0, 1, 1);
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	011b      	lsls	r3, r3, #4
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	2201      	movs	r2, #1
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff ffa6 	bl	8000dce <write4bits>
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <lcd_clear>:

void lcd_clear(void)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	af00      	add	r7, sp, #0
    lcd_send_cmd(0x01);
 8000e8e:	2001      	movs	r0, #1
 8000e90:	f7ff ffc7 	bl	8000e22 <lcd_send_cmd>
    HAL_Delay(2);
 8000e94:	2002      	movs	r0, #2
 8000e96:	f002 fb23 	bl	80034e0 <HAL_Delay>
    lcd_send_cmd(0x80);
 8000e9a:	2080      	movs	r0, #128	@ 0x80
 8000e9c:	f7ff ffc1 	bl	8000e22 <lcd_send_cmd>
}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <lcd_put_cur>:

void lcd_put_cur(uint8_t row, uint8_t col)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	460a      	mov	r2, r1
 8000eae:	71fb      	strb	r3, [r7, #7]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	71bb      	strb	r3, [r7, #6]
    static const uint8_t row_offsets[] = {0x00, 0x40};
    if (row > 1) row = 1;
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d901      	bls.n	8000ebe <lcd_put_cur+0x1a>
 8000eba:	2301      	movs	r3, #1
 8000ebc:	71fb      	strb	r3, [r7, #7]
    lcd_send_cmd(0x80 | (row_offsets[row] + col));
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	4a08      	ldr	r2, [pc, #32]	@ (8000ee4 <lcd_put_cur+0x40>)
 8000ec2:	5cd2      	ldrb	r2, [r2, r3]
 8000ec4:	79bb      	ldrb	r3, [r7, #6]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	b25b      	sxtb	r3, r3
 8000ecc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ed0:	b25b      	sxtb	r3, r3
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff ffa4 	bl	8000e22 <lcd_send_cmd>
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	08008984 	.word	0x08008984

08000ee8 <lcd_send_string>:

void lcd_send_string(char *str)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
    while (*str) lcd_send_data((uint8_t)*str++);
 8000ef0:	e006      	b.n	8000f00 <lcd_send_string+0x18>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	1c5a      	adds	r2, r3, #1
 8000ef6:	607a      	str	r2, [r7, #4]
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff ffab 	bl	8000e56 <lcd_send_data>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d1f4      	bne.n	8000ef2 <lcd_send_string+0xa>
}
 8000f08:	bf00      	nop
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <lcd_init>:

void lcd_init(void)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	af00      	add	r7, sp, #0
    HAL_Delay(50);
 8000f16:	2032      	movs	r0, #50	@ 0x32
 8000f18:	f002 fae2 	bl	80034e0 <HAL_Delay>
    lcd_backlight_on();
 8000f1c:	f7ff ff74 	bl	8000e08 <lcd_backlight_on>

    /* Force 8-bit mode (send only high-nibble pattern) */
    write4bits(0x30, 0, 1); HAL_Delay(5);
 8000f20:	2201      	movs	r2, #1
 8000f22:	2100      	movs	r1, #0
 8000f24:	2030      	movs	r0, #48	@ 0x30
 8000f26:	f7ff ff52 	bl	8000dce <write4bits>
 8000f2a:	2005      	movs	r0, #5
 8000f2c:	f002 fad8 	bl	80034e0 <HAL_Delay>
    write4bits(0x30, 0, 1); HAL_Delay(1);
 8000f30:	2201      	movs	r2, #1
 8000f32:	2100      	movs	r1, #0
 8000f34:	2030      	movs	r0, #48	@ 0x30
 8000f36:	f7ff ff4a 	bl	8000dce <write4bits>
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	f002 fad0 	bl	80034e0 <HAL_Delay>
    write4bits(0x30, 0, 1); HAL_Delay(1);
 8000f40:	2201      	movs	r2, #1
 8000f42:	2100      	movs	r1, #0
 8000f44:	2030      	movs	r0, #48	@ 0x30
 8000f46:	f7ff ff42 	bl	8000dce <write4bits>
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	f002 fac8 	bl	80034e0 <HAL_Delay>

    /* Switch to 4-bit mode */
    write4bits(0x20, 0, 1); HAL_Delay(1);
 8000f50:	2201      	movs	r2, #1
 8000f52:	2100      	movs	r1, #0
 8000f54:	2020      	movs	r0, #32
 8000f56:	f7ff ff3a 	bl	8000dce <write4bits>
 8000f5a:	2001      	movs	r0, #1
 8000f5c:	f002 fac0 	bl	80034e0 <HAL_Delay>

    /* Function set: 4-bit, 2 lines, 5x8 */
    lcd_send_cmd(0x28); HAL_Delay(1);
 8000f60:	2028      	movs	r0, #40	@ 0x28
 8000f62:	f7ff ff5e 	bl	8000e22 <lcd_send_cmd>
 8000f66:	2001      	movs	r0, #1
 8000f68:	f002 faba 	bl	80034e0 <HAL_Delay>
    /* Display off */
    lcd_send_cmd(0x08); HAL_Delay(1);
 8000f6c:	2008      	movs	r0, #8
 8000f6e:	f7ff ff58 	bl	8000e22 <lcd_send_cmd>
 8000f72:	2001      	movs	r0, #1
 8000f74:	f002 fab4 	bl	80034e0 <HAL_Delay>
    /* Clear */
    lcd_clear();        HAL_Delay(2);
 8000f78:	f7ff ff87 	bl	8000e8a <lcd_clear>
 8000f7c:	2002      	movs	r0, #2
 8000f7e:	f002 faaf 	bl	80034e0 <HAL_Delay>
    /* Entry mode: increment, no shift */
    lcd_send_cmd(0x06); HAL_Delay(1);
 8000f82:	2006      	movs	r0, #6
 8000f84:	f7ff ff4d 	bl	8000e22 <lcd_send_cmd>
 8000f88:	2001      	movs	r0, #1
 8000f8a:	f002 faa9 	bl	80034e0 <HAL_Delay>
    /* Display on, cursor off, blink off */
    lcd_send_cmd(0x0C); HAL_Delay(1);
 8000f8e:	200c      	movs	r0, #12
 8000f90:	f7ff ff47 	bl	8000e22 <lcd_send_cmd>
 8000f94:	2001      	movs	r0, #1
 8000f96:	f002 faa3 	bl	80034e0 <HAL_Delay>
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <now_ms>:

static LedIntent s_intent[LED_COLOR_COUNT];
static uint8_t   s_activeBlink[LED_COLOR_COUNT];
static uint32_t  s_nextToggleAt[LED_COLOR_COUNT];

static inline uint32_t now_ms(void) { return HAL_GetTick(); }
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	f002 fa93 	bl	80034cc <HAL_GetTick>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	bd80      	pop	{r7, pc}

08000fac <led_write>:

static void led_write(LedColor c, GPIO_PinState st) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	460a      	mov	r2, r1
 8000fb6:	71fb      	strb	r3, [r7, #7]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(LED_PORTS[c], LED_PINS[c], st);
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	4a07      	ldr	r2, [pc, #28]	@ (8000fdc <led_write+0x30>)
 8000fc0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	4a06      	ldr	r2, [pc, #24]	@ (8000fe0 <led_write+0x34>)
 8000fc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fcc:	79ba      	ldrb	r2, [r7, #6]
 8000fce:	4619      	mov	r1, r3
 8000fd0:	f003 fa03 	bl	80043da <HAL_GPIO_WritePin>
}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000000 	.word	0x20000000
 8000fe0:	20000010 	.word	0x20000010

08000fe4 <led_on>:
static void led_on(LedColor c)  { led_write(c, GPIO_PIN_SET); }
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff ffda 	bl	8000fac <led_write>
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <led_off>:
static void led_off(LedColor c) { led_write(c, GPIO_PIN_RESET); }
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	2100      	movs	r1, #0
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff ffcc 	bl	8000fac <led_write>
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <LED_Task>:
    }
}

/* call this every loop (or from a 10–20ms tick) */
void LED_Task(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
    uint32_t t = now_ms();
 8001022:	f7ff ffbc 	bl	8000f9e <now_ms>
 8001026:	6038      	str	r0, [r7, #0]

    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 8001028:	2300      	movs	r3, #0
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	e064      	b.n	80010f8 <LED_Task+0xdc>
        switch (s_intent[i].mode) {
 800102e:	4a36      	ldr	r2, [pc, #216]	@ (8001108 <LED_Task+0xec>)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d002      	beq.n	8001040 <LED_Task+0x24>
 800103a:	2b01      	cmp	r3, #1
 800103c:	d00b      	beq.n	8001056 <LED_Task+0x3a>
 800103e:	e015      	b.n	800106c <LED_Task+0x50>
        case LED_MODE_OFF:
            s_activeBlink[i] = 0;
 8001040:	4a32      	ldr	r2, [pc, #200]	@ (800110c <LED_Task+0xf0>)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4413      	add	r3, r2
 8001046:	2200      	movs	r2, #0
 8001048:	701a      	strb	r2, [r3, #0]
            led_off((LedColor)i);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	b2db      	uxtb	r3, r3
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff ffd6 	bl	8001000 <led_off>
            break;
 8001054:	e04d      	b.n	80010f2 <LED_Task+0xd6>

        case LED_MODE_STEADY:
            s_activeBlink[i] = 1;
 8001056:	4a2d      	ldr	r2, [pc, #180]	@ (800110c <LED_Task+0xf0>)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4413      	add	r3, r2
 800105c:	2201      	movs	r2, #1
 800105e:	701a      	strb	r2, [r3, #0]
            led_on((LedColor)i);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	b2db      	uxtb	r3, r3
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff ffbd 	bl	8000fe4 <led_on>
            break;
 800106a:	e042      	b.n	80010f2 <LED_Task+0xd6>

        case LED_MODE_BLINK:
        default:
            if (s_intent[i].period_ms == 0) s_intent[i].period_ms = 500;
 800106c:	4a26      	ldr	r2, [pc, #152]	@ (8001108 <LED_Task+0xec>)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	885b      	ldrh	r3, [r3, #2]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d106      	bne.n	8001088 <LED_Task+0x6c>
 800107a:	4a23      	ldr	r2, [pc, #140]	@ (8001108 <LED_Task+0xec>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	4413      	add	r3, r2
 8001082:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001086:	805a      	strh	r2, [r3, #2]
            if ((int32_t)(s_nextToggleAt[i] - t) <= 0) {
 8001088:	4a21      	ldr	r2, [pc, #132]	@ (8001110 <LED_Task+0xf4>)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	2b00      	cmp	r3, #0
 8001096:	dc2b      	bgt.n	80010f0 <LED_Task+0xd4>
                s_activeBlink[i] = !s_activeBlink[i];
 8001098:	4a1c      	ldr	r2, [pc, #112]	@ (800110c <LED_Task+0xf0>)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4413      	add	r3, r2
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	bf0c      	ite	eq
 80010a4:	2301      	moveq	r3, #1
 80010a6:	2300      	movne	r3, #0
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	4619      	mov	r1, r3
 80010ac:	4a17      	ldr	r2, [pc, #92]	@ (800110c <LED_Task+0xf0>)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4413      	add	r3, r2
 80010b2:	460a      	mov	r2, r1
 80010b4:	701a      	strb	r2, [r3, #0]
                if (s_activeBlink[i]) led_on((LedColor)i);
 80010b6:	4a15      	ldr	r2, [pc, #84]	@ (800110c <LED_Task+0xf0>)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4413      	add	r3, r2
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d005      	beq.n	80010ce <LED_Task+0xb2>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff ff8c 	bl	8000fe4 <led_on>
 80010cc:	e004      	b.n	80010d8 <LED_Task+0xbc>
                else                  led_off((LedColor)i);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff ff94 	bl	8001000 <led_off>
                s_nextToggleAt[i] = t + s_intent[i].period_ms;
 80010d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001108 <LED_Task+0xec>)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	4413      	add	r3, r2
 80010e0:	885b      	ldrh	r3, [r3, #2]
 80010e2:	461a      	mov	r2, r3
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	441a      	add	r2, r3
 80010e8:	4909      	ldr	r1, [pc, #36]	@ (8001110 <LED_Task+0xf4>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            }
            break;
 80010f0:	bf00      	nop
    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	3301      	adds	r3, #1
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b03      	cmp	r3, #3
 80010fc:	dd97      	ble.n	800102e <LED_Task+0x12>
        }
    }
}
 80010fe:	bf00      	nop
 8001100:	bf00      	nop
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	200000e8 	.word	0x200000e8
 800110c:	200000f8 	.word	0x200000f8
 8001110:	200000fc 	.word	0x200000fc

08001114 <LED_ClearAllIntents>:

void LED_ClearAllIntents(void)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 800111a:	2300      	movs	r3, #0
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	e00d      	b.n	800113c <LED_ClearAllIntents+0x28>
        s_intent[i].mode = LED_MODE_OFF;
 8001120:	4a0b      	ldr	r2, [pc, #44]	@ (8001150 <LED_ClearAllIntents+0x3c>)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2100      	movs	r1, #0
 8001126:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
        s_intent[i].period_ms = 0;
 800112a:	4a09      	ldr	r2, [pc, #36]	@ (8001150 <LED_ClearAllIntents+0x3c>)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	4413      	add	r3, r2
 8001132:	2200      	movs	r2, #0
 8001134:	805a      	strh	r2, [r3, #2]
    for (int i = 0; i < LED_COLOR_COUNT; ++i) {
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	3301      	adds	r3, #1
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b03      	cmp	r3, #3
 8001140:	ddee      	ble.n	8001120 <LED_ClearAllIntents+0xc>
    }
}
 8001142:	bf00      	nop
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	bc80      	pop	{r7}
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	200000e8 	.word	0x200000e8

08001154 <LED_SetIntent>:

void LED_SetIntent(LedColor color, LedMode mode, uint16_t period_ms)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
 800115e:	460b      	mov	r3, r1
 8001160:	71bb      	strb	r3, [r7, #6]
 8001162:	4613      	mov	r3, r2
 8001164:	80bb      	strh	r3, [r7, #4]
    if ((int)color < 0 || color >= LED_COLOR_COUNT) return;
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	2b03      	cmp	r3, #3
 800116a:	d80b      	bhi.n	8001184 <LED_SetIntent+0x30>
    s_intent[color].mode = mode;
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	4908      	ldr	r1, [pc, #32]	@ (8001190 <LED_SetIntent+0x3c>)
 8001170:	79ba      	ldrb	r2, [r7, #6]
 8001172:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
    s_intent[color].period_ms = period_ms;
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	4a05      	ldr	r2, [pc, #20]	@ (8001190 <LED_SetIntent+0x3c>)
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	4413      	add	r3, r2
 800117e:	88ba      	ldrh	r2, [r7, #4]
 8001180:	805a      	strh	r2, [r3, #2]
 8001182:	e000      	b.n	8001186 <LED_SetIntent+0x32>
    if ((int)color < 0 || color >= LED_COLOR_COUNT) return;
 8001184:	bf00      	nop
}
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	bc80      	pop	{r7}
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	200000e8 	.word	0x200000e8

08001194 <LED_ApplyIntents>:

/* current implementation uses intents directly in LED_Task() */
void LED_ApplyIntents(void) { /* no-op, reserved for future resolve rules */ }
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr

080011a0 <LoRa_WriteReg>:


//uint8_t rxBuffer[256]; // Buffer for received data

/* --- low-level SPI helpers --- */
void LoRa_WriteReg(uint8_t addr, uint8_t data) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	460a      	mov	r2, r1
 80011aa:	71fb      	strb	r3, [r7, #7]
 80011ac:	4613      	mov	r3, r2
 80011ae:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2] = { (uint8_t)(addr | 0x80), data };
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	733b      	strb	r3, [r7, #12]
 80011ba:	79bb      	ldrb	r3, [r7, #6]
 80011bc:	737b      	strb	r3, [r7, #13]
    NSS_LOW();
 80011be:	2200      	movs	r2, #0
 80011c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011c4:	480a      	ldr	r0, [pc, #40]	@ (80011f0 <LoRa_WriteReg+0x50>)
 80011c6:	f003 f908 	bl	80043da <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, buf, 2, HAL_MAX_DELAY);
 80011ca:	f107 010c 	add.w	r1, r7, #12
 80011ce:	f04f 33ff 	mov.w	r3, #4294967295
 80011d2:	2202      	movs	r2, #2
 80011d4:	4807      	ldr	r0, [pc, #28]	@ (80011f4 <LoRa_WriteReg+0x54>)
 80011d6:	f004 ffc6 	bl	8006166 <HAL_SPI_Transmit>
    NSS_HIGH();
 80011da:	2201      	movs	r2, #1
 80011dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011e0:	4803      	ldr	r0, [pc, #12]	@ (80011f0 <LoRa_WriteReg+0x50>)
 80011e2:	f003 f8fa 	bl	80043da <HAL_GPIO_WritePin>
}
 80011e6:	bf00      	nop
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40010800 	.word	0x40010800
 80011f4:	200001c8 	.word	0x200001c8

080011f8 <LoRa_ReadReg>:

uint8_t LoRa_ReadReg(uint8_t addr) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
    uint8_t tx = addr & 0x7F;
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001208:	b2db      	uxtb	r3, r3
 800120a:	73fb      	strb	r3, [r7, #15]
    uint8_t rx = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	73bb      	strb	r3, [r7, #14]
    NSS_LOW();
 8001210:	2200      	movs	r2, #0
 8001212:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001216:	480f      	ldr	r0, [pc, #60]	@ (8001254 <LoRa_ReadReg+0x5c>)
 8001218:	f003 f8df 	bl	80043da <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &tx, 1, HAL_MAX_DELAY);
 800121c:	f107 010f 	add.w	r1, r7, #15
 8001220:	f04f 33ff 	mov.w	r3, #4294967295
 8001224:	2201      	movs	r2, #1
 8001226:	480c      	ldr	r0, [pc, #48]	@ (8001258 <LoRa_ReadReg+0x60>)
 8001228:	f004 ff9d 	bl	8006166 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, &rx, 1, HAL_MAX_DELAY);
 800122c:	f107 010e 	add.w	r1, r7, #14
 8001230:	f04f 33ff 	mov.w	r3, #4294967295
 8001234:	2201      	movs	r2, #1
 8001236:	4808      	ldr	r0, [pc, #32]	@ (8001258 <LoRa_ReadReg+0x60>)
 8001238:	f005 f8d9 	bl	80063ee <HAL_SPI_Receive>
    NSS_HIGH();
 800123c:	2201      	movs	r2, #1
 800123e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001242:	4804      	ldr	r0, [pc, #16]	@ (8001254 <LoRa_ReadReg+0x5c>)
 8001244:	f003 f8c9 	bl	80043da <HAL_GPIO_WritePin>
    return rx;
 8001248:	7bbb      	ldrb	r3, [r7, #14]
}
 800124a:	4618      	mov	r0, r3
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40010800 	.word	0x40010800
 8001258:	200001c8 	.word	0x200001c8

0800125c <LoRa_WriteBuffer>:

void LoRa_WriteBuffer(uint8_t addr, const uint8_t *buffer, uint8_t size) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	6039      	str	r1, [r7, #0]
 8001266:	71fb      	strb	r3, [r7, #7]
 8001268:	4613      	mov	r3, r2
 800126a:	71bb      	strb	r3, [r7, #6]
    uint8_t a = addr | 0x80;
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001272:	b2db      	uxtb	r3, r3
 8001274:	73fb      	strb	r3, [r7, #15]
    NSS_LOW();
 8001276:	2200      	movs	r2, #0
 8001278:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800127c:	480e      	ldr	r0, [pc, #56]	@ (80012b8 <LoRa_WriteBuffer+0x5c>)
 800127e:	f003 f8ac 	bl	80043da <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &a, 1, HAL_MAX_DELAY);
 8001282:	f107 010f 	add.w	r1, r7, #15
 8001286:	f04f 33ff 	mov.w	r3, #4294967295
 800128a:	2201      	movs	r2, #1
 800128c:	480b      	ldr	r0, [pc, #44]	@ (80012bc <LoRa_WriteBuffer+0x60>)
 800128e:	f004 ff6a 	bl	8006166 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)buffer, size, HAL_MAX_DELAY);
 8001292:	79bb      	ldrb	r3, [r7, #6]
 8001294:	b29a      	uxth	r2, r3
 8001296:	f04f 33ff 	mov.w	r3, #4294967295
 800129a:	6839      	ldr	r1, [r7, #0]
 800129c:	4807      	ldr	r0, [pc, #28]	@ (80012bc <LoRa_WriteBuffer+0x60>)
 800129e:	f004 ff62 	bl	8006166 <HAL_SPI_Transmit>
    NSS_HIGH();
 80012a2:	2201      	movs	r2, #1
 80012a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012a8:	4803      	ldr	r0, [pc, #12]	@ (80012b8 <LoRa_WriteBuffer+0x5c>)
 80012aa:	f003 f896 	bl	80043da <HAL_GPIO_WritePin>
}
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40010800 	.word	0x40010800
 80012bc:	200001c8 	.word	0x200001c8

080012c0 <LoRa_ReadBuffer>:

void LoRa_ReadBuffer(uint8_t addr, uint8_t *buffer, uint8_t size) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	6039      	str	r1, [r7, #0]
 80012ca:	71fb      	strb	r3, [r7, #7]
 80012cc:	4613      	mov	r3, r2
 80012ce:	71bb      	strb	r3, [r7, #6]
    uint8_t a = addr & 0x7F;
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	73fb      	strb	r3, [r7, #15]
    NSS_LOW();
 80012da:	2200      	movs	r2, #0
 80012dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012e0:	480e      	ldr	r0, [pc, #56]	@ (800131c <LoRa_ReadBuffer+0x5c>)
 80012e2:	f003 f87a 	bl	80043da <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &a, 1, HAL_MAX_DELAY);
 80012e6:	f107 010f 	add.w	r1, r7, #15
 80012ea:	f04f 33ff 	mov.w	r3, #4294967295
 80012ee:	2201      	movs	r2, #1
 80012f0:	480b      	ldr	r0, [pc, #44]	@ (8001320 <LoRa_ReadBuffer+0x60>)
 80012f2:	f004 ff38 	bl	8006166 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, buffer, size, HAL_MAX_DELAY);
 80012f6:	79bb      	ldrb	r3, [r7, #6]
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	f04f 33ff 	mov.w	r3, #4294967295
 80012fe:	6839      	ldr	r1, [r7, #0]
 8001300:	4807      	ldr	r0, [pc, #28]	@ (8001320 <LoRa_ReadBuffer+0x60>)
 8001302:	f005 f874 	bl	80063ee <HAL_SPI_Receive>
    NSS_HIGH();
 8001306:	2201      	movs	r2, #1
 8001308:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800130c:	4803      	ldr	r0, [pc, #12]	@ (800131c <LoRa_ReadBuffer+0x5c>)
 800130e:	f003 f864 	bl	80043da <HAL_GPIO_WritePin>
}
 8001312:	bf00      	nop
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40010800 	.word	0x40010800
 8001320:	200001c8 	.word	0x200001c8

08001324 <LoRa_Reset>:

/* --- reset --- */
void LoRa_Reset(void) {
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LORA_RESET_PORT, LORA_RESET_PIN, GPIO_PIN_RESET);
 8001328:	2200      	movs	r2, #0
 800132a:	2140      	movs	r1, #64	@ 0x40
 800132c:	4807      	ldr	r0, [pc, #28]	@ (800134c <LoRa_Reset+0x28>)
 800132e:	f003 f854 	bl	80043da <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8001332:	2002      	movs	r0, #2
 8001334:	f002 f8d4 	bl	80034e0 <HAL_Delay>
    HAL_GPIO_WritePin(LORA_RESET_PORT, LORA_RESET_PIN, GPIO_PIN_SET);
 8001338:	2201      	movs	r2, #1
 800133a:	2140      	movs	r1, #64	@ 0x40
 800133c:	4803      	ldr	r0, [pc, #12]	@ (800134c <LoRa_Reset+0x28>)
 800133e:	f003 f84c 	bl	80043da <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001342:	200a      	movs	r0, #10
 8001344:	f002 f8cc 	bl	80034e0 <HAL_Delay>
}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40010c00 	.word	0x40010c00

08001350 <LoRa_SetFrequency>:

/* --- set frequency (Hz) --- */
void LoRa_SetFrequency(uint32_t freqHz) {
 8001350:	b5b0      	push	{r4, r5, r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
    /* FRF = freq * 2^19 / 32e6 */
    uint64_t frf = ((uint64_t)freqHz << 19) / 32000000ULL;
 8001358:	6879      	ldr	r1, [r7, #4]
 800135a:	2000      	movs	r0, #0
 800135c:	460a      	mov	r2, r1
 800135e:	4603      	mov	r3, r0
 8001360:	0b55      	lsrs	r5, r2, #13
 8001362:	04d4      	lsls	r4, r2, #19
 8001364:	4a18      	ldr	r2, [pc, #96]	@ (80013c8 <LoRa_SetFrequency+0x78>)
 8001366:	f04f 0300 	mov.w	r3, #0
 800136a:	4620      	mov	r0, r4
 800136c:	4629      	mov	r1, r5
 800136e:	f7ff f9d3 	bl	8000718 <__aeabi_uldivmod>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	e9c7 2302 	strd	r2, r3, [r7, #8]
    LoRa_WriteReg(0x06, (uint8_t)(frf >> 16));
 800137a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800137e:	f04f 0200 	mov.w	r2, #0
 8001382:	f04f 0300 	mov.w	r3, #0
 8001386:	0c02      	lsrs	r2, r0, #16
 8001388:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800138c:	0c0b      	lsrs	r3, r1, #16
 800138e:	b2d3      	uxtb	r3, r2
 8001390:	4619      	mov	r1, r3
 8001392:	2006      	movs	r0, #6
 8001394:	f7ff ff04 	bl	80011a0 <LoRa_WriteReg>
    LoRa_WriteReg(0x07, (uint8_t)(frf >> 8));
 8001398:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800139c:	f04f 0200 	mov.w	r2, #0
 80013a0:	f04f 0300 	mov.w	r3, #0
 80013a4:	0a02      	lsrs	r2, r0, #8
 80013a6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80013aa:	0a0b      	lsrs	r3, r1, #8
 80013ac:	b2d3      	uxtb	r3, r2
 80013ae:	4619      	mov	r1, r3
 80013b0:	2007      	movs	r0, #7
 80013b2:	f7ff fef5 	bl	80011a0 <LoRa_WriteReg>
    LoRa_WriteReg(0x08, (uint8_t)(frf >> 0));
 80013b6:	7a3b      	ldrb	r3, [r7, #8]
 80013b8:	4619      	mov	r1, r3
 80013ba:	2008      	movs	r0, #8
 80013bc:	f7ff fef0 	bl	80011a0 <LoRa_WriteReg>
}
 80013c0:	bf00      	nop
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bdb0      	pop	{r4, r5, r7, pc}
 80013c8:	01e84800 	.word	0x01e84800

080013cc <LoRa_Init>:

/* --- init with settings that match Arduino LoRa defaults --- */
void LoRa_Init(void) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
    LoRa_Reset();
 80013d0:	f7ff ffa8 	bl	8001324 <LoRa_Reset>

    /* Sleep, then LoRa sleep mode */
    LoRa_WriteReg(0x01, 0x00);
 80013d4:	2100      	movs	r1, #0
 80013d6:	2001      	movs	r0, #1
 80013d8:	f7ff fee2 	bl	80011a0 <LoRa_WriteReg>
    HAL_Delay(5);
 80013dc:	2005      	movs	r0, #5
 80013de:	f002 f87f 	bl	80034e0 <HAL_Delay>
    LoRa_WriteReg(0x01, 0x80);
 80013e2:	2180      	movs	r1, #128	@ 0x80
 80013e4:	2001      	movs	r0, #1
 80013e6:	f7ff fedb 	bl	80011a0 <LoRa_WriteReg>
    HAL_Delay(5);
 80013ea:	2005      	movs	r0, #5
 80013ec:	f002 f878 	bl	80034e0 <HAL_Delay>

    /* Frequency (433 MHz) */
    LoRa_SetFrequency(LORA_FREQUENCY);
 80013f0:	4818      	ldr	r0, [pc, #96]	@ (8001454 <LoRa_Init+0x88>)
 80013f2:	f7ff ffad 	bl	8001350 <LoRa_SetFrequency>

    /* PA config: PA_BOOST, max power (common for SX1278 Ra-02) */
    LoRa_WriteReg(0x09, 0x8F); // PA_BOOST, max power
 80013f6:	218f      	movs	r1, #143	@ 0x8f
 80013f8:	2009      	movs	r0, #9
 80013fa:	f7ff fed1 	bl	80011a0 <LoRa_WriteReg>

    /* Enable high-power PA if module supports it (optional) */
    LoRa_WriteReg(0x4D, 0x87); // RegPaDac (only on SX1276/78 family)
 80013fe:	2187      	movs	r1, #135	@ 0x87
 8001400:	204d      	movs	r0, #77	@ 0x4d
 8001402:	f7ff fecd 	bl	80011a0 <LoRa_WriteReg>

    /* LNA */
    LoRa_WriteReg(0x0C, 0x23);
 8001406:	2123      	movs	r1, #35	@ 0x23
 8001408:	200c      	movs	r0, #12
 800140a:	f7ff fec9 	bl	80011a0 <LoRa_WriteReg>
    /* Modem config:
       RegModemConfig1 = 0x72 -> BW=125kHz, CR=4/5, Explicit header
       RegModemConfig2 = 0x74 -> SF7, CRC ON (Arduino default)
       RegModemConfig3 = 0x04 -> LowDataRateOptimize off, AGC Auto On
    */
    LoRa_WriteReg(0x1D, 0x72);
 800140e:	2172      	movs	r1, #114	@ 0x72
 8001410:	201d      	movs	r0, #29
 8001412:	f7ff fec5 	bl	80011a0 <LoRa_WriteReg>
    LoRa_WriteReg(0x1E, 0x74);
 8001416:	2174      	movs	r1, #116	@ 0x74
 8001418:	201e      	movs	r0, #30
 800141a:	f7ff fec1 	bl	80011a0 <LoRa_WriteReg>
    LoRa_WriteReg(0x26, 0x04);
 800141e:	2104      	movs	r1, #4
 8001420:	2026      	movs	r0, #38	@ 0x26
 8001422:	f7ff febd 	bl	80011a0 <LoRa_WriteReg>

    /* Preamble = 8 */
    LoRa_WriteReg(0x20, 0x00);
 8001426:	2100      	movs	r1, #0
 8001428:	2020      	movs	r0, #32
 800142a:	f7ff feb9 	bl	80011a0 <LoRa_WriteReg>
    LoRa_WriteReg(0x21, 0x08);
 800142e:	2108      	movs	r1, #8
 8001430:	2021      	movs	r0, #33	@ 0x21
 8001432:	f7ff feb5 	bl	80011a0 <LoRa_WriteReg>

    /* SyncWord = 0x22 (matches LoRa.setSyncWord(0x22) on Arduino) */
    LoRa_WriteReg(0x39, 0x22);
 8001436:	2122      	movs	r1, #34	@ 0x22
 8001438:	2039      	movs	r0, #57	@ 0x39
 800143a:	f7ff feb1 	bl	80011a0 <LoRa_WriteReg>

    /* Map DIO0 = RxDone/TxDone as normal (we'll poll IRQs) */
    LoRa_WriteReg(0x40, 0x00);
 800143e:	2100      	movs	r1, #0
 8001440:	2040      	movs	r0, #64	@ 0x40
 8001442:	f7ff fead 	bl	80011a0 <LoRa_WriteReg>

    /* Clear IRQs */
    LoRa_WriteReg(0x12, 0xFF);
 8001446:	21ff      	movs	r1, #255	@ 0xff
 8001448:	2012      	movs	r0, #18
 800144a:	f7ff fea9 	bl	80011a0 <LoRa_WriteReg>
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	19cf0e40 	.word	0x19cf0e40

08001458 <LoRa_SetStandby>:

/**
  * @brief Sets the LoRa module to Standby mode.
  */
void LoRa_SetStandby(void) {
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
    LoRa_WriteReg(0x01, 0x81); // Standby mode
 800145c:	2181      	movs	r1, #129	@ 0x81
 800145e:	2001      	movs	r0, #1
 8001460:	f7ff fe9e 	bl	80011a0 <LoRa_WriteReg>
    HAL_Delay(2);
 8001464:	2002      	movs	r0, #2
 8001466:	f002 f83b 	bl	80034e0 <HAL_Delay>
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}

0800146e <LoRa_SetRxContinuous>:

/**
  * @brief Sets the LoRa module to Continuous Receive mode.
  */
void LoRa_SetRxContinuous(void) {
 800146e:	b580      	push	{r7, lr}
 8001470:	af00      	add	r7, sp, #0
    LoRa_WriteReg(0x01, 0x85); // Continuous RX mode
 8001472:	2185      	movs	r1, #133	@ 0x85
 8001474:	2001      	movs	r0, #1
 8001476:	f7ff fe93 	bl	80011a0 <LoRa_WriteReg>
    HAL_Delay(2);
 800147a:	2002      	movs	r0, #2
 800147c:	f002 f830 	bl	80034e0 <HAL_Delay>
}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}

08001484 <LoRa_SetTx>:

/**
  * @brief Sets the LoRa module to Transmit mode.
  */
void LoRa_SetTx(void) {
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
    LoRa_WriteReg(0x01, 0x83); // TX mode
 8001488:	2183      	movs	r1, #131	@ 0x83
 800148a:	2001      	movs	r0, #1
 800148c:	f7ff fe88 	bl	80011a0 <LoRa_WriteReg>
    HAL_Delay(2);
 8001490:	2002      	movs	r0, #2
 8001492:	f002 f825 	bl	80034e0 <HAL_Delay>
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}

0800149a <LoRa_SendPacket>:

/* --- send packet, poll TxDone, return to RX --- */
void LoRa_SendPacket(const uint8_t *buffer, uint8_t size) {
 800149a:	b580      	push	{r7, lr}
 800149c:	b084      	sub	sp, #16
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
 80014a2:	460b      	mov	r3, r1
 80014a4:	70fb      	strb	r3, [r7, #3]
    LoRa_SetStandby(); // Go to Standby before TX
 80014a6:	f7ff ffd7 	bl	8001458 <LoRa_SetStandby>

    /* Reset FIFO pointers */
    LoRa_WriteReg(0x0E, 0x00);
 80014aa:	2100      	movs	r1, #0
 80014ac:	200e      	movs	r0, #14
 80014ae:	f7ff fe77 	bl	80011a0 <LoRa_WriteReg>
    LoRa_WriteReg(0x0D, 0x00);
 80014b2:	2100      	movs	r1, #0
 80014b4:	200d      	movs	r0, #13
 80014b6:	f7ff fe73 	bl	80011a0 <LoRa_WriteReg>

    /* Write payload */
    LoRa_WriteBuffer(0x00, buffer, size);
 80014ba:	78fb      	ldrb	r3, [r7, #3]
 80014bc:	461a      	mov	r2, r3
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	2000      	movs	r0, #0
 80014c2:	f7ff fecb 	bl	800125c <LoRa_WriteBuffer>
    LoRa_WriteReg(0x22, size);
 80014c6:	78fb      	ldrb	r3, [r7, #3]
 80014c8:	4619      	mov	r1, r3
 80014ca:	2022      	movs	r0, #34	@ 0x22
 80014cc:	f7ff fe68 	bl	80011a0 <LoRa_WriteReg>

    /* Clear IRQs */
    LoRa_WriteReg(0x12, 0xFF);
 80014d0:	21ff      	movs	r1, #255	@ 0xff
 80014d2:	2012      	movs	r0, #18
 80014d4:	f7ff fe64 	bl	80011a0 <LoRa_WriteReg>

    LoRa_SetTx(); // Enter TX
 80014d8:	f7ff ffd4 	bl	8001484 <LoRa_SetTx>

    /* Wait for TxDone */
    uint32_t t0 = HAL_GetTick();
 80014dc:	f001 fff6 	bl	80034cc <HAL_GetTick>
 80014e0:	60f8      	str	r0, [r7, #12]
    while ((LoRa_ReadReg(0x12) & 0x08) == 0) {
 80014e2:	e00a      	b.n	80014fa <LoRa_SendPacket+0x60>
        if ((HAL_GetTick() - t0) > LORA_TIMEOUT) break; // timeout
 80014e4:	f001 fff2 	bl	80034cc <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80014f2:	d80b      	bhi.n	800150c <LoRa_SendPacket+0x72>
        HAL_Delay(1);
 80014f4:	2001      	movs	r0, #1
 80014f6:	f001 fff3 	bl	80034e0 <HAL_Delay>
    while ((LoRa_ReadReg(0x12) & 0x08) == 0) {
 80014fa:	2012      	movs	r0, #18
 80014fc:	f7ff fe7c 	bl	80011f8 <LoRa_ReadReg>
 8001500:	4603      	mov	r3, r0
 8001502:	f003 0308 	and.w	r3, r3, #8
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0ec      	beq.n	80014e4 <LoRa_SendPacket+0x4a>
 800150a:	e000      	b.n	800150e <LoRa_SendPacket+0x74>
        if ((HAL_GetTick() - t0) > LORA_TIMEOUT) break; // timeout
 800150c:	bf00      	nop
    }

    /* Clear TxDone (if set) */
    LoRa_WriteReg(0x12, 0x08);
 800150e:	2108      	movs	r1, #8
 8001510:	2012      	movs	r0, #18
 8001512:	f7ff fe45 	bl	80011a0 <LoRa_WriteReg>

    LoRa_SetRxContinuous(); // Back to RX after TX
 8001516:	f7ff ffaa 	bl	800146e <LoRa_SetRxContinuous>
}
 800151a:	bf00      	nop
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <LoRa_ReceivePacket>:

/* --- receive helper: returns length or 0 --- */
uint8_t LoRa_ReceivePacket(uint8_t *buffer) {
 8001522:	b580      	push	{r7, lr}
 8001524:	b084      	sub	sp, #16
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
    uint8_t irq = LoRa_ReadReg(0x12);
 800152a:	2012      	movs	r0, #18
 800152c:	f7ff fe64 	bl	80011f8 <LoRa_ReadReg>
 8001530:	4603      	mov	r3, r0
 8001532:	73fb      	strb	r3, [r7, #15]
    if (irq & 0x40) { // RxDone
 8001534:	7bfb      	ldrb	r3, [r7, #15]
 8001536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800153a:	2b00      	cmp	r3, #0
 800153c:	d025      	beq.n	800158a <LoRa_ReceivePacket+0x68>
        /* If CRC error bit (0x20) is set, ignore */
        if (irq & 0x20) {
 800153e:	7bfb      	ldrb	r3, [r7, #15]
 8001540:	f003 0320 	and.w	r3, r3, #32
 8001544:	2b00      	cmp	r3, #0
 8001546:	d005      	beq.n	8001554 <LoRa_ReceivePacket+0x32>
            /* CRC error */
            LoRa_WriteReg(0x12, 0xFF);
 8001548:	21ff      	movs	r1, #255	@ 0xff
 800154a:	2012      	movs	r0, #18
 800154c:	f7ff fe28 	bl	80011a0 <LoRa_WriteReg>
            return 0;
 8001550:	2300      	movs	r3, #0
 8001552:	e01b      	b.n	800158c <LoRa_ReceivePacket+0x6a>
        }
        uint8_t nb = LoRa_ReadReg(0x13);   // RegRxNbBytes
 8001554:	2013      	movs	r0, #19
 8001556:	f7ff fe4f 	bl	80011f8 <LoRa_ReadReg>
 800155a:	4603      	mov	r3, r0
 800155c:	73bb      	strb	r3, [r7, #14]
        uint8_t addr = LoRa_ReadReg(0x10); // RegFifoRxCurrentAddr
 800155e:	2010      	movs	r0, #16
 8001560:	f7ff fe4a 	bl	80011f8 <LoRa_ReadReg>
 8001564:	4603      	mov	r3, r0
 8001566:	737b      	strb	r3, [r7, #13]
        LoRa_WriteReg(0x0D, addr);
 8001568:	7b7b      	ldrb	r3, [r7, #13]
 800156a:	4619      	mov	r1, r3
 800156c:	200d      	movs	r0, #13
 800156e:	f7ff fe17 	bl	80011a0 <LoRa_WriteReg>
        LoRa_ReadBuffer(0x00, buffer, nb);
 8001572:	7bbb      	ldrb	r3, [r7, #14]
 8001574:	461a      	mov	r2, r3
 8001576:	6879      	ldr	r1, [r7, #4]
 8001578:	2000      	movs	r0, #0
 800157a:	f7ff fea1 	bl	80012c0 <LoRa_ReadBuffer>
        LoRa_WriteReg(0x12, 0xFF); // clear IRQs
 800157e:	21ff      	movs	r1, #255	@ 0xff
 8001580:	2012      	movs	r0, #18
 8001582:	f7ff fe0d 	bl	80011a0 <LoRa_WriteReg>
        return nb;
 8001586:	7bbb      	ldrb	r3, [r7, #14]
 8001588:	e000      	b.n	800158c <LoRa_ReceivePacket+0x6a>
    }
    return 0;
 800158a:	2300      	movs	r3, #0
}
 800158c:	4618      	mov	r0, r3
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <LoRa_Task>:

/* --- LoRa Task --- */
void LoRa_Task(void) {
 8001594:	b580      	push	{r7, lr}
 8001596:	b098      	sub	sp, #96	@ 0x60
 8001598:	af00      	add	r7, sp, #0
    // Set the initial mode
    if (loraMode == LORA_MODE_RECEIVER || loraMode == LORA_MODE_TRANCEIVER) {
 800159a:	4bb0      	ldr	r3, [pc, #704]	@ (800185c <LoRa_Task+0x2c8>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d003      	beq.n	80015aa <LoRa_Task+0x16>
 80015a2:	4bae      	ldr	r3, [pc, #696]	@ (800185c <LoRa_Task+0x2c8>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b03      	cmp	r3, #3
 80015a8:	d105      	bne.n	80015b6 <LoRa_Task+0x22>
        LoRa_SetRxContinuous(); // Start in RX mode if receiver or transceiver
 80015aa:	f7ff ff60 	bl	800146e <LoRa_SetRxContinuous>
        Debug_Print("LoRa set to RX Continuous mode.\r\n");
 80015ae:	48ac      	ldr	r0, [pc, #688]	@ (8001860 <LoRa_Task+0x2cc>)
 80015b0:	f000 f9ba 	bl	8001928 <Debug_Print>
    if (loraMode == LORA_MODE_RECEIVER || loraMode == LORA_MODE_TRANCEIVER) {
 80015b4:	e004      	b.n	80015c0 <LoRa_Task+0x2c>
    } else {
        LoRa_SetStandby(); // Otherwise, start in Standby
 80015b6:	f7ff ff4f 	bl	8001458 <LoRa_SetStandby>
        Debug_Print("LoRa set to Standby mode.\r\n");
 80015ba:	48aa      	ldr	r0, [pc, #680]	@ (8001864 <LoRa_Task+0x2d0>)
 80015bc:	f000 f9b4 	bl	8001928 <Debug_Print>
    }

    // === Verify LoRa chip ===
    uint8_t version = LoRa_ReadReg(0x42);  // SX1278 RegVersion
 80015c0:	2042      	movs	r0, #66	@ 0x42
 80015c2:	f7ff fe19 	bl	80011f8 <LoRa_ReadReg>
 80015c6:	4603      	mov	r3, r0
 80015c8:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    if (version != 0x12) {
 80015cc:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80015d0:	2b12      	cmp	r3, #18
 80015d2:	d012      	beq.n	80015fa <LoRa_Task+0x66>
        z = 1;
 80015d4:	4ba4      	ldr	r3, [pc, #656]	@ (8001868 <LoRa_Task+0x2d4>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	701a      	strb	r2, [r3, #0]
        char errMsg[LORA_BUFFER_SIZE];
        sprintf(errMsg, "LoRa not found! RegVersion=0x%02X\r\n", version);
 80015da:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 80015de:	463b      	mov	r3, r7
 80015e0:	49a2      	ldr	r1, [pc, #648]	@ (800186c <LoRa_Task+0x2d8>)
 80015e2:	4618      	mov	r0, r3
 80015e4:	f005 fe14 	bl	8007210 <siprintf>
        Debug_Print(errMsg);
 80015e8:	463b      	mov	r3, r7
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 f99c 	bl	8001928 <Debug_Print>
        HAL_Delay(2000);
 80015f0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80015f4:	f001 ff74 	bl	80034e0 <HAL_Delay>
 80015f8:	e188      	b.n	800190c <LoRa_Task+0x378>
        return; // retry until chip responds
    }

    switch (loraMode) {
 80015fa:	4b98      	ldr	r3, [pc, #608]	@ (800185c <LoRa_Task+0x2c8>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b03      	cmp	r3, #3
 8001600:	f000 80c1 	beq.w	8001786 <LoRa_Task+0x1f2>
 8001604:	2b03      	cmp	r3, #3
 8001606:	f300 8179 	bgt.w	80018fc <LoRa_Task+0x368>
 800160a:	2b01      	cmp	r3, #1
 800160c:	d002      	beq.n	8001614 <LoRa_Task+0x80>
 800160e:	2b02      	cmp	r3, #2
 8001610:	d01a      	beq.n	8001648 <LoRa_Task+0xb4>
 8001612:	e173      	b.n	80018fc <LoRa_Task+0x368>
        case LORA_MODE_TRANSMITTER:
            // Transmitter logic
            Debug_Print("LoRa Mode: Transmitter\r\n");
 8001614:	4896      	ldr	r0, [pc, #600]	@ (8001870 <LoRa_Task+0x2dc>)
 8001616:	f000 f987 	bl	8001928 <Debug_Print>
            uint8_t tx_msg[] = "HELLO_TX";
 800161a:	4a96      	ldr	r2, [pc, #600]	@ (8001874 <LoRa_Task+0x2e0>)
 800161c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001620:	ca07      	ldmia	r2, {r0, r1, r2}
 8001622:	c303      	stmia	r3!, {r0, r1}
 8001624:	701a      	strb	r2, [r3, #0]
            z = 5;
 8001626:	4b90      	ldr	r3, [pc, #576]	@ (8001868 <LoRa_Task+0x2d4>)
 8001628:	2205      	movs	r2, #5
 800162a:	701a      	strb	r2, [r3, #0]
            LoRa_SendPacket(tx_msg, sizeof(tx_msg) - 1);
 800162c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001630:	2108      	movs	r1, #8
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff ff31 	bl	800149a <LoRa_SendPacket>
            Debug_Print("Sent: HELLO_TX\r\n");
 8001638:	488f      	ldr	r0, [pc, #572]	@ (8001878 <LoRa_Task+0x2e4>)
 800163a:	f000 f975 	bl	8001928 <Debug_Print>
            HAL_Delay(2000); // Send every 2 seconds
 800163e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001642:	f001 ff4d 	bl	80034e0 <HAL_Delay>
            break;
 8001646:	e161      	b.n	800190c <LoRa_Task+0x378>

        case LORA_MODE_RECEIVER:
            Debug_Print("LoRa Mode: Receiver\r\n");
 8001648:	488c      	ldr	r0, [pc, #560]	@ (800187c <LoRa_Task+0x2e8>)
 800164a:	f000 f96d 	bl	8001928 <Debug_Print>
            connectionStatus = 0; // Reset connection status
 800164e:	4b8c      	ldr	r3, [pc, #560]	@ (8001880 <LoRa_Task+0x2ec>)
 8001650:	2200      	movs	r2, #0
 8001652:	701a      	strb	r2, [r3, #0]

            // Step 1: Wait for "PING" from transmitter
            for (int i = 0; i < 40; i++) {   // ~1s timeout (40 x 25ms)
 8001654:	2300      	movs	r3, #0
 8001656:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001658:	e038      	b.n	80016cc <LoRa_Task+0x138>
                uint8_t len = LoRa_ReceivePacket(rxBuffer);
 800165a:	488a      	ldr	r0, [pc, #552]	@ (8001884 <LoRa_Task+0x2f0>)
 800165c:	f7ff ff61 	bl	8001522 <LoRa_ReceivePacket>
 8001660:	4603      	mov	r3, r0
 8001662:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
                if (len > 0) {
 8001666:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 800166a:	2b00      	cmp	r3, #0
 800166c:	d028      	beq.n	80016c0 <LoRa_Task+0x12c>
                    rxBuffer[len] = '\0'; // null terminate
 800166e:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8001672:	4a84      	ldr	r2, [pc, #528]	@ (8001884 <LoRa_Task+0x2f0>)
 8001674:	2100      	movs	r1, #0
 8001676:	54d1      	strb	r1, [r2, r3]
                    char dbg_rx[LORA_BUFFER_SIZE];
                    sprintf(dbg_rx, "Received: %s\r\n", rxBuffer);
 8001678:	463b      	mov	r3, r7
 800167a:	4a82      	ldr	r2, [pc, #520]	@ (8001884 <LoRa_Task+0x2f0>)
 800167c:	4982      	ldr	r1, [pc, #520]	@ (8001888 <LoRa_Task+0x2f4>)
 800167e:	4618      	mov	r0, r3
 8001680:	f005 fdc6 	bl	8007210 <siprintf>
                    Debug_Print(dbg_rx);
 8001684:	463b      	mov	r3, r7
 8001686:	4618      	mov	r0, r3
 8001688:	f000 f94e 	bl	8001928 <Debug_Print>

                    if (strncmp((char*)rxBuffer, LORA_PING_MSG, strlen(LORA_PING_MSG)) == 0) {
 800168c:	2204      	movs	r2, #4
 800168e:	497f      	ldr	r1, [pc, #508]	@ (800188c <LoRa_Task+0x2f8>)
 8001690:	487c      	ldr	r0, [pc, #496]	@ (8001884 <LoRa_Task+0x2f0>)
 8001692:	f005 fe15 	bl	80072c0 <strncmp>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d111      	bne.n	80016c0 <LoRa_Task+0x12c>
                        // Step 2: Reply with "ACK"
                        uint8_t ack_msg[] = LORA_ACK_MSG;
 800169c:	4b7c      	ldr	r3, [pc, #496]	@ (8001890 <LoRa_Task+0x2fc>)
 800169e:	63bb      	str	r3, [r7, #56]	@ 0x38
                        LoRa_SendPacket(ack_msg, sizeof(ack_msg) - 1);
 80016a0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80016a4:	2103      	movs	r1, #3
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff fef7 	bl	800149a <LoRa_SendPacket>
                        Debug_Print("Sent: ACK\r\n");
 80016ac:	4879      	ldr	r0, [pc, #484]	@ (8001894 <LoRa_Task+0x300>)
 80016ae:	f000 f93b 	bl	8001928 <Debug_Print>

                        connectionStatus = 1;
 80016b2:	4b73      	ldr	r3, [pc, #460]	@ (8001880 <LoRa_Task+0x2ec>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	701a      	strb	r2, [r3, #0]
                        z = 6; // connection established
 80016b8:	4b6b      	ldr	r3, [pc, #428]	@ (8001868 <LoRa_Task+0x2d4>)
 80016ba:	2206      	movs	r2, #6
 80016bc:	701a      	strb	r2, [r3, #0]
                        break;
 80016be:	e008      	b.n	80016d2 <LoRa_Task+0x13e>
                    }
                }
                HAL_Delay(25);
 80016c0:	2019      	movs	r0, #25
 80016c2:	f001 ff0d 	bl	80034e0 <HAL_Delay>
            for (int i = 0; i < 40; i++) {   // ~1s timeout (40 x 25ms)
 80016c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80016c8:	3301      	adds	r3, #1
 80016ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80016cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80016ce:	2b27      	cmp	r3, #39	@ 0x27
 80016d0:	ddc3      	ble.n	800165a <LoRa_Task+0xc6>
            }

            // Step 3: Handle failed connection
            if (!connectionStatus) {
 80016d2:	4b6b      	ldr	r3, [pc, #428]	@ (8001880 <LoRa_Task+0x2ec>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d10a      	bne.n	80016f0 <LoRa_Task+0x15c>
                Debug_Print("Connection failed. No PING received.\r\n");
 80016da:	486f      	ldr	r0, [pc, #444]	@ (8001898 <LoRa_Task+0x304>)
 80016dc:	f000 f924 	bl	8001928 <Debug_Print>
                z = 7;
 80016e0:	4b61      	ldr	r3, [pc, #388]	@ (8001868 <LoRa_Task+0x2d4>)
 80016e2:	2207      	movs	r2, #7
 80016e4:	701a      	strb	r2, [r3, #0]
                HAL_Delay(1000); // retry delay
 80016e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016ea:	f001 fef9 	bl	80034e0 <HAL_Delay>
 80016ee:	e046      	b.n	800177e <LoRa_Task+0x1ea>
            } else {
                // Step 4: Wait for HELLO after PING->ACK
                Debug_Print("Waiting for HELLO...\r\n");
 80016f0:	486a      	ldr	r0, [pc, #424]	@ (800189c <LoRa_Task+0x308>)
 80016f2:	f000 f919 	bl	8001928 <Debug_Print>
                connectionStatus = 0; // reset until HELLO is confirmed
 80016f6:	4b62      	ldr	r3, [pc, #392]	@ (8001880 <LoRa_Task+0x2ec>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	701a      	strb	r2, [r3, #0]

                for (int j = 0; j < 40; j++) {   // ~1s timeout for HELLO
 80016fc:	2300      	movs	r3, #0
 80016fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001700:	e030      	b.n	8001764 <LoRa_Task+0x1d0>
                    uint8_t rx_len = LoRa_ReceivePacket(rxBuffer);
 8001702:	4860      	ldr	r0, [pc, #384]	@ (8001884 <LoRa_Task+0x2f0>)
 8001704:	f7ff ff0d 	bl	8001522 <LoRa_ReceivePacket>
 8001708:	4603      	mov	r3, r0
 800170a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                    if (rx_len > 0) {
 800170e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001712:	2b00      	cmp	r3, #0
 8001714:	d020      	beq.n	8001758 <LoRa_Task+0x1c4>
                        rxBuffer[rx_len] = '\0';
 8001716:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800171a:	4a5a      	ldr	r2, [pc, #360]	@ (8001884 <LoRa_Task+0x2f0>)
 800171c:	2100      	movs	r1, #0
 800171e:	54d1      	strb	r1, [r2, r3]
                        char dbg_rx2[LORA_BUFFER_SIZE];
                        sprintf(dbg_rx2, "Data Received: %s\r\n", rxBuffer);
 8001720:	463b      	mov	r3, r7
 8001722:	4a58      	ldr	r2, [pc, #352]	@ (8001884 <LoRa_Task+0x2f0>)
 8001724:	495e      	ldr	r1, [pc, #376]	@ (80018a0 <LoRa_Task+0x30c>)
 8001726:	4618      	mov	r0, r3
 8001728:	f005 fd72 	bl	8007210 <siprintf>
                        Debug_Print(dbg_rx2);
 800172c:	463b      	mov	r3, r7
 800172e:	4618      	mov	r0, r3
 8001730:	f000 f8fa 	bl	8001928 <Debug_Print>

                        if (strncmp((char*)rxBuffer, LORA_HELLO_MSG, strlen(LORA_HELLO_MSG)) == 0) {
 8001734:	2205      	movs	r2, #5
 8001736:	495b      	ldr	r1, [pc, #364]	@ (80018a4 <LoRa_Task+0x310>)
 8001738:	4852      	ldr	r0, [pc, #328]	@ (8001884 <LoRa_Task+0x2f0>)
 800173a:	f005 fdc1 	bl	80072c0 <strncmp>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d109      	bne.n	8001758 <LoRa_Task+0x1c4>
                            Debug_Print("HELLO received -> Final Connection Established\r\n");
 8001744:	4858      	ldr	r0, [pc, #352]	@ (80018a8 <LoRa_Task+0x314>)
 8001746:	f000 f8ef 	bl	8001928 <Debug_Print>
                            connectionStatus = 1;
 800174a:	4b4d      	ldr	r3, [pc, #308]	@ (8001880 <LoRa_Task+0x2ec>)
 800174c:	2201      	movs	r2, #1
 800174e:	701a      	strb	r2, [r3, #0]
                            z = 8; // Final established state
 8001750:	4b45      	ldr	r3, [pc, #276]	@ (8001868 <LoRa_Task+0x2d4>)
 8001752:	2208      	movs	r2, #8
 8001754:	701a      	strb	r2, [r3, #0]
 8001756:	e008      	b.n	800176a <LoRa_Task+0x1d6>
                            break;
                        }
                    }
                    HAL_Delay(25);
 8001758:	2019      	movs	r0, #25
 800175a:	f001 fec1 	bl	80034e0 <HAL_Delay>
                for (int j = 0; j < 40; j++) {   // ~1s timeout for HELLO
 800175e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001760:	3301      	adds	r3, #1
 8001762:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001764:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001766:	2b27      	cmp	r3, #39	@ 0x27
 8001768:	ddcb      	ble.n	8001702 <LoRa_Task+0x16e>
                }

                if (!connectionStatus) {
 800176a:	4b45      	ldr	r3, [pc, #276]	@ (8001880 <LoRa_Task+0x2ec>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d105      	bne.n	800177e <LoRa_Task+0x1ea>
                    Debug_Print("HELLO not received after ACK.\r\n");
 8001772:	484e      	ldr	r0, [pc, #312]	@ (80018ac <LoRa_Task+0x318>)
 8001774:	f000 f8d8 	bl	8001928 <Debug_Print>
                    z = 9; // special error state for HELLO timeout
 8001778:	4b3b      	ldr	r3, [pc, #236]	@ (8001868 <LoRa_Task+0x2d4>)
 800177a:	2209      	movs	r2, #9
 800177c:	701a      	strb	r2, [r3, #0]
                }
            }

            HAL_Delay(100);
 800177e:	2064      	movs	r0, #100	@ 0x64
 8001780:	f001 feae 	bl	80034e0 <HAL_Delay>
            break;
 8001784:	e0c2      	b.n	800190c <LoRa_Task+0x378>

        case LORA_MODE_TRANCEIVER:
            // Transceiver logic (send and receive)
            Debug_Print("LoRa Mode: Transceiver\r\n");
 8001786:	484a      	ldr	r0, [pc, #296]	@ (80018b0 <LoRa_Task+0x31c>)
 8001788:	f000 f8ce 	bl	8001928 <Debug_Print>

            // Try to receive first
            uint8_t rx_len_tr = LoRa_ReceivePacket(rxBuffer);
 800178c:	483d      	ldr	r0, [pc, #244]	@ (8001884 <LoRa_Task+0x2f0>)
 800178e:	f7ff fec8 	bl	8001522 <LoRa_ReceivePacket>
 8001792:	4603      	mov	r3, r0
 8001794:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
            if (rx_len_tr > 0) {
 8001798:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800179c:	2b00      	cmp	r3, #0
 800179e:	d021      	beq.n	80017e4 <LoRa_Task+0x250>
                rxBuffer[rx_len_tr] = '\0'; // null terminate
 80017a0:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 80017a4:	4a37      	ldr	r2, [pc, #220]	@ (8001884 <LoRa_Task+0x2f0>)
 80017a6:	2100      	movs	r1, #0
 80017a8:	54d1      	strb	r1, [r2, r3]
                char dbg_rx_tr[LORA_BUFFER_SIZE];
                sprintf(dbg_rx_tr, "Received: %s\r\n", rxBuffer);
 80017aa:	463b      	mov	r3, r7
 80017ac:	4a35      	ldr	r2, [pc, #212]	@ (8001884 <LoRa_Task+0x2f0>)
 80017ae:	4936      	ldr	r1, [pc, #216]	@ (8001888 <LoRa_Task+0x2f4>)
 80017b0:	4618      	mov	r0, r3
 80017b2:	f005 fd2d 	bl	8007210 <siprintf>
                Debug_Print(dbg_rx_tr);
 80017b6:	463b      	mov	r3, r7
 80017b8:	4618      	mov	r0, r3
 80017ba:	f000 f8b5 	bl	8001928 <Debug_Print>

                // If "PING" is received, send "ACK"
                if (strncmp((char*)rxBuffer, LORA_PING_MSG, strlen(LORA_PING_MSG)) == 0) {
 80017be:	2204      	movs	r2, #4
 80017c0:	4932      	ldr	r1, [pc, #200]	@ (800188c <LoRa_Task+0x2f8>)
 80017c2:	4830      	ldr	r0, [pc, #192]	@ (8001884 <LoRa_Task+0x2f0>)
 80017c4:	f005 fd7c 	bl	80072c0 <strncmp>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d10a      	bne.n	80017e4 <LoRa_Task+0x250>
                    uint8_t ack_msg[] = LORA_ACK_MSG;
 80017ce:	4b30      	ldr	r3, [pc, #192]	@ (8001890 <LoRa_Task+0x2fc>)
 80017d0:	637b      	str	r3, [r7, #52]	@ 0x34
                    LoRa_SendPacket(ack_msg, sizeof(ack_msg) - 1);
 80017d2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80017d6:	2103      	movs	r1, #3
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff fe5e 	bl	800149a <LoRa_SendPacket>
                    Debug_Print("Sent: ACK\r\n");
 80017de:	482d      	ldr	r0, [pc, #180]	@ (8001894 <LoRa_Task+0x300>)
 80017e0:	f000 f8a2 	bl	8001928 <Debug_Print>
                }
            }

            // Then send a PING
            uint8_t tx_msg_tr[] = LORA_PING_MSG;
 80017e4:	4b33      	ldr	r3, [pc, #204]	@ (80018b4 <LoRa_Task+0x320>)
 80017e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80017e8:	2300      	movs	r3, #0
 80017ea:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
            LoRa_SendPacket(tx_msg_tr, sizeof(tx_msg_tr) - 1);
 80017ee:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80017f2:	2104      	movs	r1, #4
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff fe50 	bl	800149a <LoRa_SendPacket>
            Debug_Print("Sent: PING\r\n");
 80017fa:	482f      	ldr	r0, [pc, #188]	@ (80018b8 <LoRa_Task+0x324>)
 80017fc:	f000 f894 	bl	8001928 <Debug_Print>

            // Wait for ACK (max 500 ms)
            connectionStatus = 0;
 8001800:	4b1f      	ldr	r3, [pc, #124]	@ (8001880 <LoRa_Task+0x2ec>)
 8001802:	2200      	movs	r2, #0
 8001804:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < 20; i++) {   // 20 x 25ms = 500ms
 8001806:	2300      	movs	r3, #0
 8001808:	657b      	str	r3, [r7, #84]	@ 0x54
 800180a:	e061      	b.n	80018d0 <LoRa_Task+0x33c>
                uint8_t len = LoRa_ReceivePacket(rxBuffer);
 800180c:	481d      	ldr	r0, [pc, #116]	@ (8001884 <LoRa_Task+0x2f0>)
 800180e:	f7ff fe88 	bl	8001522 <LoRa_ReceivePacket>
 8001812:	4603      	mov	r3, r0
 8001814:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
                if (len > 0) {
 8001818:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800181c:	2b00      	cmp	r3, #0
 800181e:	d051      	beq.n	80018c4 <LoRa_Task+0x330>
                    rxBuffer[len] = '\0'; // null terminate
 8001820:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8001824:	4a17      	ldr	r2, [pc, #92]	@ (8001884 <LoRa_Task+0x2f0>)
 8001826:	2100      	movs	r1, #0
 8001828:	54d1      	strb	r1, [r2, r3]
                    char dbg_ack[LORA_BUFFER_SIZE];
                    sprintf(dbg_ack, "Received ACK check: %s\r\n", rxBuffer);
 800182a:	463b      	mov	r3, r7
 800182c:	4a15      	ldr	r2, [pc, #84]	@ (8001884 <LoRa_Task+0x2f0>)
 800182e:	4923      	ldr	r1, [pc, #140]	@ (80018bc <LoRa_Task+0x328>)
 8001830:	4618      	mov	r0, r3
 8001832:	f005 fced 	bl	8007210 <siprintf>
                    Debug_Print(dbg_ack);
 8001836:	463b      	mov	r3, r7
 8001838:	4618      	mov	r0, r3
 800183a:	f000 f875 	bl	8001928 <Debug_Print>

                    if (strncmp((char*)rxBuffer, LORA_ACK_MSG, strlen(LORA_ACK_MSG)) == 0) {
 800183e:	2203      	movs	r2, #3
 8001840:	491f      	ldr	r1, [pc, #124]	@ (80018c0 <LoRa_Task+0x32c>)
 8001842:	4810      	ldr	r0, [pc, #64]	@ (8001884 <LoRa_Task+0x2f0>)
 8001844:	f005 fd3c 	bl	80072c0 <strncmp>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d13a      	bne.n	80018c4 <LoRa_Task+0x330>
                        connectionStatus = 1;
 800184e:	4b0c      	ldr	r3, [pc, #48]	@ (8001880 <LoRa_Task+0x2ec>)
 8001850:	2201      	movs	r2, #1
 8001852:	701a      	strb	r2, [r3, #0]
                        z = 3;
 8001854:	4b04      	ldr	r3, [pc, #16]	@ (8001868 <LoRa_Task+0x2d4>)
 8001856:	2203      	movs	r2, #3
 8001858:	701a      	strb	r2, [r3, #0]
 800185a:	e03c      	b.n	80018d6 <LoRa_Task+0x342>
 800185c:	20000018 	.word	0x20000018
 8001860:	08008450 	.word	0x08008450
 8001864:	08008474 	.word	0x08008474
 8001868:	2000012c 	.word	0x2000012c
 800186c:	08008490 	.word	0x08008490
 8001870:	080084b4 	.word	0x080084b4
 8001874:	0800865c 	.word	0x0800865c
 8001878:	080084d0 	.word	0x080084d0
 800187c:	080084e4 	.word	0x080084e4
 8001880:	2000012d 	.word	0x2000012d
 8001884:	2000010c 	.word	0x2000010c
 8001888:	080084fc 	.word	0x080084fc
 800188c:	0800850c 	.word	0x0800850c
 8001890:	004b4341 	.word	0x004b4341
 8001894:	08008514 	.word	0x08008514
 8001898:	08008520 	.word	0x08008520
 800189c:	08008548 	.word	0x08008548
 80018a0:	08008560 	.word	0x08008560
 80018a4:	08008574 	.word	0x08008574
 80018a8:	0800857c 	.word	0x0800857c
 80018ac:	080085b0 	.word	0x080085b0
 80018b0:	080085d0 	.word	0x080085d0
 80018b4:	474e4950 	.word	0x474e4950
 80018b8:	080085ec 	.word	0x080085ec
 80018bc:	080085fc 	.word	0x080085fc
 80018c0:	08008618 	.word	0x08008618
                        break;
                    }
                }
                HAL_Delay(25);
 80018c4:	2019      	movs	r0, #25
 80018c6:	f001 fe0b 	bl	80034e0 <HAL_Delay>
            for (int i = 0; i < 20; i++) {   // 20 x 25ms = 500ms
 80018ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018cc:	3301      	adds	r3, #1
 80018ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80018d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018d2:	2b13      	cmp	r3, #19
 80018d4:	dd9a      	ble.n	800180c <LoRa_Task+0x278>
            }

            if (!connectionStatus) {
 80018d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001914 <LoRa_Task+0x380>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d106      	bne.n	80018ec <LoRa_Task+0x358>
                Debug_Print("Connection: LOST\r\n");
 80018de:	480e      	ldr	r0, [pc, #56]	@ (8001918 <LoRa_Task+0x384>)
 80018e0:	f000 f822 	bl	8001928 <Debug_Print>
                z = 4;
 80018e4:	4b0d      	ldr	r3, [pc, #52]	@ (800191c <LoRa_Task+0x388>)
 80018e6:	2204      	movs	r2, #4
 80018e8:	701a      	strb	r2, [r3, #0]
 80018ea:	e002      	b.n	80018f2 <LoRa_Task+0x35e>
            } else {
                Debug_Print("Connection: OK\r\n");
 80018ec:	480c      	ldr	r0, [pc, #48]	@ (8001920 <LoRa_Task+0x38c>)
 80018ee:	f000 f81b 	bl	8001928 <Debug_Print>
            }

            HAL_Delay(1000); // Delay before next cycle in transceiver mode
 80018f2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018f6:	f001 fdf3 	bl	80034e0 <HAL_Delay>
            break;
 80018fa:	e007      	b.n	800190c <LoRa_Task+0x378>

        default:
            Debug_Print("Invalid LoRa Mode!\r\n");
 80018fc:	4809      	ldr	r0, [pc, #36]	@ (8001924 <LoRa_Task+0x390>)
 80018fe:	f000 f813 	bl	8001928 <Debug_Print>
            HAL_Delay(1000);
 8001902:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001906:	f001 fdeb 	bl	80034e0 <HAL_Delay>
            break;
 800190a:	bf00      	nop
    }
}
 800190c:	3760      	adds	r7, #96	@ 0x60
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	2000012d 	.word	0x2000012d
 8001918:	0800861c 	.word	0x0800861c
 800191c:	2000012c 	.word	0x2000012c
 8001920:	08008630 	.word	0x08008630
 8001924:	08008644 	.word	0x08008644

08001928 <Debug_Print>:
}
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Debug_Print(char *msg) {
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
    // Use the new UART_TransmitString function
    UART_TransmitString(&huart1, msg);
 8001930:	6879      	ldr	r1, [r7, #4]
 8001932:	4803      	ldr	r0, [pc, #12]	@ (8001940 <Debug_Print+0x18>)
 8001934:	f001 fcf6 	bl	8003324 <UART_TransmitString>
}
 8001938:	bf00      	nop
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20000220 	.word	0x20000220

08001944 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800194a:	f001 fd67 	bl	800341c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800194e:	f000 f867 	bl	8001a20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001952:	f000 f98b 	bl	8001c6c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001956:	f000 f8bd 	bl	8001ad4 <MX_ADC1_Init>
//  MX_RTC_Init();
  MX_SPI1_Init();
 800195a:	f000 f927 	bl	8001bac <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800195e:	f000 f95b 	bl	8001c18 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8001962:	f000 f8f5 	bl	8001b50 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8001966:	f7ff fad4 	bl	8000f12 <lcd_init>
  ADC_Init(&hadc1);
 800196a:	482a      	ldr	r0, [pc, #168]	@ (8001a14 <main+0xd0>)
 800196c:	f7ff f86e 	bl	8000a4c <ADC_Init>
  LoRa_Init(); // Initialize LoRa module
 8001970:	f7ff fd2c 	bl	80013cc <LoRa_Init>
//  I2C_Scan();
  Screen_Init();
 8001974:	f001 f98c 	bl	8002c90 <Screen_Init>
  UART_Init(); // Initialize UART reception (starts the first IT)
 8001978:	f001 fcb6 	bl	80032e8 <UART_Init>
  Switches_Init();
 800197c:	f001 fc20 	bl	80031c0 <Switches_Init>
//
//  Debug_Print("System Initialized\r\n");
  uint8_t modem = LoRa_ReadReg(0x1D);
 8001980:	201d      	movs	r0, #29
 8001982:	f7ff fc39 	bl	80011f8 <LoRa_ReadReg>
 8001986:	4603      	mov	r3, r0
 8001988:	72fb      	strb	r3, [r7, #11]
  uint8_t modem2 = LoRa_ReadReg(0x1E);
 800198a:	201e      	movs	r0, #30
 800198c:	f7ff fc34 	bl	80011f8 <LoRa_ReadReg>
 8001990:	4603      	mov	r3, r0
 8001992:	72bb      	strb	r3, [r7, #10]
//
//      }
//  }

         // Process all active modes
         ModelHandle_Process();
 8001994:	f000 fe4c 	bl	8002630 <ModelHandle_Process>
  /* Infinite loop */
//  /* USER CODE BEGIN WHILE */
         while (1)
         {
             /* --- UI handling (switches + LCD) --- */
             Screen_HandleSwitches();  // Check buttons and update UI state
 8001998:	f001 fa1c 	bl	8002dd4 <Screen_HandleSwitches>
             Screen_Update();          // Refresh display and cursor blink
 800199c:	f001 f8c4 	bl	8002b28 <Screen_Update>
             /* --- Periodic data acquisition --- */
             ADC_ReadAllChannels(&hadc1, &adcData);   // update voltages
 80019a0:	491d      	ldr	r1, [pc, #116]	@ (8001a18 <main+0xd4>)
 80019a2:	481c      	ldr	r0, [pc, #112]	@ (8001a14 <main+0xd0>)
 80019a4:	f7ff f862 	bl	8000a6c <ADC_ReadAllChannels>
             Get_Time();                              // update RTC
 80019a8:	f000 fec0 	bl	800272c <Get_Time>
             LoRa_Task();                             // maintain LoRa stack
 80019ac:	f7ff fdf2 	bl	8001594 <LoRa_Task>

             /* --- UART command handling --- */
             if (UART_GetReceivedPacket(receivedUartPacket, sizeof(receivedUartPacket))) {
 80019b0:	2140      	movs	r1, #64	@ 0x40
 80019b2:	481a      	ldr	r0, [pc, #104]	@ (8001a1c <main+0xd8>)
 80019b4:	f001 fcca 	bl	800334c <UART_GetReceivedPacket>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d01f      	beq.n	80019fe <main+0xba>
                 char *p = receivedUartPacket;
 80019be:	4b17      	ldr	r3, [pc, #92]	@ (8001a1c <main+0xd8>)
 80019c0:	60fb      	str	r3, [r7, #12]
                 size_t n = strlen(receivedUartPacket);
 80019c2:	4816      	ldr	r0, [pc, #88]	@ (8001a1c <main+0xd8>)
 80019c4:	f7fe fbcc 	bl	8000160 <strlen>
 80019c8:	6078      	str	r0, [r7, #4]
                 if (n >= 2 && p[0] == '@' && p[n-1] == '#') {
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d913      	bls.n	80019f8 <main+0xb4>
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b40      	cmp	r3, #64	@ 0x40
 80019d6:	d10f      	bne.n	80019f8 <main+0xb4>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3b01      	subs	r3, #1
 80019dc:	68fa      	ldr	r2, [r7, #12]
 80019de:	4413      	add	r3, r2
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b23      	cmp	r3, #35	@ 0x23
 80019e4:	d108      	bne.n	80019f8 <main+0xb4>
                     p[n-1] = '\0';  // strip end marker
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	3b01      	subs	r3, #1
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	4413      	add	r3, r2
 80019ee:	2200      	movs	r2, #0
 80019f0:	701a      	strb	r2, [r3, #0]
                     p++;            // strip start marker
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	3301      	adds	r3, #1
 80019f6:	60fb      	str	r3, [r7, #12]
                 }
                 ModelHandle_ProcessUartCommand(p);   // parse + update model
 80019f8:	68f8      	ldr	r0, [r7, #12]
 80019fa:	f000 fc89 	bl	8002310 <ModelHandle_ProcessUartCommand>
             }

             /* --- Business logic: model → hardware --- */
             ModelHandle_Process();   // compute intents for motor, relays, LEDs, timers
 80019fe:	f000 fe17 	bl	8002630 <ModelHandle_Process>
             Relay_All(false);        // Example: you can still drive relays individually in model
 8001a02:	2000      	movs	r0, #0
 8001a04:	f000 fe62 	bl	80026cc <Relay_All>
             LED_Task();              // blink patterns / status LEDs
 8001a08:	f7ff fb08 	bl	800101c <LED_Task>
//
//             /* --- Cooperative delay for smoothness --- */
             HAL_Delay(10);           // ~100Hz loop rate (good for UI responsiveness)
 8001a0c:	200a      	movs	r0, #10
 8001a0e:	f001 fd67 	bl	80034e0 <HAL_Delay>
         {
 8001a12:	e7c1      	b.n	8001998 <main+0x54>
 8001a14:	20000130 	.word	0x20000130
 8001a18:	20000268 	.word	0x20000268
 8001a1c:	200002a0 	.word	0x200002a0

08001a20 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */


void SystemClock_Config(void) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b094      	sub	sp, #80	@ 0x50
 8001a24:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a26:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a2a:	2228      	movs	r2, #40	@ 0x28
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f005 fc3e 	bl	80072b0 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a34:	f107 0314 	add.w	r3, r7, #20
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a44:	1d3b      	adds	r3, r7, #4
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	605a      	str	r2, [r3, #4]
 8001a4c:	609a      	str	r2, [r3, #8]
 8001a4e:	60da      	str	r2, [r3, #12]

    // Use HSI (8 MHz internal) with PLL
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a50:	2302      	movs	r3, #2
 8001a52:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a54:	2301      	movs	r3, #1
 8001a56:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a58:	2310      	movs	r3, #16
 8001a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2; // HSI/2 = 4 MHz
 8001a60:	2300      	movs	r3, #0
 8001a62:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;             // 4*16 = 64 MHz
 8001a64:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8001a68:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) { Error_Handler(); }
 8001a6a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f003 fd46 	bl	8005500 <HAL_RCC_OscConfig>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <SystemClock_Config+0x5e>
 8001a7a:	f000 f98b 	bl	8001d94 <Error_Handler>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001a7e:	230f      	movs	r3, #15
 8001a80:	617b      	str	r3, [r7, #20]
                                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK; // Updated line
 8001a82:	2302      	movs	r3, #2
 8001a84:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a8e:	623b      	str	r3, [r7, #32]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a90:	2300      	movs	r3, #0
 8001a92:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) { Error_Handler(); }
 8001a94:	f107 0314 	add.w	r3, r7, #20
 8001a98:	2102      	movs	r1, #2
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f003 ffb2 	bl	8005a04 <HAL_RCC_ClockConfig>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <SystemClock_Config+0x8a>
 8001aa6:	f000 f975 	bl	8001d94 <Error_Handler>

    // Use LSI (internal ~40 kHz) for RTC, and HSI/6 for ADC
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC | RCC_PERIPHCLK_ADC;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	607b      	str	r3, [r7, #4]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001aae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ab2:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001ab4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ab8:	60fb      	str	r3, [r7, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) { Error_Handler(); }
 8001aba:	1d3b      	adds	r3, r7, #4
 8001abc:	4618      	mov	r0, r3
 8001abe:	f004 f92f 	bl	8005d20 <HAL_RCCEx_PeriphCLKConfig>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <SystemClock_Config+0xac>
 8001ac8:	f000 f964 	bl	8001d94 <Error_Handler>
}
 8001acc:	bf00      	nop
 8001ace:	3750      	adds	r7, #80	@ 0x50
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ada:	1d3b      	adds	r3, r7, #4
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001ae4:	4b18      	ldr	r3, [pc, #96]	@ (8001b48 <MX_ADC1_Init+0x74>)
 8001ae6:	4a19      	ldr	r2, [pc, #100]	@ (8001b4c <MX_ADC1_Init+0x78>)
 8001ae8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001aea:	4b17      	ldr	r3, [pc, #92]	@ (8001b48 <MX_ADC1_Init+0x74>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001af0:	4b15      	ldr	r3, [pc, #84]	@ (8001b48 <MX_ADC1_Init+0x74>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001af6:	4b14      	ldr	r3, [pc, #80]	@ (8001b48 <MX_ADC1_Init+0x74>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001afc:	4b12      	ldr	r3, [pc, #72]	@ (8001b48 <MX_ADC1_Init+0x74>)
 8001afe:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001b02:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b04:	4b10      	ldr	r3, [pc, #64]	@ (8001b48 <MX_ADC1_Init+0x74>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b48 <MX_ADC1_Init+0x74>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b10:	480d      	ldr	r0, [pc, #52]	@ (8001b48 <MX_ADC1_Init+0x74>)
 8001b12:	f001 fd09 	bl	8003528 <HAL_ADC_Init>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001b1c:	f000 f93a 	bl	8001d94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b24:	2301      	movs	r3, #1
 8001b26:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b2c:	1d3b      	adds	r3, r7, #4
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4805      	ldr	r0, [pc, #20]	@ (8001b48 <MX_ADC1_Init+0x74>)
 8001b32:	f001 ff91 	bl	8003a58 <HAL_ADC_ConfigChannel>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001b3c:	f000 f92a 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b40:	bf00      	nop
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	20000130 	.word	0x20000130
 8001b4c:	40012400 	.word	0x40012400

08001b50 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b54:	4b12      	ldr	r3, [pc, #72]	@ (8001ba0 <MX_I2C2_Init+0x50>)
 8001b56:	4a13      	ldr	r2, [pc, #76]	@ (8001ba4 <MX_I2C2_Init+0x54>)
 8001b58:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001b5a:	4b11      	ldr	r3, [pc, #68]	@ (8001ba0 <MX_I2C2_Init+0x50>)
 8001b5c:	4a12      	ldr	r2, [pc, #72]	@ (8001ba8 <MX_I2C2_Init+0x58>)
 8001b5e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b60:	4b0f      	ldr	r3, [pc, #60]	@ (8001ba0 <MX_I2C2_Init+0x50>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001b66:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba0 <MX_I2C2_Init+0x50>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba0 <MX_I2C2_Init+0x50>)
 8001b6e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b72:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b74:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba0 <MX_I2C2_Init+0x50>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001b7a:	4b09      	ldr	r3, [pc, #36]	@ (8001ba0 <MX_I2C2_Init+0x50>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b80:	4b07      	ldr	r3, [pc, #28]	@ (8001ba0 <MX_I2C2_Init+0x50>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b86:	4b06      	ldr	r3, [pc, #24]	@ (8001ba0 <MX_I2C2_Init+0x50>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b8c:	4804      	ldr	r0, [pc, #16]	@ (8001ba0 <MX_I2C2_Init+0x50>)
 8001b8e:	f002 fc55 	bl	800443c <HAL_I2C_Init>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001b98:	f000 f8fc 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b9c:	bf00      	nop
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	20000160 	.word	0x20000160
 8001ba4:	40005800 	.word	0x40005800
 8001ba8:	000186a0 	.word	0x000186a0

08001bac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001bb0:	4b17      	ldr	r3, [pc, #92]	@ (8001c10 <MX_SPI1_Init+0x64>)
 8001bb2:	4a18      	ldr	r2, [pc, #96]	@ (8001c14 <MX_SPI1_Init+0x68>)
 8001bb4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bb6:	4b16      	ldr	r3, [pc, #88]	@ (8001c10 <MX_SPI1_Init+0x64>)
 8001bb8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001bbc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001bbe:	4b14      	ldr	r3, [pc, #80]	@ (8001c10 <MX_SPI1_Init+0x64>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bc4:	4b12      	ldr	r3, [pc, #72]	@ (8001c10 <MX_SPI1_Init+0x64>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bca:	4b11      	ldr	r3, [pc, #68]	@ (8001c10 <MX_SPI1_Init+0x64>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001c10 <MX_SPI1_Init+0x64>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c10 <MX_SPI1_Init+0x64>)
 8001bd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bdc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001bde:	4b0c      	ldr	r3, [pc, #48]	@ (8001c10 <MX_SPI1_Init+0x64>)
 8001be0:	2218      	movs	r2, #24
 8001be2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001be4:	4b0a      	ldr	r3, [pc, #40]	@ (8001c10 <MX_SPI1_Init+0x64>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bea:	4b09      	ldr	r3, [pc, #36]	@ (8001c10 <MX_SPI1_Init+0x64>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bf0:	4b07      	ldr	r3, [pc, #28]	@ (8001c10 <MX_SPI1_Init+0x64>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001bf6:	4b06      	ldr	r3, [pc, #24]	@ (8001c10 <MX_SPI1_Init+0x64>)
 8001bf8:	220a      	movs	r2, #10
 8001bfa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bfc:	4804      	ldr	r0, [pc, #16]	@ (8001c10 <MX_SPI1_Init+0x64>)
 8001bfe:	f004 fa2e 	bl	800605e <HAL_SPI_Init>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001c08:	f000 f8c4 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c0c:	bf00      	nop
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	200001c8 	.word	0x200001c8
 8001c14:	40013000 	.word	0x40013000

08001c18 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c1c:	4b11      	ldr	r3, [pc, #68]	@ (8001c64 <MX_USART1_UART_Init+0x4c>)
 8001c1e:	4a12      	ldr	r2, [pc, #72]	@ (8001c68 <MX_USART1_UART_Init+0x50>)
 8001c20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c22:	4b10      	ldr	r3, [pc, #64]	@ (8001c64 <MX_USART1_UART_Init+0x4c>)
 8001c24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c64 <MX_USART1_UART_Init+0x4c>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c30:	4b0c      	ldr	r3, [pc, #48]	@ (8001c64 <MX_USART1_UART_Init+0x4c>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c36:	4b0b      	ldr	r3, [pc, #44]	@ (8001c64 <MX_USART1_UART_Init+0x4c>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c3c:	4b09      	ldr	r3, [pc, #36]	@ (8001c64 <MX_USART1_UART_Init+0x4c>)
 8001c3e:	220c      	movs	r2, #12
 8001c40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c42:	4b08      	ldr	r3, [pc, #32]	@ (8001c64 <MX_USART1_UART_Init+0x4c>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c48:	4b06      	ldr	r3, [pc, #24]	@ (8001c64 <MX_USART1_UART_Init+0x4c>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c4e:	4805      	ldr	r0, [pc, #20]	@ (8001c64 <MX_USART1_UART_Init+0x4c>)
 8001c50:	f004 ff9b 	bl	8006b8a <HAL_UART_Init>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c5a:	f000 f89b 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000220 	.word	0x20000220
 8001c68:	40013800 	.word	0x40013800

08001c6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b088      	sub	sp, #32
 8001c70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c72:	f107 0310 	add.w	r3, r7, #16
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	605a      	str	r2, [r3, #4]
 8001c7c:	609a      	str	r2, [r3, #8]
 8001c7e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c80:	4b40      	ldr	r3, [pc, #256]	@ (8001d84 <MX_GPIO_Init+0x118>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	4a3f      	ldr	r2, [pc, #252]	@ (8001d84 <MX_GPIO_Init+0x118>)
 8001c86:	f043 0310 	orr.w	r3, r3, #16
 8001c8a:	6193      	str	r3, [r2, #24]
 8001c8c:	4b3d      	ldr	r3, [pc, #244]	@ (8001d84 <MX_GPIO_Init+0x118>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	f003 0310 	and.w	r3, r3, #16
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c98:	4b3a      	ldr	r3, [pc, #232]	@ (8001d84 <MX_GPIO_Init+0x118>)
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	4a39      	ldr	r2, [pc, #228]	@ (8001d84 <MX_GPIO_Init+0x118>)
 8001c9e:	f043 0320 	orr.w	r3, r3, #32
 8001ca2:	6193      	str	r3, [r2, #24]
 8001ca4:	4b37      	ldr	r3, [pc, #220]	@ (8001d84 <MX_GPIO_Init+0x118>)
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	f003 0320 	and.w	r3, r3, #32
 8001cac:	60bb      	str	r3, [r7, #8]
 8001cae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb0:	4b34      	ldr	r3, [pc, #208]	@ (8001d84 <MX_GPIO_Init+0x118>)
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	4a33      	ldr	r2, [pc, #204]	@ (8001d84 <MX_GPIO_Init+0x118>)
 8001cb6:	f043 0304 	orr.w	r3, r3, #4
 8001cba:	6193      	str	r3, [r2, #24]
 8001cbc:	4b31      	ldr	r3, [pc, #196]	@ (8001d84 <MX_GPIO_Init+0x118>)
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	607b      	str	r3, [r7, #4]
 8001cc6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc8:	4b2e      	ldr	r3, [pc, #184]	@ (8001d84 <MX_GPIO_Init+0x118>)
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	4a2d      	ldr	r2, [pc, #180]	@ (8001d84 <MX_GPIO_Init+0x118>)
 8001cce:	f043 0308 	orr.w	r3, r3, #8
 8001cd2:	6193      	str	r3, [r2, #24]
 8001cd4:	4b2b      	ldr	r3, [pc, #172]	@ (8001d84 <MX_GPIO_Init+0x118>)
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	f003 0308 	and.w	r3, r3, #8
 8001cdc:	603b      	str	r3, [r7, #0]
 8001cde:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Relay1_Pin|Relay2_Pin|Relay3_Pin|LORA_STATUS_Pin
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f240 3147 	movw	r1, #839	@ 0x347
 8001ce6:	4828      	ldr	r0, [pc, #160]	@ (8001d88 <MX_GPIO_Init+0x11c>)
 8001ce8:	f002 fb77 	bl	80043da <HAL_GPIO_WritePin>
                          |LED4_Pin|LED5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LORA_SELECT_Pin, GPIO_PIN_RESET);
 8001cec:	2200      	movs	r2, #0
 8001cee:	f44f 4119 	mov.w	r1, #39168	@ 0x9900
 8001cf2:	4826      	ldr	r0, [pc, #152]	@ (8001d8c <MX_GPIO_Init+0x120>)
 8001cf4:	f002 fb71 	bl	80043da <HAL_GPIO_WritePin>

  /*Configure GPIO pins : AC_voltage_Pin AC_current_Pin */
  GPIO_InitStruct.Pin = AC_voltage_Pin|AC_current_Pin;
 8001cf8:	23c0      	movs	r3, #192	@ 0xc0
 8001cfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d00:	f107 0310 	add.w	r3, r7, #16
 8001d04:	4619      	mov	r1, r3
 8001d06:	4821      	ldr	r0, [pc, #132]	@ (8001d8c <MX_GPIO_Init+0x120>)
 8001d08:	f002 f9cc 	bl	80040a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Relay1_Pin Relay2_Pin Relay3_Pin LORA_STATUS_Pin
                           LED4_Pin LED5_Pin */
  GPIO_InitStruct.Pin = Relay1_Pin|Relay2_Pin|Relay3_Pin|LORA_STATUS_Pin
 8001d0c:	f240 3347 	movw	r3, #839	@ 0x347
 8001d10:	613b      	str	r3, [r7, #16]
                          |LED4_Pin|LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d12:	2301      	movs	r3, #1
 8001d14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d16:	2300      	movs	r3, #0
 8001d18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d1e:	f107 0310 	add.w	r3, r7, #16
 8001d22:	4619      	mov	r1, r3
 8001d24:	4818      	ldr	r0, [pc, #96]	@ (8001d88 <MX_GPIO_Init+0x11c>)
 8001d26:	f002 f9bd 	bl	80040a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWITCH1_Pin SWITCH2_Pin SWITCH3_Pin SWITCH4_Pin */
  GPIO_InitStruct.Pin = SWITCH1_Pin|SWITCH2_Pin|SWITCH3_Pin|SWITCH4_Pin;
 8001d2a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001d2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001d30:	4b17      	ldr	r3, [pc, #92]	@ (8001d90 <MX_GPIO_Init+0x124>)
 8001d32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d34:	2301      	movs	r3, #1
 8001d36:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d38:	f107 0310 	add.w	r3, r7, #16
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4812      	ldr	r0, [pc, #72]	@ (8001d88 <MX_GPIO_Init+0x11c>)
 8001d40:	f002 f9b0 	bl	80040a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LORA_SELECT_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LORA_SELECT_Pin;
 8001d44:	f44f 4319 	mov.w	r3, #39168	@ 0x9900
 8001d48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d52:	2302      	movs	r3, #2
 8001d54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d56:	f107 0310 	add.w	r3, r7, #16
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	480b      	ldr	r0, [pc, #44]	@ (8001d8c <MX_GPIO_Init+0x120>)
 8001d5e:	f002 f9a1 	bl	80040a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_DATA_Pin */
  GPIO_InitStruct.Pin = RF_DATA_Pin;
 8001d62:	2380      	movs	r3, #128	@ 0x80
 8001d64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d66:	2300      	movs	r3, #0
 8001d68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RF_DATA_GPIO_Port, &GPIO_InitStruct);
 8001d6e:	f107 0310 	add.w	r3, r7, #16
 8001d72:	4619      	mov	r1, r3
 8001d74:	4804      	ldr	r0, [pc, #16]	@ (8001d88 <MX_GPIO_Init+0x11c>)
 8001d76:	f002 f995 	bl	80040a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001d7a:	bf00      	nop
 8001d7c:	3720      	adds	r7, #32
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40021000 	.word	0x40021000
 8001d88:	40010c00 	.word	0x40010c00
 8001d8c:	40010800 	.word	0x40010800
 8001d90:	10310000 	.word	0x10310000

08001d94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d98:	b672      	cpsid	i
}
 8001d9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d9c:	bf00      	nop
 8001d9e:	e7fd      	b.n	8001d9c <Error_Handler+0x8>

08001da0 <now_ms>:
static const uint32_t MAX_CONT_RUN_MS = 2UL * 60UL * 60UL * 1000UL; // 2h
static bool           maxRunTimerArmed = false;
static uint32_t       maxRunStartTick  = 0;

/* ===== Utilities ===== */
static inline uint32_t now_ms(void) { return HAL_GetTick(); }
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	f001 fb92 	bl	80034cc <HAL_GetTick>
 8001da8:	4603      	mov	r3, r0
 8001daa:	4618      	mov	r0, r3
 8001dac:	bd80      	pop	{r7, pc}

08001dae <ModelHandle_TimeToSeconds>:

uint32_t ModelHandle_TimeToSeconds(uint8_t hh, uint8_t mm) {
 8001dae:	b480      	push	{r7}
 8001db0:	b083      	sub	sp, #12
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	4603      	mov	r3, r0
 8001db6:	460a      	mov	r2, r1
 8001db8:	71fb      	strb	r3, [r7, #7]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	71bb      	strb	r3, [r7, #6]
    return ((uint32_t)hh * 3600UL) + ((uint32_t)mm * 60UL);
 8001dbe:	79fb      	ldrb	r3, [r7, #7]
 8001dc0:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8001dc4:	fb02 f103 	mul.w	r1, r2, r3
 8001dc8:	79ba      	ldrb	r2, [r7, #6]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	011b      	lsls	r3, r3, #4
 8001dce:	1a9b      	subs	r3, r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	440b      	add	r3, r1
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bc80      	pop	{r7}
 8001ddc:	4770      	bx	lr
	...

08001de0 <motor_apply>:
    if (mm) *mm = (uint8_t)((sec % 3600UL) / 60UL);
}

/* ===== Motor ===== */
static void motor_apply(bool on)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	71fb      	strb	r3, [r7, #7]
    Relay_Set(1, on);
 8001dea:	79fb      	ldrb	r3, [r7, #7]
 8001dec:	4619      	mov	r1, r3
 8001dee:	2001      	movs	r0, #1
 8001df0:	f000 fc3e 	bl	8002670 <Relay_Set>
    motorStatus = on ? 1U : 0U;
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <motor_apply+0x1e>
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	e000      	b.n	8001e00 <motor_apply+0x20>
 8001dfe:	2200      	movs	r2, #0
 8001e00:	4b0d      	ldr	r3, [pc, #52]	@ (8001e38 <motor_apply+0x58>)
 8001e02:	701a      	strb	r2, [r3, #0]

    if (on) {
 8001e04:	79fb      	ldrb	r3, [r7, #7]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d00f      	beq.n	8001e2a <motor_apply+0x4a>
        if (!maxRunTimerArmed) {
 8001e0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e3c <motor_apply+0x5c>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	f083 0301 	eor.w	r3, r3, #1
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d00b      	beq.n	8001e30 <motor_apply+0x50>
            maxRunTimerArmed = true;
 8001e18:	4b08      	ldr	r3, [pc, #32]	@ (8001e3c <motor_apply+0x5c>)
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	701a      	strb	r2, [r3, #0]
            maxRunStartTick  = now_ms();
 8001e1e:	f7ff ffbf 	bl	8001da0 <now_ms>
 8001e22:	4603      	mov	r3, r0
 8001e24:	4a06      	ldr	r2, [pc, #24]	@ (8001e40 <motor_apply+0x60>)
 8001e26:	6013      	str	r3, [r2, #0]
        }
    } else {
        maxRunTimerArmed = false;
    }
}
 8001e28:	e002      	b.n	8001e30 <motor_apply+0x50>
        maxRunTimerArmed = false;
 8001e2a:	4b04      	ldr	r3, [pc, #16]	@ (8001e3c <motor_apply+0x5c>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	701a      	strb	r2, [r3, #0]
}
 8001e30:	bf00      	nop
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	200002e0 	.word	0x200002e0
 8001e3c:	2000032c 	.word	0x2000032c
 8001e40:	20000330 	.word	0x20000330

08001e44 <countdown_start>:

/* ===== Countdown ===== */
static void countdown_start(bool onMode, uint32_t seconds)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	6039      	str	r1, [r7, #0]
 8001e4e:	71fb      	strb	r3, [r7, #7]
    if (seconds == 0) { countdownActive = false; return; }
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d103      	bne.n	8001e5e <countdown_start+0x1a>
 8001e56:	4b12      	ldr	r3, [pc, #72]	@ (8001ea0 <countdown_start+0x5c>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	701a      	strb	r2, [r3, #0]
 8001e5c:	e01d      	b.n	8001e9a <countdown_start+0x56>
    countdownMode     = onMode;
 8001e5e:	4a11      	ldr	r2, [pc, #68]	@ (8001ea4 <countdown_start+0x60>)
 8001e60:	79fb      	ldrb	r3, [r7, #7]
 8001e62:	7013      	strb	r3, [r2, #0]
    countdownDuration = seconds;
 8001e64:	4a10      	ldr	r2, [pc, #64]	@ (8001ea8 <countdown_start+0x64>)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	6013      	str	r3, [r2, #0]
    countdownActive   = true;
 8001e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea0 <countdown_start+0x5c>)
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	701a      	strb	r2, [r3, #0]
    countdownDeadline = now_ms() + (seconds * 1000UL);
 8001e70:	f7ff ff96 	bl	8001da0 <now_ms>
 8001e74:	4602      	mov	r2, r0
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001e7c:	fb01 f303 	mul.w	r3, r1, r3
 8001e80:	4413      	add	r3, r2
 8001e82:	4a0a      	ldr	r2, [pc, #40]	@ (8001eac <countdown_start+0x68>)
 8001e84:	6013      	str	r3, [r2, #0]

    if (onMode) motor_apply(true);
 8001e86:	79fb      	ldrb	r3, [r7, #7]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d003      	beq.n	8001e94 <countdown_start+0x50>
 8001e8c:	2001      	movs	r0, #1
 8001e8e:	f7ff ffa7 	bl	8001de0 <motor_apply>
 8001e92:	e002      	b.n	8001e9a <countdown_start+0x56>
    else        motor_apply(false);
 8001e94:	2000      	movs	r0, #0
 8001e96:	f7ff ffa3 	bl	8001de0 <motor_apply>
}
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	200002e1 	.word	0x200002e1
 8001ea4:	20000019 	.word	0x20000019
 8001ea8:	200002e4 	.word	0x200002e4
 8001eac:	200002e8 	.word	0x200002e8

08001eb0 <countdown_tick>:

static void countdown_tick(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
    if (!countdownActive) return;
 8001eb6:	4b1b      	ldr	r3, [pc, #108]	@ (8001f24 <countdown_tick+0x74>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	f083 0301 	eor.w	r3, r3, #1
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d12a      	bne.n	8001f1c <countdown_tick+0x6c>

    uint32_t tnow = now_ms();
 8001ec6:	f7ff ff6b 	bl	8001da0 <now_ms>
 8001eca:	6078      	str	r0, [r7, #4]
    if ((int32_t)(countdownDeadline - tnow) <= 0) {
 8001ecc:	4b16      	ldr	r3, [pc, #88]	@ (8001f28 <countdown_tick+0x78>)
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	dc12      	bgt.n	8001efe <countdown_tick+0x4e>
        if (countdownMode) motor_apply(false);
 8001ed8:	4b14      	ldr	r3, [pc, #80]	@ (8001f2c <countdown_tick+0x7c>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <countdown_tick+0x3a>
 8001ee2:	2000      	movs	r0, #0
 8001ee4:	f7ff ff7c 	bl	8001de0 <motor_apply>
 8001ee8:	e002      	b.n	8001ef0 <countdown_tick+0x40>
        else               motor_apply(true);
 8001eea:	2001      	movs	r0, #1
 8001eec:	f7ff ff78 	bl	8001de0 <motor_apply>
        countdownActive   = false;
 8001ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8001f24 <countdown_tick+0x74>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	701a      	strb	r2, [r3, #0]
        countdownDuration = 0;
 8001ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f30 <countdown_tick+0x80>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
        return;
 8001efc:	e00f      	b.n	8001f1e <countdown_tick+0x6e>
    }

    uint32_t remaining_ms = countdownDeadline - tnow;
 8001efe:	4b0a      	ldr	r3, [pc, #40]	@ (8001f28 <countdown_tick+0x78>)
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	603b      	str	r3, [r7, #0]
    countdownDuration = (remaining_ms + 999) / 1000;
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 8001f0e:	4a09      	ldr	r2, [pc, #36]	@ (8001f34 <countdown_tick+0x84>)
 8001f10:	fba2 2303 	umull	r2, r3, r2, r3
 8001f14:	099b      	lsrs	r3, r3, #6
 8001f16:	4a06      	ldr	r2, [pc, #24]	@ (8001f30 <countdown_tick+0x80>)
 8001f18:	6013      	str	r3, [r2, #0]
 8001f1a:	e000      	b.n	8001f1e <countdown_tick+0x6e>
    if (!countdownActive) return;
 8001f1c:	bf00      	nop
}
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	200002e1 	.word	0x200002e1
 8001f28:	200002e8 	.word	0x200002e8
 8001f2c:	20000019 	.word	0x20000019
 8001f30:	200002e4 	.word	0x200002e4
 8001f34:	10624dd3 	.word	0x10624dd3

08001f38 <twist_tick>:
/* ===== Twist ===== */
static bool     twist_on_phase = false;
static uint32_t twist_phase_deadline = 0;

static void twist_tick(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
    if (!twistSettings.twistActive) return;
 8001f3e:	4b22      	ldr	r3, [pc, #136]	@ (8001fc8 <twist_tick+0x90>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	f083 0301 	eor.w	r3, r3, #1
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d137      	bne.n	8001fbc <twist_tick+0x84>

    uint32_t tnow = now_ms();
 8001f4c:	f7ff ff28 	bl	8001da0 <now_ms>
 8001f50:	6078      	str	r0, [r7, #4]
    if ((int32_t)(twist_phase_deadline - tnow) > 0) return;
 8001f52:	4b1e      	ldr	r3, [pc, #120]	@ (8001fcc <twist_tick+0x94>)
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	dc30      	bgt.n	8001fc0 <twist_tick+0x88>

    twist_on_phase = !twist_on_phase;
 8001f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8001fd0 <twist_tick+0x98>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	bf14      	ite	ne
 8001f66:	2301      	movne	r3, #1
 8001f68:	2300      	moveq	r3, #0
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	f083 0301 	eor.w	r3, r3, #1
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	4b15      	ldr	r3, [pc, #84]	@ (8001fd0 <twist_tick+0x98>)
 8001f7a:	701a      	strb	r2, [r3, #0]
    if (twist_on_phase) {
 8001f7c:	4b14      	ldr	r3, [pc, #80]	@ (8001fd0 <twist_tick+0x98>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00d      	beq.n	8001fa0 <twist_tick+0x68>
        motor_apply(true);
 8001f84:	2001      	movs	r0, #1
 8001f86:	f7ff ff2b 	bl	8001de0 <motor_apply>
        twist_phase_deadline = tnow + (twistSettings.onDurationSeconds * 1000UL);
 8001f8a:	4b0f      	ldr	r3, [pc, #60]	@ (8001fc8 <twist_tick+0x90>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001f92:	fb03 f202 	mul.w	r2, r3, r2
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4413      	add	r3, r2
 8001f9a:	4a0c      	ldr	r2, [pc, #48]	@ (8001fcc <twist_tick+0x94>)
 8001f9c:	6013      	str	r3, [r2, #0]
 8001f9e:	e010      	b.n	8001fc2 <twist_tick+0x8a>
    } else {
        motor_apply(false);
 8001fa0:	2000      	movs	r0, #0
 8001fa2:	f7ff ff1d 	bl	8001de0 <motor_apply>
        twist_phase_deadline = tnow + (twistSettings.offDurationSeconds * 1000UL);
 8001fa6:	4b08      	ldr	r3, [pc, #32]	@ (8001fc8 <twist_tick+0x90>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001fae:	fb03 f202 	mul.w	r2, r3, r2
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	4a05      	ldr	r2, [pc, #20]	@ (8001fcc <twist_tick+0x94>)
 8001fb8:	6013      	str	r3, [r2, #0]
 8001fba:	e002      	b.n	8001fc2 <twist_tick+0x8a>
    if (!twistSettings.twistActive) return;
 8001fbc:	bf00      	nop
 8001fbe:	e000      	b.n	8001fc2 <twist_tick+0x8a>
    if ((int32_t)(twist_phase_deadline - tnow) > 0) return;
 8001fc0:	bf00      	nop
    }
}
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	20000028 	.word	0x20000028
 8001fcc:	20000338 	.word	0x20000338
 8001fd0:	20000334 	.word	0x20000334

08001fd4 <search_tick>:
/* ===== Search ===== */
static bool     search_in_test = false;
static uint32_t search_phase_deadline = 0;

static void search_tick(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
    if (!searchSettings.searchActive) return;
 8001fda:	4b1f      	ldr	r3, [pc, #124]	@ (8002058 <search_tick+0x84>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	f083 0301 	eor.w	r3, r3, #1
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d131      	bne.n	800204c <search_tick+0x78>

    uint32_t tnow = now_ms();
 8001fe8:	f7ff feda 	bl	8001da0 <now_ms>
 8001fec:	6078      	str	r0, [r7, #4]
    if ((int32_t)(search_phase_deadline - tnow) > 0) return;
 8001fee:	4b1b      	ldr	r3, [pc, #108]	@ (800205c <search_tick+0x88>)
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	dc2a      	bgt.n	8002050 <search_tick+0x7c>

    if (!search_in_test) {
 8001ffa:	4b19      	ldr	r3, [pc, #100]	@ (8002060 <search_tick+0x8c>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	f083 0301 	eor.w	r3, r3, #1
 8002002:	b2db      	uxtb	r3, r3
 8002004:	2b00      	cmp	r3, #0
 8002006:	d010      	beq.n	800202a <search_tick+0x56>
        search_in_test = true;
 8002008:	4b15      	ldr	r3, [pc, #84]	@ (8002060 <search_tick+0x8c>)
 800200a:	2201      	movs	r2, #1
 800200c:	701a      	strb	r2, [r3, #0]
        motor_apply(true);
 800200e:	2001      	movs	r0, #1
 8002010:	f7ff fee6 	bl	8001de0 <motor_apply>
        search_phase_deadline = tnow + (searchSettings.dryRunTimeSeconds * 1000UL);
 8002014:	4b10      	ldr	r3, [pc, #64]	@ (8002058 <search_tick+0x84>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800201c:	fb03 f202 	mul.w	r2, r3, r2
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4413      	add	r3, r2
 8002024:	4a0d      	ldr	r2, [pc, #52]	@ (800205c <search_tick+0x88>)
 8002026:	6013      	str	r3, [r2, #0]
 8002028:	e013      	b.n	8002052 <search_tick+0x7e>
    } else {
        motor_apply(false);
 800202a:	2000      	movs	r0, #0
 800202c:	f7ff fed8 	bl	8001de0 <motor_apply>
        search_in_test = false;
 8002030:	4b0b      	ldr	r3, [pc, #44]	@ (8002060 <search_tick+0x8c>)
 8002032:	2200      	movs	r2, #0
 8002034:	701a      	strb	r2, [r3, #0]
        search_phase_deadline = tnow + (searchSettings.testingGapSeconds * 1000UL);
 8002036:	4b08      	ldr	r3, [pc, #32]	@ (8002058 <search_tick+0x84>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800203e:	fb03 f202 	mul.w	r2, r3, r2
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4413      	add	r3, r2
 8002046:	4a05      	ldr	r2, [pc, #20]	@ (800205c <search_tick+0x88>)
 8002048:	6013      	str	r3, [r2, #0]
 800204a:	e002      	b.n	8002052 <search_tick+0x7e>
    if (!searchSettings.searchActive) return;
 800204c:	bf00      	nop
 800204e:	e000      	b.n	8002052 <search_tick+0x7e>
    if ((int32_t)(search_phase_deadline - tnow) > 0) return;
 8002050:	bf00      	nop
    }
}
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	2000001c 	.word	0x2000001c
 800205c:	20000340 	.word	0x20000340
 8002060:	2000033c 	.word	0x2000033c

08002064 <seconds_since_midnight>:

/* ===== Timer (daily window) ===== */
static uint32_t seconds_since_midnight(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
    /* TODO: replace with RTC if available */
    uint32_t ms = now_ms() % (24UL*3600UL*1000UL);
 800206a:	f7ff fe99 	bl	8001da0 <now_ms>
 800206e:	4603      	mov	r3, r0
 8002070:	4a08      	ldr	r2, [pc, #32]	@ (8002094 <seconds_since_midnight+0x30>)
 8002072:	fba2 1203 	umull	r1, r2, r2, r3
 8002076:	0e12      	lsrs	r2, r2, #24
 8002078:	4907      	ldr	r1, [pc, #28]	@ (8002098 <seconds_since_midnight+0x34>)
 800207a:	fb01 f202 	mul.w	r2, r1, r2
 800207e:	1a9b      	subs	r3, r3, r2
 8002080:	607b      	str	r3, [r7, #4]
    return ms / 1000UL;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a05      	ldr	r2, [pc, #20]	@ (800209c <seconds_since_midnight+0x38>)
 8002086:	fba2 2303 	umull	r2, r3, r2, r3
 800208a:	099b      	lsrs	r3, r3, #6
}
 800208c:	4618      	mov	r0, r3
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	31b5d43b 	.word	0x31b5d43b
 8002098:	05265c00 	.word	0x05265c00
 800209c:	10624dd3 	.word	0x10624dd3

080020a0 <timer_tick>:

static void timer_tick(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
    uint32_t nowS = seconds_since_midnight();
 80020a6:	f7ff ffdd 	bl	8002064 <seconds_since_midnight>
 80020aa:	6078      	str	r0, [r7, #4]

    for (int i = 0; i < 5; i++) {
 80020ac:	2300      	movs	r3, #0
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	e045      	b.n	800213e <timer_tick+0x9e>
        TimerSlot* s = &timerSlots[i];
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	4613      	mov	r3, r2
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	4413      	add	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	4a24      	ldr	r2, [pc, #144]	@ (8002150 <timer_tick+0xb0>)
 80020be:	4413      	add	r3, r2
 80020c0:	603b      	str	r3, [r7, #0]
        if (!s->active) continue;
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	7a1b      	ldrb	r3, [r3, #8]
 80020c6:	f083 0301 	eor.w	r3, r3, #1
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d132      	bne.n	8002136 <timer_tick+0x96>

        bool inWindow;
        if (s->onTimeSeconds <= s->offTimeSeconds) {
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d812      	bhi.n	8002102 <timer_tick+0x62>
            inWindow = (nowS >= s->onTimeSeconds) && (nowS < s->offTimeSeconds);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d306      	bcc.n	80020f4 <timer_tick+0x54>
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d201      	bcs.n	80020f4 <timer_tick+0x54>
 80020f0:	2301      	movs	r3, #1
 80020f2:	e000      	b.n	80020f6 <timer_tick+0x56>
 80020f4:	2300      	movs	r3, #0
 80020f6:	72fb      	strb	r3, [r7, #11]
 80020f8:	7afb      	ldrb	r3, [r7, #11]
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	72fb      	strb	r3, [r7, #11]
 8002100:	e011      	b.n	8002126 <timer_tick+0x86>
        } else {
            inWindow = (nowS >= s->onTimeSeconds) || (nowS < s->offTimeSeconds);
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	429a      	cmp	r2, r3
 800210a:	d204      	bcs.n	8002116 <timer_tick+0x76>
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	429a      	cmp	r2, r3
 8002114:	d201      	bcs.n	800211a <timer_tick+0x7a>
 8002116:	2301      	movs	r3, #1
 8002118:	e000      	b.n	800211c <timer_tick+0x7c>
 800211a:	2300      	movs	r3, #0
 800211c:	72fb      	strb	r3, [r7, #11]
 800211e:	7afb      	ldrb	r3, [r7, #11]
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	72fb      	strb	r3, [r7, #11]
        }

        if (i == 0) {
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d105      	bne.n	8002138 <timer_tick+0x98>
            motor_apply(inWindow);
 800212c:	7afb      	ldrb	r3, [r7, #11]
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff fe56 	bl	8001de0 <motor_apply>
 8002134:	e000      	b.n	8002138 <timer_tick+0x98>
        if (!s->active) continue;
 8002136:	bf00      	nop
    for (int i = 0; i < 5; i++) {
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	3301      	adds	r3, #1
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2b04      	cmp	r3, #4
 8002142:	ddb6      	ble.n	80020b2 <timer_tick+0x12>
        }
    }
}
 8002144:	bf00      	nop
 8002146:	bf00      	nop
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	200002ec 	.word	0x200002ec

08002154 <protections_tick>:

/* ===== Protections ===== */
static void protections_tick(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
    if (senseDryRun && motorStatus == 1U) {
 8002158:	4b1c      	ldr	r3, [pc, #112]	@ (80021cc <protections_tick+0x78>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d007      	beq.n	8002172 <protections_tick+0x1e>
 8002162:	4b1b      	ldr	r3, [pc, #108]	@ (80021d0 <protections_tick+0x7c>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	b2db      	uxtb	r3, r3
 8002168:	2b01      	cmp	r3, #1
 800216a:	d102      	bne.n	8002172 <protections_tick+0x1e>
        motor_apply(false);
 800216c:	2000      	movs	r0, #0
 800216e:	f7ff fe37 	bl	8001de0 <motor_apply>
    }

    if (senseOverLoad && motorStatus == 1U) {
 8002172:	4b18      	ldr	r3, [pc, #96]	@ (80021d4 <protections_tick+0x80>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b00      	cmp	r3, #0
 800217a:	d007      	beq.n	800218c <protections_tick+0x38>
 800217c:	4b14      	ldr	r3, [pc, #80]	@ (80021d0 <protections_tick+0x7c>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b01      	cmp	r3, #1
 8002184:	d102      	bne.n	800218c <protections_tick+0x38>
        motor_apply(false);
 8002186:	2000      	movs	r0, #0
 8002188:	f7ff fe2a 	bl	8001de0 <motor_apply>
    }

    if (senseOverUnderVolt) {
 800218c:	4b12      	ldr	r3, [pc, #72]	@ (80021d8 <protections_tick+0x84>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d002      	beq.n	800219c <protections_tick+0x48>
        motor_apply(false);
 8002196:	2000      	movs	r0, #0
 8002198:	f7ff fe22 	bl	8001de0 <motor_apply>
    }

    if (maxRunTimerArmed && (now_ms() - maxRunStartTick) >= MAX_CONT_RUN_MS) {
 800219c:	4b0f      	ldr	r3, [pc, #60]	@ (80021dc <protections_tick+0x88>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d011      	beq.n	80021c8 <protections_tick+0x74>
 80021a4:	f7ff fdfc 	bl	8001da0 <now_ms>
 80021a8:	4602      	mov	r2, r0
 80021aa:	4b0d      	ldr	r3, [pc, #52]	@ (80021e0 <protections_tick+0x8c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	4a0c      	ldr	r2, [pc, #48]	@ (80021e4 <protections_tick+0x90>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d308      	bcc.n	80021c8 <protections_tick+0x74>
        motor_apply(false);
 80021b6:	2000      	movs	r0, #0
 80021b8:	f7ff fe12 	bl	8001de0 <motor_apply>
        senseMaxRunReached = true;
 80021bc:	4b0a      	ldr	r3, [pc, #40]	@ (80021e8 <protections_tick+0x94>)
 80021be:	2201      	movs	r2, #1
 80021c0:	701a      	strb	r2, [r3, #0]
        maxRunTimerArmed = false;
 80021c2:	4b06      	ldr	r3, [pc, #24]	@ (80021dc <protections_tick+0x88>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	701a      	strb	r2, [r3, #0]
    }
}
 80021c8:	bf00      	nop
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	20000328 	.word	0x20000328
 80021d0:	200002e0 	.word	0x200002e0
 80021d4:	20000329 	.word	0x20000329
 80021d8:	2000032a 	.word	0x2000032a
 80021dc:	2000032c 	.word	0x2000032c
 80021e0:	20000330 	.word	0x20000330
 80021e4:	006ddd00 	.word	0x006ddd00
 80021e8:	2000032b 	.word	0x2000032b

080021ec <leds_from_model>:

/* ===== LED synthesis ===== */
static void leds_from_model(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
    LED_ClearAllIntents();
 80021f0:	f7fe ff90 	bl	8001114 <LED_ClearAllIntents>

    if (motorStatus == 1U) {
 80021f4:	4b24      	ldr	r3, [pc, #144]	@ (8002288 <leds_from_model+0x9c>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d104      	bne.n	8002208 <leds_from_model+0x1c>
        LED_SetIntent(LED_COLOR_GREEN, LED_MODE_STEADY, 0);
 80021fe:	2200      	movs	r2, #0
 8002200:	2101      	movs	r1, #1
 8002202:	2000      	movs	r0, #0
 8002204:	f7fe ffa6 	bl	8001154 <LED_SetIntent>
    }
    if (countdownActive && countdownMode) {
 8002208:	4b20      	ldr	r3, [pc, #128]	@ (800228c <leds_from_model+0xa0>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00a      	beq.n	8002228 <leds_from_model+0x3c>
 8002212:	4b1f      	ldr	r3, [pc, #124]	@ (8002290 <leds_from_model+0xa4>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b00      	cmp	r3, #0
 800221a:	d005      	beq.n	8002228 <leds_from_model+0x3c>
        LED_SetIntent(LED_COLOR_GREEN, LED_MODE_BLINK, 500);
 800221c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002220:	2102      	movs	r1, #2
 8002222:	2000      	movs	r0, #0
 8002224:	f7fe ff96 	bl	8001154 <LED_SetIntent>
    }
    if (senseDryRun) {
 8002228:	4b1a      	ldr	r3, [pc, #104]	@ (8002294 <leds_from_model+0xa8>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d004      	beq.n	800223c <leds_from_model+0x50>
        LED_SetIntent(LED_COLOR_RED, LED_MODE_STEADY, 0);
 8002232:	2200      	movs	r2, #0
 8002234:	2101      	movs	r1, #1
 8002236:	2001      	movs	r0, #1
 8002238:	f7fe ff8c 	bl	8001154 <LED_SetIntent>
    }
    if (senseMaxRunReached) {
 800223c:	4b16      	ldr	r3, [pc, #88]	@ (8002298 <leds_from_model+0xac>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	d005      	beq.n	8002252 <leds_from_model+0x66>
        LED_SetIntent(LED_COLOR_RED, LED_MODE_BLINK, 400);
 8002246:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800224a:	2102      	movs	r1, #2
 800224c:	2001      	movs	r0, #1
 800224e:	f7fe ff81 	bl	8001154 <LED_SetIntent>
    }
    if (senseOverLoad) {
 8002252:	4b12      	ldr	r3, [pc, #72]	@ (800229c <leds_from_model+0xb0>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	b2db      	uxtb	r3, r3
 8002258:	2b00      	cmp	r3, #0
 800225a:	d005      	beq.n	8002268 <leds_from_model+0x7c>
        LED_SetIntent(LED_COLOR_BLUE, LED_MODE_BLINK, 350);
 800225c:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8002260:	2102      	movs	r1, #2
 8002262:	2002      	movs	r0, #2
 8002264:	f7fe ff76 	bl	8001154 <LED_SetIntent>
    }
    if (senseOverUnderVolt) {
 8002268:	4b0d      	ldr	r3, [pc, #52]	@ (80022a0 <leds_from_model+0xb4>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d005      	beq.n	800227e <leds_from_model+0x92>
        LED_SetIntent(LED_COLOR_PURPLE, LED_MODE_BLINK, 350);
 8002272:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8002276:	2102      	movs	r1, #2
 8002278:	2003      	movs	r0, #3
 800227a:	f7fe ff6b 	bl	8001154 <LED_SetIntent>
    }

    LED_ApplyIntents();
 800227e:	f7fe ff89 	bl	8001194 <LED_ApplyIntents>
}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	200002e0 	.word	0x200002e0
 800228c:	200002e1 	.word	0x200002e1
 8002290:	20000019 	.word	0x20000019
 8002294:	20000328 	.word	0x20000328
 8002298:	2000032b 	.word	0x2000032b
 800229c:	20000329 	.word	0x20000329
 80022a0:	2000032a 	.word	0x2000032a

080022a4 <parse_mm_ss>:

/* ===== Helpers ===== */
static int parse_mm_ss(const char* p, uint8_t* mm, uint8_t* ss)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
    int m, s;
    if (sscanf(p, "%d:%d", &m, &s) == 2) {
 80022b0:	f107 0310 	add.w	r3, r7, #16
 80022b4:	f107 0214 	add.w	r2, r7, #20
 80022b8:	4914      	ldr	r1, [pc, #80]	@ (800230c <parse_mm_ss+0x68>)
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f004 ffca 	bl	8007254 <siscanf>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d11d      	bne.n	8002302 <parse_mm_ss+0x5e>
        if (m < 0) { m = 0; } if (m > 59) { m = 59; }
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	da01      	bge.n	80022d0 <parse_mm_ss+0x2c>
 80022cc:	2300      	movs	r3, #0
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	2b3b      	cmp	r3, #59	@ 0x3b
 80022d4:	dd01      	ble.n	80022da <parse_mm_ss+0x36>
 80022d6:	233b      	movs	r3, #59	@ 0x3b
 80022d8:	617b      	str	r3, [r7, #20]
        if (s < 0) { s = 0; } if (s > 59) { s = 59; }
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	da01      	bge.n	80022e4 <parse_mm_ss+0x40>
 80022e0:	2300      	movs	r3, #0
 80022e2:	613b      	str	r3, [r7, #16]
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	2b3b      	cmp	r3, #59	@ 0x3b
 80022e8:	dd01      	ble.n	80022ee <parse_mm_ss+0x4a>
 80022ea:	233b      	movs	r3, #59	@ 0x3b
 80022ec:	613b      	str	r3, [r7, #16]
        *mm = (uint8_t)m; *ss = (uint8_t)s;
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	701a      	strb	r2, [r3, #0]
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	701a      	strb	r2, [r3, #0]
        return 1;
 80022fe:	2301      	movs	r3, #1
 8002300:	e000      	b.n	8002304 <parse_mm_ss+0x60>
    }
    return 0;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3718      	adds	r7, #24
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	08008668 	.word	0x08008668

08002310 <ModelHandle_ProcessUartCommand>:

/* ===== Command parser (from LCD/UI or serial) ===== */
void ModelHandle_ProcessUartCommand(const char* cmd)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b08a      	sub	sp, #40	@ 0x28
 8002314:	af02      	add	r7, sp, #8
 8002316:	6078      	str	r0, [r7, #4]
    if (!cmd || !*cmd) return;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	f000 815f 	beq.w	80025de <ModelHandle_ProcessUartCommand+0x2ce>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	f000 815a 	beq.w	80025de <ModelHandle_ProcessUartCommand+0x2ce>

    if (strcmp(cmd, "MOTOR_ON") == 0) {
 800232a:	49af      	ldr	r1, [pc, #700]	@ (80025e8 <ModelHandle_ProcessUartCommand+0x2d8>)
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f7fd ff0d 	bl	800014c <strcmp>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d103      	bne.n	8002340 <ModelHandle_ProcessUartCommand+0x30>
        motor_apply(true);
 8002338:	2001      	movs	r0, #1
 800233a:	f7ff fd51 	bl	8001de0 <motor_apply>
 800233e:	e14f      	b.n	80025e0 <ModelHandle_ProcessUartCommand+0x2d0>
    }
    else if (strcmp(cmd, "MOTOR_OFF") == 0) {
 8002340:	49aa      	ldr	r1, [pc, #680]	@ (80025ec <ModelHandle_ProcessUartCommand+0x2dc>)
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7fd ff02 	bl	800014c <strcmp>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d103      	bne.n	8002356 <ModelHandle_ProcessUartCommand+0x46>
        motor_apply(false);
 800234e:	2000      	movs	r0, #0
 8002350:	f7ff fd46 	bl	8001de0 <motor_apply>
 8002354:	e144      	b.n	80025e0 <ModelHandle_ProcessUartCommand+0x2d0>
    }
    else if (strncmp(cmd, "COUNTDOWN_ON:", 13) == 0) {
 8002356:	220d      	movs	r2, #13
 8002358:	49a5      	ldr	r1, [pc, #660]	@ (80025f0 <ModelHandle_ProcessUartCommand+0x2e0>)
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f004 ffb0 	bl	80072c0 <strncmp>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d11b      	bne.n	800239e <ModelHandle_ProcessUartCommand+0x8e>
        int minutes = atoi(cmd + 13);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	330d      	adds	r3, #13
 800236a:	4618      	mov	r0, r3
 800236c:	f004 fe90 	bl	8007090 <atoi>
 8002370:	61f8      	str	r0, [r7, #28]
        if (minutes < 0) minutes = 0;
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	2b00      	cmp	r3, #0
 8002376:	da01      	bge.n	800237c <ModelHandle_ProcessUartCommand+0x6c>
 8002378:	2300      	movs	r3, #0
 800237a:	61fb      	str	r3, [r7, #28]
        if (minutes > 600) minutes = 600;
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8002382:	dd02      	ble.n	800238a <ModelHandle_ProcessUartCommand+0x7a>
 8002384:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8002388:	61fb      	str	r3, [r7, #28]
        countdown_start(true, (uint32_t)minutes * 60UL);
 800238a:	69fa      	ldr	r2, [r7, #28]
 800238c:	4613      	mov	r3, r2
 800238e:	011b      	lsls	r3, r3, #4
 8002390:	1a9b      	subs	r3, r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4619      	mov	r1, r3
 8002396:	2001      	movs	r0, #1
 8002398:	f7ff fd54 	bl	8001e44 <countdown_start>
 800239c:	e120      	b.n	80025e0 <ModelHandle_ProcessUartCommand+0x2d0>
    }
    else if (strncmp(cmd, "COUNTDOWN_OFF:", 14) == 0) {
 800239e:	220e      	movs	r2, #14
 80023a0:	4994      	ldr	r1, [pc, #592]	@ (80025f4 <ModelHandle_ProcessUartCommand+0x2e4>)
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f004 ff8c 	bl	80072c0 <strncmp>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d11b      	bne.n	80023e6 <ModelHandle_ProcessUartCommand+0xd6>
        int minutes = atoi(cmd + 14);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	330e      	adds	r3, #14
 80023b2:	4618      	mov	r0, r3
 80023b4:	f004 fe6c 	bl	8007090 <atoi>
 80023b8:	61b8      	str	r0, [r7, #24]
        if (minutes < 0) minutes = 0;
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	da01      	bge.n	80023c4 <ModelHandle_ProcessUartCommand+0xb4>
 80023c0:	2300      	movs	r3, #0
 80023c2:	61bb      	str	r3, [r7, #24]
        if (minutes > 600) minutes = 600;
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 80023ca:	dd02      	ble.n	80023d2 <ModelHandle_ProcessUartCommand+0xc2>
 80023cc:	f44f 7316 	mov.w	r3, #600	@ 0x258
 80023d0:	61bb      	str	r3, [r7, #24]
        countdown_start(false, (uint32_t)minutes * 60UL);
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4613      	mov	r3, r2
 80023d6:	011b      	lsls	r3, r3, #4
 80023d8:	1a9b      	subs	r3, r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	4619      	mov	r1, r3
 80023de:	2000      	movs	r0, #0
 80023e0:	f7ff fd30 	bl	8001e44 <countdown_start>
 80023e4:	e0fc      	b.n	80025e0 <ModelHandle_ProcessUartCommand+0x2d0>
    }
    else if (strncmp(cmd, "TIMER_SET:1:", 12) == 0) {
 80023e6:	220c      	movs	r2, #12
 80023e8:	4983      	ldr	r1, [pc, #524]	@ (80025f8 <ModelHandle_ProcessUartCommand+0x2e8>)
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f004 ff68 	bl	80072c0 <strncmp>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d136      	bne.n	8002464 <ModelHandle_ProcessUartCommand+0x154>
        uint8_t onH=0,onM=0,offH=0,offM=0;
 80023f6:	2300      	movs	r3, #0
 80023f8:	74fb      	strb	r3, [r7, #19]
 80023fa:	2300      	movs	r3, #0
 80023fc:	74bb      	strb	r3, [r7, #18]
 80023fe:	2300      	movs	r3, #0
 8002400:	747b      	strb	r3, [r7, #17]
 8002402:	2300      	movs	r3, #0
 8002404:	743b      	strb	r3, [r7, #16]
        const char* p = cmd + 12;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	330c      	adds	r3, #12
 800240a:	617b      	str	r3, [r7, #20]
        if (sscanf(p, "%hhu:%hhu:%hhu:%hhu", &onH,&onM,&offH,&offM) == 4) {
 800240c:	f107 0112 	add.w	r1, r7, #18
 8002410:	f107 0213 	add.w	r2, r7, #19
 8002414:	f107 0310 	add.w	r3, r7, #16
 8002418:	9301      	str	r3, [sp, #4]
 800241a:	f107 0311 	add.w	r3, r7, #17
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	460b      	mov	r3, r1
 8002422:	4976      	ldr	r1, [pc, #472]	@ (80025fc <ModelHandle_ProcessUartCommand+0x2ec>)
 8002424:	6978      	ldr	r0, [r7, #20]
 8002426:	f004 ff15 	bl	8007254 <siscanf>
 800242a:	4603      	mov	r3, r0
 800242c:	2b04      	cmp	r3, #4
 800242e:	f040 80d7 	bne.w	80025e0 <ModelHandle_ProcessUartCommand+0x2d0>
            timerSlots[0].onTimeSeconds  = ModelHandle_TimeToSeconds(onH,onM);
 8002432:	7cfb      	ldrb	r3, [r7, #19]
 8002434:	7cba      	ldrb	r2, [r7, #18]
 8002436:	4611      	mov	r1, r2
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff fcb8 	bl	8001dae <ModelHandle_TimeToSeconds>
 800243e:	4603      	mov	r3, r0
 8002440:	4a6f      	ldr	r2, [pc, #444]	@ (8002600 <ModelHandle_ProcessUartCommand+0x2f0>)
 8002442:	6013      	str	r3, [r2, #0]
            timerSlots[0].offTimeSeconds = ModelHandle_TimeToSeconds(offH,offM);
 8002444:	7c7b      	ldrb	r3, [r7, #17]
 8002446:	7c3a      	ldrb	r2, [r7, #16]
 8002448:	4611      	mov	r1, r2
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff fcaf 	bl	8001dae <ModelHandle_TimeToSeconds>
 8002450:	4603      	mov	r3, r0
 8002452:	4a6b      	ldr	r2, [pc, #428]	@ (8002600 <ModelHandle_ProcessUartCommand+0x2f0>)
 8002454:	6053      	str	r3, [r2, #4]
            timerSlots[0].active = true;
 8002456:	4b6a      	ldr	r3, [pc, #424]	@ (8002600 <ModelHandle_ProcessUartCommand+0x2f0>)
 8002458:	2201      	movs	r2, #1
 800245a:	721a      	strb	r2, [r3, #8]
            timerSlots[0].executedToday = false;
 800245c:	4b68      	ldr	r3, [pc, #416]	@ (8002600 <ModelHandle_ProcessUartCommand+0x2f0>)
 800245e:	2200      	movs	r2, #0
 8002460:	725a      	strb	r2, [r3, #9]
 8002462:	e0bd      	b.n	80025e0 <ModelHandle_ProcessUartCommand+0x2d0>
        }
    }
    else if (strncmp(cmd, "SEARCH_GAP:", 11) == 0) {
 8002464:	220b      	movs	r2, #11
 8002466:	4967      	ldr	r1, [pc, #412]	@ (8002604 <ModelHandle_ProcessUartCommand+0x2f4>)
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f004 ff29 	bl	80072c0 <strncmp>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d11b      	bne.n	80024ac <ModelHandle_ProcessUartCommand+0x19c>
        uint8_t mm, ss;
        if (parse_mm_ss(cmd + 11, &mm, &ss)) {
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	330b      	adds	r3, #11
 8002478:	f107 020e 	add.w	r2, r7, #14
 800247c:	f107 010f 	add.w	r1, r7, #15
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff ff0f 	bl	80022a4 <parse_mm_ss>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	f000 80a9 	beq.w	80025e0 <ModelHandle_ProcessUartCommand+0x2d0>
            searchSettings.testingGapSeconds = (uint32_t)mm*60UL + (uint32_t)ss;
 800248e:	7bfb      	ldrb	r3, [r7, #15]
 8002490:	461a      	mov	r2, r3
 8002492:	4613      	mov	r3, r2
 8002494:	011b      	lsls	r3, r3, #4
 8002496:	1a9b      	subs	r3, r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	461a      	mov	r2, r3
 800249c:	7bbb      	ldrb	r3, [r7, #14]
 800249e:	4413      	add	r3, r2
 80024a0:	4a59      	ldr	r2, [pc, #356]	@ (8002608 <ModelHandle_ProcessUartCommand+0x2f8>)
 80024a2:	6053      	str	r3, [r2, #4]
            searchSettings.searchActive = true;
 80024a4:	4b58      	ldr	r3, [pc, #352]	@ (8002608 <ModelHandle_ProcessUartCommand+0x2f8>)
 80024a6:	2201      	movs	r2, #1
 80024a8:	701a      	strb	r2, [r3, #0]
 80024aa:	e099      	b.n	80025e0 <ModelHandle_ProcessUartCommand+0x2d0>
        }
    }
    else if (strncmp(cmd, "SEARCH_DRYRUN:", 14) == 0) {
 80024ac:	220e      	movs	r2, #14
 80024ae:	4957      	ldr	r1, [pc, #348]	@ (800260c <ModelHandle_ProcessUartCommand+0x2fc>)
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f004 ff05 	bl	80072c0 <strncmp>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d11b      	bne.n	80024f4 <ModelHandle_ProcessUartCommand+0x1e4>
        uint8_t mm, ss;
        if (parse_mm_ss(cmd + 14, &mm, &ss)) {
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	330e      	adds	r3, #14
 80024c0:	f107 020c 	add.w	r2, r7, #12
 80024c4:	f107 010d 	add.w	r1, r7, #13
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff feeb 	bl	80022a4 <parse_mm_ss>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 8085 	beq.w	80025e0 <ModelHandle_ProcessUartCommand+0x2d0>
            searchSettings.dryRunTimeSeconds = (uint32_t)mm*60UL + (uint32_t)ss;
 80024d6:	7b7b      	ldrb	r3, [r7, #13]
 80024d8:	461a      	mov	r2, r3
 80024da:	4613      	mov	r3, r2
 80024dc:	011b      	lsls	r3, r3, #4
 80024de:	1a9b      	subs	r3, r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	461a      	mov	r2, r3
 80024e4:	7b3b      	ldrb	r3, [r7, #12]
 80024e6:	4413      	add	r3, r2
 80024e8:	4a47      	ldr	r2, [pc, #284]	@ (8002608 <ModelHandle_ProcessUartCommand+0x2f8>)
 80024ea:	6093      	str	r3, [r2, #8]
            searchSettings.searchActive = true;
 80024ec:	4b46      	ldr	r3, [pc, #280]	@ (8002608 <ModelHandle_ProcessUartCommand+0x2f8>)
 80024ee:	2201      	movs	r2, #1
 80024f0:	701a      	strb	r2, [r3, #0]
 80024f2:	e075      	b.n	80025e0 <ModelHandle_ProcessUartCommand+0x2d0>
        }
    }
    else if (strncmp(cmd, "TWIST_ONDUR:", 12) == 0) {
 80024f4:	220c      	movs	r2, #12
 80024f6:	4946      	ldr	r1, [pc, #280]	@ (8002610 <ModelHandle_ProcessUartCommand+0x300>)
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f004 fee1 	bl	80072c0 <strncmp>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d122      	bne.n	800254a <ModelHandle_ProcessUartCommand+0x23a>
        uint8_t mm, ss;
        if (parse_mm_ss(cmd + 12, &mm, &ss)) {
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	330c      	adds	r3, #12
 8002508:	f107 020a 	add.w	r2, r7, #10
 800250c:	f107 010b 	add.w	r1, r7, #11
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff fec7 	bl	80022a4 <parse_mm_ss>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d061      	beq.n	80025e0 <ModelHandle_ProcessUartCommand+0x2d0>
            twistSettings.onDurationSeconds = (uint32_t)mm*60UL + (uint32_t)ss;
 800251c:	7afb      	ldrb	r3, [r7, #11]
 800251e:	461a      	mov	r2, r3
 8002520:	4613      	mov	r3, r2
 8002522:	011b      	lsls	r3, r3, #4
 8002524:	1a9b      	subs	r3, r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	461a      	mov	r2, r3
 800252a:	7abb      	ldrb	r3, [r7, #10]
 800252c:	4413      	add	r3, r2
 800252e:	4a39      	ldr	r2, [pc, #228]	@ (8002614 <ModelHandle_ProcessUartCommand+0x304>)
 8002530:	6053      	str	r3, [r2, #4]
            twistSettings.twistActive = true;
 8002532:	4b38      	ldr	r3, [pc, #224]	@ (8002614 <ModelHandle_ProcessUartCommand+0x304>)
 8002534:	2201      	movs	r2, #1
 8002536:	701a      	strb	r2, [r3, #0]
            twist_on_phase = false;
 8002538:	4b37      	ldr	r3, [pc, #220]	@ (8002618 <ModelHandle_ProcessUartCommand+0x308>)
 800253a:	2200      	movs	r2, #0
 800253c:	701a      	strb	r2, [r3, #0]
            twist_phase_deadline = now_ms();
 800253e:	f7ff fc2f 	bl	8001da0 <now_ms>
 8002542:	4603      	mov	r3, r0
 8002544:	4a35      	ldr	r2, [pc, #212]	@ (800261c <ModelHandle_ProcessUartCommand+0x30c>)
 8002546:	6013      	str	r3, [r2, #0]
 8002548:	e04a      	b.n	80025e0 <ModelHandle_ProcessUartCommand+0x2d0>
        }
    }
    else if (strncmp(cmd, "TWIST_OFFDUR:", 13) == 0) {
 800254a:	220d      	movs	r2, #13
 800254c:	4934      	ldr	r1, [pc, #208]	@ (8002620 <ModelHandle_ProcessUartCommand+0x310>)
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f004 feb6 	bl	80072c0 <strncmp>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d122      	bne.n	80025a0 <ModelHandle_ProcessUartCommand+0x290>
        uint8_t mm, ss;
        if (parse_mm_ss(cmd + 13, &mm, &ss)) {
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	330d      	adds	r3, #13
 800255e:	f107 0208 	add.w	r2, r7, #8
 8002562:	f107 0109 	add.w	r1, r7, #9
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff fe9c 	bl	80022a4 <parse_mm_ss>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d036      	beq.n	80025e0 <ModelHandle_ProcessUartCommand+0x2d0>
            twistSettings.offDurationSeconds = (uint32_t)mm*60UL + (uint32_t)ss;
 8002572:	7a7b      	ldrb	r3, [r7, #9]
 8002574:	461a      	mov	r2, r3
 8002576:	4613      	mov	r3, r2
 8002578:	011b      	lsls	r3, r3, #4
 800257a:	1a9b      	subs	r3, r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	461a      	mov	r2, r3
 8002580:	7a3b      	ldrb	r3, [r7, #8]
 8002582:	4413      	add	r3, r2
 8002584:	4a23      	ldr	r2, [pc, #140]	@ (8002614 <ModelHandle_ProcessUartCommand+0x304>)
 8002586:	6093      	str	r3, [r2, #8]
            twistSettings.twistActive = true;
 8002588:	4b22      	ldr	r3, [pc, #136]	@ (8002614 <ModelHandle_ProcessUartCommand+0x304>)
 800258a:	2201      	movs	r2, #1
 800258c:	701a      	strb	r2, [r3, #0]
            twist_on_phase = false;
 800258e:	4b22      	ldr	r3, [pc, #136]	@ (8002618 <ModelHandle_ProcessUartCommand+0x308>)
 8002590:	2200      	movs	r2, #0
 8002592:	701a      	strb	r2, [r3, #0]
            twist_phase_deadline = now_ms();
 8002594:	f7ff fc04 	bl	8001da0 <now_ms>
 8002598:	4603      	mov	r3, r0
 800259a:	4a20      	ldr	r2, [pc, #128]	@ (800261c <ModelHandle_ProcessUartCommand+0x30c>)
 800259c:	6013      	str	r3, [r2, #0]
 800259e:	e01f      	b.n	80025e0 <ModelHandle_ProcessUartCommand+0x2d0>
        }
    }
    else if (strcmp(cmd, "TWIST_OFF") == 0) {
 80025a0:	4920      	ldr	r1, [pc, #128]	@ (8002624 <ModelHandle_ProcessUartCommand+0x314>)
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7fd fdd2 	bl	800014c <strcmp>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d106      	bne.n	80025bc <ModelHandle_ProcessUartCommand+0x2ac>
        twistSettings.twistActive = false;
 80025ae:	4b19      	ldr	r3, [pc, #100]	@ (8002614 <ModelHandle_ProcessUartCommand+0x304>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	701a      	strb	r2, [r3, #0]
        motor_apply(false);
 80025b4:	2000      	movs	r0, #0
 80025b6:	f7ff fc13 	bl	8001de0 <motor_apply>
 80025ba:	e011      	b.n	80025e0 <ModelHandle_ProcessUartCommand+0x2d0>
    }
    else if (strcmp(cmd, "SEARCH_OFF") == 0) {
 80025bc:	491a      	ldr	r1, [pc, #104]	@ (8002628 <ModelHandle_ProcessUartCommand+0x318>)
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7fd fdc4 	bl	800014c <strcmp>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10a      	bne.n	80025e0 <ModelHandle_ProcessUartCommand+0x2d0>
        searchSettings.searchActive = false;
 80025ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002608 <ModelHandle_ProcessUartCommand+0x2f8>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	701a      	strb	r2, [r3, #0]
        search_in_test = false;
 80025d0:	4b16      	ldr	r3, [pc, #88]	@ (800262c <ModelHandle_ProcessUartCommand+0x31c>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	701a      	strb	r2, [r3, #0]
        motor_apply(false);
 80025d6:	2000      	movs	r0, #0
 80025d8:	f7ff fc02 	bl	8001de0 <motor_apply>
 80025dc:	e000      	b.n	80025e0 <ModelHandle_ProcessUartCommand+0x2d0>
    if (!cmd || !*cmd) return;
 80025de:	bf00      	nop
    }
}
 80025e0:	3720      	adds	r7, #32
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	08008670 	.word	0x08008670
 80025ec:	0800867c 	.word	0x0800867c
 80025f0:	08008688 	.word	0x08008688
 80025f4:	08008698 	.word	0x08008698
 80025f8:	080086a8 	.word	0x080086a8
 80025fc:	080086b8 	.word	0x080086b8
 8002600:	200002ec 	.word	0x200002ec
 8002604:	080086cc 	.word	0x080086cc
 8002608:	2000001c 	.word	0x2000001c
 800260c:	080086d8 	.word	0x080086d8
 8002610:	080086e8 	.word	0x080086e8
 8002614:	20000028 	.word	0x20000028
 8002618:	20000334 	.word	0x20000334
 800261c:	20000338 	.word	0x20000338
 8002620:	080086f8 	.word	0x080086f8
 8002624:	08008708 	.word	0x08008708
 8002628:	08008714 	.word	0x08008714
 800262c:	2000033c 	.word	0x2000033c

08002630 <ModelHandle_Process>:
void ModelHandle_SetOverUnderVolt(bool on) { senseOverUnderVolt = on; }
void ModelHandle_ClearMaxRunFlag(void)     { senseMaxRunReached = false; }

/* ===== Main tick ===== */
void ModelHandle_Process(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
    countdown_tick();
 8002634:	f7ff fc3c 	bl	8001eb0 <countdown_tick>
    twist_tick();
 8002638:	f7ff fc7e 	bl	8001f38 <twist_tick>
    search_tick();
 800263c:	f7ff fcca 	bl	8001fd4 <search_tick>
    timer_tick();
 8002640:	f7ff fd2e 	bl	80020a0 <timer_tick>
    protections_tick();
 8002644:	f7ff fd86 	bl	8002154 <protections_tick>
    leds_from_model();
 8002648:	f7ff fdd0 	bl	80021ec <leds_from_model>
}
 800264c:	bf00      	nop
 800264e:	bd80      	pop	{r7, pc}

08002650 <Motor_GetStatus>:

/* ===== UI helper ===== */
bool Motor_GetStatus(void) { return (motorStatus == 1U); }
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
 8002654:	4b05      	ldr	r3, [pc, #20]	@ (800266c <Motor_GetStatus+0x1c>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b01      	cmp	r3, #1
 800265c:	bf0c      	ite	eq
 800265e:	2301      	moveq	r3, #1
 8002660:	2300      	movne	r3, #0
 8002662:	b2db      	uxtb	r3, r3
 8002664:	4618      	mov	r0, r3
 8002666:	46bd      	mov	sp, r7
 8002668:	bc80      	pop	{r7}
 800266a:	4770      	bx	lr
 800266c:	200002e0 	.word	0x200002e0

08002670 <Relay_Set>:
    /* Ensure off on start (change if your relay is active-low) */
    HAL_GPIO_WritePin(Relay1_GPIO_Port, Relay1_Pin|Relay2_Pin|Relay3_Pin, GPIO_PIN_RESET);
}

void Relay_Set(uint8_t relay_no, bool on)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	4603      	mov	r3, r0
 8002678:	460a      	mov	r2, r1
 800267a:	71fb      	strb	r3, [r7, #7]
 800267c:	4613      	mov	r3, r2
 800267e:	71bb      	strb	r3, [r7, #6]
    switch (relay_no) {
 8002680:	79fb      	ldrb	r3, [r7, #7]
 8002682:	2b03      	cmp	r3, #3
 8002684:	d014      	beq.n	80026b0 <Relay_Set+0x40>
 8002686:	2b03      	cmp	r3, #3
 8002688:	dc19      	bgt.n	80026be <Relay_Set+0x4e>
 800268a:	2b01      	cmp	r3, #1
 800268c:	d002      	beq.n	8002694 <Relay_Set+0x24>
 800268e:	2b02      	cmp	r3, #2
 8002690:	d007      	beq.n	80026a2 <Relay_Set+0x32>
        case 1: HAL_GPIO_WritePin(Relay1_GPIO_Port, Relay1_Pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET); break;
        case 2: HAL_GPIO_WritePin(Relay2_GPIO_Port, Relay2_Pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET); break;
        case 3: HAL_GPIO_WritePin(Relay3_GPIO_Port, Relay3_Pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET); break;
        default: break;
 8002692:	e014      	b.n	80026be <Relay_Set+0x4e>
        case 1: HAL_GPIO_WritePin(Relay1_GPIO_Port, Relay1_Pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET); break;
 8002694:	79bb      	ldrb	r3, [r7, #6]
 8002696:	461a      	mov	r2, r3
 8002698:	2101      	movs	r1, #1
 800269a:	480b      	ldr	r0, [pc, #44]	@ (80026c8 <Relay_Set+0x58>)
 800269c:	f001 fe9d 	bl	80043da <HAL_GPIO_WritePin>
 80026a0:	e00e      	b.n	80026c0 <Relay_Set+0x50>
        case 2: HAL_GPIO_WritePin(Relay2_GPIO_Port, Relay2_Pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET); break;
 80026a2:	79bb      	ldrb	r3, [r7, #6]
 80026a4:	461a      	mov	r2, r3
 80026a6:	2102      	movs	r1, #2
 80026a8:	4807      	ldr	r0, [pc, #28]	@ (80026c8 <Relay_Set+0x58>)
 80026aa:	f001 fe96 	bl	80043da <HAL_GPIO_WritePin>
 80026ae:	e007      	b.n	80026c0 <Relay_Set+0x50>
        case 3: HAL_GPIO_WritePin(Relay3_GPIO_Port, Relay3_Pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET); break;
 80026b0:	79bb      	ldrb	r3, [r7, #6]
 80026b2:	461a      	mov	r2, r3
 80026b4:	2104      	movs	r1, #4
 80026b6:	4804      	ldr	r0, [pc, #16]	@ (80026c8 <Relay_Set+0x58>)
 80026b8:	f001 fe8f 	bl	80043da <HAL_GPIO_WritePin>
 80026bc:	e000      	b.n	80026c0 <Relay_Set+0x50>
        default: break;
 80026be:	bf00      	nop
    }
}
 80026c0:	bf00      	nop
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40010c00 	.word	0x40010c00

080026cc <Relay_All>:
    }
    return (s == GPIO_PIN_SET);
}

void Relay_All(bool on)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	4603      	mov	r3, r0
 80026d4:	71fb      	strb	r3, [r7, #7]
    Relay_Set(1, on);
 80026d6:	79fb      	ldrb	r3, [r7, #7]
 80026d8:	4619      	mov	r1, r3
 80026da:	2001      	movs	r0, #1
 80026dc:	f7ff ffc8 	bl	8002670 <Relay_Set>
    Relay_Set(2, on);
 80026e0:	79fb      	ldrb	r3, [r7, #7]
 80026e2:	4619      	mov	r1, r3
 80026e4:	2002      	movs	r0, #2
 80026e6:	f7ff ffc3 	bl	8002670 <Relay_Set>
    Relay_Set(3, on);
 80026ea:	79fb      	ldrb	r3, [r7, #7]
 80026ec:	4619      	mov	r1, r3
 80026ee:	2003      	movs	r0, #3
 80026f0:	f7ff ffbe 	bl	8002670 <Relay_Set>
}
 80026f4:	bf00      	nop
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <bcdToDec>:

uint8_t decToBcd(int val) {
    return (uint8_t)((val / 10 * 16) + (val % 10));
}

int bcdToDec(uint8_t val) {
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	4603      	mov	r3, r0
 8002704:	71fb      	strb	r3, [r7, #7]
    return (int)((val / 16 * 10) + (val % 16));
 8002706:	79fb      	ldrb	r3, [r7, #7]
 8002708:	091b      	lsrs	r3, r3, #4
 800270a:	b2db      	uxtb	r3, r3
 800270c:	461a      	mov	r2, r3
 800270e:	4613      	mov	r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	4413      	add	r3, r2
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	461a      	mov	r2, r3
 8002718:	79fb      	ldrb	r3, [r7, #7]
 800271a:	f003 030f 	and.w	r3, r3, #15
 800271e:	4413      	add	r3, r2
}
 8002720:	4618      	mov	r0, r3
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	bc80      	pop	{r7}
 8002728:	4770      	bx	lr
	...

0800272c <Get_Time>:
        sprintf(err, "RTC Set Error: %lu\r\n", HAL_I2C_GetError(&hi2c2));
        Debug_Print(err);
    }
}

void Get_Time(void) {
 800272c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800272e:	b0a5      	sub	sp, #148	@ 0x94
 8002730:	af06      	add	r7, sp, #24
    uint8_t get_time[7];

    if (HAL_I2C_Mem_Read(&hi2c2, DS3231_ADDRESS, 0x00,
 8002732:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002736:	9302      	str	r3, [sp, #8]
 8002738:	2307      	movs	r3, #7
 800273a:	9301      	str	r3, [sp, #4]
 800273c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002740:	9300      	str	r3, [sp, #0]
 8002742:	2301      	movs	r3, #1
 8002744:	2200      	movs	r2, #0
 8002746:	21d0      	movs	r1, #208	@ 0xd0
 8002748:	4849      	ldr	r0, [pc, #292]	@ (8002870 <Get_Time+0x144>)
 800274a:	f002 f8b9 	bl	80048c0 <HAL_I2C_Mem_Read>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d028      	beq.n	80027a6 <Get_Time+0x7a>
                         I2C_MEMADD_SIZE_8BIT, get_time, 7, 1000) != HAL_OK) {
        char err[50];
        sprintf(err, "RTC Read Error: %lu\r\n", HAL_I2C_GetError(&hi2c2));
 8002754:	4846      	ldr	r0, [pc, #280]	@ (8002870 <Get_Time+0x144>)
 8002756:	f002 fb27 	bl	8004da8 <HAL_I2C_GetError>
 800275a:	4602      	mov	r2, r0
 800275c:	463b      	mov	r3, r7
 800275e:	4945      	ldr	r1, [pc, #276]	@ (8002874 <Get_Time+0x148>)
 8002760:	4618      	mov	r0, r3
 8002762:	f004 fd55 	bl	8007210 <siprintf>
        Debug_Print(err);
 8002766:	463b      	mov	r3, r7
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff f8dd 	bl	8001928 <Debug_Print>

        time.seconds = time.minutes = time.hour =
        time.dayofweek = time.dayofmonth =
        time.month = time.year = 0xFF;
 800276e:	4b42      	ldr	r3, [pc, #264]	@ (8002878 <Get_Time+0x14c>)
 8002770:	22ff      	movs	r2, #255	@ 0xff
 8002772:	719a      	strb	r2, [r3, #6]
 8002774:	4b40      	ldr	r3, [pc, #256]	@ (8002878 <Get_Time+0x14c>)
 8002776:	799a      	ldrb	r2, [r3, #6]
 8002778:	4b3f      	ldr	r3, [pc, #252]	@ (8002878 <Get_Time+0x14c>)
 800277a:	715a      	strb	r2, [r3, #5]
 800277c:	4b3e      	ldr	r3, [pc, #248]	@ (8002878 <Get_Time+0x14c>)
 800277e:	795a      	ldrb	r2, [r3, #5]
        time.dayofweek = time.dayofmonth =
 8002780:	4b3d      	ldr	r3, [pc, #244]	@ (8002878 <Get_Time+0x14c>)
 8002782:	711a      	strb	r2, [r3, #4]
 8002784:	4b3c      	ldr	r3, [pc, #240]	@ (8002878 <Get_Time+0x14c>)
 8002786:	791a      	ldrb	r2, [r3, #4]
 8002788:	4b3b      	ldr	r3, [pc, #236]	@ (8002878 <Get_Time+0x14c>)
 800278a:	70da      	strb	r2, [r3, #3]
 800278c:	4b3a      	ldr	r3, [pc, #232]	@ (8002878 <Get_Time+0x14c>)
 800278e:	78da      	ldrb	r2, [r3, #3]
        time.seconds = time.minutes = time.hour =
 8002790:	4b39      	ldr	r3, [pc, #228]	@ (8002878 <Get_Time+0x14c>)
 8002792:	709a      	strb	r2, [r3, #2]
 8002794:	4b38      	ldr	r3, [pc, #224]	@ (8002878 <Get_Time+0x14c>)
 8002796:	789a      	ldrb	r2, [r3, #2]
 8002798:	4b37      	ldr	r3, [pc, #220]	@ (8002878 <Get_Time+0x14c>)
 800279a:	705a      	strb	r2, [r3, #1]
 800279c:	4b36      	ldr	r3, [pc, #216]	@ (8002878 <Get_Time+0x14c>)
 800279e:	785a      	ldrb	r2, [r3, #1]
 80027a0:	4b35      	ldr	r3, [pc, #212]	@ (8002878 <Get_Time+0x14c>)
 80027a2:	701a      	strb	r2, [r3, #0]
 80027a4:	e061      	b.n	800286a <Get_Time+0x13e>
        return;
    }

    char dbg[60];
    sprintf(dbg, "Raw RTC Data: %02X %02X %02X %02X %02X %02X %02X\r\n",
            get_time[0], get_time[1], get_time[2],
 80027a6:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
    sprintf(dbg, "Raw RTC Data: %02X %02X %02X %02X %02X %02X %02X\r\n",
 80027aa:	461e      	mov	r6, r3
            get_time[0], get_time[1], get_time[2],
 80027ac:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
    sprintf(dbg, "Raw RTC Data: %02X %02X %02X %02X %02X %02X %02X\r\n",
 80027b0:	469c      	mov	ip, r3
            get_time[0], get_time[1], get_time[2],
 80027b2:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
            get_time[3], get_time[4], get_time[5], get_time[6]);
 80027b6:	f897 2073 	ldrb.w	r2, [r7, #115]	@ 0x73
 80027ba:	f897 1074 	ldrb.w	r1, [r7, #116]	@ 0x74
 80027be:	f897 0075 	ldrb.w	r0, [r7, #117]	@ 0x75
    sprintf(dbg, "Raw RTC Data: %02X %02X %02X %02X %02X %02X %02X\r\n",
 80027c2:	4604      	mov	r4, r0
            get_time[3], get_time[4], get_time[5], get_time[6]);
 80027c4:	f897 0076 	ldrb.w	r0, [r7, #118]	@ 0x76
    sprintf(dbg, "Raw RTC Data: %02X %02X %02X %02X %02X %02X %02X\r\n",
 80027c8:	4605      	mov	r5, r0
 80027ca:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80027ce:	9504      	str	r5, [sp, #16]
 80027d0:	9403      	str	r4, [sp, #12]
 80027d2:	9102      	str	r1, [sp, #8]
 80027d4:	9201      	str	r2, [sp, #4]
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	4663      	mov	r3, ip
 80027da:	4632      	mov	r2, r6
 80027dc:	4927      	ldr	r1, [pc, #156]	@ (800287c <Get_Time+0x150>)
 80027de:	f004 fd17 	bl	8007210 <siprintf>
    Debug_Print(dbg);
 80027e2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff f89e 	bl	8001928 <Debug_Print>

    time.seconds    = bcdToDec(get_time[0]);
 80027ec:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff ff83 	bl	80026fc <bcdToDec>
 80027f6:	4603      	mov	r3, r0
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	4b1f      	ldr	r3, [pc, #124]	@ (8002878 <Get_Time+0x14c>)
 80027fc:	701a      	strb	r2, [r3, #0]
    time.minutes    = bcdToDec(get_time[1]);
 80027fe:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff ff7a 	bl	80026fc <bcdToDec>
 8002808:	4603      	mov	r3, r0
 800280a:	b2da      	uxtb	r2, r3
 800280c:	4b1a      	ldr	r3, [pc, #104]	@ (8002878 <Get_Time+0x14c>)
 800280e:	705a      	strb	r2, [r3, #1]
    time.hour       = bcdToDec(get_time[2]);
 8002810:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff ff71 	bl	80026fc <bcdToDec>
 800281a:	4603      	mov	r3, r0
 800281c:	b2da      	uxtb	r2, r3
 800281e:	4b16      	ldr	r3, [pc, #88]	@ (8002878 <Get_Time+0x14c>)
 8002820:	709a      	strb	r2, [r3, #2]
    time.dayofweek  = bcdToDec(get_time[3]);
 8002822:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8002826:	4618      	mov	r0, r3
 8002828:	f7ff ff68 	bl	80026fc <bcdToDec>
 800282c:	4603      	mov	r3, r0
 800282e:	b2da      	uxtb	r2, r3
 8002830:	4b11      	ldr	r3, [pc, #68]	@ (8002878 <Get_Time+0x14c>)
 8002832:	70da      	strb	r2, [r3, #3]
    time.dayofmonth = bcdToDec(get_time[4]);
 8002834:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff ff5f 	bl	80026fc <bcdToDec>
 800283e:	4603      	mov	r3, r0
 8002840:	b2da      	uxtb	r2, r3
 8002842:	4b0d      	ldr	r3, [pc, #52]	@ (8002878 <Get_Time+0x14c>)
 8002844:	711a      	strb	r2, [r3, #4]
    time.month      = bcdToDec(get_time[5]);
 8002846:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff ff56 	bl	80026fc <bcdToDec>
 8002850:	4603      	mov	r3, r0
 8002852:	b2da      	uxtb	r2, r3
 8002854:	4b08      	ldr	r3, [pc, #32]	@ (8002878 <Get_Time+0x14c>)
 8002856:	715a      	strb	r2, [r3, #5]
    time.year       = bcdToDec(get_time[6]);
 8002858:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff ff4d 	bl	80026fc <bcdToDec>
 8002862:	4603      	mov	r3, r0
 8002864:	b2da      	uxtb	r2, r3
 8002866:	4b04      	ldr	r3, [pc, #16]	@ (8002878 <Get_Time+0x14c>)
 8002868:	719a      	strb	r2, [r3, #6]
}
 800286a:	377c      	adds	r7, #124	@ 0x7c
 800286c:	46bd      	mov	sp, r7
 800286e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002870:	20000160 	.word	0x20000160
 8002874:	08008744 	.word	0x08008744
 8002878:	20000344 	.word	0x20000344
 800287c:	0800875c 	.word	0x0800875c

08002880 <lcd_line>:
    "Back to Dash"
};
#define MENU_COUNT (sizeof(menu_items)/sizeof(menu_items[0]))

/* ===== Helper: LCD Wrappers ===== */
static inline void lcd_line(uint8_t row, const char* s) {
 8002880:	b580      	push	{r7, lr}
 8002882:	b088      	sub	sp, #32
 8002884:	af00      	add	r7, sp, #0
 8002886:	4603      	mov	r3, r0
 8002888:	6039      	str	r1, [r7, #0]
 800288a:	71fb      	strb	r3, [r7, #7]
    char ln[21];
    snprintf(ln, sizeof(ln), "%-20s", s); // pad with spaces
 800288c:	f107 0008 	add.w	r0, r7, #8
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	4a09      	ldr	r2, [pc, #36]	@ (80028b8 <lcd_line+0x38>)
 8002894:	2115      	movs	r1, #21
 8002896:	f004 fc85 	bl	80071a4 <sniprintf>
    lcd_put_cur(row, 0);
 800289a:	79fb      	ldrb	r3, [r7, #7]
 800289c:	2100      	movs	r1, #0
 800289e:	4618      	mov	r0, r3
 80028a0:	f7fe fb00 	bl	8000ea4 <lcd_put_cur>
    lcd_send_string(ln);
 80028a4:	f107 0308 	add.w	r3, r7, #8
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7fe fb1d 	bl	8000ee8 <lcd_send_string>
}
 80028ae:	bf00      	nop
 80028b0:	3720      	adds	r7, #32
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	08008880 	.word	0x08008880

080028bc <lcd_line0>:
static inline void lcd_line0(const char* s){ lcd_line(0,s); }
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6879      	ldr	r1, [r7, #4]
 80028c6:	2000      	movs	r0, #0
 80028c8:	f7ff ffda 	bl	8002880 <lcd_line>
 80028cc:	bf00      	nop
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <lcd_line1>:
static inline void lcd_line1(const char* s){ lcd_line(1,s); }
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6879      	ldr	r1, [r7, #4]
 80028de:	2001      	movs	r0, #1
 80028e0:	f7ff ffce 	bl	8002880 <lcd_line>
 80028e4:	bf00      	nop
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <show_welcome>:

/* ================= UI Render Functions ================= */
static void show_welcome(void){
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
    lcd_clear();
 80028f0:	f7fe facb 	bl	8000e8a <lcd_clear>
    lcd_line0("Welcome to");
 80028f4:	4803      	ldr	r0, [pc, #12]	@ (8002904 <show_welcome+0x18>)
 80028f6:	f7ff ffe1 	bl	80028bc <lcd_line0>
    lcd_line1("HELONIX");
 80028fa:	4803      	ldr	r0, [pc, #12]	@ (8002908 <show_welcome+0x1c>)
 80028fc:	f7ff ffea 	bl	80028d4 <lcd_line1>
}
 8002900:	bf00      	nop
 8002902:	bd80      	pop	{r7, pc}
 8002904:	08008888 	.word	0x08008888
 8002908:	08008894 	.word	0x08008894

0800290c <show_dash_water>:
static void show_dash_water(void){
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
//    snprintf(buf, sizeof(buf), "Water V0: %.2fV", adcData.voltages[0]);
    lcd_line0(buf);
 8002910:	4817      	ldr	r0, [pc, #92]	@ (8002970 <show_dash_water+0x64>)
 8002912:	f7ff ffd3 	bl	80028bc <lcd_line0>

    if      (adcData.voltages[0] > 2.5f)  lcd_line1("Status: Full");
 8002916:	4b17      	ldr	r3, [pc, #92]	@ (8002974 <show_dash_water+0x68>)
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	4917      	ldr	r1, [pc, #92]	@ (8002978 <show_dash_water+0x6c>)
 800291c:	4618      	mov	r0, r3
 800291e:	f7fd fef1 	bl	8000704 <__aeabi_fcmpgt>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <show_dash_water+0x24>
 8002928:	4814      	ldr	r0, [pc, #80]	@ (800297c <show_dash_water+0x70>)
 800292a:	f7ff ffd3 	bl	80028d4 <lcd_line1>
    else if (adcData.voltages[0] > 1.0f)  lcd_line1("Status: Half");
    else if (adcData.voltages[0] > 0.1f)  lcd_line1("Status: Low");
    else                                  lcd_line1("Status: Empty");
}
 800292e:	e01d      	b.n	800296c <show_dash_water+0x60>
    else if (adcData.voltages[0] > 1.0f)  lcd_line1("Status: Half");
 8002930:	4b10      	ldr	r3, [pc, #64]	@ (8002974 <show_dash_water+0x68>)
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002938:	4618      	mov	r0, r3
 800293a:	f7fd fee3 	bl	8000704 <__aeabi_fcmpgt>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d003      	beq.n	800294c <show_dash_water+0x40>
 8002944:	480e      	ldr	r0, [pc, #56]	@ (8002980 <show_dash_water+0x74>)
 8002946:	f7ff ffc5 	bl	80028d4 <lcd_line1>
}
 800294a:	e00f      	b.n	800296c <show_dash_water+0x60>
    else if (adcData.voltages[0] > 0.1f)  lcd_line1("Status: Low");
 800294c:	4b09      	ldr	r3, [pc, #36]	@ (8002974 <show_dash_water+0x68>)
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	490c      	ldr	r1, [pc, #48]	@ (8002984 <show_dash_water+0x78>)
 8002952:	4618      	mov	r0, r3
 8002954:	f7fd fed6 	bl	8000704 <__aeabi_fcmpgt>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <show_dash_water+0x5a>
 800295e:	480a      	ldr	r0, [pc, #40]	@ (8002988 <show_dash_water+0x7c>)
 8002960:	f7ff ffb8 	bl	80028d4 <lcd_line1>
}
 8002964:	e002      	b.n	800296c <show_dash_water+0x60>
    else                                  lcd_line1("Status: Empty");
 8002966:	4809      	ldr	r0, [pc, #36]	@ (800298c <show_dash_water+0x80>)
 8002968:	f7ff ffb4 	bl	80028d4 <lcd_line1>
}
 800296c:	bf00      	nop
 800296e:	bd80      	pop	{r7, pc}
 8002970:	20000358 	.word	0x20000358
 8002974:	20000268 	.word	0x20000268
 8002978:	40200000 	.word	0x40200000
 800297c:	0800889c 	.word	0x0800889c
 8002980:	080088ac 	.word	0x080088ac
 8002984:	3dcccccd 	.word	0x3dcccccd
 8002988:	080088bc 	.word	0x080088bc
 800298c:	080088c8 	.word	0x080088c8

08002990 <show_dash_mode>:
static void show_dash_mode(void){
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af02      	add	r7, sp, #8
    snprintf(buf, sizeof(buf), "Motor:%s Cnt:%s",
             Motor_GetStatus() ? "ON":"OFF",
 8002996:	f7ff fe5b 	bl	8002650 <Motor_GetStatus>
 800299a:	4603      	mov	r3, r0
    snprintf(buf, sizeof(buf), "Motor:%s Cnt:%s",
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <show_dash_mode+0x14>
 80029a0:	4a10      	ldr	r2, [pc, #64]	@ (80029e4 <show_dash_mode+0x54>)
 80029a2:	e000      	b.n	80029a6 <show_dash_mode+0x16>
 80029a4:	4a10      	ldr	r2, [pc, #64]	@ (80029e8 <show_dash_mode+0x58>)
             countdownActive ? (countdownMode?"ON":"OFF") : "NA");
 80029a6:	4b11      	ldr	r3, [pc, #68]	@ (80029ec <show_dash_mode+0x5c>)
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	b2db      	uxtb	r3, r3
    snprintf(buf, sizeof(buf), "Motor:%s Cnt:%s",
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d008      	beq.n	80029c2 <show_dash_mode+0x32>
             countdownActive ? (countdownMode?"ON":"OFF") : "NA");
 80029b0:	4b0f      	ldr	r3, [pc, #60]	@ (80029f0 <show_dash_mode+0x60>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <show_dash_mode+0x2e>
 80029ba:	4b0a      	ldr	r3, [pc, #40]	@ (80029e4 <show_dash_mode+0x54>)
 80029bc:	e002      	b.n	80029c4 <show_dash_mode+0x34>
 80029be:	4b0a      	ldr	r3, [pc, #40]	@ (80029e8 <show_dash_mode+0x58>)
 80029c0:	e000      	b.n	80029c4 <show_dash_mode+0x34>
    snprintf(buf, sizeof(buf), "Motor:%s Cnt:%s",
 80029c2:	4b0c      	ldr	r3, [pc, #48]	@ (80029f4 <show_dash_mode+0x64>)
 80029c4:	9300      	str	r3, [sp, #0]
 80029c6:	4613      	mov	r3, r2
 80029c8:	4a0b      	ldr	r2, [pc, #44]	@ (80029f8 <show_dash_mode+0x68>)
 80029ca:	2115      	movs	r1, #21
 80029cc:	480b      	ldr	r0, [pc, #44]	@ (80029fc <show_dash_mode+0x6c>)
 80029ce:	f004 fbe9 	bl	80071a4 <sniprintf>
    lcd_line0(buf);
 80029d2:	480a      	ldr	r0, [pc, #40]	@ (80029fc <show_dash_mode+0x6c>)
 80029d4:	f7ff ff72 	bl	80028bc <lcd_line0>
    lcd_line1("Menu: Press SEL");
 80029d8:	4809      	ldr	r0, [pc, #36]	@ (8002a00 <show_dash_mode+0x70>)
 80029da:	f7ff ff7b 	bl	80028d4 <lcd_line1>
}
 80029de:	bf00      	nop
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	080088d8 	.word	0x080088d8
 80029e8:	080088dc 	.word	0x080088dc
 80029ec:	200002e1 	.word	0x200002e1
 80029f0:	20000019 	.word	0x20000019
 80029f4:	080088e0 	.word	0x080088e0
 80029f8:	080088e4 	.word	0x080088e4
 80029fc:	20000358 	.word	0x20000358
 8002a00:	080088f4 	.word	0x080088f4

08002a04 <show_dash_search>:
static void show_dash_search(void){
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af02      	add	r7, sp, #8
    lcd_line0("Search Mode");
 8002a0a:	480e      	ldr	r0, [pc, #56]	@ (8002a44 <show_dash_search+0x40>)
 8002a0c:	f7ff ff56 	bl	80028bc <lcd_line0>
    if (searchSettings.searchActive) {
 8002a10:	4b0d      	ldr	r3, [pc, #52]	@ (8002a48 <show_dash_search+0x44>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00f      	beq.n	8002a38 <show_dash_search+0x34>
        snprintf(buf, sizeof(buf), "Gap:%ds Dry:%ds",
                 (int)searchSettings.testingGapSeconds,
 8002a18:	4b0b      	ldr	r3, [pc, #44]	@ (8002a48 <show_dash_search+0x44>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
        snprintf(buf, sizeof(buf), "Gap:%ds Dry:%ds",
 8002a1c:	461a      	mov	r2, r3
                 (int)searchSettings.dryRunTimeSeconds);
 8002a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8002a48 <show_dash_search+0x44>)
 8002a20:	689b      	ldr	r3, [r3, #8]
        snprintf(buf, sizeof(buf), "Gap:%ds Dry:%ds",
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	4613      	mov	r3, r2
 8002a26:	4a09      	ldr	r2, [pc, #36]	@ (8002a4c <show_dash_search+0x48>)
 8002a28:	2115      	movs	r1, #21
 8002a2a:	4809      	ldr	r0, [pc, #36]	@ (8002a50 <show_dash_search+0x4c>)
 8002a2c:	f004 fbba 	bl	80071a4 <sniprintf>
        lcd_line1(buf);
 8002a30:	4807      	ldr	r0, [pc, #28]	@ (8002a50 <show_dash_search+0x4c>)
 8002a32:	f7ff ff4f 	bl	80028d4 <lcd_line1>
    } else lcd_line1("Inactive");
}
 8002a36:	e002      	b.n	8002a3e <show_dash_search+0x3a>
    } else lcd_line1("Inactive");
 8002a38:	4806      	ldr	r0, [pc, #24]	@ (8002a54 <show_dash_search+0x50>)
 8002a3a:	f7ff ff4b 	bl	80028d4 <lcd_line1>
}
 8002a3e:	bf00      	nop
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	08008904 	.word	0x08008904
 8002a48:	2000001c 	.word	0x2000001c
 8002a4c:	08008910 	.word	0x08008910
 8002a50:	20000358 	.word	0x20000358
 8002a54:	08008920 	.word	0x08008920

08002a58 <show_dash_twist>:
static void show_dash_twist(void){
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af02      	add	r7, sp, #8
    lcd_line0("Twist Mode");
 8002a5e:	480e      	ldr	r0, [pc, #56]	@ (8002a98 <show_dash_twist+0x40>)
 8002a60:	f7ff ff2c 	bl	80028bc <lcd_line0>
    if (twistSettings.twistActive) {
 8002a64:	4b0d      	ldr	r3, [pc, #52]	@ (8002a9c <show_dash_twist+0x44>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00f      	beq.n	8002a8c <show_dash_twist+0x34>
        snprintf(buf, sizeof(buf), "ON:%ds OFF:%ds",
                 (int)twistSettings.onDurationSeconds,
 8002a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a9c <show_dash_twist+0x44>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
        snprintf(buf, sizeof(buf), "ON:%ds OFF:%ds",
 8002a70:	461a      	mov	r2, r3
                 (int)twistSettings.offDurationSeconds);
 8002a72:	4b0a      	ldr	r3, [pc, #40]	@ (8002a9c <show_dash_twist+0x44>)
 8002a74:	689b      	ldr	r3, [r3, #8]
        snprintf(buf, sizeof(buf), "ON:%ds OFF:%ds",
 8002a76:	9300      	str	r3, [sp, #0]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	4a09      	ldr	r2, [pc, #36]	@ (8002aa0 <show_dash_twist+0x48>)
 8002a7c:	2115      	movs	r1, #21
 8002a7e:	4809      	ldr	r0, [pc, #36]	@ (8002aa4 <show_dash_twist+0x4c>)
 8002a80:	f004 fb90 	bl	80071a4 <sniprintf>
        lcd_line1(buf);
 8002a84:	4807      	ldr	r0, [pc, #28]	@ (8002aa4 <show_dash_twist+0x4c>)
 8002a86:	f7ff ff25 	bl	80028d4 <lcd_line1>
    } else lcd_line1("Inactive");
}
 8002a8a:	e002      	b.n	8002a92 <show_dash_twist+0x3a>
    } else lcd_line1("Inactive");
 8002a8c:	4806      	ldr	r0, [pc, #24]	@ (8002aa8 <show_dash_twist+0x50>)
 8002a8e:	f7ff ff21 	bl	80028d4 <lcd_line1>
}
 8002a92:	bf00      	nop
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	0800892c 	.word	0x0800892c
 8002a9c:	20000028 	.word	0x20000028
 8002aa0:	08008938 	.word	0x08008938
 8002aa4:	20000358 	.word	0x20000358
 8002aa8:	08008920 	.word	0x08008920

08002aac <show_menu>:
static void show_menu(void){
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
    char line[21];
    snprintf(line, sizeof(line), " %s", menu_items[menu_idx]);
 8002ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ae8 <show_menu+0x3c>)
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8002aec <show_menu+0x40>)
 8002aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002abe:	4638      	mov	r0, r7
 8002ac0:	4a0b      	ldr	r2, [pc, #44]	@ (8002af0 <show_menu+0x44>)
 8002ac2:	2115      	movs	r1, #21
 8002ac4:	f004 fb6e 	bl	80071a4 <sniprintf>
    lcd_put_cur(0, 1);
 8002ac8:	2101      	movs	r1, #1
 8002aca:	2000      	movs	r0, #0
 8002acc:	f7fe f9ea 	bl	8000ea4 <lcd_put_cur>
    lcd_send_string(line);
 8002ad0:	463b      	mov	r3, r7
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7fe fa08 	bl	8000ee8 <lcd_send_string>
    lcd_line1("UP/DN:Move SEL:OK");
 8002ad8:	4806      	ldr	r0, [pc, #24]	@ (8002af4 <show_menu+0x48>)
 8002ada:	f7ff fefb 	bl	80028d4 <lcd_line1>

    // Cursor blinking handled separately
}
 8002ade:	bf00      	nop
 8002ae0:	3718      	adds	r7, #24
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	2000036d 	.word	0x2000036d
 8002aec:	20000038 	.word	0x20000038
 8002af0:	08008948 	.word	0x08008948
 8002af4:	0800894c 	.word	0x0800894c

08002af8 <apply_menu_action>:

/* ================= Menu Handling ================= */
static void goto_dash_cycle(void) {
    if (ui < UI_DASH_WATER || ui > UI_DASH_TWIST) ui = UI_DASH_WATER;
}
static void apply_menu_action(void){
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
        UI_EDIT_TIMER1_ON_H, UI_EDIT_TIMER1_OFF_H,
        UI_EDIT_SEARCH_GAP_M, UI_EDIT_SEARCH_DRY_M,
        UI_EDIT_TWIST_ON_M, UI_EDIT_TWIST_OFF_M,
        UI_DASH_WATER
    };
    if (menu_idx < MENU_COUNT) ui = actions[menu_idx];
 8002afc:	4b07      	ldr	r3, [pc, #28]	@ (8002b1c <apply_menu_action+0x24>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	2b09      	cmp	r3, #9
 8002b02:	d806      	bhi.n	8002b12 <apply_menu_action+0x1a>
 8002b04:	4b05      	ldr	r3, [pc, #20]	@ (8002b1c <apply_menu_action+0x24>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	461a      	mov	r2, r3
 8002b0a:	4b05      	ldr	r3, [pc, #20]	@ (8002b20 <apply_menu_action+0x28>)
 8002b0c:	5c9a      	ldrb	r2, [r3, r2]
 8002b0e:	4b05      	ldr	r3, [pc, #20]	@ (8002b24 <apply_menu_action+0x2c>)
 8002b10:	701a      	strb	r2, [r3, #0]
}
 8002b12:	bf00      	nop
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bc80      	pop	{r7}
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	2000036d 	.word	0x2000036d
 8002b20:	08008988 	.word	0x08008988
 8002b24:	20000350 	.word	0x20000350

08002b28 <Screen_Update>:

/* ================= Screen Core ================= */
void Screen_Update(void){
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
    uint32_t now = HAL_GetTick();
 8002b2e:	f000 fccd 	bl	80034cc <HAL_GetTick>
 8002b32:	6078      	str	r0, [r7, #4]

    /* Cursor blink */
    if (ui == UI_MENU && (now - lastCursorToggle >= CURSOR_BLINK_MS)) {
 8002b34:	4b50      	ldr	r3, [pc, #320]	@ (8002c78 <Screen_Update+0x150>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b05      	cmp	r3, #5
 8002b3a:	d127      	bne.n	8002b8c <Screen_Update+0x64>
 8002b3c:	4b4f      	ldr	r3, [pc, #316]	@ (8002c7c <Screen_Update+0x154>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d31f      	bcc.n	8002b8c <Screen_Update+0x64>
        cursorVisible = !cursorVisible;
 8002b4c:	4b4c      	ldr	r3, [pc, #304]	@ (8002c80 <Screen_Update+0x158>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	bf14      	ite	ne
 8002b54:	2301      	movne	r3, #1
 8002b56:	2300      	moveq	r3, #0
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	f083 0301 	eor.w	r3, r3, #1
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	b2da      	uxtb	r2, r3
 8002b66:	4b46      	ldr	r3, [pc, #280]	@ (8002c80 <Screen_Update+0x158>)
 8002b68:	701a      	strb	r2, [r3, #0]
        lastCursorToggle = now;
 8002b6a:	4a44      	ldr	r2, [pc, #272]	@ (8002c7c <Screen_Update+0x154>)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6013      	str	r3, [r2, #0]
        lcd_put_cur(0, 0);
 8002b70:	2100      	movs	r1, #0
 8002b72:	2000      	movs	r0, #0
 8002b74:	f7fe f996 	bl	8000ea4 <lcd_put_cur>
        lcd_send_data(cursorVisible ? '>' : ' ');
 8002b78:	4b41      	ldr	r3, [pc, #260]	@ (8002c80 <Screen_Update+0x158>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <Screen_Update+0x5c>
 8002b80:	233e      	movs	r3, #62	@ 0x3e
 8002b82:	e000      	b.n	8002b86 <Screen_Update+0x5e>
 8002b84:	2320      	movs	r3, #32
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7fe f965 	bl	8000e56 <lcd_send_data>
    }

    /* Page cycling */
    if (ui >= UI_DASH_WATER && ui <= UI_DASH_TWIST &&
 8002b8c:	4b3a      	ldr	r3, [pc, #232]	@ (8002c78 <Screen_Update+0x150>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d01e      	beq.n	8002bd2 <Screen_Update+0xaa>
 8002b94:	4b38      	ldr	r3, [pc, #224]	@ (8002c78 <Screen_Update+0x150>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	2b04      	cmp	r3, #4
 8002b9a:	d81a      	bhi.n	8002bd2 <Screen_Update+0xaa>
        now - lastLcdUpdateTime >= PAGE_MS) {
 8002b9c:	4b39      	ldr	r3, [pc, #228]	@ (8002c84 <Screen_Update+0x15c>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
    if (ui >= UI_DASH_WATER && ui <= UI_DASH_TWIST &&
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d312      	bcc.n	8002bd2 <Screen_Update+0xaa>
        ui = (UiState)(ui + 1);
 8002bac:	4b32      	ldr	r3, [pc, #200]	@ (8002c78 <Screen_Update+0x150>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	4b30      	ldr	r3, [pc, #192]	@ (8002c78 <Screen_Update+0x150>)
 8002bb6:	701a      	strb	r2, [r3, #0]
        if (ui > UI_DASH_TWIST) ui = UI_DASH_WATER;
 8002bb8:	4b2f      	ldr	r3, [pc, #188]	@ (8002c78 <Screen_Update+0x150>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	2b04      	cmp	r3, #4
 8002bbe:	d902      	bls.n	8002bc6 <Screen_Update+0x9e>
 8002bc0:	4b2d      	ldr	r3, [pc, #180]	@ (8002c78 <Screen_Update+0x150>)
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	701a      	strb	r2, [r3, #0]
        lastLcdUpdateTime = now;
 8002bc6:	4a2f      	ldr	r2, [pc, #188]	@ (8002c84 <Screen_Update+0x15c>)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6013      	str	r3, [r2, #0]
        screenNeedsRefresh = true;
 8002bcc:	4b2e      	ldr	r3, [pc, #184]	@ (8002c88 <Screen_Update+0x160>)
 8002bce:	2201      	movs	r2, #1
 8002bd0:	701a      	strb	r2, [r3, #0]
    }

    /* Welcome timeout */
    if (ui == UI_WELCOME && now - lastLcdUpdateTime >= WELCOME_MS) {
 8002bd2:	4b29      	ldr	r3, [pc, #164]	@ (8002c78 <Screen_Update+0x150>)
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d110      	bne.n	8002bfc <Screen_Update+0xd4>
 8002bda:	4b2a      	ldr	r3, [pc, #168]	@ (8002c84 <Screen_Update+0x15c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d308      	bcc.n	8002bfc <Screen_Update+0xd4>
        ui = UI_DASH_WATER;
 8002bea:	4b23      	ldr	r3, [pc, #140]	@ (8002c78 <Screen_Update+0x150>)
 8002bec:	2201      	movs	r2, #1
 8002bee:	701a      	strb	r2, [r3, #0]
        lastLcdUpdateTime = now;
 8002bf0:	4a24      	ldr	r2, [pc, #144]	@ (8002c84 <Screen_Update+0x15c>)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6013      	str	r3, [r2, #0]
        screenNeedsRefresh = true;
 8002bf6:	4b24      	ldr	r3, [pc, #144]	@ (8002c88 <Screen_Update+0x160>)
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	701a      	strb	r2, [r3, #0]
    }

    /* Render */
    if (screenNeedsRefresh || ui != last_ui) {
 8002bfc:	4b22      	ldr	r3, [pc, #136]	@ (8002c88 <Screen_Update+0x160>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d105      	bne.n	8002c10 <Screen_Update+0xe8>
 8002c04:	4b1c      	ldr	r3, [pc, #112]	@ (8002c78 <Screen_Update+0x150>)
 8002c06:	781a      	ldrb	r2, [r3, #0]
 8002c08:	4b20      	ldr	r3, [pc, #128]	@ (8002c8c <Screen_Update+0x164>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d02e      	beq.n	8002c6e <Screen_Update+0x146>
        lcd_clear();
 8002c10:	f7fe f93b 	bl	8000e8a <lcd_clear>
        last_ui = ui;
 8002c14:	4b18      	ldr	r3, [pc, #96]	@ (8002c78 <Screen_Update+0x150>)
 8002c16:	781a      	ldrb	r2, [r3, #0]
 8002c18:	4b1c      	ldr	r3, [pc, #112]	@ (8002c8c <Screen_Update+0x164>)
 8002c1a:	701a      	strb	r2, [r3, #0]
        screenNeedsRefresh = false;
 8002c1c:	4b1a      	ldr	r3, [pc, #104]	@ (8002c88 <Screen_Update+0x160>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	701a      	strb	r2, [r3, #0]

        switch(ui){
 8002c22:	4b15      	ldr	r3, [pc, #84]	@ (8002c78 <Screen_Update+0x150>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	2b05      	cmp	r3, #5
 8002c28:	d820      	bhi.n	8002c6c <Screen_Update+0x144>
 8002c2a:	a201      	add	r2, pc, #4	@ (adr r2, 8002c30 <Screen_Update+0x108>)
 8002c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c30:	08002c49 	.word	0x08002c49
 8002c34:	08002c4f 	.word	0x08002c4f
 8002c38:	08002c55 	.word	0x08002c55
 8002c3c:	08002c5b 	.word	0x08002c5b
 8002c40:	08002c61 	.word	0x08002c61
 8002c44:	08002c67 	.word	0x08002c67
            case UI_WELCOME:      show_welcome();     break;
 8002c48:	f7ff fe50 	bl	80028ec <show_welcome>
 8002c4c:	e00f      	b.n	8002c6e <Screen_Update+0x146>
            case UI_DASH_WATER:   show_dash_water();  break;
 8002c4e:	f7ff fe5d 	bl	800290c <show_dash_water>
 8002c52:	e00c      	b.n	8002c6e <Screen_Update+0x146>
            case UI_DASH_MODE:    show_dash_mode();   break;
 8002c54:	f7ff fe9c 	bl	8002990 <show_dash_mode>
 8002c58:	e009      	b.n	8002c6e <Screen_Update+0x146>
            case UI_DASH_SEARCH:  show_dash_search(); break;
 8002c5a:	f7ff fed3 	bl	8002a04 <show_dash_search>
 8002c5e:	e006      	b.n	8002c6e <Screen_Update+0x146>
            case UI_DASH_TWIST:   show_dash_twist();  break;
 8002c60:	f7ff fefa 	bl	8002a58 <show_dash_twist>
 8002c64:	e003      	b.n	8002c6e <Screen_Update+0x146>
            case UI_MENU:         show_menu();        break;
 8002c66:	f7ff ff21 	bl	8002aac <show_menu>
 8002c6a:	e000      	b.n	8002c6e <Screen_Update+0x146>
            default: break; // TODO: Add edit/confirm UIs
 8002c6c:	bf00      	nop
        }
    }
}
 8002c6e:	bf00      	nop
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	20000350 	.word	0x20000350
 8002c7c:	20000354 	.word	0x20000354
 8002c80:	20000035 	.word	0x20000035
 8002c84:	2000034c 	.word	0x2000034c
 8002c88:	20000351 	.word	0x20000351
 8002c8c:	20000034 	.word	0x20000034

08002c90 <Screen_Init>:

void Screen_Init(void){
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
    lcd_init();
 8002c94:	f7fe f93d 	bl	8000f12 <lcd_init>
    ui = UI_WELCOME;
 8002c98:	4b07      	ldr	r3, [pc, #28]	@ (8002cb8 <Screen_Init+0x28>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	701a      	strb	r2, [r3, #0]
    last_ui = UI_MAX_;
 8002c9e:	4b07      	ldr	r3, [pc, #28]	@ (8002cbc <Screen_Init+0x2c>)
 8002ca0:	2215      	movs	r2, #21
 8002ca2:	701a      	strb	r2, [r3, #0]
    screenNeedsRefresh = true;
 8002ca4:	4b06      	ldr	r3, [pc, #24]	@ (8002cc0 <Screen_Init+0x30>)
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	701a      	strb	r2, [r3, #0]
    lastLcdUpdateTime = HAL_GetTick();
 8002caa:	f000 fc0f 	bl	80034cc <HAL_GetTick>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	4a04      	ldr	r2, [pc, #16]	@ (8002cc4 <Screen_Init+0x34>)
 8002cb2:	6013      	str	r3, [r2, #0]
}
 8002cb4:	bf00      	nop
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	20000350 	.word	0x20000350
 8002cbc:	20000034 	.word	0x20000034
 8002cc0:	20000351 	.word	0x20000351
 8002cc4:	2000034c 	.word	0x2000034c

08002cc8 <Screen_ResetToHome>:

void Screen_ResetToHome(void){
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
    ui = UI_WELCOME;
 8002ccc:	4b07      	ldr	r3, [pc, #28]	@ (8002cec <Screen_ResetToHome+0x24>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	701a      	strb	r2, [r3, #0]
    last_ui = UI_MAX_;
 8002cd2:	4b07      	ldr	r3, [pc, #28]	@ (8002cf0 <Screen_ResetToHome+0x28>)
 8002cd4:	2215      	movs	r2, #21
 8002cd6:	701a      	strb	r2, [r3, #0]
    screenNeedsRefresh = true;
 8002cd8:	4b06      	ldr	r3, [pc, #24]	@ (8002cf4 <Screen_ResetToHome+0x2c>)
 8002cda:	2201      	movs	r2, #1
 8002cdc:	701a      	strb	r2, [r3, #0]
    lastLcdUpdateTime = HAL_GetTick();
 8002cde:	f000 fbf5 	bl	80034cc <HAL_GetTick>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	4a04      	ldr	r2, [pc, #16]	@ (8002cf8 <Screen_ResetToHome+0x30>)
 8002ce6:	6013      	str	r3, [r2, #0]
}
 8002ce8:	bf00      	nop
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	20000350 	.word	0x20000350
 8002cf0:	20000034 	.word	0x20000034
 8002cf4:	20000351 	.word	0x20000351
 8002cf8:	2000034c 	.word	0x2000034c

08002cfc <Screen_HandleButton>:

/* ================= Input Handling ================= */
void Screen_HandleButton(UiButton b){
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	4603      	mov	r3, r0
 8002d04:	71fb      	strb	r3, [r7, #7]
    if (b == BTN_RESET){ Screen_ResetToHome(); return; }
 8002d06:	79fb      	ldrb	r3, [r7, #7]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d102      	bne.n	8002d12 <Screen_HandleButton+0x16>
 8002d0c:	f7ff ffdc 	bl	8002cc8 <Screen_ResetToHome>
 8002d10:	e052      	b.n	8002db8 <Screen_HandleButton+0xbc>

    switch (ui) {
 8002d12:	4b2b      	ldr	r3, [pc, #172]	@ (8002dc0 <Screen_HandleButton+0xc4>)
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	2b05      	cmp	r3, #5
 8002d18:	d017      	beq.n	8002d4a <Screen_HandleButton+0x4e>
 8002d1a:	2b05      	cmp	r3, #5
 8002d1c:	dc3d      	bgt.n	8002d9a <Screen_HandleButton+0x9e>
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d005      	beq.n	8002d2e <Screen_HandleButton+0x32>
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	db39      	blt.n	8002d9a <Screen_HandleButton+0x9e>
 8002d26:	3b01      	subs	r3, #1
 8002d28:	2b03      	cmp	r3, #3
 8002d2a:	d836      	bhi.n	8002d9a <Screen_HandleButton+0x9e>
 8002d2c:	e006      	b.n	8002d3c <Screen_HandleButton+0x40>
    case UI_WELCOME:
        if (b == BTN_SELECT) ui = UI_DASH_WATER;
 8002d2e:	79fb      	ldrb	r3, [r7, #7]
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d134      	bne.n	8002d9e <Screen_HandleButton+0xa2>
 8002d34:	4b22      	ldr	r3, [pc, #136]	@ (8002dc0 <Screen_HandleButton+0xc4>)
 8002d36:	2201      	movs	r2, #1
 8002d38:	701a      	strb	r2, [r3, #0]
        break;
 8002d3a:	e030      	b.n	8002d9e <Screen_HandleButton+0xa2>

    case UI_DASH_WATER:
    case UI_DASH_MODE:
    case UI_DASH_SEARCH:
    case UI_DASH_TWIST:
        if (b == BTN_SELECT) ui = UI_MENU;
 8002d3c:	79fb      	ldrb	r3, [r7, #7]
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d12f      	bne.n	8002da2 <Screen_HandleButton+0xa6>
 8002d42:	4b1f      	ldr	r3, [pc, #124]	@ (8002dc0 <Screen_HandleButton+0xc4>)
 8002d44:	2205      	movs	r2, #5
 8002d46:	701a      	strb	r2, [r3, #0]
        break;
 8002d48:	e02b      	b.n	8002da2 <Screen_HandleButton+0xa6>

    case UI_MENU:
        if (b == BTN_UP)   menu_idx = (menu_idx==0)? MENU_COUNT-1 : menu_idx-1;
 8002d4a:	79fb      	ldrb	r3, [r7, #7]
 8002d4c:	2b03      	cmp	r3, #3
 8002d4e:	d10b      	bne.n	8002d68 <Screen_HandleButton+0x6c>
 8002d50:	4b1c      	ldr	r3, [pc, #112]	@ (8002dc4 <Screen_HandleButton+0xc8>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d004      	beq.n	8002d62 <Screen_HandleButton+0x66>
 8002d58:	4b1a      	ldr	r3, [pc, #104]	@ (8002dc4 <Screen_HandleButton+0xc8>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	e000      	b.n	8002d64 <Screen_HandleButton+0x68>
 8002d62:	2309      	movs	r3, #9
 8002d64:	4a17      	ldr	r2, [pc, #92]	@ (8002dc4 <Screen_HandleButton+0xc8>)
 8002d66:	7013      	strb	r3, [r2, #0]
        if (b == BTN_DOWN) menu_idx = (menu_idx+1) % MENU_COUNT;
 8002d68:	79fb      	ldrb	r3, [r7, #7]
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	d10f      	bne.n	8002d8e <Screen_HandleButton+0x92>
 8002d6e:	4b15      	ldr	r3, [pc, #84]	@ (8002dc4 <Screen_HandleButton+0xc8>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	3301      	adds	r3, #1
 8002d74:	4619      	mov	r1, r3
 8002d76:	4b14      	ldr	r3, [pc, #80]	@ (8002dc8 <Screen_HandleButton+0xcc>)
 8002d78:	fba3 2301 	umull	r2, r3, r3, r1
 8002d7c:	08da      	lsrs	r2, r3, #3
 8002d7e:	4613      	mov	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	4413      	add	r3, r2
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	1aca      	subs	r2, r1, r3
 8002d88:	b2d2      	uxtb	r2, r2
 8002d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8002dc4 <Screen_HandleButton+0xc8>)
 8002d8c:	701a      	strb	r2, [r3, #0]
        if (b == BTN_SELECT) apply_menu_action();
 8002d8e:	79fb      	ldrb	r3, [r7, #7]
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d108      	bne.n	8002da6 <Screen_HandleButton+0xaa>
 8002d94:	f7ff feb0 	bl	8002af8 <apply_menu_action>
        break;
 8002d98:	e005      	b.n	8002da6 <Screen_HandleButton+0xaa>

    default: break;
 8002d9a:	bf00      	nop
 8002d9c:	e004      	b.n	8002da8 <Screen_HandleButton+0xac>
        break;
 8002d9e:	bf00      	nop
 8002da0:	e002      	b.n	8002da8 <Screen_HandleButton+0xac>
        break;
 8002da2:	bf00      	nop
 8002da4:	e000      	b.n	8002da8 <Screen_HandleButton+0xac>
        break;
 8002da6:	bf00      	nop
    }

    screenNeedsRefresh = true;
 8002da8:	4b08      	ldr	r3, [pc, #32]	@ (8002dcc <Screen_HandleButton+0xd0>)
 8002daa:	2201      	movs	r2, #1
 8002dac:	701a      	strb	r2, [r3, #0]
    lastLcdUpdateTime = HAL_GetTick();
 8002dae:	f000 fb8d 	bl	80034cc <HAL_GetTick>
 8002db2:	4603      	mov	r3, r0
 8002db4:	4a06      	ldr	r2, [pc, #24]	@ (8002dd0 <Screen_HandleButton+0xd4>)
 8002db6:	6013      	str	r3, [r2, #0]
}
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	20000350 	.word	0x20000350
 8002dc4:	2000036d 	.word	0x2000036d
 8002dc8:	cccccccd 	.word	0xcccccccd
 8002dcc:	20000351 	.word	0x20000351
 8002dd0:	2000034c 	.word	0x2000034c

08002dd4 <Screen_HandleSwitches>:

/* Generic switch handler */
void Screen_HandleSwitches(void){
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
        {SWITCH3_GPIO_Port, SWITCH3_Pin, BTN_UP, LED3_Pin},
        {SWITCH4_GPIO_Port, SWITCH4_Pin, BTN_DOWN, LED4_Pin}
    };
    static bool prev[4] = {true,true,true,true};

    for (int i=0; i<4; i++){
 8002dda:	2300      	movs	r3, #0
 8002ddc:	607b      	str	r3, [r7, #4]
 8002dde:	e04f      	b.n	8002e80 <Screen_HandleSwitches+0xac>
        bool pressed = (HAL_GPIO_ReadPin(switchMap[i].port, switchMap[i].pin) == GPIO_PIN_RESET);
 8002de0:	492b      	ldr	r1, [pc, #172]	@ (8002e90 <Screen_HandleSwitches+0xbc>)
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	4613      	mov	r3, r2
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	4413      	add	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	440b      	add	r3, r1
 8002dee:	6818      	ldr	r0, [r3, #0]
 8002df0:	4927      	ldr	r1, [pc, #156]	@ (8002e90 <Screen_HandleSwitches+0xbc>)
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	4613      	mov	r3, r2
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	4413      	add	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	3304      	adds	r3, #4
 8002e00:	881b      	ldrh	r3, [r3, #0]
 8002e02:	4619      	mov	r1, r3
 8002e04:	f001 fad2 	bl	80043ac <HAL_GPIO_ReadPin>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	bf0c      	ite	eq
 8002e0e:	2301      	moveq	r3, #1
 8002e10:	2300      	movne	r3, #0
 8002e12:	70fb      	strb	r3, [r7, #3]
        if (pressed && prev[i]) {
 8002e14:	78fb      	ldrb	r3, [r7, #3]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d024      	beq.n	8002e64 <Screen_HandleSwitches+0x90>
 8002e1a:	4a1e      	ldr	r2, [pc, #120]	@ (8002e94 <Screen_HandleSwitches+0xc0>)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4413      	add	r3, r2
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d01e      	beq.n	8002e64 <Screen_HandleSwitches+0x90>
            prev[i] = false;
 8002e26:	4a1b      	ldr	r2, [pc, #108]	@ (8002e94 <Screen_HandleSwitches+0xc0>)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	701a      	strb	r2, [r3, #0]
            HAL_GPIO_TogglePin(GPIOA, switchMap[i].ledPin);
 8002e30:	4917      	ldr	r1, [pc, #92]	@ (8002e90 <Screen_HandleSwitches+0xbc>)
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	4613      	mov	r3, r2
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	4413      	add	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	3308      	adds	r3, #8
 8002e40:	881b      	ldrh	r3, [r3, #0]
 8002e42:	4619      	mov	r1, r3
 8002e44:	4814      	ldr	r0, [pc, #80]	@ (8002e98 <Screen_HandleSwitches+0xc4>)
 8002e46:	f001 fae0 	bl	800440a <HAL_GPIO_TogglePin>
            Screen_HandleButton(switchMap[i].btn);
 8002e4a:	4911      	ldr	r1, [pc, #68]	@ (8002e90 <Screen_HandleSwitches+0xbc>)
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	4413      	add	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	440b      	add	r3, r1
 8002e58:	3306      	adds	r3, #6
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff ff4d 	bl	8002cfc <Screen_HandleButton>
 8002e62:	e00a      	b.n	8002e7a <Screen_HandleSwitches+0xa6>
        } else if (!pressed) prev[i] = true;
 8002e64:	78fb      	ldrb	r3, [r7, #3]
 8002e66:	f083 0301 	eor.w	r3, r3, #1
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d004      	beq.n	8002e7a <Screen_HandleSwitches+0xa6>
 8002e70:	4a08      	ldr	r2, [pc, #32]	@ (8002e94 <Screen_HandleSwitches+0xc0>)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4413      	add	r3, r2
 8002e76:	2201      	movs	r2, #1
 8002e78:	701a      	strb	r2, [r3, #0]
    for (int i=0; i<4; i++){
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	607b      	str	r3, [r7, #4]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b03      	cmp	r3, #3
 8002e84:	ddac      	ble.n	8002de0 <Screen_HandleSwitches+0xc>
    }
}
 8002e86:	bf00      	nop
 8002e88:	bf00      	nop
 8002e8a:	3708      	adds	r7, #8
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	08008994 	.word	0x08008994
 8002e94:	20000060 	.word	0x20000060
 8002e98:	40010800 	.word	0x40010800

08002e9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002ea2:	4b15      	ldr	r3, [pc, #84]	@ (8002ef8 <HAL_MspInit+0x5c>)
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	4a14      	ldr	r2, [pc, #80]	@ (8002ef8 <HAL_MspInit+0x5c>)
 8002ea8:	f043 0301 	orr.w	r3, r3, #1
 8002eac:	6193      	str	r3, [r2, #24]
 8002eae:	4b12      	ldr	r3, [pc, #72]	@ (8002ef8 <HAL_MspInit+0x5c>)
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	60bb      	str	r3, [r7, #8]
 8002eb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002eba:	4b0f      	ldr	r3, [pc, #60]	@ (8002ef8 <HAL_MspInit+0x5c>)
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	4a0e      	ldr	r2, [pc, #56]	@ (8002ef8 <HAL_MspInit+0x5c>)
 8002ec0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ec4:	61d3      	str	r3, [r2, #28]
 8002ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8002ef8 <HAL_MspInit+0x5c>)
 8002ec8:	69db      	ldr	r3, [r3, #28]
 8002eca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ece:	607b      	str	r3, [r7, #4]
 8002ed0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002ed2:	4b0a      	ldr	r3, [pc, #40]	@ (8002efc <HAL_MspInit+0x60>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002ede:	60fb      	str	r3, [r7, #12]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	4a04      	ldr	r2, [pc, #16]	@ (8002efc <HAL_MspInit+0x60>)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002eee:	bf00      	nop
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bc80      	pop	{r7}
 8002ef6:	4770      	bx	lr
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	40010000 	.word	0x40010000

08002f00 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b088      	sub	sp, #32
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f08:	f107 0310 	add.w	r3, r7, #16
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	601a      	str	r2, [r3, #0]
 8002f10:	605a      	str	r2, [r3, #4]
 8002f12:	609a      	str	r2, [r3, #8]
 8002f14:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a14      	ldr	r2, [pc, #80]	@ (8002f6c <HAL_ADC_MspInit+0x6c>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d121      	bne.n	8002f64 <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002f20:	4b13      	ldr	r3, [pc, #76]	@ (8002f70 <HAL_ADC_MspInit+0x70>)
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	4a12      	ldr	r2, [pc, #72]	@ (8002f70 <HAL_ADC_MspInit+0x70>)
 8002f26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f2a:	6193      	str	r3, [r2, #24]
 8002f2c:	4b10      	ldr	r3, [pc, #64]	@ (8002f70 <HAL_ADC_MspInit+0x70>)
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f34:	60fb      	str	r3, [r7, #12]
 8002f36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f38:	4b0d      	ldr	r3, [pc, #52]	@ (8002f70 <HAL_ADC_MspInit+0x70>)
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	4a0c      	ldr	r2, [pc, #48]	@ (8002f70 <HAL_ADC_MspInit+0x70>)
 8002f3e:	f043 0304 	orr.w	r3, r3, #4
 8002f42:	6193      	str	r3, [r2, #24]
 8002f44:	4b0a      	ldr	r3, [pc, #40]	@ (8002f70 <HAL_ADC_MspInit+0x70>)
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	60bb      	str	r3, [r7, #8]
 8002f4e:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002f50:	233f      	movs	r3, #63	@ 0x3f
 8002f52:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f54:	2303      	movs	r3, #3
 8002f56:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f58:	f107 0310 	add.w	r3, r7, #16
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4805      	ldr	r0, [pc, #20]	@ (8002f74 <HAL_ADC_MspInit+0x74>)
 8002f60:	f001 f8a0 	bl	80040a4 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002f64:	bf00      	nop
 8002f66:	3720      	adds	r7, #32
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40012400 	.word	0x40012400
 8002f70:	40021000 	.word	0x40021000
 8002f74:	40010800 	.word	0x40010800

08002f78 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b088      	sub	sp, #32
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f80:	f107 0310 	add.w	r3, r7, #16
 8002f84:	2200      	movs	r2, #0
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	605a      	str	r2, [r3, #4]
 8002f8a:	609a      	str	r2, [r3, #8]
 8002f8c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a16      	ldr	r2, [pc, #88]	@ (8002fec <HAL_I2C_MspInit+0x74>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d124      	bne.n	8002fe2 <HAL_I2C_MspInit+0x6a>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f98:	4b15      	ldr	r3, [pc, #84]	@ (8002ff0 <HAL_I2C_MspInit+0x78>)
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	4a14      	ldr	r2, [pc, #80]	@ (8002ff0 <HAL_I2C_MspInit+0x78>)
 8002f9e:	f043 0308 	orr.w	r3, r3, #8
 8002fa2:	6193      	str	r3, [r2, #24]
 8002fa4:	4b12      	ldr	r3, [pc, #72]	@ (8002ff0 <HAL_I2C_MspInit+0x78>)
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	f003 0308 	and.w	r3, r3, #8
 8002fac:	60fb      	str	r3, [r7, #12]
 8002fae:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002fb0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002fb4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fb6:	2312      	movs	r3, #18
 8002fb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fbe:	f107 0310 	add.w	r3, r7, #16
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	480b      	ldr	r0, [pc, #44]	@ (8002ff4 <HAL_I2C_MspInit+0x7c>)
 8002fc6:	f001 f86d 	bl	80040a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002fca:	4b09      	ldr	r3, [pc, #36]	@ (8002ff0 <HAL_I2C_MspInit+0x78>)
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	4a08      	ldr	r2, [pc, #32]	@ (8002ff0 <HAL_I2C_MspInit+0x78>)
 8002fd0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002fd4:	61d3      	str	r3, [r2, #28]
 8002fd6:	4b06      	ldr	r3, [pc, #24]	@ (8002ff0 <HAL_I2C_MspInit+0x78>)
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fde:	60bb      	str	r3, [r7, #8]
 8002fe0:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002fe2:	bf00      	nop
 8002fe4:	3720      	adds	r7, #32
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	40005800 	.word	0x40005800
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	40010c00 	.word	0x40010c00

08002ff8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b08a      	sub	sp, #40	@ 0x28
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003000:	f107 0314 	add.w	r3, r7, #20
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	605a      	str	r2, [r3, #4]
 800300a:	609a      	str	r2, [r3, #8]
 800300c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a22      	ldr	r2, [pc, #136]	@ (800309c <HAL_SPI_MspInit+0xa4>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d13d      	bne.n	8003094 <HAL_SPI_MspInit+0x9c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003018:	4b21      	ldr	r3, [pc, #132]	@ (80030a0 <HAL_SPI_MspInit+0xa8>)
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	4a20      	ldr	r2, [pc, #128]	@ (80030a0 <HAL_SPI_MspInit+0xa8>)
 800301e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003022:	6193      	str	r3, [r2, #24]
 8003024:	4b1e      	ldr	r3, [pc, #120]	@ (80030a0 <HAL_SPI_MspInit+0xa8>)
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800302c:	613b      	str	r3, [r7, #16]
 800302e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003030:	4b1b      	ldr	r3, [pc, #108]	@ (80030a0 <HAL_SPI_MspInit+0xa8>)
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	4a1a      	ldr	r2, [pc, #104]	@ (80030a0 <HAL_SPI_MspInit+0xa8>)
 8003036:	f043 0308 	orr.w	r3, r3, #8
 800303a:	6193      	str	r3, [r2, #24]
 800303c:	4b18      	ldr	r3, [pc, #96]	@ (80030a0 <HAL_SPI_MspInit+0xa8>)
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	f003 0308 	and.w	r3, r3, #8
 8003044:	60fb      	str	r3, [r7, #12]
 8003046:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8003048:	2328      	movs	r3, #40	@ 0x28
 800304a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800304c:	2302      	movs	r3, #2
 800304e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003050:	2303      	movs	r3, #3
 8003052:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003054:	f107 0314 	add.w	r3, r7, #20
 8003058:	4619      	mov	r1, r3
 800305a:	4812      	ldr	r0, [pc, #72]	@ (80030a4 <HAL_SPI_MspInit+0xac>)
 800305c:	f001 f822 	bl	80040a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003060:	2310      	movs	r3, #16
 8003062:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003064:	2300      	movs	r3, #0
 8003066:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003068:	2300      	movs	r3, #0
 800306a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800306c:	f107 0314 	add.w	r3, r7, #20
 8003070:	4619      	mov	r1, r3
 8003072:	480c      	ldr	r0, [pc, #48]	@ (80030a4 <HAL_SPI_MspInit+0xac>)
 8003074:	f001 f816 	bl	80040a4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8003078:	4b0b      	ldr	r3, [pc, #44]	@ (80030a8 <HAL_SPI_MspInit+0xb0>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	627b      	str	r3, [r7, #36]	@ 0x24
 800307e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003080:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8003084:	627b      	str	r3, [r7, #36]	@ 0x24
 8003086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003088:	f043 0301 	orr.w	r3, r3, #1
 800308c:	627b      	str	r3, [r7, #36]	@ 0x24
 800308e:	4a06      	ldr	r2, [pc, #24]	@ (80030a8 <HAL_SPI_MspInit+0xb0>)
 8003090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003092:	6053      	str	r3, [r2, #4]

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003094:	bf00      	nop
 8003096:	3728      	adds	r7, #40	@ 0x28
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	40013000 	.word	0x40013000
 80030a0:	40021000 	.word	0x40021000
 80030a4:	40010c00 	.word	0x40010c00
 80030a8:	40010000 	.word	0x40010000

080030ac <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b088      	sub	sp, #32
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030b4:	f107 0310 	add.w	r3, r7, #16
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	605a      	str	r2, [r3, #4]
 80030be:	609a      	str	r2, [r3, #8]
 80030c0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a1c      	ldr	r2, [pc, #112]	@ (8003138 <HAL_UART_MspInit+0x8c>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d131      	bne.n	8003130 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80030cc:	4b1b      	ldr	r3, [pc, #108]	@ (800313c <HAL_UART_MspInit+0x90>)
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	4a1a      	ldr	r2, [pc, #104]	@ (800313c <HAL_UART_MspInit+0x90>)
 80030d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030d6:	6193      	str	r3, [r2, #24]
 80030d8:	4b18      	ldr	r3, [pc, #96]	@ (800313c <HAL_UART_MspInit+0x90>)
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030e0:	60fb      	str	r3, [r7, #12]
 80030e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030e4:	4b15      	ldr	r3, [pc, #84]	@ (800313c <HAL_UART_MspInit+0x90>)
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	4a14      	ldr	r2, [pc, #80]	@ (800313c <HAL_UART_MspInit+0x90>)
 80030ea:	f043 0304 	orr.w	r3, r3, #4
 80030ee:	6193      	str	r3, [r2, #24]
 80030f0:	4b12      	ldr	r3, [pc, #72]	@ (800313c <HAL_UART_MspInit+0x90>)
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	f003 0304 	and.w	r3, r3, #4
 80030f8:	60bb      	str	r3, [r7, #8]
 80030fa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80030fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003100:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003102:	2302      	movs	r3, #2
 8003104:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003106:	2303      	movs	r3, #3
 8003108:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800310a:	f107 0310 	add.w	r3, r7, #16
 800310e:	4619      	mov	r1, r3
 8003110:	480b      	ldr	r0, [pc, #44]	@ (8003140 <HAL_UART_MspInit+0x94>)
 8003112:	f000 ffc7 	bl	80040a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003116:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800311a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800311c:	2300      	movs	r3, #0
 800311e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003120:	2300      	movs	r3, #0
 8003122:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003124:	f107 0310 	add.w	r3, r7, #16
 8003128:	4619      	mov	r1, r3
 800312a:	4805      	ldr	r0, [pc, #20]	@ (8003140 <HAL_UART_MspInit+0x94>)
 800312c:	f000 ffba 	bl	80040a4 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8003130:	bf00      	nop
 8003132:	3720      	adds	r7, #32
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	40013800 	.word	0x40013800
 800313c:	40021000 	.word	0x40021000
 8003140:	40010800 	.word	0x40010800

08003144 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003148:	bf00      	nop
 800314a:	e7fd      	b.n	8003148 <NMI_Handler+0x4>

0800314c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003150:	bf00      	nop
 8003152:	e7fd      	b.n	8003150 <HardFault_Handler+0x4>

08003154 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003158:	bf00      	nop
 800315a:	e7fd      	b.n	8003158 <MemManage_Handler+0x4>

0800315c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003160:	bf00      	nop
 8003162:	e7fd      	b.n	8003160 <BusFault_Handler+0x4>

08003164 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003168:	bf00      	nop
 800316a:	e7fd      	b.n	8003168 <UsageFault_Handler+0x4>

0800316c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003170:	bf00      	nop
 8003172:	46bd      	mov	sp, r7
 8003174:	bc80      	pop	{r7}
 8003176:	4770      	bx	lr

08003178 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800317c:	bf00      	nop
 800317e:	46bd      	mov	sp, r7
 8003180:	bc80      	pop	{r7}
 8003182:	4770      	bx	lr

08003184 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003188:	bf00      	nop
 800318a:	46bd      	mov	sp, r7
 800318c:	bc80      	pop	{r7}
 800318e:	4770      	bx	lr

08003190 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003194:	f000 f988 	bl	80034a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003198:	bf00      	nop
 800319a:	bd80      	pop	{r7, pc}

0800319c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80031a0:	4802      	ldr	r0, [pc, #8]	@ (80031ac <RTC_Alarm_IRQHandler+0x10>)
 80031a2:	f002 ff29 	bl	8005ff8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80031a6:	bf00      	nop
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	200001b4 	.word	0x200001b4

080031b0 <now_ms>:
static GPIO_PinState last_raw[SWITCH_COUNT];       // last sampled raw pin

static uint32_t      press_start_ms[SWITCH_COUNT]; // for long press
static bool          long_fired[SWITCH_COUNT];

static inline uint32_t now_ms(void) { return HAL_GetTick(); }
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	f000 f98a 	bl	80034cc <HAL_GetTick>
 80031b8:	4603      	mov	r3, r0
 80031ba:	4618      	mov	r0, r3
 80031bc:	bd80      	pop	{r7, pc}
	...

080031c0 <Switches_Init>:
    }
}

/* --- Init all switches as input pullup --- */
void Switches_Init(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c6:	1d3b      	adds	r3, r7, #4
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	605a      	str	r2, [r3, #4]
 80031ce:	609a      	str	r2, [r3, #8]
 80031d0:	60da      	str	r2, [r3, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031d2:	4b20      	ldr	r3, [pc, #128]	@ (8003254 <Switches_Init+0x94>)
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	4a1f      	ldr	r2, [pc, #124]	@ (8003254 <Switches_Init+0x94>)
 80031d8:	f043 0308 	orr.w	r3, r3, #8
 80031dc:	6193      	str	r3, [r2, #24]
 80031de:	4b1d      	ldr	r3, [pc, #116]	@ (8003254 <Switches_Init+0x94>)
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	f003 0308 	and.w	r3, r3, #8
 80031e6:	603b      	str	r3, [r7, #0]
 80031e8:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031ea:	2300      	movs	r3, #0
 80031ec:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031ee:	2301      	movs	r3, #1
 80031f0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pin  = SWITCH1_Pin|SWITCH2_Pin|SWITCH3_Pin|SWITCH4_Pin;
 80031f2:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80031f6:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(SWITCH1_GPIO_Port, &GPIO_InitStruct);
 80031f8:	1d3b      	adds	r3, r7, #4
 80031fa:	4619      	mov	r1, r3
 80031fc:	4816      	ldr	r0, [pc, #88]	@ (8003258 <Switches_Init+0x98>)
 80031fe:	f000 ff51 	bl	80040a4 <HAL_GPIO_Init>

    for (int i = 0; i < SWITCH_COUNT; ++i) {
 8003202:	2300      	movs	r3, #0
 8003204:	617b      	str	r3, [r7, #20]
 8003206:	e01d      	b.n	8003244 <Switches_Init+0x84>
        stable_state[i]   = GPIO_PIN_SET;  // released
 8003208:	4a14      	ldr	r2, [pc, #80]	@ (800325c <Switches_Init+0x9c>)
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	4413      	add	r3, r2
 800320e:	2201      	movs	r2, #1
 8003210:	701a      	strb	r2, [r3, #0]
        last_raw[i]       = GPIO_PIN_SET;
 8003212:	4a13      	ldr	r2, [pc, #76]	@ (8003260 <Switches_Init+0xa0>)
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	4413      	add	r3, r2
 8003218:	2201      	movs	r2, #1
 800321a:	701a      	strb	r2, [r3, #0]
        last_change[i]    = now_ms();
 800321c:	f7ff ffc8 	bl	80031b0 <now_ms>
 8003220:	4602      	mov	r2, r0
 8003222:	4910      	ldr	r1, [pc, #64]	@ (8003264 <Switches_Init+0xa4>)
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        press_start_ms[i] = 0;
 800322a:	4a0f      	ldr	r2, [pc, #60]	@ (8003268 <Switches_Init+0xa8>)
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	2100      	movs	r1, #0
 8003230:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        long_fired[i]     = false;
 8003234:	4a0d      	ldr	r2, [pc, #52]	@ (800326c <Switches_Init+0xac>)
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	4413      	add	r3, r2
 800323a:	2200      	movs	r2, #0
 800323c:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < SWITCH_COUNT; ++i) {
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	3301      	adds	r3, #1
 8003242:	617b      	str	r3, [r7, #20]
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	2b03      	cmp	r3, #3
 8003248:	ddde      	ble.n	8003208 <Switches_Init+0x48>
    }
}
 800324a:	bf00      	nop
 800324c:	bf00      	nop
 800324e:	3718      	adds	r7, #24
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	40021000 	.word	0x40021000
 8003258:	40010c00 	.word	0x40010c00
 800325c:	20000370 	.word	0x20000370
 8003260:	20000384 	.word	0x20000384
 8003264:	20000374 	.word	0x20000374
 8003268:	20000388 	.word	0x20000388
 800326c:	20000398 	.word	0x20000398

08003270 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003278:	4a14      	ldr	r2, [pc, #80]	@ (80032cc <_sbrk+0x5c>)
 800327a:	4b15      	ldr	r3, [pc, #84]	@ (80032d0 <_sbrk+0x60>)
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003284:	4b13      	ldr	r3, [pc, #76]	@ (80032d4 <_sbrk+0x64>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d102      	bne.n	8003292 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800328c:	4b11      	ldr	r3, [pc, #68]	@ (80032d4 <_sbrk+0x64>)
 800328e:	4a12      	ldr	r2, [pc, #72]	@ (80032d8 <_sbrk+0x68>)
 8003290:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003292:	4b10      	ldr	r3, [pc, #64]	@ (80032d4 <_sbrk+0x64>)
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4413      	add	r3, r2
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	429a      	cmp	r2, r3
 800329e:	d207      	bcs.n	80032b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032a0:	f004 f834 	bl	800730c <__errno>
 80032a4:	4603      	mov	r3, r0
 80032a6:	220c      	movs	r2, #12
 80032a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032aa:	f04f 33ff 	mov.w	r3, #4294967295
 80032ae:	e009      	b.n	80032c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032b0:	4b08      	ldr	r3, [pc, #32]	@ (80032d4 <_sbrk+0x64>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032b6:	4b07      	ldr	r3, [pc, #28]	@ (80032d4 <_sbrk+0x64>)
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4413      	add	r3, r2
 80032be:	4a05      	ldr	r2, [pc, #20]	@ (80032d4 <_sbrk+0x64>)
 80032c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032c2:	68fb      	ldr	r3, [r7, #12]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3718      	adds	r7, #24
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	20005000 	.word	0x20005000
 80032d0:	00000400 	.word	0x00000400
 80032d4:	2000039c 	.word	0x2000039c
 80032d8:	20000538 	.word	0x20000538

080032dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032e0:	bf00      	nop
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bc80      	pop	{r7}
 80032e6:	4770      	bx	lr

080032e8 <UART_Init>:

/**
  * @brief Initialize UART reception (interrupt mode, one byte at a time).
  */
void UART_Init(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
    // Clear the buffer and reset index
    memset(rxBuffer, 0, sizeof(rxBuffer));
 80032ec:	2240      	movs	r2, #64	@ 0x40
 80032ee:	2100      	movs	r1, #0
 80032f0:	4807      	ldr	r0, [pc, #28]	@ (8003310 <UART_Init+0x28>)
 80032f2:	f003 ffdd 	bl	80072b0 <memset>
    rxIndex = 0;
 80032f6:	4b07      	ldr	r3, [pc, #28]	@ (8003314 <UART_Init+0x2c>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	801a      	strh	r2, [r3, #0]
    packetReady = false;
 80032fc:	4b06      	ldr	r3, [pc, #24]	@ (8003318 <UART_Init+0x30>)
 80032fe:	2200      	movs	r2, #0
 8003300:	701a      	strb	r2, [r3, #0]

    // Start UART reception (non-blocking)
    HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 8003302:	2201      	movs	r2, #1
 8003304:	4905      	ldr	r1, [pc, #20]	@ (800331c <UART_Init+0x34>)
 8003306:	4806      	ldr	r0, [pc, #24]	@ (8003320 <UART_Init+0x38>)
 8003308:	f003 fd1a 	bl	8006d40 <HAL_UART_Receive_IT>
}
 800330c:	bf00      	nop
 800330e:	bd80      	pop	{r7, pc}
 8003310:	200003a4 	.word	0x200003a4
 8003314:	200003e4 	.word	0x200003e4
 8003318:	200003e6 	.word	0x200003e6
 800331c:	200003a0 	.word	0x200003a0
 8003320:	20000220 	.word	0x20000220

08003324 <UART_TransmitString>:

/**
  * @brief Transmit a null-terminated string.
  */
void UART_TransmitString(UART_HandleTypeDef *huart, const char *str)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 800332e:	6838      	ldr	r0, [r7, #0]
 8003330:	f7fc ff16 	bl	8000160 <strlen>
 8003334:	4603      	mov	r3, r0
 8003336:	b29a      	uxth	r2, r3
 8003338:	f04f 33ff 	mov.w	r3, #4294967295
 800333c:	6839      	ldr	r1, [r7, #0]
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f003 fc73 	bl	8006c2a <HAL_UART_Transmit>
}
 8003344:	bf00      	nop
 8003346:	3708      	adds	r7, #8
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <UART_GetReceivedPacket>:
        HAL_UART_Receive_IT(&huart1, &rxByte, 1);
    }
}

bool UART_GetReceivedPacket(char *buffer, size_t buffer_size)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
    if (packetReady)
 8003356:	4b1b      	ldr	r3, [pc, #108]	@ (80033c4 <UART_GetReceivedPacket+0x78>)
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d02c      	beq.n	80033b8 <UART_GetReceivedPacket+0x6c>
    {
        // Ensure destination buffer is large enough
        size_t len = strlen(rxBuffer);
 800335e:	481a      	ldr	r0, [pc, #104]	@ (80033c8 <UART_GetReceivedPacket+0x7c>)
 8003360:	f7fc fefe 	bl	8000160 <strlen>
 8003364:	60f8      	str	r0, [r7, #12]
        if (len < buffer_size)
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	429a      	cmp	r2, r3
 800336c:	d219      	bcs.n	80033a2 <UART_GetReceivedPacket+0x56>
        {
            strncpy(buffer, rxBuffer, buffer_size - 1);
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	3b01      	subs	r3, #1
 8003372:	461a      	mov	r2, r3
 8003374:	4914      	ldr	r1, [pc, #80]	@ (80033c8 <UART_GetReceivedPacket+0x7c>)
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f003 ffb4 	bl	80072e4 <strncpy>
            buffer[buffer_size - 1] = '\0'; // Ensure null-termination
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	3b01      	subs	r3, #1
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	4413      	add	r3, r2
 8003384:	2200      	movs	r2, #0
 8003386:	701a      	strb	r2, [r3, #0]

            // Reset internal buffer for next packet
            memset(rxBuffer, 0, sizeof(rxBuffer));
 8003388:	2240      	movs	r2, #64	@ 0x40
 800338a:	2100      	movs	r1, #0
 800338c:	480e      	ldr	r0, [pc, #56]	@ (80033c8 <UART_GetReceivedPacket+0x7c>)
 800338e:	f003 ff8f 	bl	80072b0 <memset>
            rxIndex = 0;
 8003392:	4b0e      	ldr	r3, [pc, #56]	@ (80033cc <UART_GetReceivedPacket+0x80>)
 8003394:	2200      	movs	r2, #0
 8003396:	801a      	strh	r2, [r3, #0]
            packetReady = false;
 8003398:	4b0a      	ldr	r3, [pc, #40]	@ (80033c4 <UART_GetReceivedPacket+0x78>)
 800339a:	2200      	movs	r2, #0
 800339c:	701a      	strb	r2, [r3, #0]
            return true;
 800339e:	2301      	movs	r3, #1
 80033a0:	e00b      	b.n	80033ba <UART_GetReceivedPacket+0x6e>
        }
        else
        {
            // Destination buffer too small, discard internal packet
            memset(rxBuffer, 0, sizeof(rxBuffer));
 80033a2:	2240      	movs	r2, #64	@ 0x40
 80033a4:	2100      	movs	r1, #0
 80033a6:	4808      	ldr	r0, [pc, #32]	@ (80033c8 <UART_GetReceivedPacket+0x7c>)
 80033a8:	f003 ff82 	bl	80072b0 <memset>
            rxIndex = 0;
 80033ac:	4b07      	ldr	r3, [pc, #28]	@ (80033cc <UART_GetReceivedPacket+0x80>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	801a      	strh	r2, [r3, #0]
            packetReady = false;
 80033b2:	4b04      	ldr	r3, [pc, #16]	@ (80033c4 <UART_GetReceivedPacket+0x78>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	701a      	strb	r2, [r3, #0]
            // Optionally, log an error
        }
    }
    return false; // Ensure to return false if no packet is ready
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	200003e6 	.word	0x200003e6
 80033c8:	200003a4 	.word	0x200003a4
 80033cc:	200003e4 	.word	0x200003e4

080033d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80033d0:	f7ff ff84 	bl	80032dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80033d4:	480b      	ldr	r0, [pc, #44]	@ (8003404 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80033d6:	490c      	ldr	r1, [pc, #48]	@ (8003408 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80033d8:	4a0c      	ldr	r2, [pc, #48]	@ (800340c <LoopFillZerobss+0x16>)
  movs r3, #0
 80033da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033dc:	e002      	b.n	80033e4 <LoopCopyDataInit>

080033de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033e2:	3304      	adds	r3, #4

080033e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033e8:	d3f9      	bcc.n	80033de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033ea:	4a09      	ldr	r2, [pc, #36]	@ (8003410 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80033ec:	4c09      	ldr	r4, [pc, #36]	@ (8003414 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80033ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033f0:	e001      	b.n	80033f6 <LoopFillZerobss>

080033f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033f4:	3204      	adds	r2, #4

080033f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033f8:	d3fb      	bcc.n	80033f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80033fa:	f003 ff8d 	bl	8007318 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80033fe:	f7fe faa1 	bl	8001944 <main>
  bx lr
 8003402:	4770      	bx	lr
  ldr r0, =_sdata
 8003404:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003408:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 800340c:	08008b64 	.word	0x08008b64
  ldr r2, =_sbss
 8003410:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8003414:	20000534 	.word	0x20000534

08003418 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003418:	e7fe      	b.n	8003418 <ADC1_2_IRQHandler>
	...

0800341c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003420:	4b08      	ldr	r3, [pc, #32]	@ (8003444 <HAL_Init+0x28>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a07      	ldr	r2, [pc, #28]	@ (8003444 <HAL_Init+0x28>)
 8003426:	f043 0310 	orr.w	r3, r3, #16
 800342a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800342c:	2003      	movs	r0, #3
 800342e:	f000 fe05 	bl	800403c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003432:	2000      	movs	r0, #0
 8003434:	f000 f808 	bl	8003448 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003438:	f7ff fd30 	bl	8002e9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	40022000 	.word	0x40022000

08003448 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003450:	4b12      	ldr	r3, [pc, #72]	@ (800349c <HAL_InitTick+0x54>)
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	4b12      	ldr	r3, [pc, #72]	@ (80034a0 <HAL_InitTick+0x58>)
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	4619      	mov	r1, r3
 800345a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800345e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003462:	fbb2 f3f3 	udiv	r3, r2, r3
 8003466:	4618      	mov	r0, r3
 8003468:	f000 fe0f 	bl	800408a <HAL_SYSTICK_Config>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e00e      	b.n	8003494 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2b0f      	cmp	r3, #15
 800347a:	d80a      	bhi.n	8003492 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800347c:	2200      	movs	r2, #0
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	f04f 30ff 	mov.w	r0, #4294967295
 8003484:	f000 fde5 	bl	8004052 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003488:	4a06      	ldr	r2, [pc, #24]	@ (80034a4 <HAL_InitTick+0x5c>)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800348e:	2300      	movs	r3, #0
 8003490:	e000      	b.n	8003494 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
}
 8003494:	4618      	mov	r0, r3
 8003496:	3708      	adds	r7, #8
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	20000064 	.word	0x20000064
 80034a0:	2000006c 	.word	0x2000006c
 80034a4:	20000068 	.word	0x20000068

080034a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034ac:	4b05      	ldr	r3, [pc, #20]	@ (80034c4 <HAL_IncTick+0x1c>)
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	461a      	mov	r2, r3
 80034b2:	4b05      	ldr	r3, [pc, #20]	@ (80034c8 <HAL_IncTick+0x20>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4413      	add	r3, r2
 80034b8:	4a03      	ldr	r2, [pc, #12]	@ (80034c8 <HAL_IncTick+0x20>)
 80034ba:	6013      	str	r3, [r2, #0]
}
 80034bc:	bf00      	nop
 80034be:	46bd      	mov	sp, r7
 80034c0:	bc80      	pop	{r7}
 80034c2:	4770      	bx	lr
 80034c4:	2000006c 	.word	0x2000006c
 80034c8:	200003e8 	.word	0x200003e8

080034cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
  return uwTick;
 80034d0:	4b02      	ldr	r3, [pc, #8]	@ (80034dc <HAL_GetTick+0x10>)
 80034d2:	681b      	ldr	r3, [r3, #0]
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bc80      	pop	{r7}
 80034da:	4770      	bx	lr
 80034dc:	200003e8 	.word	0x200003e8

080034e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034e8:	f7ff fff0 	bl	80034cc <HAL_GetTick>
 80034ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f8:	d005      	beq.n	8003506 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003524 <HAL_Delay+0x44>)
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	461a      	mov	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	4413      	add	r3, r2
 8003504:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003506:	bf00      	nop
 8003508:	f7ff ffe0 	bl	80034cc <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	429a      	cmp	r2, r3
 8003516:	d8f7      	bhi.n	8003508 <HAL_Delay+0x28>
  {
  }
}
 8003518:	bf00      	nop
 800351a:	bf00      	nop
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	2000006c 	.word	0x2000006c

08003528 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003530:	2300      	movs	r3, #0
 8003532:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003534:	2300      	movs	r3, #0
 8003536:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003538:	2300      	movs	r3, #0
 800353a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800353c:	2300      	movs	r3, #0
 800353e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e0be      	b.n	80036c8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003554:	2b00      	cmp	r3, #0
 8003556:	d109      	bne.n	800356c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7ff fcca 	bl	8002f00 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 fbc5 	bl	8003cfc <ADC_ConversionStop_Disable>
 8003572:	4603      	mov	r3, r0
 8003574:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800357a:	f003 0310 	and.w	r3, r3, #16
 800357e:	2b00      	cmp	r3, #0
 8003580:	f040 8099 	bne.w	80036b6 <HAL_ADC_Init+0x18e>
 8003584:	7dfb      	ldrb	r3, [r7, #23]
 8003586:	2b00      	cmp	r3, #0
 8003588:	f040 8095 	bne.w	80036b6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003590:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003594:	f023 0302 	bic.w	r3, r3, #2
 8003598:	f043 0202 	orr.w	r2, r3, #2
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80035a8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	7b1b      	ldrb	r3, [r3, #12]
 80035ae:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80035b0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80035b2:	68ba      	ldr	r2, [r7, #8]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035c0:	d003      	beq.n	80035ca <HAL_ADC_Init+0xa2>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d102      	bne.n	80035d0 <HAL_ADC_Init+0xa8>
 80035ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80035ce:	e000      	b.n	80035d2 <HAL_ADC_Init+0xaa>
 80035d0:	2300      	movs	r3, #0
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	7d1b      	ldrb	r3, [r3, #20]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d119      	bne.n	8003614 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	7b1b      	ldrb	r3, [r3, #12]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d109      	bne.n	80035fc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	3b01      	subs	r3, #1
 80035ee:	035a      	lsls	r2, r3, #13
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80035f8:	613b      	str	r3, [r7, #16]
 80035fa:	e00b      	b.n	8003614 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003600:	f043 0220 	orr.w	r2, r3, #32
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800360c:	f043 0201 	orr.w	r2, r3, #1
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	430a      	orrs	r2, r1
 8003626:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689a      	ldr	r2, [r3, #8]
 800362e:	4b28      	ldr	r3, [pc, #160]	@ (80036d0 <HAL_ADC_Init+0x1a8>)
 8003630:	4013      	ands	r3, r2
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6812      	ldr	r2, [r2, #0]
 8003636:	68b9      	ldr	r1, [r7, #8]
 8003638:	430b      	orrs	r3, r1
 800363a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003644:	d003      	beq.n	800364e <HAL_ADC_Init+0x126>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d104      	bne.n	8003658 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	3b01      	subs	r3, #1
 8003654:	051b      	lsls	r3, r3, #20
 8003656:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800365e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	430a      	orrs	r2, r1
 800366a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689a      	ldr	r2, [r3, #8]
 8003672:	4b18      	ldr	r3, [pc, #96]	@ (80036d4 <HAL_ADC_Init+0x1ac>)
 8003674:	4013      	ands	r3, r2
 8003676:	68ba      	ldr	r2, [r7, #8]
 8003678:	429a      	cmp	r2, r3
 800367a:	d10b      	bne.n	8003694 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003686:	f023 0303 	bic.w	r3, r3, #3
 800368a:	f043 0201 	orr.w	r2, r3, #1
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003692:	e018      	b.n	80036c6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003698:	f023 0312 	bic.w	r3, r3, #18
 800369c:	f043 0210 	orr.w	r2, r3, #16
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a8:	f043 0201 	orr.w	r2, r3, #1
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80036b4:	e007      	b.n	80036c6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ba:	f043 0210 	orr.w	r2, r3, #16
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80036c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3718      	adds	r7, #24
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	ffe1f7fd 	.word	0xffe1f7fd
 80036d4:	ff1f0efe 	.word	0xff1f0efe

080036d8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036e0:	2300      	movs	r3, #0
 80036e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d101      	bne.n	80036f2 <HAL_ADC_Start+0x1a>
 80036ee:	2302      	movs	r3, #2
 80036f0:	e098      	b.n	8003824 <HAL_ADC_Start+0x14c>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2201      	movs	r2, #1
 80036f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 faa4 	bl	8003c48 <ADC_Enable>
 8003700:	4603      	mov	r3, r0
 8003702:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003704:	7bfb      	ldrb	r3, [r7, #15]
 8003706:	2b00      	cmp	r3, #0
 8003708:	f040 8087 	bne.w	800381a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003710:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003714:	f023 0301 	bic.w	r3, r3, #1
 8003718:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a41      	ldr	r2, [pc, #260]	@ (800382c <HAL_ADC_Start+0x154>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d105      	bne.n	8003736 <HAL_ADC_Start+0x5e>
 800372a:	4b41      	ldr	r3, [pc, #260]	@ (8003830 <HAL_ADC_Start+0x158>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d115      	bne.n	8003762 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800373a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800374c:	2b00      	cmp	r3, #0
 800374e:	d026      	beq.n	800379e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003754:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003758:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003760:	e01d      	b.n	800379e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003766:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a2f      	ldr	r2, [pc, #188]	@ (8003830 <HAL_ADC_Start+0x158>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d004      	beq.n	8003782 <HAL_ADC_Start+0xaa>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a2b      	ldr	r2, [pc, #172]	@ (800382c <HAL_ADC_Start+0x154>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d10d      	bne.n	800379e <HAL_ADC_Start+0xc6>
 8003782:	4b2b      	ldr	r3, [pc, #172]	@ (8003830 <HAL_ADC_Start+0x158>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800378a:	2b00      	cmp	r3, #0
 800378c:	d007      	beq.n	800379e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003792:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003796:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d006      	beq.n	80037b8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ae:	f023 0206 	bic.w	r2, r3, #6
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80037b6:	e002      	b.n	80037be <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f06f 0202 	mvn.w	r2, #2
 80037ce:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80037da:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80037de:	d113      	bne.n	8003808 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80037e4:	4a11      	ldr	r2, [pc, #68]	@ (800382c <HAL_ADC_Start+0x154>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d105      	bne.n	80037f6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80037ea:	4b11      	ldr	r3, [pc, #68]	@ (8003830 <HAL_ADC_Start+0x158>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d108      	bne.n	8003808 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689a      	ldr	r2, [r3, #8]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8003804:	609a      	str	r2, [r3, #8]
 8003806:	e00c      	b.n	8003822 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689a      	ldr	r2, [r3, #8]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003816:	609a      	str	r2, [r3, #8]
 8003818:	e003      	b.n	8003822 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003822:	7bfb      	ldrb	r3, [r7, #15]
}
 8003824:	4618      	mov	r0, r3
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40012800 	.word	0x40012800
 8003830:	40012400 	.word	0x40012400

08003834 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003834:	b590      	push	{r4, r7, lr}
 8003836:	b087      	sub	sp, #28
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800383e:	2300      	movs	r3, #0
 8003840:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003842:	2300      	movs	r3, #0
 8003844:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8003846:	2300      	movs	r3, #0
 8003848:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800384a:	f7ff fe3f 	bl	80034cc <HAL_GetTick>
 800384e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00b      	beq.n	8003876 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003862:	f043 0220 	orr.w	r2, r3, #32
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e0d3      	b.n	8003a1e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003880:	2b00      	cmp	r3, #0
 8003882:	d131      	bne.n	80038e8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800388a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800388e:	2b00      	cmp	r3, #0
 8003890:	d12a      	bne.n	80038e8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003892:	e021      	b.n	80038d8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800389a:	d01d      	beq.n	80038d8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d007      	beq.n	80038b2 <HAL_ADC_PollForConversion+0x7e>
 80038a2:	f7ff fe13 	bl	80034cc <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	683a      	ldr	r2, [r7, #0]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d212      	bcs.n	80038d8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0302 	and.w	r3, r3, #2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d10b      	bne.n	80038d8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c4:	f043 0204 	orr.w	r2, r3, #4
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e0a2      	b.n	8003a1e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d0d6      	beq.n	8003894 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80038e6:	e070      	b.n	80039ca <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80038e8:	4b4f      	ldr	r3, [pc, #316]	@ (8003a28 <HAL_ADC_PollForConversion+0x1f4>)
 80038ea:	681c      	ldr	r4, [r3, #0]
 80038ec:	2002      	movs	r0, #2
 80038ee:	f002 facd 	bl	8005e8c <HAL_RCCEx_GetPeriphCLKFreq>
 80038f2:	4603      	mov	r3, r0
 80038f4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6919      	ldr	r1, [r3, #16]
 80038fe:	4b4b      	ldr	r3, [pc, #300]	@ (8003a2c <HAL_ADC_PollForConversion+0x1f8>)
 8003900:	400b      	ands	r3, r1
 8003902:	2b00      	cmp	r3, #0
 8003904:	d118      	bne.n	8003938 <HAL_ADC_PollForConversion+0x104>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68d9      	ldr	r1, [r3, #12]
 800390c:	4b48      	ldr	r3, [pc, #288]	@ (8003a30 <HAL_ADC_PollForConversion+0x1fc>)
 800390e:	400b      	ands	r3, r1
 8003910:	2b00      	cmp	r3, #0
 8003912:	d111      	bne.n	8003938 <HAL_ADC_PollForConversion+0x104>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6919      	ldr	r1, [r3, #16]
 800391a:	4b46      	ldr	r3, [pc, #280]	@ (8003a34 <HAL_ADC_PollForConversion+0x200>)
 800391c:	400b      	ands	r3, r1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d108      	bne.n	8003934 <HAL_ADC_PollForConversion+0x100>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68d9      	ldr	r1, [r3, #12]
 8003928:	4b43      	ldr	r3, [pc, #268]	@ (8003a38 <HAL_ADC_PollForConversion+0x204>)
 800392a:	400b      	ands	r3, r1
 800392c:	2b00      	cmp	r3, #0
 800392e:	d101      	bne.n	8003934 <HAL_ADC_PollForConversion+0x100>
 8003930:	2314      	movs	r3, #20
 8003932:	e020      	b.n	8003976 <HAL_ADC_PollForConversion+0x142>
 8003934:	2329      	movs	r3, #41	@ 0x29
 8003936:	e01e      	b.n	8003976 <HAL_ADC_PollForConversion+0x142>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6919      	ldr	r1, [r3, #16]
 800393e:	4b3d      	ldr	r3, [pc, #244]	@ (8003a34 <HAL_ADC_PollForConversion+0x200>)
 8003940:	400b      	ands	r3, r1
 8003942:	2b00      	cmp	r3, #0
 8003944:	d106      	bne.n	8003954 <HAL_ADC_PollForConversion+0x120>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68d9      	ldr	r1, [r3, #12]
 800394c:	4b3a      	ldr	r3, [pc, #232]	@ (8003a38 <HAL_ADC_PollForConversion+0x204>)
 800394e:	400b      	ands	r3, r1
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00d      	beq.n	8003970 <HAL_ADC_PollForConversion+0x13c>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6919      	ldr	r1, [r3, #16]
 800395a:	4b38      	ldr	r3, [pc, #224]	@ (8003a3c <HAL_ADC_PollForConversion+0x208>)
 800395c:	400b      	ands	r3, r1
 800395e:	2b00      	cmp	r3, #0
 8003960:	d108      	bne.n	8003974 <HAL_ADC_PollForConversion+0x140>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68d9      	ldr	r1, [r3, #12]
 8003968:	4b34      	ldr	r3, [pc, #208]	@ (8003a3c <HAL_ADC_PollForConversion+0x208>)
 800396a:	400b      	ands	r3, r1
 800396c:	2b00      	cmp	r3, #0
 800396e:	d101      	bne.n	8003974 <HAL_ADC_PollForConversion+0x140>
 8003970:	2354      	movs	r3, #84	@ 0x54
 8003972:	e000      	b.n	8003976 <HAL_ADC_PollForConversion+0x142>
 8003974:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8003976:	fb02 f303 	mul.w	r3, r2, r3
 800397a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800397c:	e021      	b.n	80039c2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003984:	d01a      	beq.n	80039bc <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d007      	beq.n	800399c <HAL_ADC_PollForConversion+0x168>
 800398c:	f7ff fd9e 	bl	80034cc <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	429a      	cmp	r2, r3
 800399a:	d20f      	bcs.n	80039bc <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d90b      	bls.n	80039bc <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039a8:	f043 0204 	orr.w	r2, r3, #4
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e030      	b.n	8003a1e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	3301      	adds	r3, #1
 80039c0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d8d9      	bhi.n	800397e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f06f 0212 	mvn.w	r2, #18
 80039d2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80039ea:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80039ee:	d115      	bne.n	8003a1c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d111      	bne.n	8003a1c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d105      	bne.n	8003a1c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a14:	f043 0201 	orr.w	r2, r3, #1
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	371c      	adds	r7, #28
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd90      	pop	{r4, r7, pc}
 8003a26:	bf00      	nop
 8003a28:	20000064 	.word	0x20000064
 8003a2c:	24924924 	.word	0x24924924
 8003a30:	00924924 	.word	0x00924924
 8003a34:	12492492 	.word	0x12492492
 8003a38:	00492492 	.word	0x00492492
 8003a3c:	00249249 	.word	0x00249249

08003a40 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bc80      	pop	{r7}
 8003a56:	4770      	bx	lr

08003a58 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a62:	2300      	movs	r3, #0
 8003a64:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003a66:	2300      	movs	r3, #0
 8003a68:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d101      	bne.n	8003a78 <HAL_ADC_ConfigChannel+0x20>
 8003a74:	2302      	movs	r3, #2
 8003a76:	e0dc      	b.n	8003c32 <HAL_ADC_ConfigChannel+0x1da>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	2b06      	cmp	r3, #6
 8003a86:	d81c      	bhi.n	8003ac2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	4613      	mov	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	4413      	add	r3, r2
 8003a98:	3b05      	subs	r3, #5
 8003a9a:	221f      	movs	r2, #31
 8003a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa0:	43db      	mvns	r3, r3
 8003aa2:	4019      	ands	r1, r3
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	6818      	ldr	r0, [r3, #0]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685a      	ldr	r2, [r3, #4]
 8003aac:	4613      	mov	r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	4413      	add	r3, r2
 8003ab2:	3b05      	subs	r3, #5
 8003ab4:	fa00 f203 	lsl.w	r2, r0, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	430a      	orrs	r2, r1
 8003abe:	635a      	str	r2, [r3, #52]	@ 0x34
 8003ac0:	e03c      	b.n	8003b3c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	2b0c      	cmp	r3, #12
 8003ac8:	d81c      	bhi.n	8003b04 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	4413      	add	r3, r2
 8003ada:	3b23      	subs	r3, #35	@ 0x23
 8003adc:	221f      	movs	r2, #31
 8003ade:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae2:	43db      	mvns	r3, r3
 8003ae4:	4019      	ands	r1, r3
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	6818      	ldr	r0, [r3, #0]
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685a      	ldr	r2, [r3, #4]
 8003aee:	4613      	mov	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4413      	add	r3, r2
 8003af4:	3b23      	subs	r3, #35	@ 0x23
 8003af6:	fa00 f203 	lsl.w	r2, r0, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	430a      	orrs	r2, r1
 8003b00:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b02:	e01b      	b.n	8003b3c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4413      	add	r3, r2
 8003b14:	3b41      	subs	r3, #65	@ 0x41
 8003b16:	221f      	movs	r2, #31
 8003b18:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1c:	43db      	mvns	r3, r3
 8003b1e:	4019      	ands	r1, r3
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	6818      	ldr	r0, [r3, #0]
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685a      	ldr	r2, [r3, #4]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	3b41      	subs	r3, #65	@ 0x41
 8003b30:	fa00 f203 	lsl.w	r2, r0, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2b09      	cmp	r3, #9
 8003b42:	d91c      	bls.n	8003b7e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68d9      	ldr	r1, [r3, #12]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	005b      	lsls	r3, r3, #1
 8003b52:	4413      	add	r3, r2
 8003b54:	3b1e      	subs	r3, #30
 8003b56:	2207      	movs	r2, #7
 8003b58:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5c:	43db      	mvns	r3, r3
 8003b5e:	4019      	ands	r1, r3
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	6898      	ldr	r0, [r3, #8]
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	4413      	add	r3, r2
 8003b6e:	3b1e      	subs	r3, #30
 8003b70:	fa00 f203 	lsl.w	r2, r0, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	60da      	str	r2, [r3, #12]
 8003b7c:	e019      	b.n	8003bb2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	6919      	ldr	r1, [r3, #16]
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	4413      	add	r3, r2
 8003b8e:	2207      	movs	r2, #7
 8003b90:	fa02 f303 	lsl.w	r3, r2, r3
 8003b94:	43db      	mvns	r3, r3
 8003b96:	4019      	ands	r1, r3
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	6898      	ldr	r0, [r3, #8]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	4413      	add	r3, r2
 8003ba6:	fa00 f203 	lsl.w	r2, r0, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2b10      	cmp	r3, #16
 8003bb8:	d003      	beq.n	8003bc2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003bbe:	2b11      	cmp	r3, #17
 8003bc0:	d132      	bne.n	8003c28 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a1d      	ldr	r2, [pc, #116]	@ (8003c3c <HAL_ADC_ConfigChannel+0x1e4>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d125      	bne.n	8003c18 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d126      	bne.n	8003c28 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	689a      	ldr	r2, [r3, #8]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003be8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2b10      	cmp	r3, #16
 8003bf0:	d11a      	bne.n	8003c28 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003bf2:	4b13      	ldr	r3, [pc, #76]	@ (8003c40 <HAL_ADC_ConfigChannel+0x1e8>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a13      	ldr	r2, [pc, #76]	@ (8003c44 <HAL_ADC_ConfigChannel+0x1ec>)
 8003bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfc:	0c9a      	lsrs	r2, r3, #18
 8003bfe:	4613      	mov	r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	4413      	add	r3, r2
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003c08:	e002      	b.n	8003c10 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1f9      	bne.n	8003c0a <HAL_ADC_ConfigChannel+0x1b2>
 8003c16:	e007      	b.n	8003c28 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c1c:	f043 0220 	orr.w	r2, r3, #32
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3714      	adds	r7, #20
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bc80      	pop	{r7}
 8003c3a:	4770      	bx	lr
 8003c3c:	40012400 	.word	0x40012400
 8003c40:	20000064 	.word	0x20000064
 8003c44:	431bde83 	.word	0x431bde83

08003c48 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c50:	2300      	movs	r3, #0
 8003c52:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003c54:	2300      	movs	r3, #0
 8003c56:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d040      	beq.n	8003ce8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f042 0201 	orr.w	r2, r2, #1
 8003c74:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003c76:	4b1f      	ldr	r3, [pc, #124]	@ (8003cf4 <ADC_Enable+0xac>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a1f      	ldr	r2, [pc, #124]	@ (8003cf8 <ADC_Enable+0xb0>)
 8003c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c80:	0c9b      	lsrs	r3, r3, #18
 8003c82:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003c84:	e002      	b.n	8003c8c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1f9      	bne.n	8003c86 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c92:	f7ff fc1b 	bl	80034cc <HAL_GetTick>
 8003c96:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003c98:	e01f      	b.n	8003cda <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003c9a:	f7ff fc17 	bl	80034cc <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d918      	bls.n	8003cda <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d011      	beq.n	8003cda <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cba:	f043 0210 	orr.w	r2, r3, #16
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc6:	f043 0201 	orr.w	r2, r3, #1
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e007      	b.n	8003cea <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d1d8      	bne.n	8003c9a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	20000064 	.word	0x20000064
 8003cf8:	431bde83 	.word	0x431bde83

08003cfc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d04:	2300      	movs	r3, #0
 8003d06:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d12e      	bne.n	8003d74 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 0201 	bic.w	r2, r2, #1
 8003d24:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003d26:	f7ff fbd1 	bl	80034cc <HAL_GetTick>
 8003d2a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003d2c:	e01b      	b.n	8003d66 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003d2e:	f7ff fbcd 	bl	80034cc <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d914      	bls.n	8003d66 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d10d      	bne.n	8003d66 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d4e:	f043 0210 	orr.w	r2, r3, #16
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d5a:	f043 0201 	orr.w	r2, r3, #1
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e007      	b.n	8003d76 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d0dc      	beq.n	8003d2e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
	...

08003d80 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003d80:	b590      	push	{r4, r7, lr}
 8003d82:	b087      	sub	sp, #28
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d101      	bne.n	8003d9e <HAL_ADCEx_Calibration_Start+0x1e>
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	e097      	b.n	8003ece <HAL_ADCEx_Calibration_Start+0x14e>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7ff ffa8 	bl	8003cfc <ADC_ConversionStop_Disable>
 8003dac:	4603      	mov	r3, r0
 8003dae:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f7ff ff49 	bl	8003c48 <ADC_Enable>
 8003db6:	4603      	mov	r3, r0
 8003db8:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8003dba:	7dfb      	ldrb	r3, [r7, #23]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f040 8081 	bne.w	8003ec4 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003dca:	f023 0302 	bic.w	r3, r3, #2
 8003dce:	f043 0202 	orr.w	r2, r3, #2
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003dd6:	4b40      	ldr	r3, [pc, #256]	@ (8003ed8 <HAL_ADCEx_Calibration_Start+0x158>)
 8003dd8:	681c      	ldr	r4, [r3, #0]
 8003dda:	2002      	movs	r0, #2
 8003ddc:	f002 f856 	bl	8005e8c <HAL_RCCEx_GetPeriphCLKFreq>
 8003de0:	4603      	mov	r3, r0
 8003de2:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8003de6:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8003de8:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8003dea:	e002      	b.n	8003df2 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	3b01      	subs	r3, #1
 8003df0:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1f9      	bne.n	8003dec <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689a      	ldr	r2, [r3, #8]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f042 0208 	orr.w	r2, r2, #8
 8003e06:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003e08:	f7ff fb60 	bl	80034cc <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003e0e:	e01b      	b.n	8003e48 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003e10:	f7ff fb5c 	bl	80034cc <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b0a      	cmp	r3, #10
 8003e1c:	d914      	bls.n	8003e48 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f003 0308 	and.w	r3, r3, #8
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00d      	beq.n	8003e48 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e30:	f023 0312 	bic.w	r3, r3, #18
 8003e34:	f043 0210 	orr.w	r2, r3, #16
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e042      	b.n	8003ece <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f003 0308 	and.w	r3, r3, #8
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1dc      	bne.n	8003e10 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	689a      	ldr	r2, [r3, #8]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f042 0204 	orr.w	r2, r2, #4
 8003e64:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003e66:	f7ff fb31 	bl	80034cc <HAL_GetTick>
 8003e6a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003e6c:	e01b      	b.n	8003ea6 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003e6e:	f7ff fb2d 	bl	80034cc <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b0a      	cmp	r3, #10
 8003e7a:	d914      	bls.n	8003ea6 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f003 0304 	and.w	r3, r3, #4
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00d      	beq.n	8003ea6 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e8e:	f023 0312 	bic.w	r3, r3, #18
 8003e92:	f043 0210 	orr.w	r2, r3, #16
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e013      	b.n	8003ece <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f003 0304 	and.w	r3, r3, #4
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1dc      	bne.n	8003e6e <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eb8:	f023 0303 	bic.w	r3, r3, #3
 8003ebc:	f043 0201 	orr.w	r2, r3, #1
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003ecc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	371c      	adds	r7, #28
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd90      	pop	{r4, r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	20000064 	.word	0x20000064

08003edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f003 0307 	and.w	r3, r3, #7
 8003eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003eec:	4b0c      	ldr	r3, [pc, #48]	@ (8003f20 <__NVIC_SetPriorityGrouping+0x44>)
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ef8:	4013      	ands	r3, r2
 8003efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003f08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f0e:	4a04      	ldr	r2, [pc, #16]	@ (8003f20 <__NVIC_SetPriorityGrouping+0x44>)
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	60d3      	str	r3, [r2, #12]
}
 8003f14:	bf00      	nop
 8003f16:	3714      	adds	r7, #20
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bc80      	pop	{r7}
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	e000ed00 	.word	0xe000ed00

08003f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f28:	4b04      	ldr	r3, [pc, #16]	@ (8003f3c <__NVIC_GetPriorityGrouping+0x18>)
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	0a1b      	lsrs	r3, r3, #8
 8003f2e:	f003 0307 	and.w	r3, r3, #7
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bc80      	pop	{r7}
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	e000ed00 	.word	0xe000ed00

08003f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	4603      	mov	r3, r0
 8003f48:	6039      	str	r1, [r7, #0]
 8003f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	db0a      	blt.n	8003f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	b2da      	uxtb	r2, r3
 8003f58:	490c      	ldr	r1, [pc, #48]	@ (8003f8c <__NVIC_SetPriority+0x4c>)
 8003f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f5e:	0112      	lsls	r2, r2, #4
 8003f60:	b2d2      	uxtb	r2, r2
 8003f62:	440b      	add	r3, r1
 8003f64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f68:	e00a      	b.n	8003f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	b2da      	uxtb	r2, r3
 8003f6e:	4908      	ldr	r1, [pc, #32]	@ (8003f90 <__NVIC_SetPriority+0x50>)
 8003f70:	79fb      	ldrb	r3, [r7, #7]
 8003f72:	f003 030f 	and.w	r3, r3, #15
 8003f76:	3b04      	subs	r3, #4
 8003f78:	0112      	lsls	r2, r2, #4
 8003f7a:	b2d2      	uxtb	r2, r2
 8003f7c:	440b      	add	r3, r1
 8003f7e:	761a      	strb	r2, [r3, #24]
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bc80      	pop	{r7}
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	e000e100 	.word	0xe000e100
 8003f90:	e000ed00 	.word	0xe000ed00

08003f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b089      	sub	sp, #36	@ 0x24
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f003 0307 	and.w	r3, r3, #7
 8003fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	f1c3 0307 	rsb	r3, r3, #7
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	bf28      	it	cs
 8003fb2:	2304      	movcs	r3, #4
 8003fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	3304      	adds	r3, #4
 8003fba:	2b06      	cmp	r3, #6
 8003fbc:	d902      	bls.n	8003fc4 <NVIC_EncodePriority+0x30>
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	3b03      	subs	r3, #3
 8003fc2:	e000      	b.n	8003fc6 <NVIC_EncodePriority+0x32>
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd2:	43da      	mvns	r2, r3
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	401a      	ands	r2, r3
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe6:	43d9      	mvns	r1, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fec:	4313      	orrs	r3, r2
         );
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3724      	adds	r7, #36	@ 0x24
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bc80      	pop	{r7}
 8003ff6:	4770      	bx	lr

08003ff8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	3b01      	subs	r3, #1
 8004004:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004008:	d301      	bcc.n	800400e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800400a:	2301      	movs	r3, #1
 800400c:	e00f      	b.n	800402e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800400e:	4a0a      	ldr	r2, [pc, #40]	@ (8004038 <SysTick_Config+0x40>)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3b01      	subs	r3, #1
 8004014:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004016:	210f      	movs	r1, #15
 8004018:	f04f 30ff 	mov.w	r0, #4294967295
 800401c:	f7ff ff90 	bl	8003f40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004020:	4b05      	ldr	r3, [pc, #20]	@ (8004038 <SysTick_Config+0x40>)
 8004022:	2200      	movs	r2, #0
 8004024:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004026:	4b04      	ldr	r3, [pc, #16]	@ (8004038 <SysTick_Config+0x40>)
 8004028:	2207      	movs	r2, #7
 800402a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	e000e010 	.word	0xe000e010

0800403c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f7ff ff49 	bl	8003edc <__NVIC_SetPriorityGrouping>
}
 800404a:	bf00      	nop
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004052:	b580      	push	{r7, lr}
 8004054:	b086      	sub	sp, #24
 8004056:	af00      	add	r7, sp, #0
 8004058:	4603      	mov	r3, r0
 800405a:	60b9      	str	r1, [r7, #8]
 800405c:	607a      	str	r2, [r7, #4]
 800405e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004060:	2300      	movs	r3, #0
 8004062:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004064:	f7ff ff5e 	bl	8003f24 <__NVIC_GetPriorityGrouping>
 8004068:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	68b9      	ldr	r1, [r7, #8]
 800406e:	6978      	ldr	r0, [r7, #20]
 8004070:	f7ff ff90 	bl	8003f94 <NVIC_EncodePriority>
 8004074:	4602      	mov	r2, r0
 8004076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800407a:	4611      	mov	r1, r2
 800407c:	4618      	mov	r0, r3
 800407e:	f7ff ff5f 	bl	8003f40 <__NVIC_SetPriority>
}
 8004082:	bf00      	nop
 8004084:	3718      	adds	r7, #24
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b082      	sub	sp, #8
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7ff ffb0 	bl	8003ff8 <SysTick_Config>
 8004098:	4603      	mov	r3, r0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
	...

080040a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b08b      	sub	sp, #44	@ 0x2c
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80040ae:	2300      	movs	r3, #0
 80040b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80040b2:	2300      	movs	r3, #0
 80040b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040b6:	e169      	b.n	800438c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80040b8:	2201      	movs	r2, #1
 80040ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040bc:	fa02 f303 	lsl.w	r3, r2, r3
 80040c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	69fa      	ldr	r2, [r7, #28]
 80040c8:	4013      	ands	r3, r2
 80040ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	f040 8158 	bne.w	8004386 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	4a9a      	ldr	r2, [pc, #616]	@ (8004344 <HAL_GPIO_Init+0x2a0>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d05e      	beq.n	800419e <HAL_GPIO_Init+0xfa>
 80040e0:	4a98      	ldr	r2, [pc, #608]	@ (8004344 <HAL_GPIO_Init+0x2a0>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d875      	bhi.n	80041d2 <HAL_GPIO_Init+0x12e>
 80040e6:	4a98      	ldr	r2, [pc, #608]	@ (8004348 <HAL_GPIO_Init+0x2a4>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d058      	beq.n	800419e <HAL_GPIO_Init+0xfa>
 80040ec:	4a96      	ldr	r2, [pc, #600]	@ (8004348 <HAL_GPIO_Init+0x2a4>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d86f      	bhi.n	80041d2 <HAL_GPIO_Init+0x12e>
 80040f2:	4a96      	ldr	r2, [pc, #600]	@ (800434c <HAL_GPIO_Init+0x2a8>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d052      	beq.n	800419e <HAL_GPIO_Init+0xfa>
 80040f8:	4a94      	ldr	r2, [pc, #592]	@ (800434c <HAL_GPIO_Init+0x2a8>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d869      	bhi.n	80041d2 <HAL_GPIO_Init+0x12e>
 80040fe:	4a94      	ldr	r2, [pc, #592]	@ (8004350 <HAL_GPIO_Init+0x2ac>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d04c      	beq.n	800419e <HAL_GPIO_Init+0xfa>
 8004104:	4a92      	ldr	r2, [pc, #584]	@ (8004350 <HAL_GPIO_Init+0x2ac>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d863      	bhi.n	80041d2 <HAL_GPIO_Init+0x12e>
 800410a:	4a92      	ldr	r2, [pc, #584]	@ (8004354 <HAL_GPIO_Init+0x2b0>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d046      	beq.n	800419e <HAL_GPIO_Init+0xfa>
 8004110:	4a90      	ldr	r2, [pc, #576]	@ (8004354 <HAL_GPIO_Init+0x2b0>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d85d      	bhi.n	80041d2 <HAL_GPIO_Init+0x12e>
 8004116:	2b12      	cmp	r3, #18
 8004118:	d82a      	bhi.n	8004170 <HAL_GPIO_Init+0xcc>
 800411a:	2b12      	cmp	r3, #18
 800411c:	d859      	bhi.n	80041d2 <HAL_GPIO_Init+0x12e>
 800411e:	a201      	add	r2, pc, #4	@ (adr r2, 8004124 <HAL_GPIO_Init+0x80>)
 8004120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004124:	0800419f 	.word	0x0800419f
 8004128:	08004179 	.word	0x08004179
 800412c:	0800418b 	.word	0x0800418b
 8004130:	080041cd 	.word	0x080041cd
 8004134:	080041d3 	.word	0x080041d3
 8004138:	080041d3 	.word	0x080041d3
 800413c:	080041d3 	.word	0x080041d3
 8004140:	080041d3 	.word	0x080041d3
 8004144:	080041d3 	.word	0x080041d3
 8004148:	080041d3 	.word	0x080041d3
 800414c:	080041d3 	.word	0x080041d3
 8004150:	080041d3 	.word	0x080041d3
 8004154:	080041d3 	.word	0x080041d3
 8004158:	080041d3 	.word	0x080041d3
 800415c:	080041d3 	.word	0x080041d3
 8004160:	080041d3 	.word	0x080041d3
 8004164:	080041d3 	.word	0x080041d3
 8004168:	08004181 	.word	0x08004181
 800416c:	08004195 	.word	0x08004195
 8004170:	4a79      	ldr	r2, [pc, #484]	@ (8004358 <HAL_GPIO_Init+0x2b4>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d013      	beq.n	800419e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004176:	e02c      	b.n	80041d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	623b      	str	r3, [r7, #32]
          break;
 800417e:	e029      	b.n	80041d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	3304      	adds	r3, #4
 8004186:	623b      	str	r3, [r7, #32]
          break;
 8004188:	e024      	b.n	80041d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	3308      	adds	r3, #8
 8004190:	623b      	str	r3, [r7, #32]
          break;
 8004192:	e01f      	b.n	80041d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	330c      	adds	r3, #12
 800419a:	623b      	str	r3, [r7, #32]
          break;
 800419c:	e01a      	b.n	80041d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d102      	bne.n	80041ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80041a6:	2304      	movs	r3, #4
 80041a8:	623b      	str	r3, [r7, #32]
          break;
 80041aa:	e013      	b.n	80041d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d105      	bne.n	80041c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80041b4:	2308      	movs	r3, #8
 80041b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	69fa      	ldr	r2, [r7, #28]
 80041bc:	611a      	str	r2, [r3, #16]
          break;
 80041be:	e009      	b.n	80041d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80041c0:	2308      	movs	r3, #8
 80041c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	69fa      	ldr	r2, [r7, #28]
 80041c8:	615a      	str	r2, [r3, #20]
          break;
 80041ca:	e003      	b.n	80041d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80041cc:	2300      	movs	r3, #0
 80041ce:	623b      	str	r3, [r7, #32]
          break;
 80041d0:	e000      	b.n	80041d4 <HAL_GPIO_Init+0x130>
          break;
 80041d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	2bff      	cmp	r3, #255	@ 0xff
 80041d8:	d801      	bhi.n	80041de <HAL_GPIO_Init+0x13a>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	e001      	b.n	80041e2 <HAL_GPIO_Init+0x13e>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	3304      	adds	r3, #4
 80041e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	2bff      	cmp	r3, #255	@ 0xff
 80041e8:	d802      	bhi.n	80041f0 <HAL_GPIO_Init+0x14c>
 80041ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	e002      	b.n	80041f6 <HAL_GPIO_Init+0x152>
 80041f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f2:	3b08      	subs	r3, #8
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	210f      	movs	r1, #15
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	fa01 f303 	lsl.w	r3, r1, r3
 8004204:	43db      	mvns	r3, r3
 8004206:	401a      	ands	r2, r3
 8004208:	6a39      	ldr	r1, [r7, #32]
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	fa01 f303 	lsl.w	r3, r1, r3
 8004210:	431a      	orrs	r2, r3
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800421e:	2b00      	cmp	r3, #0
 8004220:	f000 80b1 	beq.w	8004386 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004224:	4b4d      	ldr	r3, [pc, #308]	@ (800435c <HAL_GPIO_Init+0x2b8>)
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	4a4c      	ldr	r2, [pc, #304]	@ (800435c <HAL_GPIO_Init+0x2b8>)
 800422a:	f043 0301 	orr.w	r3, r3, #1
 800422e:	6193      	str	r3, [r2, #24]
 8004230:	4b4a      	ldr	r3, [pc, #296]	@ (800435c <HAL_GPIO_Init+0x2b8>)
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	f003 0301 	and.w	r3, r3, #1
 8004238:	60bb      	str	r3, [r7, #8]
 800423a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800423c:	4a48      	ldr	r2, [pc, #288]	@ (8004360 <HAL_GPIO_Init+0x2bc>)
 800423e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004240:	089b      	lsrs	r3, r3, #2
 8004242:	3302      	adds	r3, #2
 8004244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004248:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800424a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424c:	f003 0303 	and.w	r3, r3, #3
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	220f      	movs	r2, #15
 8004254:	fa02 f303 	lsl.w	r3, r2, r3
 8004258:	43db      	mvns	r3, r3
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	4013      	ands	r3, r2
 800425e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a40      	ldr	r2, [pc, #256]	@ (8004364 <HAL_GPIO_Init+0x2c0>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d013      	beq.n	8004290 <HAL_GPIO_Init+0x1ec>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a3f      	ldr	r2, [pc, #252]	@ (8004368 <HAL_GPIO_Init+0x2c4>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d00d      	beq.n	800428c <HAL_GPIO_Init+0x1e8>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a3e      	ldr	r2, [pc, #248]	@ (800436c <HAL_GPIO_Init+0x2c8>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d007      	beq.n	8004288 <HAL_GPIO_Init+0x1e4>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a3d      	ldr	r2, [pc, #244]	@ (8004370 <HAL_GPIO_Init+0x2cc>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d101      	bne.n	8004284 <HAL_GPIO_Init+0x1e0>
 8004280:	2303      	movs	r3, #3
 8004282:	e006      	b.n	8004292 <HAL_GPIO_Init+0x1ee>
 8004284:	2304      	movs	r3, #4
 8004286:	e004      	b.n	8004292 <HAL_GPIO_Init+0x1ee>
 8004288:	2302      	movs	r3, #2
 800428a:	e002      	b.n	8004292 <HAL_GPIO_Init+0x1ee>
 800428c:	2301      	movs	r3, #1
 800428e:	e000      	b.n	8004292 <HAL_GPIO_Init+0x1ee>
 8004290:	2300      	movs	r3, #0
 8004292:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004294:	f002 0203 	and.w	r2, r2, #3
 8004298:	0092      	lsls	r2, r2, #2
 800429a:	4093      	lsls	r3, r2
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	4313      	orrs	r3, r2
 80042a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80042a2:	492f      	ldr	r1, [pc, #188]	@ (8004360 <HAL_GPIO_Init+0x2bc>)
 80042a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a6:	089b      	lsrs	r3, r3, #2
 80042a8:	3302      	adds	r3, #2
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d006      	beq.n	80042ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80042bc:	4b2d      	ldr	r3, [pc, #180]	@ (8004374 <HAL_GPIO_Init+0x2d0>)
 80042be:	689a      	ldr	r2, [r3, #8]
 80042c0:	492c      	ldr	r1, [pc, #176]	@ (8004374 <HAL_GPIO_Init+0x2d0>)
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	608b      	str	r3, [r1, #8]
 80042c8:	e006      	b.n	80042d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80042ca:	4b2a      	ldr	r3, [pc, #168]	@ (8004374 <HAL_GPIO_Init+0x2d0>)
 80042cc:	689a      	ldr	r2, [r3, #8]
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	43db      	mvns	r3, r3
 80042d2:	4928      	ldr	r1, [pc, #160]	@ (8004374 <HAL_GPIO_Init+0x2d0>)
 80042d4:	4013      	ands	r3, r2
 80042d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d006      	beq.n	80042f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80042e4:	4b23      	ldr	r3, [pc, #140]	@ (8004374 <HAL_GPIO_Init+0x2d0>)
 80042e6:	68da      	ldr	r2, [r3, #12]
 80042e8:	4922      	ldr	r1, [pc, #136]	@ (8004374 <HAL_GPIO_Init+0x2d0>)
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	60cb      	str	r3, [r1, #12]
 80042f0:	e006      	b.n	8004300 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80042f2:	4b20      	ldr	r3, [pc, #128]	@ (8004374 <HAL_GPIO_Init+0x2d0>)
 80042f4:	68da      	ldr	r2, [r3, #12]
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	43db      	mvns	r3, r3
 80042fa:	491e      	ldr	r1, [pc, #120]	@ (8004374 <HAL_GPIO_Init+0x2d0>)
 80042fc:	4013      	ands	r3, r2
 80042fe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d006      	beq.n	800431a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800430c:	4b19      	ldr	r3, [pc, #100]	@ (8004374 <HAL_GPIO_Init+0x2d0>)
 800430e:	685a      	ldr	r2, [r3, #4]
 8004310:	4918      	ldr	r1, [pc, #96]	@ (8004374 <HAL_GPIO_Init+0x2d0>)
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	4313      	orrs	r3, r2
 8004316:	604b      	str	r3, [r1, #4]
 8004318:	e006      	b.n	8004328 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800431a:	4b16      	ldr	r3, [pc, #88]	@ (8004374 <HAL_GPIO_Init+0x2d0>)
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	43db      	mvns	r3, r3
 8004322:	4914      	ldr	r1, [pc, #80]	@ (8004374 <HAL_GPIO_Init+0x2d0>)
 8004324:	4013      	ands	r3, r2
 8004326:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d021      	beq.n	8004378 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004334:	4b0f      	ldr	r3, [pc, #60]	@ (8004374 <HAL_GPIO_Init+0x2d0>)
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	490e      	ldr	r1, [pc, #56]	@ (8004374 <HAL_GPIO_Init+0x2d0>)
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	4313      	orrs	r3, r2
 800433e:	600b      	str	r3, [r1, #0]
 8004340:	e021      	b.n	8004386 <HAL_GPIO_Init+0x2e2>
 8004342:	bf00      	nop
 8004344:	10320000 	.word	0x10320000
 8004348:	10310000 	.word	0x10310000
 800434c:	10220000 	.word	0x10220000
 8004350:	10210000 	.word	0x10210000
 8004354:	10120000 	.word	0x10120000
 8004358:	10110000 	.word	0x10110000
 800435c:	40021000 	.word	0x40021000
 8004360:	40010000 	.word	0x40010000
 8004364:	40010800 	.word	0x40010800
 8004368:	40010c00 	.word	0x40010c00
 800436c:	40011000 	.word	0x40011000
 8004370:	40011400 	.word	0x40011400
 8004374:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004378:	4b0b      	ldr	r3, [pc, #44]	@ (80043a8 <HAL_GPIO_Init+0x304>)
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	43db      	mvns	r3, r3
 8004380:	4909      	ldr	r1, [pc, #36]	@ (80043a8 <HAL_GPIO_Init+0x304>)
 8004382:	4013      	ands	r3, r2
 8004384:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004388:	3301      	adds	r3, #1
 800438a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004392:	fa22 f303 	lsr.w	r3, r2, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	f47f ae8e 	bne.w	80040b8 <HAL_GPIO_Init+0x14>
  }
}
 800439c:	bf00      	nop
 800439e:	bf00      	nop
 80043a0:	372c      	adds	r7, #44	@ 0x2c
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bc80      	pop	{r7}
 80043a6:	4770      	bx	lr
 80043a8:	40010400 	.word	0x40010400

080043ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	460b      	mov	r3, r1
 80043b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	689a      	ldr	r2, [r3, #8]
 80043bc:	887b      	ldrh	r3, [r7, #2]
 80043be:	4013      	ands	r3, r2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d002      	beq.n	80043ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80043c4:	2301      	movs	r3, #1
 80043c6:	73fb      	strb	r3, [r7, #15]
 80043c8:	e001      	b.n	80043ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80043ca:	2300      	movs	r3, #0
 80043cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80043ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3714      	adds	r7, #20
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bc80      	pop	{r7}
 80043d8:	4770      	bx	lr

080043da <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043da:	b480      	push	{r7}
 80043dc:	b083      	sub	sp, #12
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
 80043e2:	460b      	mov	r3, r1
 80043e4:	807b      	strh	r3, [r7, #2]
 80043e6:	4613      	mov	r3, r2
 80043e8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80043ea:	787b      	ldrb	r3, [r7, #1]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d003      	beq.n	80043f8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043f0:	887a      	ldrh	r2, [r7, #2]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80043f6:	e003      	b.n	8004400 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80043f8:	887b      	ldrh	r3, [r7, #2]
 80043fa:	041a      	lsls	r2, r3, #16
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	611a      	str	r2, [r3, #16]
}
 8004400:	bf00      	nop
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	bc80      	pop	{r7}
 8004408:	4770      	bx	lr

0800440a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800440a:	b480      	push	{r7}
 800440c:	b085      	sub	sp, #20
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
 8004412:	460b      	mov	r3, r1
 8004414:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800441c:	887a      	ldrh	r2, [r7, #2]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	4013      	ands	r3, r2
 8004422:	041a      	lsls	r2, r3, #16
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	43d9      	mvns	r1, r3
 8004428:	887b      	ldrh	r3, [r7, #2]
 800442a:	400b      	ands	r3, r1
 800442c:	431a      	orrs	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	611a      	str	r2, [r3, #16]
}
 8004432:	bf00      	nop
 8004434:	3714      	adds	r7, #20
 8004436:	46bd      	mov	sp, r7
 8004438:	bc80      	pop	{r7}
 800443a:	4770      	bx	lr

0800443c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d101      	bne.n	800444e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e12b      	b.n	80046a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d106      	bne.n	8004468 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f7fe fd88 	bl	8002f78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2224      	movs	r2, #36	@ 0x24
 800446c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 0201 	bic.w	r2, r2, #1
 800447e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800448e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800449e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80044a0:	f001 fbf8 	bl	8005c94 <HAL_RCC_GetPCLK1Freq>
 80044a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	4a81      	ldr	r2, [pc, #516]	@ (80046b0 <HAL_I2C_Init+0x274>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d807      	bhi.n	80044c0 <HAL_I2C_Init+0x84>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	4a80      	ldr	r2, [pc, #512]	@ (80046b4 <HAL_I2C_Init+0x278>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	bf94      	ite	ls
 80044b8:	2301      	movls	r3, #1
 80044ba:	2300      	movhi	r3, #0
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	e006      	b.n	80044ce <HAL_I2C_Init+0x92>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4a7d      	ldr	r2, [pc, #500]	@ (80046b8 <HAL_I2C_Init+0x27c>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	bf94      	ite	ls
 80044c8:	2301      	movls	r3, #1
 80044ca:	2300      	movhi	r3, #0
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d001      	beq.n	80044d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e0e7      	b.n	80046a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	4a78      	ldr	r2, [pc, #480]	@ (80046bc <HAL_I2C_Init+0x280>)
 80044da:	fba2 2303 	umull	r2, r3, r2, r3
 80044de:	0c9b      	lsrs	r3, r3, #18
 80044e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68ba      	ldr	r2, [r7, #8]
 80044f2:	430a      	orrs	r2, r1
 80044f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	6a1b      	ldr	r3, [r3, #32]
 80044fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	4a6a      	ldr	r2, [pc, #424]	@ (80046b0 <HAL_I2C_Init+0x274>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d802      	bhi.n	8004510 <HAL_I2C_Init+0xd4>
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	3301      	adds	r3, #1
 800450e:	e009      	b.n	8004524 <HAL_I2C_Init+0xe8>
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004516:	fb02 f303 	mul.w	r3, r2, r3
 800451a:	4a69      	ldr	r2, [pc, #420]	@ (80046c0 <HAL_I2C_Init+0x284>)
 800451c:	fba2 2303 	umull	r2, r3, r2, r3
 8004520:	099b      	lsrs	r3, r3, #6
 8004522:	3301      	adds	r3, #1
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	6812      	ldr	r2, [r2, #0]
 8004528:	430b      	orrs	r3, r1
 800452a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	69db      	ldr	r3, [r3, #28]
 8004532:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004536:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	495c      	ldr	r1, [pc, #368]	@ (80046b0 <HAL_I2C_Init+0x274>)
 8004540:	428b      	cmp	r3, r1
 8004542:	d819      	bhi.n	8004578 <HAL_I2C_Init+0x13c>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	1e59      	subs	r1, r3, #1
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	005b      	lsls	r3, r3, #1
 800454e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004552:	1c59      	adds	r1, r3, #1
 8004554:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004558:	400b      	ands	r3, r1
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00a      	beq.n	8004574 <HAL_I2C_Init+0x138>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	1e59      	subs	r1, r3, #1
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	005b      	lsls	r3, r3, #1
 8004568:	fbb1 f3f3 	udiv	r3, r1, r3
 800456c:	3301      	adds	r3, #1
 800456e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004572:	e051      	b.n	8004618 <HAL_I2C_Init+0x1dc>
 8004574:	2304      	movs	r3, #4
 8004576:	e04f      	b.n	8004618 <HAL_I2C_Init+0x1dc>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d111      	bne.n	80045a4 <HAL_I2C_Init+0x168>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	1e58      	subs	r0, r3, #1
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6859      	ldr	r1, [r3, #4]
 8004588:	460b      	mov	r3, r1
 800458a:	005b      	lsls	r3, r3, #1
 800458c:	440b      	add	r3, r1
 800458e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004592:	3301      	adds	r3, #1
 8004594:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004598:	2b00      	cmp	r3, #0
 800459a:	bf0c      	ite	eq
 800459c:	2301      	moveq	r3, #1
 800459e:	2300      	movne	r3, #0
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	e012      	b.n	80045ca <HAL_I2C_Init+0x18e>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	1e58      	subs	r0, r3, #1
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6859      	ldr	r1, [r3, #4]
 80045ac:	460b      	mov	r3, r1
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	440b      	add	r3, r1
 80045b2:	0099      	lsls	r1, r3, #2
 80045b4:	440b      	add	r3, r1
 80045b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80045ba:	3301      	adds	r3, #1
 80045bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	bf0c      	ite	eq
 80045c4:	2301      	moveq	r3, #1
 80045c6:	2300      	movne	r3, #0
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d001      	beq.n	80045d2 <HAL_I2C_Init+0x196>
 80045ce:	2301      	movs	r3, #1
 80045d0:	e022      	b.n	8004618 <HAL_I2C_Init+0x1dc>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10e      	bne.n	80045f8 <HAL_I2C_Init+0x1bc>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	1e58      	subs	r0, r3, #1
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6859      	ldr	r1, [r3, #4]
 80045e2:	460b      	mov	r3, r1
 80045e4:	005b      	lsls	r3, r3, #1
 80045e6:	440b      	add	r3, r1
 80045e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80045ec:	3301      	adds	r3, #1
 80045ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045f6:	e00f      	b.n	8004618 <HAL_I2C_Init+0x1dc>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	1e58      	subs	r0, r3, #1
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6859      	ldr	r1, [r3, #4]
 8004600:	460b      	mov	r3, r1
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	440b      	add	r3, r1
 8004606:	0099      	lsls	r1, r3, #2
 8004608:	440b      	add	r3, r1
 800460a:	fbb0 f3f3 	udiv	r3, r0, r3
 800460e:	3301      	adds	r3, #1
 8004610:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004614:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004618:	6879      	ldr	r1, [r7, #4]
 800461a:	6809      	ldr	r1, [r1, #0]
 800461c:	4313      	orrs	r3, r2
 800461e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	69da      	ldr	r2, [r3, #28]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	431a      	orrs	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	430a      	orrs	r2, r1
 800463a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004646:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	6911      	ldr	r1, [r2, #16]
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	68d2      	ldr	r2, [r2, #12]
 8004652:	4311      	orrs	r1, r2
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	6812      	ldr	r2, [r2, #0]
 8004658:	430b      	orrs	r3, r1
 800465a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	695a      	ldr	r2, [r3, #20]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	431a      	orrs	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	430a      	orrs	r2, r1
 8004676:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f042 0201 	orr.w	r2, r2, #1
 8004686:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2220      	movs	r2, #32
 8004692:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	000186a0 	.word	0x000186a0
 80046b4:	001e847f 	.word	0x001e847f
 80046b8:	003d08ff 	.word	0x003d08ff
 80046bc:	431bde83 	.word	0x431bde83
 80046c0:	10624dd3 	.word	0x10624dd3

080046c4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b088      	sub	sp, #32
 80046c8:	af02      	add	r7, sp, #8
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	607a      	str	r2, [r7, #4]
 80046ce:	461a      	mov	r2, r3
 80046d0:	460b      	mov	r3, r1
 80046d2:	817b      	strh	r3, [r7, #10]
 80046d4:	4613      	mov	r3, r2
 80046d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80046d8:	f7fe fef8 	bl	80034cc <HAL_GetTick>
 80046dc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b20      	cmp	r3, #32
 80046e8:	f040 80e0 	bne.w	80048ac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	9300      	str	r3, [sp, #0]
 80046f0:	2319      	movs	r3, #25
 80046f2:	2201      	movs	r2, #1
 80046f4:	4970      	ldr	r1, [pc, #448]	@ (80048b8 <HAL_I2C_Master_Transmit+0x1f4>)
 80046f6:	68f8      	ldr	r0, [r7, #12]
 80046f8:	f000 fccc 	bl	8005094 <I2C_WaitOnFlagUntilTimeout>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004702:	2302      	movs	r3, #2
 8004704:	e0d3      	b.n	80048ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800470c:	2b01      	cmp	r3, #1
 800470e:	d101      	bne.n	8004714 <HAL_I2C_Master_Transmit+0x50>
 8004710:	2302      	movs	r3, #2
 8004712:	e0cc      	b.n	80048ae <HAL_I2C_Master_Transmit+0x1ea>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	2b01      	cmp	r3, #1
 8004728:	d007      	beq.n	800473a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f042 0201 	orr.w	r2, r2, #1
 8004738:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004748:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2221      	movs	r2, #33	@ 0x21
 800474e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2210      	movs	r2, #16
 8004756:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	893a      	ldrh	r2, [r7, #8]
 800476a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004770:	b29a      	uxth	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	4a50      	ldr	r2, [pc, #320]	@ (80048bc <HAL_I2C_Master_Transmit+0x1f8>)
 800477a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800477c:	8979      	ldrh	r1, [r7, #10]
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	6a3a      	ldr	r2, [r7, #32]
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f000 fb1c 	bl	8004dc0 <I2C_MasterRequestWrite>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e08d      	b.n	80048ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004792:	2300      	movs	r3, #0
 8004794:	613b      	str	r3, [r7, #16]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	695b      	ldr	r3, [r3, #20]
 800479c:	613b      	str	r3, [r7, #16]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	613b      	str	r3, [r7, #16]
 80047a6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80047a8:	e066      	b.n	8004878 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	6a39      	ldr	r1, [r7, #32]
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f000 fd8a 	bl	80052c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00d      	beq.n	80047d6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047be:	2b04      	cmp	r3, #4
 80047c0:	d107      	bne.n	80047d2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e06b      	b.n	80048ae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047da:	781a      	ldrb	r2, [r3, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e6:	1c5a      	adds	r2, r3, #1
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	3b01      	subs	r3, #1
 80047f4:	b29a      	uxth	r2, r3
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047fe:	3b01      	subs	r3, #1
 8004800:	b29a      	uxth	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	695b      	ldr	r3, [r3, #20]
 800480c:	f003 0304 	and.w	r3, r3, #4
 8004810:	2b04      	cmp	r3, #4
 8004812:	d11b      	bne.n	800484c <HAL_I2C_Master_Transmit+0x188>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004818:	2b00      	cmp	r3, #0
 800481a:	d017      	beq.n	800484c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004820:	781a      	ldrb	r2, [r3, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800482c:	1c5a      	adds	r2, r3, #1
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004836:	b29b      	uxth	r3, r3
 8004838:	3b01      	subs	r3, #1
 800483a:	b29a      	uxth	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004844:	3b01      	subs	r3, #1
 8004846:	b29a      	uxth	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	6a39      	ldr	r1, [r7, #32]
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f000 fd81 	bl	8005358 <I2C_WaitOnBTFFlagUntilTimeout>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00d      	beq.n	8004878 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004860:	2b04      	cmp	r3, #4
 8004862:	d107      	bne.n	8004874 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004872:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e01a      	b.n	80048ae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800487c:	2b00      	cmp	r3, #0
 800487e:	d194      	bne.n	80047aa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800488e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2220      	movs	r2, #32
 8004894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80048a8:	2300      	movs	r3, #0
 80048aa:	e000      	b.n	80048ae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80048ac:	2302      	movs	r3, #2
  }
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3718      	adds	r7, #24
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	00100002 	.word	0x00100002
 80048bc:	ffff0000 	.word	0xffff0000

080048c0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b08c      	sub	sp, #48	@ 0x30
 80048c4:	af02      	add	r7, sp, #8
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	4608      	mov	r0, r1
 80048ca:	4611      	mov	r1, r2
 80048cc:	461a      	mov	r2, r3
 80048ce:	4603      	mov	r3, r0
 80048d0:	817b      	strh	r3, [r7, #10]
 80048d2:	460b      	mov	r3, r1
 80048d4:	813b      	strh	r3, [r7, #8]
 80048d6:	4613      	mov	r3, r2
 80048d8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80048da:	2300      	movs	r3, #0
 80048dc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048de:	f7fe fdf5 	bl	80034cc <HAL_GetTick>
 80048e2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	2b20      	cmp	r3, #32
 80048ee:	f040 8250 	bne.w	8004d92 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f4:	9300      	str	r3, [sp, #0]
 80048f6:	2319      	movs	r3, #25
 80048f8:	2201      	movs	r2, #1
 80048fa:	4982      	ldr	r1, [pc, #520]	@ (8004b04 <HAL_I2C_Mem_Read+0x244>)
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f000 fbc9 	bl	8005094 <I2C_WaitOnFlagUntilTimeout>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d001      	beq.n	800490c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004908:	2302      	movs	r3, #2
 800490a:	e243      	b.n	8004d94 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004912:	2b01      	cmp	r3, #1
 8004914:	d101      	bne.n	800491a <HAL_I2C_Mem_Read+0x5a>
 8004916:	2302      	movs	r3, #2
 8004918:	e23c      	b.n	8004d94 <HAL_I2C_Mem_Read+0x4d4>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2201      	movs	r2, #1
 800491e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0301 	and.w	r3, r3, #1
 800492c:	2b01      	cmp	r3, #1
 800492e:	d007      	beq.n	8004940 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f042 0201 	orr.w	r2, r2, #1
 800493e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800494e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2222      	movs	r2, #34	@ 0x22
 8004954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2240      	movs	r2, #64	@ 0x40
 800495c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800496a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004970:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004976:	b29a      	uxth	r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	4a62      	ldr	r2, [pc, #392]	@ (8004b08 <HAL_I2C_Mem_Read+0x248>)
 8004980:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004982:	88f8      	ldrh	r0, [r7, #6]
 8004984:	893a      	ldrh	r2, [r7, #8]
 8004986:	8979      	ldrh	r1, [r7, #10]
 8004988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800498a:	9301      	str	r3, [sp, #4]
 800498c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	4603      	mov	r3, r0
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f000 fa96 	bl	8004ec4 <I2C_RequestMemoryRead>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e1f8      	b.n	8004d94 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d113      	bne.n	80049d2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049aa:	2300      	movs	r3, #0
 80049ac:	61fb      	str	r3, [r7, #28]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	61fb      	str	r3, [r7, #28]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	61fb      	str	r3, [r7, #28]
 80049be:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049ce:	601a      	str	r2, [r3, #0]
 80049d0:	e1cc      	b.n	8004d6c <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d11e      	bne.n	8004a18 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049e8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80049ea:	b672      	cpsid	i
}
 80049ec:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049ee:	2300      	movs	r3, #0
 80049f0:	61bb      	str	r3, [r7, #24]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	695b      	ldr	r3, [r3, #20]
 80049f8:	61bb      	str	r3, [r7, #24]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	61bb      	str	r3, [r7, #24]
 8004a02:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a12:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004a14:	b662      	cpsie	i
}
 8004a16:	e035      	b.n	8004a84 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d11e      	bne.n	8004a5e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a2e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004a30:	b672      	cpsid	i
}
 8004a32:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a34:	2300      	movs	r3, #0
 8004a36:	617b      	str	r3, [r7, #20]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	617b      	str	r3, [r7, #20]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	617b      	str	r3, [r7, #20]
 8004a48:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a58:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004a5a:	b662      	cpsie	i
}
 8004a5c:	e012      	b.n	8004a84 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004a6c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a6e:	2300      	movs	r3, #0
 8004a70:	613b      	str	r3, [r7, #16]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	613b      	str	r3, [r7, #16]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	613b      	str	r3, [r7, #16]
 8004a82:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004a84:	e172      	b.n	8004d6c <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a8a:	2b03      	cmp	r3, #3
 8004a8c:	f200 811f 	bhi.w	8004cce <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d123      	bne.n	8004ae0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a9a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f000 fca3 	bl	80053e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d001      	beq.n	8004aac <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e173      	b.n	8004d94 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	691a      	ldr	r2, [r3, #16]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab6:	b2d2      	uxtb	r2, r2
 8004ab8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004abe:	1c5a      	adds	r2, r3, #1
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004ade:	e145      	b.n	8004d6c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d152      	bne.n	8004b8e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aea:	9300      	str	r3, [sp, #0]
 8004aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aee:	2200      	movs	r2, #0
 8004af0:	4906      	ldr	r1, [pc, #24]	@ (8004b0c <HAL_I2C_Mem_Read+0x24c>)
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f000 face 	bl	8005094 <I2C_WaitOnFlagUntilTimeout>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d008      	beq.n	8004b10 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e148      	b.n	8004d94 <HAL_I2C_Mem_Read+0x4d4>
 8004b02:	bf00      	nop
 8004b04:	00100002 	.word	0x00100002
 8004b08:	ffff0000 	.word	0xffff0000
 8004b0c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004b10:	b672      	cpsid	i
}
 8004b12:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	691a      	ldr	r2, [r3, #16]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b2e:	b2d2      	uxtb	r2, r2
 8004b30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b36:	1c5a      	adds	r2, r3, #1
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b40:	3b01      	subs	r3, #1
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	b29a      	uxth	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004b56:	b662      	cpsie	i
}
 8004b58:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	691a      	ldr	r2, [r3, #16]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b64:	b2d2      	uxtb	r2, r2
 8004b66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b6c:	1c5a      	adds	r2, r3, #1
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b76:	3b01      	subs	r3, #1
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	3b01      	subs	r3, #1
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004b8c:	e0ee      	b.n	8004d6c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b90:	9300      	str	r3, [sp, #0]
 8004b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b94:	2200      	movs	r2, #0
 8004b96:	4981      	ldr	r1, [pc, #516]	@ (8004d9c <HAL_I2C_Mem_Read+0x4dc>)
 8004b98:	68f8      	ldr	r0, [r7, #12]
 8004b9a:	f000 fa7b 	bl	8005094 <I2C_WaitOnFlagUntilTimeout>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d001      	beq.n	8004ba8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e0f5      	b.n	8004d94 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bb6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004bb8:	b672      	cpsid	i
}
 8004bba:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	691a      	ldr	r2, [r3, #16]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc6:	b2d2      	uxtb	r2, r2
 8004bc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bce:	1c5a      	adds	r2, r3, #1
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	3b01      	subs	r3, #1
 8004be8:	b29a      	uxth	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004bee:	4b6c      	ldr	r3, [pc, #432]	@ (8004da0 <HAL_I2C_Mem_Read+0x4e0>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	08db      	lsrs	r3, r3, #3
 8004bf4:	4a6b      	ldr	r2, [pc, #428]	@ (8004da4 <HAL_I2C_Mem_Read+0x4e4>)
 8004bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bfa:	0a1a      	lsrs	r2, r3, #8
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	4413      	add	r3, r2
 8004c02:	00da      	lsls	r2, r3, #3
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004c08:	6a3b      	ldr	r3, [r7, #32]
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004c0e:	6a3b      	ldr	r3, [r7, #32]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d118      	bne.n	8004c46 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2220      	movs	r2, #32
 8004c1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c2e:	f043 0220 	orr.w	r2, r3, #32
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004c36:	b662      	cpsie	i
}
 8004c38:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e0a6      	b.n	8004d94 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	f003 0304 	and.w	r3, r3, #4
 8004c50:	2b04      	cmp	r3, #4
 8004c52:	d1d9      	bne.n	8004c08 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	691a      	ldr	r2, [r3, #16]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c6e:	b2d2      	uxtb	r2, r2
 8004c70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c76:	1c5a      	adds	r2, r3, #1
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c80:	3b01      	subs	r3, #1
 8004c82:	b29a      	uxth	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	b29a      	uxth	r2, r3
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004c96:	b662      	cpsie	i
}
 8004c98:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	691a      	ldr	r2, [r3, #16]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca4:	b2d2      	uxtb	r2, r2
 8004ca6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cac:	1c5a      	adds	r2, r3, #1
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	b29a      	uxth	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004ccc:	e04e      	b.n	8004d6c <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cd0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f000 fb88 	bl	80053e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d001      	beq.n	8004ce2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e058      	b.n	8004d94 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	691a      	ldr	r2, [r3, #16]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cec:	b2d2      	uxtb	r2, r2
 8004cee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf4:	1c5a      	adds	r2, r3, #1
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	3b01      	subs	r3, #1
 8004d0e:	b29a      	uxth	r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	f003 0304 	and.w	r3, r3, #4
 8004d1e:	2b04      	cmp	r3, #4
 8004d20:	d124      	bne.n	8004d6c <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d26:	2b03      	cmp	r3, #3
 8004d28:	d107      	bne.n	8004d3a <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d38:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	691a      	ldr	r2, [r3, #16]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d44:	b2d2      	uxtb	r2, r2
 8004d46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d4c:	1c5a      	adds	r2, r3, #1
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d56:	3b01      	subs	r3, #1
 8004d58:	b29a      	uxth	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	3b01      	subs	r3, #1
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	f47f ae88 	bne.w	8004a86 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2220      	movs	r2, #32
 8004d7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	e000      	b.n	8004d94 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8004d92:	2302      	movs	r3, #2
  }
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3728      	adds	r7, #40	@ 0x28
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	00010004 	.word	0x00010004
 8004da0:	20000064 	.word	0x20000064
 8004da4:	14f8b589 	.word	0x14f8b589

08004da8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bc80      	pop	{r7}
 8004dbc:	4770      	bx	lr
	...

08004dc0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b088      	sub	sp, #32
 8004dc4:	af02      	add	r7, sp, #8
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	607a      	str	r2, [r7, #4]
 8004dca:	603b      	str	r3, [r7, #0]
 8004dcc:	460b      	mov	r3, r1
 8004dce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dd4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	2b08      	cmp	r3, #8
 8004dda:	d006      	beq.n	8004dea <I2C_MasterRequestWrite+0x2a>
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d003      	beq.n	8004dea <I2C_MasterRequestWrite+0x2a>
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004de8:	d108      	bne.n	8004dfc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004df8:	601a      	str	r2, [r3, #0]
 8004dfa:	e00b      	b.n	8004e14 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e00:	2b12      	cmp	r3, #18
 8004e02:	d107      	bne.n	8004e14 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e12:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	9300      	str	r3, [sp, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004e20:	68f8      	ldr	r0, [r7, #12]
 8004e22:	f000 f937 	bl	8005094 <I2C_WaitOnFlagUntilTimeout>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d00d      	beq.n	8004e48 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e3a:	d103      	bne.n	8004e44 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e42:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e035      	b.n	8004eb4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e50:	d108      	bne.n	8004e64 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e52:	897b      	ldrh	r3, [r7, #10]
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	461a      	mov	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004e60:	611a      	str	r2, [r3, #16]
 8004e62:	e01b      	b.n	8004e9c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004e64:	897b      	ldrh	r3, [r7, #10]
 8004e66:	11db      	asrs	r3, r3, #7
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	f003 0306 	and.w	r3, r3, #6
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	f063 030f 	orn	r3, r3, #15
 8004e74:	b2da      	uxtb	r2, r3
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	490e      	ldr	r1, [pc, #56]	@ (8004ebc <I2C_MasterRequestWrite+0xfc>)
 8004e82:	68f8      	ldr	r0, [r7, #12]
 8004e84:	f000 f980 	bl	8005188 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d001      	beq.n	8004e92 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e010      	b.n	8004eb4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004e92:	897b      	ldrh	r3, [r7, #10]
 8004e94:	b2da      	uxtb	r2, r3
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	4907      	ldr	r1, [pc, #28]	@ (8004ec0 <I2C_MasterRequestWrite+0x100>)
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f000 f970 	bl	8005188 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d001      	beq.n	8004eb2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e000      	b.n	8004eb4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3718      	adds	r7, #24
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	00010008 	.word	0x00010008
 8004ec0:	00010002 	.word	0x00010002

08004ec4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b088      	sub	sp, #32
 8004ec8:	af02      	add	r7, sp, #8
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	4608      	mov	r0, r1
 8004ece:	4611      	mov	r1, r2
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	817b      	strh	r3, [r7, #10]
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	813b      	strh	r3, [r7, #8]
 8004eda:	4613      	mov	r3, r2
 8004edc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004eec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004efc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	6a3b      	ldr	r3, [r7, #32]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	f000 f8c2 	bl	8005094 <I2C_WaitOnFlagUntilTimeout>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00d      	beq.n	8004f32 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f24:	d103      	bne.n	8004f2e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f2c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e0aa      	b.n	8005088 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f32:	897b      	ldrh	r3, [r7, #10]
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	461a      	mov	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004f40:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f44:	6a3a      	ldr	r2, [r7, #32]
 8004f46:	4952      	ldr	r1, [pc, #328]	@ (8005090 <I2C_RequestMemoryRead+0x1cc>)
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f000 f91d 	bl	8005188 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d001      	beq.n	8004f58 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e097      	b.n	8005088 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f58:	2300      	movs	r3, #0
 8004f5a:	617b      	str	r3, [r7, #20]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	695b      	ldr	r3, [r3, #20]
 8004f62:	617b      	str	r3, [r7, #20]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	617b      	str	r3, [r7, #20]
 8004f6c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f70:	6a39      	ldr	r1, [r7, #32]
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f000 f9a8 	bl	80052c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00d      	beq.n	8004f9a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f82:	2b04      	cmp	r3, #4
 8004f84:	d107      	bne.n	8004f96 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f94:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e076      	b.n	8005088 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f9a:	88fb      	ldrh	r3, [r7, #6]
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d105      	bne.n	8004fac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004fa0:	893b      	ldrh	r3, [r7, #8]
 8004fa2:	b2da      	uxtb	r2, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	611a      	str	r2, [r3, #16]
 8004faa:	e021      	b.n	8004ff0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004fac:	893b      	ldrh	r3, [r7, #8]
 8004fae:	0a1b      	lsrs	r3, r3, #8
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	b2da      	uxtb	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fbc:	6a39      	ldr	r1, [r7, #32]
 8004fbe:	68f8      	ldr	r0, [r7, #12]
 8004fc0:	f000 f982 	bl	80052c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00d      	beq.n	8004fe6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fce:	2b04      	cmp	r3, #4
 8004fd0:	d107      	bne.n	8004fe2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fe0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e050      	b.n	8005088 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004fe6:	893b      	ldrh	r3, [r7, #8]
 8004fe8:	b2da      	uxtb	r2, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ff0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ff2:	6a39      	ldr	r1, [r7, #32]
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f000 f967 	bl	80052c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00d      	beq.n	800501c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005004:	2b04      	cmp	r3, #4
 8005006:	d107      	bne.n	8005018 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005016:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e035      	b.n	8005088 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800502a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800502c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502e:	9300      	str	r3, [sp, #0]
 8005030:	6a3b      	ldr	r3, [r7, #32]
 8005032:	2200      	movs	r2, #0
 8005034:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f000 f82b 	bl	8005094 <I2C_WaitOnFlagUntilTimeout>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00d      	beq.n	8005060 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800504e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005052:	d103      	bne.n	800505c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800505a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e013      	b.n	8005088 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005060:	897b      	ldrh	r3, [r7, #10]
 8005062:	b2db      	uxtb	r3, r3
 8005064:	f043 0301 	orr.w	r3, r3, #1
 8005068:	b2da      	uxtb	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005072:	6a3a      	ldr	r2, [r7, #32]
 8005074:	4906      	ldr	r1, [pc, #24]	@ (8005090 <I2C_RequestMemoryRead+0x1cc>)
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f000 f886 	bl	8005188 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d001      	beq.n	8005086 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e000      	b.n	8005088 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3718      	adds	r7, #24
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	00010002 	.word	0x00010002

08005094 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	603b      	str	r3, [r7, #0]
 80050a0:	4613      	mov	r3, r2
 80050a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050a4:	e048      	b.n	8005138 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ac:	d044      	beq.n	8005138 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ae:	f7fe fa0d 	bl	80034cc <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d302      	bcc.n	80050c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d139      	bne.n	8005138 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	0c1b      	lsrs	r3, r3, #16
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d10d      	bne.n	80050ea <I2C_WaitOnFlagUntilTimeout+0x56>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	695b      	ldr	r3, [r3, #20]
 80050d4:	43da      	mvns	r2, r3
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	4013      	ands	r3, r2
 80050da:	b29b      	uxth	r3, r3
 80050dc:	2b00      	cmp	r3, #0
 80050de:	bf0c      	ite	eq
 80050e0:	2301      	moveq	r3, #1
 80050e2:	2300      	movne	r3, #0
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	461a      	mov	r2, r3
 80050e8:	e00c      	b.n	8005104 <I2C_WaitOnFlagUntilTimeout+0x70>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	43da      	mvns	r2, r3
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	4013      	ands	r3, r2
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	bf0c      	ite	eq
 80050fc:	2301      	moveq	r3, #1
 80050fe:	2300      	movne	r3, #0
 8005100:	b2db      	uxtb	r3, r3
 8005102:	461a      	mov	r2, r3
 8005104:	79fb      	ldrb	r3, [r7, #7]
 8005106:	429a      	cmp	r2, r3
 8005108:	d116      	bne.n	8005138 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2200      	movs	r2, #0
 800510e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2220      	movs	r2, #32
 8005114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005124:	f043 0220 	orr.w	r2, r3, #32
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e023      	b.n	8005180 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	0c1b      	lsrs	r3, r3, #16
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2b01      	cmp	r3, #1
 8005140:	d10d      	bne.n	800515e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	695b      	ldr	r3, [r3, #20]
 8005148:	43da      	mvns	r2, r3
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	4013      	ands	r3, r2
 800514e:	b29b      	uxth	r3, r3
 8005150:	2b00      	cmp	r3, #0
 8005152:	bf0c      	ite	eq
 8005154:	2301      	moveq	r3, #1
 8005156:	2300      	movne	r3, #0
 8005158:	b2db      	uxtb	r3, r3
 800515a:	461a      	mov	r2, r3
 800515c:	e00c      	b.n	8005178 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	43da      	mvns	r2, r3
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	4013      	ands	r3, r2
 800516a:	b29b      	uxth	r3, r3
 800516c:	2b00      	cmp	r3, #0
 800516e:	bf0c      	ite	eq
 8005170:	2301      	moveq	r3, #1
 8005172:	2300      	movne	r3, #0
 8005174:	b2db      	uxtb	r3, r3
 8005176:	461a      	mov	r2, r3
 8005178:	79fb      	ldrb	r3, [r7, #7]
 800517a:	429a      	cmp	r2, r3
 800517c:	d093      	beq.n	80050a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	3710      	adds	r7, #16
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
 8005194:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005196:	e071      	b.n	800527c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051a6:	d123      	bne.n	80051f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051b6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80051c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2220      	movs	r2, #32
 80051cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051dc:	f043 0204 	orr.w	r2, r3, #4
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e067      	b.n	80052c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f6:	d041      	beq.n	800527c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051f8:	f7fe f968 	bl	80034cc <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	429a      	cmp	r2, r3
 8005206:	d302      	bcc.n	800520e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d136      	bne.n	800527c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	0c1b      	lsrs	r3, r3, #16
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b01      	cmp	r3, #1
 8005216:	d10c      	bne.n	8005232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	43da      	mvns	r2, r3
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	4013      	ands	r3, r2
 8005224:	b29b      	uxth	r3, r3
 8005226:	2b00      	cmp	r3, #0
 8005228:	bf14      	ite	ne
 800522a:	2301      	movne	r3, #1
 800522c:	2300      	moveq	r3, #0
 800522e:	b2db      	uxtb	r3, r3
 8005230:	e00b      	b.n	800524a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	43da      	mvns	r2, r3
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	4013      	ands	r3, r2
 800523e:	b29b      	uxth	r3, r3
 8005240:	2b00      	cmp	r3, #0
 8005242:	bf14      	ite	ne
 8005244:	2301      	movne	r3, #1
 8005246:	2300      	moveq	r3, #0
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d016      	beq.n	800527c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2200      	movs	r2, #0
 8005252:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2220      	movs	r2, #32
 8005258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005268:	f043 0220 	orr.w	r2, r3, #32
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e021      	b.n	80052c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	0c1b      	lsrs	r3, r3, #16
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b01      	cmp	r3, #1
 8005284:	d10c      	bne.n	80052a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	695b      	ldr	r3, [r3, #20]
 800528c:	43da      	mvns	r2, r3
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	4013      	ands	r3, r2
 8005292:	b29b      	uxth	r3, r3
 8005294:	2b00      	cmp	r3, #0
 8005296:	bf14      	ite	ne
 8005298:	2301      	movne	r3, #1
 800529a:	2300      	moveq	r3, #0
 800529c:	b2db      	uxtb	r3, r3
 800529e:	e00b      	b.n	80052b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	43da      	mvns	r2, r3
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	4013      	ands	r3, r2
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	bf14      	ite	ne
 80052b2:	2301      	movne	r3, #1
 80052b4:	2300      	moveq	r3, #0
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	f47f af6d 	bne.w	8005198 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3710      	adds	r7, #16
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052d4:	e034      	b.n	8005340 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052d6:	68f8      	ldr	r0, [r7, #12]
 80052d8:	f000 f8e3 	bl	80054a2 <I2C_IsAcknowledgeFailed>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d001      	beq.n	80052e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e034      	b.n	8005350 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ec:	d028      	beq.n	8005340 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ee:	f7fe f8ed 	bl	80034cc <HAL_GetTick>
 80052f2:	4602      	mov	r2, r0
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	68ba      	ldr	r2, [r7, #8]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d302      	bcc.n	8005304 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d11d      	bne.n	8005340 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800530e:	2b80      	cmp	r3, #128	@ 0x80
 8005310:	d016      	beq.n	8005340 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2220      	movs	r2, #32
 800531c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800532c:	f043 0220 	orr.w	r2, r3, #32
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e007      	b.n	8005350 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800534a:	2b80      	cmp	r3, #128	@ 0x80
 800534c:	d1c3      	bne.n	80052d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3710      	adds	r7, #16
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005364:	e034      	b.n	80053d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f000 f89b 	bl	80054a2 <I2C_IsAcknowledgeFailed>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d001      	beq.n	8005376 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e034      	b.n	80053e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800537c:	d028      	beq.n	80053d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800537e:	f7fe f8a5 	bl	80034cc <HAL_GetTick>
 8005382:	4602      	mov	r2, r0
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	68ba      	ldr	r2, [r7, #8]
 800538a:	429a      	cmp	r2, r3
 800538c:	d302      	bcc.n	8005394 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d11d      	bne.n	80053d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	f003 0304 	and.w	r3, r3, #4
 800539e:	2b04      	cmp	r3, #4
 80053a0:	d016      	beq.n	80053d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2220      	movs	r2, #32
 80053ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053bc:	f043 0220 	orr.w	r2, r3, #32
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e007      	b.n	80053e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	f003 0304 	and.w	r3, r3, #4
 80053da:	2b04      	cmp	r3, #4
 80053dc:	d1c3      	bne.n	8005366 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3710      	adds	r7, #16
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053f4:	e049      	b.n	800548a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	695b      	ldr	r3, [r3, #20]
 80053fc:	f003 0310 	and.w	r3, r3, #16
 8005400:	2b10      	cmp	r3, #16
 8005402:	d119      	bne.n	8005438 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f06f 0210 	mvn.w	r2, #16
 800540c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2200      	movs	r2, #0
 8005412:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2220      	movs	r2, #32
 8005418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e030      	b.n	800549a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005438:	f7fe f848 	bl	80034cc <HAL_GetTick>
 800543c:	4602      	mov	r2, r0
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	68ba      	ldr	r2, [r7, #8]
 8005444:	429a      	cmp	r2, r3
 8005446:	d302      	bcc.n	800544e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d11d      	bne.n	800548a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	695b      	ldr	r3, [r3, #20]
 8005454:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005458:	2b40      	cmp	r3, #64	@ 0x40
 800545a:	d016      	beq.n	800548a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2200      	movs	r2, #0
 8005460:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2220      	movs	r2, #32
 8005466:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005476:	f043 0220 	orr.w	r2, r3, #32
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e007      	b.n	800549a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	695b      	ldr	r3, [r3, #20]
 8005490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005494:	2b40      	cmp	r3, #64	@ 0x40
 8005496:	d1ae      	bne.n	80053f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3710      	adds	r7, #16
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80054a2:	b480      	push	{r7}
 80054a4:	b083      	sub	sp, #12
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	695b      	ldr	r3, [r3, #20]
 80054b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054b8:	d11b      	bne.n	80054f2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80054c2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2220      	movs	r2, #32
 80054ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054de:	f043 0204 	orr.w	r2, r3, #4
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e000      	b.n	80054f4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bc80      	pop	{r7}
 80054fc:	4770      	bx	lr
	...

08005500 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b086      	sub	sp, #24
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d101      	bne.n	8005512 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e272      	b.n	80059f8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0301 	and.w	r3, r3, #1
 800551a:	2b00      	cmp	r3, #0
 800551c:	f000 8087 	beq.w	800562e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005520:	4b92      	ldr	r3, [pc, #584]	@ (800576c <HAL_RCC_OscConfig+0x26c>)
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	f003 030c 	and.w	r3, r3, #12
 8005528:	2b04      	cmp	r3, #4
 800552a:	d00c      	beq.n	8005546 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800552c:	4b8f      	ldr	r3, [pc, #572]	@ (800576c <HAL_RCC_OscConfig+0x26c>)
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f003 030c 	and.w	r3, r3, #12
 8005534:	2b08      	cmp	r3, #8
 8005536:	d112      	bne.n	800555e <HAL_RCC_OscConfig+0x5e>
 8005538:	4b8c      	ldr	r3, [pc, #560]	@ (800576c <HAL_RCC_OscConfig+0x26c>)
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005540:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005544:	d10b      	bne.n	800555e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005546:	4b89      	ldr	r3, [pc, #548]	@ (800576c <HAL_RCC_OscConfig+0x26c>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d06c      	beq.n	800562c <HAL_RCC_OscConfig+0x12c>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d168      	bne.n	800562c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e24c      	b.n	80059f8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005566:	d106      	bne.n	8005576 <HAL_RCC_OscConfig+0x76>
 8005568:	4b80      	ldr	r3, [pc, #512]	@ (800576c <HAL_RCC_OscConfig+0x26c>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a7f      	ldr	r2, [pc, #508]	@ (800576c <HAL_RCC_OscConfig+0x26c>)
 800556e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005572:	6013      	str	r3, [r2, #0]
 8005574:	e02e      	b.n	80055d4 <HAL_RCC_OscConfig+0xd4>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d10c      	bne.n	8005598 <HAL_RCC_OscConfig+0x98>
 800557e:	4b7b      	ldr	r3, [pc, #492]	@ (800576c <HAL_RCC_OscConfig+0x26c>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a7a      	ldr	r2, [pc, #488]	@ (800576c <HAL_RCC_OscConfig+0x26c>)
 8005584:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005588:	6013      	str	r3, [r2, #0]
 800558a:	4b78      	ldr	r3, [pc, #480]	@ (800576c <HAL_RCC_OscConfig+0x26c>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a77      	ldr	r2, [pc, #476]	@ (800576c <HAL_RCC_OscConfig+0x26c>)
 8005590:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005594:	6013      	str	r3, [r2, #0]
 8005596:	e01d      	b.n	80055d4 <HAL_RCC_OscConfig+0xd4>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80055a0:	d10c      	bne.n	80055bc <HAL_RCC_OscConfig+0xbc>
 80055a2:	4b72      	ldr	r3, [pc, #456]	@ (800576c <HAL_RCC_OscConfig+0x26c>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a71      	ldr	r2, [pc, #452]	@ (800576c <HAL_RCC_OscConfig+0x26c>)
 80055a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80055ac:	6013      	str	r3, [r2, #0]
 80055ae:	4b6f      	ldr	r3, [pc, #444]	@ (800576c <HAL_RCC_OscConfig+0x26c>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a6e      	ldr	r2, [pc, #440]	@ (800576c <HAL_RCC_OscConfig+0x26c>)
 80055b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055b8:	6013      	str	r3, [r2, #0]
 80055ba:	e00b      	b.n	80055d4 <HAL_RCC_OscConfig+0xd4>
 80055bc:	4b6b      	ldr	r3, [pc, #428]	@ (800576c <HAL_RCC_OscConfig+0x26c>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a6a      	ldr	r2, [pc, #424]	@ (800576c <HAL_RCC_OscConfig+0x26c>)
 80055c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055c6:	6013      	str	r3, [r2, #0]
 80055c8:	4b68      	ldr	r3, [pc, #416]	@ (800576c <HAL_RCC_OscConfig+0x26c>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a67      	ldr	r2, [pc, #412]	@ (800576c <HAL_RCC_OscConfig+0x26c>)
 80055ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80055d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d013      	beq.n	8005604 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055dc:	f7fd ff76 	bl	80034cc <HAL_GetTick>
 80055e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055e2:	e008      	b.n	80055f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055e4:	f7fd ff72 	bl	80034cc <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	2b64      	cmp	r3, #100	@ 0x64
 80055f0:	d901      	bls.n	80055f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e200      	b.n	80059f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055f6:	4b5d      	ldr	r3, [pc, #372]	@ (800576c <HAL_RCC_OscConfig+0x26c>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d0f0      	beq.n	80055e4 <HAL_RCC_OscConfig+0xe4>
 8005602:	e014      	b.n	800562e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005604:	f7fd ff62 	bl	80034cc <HAL_GetTick>
 8005608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800560a:	e008      	b.n	800561e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800560c:	f7fd ff5e 	bl	80034cc <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	2b64      	cmp	r3, #100	@ 0x64
 8005618:	d901      	bls.n	800561e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e1ec      	b.n	80059f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800561e:	4b53      	ldr	r3, [pc, #332]	@ (800576c <HAL_RCC_OscConfig+0x26c>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1f0      	bne.n	800560c <HAL_RCC_OscConfig+0x10c>
 800562a:	e000      	b.n	800562e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800562c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0302 	and.w	r3, r3, #2
 8005636:	2b00      	cmp	r3, #0
 8005638:	d063      	beq.n	8005702 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800563a:	4b4c      	ldr	r3, [pc, #304]	@ (800576c <HAL_RCC_OscConfig+0x26c>)
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	f003 030c 	and.w	r3, r3, #12
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00b      	beq.n	800565e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005646:	4b49      	ldr	r3, [pc, #292]	@ (800576c <HAL_RCC_OscConfig+0x26c>)
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f003 030c 	and.w	r3, r3, #12
 800564e:	2b08      	cmp	r3, #8
 8005650:	d11c      	bne.n	800568c <HAL_RCC_OscConfig+0x18c>
 8005652:	4b46      	ldr	r3, [pc, #280]	@ (800576c <HAL_RCC_OscConfig+0x26c>)
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d116      	bne.n	800568c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800565e:	4b43      	ldr	r3, [pc, #268]	@ (800576c <HAL_RCC_OscConfig+0x26c>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0302 	and.w	r3, r3, #2
 8005666:	2b00      	cmp	r3, #0
 8005668:	d005      	beq.n	8005676 <HAL_RCC_OscConfig+0x176>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	2b01      	cmp	r3, #1
 8005670:	d001      	beq.n	8005676 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e1c0      	b.n	80059f8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005676:	4b3d      	ldr	r3, [pc, #244]	@ (800576c <HAL_RCC_OscConfig+0x26c>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	00db      	lsls	r3, r3, #3
 8005684:	4939      	ldr	r1, [pc, #228]	@ (800576c <HAL_RCC_OscConfig+0x26c>)
 8005686:	4313      	orrs	r3, r2
 8005688:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800568a:	e03a      	b.n	8005702 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d020      	beq.n	80056d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005694:	4b36      	ldr	r3, [pc, #216]	@ (8005770 <HAL_RCC_OscConfig+0x270>)
 8005696:	2201      	movs	r2, #1
 8005698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800569a:	f7fd ff17 	bl	80034cc <HAL_GetTick>
 800569e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056a0:	e008      	b.n	80056b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056a2:	f7fd ff13 	bl	80034cc <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d901      	bls.n	80056b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e1a1      	b.n	80059f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056b4:	4b2d      	ldr	r3, [pc, #180]	@ (800576c <HAL_RCC_OscConfig+0x26c>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 0302 	and.w	r3, r3, #2
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d0f0      	beq.n	80056a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056c0:	4b2a      	ldr	r3, [pc, #168]	@ (800576c <HAL_RCC_OscConfig+0x26c>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	00db      	lsls	r3, r3, #3
 80056ce:	4927      	ldr	r1, [pc, #156]	@ (800576c <HAL_RCC_OscConfig+0x26c>)
 80056d0:	4313      	orrs	r3, r2
 80056d2:	600b      	str	r3, [r1, #0]
 80056d4:	e015      	b.n	8005702 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056d6:	4b26      	ldr	r3, [pc, #152]	@ (8005770 <HAL_RCC_OscConfig+0x270>)
 80056d8:	2200      	movs	r2, #0
 80056da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056dc:	f7fd fef6 	bl	80034cc <HAL_GetTick>
 80056e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056e2:	e008      	b.n	80056f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056e4:	f7fd fef2 	bl	80034cc <HAL_GetTick>
 80056e8:	4602      	mov	r2, r0
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d901      	bls.n	80056f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e180      	b.n	80059f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056f6:	4b1d      	ldr	r3, [pc, #116]	@ (800576c <HAL_RCC_OscConfig+0x26c>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0302 	and.w	r3, r3, #2
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1f0      	bne.n	80056e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0308 	and.w	r3, r3, #8
 800570a:	2b00      	cmp	r3, #0
 800570c:	d03a      	beq.n	8005784 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d019      	beq.n	800574a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005716:	4b17      	ldr	r3, [pc, #92]	@ (8005774 <HAL_RCC_OscConfig+0x274>)
 8005718:	2201      	movs	r2, #1
 800571a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800571c:	f7fd fed6 	bl	80034cc <HAL_GetTick>
 8005720:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005722:	e008      	b.n	8005736 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005724:	f7fd fed2 	bl	80034cc <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	2b02      	cmp	r3, #2
 8005730:	d901      	bls.n	8005736 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e160      	b.n	80059f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005736:	4b0d      	ldr	r3, [pc, #52]	@ (800576c <HAL_RCC_OscConfig+0x26c>)
 8005738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800573a:	f003 0302 	and.w	r3, r3, #2
 800573e:	2b00      	cmp	r3, #0
 8005740:	d0f0      	beq.n	8005724 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005742:	2001      	movs	r0, #1
 8005744:	f000 face 	bl	8005ce4 <RCC_Delay>
 8005748:	e01c      	b.n	8005784 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800574a:	4b0a      	ldr	r3, [pc, #40]	@ (8005774 <HAL_RCC_OscConfig+0x274>)
 800574c:	2200      	movs	r2, #0
 800574e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005750:	f7fd febc 	bl	80034cc <HAL_GetTick>
 8005754:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005756:	e00f      	b.n	8005778 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005758:	f7fd feb8 	bl	80034cc <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	2b02      	cmp	r3, #2
 8005764:	d908      	bls.n	8005778 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e146      	b.n	80059f8 <HAL_RCC_OscConfig+0x4f8>
 800576a:	bf00      	nop
 800576c:	40021000 	.word	0x40021000
 8005770:	42420000 	.word	0x42420000
 8005774:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005778:	4b92      	ldr	r3, [pc, #584]	@ (80059c4 <HAL_RCC_OscConfig+0x4c4>)
 800577a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800577c:	f003 0302 	and.w	r3, r3, #2
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1e9      	bne.n	8005758 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0304 	and.w	r3, r3, #4
 800578c:	2b00      	cmp	r3, #0
 800578e:	f000 80a6 	beq.w	80058de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005792:	2300      	movs	r3, #0
 8005794:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005796:	4b8b      	ldr	r3, [pc, #556]	@ (80059c4 <HAL_RCC_OscConfig+0x4c4>)
 8005798:	69db      	ldr	r3, [r3, #28]
 800579a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10d      	bne.n	80057be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057a2:	4b88      	ldr	r3, [pc, #544]	@ (80059c4 <HAL_RCC_OscConfig+0x4c4>)
 80057a4:	69db      	ldr	r3, [r3, #28]
 80057a6:	4a87      	ldr	r2, [pc, #540]	@ (80059c4 <HAL_RCC_OscConfig+0x4c4>)
 80057a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057ac:	61d3      	str	r3, [r2, #28]
 80057ae:	4b85      	ldr	r3, [pc, #532]	@ (80059c4 <HAL_RCC_OscConfig+0x4c4>)
 80057b0:	69db      	ldr	r3, [r3, #28]
 80057b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057b6:	60bb      	str	r3, [r7, #8]
 80057b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057ba:	2301      	movs	r3, #1
 80057bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057be:	4b82      	ldr	r3, [pc, #520]	@ (80059c8 <HAL_RCC_OscConfig+0x4c8>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d118      	bne.n	80057fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057ca:	4b7f      	ldr	r3, [pc, #508]	@ (80059c8 <HAL_RCC_OscConfig+0x4c8>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a7e      	ldr	r2, [pc, #504]	@ (80059c8 <HAL_RCC_OscConfig+0x4c8>)
 80057d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057d6:	f7fd fe79 	bl	80034cc <HAL_GetTick>
 80057da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057dc:	e008      	b.n	80057f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057de:	f7fd fe75 	bl	80034cc <HAL_GetTick>
 80057e2:	4602      	mov	r2, r0
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	2b64      	cmp	r3, #100	@ 0x64
 80057ea:	d901      	bls.n	80057f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e103      	b.n	80059f8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057f0:	4b75      	ldr	r3, [pc, #468]	@ (80059c8 <HAL_RCC_OscConfig+0x4c8>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d0f0      	beq.n	80057de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d106      	bne.n	8005812 <HAL_RCC_OscConfig+0x312>
 8005804:	4b6f      	ldr	r3, [pc, #444]	@ (80059c4 <HAL_RCC_OscConfig+0x4c4>)
 8005806:	6a1b      	ldr	r3, [r3, #32]
 8005808:	4a6e      	ldr	r2, [pc, #440]	@ (80059c4 <HAL_RCC_OscConfig+0x4c4>)
 800580a:	f043 0301 	orr.w	r3, r3, #1
 800580e:	6213      	str	r3, [r2, #32]
 8005810:	e02d      	b.n	800586e <HAL_RCC_OscConfig+0x36e>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d10c      	bne.n	8005834 <HAL_RCC_OscConfig+0x334>
 800581a:	4b6a      	ldr	r3, [pc, #424]	@ (80059c4 <HAL_RCC_OscConfig+0x4c4>)
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	4a69      	ldr	r2, [pc, #420]	@ (80059c4 <HAL_RCC_OscConfig+0x4c4>)
 8005820:	f023 0301 	bic.w	r3, r3, #1
 8005824:	6213      	str	r3, [r2, #32]
 8005826:	4b67      	ldr	r3, [pc, #412]	@ (80059c4 <HAL_RCC_OscConfig+0x4c4>)
 8005828:	6a1b      	ldr	r3, [r3, #32]
 800582a:	4a66      	ldr	r2, [pc, #408]	@ (80059c4 <HAL_RCC_OscConfig+0x4c4>)
 800582c:	f023 0304 	bic.w	r3, r3, #4
 8005830:	6213      	str	r3, [r2, #32]
 8005832:	e01c      	b.n	800586e <HAL_RCC_OscConfig+0x36e>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	2b05      	cmp	r3, #5
 800583a:	d10c      	bne.n	8005856 <HAL_RCC_OscConfig+0x356>
 800583c:	4b61      	ldr	r3, [pc, #388]	@ (80059c4 <HAL_RCC_OscConfig+0x4c4>)
 800583e:	6a1b      	ldr	r3, [r3, #32]
 8005840:	4a60      	ldr	r2, [pc, #384]	@ (80059c4 <HAL_RCC_OscConfig+0x4c4>)
 8005842:	f043 0304 	orr.w	r3, r3, #4
 8005846:	6213      	str	r3, [r2, #32]
 8005848:	4b5e      	ldr	r3, [pc, #376]	@ (80059c4 <HAL_RCC_OscConfig+0x4c4>)
 800584a:	6a1b      	ldr	r3, [r3, #32]
 800584c:	4a5d      	ldr	r2, [pc, #372]	@ (80059c4 <HAL_RCC_OscConfig+0x4c4>)
 800584e:	f043 0301 	orr.w	r3, r3, #1
 8005852:	6213      	str	r3, [r2, #32]
 8005854:	e00b      	b.n	800586e <HAL_RCC_OscConfig+0x36e>
 8005856:	4b5b      	ldr	r3, [pc, #364]	@ (80059c4 <HAL_RCC_OscConfig+0x4c4>)
 8005858:	6a1b      	ldr	r3, [r3, #32]
 800585a:	4a5a      	ldr	r2, [pc, #360]	@ (80059c4 <HAL_RCC_OscConfig+0x4c4>)
 800585c:	f023 0301 	bic.w	r3, r3, #1
 8005860:	6213      	str	r3, [r2, #32]
 8005862:	4b58      	ldr	r3, [pc, #352]	@ (80059c4 <HAL_RCC_OscConfig+0x4c4>)
 8005864:	6a1b      	ldr	r3, [r3, #32]
 8005866:	4a57      	ldr	r2, [pc, #348]	@ (80059c4 <HAL_RCC_OscConfig+0x4c4>)
 8005868:	f023 0304 	bic.w	r3, r3, #4
 800586c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d015      	beq.n	80058a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005876:	f7fd fe29 	bl	80034cc <HAL_GetTick>
 800587a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800587c:	e00a      	b.n	8005894 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800587e:	f7fd fe25 	bl	80034cc <HAL_GetTick>
 8005882:	4602      	mov	r2, r0
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	f241 3288 	movw	r2, #5000	@ 0x1388
 800588c:	4293      	cmp	r3, r2
 800588e:	d901      	bls.n	8005894 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005890:	2303      	movs	r3, #3
 8005892:	e0b1      	b.n	80059f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005894:	4b4b      	ldr	r3, [pc, #300]	@ (80059c4 <HAL_RCC_OscConfig+0x4c4>)
 8005896:	6a1b      	ldr	r3, [r3, #32]
 8005898:	f003 0302 	and.w	r3, r3, #2
 800589c:	2b00      	cmp	r3, #0
 800589e:	d0ee      	beq.n	800587e <HAL_RCC_OscConfig+0x37e>
 80058a0:	e014      	b.n	80058cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058a2:	f7fd fe13 	bl	80034cc <HAL_GetTick>
 80058a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058a8:	e00a      	b.n	80058c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058aa:	f7fd fe0f 	bl	80034cc <HAL_GetTick>
 80058ae:	4602      	mov	r2, r0
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	1ad3      	subs	r3, r2, r3
 80058b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d901      	bls.n	80058c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	e09b      	b.n	80059f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058c0:	4b40      	ldr	r3, [pc, #256]	@ (80059c4 <HAL_RCC_OscConfig+0x4c4>)
 80058c2:	6a1b      	ldr	r3, [r3, #32]
 80058c4:	f003 0302 	and.w	r3, r3, #2
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1ee      	bne.n	80058aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80058cc:	7dfb      	ldrb	r3, [r7, #23]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d105      	bne.n	80058de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058d2:	4b3c      	ldr	r3, [pc, #240]	@ (80059c4 <HAL_RCC_OscConfig+0x4c4>)
 80058d4:	69db      	ldr	r3, [r3, #28]
 80058d6:	4a3b      	ldr	r2, [pc, #236]	@ (80059c4 <HAL_RCC_OscConfig+0x4c4>)
 80058d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	69db      	ldr	r3, [r3, #28]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	f000 8087 	beq.w	80059f6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058e8:	4b36      	ldr	r3, [pc, #216]	@ (80059c4 <HAL_RCC_OscConfig+0x4c4>)
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f003 030c 	and.w	r3, r3, #12
 80058f0:	2b08      	cmp	r3, #8
 80058f2:	d061      	beq.n	80059b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	69db      	ldr	r3, [r3, #28]
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d146      	bne.n	800598a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058fc:	4b33      	ldr	r3, [pc, #204]	@ (80059cc <HAL_RCC_OscConfig+0x4cc>)
 80058fe:	2200      	movs	r2, #0
 8005900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005902:	f7fd fde3 	bl	80034cc <HAL_GetTick>
 8005906:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005908:	e008      	b.n	800591c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800590a:	f7fd fddf 	bl	80034cc <HAL_GetTick>
 800590e:	4602      	mov	r2, r0
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	2b02      	cmp	r3, #2
 8005916:	d901      	bls.n	800591c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	e06d      	b.n	80059f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800591c:	4b29      	ldr	r3, [pc, #164]	@ (80059c4 <HAL_RCC_OscConfig+0x4c4>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1f0      	bne.n	800590a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a1b      	ldr	r3, [r3, #32]
 800592c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005930:	d108      	bne.n	8005944 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005932:	4b24      	ldr	r3, [pc, #144]	@ (80059c4 <HAL_RCC_OscConfig+0x4c4>)
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	4921      	ldr	r1, [pc, #132]	@ (80059c4 <HAL_RCC_OscConfig+0x4c4>)
 8005940:	4313      	orrs	r3, r2
 8005942:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005944:	4b1f      	ldr	r3, [pc, #124]	@ (80059c4 <HAL_RCC_OscConfig+0x4c4>)
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a19      	ldr	r1, [r3, #32]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005954:	430b      	orrs	r3, r1
 8005956:	491b      	ldr	r1, [pc, #108]	@ (80059c4 <HAL_RCC_OscConfig+0x4c4>)
 8005958:	4313      	orrs	r3, r2
 800595a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800595c:	4b1b      	ldr	r3, [pc, #108]	@ (80059cc <HAL_RCC_OscConfig+0x4cc>)
 800595e:	2201      	movs	r2, #1
 8005960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005962:	f7fd fdb3 	bl	80034cc <HAL_GetTick>
 8005966:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005968:	e008      	b.n	800597c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800596a:	f7fd fdaf 	bl	80034cc <HAL_GetTick>
 800596e:	4602      	mov	r2, r0
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	2b02      	cmp	r3, #2
 8005976:	d901      	bls.n	800597c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e03d      	b.n	80059f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800597c:	4b11      	ldr	r3, [pc, #68]	@ (80059c4 <HAL_RCC_OscConfig+0x4c4>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005984:	2b00      	cmp	r3, #0
 8005986:	d0f0      	beq.n	800596a <HAL_RCC_OscConfig+0x46a>
 8005988:	e035      	b.n	80059f6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800598a:	4b10      	ldr	r3, [pc, #64]	@ (80059cc <HAL_RCC_OscConfig+0x4cc>)
 800598c:	2200      	movs	r2, #0
 800598e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005990:	f7fd fd9c 	bl	80034cc <HAL_GetTick>
 8005994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005996:	e008      	b.n	80059aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005998:	f7fd fd98 	bl	80034cc <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d901      	bls.n	80059aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e026      	b.n	80059f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059aa:	4b06      	ldr	r3, [pc, #24]	@ (80059c4 <HAL_RCC_OscConfig+0x4c4>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1f0      	bne.n	8005998 <HAL_RCC_OscConfig+0x498>
 80059b6:	e01e      	b.n	80059f6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	69db      	ldr	r3, [r3, #28]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d107      	bne.n	80059d0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e019      	b.n	80059f8 <HAL_RCC_OscConfig+0x4f8>
 80059c4:	40021000 	.word	0x40021000
 80059c8:	40007000 	.word	0x40007000
 80059cc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80059d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005a00 <HAL_RCC_OscConfig+0x500>)
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a1b      	ldr	r3, [r3, #32]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d106      	bne.n	80059f2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d001      	beq.n	80059f6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e000      	b.n	80059f8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3718      	adds	r7, #24
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	40021000 	.word	0x40021000

08005a04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d101      	bne.n	8005a18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e0d0      	b.n	8005bba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a18:	4b6a      	ldr	r3, [pc, #424]	@ (8005bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 0307 	and.w	r3, r3, #7
 8005a20:	683a      	ldr	r2, [r7, #0]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d910      	bls.n	8005a48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a26:	4b67      	ldr	r3, [pc, #412]	@ (8005bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f023 0207 	bic.w	r2, r3, #7
 8005a2e:	4965      	ldr	r1, [pc, #404]	@ (8005bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a36:	4b63      	ldr	r3, [pc, #396]	@ (8005bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0307 	and.w	r3, r3, #7
 8005a3e:	683a      	ldr	r2, [r7, #0]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d001      	beq.n	8005a48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e0b8      	b.n	8005bba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 0302 	and.w	r3, r3, #2
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d020      	beq.n	8005a96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 0304 	and.w	r3, r3, #4
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d005      	beq.n	8005a6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a60:	4b59      	ldr	r3, [pc, #356]	@ (8005bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	4a58      	ldr	r2, [pc, #352]	@ (8005bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005a66:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005a6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 0308 	and.w	r3, r3, #8
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d005      	beq.n	8005a84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a78:	4b53      	ldr	r3, [pc, #332]	@ (8005bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	4a52      	ldr	r2, [pc, #328]	@ (8005bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005a7e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005a82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a84:	4b50      	ldr	r3, [pc, #320]	@ (8005bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	494d      	ldr	r1, [pc, #308]	@ (8005bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005a92:	4313      	orrs	r3, r2
 8005a94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0301 	and.w	r3, r3, #1
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d040      	beq.n	8005b24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d107      	bne.n	8005aba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aaa:	4b47      	ldr	r3, [pc, #284]	@ (8005bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d115      	bne.n	8005ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e07f      	b.n	8005bba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	d107      	bne.n	8005ad2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ac2:	4b41      	ldr	r3, [pc, #260]	@ (8005bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d109      	bne.n	8005ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e073      	b.n	8005bba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ad2:	4b3d      	ldr	r3, [pc, #244]	@ (8005bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0302 	and.w	r3, r3, #2
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d101      	bne.n	8005ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e06b      	b.n	8005bba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ae2:	4b39      	ldr	r3, [pc, #228]	@ (8005bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f023 0203 	bic.w	r2, r3, #3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	4936      	ldr	r1, [pc, #216]	@ (8005bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005af0:	4313      	orrs	r3, r2
 8005af2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005af4:	f7fd fcea 	bl	80034cc <HAL_GetTick>
 8005af8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005afa:	e00a      	b.n	8005b12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005afc:	f7fd fce6 	bl	80034cc <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d901      	bls.n	8005b12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e053      	b.n	8005bba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b12:	4b2d      	ldr	r3, [pc, #180]	@ (8005bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	f003 020c 	and.w	r2, r3, #12
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d1eb      	bne.n	8005afc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b24:	4b27      	ldr	r3, [pc, #156]	@ (8005bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0307 	and.w	r3, r3, #7
 8005b2c:	683a      	ldr	r2, [r7, #0]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d210      	bcs.n	8005b54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b32:	4b24      	ldr	r3, [pc, #144]	@ (8005bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f023 0207 	bic.w	r2, r3, #7
 8005b3a:	4922      	ldr	r1, [pc, #136]	@ (8005bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b42:	4b20      	ldr	r3, [pc, #128]	@ (8005bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 0307 	and.w	r3, r3, #7
 8005b4a:	683a      	ldr	r2, [r7, #0]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d001      	beq.n	8005b54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	e032      	b.n	8005bba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 0304 	and.w	r3, r3, #4
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d008      	beq.n	8005b72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b60:	4b19      	ldr	r3, [pc, #100]	@ (8005bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	4916      	ldr	r1, [pc, #88]	@ (8005bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0308 	and.w	r3, r3, #8
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d009      	beq.n	8005b92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005b7e:	4b12      	ldr	r3, [pc, #72]	@ (8005bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	00db      	lsls	r3, r3, #3
 8005b8c:	490e      	ldr	r1, [pc, #56]	@ (8005bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005b92:	f000 f821 	bl	8005bd8 <HAL_RCC_GetSysClockFreq>
 8005b96:	4602      	mov	r2, r0
 8005b98:	4b0b      	ldr	r3, [pc, #44]	@ (8005bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	091b      	lsrs	r3, r3, #4
 8005b9e:	f003 030f 	and.w	r3, r3, #15
 8005ba2:	490a      	ldr	r1, [pc, #40]	@ (8005bcc <HAL_RCC_ClockConfig+0x1c8>)
 8005ba4:	5ccb      	ldrb	r3, [r1, r3]
 8005ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8005baa:	4a09      	ldr	r2, [pc, #36]	@ (8005bd0 <HAL_RCC_ClockConfig+0x1cc>)
 8005bac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005bae:	4b09      	ldr	r3, [pc, #36]	@ (8005bd4 <HAL_RCC_ClockConfig+0x1d0>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f7fd fc48 	bl	8003448 <HAL_InitTick>

  return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3710      	adds	r7, #16
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	40022000 	.word	0x40022000
 8005bc8:	40021000 	.word	0x40021000
 8005bcc:	080089c4 	.word	0x080089c4
 8005bd0:	20000064 	.word	0x20000064
 8005bd4:	20000068 	.word	0x20000068

08005bd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b087      	sub	sp, #28
 8005bdc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005bde:	2300      	movs	r3, #0
 8005be0:	60fb      	str	r3, [r7, #12]
 8005be2:	2300      	movs	r3, #0
 8005be4:	60bb      	str	r3, [r7, #8]
 8005be6:	2300      	movs	r3, #0
 8005be8:	617b      	str	r3, [r7, #20]
 8005bea:	2300      	movs	r3, #0
 8005bec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005bf2:	4b1e      	ldr	r3, [pc, #120]	@ (8005c6c <HAL_RCC_GetSysClockFreq+0x94>)
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f003 030c 	and.w	r3, r3, #12
 8005bfe:	2b04      	cmp	r3, #4
 8005c00:	d002      	beq.n	8005c08 <HAL_RCC_GetSysClockFreq+0x30>
 8005c02:	2b08      	cmp	r3, #8
 8005c04:	d003      	beq.n	8005c0e <HAL_RCC_GetSysClockFreq+0x36>
 8005c06:	e027      	b.n	8005c58 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005c08:	4b19      	ldr	r3, [pc, #100]	@ (8005c70 <HAL_RCC_GetSysClockFreq+0x98>)
 8005c0a:	613b      	str	r3, [r7, #16]
      break;
 8005c0c:	e027      	b.n	8005c5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	0c9b      	lsrs	r3, r3, #18
 8005c12:	f003 030f 	and.w	r3, r3, #15
 8005c16:	4a17      	ldr	r2, [pc, #92]	@ (8005c74 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005c18:	5cd3      	ldrb	r3, [r2, r3]
 8005c1a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d010      	beq.n	8005c48 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005c26:	4b11      	ldr	r3, [pc, #68]	@ (8005c6c <HAL_RCC_GetSysClockFreq+0x94>)
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	0c5b      	lsrs	r3, r3, #17
 8005c2c:	f003 0301 	and.w	r3, r3, #1
 8005c30:	4a11      	ldr	r2, [pc, #68]	@ (8005c78 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005c32:	5cd3      	ldrb	r3, [r2, r3]
 8005c34:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a0d      	ldr	r2, [pc, #52]	@ (8005c70 <HAL_RCC_GetSysClockFreq+0x98>)
 8005c3a:	fb03 f202 	mul.w	r2, r3, r2
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c44:	617b      	str	r3, [r7, #20]
 8005c46:	e004      	b.n	8005c52 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a0c      	ldr	r2, [pc, #48]	@ (8005c7c <HAL_RCC_GetSysClockFreq+0xa4>)
 8005c4c:	fb02 f303 	mul.w	r3, r2, r3
 8005c50:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	613b      	str	r3, [r7, #16]
      break;
 8005c56:	e002      	b.n	8005c5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005c58:	4b05      	ldr	r3, [pc, #20]	@ (8005c70 <HAL_RCC_GetSysClockFreq+0x98>)
 8005c5a:	613b      	str	r3, [r7, #16]
      break;
 8005c5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c5e:	693b      	ldr	r3, [r7, #16]
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	371c      	adds	r7, #28
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bc80      	pop	{r7}
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	40021000 	.word	0x40021000
 8005c70:	007a1200 	.word	0x007a1200
 8005c74:	080089dc 	.word	0x080089dc
 8005c78:	080089ec 	.word	0x080089ec
 8005c7c:	003d0900 	.word	0x003d0900

08005c80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c80:	b480      	push	{r7}
 8005c82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c84:	4b02      	ldr	r3, [pc, #8]	@ (8005c90 <HAL_RCC_GetHCLKFreq+0x10>)
 8005c86:	681b      	ldr	r3, [r3, #0]
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bc80      	pop	{r7}
 8005c8e:	4770      	bx	lr
 8005c90:	20000064 	.word	0x20000064

08005c94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005c98:	f7ff fff2 	bl	8005c80 <HAL_RCC_GetHCLKFreq>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	4b05      	ldr	r3, [pc, #20]	@ (8005cb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	0a1b      	lsrs	r3, r3, #8
 8005ca4:	f003 0307 	and.w	r3, r3, #7
 8005ca8:	4903      	ldr	r1, [pc, #12]	@ (8005cb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005caa:	5ccb      	ldrb	r3, [r1, r3]
 8005cac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	40021000 	.word	0x40021000
 8005cb8:	080089d4 	.word	0x080089d4

08005cbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005cc0:	f7ff ffde 	bl	8005c80 <HAL_RCC_GetHCLKFreq>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	4b05      	ldr	r3, [pc, #20]	@ (8005cdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	0adb      	lsrs	r3, r3, #11
 8005ccc:	f003 0307 	and.w	r3, r3, #7
 8005cd0:	4903      	ldr	r1, [pc, #12]	@ (8005ce0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005cd2:	5ccb      	ldrb	r3, [r1, r3]
 8005cd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	40021000 	.word	0x40021000
 8005ce0:	080089d4 	.word	0x080089d4

08005ce4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005cec:	4b0a      	ldr	r3, [pc, #40]	@ (8005d18 <RCC_Delay+0x34>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a0a      	ldr	r2, [pc, #40]	@ (8005d1c <RCC_Delay+0x38>)
 8005cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf6:	0a5b      	lsrs	r3, r3, #9
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	fb02 f303 	mul.w	r3, r2, r3
 8005cfe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005d00:	bf00      	nop
  }
  while (Delay --);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	1e5a      	subs	r2, r3, #1
 8005d06:	60fa      	str	r2, [r7, #12]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d1f9      	bne.n	8005d00 <RCC_Delay+0x1c>
}
 8005d0c:	bf00      	nop
 8005d0e:	bf00      	nop
 8005d10:	3714      	adds	r7, #20
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bc80      	pop	{r7}
 8005d16:	4770      	bx	lr
 8005d18:	20000064 	.word	0x20000064
 8005d1c:	10624dd3 	.word	0x10624dd3

08005d20 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	613b      	str	r3, [r7, #16]
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 0301 	and.w	r3, r3, #1
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d07d      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d40:	4b4f      	ldr	r3, [pc, #316]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d42:	69db      	ldr	r3, [r3, #28]
 8005d44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d10d      	bne.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d4c:	4b4c      	ldr	r3, [pc, #304]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d4e:	69db      	ldr	r3, [r3, #28]
 8005d50:	4a4b      	ldr	r2, [pc, #300]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d56:	61d3      	str	r3, [r2, #28]
 8005d58:	4b49      	ldr	r3, [pc, #292]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d5a:	69db      	ldr	r3, [r3, #28]
 8005d5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d60:	60bb      	str	r3, [r7, #8]
 8005d62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d64:	2301      	movs	r3, #1
 8005d66:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d68:	4b46      	ldr	r3, [pc, #280]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d118      	bne.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d74:	4b43      	ldr	r3, [pc, #268]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a42      	ldr	r2, [pc, #264]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d80:	f7fd fba4 	bl	80034cc <HAL_GetTick>
 8005d84:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d86:	e008      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d88:	f7fd fba0 	bl	80034cc <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	2b64      	cmp	r3, #100	@ 0x64
 8005d94:	d901      	bls.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	e06d      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d9a:	4b3a      	ldr	r3, [pc, #232]	@ (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d0f0      	beq.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005da6:	4b36      	ldr	r3, [pc, #216]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005da8:	6a1b      	ldr	r3, [r3, #32]
 8005daa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d02e      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d027      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005dc4:	4b2e      	ldr	r3, [pc, #184]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dc6:	6a1b      	ldr	r3, [r3, #32]
 8005dc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dcc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005dce:	4b2e      	ldr	r3, [pc, #184]	@ (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005dd4:	4b2c      	ldr	r3, [pc, #176]	@ (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005dda:	4a29      	ldr	r2, [pc, #164]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d014      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dea:	f7fd fb6f 	bl	80034cc <HAL_GetTick>
 8005dee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005df0:	e00a      	b.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005df2:	f7fd fb6b 	bl	80034cc <HAL_GetTick>
 8005df6:	4602      	mov	r2, r0
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d901      	bls.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e036      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e08:	4b1d      	ldr	r3, [pc, #116]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e0a:	6a1b      	ldr	r3, [r3, #32]
 8005e0c:	f003 0302 	and.w	r3, r3, #2
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d0ee      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e14:	4b1a      	ldr	r3, [pc, #104]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e16:	6a1b      	ldr	r3, [r3, #32]
 8005e18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	4917      	ldr	r1, [pc, #92]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e22:	4313      	orrs	r3, r2
 8005e24:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005e26:	7dfb      	ldrb	r3, [r7, #23]
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d105      	bne.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e2c:	4b14      	ldr	r3, [pc, #80]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e2e:	69db      	ldr	r3, [r3, #28]
 8005e30:	4a13      	ldr	r2, [pc, #76]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e36:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0302 	and.w	r3, r3, #2
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d008      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e44:	4b0e      	ldr	r3, [pc, #56]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	490b      	ldr	r1, [pc, #44]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e52:	4313      	orrs	r3, r2
 8005e54:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0310 	and.w	r3, r3, #16
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d008      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e62:	4b07      	ldr	r3, [pc, #28]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	4904      	ldr	r1, [pc, #16]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e70:	4313      	orrs	r3, r2
 8005e72:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3718      	adds	r7, #24
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	40021000 	.word	0x40021000
 8005e84:	40007000 	.word	0x40007000
 8005e88:	42420440 	.word	0x42420440

08005e8c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b088      	sub	sp, #32
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005e94:	2300      	movs	r3, #0
 8005e96:	617b      	str	r3, [r7, #20]
 8005e98:	2300      	movs	r3, #0
 8005e9a:	61fb      	str	r3, [r7, #28]
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	60fb      	str	r3, [r7, #12]
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2b10      	cmp	r3, #16
 8005eac:	d00a      	beq.n	8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2b10      	cmp	r3, #16
 8005eb2:	f200 808a 	bhi.w	8005fca <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d045      	beq.n	8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d075      	beq.n	8005fae <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005ec2:	e082      	b.n	8005fca <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8005ec4:	4b46      	ldr	r3, [pc, #280]	@ (8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005eca:	4b45      	ldr	r3, [pc, #276]	@ (8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d07b      	beq.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	0c9b      	lsrs	r3, r3, #18
 8005eda:	f003 030f 	and.w	r3, r3, #15
 8005ede:	4a41      	ldr	r2, [pc, #260]	@ (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8005ee0:	5cd3      	ldrb	r3, [r2, r3]
 8005ee2:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d015      	beq.n	8005f1a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005eee:	4b3c      	ldr	r3, [pc, #240]	@ (8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	0c5b      	lsrs	r3, r3, #17
 8005ef4:	f003 0301 	and.w	r3, r3, #1
 8005ef8:	4a3b      	ldr	r2, [pc, #236]	@ (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8005efa:	5cd3      	ldrb	r3, [r2, r3]
 8005efc:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d00d      	beq.n	8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005f08:	4a38      	ldr	r2, [pc, #224]	@ (8005fec <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	fb02 f303 	mul.w	r3, r2, r3
 8005f16:	61fb      	str	r3, [r7, #28]
 8005f18:	e004      	b.n	8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	4a34      	ldr	r2, [pc, #208]	@ (8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005f1e:	fb02 f303 	mul.w	r3, r2, r3
 8005f22:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005f24:	4b2e      	ldr	r3, [pc, #184]	@ (8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f30:	d102      	bne.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	61bb      	str	r3, [r7, #24]
      break;
 8005f36:	e04a      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	005b      	lsls	r3, r3, #1
 8005f3c:	4a2d      	ldr	r2, [pc, #180]	@ (8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f42:	085b      	lsrs	r3, r3, #1
 8005f44:	61bb      	str	r3, [r7, #24]
      break;
 8005f46:	e042      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8005f48:	4b25      	ldr	r3, [pc, #148]	@ (8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005f4a:	6a1b      	ldr	r3, [r3, #32]
 8005f4c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f58:	d108      	bne.n	8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f003 0302 	and.w	r3, r3, #2
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d003      	beq.n	8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8005f64:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f68:	61bb      	str	r3, [r7, #24]
 8005f6a:	e01f      	b.n	8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f76:	d109      	bne.n	8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005f78:	4b19      	ldr	r3, [pc, #100]	@ (8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f7c:	f003 0302 	and.w	r3, r3, #2
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d003      	beq.n	8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8005f84:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8005f88:	61bb      	str	r3, [r7, #24]
 8005f8a:	e00f      	b.n	8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f96:	d11c      	bne.n	8005fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005f98:	4b11      	ldr	r3, [pc, #68]	@ (8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d016      	beq.n	8005fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8005fa4:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8005fa8:	61bb      	str	r3, [r7, #24]
      break;
 8005faa:	e012      	b.n	8005fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005fac:	e011      	b.n	8005fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005fae:	f7ff fe85 	bl	8005cbc <HAL_RCC_GetPCLK2Freq>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	0b9b      	lsrs	r3, r3, #14
 8005fba:	f003 0303 	and.w	r3, r3, #3
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	005b      	lsls	r3, r3, #1
 8005fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fc6:	61bb      	str	r3, [r7, #24]
      break;
 8005fc8:	e004      	b.n	8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005fca:	bf00      	nop
 8005fcc:	e002      	b.n	8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005fce:	bf00      	nop
 8005fd0:	e000      	b.n	8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005fd2:	bf00      	nop
    }
  }
  return (frequency);
 8005fd4:	69bb      	ldr	r3, [r7, #24]
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3720      	adds	r7, #32
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	40021000 	.word	0x40021000
 8005fe4:	080089f0 	.word	0x080089f0
 8005fe8:	08008a00 	.word	0x08008a00
 8005fec:	007a1200 	.word	0x007a1200
 8005ff0:	003d0900 	.word	0x003d0900
 8005ff4:	aaaaaaab 	.word	0xaaaaaaab

08005ff8 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 0302 	and.w	r3, r3, #2
 800600a:	2b00      	cmp	r3, #0
 800600c:	d011      	beq.n	8006032 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	f003 0302 	and.w	r3, r3, #2
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00a      	beq.n	8006032 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 f815 	bl	800604c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	685a      	ldr	r2, [r3, #4]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f022 0202 	bic.w	r2, r2, #2
 8006030:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006032:	4b05      	ldr	r3, [pc, #20]	@ (8006048 <HAL_RTC_AlarmIRQHandler+0x50>)
 8006034:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006038:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2201      	movs	r2, #1
 800603e:	745a      	strb	r2, [r3, #17]
}
 8006040:	bf00      	nop
 8006042:	3708      	adds	r7, #8
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	40010400 	.word	0x40010400

0800604c <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8006054:	bf00      	nop
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	bc80      	pop	{r7}
 800605c:	4770      	bx	lr

0800605e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800605e:	b580      	push	{r7, lr}
 8006060:	b082      	sub	sp, #8
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d101      	bne.n	8006070 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e076      	b.n	800615e <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006074:	2b00      	cmp	r3, #0
 8006076:	d108      	bne.n	800608a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006080:	d009      	beq.n	8006096 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	61da      	str	r2, [r3, #28]
 8006088:	e005      	b.n	8006096 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d106      	bne.n	80060b6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f7fc ffa1 	bl	8002ff8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2202      	movs	r2, #2
 80060ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060cc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80060de:	431a      	orrs	r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80060e8:	431a      	orrs	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	f003 0302 	and.w	r3, r3, #2
 80060f2:	431a      	orrs	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	695b      	ldr	r3, [r3, #20]
 80060f8:	f003 0301 	and.w	r3, r3, #1
 80060fc:	431a      	orrs	r2, r3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006106:	431a      	orrs	r2, r3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	69db      	ldr	r3, [r3, #28]
 800610c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006110:	431a      	orrs	r2, r3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a1b      	ldr	r3, [r3, #32]
 8006116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800611a:	ea42 0103 	orr.w	r1, r2, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006122:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	430a      	orrs	r2, r1
 800612c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	0c1a      	lsrs	r2, r3, #16
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f002 0204 	and.w	r2, r2, #4
 800613c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	69da      	ldr	r2, [r3, #28]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800614c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	3708      	adds	r7, #8
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}

08006166 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b088      	sub	sp, #32
 800616a:	af00      	add	r7, sp, #0
 800616c:	60f8      	str	r0, [r7, #12]
 800616e:	60b9      	str	r1, [r7, #8]
 8006170:	603b      	str	r3, [r7, #0]
 8006172:	4613      	mov	r3, r2
 8006174:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006176:	f7fd f9a9 	bl	80034cc <HAL_GetTick>
 800617a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800617c:	88fb      	ldrh	r3, [r7, #6]
 800617e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006186:	b2db      	uxtb	r3, r3
 8006188:	2b01      	cmp	r3, #1
 800618a:	d001      	beq.n	8006190 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800618c:	2302      	movs	r3, #2
 800618e:	e12a      	b.n	80063e6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d002      	beq.n	800619c <HAL_SPI_Transmit+0x36>
 8006196:	88fb      	ldrh	r3, [r7, #6]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d101      	bne.n	80061a0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	e122      	b.n	80063e6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d101      	bne.n	80061ae <HAL_SPI_Transmit+0x48>
 80061aa:	2302      	movs	r3, #2
 80061ac:	e11b      	b.n	80063e6 <HAL_SPI_Transmit+0x280>
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2201      	movs	r2, #1
 80061b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2203      	movs	r2, #3
 80061ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2200      	movs	r2, #0
 80061c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	68ba      	ldr	r2, [r7, #8]
 80061c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	88fa      	ldrh	r2, [r7, #6]
 80061ce:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	88fa      	ldrh	r2, [r7, #6]
 80061d4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2200      	movs	r2, #0
 80061e0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2200      	movs	r2, #0
 80061ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061fc:	d10f      	bne.n	800621e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800620c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800621c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006228:	2b40      	cmp	r3, #64	@ 0x40
 800622a:	d007      	beq.n	800623c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800623a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006244:	d152      	bne.n	80062ec <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d002      	beq.n	8006254 <HAL_SPI_Transmit+0xee>
 800624e:	8b7b      	ldrh	r3, [r7, #26]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d145      	bne.n	80062e0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006258:	881a      	ldrh	r2, [r3, #0]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006264:	1c9a      	adds	r2, r3, #2
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800626e:	b29b      	uxth	r3, r3
 8006270:	3b01      	subs	r3, #1
 8006272:	b29a      	uxth	r2, r3
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006278:	e032      	b.n	80062e0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	f003 0302 	and.w	r3, r3, #2
 8006284:	2b02      	cmp	r3, #2
 8006286:	d112      	bne.n	80062ae <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800628c:	881a      	ldrh	r2, [r3, #0]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006298:	1c9a      	adds	r2, r3, #2
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	3b01      	subs	r3, #1
 80062a6:	b29a      	uxth	r2, r3
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	86da      	strh	r2, [r3, #54]	@ 0x36
 80062ac:	e018      	b.n	80062e0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062ae:	f7fd f90d 	bl	80034cc <HAL_GetTick>
 80062b2:	4602      	mov	r2, r0
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	1ad3      	subs	r3, r2, r3
 80062b8:	683a      	ldr	r2, [r7, #0]
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d803      	bhi.n	80062c6 <HAL_SPI_Transmit+0x160>
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c4:	d102      	bne.n	80062cc <HAL_SPI_Transmit+0x166>
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d109      	bne.n	80062e0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80062dc:	2303      	movs	r3, #3
 80062de:	e082      	b.n	80063e6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d1c7      	bne.n	800627a <HAL_SPI_Transmit+0x114>
 80062ea:	e053      	b.n	8006394 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d002      	beq.n	80062fa <HAL_SPI_Transmit+0x194>
 80062f4:	8b7b      	ldrh	r3, [r7, #26]
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d147      	bne.n	800638a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	330c      	adds	r3, #12
 8006304:	7812      	ldrb	r2, [r2, #0]
 8006306:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800630c:	1c5a      	adds	r2, r3, #1
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006316:	b29b      	uxth	r3, r3
 8006318:	3b01      	subs	r3, #1
 800631a:	b29a      	uxth	r2, r3
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006320:	e033      	b.n	800638a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	f003 0302 	and.w	r3, r3, #2
 800632c:	2b02      	cmp	r3, #2
 800632e:	d113      	bne.n	8006358 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	330c      	adds	r3, #12
 800633a:	7812      	ldrb	r2, [r2, #0]
 800633c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006342:	1c5a      	adds	r2, r3, #1
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800634c:	b29b      	uxth	r3, r3
 800634e:	3b01      	subs	r3, #1
 8006350:	b29a      	uxth	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006356:	e018      	b.n	800638a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006358:	f7fd f8b8 	bl	80034cc <HAL_GetTick>
 800635c:	4602      	mov	r2, r0
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	683a      	ldr	r2, [r7, #0]
 8006364:	429a      	cmp	r2, r3
 8006366:	d803      	bhi.n	8006370 <HAL_SPI_Transmit+0x20a>
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800636e:	d102      	bne.n	8006376 <HAL_SPI_Transmit+0x210>
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d109      	bne.n	800638a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2201      	movs	r2, #1
 800637a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	e02d      	b.n	80063e6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800638e:	b29b      	uxth	r3, r3
 8006390:	2b00      	cmp	r3, #0
 8006392:	d1c6      	bne.n	8006322 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006394:	69fa      	ldr	r2, [r7, #28]
 8006396:	6839      	ldr	r1, [r7, #0]
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f000 fbc5 	bl	8006b28 <SPI_EndRxTxTransaction>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d002      	beq.n	80063aa <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2220      	movs	r2, #32
 80063a8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d10a      	bne.n	80063c8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80063b2:	2300      	movs	r3, #0
 80063b4:	617b      	str	r3, [r7, #20]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	617b      	str	r3, [r7, #20]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	617b      	str	r3, [r7, #20]
 80063c6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d001      	beq.n	80063e4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e000      	b.n	80063e6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80063e4:	2300      	movs	r3, #0
  }
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3720      	adds	r7, #32
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}

080063ee <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063ee:	b580      	push	{r7, lr}
 80063f0:	b088      	sub	sp, #32
 80063f2:	af02      	add	r7, sp, #8
 80063f4:	60f8      	str	r0, [r7, #12]
 80063f6:	60b9      	str	r1, [r7, #8]
 80063f8:	603b      	str	r3, [r7, #0]
 80063fa:	4613      	mov	r3, r2
 80063fc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006404:	b2db      	uxtb	r3, r3
 8006406:	2b01      	cmp	r3, #1
 8006408:	d001      	beq.n	800640e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800640a:	2302      	movs	r3, #2
 800640c:	e104      	b.n	8006618 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006416:	d112      	bne.n	800643e <HAL_SPI_Receive+0x50>
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d10e      	bne.n	800643e <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2204      	movs	r2, #4
 8006424:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006428:	88fa      	ldrh	r2, [r7, #6]
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	9300      	str	r3, [sp, #0]
 800642e:	4613      	mov	r3, r2
 8006430:	68ba      	ldr	r2, [r7, #8]
 8006432:	68b9      	ldr	r1, [r7, #8]
 8006434:	68f8      	ldr	r0, [r7, #12]
 8006436:	f000 f8f3 	bl	8006620 <HAL_SPI_TransmitReceive>
 800643a:	4603      	mov	r3, r0
 800643c:	e0ec      	b.n	8006618 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800643e:	f7fd f845 	bl	80034cc <HAL_GetTick>
 8006442:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d002      	beq.n	8006450 <HAL_SPI_Receive+0x62>
 800644a:	88fb      	ldrh	r3, [r7, #6]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d101      	bne.n	8006454 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e0e1      	b.n	8006618 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800645a:	2b01      	cmp	r3, #1
 800645c:	d101      	bne.n	8006462 <HAL_SPI_Receive+0x74>
 800645e:	2302      	movs	r3, #2
 8006460:	e0da      	b.n	8006618 <HAL_SPI_Receive+0x22a>
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2201      	movs	r2, #1
 8006466:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2204      	movs	r2, #4
 800646e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	68ba      	ldr	r2, [r7, #8]
 800647c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	88fa      	ldrh	r2, [r7, #6]
 8006482:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	88fa      	ldrh	r2, [r7, #6]
 8006488:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2200      	movs	r2, #0
 800648e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2200      	movs	r2, #0
 8006494:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2200      	movs	r2, #0
 80064a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2200      	movs	r2, #0
 80064a6:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064b0:	d10f      	bne.n	80064d2 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80064c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80064d0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064dc:	2b40      	cmp	r3, #64	@ 0x40
 80064de:	d007      	beq.n	80064f0 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80064ee:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d170      	bne.n	80065da <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80064f8:	e035      	b.n	8006566 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	f003 0301 	and.w	r3, r3, #1
 8006504:	2b01      	cmp	r3, #1
 8006506:	d115      	bne.n	8006534 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f103 020c 	add.w	r2, r3, #12
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006514:	7812      	ldrb	r2, [r2, #0]
 8006516:	b2d2      	uxtb	r2, r2
 8006518:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800651e:	1c5a      	adds	r2, r3, #1
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006528:	b29b      	uxth	r3, r3
 800652a:	3b01      	subs	r3, #1
 800652c:	b29a      	uxth	r2, r3
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006532:	e018      	b.n	8006566 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006534:	f7fc ffca 	bl	80034cc <HAL_GetTick>
 8006538:	4602      	mov	r2, r0
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	683a      	ldr	r2, [r7, #0]
 8006540:	429a      	cmp	r2, r3
 8006542:	d803      	bhi.n	800654c <HAL_SPI_Receive+0x15e>
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800654a:	d102      	bne.n	8006552 <HAL_SPI_Receive+0x164>
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d109      	bne.n	8006566 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2201      	movs	r2, #1
 8006556:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	e058      	b.n	8006618 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800656a:	b29b      	uxth	r3, r3
 800656c:	2b00      	cmp	r3, #0
 800656e:	d1c4      	bne.n	80064fa <HAL_SPI_Receive+0x10c>
 8006570:	e038      	b.n	80065e4 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	f003 0301 	and.w	r3, r3, #1
 800657c:	2b01      	cmp	r3, #1
 800657e:	d113      	bne.n	80065a8 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68da      	ldr	r2, [r3, #12]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800658a:	b292      	uxth	r2, r2
 800658c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006592:	1c9a      	adds	r2, r3, #2
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800659c:	b29b      	uxth	r3, r3
 800659e:	3b01      	subs	r3, #1
 80065a0:	b29a      	uxth	r2, r3
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80065a6:	e018      	b.n	80065da <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065a8:	f7fc ff90 	bl	80034cc <HAL_GetTick>
 80065ac:	4602      	mov	r2, r0
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	683a      	ldr	r2, [r7, #0]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d803      	bhi.n	80065c0 <HAL_SPI_Receive+0x1d2>
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065be:	d102      	bne.n	80065c6 <HAL_SPI_Receive+0x1d8>
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d109      	bne.n	80065da <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2201      	movs	r2, #1
 80065ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e01e      	b.n	8006618 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065de:	b29b      	uxth	r3, r3
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d1c6      	bne.n	8006572 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065e4:	697a      	ldr	r2, [r7, #20]
 80065e6:	6839      	ldr	r1, [r7, #0]
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f000 fa4b 	bl	8006a84 <SPI_EndRxTransaction>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d002      	beq.n	80065fa <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2220      	movs	r2, #32
 80065f8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2201      	movs	r2, #1
 80065fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800660e:	2b00      	cmp	r3, #0
 8006610:	d001      	beq.n	8006616 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e000      	b.n	8006618 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8006616:	2300      	movs	r3, #0
  }
}
 8006618:	4618      	mov	r0, r3
 800661a:	3718      	adds	r7, #24
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b08a      	sub	sp, #40	@ 0x28
 8006624:	af00      	add	r7, sp, #0
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	607a      	str	r2, [r7, #4]
 800662c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800662e:	2301      	movs	r3, #1
 8006630:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006632:	f7fc ff4b 	bl	80034cc <HAL_GetTick>
 8006636:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800663e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006646:	887b      	ldrh	r3, [r7, #2]
 8006648:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800664a:	7ffb      	ldrb	r3, [r7, #31]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d00c      	beq.n	800666a <HAL_SPI_TransmitReceive+0x4a>
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006656:	d106      	bne.n	8006666 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d102      	bne.n	8006666 <HAL_SPI_TransmitReceive+0x46>
 8006660:	7ffb      	ldrb	r3, [r7, #31]
 8006662:	2b04      	cmp	r3, #4
 8006664:	d001      	beq.n	800666a <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006666:	2302      	movs	r3, #2
 8006668:	e17f      	b.n	800696a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d005      	beq.n	800667c <HAL_SPI_TransmitReceive+0x5c>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d002      	beq.n	800667c <HAL_SPI_TransmitReceive+0x5c>
 8006676:	887b      	ldrh	r3, [r7, #2]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d101      	bne.n	8006680 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e174      	b.n	800696a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006686:	2b01      	cmp	r3, #1
 8006688:	d101      	bne.n	800668e <HAL_SPI_TransmitReceive+0x6e>
 800668a:	2302      	movs	r3, #2
 800668c:	e16d      	b.n	800696a <HAL_SPI_TransmitReceive+0x34a>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2201      	movs	r2, #1
 8006692:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800669c:	b2db      	uxtb	r3, r3
 800669e:	2b04      	cmp	r3, #4
 80066a0:	d003      	beq.n	80066aa <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2205      	movs	r2, #5
 80066a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	887a      	ldrh	r2, [r7, #2]
 80066ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	887a      	ldrh	r2, [r7, #2]
 80066c0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	68ba      	ldr	r2, [r7, #8]
 80066c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	887a      	ldrh	r2, [r7, #2]
 80066cc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	887a      	ldrh	r2, [r7, #2]
 80066d2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2200      	movs	r2, #0
 80066d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066ea:	2b40      	cmp	r3, #64	@ 0x40
 80066ec:	d007      	beq.n	80066fe <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80066fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006706:	d17e      	bne.n	8006806 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d002      	beq.n	8006716 <HAL_SPI_TransmitReceive+0xf6>
 8006710:	8afb      	ldrh	r3, [r7, #22]
 8006712:	2b01      	cmp	r3, #1
 8006714:	d16c      	bne.n	80067f0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800671a:	881a      	ldrh	r2, [r3, #0]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006726:	1c9a      	adds	r2, r3, #2
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006730:	b29b      	uxth	r3, r3
 8006732:	3b01      	subs	r3, #1
 8006734:	b29a      	uxth	r2, r3
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800673a:	e059      	b.n	80067f0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	f003 0302 	and.w	r3, r3, #2
 8006746:	2b02      	cmp	r3, #2
 8006748:	d11b      	bne.n	8006782 <HAL_SPI_TransmitReceive+0x162>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800674e:	b29b      	uxth	r3, r3
 8006750:	2b00      	cmp	r3, #0
 8006752:	d016      	beq.n	8006782 <HAL_SPI_TransmitReceive+0x162>
 8006754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006756:	2b01      	cmp	r3, #1
 8006758:	d113      	bne.n	8006782 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800675e:	881a      	ldrh	r2, [r3, #0]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800676a:	1c9a      	adds	r2, r3, #2
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006774:	b29b      	uxth	r3, r3
 8006776:	3b01      	subs	r3, #1
 8006778:	b29a      	uxth	r2, r3
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800677e:	2300      	movs	r3, #0
 8006780:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	f003 0301 	and.w	r3, r3, #1
 800678c:	2b01      	cmp	r3, #1
 800678e:	d119      	bne.n	80067c4 <HAL_SPI_TransmitReceive+0x1a4>
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006794:	b29b      	uxth	r3, r3
 8006796:	2b00      	cmp	r3, #0
 8006798:	d014      	beq.n	80067c4 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68da      	ldr	r2, [r3, #12]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067a4:	b292      	uxth	r2, r2
 80067a6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067ac:	1c9a      	adds	r2, r3, #2
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	3b01      	subs	r3, #1
 80067ba:	b29a      	uxth	r2, r3
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80067c0:	2301      	movs	r3, #1
 80067c2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80067c4:	f7fc fe82 	bl	80034cc <HAL_GetTick>
 80067c8:	4602      	mov	r2, r0
 80067ca:	6a3b      	ldr	r3, [r7, #32]
 80067cc:	1ad3      	subs	r3, r2, r3
 80067ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d80d      	bhi.n	80067f0 <HAL_SPI_TransmitReceive+0x1d0>
 80067d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067da:	d009      	beq.n	80067f0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80067ec:	2303      	movs	r3, #3
 80067ee:	e0bc      	b.n	800696a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d1a0      	bne.n	800673c <HAL_SPI_TransmitReceive+0x11c>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80067fe:	b29b      	uxth	r3, r3
 8006800:	2b00      	cmp	r3, #0
 8006802:	d19b      	bne.n	800673c <HAL_SPI_TransmitReceive+0x11c>
 8006804:	e082      	b.n	800690c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d002      	beq.n	8006814 <HAL_SPI_TransmitReceive+0x1f4>
 800680e:	8afb      	ldrh	r3, [r7, #22]
 8006810:	2b01      	cmp	r3, #1
 8006812:	d171      	bne.n	80068f8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	330c      	adds	r3, #12
 800681e:	7812      	ldrb	r2, [r2, #0]
 8006820:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006826:	1c5a      	adds	r2, r3, #1
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006830:	b29b      	uxth	r3, r3
 8006832:	3b01      	subs	r3, #1
 8006834:	b29a      	uxth	r2, r3
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800683a:	e05d      	b.n	80068f8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	f003 0302 	and.w	r3, r3, #2
 8006846:	2b02      	cmp	r3, #2
 8006848:	d11c      	bne.n	8006884 <HAL_SPI_TransmitReceive+0x264>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800684e:	b29b      	uxth	r3, r3
 8006850:	2b00      	cmp	r3, #0
 8006852:	d017      	beq.n	8006884 <HAL_SPI_TransmitReceive+0x264>
 8006854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006856:	2b01      	cmp	r3, #1
 8006858:	d114      	bne.n	8006884 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	330c      	adds	r3, #12
 8006864:	7812      	ldrb	r2, [r2, #0]
 8006866:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800686c:	1c5a      	adds	r2, r3, #1
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006876:	b29b      	uxth	r3, r3
 8006878:	3b01      	subs	r3, #1
 800687a:	b29a      	uxth	r2, r3
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006880:	2300      	movs	r3, #0
 8006882:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	f003 0301 	and.w	r3, r3, #1
 800688e:	2b01      	cmp	r3, #1
 8006890:	d119      	bne.n	80068c6 <HAL_SPI_TransmitReceive+0x2a6>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006896:	b29b      	uxth	r3, r3
 8006898:	2b00      	cmp	r3, #0
 800689a:	d014      	beq.n	80068c6 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68da      	ldr	r2, [r3, #12]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068a6:	b2d2      	uxtb	r2, r2
 80068a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ae:	1c5a      	adds	r2, r3, #1
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	3b01      	subs	r3, #1
 80068bc:	b29a      	uxth	r2, r3
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80068c2:	2301      	movs	r3, #1
 80068c4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80068c6:	f7fc fe01 	bl	80034cc <HAL_GetTick>
 80068ca:	4602      	mov	r2, r0
 80068cc:	6a3b      	ldr	r3, [r7, #32]
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d803      	bhi.n	80068de <HAL_SPI_TransmitReceive+0x2be>
 80068d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068dc:	d102      	bne.n	80068e4 <HAL_SPI_TransmitReceive+0x2c4>
 80068de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d109      	bne.n	80068f8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e038      	b.n	800696a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d19c      	bne.n	800683c <HAL_SPI_TransmitReceive+0x21c>
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006906:	b29b      	uxth	r3, r3
 8006908:	2b00      	cmp	r3, #0
 800690a:	d197      	bne.n	800683c <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800690c:	6a3a      	ldr	r2, [r7, #32]
 800690e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006910:	68f8      	ldr	r0, [r7, #12]
 8006912:	f000 f909 	bl	8006b28 <SPI_EndRxTxTransaction>
 8006916:	4603      	mov	r3, r0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d008      	beq.n	800692e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2220      	movs	r2, #32
 8006920:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2200      	movs	r2, #0
 8006926:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	e01d      	b.n	800696a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d10a      	bne.n	800694c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006936:	2300      	movs	r3, #0
 8006938:	613b      	str	r3, [r7, #16]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	613b      	str	r3, [r7, #16]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	613b      	str	r3, [r7, #16]
 800694a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006960:	2b00      	cmp	r3, #0
 8006962:	d001      	beq.n	8006968 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	e000      	b.n	800696a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006968:	2300      	movs	r3, #0
  }
}
 800696a:	4618      	mov	r0, r3
 800696c:	3728      	adds	r7, #40	@ 0x28
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
	...

08006974 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b088      	sub	sp, #32
 8006978:	af00      	add	r7, sp, #0
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	603b      	str	r3, [r7, #0]
 8006980:	4613      	mov	r3, r2
 8006982:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006984:	f7fc fda2 	bl	80034cc <HAL_GetTick>
 8006988:	4602      	mov	r2, r0
 800698a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800698c:	1a9b      	subs	r3, r3, r2
 800698e:	683a      	ldr	r2, [r7, #0]
 8006990:	4413      	add	r3, r2
 8006992:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006994:	f7fc fd9a 	bl	80034cc <HAL_GetTick>
 8006998:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800699a:	4b39      	ldr	r3, [pc, #228]	@ (8006a80 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	015b      	lsls	r3, r3, #5
 80069a0:	0d1b      	lsrs	r3, r3, #20
 80069a2:	69fa      	ldr	r2, [r7, #28]
 80069a4:	fb02 f303 	mul.w	r3, r2, r3
 80069a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069aa:	e054      	b.n	8006a56 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069b2:	d050      	beq.n	8006a56 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80069b4:	f7fc fd8a 	bl	80034cc <HAL_GetTick>
 80069b8:	4602      	mov	r2, r0
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	1ad3      	subs	r3, r2, r3
 80069be:	69fa      	ldr	r2, [r7, #28]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d902      	bls.n	80069ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d13d      	bne.n	8006a46 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	685a      	ldr	r2, [r3, #4]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80069d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80069e2:	d111      	bne.n	8006a08 <SPI_WaitFlagStateUntilTimeout+0x94>
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069ec:	d004      	beq.n	80069f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069f6:	d107      	bne.n	8006a08 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a10:	d10f      	bne.n	8006a32 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006a20:	601a      	str	r2, [r3, #0]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006a30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2201      	movs	r2, #1
 8006a36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e017      	b.n	8006a76 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d101      	bne.n	8006a50 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	3b01      	subs	r3, #1
 8006a54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	689a      	ldr	r2, [r3, #8]
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	4013      	ands	r3, r2
 8006a60:	68ba      	ldr	r2, [r7, #8]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	bf0c      	ite	eq
 8006a66:	2301      	moveq	r3, #1
 8006a68:	2300      	movne	r3, #0
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	79fb      	ldrb	r3, [r7, #7]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d19b      	bne.n	80069ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3720      	adds	r7, #32
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	20000064 	.word	0x20000064

08006a84 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b086      	sub	sp, #24
 8006a88:	af02      	add	r7, sp, #8
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a98:	d111      	bne.n	8006abe <SPI_EndRxTransaction+0x3a>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006aa2:	d004      	beq.n	8006aae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006aac:	d107      	bne.n	8006abe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006abc:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ac6:	d117      	bne.n	8006af8 <SPI_EndRxTransaction+0x74>
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ad0:	d112      	bne.n	8006af8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	9300      	str	r3, [sp, #0]
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	2101      	movs	r1, #1
 8006adc:	68f8      	ldr	r0, [r7, #12]
 8006ade:	f7ff ff49 	bl	8006974 <SPI_WaitFlagStateUntilTimeout>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d01a      	beq.n	8006b1e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006aec:	f043 0220 	orr.w	r2, r3, #32
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006af4:	2303      	movs	r3, #3
 8006af6:	e013      	b.n	8006b20 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	9300      	str	r3, [sp, #0]
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	2200      	movs	r2, #0
 8006b00:	2180      	movs	r1, #128	@ 0x80
 8006b02:	68f8      	ldr	r0, [r7, #12]
 8006b04:	f7ff ff36 	bl	8006974 <SPI_WaitFlagStateUntilTimeout>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d007      	beq.n	8006b1e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b12:	f043 0220 	orr.w	r2, r3, #32
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	e000      	b.n	8006b20 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8006b1e:	2300      	movs	r3, #0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b086      	sub	sp, #24
 8006b2c:	af02      	add	r7, sp, #8
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	9300      	str	r3, [sp, #0]
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	2102      	movs	r1, #2
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f7ff ff18 	bl	8006974 <SPI_WaitFlagStateUntilTimeout>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d007      	beq.n	8006b5a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b4e:	f043 0220 	orr.w	r2, r3, #32
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006b56:	2303      	movs	r3, #3
 8006b58:	e013      	b.n	8006b82 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	9300      	str	r3, [sp, #0]
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	2200      	movs	r2, #0
 8006b62:	2180      	movs	r1, #128	@ 0x80
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	f7ff ff05 	bl	8006974 <SPI_WaitFlagStateUntilTimeout>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d007      	beq.n	8006b80 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b74:	f043 0220 	orr.w	r2, r3, #32
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	e000      	b.n	8006b82 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3710      	adds	r7, #16
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b082      	sub	sp, #8
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d101      	bne.n	8006b9c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e042      	b.n	8006c22 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d106      	bne.n	8006bb6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f7fc fa7b 	bl	80030ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2224      	movs	r2, #36	@ 0x24
 8006bba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	68da      	ldr	r2, [r3, #12]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006bcc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 f9d0 	bl	8006f74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	691a      	ldr	r2, [r3, #16]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006be2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	695a      	ldr	r2, [r3, #20]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006bf2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68da      	ldr	r2, [r3, #12]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006c02:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2220      	movs	r2, #32
 8006c0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2220      	movs	r2, #32
 8006c16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3708      	adds	r7, #8
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}

08006c2a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c2a:	b580      	push	{r7, lr}
 8006c2c:	b08a      	sub	sp, #40	@ 0x28
 8006c2e:	af02      	add	r7, sp, #8
 8006c30:	60f8      	str	r0, [r7, #12]
 8006c32:	60b9      	str	r1, [r7, #8]
 8006c34:	603b      	str	r3, [r7, #0]
 8006c36:	4613      	mov	r3, r2
 8006c38:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	2b20      	cmp	r3, #32
 8006c48:	d175      	bne.n	8006d36 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d002      	beq.n	8006c56 <HAL_UART_Transmit+0x2c>
 8006c50:	88fb      	ldrh	r3, [r7, #6]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d101      	bne.n	8006c5a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e06e      	b.n	8006d38 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2221      	movs	r2, #33	@ 0x21
 8006c64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c68:	f7fc fc30 	bl	80034cc <HAL_GetTick>
 8006c6c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	88fa      	ldrh	r2, [r7, #6]
 8006c72:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	88fa      	ldrh	r2, [r7, #6]
 8006c78:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c82:	d108      	bne.n	8006c96 <HAL_UART_Transmit+0x6c>
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d104      	bne.n	8006c96 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	61bb      	str	r3, [r7, #24]
 8006c94:	e003      	b.n	8006c9e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c9e:	e02e      	b.n	8006cfe <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	9300      	str	r3, [sp, #0]
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	2180      	movs	r1, #128	@ 0x80
 8006caa:	68f8      	ldr	r0, [r7, #12]
 8006cac:	f000 f86d 	bl	8006d8a <UART_WaitOnFlagUntilTimeout>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d005      	beq.n	8006cc2 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2220      	movs	r2, #32
 8006cba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	e03a      	b.n	8006d38 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d10b      	bne.n	8006ce0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006cc8:	69bb      	ldr	r3, [r7, #24]
 8006cca:	881b      	ldrh	r3, [r3, #0]
 8006ccc:	461a      	mov	r2, r3
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cd6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	3302      	adds	r3, #2
 8006cdc:	61bb      	str	r3, [r7, #24]
 8006cde:	e007      	b.n	8006cf0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	781a      	ldrb	r2, [r3, #0]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	3301      	adds	r3, #1
 8006cee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	3b01      	subs	r3, #1
 8006cf8:	b29a      	uxth	r2, r3
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d1cb      	bne.n	8006ca0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	9300      	str	r3, [sp, #0]
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	2140      	movs	r1, #64	@ 0x40
 8006d12:	68f8      	ldr	r0, [r7, #12]
 8006d14:	f000 f839 	bl	8006d8a <UART_WaitOnFlagUntilTimeout>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d005      	beq.n	8006d2a <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2220      	movs	r2, #32
 8006d22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006d26:	2303      	movs	r3, #3
 8006d28:	e006      	b.n	8006d38 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2220      	movs	r2, #32
 8006d2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006d32:	2300      	movs	r3, #0
 8006d34:	e000      	b.n	8006d38 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006d36:	2302      	movs	r3, #2
  }
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3720      	adds	r7, #32
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	60b9      	str	r1, [r7, #8]
 8006d4a:	4613      	mov	r3, r2
 8006d4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	2b20      	cmp	r3, #32
 8006d58:	d112      	bne.n	8006d80 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d002      	beq.n	8006d66 <HAL_UART_Receive_IT+0x26>
 8006d60:	88fb      	ldrh	r3, [r7, #6]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d101      	bne.n	8006d6a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e00b      	b.n	8006d82 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006d70:	88fb      	ldrh	r3, [r7, #6]
 8006d72:	461a      	mov	r2, r3
 8006d74:	68b9      	ldr	r1, [r7, #8]
 8006d76:	68f8      	ldr	r0, [r7, #12]
 8006d78:	f000 f860 	bl	8006e3c <UART_Start_Receive_IT>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	e000      	b.n	8006d82 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006d80:	2302      	movs	r3, #2
  }
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3710      	adds	r7, #16
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}

08006d8a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006d8a:	b580      	push	{r7, lr}
 8006d8c:	b086      	sub	sp, #24
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	60f8      	str	r0, [r7, #12]
 8006d92:	60b9      	str	r1, [r7, #8]
 8006d94:	603b      	str	r3, [r7, #0]
 8006d96:	4613      	mov	r3, r2
 8006d98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d9a:	e03b      	b.n	8006e14 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d9c:	6a3b      	ldr	r3, [r7, #32]
 8006d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006da2:	d037      	beq.n	8006e14 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006da4:	f7fc fb92 	bl	80034cc <HAL_GetTick>
 8006da8:	4602      	mov	r2, r0
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	1ad3      	subs	r3, r2, r3
 8006dae:	6a3a      	ldr	r2, [r7, #32]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d302      	bcc.n	8006dba <UART_WaitOnFlagUntilTimeout+0x30>
 8006db4:	6a3b      	ldr	r3, [r7, #32]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d101      	bne.n	8006dbe <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006dba:	2303      	movs	r3, #3
 8006dbc:	e03a      	b.n	8006e34 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	f003 0304 	and.w	r3, r3, #4
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d023      	beq.n	8006e14 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	2b80      	cmp	r3, #128	@ 0x80
 8006dd0:	d020      	beq.n	8006e14 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	2b40      	cmp	r3, #64	@ 0x40
 8006dd6:	d01d      	beq.n	8006e14 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 0308 	and.w	r3, r3, #8
 8006de2:	2b08      	cmp	r3, #8
 8006de4:	d116      	bne.n	8006e14 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006de6:	2300      	movs	r3, #0
 8006de8:	617b      	str	r3, [r7, #20]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	617b      	str	r3, [r7, #20]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	617b      	str	r3, [r7, #20]
 8006dfa:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006dfc:	68f8      	ldr	r0, [r7, #12]
 8006dfe:	f000 f856 	bl	8006eae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2208      	movs	r2, #8
 8006e06:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	e00f      	b.n	8006e34 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	68ba      	ldr	r2, [r7, #8]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	bf0c      	ite	eq
 8006e24:	2301      	moveq	r3, #1
 8006e26:	2300      	movne	r3, #0
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	79fb      	ldrb	r3, [r7, #7]
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d0b4      	beq.n	8006d9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e32:	2300      	movs	r3, #0
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3718      	adds	r7, #24
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b085      	sub	sp, #20
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	4613      	mov	r3, r2
 8006e48:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	68ba      	ldr	r2, [r7, #8]
 8006e4e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	88fa      	ldrh	r2, [r7, #6]
 8006e54:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	88fa      	ldrh	r2, [r7, #6]
 8006e5a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2222      	movs	r2, #34	@ 0x22
 8006e66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d007      	beq.n	8006e82 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	68da      	ldr	r2, [r3, #12]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e80:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	695a      	ldr	r2, [r3, #20]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f042 0201 	orr.w	r2, r2, #1
 8006e90:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	68da      	ldr	r2, [r3, #12]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f042 0220 	orr.w	r2, r2, #32
 8006ea0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3714      	adds	r7, #20
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bc80      	pop	{r7}
 8006eac:	4770      	bx	lr

08006eae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006eae:	b480      	push	{r7}
 8006eb0:	b095      	sub	sp, #84	@ 0x54
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	330c      	adds	r3, #12
 8006ebc:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ec0:	e853 3f00 	ldrex	r3, [r3]
 8006ec4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ecc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	330c      	adds	r3, #12
 8006ed4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006ed6:	643a      	str	r2, [r7, #64]	@ 0x40
 8006ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eda:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006edc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ede:	e841 2300 	strex	r3, r2, [r1]
 8006ee2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d1e5      	bne.n	8006eb6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	3314      	adds	r3, #20
 8006ef0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef2:	6a3b      	ldr	r3, [r7, #32]
 8006ef4:	e853 3f00 	ldrex	r3, [r3]
 8006ef8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006efa:	69fb      	ldr	r3, [r7, #28]
 8006efc:	f023 0301 	bic.w	r3, r3, #1
 8006f00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	3314      	adds	r3, #20
 8006f08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f12:	e841 2300 	strex	r3, r2, [r1]
 8006f16:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d1e5      	bne.n	8006eea <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d119      	bne.n	8006f5a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	330c      	adds	r3, #12
 8006f2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	e853 3f00 	ldrex	r3, [r3]
 8006f34:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	f023 0310 	bic.w	r3, r3, #16
 8006f3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	330c      	adds	r3, #12
 8006f44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f46:	61ba      	str	r2, [r7, #24]
 8006f48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4a:	6979      	ldr	r1, [r7, #20]
 8006f4c:	69ba      	ldr	r2, [r7, #24]
 8006f4e:	e841 2300 	strex	r3, r2, [r1]
 8006f52:	613b      	str	r3, [r7, #16]
   return(result);
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d1e5      	bne.n	8006f26 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2220      	movs	r2, #32
 8006f5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006f68:	bf00      	nop
 8006f6a:	3754      	adds	r7, #84	@ 0x54
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bc80      	pop	{r7}
 8006f70:	4770      	bx	lr
	...

08006f74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	691b      	ldr	r3, [r3, #16]
 8006f82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	68da      	ldr	r2, [r3, #12]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	430a      	orrs	r2, r1
 8006f90:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	689a      	ldr	r2, [r3, #8]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	431a      	orrs	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	695b      	ldr	r3, [r3, #20]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006fae:	f023 030c 	bic.w	r3, r3, #12
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	6812      	ldr	r2, [r2, #0]
 8006fb6:	68b9      	ldr	r1, [r7, #8]
 8006fb8:	430b      	orrs	r3, r1
 8006fba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	695b      	ldr	r3, [r3, #20]
 8006fc2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	699a      	ldr	r2, [r3, #24]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	430a      	orrs	r2, r1
 8006fd0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a2c      	ldr	r2, [pc, #176]	@ (8007088 <UART_SetConfig+0x114>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d103      	bne.n	8006fe4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006fdc:	f7fe fe6e 	bl	8005cbc <HAL_RCC_GetPCLK2Freq>
 8006fe0:	60f8      	str	r0, [r7, #12]
 8006fe2:	e002      	b.n	8006fea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006fe4:	f7fe fe56 	bl	8005c94 <HAL_RCC_GetPCLK1Freq>
 8006fe8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006fea:	68fa      	ldr	r2, [r7, #12]
 8006fec:	4613      	mov	r3, r2
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	4413      	add	r3, r2
 8006ff2:	009a      	lsls	r2, r3, #2
 8006ff4:	441a      	add	r2, r3
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007000:	4a22      	ldr	r2, [pc, #136]	@ (800708c <UART_SetConfig+0x118>)
 8007002:	fba2 2303 	umull	r2, r3, r2, r3
 8007006:	095b      	lsrs	r3, r3, #5
 8007008:	0119      	lsls	r1, r3, #4
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	4613      	mov	r3, r2
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	4413      	add	r3, r2
 8007012:	009a      	lsls	r2, r3, #2
 8007014:	441a      	add	r2, r3
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007020:	4b1a      	ldr	r3, [pc, #104]	@ (800708c <UART_SetConfig+0x118>)
 8007022:	fba3 0302 	umull	r0, r3, r3, r2
 8007026:	095b      	lsrs	r3, r3, #5
 8007028:	2064      	movs	r0, #100	@ 0x64
 800702a:	fb00 f303 	mul.w	r3, r0, r3
 800702e:	1ad3      	subs	r3, r2, r3
 8007030:	011b      	lsls	r3, r3, #4
 8007032:	3332      	adds	r3, #50	@ 0x32
 8007034:	4a15      	ldr	r2, [pc, #84]	@ (800708c <UART_SetConfig+0x118>)
 8007036:	fba2 2303 	umull	r2, r3, r2, r3
 800703a:	095b      	lsrs	r3, r3, #5
 800703c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007040:	4419      	add	r1, r3
 8007042:	68fa      	ldr	r2, [r7, #12]
 8007044:	4613      	mov	r3, r2
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	4413      	add	r3, r2
 800704a:	009a      	lsls	r2, r3, #2
 800704c:	441a      	add	r2, r3
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	fbb2 f2f3 	udiv	r2, r2, r3
 8007058:	4b0c      	ldr	r3, [pc, #48]	@ (800708c <UART_SetConfig+0x118>)
 800705a:	fba3 0302 	umull	r0, r3, r3, r2
 800705e:	095b      	lsrs	r3, r3, #5
 8007060:	2064      	movs	r0, #100	@ 0x64
 8007062:	fb00 f303 	mul.w	r3, r0, r3
 8007066:	1ad3      	subs	r3, r2, r3
 8007068:	011b      	lsls	r3, r3, #4
 800706a:	3332      	adds	r3, #50	@ 0x32
 800706c:	4a07      	ldr	r2, [pc, #28]	@ (800708c <UART_SetConfig+0x118>)
 800706e:	fba2 2303 	umull	r2, r3, r2, r3
 8007072:	095b      	lsrs	r3, r3, #5
 8007074:	f003 020f 	and.w	r2, r3, #15
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	440a      	add	r2, r1
 800707e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007080:	bf00      	nop
 8007082:	3710      	adds	r7, #16
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}
 8007088:	40013800 	.word	0x40013800
 800708c:	51eb851f 	.word	0x51eb851f

08007090 <atoi>:
 8007090:	220a      	movs	r2, #10
 8007092:	2100      	movs	r1, #0
 8007094:	f000 b87c 	b.w	8007190 <strtol>

08007098 <_strtol_l.isra.0>:
 8007098:	2b24      	cmp	r3, #36	@ 0x24
 800709a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800709e:	4686      	mov	lr, r0
 80070a0:	4690      	mov	r8, r2
 80070a2:	d801      	bhi.n	80070a8 <_strtol_l.isra.0+0x10>
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d106      	bne.n	80070b6 <_strtol_l.isra.0+0x1e>
 80070a8:	f000 f930 	bl	800730c <__errno>
 80070ac:	2316      	movs	r3, #22
 80070ae:	6003      	str	r3, [r0, #0]
 80070b0:	2000      	movs	r0, #0
 80070b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070b6:	460d      	mov	r5, r1
 80070b8:	4833      	ldr	r0, [pc, #204]	@ (8007188 <_strtol_l.isra.0+0xf0>)
 80070ba:	462a      	mov	r2, r5
 80070bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80070c0:	5d06      	ldrb	r6, [r0, r4]
 80070c2:	f016 0608 	ands.w	r6, r6, #8
 80070c6:	d1f8      	bne.n	80070ba <_strtol_l.isra.0+0x22>
 80070c8:	2c2d      	cmp	r4, #45	@ 0x2d
 80070ca:	d110      	bne.n	80070ee <_strtol_l.isra.0+0x56>
 80070cc:	2601      	movs	r6, #1
 80070ce:	782c      	ldrb	r4, [r5, #0]
 80070d0:	1c95      	adds	r5, r2, #2
 80070d2:	f033 0210 	bics.w	r2, r3, #16
 80070d6:	d115      	bne.n	8007104 <_strtol_l.isra.0+0x6c>
 80070d8:	2c30      	cmp	r4, #48	@ 0x30
 80070da:	d10d      	bne.n	80070f8 <_strtol_l.isra.0+0x60>
 80070dc:	782a      	ldrb	r2, [r5, #0]
 80070de:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80070e2:	2a58      	cmp	r2, #88	@ 0x58
 80070e4:	d108      	bne.n	80070f8 <_strtol_l.isra.0+0x60>
 80070e6:	786c      	ldrb	r4, [r5, #1]
 80070e8:	3502      	adds	r5, #2
 80070ea:	2310      	movs	r3, #16
 80070ec:	e00a      	b.n	8007104 <_strtol_l.isra.0+0x6c>
 80070ee:	2c2b      	cmp	r4, #43	@ 0x2b
 80070f0:	bf04      	itt	eq
 80070f2:	782c      	ldrbeq	r4, [r5, #0]
 80070f4:	1c95      	addeq	r5, r2, #2
 80070f6:	e7ec      	b.n	80070d2 <_strtol_l.isra.0+0x3a>
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d1f6      	bne.n	80070ea <_strtol_l.isra.0+0x52>
 80070fc:	2c30      	cmp	r4, #48	@ 0x30
 80070fe:	bf14      	ite	ne
 8007100:	230a      	movne	r3, #10
 8007102:	2308      	moveq	r3, #8
 8007104:	2200      	movs	r2, #0
 8007106:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800710a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800710e:	fbbc f9f3 	udiv	r9, ip, r3
 8007112:	4610      	mov	r0, r2
 8007114:	fb03 ca19 	mls	sl, r3, r9, ip
 8007118:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800711c:	2f09      	cmp	r7, #9
 800711e:	d80f      	bhi.n	8007140 <_strtol_l.isra.0+0xa8>
 8007120:	463c      	mov	r4, r7
 8007122:	42a3      	cmp	r3, r4
 8007124:	dd1b      	ble.n	800715e <_strtol_l.isra.0+0xc6>
 8007126:	1c57      	adds	r7, r2, #1
 8007128:	d007      	beq.n	800713a <_strtol_l.isra.0+0xa2>
 800712a:	4581      	cmp	r9, r0
 800712c:	d314      	bcc.n	8007158 <_strtol_l.isra.0+0xc0>
 800712e:	d101      	bne.n	8007134 <_strtol_l.isra.0+0x9c>
 8007130:	45a2      	cmp	sl, r4
 8007132:	db11      	blt.n	8007158 <_strtol_l.isra.0+0xc0>
 8007134:	2201      	movs	r2, #1
 8007136:	fb00 4003 	mla	r0, r0, r3, r4
 800713a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800713e:	e7eb      	b.n	8007118 <_strtol_l.isra.0+0x80>
 8007140:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007144:	2f19      	cmp	r7, #25
 8007146:	d801      	bhi.n	800714c <_strtol_l.isra.0+0xb4>
 8007148:	3c37      	subs	r4, #55	@ 0x37
 800714a:	e7ea      	b.n	8007122 <_strtol_l.isra.0+0x8a>
 800714c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007150:	2f19      	cmp	r7, #25
 8007152:	d804      	bhi.n	800715e <_strtol_l.isra.0+0xc6>
 8007154:	3c57      	subs	r4, #87	@ 0x57
 8007156:	e7e4      	b.n	8007122 <_strtol_l.isra.0+0x8a>
 8007158:	f04f 32ff 	mov.w	r2, #4294967295
 800715c:	e7ed      	b.n	800713a <_strtol_l.isra.0+0xa2>
 800715e:	1c53      	adds	r3, r2, #1
 8007160:	d108      	bne.n	8007174 <_strtol_l.isra.0+0xdc>
 8007162:	2322      	movs	r3, #34	@ 0x22
 8007164:	4660      	mov	r0, ip
 8007166:	f8ce 3000 	str.w	r3, [lr]
 800716a:	f1b8 0f00 	cmp.w	r8, #0
 800716e:	d0a0      	beq.n	80070b2 <_strtol_l.isra.0+0x1a>
 8007170:	1e69      	subs	r1, r5, #1
 8007172:	e006      	b.n	8007182 <_strtol_l.isra.0+0xea>
 8007174:	b106      	cbz	r6, 8007178 <_strtol_l.isra.0+0xe0>
 8007176:	4240      	negs	r0, r0
 8007178:	f1b8 0f00 	cmp.w	r8, #0
 800717c:	d099      	beq.n	80070b2 <_strtol_l.isra.0+0x1a>
 800717e:	2a00      	cmp	r2, #0
 8007180:	d1f6      	bne.n	8007170 <_strtol_l.isra.0+0xd8>
 8007182:	f8c8 1000 	str.w	r1, [r8]
 8007186:	e794      	b.n	80070b2 <_strtol_l.isra.0+0x1a>
 8007188:	08008a03 	.word	0x08008a03

0800718c <_strtol_r>:
 800718c:	f7ff bf84 	b.w	8007098 <_strtol_l.isra.0>

08007190 <strtol>:
 8007190:	4613      	mov	r3, r2
 8007192:	460a      	mov	r2, r1
 8007194:	4601      	mov	r1, r0
 8007196:	4802      	ldr	r0, [pc, #8]	@ (80071a0 <strtol+0x10>)
 8007198:	6800      	ldr	r0, [r0, #0]
 800719a:	f7ff bf7d 	b.w	8007098 <_strtol_l.isra.0>
 800719e:	bf00      	nop
 80071a0:	20000070 	.word	0x20000070

080071a4 <sniprintf>:
 80071a4:	b40c      	push	{r2, r3}
 80071a6:	b530      	push	{r4, r5, lr}
 80071a8:	4b18      	ldr	r3, [pc, #96]	@ (800720c <sniprintf+0x68>)
 80071aa:	1e0c      	subs	r4, r1, #0
 80071ac:	681d      	ldr	r5, [r3, #0]
 80071ae:	b09d      	sub	sp, #116	@ 0x74
 80071b0:	da08      	bge.n	80071c4 <sniprintf+0x20>
 80071b2:	238b      	movs	r3, #139	@ 0x8b
 80071b4:	f04f 30ff 	mov.w	r0, #4294967295
 80071b8:	602b      	str	r3, [r5, #0]
 80071ba:	b01d      	add	sp, #116	@ 0x74
 80071bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80071c0:	b002      	add	sp, #8
 80071c2:	4770      	bx	lr
 80071c4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80071c8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80071cc:	f04f 0300 	mov.w	r3, #0
 80071d0:	931b      	str	r3, [sp, #108]	@ 0x6c
 80071d2:	bf0c      	ite	eq
 80071d4:	4623      	moveq	r3, r4
 80071d6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80071da:	9304      	str	r3, [sp, #16]
 80071dc:	9307      	str	r3, [sp, #28]
 80071de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80071e2:	9002      	str	r0, [sp, #8]
 80071e4:	9006      	str	r0, [sp, #24]
 80071e6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80071ea:	4628      	mov	r0, r5
 80071ec:	ab21      	add	r3, sp, #132	@ 0x84
 80071ee:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80071f0:	a902      	add	r1, sp, #8
 80071f2:	9301      	str	r3, [sp, #4]
 80071f4:	f000 fa08 	bl	8007608 <_svfiprintf_r>
 80071f8:	1c43      	adds	r3, r0, #1
 80071fa:	bfbc      	itt	lt
 80071fc:	238b      	movlt	r3, #139	@ 0x8b
 80071fe:	602b      	strlt	r3, [r5, #0]
 8007200:	2c00      	cmp	r4, #0
 8007202:	d0da      	beq.n	80071ba <sniprintf+0x16>
 8007204:	2200      	movs	r2, #0
 8007206:	9b02      	ldr	r3, [sp, #8]
 8007208:	701a      	strb	r2, [r3, #0]
 800720a:	e7d6      	b.n	80071ba <sniprintf+0x16>
 800720c:	20000070 	.word	0x20000070

08007210 <siprintf>:
 8007210:	b40e      	push	{r1, r2, r3}
 8007212:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007216:	b510      	push	{r4, lr}
 8007218:	2400      	movs	r4, #0
 800721a:	b09d      	sub	sp, #116	@ 0x74
 800721c:	ab1f      	add	r3, sp, #124	@ 0x7c
 800721e:	9002      	str	r0, [sp, #8]
 8007220:	9006      	str	r0, [sp, #24]
 8007222:	9107      	str	r1, [sp, #28]
 8007224:	9104      	str	r1, [sp, #16]
 8007226:	4809      	ldr	r0, [pc, #36]	@ (800724c <siprintf+0x3c>)
 8007228:	4909      	ldr	r1, [pc, #36]	@ (8007250 <siprintf+0x40>)
 800722a:	f853 2b04 	ldr.w	r2, [r3], #4
 800722e:	9105      	str	r1, [sp, #20]
 8007230:	6800      	ldr	r0, [r0, #0]
 8007232:	a902      	add	r1, sp, #8
 8007234:	9301      	str	r3, [sp, #4]
 8007236:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007238:	f000 f9e6 	bl	8007608 <_svfiprintf_r>
 800723c:	9b02      	ldr	r3, [sp, #8]
 800723e:	701c      	strb	r4, [r3, #0]
 8007240:	b01d      	add	sp, #116	@ 0x74
 8007242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007246:	b003      	add	sp, #12
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	20000070 	.word	0x20000070
 8007250:	ffff0208 	.word	0xffff0208

08007254 <siscanf>:
 8007254:	b40e      	push	{r1, r2, r3}
 8007256:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800725a:	b570      	push	{r4, r5, r6, lr}
 800725c:	2500      	movs	r5, #0
 800725e:	b09d      	sub	sp, #116	@ 0x74
 8007260:	ac21      	add	r4, sp, #132	@ 0x84
 8007262:	f854 6b04 	ldr.w	r6, [r4], #4
 8007266:	f8ad 2014 	strh.w	r2, [sp, #20]
 800726a:	951b      	str	r5, [sp, #108]	@ 0x6c
 800726c:	9002      	str	r0, [sp, #8]
 800726e:	9006      	str	r0, [sp, #24]
 8007270:	f7f8 ff76 	bl	8000160 <strlen>
 8007274:	4b0b      	ldr	r3, [pc, #44]	@ (80072a4 <siscanf+0x50>)
 8007276:	9003      	str	r0, [sp, #12]
 8007278:	930b      	str	r3, [sp, #44]	@ 0x2c
 800727a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800727e:	9007      	str	r0, [sp, #28]
 8007280:	4809      	ldr	r0, [pc, #36]	@ (80072a8 <siscanf+0x54>)
 8007282:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007286:	4632      	mov	r2, r6
 8007288:	4623      	mov	r3, r4
 800728a:	a902      	add	r1, sp, #8
 800728c:	6800      	ldr	r0, [r0, #0]
 800728e:	950f      	str	r5, [sp, #60]	@ 0x3c
 8007290:	9514      	str	r5, [sp, #80]	@ 0x50
 8007292:	9401      	str	r4, [sp, #4]
 8007294:	f000 fb0e 	bl	80078b4 <__ssvfiscanf_r>
 8007298:	b01d      	add	sp, #116	@ 0x74
 800729a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800729e:	b003      	add	sp, #12
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	080072ad 	.word	0x080072ad
 80072a8:	20000070 	.word	0x20000070

080072ac <__seofread>:
 80072ac:	2000      	movs	r0, #0
 80072ae:	4770      	bx	lr

080072b0 <memset>:
 80072b0:	4603      	mov	r3, r0
 80072b2:	4402      	add	r2, r0
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d100      	bne.n	80072ba <memset+0xa>
 80072b8:	4770      	bx	lr
 80072ba:	f803 1b01 	strb.w	r1, [r3], #1
 80072be:	e7f9      	b.n	80072b4 <memset+0x4>

080072c0 <strncmp>:
 80072c0:	b510      	push	{r4, lr}
 80072c2:	b16a      	cbz	r2, 80072e0 <strncmp+0x20>
 80072c4:	3901      	subs	r1, #1
 80072c6:	1884      	adds	r4, r0, r2
 80072c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072cc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d103      	bne.n	80072dc <strncmp+0x1c>
 80072d4:	42a0      	cmp	r0, r4
 80072d6:	d001      	beq.n	80072dc <strncmp+0x1c>
 80072d8:	2a00      	cmp	r2, #0
 80072da:	d1f5      	bne.n	80072c8 <strncmp+0x8>
 80072dc:	1ad0      	subs	r0, r2, r3
 80072de:	bd10      	pop	{r4, pc}
 80072e0:	4610      	mov	r0, r2
 80072e2:	e7fc      	b.n	80072de <strncmp+0x1e>

080072e4 <strncpy>:
 80072e4:	4603      	mov	r3, r0
 80072e6:	b510      	push	{r4, lr}
 80072e8:	3901      	subs	r1, #1
 80072ea:	b132      	cbz	r2, 80072fa <strncpy+0x16>
 80072ec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80072f0:	3a01      	subs	r2, #1
 80072f2:	f803 4b01 	strb.w	r4, [r3], #1
 80072f6:	2c00      	cmp	r4, #0
 80072f8:	d1f7      	bne.n	80072ea <strncpy+0x6>
 80072fa:	2100      	movs	r1, #0
 80072fc:	441a      	add	r2, r3
 80072fe:	4293      	cmp	r3, r2
 8007300:	d100      	bne.n	8007304 <strncpy+0x20>
 8007302:	bd10      	pop	{r4, pc}
 8007304:	f803 1b01 	strb.w	r1, [r3], #1
 8007308:	e7f9      	b.n	80072fe <strncpy+0x1a>
	...

0800730c <__errno>:
 800730c:	4b01      	ldr	r3, [pc, #4]	@ (8007314 <__errno+0x8>)
 800730e:	6818      	ldr	r0, [r3, #0]
 8007310:	4770      	bx	lr
 8007312:	bf00      	nop
 8007314:	20000070 	.word	0x20000070

08007318 <__libc_init_array>:
 8007318:	b570      	push	{r4, r5, r6, lr}
 800731a:	2600      	movs	r6, #0
 800731c:	4d0c      	ldr	r5, [pc, #48]	@ (8007350 <__libc_init_array+0x38>)
 800731e:	4c0d      	ldr	r4, [pc, #52]	@ (8007354 <__libc_init_array+0x3c>)
 8007320:	1b64      	subs	r4, r4, r5
 8007322:	10a4      	asrs	r4, r4, #2
 8007324:	42a6      	cmp	r6, r4
 8007326:	d109      	bne.n	800733c <__libc_init_array+0x24>
 8007328:	f001 f872 	bl	8008410 <_init>
 800732c:	2600      	movs	r6, #0
 800732e:	4d0a      	ldr	r5, [pc, #40]	@ (8007358 <__libc_init_array+0x40>)
 8007330:	4c0a      	ldr	r4, [pc, #40]	@ (800735c <__libc_init_array+0x44>)
 8007332:	1b64      	subs	r4, r4, r5
 8007334:	10a4      	asrs	r4, r4, #2
 8007336:	42a6      	cmp	r6, r4
 8007338:	d105      	bne.n	8007346 <__libc_init_array+0x2e>
 800733a:	bd70      	pop	{r4, r5, r6, pc}
 800733c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007340:	4798      	blx	r3
 8007342:	3601      	adds	r6, #1
 8007344:	e7ee      	b.n	8007324 <__libc_init_array+0xc>
 8007346:	f855 3b04 	ldr.w	r3, [r5], #4
 800734a:	4798      	blx	r3
 800734c:	3601      	adds	r6, #1
 800734e:	e7f2      	b.n	8007336 <__libc_init_array+0x1e>
 8007350:	08008b5c 	.word	0x08008b5c
 8007354:	08008b5c 	.word	0x08008b5c
 8007358:	08008b5c 	.word	0x08008b5c
 800735c:	08008b60 	.word	0x08008b60

08007360 <__retarget_lock_acquire_recursive>:
 8007360:	4770      	bx	lr

08007362 <__retarget_lock_release_recursive>:
 8007362:	4770      	bx	lr

08007364 <_free_r>:
 8007364:	b538      	push	{r3, r4, r5, lr}
 8007366:	4605      	mov	r5, r0
 8007368:	2900      	cmp	r1, #0
 800736a:	d040      	beq.n	80073ee <_free_r+0x8a>
 800736c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007370:	1f0c      	subs	r4, r1, #4
 8007372:	2b00      	cmp	r3, #0
 8007374:	bfb8      	it	lt
 8007376:	18e4      	addlt	r4, r4, r3
 8007378:	f000 f8de 	bl	8007538 <__malloc_lock>
 800737c:	4a1c      	ldr	r2, [pc, #112]	@ (80073f0 <_free_r+0x8c>)
 800737e:	6813      	ldr	r3, [r2, #0]
 8007380:	b933      	cbnz	r3, 8007390 <_free_r+0x2c>
 8007382:	6063      	str	r3, [r4, #4]
 8007384:	6014      	str	r4, [r2, #0]
 8007386:	4628      	mov	r0, r5
 8007388:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800738c:	f000 b8da 	b.w	8007544 <__malloc_unlock>
 8007390:	42a3      	cmp	r3, r4
 8007392:	d908      	bls.n	80073a6 <_free_r+0x42>
 8007394:	6820      	ldr	r0, [r4, #0]
 8007396:	1821      	adds	r1, r4, r0
 8007398:	428b      	cmp	r3, r1
 800739a:	bf01      	itttt	eq
 800739c:	6819      	ldreq	r1, [r3, #0]
 800739e:	685b      	ldreq	r3, [r3, #4]
 80073a0:	1809      	addeq	r1, r1, r0
 80073a2:	6021      	streq	r1, [r4, #0]
 80073a4:	e7ed      	b.n	8007382 <_free_r+0x1e>
 80073a6:	461a      	mov	r2, r3
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	b10b      	cbz	r3, 80073b0 <_free_r+0x4c>
 80073ac:	42a3      	cmp	r3, r4
 80073ae:	d9fa      	bls.n	80073a6 <_free_r+0x42>
 80073b0:	6811      	ldr	r1, [r2, #0]
 80073b2:	1850      	adds	r0, r2, r1
 80073b4:	42a0      	cmp	r0, r4
 80073b6:	d10b      	bne.n	80073d0 <_free_r+0x6c>
 80073b8:	6820      	ldr	r0, [r4, #0]
 80073ba:	4401      	add	r1, r0
 80073bc:	1850      	adds	r0, r2, r1
 80073be:	4283      	cmp	r3, r0
 80073c0:	6011      	str	r1, [r2, #0]
 80073c2:	d1e0      	bne.n	8007386 <_free_r+0x22>
 80073c4:	6818      	ldr	r0, [r3, #0]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	4408      	add	r0, r1
 80073ca:	6010      	str	r0, [r2, #0]
 80073cc:	6053      	str	r3, [r2, #4]
 80073ce:	e7da      	b.n	8007386 <_free_r+0x22>
 80073d0:	d902      	bls.n	80073d8 <_free_r+0x74>
 80073d2:	230c      	movs	r3, #12
 80073d4:	602b      	str	r3, [r5, #0]
 80073d6:	e7d6      	b.n	8007386 <_free_r+0x22>
 80073d8:	6820      	ldr	r0, [r4, #0]
 80073da:	1821      	adds	r1, r4, r0
 80073dc:	428b      	cmp	r3, r1
 80073de:	bf01      	itttt	eq
 80073e0:	6819      	ldreq	r1, [r3, #0]
 80073e2:	685b      	ldreq	r3, [r3, #4]
 80073e4:	1809      	addeq	r1, r1, r0
 80073e6:	6021      	streq	r1, [r4, #0]
 80073e8:	6063      	str	r3, [r4, #4]
 80073ea:	6054      	str	r4, [r2, #4]
 80073ec:	e7cb      	b.n	8007386 <_free_r+0x22>
 80073ee:	bd38      	pop	{r3, r4, r5, pc}
 80073f0:	20000530 	.word	0x20000530

080073f4 <sbrk_aligned>:
 80073f4:	b570      	push	{r4, r5, r6, lr}
 80073f6:	4e0f      	ldr	r6, [pc, #60]	@ (8007434 <sbrk_aligned+0x40>)
 80073f8:	460c      	mov	r4, r1
 80073fa:	6831      	ldr	r1, [r6, #0]
 80073fc:	4605      	mov	r5, r0
 80073fe:	b911      	cbnz	r1, 8007406 <sbrk_aligned+0x12>
 8007400:	f000 ff34 	bl	800826c <_sbrk_r>
 8007404:	6030      	str	r0, [r6, #0]
 8007406:	4621      	mov	r1, r4
 8007408:	4628      	mov	r0, r5
 800740a:	f000 ff2f 	bl	800826c <_sbrk_r>
 800740e:	1c43      	adds	r3, r0, #1
 8007410:	d103      	bne.n	800741a <sbrk_aligned+0x26>
 8007412:	f04f 34ff 	mov.w	r4, #4294967295
 8007416:	4620      	mov	r0, r4
 8007418:	bd70      	pop	{r4, r5, r6, pc}
 800741a:	1cc4      	adds	r4, r0, #3
 800741c:	f024 0403 	bic.w	r4, r4, #3
 8007420:	42a0      	cmp	r0, r4
 8007422:	d0f8      	beq.n	8007416 <sbrk_aligned+0x22>
 8007424:	1a21      	subs	r1, r4, r0
 8007426:	4628      	mov	r0, r5
 8007428:	f000 ff20 	bl	800826c <_sbrk_r>
 800742c:	3001      	adds	r0, #1
 800742e:	d1f2      	bne.n	8007416 <sbrk_aligned+0x22>
 8007430:	e7ef      	b.n	8007412 <sbrk_aligned+0x1e>
 8007432:	bf00      	nop
 8007434:	2000052c 	.word	0x2000052c

08007438 <_malloc_r>:
 8007438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800743c:	1ccd      	adds	r5, r1, #3
 800743e:	f025 0503 	bic.w	r5, r5, #3
 8007442:	3508      	adds	r5, #8
 8007444:	2d0c      	cmp	r5, #12
 8007446:	bf38      	it	cc
 8007448:	250c      	movcc	r5, #12
 800744a:	2d00      	cmp	r5, #0
 800744c:	4606      	mov	r6, r0
 800744e:	db01      	blt.n	8007454 <_malloc_r+0x1c>
 8007450:	42a9      	cmp	r1, r5
 8007452:	d904      	bls.n	800745e <_malloc_r+0x26>
 8007454:	230c      	movs	r3, #12
 8007456:	6033      	str	r3, [r6, #0]
 8007458:	2000      	movs	r0, #0
 800745a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800745e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007534 <_malloc_r+0xfc>
 8007462:	f000 f869 	bl	8007538 <__malloc_lock>
 8007466:	f8d8 3000 	ldr.w	r3, [r8]
 800746a:	461c      	mov	r4, r3
 800746c:	bb44      	cbnz	r4, 80074c0 <_malloc_r+0x88>
 800746e:	4629      	mov	r1, r5
 8007470:	4630      	mov	r0, r6
 8007472:	f7ff ffbf 	bl	80073f4 <sbrk_aligned>
 8007476:	1c43      	adds	r3, r0, #1
 8007478:	4604      	mov	r4, r0
 800747a:	d158      	bne.n	800752e <_malloc_r+0xf6>
 800747c:	f8d8 4000 	ldr.w	r4, [r8]
 8007480:	4627      	mov	r7, r4
 8007482:	2f00      	cmp	r7, #0
 8007484:	d143      	bne.n	800750e <_malloc_r+0xd6>
 8007486:	2c00      	cmp	r4, #0
 8007488:	d04b      	beq.n	8007522 <_malloc_r+0xea>
 800748a:	6823      	ldr	r3, [r4, #0]
 800748c:	4639      	mov	r1, r7
 800748e:	4630      	mov	r0, r6
 8007490:	eb04 0903 	add.w	r9, r4, r3
 8007494:	f000 feea 	bl	800826c <_sbrk_r>
 8007498:	4581      	cmp	r9, r0
 800749a:	d142      	bne.n	8007522 <_malloc_r+0xea>
 800749c:	6821      	ldr	r1, [r4, #0]
 800749e:	4630      	mov	r0, r6
 80074a0:	1a6d      	subs	r5, r5, r1
 80074a2:	4629      	mov	r1, r5
 80074a4:	f7ff ffa6 	bl	80073f4 <sbrk_aligned>
 80074a8:	3001      	adds	r0, #1
 80074aa:	d03a      	beq.n	8007522 <_malloc_r+0xea>
 80074ac:	6823      	ldr	r3, [r4, #0]
 80074ae:	442b      	add	r3, r5
 80074b0:	6023      	str	r3, [r4, #0]
 80074b2:	f8d8 3000 	ldr.w	r3, [r8]
 80074b6:	685a      	ldr	r2, [r3, #4]
 80074b8:	bb62      	cbnz	r2, 8007514 <_malloc_r+0xdc>
 80074ba:	f8c8 7000 	str.w	r7, [r8]
 80074be:	e00f      	b.n	80074e0 <_malloc_r+0xa8>
 80074c0:	6822      	ldr	r2, [r4, #0]
 80074c2:	1b52      	subs	r2, r2, r5
 80074c4:	d420      	bmi.n	8007508 <_malloc_r+0xd0>
 80074c6:	2a0b      	cmp	r2, #11
 80074c8:	d917      	bls.n	80074fa <_malloc_r+0xc2>
 80074ca:	1961      	adds	r1, r4, r5
 80074cc:	42a3      	cmp	r3, r4
 80074ce:	6025      	str	r5, [r4, #0]
 80074d0:	bf18      	it	ne
 80074d2:	6059      	strne	r1, [r3, #4]
 80074d4:	6863      	ldr	r3, [r4, #4]
 80074d6:	bf08      	it	eq
 80074d8:	f8c8 1000 	streq.w	r1, [r8]
 80074dc:	5162      	str	r2, [r4, r5]
 80074de:	604b      	str	r3, [r1, #4]
 80074e0:	4630      	mov	r0, r6
 80074e2:	f000 f82f 	bl	8007544 <__malloc_unlock>
 80074e6:	f104 000b 	add.w	r0, r4, #11
 80074ea:	1d23      	adds	r3, r4, #4
 80074ec:	f020 0007 	bic.w	r0, r0, #7
 80074f0:	1ac2      	subs	r2, r0, r3
 80074f2:	bf1c      	itt	ne
 80074f4:	1a1b      	subne	r3, r3, r0
 80074f6:	50a3      	strne	r3, [r4, r2]
 80074f8:	e7af      	b.n	800745a <_malloc_r+0x22>
 80074fa:	6862      	ldr	r2, [r4, #4]
 80074fc:	42a3      	cmp	r3, r4
 80074fe:	bf0c      	ite	eq
 8007500:	f8c8 2000 	streq.w	r2, [r8]
 8007504:	605a      	strne	r2, [r3, #4]
 8007506:	e7eb      	b.n	80074e0 <_malloc_r+0xa8>
 8007508:	4623      	mov	r3, r4
 800750a:	6864      	ldr	r4, [r4, #4]
 800750c:	e7ae      	b.n	800746c <_malloc_r+0x34>
 800750e:	463c      	mov	r4, r7
 8007510:	687f      	ldr	r7, [r7, #4]
 8007512:	e7b6      	b.n	8007482 <_malloc_r+0x4a>
 8007514:	461a      	mov	r2, r3
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	42a3      	cmp	r3, r4
 800751a:	d1fb      	bne.n	8007514 <_malloc_r+0xdc>
 800751c:	2300      	movs	r3, #0
 800751e:	6053      	str	r3, [r2, #4]
 8007520:	e7de      	b.n	80074e0 <_malloc_r+0xa8>
 8007522:	230c      	movs	r3, #12
 8007524:	4630      	mov	r0, r6
 8007526:	6033      	str	r3, [r6, #0]
 8007528:	f000 f80c 	bl	8007544 <__malloc_unlock>
 800752c:	e794      	b.n	8007458 <_malloc_r+0x20>
 800752e:	6005      	str	r5, [r0, #0]
 8007530:	e7d6      	b.n	80074e0 <_malloc_r+0xa8>
 8007532:	bf00      	nop
 8007534:	20000530 	.word	0x20000530

08007538 <__malloc_lock>:
 8007538:	4801      	ldr	r0, [pc, #4]	@ (8007540 <__malloc_lock+0x8>)
 800753a:	f7ff bf11 	b.w	8007360 <__retarget_lock_acquire_recursive>
 800753e:	bf00      	nop
 8007540:	20000528 	.word	0x20000528

08007544 <__malloc_unlock>:
 8007544:	4801      	ldr	r0, [pc, #4]	@ (800754c <__malloc_unlock+0x8>)
 8007546:	f7ff bf0c 	b.w	8007362 <__retarget_lock_release_recursive>
 800754a:	bf00      	nop
 800754c:	20000528 	.word	0x20000528

08007550 <__ssputs_r>:
 8007550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007554:	461f      	mov	r7, r3
 8007556:	688e      	ldr	r6, [r1, #8]
 8007558:	4682      	mov	sl, r0
 800755a:	42be      	cmp	r6, r7
 800755c:	460c      	mov	r4, r1
 800755e:	4690      	mov	r8, r2
 8007560:	680b      	ldr	r3, [r1, #0]
 8007562:	d82d      	bhi.n	80075c0 <__ssputs_r+0x70>
 8007564:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007568:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800756c:	d026      	beq.n	80075bc <__ssputs_r+0x6c>
 800756e:	6965      	ldr	r5, [r4, #20]
 8007570:	6909      	ldr	r1, [r1, #16]
 8007572:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007576:	eba3 0901 	sub.w	r9, r3, r1
 800757a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800757e:	1c7b      	adds	r3, r7, #1
 8007580:	444b      	add	r3, r9
 8007582:	106d      	asrs	r5, r5, #1
 8007584:	429d      	cmp	r5, r3
 8007586:	bf38      	it	cc
 8007588:	461d      	movcc	r5, r3
 800758a:	0553      	lsls	r3, r2, #21
 800758c:	d527      	bpl.n	80075de <__ssputs_r+0x8e>
 800758e:	4629      	mov	r1, r5
 8007590:	f7ff ff52 	bl	8007438 <_malloc_r>
 8007594:	4606      	mov	r6, r0
 8007596:	b360      	cbz	r0, 80075f2 <__ssputs_r+0xa2>
 8007598:	464a      	mov	r2, r9
 800759a:	6921      	ldr	r1, [r4, #16]
 800759c:	f000 fe84 	bl	80082a8 <memcpy>
 80075a0:	89a3      	ldrh	r3, [r4, #12]
 80075a2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80075a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075aa:	81a3      	strh	r3, [r4, #12]
 80075ac:	6126      	str	r6, [r4, #16]
 80075ae:	444e      	add	r6, r9
 80075b0:	6026      	str	r6, [r4, #0]
 80075b2:	463e      	mov	r6, r7
 80075b4:	6165      	str	r5, [r4, #20]
 80075b6:	eba5 0509 	sub.w	r5, r5, r9
 80075ba:	60a5      	str	r5, [r4, #8]
 80075bc:	42be      	cmp	r6, r7
 80075be:	d900      	bls.n	80075c2 <__ssputs_r+0x72>
 80075c0:	463e      	mov	r6, r7
 80075c2:	4632      	mov	r2, r6
 80075c4:	4641      	mov	r1, r8
 80075c6:	6820      	ldr	r0, [r4, #0]
 80075c8:	f000 fe35 	bl	8008236 <memmove>
 80075cc:	2000      	movs	r0, #0
 80075ce:	68a3      	ldr	r3, [r4, #8]
 80075d0:	1b9b      	subs	r3, r3, r6
 80075d2:	60a3      	str	r3, [r4, #8]
 80075d4:	6823      	ldr	r3, [r4, #0]
 80075d6:	4433      	add	r3, r6
 80075d8:	6023      	str	r3, [r4, #0]
 80075da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075de:	462a      	mov	r2, r5
 80075e0:	f000 fe70 	bl	80082c4 <_realloc_r>
 80075e4:	4606      	mov	r6, r0
 80075e6:	2800      	cmp	r0, #0
 80075e8:	d1e0      	bne.n	80075ac <__ssputs_r+0x5c>
 80075ea:	4650      	mov	r0, sl
 80075ec:	6921      	ldr	r1, [r4, #16]
 80075ee:	f7ff feb9 	bl	8007364 <_free_r>
 80075f2:	230c      	movs	r3, #12
 80075f4:	f8ca 3000 	str.w	r3, [sl]
 80075f8:	89a3      	ldrh	r3, [r4, #12]
 80075fa:	f04f 30ff 	mov.w	r0, #4294967295
 80075fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007602:	81a3      	strh	r3, [r4, #12]
 8007604:	e7e9      	b.n	80075da <__ssputs_r+0x8a>
	...

08007608 <_svfiprintf_r>:
 8007608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800760c:	4698      	mov	r8, r3
 800760e:	898b      	ldrh	r3, [r1, #12]
 8007610:	4607      	mov	r7, r0
 8007612:	061b      	lsls	r3, r3, #24
 8007614:	460d      	mov	r5, r1
 8007616:	4614      	mov	r4, r2
 8007618:	b09d      	sub	sp, #116	@ 0x74
 800761a:	d510      	bpl.n	800763e <_svfiprintf_r+0x36>
 800761c:	690b      	ldr	r3, [r1, #16]
 800761e:	b973      	cbnz	r3, 800763e <_svfiprintf_r+0x36>
 8007620:	2140      	movs	r1, #64	@ 0x40
 8007622:	f7ff ff09 	bl	8007438 <_malloc_r>
 8007626:	6028      	str	r0, [r5, #0]
 8007628:	6128      	str	r0, [r5, #16]
 800762a:	b930      	cbnz	r0, 800763a <_svfiprintf_r+0x32>
 800762c:	230c      	movs	r3, #12
 800762e:	603b      	str	r3, [r7, #0]
 8007630:	f04f 30ff 	mov.w	r0, #4294967295
 8007634:	b01d      	add	sp, #116	@ 0x74
 8007636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800763a:	2340      	movs	r3, #64	@ 0x40
 800763c:	616b      	str	r3, [r5, #20]
 800763e:	2300      	movs	r3, #0
 8007640:	9309      	str	r3, [sp, #36]	@ 0x24
 8007642:	2320      	movs	r3, #32
 8007644:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007648:	2330      	movs	r3, #48	@ 0x30
 800764a:	f04f 0901 	mov.w	r9, #1
 800764e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007652:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80077ec <_svfiprintf_r+0x1e4>
 8007656:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800765a:	4623      	mov	r3, r4
 800765c:	469a      	mov	sl, r3
 800765e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007662:	b10a      	cbz	r2, 8007668 <_svfiprintf_r+0x60>
 8007664:	2a25      	cmp	r2, #37	@ 0x25
 8007666:	d1f9      	bne.n	800765c <_svfiprintf_r+0x54>
 8007668:	ebba 0b04 	subs.w	fp, sl, r4
 800766c:	d00b      	beq.n	8007686 <_svfiprintf_r+0x7e>
 800766e:	465b      	mov	r3, fp
 8007670:	4622      	mov	r2, r4
 8007672:	4629      	mov	r1, r5
 8007674:	4638      	mov	r0, r7
 8007676:	f7ff ff6b 	bl	8007550 <__ssputs_r>
 800767a:	3001      	adds	r0, #1
 800767c:	f000 80a7 	beq.w	80077ce <_svfiprintf_r+0x1c6>
 8007680:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007682:	445a      	add	r2, fp
 8007684:	9209      	str	r2, [sp, #36]	@ 0x24
 8007686:	f89a 3000 	ldrb.w	r3, [sl]
 800768a:	2b00      	cmp	r3, #0
 800768c:	f000 809f 	beq.w	80077ce <_svfiprintf_r+0x1c6>
 8007690:	2300      	movs	r3, #0
 8007692:	f04f 32ff 	mov.w	r2, #4294967295
 8007696:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800769a:	f10a 0a01 	add.w	sl, sl, #1
 800769e:	9304      	str	r3, [sp, #16]
 80076a0:	9307      	str	r3, [sp, #28]
 80076a2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80076a6:	931a      	str	r3, [sp, #104]	@ 0x68
 80076a8:	4654      	mov	r4, sl
 80076aa:	2205      	movs	r2, #5
 80076ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076b0:	484e      	ldr	r0, [pc, #312]	@ (80077ec <_svfiprintf_r+0x1e4>)
 80076b2:	f000 fdeb 	bl	800828c <memchr>
 80076b6:	9a04      	ldr	r2, [sp, #16]
 80076b8:	b9d8      	cbnz	r0, 80076f2 <_svfiprintf_r+0xea>
 80076ba:	06d0      	lsls	r0, r2, #27
 80076bc:	bf44      	itt	mi
 80076be:	2320      	movmi	r3, #32
 80076c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80076c4:	0711      	lsls	r1, r2, #28
 80076c6:	bf44      	itt	mi
 80076c8:	232b      	movmi	r3, #43	@ 0x2b
 80076ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80076ce:	f89a 3000 	ldrb.w	r3, [sl]
 80076d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80076d4:	d015      	beq.n	8007702 <_svfiprintf_r+0xfa>
 80076d6:	4654      	mov	r4, sl
 80076d8:	2000      	movs	r0, #0
 80076da:	f04f 0c0a 	mov.w	ip, #10
 80076de:	9a07      	ldr	r2, [sp, #28]
 80076e0:	4621      	mov	r1, r4
 80076e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076e6:	3b30      	subs	r3, #48	@ 0x30
 80076e8:	2b09      	cmp	r3, #9
 80076ea:	d94b      	bls.n	8007784 <_svfiprintf_r+0x17c>
 80076ec:	b1b0      	cbz	r0, 800771c <_svfiprintf_r+0x114>
 80076ee:	9207      	str	r2, [sp, #28]
 80076f0:	e014      	b.n	800771c <_svfiprintf_r+0x114>
 80076f2:	eba0 0308 	sub.w	r3, r0, r8
 80076f6:	fa09 f303 	lsl.w	r3, r9, r3
 80076fa:	4313      	orrs	r3, r2
 80076fc:	46a2      	mov	sl, r4
 80076fe:	9304      	str	r3, [sp, #16]
 8007700:	e7d2      	b.n	80076a8 <_svfiprintf_r+0xa0>
 8007702:	9b03      	ldr	r3, [sp, #12]
 8007704:	1d19      	adds	r1, r3, #4
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	9103      	str	r1, [sp, #12]
 800770a:	2b00      	cmp	r3, #0
 800770c:	bfbb      	ittet	lt
 800770e:	425b      	neglt	r3, r3
 8007710:	f042 0202 	orrlt.w	r2, r2, #2
 8007714:	9307      	strge	r3, [sp, #28]
 8007716:	9307      	strlt	r3, [sp, #28]
 8007718:	bfb8      	it	lt
 800771a:	9204      	strlt	r2, [sp, #16]
 800771c:	7823      	ldrb	r3, [r4, #0]
 800771e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007720:	d10a      	bne.n	8007738 <_svfiprintf_r+0x130>
 8007722:	7863      	ldrb	r3, [r4, #1]
 8007724:	2b2a      	cmp	r3, #42	@ 0x2a
 8007726:	d132      	bne.n	800778e <_svfiprintf_r+0x186>
 8007728:	9b03      	ldr	r3, [sp, #12]
 800772a:	3402      	adds	r4, #2
 800772c:	1d1a      	adds	r2, r3, #4
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	9203      	str	r2, [sp, #12]
 8007732:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007736:	9305      	str	r3, [sp, #20]
 8007738:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80077f0 <_svfiprintf_r+0x1e8>
 800773c:	2203      	movs	r2, #3
 800773e:	4650      	mov	r0, sl
 8007740:	7821      	ldrb	r1, [r4, #0]
 8007742:	f000 fda3 	bl	800828c <memchr>
 8007746:	b138      	cbz	r0, 8007758 <_svfiprintf_r+0x150>
 8007748:	2240      	movs	r2, #64	@ 0x40
 800774a:	9b04      	ldr	r3, [sp, #16]
 800774c:	eba0 000a 	sub.w	r0, r0, sl
 8007750:	4082      	lsls	r2, r0
 8007752:	4313      	orrs	r3, r2
 8007754:	3401      	adds	r4, #1
 8007756:	9304      	str	r3, [sp, #16]
 8007758:	f814 1b01 	ldrb.w	r1, [r4], #1
 800775c:	2206      	movs	r2, #6
 800775e:	4825      	ldr	r0, [pc, #148]	@ (80077f4 <_svfiprintf_r+0x1ec>)
 8007760:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007764:	f000 fd92 	bl	800828c <memchr>
 8007768:	2800      	cmp	r0, #0
 800776a:	d036      	beq.n	80077da <_svfiprintf_r+0x1d2>
 800776c:	4b22      	ldr	r3, [pc, #136]	@ (80077f8 <_svfiprintf_r+0x1f0>)
 800776e:	bb1b      	cbnz	r3, 80077b8 <_svfiprintf_r+0x1b0>
 8007770:	9b03      	ldr	r3, [sp, #12]
 8007772:	3307      	adds	r3, #7
 8007774:	f023 0307 	bic.w	r3, r3, #7
 8007778:	3308      	adds	r3, #8
 800777a:	9303      	str	r3, [sp, #12]
 800777c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800777e:	4433      	add	r3, r6
 8007780:	9309      	str	r3, [sp, #36]	@ 0x24
 8007782:	e76a      	b.n	800765a <_svfiprintf_r+0x52>
 8007784:	460c      	mov	r4, r1
 8007786:	2001      	movs	r0, #1
 8007788:	fb0c 3202 	mla	r2, ip, r2, r3
 800778c:	e7a8      	b.n	80076e0 <_svfiprintf_r+0xd8>
 800778e:	2300      	movs	r3, #0
 8007790:	f04f 0c0a 	mov.w	ip, #10
 8007794:	4619      	mov	r1, r3
 8007796:	3401      	adds	r4, #1
 8007798:	9305      	str	r3, [sp, #20]
 800779a:	4620      	mov	r0, r4
 800779c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077a0:	3a30      	subs	r2, #48	@ 0x30
 80077a2:	2a09      	cmp	r2, #9
 80077a4:	d903      	bls.n	80077ae <_svfiprintf_r+0x1a6>
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d0c6      	beq.n	8007738 <_svfiprintf_r+0x130>
 80077aa:	9105      	str	r1, [sp, #20]
 80077ac:	e7c4      	b.n	8007738 <_svfiprintf_r+0x130>
 80077ae:	4604      	mov	r4, r0
 80077b0:	2301      	movs	r3, #1
 80077b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80077b6:	e7f0      	b.n	800779a <_svfiprintf_r+0x192>
 80077b8:	ab03      	add	r3, sp, #12
 80077ba:	9300      	str	r3, [sp, #0]
 80077bc:	462a      	mov	r2, r5
 80077be:	4638      	mov	r0, r7
 80077c0:	4b0e      	ldr	r3, [pc, #56]	@ (80077fc <_svfiprintf_r+0x1f4>)
 80077c2:	a904      	add	r1, sp, #16
 80077c4:	f3af 8000 	nop.w
 80077c8:	1c42      	adds	r2, r0, #1
 80077ca:	4606      	mov	r6, r0
 80077cc:	d1d6      	bne.n	800777c <_svfiprintf_r+0x174>
 80077ce:	89ab      	ldrh	r3, [r5, #12]
 80077d0:	065b      	lsls	r3, r3, #25
 80077d2:	f53f af2d 	bmi.w	8007630 <_svfiprintf_r+0x28>
 80077d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80077d8:	e72c      	b.n	8007634 <_svfiprintf_r+0x2c>
 80077da:	ab03      	add	r3, sp, #12
 80077dc:	9300      	str	r3, [sp, #0]
 80077de:	462a      	mov	r2, r5
 80077e0:	4638      	mov	r0, r7
 80077e2:	4b06      	ldr	r3, [pc, #24]	@ (80077fc <_svfiprintf_r+0x1f4>)
 80077e4:	a904      	add	r1, sp, #16
 80077e6:	f000 fa4b 	bl	8007c80 <_printf_i>
 80077ea:	e7ed      	b.n	80077c8 <_svfiprintf_r+0x1c0>
 80077ec:	08008b03 	.word	0x08008b03
 80077f0:	08008b09 	.word	0x08008b09
 80077f4:	08008b0d 	.word	0x08008b0d
 80077f8:	00000000 	.word	0x00000000
 80077fc:	08007551 	.word	0x08007551

08007800 <_sungetc_r>:
 8007800:	b538      	push	{r3, r4, r5, lr}
 8007802:	1c4b      	adds	r3, r1, #1
 8007804:	4614      	mov	r4, r2
 8007806:	d103      	bne.n	8007810 <_sungetc_r+0x10>
 8007808:	f04f 35ff 	mov.w	r5, #4294967295
 800780c:	4628      	mov	r0, r5
 800780e:	bd38      	pop	{r3, r4, r5, pc}
 8007810:	8993      	ldrh	r3, [r2, #12]
 8007812:	b2cd      	uxtb	r5, r1
 8007814:	f023 0320 	bic.w	r3, r3, #32
 8007818:	8193      	strh	r3, [r2, #12]
 800781a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800781c:	6852      	ldr	r2, [r2, #4]
 800781e:	b18b      	cbz	r3, 8007844 <_sungetc_r+0x44>
 8007820:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007822:	4293      	cmp	r3, r2
 8007824:	dd08      	ble.n	8007838 <_sungetc_r+0x38>
 8007826:	6823      	ldr	r3, [r4, #0]
 8007828:	1e5a      	subs	r2, r3, #1
 800782a:	6022      	str	r2, [r4, #0]
 800782c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007830:	6863      	ldr	r3, [r4, #4]
 8007832:	3301      	adds	r3, #1
 8007834:	6063      	str	r3, [r4, #4]
 8007836:	e7e9      	b.n	800780c <_sungetc_r+0xc>
 8007838:	4621      	mov	r1, r4
 800783a:	f000 fcc4 	bl	80081c6 <__submore>
 800783e:	2800      	cmp	r0, #0
 8007840:	d0f1      	beq.n	8007826 <_sungetc_r+0x26>
 8007842:	e7e1      	b.n	8007808 <_sungetc_r+0x8>
 8007844:	6921      	ldr	r1, [r4, #16]
 8007846:	6823      	ldr	r3, [r4, #0]
 8007848:	b151      	cbz	r1, 8007860 <_sungetc_r+0x60>
 800784a:	4299      	cmp	r1, r3
 800784c:	d208      	bcs.n	8007860 <_sungetc_r+0x60>
 800784e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8007852:	42a9      	cmp	r1, r5
 8007854:	d104      	bne.n	8007860 <_sungetc_r+0x60>
 8007856:	3b01      	subs	r3, #1
 8007858:	3201      	adds	r2, #1
 800785a:	6023      	str	r3, [r4, #0]
 800785c:	6062      	str	r2, [r4, #4]
 800785e:	e7d5      	b.n	800780c <_sungetc_r+0xc>
 8007860:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8007864:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007868:	6363      	str	r3, [r4, #52]	@ 0x34
 800786a:	2303      	movs	r3, #3
 800786c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800786e:	4623      	mov	r3, r4
 8007870:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007874:	6023      	str	r3, [r4, #0]
 8007876:	2301      	movs	r3, #1
 8007878:	e7dc      	b.n	8007834 <_sungetc_r+0x34>

0800787a <__ssrefill_r>:
 800787a:	b510      	push	{r4, lr}
 800787c:	460c      	mov	r4, r1
 800787e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8007880:	b169      	cbz	r1, 800789e <__ssrefill_r+0x24>
 8007882:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007886:	4299      	cmp	r1, r3
 8007888:	d001      	beq.n	800788e <__ssrefill_r+0x14>
 800788a:	f7ff fd6b 	bl	8007364 <_free_r>
 800788e:	2000      	movs	r0, #0
 8007890:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007892:	6360      	str	r0, [r4, #52]	@ 0x34
 8007894:	6063      	str	r3, [r4, #4]
 8007896:	b113      	cbz	r3, 800789e <__ssrefill_r+0x24>
 8007898:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800789a:	6023      	str	r3, [r4, #0]
 800789c:	bd10      	pop	{r4, pc}
 800789e:	6923      	ldr	r3, [r4, #16]
 80078a0:	f04f 30ff 	mov.w	r0, #4294967295
 80078a4:	6023      	str	r3, [r4, #0]
 80078a6:	2300      	movs	r3, #0
 80078a8:	6063      	str	r3, [r4, #4]
 80078aa:	89a3      	ldrh	r3, [r4, #12]
 80078ac:	f043 0320 	orr.w	r3, r3, #32
 80078b0:	81a3      	strh	r3, [r4, #12]
 80078b2:	e7f3      	b.n	800789c <__ssrefill_r+0x22>

080078b4 <__ssvfiscanf_r>:
 80078b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078b8:	460c      	mov	r4, r1
 80078ba:	2100      	movs	r1, #0
 80078bc:	4606      	mov	r6, r0
 80078be:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 80078c2:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80078c6:	49ab      	ldr	r1, [pc, #684]	@ (8007b74 <__ssvfiscanf_r+0x2c0>)
 80078c8:	f10d 0804 	add.w	r8, sp, #4
 80078cc:	91a0      	str	r1, [sp, #640]	@ 0x280
 80078ce:	49aa      	ldr	r1, [pc, #680]	@ (8007b78 <__ssvfiscanf_r+0x2c4>)
 80078d0:	4faa      	ldr	r7, [pc, #680]	@ (8007b7c <__ssvfiscanf_r+0x2c8>)
 80078d2:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80078d6:	91a1      	str	r1, [sp, #644]	@ 0x284
 80078d8:	9300      	str	r3, [sp, #0]
 80078da:	f892 9000 	ldrb.w	r9, [r2]
 80078de:	f1b9 0f00 	cmp.w	r9, #0
 80078e2:	f000 8159 	beq.w	8007b98 <__ssvfiscanf_r+0x2e4>
 80078e6:	f817 3009 	ldrb.w	r3, [r7, r9]
 80078ea:	1c55      	adds	r5, r2, #1
 80078ec:	f013 0308 	ands.w	r3, r3, #8
 80078f0:	d019      	beq.n	8007926 <__ssvfiscanf_r+0x72>
 80078f2:	6863      	ldr	r3, [r4, #4]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	dd0f      	ble.n	8007918 <__ssvfiscanf_r+0x64>
 80078f8:	6823      	ldr	r3, [r4, #0]
 80078fa:	781a      	ldrb	r2, [r3, #0]
 80078fc:	5cba      	ldrb	r2, [r7, r2]
 80078fe:	0712      	lsls	r2, r2, #28
 8007900:	d401      	bmi.n	8007906 <__ssvfiscanf_r+0x52>
 8007902:	462a      	mov	r2, r5
 8007904:	e7e9      	b.n	80078da <__ssvfiscanf_r+0x26>
 8007906:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8007908:	3301      	adds	r3, #1
 800790a:	3201      	adds	r2, #1
 800790c:	9245      	str	r2, [sp, #276]	@ 0x114
 800790e:	6862      	ldr	r2, [r4, #4]
 8007910:	6023      	str	r3, [r4, #0]
 8007912:	3a01      	subs	r2, #1
 8007914:	6062      	str	r2, [r4, #4]
 8007916:	e7ec      	b.n	80078f2 <__ssvfiscanf_r+0x3e>
 8007918:	4621      	mov	r1, r4
 800791a:	4630      	mov	r0, r6
 800791c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800791e:	4798      	blx	r3
 8007920:	2800      	cmp	r0, #0
 8007922:	d0e9      	beq.n	80078f8 <__ssvfiscanf_r+0x44>
 8007924:	e7ed      	b.n	8007902 <__ssvfiscanf_r+0x4e>
 8007926:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800792a:	f040 8086 	bne.w	8007a3a <__ssvfiscanf_r+0x186>
 800792e:	9341      	str	r3, [sp, #260]	@ 0x104
 8007930:	9343      	str	r3, [sp, #268]	@ 0x10c
 8007932:	7853      	ldrb	r3, [r2, #1]
 8007934:	2b2a      	cmp	r3, #42	@ 0x2a
 8007936:	bf04      	itt	eq
 8007938:	2310      	moveq	r3, #16
 800793a:	1c95      	addeq	r5, r2, #2
 800793c:	f04f 020a 	mov.w	r2, #10
 8007940:	bf08      	it	eq
 8007942:	9341      	streq	r3, [sp, #260]	@ 0x104
 8007944:	46aa      	mov	sl, r5
 8007946:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800794a:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800794e:	2b09      	cmp	r3, #9
 8007950:	d91e      	bls.n	8007990 <__ssvfiscanf_r+0xdc>
 8007952:	f8df b22c 	ldr.w	fp, [pc, #556]	@ 8007b80 <__ssvfiscanf_r+0x2cc>
 8007956:	2203      	movs	r2, #3
 8007958:	4658      	mov	r0, fp
 800795a:	f000 fc97 	bl	800828c <memchr>
 800795e:	b138      	cbz	r0, 8007970 <__ssvfiscanf_r+0xbc>
 8007960:	2301      	movs	r3, #1
 8007962:	4655      	mov	r5, sl
 8007964:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8007966:	eba0 000b 	sub.w	r0, r0, fp
 800796a:	4083      	lsls	r3, r0
 800796c:	4313      	orrs	r3, r2
 800796e:	9341      	str	r3, [sp, #260]	@ 0x104
 8007970:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007974:	2b78      	cmp	r3, #120	@ 0x78
 8007976:	d806      	bhi.n	8007986 <__ssvfiscanf_r+0xd2>
 8007978:	2b57      	cmp	r3, #87	@ 0x57
 800797a:	d810      	bhi.n	800799e <__ssvfiscanf_r+0xea>
 800797c:	2b25      	cmp	r3, #37	@ 0x25
 800797e:	d05c      	beq.n	8007a3a <__ssvfiscanf_r+0x186>
 8007980:	d856      	bhi.n	8007a30 <__ssvfiscanf_r+0x17c>
 8007982:	2b00      	cmp	r3, #0
 8007984:	d074      	beq.n	8007a70 <__ssvfiscanf_r+0x1bc>
 8007986:	2303      	movs	r3, #3
 8007988:	9347      	str	r3, [sp, #284]	@ 0x11c
 800798a:	230a      	movs	r3, #10
 800798c:	9342      	str	r3, [sp, #264]	@ 0x108
 800798e:	e087      	b.n	8007aa0 <__ssvfiscanf_r+0x1ec>
 8007990:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8007992:	4655      	mov	r5, sl
 8007994:	fb02 1103 	mla	r1, r2, r3, r1
 8007998:	3930      	subs	r1, #48	@ 0x30
 800799a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800799c:	e7d2      	b.n	8007944 <__ssvfiscanf_r+0x90>
 800799e:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80079a2:	2a20      	cmp	r2, #32
 80079a4:	d8ef      	bhi.n	8007986 <__ssvfiscanf_r+0xd2>
 80079a6:	a101      	add	r1, pc, #4	@ (adr r1, 80079ac <__ssvfiscanf_r+0xf8>)
 80079a8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80079ac:	08007a7f 	.word	0x08007a7f
 80079b0:	08007987 	.word	0x08007987
 80079b4:	08007987 	.word	0x08007987
 80079b8:	08007ad9 	.word	0x08007ad9
 80079bc:	08007987 	.word	0x08007987
 80079c0:	08007987 	.word	0x08007987
 80079c4:	08007987 	.word	0x08007987
 80079c8:	08007987 	.word	0x08007987
 80079cc:	08007987 	.word	0x08007987
 80079d0:	08007987 	.word	0x08007987
 80079d4:	08007987 	.word	0x08007987
 80079d8:	08007aef 	.word	0x08007aef
 80079dc:	08007ad5 	.word	0x08007ad5
 80079e0:	08007a37 	.word	0x08007a37
 80079e4:	08007a37 	.word	0x08007a37
 80079e8:	08007a37 	.word	0x08007a37
 80079ec:	08007987 	.word	0x08007987
 80079f0:	08007a91 	.word	0x08007a91
 80079f4:	08007987 	.word	0x08007987
 80079f8:	08007987 	.word	0x08007987
 80079fc:	08007987 	.word	0x08007987
 8007a00:	08007987 	.word	0x08007987
 8007a04:	08007aff 	.word	0x08007aff
 8007a08:	08007a99 	.word	0x08007a99
 8007a0c:	08007a77 	.word	0x08007a77
 8007a10:	08007987 	.word	0x08007987
 8007a14:	08007987 	.word	0x08007987
 8007a18:	08007afb 	.word	0x08007afb
 8007a1c:	08007987 	.word	0x08007987
 8007a20:	08007ad5 	.word	0x08007ad5
 8007a24:	08007987 	.word	0x08007987
 8007a28:	08007987 	.word	0x08007987
 8007a2c:	08007a7f 	.word	0x08007a7f
 8007a30:	3b45      	subs	r3, #69	@ 0x45
 8007a32:	2b02      	cmp	r3, #2
 8007a34:	d8a7      	bhi.n	8007986 <__ssvfiscanf_r+0xd2>
 8007a36:	2305      	movs	r3, #5
 8007a38:	e031      	b.n	8007a9e <__ssvfiscanf_r+0x1ea>
 8007a3a:	6863      	ldr	r3, [r4, #4]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	dd0d      	ble.n	8007a5c <__ssvfiscanf_r+0x1a8>
 8007a40:	6823      	ldr	r3, [r4, #0]
 8007a42:	781a      	ldrb	r2, [r3, #0]
 8007a44:	454a      	cmp	r2, r9
 8007a46:	f040 80a7 	bne.w	8007b98 <__ssvfiscanf_r+0x2e4>
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	6862      	ldr	r2, [r4, #4]
 8007a4e:	6023      	str	r3, [r4, #0]
 8007a50:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8007a52:	3a01      	subs	r2, #1
 8007a54:	3301      	adds	r3, #1
 8007a56:	6062      	str	r2, [r4, #4]
 8007a58:	9345      	str	r3, [sp, #276]	@ 0x114
 8007a5a:	e752      	b.n	8007902 <__ssvfiscanf_r+0x4e>
 8007a5c:	4621      	mov	r1, r4
 8007a5e:	4630      	mov	r0, r6
 8007a60:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007a62:	4798      	blx	r3
 8007a64:	2800      	cmp	r0, #0
 8007a66:	d0eb      	beq.n	8007a40 <__ssvfiscanf_r+0x18c>
 8007a68:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8007a6a:	2800      	cmp	r0, #0
 8007a6c:	f040 808c 	bne.w	8007b88 <__ssvfiscanf_r+0x2d4>
 8007a70:	f04f 30ff 	mov.w	r0, #4294967295
 8007a74:	e08c      	b.n	8007b90 <__ssvfiscanf_r+0x2dc>
 8007a76:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8007a78:	f042 0220 	orr.w	r2, r2, #32
 8007a7c:	9241      	str	r2, [sp, #260]	@ 0x104
 8007a7e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8007a80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a84:	9241      	str	r2, [sp, #260]	@ 0x104
 8007a86:	2210      	movs	r2, #16
 8007a88:	2b6e      	cmp	r3, #110	@ 0x6e
 8007a8a:	9242      	str	r2, [sp, #264]	@ 0x108
 8007a8c:	d902      	bls.n	8007a94 <__ssvfiscanf_r+0x1e0>
 8007a8e:	e005      	b.n	8007a9c <__ssvfiscanf_r+0x1e8>
 8007a90:	2300      	movs	r3, #0
 8007a92:	9342      	str	r3, [sp, #264]	@ 0x108
 8007a94:	2303      	movs	r3, #3
 8007a96:	e002      	b.n	8007a9e <__ssvfiscanf_r+0x1ea>
 8007a98:	2308      	movs	r3, #8
 8007a9a:	9342      	str	r3, [sp, #264]	@ 0x108
 8007a9c:	2304      	movs	r3, #4
 8007a9e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8007aa0:	6863      	ldr	r3, [r4, #4]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	dd39      	ble.n	8007b1a <__ssvfiscanf_r+0x266>
 8007aa6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8007aa8:	0659      	lsls	r1, r3, #25
 8007aaa:	d404      	bmi.n	8007ab6 <__ssvfiscanf_r+0x202>
 8007aac:	6823      	ldr	r3, [r4, #0]
 8007aae:	781a      	ldrb	r2, [r3, #0]
 8007ab0:	5cba      	ldrb	r2, [r7, r2]
 8007ab2:	0712      	lsls	r2, r2, #28
 8007ab4:	d438      	bmi.n	8007b28 <__ssvfiscanf_r+0x274>
 8007ab6:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8007ab8:	2b02      	cmp	r3, #2
 8007aba:	dc47      	bgt.n	8007b4c <__ssvfiscanf_r+0x298>
 8007abc:	466b      	mov	r3, sp
 8007abe:	4622      	mov	r2, r4
 8007ac0:	4630      	mov	r0, r6
 8007ac2:	a941      	add	r1, sp, #260	@ 0x104
 8007ac4:	f000 f9fa 	bl	8007ebc <_scanf_chars>
 8007ac8:	2801      	cmp	r0, #1
 8007aca:	d065      	beq.n	8007b98 <__ssvfiscanf_r+0x2e4>
 8007acc:	2802      	cmp	r0, #2
 8007ace:	f47f af18 	bne.w	8007902 <__ssvfiscanf_r+0x4e>
 8007ad2:	e7c9      	b.n	8007a68 <__ssvfiscanf_r+0x1b4>
 8007ad4:	220a      	movs	r2, #10
 8007ad6:	e7d7      	b.n	8007a88 <__ssvfiscanf_r+0x1d4>
 8007ad8:	4629      	mov	r1, r5
 8007ada:	4640      	mov	r0, r8
 8007adc:	f000 fb3a 	bl	8008154 <__sccl>
 8007ae0:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8007ae2:	4605      	mov	r5, r0
 8007ae4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ae8:	9341      	str	r3, [sp, #260]	@ 0x104
 8007aea:	2301      	movs	r3, #1
 8007aec:	e7d7      	b.n	8007a9e <__ssvfiscanf_r+0x1ea>
 8007aee:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8007af0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007af4:	9341      	str	r3, [sp, #260]	@ 0x104
 8007af6:	2300      	movs	r3, #0
 8007af8:	e7d1      	b.n	8007a9e <__ssvfiscanf_r+0x1ea>
 8007afa:	2302      	movs	r3, #2
 8007afc:	e7cf      	b.n	8007a9e <__ssvfiscanf_r+0x1ea>
 8007afe:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8007b00:	06c3      	lsls	r3, r0, #27
 8007b02:	f53f aefe 	bmi.w	8007902 <__ssvfiscanf_r+0x4e>
 8007b06:	9b00      	ldr	r3, [sp, #0]
 8007b08:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8007b0a:	1d19      	adds	r1, r3, #4
 8007b0c:	9100      	str	r1, [sp, #0]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	07c0      	lsls	r0, r0, #31
 8007b12:	bf4c      	ite	mi
 8007b14:	801a      	strhmi	r2, [r3, #0]
 8007b16:	601a      	strpl	r2, [r3, #0]
 8007b18:	e6f3      	b.n	8007902 <__ssvfiscanf_r+0x4e>
 8007b1a:	4621      	mov	r1, r4
 8007b1c:	4630      	mov	r0, r6
 8007b1e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007b20:	4798      	blx	r3
 8007b22:	2800      	cmp	r0, #0
 8007b24:	d0bf      	beq.n	8007aa6 <__ssvfiscanf_r+0x1f2>
 8007b26:	e79f      	b.n	8007a68 <__ssvfiscanf_r+0x1b4>
 8007b28:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8007b2a:	3201      	adds	r2, #1
 8007b2c:	9245      	str	r2, [sp, #276]	@ 0x114
 8007b2e:	6862      	ldr	r2, [r4, #4]
 8007b30:	3a01      	subs	r2, #1
 8007b32:	2a00      	cmp	r2, #0
 8007b34:	6062      	str	r2, [r4, #4]
 8007b36:	dd02      	ble.n	8007b3e <__ssvfiscanf_r+0x28a>
 8007b38:	3301      	adds	r3, #1
 8007b3a:	6023      	str	r3, [r4, #0]
 8007b3c:	e7b6      	b.n	8007aac <__ssvfiscanf_r+0x1f8>
 8007b3e:	4621      	mov	r1, r4
 8007b40:	4630      	mov	r0, r6
 8007b42:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007b44:	4798      	blx	r3
 8007b46:	2800      	cmp	r0, #0
 8007b48:	d0b0      	beq.n	8007aac <__ssvfiscanf_r+0x1f8>
 8007b4a:	e78d      	b.n	8007a68 <__ssvfiscanf_r+0x1b4>
 8007b4c:	2b04      	cmp	r3, #4
 8007b4e:	dc06      	bgt.n	8007b5e <__ssvfiscanf_r+0x2aa>
 8007b50:	466b      	mov	r3, sp
 8007b52:	4622      	mov	r2, r4
 8007b54:	4630      	mov	r0, r6
 8007b56:	a941      	add	r1, sp, #260	@ 0x104
 8007b58:	f000 fa0a 	bl	8007f70 <_scanf_i>
 8007b5c:	e7b4      	b.n	8007ac8 <__ssvfiscanf_r+0x214>
 8007b5e:	4b09      	ldr	r3, [pc, #36]	@ (8007b84 <__ssvfiscanf_r+0x2d0>)
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	f43f aece 	beq.w	8007902 <__ssvfiscanf_r+0x4e>
 8007b66:	466b      	mov	r3, sp
 8007b68:	4622      	mov	r2, r4
 8007b6a:	4630      	mov	r0, r6
 8007b6c:	a941      	add	r1, sp, #260	@ 0x104
 8007b6e:	f3af 8000 	nop.w
 8007b72:	e7a9      	b.n	8007ac8 <__ssvfiscanf_r+0x214>
 8007b74:	08007801 	.word	0x08007801
 8007b78:	0800787b 	.word	0x0800787b
 8007b7c:	08008a03 	.word	0x08008a03
 8007b80:	08008b09 	.word	0x08008b09
 8007b84:	00000000 	.word	0x00000000
 8007b88:	89a3      	ldrh	r3, [r4, #12]
 8007b8a:	065b      	lsls	r3, r3, #25
 8007b8c:	f53f af70 	bmi.w	8007a70 <__ssvfiscanf_r+0x1bc>
 8007b90:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8007b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b98:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8007b9a:	e7f9      	b.n	8007b90 <__ssvfiscanf_r+0x2dc>

08007b9c <_printf_common>:
 8007b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ba0:	4616      	mov	r6, r2
 8007ba2:	4698      	mov	r8, r3
 8007ba4:	688a      	ldr	r2, [r1, #8]
 8007ba6:	690b      	ldr	r3, [r1, #16]
 8007ba8:	4607      	mov	r7, r0
 8007baa:	4293      	cmp	r3, r2
 8007bac:	bfb8      	it	lt
 8007bae:	4613      	movlt	r3, r2
 8007bb0:	6033      	str	r3, [r6, #0]
 8007bb2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007bb6:	460c      	mov	r4, r1
 8007bb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007bbc:	b10a      	cbz	r2, 8007bc2 <_printf_common+0x26>
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	6033      	str	r3, [r6, #0]
 8007bc2:	6823      	ldr	r3, [r4, #0]
 8007bc4:	0699      	lsls	r1, r3, #26
 8007bc6:	bf42      	ittt	mi
 8007bc8:	6833      	ldrmi	r3, [r6, #0]
 8007bca:	3302      	addmi	r3, #2
 8007bcc:	6033      	strmi	r3, [r6, #0]
 8007bce:	6825      	ldr	r5, [r4, #0]
 8007bd0:	f015 0506 	ands.w	r5, r5, #6
 8007bd4:	d106      	bne.n	8007be4 <_printf_common+0x48>
 8007bd6:	f104 0a19 	add.w	sl, r4, #25
 8007bda:	68e3      	ldr	r3, [r4, #12]
 8007bdc:	6832      	ldr	r2, [r6, #0]
 8007bde:	1a9b      	subs	r3, r3, r2
 8007be0:	42ab      	cmp	r3, r5
 8007be2:	dc2b      	bgt.n	8007c3c <_printf_common+0xa0>
 8007be4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007be8:	6822      	ldr	r2, [r4, #0]
 8007bea:	3b00      	subs	r3, #0
 8007bec:	bf18      	it	ne
 8007bee:	2301      	movne	r3, #1
 8007bf0:	0692      	lsls	r2, r2, #26
 8007bf2:	d430      	bmi.n	8007c56 <_printf_common+0xba>
 8007bf4:	4641      	mov	r1, r8
 8007bf6:	4638      	mov	r0, r7
 8007bf8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007bfc:	47c8      	blx	r9
 8007bfe:	3001      	adds	r0, #1
 8007c00:	d023      	beq.n	8007c4a <_printf_common+0xae>
 8007c02:	6823      	ldr	r3, [r4, #0]
 8007c04:	6922      	ldr	r2, [r4, #16]
 8007c06:	f003 0306 	and.w	r3, r3, #6
 8007c0a:	2b04      	cmp	r3, #4
 8007c0c:	bf14      	ite	ne
 8007c0e:	2500      	movne	r5, #0
 8007c10:	6833      	ldreq	r3, [r6, #0]
 8007c12:	f04f 0600 	mov.w	r6, #0
 8007c16:	bf08      	it	eq
 8007c18:	68e5      	ldreq	r5, [r4, #12]
 8007c1a:	f104 041a 	add.w	r4, r4, #26
 8007c1e:	bf08      	it	eq
 8007c20:	1aed      	subeq	r5, r5, r3
 8007c22:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007c26:	bf08      	it	eq
 8007c28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	bfc4      	itt	gt
 8007c30:	1a9b      	subgt	r3, r3, r2
 8007c32:	18ed      	addgt	r5, r5, r3
 8007c34:	42b5      	cmp	r5, r6
 8007c36:	d11a      	bne.n	8007c6e <_printf_common+0xd2>
 8007c38:	2000      	movs	r0, #0
 8007c3a:	e008      	b.n	8007c4e <_printf_common+0xb2>
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	4652      	mov	r2, sl
 8007c40:	4641      	mov	r1, r8
 8007c42:	4638      	mov	r0, r7
 8007c44:	47c8      	blx	r9
 8007c46:	3001      	adds	r0, #1
 8007c48:	d103      	bne.n	8007c52 <_printf_common+0xb6>
 8007c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c52:	3501      	adds	r5, #1
 8007c54:	e7c1      	b.n	8007bda <_printf_common+0x3e>
 8007c56:	2030      	movs	r0, #48	@ 0x30
 8007c58:	18e1      	adds	r1, r4, r3
 8007c5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007c5e:	1c5a      	adds	r2, r3, #1
 8007c60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007c64:	4422      	add	r2, r4
 8007c66:	3302      	adds	r3, #2
 8007c68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007c6c:	e7c2      	b.n	8007bf4 <_printf_common+0x58>
 8007c6e:	2301      	movs	r3, #1
 8007c70:	4622      	mov	r2, r4
 8007c72:	4641      	mov	r1, r8
 8007c74:	4638      	mov	r0, r7
 8007c76:	47c8      	blx	r9
 8007c78:	3001      	adds	r0, #1
 8007c7a:	d0e6      	beq.n	8007c4a <_printf_common+0xae>
 8007c7c:	3601      	adds	r6, #1
 8007c7e:	e7d9      	b.n	8007c34 <_printf_common+0x98>

08007c80 <_printf_i>:
 8007c80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c84:	7e0f      	ldrb	r7, [r1, #24]
 8007c86:	4691      	mov	r9, r2
 8007c88:	2f78      	cmp	r7, #120	@ 0x78
 8007c8a:	4680      	mov	r8, r0
 8007c8c:	460c      	mov	r4, r1
 8007c8e:	469a      	mov	sl, r3
 8007c90:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007c92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007c96:	d807      	bhi.n	8007ca8 <_printf_i+0x28>
 8007c98:	2f62      	cmp	r7, #98	@ 0x62
 8007c9a:	d80a      	bhi.n	8007cb2 <_printf_i+0x32>
 8007c9c:	2f00      	cmp	r7, #0
 8007c9e:	f000 80d1 	beq.w	8007e44 <_printf_i+0x1c4>
 8007ca2:	2f58      	cmp	r7, #88	@ 0x58
 8007ca4:	f000 80b8 	beq.w	8007e18 <_printf_i+0x198>
 8007ca8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007cac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007cb0:	e03a      	b.n	8007d28 <_printf_i+0xa8>
 8007cb2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007cb6:	2b15      	cmp	r3, #21
 8007cb8:	d8f6      	bhi.n	8007ca8 <_printf_i+0x28>
 8007cba:	a101      	add	r1, pc, #4	@ (adr r1, 8007cc0 <_printf_i+0x40>)
 8007cbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007cc0:	08007d19 	.word	0x08007d19
 8007cc4:	08007d2d 	.word	0x08007d2d
 8007cc8:	08007ca9 	.word	0x08007ca9
 8007ccc:	08007ca9 	.word	0x08007ca9
 8007cd0:	08007ca9 	.word	0x08007ca9
 8007cd4:	08007ca9 	.word	0x08007ca9
 8007cd8:	08007d2d 	.word	0x08007d2d
 8007cdc:	08007ca9 	.word	0x08007ca9
 8007ce0:	08007ca9 	.word	0x08007ca9
 8007ce4:	08007ca9 	.word	0x08007ca9
 8007ce8:	08007ca9 	.word	0x08007ca9
 8007cec:	08007e2b 	.word	0x08007e2b
 8007cf0:	08007d57 	.word	0x08007d57
 8007cf4:	08007de5 	.word	0x08007de5
 8007cf8:	08007ca9 	.word	0x08007ca9
 8007cfc:	08007ca9 	.word	0x08007ca9
 8007d00:	08007e4d 	.word	0x08007e4d
 8007d04:	08007ca9 	.word	0x08007ca9
 8007d08:	08007d57 	.word	0x08007d57
 8007d0c:	08007ca9 	.word	0x08007ca9
 8007d10:	08007ca9 	.word	0x08007ca9
 8007d14:	08007ded 	.word	0x08007ded
 8007d18:	6833      	ldr	r3, [r6, #0]
 8007d1a:	1d1a      	adds	r2, r3, #4
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	6032      	str	r2, [r6, #0]
 8007d20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007d28:	2301      	movs	r3, #1
 8007d2a:	e09c      	b.n	8007e66 <_printf_i+0x1e6>
 8007d2c:	6833      	ldr	r3, [r6, #0]
 8007d2e:	6820      	ldr	r0, [r4, #0]
 8007d30:	1d19      	adds	r1, r3, #4
 8007d32:	6031      	str	r1, [r6, #0]
 8007d34:	0606      	lsls	r6, r0, #24
 8007d36:	d501      	bpl.n	8007d3c <_printf_i+0xbc>
 8007d38:	681d      	ldr	r5, [r3, #0]
 8007d3a:	e003      	b.n	8007d44 <_printf_i+0xc4>
 8007d3c:	0645      	lsls	r5, r0, #25
 8007d3e:	d5fb      	bpl.n	8007d38 <_printf_i+0xb8>
 8007d40:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007d44:	2d00      	cmp	r5, #0
 8007d46:	da03      	bge.n	8007d50 <_printf_i+0xd0>
 8007d48:	232d      	movs	r3, #45	@ 0x2d
 8007d4a:	426d      	negs	r5, r5
 8007d4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d50:	230a      	movs	r3, #10
 8007d52:	4858      	ldr	r0, [pc, #352]	@ (8007eb4 <_printf_i+0x234>)
 8007d54:	e011      	b.n	8007d7a <_printf_i+0xfa>
 8007d56:	6821      	ldr	r1, [r4, #0]
 8007d58:	6833      	ldr	r3, [r6, #0]
 8007d5a:	0608      	lsls	r0, r1, #24
 8007d5c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007d60:	d402      	bmi.n	8007d68 <_printf_i+0xe8>
 8007d62:	0649      	lsls	r1, r1, #25
 8007d64:	bf48      	it	mi
 8007d66:	b2ad      	uxthmi	r5, r5
 8007d68:	2f6f      	cmp	r7, #111	@ 0x6f
 8007d6a:	6033      	str	r3, [r6, #0]
 8007d6c:	bf14      	ite	ne
 8007d6e:	230a      	movne	r3, #10
 8007d70:	2308      	moveq	r3, #8
 8007d72:	4850      	ldr	r0, [pc, #320]	@ (8007eb4 <_printf_i+0x234>)
 8007d74:	2100      	movs	r1, #0
 8007d76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007d7a:	6866      	ldr	r6, [r4, #4]
 8007d7c:	2e00      	cmp	r6, #0
 8007d7e:	60a6      	str	r6, [r4, #8]
 8007d80:	db05      	blt.n	8007d8e <_printf_i+0x10e>
 8007d82:	6821      	ldr	r1, [r4, #0]
 8007d84:	432e      	orrs	r6, r5
 8007d86:	f021 0104 	bic.w	r1, r1, #4
 8007d8a:	6021      	str	r1, [r4, #0]
 8007d8c:	d04b      	beq.n	8007e26 <_printf_i+0x1a6>
 8007d8e:	4616      	mov	r6, r2
 8007d90:	fbb5 f1f3 	udiv	r1, r5, r3
 8007d94:	fb03 5711 	mls	r7, r3, r1, r5
 8007d98:	5dc7      	ldrb	r7, [r0, r7]
 8007d9a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007d9e:	462f      	mov	r7, r5
 8007da0:	42bb      	cmp	r3, r7
 8007da2:	460d      	mov	r5, r1
 8007da4:	d9f4      	bls.n	8007d90 <_printf_i+0x110>
 8007da6:	2b08      	cmp	r3, #8
 8007da8:	d10b      	bne.n	8007dc2 <_printf_i+0x142>
 8007daa:	6823      	ldr	r3, [r4, #0]
 8007dac:	07df      	lsls	r7, r3, #31
 8007dae:	d508      	bpl.n	8007dc2 <_printf_i+0x142>
 8007db0:	6923      	ldr	r3, [r4, #16]
 8007db2:	6861      	ldr	r1, [r4, #4]
 8007db4:	4299      	cmp	r1, r3
 8007db6:	bfde      	ittt	le
 8007db8:	2330      	movle	r3, #48	@ 0x30
 8007dba:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007dbe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007dc2:	1b92      	subs	r2, r2, r6
 8007dc4:	6122      	str	r2, [r4, #16]
 8007dc6:	464b      	mov	r3, r9
 8007dc8:	4621      	mov	r1, r4
 8007dca:	4640      	mov	r0, r8
 8007dcc:	f8cd a000 	str.w	sl, [sp]
 8007dd0:	aa03      	add	r2, sp, #12
 8007dd2:	f7ff fee3 	bl	8007b9c <_printf_common>
 8007dd6:	3001      	adds	r0, #1
 8007dd8:	d14a      	bne.n	8007e70 <_printf_i+0x1f0>
 8007dda:	f04f 30ff 	mov.w	r0, #4294967295
 8007dde:	b004      	add	sp, #16
 8007de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007de4:	6823      	ldr	r3, [r4, #0]
 8007de6:	f043 0320 	orr.w	r3, r3, #32
 8007dea:	6023      	str	r3, [r4, #0]
 8007dec:	2778      	movs	r7, #120	@ 0x78
 8007dee:	4832      	ldr	r0, [pc, #200]	@ (8007eb8 <_printf_i+0x238>)
 8007df0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007df4:	6823      	ldr	r3, [r4, #0]
 8007df6:	6831      	ldr	r1, [r6, #0]
 8007df8:	061f      	lsls	r7, r3, #24
 8007dfa:	f851 5b04 	ldr.w	r5, [r1], #4
 8007dfe:	d402      	bmi.n	8007e06 <_printf_i+0x186>
 8007e00:	065f      	lsls	r7, r3, #25
 8007e02:	bf48      	it	mi
 8007e04:	b2ad      	uxthmi	r5, r5
 8007e06:	6031      	str	r1, [r6, #0]
 8007e08:	07d9      	lsls	r1, r3, #31
 8007e0a:	bf44      	itt	mi
 8007e0c:	f043 0320 	orrmi.w	r3, r3, #32
 8007e10:	6023      	strmi	r3, [r4, #0]
 8007e12:	b11d      	cbz	r5, 8007e1c <_printf_i+0x19c>
 8007e14:	2310      	movs	r3, #16
 8007e16:	e7ad      	b.n	8007d74 <_printf_i+0xf4>
 8007e18:	4826      	ldr	r0, [pc, #152]	@ (8007eb4 <_printf_i+0x234>)
 8007e1a:	e7e9      	b.n	8007df0 <_printf_i+0x170>
 8007e1c:	6823      	ldr	r3, [r4, #0]
 8007e1e:	f023 0320 	bic.w	r3, r3, #32
 8007e22:	6023      	str	r3, [r4, #0]
 8007e24:	e7f6      	b.n	8007e14 <_printf_i+0x194>
 8007e26:	4616      	mov	r6, r2
 8007e28:	e7bd      	b.n	8007da6 <_printf_i+0x126>
 8007e2a:	6833      	ldr	r3, [r6, #0]
 8007e2c:	6825      	ldr	r5, [r4, #0]
 8007e2e:	1d18      	adds	r0, r3, #4
 8007e30:	6961      	ldr	r1, [r4, #20]
 8007e32:	6030      	str	r0, [r6, #0]
 8007e34:	062e      	lsls	r6, r5, #24
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	d501      	bpl.n	8007e3e <_printf_i+0x1be>
 8007e3a:	6019      	str	r1, [r3, #0]
 8007e3c:	e002      	b.n	8007e44 <_printf_i+0x1c4>
 8007e3e:	0668      	lsls	r0, r5, #25
 8007e40:	d5fb      	bpl.n	8007e3a <_printf_i+0x1ba>
 8007e42:	8019      	strh	r1, [r3, #0]
 8007e44:	2300      	movs	r3, #0
 8007e46:	4616      	mov	r6, r2
 8007e48:	6123      	str	r3, [r4, #16]
 8007e4a:	e7bc      	b.n	8007dc6 <_printf_i+0x146>
 8007e4c:	6833      	ldr	r3, [r6, #0]
 8007e4e:	2100      	movs	r1, #0
 8007e50:	1d1a      	adds	r2, r3, #4
 8007e52:	6032      	str	r2, [r6, #0]
 8007e54:	681e      	ldr	r6, [r3, #0]
 8007e56:	6862      	ldr	r2, [r4, #4]
 8007e58:	4630      	mov	r0, r6
 8007e5a:	f000 fa17 	bl	800828c <memchr>
 8007e5e:	b108      	cbz	r0, 8007e64 <_printf_i+0x1e4>
 8007e60:	1b80      	subs	r0, r0, r6
 8007e62:	6060      	str	r0, [r4, #4]
 8007e64:	6863      	ldr	r3, [r4, #4]
 8007e66:	6123      	str	r3, [r4, #16]
 8007e68:	2300      	movs	r3, #0
 8007e6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e6e:	e7aa      	b.n	8007dc6 <_printf_i+0x146>
 8007e70:	4632      	mov	r2, r6
 8007e72:	4649      	mov	r1, r9
 8007e74:	4640      	mov	r0, r8
 8007e76:	6923      	ldr	r3, [r4, #16]
 8007e78:	47d0      	blx	sl
 8007e7a:	3001      	adds	r0, #1
 8007e7c:	d0ad      	beq.n	8007dda <_printf_i+0x15a>
 8007e7e:	6823      	ldr	r3, [r4, #0]
 8007e80:	079b      	lsls	r3, r3, #30
 8007e82:	d413      	bmi.n	8007eac <_printf_i+0x22c>
 8007e84:	68e0      	ldr	r0, [r4, #12]
 8007e86:	9b03      	ldr	r3, [sp, #12]
 8007e88:	4298      	cmp	r0, r3
 8007e8a:	bfb8      	it	lt
 8007e8c:	4618      	movlt	r0, r3
 8007e8e:	e7a6      	b.n	8007dde <_printf_i+0x15e>
 8007e90:	2301      	movs	r3, #1
 8007e92:	4632      	mov	r2, r6
 8007e94:	4649      	mov	r1, r9
 8007e96:	4640      	mov	r0, r8
 8007e98:	47d0      	blx	sl
 8007e9a:	3001      	adds	r0, #1
 8007e9c:	d09d      	beq.n	8007dda <_printf_i+0x15a>
 8007e9e:	3501      	adds	r5, #1
 8007ea0:	68e3      	ldr	r3, [r4, #12]
 8007ea2:	9903      	ldr	r1, [sp, #12]
 8007ea4:	1a5b      	subs	r3, r3, r1
 8007ea6:	42ab      	cmp	r3, r5
 8007ea8:	dcf2      	bgt.n	8007e90 <_printf_i+0x210>
 8007eaa:	e7eb      	b.n	8007e84 <_printf_i+0x204>
 8007eac:	2500      	movs	r5, #0
 8007eae:	f104 0619 	add.w	r6, r4, #25
 8007eb2:	e7f5      	b.n	8007ea0 <_printf_i+0x220>
 8007eb4:	08008b14 	.word	0x08008b14
 8007eb8:	08008b25 	.word	0x08008b25

08007ebc <_scanf_chars>:
 8007ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ec0:	4615      	mov	r5, r2
 8007ec2:	688a      	ldr	r2, [r1, #8]
 8007ec4:	4680      	mov	r8, r0
 8007ec6:	460c      	mov	r4, r1
 8007ec8:	b932      	cbnz	r2, 8007ed8 <_scanf_chars+0x1c>
 8007eca:	698a      	ldr	r2, [r1, #24]
 8007ecc:	2a00      	cmp	r2, #0
 8007ece:	bf14      	ite	ne
 8007ed0:	f04f 32ff 	movne.w	r2, #4294967295
 8007ed4:	2201      	moveq	r2, #1
 8007ed6:	608a      	str	r2, [r1, #8]
 8007ed8:	2700      	movs	r7, #0
 8007eda:	6822      	ldr	r2, [r4, #0]
 8007edc:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8007f6c <_scanf_chars+0xb0>
 8007ee0:	06d1      	lsls	r1, r2, #27
 8007ee2:	bf5f      	itttt	pl
 8007ee4:	681a      	ldrpl	r2, [r3, #0]
 8007ee6:	1d11      	addpl	r1, r2, #4
 8007ee8:	6019      	strpl	r1, [r3, #0]
 8007eea:	6816      	ldrpl	r6, [r2, #0]
 8007eec:	69a0      	ldr	r0, [r4, #24]
 8007eee:	b188      	cbz	r0, 8007f14 <_scanf_chars+0x58>
 8007ef0:	2801      	cmp	r0, #1
 8007ef2:	d107      	bne.n	8007f04 <_scanf_chars+0x48>
 8007ef4:	682b      	ldr	r3, [r5, #0]
 8007ef6:	781a      	ldrb	r2, [r3, #0]
 8007ef8:	6963      	ldr	r3, [r4, #20]
 8007efa:	5c9b      	ldrb	r3, [r3, r2]
 8007efc:	b953      	cbnz	r3, 8007f14 <_scanf_chars+0x58>
 8007efe:	2f00      	cmp	r7, #0
 8007f00:	d031      	beq.n	8007f66 <_scanf_chars+0xaa>
 8007f02:	e022      	b.n	8007f4a <_scanf_chars+0x8e>
 8007f04:	2802      	cmp	r0, #2
 8007f06:	d120      	bne.n	8007f4a <_scanf_chars+0x8e>
 8007f08:	682b      	ldr	r3, [r5, #0]
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8007f10:	071b      	lsls	r3, r3, #28
 8007f12:	d41a      	bmi.n	8007f4a <_scanf_chars+0x8e>
 8007f14:	6823      	ldr	r3, [r4, #0]
 8007f16:	3701      	adds	r7, #1
 8007f18:	06da      	lsls	r2, r3, #27
 8007f1a:	bf5e      	ittt	pl
 8007f1c:	682b      	ldrpl	r3, [r5, #0]
 8007f1e:	781b      	ldrbpl	r3, [r3, #0]
 8007f20:	f806 3b01 	strbpl.w	r3, [r6], #1
 8007f24:	682a      	ldr	r2, [r5, #0]
 8007f26:	686b      	ldr	r3, [r5, #4]
 8007f28:	3201      	adds	r2, #1
 8007f2a:	602a      	str	r2, [r5, #0]
 8007f2c:	68a2      	ldr	r2, [r4, #8]
 8007f2e:	3b01      	subs	r3, #1
 8007f30:	3a01      	subs	r2, #1
 8007f32:	606b      	str	r3, [r5, #4]
 8007f34:	60a2      	str	r2, [r4, #8]
 8007f36:	b142      	cbz	r2, 8007f4a <_scanf_chars+0x8e>
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	dcd7      	bgt.n	8007eec <_scanf_chars+0x30>
 8007f3c:	4629      	mov	r1, r5
 8007f3e:	4640      	mov	r0, r8
 8007f40:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007f44:	4798      	blx	r3
 8007f46:	2800      	cmp	r0, #0
 8007f48:	d0d0      	beq.n	8007eec <_scanf_chars+0x30>
 8007f4a:	6823      	ldr	r3, [r4, #0]
 8007f4c:	f013 0310 	ands.w	r3, r3, #16
 8007f50:	d105      	bne.n	8007f5e <_scanf_chars+0xa2>
 8007f52:	68e2      	ldr	r2, [r4, #12]
 8007f54:	3201      	adds	r2, #1
 8007f56:	60e2      	str	r2, [r4, #12]
 8007f58:	69a2      	ldr	r2, [r4, #24]
 8007f5a:	b102      	cbz	r2, 8007f5e <_scanf_chars+0xa2>
 8007f5c:	7033      	strb	r3, [r6, #0]
 8007f5e:	2000      	movs	r0, #0
 8007f60:	6923      	ldr	r3, [r4, #16]
 8007f62:	443b      	add	r3, r7
 8007f64:	6123      	str	r3, [r4, #16]
 8007f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f6a:	bf00      	nop
 8007f6c:	08008a03 	.word	0x08008a03

08007f70 <_scanf_i>:
 8007f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f74:	460c      	mov	r4, r1
 8007f76:	4698      	mov	r8, r3
 8007f78:	4b72      	ldr	r3, [pc, #456]	@ (8008144 <_scanf_i+0x1d4>)
 8007f7a:	b087      	sub	sp, #28
 8007f7c:	4682      	mov	sl, r0
 8007f7e:	4616      	mov	r6, r2
 8007f80:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007f84:	ab03      	add	r3, sp, #12
 8007f86:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007f8a:	4b6f      	ldr	r3, [pc, #444]	@ (8008148 <_scanf_i+0x1d8>)
 8007f8c:	69a1      	ldr	r1, [r4, #24]
 8007f8e:	4a6f      	ldr	r2, [pc, #444]	@ (800814c <_scanf_i+0x1dc>)
 8007f90:	4627      	mov	r7, r4
 8007f92:	2903      	cmp	r1, #3
 8007f94:	bf08      	it	eq
 8007f96:	461a      	moveq	r2, r3
 8007f98:	68a3      	ldr	r3, [r4, #8]
 8007f9a:	9201      	str	r2, [sp, #4]
 8007f9c:	1e5a      	subs	r2, r3, #1
 8007f9e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007fa2:	bf81      	itttt	hi
 8007fa4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007fa8:	eb03 0905 	addhi.w	r9, r3, r5
 8007fac:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007fb0:	60a3      	strhi	r3, [r4, #8]
 8007fb2:	f857 3b1c 	ldr.w	r3, [r7], #28
 8007fb6:	bf98      	it	ls
 8007fb8:	f04f 0900 	movls.w	r9, #0
 8007fbc:	463d      	mov	r5, r7
 8007fbe:	f04f 0b00 	mov.w	fp, #0
 8007fc2:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8007fc6:	6023      	str	r3, [r4, #0]
 8007fc8:	6831      	ldr	r1, [r6, #0]
 8007fca:	ab03      	add	r3, sp, #12
 8007fcc:	2202      	movs	r2, #2
 8007fce:	7809      	ldrb	r1, [r1, #0]
 8007fd0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8007fd4:	f000 f95a 	bl	800828c <memchr>
 8007fd8:	b328      	cbz	r0, 8008026 <_scanf_i+0xb6>
 8007fda:	f1bb 0f01 	cmp.w	fp, #1
 8007fde:	d159      	bne.n	8008094 <_scanf_i+0x124>
 8007fe0:	6862      	ldr	r2, [r4, #4]
 8007fe2:	b92a      	cbnz	r2, 8007ff0 <_scanf_i+0x80>
 8007fe4:	2108      	movs	r1, #8
 8007fe6:	6822      	ldr	r2, [r4, #0]
 8007fe8:	6061      	str	r1, [r4, #4]
 8007fea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007fee:	6022      	str	r2, [r4, #0]
 8007ff0:	6822      	ldr	r2, [r4, #0]
 8007ff2:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8007ff6:	6022      	str	r2, [r4, #0]
 8007ff8:	68a2      	ldr	r2, [r4, #8]
 8007ffa:	1e51      	subs	r1, r2, #1
 8007ffc:	60a1      	str	r1, [r4, #8]
 8007ffe:	b192      	cbz	r2, 8008026 <_scanf_i+0xb6>
 8008000:	6832      	ldr	r2, [r6, #0]
 8008002:	1c51      	adds	r1, r2, #1
 8008004:	6031      	str	r1, [r6, #0]
 8008006:	7812      	ldrb	r2, [r2, #0]
 8008008:	f805 2b01 	strb.w	r2, [r5], #1
 800800c:	6872      	ldr	r2, [r6, #4]
 800800e:	3a01      	subs	r2, #1
 8008010:	2a00      	cmp	r2, #0
 8008012:	6072      	str	r2, [r6, #4]
 8008014:	dc07      	bgt.n	8008026 <_scanf_i+0xb6>
 8008016:	4631      	mov	r1, r6
 8008018:	4650      	mov	r0, sl
 800801a:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800801e:	4790      	blx	r2
 8008020:	2800      	cmp	r0, #0
 8008022:	f040 8085 	bne.w	8008130 <_scanf_i+0x1c0>
 8008026:	f10b 0b01 	add.w	fp, fp, #1
 800802a:	f1bb 0f03 	cmp.w	fp, #3
 800802e:	d1cb      	bne.n	8007fc8 <_scanf_i+0x58>
 8008030:	6863      	ldr	r3, [r4, #4]
 8008032:	b90b      	cbnz	r3, 8008038 <_scanf_i+0xc8>
 8008034:	230a      	movs	r3, #10
 8008036:	6063      	str	r3, [r4, #4]
 8008038:	6863      	ldr	r3, [r4, #4]
 800803a:	4945      	ldr	r1, [pc, #276]	@ (8008150 <_scanf_i+0x1e0>)
 800803c:	6960      	ldr	r0, [r4, #20]
 800803e:	1ac9      	subs	r1, r1, r3
 8008040:	f000 f888 	bl	8008154 <__sccl>
 8008044:	f04f 0b00 	mov.w	fp, #0
 8008048:	68a3      	ldr	r3, [r4, #8]
 800804a:	6822      	ldr	r2, [r4, #0]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d03d      	beq.n	80080cc <_scanf_i+0x15c>
 8008050:	6831      	ldr	r1, [r6, #0]
 8008052:	6960      	ldr	r0, [r4, #20]
 8008054:	f891 c000 	ldrb.w	ip, [r1]
 8008058:	f810 000c 	ldrb.w	r0, [r0, ip]
 800805c:	2800      	cmp	r0, #0
 800805e:	d035      	beq.n	80080cc <_scanf_i+0x15c>
 8008060:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8008064:	d124      	bne.n	80080b0 <_scanf_i+0x140>
 8008066:	0510      	lsls	r0, r2, #20
 8008068:	d522      	bpl.n	80080b0 <_scanf_i+0x140>
 800806a:	f10b 0b01 	add.w	fp, fp, #1
 800806e:	f1b9 0f00 	cmp.w	r9, #0
 8008072:	d003      	beq.n	800807c <_scanf_i+0x10c>
 8008074:	3301      	adds	r3, #1
 8008076:	f109 39ff 	add.w	r9, r9, #4294967295
 800807a:	60a3      	str	r3, [r4, #8]
 800807c:	6873      	ldr	r3, [r6, #4]
 800807e:	3b01      	subs	r3, #1
 8008080:	2b00      	cmp	r3, #0
 8008082:	6073      	str	r3, [r6, #4]
 8008084:	dd1b      	ble.n	80080be <_scanf_i+0x14e>
 8008086:	6833      	ldr	r3, [r6, #0]
 8008088:	3301      	adds	r3, #1
 800808a:	6033      	str	r3, [r6, #0]
 800808c:	68a3      	ldr	r3, [r4, #8]
 800808e:	3b01      	subs	r3, #1
 8008090:	60a3      	str	r3, [r4, #8]
 8008092:	e7d9      	b.n	8008048 <_scanf_i+0xd8>
 8008094:	f1bb 0f02 	cmp.w	fp, #2
 8008098:	d1ae      	bne.n	8007ff8 <_scanf_i+0x88>
 800809a:	6822      	ldr	r2, [r4, #0]
 800809c:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80080a0:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80080a4:	d1c4      	bne.n	8008030 <_scanf_i+0xc0>
 80080a6:	2110      	movs	r1, #16
 80080a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80080ac:	6061      	str	r1, [r4, #4]
 80080ae:	e7a2      	b.n	8007ff6 <_scanf_i+0x86>
 80080b0:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80080b4:	6022      	str	r2, [r4, #0]
 80080b6:	780b      	ldrb	r3, [r1, #0]
 80080b8:	f805 3b01 	strb.w	r3, [r5], #1
 80080bc:	e7de      	b.n	800807c <_scanf_i+0x10c>
 80080be:	4631      	mov	r1, r6
 80080c0:	4650      	mov	r0, sl
 80080c2:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80080c6:	4798      	blx	r3
 80080c8:	2800      	cmp	r0, #0
 80080ca:	d0df      	beq.n	800808c <_scanf_i+0x11c>
 80080cc:	6823      	ldr	r3, [r4, #0]
 80080ce:	05d9      	lsls	r1, r3, #23
 80080d0:	d50d      	bpl.n	80080ee <_scanf_i+0x17e>
 80080d2:	42bd      	cmp	r5, r7
 80080d4:	d909      	bls.n	80080ea <_scanf_i+0x17a>
 80080d6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80080da:	4632      	mov	r2, r6
 80080dc:	4650      	mov	r0, sl
 80080de:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80080e2:	f105 39ff 	add.w	r9, r5, #4294967295
 80080e6:	4798      	blx	r3
 80080e8:	464d      	mov	r5, r9
 80080ea:	42bd      	cmp	r5, r7
 80080ec:	d028      	beq.n	8008140 <_scanf_i+0x1d0>
 80080ee:	6822      	ldr	r2, [r4, #0]
 80080f0:	f012 0210 	ands.w	r2, r2, #16
 80080f4:	d113      	bne.n	800811e <_scanf_i+0x1ae>
 80080f6:	702a      	strb	r2, [r5, #0]
 80080f8:	4639      	mov	r1, r7
 80080fa:	6863      	ldr	r3, [r4, #4]
 80080fc:	4650      	mov	r0, sl
 80080fe:	9e01      	ldr	r6, [sp, #4]
 8008100:	47b0      	blx	r6
 8008102:	f8d8 3000 	ldr.w	r3, [r8]
 8008106:	6821      	ldr	r1, [r4, #0]
 8008108:	1d1a      	adds	r2, r3, #4
 800810a:	f8c8 2000 	str.w	r2, [r8]
 800810e:	f011 0f20 	tst.w	r1, #32
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	d00f      	beq.n	8008136 <_scanf_i+0x1c6>
 8008116:	6018      	str	r0, [r3, #0]
 8008118:	68e3      	ldr	r3, [r4, #12]
 800811a:	3301      	adds	r3, #1
 800811c:	60e3      	str	r3, [r4, #12]
 800811e:	2000      	movs	r0, #0
 8008120:	6923      	ldr	r3, [r4, #16]
 8008122:	1bed      	subs	r5, r5, r7
 8008124:	445d      	add	r5, fp
 8008126:	442b      	add	r3, r5
 8008128:	6123      	str	r3, [r4, #16]
 800812a:	b007      	add	sp, #28
 800812c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008130:	f04f 0b00 	mov.w	fp, #0
 8008134:	e7ca      	b.n	80080cc <_scanf_i+0x15c>
 8008136:	07ca      	lsls	r2, r1, #31
 8008138:	bf4c      	ite	mi
 800813a:	8018      	strhmi	r0, [r3, #0]
 800813c:	6018      	strpl	r0, [r3, #0]
 800813e:	e7eb      	b.n	8008118 <_scanf_i+0x1a8>
 8008140:	2001      	movs	r0, #1
 8008142:	e7f2      	b.n	800812a <_scanf_i+0x1ba>
 8008144:	08008960 	.word	0x08008960
 8008148:	0800718d 	.word	0x0800718d
 800814c:	080083fd 	.word	0x080083fd
 8008150:	08008b46 	.word	0x08008b46

08008154 <__sccl>:
 8008154:	b570      	push	{r4, r5, r6, lr}
 8008156:	780b      	ldrb	r3, [r1, #0]
 8008158:	4604      	mov	r4, r0
 800815a:	2b5e      	cmp	r3, #94	@ 0x5e
 800815c:	bf0b      	itete	eq
 800815e:	784b      	ldrbeq	r3, [r1, #1]
 8008160:	1c4a      	addne	r2, r1, #1
 8008162:	1c8a      	addeq	r2, r1, #2
 8008164:	2100      	movne	r1, #0
 8008166:	bf08      	it	eq
 8008168:	2101      	moveq	r1, #1
 800816a:	3801      	subs	r0, #1
 800816c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8008170:	f800 1f01 	strb.w	r1, [r0, #1]!
 8008174:	42a8      	cmp	r0, r5
 8008176:	d1fb      	bne.n	8008170 <__sccl+0x1c>
 8008178:	b90b      	cbnz	r3, 800817e <__sccl+0x2a>
 800817a:	1e50      	subs	r0, r2, #1
 800817c:	bd70      	pop	{r4, r5, r6, pc}
 800817e:	f081 0101 	eor.w	r1, r1, #1
 8008182:	4610      	mov	r0, r2
 8008184:	54e1      	strb	r1, [r4, r3]
 8008186:	4602      	mov	r2, r0
 8008188:	f812 5b01 	ldrb.w	r5, [r2], #1
 800818c:	2d2d      	cmp	r5, #45	@ 0x2d
 800818e:	d005      	beq.n	800819c <__sccl+0x48>
 8008190:	2d5d      	cmp	r5, #93	@ 0x5d
 8008192:	d016      	beq.n	80081c2 <__sccl+0x6e>
 8008194:	2d00      	cmp	r5, #0
 8008196:	d0f1      	beq.n	800817c <__sccl+0x28>
 8008198:	462b      	mov	r3, r5
 800819a:	e7f2      	b.n	8008182 <__sccl+0x2e>
 800819c:	7846      	ldrb	r6, [r0, #1]
 800819e:	2e5d      	cmp	r6, #93	@ 0x5d
 80081a0:	d0fa      	beq.n	8008198 <__sccl+0x44>
 80081a2:	42b3      	cmp	r3, r6
 80081a4:	dcf8      	bgt.n	8008198 <__sccl+0x44>
 80081a6:	461a      	mov	r2, r3
 80081a8:	3002      	adds	r0, #2
 80081aa:	3201      	adds	r2, #1
 80081ac:	4296      	cmp	r6, r2
 80081ae:	54a1      	strb	r1, [r4, r2]
 80081b0:	dcfb      	bgt.n	80081aa <__sccl+0x56>
 80081b2:	1af2      	subs	r2, r6, r3
 80081b4:	3a01      	subs	r2, #1
 80081b6:	42b3      	cmp	r3, r6
 80081b8:	bfa8      	it	ge
 80081ba:	2200      	movge	r2, #0
 80081bc:	1c5d      	adds	r5, r3, #1
 80081be:	18ab      	adds	r3, r5, r2
 80081c0:	e7e1      	b.n	8008186 <__sccl+0x32>
 80081c2:	4610      	mov	r0, r2
 80081c4:	e7da      	b.n	800817c <__sccl+0x28>

080081c6 <__submore>:
 80081c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081ca:	460c      	mov	r4, r1
 80081cc:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80081ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80081d2:	4299      	cmp	r1, r3
 80081d4:	d11b      	bne.n	800820e <__submore+0x48>
 80081d6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80081da:	f7ff f92d 	bl	8007438 <_malloc_r>
 80081de:	b918      	cbnz	r0, 80081e8 <__submore+0x22>
 80081e0:	f04f 30ff 	mov.w	r0, #4294967295
 80081e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80081ec:	63a3      	str	r3, [r4, #56]	@ 0x38
 80081ee:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80081f2:	6360      	str	r0, [r4, #52]	@ 0x34
 80081f4:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80081f8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80081fc:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8008200:	7043      	strb	r3, [r0, #1]
 8008202:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8008206:	7003      	strb	r3, [r0, #0]
 8008208:	6020      	str	r0, [r4, #0]
 800820a:	2000      	movs	r0, #0
 800820c:	e7ea      	b.n	80081e4 <__submore+0x1e>
 800820e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8008210:	0077      	lsls	r7, r6, #1
 8008212:	463a      	mov	r2, r7
 8008214:	f000 f856 	bl	80082c4 <_realloc_r>
 8008218:	4605      	mov	r5, r0
 800821a:	2800      	cmp	r0, #0
 800821c:	d0e0      	beq.n	80081e0 <__submore+0x1a>
 800821e:	eb00 0806 	add.w	r8, r0, r6
 8008222:	4601      	mov	r1, r0
 8008224:	4632      	mov	r2, r6
 8008226:	4640      	mov	r0, r8
 8008228:	f000 f83e 	bl	80082a8 <memcpy>
 800822c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8008230:	f8c4 8000 	str.w	r8, [r4]
 8008234:	e7e9      	b.n	800820a <__submore+0x44>

08008236 <memmove>:
 8008236:	4288      	cmp	r0, r1
 8008238:	b510      	push	{r4, lr}
 800823a:	eb01 0402 	add.w	r4, r1, r2
 800823e:	d902      	bls.n	8008246 <memmove+0x10>
 8008240:	4284      	cmp	r4, r0
 8008242:	4623      	mov	r3, r4
 8008244:	d807      	bhi.n	8008256 <memmove+0x20>
 8008246:	1e43      	subs	r3, r0, #1
 8008248:	42a1      	cmp	r1, r4
 800824a:	d008      	beq.n	800825e <memmove+0x28>
 800824c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008250:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008254:	e7f8      	b.n	8008248 <memmove+0x12>
 8008256:	4601      	mov	r1, r0
 8008258:	4402      	add	r2, r0
 800825a:	428a      	cmp	r2, r1
 800825c:	d100      	bne.n	8008260 <memmove+0x2a>
 800825e:	bd10      	pop	{r4, pc}
 8008260:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008264:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008268:	e7f7      	b.n	800825a <memmove+0x24>
	...

0800826c <_sbrk_r>:
 800826c:	b538      	push	{r3, r4, r5, lr}
 800826e:	2300      	movs	r3, #0
 8008270:	4d05      	ldr	r5, [pc, #20]	@ (8008288 <_sbrk_r+0x1c>)
 8008272:	4604      	mov	r4, r0
 8008274:	4608      	mov	r0, r1
 8008276:	602b      	str	r3, [r5, #0]
 8008278:	f7fa fffa 	bl	8003270 <_sbrk>
 800827c:	1c43      	adds	r3, r0, #1
 800827e:	d102      	bne.n	8008286 <_sbrk_r+0x1a>
 8008280:	682b      	ldr	r3, [r5, #0]
 8008282:	b103      	cbz	r3, 8008286 <_sbrk_r+0x1a>
 8008284:	6023      	str	r3, [r4, #0]
 8008286:	bd38      	pop	{r3, r4, r5, pc}
 8008288:	20000524 	.word	0x20000524

0800828c <memchr>:
 800828c:	4603      	mov	r3, r0
 800828e:	b510      	push	{r4, lr}
 8008290:	b2c9      	uxtb	r1, r1
 8008292:	4402      	add	r2, r0
 8008294:	4293      	cmp	r3, r2
 8008296:	4618      	mov	r0, r3
 8008298:	d101      	bne.n	800829e <memchr+0x12>
 800829a:	2000      	movs	r0, #0
 800829c:	e003      	b.n	80082a6 <memchr+0x1a>
 800829e:	7804      	ldrb	r4, [r0, #0]
 80082a0:	3301      	adds	r3, #1
 80082a2:	428c      	cmp	r4, r1
 80082a4:	d1f6      	bne.n	8008294 <memchr+0x8>
 80082a6:	bd10      	pop	{r4, pc}

080082a8 <memcpy>:
 80082a8:	440a      	add	r2, r1
 80082aa:	4291      	cmp	r1, r2
 80082ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80082b0:	d100      	bne.n	80082b4 <memcpy+0xc>
 80082b2:	4770      	bx	lr
 80082b4:	b510      	push	{r4, lr}
 80082b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082ba:	4291      	cmp	r1, r2
 80082bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082c0:	d1f9      	bne.n	80082b6 <memcpy+0xe>
 80082c2:	bd10      	pop	{r4, pc}

080082c4 <_realloc_r>:
 80082c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082c8:	4607      	mov	r7, r0
 80082ca:	4614      	mov	r4, r2
 80082cc:	460d      	mov	r5, r1
 80082ce:	b921      	cbnz	r1, 80082da <_realloc_r+0x16>
 80082d0:	4611      	mov	r1, r2
 80082d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082d6:	f7ff b8af 	b.w	8007438 <_malloc_r>
 80082da:	b92a      	cbnz	r2, 80082e8 <_realloc_r+0x24>
 80082dc:	f7ff f842 	bl	8007364 <_free_r>
 80082e0:	4625      	mov	r5, r4
 80082e2:	4628      	mov	r0, r5
 80082e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082e8:	f000 f88a 	bl	8008400 <_malloc_usable_size_r>
 80082ec:	4284      	cmp	r4, r0
 80082ee:	4606      	mov	r6, r0
 80082f0:	d802      	bhi.n	80082f8 <_realloc_r+0x34>
 80082f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80082f6:	d8f4      	bhi.n	80082e2 <_realloc_r+0x1e>
 80082f8:	4621      	mov	r1, r4
 80082fa:	4638      	mov	r0, r7
 80082fc:	f7ff f89c 	bl	8007438 <_malloc_r>
 8008300:	4680      	mov	r8, r0
 8008302:	b908      	cbnz	r0, 8008308 <_realloc_r+0x44>
 8008304:	4645      	mov	r5, r8
 8008306:	e7ec      	b.n	80082e2 <_realloc_r+0x1e>
 8008308:	42b4      	cmp	r4, r6
 800830a:	4622      	mov	r2, r4
 800830c:	4629      	mov	r1, r5
 800830e:	bf28      	it	cs
 8008310:	4632      	movcs	r2, r6
 8008312:	f7ff ffc9 	bl	80082a8 <memcpy>
 8008316:	4629      	mov	r1, r5
 8008318:	4638      	mov	r0, r7
 800831a:	f7ff f823 	bl	8007364 <_free_r>
 800831e:	e7f1      	b.n	8008304 <_realloc_r+0x40>

08008320 <_strtoul_l.isra.0>:
 8008320:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008324:	4686      	mov	lr, r0
 8008326:	460d      	mov	r5, r1
 8008328:	4e33      	ldr	r6, [pc, #204]	@ (80083f8 <_strtoul_l.isra.0+0xd8>)
 800832a:	4628      	mov	r0, r5
 800832c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008330:	5d37      	ldrb	r7, [r6, r4]
 8008332:	f017 0708 	ands.w	r7, r7, #8
 8008336:	d1f8      	bne.n	800832a <_strtoul_l.isra.0+0xa>
 8008338:	2c2d      	cmp	r4, #45	@ 0x2d
 800833a:	d110      	bne.n	800835e <_strtoul_l.isra.0+0x3e>
 800833c:	2701      	movs	r7, #1
 800833e:	782c      	ldrb	r4, [r5, #0]
 8008340:	1c85      	adds	r5, r0, #2
 8008342:	f033 0010 	bics.w	r0, r3, #16
 8008346:	d115      	bne.n	8008374 <_strtoul_l.isra.0+0x54>
 8008348:	2c30      	cmp	r4, #48	@ 0x30
 800834a:	d10d      	bne.n	8008368 <_strtoul_l.isra.0+0x48>
 800834c:	7828      	ldrb	r0, [r5, #0]
 800834e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8008352:	2858      	cmp	r0, #88	@ 0x58
 8008354:	d108      	bne.n	8008368 <_strtoul_l.isra.0+0x48>
 8008356:	786c      	ldrb	r4, [r5, #1]
 8008358:	3502      	adds	r5, #2
 800835a:	2310      	movs	r3, #16
 800835c:	e00a      	b.n	8008374 <_strtoul_l.isra.0+0x54>
 800835e:	2c2b      	cmp	r4, #43	@ 0x2b
 8008360:	bf04      	itt	eq
 8008362:	782c      	ldrbeq	r4, [r5, #0]
 8008364:	1c85      	addeq	r5, r0, #2
 8008366:	e7ec      	b.n	8008342 <_strtoul_l.isra.0+0x22>
 8008368:	2b00      	cmp	r3, #0
 800836a:	d1f6      	bne.n	800835a <_strtoul_l.isra.0+0x3a>
 800836c:	2c30      	cmp	r4, #48	@ 0x30
 800836e:	bf14      	ite	ne
 8008370:	230a      	movne	r3, #10
 8008372:	2308      	moveq	r3, #8
 8008374:	f04f 38ff 	mov.w	r8, #4294967295
 8008378:	fbb8 f8f3 	udiv	r8, r8, r3
 800837c:	2600      	movs	r6, #0
 800837e:	fb03 f908 	mul.w	r9, r3, r8
 8008382:	4630      	mov	r0, r6
 8008384:	ea6f 0909 	mvn.w	r9, r9
 8008388:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800838c:	f1bc 0f09 	cmp.w	ip, #9
 8008390:	d810      	bhi.n	80083b4 <_strtoul_l.isra.0+0x94>
 8008392:	4664      	mov	r4, ip
 8008394:	42a3      	cmp	r3, r4
 8008396:	dd1e      	ble.n	80083d6 <_strtoul_l.isra.0+0xb6>
 8008398:	f1b6 3fff 	cmp.w	r6, #4294967295
 800839c:	d007      	beq.n	80083ae <_strtoul_l.isra.0+0x8e>
 800839e:	4580      	cmp	r8, r0
 80083a0:	d316      	bcc.n	80083d0 <_strtoul_l.isra.0+0xb0>
 80083a2:	d101      	bne.n	80083a8 <_strtoul_l.isra.0+0x88>
 80083a4:	45a1      	cmp	r9, r4
 80083a6:	db13      	blt.n	80083d0 <_strtoul_l.isra.0+0xb0>
 80083a8:	2601      	movs	r6, #1
 80083aa:	fb00 4003 	mla	r0, r0, r3, r4
 80083ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80083b2:	e7e9      	b.n	8008388 <_strtoul_l.isra.0+0x68>
 80083b4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80083b8:	f1bc 0f19 	cmp.w	ip, #25
 80083bc:	d801      	bhi.n	80083c2 <_strtoul_l.isra.0+0xa2>
 80083be:	3c37      	subs	r4, #55	@ 0x37
 80083c0:	e7e8      	b.n	8008394 <_strtoul_l.isra.0+0x74>
 80083c2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80083c6:	f1bc 0f19 	cmp.w	ip, #25
 80083ca:	d804      	bhi.n	80083d6 <_strtoul_l.isra.0+0xb6>
 80083cc:	3c57      	subs	r4, #87	@ 0x57
 80083ce:	e7e1      	b.n	8008394 <_strtoul_l.isra.0+0x74>
 80083d0:	f04f 36ff 	mov.w	r6, #4294967295
 80083d4:	e7eb      	b.n	80083ae <_strtoul_l.isra.0+0x8e>
 80083d6:	1c73      	adds	r3, r6, #1
 80083d8:	d106      	bne.n	80083e8 <_strtoul_l.isra.0+0xc8>
 80083da:	2322      	movs	r3, #34	@ 0x22
 80083dc:	4630      	mov	r0, r6
 80083de:	f8ce 3000 	str.w	r3, [lr]
 80083e2:	b932      	cbnz	r2, 80083f2 <_strtoul_l.isra.0+0xd2>
 80083e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80083e8:	b107      	cbz	r7, 80083ec <_strtoul_l.isra.0+0xcc>
 80083ea:	4240      	negs	r0, r0
 80083ec:	2a00      	cmp	r2, #0
 80083ee:	d0f9      	beq.n	80083e4 <_strtoul_l.isra.0+0xc4>
 80083f0:	b106      	cbz	r6, 80083f4 <_strtoul_l.isra.0+0xd4>
 80083f2:	1e69      	subs	r1, r5, #1
 80083f4:	6011      	str	r1, [r2, #0]
 80083f6:	e7f5      	b.n	80083e4 <_strtoul_l.isra.0+0xc4>
 80083f8:	08008a03 	.word	0x08008a03

080083fc <_strtoul_r>:
 80083fc:	f7ff bf90 	b.w	8008320 <_strtoul_l.isra.0>

08008400 <_malloc_usable_size_r>:
 8008400:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008404:	1f18      	subs	r0, r3, #4
 8008406:	2b00      	cmp	r3, #0
 8008408:	bfbc      	itt	lt
 800840a:	580b      	ldrlt	r3, [r1, r0]
 800840c:	18c0      	addlt	r0, r0, r3
 800840e:	4770      	bx	lr

08008410 <_init>:
 8008410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008412:	bf00      	nop
 8008414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008416:	bc08      	pop	{r3}
 8008418:	469e      	mov	lr, r3
 800841a:	4770      	bx	lr

0800841c <_fini>:
 800841c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800841e:	bf00      	nop
 8008420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008422:	bc08      	pop	{r3}
 8008424:	469e      	mov	lr, r3
 8008426:	4770      	bx	lr
