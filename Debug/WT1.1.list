
WT1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006740  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  0800684c  0800684c  0000784c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c98  08006c98  00008060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006c98  08006c98  00007c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ca0  08006ca0  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ca0  08006ca0  00007ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006ca4  08006ca4  00007ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006ca8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000348  20000060  08006d08  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a8  08006d08  000083a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff34  00000000  00000000  00008089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a4c  00000000  00000000  00017fbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  0001aa10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aed  00000000  00000000  0001b828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000193a7  00000000  00000000  0001c315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012eec  00000000  00000000  000356bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d98d  00000000  00000000  000485a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d5f35  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000407c  00000000  00000000  000d5f78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000d9ff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08006834 	.word	0x08006834

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08006834 	.word	0x08006834

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	@ 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	3a01      	subs	r2, #1
 8000216:	bf28      	it	cs
 8000218:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800021c:	d2ed      	bcs.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ca:	2afd      	cmp	r2, #253	@ 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	@ 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	@ 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	@ 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__gesf2>:
 8000618:	f04f 3cff 	mov.w	ip, #4294967295
 800061c:	e006      	b.n	800062c <__cmpsf2+0x4>
 800061e:	bf00      	nop

08000620 <__lesf2>:
 8000620:	f04f 0c01 	mov.w	ip, #1
 8000624:	e002      	b.n	800062c <__cmpsf2+0x4>
 8000626:	bf00      	nop

08000628 <__cmpsf2>:
 8000628:	f04f 0c01 	mov.w	ip, #1
 800062c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000630:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000634:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000638:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800063c:	bf18      	it	ne
 800063e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000642:	d011      	beq.n	8000668 <__cmpsf2+0x40>
 8000644:	b001      	add	sp, #4
 8000646:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800064a:	bf18      	it	ne
 800064c:	ea90 0f01 	teqne	r0, r1
 8000650:	bf58      	it	pl
 8000652:	ebb2 0003 	subspl.w	r0, r2, r3
 8000656:	bf88      	it	hi
 8000658:	17c8      	asrhi	r0, r1, #31
 800065a:	bf38      	it	cc
 800065c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000660:	bf18      	it	ne
 8000662:	f040 0001 	orrne.w	r0, r0, #1
 8000666:	4770      	bx	lr
 8000668:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800066c:	d102      	bne.n	8000674 <__cmpsf2+0x4c>
 800066e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000672:	d105      	bne.n	8000680 <__cmpsf2+0x58>
 8000674:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000678:	d1e4      	bne.n	8000644 <__cmpsf2+0x1c>
 800067a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800067e:	d0e1      	beq.n	8000644 <__cmpsf2+0x1c>
 8000680:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <__aeabi_cfrcmple>:
 8000688:	4684      	mov	ip, r0
 800068a:	4608      	mov	r0, r1
 800068c:	4661      	mov	r1, ip
 800068e:	e7ff      	b.n	8000690 <__aeabi_cfcmpeq>

08000690 <__aeabi_cfcmpeq>:
 8000690:	b50f      	push	{r0, r1, r2, r3, lr}
 8000692:	f7ff ffc9 	bl	8000628 <__cmpsf2>
 8000696:	2800      	cmp	r0, #0
 8000698:	bf48      	it	mi
 800069a:	f110 0f00 	cmnmi.w	r0, #0
 800069e:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006a0 <__aeabi_fcmpeq>:
 80006a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a4:	f7ff fff4 	bl	8000690 <__aeabi_cfcmpeq>
 80006a8:	bf0c      	ite	eq
 80006aa:	2001      	moveq	r0, #1
 80006ac:	2000      	movne	r0, #0
 80006ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b2:	bf00      	nop

080006b4 <__aeabi_fcmplt>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff ffea 	bl	8000690 <__aeabi_cfcmpeq>
 80006bc:	bf34      	ite	cc
 80006be:	2001      	movcc	r0, #1
 80006c0:	2000      	movcs	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmple>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffe0 	bl	8000690 <__aeabi_cfcmpeq>
 80006d0:	bf94      	ite	ls
 80006d2:	2001      	movls	r0, #1
 80006d4:	2000      	movhi	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmpge>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffd2 	bl	8000688 <__aeabi_cfrcmple>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpgt>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffc8 	bl	8000688 <__aeabi_cfrcmple>
 80006f8:	bf34      	ite	cc
 80006fa:	2001      	movcc	r0, #1
 80006fc:	2000      	movcs	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_uldivmod>:
 8000704:	b953      	cbnz	r3, 800071c <__aeabi_uldivmod+0x18>
 8000706:	b94a      	cbnz	r2, 800071c <__aeabi_uldivmod+0x18>
 8000708:	2900      	cmp	r1, #0
 800070a:	bf08      	it	eq
 800070c:	2800      	cmpeq	r0, #0
 800070e:	bf1c      	itt	ne
 8000710:	f04f 31ff 	movne.w	r1, #4294967295
 8000714:	f04f 30ff 	movne.w	r0, #4294967295
 8000718:	f000 b98c 	b.w	8000a34 <__aeabi_idiv0>
 800071c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000720:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000724:	f000 f806 	bl	8000734 <__udivmoddi4>
 8000728:	f8dd e004 	ldr.w	lr, [sp, #4]
 800072c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000730:	b004      	add	sp, #16
 8000732:	4770      	bx	lr

08000734 <__udivmoddi4>:
 8000734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000738:	9d08      	ldr	r5, [sp, #32]
 800073a:	468e      	mov	lr, r1
 800073c:	4604      	mov	r4, r0
 800073e:	4688      	mov	r8, r1
 8000740:	2b00      	cmp	r3, #0
 8000742:	d14a      	bne.n	80007da <__udivmoddi4+0xa6>
 8000744:	428a      	cmp	r2, r1
 8000746:	4617      	mov	r7, r2
 8000748:	d962      	bls.n	8000810 <__udivmoddi4+0xdc>
 800074a:	fab2 f682 	clz	r6, r2
 800074e:	b14e      	cbz	r6, 8000764 <__udivmoddi4+0x30>
 8000750:	f1c6 0320 	rsb	r3, r6, #32
 8000754:	fa01 f806 	lsl.w	r8, r1, r6
 8000758:	fa20 f303 	lsr.w	r3, r0, r3
 800075c:	40b7      	lsls	r7, r6
 800075e:	ea43 0808 	orr.w	r8, r3, r8
 8000762:	40b4      	lsls	r4, r6
 8000764:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000768:	fbb8 f1fe 	udiv	r1, r8, lr
 800076c:	fa1f fc87 	uxth.w	ip, r7
 8000770:	fb0e 8811 	mls	r8, lr, r1, r8
 8000774:	fb01 f20c 	mul.w	r2, r1, ip
 8000778:	0c23      	lsrs	r3, r4, #16
 800077a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800077e:	429a      	cmp	r2, r3
 8000780:	d909      	bls.n	8000796 <__udivmoddi4+0x62>
 8000782:	18fb      	adds	r3, r7, r3
 8000784:	f101 30ff 	add.w	r0, r1, #4294967295
 8000788:	f080 80eb 	bcs.w	8000962 <__udivmoddi4+0x22e>
 800078c:	429a      	cmp	r2, r3
 800078e:	f240 80e8 	bls.w	8000962 <__udivmoddi4+0x22e>
 8000792:	3902      	subs	r1, #2
 8000794:	443b      	add	r3, r7
 8000796:	1a9a      	subs	r2, r3, r2
 8000798:	fbb2 f0fe 	udiv	r0, r2, lr
 800079c:	fb0e 2210 	mls	r2, lr, r0, r2
 80007a0:	fb00 fc0c 	mul.w	ip, r0, ip
 80007a4:	b2a3      	uxth	r3, r4
 80007a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80007aa:	459c      	cmp	ip, r3
 80007ac:	d909      	bls.n	80007c2 <__udivmoddi4+0x8e>
 80007ae:	18fb      	adds	r3, r7, r3
 80007b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80007b4:	f080 80d7 	bcs.w	8000966 <__udivmoddi4+0x232>
 80007b8:	459c      	cmp	ip, r3
 80007ba:	f240 80d4 	bls.w	8000966 <__udivmoddi4+0x232>
 80007be:	443b      	add	r3, r7
 80007c0:	3802      	subs	r0, #2
 80007c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80007c6:	2100      	movs	r1, #0
 80007c8:	eba3 030c 	sub.w	r3, r3, ip
 80007cc:	b11d      	cbz	r5, 80007d6 <__udivmoddi4+0xa2>
 80007ce:	2200      	movs	r2, #0
 80007d0:	40f3      	lsrs	r3, r6
 80007d2:	e9c5 3200 	strd	r3, r2, [r5]
 80007d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007da:	428b      	cmp	r3, r1
 80007dc:	d905      	bls.n	80007ea <__udivmoddi4+0xb6>
 80007de:	b10d      	cbz	r5, 80007e4 <__udivmoddi4+0xb0>
 80007e0:	e9c5 0100 	strd	r0, r1, [r5]
 80007e4:	2100      	movs	r1, #0
 80007e6:	4608      	mov	r0, r1
 80007e8:	e7f5      	b.n	80007d6 <__udivmoddi4+0xa2>
 80007ea:	fab3 f183 	clz	r1, r3
 80007ee:	2900      	cmp	r1, #0
 80007f0:	d146      	bne.n	8000880 <__udivmoddi4+0x14c>
 80007f2:	4573      	cmp	r3, lr
 80007f4:	d302      	bcc.n	80007fc <__udivmoddi4+0xc8>
 80007f6:	4282      	cmp	r2, r0
 80007f8:	f200 8108 	bhi.w	8000a0c <__udivmoddi4+0x2d8>
 80007fc:	1a84      	subs	r4, r0, r2
 80007fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000802:	2001      	movs	r0, #1
 8000804:	4690      	mov	r8, r2
 8000806:	2d00      	cmp	r5, #0
 8000808:	d0e5      	beq.n	80007d6 <__udivmoddi4+0xa2>
 800080a:	e9c5 4800 	strd	r4, r8, [r5]
 800080e:	e7e2      	b.n	80007d6 <__udivmoddi4+0xa2>
 8000810:	2a00      	cmp	r2, #0
 8000812:	f000 8091 	beq.w	8000938 <__udivmoddi4+0x204>
 8000816:	fab2 f682 	clz	r6, r2
 800081a:	2e00      	cmp	r6, #0
 800081c:	f040 80a5 	bne.w	800096a <__udivmoddi4+0x236>
 8000820:	1a8a      	subs	r2, r1, r2
 8000822:	2101      	movs	r1, #1
 8000824:	0c03      	lsrs	r3, r0, #16
 8000826:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800082a:	b280      	uxth	r0, r0
 800082c:	b2bc      	uxth	r4, r7
 800082e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000832:	fb0e 221c 	mls	r2, lr, ip, r2
 8000836:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800083a:	fb04 f20c 	mul.w	r2, r4, ip
 800083e:	429a      	cmp	r2, r3
 8000840:	d907      	bls.n	8000852 <__udivmoddi4+0x11e>
 8000842:	18fb      	adds	r3, r7, r3
 8000844:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000848:	d202      	bcs.n	8000850 <__udivmoddi4+0x11c>
 800084a:	429a      	cmp	r2, r3
 800084c:	f200 80e3 	bhi.w	8000a16 <__udivmoddi4+0x2e2>
 8000850:	46c4      	mov	ip, r8
 8000852:	1a9b      	subs	r3, r3, r2
 8000854:	fbb3 f2fe 	udiv	r2, r3, lr
 8000858:	fb0e 3312 	mls	r3, lr, r2, r3
 800085c:	fb02 f404 	mul.w	r4, r2, r4
 8000860:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000864:	429c      	cmp	r4, r3
 8000866:	d907      	bls.n	8000878 <__udivmoddi4+0x144>
 8000868:	18fb      	adds	r3, r7, r3
 800086a:	f102 30ff 	add.w	r0, r2, #4294967295
 800086e:	d202      	bcs.n	8000876 <__udivmoddi4+0x142>
 8000870:	429c      	cmp	r4, r3
 8000872:	f200 80cd 	bhi.w	8000a10 <__udivmoddi4+0x2dc>
 8000876:	4602      	mov	r2, r0
 8000878:	1b1b      	subs	r3, r3, r4
 800087a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800087e:	e7a5      	b.n	80007cc <__udivmoddi4+0x98>
 8000880:	f1c1 0620 	rsb	r6, r1, #32
 8000884:	408b      	lsls	r3, r1
 8000886:	fa22 f706 	lsr.w	r7, r2, r6
 800088a:	431f      	orrs	r7, r3
 800088c:	fa2e fa06 	lsr.w	sl, lr, r6
 8000890:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000894:	fbba f8f9 	udiv	r8, sl, r9
 8000898:	fa0e fe01 	lsl.w	lr, lr, r1
 800089c:	fa20 f306 	lsr.w	r3, r0, r6
 80008a0:	fb09 aa18 	mls	sl, r9, r8, sl
 80008a4:	fa1f fc87 	uxth.w	ip, r7
 80008a8:	ea43 030e 	orr.w	r3, r3, lr
 80008ac:	fa00 fe01 	lsl.w	lr, r0, r1
 80008b0:	fb08 f00c 	mul.w	r0, r8, ip
 80008b4:	0c1c      	lsrs	r4, r3, #16
 80008b6:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80008ba:	42a0      	cmp	r0, r4
 80008bc:	fa02 f201 	lsl.w	r2, r2, r1
 80008c0:	d90a      	bls.n	80008d8 <__udivmoddi4+0x1a4>
 80008c2:	193c      	adds	r4, r7, r4
 80008c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80008c8:	f080 809e 	bcs.w	8000a08 <__udivmoddi4+0x2d4>
 80008cc:	42a0      	cmp	r0, r4
 80008ce:	f240 809b 	bls.w	8000a08 <__udivmoddi4+0x2d4>
 80008d2:	f1a8 0802 	sub.w	r8, r8, #2
 80008d6:	443c      	add	r4, r7
 80008d8:	1a24      	subs	r4, r4, r0
 80008da:	b298      	uxth	r0, r3
 80008dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80008e0:	fb09 4413 	mls	r4, r9, r3, r4
 80008e4:	fb03 fc0c 	mul.w	ip, r3, ip
 80008e8:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80008ec:	45a4      	cmp	ip, r4
 80008ee:	d909      	bls.n	8000904 <__udivmoddi4+0x1d0>
 80008f0:	193c      	adds	r4, r7, r4
 80008f2:	f103 30ff 	add.w	r0, r3, #4294967295
 80008f6:	f080 8085 	bcs.w	8000a04 <__udivmoddi4+0x2d0>
 80008fa:	45a4      	cmp	ip, r4
 80008fc:	f240 8082 	bls.w	8000a04 <__udivmoddi4+0x2d0>
 8000900:	3b02      	subs	r3, #2
 8000902:	443c      	add	r4, r7
 8000904:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000908:	eba4 040c 	sub.w	r4, r4, ip
 800090c:	fba0 8c02 	umull	r8, ip, r0, r2
 8000910:	4564      	cmp	r4, ip
 8000912:	4643      	mov	r3, r8
 8000914:	46e1      	mov	r9, ip
 8000916:	d364      	bcc.n	80009e2 <__udivmoddi4+0x2ae>
 8000918:	d061      	beq.n	80009de <__udivmoddi4+0x2aa>
 800091a:	b15d      	cbz	r5, 8000934 <__udivmoddi4+0x200>
 800091c:	ebbe 0203 	subs.w	r2, lr, r3
 8000920:	eb64 0409 	sbc.w	r4, r4, r9
 8000924:	fa04 f606 	lsl.w	r6, r4, r6
 8000928:	fa22 f301 	lsr.w	r3, r2, r1
 800092c:	431e      	orrs	r6, r3
 800092e:	40cc      	lsrs	r4, r1
 8000930:	e9c5 6400 	strd	r6, r4, [r5]
 8000934:	2100      	movs	r1, #0
 8000936:	e74e      	b.n	80007d6 <__udivmoddi4+0xa2>
 8000938:	fbb1 fcf2 	udiv	ip, r1, r2
 800093c:	0c01      	lsrs	r1, r0, #16
 800093e:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000942:	b280      	uxth	r0, r0
 8000944:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000948:	463b      	mov	r3, r7
 800094a:	fbb1 f1f7 	udiv	r1, r1, r7
 800094e:	4638      	mov	r0, r7
 8000950:	463c      	mov	r4, r7
 8000952:	46b8      	mov	r8, r7
 8000954:	46be      	mov	lr, r7
 8000956:	2620      	movs	r6, #32
 8000958:	eba2 0208 	sub.w	r2, r2, r8
 800095c:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000960:	e765      	b.n	800082e <__udivmoddi4+0xfa>
 8000962:	4601      	mov	r1, r0
 8000964:	e717      	b.n	8000796 <__udivmoddi4+0x62>
 8000966:	4610      	mov	r0, r2
 8000968:	e72b      	b.n	80007c2 <__udivmoddi4+0x8e>
 800096a:	f1c6 0120 	rsb	r1, r6, #32
 800096e:	fa2e fc01 	lsr.w	ip, lr, r1
 8000972:	40b7      	lsls	r7, r6
 8000974:	fa0e fe06 	lsl.w	lr, lr, r6
 8000978:	fa20 f101 	lsr.w	r1, r0, r1
 800097c:	ea41 010e 	orr.w	r1, r1, lr
 8000980:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000984:	fbbc f8fe 	udiv	r8, ip, lr
 8000988:	b2bc      	uxth	r4, r7
 800098a:	fb0e cc18 	mls	ip, lr, r8, ip
 800098e:	fb08 f904 	mul.w	r9, r8, r4
 8000992:	0c0a      	lsrs	r2, r1, #16
 8000994:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8000998:	40b0      	lsls	r0, r6
 800099a:	4591      	cmp	r9, r2
 800099c:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80009a0:	b280      	uxth	r0, r0
 80009a2:	d93e      	bls.n	8000a22 <__udivmoddi4+0x2ee>
 80009a4:	18ba      	adds	r2, r7, r2
 80009a6:	f108 3cff 	add.w	ip, r8, #4294967295
 80009aa:	d201      	bcs.n	80009b0 <__udivmoddi4+0x27c>
 80009ac:	4591      	cmp	r9, r2
 80009ae:	d81f      	bhi.n	80009f0 <__udivmoddi4+0x2bc>
 80009b0:	eba2 0209 	sub.w	r2, r2, r9
 80009b4:	fbb2 f9fe 	udiv	r9, r2, lr
 80009b8:	fb09 f804 	mul.w	r8, r9, r4
 80009bc:	fb0e 2a19 	mls	sl, lr, r9, r2
 80009c0:	b28a      	uxth	r2, r1
 80009c2:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 80009c6:	4542      	cmp	r2, r8
 80009c8:	d229      	bcs.n	8000a1e <__udivmoddi4+0x2ea>
 80009ca:	18ba      	adds	r2, r7, r2
 80009cc:	f109 31ff 	add.w	r1, r9, #4294967295
 80009d0:	d2c2      	bcs.n	8000958 <__udivmoddi4+0x224>
 80009d2:	4542      	cmp	r2, r8
 80009d4:	d2c0      	bcs.n	8000958 <__udivmoddi4+0x224>
 80009d6:	f1a9 0102 	sub.w	r1, r9, #2
 80009da:	443a      	add	r2, r7
 80009dc:	e7bc      	b.n	8000958 <__udivmoddi4+0x224>
 80009de:	45c6      	cmp	lr, r8
 80009e0:	d29b      	bcs.n	800091a <__udivmoddi4+0x1e6>
 80009e2:	ebb8 0302 	subs.w	r3, r8, r2
 80009e6:	eb6c 0c07 	sbc.w	ip, ip, r7
 80009ea:	3801      	subs	r0, #1
 80009ec:	46e1      	mov	r9, ip
 80009ee:	e794      	b.n	800091a <__udivmoddi4+0x1e6>
 80009f0:	eba7 0909 	sub.w	r9, r7, r9
 80009f4:	444a      	add	r2, r9
 80009f6:	fbb2 f9fe 	udiv	r9, r2, lr
 80009fa:	f1a8 0c02 	sub.w	ip, r8, #2
 80009fe:	fb09 f804 	mul.w	r8, r9, r4
 8000a02:	e7db      	b.n	80009bc <__udivmoddi4+0x288>
 8000a04:	4603      	mov	r3, r0
 8000a06:	e77d      	b.n	8000904 <__udivmoddi4+0x1d0>
 8000a08:	46d0      	mov	r8, sl
 8000a0a:	e765      	b.n	80008d8 <__udivmoddi4+0x1a4>
 8000a0c:	4608      	mov	r0, r1
 8000a0e:	e6fa      	b.n	8000806 <__udivmoddi4+0xd2>
 8000a10:	443b      	add	r3, r7
 8000a12:	3a02      	subs	r2, #2
 8000a14:	e730      	b.n	8000878 <__udivmoddi4+0x144>
 8000a16:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a1a:	443b      	add	r3, r7
 8000a1c:	e719      	b.n	8000852 <__udivmoddi4+0x11e>
 8000a1e:	4649      	mov	r1, r9
 8000a20:	e79a      	b.n	8000958 <__udivmoddi4+0x224>
 8000a22:	eba2 0209 	sub.w	r2, r2, r9
 8000a26:	fbb2 f9fe 	udiv	r9, r2, lr
 8000a2a:	46c4      	mov	ip, r8
 8000a2c:	fb09 f804 	mul.w	r8, r9, r4
 8000a30:	e7c4      	b.n	80009bc <__udivmoddi4+0x288>
 8000a32:	bf00      	nop

08000a34 <__aeabi_idiv0>:
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop

08000a38 <ADC_Init>:
/**
  * @brief Initializes the ADC hardware
  * @param hadc: Pointer to ADC handle
  */
void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
    // Calibration
    if (HAL_ADCEx_Calibration_Start(hadc) != HAL_OK)
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f002 f82d 	bl	8002aa0 <HAL_ADCEx_Calibration_Start>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <ADC_Init+0x18>
    {
        Error_Handler();
 8000a4c:	f001 f89a 	bl	8001b84 <Error_Handler>
    }
}
 8000a50:	bf00      	nop
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <ADC_ReadAllChannels>:
  * @brief Reads all ADC channels and transmits UART messages if thresholds are met.
  * @param hadc: Pointer to ADC handle
  * @param data: Pointer to ADC_Data struct to store results
  */
void ADC_ReadAllChannels(ADC_HandleTypeDef* hadc, ADC_Data* data)
{
 8000a58:	b590      	push	{r4, r7, lr}
 8000a5a:	b08b      	sub	sp, #44	@ 0x2c
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	6039      	str	r1, [r7, #0]
    ADC_ChannelConfTypeDef sConfig = {0};
 8000a62:	f107 030c 	add.w	r3, r7, #12
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
    sConfig.Rank = 1;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000a72:	2306      	movs	r3, #6
 8000a74:	617b      	str	r3, [r7, #20]

    // Define the voltage threshold for UART transmission
    const float UART_TRANSMIT_THRESHOLD = 3.0f; // Proper 3V or above
 8000a76:	4b8a      	ldr	r3, [pc, #552]	@ (8000ca0 <ADC_ReadAllChannels+0x248>)
 8000a78:	623b      	str	r3, [r7, #32]
    const float DRY_RUN_THRESHOLD = .0f; // Threshold for dry run detection
 8000a7a:	f04f 0300 	mov.w	r3, #0
 8000a7e:	61fb      	str	r3, [r7, #28]
    const float GROUND_THRESHOLD = 0.1f; // Threshold to consider as ground (0V)
 8000a80:	4b88      	ldr	r3, [pc, #544]	@ (8000ca4 <ADC_ReadAllChannels+0x24c>)
 8000a82:	61bb      	str	r3, [r7, #24]

    for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++)
 8000a84:	2300      	movs	r3, #0
 8000a86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000a8a:	e0ff      	b.n	8000c8c <ADC_ReadAllChannels+0x234>
    {
        // Configure channel
        sConfig.Channel = adcChannels[i];
 8000a8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000a90:	4a85      	ldr	r2, [pc, #532]	@ (8000ca8 <ADC_ReadAllChannels+0x250>)
 8000a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a96:	60fb      	str	r3, [r7, #12]
        HAL_ADC_ConfigChannel(hadc, &sConfig);
 8000a98:	f107 030c 	add.w	r3, r7, #12
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f001 fe6a 	bl	8002778 <HAL_ADC_ConfigChannel>

        // Start conversion
        HAL_ADC_Start(hadc);
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f001 fca7 	bl	80023f8 <HAL_ADC_Start>
        if (HAL_ADC_PollForConversion(hadc, 10) == HAL_OK)
 8000aaa:	210a      	movs	r1, #10
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f001 fd51 	bl	8002554 <HAL_ADC_PollForConversion>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	f040 80cd 	bne.w	8000c54 <ADC_ReadAllChannels+0x1fc>
        {
            data->rawValues[i] = HAL_ADC_GetValue(hadc);
 8000aba:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 8000abe:	6878      	ldr	r0, [r7, #4]
 8000ac0:	f001 fe4e 	bl	8002760 <HAL_ADC_GetValue>
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
            data->voltages[i] = (data->rawValues[i] * 3.3f) / 4095.0f;
 8000acc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff fbf6 	bl	80002c8 <__aeabi_ui2f>
 8000adc:	4603      	mov	r3, r0
 8000ade:	4973      	ldr	r1, [pc, #460]	@ (8000cac <ADC_ReadAllChannels+0x254>)
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff fc49 	bl	8000378 <__aeabi_fmul>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 8000aec:	4970      	ldr	r1, [pc, #448]	@ (8000cb0 <ADC_ReadAllChannels+0x258>)
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff fcf6 	bl	80004e0 <__aeabi_fdiv>
 8000af4:	4603      	mov	r3, r0
 8000af6:	4619      	mov	r1, r3
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	1da2      	adds	r2, r4, #6
 8000afc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            data->maxReached[i] = (data->voltages[i] >= 3.2f) ? 1 : 0; // Original 3.2V threshold for maxReached flag
 8000b00:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	3206      	adds	r2, #6
 8000b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	4614      	mov	r4, r2
 8000b10:	4968      	ldr	r1, [pc, #416]	@ (8000cb4 <ADC_ReadAllChannels+0x25c>)
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff fde2 	bl	80006dc <__aeabi_fcmpge>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d101      	bne.n	8000b22 <ADC_ReadAllChannels+0xca>
 8000b1e:	2300      	movs	r3, #0
 8000b20:	461c      	mov	r4, r3
 8000b22:	b2e2      	uxtb	r2, r4
 8000b24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000b28:	4611      	mov	r1, r2
 8000b2a:	683a      	ldr	r2, [r7, #0]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	460a      	mov	r2, r1
 8000b30:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

            // Check if the voltage is close to ground
            if (data->voltages[i] < GROUND_THRESHOLD)
 8000b34:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	3206      	adds	r2, #6
 8000b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b40:	4619      	mov	r1, r3
 8000b42:	69b8      	ldr	r0, [r7, #24]
 8000b44:	f7ff fdd4 	bl	80006f0 <__aeabi_fcmpgt>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d00d      	beq.n	8000b6a <ADC_ReadAllChannels+0x112>
            {
                data->rawValues[i] = 0; // Set raw value to 0
 8000b4e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	2100      	movs	r1, #0
 8000b56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                data->voltages[i] = 0.0f; // Set voltage to 0.0V
 8000b5a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	3206      	adds	r2, #6
 8000b62:	f04f 0100 	mov.w	r1, #0
 8000b66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            }

            // Check voltage for UART transmission
            if (data->voltages[i] >= UART_TRANSMIT_THRESHOLD)
 8000b6a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	3206      	adds	r2, #6
 8000b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b76:	4619      	mov	r1, r3
 8000b78:	6a38      	ldr	r0, [r7, #32]
 8000b7a:	f7ff fda5 	bl	80006c8 <__aeabi_fcmple>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d052      	beq.n	8000c2a <ADC_ReadAllChannels+0x1d2>
            {
                switch (i)
 8000b84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000b88:	2b04      	cmp	r3, #4
 8000b8a:	d879      	bhi.n	8000c80 <ADC_ReadAllChannels+0x228>
 8000b8c:	a201      	add	r2, pc, #4	@ (adr r2, 8000b94 <ADC_ReadAllChannels+0x13c>)
 8000b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b92:	bf00      	nop
 8000b94:	08000ba9 	.word	0x08000ba9
 8000b98:	08000bc3 	.word	0x08000bc3
 8000b9c:	08000bdd 	.word	0x08000bdd
 8000ba0:	08000bf7 	.word	0x08000bf7
 8000ba4:	08000c11 	.word	0x08000c11
                {
                    case 0: // IN0
                        UART_ReadDataPacket(dataPacket, "@10W#", sizeof("@10W#") - 1);
 8000ba8:	2205      	movs	r2, #5
 8000baa:	4943      	ldr	r1, [pc, #268]	@ (8000cb8 <ADC_ReadAllChannels+0x260>)
 8000bac:	4843      	ldr	r0, [pc, #268]	@ (8000cbc <ADC_ReadAllChannels+0x264>)
 8000bae:	f001 fa81 	bl	80020b4 <UART_ReadDataPacket>
                        UART_TransmitString(&huart1, dataPacket);
 8000bb2:	4942      	ldr	r1, [pc, #264]	@ (8000cbc <ADC_ReadAllChannels+0x264>)
 8000bb4:	4842      	ldr	r0, [pc, #264]	@ (8000cc0 <ADC_ReadAllChannels+0x268>)
 8000bb6:	f001 fa69 	bl	800208c <UART_TransmitString>
                        motorStatus = 1; // Motor is on
 8000bba:	4b42      	ldr	r3, [pc, #264]	@ (8000cc4 <ADC_ReadAllChannels+0x26c>)
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	701a      	strb	r2, [r3, #0]
                        break;
 8000bc0:	e05f      	b.n	8000c82 <ADC_ReadAllChannels+0x22a>
                    case 1: // IN1
                        UART_ReadDataPacket(dataPacket, "@30W#", sizeof("@30W#") - 1);
 8000bc2:	2205      	movs	r2, #5
 8000bc4:	4940      	ldr	r1, [pc, #256]	@ (8000cc8 <ADC_ReadAllChannels+0x270>)
 8000bc6:	483d      	ldr	r0, [pc, #244]	@ (8000cbc <ADC_ReadAllChannels+0x264>)
 8000bc8:	f001 fa74 	bl	80020b4 <UART_ReadDataPacket>
                        UART_TransmitString(&huart1, dataPacket);
 8000bcc:	493b      	ldr	r1, [pc, #236]	@ (8000cbc <ADC_ReadAllChannels+0x264>)
 8000bce:	483c      	ldr	r0, [pc, #240]	@ (8000cc0 <ADC_ReadAllChannels+0x268>)
 8000bd0:	f001 fa5c 	bl	800208c <UART_TransmitString>
                        motorStatus = 1; // Motor is on
 8000bd4:	4b3b      	ldr	r3, [pc, #236]	@ (8000cc4 <ADC_ReadAllChannels+0x26c>)
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	701a      	strb	r2, [r3, #0]
                        break;
 8000bda:	e052      	b.n	8000c82 <ADC_ReadAllChannels+0x22a>
                    case 2: // IN2
                        UART_ReadDataPacket(dataPacket, "@70W#", sizeof("@70W#") - 1);
 8000bdc:	2205      	movs	r2, #5
 8000bde:	493b      	ldr	r1, [pc, #236]	@ (8000ccc <ADC_ReadAllChannels+0x274>)
 8000be0:	4836      	ldr	r0, [pc, #216]	@ (8000cbc <ADC_ReadAllChannels+0x264>)
 8000be2:	f001 fa67 	bl	80020b4 <UART_ReadDataPacket>
                        UART_TransmitString(&huart1, dataPacket);
 8000be6:	4935      	ldr	r1, [pc, #212]	@ (8000cbc <ADC_ReadAllChannels+0x264>)
 8000be8:	4835      	ldr	r0, [pc, #212]	@ (8000cc0 <ADC_ReadAllChannels+0x268>)
 8000bea:	f001 fa4f 	bl	800208c <UART_TransmitString>
                        motorStatus = 1; // Motor is on
 8000bee:	4b35      	ldr	r3, [pc, #212]	@ (8000cc4 <ADC_ReadAllChannels+0x26c>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	701a      	strb	r2, [r3, #0]
                        break;
 8000bf4:	e045      	b.n	8000c82 <ADC_ReadAllChannels+0x22a>
                    case 3: // IN3
                        UART_ReadDataPacket(dataPacket, "@1:W#", sizeof("@1:W#") - 1);
 8000bf6:	2205      	movs	r2, #5
 8000bf8:	4935      	ldr	r1, [pc, #212]	@ (8000cd0 <ADC_ReadAllChannels+0x278>)
 8000bfa:	4830      	ldr	r0, [pc, #192]	@ (8000cbc <ADC_ReadAllChannels+0x264>)
 8000bfc:	f001 fa5a 	bl	80020b4 <UART_ReadDataPacket>
                        UART_TransmitString(&huart1, dataPacket);
 8000c00:	492e      	ldr	r1, [pc, #184]	@ (8000cbc <ADC_ReadAllChannels+0x264>)
 8000c02:	482f      	ldr	r0, [pc, #188]	@ (8000cc0 <ADC_ReadAllChannels+0x268>)
 8000c04:	f001 fa42 	bl	800208c <UART_TransmitString>
                        motorStatus = 1; // Motor is on
 8000c08:	4b2e      	ldr	r3, [pc, #184]	@ (8000cc4 <ADC_ReadAllChannels+0x26c>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	701a      	strb	r2, [r3, #0]
                        break;
 8000c0e:	e038      	b.n	8000c82 <ADC_ReadAllChannels+0x22a>
                    case 4: // IN4
                        UART_ReadDataPacket(dataPacket, "@DRY#", sizeof("@DRY#") - 1);
 8000c10:	2205      	movs	r2, #5
 8000c12:	4930      	ldr	r1, [pc, #192]	@ (8000cd4 <ADC_ReadAllChannels+0x27c>)
 8000c14:	4829      	ldr	r0, [pc, #164]	@ (8000cbc <ADC_ReadAllChannels+0x264>)
 8000c16:	f001 fa4d 	bl	80020b4 <UART_ReadDataPacket>
                        UART_TransmitString(&huart1, dataPacket);
 8000c1a:	4928      	ldr	r1, [pc, #160]	@ (8000cbc <ADC_ReadAllChannels+0x264>)
 8000c1c:	4828      	ldr	r0, [pc, #160]	@ (8000cc0 <ADC_ReadAllChannels+0x268>)
 8000c1e:	f001 fa35 	bl	800208c <UART_TransmitString>
                        motorStatus = 1; // Set motor status to on for dry run
 8000c22:	4b28      	ldr	r3, [pc, #160]	@ (8000cc4 <ADC_ReadAllChannels+0x26c>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	701a      	strb	r2, [r3, #0]
                        break;
 8000c28:	e02b      	b.n	8000c82 <ADC_ReadAllChannels+0x22a>
                    // Cases for IN5 are not specified for UART transmission
                    default:
                        break;
                }
            }
            else if (data->voltages[i] < DRY_RUN_THRESHOLD && motorStatus == 1)
 8000c2a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	3206      	adds	r2, #6
 8000c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c36:	4619      	mov	r1, r3
 8000c38:	69f8      	ldr	r0, [r7, #28]
 8000c3a:	f7ff fd59 	bl	80006f0 <__aeabi_fcmpgt>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d01e      	beq.n	8000c82 <ADC_ReadAllChannels+0x22a>
 8000c44:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc4 <ADC_ReadAllChannels+0x26c>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d11a      	bne.n	8000c82 <ADC_ReadAllChannels+0x22a>
            {
                // If the voltage is below the dry run threshold and the motor is on
//                UART_ReadDataPacket(dataPacket, "@MT0#", sizeof("@MT0#") - 1);
//                UART_TransmitString(&huart1, dataPacket);
                motorStatus = 0; // Set motor status to off
 8000c4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000cc4 <ADC_ReadAllChannels+0x26c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	701a      	strb	r2, [r3, #0]
 8000c52:	e016      	b.n	8000c82 <ADC_ReadAllChannels+0x22a>
        }
        else
        {
            // Handle ADC conversion timeout or error if necessary
            // For simplicity, we'll just set values to 0 on error
            data->rawValues[i] = 0;
 8000c54:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            data->voltages[i] = 0.0f;
 8000c60:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	3206      	adds	r2, #6
 8000c68:	f04f 0100 	mov.w	r1, #0
 8000c6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            data->maxReached[i] = 0;
 8000c70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000c74:	683a      	ldr	r2, [r7, #0]
 8000c76:	4413      	add	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8000c7e:	e000      	b.n	8000c82 <ADC_ReadAllChannels+0x22a>
                        break;
 8000c80:	bf00      	nop
    for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++)
 8000c82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000c86:	3301      	adds	r3, #1
 8000c88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000c8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000c90:	2b05      	cmp	r3, #5
 8000c92:	f67f aefb 	bls.w	8000a8c <ADC_ReadAllChannels+0x34>

    // Check for incoming UART data
//    char receivedData[20]; // Buffer to hold received data
//    UART_ReceiveString(&huart1, receivedData, sizeof(receivedData)); // Receive data from UART
//    UART_ProcessReceivedData(receivedData); // Process the received data
}
 8000c96:	bf00      	nop
 8000c98:	bf00      	nop
 8000c9a:	372c      	adds	r7, #44	@ 0x2c
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd90      	pop	{r4, r7, pc}
 8000ca0:	40400000 	.word	0x40400000
 8000ca4:	3dcccccd 	.word	0x3dcccccd
 8000ca8:	08006c0c 	.word	0x08006c0c
 8000cac:	40533333 	.word	0x40533333
 8000cb0:	457ff000 	.word	0x457ff000
 8000cb4:	404ccccd 	.word	0x404ccccd
 8000cb8:	0800684c 	.word	0x0800684c
 8000cbc:	2000007c 	.word	0x2000007c
 8000cc0:	200001bc 	.word	0x200001bc
 8000cc4:	20000085 	.word	0x20000085
 8000cc8:	08006854 	.word	0x08006854
 8000ccc:	0800685c 	.word	0x0800685c
 8000cd0:	08006864 	.word	0x08006864
 8000cd4:	0800686c 	.word	0x0800686c

08000cd8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c2;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup (e.g., 0x4E or 0x7E)

void lcd_send_cmd (char cmd)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af02      	add	r7, sp, #8
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	f023 030f 	bic.w	r3, r3, #15
 8000ce8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	011b      	lsls	r3, r3, #4
 8000cee:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0 (Command mode, Enable high)
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
 8000cf2:	f043 030c 	orr.w	r3, r3, #12
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 (Command mode, Enable low)
 8000cfa:	7bfb      	ldrb	r3, [r7, #15]
 8000cfc:	f043 0308 	orr.w	r3, r3, #8
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 (Command mode, Enable high)
 8000d04:	7bbb      	ldrb	r3, [r7, #14]
 8000d06:	f043 030c 	orr.w	r3, r3, #12
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 (Command mode, Enable low)
 8000d0e:	7bbb      	ldrb	r3, [r7, #14]
 8000d10:	f043 0308 	orr.w	r3, r3, #8
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000d18:	f107 0208 	add.w	r2, r7, #8
 8000d1c:	2364      	movs	r3, #100	@ 0x64
 8000d1e:	9300      	str	r3, [sp, #0]
 8000d20:	2304      	movs	r3, #4
 8000d22:	214e      	movs	r1, #78	@ 0x4e
 8000d24:	4803      	ldr	r0, [pc, #12]	@ (8000d34 <lcd_send_cmd+0x5c>)
 8000d26:	f002 fb2d 	bl	8003384 <HAL_I2C_Master_Transmit>
}
 8000d2a:	bf00      	nop
 8000d2c:	3710      	adds	r7, #16
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	200000fc 	.word	0x200000fc

08000d38 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af02      	add	r7, sp, #8
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	f023 030f 	bic.w	r3, r3, #15
 8000d48:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	011b      	lsls	r3, r3, #4
 8000d4e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1 (Data mode, Enable high)
 8000d50:	7bfb      	ldrb	r3, [r7, #15]
 8000d52:	f043 030d 	orr.w	r3, r3, #13
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1 (Data mode, Enable low)
 8000d5a:	7bfb      	ldrb	r3, [r7, #15]
 8000d5c:	f043 0309 	orr.w	r3, r3, #9
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1 (Data mode, Enable high)
 8000d64:	7bbb      	ldrb	r3, [r7, #14]
 8000d66:	f043 030d 	orr.w	r3, r3, #13
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1 (Data mode, Enable low)
 8000d6e:	7bbb      	ldrb	r3, [r7, #14]
 8000d70:	f043 0309 	orr.w	r3, r3, #9
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000d78:	f107 0208 	add.w	r2, r7, #8
 8000d7c:	2364      	movs	r3, #100	@ 0x64
 8000d7e:	9300      	str	r3, [sp, #0]
 8000d80:	2304      	movs	r3, #4
 8000d82:	214e      	movs	r1, #78	@ 0x4e
 8000d84:	4803      	ldr	r0, [pc, #12]	@ (8000d94 <lcd_send_data+0x5c>)
 8000d86:	f002 fafd 	bl	8003384 <HAL_I2C_Master_Transmit>
}
 8000d8a:	bf00      	nop
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	200000fc 	.word	0x200000fc

08000d98 <lcd_put_cur>:
	HAL_Delay(2); // Wait for clear command to execute
	lcd_send_cmd (0x80); // Set cursor to home position (0,0)
}

void lcd_put_cur(int row, int col)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
    switch (row)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d003      	beq.n	8000db0 <lcd_put_cur+0x18>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d005      	beq.n	8000dba <lcd_put_cur+0x22>
 8000dae:	e009      	b.n	8000dc4 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80; // Address for first row
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000db6:	603b      	str	r3, [r7, #0]
            break;
 8000db8:	e004      	b.n	8000dc4 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0; // Address for second row
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000dc0:	603b      	str	r3, [r7, #0]
            break;
 8000dc2:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff ff85 	bl	8000cd8 <lcd_send_cmd>
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <lcd_init>:


void lcd_init (void)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	af00      	add	r7, sp, #0
	// 4 bit initialisation sequence (standard for PCF8574 based LCDs)
	HAL_Delay(50);  // wait for >40ms after power-on
 8000dda:	2032      	movs	r0, #50	@ 0x32
 8000ddc:	f001 fa10 	bl	8002200 <HAL_Delay>
	lcd_send_cmd (0x30); // Function set (8-bit mode)
 8000de0:	2030      	movs	r0, #48	@ 0x30
 8000de2:	f7ff ff79 	bl	8000cd8 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000de6:	2005      	movs	r0, #5
 8000de8:	f001 fa0a 	bl	8002200 <HAL_Delay>
	lcd_send_cmd (0x30); // Function set (8-bit mode)
 8000dec:	2030      	movs	r0, #48	@ 0x30
 8000dee:	f7ff ff73 	bl	8000cd8 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000df2:	2001      	movs	r0, #1
 8000df4:	f001 fa04 	bl	8002200 <HAL_Delay>
	lcd_send_cmd (0x30); // Function set (8-bit mode)
 8000df8:	2030      	movs	r0, #48	@ 0x30
 8000dfa:	f7ff ff6d 	bl	8000cd8 <lcd_send_cmd>
	HAL_Delay(10);
 8000dfe:	200a      	movs	r0, #10
 8000e00:	f001 f9fe 	bl	8002200 <HAL_Delay>
	lcd_send_cmd (0x20);  // Function set (4-bit mode)
 8000e04:	2020      	movs	r0, #32
 8000e06:	f7ff ff67 	bl	8000cd8 <lcd_send_cmd>
	HAL_Delay(10);
 8000e0a:	200a      	movs	r0, #10
 8000e0c:	f001 f9f8 	bl	8002200 <HAL_Delay>

  // Display initialisation commands (after 4-bit mode is set)
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000e10:	2028      	movs	r0, #40	@ 0x28
 8000e12:	f7ff ff61 	bl	8000cd8 <lcd_send_cmd>
	HAL_Delay(1);
 8000e16:	2001      	movs	r0, #1
 8000e18:	f001 f9f2 	bl	8002200 <HAL_Delay>
	lcd_send_cmd (0x08); // Display on/off control --> D=0,C=0, B=0  ---> display off
 8000e1c:	2008      	movs	r0, #8
 8000e1e:	f7ff ff5b 	bl	8000cd8 <lcd_send_cmd>
	HAL_Delay(1);
 8000e22:	2001      	movs	r0, #1
 8000e24:	f001 f9ec 	bl	8002200 <HAL_Delay>
	lcd_send_cmd (0x01);  // Clear display
 8000e28:	2001      	movs	r0, #1
 8000e2a:	f7ff ff55 	bl	8000cd8 <lcd_send_cmd>
	HAL_Delay(2); // Longer delay for clear display
 8000e2e:	2002      	movs	r0, #2
 8000e30:	f001 f9e6 	bl	8002200 <HAL_Delay>
	lcd_send_cmd (0x06); // Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000e34:	2006      	movs	r0, #6
 8000e36:	f7ff ff4f 	bl	8000cd8 <lcd_send_cmd>
	HAL_Delay(1);
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	f001 f9e0 	bl	8002200 <HAL_Delay>
	lcd_send_cmd (0x0C); // Display on/off control --> D = 1, C and B = 0. (Display ON, Cursor OFF, Blink OFF)
 8000e40:	200c      	movs	r0, #12
 8000e42:	f7ff ff49 	bl	8000cd8 <lcd_send_cmd>
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000e52:	e006      	b.n	8000e62 <lcd_send_string+0x18>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	1c5a      	adds	r2, r3, #1
 8000e58:	607a      	str	r2, [r7, #4]
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff ff6b 	bl	8000d38 <lcd_send_data>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d1f4      	bne.n	8000e54 <lcd_send_string+0xa>
}
 8000e6a:	bf00      	nop
 8000e6c:	bf00      	nop
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <LoRa_WriteReg>:


//uint8_t rxBuffer[256]; // Buffer for received data

/* --- low-level SPI helpers --- */
void LoRa_WriteReg(uint8_t addr, uint8_t data) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	460a      	mov	r2, r1
 8000e7e:	71fb      	strb	r3, [r7, #7]
 8000e80:	4613      	mov	r3, r2
 8000e82:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2] = { (uint8_t)(addr | 0x80), data };
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	733b      	strb	r3, [r7, #12]
 8000e8e:	79bb      	ldrb	r3, [r7, #6]
 8000e90:	737b      	strb	r3, [r7, #13]
    NSS_LOW();
 8000e92:	2200      	movs	r2, #0
 8000e94:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e98:	480a      	ldr	r0, [pc, #40]	@ (8000ec4 <LoRa_WriteReg+0x50>)
 8000e9a:	f002 f917 	bl	80030cc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, buf, 2, HAL_MAX_DELAY);
 8000e9e:	f107 010c 	add.w	r1, r7, #12
 8000ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	4807      	ldr	r0, [pc, #28]	@ (8000ec8 <LoRa_WriteReg+0x54>)
 8000eaa:	f004 f8b7 	bl	800501c <HAL_SPI_Transmit>
    NSS_HIGH();
 8000eae:	2201      	movs	r2, #1
 8000eb0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000eb4:	4803      	ldr	r0, [pc, #12]	@ (8000ec4 <LoRa_WriteReg+0x50>)
 8000eb6:	f002 f909 	bl	80030cc <HAL_GPIO_WritePin>
}
 8000eba:	bf00      	nop
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40010800 	.word	0x40010800
 8000ec8:	20000164 	.word	0x20000164

08000ecc <LoRa_ReadReg>:

uint8_t LoRa_ReadReg(uint8_t addr) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
    uint8_t tx = addr & 0x7F;
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	73fb      	strb	r3, [r7, #15]
    uint8_t rx = 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	73bb      	strb	r3, [r7, #14]
    NSS_LOW();
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000eea:	480f      	ldr	r0, [pc, #60]	@ (8000f28 <LoRa_ReadReg+0x5c>)
 8000eec:	f002 f8ee 	bl	80030cc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &tx, 1, HAL_MAX_DELAY);
 8000ef0:	f107 010f 	add.w	r1, r7, #15
 8000ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef8:	2201      	movs	r2, #1
 8000efa:	480c      	ldr	r0, [pc, #48]	@ (8000f2c <LoRa_ReadReg+0x60>)
 8000efc:	f004 f88e 	bl	800501c <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, &rx, 1, HAL_MAX_DELAY);
 8000f00:	f107 010e 	add.w	r1, r7, #14
 8000f04:	f04f 33ff 	mov.w	r3, #4294967295
 8000f08:	2201      	movs	r2, #1
 8000f0a:	4808      	ldr	r0, [pc, #32]	@ (8000f2c <LoRa_ReadReg+0x60>)
 8000f0c:	f004 f9ca 	bl	80052a4 <HAL_SPI_Receive>
    NSS_HIGH();
 8000f10:	2201      	movs	r2, #1
 8000f12:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f16:	4804      	ldr	r0, [pc, #16]	@ (8000f28 <LoRa_ReadReg+0x5c>)
 8000f18:	f002 f8d8 	bl	80030cc <HAL_GPIO_WritePin>
    return rx;
 8000f1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40010800 	.word	0x40010800
 8000f2c:	20000164 	.word	0x20000164

08000f30 <LoRa_WriteBuffer>:

void LoRa_WriteBuffer(uint8_t addr, const uint8_t *buffer, uint8_t size) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	6039      	str	r1, [r7, #0]
 8000f3a:	71fb      	strb	r3, [r7, #7]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	71bb      	strb	r3, [r7, #6]
    uint8_t a = addr | 0x80;
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	73fb      	strb	r3, [r7, #15]
    NSS_LOW();
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f50:	480e      	ldr	r0, [pc, #56]	@ (8000f8c <LoRa_WriteBuffer+0x5c>)
 8000f52:	f002 f8bb 	bl	80030cc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &a, 1, HAL_MAX_DELAY);
 8000f56:	f107 010f 	add.w	r1, r7, #15
 8000f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5e:	2201      	movs	r2, #1
 8000f60:	480b      	ldr	r0, [pc, #44]	@ (8000f90 <LoRa_WriteBuffer+0x60>)
 8000f62:	f004 f85b 	bl	800501c <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)buffer, size, HAL_MAX_DELAY);
 8000f66:	79bb      	ldrb	r3, [r7, #6]
 8000f68:	b29a      	uxth	r2, r3
 8000f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6e:	6839      	ldr	r1, [r7, #0]
 8000f70:	4807      	ldr	r0, [pc, #28]	@ (8000f90 <LoRa_WriteBuffer+0x60>)
 8000f72:	f004 f853 	bl	800501c <HAL_SPI_Transmit>
    NSS_HIGH();
 8000f76:	2201      	movs	r2, #1
 8000f78:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f7c:	4803      	ldr	r0, [pc, #12]	@ (8000f8c <LoRa_WriteBuffer+0x5c>)
 8000f7e:	f002 f8a5 	bl	80030cc <HAL_GPIO_WritePin>
}
 8000f82:	bf00      	nop
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40010800 	.word	0x40010800
 8000f90:	20000164 	.word	0x20000164

08000f94 <LoRa_ReadBuffer>:

void LoRa_ReadBuffer(uint8_t addr, uint8_t *buffer, uint8_t size) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	6039      	str	r1, [r7, #0]
 8000f9e:	71fb      	strb	r3, [r7, #7]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	71bb      	strb	r3, [r7, #6]
    uint8_t a = addr & 0x7F;
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	73fb      	strb	r3, [r7, #15]
    NSS_LOW();
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fb4:	480e      	ldr	r0, [pc, #56]	@ (8000ff0 <LoRa_ReadBuffer+0x5c>)
 8000fb6:	f002 f889 	bl	80030cc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &a, 1, HAL_MAX_DELAY);
 8000fba:	f107 010f 	add.w	r1, r7, #15
 8000fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	480b      	ldr	r0, [pc, #44]	@ (8000ff4 <LoRa_ReadBuffer+0x60>)
 8000fc6:	f004 f829 	bl	800501c <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, buffer, size, HAL_MAX_DELAY);
 8000fca:	79bb      	ldrb	r3, [r7, #6]
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd2:	6839      	ldr	r1, [r7, #0]
 8000fd4:	4807      	ldr	r0, [pc, #28]	@ (8000ff4 <LoRa_ReadBuffer+0x60>)
 8000fd6:	f004 f965 	bl	80052a4 <HAL_SPI_Receive>
    NSS_HIGH();
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fe0:	4803      	ldr	r0, [pc, #12]	@ (8000ff0 <LoRa_ReadBuffer+0x5c>)
 8000fe2:	f002 f873 	bl	80030cc <HAL_GPIO_WritePin>
}
 8000fe6:	bf00      	nop
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40010800 	.word	0x40010800
 8000ff4:	20000164 	.word	0x20000164

08000ff8 <LoRa_Reset>:

/* --- reset --- */
void LoRa_Reset(void) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LORA_RESET_PORT, LORA_RESET_PIN, GPIO_PIN_RESET);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2140      	movs	r1, #64	@ 0x40
 8001000:	4807      	ldr	r0, [pc, #28]	@ (8001020 <LoRa_Reset+0x28>)
 8001002:	f002 f863 	bl	80030cc <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8001006:	2002      	movs	r0, #2
 8001008:	f001 f8fa 	bl	8002200 <HAL_Delay>
    HAL_GPIO_WritePin(LORA_RESET_PORT, LORA_RESET_PIN, GPIO_PIN_SET);
 800100c:	2201      	movs	r2, #1
 800100e:	2140      	movs	r1, #64	@ 0x40
 8001010:	4803      	ldr	r0, [pc, #12]	@ (8001020 <LoRa_Reset+0x28>)
 8001012:	f002 f85b 	bl	80030cc <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001016:	200a      	movs	r0, #10
 8001018:	f001 f8f2 	bl	8002200 <HAL_Delay>
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40010c00 	.word	0x40010c00

08001024 <LoRa_SetFrequency>:

/* --- set frequency (Hz) --- */
void LoRa_SetFrequency(uint32_t freqHz) {
 8001024:	b5b0      	push	{r4, r5, r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
    /* FRF = freq * 2^19 / 32e6 */
    uint64_t frf = ((uint64_t)freqHz << 19) / 32000000ULL;
 800102c:	6879      	ldr	r1, [r7, #4]
 800102e:	2000      	movs	r0, #0
 8001030:	460a      	mov	r2, r1
 8001032:	4603      	mov	r3, r0
 8001034:	0b55      	lsrs	r5, r2, #13
 8001036:	04d4      	lsls	r4, r2, #19
 8001038:	4a18      	ldr	r2, [pc, #96]	@ (800109c <LoRa_SetFrequency+0x78>)
 800103a:	f04f 0300 	mov.w	r3, #0
 800103e:	4620      	mov	r0, r4
 8001040:	4629      	mov	r1, r5
 8001042:	f7ff fb5f 	bl	8000704 <__aeabi_uldivmod>
 8001046:	4602      	mov	r2, r0
 8001048:	460b      	mov	r3, r1
 800104a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    LoRa_WriteReg(0x06, (uint8_t)(frf >> 16));
 800104e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001052:	f04f 0200 	mov.w	r2, #0
 8001056:	f04f 0300 	mov.w	r3, #0
 800105a:	0c02      	lsrs	r2, r0, #16
 800105c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001060:	0c0b      	lsrs	r3, r1, #16
 8001062:	b2d3      	uxtb	r3, r2
 8001064:	4619      	mov	r1, r3
 8001066:	2006      	movs	r0, #6
 8001068:	f7ff ff04 	bl	8000e74 <LoRa_WriteReg>
    LoRa_WriteReg(0x07, (uint8_t)(frf >> 8));
 800106c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001070:	f04f 0200 	mov.w	r2, #0
 8001074:	f04f 0300 	mov.w	r3, #0
 8001078:	0a02      	lsrs	r2, r0, #8
 800107a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800107e:	0a0b      	lsrs	r3, r1, #8
 8001080:	b2d3      	uxtb	r3, r2
 8001082:	4619      	mov	r1, r3
 8001084:	2007      	movs	r0, #7
 8001086:	f7ff fef5 	bl	8000e74 <LoRa_WriteReg>
    LoRa_WriteReg(0x08, (uint8_t)(frf >> 0));
 800108a:	7a3b      	ldrb	r3, [r7, #8]
 800108c:	4619      	mov	r1, r3
 800108e:	2008      	movs	r0, #8
 8001090:	f7ff fef0 	bl	8000e74 <LoRa_WriteReg>
}
 8001094:	bf00      	nop
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bdb0      	pop	{r4, r5, r7, pc}
 800109c:	01e84800 	.word	0x01e84800

080010a0 <LoRa_Init>:

/* --- init with settings that match Arduino LoRa defaults --- */
void LoRa_Init(void) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
    LoRa_Reset();
 80010a4:	f7ff ffa8 	bl	8000ff8 <LoRa_Reset>

    /* Sleep, then LoRa sleep mode */
    LoRa_WriteReg(0x01, 0x00);
 80010a8:	2100      	movs	r1, #0
 80010aa:	2001      	movs	r0, #1
 80010ac:	f7ff fee2 	bl	8000e74 <LoRa_WriteReg>
    HAL_Delay(5);
 80010b0:	2005      	movs	r0, #5
 80010b2:	f001 f8a5 	bl	8002200 <HAL_Delay>
    LoRa_WriteReg(0x01, 0x80);
 80010b6:	2180      	movs	r1, #128	@ 0x80
 80010b8:	2001      	movs	r0, #1
 80010ba:	f7ff fedb 	bl	8000e74 <LoRa_WriteReg>
    HAL_Delay(5);
 80010be:	2005      	movs	r0, #5
 80010c0:	f001 f89e 	bl	8002200 <HAL_Delay>

    /* Frequency (433 MHz) */
    LoRa_SetFrequency(LORA_FREQUENCY);
 80010c4:	4818      	ldr	r0, [pc, #96]	@ (8001128 <LoRa_Init+0x88>)
 80010c6:	f7ff ffad 	bl	8001024 <LoRa_SetFrequency>

    /* PA config: PA_BOOST, max power (common for SX1278 Ra-02) */
    LoRa_WriteReg(0x09, 0x8F); // PA_BOOST, max power
 80010ca:	218f      	movs	r1, #143	@ 0x8f
 80010cc:	2009      	movs	r0, #9
 80010ce:	f7ff fed1 	bl	8000e74 <LoRa_WriteReg>

    /* Enable high-power PA if module supports it (optional) */
    LoRa_WriteReg(0x4D, 0x87); // RegPaDac (only on SX1276/78 family)
 80010d2:	2187      	movs	r1, #135	@ 0x87
 80010d4:	204d      	movs	r0, #77	@ 0x4d
 80010d6:	f7ff fecd 	bl	8000e74 <LoRa_WriteReg>

    /* LNA */
    LoRa_WriteReg(0x0C, 0x23);
 80010da:	2123      	movs	r1, #35	@ 0x23
 80010dc:	200c      	movs	r0, #12
 80010de:	f7ff fec9 	bl	8000e74 <LoRa_WriteReg>
    /* Modem config:
       RegModemConfig1 = 0x72 -> BW=125kHz, CR=4/5, Explicit header
       RegModemConfig2 = 0x74 -> SF7, CRC ON (Arduino default)
       RegModemConfig3 = 0x04 -> LowDataRateOptimize off, AGC Auto On
    */
    LoRa_WriteReg(0x1D, 0x72);
 80010e2:	2172      	movs	r1, #114	@ 0x72
 80010e4:	201d      	movs	r0, #29
 80010e6:	f7ff fec5 	bl	8000e74 <LoRa_WriteReg>
    LoRa_WriteReg(0x1E, 0x74);
 80010ea:	2174      	movs	r1, #116	@ 0x74
 80010ec:	201e      	movs	r0, #30
 80010ee:	f7ff fec1 	bl	8000e74 <LoRa_WriteReg>
    LoRa_WriteReg(0x26, 0x04);
 80010f2:	2104      	movs	r1, #4
 80010f4:	2026      	movs	r0, #38	@ 0x26
 80010f6:	f7ff febd 	bl	8000e74 <LoRa_WriteReg>

    /* Preamble = 8 */
    LoRa_WriteReg(0x20, 0x00);
 80010fa:	2100      	movs	r1, #0
 80010fc:	2020      	movs	r0, #32
 80010fe:	f7ff feb9 	bl	8000e74 <LoRa_WriteReg>
    LoRa_WriteReg(0x21, 0x08);
 8001102:	2108      	movs	r1, #8
 8001104:	2021      	movs	r0, #33	@ 0x21
 8001106:	f7ff feb5 	bl	8000e74 <LoRa_WriteReg>

    /* SyncWord = 0x22 (matches LoRa.setSyncWord(0x22) on Arduino) */
    LoRa_WriteReg(0x39, 0x22);
 800110a:	2122      	movs	r1, #34	@ 0x22
 800110c:	2039      	movs	r0, #57	@ 0x39
 800110e:	f7ff feb1 	bl	8000e74 <LoRa_WriteReg>

    /* Map DIO0 = RxDone/TxDone as normal (we'll poll IRQs) */
    LoRa_WriteReg(0x40, 0x00);
 8001112:	2100      	movs	r1, #0
 8001114:	2040      	movs	r0, #64	@ 0x40
 8001116:	f7ff fead 	bl	8000e74 <LoRa_WriteReg>

    /* Clear IRQs */
    LoRa_WriteReg(0x12, 0xFF);
 800111a:	21ff      	movs	r1, #255	@ 0xff
 800111c:	2012      	movs	r0, #18
 800111e:	f7ff fea9 	bl	8000e74 <LoRa_WriteReg>
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	19cf0e40 	.word	0x19cf0e40

0800112c <LoRa_SetStandby>:

/**
  * @brief Sets the LoRa module to Standby mode.
  */
void LoRa_SetStandby(void) {
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
    LoRa_WriteReg(0x01, 0x81); // Standby mode
 8001130:	2181      	movs	r1, #129	@ 0x81
 8001132:	2001      	movs	r0, #1
 8001134:	f7ff fe9e 	bl	8000e74 <LoRa_WriteReg>
    HAL_Delay(2);
 8001138:	2002      	movs	r0, #2
 800113a:	f001 f861 	bl	8002200 <HAL_Delay>
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}

08001142 <LoRa_SetRxContinuous>:

/**
  * @brief Sets the LoRa module to Continuous Receive mode.
  */
void LoRa_SetRxContinuous(void) {
 8001142:	b580      	push	{r7, lr}
 8001144:	af00      	add	r7, sp, #0
    LoRa_WriteReg(0x01, 0x85); // Continuous RX mode
 8001146:	2185      	movs	r1, #133	@ 0x85
 8001148:	2001      	movs	r0, #1
 800114a:	f7ff fe93 	bl	8000e74 <LoRa_WriteReg>
    HAL_Delay(2);
 800114e:	2002      	movs	r0, #2
 8001150:	f001 f856 	bl	8002200 <HAL_Delay>
}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}

08001158 <LoRa_SetTx>:

/**
  * @brief Sets the LoRa module to Transmit mode.
  */
void LoRa_SetTx(void) {
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
    LoRa_WriteReg(0x01, 0x83); // TX mode
 800115c:	2183      	movs	r1, #131	@ 0x83
 800115e:	2001      	movs	r0, #1
 8001160:	f7ff fe88 	bl	8000e74 <LoRa_WriteReg>
    HAL_Delay(2);
 8001164:	2002      	movs	r0, #2
 8001166:	f001 f84b 	bl	8002200 <HAL_Delay>
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}

0800116e <LoRa_SendPacket>:

/* --- send packet, poll TxDone, return to RX --- */
void LoRa_SendPacket(const uint8_t *buffer, uint8_t size) {
 800116e:	b580      	push	{r7, lr}
 8001170:	b084      	sub	sp, #16
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
 8001176:	460b      	mov	r3, r1
 8001178:	70fb      	strb	r3, [r7, #3]
    LoRa_SetStandby(); // Go to Standby before TX
 800117a:	f7ff ffd7 	bl	800112c <LoRa_SetStandby>

    /* Reset FIFO pointers */
    LoRa_WriteReg(0x0E, 0x00);
 800117e:	2100      	movs	r1, #0
 8001180:	200e      	movs	r0, #14
 8001182:	f7ff fe77 	bl	8000e74 <LoRa_WriteReg>
    LoRa_WriteReg(0x0D, 0x00);
 8001186:	2100      	movs	r1, #0
 8001188:	200d      	movs	r0, #13
 800118a:	f7ff fe73 	bl	8000e74 <LoRa_WriteReg>

    /* Write payload */
    LoRa_WriteBuffer(0x00, buffer, size);
 800118e:	78fb      	ldrb	r3, [r7, #3]
 8001190:	461a      	mov	r2, r3
 8001192:	6879      	ldr	r1, [r7, #4]
 8001194:	2000      	movs	r0, #0
 8001196:	f7ff fecb 	bl	8000f30 <LoRa_WriteBuffer>
    LoRa_WriteReg(0x22, size);
 800119a:	78fb      	ldrb	r3, [r7, #3]
 800119c:	4619      	mov	r1, r3
 800119e:	2022      	movs	r0, #34	@ 0x22
 80011a0:	f7ff fe68 	bl	8000e74 <LoRa_WriteReg>

    /* Clear IRQs */
    LoRa_WriteReg(0x12, 0xFF);
 80011a4:	21ff      	movs	r1, #255	@ 0xff
 80011a6:	2012      	movs	r0, #18
 80011a8:	f7ff fe64 	bl	8000e74 <LoRa_WriteReg>

    LoRa_SetTx(); // Enter TX
 80011ac:	f7ff ffd4 	bl	8001158 <LoRa_SetTx>

    /* Wait for TxDone */
    uint32_t t0 = HAL_GetTick();
 80011b0:	f001 f81c 	bl	80021ec <HAL_GetTick>
 80011b4:	60f8      	str	r0, [r7, #12]
    while ((LoRa_ReadReg(0x12) & 0x08) == 0) {
 80011b6:	e00a      	b.n	80011ce <LoRa_SendPacket+0x60>
        if ((HAL_GetTick() - t0) > LORA_TIMEOUT) break; // timeout
 80011b8:	f001 f818 	bl	80021ec <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80011c6:	d80b      	bhi.n	80011e0 <LoRa_SendPacket+0x72>
        HAL_Delay(1);
 80011c8:	2001      	movs	r0, #1
 80011ca:	f001 f819 	bl	8002200 <HAL_Delay>
    while ((LoRa_ReadReg(0x12) & 0x08) == 0) {
 80011ce:	2012      	movs	r0, #18
 80011d0:	f7ff fe7c 	bl	8000ecc <LoRa_ReadReg>
 80011d4:	4603      	mov	r3, r0
 80011d6:	f003 0308 	and.w	r3, r3, #8
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d0ec      	beq.n	80011b8 <LoRa_SendPacket+0x4a>
 80011de:	e000      	b.n	80011e2 <LoRa_SendPacket+0x74>
        if ((HAL_GetTick() - t0) > LORA_TIMEOUT) break; // timeout
 80011e0:	bf00      	nop
    }

    /* Clear TxDone (if set) */
    LoRa_WriteReg(0x12, 0x08);
 80011e2:	2108      	movs	r1, #8
 80011e4:	2012      	movs	r0, #18
 80011e6:	f7ff fe45 	bl	8000e74 <LoRa_WriteReg>

    LoRa_SetRxContinuous(); // Back to RX after TX
 80011ea:	f7ff ffaa 	bl	8001142 <LoRa_SetRxContinuous>
}
 80011ee:	bf00      	nop
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <LoRa_ReceivePacket>:

/* --- receive helper: returns length or 0 --- */
uint8_t LoRa_ReceivePacket(uint8_t *buffer) {
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b084      	sub	sp, #16
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
    uint8_t irq = LoRa_ReadReg(0x12);
 80011fe:	2012      	movs	r0, #18
 8001200:	f7ff fe64 	bl	8000ecc <LoRa_ReadReg>
 8001204:	4603      	mov	r3, r0
 8001206:	73fb      	strb	r3, [r7, #15]
    if (irq & 0x40) { // RxDone
 8001208:	7bfb      	ldrb	r3, [r7, #15]
 800120a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800120e:	2b00      	cmp	r3, #0
 8001210:	d025      	beq.n	800125e <LoRa_ReceivePacket+0x68>
        /* If CRC error bit (0x20) is set, ignore */
        if (irq & 0x20) {
 8001212:	7bfb      	ldrb	r3, [r7, #15]
 8001214:	f003 0320 	and.w	r3, r3, #32
 8001218:	2b00      	cmp	r3, #0
 800121a:	d005      	beq.n	8001228 <LoRa_ReceivePacket+0x32>
            /* CRC error */
            LoRa_WriteReg(0x12, 0xFF);
 800121c:	21ff      	movs	r1, #255	@ 0xff
 800121e:	2012      	movs	r0, #18
 8001220:	f7ff fe28 	bl	8000e74 <LoRa_WriteReg>
            return 0;
 8001224:	2300      	movs	r3, #0
 8001226:	e01b      	b.n	8001260 <LoRa_ReceivePacket+0x6a>
        }
        uint8_t nb = LoRa_ReadReg(0x13);   // RegRxNbBytes
 8001228:	2013      	movs	r0, #19
 800122a:	f7ff fe4f 	bl	8000ecc <LoRa_ReadReg>
 800122e:	4603      	mov	r3, r0
 8001230:	73bb      	strb	r3, [r7, #14]
        uint8_t addr = LoRa_ReadReg(0x10); // RegFifoRxCurrentAddr
 8001232:	2010      	movs	r0, #16
 8001234:	f7ff fe4a 	bl	8000ecc <LoRa_ReadReg>
 8001238:	4603      	mov	r3, r0
 800123a:	737b      	strb	r3, [r7, #13]
        LoRa_WriteReg(0x0D, addr);
 800123c:	7b7b      	ldrb	r3, [r7, #13]
 800123e:	4619      	mov	r1, r3
 8001240:	200d      	movs	r0, #13
 8001242:	f7ff fe17 	bl	8000e74 <LoRa_WriteReg>
        LoRa_ReadBuffer(0x00, buffer, nb);
 8001246:	7bbb      	ldrb	r3, [r7, #14]
 8001248:	461a      	mov	r2, r3
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	2000      	movs	r0, #0
 800124e:	f7ff fea1 	bl	8000f94 <LoRa_ReadBuffer>
        LoRa_WriteReg(0x12, 0xFF); // clear IRQs
 8001252:	21ff      	movs	r1, #255	@ 0xff
 8001254:	2012      	movs	r0, #18
 8001256:	f7ff fe0d 	bl	8000e74 <LoRa_WriteReg>
        return nb;
 800125a:	7bbb      	ldrb	r3, [r7, #14]
 800125c:	e000      	b.n	8001260 <LoRa_ReceivePacket+0x6a>
    }
    return 0;
 800125e:	2300      	movs	r3, #0
}
 8001260:	4618      	mov	r0, r3
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <LoRa_Task>:

/* --- LoRa Task --- */
void LoRa_Task(void) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b098      	sub	sp, #96	@ 0x60
 800126c:	af00      	add	r7, sp, #0
    // Set the initial mode
    if (loraMode == LORA_MODE_RECEIVER || loraMode == LORA_MODE_TRANCEIVER) {
 800126e:	4bb0      	ldr	r3, [pc, #704]	@ (8001530 <LoRa_Task+0x2c8>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b02      	cmp	r3, #2
 8001274:	d003      	beq.n	800127e <LoRa_Task+0x16>
 8001276:	4bae      	ldr	r3, [pc, #696]	@ (8001530 <LoRa_Task+0x2c8>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b03      	cmp	r3, #3
 800127c:	d105      	bne.n	800128a <LoRa_Task+0x22>
        LoRa_SetRxContinuous(); // Start in RX mode if receiver or transceiver
 800127e:	f7ff ff60 	bl	8001142 <LoRa_SetRxContinuous>
        Debug_Print("LoRa set to RX Continuous mode.\r\n");
 8001282:	48ac      	ldr	r0, [pc, #688]	@ (8001534 <LoRa_Task+0x2cc>)
 8001284:	f000 f9e8 	bl	8001658 <Debug_Print>
    if (loraMode == LORA_MODE_RECEIVER || loraMode == LORA_MODE_TRANCEIVER) {
 8001288:	e004      	b.n	8001294 <LoRa_Task+0x2c>
    } else {
        LoRa_SetStandby(); // Otherwise, start in Standby
 800128a:	f7ff ff4f 	bl	800112c <LoRa_SetStandby>
        Debug_Print("LoRa set to Standby mode.\r\n");
 800128e:	48aa      	ldr	r0, [pc, #680]	@ (8001538 <LoRa_Task+0x2d0>)
 8001290:	f000 f9e2 	bl	8001658 <Debug_Print>
    }

    // === Verify LoRa chip ===
    uint8_t version = LoRa_ReadReg(0x42);  // SX1278 RegVersion
 8001294:	2042      	movs	r0, #66	@ 0x42
 8001296:	f7ff fe19 	bl	8000ecc <LoRa_ReadReg>
 800129a:	4603      	mov	r3, r0
 800129c:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    if (version != 0x12) {
 80012a0:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80012a4:	2b12      	cmp	r3, #18
 80012a6:	d012      	beq.n	80012ce <LoRa_Task+0x66>
        z = 1;
 80012a8:	4ba4      	ldr	r3, [pc, #656]	@ (800153c <LoRa_Task+0x2d4>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	701a      	strb	r2, [r3, #0]
        char errMsg[LORA_BUFFER_SIZE];
        sprintf(errMsg, "LoRa not found! RegVersion=0x%02X\r\n", version);
 80012ae:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 80012b2:	463b      	mov	r3, r7
 80012b4:	49a2      	ldr	r1, [pc, #648]	@ (8001540 <LoRa_Task+0x2d8>)
 80012b6:	4618      	mov	r0, r3
 80012b8:	f004 fde6 	bl	8005e88 <siprintf>
        Debug_Print(errMsg);
 80012bc:	463b      	mov	r3, r7
 80012be:	4618      	mov	r0, r3
 80012c0:	f000 f9ca 	bl	8001658 <Debug_Print>
        HAL_Delay(2000);
 80012c4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80012c8:	f000 ff9a 	bl	8002200 <HAL_Delay>
 80012cc:	e188      	b.n	80015e0 <LoRa_Task+0x378>
        return; // retry until chip responds
    }

    switch (loraMode) {
 80012ce:	4b98      	ldr	r3, [pc, #608]	@ (8001530 <LoRa_Task+0x2c8>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b03      	cmp	r3, #3
 80012d4:	f000 80c1 	beq.w	800145a <LoRa_Task+0x1f2>
 80012d8:	2b03      	cmp	r3, #3
 80012da:	f300 8179 	bgt.w	80015d0 <LoRa_Task+0x368>
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d002      	beq.n	80012e8 <LoRa_Task+0x80>
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d01a      	beq.n	800131c <LoRa_Task+0xb4>
 80012e6:	e173      	b.n	80015d0 <LoRa_Task+0x368>
        case LORA_MODE_TRANSMITTER:
            // Transmitter logic
            Debug_Print("LoRa Mode: Transmitter\r\n");
 80012e8:	4896      	ldr	r0, [pc, #600]	@ (8001544 <LoRa_Task+0x2dc>)
 80012ea:	f000 f9b5 	bl	8001658 <Debug_Print>
            uint8_t tx_msg[] = "HELLO_TX";
 80012ee:	4a96      	ldr	r2, [pc, #600]	@ (8001548 <LoRa_Task+0x2e0>)
 80012f0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80012f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80012f6:	c303      	stmia	r3!, {r0, r1}
 80012f8:	701a      	strb	r2, [r3, #0]
            z = 5;
 80012fa:	4b90      	ldr	r3, [pc, #576]	@ (800153c <LoRa_Task+0x2d4>)
 80012fc:	2205      	movs	r2, #5
 80012fe:	701a      	strb	r2, [r3, #0]
            LoRa_SendPacket(tx_msg, sizeof(tx_msg) - 1);
 8001300:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001304:	2108      	movs	r1, #8
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff ff31 	bl	800116e <LoRa_SendPacket>
            Debug_Print("Sent: HELLO_TX\r\n");
 800130c:	488f      	ldr	r0, [pc, #572]	@ (800154c <LoRa_Task+0x2e4>)
 800130e:	f000 f9a3 	bl	8001658 <Debug_Print>
            HAL_Delay(2000); // Send every 2 seconds
 8001312:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001316:	f000 ff73 	bl	8002200 <HAL_Delay>
            break;
 800131a:	e161      	b.n	80015e0 <LoRa_Task+0x378>

        case LORA_MODE_RECEIVER:
            Debug_Print("LoRa Mode: Receiver\r\n");
 800131c:	488c      	ldr	r0, [pc, #560]	@ (8001550 <LoRa_Task+0x2e8>)
 800131e:	f000 f99b 	bl	8001658 <Debug_Print>
            connectionStatus = 0; // Reset connection status
 8001322:	4b8c      	ldr	r3, [pc, #560]	@ (8001554 <LoRa_Task+0x2ec>)
 8001324:	2200      	movs	r2, #0
 8001326:	701a      	strb	r2, [r3, #0]

            // Step 1: Wait for "PING" from transmitter
            for (int i = 0; i < 40; i++) {   // ~1s timeout (40 x 25ms)
 8001328:	2300      	movs	r3, #0
 800132a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800132c:	e038      	b.n	80013a0 <LoRa_Task+0x138>
                uint8_t len = LoRa_ReceivePacket(rxBuffer);
 800132e:	488a      	ldr	r0, [pc, #552]	@ (8001558 <LoRa_Task+0x2f0>)
 8001330:	f7ff ff61 	bl	80011f6 <LoRa_ReceivePacket>
 8001334:	4603      	mov	r3, r0
 8001336:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
                if (len > 0) {
 800133a:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 800133e:	2b00      	cmp	r3, #0
 8001340:	d028      	beq.n	8001394 <LoRa_Task+0x12c>
                    rxBuffer[len] = '\0'; // null terminate
 8001342:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8001346:	4a84      	ldr	r2, [pc, #528]	@ (8001558 <LoRa_Task+0x2f0>)
 8001348:	2100      	movs	r1, #0
 800134a:	54d1      	strb	r1, [r2, r3]
                    char dbg_rx[LORA_BUFFER_SIZE];
                    sprintf(dbg_rx, "Received: %s\r\n", rxBuffer);
 800134c:	463b      	mov	r3, r7
 800134e:	4a82      	ldr	r2, [pc, #520]	@ (8001558 <LoRa_Task+0x2f0>)
 8001350:	4982      	ldr	r1, [pc, #520]	@ (800155c <LoRa_Task+0x2f4>)
 8001352:	4618      	mov	r0, r3
 8001354:	f004 fd98 	bl	8005e88 <siprintf>
                    Debug_Print(dbg_rx);
 8001358:	463b      	mov	r3, r7
 800135a:	4618      	mov	r0, r3
 800135c:	f000 f97c 	bl	8001658 <Debug_Print>

                    if (strncmp((char*)rxBuffer, LORA_PING_MSG, strlen(LORA_PING_MSG)) == 0) {
 8001360:	2204      	movs	r2, #4
 8001362:	497f      	ldr	r1, [pc, #508]	@ (8001560 <LoRa_Task+0x2f8>)
 8001364:	487c      	ldr	r0, [pc, #496]	@ (8001558 <LoRa_Task+0x2f0>)
 8001366:	f004 fdb9 	bl	8005edc <strncmp>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d111      	bne.n	8001394 <LoRa_Task+0x12c>
                        // Step 2: Reply with "ACK"
                        uint8_t ack_msg[] = LORA_ACK_MSG;
 8001370:	4b7c      	ldr	r3, [pc, #496]	@ (8001564 <LoRa_Task+0x2fc>)
 8001372:	63bb      	str	r3, [r7, #56]	@ 0x38
                        LoRa_SendPacket(ack_msg, sizeof(ack_msg) - 1);
 8001374:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001378:	2103      	movs	r1, #3
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff fef7 	bl	800116e <LoRa_SendPacket>
                        Debug_Print("Sent: ACK\r\n");
 8001380:	4879      	ldr	r0, [pc, #484]	@ (8001568 <LoRa_Task+0x300>)
 8001382:	f000 f969 	bl	8001658 <Debug_Print>

                        connectionStatus = 1;
 8001386:	4b73      	ldr	r3, [pc, #460]	@ (8001554 <LoRa_Task+0x2ec>)
 8001388:	2201      	movs	r2, #1
 800138a:	701a      	strb	r2, [r3, #0]
                        z = 6; // connection established
 800138c:	4b6b      	ldr	r3, [pc, #428]	@ (800153c <LoRa_Task+0x2d4>)
 800138e:	2206      	movs	r2, #6
 8001390:	701a      	strb	r2, [r3, #0]
                        break;
 8001392:	e008      	b.n	80013a6 <LoRa_Task+0x13e>
                    }
                }
                HAL_Delay(25);
 8001394:	2019      	movs	r0, #25
 8001396:	f000 ff33 	bl	8002200 <HAL_Delay>
            for (int i = 0; i < 40; i++) {   // ~1s timeout (40 x 25ms)
 800139a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800139c:	3301      	adds	r3, #1
 800139e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80013a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80013a2:	2b27      	cmp	r3, #39	@ 0x27
 80013a4:	ddc3      	ble.n	800132e <LoRa_Task+0xc6>
            }

            // Step 3: Handle failed connection
            if (!connectionStatus) {
 80013a6:	4b6b      	ldr	r3, [pc, #428]	@ (8001554 <LoRa_Task+0x2ec>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d10a      	bne.n	80013c4 <LoRa_Task+0x15c>
                Debug_Print("Connection failed. No PING received.\r\n");
 80013ae:	486f      	ldr	r0, [pc, #444]	@ (800156c <LoRa_Task+0x304>)
 80013b0:	f000 f952 	bl	8001658 <Debug_Print>
                z = 7;
 80013b4:	4b61      	ldr	r3, [pc, #388]	@ (800153c <LoRa_Task+0x2d4>)
 80013b6:	2207      	movs	r2, #7
 80013b8:	701a      	strb	r2, [r3, #0]
                HAL_Delay(1000); // retry delay
 80013ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013be:	f000 ff1f 	bl	8002200 <HAL_Delay>
 80013c2:	e046      	b.n	8001452 <LoRa_Task+0x1ea>
            } else {
                // Step 4: Wait for HELLO after PING->ACK
                Debug_Print("Waiting for HELLO...\r\n");
 80013c4:	486a      	ldr	r0, [pc, #424]	@ (8001570 <LoRa_Task+0x308>)
 80013c6:	f000 f947 	bl	8001658 <Debug_Print>
                connectionStatus = 0; // reset until HELLO is confirmed
 80013ca:	4b62      	ldr	r3, [pc, #392]	@ (8001554 <LoRa_Task+0x2ec>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	701a      	strb	r2, [r3, #0]

                for (int j = 0; j < 40; j++) {   // ~1s timeout for HELLO
 80013d0:	2300      	movs	r3, #0
 80013d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80013d4:	e030      	b.n	8001438 <LoRa_Task+0x1d0>
                    uint8_t rx_len = LoRa_ReceivePacket(rxBuffer);
 80013d6:	4860      	ldr	r0, [pc, #384]	@ (8001558 <LoRa_Task+0x2f0>)
 80013d8:	f7ff ff0d 	bl	80011f6 <LoRa_ReceivePacket>
 80013dc:	4603      	mov	r3, r0
 80013de:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                    if (rx_len > 0) {
 80013e2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d020      	beq.n	800142c <LoRa_Task+0x1c4>
                        rxBuffer[rx_len] = '\0';
 80013ea:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80013ee:	4a5a      	ldr	r2, [pc, #360]	@ (8001558 <LoRa_Task+0x2f0>)
 80013f0:	2100      	movs	r1, #0
 80013f2:	54d1      	strb	r1, [r2, r3]
                        char dbg_rx2[LORA_BUFFER_SIZE];
                        sprintf(dbg_rx2, "Data Received: %s\r\n", rxBuffer);
 80013f4:	463b      	mov	r3, r7
 80013f6:	4a58      	ldr	r2, [pc, #352]	@ (8001558 <LoRa_Task+0x2f0>)
 80013f8:	495e      	ldr	r1, [pc, #376]	@ (8001574 <LoRa_Task+0x30c>)
 80013fa:	4618      	mov	r0, r3
 80013fc:	f004 fd44 	bl	8005e88 <siprintf>
                        Debug_Print(dbg_rx2);
 8001400:	463b      	mov	r3, r7
 8001402:	4618      	mov	r0, r3
 8001404:	f000 f928 	bl	8001658 <Debug_Print>

                        if (strncmp((char*)rxBuffer, LORA_HELLO_MSG, strlen(LORA_HELLO_MSG)) == 0) {
 8001408:	2205      	movs	r2, #5
 800140a:	495b      	ldr	r1, [pc, #364]	@ (8001578 <LoRa_Task+0x310>)
 800140c:	4852      	ldr	r0, [pc, #328]	@ (8001558 <LoRa_Task+0x2f0>)
 800140e:	f004 fd65 	bl	8005edc <strncmp>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d109      	bne.n	800142c <LoRa_Task+0x1c4>
                            Debug_Print("HELLO received -> Final Connection Established\r\n");
 8001418:	4858      	ldr	r0, [pc, #352]	@ (800157c <LoRa_Task+0x314>)
 800141a:	f000 f91d 	bl	8001658 <Debug_Print>
                            connectionStatus = 1;
 800141e:	4b4d      	ldr	r3, [pc, #308]	@ (8001554 <LoRa_Task+0x2ec>)
 8001420:	2201      	movs	r2, #1
 8001422:	701a      	strb	r2, [r3, #0]
                            z = 8; // Final established state
 8001424:	4b45      	ldr	r3, [pc, #276]	@ (800153c <LoRa_Task+0x2d4>)
 8001426:	2208      	movs	r2, #8
 8001428:	701a      	strb	r2, [r3, #0]
 800142a:	e008      	b.n	800143e <LoRa_Task+0x1d6>
                            break;
                        }
                    }
                    HAL_Delay(25);
 800142c:	2019      	movs	r0, #25
 800142e:	f000 fee7 	bl	8002200 <HAL_Delay>
                for (int j = 0; j < 40; j++) {   // ~1s timeout for HELLO
 8001432:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001434:	3301      	adds	r3, #1
 8001436:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001438:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800143a:	2b27      	cmp	r3, #39	@ 0x27
 800143c:	ddcb      	ble.n	80013d6 <LoRa_Task+0x16e>
                }

                if (!connectionStatus) {
 800143e:	4b45      	ldr	r3, [pc, #276]	@ (8001554 <LoRa_Task+0x2ec>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d105      	bne.n	8001452 <LoRa_Task+0x1ea>
                    Debug_Print("HELLO not received after ACK.\r\n");
 8001446:	484e      	ldr	r0, [pc, #312]	@ (8001580 <LoRa_Task+0x318>)
 8001448:	f000 f906 	bl	8001658 <Debug_Print>
                    z = 9; // special error state for HELLO timeout
 800144c:	4b3b      	ldr	r3, [pc, #236]	@ (800153c <LoRa_Task+0x2d4>)
 800144e:	2209      	movs	r2, #9
 8001450:	701a      	strb	r2, [r3, #0]
                }
            }

            HAL_Delay(100);
 8001452:	2064      	movs	r0, #100	@ 0x64
 8001454:	f000 fed4 	bl	8002200 <HAL_Delay>
            break;
 8001458:	e0c2      	b.n	80015e0 <LoRa_Task+0x378>

        case LORA_MODE_TRANCEIVER:
            // Transceiver logic (send and receive)
            Debug_Print("LoRa Mode: Transceiver\r\n");
 800145a:	484a      	ldr	r0, [pc, #296]	@ (8001584 <LoRa_Task+0x31c>)
 800145c:	f000 f8fc 	bl	8001658 <Debug_Print>

            // Try to receive first
            uint8_t rx_len_tr = LoRa_ReceivePacket(rxBuffer);
 8001460:	483d      	ldr	r0, [pc, #244]	@ (8001558 <LoRa_Task+0x2f0>)
 8001462:	f7ff fec8 	bl	80011f6 <LoRa_ReceivePacket>
 8001466:	4603      	mov	r3, r0
 8001468:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
            if (rx_len_tr > 0) {
 800146c:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8001470:	2b00      	cmp	r3, #0
 8001472:	d021      	beq.n	80014b8 <LoRa_Task+0x250>
                rxBuffer[rx_len_tr] = '\0'; // null terminate
 8001474:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8001478:	4a37      	ldr	r2, [pc, #220]	@ (8001558 <LoRa_Task+0x2f0>)
 800147a:	2100      	movs	r1, #0
 800147c:	54d1      	strb	r1, [r2, r3]
                char dbg_rx_tr[LORA_BUFFER_SIZE];
                sprintf(dbg_rx_tr, "Received: %s\r\n", rxBuffer);
 800147e:	463b      	mov	r3, r7
 8001480:	4a35      	ldr	r2, [pc, #212]	@ (8001558 <LoRa_Task+0x2f0>)
 8001482:	4936      	ldr	r1, [pc, #216]	@ (800155c <LoRa_Task+0x2f4>)
 8001484:	4618      	mov	r0, r3
 8001486:	f004 fcff 	bl	8005e88 <siprintf>
                Debug_Print(dbg_rx_tr);
 800148a:	463b      	mov	r3, r7
 800148c:	4618      	mov	r0, r3
 800148e:	f000 f8e3 	bl	8001658 <Debug_Print>

                // If "PING" is received, send "ACK"
                if (strncmp((char*)rxBuffer, LORA_PING_MSG, strlen(LORA_PING_MSG)) == 0) {
 8001492:	2204      	movs	r2, #4
 8001494:	4932      	ldr	r1, [pc, #200]	@ (8001560 <LoRa_Task+0x2f8>)
 8001496:	4830      	ldr	r0, [pc, #192]	@ (8001558 <LoRa_Task+0x2f0>)
 8001498:	f004 fd20 	bl	8005edc <strncmp>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d10a      	bne.n	80014b8 <LoRa_Task+0x250>
                    uint8_t ack_msg[] = LORA_ACK_MSG;
 80014a2:	4b30      	ldr	r3, [pc, #192]	@ (8001564 <LoRa_Task+0x2fc>)
 80014a4:	637b      	str	r3, [r7, #52]	@ 0x34
                    LoRa_SendPacket(ack_msg, sizeof(ack_msg) - 1);
 80014a6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80014aa:	2103      	movs	r1, #3
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff fe5e 	bl	800116e <LoRa_SendPacket>
                    Debug_Print("Sent: ACK\r\n");
 80014b2:	482d      	ldr	r0, [pc, #180]	@ (8001568 <LoRa_Task+0x300>)
 80014b4:	f000 f8d0 	bl	8001658 <Debug_Print>
                }
            }

            // Then send a PING
            uint8_t tx_msg_tr[] = LORA_PING_MSG;
 80014b8:	4b33      	ldr	r3, [pc, #204]	@ (8001588 <LoRa_Task+0x320>)
 80014ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80014bc:	2300      	movs	r3, #0
 80014be:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
            LoRa_SendPacket(tx_msg_tr, sizeof(tx_msg_tr) - 1);
 80014c2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80014c6:	2104      	movs	r1, #4
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff fe50 	bl	800116e <LoRa_SendPacket>
            Debug_Print("Sent: PING\r\n");
 80014ce:	482f      	ldr	r0, [pc, #188]	@ (800158c <LoRa_Task+0x324>)
 80014d0:	f000 f8c2 	bl	8001658 <Debug_Print>

            // Wait for ACK (max 500 ms)
            connectionStatus = 0;
 80014d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001554 <LoRa_Task+0x2ec>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < 20; i++) {   // 20 x 25ms = 500ms
 80014da:	2300      	movs	r3, #0
 80014dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80014de:	e061      	b.n	80015a4 <LoRa_Task+0x33c>
                uint8_t len = LoRa_ReceivePacket(rxBuffer);
 80014e0:	481d      	ldr	r0, [pc, #116]	@ (8001558 <LoRa_Task+0x2f0>)
 80014e2:	f7ff fe88 	bl	80011f6 <LoRa_ReceivePacket>
 80014e6:	4603      	mov	r3, r0
 80014e8:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
                if (len > 0) {
 80014ec:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d051      	beq.n	8001598 <LoRa_Task+0x330>
                    rxBuffer[len] = '\0'; // null terminate
 80014f4:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 80014f8:	4a17      	ldr	r2, [pc, #92]	@ (8001558 <LoRa_Task+0x2f0>)
 80014fa:	2100      	movs	r1, #0
 80014fc:	54d1      	strb	r1, [r2, r3]
                    char dbg_ack[LORA_BUFFER_SIZE];
                    sprintf(dbg_ack, "Received ACK check: %s\r\n", rxBuffer);
 80014fe:	463b      	mov	r3, r7
 8001500:	4a15      	ldr	r2, [pc, #84]	@ (8001558 <LoRa_Task+0x2f0>)
 8001502:	4923      	ldr	r1, [pc, #140]	@ (8001590 <LoRa_Task+0x328>)
 8001504:	4618      	mov	r0, r3
 8001506:	f004 fcbf 	bl	8005e88 <siprintf>
                    Debug_Print(dbg_ack);
 800150a:	463b      	mov	r3, r7
 800150c:	4618      	mov	r0, r3
 800150e:	f000 f8a3 	bl	8001658 <Debug_Print>

                    if (strncmp((char*)rxBuffer, LORA_ACK_MSG, strlen(LORA_ACK_MSG)) == 0) {
 8001512:	2203      	movs	r2, #3
 8001514:	491f      	ldr	r1, [pc, #124]	@ (8001594 <LoRa_Task+0x32c>)
 8001516:	4810      	ldr	r0, [pc, #64]	@ (8001558 <LoRa_Task+0x2f0>)
 8001518:	f004 fce0 	bl	8005edc <strncmp>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d13a      	bne.n	8001598 <LoRa_Task+0x330>
                        connectionStatus = 1;
 8001522:	4b0c      	ldr	r3, [pc, #48]	@ (8001554 <LoRa_Task+0x2ec>)
 8001524:	2201      	movs	r2, #1
 8001526:	701a      	strb	r2, [r3, #0]
                        z = 3;
 8001528:	4b04      	ldr	r3, [pc, #16]	@ (800153c <LoRa_Task+0x2d4>)
 800152a:	2203      	movs	r2, #3
 800152c:	701a      	strb	r2, [r3, #0]
 800152e:	e03c      	b.n	80015aa <LoRa_Task+0x342>
 8001530:	20000000 	.word	0x20000000
 8001534:	08006874 	.word	0x08006874
 8001538:	08006898 	.word	0x08006898
 800153c:	200000a8 	.word	0x200000a8
 8001540:	080068b4 	.word	0x080068b4
 8001544:	080068d8 	.word	0x080068d8
 8001548:	08006a80 	.word	0x08006a80
 800154c:	080068f4 	.word	0x080068f4
 8001550:	08006908 	.word	0x08006908
 8001554:	200000a9 	.word	0x200000a9
 8001558:	20000088 	.word	0x20000088
 800155c:	08006920 	.word	0x08006920
 8001560:	08006930 	.word	0x08006930
 8001564:	004b4341 	.word	0x004b4341
 8001568:	08006938 	.word	0x08006938
 800156c:	08006944 	.word	0x08006944
 8001570:	0800696c 	.word	0x0800696c
 8001574:	08006984 	.word	0x08006984
 8001578:	08006998 	.word	0x08006998
 800157c:	080069a0 	.word	0x080069a0
 8001580:	080069d4 	.word	0x080069d4
 8001584:	080069f4 	.word	0x080069f4
 8001588:	474e4950 	.word	0x474e4950
 800158c:	08006a10 	.word	0x08006a10
 8001590:	08006a20 	.word	0x08006a20
 8001594:	08006a3c 	.word	0x08006a3c
                        break;
                    }
                }
                HAL_Delay(25);
 8001598:	2019      	movs	r0, #25
 800159a:	f000 fe31 	bl	8002200 <HAL_Delay>
            for (int i = 0; i < 20; i++) {   // 20 x 25ms = 500ms
 800159e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015a0:	3301      	adds	r3, #1
 80015a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80015a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015a6:	2b13      	cmp	r3, #19
 80015a8:	dd9a      	ble.n	80014e0 <LoRa_Task+0x278>
            }

            if (!connectionStatus) {
 80015aa:	4b0f      	ldr	r3, [pc, #60]	@ (80015e8 <LoRa_Task+0x380>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d106      	bne.n	80015c0 <LoRa_Task+0x358>
                Debug_Print("Connection: LOST\r\n");
 80015b2:	480e      	ldr	r0, [pc, #56]	@ (80015ec <LoRa_Task+0x384>)
 80015b4:	f000 f850 	bl	8001658 <Debug_Print>
                z = 4;
 80015b8:	4b0d      	ldr	r3, [pc, #52]	@ (80015f0 <LoRa_Task+0x388>)
 80015ba:	2204      	movs	r2, #4
 80015bc:	701a      	strb	r2, [r3, #0]
 80015be:	e002      	b.n	80015c6 <LoRa_Task+0x35e>
            } else {
                Debug_Print("Connection: OK\r\n");
 80015c0:	480c      	ldr	r0, [pc, #48]	@ (80015f4 <LoRa_Task+0x38c>)
 80015c2:	f000 f849 	bl	8001658 <Debug_Print>
            }

            HAL_Delay(1000); // Delay before next cycle in transceiver mode
 80015c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015ca:	f000 fe19 	bl	8002200 <HAL_Delay>
            break;
 80015ce:	e007      	b.n	80015e0 <LoRa_Task+0x378>

        default:
            Debug_Print("Invalid LoRa Mode!\r\n");
 80015d0:	4809      	ldr	r0, [pc, #36]	@ (80015f8 <LoRa_Task+0x390>)
 80015d2:	f000 f841 	bl	8001658 <Debug_Print>
            HAL_Delay(1000);
 80015d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015da:	f000 fe11 	bl	8002200 <HAL_Delay>
            break;
 80015de:	bf00      	nop
    }
}
 80015e0:	3760      	adds	r7, #96	@ 0x60
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	200000a9 	.word	0x200000a9
 80015ec:	08006a40 	.word	0x08006a40
 80015f0:	200000a8 	.word	0x200000a8
 80015f4:	08006a54 	.word	0x08006a54
 80015f8:	08006a68 	.word	0x08006a68

080015fc <I2C_Scan>:
static void MX_RTC_Init(void);
static void MX_SPI1_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_I2C2_Init(void);
/* USER CODE BEGIN PFP */
void I2C_Scan(void) {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
    for (uint8_t i = 1; i < 128; i++) {
 8001602:	2301      	movs	r3, #1
 8001604:	71fb      	strb	r3, [r7, #7]
 8001606:	e017      	b.n	8001638 <I2C_Scan+0x3c>
        if (HAL_I2C_IsDeviceReady(&hi2c2, (i << 1), 2, 10) == HAL_OK) {
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	b29b      	uxth	r3, r3
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	b299      	uxth	r1, r3
 8001610:	230a      	movs	r3, #10
 8001612:	2202      	movs	r2, #2
 8001614:	480d      	ldr	r0, [pc, #52]	@ (800164c <I2C_Scan+0x50>)
 8001616:	f002 fa27 	bl	8003a68 <HAL_I2C_IsDeviceReady>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d108      	bne.n	8001632 <I2C_Scan+0x36>
            sprintf(buf, "Found device at 0x%02X\r\n", i);
 8001620:	79fb      	ldrb	r3, [r7, #7]
 8001622:	461a      	mov	r2, r3
 8001624:	490a      	ldr	r1, [pc, #40]	@ (8001650 <I2C_Scan+0x54>)
 8001626:	480b      	ldr	r0, [pc, #44]	@ (8001654 <I2C_Scan+0x58>)
 8001628:	f004 fc2e 	bl	8005e88 <siprintf>
            Debug_Print(buf);
 800162c:	4809      	ldr	r0, [pc, #36]	@ (8001654 <I2C_Scan+0x58>)
 800162e:	f000 f813 	bl	8001658 <Debug_Print>
    for (uint8_t i = 1; i < 128; i++) {
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	3301      	adds	r3, #1
 8001636:	71fb      	strb	r3, [r7, #7]
 8001638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163c:	2b00      	cmp	r3, #0
 800163e:	dae3      	bge.n	8001608 <I2C_Scan+0xc>
        }
    }
}
 8001640:	bf00      	nop
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	200000fc 	.word	0x200000fc
 8001650:	08006a8c 	.word	0x08006a8c
 8001654:	200000ac 	.word	0x200000ac

08001658 <Debug_Print>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Debug_Print(char *msg) {
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f7fe fd73 	bl	800014c <strlen>
 8001666:	4603      	mov	r3, r0
 8001668:	b29a      	uxth	r2, r3
 800166a:	f04f 33ff 	mov.w	r3, #4294967295
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	4803      	ldr	r0, [pc, #12]	@ (8001680 <Debug_Print+0x28>)
 8001672:	f004 fa34 	bl	8005ade <HAL_UART_Transmit>
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	200001bc 	.word	0x200001bc

08001684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b090      	sub	sp, #64	@ 0x40
 8001688:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800168a:	f000 fd57 	bl	800213c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800168e:	f000 f88b 	bl	80017a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001692:	f000 f9cf 	bl	8001a34 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001696:	f000 f8e1 	bl	800185c <MX_ADC1_Init>
  MX_RTC_Init();
 800169a:	f000 f94b 	bl	8001934 <MX_RTC_Init>
  MX_SPI1_Init();
 800169e:	f000 f969 	bl	8001974 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80016a2:	f000 f99d 	bl	80019e0 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 80016a6:	f000 f917 	bl	80018d8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80016aa:	f7ff fb94 	bl	8000dd6 <lcd_init>
  ADC_Init(&hadc1);
 80016ae:	4833      	ldr	r0, [pc, #204]	@ (800177c <main+0xf8>)
 80016b0:	f7ff f9c2 	bl	8000a38 <ADC_Init>
  LoRa_Init(); // Initialize LoRa module
 80016b4:	f7ff fcf4 	bl	80010a0 <LoRa_Init>
  I2C_Scan();
 80016b8:	f7ff ffa0 	bl	80015fc <I2C_Scan>
  Debug_Print("System Initialized\r\n");
 80016bc:	4830      	ldr	r0, [pc, #192]	@ (8001780 <main+0xfc>)
 80016be:	f7ff ffcb 	bl	8001658 <Debug_Print>
  uint8_t modem = LoRa_ReadReg(0x1D);
 80016c2:	201d      	movs	r0, #29
 80016c4:	f7ff fc02 	bl	8000ecc <LoRa_ReadReg>
 80016c8:	4603      	mov	r3, r0
 80016ca:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint8_t modem2 = LoRa_ReadReg(0x1E);
 80016ce:	201e      	movs	r0, #30
 80016d0:	f7ff fbfc 	bl	8000ecc <LoRa_ReadReg>
 80016d4:	4603      	mov	r3, r0
 80016d6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  char dbg[50];

  sprintf(dbg, "ModemCfg1=0x%02X, ModemCfg2=0x%02X\r\n", modem, modem2);
 80016da:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80016de:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80016e2:	1d38      	adds	r0, r7, #4
 80016e4:	4927      	ldr	r1, [pc, #156]	@ (8001784 <main+0x100>)
 80016e6:	f004 fbcf 	bl	8005e88 <siprintf>
  Debug_Print(dbg);
 80016ea:	1d3b      	adds	r3, r7, #4
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff ffb3 	bl	8001658 <Debug_Print>
  if (HAL_I2C_IsDeviceReady(&hi2c2, DS3231_ADDRESS, 2, 100) != HAL_OK) {
 80016f2:	2364      	movs	r3, #100	@ 0x64
 80016f4:	2202      	movs	r2, #2
 80016f6:	21d0      	movs	r1, #208	@ 0xd0
 80016f8:	4823      	ldr	r0, [pc, #140]	@ (8001788 <main+0x104>)
 80016fa:	f002 f9b5 	bl	8003a68 <HAL_I2C_IsDeviceReady>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d003      	beq.n	800170c <main+0x88>
      Debug_Print("❌ DS3231 not responding!\r\n");
 8001704:	4821      	ldr	r0, [pc, #132]	@ (800178c <main+0x108>)
 8001706:	f7ff ffa7 	bl	8001658 <Debug_Print>
 800170a:	e002      	b.n	8001712 <main+0x8e>
  } else {
      Debug_Print("✅ DS3231 detected!\r\n");
 800170c:	4820      	ldr	r0, [pc, #128]	@ (8001790 <main+0x10c>)
 800170e:	f7ff ffa3 	bl	8001658 <Debug_Print>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  LoRa_Task(); // Call the LoRa task to handle communication
 8001712:	f7ff fda9 	bl	8001268 <LoRa_Task>
	  Get_Time();
 8001716:	f000 fa53 	bl	8001bc0 <Get_Time>
	  ADC_ReadAllChannels(&hadc1, &adcData);
 800171a:	491e      	ldr	r1, [pc, #120]	@ (8001794 <main+0x110>)
 800171c:	4817      	ldr	r0, [pc, #92]	@ (800177c <main+0xf8>)
 800171e:	f7ff f99b 	bl	8000a58 <ADC_ReadAllChannels>
	        // === Display RTC (remains unchanged) ===

	        sprintf(lcdBuffer, "%02d:%02d:%02d", time.hour, time.minutes, time.seconds);
 8001722:	4b1d      	ldr	r3, [pc, #116]	@ (8001798 <main+0x114>)
 8001724:	789b      	ldrb	r3, [r3, #2]
 8001726:	461a      	mov	r2, r3
 8001728:	4b1b      	ldr	r3, [pc, #108]	@ (8001798 <main+0x114>)
 800172a:	785b      	ldrb	r3, [r3, #1]
 800172c:	4619      	mov	r1, r3
 800172e:	4b1a      	ldr	r3, [pc, #104]	@ (8001798 <main+0x114>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	460b      	mov	r3, r1
 8001736:	4919      	ldr	r1, [pc, #100]	@ (800179c <main+0x118>)
 8001738:	4819      	ldr	r0, [pc, #100]	@ (80017a0 <main+0x11c>)
 800173a:	f004 fba5 	bl	8005e88 <siprintf>
	        lcd_put_cur(0, 0);
 800173e:	2100      	movs	r1, #0
 8001740:	2000      	movs	r0, #0
 8001742:	f7ff fb29 	bl	8000d98 <lcd_put_cur>
	        lcd_send_string(lcdBuffer);
 8001746:	4816      	ldr	r0, [pc, #88]	@ (80017a0 <main+0x11c>)
 8001748:	f7ff fb7f 	bl	8000e4a <lcd_send_string>

	        sprintf(lcdBuffer, "%02d-%02d-20%02d", time.dayofmonth, time.month, time.year);
 800174c:	4b12      	ldr	r3, [pc, #72]	@ (8001798 <main+0x114>)
 800174e:	791b      	ldrb	r3, [r3, #4]
 8001750:	461a      	mov	r2, r3
 8001752:	4b11      	ldr	r3, [pc, #68]	@ (8001798 <main+0x114>)
 8001754:	795b      	ldrb	r3, [r3, #5]
 8001756:	4619      	mov	r1, r3
 8001758:	4b0f      	ldr	r3, [pc, #60]	@ (8001798 <main+0x114>)
 800175a:	799b      	ldrb	r3, [r3, #6]
 800175c:	9300      	str	r3, [sp, #0]
 800175e:	460b      	mov	r3, r1
 8001760:	4910      	ldr	r1, [pc, #64]	@ (80017a4 <main+0x120>)
 8001762:	480f      	ldr	r0, [pc, #60]	@ (80017a0 <main+0x11c>)
 8001764:	f004 fb90 	bl	8005e88 <siprintf>
	        lcd_put_cur(1, 0);
 8001768:	2100      	movs	r1, #0
 800176a:	2001      	movs	r0, #1
 800176c:	f7ff fb14 	bl	8000d98 <lcd_put_cur>
	        lcd_send_string(lcdBuffer);
 8001770:	480b      	ldr	r0, [pc, #44]	@ (80017a0 <main+0x11c>)
 8001772:	f7ff fb6a 	bl	8000e4a <lcd_send_string>
	  LoRa_Task(); // Call the LoRa task to handle communication
 8001776:	bf00      	nop
 8001778:	e7cb      	b.n	8001712 <main+0x8e>
 800177a:	bf00      	nop
 800177c:	200000cc 	.word	0x200000cc
 8001780:	08006aa8 	.word	0x08006aa8
 8001784:	08006ac0 	.word	0x08006ac0
 8001788:	200000fc 	.word	0x200000fc
 800178c:	08006ae8 	.word	0x08006ae8
 8001790:	08006b08 	.word	0x08006b08
 8001794:	20000218 	.word	0x20000218
 8001798:	20000250 	.word	0x20000250
 800179c:	08006b20 	.word	0x08006b20
 80017a0:	20000204 	.word	0x20000204
 80017a4:	08006b30 	.word	0x08006b30

080017a8 <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) {
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b094      	sub	sp, #80	@ 0x50
 80017ac:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017b2:	2228      	movs	r2, #40	@ 0x28
 80017b4:	2100      	movs	r1, #0
 80017b6:	4618      	mov	r0, r3
 80017b8:	f004 fb88 	bl	8005ecc <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]
 80017d4:	609a      	str	r2, [r3, #8]
 80017d6:	60da      	str	r2, [r3, #12]

    // Use HSI (8 MHz internal) with PLL
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017d8:	2302      	movs	r3, #2
 80017da:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017dc:	2301      	movs	r3, #1
 80017de:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017e0:	2310      	movs	r3, #16
 80017e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017e4:	2302      	movs	r3, #2
 80017e6:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2; // HSI/2 = 4 MHz
 80017e8:	2300      	movs	r3, #0
 80017ea:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;             // 4*16 = 64 MHz
 80017ec:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80017f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) { Error_Handler(); }
 80017f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017f6:	4618      	mov	r0, r3
 80017f8:	f002 fe10 	bl	800441c <HAL_RCC_OscConfig>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <SystemClock_Config+0x5e>
 8001802:	f000 f9bf 	bl	8001b84 <Error_Handler>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001806:	230f      	movs	r3, #15
 8001808:	617b      	str	r3, [r7, #20]
                                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK; // Updated line
 800180a:	2302      	movs	r3, #2
 800180c:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800180e:	2300      	movs	r3, #0
 8001810:	61fb      	str	r3, [r7, #28]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001812:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001816:	623b      	str	r3, [r7, #32]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001818:	2300      	movs	r3, #0
 800181a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) { Error_Handler(); }
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	2102      	movs	r1, #2
 8001822:	4618      	mov	r0, r3
 8001824:	f003 f87c 	bl	8004920 <HAL_RCC_ClockConfig>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <SystemClock_Config+0x8a>
 800182e:	f000 f9a9 	bl	8001b84 <Error_Handler>

    // Use LSI (internal ~40 kHz) for RTC, and HSI/6 for ADC
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC | RCC_PERIPHCLK_ADC;
 8001832:	2303      	movs	r3, #3
 8001834:	607b      	str	r3, [r7, #4]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001836:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800183a:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800183c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001840:	60fb      	str	r3, [r7, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) { Error_Handler(); }
 8001842:	1d3b      	adds	r3, r7, #4
 8001844:	4618      	mov	r0, r3
 8001846:	f003 f9f9 	bl	8004c3c <HAL_RCCEx_PeriphCLKConfig>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <SystemClock_Config+0xac>
 8001850:	f000 f998 	bl	8001b84 <Error_Handler>
}
 8001854:	bf00      	nop
 8001856:	3750      	adds	r7, #80	@ 0x50
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001862:	1d3b      	adds	r3, r7, #4
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800186c:	4b18      	ldr	r3, [pc, #96]	@ (80018d0 <MX_ADC1_Init+0x74>)
 800186e:	4a19      	ldr	r2, [pc, #100]	@ (80018d4 <MX_ADC1_Init+0x78>)
 8001870:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001872:	4b17      	ldr	r3, [pc, #92]	@ (80018d0 <MX_ADC1_Init+0x74>)
 8001874:	2200      	movs	r2, #0
 8001876:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001878:	4b15      	ldr	r3, [pc, #84]	@ (80018d0 <MX_ADC1_Init+0x74>)
 800187a:	2200      	movs	r2, #0
 800187c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800187e:	4b14      	ldr	r3, [pc, #80]	@ (80018d0 <MX_ADC1_Init+0x74>)
 8001880:	2200      	movs	r2, #0
 8001882:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001884:	4b12      	ldr	r3, [pc, #72]	@ (80018d0 <MX_ADC1_Init+0x74>)
 8001886:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800188a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800188c:	4b10      	ldr	r3, [pc, #64]	@ (80018d0 <MX_ADC1_Init+0x74>)
 800188e:	2200      	movs	r2, #0
 8001890:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001892:	4b0f      	ldr	r3, [pc, #60]	@ (80018d0 <MX_ADC1_Init+0x74>)
 8001894:	2201      	movs	r2, #1
 8001896:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001898:	480d      	ldr	r0, [pc, #52]	@ (80018d0 <MX_ADC1_Init+0x74>)
 800189a:	f000 fcd5 	bl	8002248 <HAL_ADC_Init>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80018a4:	f000 f96e 	bl	8001b84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80018a8:	2300      	movs	r3, #0
 80018aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018ac:	2301      	movs	r3, #1
 80018ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80018b0:	2300      	movs	r3, #0
 80018b2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018b4:	1d3b      	adds	r3, r7, #4
 80018b6:	4619      	mov	r1, r3
 80018b8:	4805      	ldr	r0, [pc, #20]	@ (80018d0 <MX_ADC1_Init+0x74>)
 80018ba:	f000 ff5d 	bl	8002778 <HAL_ADC_ConfigChannel>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80018c4:	f000 f95e 	bl	8001b84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018c8:	bf00      	nop
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	200000cc 	.word	0x200000cc
 80018d4:	40012400 	.word	0x40012400

080018d8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
	hi2c2.Instance             = I2C2;
 80018dc:	4b12      	ldr	r3, [pc, #72]	@ (8001928 <MX_I2C2_Init+0x50>)
 80018de:	4a13      	ldr	r2, [pc, #76]	@ (800192c <MX_I2C2_Init+0x54>)
 80018e0:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed      = 100000;   // Start with 100kHz
 80018e2:	4b11      	ldr	r3, [pc, #68]	@ (8001928 <MX_I2C2_Init+0x50>)
 80018e4:	4a12      	ldr	r2, [pc, #72]	@ (8001930 <MX_I2C2_Init+0x58>)
 80018e6:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle       = I2C_DUTYCYCLE_2;
 80018e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001928 <MX_I2C2_Init+0x50>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1     = 0;
 80018ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001928 <MX_I2C2_Init+0x50>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
 80018f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001928 <MX_I2C2_Init+0x50>)
 80018f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80018fa:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001928 <MX_I2C2_Init+0x50>)
 80018fe:	2200      	movs	r2, #0
 8001900:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2     = 0;
 8001902:	4b09      	ldr	r3, [pc, #36]	@ (8001928 <MX_I2C2_Init+0x50>)
 8001904:	2200      	movs	r2, #0
 8001906:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001908:	4b07      	ldr	r3, [pc, #28]	@ (8001928 <MX_I2C2_Init+0x50>)
 800190a:	2200      	movs	r2, #0
 800190c:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 800190e:	4b06      	ldr	r3, [pc, #24]	@ (8001928 <MX_I2C2_Init+0x50>)
 8001910:	2200      	movs	r2, #0
 8001912:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8001914:	4804      	ldr	r0, [pc, #16]	@ (8001928 <MX_I2C2_Init+0x50>)
 8001916:	f001 fbf1 	bl	80030fc <HAL_I2C_Init>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_I2C2_Init+0x4c>
	    Error_Handler();
 8001920:	f000 f930 	bl	8001b84 <Error_Handler>

  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001924:	bf00      	nop
 8001926:	bd80      	pop	{r7, pc}
 8001928:	200000fc 	.word	0x200000fc
 800192c:	40005800 	.word	0x40005800
 8001930:	000186a0 	.word	0x000186a0

08001934 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */

static void MX_RTC_Init(void) {
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
    RTC_TimeTypeDef sTime = {0};
 800193a:	1d3b      	adds	r3, r7, #4
 800193c:	2100      	movs	r1, #0
 800193e:	460a      	mov	r2, r1
 8001940:	801a      	strh	r2, [r3, #0]
 8001942:	460a      	mov	r2, r1
 8001944:	709a      	strb	r2, [r3, #2]
    RTC_DateTypeDef DateToUpdate = {0};
 8001946:	2300      	movs	r3, #0
 8001948:	603b      	str	r3, [r7, #0]

    hrtc.Instance = RTC;
 800194a:	4b08      	ldr	r3, [pc, #32]	@ (800196c <MX_RTC_Init+0x38>)
 800194c:	4a08      	ldr	r2, [pc, #32]	@ (8001970 <MX_RTC_Init+0x3c>)
 800194e:	601a      	str	r2, [r3, #0]
    hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND; // Set the asynchronous prescaler
 8001950:	4b06      	ldr	r3, [pc, #24]	@ (800196c <MX_RTC_Init+0x38>)
 8001952:	f04f 32ff 	mov.w	r2, #4294967295
 8001956:	605a      	str	r2, [r3, #4]
    hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM; // Set output source
 8001958:	4b04      	ldr	r3, [pc, #16]	@ (800196c <MX_RTC_Init+0x38>)
 800195a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800195e:	609a      	str	r2, [r3, #8]
//    if (HAL_RTC_Init(&hrtc) != HAL_OK) {
//        Debug_Print("Internal RTC Init Failed\r\n");
//        Error_Handler(); // Handle error
//    }

}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	bc80      	pop	{r7}
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	20000150 	.word	0x20000150
 8001970:	40002800 	.word	0x40002800

08001974 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001978:	4b17      	ldr	r3, [pc, #92]	@ (80019d8 <MX_SPI1_Init+0x64>)
 800197a:	4a18      	ldr	r2, [pc, #96]	@ (80019dc <MX_SPI1_Init+0x68>)
 800197c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800197e:	4b16      	ldr	r3, [pc, #88]	@ (80019d8 <MX_SPI1_Init+0x64>)
 8001980:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001984:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001986:	4b14      	ldr	r3, [pc, #80]	@ (80019d8 <MX_SPI1_Init+0x64>)
 8001988:	2200      	movs	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800198c:	4b12      	ldr	r3, [pc, #72]	@ (80019d8 <MX_SPI1_Init+0x64>)
 800198e:	2200      	movs	r2, #0
 8001990:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001992:	4b11      	ldr	r3, [pc, #68]	@ (80019d8 <MX_SPI1_Init+0x64>)
 8001994:	2200      	movs	r2, #0
 8001996:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001998:	4b0f      	ldr	r3, [pc, #60]	@ (80019d8 <MX_SPI1_Init+0x64>)
 800199a:	2200      	movs	r2, #0
 800199c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800199e:	4b0e      	ldr	r3, [pc, #56]	@ (80019d8 <MX_SPI1_Init+0x64>)
 80019a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80019a6:	4b0c      	ldr	r3, [pc, #48]	@ (80019d8 <MX_SPI1_Init+0x64>)
 80019a8:	2218      	movs	r2, #24
 80019aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019ac:	4b0a      	ldr	r3, [pc, #40]	@ (80019d8 <MX_SPI1_Init+0x64>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019b2:	4b09      	ldr	r3, [pc, #36]	@ (80019d8 <MX_SPI1_Init+0x64>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019b8:	4b07      	ldr	r3, [pc, #28]	@ (80019d8 <MX_SPI1_Init+0x64>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80019be:	4b06      	ldr	r3, [pc, #24]	@ (80019d8 <MX_SPI1_Init+0x64>)
 80019c0:	220a      	movs	r2, #10
 80019c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019c4:	4804      	ldr	r0, [pc, #16]	@ (80019d8 <MX_SPI1_Init+0x64>)
 80019c6:	f003 faa5 	bl	8004f14 <HAL_SPI_Init>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80019d0:	f000 f8d8 	bl	8001b84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019d4:	bf00      	nop
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20000164 	.word	0x20000164
 80019dc:	40013000 	.word	0x40013000

080019e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019e4:	4b11      	ldr	r3, [pc, #68]	@ (8001a2c <MX_USART1_UART_Init+0x4c>)
 80019e6:	4a12      	ldr	r2, [pc, #72]	@ (8001a30 <MX_USART1_UART_Init+0x50>)
 80019e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019ea:	4b10      	ldr	r3, [pc, #64]	@ (8001a2c <MX_USART1_UART_Init+0x4c>)
 80019ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019f2:	4b0e      	ldr	r3, [pc, #56]	@ (8001a2c <MX_USART1_UART_Init+0x4c>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019f8:	4b0c      	ldr	r3, [pc, #48]	@ (8001a2c <MX_USART1_UART_Init+0x4c>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019fe:	4b0b      	ldr	r3, [pc, #44]	@ (8001a2c <MX_USART1_UART_Init+0x4c>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a04:	4b09      	ldr	r3, [pc, #36]	@ (8001a2c <MX_USART1_UART_Init+0x4c>)
 8001a06:	220c      	movs	r2, #12
 8001a08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a0a:	4b08      	ldr	r3, [pc, #32]	@ (8001a2c <MX_USART1_UART_Init+0x4c>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a10:	4b06      	ldr	r3, [pc, #24]	@ (8001a2c <MX_USART1_UART_Init+0x4c>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a16:	4805      	ldr	r0, [pc, #20]	@ (8001a2c <MX_USART1_UART_Init+0x4c>)
 8001a18:	f004 f811 	bl	8005a3e <HAL_UART_Init>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a22:	f000 f8af 	bl	8001b84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	200001bc 	.word	0x200001bc
 8001a30:	40013800 	.word	0x40013800

08001a34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b088      	sub	sp, #32
 8001a38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3a:	f107 0310 	add.w	r3, r7, #16
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	605a      	str	r2, [r3, #4]
 8001a44:	609a      	str	r2, [r3, #8]
 8001a46:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a48:	4b4a      	ldr	r3, [pc, #296]	@ (8001b74 <MX_GPIO_Init+0x140>)
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	4a49      	ldr	r2, [pc, #292]	@ (8001b74 <MX_GPIO_Init+0x140>)
 8001a4e:	f043 0310 	orr.w	r3, r3, #16
 8001a52:	6193      	str	r3, [r2, #24]
 8001a54:	4b47      	ldr	r3, [pc, #284]	@ (8001b74 <MX_GPIO_Init+0x140>)
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	f003 0310 	and.w	r3, r3, #16
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a60:	4b44      	ldr	r3, [pc, #272]	@ (8001b74 <MX_GPIO_Init+0x140>)
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	4a43      	ldr	r2, [pc, #268]	@ (8001b74 <MX_GPIO_Init+0x140>)
 8001a66:	f043 0320 	orr.w	r3, r3, #32
 8001a6a:	6193      	str	r3, [r2, #24]
 8001a6c:	4b41      	ldr	r3, [pc, #260]	@ (8001b74 <MX_GPIO_Init+0x140>)
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	f003 0320 	and.w	r3, r3, #32
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a78:	4b3e      	ldr	r3, [pc, #248]	@ (8001b74 <MX_GPIO_Init+0x140>)
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	4a3d      	ldr	r2, [pc, #244]	@ (8001b74 <MX_GPIO_Init+0x140>)
 8001a7e:	f043 0304 	orr.w	r3, r3, #4
 8001a82:	6193      	str	r3, [r2, #24]
 8001a84:	4b3b      	ldr	r3, [pc, #236]	@ (8001b74 <MX_GPIO_Init+0x140>)
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	f003 0304 	and.w	r3, r3, #4
 8001a8c:	607b      	str	r3, [r7, #4]
 8001a8e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a90:	4b38      	ldr	r3, [pc, #224]	@ (8001b74 <MX_GPIO_Init+0x140>)
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	4a37      	ldr	r2, [pc, #220]	@ (8001b74 <MX_GPIO_Init+0x140>)
 8001a96:	f043 0308 	orr.w	r3, r3, #8
 8001a9a:	6193      	str	r3, [r2, #24]
 8001a9c:	4b35      	ldr	r3, [pc, #212]	@ (8001b74 <MX_GPIO_Init+0x140>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	f003 0308 	and.w	r3, r3, #8
 8001aa4:	603b      	str	r3, [r7, #0]
 8001aa6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001aae:	4832      	ldr	r0, [pc, #200]	@ (8001b78 <MX_GPIO_Init+0x144>)
 8001ab0:	f001 fb0c 	bl	80030cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Relay1_Pin|Relay2_Pin|Relay3_Pin|SWITCH4_Pin
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f248 0147 	movw	r1, #32839	@ 0x8047
 8001aba:	4830      	ldr	r0, [pc, #192]	@ (8001b7c <MX_GPIO_Init+0x148>)
 8001abc:	f001 fb06 	bl	80030cc <HAL_GPIO_WritePin>
                          |LORA_STATUS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_SET);
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f44f 51c8 	mov.w	r1, #6400	@ 0x1900
 8001ac6:	482e      	ldr	r0, [pc, #184]	@ (8001b80 <MX_GPIO_Init+0x14c>)
 8001ac8:	f001 fb00 	bl	80030cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_SELECT_GPIO_Port, LORA_SELECT_Pin, GPIO_PIN_RESET);
 8001acc:	2200      	movs	r2, #0
 8001ace:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ad2:	482b      	ldr	r0, [pc, #172]	@ (8001b80 <MX_GPIO_Init+0x14c>)
 8001ad4:	f001 fafa 	bl	80030cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED4_Pin|LED5_Pin, GPIO_PIN_SET);
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8001ade:	4827      	ldr	r0, [pc, #156]	@ (8001b7c <MX_GPIO_Init+0x148>)
 8001ae0:	f001 faf4 	bl	80030cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001ae4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ae8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aea:	2301      	movs	r3, #1
 8001aec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af2:	2302      	movs	r3, #2
 8001af4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001af6:	f107 0310 	add.w	r3, r7, #16
 8001afa:	4619      	mov	r1, r3
 8001afc:	481e      	ldr	r0, [pc, #120]	@ (8001b78 <MX_GPIO_Init+0x144>)
 8001afe:	f001 f961 	bl	8002dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : AC_voltage_Pin AC_current_Pin */
  GPIO_InitStruct.Pin = AC_voltage_Pin|AC_current_Pin;
 8001b02:	23c0      	movs	r3, #192	@ 0xc0
 8001b04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b06:	2303      	movs	r3, #3
 8001b08:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0a:	f107 0310 	add.w	r3, r7, #16
 8001b0e:	4619      	mov	r1, r3
 8001b10:	481b      	ldr	r0, [pc, #108]	@ (8001b80 <MX_GPIO_Init+0x14c>)
 8001b12:	f001 f957 	bl	8002dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Relay1_Pin Relay2_Pin Relay3_Pin SWITCH4_Pin
                           LORA_STATUS_Pin LED4_Pin LED5_Pin */
  GPIO_InitStruct.Pin = Relay1_Pin|Relay2_Pin|Relay3_Pin|SWITCH4_Pin
 8001b16:	f248 3347 	movw	r3, #33607	@ 0x8347
 8001b1a:	613b      	str	r3, [r7, #16]
                          |LORA_STATUS_Pin|LED4_Pin|LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b24:	2302      	movs	r3, #2
 8001b26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b28:	f107 0310 	add.w	r3, r7, #16
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4813      	ldr	r0, [pc, #76]	@ (8001b7c <MX_GPIO_Init+0x148>)
 8001b30:	f001 f948 	bl	8002dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWITCH1_Pin SWITCH2_Pin SWITCH3_Pin RF_DATA_Pin */
  GPIO_InitStruct.Pin = SWITCH1_Pin|SWITCH2_Pin|SWITCH3_Pin|RF_DATA_Pin;
 8001b34:	f44f 43e1 	mov.w	r3, #28800	@ 0x7080
 8001b38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b42:	f107 0310 	add.w	r3, r7, #16
 8001b46:	4619      	mov	r1, r3
 8001b48:	480c      	ldr	r0, [pc, #48]	@ (8001b7c <MX_GPIO_Init+0x148>)
 8001b4a:	f001 f93b 	bl	8002dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LORA_SELECT_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LORA_SELECT_Pin;
 8001b4e:	f44f 4319 	mov.w	r3, #39168	@ 0x9900
 8001b52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b54:	2301      	movs	r3, #1
 8001b56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b60:	f107 0310 	add.w	r3, r7, #16
 8001b64:	4619      	mov	r1, r3
 8001b66:	4806      	ldr	r0, [pc, #24]	@ (8001b80 <MX_GPIO_Init+0x14c>)
 8001b68:	f001 f92c 	bl	8002dc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001b6c:	bf00      	nop
 8001b6e:	3720      	adds	r7, #32
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40021000 	.word	0x40021000
 8001b78:	40011000 	.word	0x40011000
 8001b7c:	40010c00 	.word	0x40010c00
 8001b80:	40010800 	.word	0x40010800

08001b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b88:	b672      	cpsid	i
}
 8001b8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b8c:	bf00      	nop
 8001b8e:	e7fd      	b.n	8001b8c <Error_Handler+0x8>

08001b90 <bcdToDec>:

uint8_t decToBcd(int val) {
    return (uint8_t)((val / 10 * 16) + (val % 10));
}

int bcdToDec(uint8_t val) {
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	71fb      	strb	r3, [r7, #7]
    return (int)((val / 16 * 10) + (val % 16));
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	091b      	lsrs	r3, r3, #4
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	461a      	mov	r2, r3
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	f003 030f 	and.w	r3, r3, #15
 8001bb2:	4413      	add	r3, r2
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr
	...

08001bc0 <Get_Time>:
        sprintf(err, "RTC Set Error: %lu\r\n", HAL_I2C_GetError(&hi2c2));
        Debug_Print(err);
    }
}

void Get_Time(void) {
 8001bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bc2:	b0a5      	sub	sp, #148	@ 0x94
 8001bc4:	af06      	add	r7, sp, #24
    uint8_t get_time[7];

    if (HAL_I2C_Mem_Read(&hi2c2, DS3231_ADDRESS, 0x00,
 8001bc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bca:	9302      	str	r3, [sp, #8]
 8001bcc:	2307      	movs	r3, #7
 8001bce:	9301      	str	r3, [sp, #4]
 8001bd0:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001bd4:	9300      	str	r3, [sp, #0]
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	2200      	movs	r2, #0
 8001bda:	21d0      	movs	r1, #208	@ 0xd0
 8001bdc:	4849      	ldr	r0, [pc, #292]	@ (8001d04 <Get_Time+0x144>)
 8001bde:	f001 fccf 	bl	8003580 <HAL_I2C_Mem_Read>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d028      	beq.n	8001c3a <Get_Time+0x7a>
                         I2C_MEMADD_SIZE_8BIT, get_time, 7, 1000) != HAL_OK) {
        char err[50];
        sprintf(err, "RTC Read Error: %lu\r\n", HAL_I2C_GetError(&hi2c2));
 8001be8:	4846      	ldr	r0, [pc, #280]	@ (8001d04 <Get_Time+0x144>)
 8001bea:	f002 f86b 	bl	8003cc4 <HAL_I2C_GetError>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	463b      	mov	r3, r7
 8001bf2:	4945      	ldr	r1, [pc, #276]	@ (8001d08 <Get_Time+0x148>)
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f004 f947 	bl	8005e88 <siprintf>
        Debug_Print(err);
 8001bfa:	463b      	mov	r3, r7
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff fd2b 	bl	8001658 <Debug_Print>

        time.seconds = time.minutes = time.hour =
        time.dayofweek = time.dayofmonth =
        time.month = time.year = 0xFF;
 8001c02:	4b42      	ldr	r3, [pc, #264]	@ (8001d0c <Get_Time+0x14c>)
 8001c04:	22ff      	movs	r2, #255	@ 0xff
 8001c06:	719a      	strb	r2, [r3, #6]
 8001c08:	4b40      	ldr	r3, [pc, #256]	@ (8001d0c <Get_Time+0x14c>)
 8001c0a:	799a      	ldrb	r2, [r3, #6]
 8001c0c:	4b3f      	ldr	r3, [pc, #252]	@ (8001d0c <Get_Time+0x14c>)
 8001c0e:	715a      	strb	r2, [r3, #5]
 8001c10:	4b3e      	ldr	r3, [pc, #248]	@ (8001d0c <Get_Time+0x14c>)
 8001c12:	795a      	ldrb	r2, [r3, #5]
        time.dayofweek = time.dayofmonth =
 8001c14:	4b3d      	ldr	r3, [pc, #244]	@ (8001d0c <Get_Time+0x14c>)
 8001c16:	711a      	strb	r2, [r3, #4]
 8001c18:	4b3c      	ldr	r3, [pc, #240]	@ (8001d0c <Get_Time+0x14c>)
 8001c1a:	791a      	ldrb	r2, [r3, #4]
 8001c1c:	4b3b      	ldr	r3, [pc, #236]	@ (8001d0c <Get_Time+0x14c>)
 8001c1e:	70da      	strb	r2, [r3, #3]
 8001c20:	4b3a      	ldr	r3, [pc, #232]	@ (8001d0c <Get_Time+0x14c>)
 8001c22:	78da      	ldrb	r2, [r3, #3]
        time.seconds = time.minutes = time.hour =
 8001c24:	4b39      	ldr	r3, [pc, #228]	@ (8001d0c <Get_Time+0x14c>)
 8001c26:	709a      	strb	r2, [r3, #2]
 8001c28:	4b38      	ldr	r3, [pc, #224]	@ (8001d0c <Get_Time+0x14c>)
 8001c2a:	789a      	ldrb	r2, [r3, #2]
 8001c2c:	4b37      	ldr	r3, [pc, #220]	@ (8001d0c <Get_Time+0x14c>)
 8001c2e:	705a      	strb	r2, [r3, #1]
 8001c30:	4b36      	ldr	r3, [pc, #216]	@ (8001d0c <Get_Time+0x14c>)
 8001c32:	785a      	ldrb	r2, [r3, #1]
 8001c34:	4b35      	ldr	r3, [pc, #212]	@ (8001d0c <Get_Time+0x14c>)
 8001c36:	701a      	strb	r2, [r3, #0]
 8001c38:	e061      	b.n	8001cfe <Get_Time+0x13e>
        return;
    }

    char dbg[60];
    sprintf(dbg, "Raw RTC Data: %02X %02X %02X %02X %02X %02X %02X\r\n",
            get_time[0], get_time[1], get_time[2],
 8001c3a:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
    sprintf(dbg, "Raw RTC Data: %02X %02X %02X %02X %02X %02X %02X\r\n",
 8001c3e:	461e      	mov	r6, r3
            get_time[0], get_time[1], get_time[2],
 8001c40:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
    sprintf(dbg, "Raw RTC Data: %02X %02X %02X %02X %02X %02X %02X\r\n",
 8001c44:	469c      	mov	ip, r3
            get_time[0], get_time[1], get_time[2],
 8001c46:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
            get_time[3], get_time[4], get_time[5], get_time[6]);
 8001c4a:	f897 2073 	ldrb.w	r2, [r7, #115]	@ 0x73
 8001c4e:	f897 1074 	ldrb.w	r1, [r7, #116]	@ 0x74
 8001c52:	f897 0075 	ldrb.w	r0, [r7, #117]	@ 0x75
    sprintf(dbg, "Raw RTC Data: %02X %02X %02X %02X %02X %02X %02X\r\n",
 8001c56:	4604      	mov	r4, r0
            get_time[3], get_time[4], get_time[5], get_time[6]);
 8001c58:	f897 0076 	ldrb.w	r0, [r7, #118]	@ 0x76
    sprintf(dbg, "Raw RTC Data: %02X %02X %02X %02X %02X %02X %02X\r\n",
 8001c5c:	4605      	mov	r5, r0
 8001c5e:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8001c62:	9504      	str	r5, [sp, #16]
 8001c64:	9403      	str	r4, [sp, #12]
 8001c66:	9102      	str	r1, [sp, #8]
 8001c68:	9201      	str	r2, [sp, #4]
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	4663      	mov	r3, ip
 8001c6e:	4632      	mov	r2, r6
 8001c70:	4927      	ldr	r1, [pc, #156]	@ (8001d10 <Get_Time+0x150>)
 8001c72:	f004 f909 	bl	8005e88 <siprintf>
    Debug_Print(dbg);
 8001c76:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff fcec 	bl	8001658 <Debug_Print>

    time.seconds    = bcdToDec(get_time[0]);
 8001c80:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff ff83 	bl	8001b90 <bcdToDec>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	b2da      	uxtb	r2, r3
 8001c8e:	4b1f      	ldr	r3, [pc, #124]	@ (8001d0c <Get_Time+0x14c>)
 8001c90:	701a      	strb	r2, [r3, #0]
    time.minutes    = bcdToDec(get_time[1]);
 8001c92:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff ff7a 	bl	8001b90 <bcdToDec>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d0c <Get_Time+0x14c>)
 8001ca2:	705a      	strb	r2, [r3, #1]
    time.hour       = bcdToDec(get_time[2]);
 8001ca4:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff ff71 	bl	8001b90 <bcdToDec>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	4b16      	ldr	r3, [pc, #88]	@ (8001d0c <Get_Time+0x14c>)
 8001cb4:	709a      	strb	r2, [r3, #2]
    time.dayofweek  = bcdToDec(get_time[3]);
 8001cb6:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff ff68 	bl	8001b90 <bcdToDec>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	b2da      	uxtb	r2, r3
 8001cc4:	4b11      	ldr	r3, [pc, #68]	@ (8001d0c <Get_Time+0x14c>)
 8001cc6:	70da      	strb	r2, [r3, #3]
    time.dayofmonth = bcdToDec(get_time[4]);
 8001cc8:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff ff5f 	bl	8001b90 <bcdToDec>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8001d0c <Get_Time+0x14c>)
 8001cd8:	711a      	strb	r2, [r3, #4]
    time.month      = bcdToDec(get_time[5]);
 8001cda:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff ff56 	bl	8001b90 <bcdToDec>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	4b08      	ldr	r3, [pc, #32]	@ (8001d0c <Get_Time+0x14c>)
 8001cea:	715a      	strb	r2, [r3, #5]
    time.year       = bcdToDec(get_time[6]);
 8001cec:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff ff4d 	bl	8001b90 <bcdToDec>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	4b04      	ldr	r3, [pc, #16]	@ (8001d0c <Get_Time+0x14c>)
 8001cfc:	719a      	strb	r2, [r3, #6]
}
 8001cfe:	377c      	adds	r7, #124	@ 0x7c
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d04:	200000fc 	.word	0x200000fc
 8001d08:	08006b5c 	.word	0x08006b5c
 8001d0c:	20000250 	.word	0x20000250
 8001d10:	08006b74 	.word	0x08006b74

08001d14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d1a:	4b15      	ldr	r3, [pc, #84]	@ (8001d70 <HAL_MspInit+0x5c>)
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	4a14      	ldr	r2, [pc, #80]	@ (8001d70 <HAL_MspInit+0x5c>)
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	6193      	str	r3, [r2, #24]
 8001d26:	4b12      	ldr	r3, [pc, #72]	@ (8001d70 <HAL_MspInit+0x5c>)
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	60bb      	str	r3, [r7, #8]
 8001d30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d32:	4b0f      	ldr	r3, [pc, #60]	@ (8001d70 <HAL_MspInit+0x5c>)
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	4a0e      	ldr	r2, [pc, #56]	@ (8001d70 <HAL_MspInit+0x5c>)
 8001d38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d3c:	61d3      	str	r3, [r2, #28]
 8001d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d70 <HAL_MspInit+0x5c>)
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d46:	607b      	str	r3, [r7, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d74 <HAL_MspInit+0x60>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	4a04      	ldr	r2, [pc, #16]	@ (8001d74 <HAL_MspInit+0x60>)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d66:	bf00      	nop
 8001d68:	3714      	adds	r7, #20
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr
 8001d70:	40021000 	.word	0x40021000
 8001d74:	40010000 	.word	0x40010000

08001d78 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b088      	sub	sp, #32
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d80:	f107 0310 	add.w	r3, r7, #16
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a14      	ldr	r2, [pc, #80]	@ (8001de4 <HAL_ADC_MspInit+0x6c>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d121      	bne.n	8001ddc <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d98:	4b13      	ldr	r3, [pc, #76]	@ (8001de8 <HAL_ADC_MspInit+0x70>)
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	4a12      	ldr	r2, [pc, #72]	@ (8001de8 <HAL_ADC_MspInit+0x70>)
 8001d9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001da2:	6193      	str	r3, [r2, #24]
 8001da4:	4b10      	ldr	r3, [pc, #64]	@ (8001de8 <HAL_ADC_MspInit+0x70>)
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db0:	4b0d      	ldr	r3, [pc, #52]	@ (8001de8 <HAL_ADC_MspInit+0x70>)
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	4a0c      	ldr	r2, [pc, #48]	@ (8001de8 <HAL_ADC_MspInit+0x70>)
 8001db6:	f043 0304 	orr.w	r3, r3, #4
 8001dba:	6193      	str	r3, [r2, #24]
 8001dbc:	4b0a      	ldr	r3, [pc, #40]	@ (8001de8 <HAL_ADC_MspInit+0x70>)
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	f003 0304 	and.w	r3, r3, #4
 8001dc4:	60bb      	str	r3, [r7, #8]
 8001dc6:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001dc8:	233f      	movs	r3, #63	@ 0x3f
 8001dca:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd0:	f107 0310 	add.w	r3, r7, #16
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4805      	ldr	r0, [pc, #20]	@ (8001dec <HAL_ADC_MspInit+0x74>)
 8001dd8:	f000 fff4 	bl	8002dc4 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001ddc:	bf00      	nop
 8001dde:	3720      	adds	r7, #32
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40012400 	.word	0x40012400
 8001de8:	40021000 	.word	0x40021000
 8001dec:	40010800 	.word	0x40010800

08001df0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b088      	sub	sp, #32
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df8:	f107 0310 	add.w	r3, r7, #16
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a16      	ldr	r2, [pc, #88]	@ (8001e64 <HAL_I2C_MspInit+0x74>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d124      	bne.n	8001e5a <HAL_I2C_MspInit+0x6a>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e10:	4b15      	ldr	r3, [pc, #84]	@ (8001e68 <HAL_I2C_MspInit+0x78>)
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	4a14      	ldr	r2, [pc, #80]	@ (8001e68 <HAL_I2C_MspInit+0x78>)
 8001e16:	f043 0308 	orr.w	r3, r3, #8
 8001e1a:	6193      	str	r3, [r2, #24]
 8001e1c:	4b12      	ldr	r3, [pc, #72]	@ (8001e68 <HAL_I2C_MspInit+0x78>)
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	f003 0308 	and.w	r3, r3, #8
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e28:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001e2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e2e:	2312      	movs	r3, #18
 8001e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e32:	2303      	movs	r3, #3
 8001e34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e36:	f107 0310 	add.w	r3, r7, #16
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	480b      	ldr	r0, [pc, #44]	@ (8001e6c <HAL_I2C_MspInit+0x7c>)
 8001e3e:	f000 ffc1 	bl	8002dc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e42:	4b09      	ldr	r3, [pc, #36]	@ (8001e68 <HAL_I2C_MspInit+0x78>)
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	4a08      	ldr	r2, [pc, #32]	@ (8001e68 <HAL_I2C_MspInit+0x78>)
 8001e48:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e4c:	61d3      	str	r3, [r2, #28]
 8001e4e:	4b06      	ldr	r3, [pc, #24]	@ (8001e68 <HAL_I2C_MspInit+0x78>)
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e56:	60bb      	str	r3, [r7, #8]
 8001e58:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001e5a:	bf00      	nop
 8001e5c:	3720      	adds	r7, #32
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40005800 	.word	0x40005800
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	40010c00 	.word	0x40010c00

08001e70 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b08a      	sub	sp, #40	@ 0x28
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e78:	f107 0314 	add.w	r3, r7, #20
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	605a      	str	r2, [r3, #4]
 8001e82:	609a      	str	r2, [r3, #8]
 8001e84:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a22      	ldr	r2, [pc, #136]	@ (8001f14 <HAL_SPI_MspInit+0xa4>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d13d      	bne.n	8001f0c <HAL_SPI_MspInit+0x9c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e90:	4b21      	ldr	r3, [pc, #132]	@ (8001f18 <HAL_SPI_MspInit+0xa8>)
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	4a20      	ldr	r2, [pc, #128]	@ (8001f18 <HAL_SPI_MspInit+0xa8>)
 8001e96:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e9a:	6193      	str	r3, [r2, #24]
 8001e9c:	4b1e      	ldr	r3, [pc, #120]	@ (8001f18 <HAL_SPI_MspInit+0xa8>)
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ea4:	613b      	str	r3, [r7, #16]
 8001ea6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f18 <HAL_SPI_MspInit+0xa8>)
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	4a1a      	ldr	r2, [pc, #104]	@ (8001f18 <HAL_SPI_MspInit+0xa8>)
 8001eae:	f043 0308 	orr.w	r3, r3, #8
 8001eb2:	6193      	str	r3, [r2, #24]
 8001eb4:	4b18      	ldr	r3, [pc, #96]	@ (8001f18 <HAL_SPI_MspInit+0xa8>)
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	f003 0308 	and.w	r3, r3, #8
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001ec0:	2328      	movs	r3, #40	@ 0x28
 8001ec2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ecc:	f107 0314 	add.w	r3, r7, #20
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4812      	ldr	r0, [pc, #72]	@ (8001f1c <HAL_SPI_MspInit+0xac>)
 8001ed4:	f000 ff76 	bl	8002dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ed8:	2310      	movs	r3, #16
 8001eda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001edc:	2300      	movs	r3, #0
 8001ede:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee4:	f107 0314 	add.w	r3, r7, #20
 8001ee8:	4619      	mov	r1, r3
 8001eea:	480c      	ldr	r0, [pc, #48]	@ (8001f1c <HAL_SPI_MspInit+0xac>)
 8001eec:	f000 ff6a 	bl	8002dc4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8001ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8001f20 <HAL_SPI_MspInit+0xb0>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef8:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001efc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f00:	f043 0301 	orr.w	r3, r3, #1
 8001f04:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f06:	4a06      	ldr	r2, [pc, #24]	@ (8001f20 <HAL_SPI_MspInit+0xb0>)
 8001f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0a:	6053      	str	r3, [r2, #4]

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001f0c:	bf00      	nop
 8001f0e:	3728      	adds	r7, #40	@ 0x28
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40013000 	.word	0x40013000
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	40010c00 	.word	0x40010c00
 8001f20:	40010000 	.word	0x40010000

08001f24 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b088      	sub	sp, #32
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2c:	f107 0310 	add.w	r3, r7, #16
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a1c      	ldr	r2, [pc, #112]	@ (8001fb0 <HAL_UART_MspInit+0x8c>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d131      	bne.n	8001fa8 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f44:	4b1b      	ldr	r3, [pc, #108]	@ (8001fb4 <HAL_UART_MspInit+0x90>)
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	4a1a      	ldr	r2, [pc, #104]	@ (8001fb4 <HAL_UART_MspInit+0x90>)
 8001f4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f4e:	6193      	str	r3, [r2, #24]
 8001f50:	4b18      	ldr	r3, [pc, #96]	@ (8001fb4 <HAL_UART_MspInit+0x90>)
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f58:	60fb      	str	r3, [r7, #12]
 8001f5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5c:	4b15      	ldr	r3, [pc, #84]	@ (8001fb4 <HAL_UART_MspInit+0x90>)
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	4a14      	ldr	r2, [pc, #80]	@ (8001fb4 <HAL_UART_MspInit+0x90>)
 8001f62:	f043 0304 	orr.w	r3, r3, #4
 8001f66:	6193      	str	r3, [r2, #24]
 8001f68:	4b12      	ldr	r3, [pc, #72]	@ (8001fb4 <HAL_UART_MspInit+0x90>)
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	f003 0304 	and.w	r3, r3, #4
 8001f70:	60bb      	str	r3, [r7, #8]
 8001f72:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f78:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f82:	f107 0310 	add.w	r3, r7, #16
 8001f86:	4619      	mov	r1, r3
 8001f88:	480b      	ldr	r0, [pc, #44]	@ (8001fb8 <HAL_UART_MspInit+0x94>)
 8001f8a:	f000 ff1b 	bl	8002dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f94:	2300      	movs	r3, #0
 8001f96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9c:	f107 0310 	add.w	r3, r7, #16
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4805      	ldr	r0, [pc, #20]	@ (8001fb8 <HAL_UART_MspInit+0x94>)
 8001fa4:	f000 ff0e 	bl	8002dc4 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001fa8:	bf00      	nop
 8001faa:	3720      	adds	r7, #32
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40013800 	.word	0x40013800
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	40010800 	.word	0x40010800

08001fbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fc0:	bf00      	nop
 8001fc2:	e7fd      	b.n	8001fc0 <NMI_Handler+0x4>

08001fc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fc8:	bf00      	nop
 8001fca:	e7fd      	b.n	8001fc8 <HardFault_Handler+0x4>

08001fcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fd0:	bf00      	nop
 8001fd2:	e7fd      	b.n	8001fd0 <MemManage_Handler+0x4>

08001fd4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fd8:	bf00      	nop
 8001fda:	e7fd      	b.n	8001fd8 <BusFault_Handler+0x4>

08001fdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fe0:	bf00      	nop
 8001fe2:	e7fd      	b.n	8001fe0 <UsageFault_Handler+0x4>

08001fe4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr

08001ff0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr

08001ffc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002000:	bf00      	nop
 8002002:	46bd      	mov	sp, r7
 8002004:	bc80      	pop	{r7}
 8002006:	4770      	bx	lr

08002008 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800200c:	f000 f8dc 	bl	80021c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002010:	bf00      	nop
 8002012:	bd80      	pop	{r7, pc}

08002014 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800201c:	4a14      	ldr	r2, [pc, #80]	@ (8002070 <_sbrk+0x5c>)
 800201e:	4b15      	ldr	r3, [pc, #84]	@ (8002074 <_sbrk+0x60>)
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002028:	4b13      	ldr	r3, [pc, #76]	@ (8002078 <_sbrk+0x64>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d102      	bne.n	8002036 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002030:	4b11      	ldr	r3, [pc, #68]	@ (8002078 <_sbrk+0x64>)
 8002032:	4a12      	ldr	r2, [pc, #72]	@ (800207c <_sbrk+0x68>)
 8002034:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002036:	4b10      	ldr	r3, [pc, #64]	@ (8002078 <_sbrk+0x64>)
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4413      	add	r3, r2
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	429a      	cmp	r2, r3
 8002042:	d207      	bcs.n	8002054 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002044:	f003 ff70 	bl	8005f28 <__errno>
 8002048:	4603      	mov	r3, r0
 800204a:	220c      	movs	r2, #12
 800204c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800204e:	f04f 33ff 	mov.w	r3, #4294967295
 8002052:	e009      	b.n	8002068 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002054:	4b08      	ldr	r3, [pc, #32]	@ (8002078 <_sbrk+0x64>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800205a:	4b07      	ldr	r3, [pc, #28]	@ (8002078 <_sbrk+0x64>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4413      	add	r3, r2
 8002062:	4a05      	ldr	r2, [pc, #20]	@ (8002078 <_sbrk+0x64>)
 8002064:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002066:	68fb      	ldr	r3, [r7, #12]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	20005000 	.word	0x20005000
 8002074:	00000400 	.word	0x00000400
 8002078:	20000258 	.word	0x20000258
 800207c:	200003a8 	.word	0x200003a8

08002080 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr

0800208c <UART_TransmitString>:
  * @param huart: Pointer to the UART handle (e.g., &huart1)
  * @param str: Pointer to the string to transmit
  * @retval None
  */
void UART_TransmitString(UART_HandleTypeDef *huart, const char *str)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8002096:	6838      	ldr	r0, [r7, #0]
 8002098:	f7fe f858 	bl	800014c <strlen>
 800209c:	4603      	mov	r3, r0
 800209e:	b29a      	uxth	r2, r3
 80020a0:	f04f 33ff 	mov.w	r3, #4294967295
 80020a4:	6839      	ldr	r1, [r7, #0]
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f003 fd19 	bl	8005ade <HAL_UART_Transmit>
}
 80020ac:	bf00      	nop
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <UART_ReadDataPacket>:
  * @param data: Pointer to the data to be copied
  * @param size: Size of the data to be copied
  * @retval None
  */
void UART_ReadDataPacket(char *buffer, const char *data, size_t size)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
    if (buffer != NULL && data != NULL && size > 0)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00f      	beq.n	80020e6 <UART_ReadDataPacket+0x32>
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00c      	beq.n	80020e6 <UART_ReadDataPacket+0x32>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d009      	beq.n	80020e6 <UART_ReadDataPacket+0x32>
    {
        strncpy(buffer, data, size);
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	68b9      	ldr	r1, [r7, #8]
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	f003 ff12 	bl	8005f00 <strncpy>
        buffer[size] = '\0'; // Null-terminate the string
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4413      	add	r3, r2
 80020e2:	2200      	movs	r2, #0
 80020e4:	701a      	strb	r2, [r3, #0]
    }
}
 80020e6:	bf00      	nop
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
	...

080020f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020f0:	f7ff ffc6 	bl	8002080 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020f4:	480b      	ldr	r0, [pc, #44]	@ (8002124 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80020f6:	490c      	ldr	r1, [pc, #48]	@ (8002128 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80020f8:	4a0c      	ldr	r2, [pc, #48]	@ (800212c <LoopFillZerobss+0x16>)
  movs r3, #0
 80020fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020fc:	e002      	b.n	8002104 <LoopCopyDataInit>

080020fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002100:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002102:	3304      	adds	r3, #4

08002104 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002104:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002106:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002108:	d3f9      	bcc.n	80020fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800210a:	4a09      	ldr	r2, [pc, #36]	@ (8002130 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800210c:	4c09      	ldr	r4, [pc, #36]	@ (8002134 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800210e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002110:	e001      	b.n	8002116 <LoopFillZerobss>

08002112 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002112:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002114:	3204      	adds	r2, #4

08002116 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002116:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002118:	d3fb      	bcc.n	8002112 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800211a:	f003 ff0b 	bl	8005f34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800211e:	f7ff fab1 	bl	8001684 <main>
  bx lr
 8002122:	4770      	bx	lr
  ldr r0, =_sdata
 8002124:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002128:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800212c:	08006ca8 	.word	0x08006ca8
  ldr r2, =_sbss
 8002130:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002134:	200003a8 	.word	0x200003a8

08002138 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002138:	e7fe      	b.n	8002138 <ADC1_2_IRQHandler>
	...

0800213c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002140:	4b08      	ldr	r3, [pc, #32]	@ (8002164 <HAL_Init+0x28>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a07      	ldr	r2, [pc, #28]	@ (8002164 <HAL_Init+0x28>)
 8002146:	f043 0310 	orr.w	r3, r3, #16
 800214a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800214c:	2003      	movs	r0, #3
 800214e:	f000 fe05 	bl	8002d5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002152:	2000      	movs	r0, #0
 8002154:	f000 f808 	bl	8002168 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002158:	f7ff fddc 	bl	8001d14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40022000 	.word	0x40022000

08002168 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002170:	4b12      	ldr	r3, [pc, #72]	@ (80021bc <HAL_InitTick+0x54>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	4b12      	ldr	r3, [pc, #72]	@ (80021c0 <HAL_InitTick+0x58>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	4619      	mov	r1, r3
 800217a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800217e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002182:	fbb2 f3f3 	udiv	r3, r2, r3
 8002186:	4618      	mov	r0, r3
 8002188:	f000 fe0f 	bl	8002daa <HAL_SYSTICK_Config>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e00e      	b.n	80021b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b0f      	cmp	r3, #15
 800219a:	d80a      	bhi.n	80021b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800219c:	2200      	movs	r2, #0
 800219e:	6879      	ldr	r1, [r7, #4]
 80021a0:	f04f 30ff 	mov.w	r0, #4294967295
 80021a4:	f000 fde5 	bl	8002d72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021a8:	4a06      	ldr	r2, [pc, #24]	@ (80021c4 <HAL_InitTick+0x5c>)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
 80021b0:	e000      	b.n	80021b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20000004 	.word	0x20000004
 80021c0:	2000000c 	.word	0x2000000c
 80021c4:	20000008 	.word	0x20000008

080021c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021cc:	4b05      	ldr	r3, [pc, #20]	@ (80021e4 <HAL_IncTick+0x1c>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	461a      	mov	r2, r3
 80021d2:	4b05      	ldr	r3, [pc, #20]	@ (80021e8 <HAL_IncTick+0x20>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4413      	add	r3, r2
 80021d8:	4a03      	ldr	r2, [pc, #12]	@ (80021e8 <HAL_IncTick+0x20>)
 80021da:	6013      	str	r3, [r2, #0]
}
 80021dc:	bf00      	nop
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr
 80021e4:	2000000c 	.word	0x2000000c
 80021e8:	2000025c 	.word	0x2000025c

080021ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  return uwTick;
 80021f0:	4b02      	ldr	r3, [pc, #8]	@ (80021fc <HAL_GetTick+0x10>)
 80021f2:	681b      	ldr	r3, [r3, #0]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bc80      	pop	{r7}
 80021fa:	4770      	bx	lr
 80021fc:	2000025c 	.word	0x2000025c

08002200 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002208:	f7ff fff0 	bl	80021ec <HAL_GetTick>
 800220c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002218:	d005      	beq.n	8002226 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800221a:	4b0a      	ldr	r3, [pc, #40]	@ (8002244 <HAL_Delay+0x44>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	461a      	mov	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	4413      	add	r3, r2
 8002224:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002226:	bf00      	nop
 8002228:	f7ff ffe0 	bl	80021ec <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	429a      	cmp	r2, r3
 8002236:	d8f7      	bhi.n	8002228 <HAL_Delay+0x28>
  {
  }
}
 8002238:	bf00      	nop
 800223a:	bf00      	nop
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	2000000c 	.word	0x2000000c

08002248 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002250:	2300      	movs	r3, #0
 8002252:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002254:	2300      	movs	r3, #0
 8002256:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002258:	2300      	movs	r3, #0
 800225a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800225c:	2300      	movs	r3, #0
 800225e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e0be      	b.n	80023e8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002274:	2b00      	cmp	r3, #0
 8002276:	d109      	bne.n	800228c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7ff fd76 	bl	8001d78 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f000 fbc5 	bl	8002a1c <ADC_ConversionStop_Disable>
 8002292:	4603      	mov	r3, r0
 8002294:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800229a:	f003 0310 	and.w	r3, r3, #16
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f040 8099 	bne.w	80023d6 <HAL_ADC_Init+0x18e>
 80022a4:	7dfb      	ldrb	r3, [r7, #23]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f040 8095 	bne.w	80023d6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022b0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80022b4:	f023 0302 	bic.w	r3, r3, #2
 80022b8:	f043 0202 	orr.w	r2, r3, #2
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80022c8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	7b1b      	ldrb	r3, [r3, #12]
 80022ce:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80022d0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022e0:	d003      	beq.n	80022ea <HAL_ADC_Init+0xa2>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d102      	bne.n	80022f0 <HAL_ADC_Init+0xa8>
 80022ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022ee:	e000      	b.n	80022f2 <HAL_ADC_Init+0xaa>
 80022f0:	2300      	movs	r3, #0
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	7d1b      	ldrb	r3, [r3, #20]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d119      	bne.n	8002334 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	7b1b      	ldrb	r3, [r3, #12]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d109      	bne.n	800231c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	3b01      	subs	r3, #1
 800230e:	035a      	lsls	r2, r3, #13
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	4313      	orrs	r3, r2
 8002314:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002318:	613b      	str	r3, [r7, #16]
 800231a:	e00b      	b.n	8002334 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002320:	f043 0220 	orr.w	r2, r3, #32
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800232c:	f043 0201 	orr.w	r2, r3, #1
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	430a      	orrs	r2, r1
 8002346:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	689a      	ldr	r2, [r3, #8]
 800234e:	4b28      	ldr	r3, [pc, #160]	@ (80023f0 <HAL_ADC_Init+0x1a8>)
 8002350:	4013      	ands	r3, r2
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6812      	ldr	r2, [r2, #0]
 8002356:	68b9      	ldr	r1, [r7, #8]
 8002358:	430b      	orrs	r3, r1
 800235a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002364:	d003      	beq.n	800236e <HAL_ADC_Init+0x126>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d104      	bne.n	8002378 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	3b01      	subs	r3, #1
 8002374:	051b      	lsls	r3, r3, #20
 8002376:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800237e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	430a      	orrs	r2, r1
 800238a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	689a      	ldr	r2, [r3, #8]
 8002392:	4b18      	ldr	r3, [pc, #96]	@ (80023f4 <HAL_ADC_Init+0x1ac>)
 8002394:	4013      	ands	r3, r2
 8002396:	68ba      	ldr	r2, [r7, #8]
 8002398:	429a      	cmp	r2, r3
 800239a:	d10b      	bne.n	80023b4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023a6:	f023 0303 	bic.w	r3, r3, #3
 80023aa:	f043 0201 	orr.w	r2, r3, #1
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023b2:	e018      	b.n	80023e6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b8:	f023 0312 	bic.w	r3, r3, #18
 80023bc:	f043 0210 	orr.w	r2, r3, #16
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c8:	f043 0201 	orr.w	r2, r3, #1
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023d4:	e007      	b.n	80023e6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023da:	f043 0210 	orr.w	r2, r3, #16
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80023e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3718      	adds	r7, #24
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	ffe1f7fd 	.word	0xffe1f7fd
 80023f4:	ff1f0efe 	.word	0xff1f0efe

080023f8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002400:	2300      	movs	r3, #0
 8002402:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800240a:	2b01      	cmp	r3, #1
 800240c:	d101      	bne.n	8002412 <HAL_ADC_Start+0x1a>
 800240e:	2302      	movs	r3, #2
 8002410:	e098      	b.n	8002544 <HAL_ADC_Start+0x14c>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 faa4 	bl	8002968 <ADC_Enable>
 8002420:	4603      	mov	r3, r0
 8002422:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002424:	7bfb      	ldrb	r3, [r7, #15]
 8002426:	2b00      	cmp	r3, #0
 8002428:	f040 8087 	bne.w	800253a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002430:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002434:	f023 0301 	bic.w	r3, r3, #1
 8002438:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a41      	ldr	r2, [pc, #260]	@ (800254c <HAL_ADC_Start+0x154>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d105      	bne.n	8002456 <HAL_ADC_Start+0x5e>
 800244a:	4b41      	ldr	r3, [pc, #260]	@ (8002550 <HAL_ADC_Start+0x158>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d115      	bne.n	8002482 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800245a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800246c:	2b00      	cmp	r3, #0
 800246e:	d026      	beq.n	80024be <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002474:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002478:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002480:	e01d      	b.n	80024be <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002486:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a2f      	ldr	r2, [pc, #188]	@ (8002550 <HAL_ADC_Start+0x158>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d004      	beq.n	80024a2 <HAL_ADC_Start+0xaa>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a2b      	ldr	r2, [pc, #172]	@ (800254c <HAL_ADC_Start+0x154>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d10d      	bne.n	80024be <HAL_ADC_Start+0xc6>
 80024a2:	4b2b      	ldr	r3, [pc, #172]	@ (8002550 <HAL_ADC_Start+0x158>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d007      	beq.n	80024be <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80024b6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d006      	beq.n	80024d8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ce:	f023 0206 	bic.w	r2, r3, #6
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80024d6:	e002      	b.n	80024de <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f06f 0202 	mvn.w	r2, #2
 80024ee:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80024fa:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80024fe:	d113      	bne.n	8002528 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002504:	4a11      	ldr	r2, [pc, #68]	@ (800254c <HAL_ADC_Start+0x154>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d105      	bne.n	8002516 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800250a:	4b11      	ldr	r3, [pc, #68]	@ (8002550 <HAL_ADC_Start+0x158>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002512:	2b00      	cmp	r3, #0
 8002514:	d108      	bne.n	8002528 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002524:	609a      	str	r2, [r3, #8]
 8002526:	e00c      	b.n	8002542 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689a      	ldr	r2, [r3, #8]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002536:	609a      	str	r2, [r3, #8]
 8002538:	e003      	b.n	8002542 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002542:	7bfb      	ldrb	r3, [r7, #15]
}
 8002544:	4618      	mov	r0, r3
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40012800 	.word	0x40012800
 8002550:	40012400 	.word	0x40012400

08002554 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002554:	b590      	push	{r4, r7, lr}
 8002556:	b087      	sub	sp, #28
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002562:	2300      	movs	r3, #0
 8002564:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002566:	2300      	movs	r3, #0
 8002568:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800256a:	f7ff fe3f 	bl	80021ec <HAL_GetTick>
 800256e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00b      	beq.n	8002596 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002582:	f043 0220 	orr.w	r2, r3, #32
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e0d3      	b.n	800273e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d131      	bne.n	8002608 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025aa:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d12a      	bne.n	8002608 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80025b2:	e021      	b.n	80025f8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ba:	d01d      	beq.n	80025f8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d007      	beq.n	80025d2 <HAL_ADC_PollForConversion+0x7e>
 80025c2:	f7ff fe13 	bl	80021ec <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d212      	bcs.n	80025f8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10b      	bne.n	80025f8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e4:	f043 0204 	orr.w	r2, r3, #4
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e0a2      	b.n	800273e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0d6      	beq.n	80025b4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002606:	e070      	b.n	80026ea <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002608:	4b4f      	ldr	r3, [pc, #316]	@ (8002748 <HAL_ADC_PollForConversion+0x1f4>)
 800260a:	681c      	ldr	r4, [r3, #0]
 800260c:	2002      	movs	r0, #2
 800260e:	f002 fbcb 	bl	8004da8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002612:	4603      	mov	r3, r0
 8002614:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6919      	ldr	r1, [r3, #16]
 800261e:	4b4b      	ldr	r3, [pc, #300]	@ (800274c <HAL_ADC_PollForConversion+0x1f8>)
 8002620:	400b      	ands	r3, r1
 8002622:	2b00      	cmp	r3, #0
 8002624:	d118      	bne.n	8002658 <HAL_ADC_PollForConversion+0x104>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68d9      	ldr	r1, [r3, #12]
 800262c:	4b48      	ldr	r3, [pc, #288]	@ (8002750 <HAL_ADC_PollForConversion+0x1fc>)
 800262e:	400b      	ands	r3, r1
 8002630:	2b00      	cmp	r3, #0
 8002632:	d111      	bne.n	8002658 <HAL_ADC_PollForConversion+0x104>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6919      	ldr	r1, [r3, #16]
 800263a:	4b46      	ldr	r3, [pc, #280]	@ (8002754 <HAL_ADC_PollForConversion+0x200>)
 800263c:	400b      	ands	r3, r1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d108      	bne.n	8002654 <HAL_ADC_PollForConversion+0x100>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68d9      	ldr	r1, [r3, #12]
 8002648:	4b43      	ldr	r3, [pc, #268]	@ (8002758 <HAL_ADC_PollForConversion+0x204>)
 800264a:	400b      	ands	r3, r1
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <HAL_ADC_PollForConversion+0x100>
 8002650:	2314      	movs	r3, #20
 8002652:	e020      	b.n	8002696 <HAL_ADC_PollForConversion+0x142>
 8002654:	2329      	movs	r3, #41	@ 0x29
 8002656:	e01e      	b.n	8002696 <HAL_ADC_PollForConversion+0x142>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6919      	ldr	r1, [r3, #16]
 800265e:	4b3d      	ldr	r3, [pc, #244]	@ (8002754 <HAL_ADC_PollForConversion+0x200>)
 8002660:	400b      	ands	r3, r1
 8002662:	2b00      	cmp	r3, #0
 8002664:	d106      	bne.n	8002674 <HAL_ADC_PollForConversion+0x120>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68d9      	ldr	r1, [r3, #12]
 800266c:	4b3a      	ldr	r3, [pc, #232]	@ (8002758 <HAL_ADC_PollForConversion+0x204>)
 800266e:	400b      	ands	r3, r1
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00d      	beq.n	8002690 <HAL_ADC_PollForConversion+0x13c>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6919      	ldr	r1, [r3, #16]
 800267a:	4b38      	ldr	r3, [pc, #224]	@ (800275c <HAL_ADC_PollForConversion+0x208>)
 800267c:	400b      	ands	r3, r1
 800267e:	2b00      	cmp	r3, #0
 8002680:	d108      	bne.n	8002694 <HAL_ADC_PollForConversion+0x140>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68d9      	ldr	r1, [r3, #12]
 8002688:	4b34      	ldr	r3, [pc, #208]	@ (800275c <HAL_ADC_PollForConversion+0x208>)
 800268a:	400b      	ands	r3, r1
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_ADC_PollForConversion+0x140>
 8002690:	2354      	movs	r3, #84	@ 0x54
 8002692:	e000      	b.n	8002696 <HAL_ADC_PollForConversion+0x142>
 8002694:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002696:	fb02 f303 	mul.w	r3, r2, r3
 800269a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800269c:	e021      	b.n	80026e2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a4:	d01a      	beq.n	80026dc <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d007      	beq.n	80026bc <HAL_ADC_PollForConversion+0x168>
 80026ac:	f7ff fd9e 	bl	80021ec <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	683a      	ldr	r2, [r7, #0]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d20f      	bcs.n	80026dc <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d90b      	bls.n	80026dc <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026c8:	f043 0204 	orr.w	r2, r3, #4
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e030      	b.n	800273e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	3301      	adds	r3, #1
 80026e0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d8d9      	bhi.n	800269e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f06f 0212 	mvn.w	r2, #18
 80026f2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800270a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800270e:	d115      	bne.n	800273c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002714:	2b00      	cmp	r3, #0
 8002716:	d111      	bne.n	800273c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800271c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002728:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d105      	bne.n	800273c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002734:	f043 0201 	orr.w	r2, r3, #1
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	371c      	adds	r7, #28
 8002742:	46bd      	mov	sp, r7
 8002744:	bd90      	pop	{r4, r7, pc}
 8002746:	bf00      	nop
 8002748:	20000004 	.word	0x20000004
 800274c:	24924924 	.word	0x24924924
 8002750:	00924924 	.word	0x00924924
 8002754:	12492492 	.word	0x12492492
 8002758:	00492492 	.word	0x00492492
 800275c:	00249249 	.word	0x00249249

08002760 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800276e:	4618      	mov	r0, r3
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	bc80      	pop	{r7}
 8002776:	4770      	bx	lr

08002778 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002782:	2300      	movs	r3, #0
 8002784:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002786:	2300      	movs	r3, #0
 8002788:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002790:	2b01      	cmp	r3, #1
 8002792:	d101      	bne.n	8002798 <HAL_ADC_ConfigChannel+0x20>
 8002794:	2302      	movs	r3, #2
 8002796:	e0dc      	b.n	8002952 <HAL_ADC_ConfigChannel+0x1da>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	2b06      	cmp	r3, #6
 80027a6:	d81c      	bhi.n	80027e2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685a      	ldr	r2, [r3, #4]
 80027b2:	4613      	mov	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	3b05      	subs	r3, #5
 80027ba:	221f      	movs	r2, #31
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	43db      	mvns	r3, r3
 80027c2:	4019      	ands	r1, r3
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	6818      	ldr	r0, [r3, #0]
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	4613      	mov	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	3b05      	subs	r3, #5
 80027d4:	fa00 f203 	lsl.w	r2, r0, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	430a      	orrs	r2, r1
 80027de:	635a      	str	r2, [r3, #52]	@ 0x34
 80027e0:	e03c      	b.n	800285c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2b0c      	cmp	r3, #12
 80027e8:	d81c      	bhi.n	8002824 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	4613      	mov	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	3b23      	subs	r3, #35	@ 0x23
 80027fc:	221f      	movs	r2, #31
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	43db      	mvns	r3, r3
 8002804:	4019      	ands	r1, r3
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	6818      	ldr	r0, [r3, #0]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685a      	ldr	r2, [r3, #4]
 800280e:	4613      	mov	r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	4413      	add	r3, r2
 8002814:	3b23      	subs	r3, #35	@ 0x23
 8002816:	fa00 f203 	lsl.w	r2, r0, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	430a      	orrs	r2, r1
 8002820:	631a      	str	r2, [r3, #48]	@ 0x30
 8002822:	e01b      	b.n	800285c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685a      	ldr	r2, [r3, #4]
 800282e:	4613      	mov	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	3b41      	subs	r3, #65	@ 0x41
 8002836:	221f      	movs	r2, #31
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	43db      	mvns	r3, r3
 800283e:	4019      	ands	r1, r3
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	6818      	ldr	r0, [r3, #0]
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685a      	ldr	r2, [r3, #4]
 8002848:	4613      	mov	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4413      	add	r3, r2
 800284e:	3b41      	subs	r3, #65	@ 0x41
 8002850:	fa00 f203 	lsl.w	r2, r0, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	430a      	orrs	r2, r1
 800285a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2b09      	cmp	r3, #9
 8002862:	d91c      	bls.n	800289e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68d9      	ldr	r1, [r3, #12]
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	4613      	mov	r3, r2
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	4413      	add	r3, r2
 8002874:	3b1e      	subs	r3, #30
 8002876:	2207      	movs	r2, #7
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	43db      	mvns	r3, r3
 800287e:	4019      	ands	r1, r3
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	6898      	ldr	r0, [r3, #8]
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	4613      	mov	r3, r2
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	4413      	add	r3, r2
 800288e:	3b1e      	subs	r3, #30
 8002890:	fa00 f203 	lsl.w	r2, r0, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	430a      	orrs	r2, r1
 800289a:	60da      	str	r2, [r3, #12]
 800289c:	e019      	b.n	80028d2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6919      	ldr	r1, [r3, #16]
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	4613      	mov	r3, r2
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	4413      	add	r3, r2
 80028ae:	2207      	movs	r2, #7
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	43db      	mvns	r3, r3
 80028b6:	4019      	ands	r1, r3
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	6898      	ldr	r0, [r3, #8]
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	4613      	mov	r3, r2
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	4413      	add	r3, r2
 80028c6:	fa00 f203 	lsl.w	r2, r0, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2b10      	cmp	r3, #16
 80028d8:	d003      	beq.n	80028e2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80028de:	2b11      	cmp	r3, #17
 80028e0:	d132      	bne.n	8002948 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a1d      	ldr	r2, [pc, #116]	@ (800295c <HAL_ADC_ConfigChannel+0x1e4>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d125      	bne.n	8002938 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d126      	bne.n	8002948 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002908:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2b10      	cmp	r3, #16
 8002910:	d11a      	bne.n	8002948 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002912:	4b13      	ldr	r3, [pc, #76]	@ (8002960 <HAL_ADC_ConfigChannel+0x1e8>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a13      	ldr	r2, [pc, #76]	@ (8002964 <HAL_ADC_ConfigChannel+0x1ec>)
 8002918:	fba2 2303 	umull	r2, r3, r2, r3
 800291c:	0c9a      	lsrs	r2, r3, #18
 800291e:	4613      	mov	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4413      	add	r3, r2
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002928:	e002      	b.n	8002930 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	3b01      	subs	r3, #1
 800292e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1f9      	bne.n	800292a <HAL_ADC_ConfigChannel+0x1b2>
 8002936:	e007      	b.n	8002948 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800293c:	f043 0220 	orr.w	r2, r3, #32
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002950:	7bfb      	ldrb	r3, [r7, #15]
}
 8002952:	4618      	mov	r0, r3
 8002954:	3714      	adds	r7, #20
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr
 800295c:	40012400 	.word	0x40012400
 8002960:	20000004 	.word	0x20000004
 8002964:	431bde83 	.word	0x431bde83

08002968 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002970:	2300      	movs	r3, #0
 8002972:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002974:	2300      	movs	r3, #0
 8002976:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b01      	cmp	r3, #1
 8002984:	d040      	beq.n	8002a08 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f042 0201 	orr.w	r2, r2, #1
 8002994:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002996:	4b1f      	ldr	r3, [pc, #124]	@ (8002a14 <ADC_Enable+0xac>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a1f      	ldr	r2, [pc, #124]	@ (8002a18 <ADC_Enable+0xb0>)
 800299c:	fba2 2303 	umull	r2, r3, r2, r3
 80029a0:	0c9b      	lsrs	r3, r3, #18
 80029a2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80029a4:	e002      	b.n	80029ac <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	3b01      	subs	r3, #1
 80029aa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1f9      	bne.n	80029a6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80029b2:	f7ff fc1b 	bl	80021ec <HAL_GetTick>
 80029b6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80029b8:	e01f      	b.n	80029fa <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80029ba:	f7ff fc17 	bl	80021ec <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d918      	bls.n	80029fa <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d011      	beq.n	80029fa <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029da:	f043 0210 	orr.w	r2, r3, #16
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e6:	f043 0201 	orr.w	r2, r3, #1
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e007      	b.n	8002a0a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d1d8      	bne.n	80029ba <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	20000004 	.word	0x20000004
 8002a18:	431bde83 	.word	0x431bde83

08002a1c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d12e      	bne.n	8002a94 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 0201 	bic.w	r2, r2, #1
 8002a44:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a46:	f7ff fbd1 	bl	80021ec <HAL_GetTick>
 8002a4a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002a4c:	e01b      	b.n	8002a86 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a4e:	f7ff fbcd 	bl	80021ec <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d914      	bls.n	8002a86 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d10d      	bne.n	8002a86 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a6e:	f043 0210 	orr.w	r2, r3, #16
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a7a:	f043 0201 	orr.w	r2, r3, #1
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e007      	b.n	8002a96 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d0dc      	beq.n	8002a4e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
	...

08002aa0 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002aa0:	b590      	push	{r4, r7, lr}
 8002aa2:	b087      	sub	sp, #28
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002aac:	2300      	movs	r3, #0
 8002aae:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d101      	bne.n	8002abe <HAL_ADCEx_Calibration_Start+0x1e>
 8002aba:	2302      	movs	r3, #2
 8002abc:	e097      	b.n	8002bee <HAL_ADCEx_Calibration_Start+0x14e>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7ff ffa8 	bl	8002a1c <ADC_ConversionStop_Disable>
 8002acc:	4603      	mov	r3, r0
 8002ace:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f7ff ff49 	bl	8002968 <ADC_Enable>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8002ada:	7dfb      	ldrb	r3, [r7, #23]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f040 8081 	bne.w	8002be4 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ae6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002aea:	f023 0302 	bic.w	r3, r3, #2
 8002aee:	f043 0202 	orr.w	r2, r3, #2
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002af6:	4b40      	ldr	r3, [pc, #256]	@ (8002bf8 <HAL_ADCEx_Calibration_Start+0x158>)
 8002af8:	681c      	ldr	r4, [r3, #0]
 8002afa:	2002      	movs	r0, #2
 8002afc:	f002 f954 	bl	8004da8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002b00:	4603      	mov	r3, r0
 8002b02:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002b06:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002b08:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002b0a:	e002      	b.n	8002b12 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1f9      	bne.n	8002b0c <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689a      	ldr	r2, [r3, #8]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f042 0208 	orr.w	r2, r2, #8
 8002b26:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002b28:	f7ff fb60 	bl	80021ec <HAL_GetTick>
 8002b2c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002b2e:	e01b      	b.n	8002b68 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002b30:	f7ff fb5c 	bl	80021ec <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b0a      	cmp	r3, #10
 8002b3c:	d914      	bls.n	8002b68 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f003 0308 	and.w	r3, r3, #8
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00d      	beq.n	8002b68 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b50:	f023 0312 	bic.w	r3, r3, #18
 8002b54:	f043 0210 	orr.w	r2, r3, #16
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e042      	b.n	8002bee <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 0308 	and.w	r3, r3, #8
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1dc      	bne.n	8002b30 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f042 0204 	orr.w	r2, r2, #4
 8002b84:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002b86:	f7ff fb31 	bl	80021ec <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002b8c:	e01b      	b.n	8002bc6 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002b8e:	f7ff fb2d 	bl	80021ec <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b0a      	cmp	r3, #10
 8002b9a:	d914      	bls.n	8002bc6 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 0304 	and.w	r3, r3, #4
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00d      	beq.n	8002bc6 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bae:	f023 0312 	bic.w	r3, r3, #18
 8002bb2:	f043 0210 	orr.w	r2, r3, #16
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e013      	b.n	8002bee <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f003 0304 	and.w	r3, r3, #4
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1dc      	bne.n	8002b8e <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd8:	f023 0303 	bic.w	r3, r3, #3
 8002bdc:	f043 0201 	orr.w	r2, r3, #1
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002bec:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	371c      	adds	r7, #28
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd90      	pop	{r4, r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	20000004 	.word	0x20000004

08002bfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c40 <__NVIC_SetPriorityGrouping+0x44>)
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c18:	4013      	ands	r3, r2
 8002c1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c2e:	4a04      	ldr	r2, [pc, #16]	@ (8002c40 <__NVIC_SetPriorityGrouping+0x44>)
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	60d3      	str	r3, [r2, #12]
}
 8002c34:	bf00      	nop
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bc80      	pop	{r7}
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	e000ed00 	.word	0xe000ed00

08002c44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c48:	4b04      	ldr	r3, [pc, #16]	@ (8002c5c <__NVIC_GetPriorityGrouping+0x18>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	0a1b      	lsrs	r3, r3, #8
 8002c4e:	f003 0307 	and.w	r3, r3, #7
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bc80      	pop	{r7}
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	e000ed00 	.word	0xe000ed00

08002c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	6039      	str	r1, [r7, #0]
 8002c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	db0a      	blt.n	8002c8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	490c      	ldr	r1, [pc, #48]	@ (8002cac <__NVIC_SetPriority+0x4c>)
 8002c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7e:	0112      	lsls	r2, r2, #4
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	440b      	add	r3, r1
 8002c84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c88:	e00a      	b.n	8002ca0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	4908      	ldr	r1, [pc, #32]	@ (8002cb0 <__NVIC_SetPriority+0x50>)
 8002c90:	79fb      	ldrb	r3, [r7, #7]
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	3b04      	subs	r3, #4
 8002c98:	0112      	lsls	r2, r2, #4
 8002c9a:	b2d2      	uxtb	r2, r2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	761a      	strb	r2, [r3, #24]
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bc80      	pop	{r7}
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	e000e100 	.word	0xe000e100
 8002cb0:	e000ed00 	.word	0xe000ed00

08002cb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b089      	sub	sp, #36	@ 0x24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f003 0307 	and.w	r3, r3, #7
 8002cc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	f1c3 0307 	rsb	r3, r3, #7
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	bf28      	it	cs
 8002cd2:	2304      	movcs	r3, #4
 8002cd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	3304      	adds	r3, #4
 8002cda:	2b06      	cmp	r3, #6
 8002cdc:	d902      	bls.n	8002ce4 <NVIC_EncodePriority+0x30>
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	3b03      	subs	r3, #3
 8002ce2:	e000      	b.n	8002ce6 <NVIC_EncodePriority+0x32>
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	43da      	mvns	r2, r3
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	401a      	ands	r2, r3
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	fa01 f303 	lsl.w	r3, r1, r3
 8002d06:	43d9      	mvns	r1, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d0c:	4313      	orrs	r3, r2
         );
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3724      	adds	r7, #36	@ 0x24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr

08002d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3b01      	subs	r3, #1
 8002d24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d28:	d301      	bcc.n	8002d2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e00f      	b.n	8002d4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d2e:	4a0a      	ldr	r2, [pc, #40]	@ (8002d58 <SysTick_Config+0x40>)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	3b01      	subs	r3, #1
 8002d34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d36:	210f      	movs	r1, #15
 8002d38:	f04f 30ff 	mov.w	r0, #4294967295
 8002d3c:	f7ff ff90 	bl	8002c60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d40:	4b05      	ldr	r3, [pc, #20]	@ (8002d58 <SysTick_Config+0x40>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d46:	4b04      	ldr	r3, [pc, #16]	@ (8002d58 <SysTick_Config+0x40>)
 8002d48:	2207      	movs	r2, #7
 8002d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	e000e010 	.word	0xe000e010

08002d5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f7ff ff49 	bl	8002bfc <__NVIC_SetPriorityGrouping>
}
 8002d6a:	bf00      	nop
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b086      	sub	sp, #24
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	4603      	mov	r3, r0
 8002d7a:	60b9      	str	r1, [r7, #8]
 8002d7c:	607a      	str	r2, [r7, #4]
 8002d7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d80:	2300      	movs	r3, #0
 8002d82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d84:	f7ff ff5e 	bl	8002c44 <__NVIC_GetPriorityGrouping>
 8002d88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	68b9      	ldr	r1, [r7, #8]
 8002d8e:	6978      	ldr	r0, [r7, #20]
 8002d90:	f7ff ff90 	bl	8002cb4 <NVIC_EncodePriority>
 8002d94:	4602      	mov	r2, r0
 8002d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d9a:	4611      	mov	r1, r2
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff ff5f 	bl	8002c60 <__NVIC_SetPriority>
}
 8002da2:	bf00      	nop
 8002da4:	3718      	adds	r7, #24
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b082      	sub	sp, #8
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f7ff ffb0 	bl	8002d18 <SysTick_Config>
 8002db8:	4603      	mov	r3, r0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
	...

08002dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b08b      	sub	sp, #44	@ 0x2c
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dd6:	e169      	b.n	80030ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002dd8:	2201      	movs	r2, #1
 8002dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	69fa      	ldr	r2, [r7, #28]
 8002de8:	4013      	ands	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	f040 8158 	bne.w	80030a6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	4a9a      	ldr	r2, [pc, #616]	@ (8003064 <HAL_GPIO_Init+0x2a0>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d05e      	beq.n	8002ebe <HAL_GPIO_Init+0xfa>
 8002e00:	4a98      	ldr	r2, [pc, #608]	@ (8003064 <HAL_GPIO_Init+0x2a0>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d875      	bhi.n	8002ef2 <HAL_GPIO_Init+0x12e>
 8002e06:	4a98      	ldr	r2, [pc, #608]	@ (8003068 <HAL_GPIO_Init+0x2a4>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d058      	beq.n	8002ebe <HAL_GPIO_Init+0xfa>
 8002e0c:	4a96      	ldr	r2, [pc, #600]	@ (8003068 <HAL_GPIO_Init+0x2a4>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d86f      	bhi.n	8002ef2 <HAL_GPIO_Init+0x12e>
 8002e12:	4a96      	ldr	r2, [pc, #600]	@ (800306c <HAL_GPIO_Init+0x2a8>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d052      	beq.n	8002ebe <HAL_GPIO_Init+0xfa>
 8002e18:	4a94      	ldr	r2, [pc, #592]	@ (800306c <HAL_GPIO_Init+0x2a8>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d869      	bhi.n	8002ef2 <HAL_GPIO_Init+0x12e>
 8002e1e:	4a94      	ldr	r2, [pc, #592]	@ (8003070 <HAL_GPIO_Init+0x2ac>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d04c      	beq.n	8002ebe <HAL_GPIO_Init+0xfa>
 8002e24:	4a92      	ldr	r2, [pc, #584]	@ (8003070 <HAL_GPIO_Init+0x2ac>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d863      	bhi.n	8002ef2 <HAL_GPIO_Init+0x12e>
 8002e2a:	4a92      	ldr	r2, [pc, #584]	@ (8003074 <HAL_GPIO_Init+0x2b0>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d046      	beq.n	8002ebe <HAL_GPIO_Init+0xfa>
 8002e30:	4a90      	ldr	r2, [pc, #576]	@ (8003074 <HAL_GPIO_Init+0x2b0>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d85d      	bhi.n	8002ef2 <HAL_GPIO_Init+0x12e>
 8002e36:	2b12      	cmp	r3, #18
 8002e38:	d82a      	bhi.n	8002e90 <HAL_GPIO_Init+0xcc>
 8002e3a:	2b12      	cmp	r3, #18
 8002e3c:	d859      	bhi.n	8002ef2 <HAL_GPIO_Init+0x12e>
 8002e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8002e44 <HAL_GPIO_Init+0x80>)
 8002e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e44:	08002ebf 	.word	0x08002ebf
 8002e48:	08002e99 	.word	0x08002e99
 8002e4c:	08002eab 	.word	0x08002eab
 8002e50:	08002eed 	.word	0x08002eed
 8002e54:	08002ef3 	.word	0x08002ef3
 8002e58:	08002ef3 	.word	0x08002ef3
 8002e5c:	08002ef3 	.word	0x08002ef3
 8002e60:	08002ef3 	.word	0x08002ef3
 8002e64:	08002ef3 	.word	0x08002ef3
 8002e68:	08002ef3 	.word	0x08002ef3
 8002e6c:	08002ef3 	.word	0x08002ef3
 8002e70:	08002ef3 	.word	0x08002ef3
 8002e74:	08002ef3 	.word	0x08002ef3
 8002e78:	08002ef3 	.word	0x08002ef3
 8002e7c:	08002ef3 	.word	0x08002ef3
 8002e80:	08002ef3 	.word	0x08002ef3
 8002e84:	08002ef3 	.word	0x08002ef3
 8002e88:	08002ea1 	.word	0x08002ea1
 8002e8c:	08002eb5 	.word	0x08002eb5
 8002e90:	4a79      	ldr	r2, [pc, #484]	@ (8003078 <HAL_GPIO_Init+0x2b4>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d013      	beq.n	8002ebe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e96:	e02c      	b.n	8002ef2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	623b      	str	r3, [r7, #32]
          break;
 8002e9e:	e029      	b.n	8002ef4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	3304      	adds	r3, #4
 8002ea6:	623b      	str	r3, [r7, #32]
          break;
 8002ea8:	e024      	b.n	8002ef4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	3308      	adds	r3, #8
 8002eb0:	623b      	str	r3, [r7, #32]
          break;
 8002eb2:	e01f      	b.n	8002ef4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	330c      	adds	r3, #12
 8002eba:	623b      	str	r3, [r7, #32]
          break;
 8002ebc:	e01a      	b.n	8002ef4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d102      	bne.n	8002ecc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ec6:	2304      	movs	r3, #4
 8002ec8:	623b      	str	r3, [r7, #32]
          break;
 8002eca:	e013      	b.n	8002ef4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d105      	bne.n	8002ee0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ed4:	2308      	movs	r3, #8
 8002ed6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	69fa      	ldr	r2, [r7, #28]
 8002edc:	611a      	str	r2, [r3, #16]
          break;
 8002ede:	e009      	b.n	8002ef4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ee0:	2308      	movs	r3, #8
 8002ee2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	69fa      	ldr	r2, [r7, #28]
 8002ee8:	615a      	str	r2, [r3, #20]
          break;
 8002eea:	e003      	b.n	8002ef4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002eec:	2300      	movs	r3, #0
 8002eee:	623b      	str	r3, [r7, #32]
          break;
 8002ef0:	e000      	b.n	8002ef4 <HAL_GPIO_Init+0x130>
          break;
 8002ef2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	2bff      	cmp	r3, #255	@ 0xff
 8002ef8:	d801      	bhi.n	8002efe <HAL_GPIO_Init+0x13a>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	e001      	b.n	8002f02 <HAL_GPIO_Init+0x13e>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	3304      	adds	r3, #4
 8002f02:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	2bff      	cmp	r3, #255	@ 0xff
 8002f08:	d802      	bhi.n	8002f10 <HAL_GPIO_Init+0x14c>
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	e002      	b.n	8002f16 <HAL_GPIO_Init+0x152>
 8002f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f12:	3b08      	subs	r3, #8
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	210f      	movs	r1, #15
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	fa01 f303 	lsl.w	r3, r1, r3
 8002f24:	43db      	mvns	r3, r3
 8002f26:	401a      	ands	r2, r3
 8002f28:	6a39      	ldr	r1, [r7, #32]
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f30:	431a      	orrs	r2, r3
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 80b1 	beq.w	80030a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f44:	4b4d      	ldr	r3, [pc, #308]	@ (800307c <HAL_GPIO_Init+0x2b8>)
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	4a4c      	ldr	r2, [pc, #304]	@ (800307c <HAL_GPIO_Init+0x2b8>)
 8002f4a:	f043 0301 	orr.w	r3, r3, #1
 8002f4e:	6193      	str	r3, [r2, #24]
 8002f50:	4b4a      	ldr	r3, [pc, #296]	@ (800307c <HAL_GPIO_Init+0x2b8>)
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	60bb      	str	r3, [r7, #8]
 8002f5a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f5c:	4a48      	ldr	r2, [pc, #288]	@ (8003080 <HAL_GPIO_Init+0x2bc>)
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f60:	089b      	lsrs	r3, r3, #2
 8002f62:	3302      	adds	r3, #2
 8002f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f68:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f6c:	f003 0303 	and.w	r3, r3, #3
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	220f      	movs	r2, #15
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a40      	ldr	r2, [pc, #256]	@ (8003084 <HAL_GPIO_Init+0x2c0>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d013      	beq.n	8002fb0 <HAL_GPIO_Init+0x1ec>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a3f      	ldr	r2, [pc, #252]	@ (8003088 <HAL_GPIO_Init+0x2c4>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d00d      	beq.n	8002fac <HAL_GPIO_Init+0x1e8>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a3e      	ldr	r2, [pc, #248]	@ (800308c <HAL_GPIO_Init+0x2c8>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d007      	beq.n	8002fa8 <HAL_GPIO_Init+0x1e4>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a3d      	ldr	r2, [pc, #244]	@ (8003090 <HAL_GPIO_Init+0x2cc>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d101      	bne.n	8002fa4 <HAL_GPIO_Init+0x1e0>
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e006      	b.n	8002fb2 <HAL_GPIO_Init+0x1ee>
 8002fa4:	2304      	movs	r3, #4
 8002fa6:	e004      	b.n	8002fb2 <HAL_GPIO_Init+0x1ee>
 8002fa8:	2302      	movs	r3, #2
 8002faa:	e002      	b.n	8002fb2 <HAL_GPIO_Init+0x1ee>
 8002fac:	2301      	movs	r3, #1
 8002fae:	e000      	b.n	8002fb2 <HAL_GPIO_Init+0x1ee>
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fb4:	f002 0203 	and.w	r2, r2, #3
 8002fb8:	0092      	lsls	r2, r2, #2
 8002fba:	4093      	lsls	r3, r2
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002fc2:	492f      	ldr	r1, [pc, #188]	@ (8003080 <HAL_GPIO_Init+0x2bc>)
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc6:	089b      	lsrs	r3, r3, #2
 8002fc8:	3302      	adds	r3, #2
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d006      	beq.n	8002fea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002fdc:	4b2d      	ldr	r3, [pc, #180]	@ (8003094 <HAL_GPIO_Init+0x2d0>)
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	492c      	ldr	r1, [pc, #176]	@ (8003094 <HAL_GPIO_Init+0x2d0>)
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	608b      	str	r3, [r1, #8]
 8002fe8:	e006      	b.n	8002ff8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002fea:	4b2a      	ldr	r3, [pc, #168]	@ (8003094 <HAL_GPIO_Init+0x2d0>)
 8002fec:	689a      	ldr	r2, [r3, #8]
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	4928      	ldr	r1, [pc, #160]	@ (8003094 <HAL_GPIO_Init+0x2d0>)
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d006      	beq.n	8003012 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003004:	4b23      	ldr	r3, [pc, #140]	@ (8003094 <HAL_GPIO_Init+0x2d0>)
 8003006:	68da      	ldr	r2, [r3, #12]
 8003008:	4922      	ldr	r1, [pc, #136]	@ (8003094 <HAL_GPIO_Init+0x2d0>)
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	4313      	orrs	r3, r2
 800300e:	60cb      	str	r3, [r1, #12]
 8003010:	e006      	b.n	8003020 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003012:	4b20      	ldr	r3, [pc, #128]	@ (8003094 <HAL_GPIO_Init+0x2d0>)
 8003014:	68da      	ldr	r2, [r3, #12]
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	43db      	mvns	r3, r3
 800301a:	491e      	ldr	r1, [pc, #120]	@ (8003094 <HAL_GPIO_Init+0x2d0>)
 800301c:	4013      	ands	r3, r2
 800301e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d006      	beq.n	800303a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800302c:	4b19      	ldr	r3, [pc, #100]	@ (8003094 <HAL_GPIO_Init+0x2d0>)
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	4918      	ldr	r1, [pc, #96]	@ (8003094 <HAL_GPIO_Init+0x2d0>)
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	4313      	orrs	r3, r2
 8003036:	604b      	str	r3, [r1, #4]
 8003038:	e006      	b.n	8003048 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800303a:	4b16      	ldr	r3, [pc, #88]	@ (8003094 <HAL_GPIO_Init+0x2d0>)
 800303c:	685a      	ldr	r2, [r3, #4]
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	43db      	mvns	r3, r3
 8003042:	4914      	ldr	r1, [pc, #80]	@ (8003094 <HAL_GPIO_Init+0x2d0>)
 8003044:	4013      	ands	r3, r2
 8003046:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d021      	beq.n	8003098 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003054:	4b0f      	ldr	r3, [pc, #60]	@ (8003094 <HAL_GPIO_Init+0x2d0>)
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	490e      	ldr	r1, [pc, #56]	@ (8003094 <HAL_GPIO_Init+0x2d0>)
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	4313      	orrs	r3, r2
 800305e:	600b      	str	r3, [r1, #0]
 8003060:	e021      	b.n	80030a6 <HAL_GPIO_Init+0x2e2>
 8003062:	bf00      	nop
 8003064:	10320000 	.word	0x10320000
 8003068:	10310000 	.word	0x10310000
 800306c:	10220000 	.word	0x10220000
 8003070:	10210000 	.word	0x10210000
 8003074:	10120000 	.word	0x10120000
 8003078:	10110000 	.word	0x10110000
 800307c:	40021000 	.word	0x40021000
 8003080:	40010000 	.word	0x40010000
 8003084:	40010800 	.word	0x40010800
 8003088:	40010c00 	.word	0x40010c00
 800308c:	40011000 	.word	0x40011000
 8003090:	40011400 	.word	0x40011400
 8003094:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003098:	4b0b      	ldr	r3, [pc, #44]	@ (80030c8 <HAL_GPIO_Init+0x304>)
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	43db      	mvns	r3, r3
 80030a0:	4909      	ldr	r1, [pc, #36]	@ (80030c8 <HAL_GPIO_Init+0x304>)
 80030a2:	4013      	ands	r3, r2
 80030a4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80030a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a8:	3301      	adds	r3, #1
 80030aa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b2:	fa22 f303 	lsr.w	r3, r2, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f47f ae8e 	bne.w	8002dd8 <HAL_GPIO_Init+0x14>
  }
}
 80030bc:	bf00      	nop
 80030be:	bf00      	nop
 80030c0:	372c      	adds	r7, #44	@ 0x2c
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr
 80030c8:	40010400 	.word	0x40010400

080030cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	460b      	mov	r3, r1
 80030d6:	807b      	strh	r3, [r7, #2]
 80030d8:	4613      	mov	r3, r2
 80030da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030dc:	787b      	ldrb	r3, [r7, #1]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030e2:	887a      	ldrh	r2, [r7, #2]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80030e8:	e003      	b.n	80030f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80030ea:	887b      	ldrh	r3, [r7, #2]
 80030ec:	041a      	lsls	r2, r3, #16
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	611a      	str	r2, [r3, #16]
}
 80030f2:	bf00      	nop
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bc80      	pop	{r7}
 80030fa:	4770      	bx	lr

080030fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e12b      	b.n	8003366 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d106      	bne.n	8003128 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f7fe fe64 	bl	8001df0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2224      	movs	r2, #36	@ 0x24
 800312c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 0201 	bic.w	r2, r2, #1
 800313e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800314e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800315e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003160:	f001 fd26 	bl	8004bb0 <HAL_RCC_GetPCLK1Freq>
 8003164:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	4a81      	ldr	r2, [pc, #516]	@ (8003370 <HAL_I2C_Init+0x274>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d807      	bhi.n	8003180 <HAL_I2C_Init+0x84>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	4a80      	ldr	r2, [pc, #512]	@ (8003374 <HAL_I2C_Init+0x278>)
 8003174:	4293      	cmp	r3, r2
 8003176:	bf94      	ite	ls
 8003178:	2301      	movls	r3, #1
 800317a:	2300      	movhi	r3, #0
 800317c:	b2db      	uxtb	r3, r3
 800317e:	e006      	b.n	800318e <HAL_I2C_Init+0x92>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	4a7d      	ldr	r2, [pc, #500]	@ (8003378 <HAL_I2C_Init+0x27c>)
 8003184:	4293      	cmp	r3, r2
 8003186:	bf94      	ite	ls
 8003188:	2301      	movls	r3, #1
 800318a:	2300      	movhi	r3, #0
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e0e7      	b.n	8003366 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	4a78      	ldr	r2, [pc, #480]	@ (800337c <HAL_I2C_Init+0x280>)
 800319a:	fba2 2303 	umull	r2, r3, r2, r3
 800319e:	0c9b      	lsrs	r3, r3, #18
 80031a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68ba      	ldr	r2, [r7, #8]
 80031b2:	430a      	orrs	r2, r1
 80031b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	4a6a      	ldr	r2, [pc, #424]	@ (8003370 <HAL_I2C_Init+0x274>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d802      	bhi.n	80031d0 <HAL_I2C_Init+0xd4>
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	3301      	adds	r3, #1
 80031ce:	e009      	b.n	80031e4 <HAL_I2C_Init+0xe8>
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80031d6:	fb02 f303 	mul.w	r3, r2, r3
 80031da:	4a69      	ldr	r2, [pc, #420]	@ (8003380 <HAL_I2C_Init+0x284>)
 80031dc:	fba2 2303 	umull	r2, r3, r2, r3
 80031e0:	099b      	lsrs	r3, r3, #6
 80031e2:	3301      	adds	r3, #1
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	6812      	ldr	r2, [r2, #0]
 80031e8:	430b      	orrs	r3, r1
 80031ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80031f6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	495c      	ldr	r1, [pc, #368]	@ (8003370 <HAL_I2C_Init+0x274>)
 8003200:	428b      	cmp	r3, r1
 8003202:	d819      	bhi.n	8003238 <HAL_I2C_Init+0x13c>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	1e59      	subs	r1, r3, #1
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003212:	1c59      	adds	r1, r3, #1
 8003214:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003218:	400b      	ands	r3, r1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00a      	beq.n	8003234 <HAL_I2C_Init+0x138>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	1e59      	subs	r1, r3, #1
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	fbb1 f3f3 	udiv	r3, r1, r3
 800322c:	3301      	adds	r3, #1
 800322e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003232:	e051      	b.n	80032d8 <HAL_I2C_Init+0x1dc>
 8003234:	2304      	movs	r3, #4
 8003236:	e04f      	b.n	80032d8 <HAL_I2C_Init+0x1dc>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d111      	bne.n	8003264 <HAL_I2C_Init+0x168>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	1e58      	subs	r0, r3, #1
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6859      	ldr	r1, [r3, #4]
 8003248:	460b      	mov	r3, r1
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	440b      	add	r3, r1
 800324e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003252:	3301      	adds	r3, #1
 8003254:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003258:	2b00      	cmp	r3, #0
 800325a:	bf0c      	ite	eq
 800325c:	2301      	moveq	r3, #1
 800325e:	2300      	movne	r3, #0
 8003260:	b2db      	uxtb	r3, r3
 8003262:	e012      	b.n	800328a <HAL_I2C_Init+0x18e>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	1e58      	subs	r0, r3, #1
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6859      	ldr	r1, [r3, #4]
 800326c:	460b      	mov	r3, r1
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	440b      	add	r3, r1
 8003272:	0099      	lsls	r1, r3, #2
 8003274:	440b      	add	r3, r1
 8003276:	fbb0 f3f3 	udiv	r3, r0, r3
 800327a:	3301      	adds	r3, #1
 800327c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003280:	2b00      	cmp	r3, #0
 8003282:	bf0c      	ite	eq
 8003284:	2301      	moveq	r3, #1
 8003286:	2300      	movne	r3, #0
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <HAL_I2C_Init+0x196>
 800328e:	2301      	movs	r3, #1
 8003290:	e022      	b.n	80032d8 <HAL_I2C_Init+0x1dc>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10e      	bne.n	80032b8 <HAL_I2C_Init+0x1bc>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	1e58      	subs	r0, r3, #1
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6859      	ldr	r1, [r3, #4]
 80032a2:	460b      	mov	r3, r1
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	440b      	add	r3, r1
 80032a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80032ac:	3301      	adds	r3, #1
 80032ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032b6:	e00f      	b.n	80032d8 <HAL_I2C_Init+0x1dc>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	1e58      	subs	r0, r3, #1
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6859      	ldr	r1, [r3, #4]
 80032c0:	460b      	mov	r3, r1
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	440b      	add	r3, r1
 80032c6:	0099      	lsls	r1, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80032ce:	3301      	adds	r3, #1
 80032d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	6809      	ldr	r1, [r1, #0]
 80032dc:	4313      	orrs	r3, r2
 80032de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	69da      	ldr	r2, [r3, #28]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a1b      	ldr	r3, [r3, #32]
 80032f2:	431a      	orrs	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003306:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	6911      	ldr	r1, [r2, #16]
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	68d2      	ldr	r2, [r2, #12]
 8003312:	4311      	orrs	r1, r2
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6812      	ldr	r2, [r2, #0]
 8003318:	430b      	orrs	r3, r1
 800331a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	695a      	ldr	r2, [r3, #20]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	431a      	orrs	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	430a      	orrs	r2, r1
 8003336:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f042 0201 	orr.w	r2, r2, #1
 8003346:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2220      	movs	r2, #32
 8003352:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	000186a0 	.word	0x000186a0
 8003374:	001e847f 	.word	0x001e847f
 8003378:	003d08ff 	.word	0x003d08ff
 800337c:	431bde83 	.word	0x431bde83
 8003380:	10624dd3 	.word	0x10624dd3

08003384 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b088      	sub	sp, #32
 8003388:	af02      	add	r7, sp, #8
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	607a      	str	r2, [r7, #4]
 800338e:	461a      	mov	r2, r3
 8003390:	460b      	mov	r3, r1
 8003392:	817b      	strh	r3, [r7, #10]
 8003394:	4613      	mov	r3, r2
 8003396:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003398:	f7fe ff28 	bl	80021ec <HAL_GetTick>
 800339c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b20      	cmp	r3, #32
 80033a8:	f040 80e0 	bne.w	800356c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	9300      	str	r3, [sp, #0]
 80033b0:	2319      	movs	r3, #25
 80033b2:	2201      	movs	r2, #1
 80033b4:	4970      	ldr	r1, [pc, #448]	@ (8003578 <HAL_I2C_Master_Transmit+0x1f4>)
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f000 fdfa 	bl	8003fb0 <I2C_WaitOnFlagUntilTimeout>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80033c2:	2302      	movs	r3, #2
 80033c4:	e0d3      	b.n	800356e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d101      	bne.n	80033d4 <HAL_I2C_Master_Transmit+0x50>
 80033d0:	2302      	movs	r3, #2
 80033d2:	e0cc      	b.n	800356e <HAL_I2C_Master_Transmit+0x1ea>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d007      	beq.n	80033fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f042 0201 	orr.w	r2, r2, #1
 80033f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003408:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2221      	movs	r2, #33	@ 0x21
 800340e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2210      	movs	r2, #16
 8003416:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	893a      	ldrh	r2, [r7, #8]
 800342a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003430:	b29a      	uxth	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	4a50      	ldr	r2, [pc, #320]	@ (800357c <HAL_I2C_Master_Transmit+0x1f8>)
 800343a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800343c:	8979      	ldrh	r1, [r7, #10]
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	6a3a      	ldr	r2, [r7, #32]
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f000 fc4a 	bl	8003cdc <I2C_MasterRequestWrite>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e08d      	b.n	800356e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003452:	2300      	movs	r3, #0
 8003454:	613b      	str	r3, [r7, #16]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	613b      	str	r3, [r7, #16]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	613b      	str	r3, [r7, #16]
 8003466:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003468:	e066      	b.n	8003538 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	6a39      	ldr	r1, [r7, #32]
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f000 feb8 	bl	80041e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00d      	beq.n	8003496 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347e:	2b04      	cmp	r3, #4
 8003480:	d107      	bne.n	8003492 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003490:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e06b      	b.n	800356e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800349a:	781a      	ldrb	r2, [r3, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a6:	1c5a      	adds	r2, r3, #1
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	3b01      	subs	r3, #1
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034be:	3b01      	subs	r3, #1
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	695b      	ldr	r3, [r3, #20]
 80034cc:	f003 0304 	and.w	r3, r3, #4
 80034d0:	2b04      	cmp	r3, #4
 80034d2:	d11b      	bne.n	800350c <HAL_I2C_Master_Transmit+0x188>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d017      	beq.n	800350c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e0:	781a      	ldrb	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ec:	1c5a      	adds	r2, r3, #1
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	3b01      	subs	r3, #1
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003504:	3b01      	subs	r3, #1
 8003506:	b29a      	uxth	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	6a39      	ldr	r1, [r7, #32]
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f000 feaf 	bl	8004274 <I2C_WaitOnBTFFlagUntilTimeout>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00d      	beq.n	8003538 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003520:	2b04      	cmp	r3, #4
 8003522:	d107      	bne.n	8003534 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003532:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e01a      	b.n	800356e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800353c:	2b00      	cmp	r3, #0
 800353e:	d194      	bne.n	800346a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800354e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2220      	movs	r2, #32
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003568:	2300      	movs	r3, #0
 800356a:	e000      	b.n	800356e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800356c:	2302      	movs	r3, #2
  }
}
 800356e:	4618      	mov	r0, r3
 8003570:	3718      	adds	r7, #24
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	00100002 	.word	0x00100002
 800357c:	ffff0000 	.word	0xffff0000

08003580 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b08c      	sub	sp, #48	@ 0x30
 8003584:	af02      	add	r7, sp, #8
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	4608      	mov	r0, r1
 800358a:	4611      	mov	r1, r2
 800358c:	461a      	mov	r2, r3
 800358e:	4603      	mov	r3, r0
 8003590:	817b      	strh	r3, [r7, #10]
 8003592:	460b      	mov	r3, r1
 8003594:	813b      	strh	r3, [r7, #8]
 8003596:	4613      	mov	r3, r2
 8003598:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800359a:	2300      	movs	r3, #0
 800359c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800359e:	f7fe fe25 	bl	80021ec <HAL_GetTick>
 80035a2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2b20      	cmp	r3, #32
 80035ae:	f040 8250 	bne.w	8003a52 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b4:	9300      	str	r3, [sp, #0]
 80035b6:	2319      	movs	r3, #25
 80035b8:	2201      	movs	r2, #1
 80035ba:	4982      	ldr	r1, [pc, #520]	@ (80037c4 <HAL_I2C_Mem_Read+0x244>)
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f000 fcf7 	bl	8003fb0 <I2C_WaitOnFlagUntilTimeout>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d001      	beq.n	80035cc <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80035c8:	2302      	movs	r3, #2
 80035ca:	e243      	b.n	8003a54 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d101      	bne.n	80035da <HAL_I2C_Mem_Read+0x5a>
 80035d6:	2302      	movs	r3, #2
 80035d8:	e23c      	b.n	8003a54 <HAL_I2C_Mem_Read+0x4d4>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d007      	beq.n	8003600 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f042 0201 	orr.w	r2, r2, #1
 80035fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800360e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2222      	movs	r2, #34	@ 0x22
 8003614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2240      	movs	r2, #64	@ 0x40
 800361c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800362a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003630:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003636:	b29a      	uxth	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	4a62      	ldr	r2, [pc, #392]	@ (80037c8 <HAL_I2C_Mem_Read+0x248>)
 8003640:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003642:	88f8      	ldrh	r0, [r7, #6]
 8003644:	893a      	ldrh	r2, [r7, #8]
 8003646:	8979      	ldrh	r1, [r7, #10]
 8003648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800364a:	9301      	str	r3, [sp, #4]
 800364c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800364e:	9300      	str	r3, [sp, #0]
 8003650:	4603      	mov	r3, r0
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f000 fbc4 	bl	8003de0 <I2C_RequestMemoryRead>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e1f8      	b.n	8003a54 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003666:	2b00      	cmp	r3, #0
 8003668:	d113      	bne.n	8003692 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800366a:	2300      	movs	r3, #0
 800366c:	61fb      	str	r3, [r7, #28]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	695b      	ldr	r3, [r3, #20]
 8003674:	61fb      	str	r3, [r7, #28]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	61fb      	str	r3, [r7, #28]
 800367e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	e1cc      	b.n	8003a2c <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003696:	2b01      	cmp	r3, #1
 8003698:	d11e      	bne.n	80036d8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80036aa:	b672      	cpsid	i
}
 80036ac:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ae:	2300      	movs	r3, #0
 80036b0:	61bb      	str	r3, [r7, #24]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	61bb      	str	r3, [r7, #24]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	61bb      	str	r3, [r7, #24]
 80036c2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80036d4:	b662      	cpsie	i
}
 80036d6:	e035      	b.n	8003744 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d11e      	bne.n	800371e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80036f0:	b672      	cpsid	i
}
 80036f2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036f4:	2300      	movs	r3, #0
 80036f6:	617b      	str	r3, [r7, #20]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	617b      	str	r3, [r7, #20]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	617b      	str	r3, [r7, #20]
 8003708:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003718:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800371a:	b662      	cpsie	i
}
 800371c:	e012      	b.n	8003744 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800372c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800372e:	2300      	movs	r3, #0
 8003730:	613b      	str	r3, [r7, #16]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	695b      	ldr	r3, [r3, #20]
 8003738:	613b      	str	r3, [r7, #16]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	613b      	str	r3, [r7, #16]
 8003742:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003744:	e172      	b.n	8003a2c <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800374a:	2b03      	cmp	r3, #3
 800374c:	f200 811f 	bhi.w	800398e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003754:	2b01      	cmp	r3, #1
 8003756:	d123      	bne.n	80037a0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003758:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800375a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f000 fdd1 	bl	8004304 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d001      	beq.n	800376c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e173      	b.n	8003a54 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	691a      	ldr	r2, [r3, #16]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003776:	b2d2      	uxtb	r2, r2
 8003778:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377e:	1c5a      	adds	r2, r3, #1
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003788:	3b01      	subs	r3, #1
 800378a:	b29a      	uxth	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003794:	b29b      	uxth	r3, r3
 8003796:	3b01      	subs	r3, #1
 8003798:	b29a      	uxth	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800379e:	e145      	b.n	8003a2c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d152      	bne.n	800384e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037aa:	9300      	str	r3, [sp, #0]
 80037ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037ae:	2200      	movs	r2, #0
 80037b0:	4906      	ldr	r1, [pc, #24]	@ (80037cc <HAL_I2C_Mem_Read+0x24c>)
 80037b2:	68f8      	ldr	r0, [r7, #12]
 80037b4:	f000 fbfc 	bl	8003fb0 <I2C_WaitOnFlagUntilTimeout>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d008      	beq.n	80037d0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e148      	b.n	8003a54 <HAL_I2C_Mem_Read+0x4d4>
 80037c2:	bf00      	nop
 80037c4:	00100002 	.word	0x00100002
 80037c8:	ffff0000 	.word	0xffff0000
 80037cc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80037d0:	b672      	cpsid	i
}
 80037d2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	691a      	ldr	r2, [r3, #16]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ee:	b2d2      	uxtb	r2, r2
 80037f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f6:	1c5a      	adds	r2, r3, #1
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003800:	3b01      	subs	r3, #1
 8003802:	b29a      	uxth	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800380c:	b29b      	uxth	r3, r3
 800380e:	3b01      	subs	r3, #1
 8003810:	b29a      	uxth	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003816:	b662      	cpsie	i
}
 8003818:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	691a      	ldr	r2, [r3, #16]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003824:	b2d2      	uxtb	r2, r2
 8003826:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382c:	1c5a      	adds	r2, r3, #1
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003836:	3b01      	subs	r3, #1
 8003838:	b29a      	uxth	r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003842:	b29b      	uxth	r3, r3
 8003844:	3b01      	subs	r3, #1
 8003846:	b29a      	uxth	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800384c:	e0ee      	b.n	8003a2c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800384e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003850:	9300      	str	r3, [sp, #0]
 8003852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003854:	2200      	movs	r2, #0
 8003856:	4981      	ldr	r1, [pc, #516]	@ (8003a5c <HAL_I2C_Mem_Read+0x4dc>)
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	f000 fba9 	bl	8003fb0 <I2C_WaitOnFlagUntilTimeout>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d001      	beq.n	8003868 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e0f5      	b.n	8003a54 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003876:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003878:	b672      	cpsid	i
}
 800387a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	691a      	ldr	r2, [r3, #16]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003886:	b2d2      	uxtb	r2, r2
 8003888:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388e:	1c5a      	adds	r2, r3, #1
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003898:	3b01      	subs	r3, #1
 800389a:	b29a      	uxth	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	3b01      	subs	r3, #1
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80038ae:	4b6c      	ldr	r3, [pc, #432]	@ (8003a60 <HAL_I2C_Mem_Read+0x4e0>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	08db      	lsrs	r3, r3, #3
 80038b4:	4a6b      	ldr	r2, [pc, #428]	@ (8003a64 <HAL_I2C_Mem_Read+0x4e4>)
 80038b6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ba:	0a1a      	lsrs	r2, r3, #8
 80038bc:	4613      	mov	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4413      	add	r3, r2
 80038c2:	00da      	lsls	r2, r3, #3
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80038c8:	6a3b      	ldr	r3, [r7, #32]
 80038ca:	3b01      	subs	r3, #1
 80038cc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80038ce:	6a3b      	ldr	r3, [r7, #32]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d118      	bne.n	8003906 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2220      	movs	r2, #32
 80038de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ee:	f043 0220 	orr.w	r2, r3, #32
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80038f6:	b662      	cpsie	i
}
 80038f8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e0a6      	b.n	8003a54 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	f003 0304 	and.w	r3, r3, #4
 8003910:	2b04      	cmp	r3, #4
 8003912:	d1d9      	bne.n	80038c8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003922:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	691a      	ldr	r2, [r3, #16]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003936:	1c5a      	adds	r2, r3, #1
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003940:	3b01      	subs	r3, #1
 8003942:	b29a      	uxth	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800394c:	b29b      	uxth	r3, r3
 800394e:	3b01      	subs	r3, #1
 8003950:	b29a      	uxth	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003956:	b662      	cpsie	i
}
 8003958:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	691a      	ldr	r2, [r3, #16]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003964:	b2d2      	uxtb	r2, r2
 8003966:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396c:	1c5a      	adds	r2, r3, #1
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003976:	3b01      	subs	r3, #1
 8003978:	b29a      	uxth	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003982:	b29b      	uxth	r3, r3
 8003984:	3b01      	subs	r3, #1
 8003986:	b29a      	uxth	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800398c:	e04e      	b.n	8003a2c <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800398e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003990:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f000 fcb6 	bl	8004304 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e058      	b.n	8003a54 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	691a      	ldr	r2, [r3, #16]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ac:	b2d2      	uxtb	r2, r2
 80039ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b4:	1c5a      	adds	r2, r3, #1
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039be:	3b01      	subs	r3, #1
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	f003 0304 	and.w	r3, r3, #4
 80039de:	2b04      	cmp	r3, #4
 80039e0:	d124      	bne.n	8003a2c <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039e6:	2b03      	cmp	r3, #3
 80039e8:	d107      	bne.n	80039fa <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039f8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	691a      	ldr	r2, [r3, #16]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a04:	b2d2      	uxtb	r2, r2
 8003a06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0c:	1c5a      	adds	r2, r3, #1
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a16:	3b01      	subs	r3, #1
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	3b01      	subs	r3, #1
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f47f ae88 	bne.w	8003746 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2220      	movs	r2, #32
 8003a3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	e000      	b.n	8003a54 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8003a52:	2302      	movs	r3, #2
  }
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3728      	adds	r7, #40	@ 0x28
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	00010004 	.word	0x00010004
 8003a60:	20000004 	.word	0x20000004
 8003a64:	14f8b589 	.word	0x14f8b589

08003a68 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b08a      	sub	sp, #40	@ 0x28
 8003a6c:	af02      	add	r7, sp, #8
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	607a      	str	r2, [r7, #4]
 8003a72:	603b      	str	r3, [r7, #0]
 8003a74:	460b      	mov	r3, r1
 8003a76:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003a78:	f7fe fbb8 	bl	80021ec <HAL_GetTick>
 8003a7c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b20      	cmp	r3, #32
 8003a8c:	f040 8111 	bne.w	8003cb2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	9300      	str	r3, [sp, #0]
 8003a94:	2319      	movs	r3, #25
 8003a96:	2201      	movs	r2, #1
 8003a98:	4988      	ldr	r1, [pc, #544]	@ (8003cbc <HAL_I2C_IsDeviceReady+0x254>)
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f000 fa88 	bl	8003fb0 <I2C_WaitOnFlagUntilTimeout>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	e104      	b.n	8003cb4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d101      	bne.n	8003ab8 <HAL_I2C_IsDeviceReady+0x50>
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	e0fd      	b.n	8003cb4 <HAL_I2C_IsDeviceReady+0x24c>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d007      	beq.n	8003ade <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f042 0201 	orr.w	r2, r2, #1
 8003adc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003aec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2224      	movs	r2, #36	@ 0x24
 8003af2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	4a70      	ldr	r2, [pc, #448]	@ (8003cc0 <HAL_I2C_IsDeviceReady+0x258>)
 8003b00:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b10:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f000 fa46 	bl	8003fb0 <I2C_WaitOnFlagUntilTimeout>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00d      	beq.n	8003b46 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b38:	d103      	bne.n	8003b42 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b40:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e0b6      	b.n	8003cb4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b46:	897b      	ldrh	r3, [r7, #10]
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003b54:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003b56:	f7fe fb49 	bl	80021ec <HAL_GetTick>
 8003b5a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	bf0c      	ite	eq
 8003b6a:	2301      	moveq	r3, #1
 8003b6c:	2300      	movne	r3, #0
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	695b      	ldr	r3, [r3, #20]
 8003b78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b80:	bf0c      	ite	eq
 8003b82:	2301      	moveq	r3, #1
 8003b84:	2300      	movne	r3, #0
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003b8a:	e025      	b.n	8003bd8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b8c:	f7fe fb2e 	bl	80021ec <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	683a      	ldr	r2, [r7, #0]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d302      	bcc.n	8003ba2 <HAL_I2C_IsDeviceReady+0x13a>
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d103      	bne.n	8003baa <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	22a0      	movs	r2, #160	@ 0xa0
 8003ba6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	bf0c      	ite	eq
 8003bb8:	2301      	moveq	r3, #1
 8003bba:	2300      	movne	r3, #0
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bce:	bf0c      	ite	eq
 8003bd0:	2301      	moveq	r3, #1
 8003bd2:	2300      	movne	r3, #0
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	2ba0      	cmp	r3, #160	@ 0xa0
 8003be2:	d005      	beq.n	8003bf0 <HAL_I2C_IsDeviceReady+0x188>
 8003be4:	7dfb      	ldrb	r3, [r7, #23]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d102      	bne.n	8003bf0 <HAL_I2C_IsDeviceReady+0x188>
 8003bea:	7dbb      	ldrb	r3, [r7, #22]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d0cd      	beq.n	8003b8c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d129      	bne.n	8003c5a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c14:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c16:	2300      	movs	r3, #0
 8003c18:	613b      	str	r3, [r7, #16]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	695b      	ldr	r3, [r3, #20]
 8003c20:	613b      	str	r3, [r7, #16]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	613b      	str	r3, [r7, #16]
 8003c2a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	9300      	str	r3, [sp, #0]
 8003c30:	2319      	movs	r3, #25
 8003c32:	2201      	movs	r2, #1
 8003c34:	4921      	ldr	r1, [pc, #132]	@ (8003cbc <HAL_I2C_IsDeviceReady+0x254>)
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f000 f9ba 	bl	8003fb0 <I2C_WaitOnFlagUntilTimeout>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e036      	b.n	8003cb4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2220      	movs	r2, #32
 8003c4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003c56:	2300      	movs	r3, #0
 8003c58:	e02c      	b.n	8003cb4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c68:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c72:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	9300      	str	r3, [sp, #0]
 8003c78:	2319      	movs	r3, #25
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	490f      	ldr	r1, [pc, #60]	@ (8003cbc <HAL_I2C_IsDeviceReady+0x254>)
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f000 f996 	bl	8003fb0 <I2C_WaitOnFlagUntilTimeout>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e012      	b.n	8003cb4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	3301      	adds	r3, #1
 8003c92:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	f4ff af32 	bcc.w	8003b02 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e000      	b.n	8003cb4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003cb2:	2302      	movs	r3, #2
  }
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3720      	adds	r7, #32
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	00100002 	.word	0x00100002
 8003cc0:	ffff0000 	.word	0xffff0000

08003cc4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bc80      	pop	{r7}
 8003cd8:	4770      	bx	lr
	...

08003cdc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b088      	sub	sp, #32
 8003ce0:	af02      	add	r7, sp, #8
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	607a      	str	r2, [r7, #4]
 8003ce6:	603b      	str	r3, [r7, #0]
 8003ce8:	460b      	mov	r3, r1
 8003cea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	2b08      	cmp	r3, #8
 8003cf6:	d006      	beq.n	8003d06 <I2C_MasterRequestWrite+0x2a>
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d003      	beq.n	8003d06 <I2C_MasterRequestWrite+0x2a>
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003d04:	d108      	bne.n	8003d18 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d14:	601a      	str	r2, [r3, #0]
 8003d16:	e00b      	b.n	8003d30 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d1c:	2b12      	cmp	r3, #18
 8003d1e:	d107      	bne.n	8003d30 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d2e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	f000 f937 	bl	8003fb0 <I2C_WaitOnFlagUntilTimeout>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00d      	beq.n	8003d64 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d56:	d103      	bne.n	8003d60 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d5e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e035      	b.n	8003dd0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d6c:	d108      	bne.n	8003d80 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d6e:	897b      	ldrh	r3, [r7, #10]
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	461a      	mov	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d7c:	611a      	str	r2, [r3, #16]
 8003d7e:	e01b      	b.n	8003db8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003d80:	897b      	ldrh	r3, [r7, #10]
 8003d82:	11db      	asrs	r3, r3, #7
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	f003 0306 	and.w	r3, r3, #6
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	f063 030f 	orn	r3, r3, #15
 8003d90:	b2da      	uxtb	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	490e      	ldr	r1, [pc, #56]	@ (8003dd8 <I2C_MasterRequestWrite+0xfc>)
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f000 f980 	bl	80040a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e010      	b.n	8003dd0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003dae:	897b      	ldrh	r3, [r7, #10]
 8003db0:	b2da      	uxtb	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	4907      	ldr	r1, [pc, #28]	@ (8003ddc <I2C_MasterRequestWrite+0x100>)
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f000 f970 	bl	80040a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e000      	b.n	8003dd0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3718      	adds	r7, #24
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	00010008 	.word	0x00010008
 8003ddc:	00010002 	.word	0x00010002

08003de0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b088      	sub	sp, #32
 8003de4:	af02      	add	r7, sp, #8
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	4608      	mov	r0, r1
 8003dea:	4611      	mov	r1, r2
 8003dec:	461a      	mov	r2, r3
 8003dee:	4603      	mov	r3, r0
 8003df0:	817b      	strh	r3, [r7, #10]
 8003df2:	460b      	mov	r3, r1
 8003df4:	813b      	strh	r3, [r7, #8]
 8003df6:	4613      	mov	r3, r2
 8003df8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e08:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	6a3b      	ldr	r3, [r7, #32]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f000 f8c2 	bl	8003fb0 <I2C_WaitOnFlagUntilTimeout>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00d      	beq.n	8003e4e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e40:	d103      	bne.n	8003e4a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e48:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e0aa      	b.n	8003fa4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e4e:	897b      	ldrh	r3, [r7, #10]
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	461a      	mov	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e5c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e60:	6a3a      	ldr	r2, [r7, #32]
 8003e62:	4952      	ldr	r1, [pc, #328]	@ (8003fac <I2C_RequestMemoryRead+0x1cc>)
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 f91d 	bl	80040a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e097      	b.n	8003fa4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e74:	2300      	movs	r3, #0
 8003e76:	617b      	str	r3, [r7, #20]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	617b      	str	r3, [r7, #20]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	617b      	str	r3, [r7, #20]
 8003e88:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e8c:	6a39      	ldr	r1, [r7, #32]
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f000 f9a8 	bl	80041e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00d      	beq.n	8003eb6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9e:	2b04      	cmp	r3, #4
 8003ea0:	d107      	bne.n	8003eb2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003eb0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e076      	b.n	8003fa4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003eb6:	88fb      	ldrh	r3, [r7, #6]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d105      	bne.n	8003ec8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ebc:	893b      	ldrh	r3, [r7, #8]
 8003ebe:	b2da      	uxtb	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	611a      	str	r2, [r3, #16]
 8003ec6:	e021      	b.n	8003f0c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ec8:	893b      	ldrh	r3, [r7, #8]
 8003eca:	0a1b      	lsrs	r3, r3, #8
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	b2da      	uxtb	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ed6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ed8:	6a39      	ldr	r1, [r7, #32]
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f000 f982 	bl	80041e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00d      	beq.n	8003f02 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eea:	2b04      	cmp	r3, #4
 8003eec:	d107      	bne.n	8003efe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003efc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e050      	b.n	8003fa4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f02:	893b      	ldrh	r3, [r7, #8]
 8003f04:	b2da      	uxtb	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f0e:	6a39      	ldr	r1, [r7, #32]
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 f967 	bl	80041e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00d      	beq.n	8003f38 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f20:	2b04      	cmp	r3, #4
 8003f22:	d107      	bne.n	8003f34 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f32:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e035      	b.n	8003fa4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f46:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4a:	9300      	str	r3, [sp, #0]
 8003f4c:	6a3b      	ldr	r3, [r7, #32]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f000 f82b 	bl	8003fb0 <I2C_WaitOnFlagUntilTimeout>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00d      	beq.n	8003f7c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f6e:	d103      	bne.n	8003f78 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f76:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e013      	b.n	8003fa4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003f7c:	897b      	ldrh	r3, [r7, #10]
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	f043 0301 	orr.w	r3, r3, #1
 8003f84:	b2da      	uxtb	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8e:	6a3a      	ldr	r2, [r7, #32]
 8003f90:	4906      	ldr	r1, [pc, #24]	@ (8003fac <I2C_RequestMemoryRead+0x1cc>)
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	f000 f886 	bl	80040a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e000      	b.n	8003fa4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3718      	adds	r7, #24
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	00010002 	.word	0x00010002

08003fb0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	603b      	str	r3, [r7, #0]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fc0:	e048      	b.n	8004054 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc8:	d044      	beq.n	8004054 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fca:	f7fe f90f 	bl	80021ec <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	683a      	ldr	r2, [r7, #0]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d302      	bcc.n	8003fe0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d139      	bne.n	8004054 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	0c1b      	lsrs	r3, r3, #16
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d10d      	bne.n	8004006 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	695b      	ldr	r3, [r3, #20]
 8003ff0:	43da      	mvns	r2, r3
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	bf0c      	ite	eq
 8003ffc:	2301      	moveq	r3, #1
 8003ffe:	2300      	movne	r3, #0
 8004000:	b2db      	uxtb	r3, r3
 8004002:	461a      	mov	r2, r3
 8004004:	e00c      	b.n	8004020 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	43da      	mvns	r2, r3
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	4013      	ands	r3, r2
 8004012:	b29b      	uxth	r3, r3
 8004014:	2b00      	cmp	r3, #0
 8004016:	bf0c      	ite	eq
 8004018:	2301      	moveq	r3, #1
 800401a:	2300      	movne	r3, #0
 800401c:	b2db      	uxtb	r3, r3
 800401e:	461a      	mov	r2, r3
 8004020:	79fb      	ldrb	r3, [r7, #7]
 8004022:	429a      	cmp	r2, r3
 8004024:	d116      	bne.n	8004054 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2220      	movs	r2, #32
 8004030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004040:	f043 0220 	orr.w	r2, r3, #32
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e023      	b.n	800409c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	0c1b      	lsrs	r3, r3, #16
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b01      	cmp	r3, #1
 800405c:	d10d      	bne.n	800407a <I2C_WaitOnFlagUntilTimeout+0xca>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	43da      	mvns	r2, r3
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	4013      	ands	r3, r2
 800406a:	b29b      	uxth	r3, r3
 800406c:	2b00      	cmp	r3, #0
 800406e:	bf0c      	ite	eq
 8004070:	2301      	moveq	r3, #1
 8004072:	2300      	movne	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	461a      	mov	r2, r3
 8004078:	e00c      	b.n	8004094 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	43da      	mvns	r2, r3
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	4013      	ands	r3, r2
 8004086:	b29b      	uxth	r3, r3
 8004088:	2b00      	cmp	r3, #0
 800408a:	bf0c      	ite	eq
 800408c:	2301      	moveq	r3, #1
 800408e:	2300      	movne	r3, #0
 8004090:	b2db      	uxtb	r3, r3
 8004092:	461a      	mov	r2, r3
 8004094:	79fb      	ldrb	r3, [r7, #7]
 8004096:	429a      	cmp	r2, r3
 8004098:	d093      	beq.n	8003fc2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3710      	adds	r7, #16
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
 80040b0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040b2:	e071      	b.n	8004198 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040c2:	d123      	bne.n	800410c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040d2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80040dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2220      	movs	r2, #32
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f8:	f043 0204 	orr.w	r2, r3, #4
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e067      	b.n	80041dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004112:	d041      	beq.n	8004198 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004114:	f7fe f86a 	bl	80021ec <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	429a      	cmp	r2, r3
 8004122:	d302      	bcc.n	800412a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d136      	bne.n	8004198 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	0c1b      	lsrs	r3, r3, #16
 800412e:	b2db      	uxtb	r3, r3
 8004130:	2b01      	cmp	r3, #1
 8004132:	d10c      	bne.n	800414e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	43da      	mvns	r2, r3
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	4013      	ands	r3, r2
 8004140:	b29b      	uxth	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	bf14      	ite	ne
 8004146:	2301      	movne	r3, #1
 8004148:	2300      	moveq	r3, #0
 800414a:	b2db      	uxtb	r3, r3
 800414c:	e00b      	b.n	8004166 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	43da      	mvns	r2, r3
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	4013      	ands	r3, r2
 800415a:	b29b      	uxth	r3, r3
 800415c:	2b00      	cmp	r3, #0
 800415e:	bf14      	ite	ne
 8004160:	2301      	movne	r3, #1
 8004162:	2300      	moveq	r3, #0
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d016      	beq.n	8004198 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2220      	movs	r2, #32
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004184:	f043 0220 	orr.w	r2, r3, #32
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e021      	b.n	80041dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	0c1b      	lsrs	r3, r3, #16
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d10c      	bne.n	80041bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	43da      	mvns	r2, r3
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	4013      	ands	r3, r2
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	bf14      	ite	ne
 80041b4:	2301      	movne	r3, #1
 80041b6:	2300      	moveq	r3, #0
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	e00b      	b.n	80041d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	43da      	mvns	r2, r3
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	4013      	ands	r3, r2
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	bf14      	ite	ne
 80041ce:	2301      	movne	r3, #1
 80041d0:	2300      	moveq	r3, #0
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f47f af6d 	bne.w	80040b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041f0:	e034      	b.n	800425c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f000 f8e3 	bl	80043be <I2C_IsAcknowledgeFailed>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d001      	beq.n	8004202 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e034      	b.n	800426c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004208:	d028      	beq.n	800425c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800420a:	f7fd ffef 	bl	80021ec <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	68ba      	ldr	r2, [r7, #8]
 8004216:	429a      	cmp	r2, r3
 8004218:	d302      	bcc.n	8004220 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d11d      	bne.n	800425c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800422a:	2b80      	cmp	r3, #128	@ 0x80
 800422c:	d016      	beq.n	800425c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2220      	movs	r2, #32
 8004238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004248:	f043 0220 	orr.w	r2, r3, #32
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e007      	b.n	800426c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004266:	2b80      	cmp	r3, #128	@ 0x80
 8004268:	d1c3      	bne.n	80041f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004280:	e034      	b.n	80042ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f000 f89b 	bl	80043be <I2C_IsAcknowledgeFailed>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e034      	b.n	80042fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004298:	d028      	beq.n	80042ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800429a:	f7fd ffa7 	bl	80021ec <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	68ba      	ldr	r2, [r7, #8]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d302      	bcc.n	80042b0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d11d      	bne.n	80042ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	f003 0304 	and.w	r3, r3, #4
 80042ba:	2b04      	cmp	r3, #4
 80042bc:	d016      	beq.n	80042ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2220      	movs	r2, #32
 80042c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d8:	f043 0220 	orr.w	r2, r3, #32
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e007      	b.n	80042fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	f003 0304 	and.w	r3, r3, #4
 80042f6:	2b04      	cmp	r3, #4
 80042f8:	d1c3      	bne.n	8004282 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3710      	adds	r7, #16
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004310:	e049      	b.n	80043a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	695b      	ldr	r3, [r3, #20]
 8004318:	f003 0310 	and.w	r3, r3, #16
 800431c:	2b10      	cmp	r3, #16
 800431e:	d119      	bne.n	8004354 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f06f 0210 	mvn.w	r2, #16
 8004328:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2220      	movs	r2, #32
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e030      	b.n	80043b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004354:	f7fd ff4a 	bl	80021ec <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	68ba      	ldr	r2, [r7, #8]
 8004360:	429a      	cmp	r2, r3
 8004362:	d302      	bcc.n	800436a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d11d      	bne.n	80043a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	695b      	ldr	r3, [r3, #20]
 8004370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004374:	2b40      	cmp	r3, #64	@ 0x40
 8004376:	d016      	beq.n	80043a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2220      	movs	r2, #32
 8004382:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004392:	f043 0220 	orr.w	r2, r3, #32
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e007      	b.n	80043b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	695b      	ldr	r3, [r3, #20]
 80043ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043b0:	2b40      	cmp	r3, #64	@ 0x40
 80043b2:	d1ae      	bne.n	8004312 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80043be:	b480      	push	{r7}
 80043c0:	b083      	sub	sp, #12
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043d4:	d11b      	bne.n	800440e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80043de:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2220      	movs	r2, #32
 80043ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043fa:	f043 0204 	orr.w	r2, r3, #4
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e000      	b.n	8004410 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	bc80      	pop	{r7}
 8004418:	4770      	bx	lr
	...

0800441c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e272      	b.n	8004914 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b00      	cmp	r3, #0
 8004438:	f000 8087 	beq.w	800454a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800443c:	4b92      	ldr	r3, [pc, #584]	@ (8004688 <HAL_RCC_OscConfig+0x26c>)
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f003 030c 	and.w	r3, r3, #12
 8004444:	2b04      	cmp	r3, #4
 8004446:	d00c      	beq.n	8004462 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004448:	4b8f      	ldr	r3, [pc, #572]	@ (8004688 <HAL_RCC_OscConfig+0x26c>)
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f003 030c 	and.w	r3, r3, #12
 8004450:	2b08      	cmp	r3, #8
 8004452:	d112      	bne.n	800447a <HAL_RCC_OscConfig+0x5e>
 8004454:	4b8c      	ldr	r3, [pc, #560]	@ (8004688 <HAL_RCC_OscConfig+0x26c>)
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800445c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004460:	d10b      	bne.n	800447a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004462:	4b89      	ldr	r3, [pc, #548]	@ (8004688 <HAL_RCC_OscConfig+0x26c>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d06c      	beq.n	8004548 <HAL_RCC_OscConfig+0x12c>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d168      	bne.n	8004548 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e24c      	b.n	8004914 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004482:	d106      	bne.n	8004492 <HAL_RCC_OscConfig+0x76>
 8004484:	4b80      	ldr	r3, [pc, #512]	@ (8004688 <HAL_RCC_OscConfig+0x26c>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a7f      	ldr	r2, [pc, #508]	@ (8004688 <HAL_RCC_OscConfig+0x26c>)
 800448a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800448e:	6013      	str	r3, [r2, #0]
 8004490:	e02e      	b.n	80044f0 <HAL_RCC_OscConfig+0xd4>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10c      	bne.n	80044b4 <HAL_RCC_OscConfig+0x98>
 800449a:	4b7b      	ldr	r3, [pc, #492]	@ (8004688 <HAL_RCC_OscConfig+0x26c>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a7a      	ldr	r2, [pc, #488]	@ (8004688 <HAL_RCC_OscConfig+0x26c>)
 80044a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044a4:	6013      	str	r3, [r2, #0]
 80044a6:	4b78      	ldr	r3, [pc, #480]	@ (8004688 <HAL_RCC_OscConfig+0x26c>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a77      	ldr	r2, [pc, #476]	@ (8004688 <HAL_RCC_OscConfig+0x26c>)
 80044ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044b0:	6013      	str	r3, [r2, #0]
 80044b2:	e01d      	b.n	80044f0 <HAL_RCC_OscConfig+0xd4>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044bc:	d10c      	bne.n	80044d8 <HAL_RCC_OscConfig+0xbc>
 80044be:	4b72      	ldr	r3, [pc, #456]	@ (8004688 <HAL_RCC_OscConfig+0x26c>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a71      	ldr	r2, [pc, #452]	@ (8004688 <HAL_RCC_OscConfig+0x26c>)
 80044c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044c8:	6013      	str	r3, [r2, #0]
 80044ca:	4b6f      	ldr	r3, [pc, #444]	@ (8004688 <HAL_RCC_OscConfig+0x26c>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a6e      	ldr	r2, [pc, #440]	@ (8004688 <HAL_RCC_OscConfig+0x26c>)
 80044d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044d4:	6013      	str	r3, [r2, #0]
 80044d6:	e00b      	b.n	80044f0 <HAL_RCC_OscConfig+0xd4>
 80044d8:	4b6b      	ldr	r3, [pc, #428]	@ (8004688 <HAL_RCC_OscConfig+0x26c>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a6a      	ldr	r2, [pc, #424]	@ (8004688 <HAL_RCC_OscConfig+0x26c>)
 80044de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044e2:	6013      	str	r3, [r2, #0]
 80044e4:	4b68      	ldr	r3, [pc, #416]	@ (8004688 <HAL_RCC_OscConfig+0x26c>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a67      	ldr	r2, [pc, #412]	@ (8004688 <HAL_RCC_OscConfig+0x26c>)
 80044ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d013      	beq.n	8004520 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f8:	f7fd fe78 	bl	80021ec <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044fe:	e008      	b.n	8004512 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004500:	f7fd fe74 	bl	80021ec <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b64      	cmp	r3, #100	@ 0x64
 800450c:	d901      	bls.n	8004512 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e200      	b.n	8004914 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004512:	4b5d      	ldr	r3, [pc, #372]	@ (8004688 <HAL_RCC_OscConfig+0x26c>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d0f0      	beq.n	8004500 <HAL_RCC_OscConfig+0xe4>
 800451e:	e014      	b.n	800454a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004520:	f7fd fe64 	bl	80021ec <HAL_GetTick>
 8004524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004526:	e008      	b.n	800453a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004528:	f7fd fe60 	bl	80021ec <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b64      	cmp	r3, #100	@ 0x64
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e1ec      	b.n	8004914 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800453a:	4b53      	ldr	r3, [pc, #332]	@ (8004688 <HAL_RCC_OscConfig+0x26c>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1f0      	bne.n	8004528 <HAL_RCC_OscConfig+0x10c>
 8004546:	e000      	b.n	800454a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004548:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d063      	beq.n	800461e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004556:	4b4c      	ldr	r3, [pc, #304]	@ (8004688 <HAL_RCC_OscConfig+0x26c>)
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f003 030c 	and.w	r3, r3, #12
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00b      	beq.n	800457a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004562:	4b49      	ldr	r3, [pc, #292]	@ (8004688 <HAL_RCC_OscConfig+0x26c>)
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f003 030c 	and.w	r3, r3, #12
 800456a:	2b08      	cmp	r3, #8
 800456c:	d11c      	bne.n	80045a8 <HAL_RCC_OscConfig+0x18c>
 800456e:	4b46      	ldr	r3, [pc, #280]	@ (8004688 <HAL_RCC_OscConfig+0x26c>)
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d116      	bne.n	80045a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800457a:	4b43      	ldr	r3, [pc, #268]	@ (8004688 <HAL_RCC_OscConfig+0x26c>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d005      	beq.n	8004592 <HAL_RCC_OscConfig+0x176>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d001      	beq.n	8004592 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e1c0      	b.n	8004914 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004592:	4b3d      	ldr	r3, [pc, #244]	@ (8004688 <HAL_RCC_OscConfig+0x26c>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	00db      	lsls	r3, r3, #3
 80045a0:	4939      	ldr	r1, [pc, #228]	@ (8004688 <HAL_RCC_OscConfig+0x26c>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045a6:	e03a      	b.n	800461e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d020      	beq.n	80045f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045b0:	4b36      	ldr	r3, [pc, #216]	@ (800468c <HAL_RCC_OscConfig+0x270>)
 80045b2:	2201      	movs	r2, #1
 80045b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b6:	f7fd fe19 	bl	80021ec <HAL_GetTick>
 80045ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045bc:	e008      	b.n	80045d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045be:	f7fd fe15 	bl	80021ec <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d901      	bls.n	80045d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e1a1      	b.n	8004914 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045d0:	4b2d      	ldr	r3, [pc, #180]	@ (8004688 <HAL_RCC_OscConfig+0x26c>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d0f0      	beq.n	80045be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045dc:	4b2a      	ldr	r3, [pc, #168]	@ (8004688 <HAL_RCC_OscConfig+0x26c>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	695b      	ldr	r3, [r3, #20]
 80045e8:	00db      	lsls	r3, r3, #3
 80045ea:	4927      	ldr	r1, [pc, #156]	@ (8004688 <HAL_RCC_OscConfig+0x26c>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	600b      	str	r3, [r1, #0]
 80045f0:	e015      	b.n	800461e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045f2:	4b26      	ldr	r3, [pc, #152]	@ (800468c <HAL_RCC_OscConfig+0x270>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f8:	f7fd fdf8 	bl	80021ec <HAL_GetTick>
 80045fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045fe:	e008      	b.n	8004612 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004600:	f7fd fdf4 	bl	80021ec <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b02      	cmp	r3, #2
 800460c:	d901      	bls.n	8004612 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e180      	b.n	8004914 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004612:	4b1d      	ldr	r3, [pc, #116]	@ (8004688 <HAL_RCC_OscConfig+0x26c>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1f0      	bne.n	8004600 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0308 	and.w	r3, r3, #8
 8004626:	2b00      	cmp	r3, #0
 8004628:	d03a      	beq.n	80046a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d019      	beq.n	8004666 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004632:	4b17      	ldr	r3, [pc, #92]	@ (8004690 <HAL_RCC_OscConfig+0x274>)
 8004634:	2201      	movs	r2, #1
 8004636:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004638:	f7fd fdd8 	bl	80021ec <HAL_GetTick>
 800463c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800463e:	e008      	b.n	8004652 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004640:	f7fd fdd4 	bl	80021ec <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b02      	cmp	r3, #2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e160      	b.n	8004914 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004652:	4b0d      	ldr	r3, [pc, #52]	@ (8004688 <HAL_RCC_OscConfig+0x26c>)
 8004654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d0f0      	beq.n	8004640 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800465e:	2001      	movs	r0, #1
 8004660:	f000 face 	bl	8004c00 <RCC_Delay>
 8004664:	e01c      	b.n	80046a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004666:	4b0a      	ldr	r3, [pc, #40]	@ (8004690 <HAL_RCC_OscConfig+0x274>)
 8004668:	2200      	movs	r2, #0
 800466a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800466c:	f7fd fdbe 	bl	80021ec <HAL_GetTick>
 8004670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004672:	e00f      	b.n	8004694 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004674:	f7fd fdba 	bl	80021ec <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b02      	cmp	r3, #2
 8004680:	d908      	bls.n	8004694 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e146      	b.n	8004914 <HAL_RCC_OscConfig+0x4f8>
 8004686:	bf00      	nop
 8004688:	40021000 	.word	0x40021000
 800468c:	42420000 	.word	0x42420000
 8004690:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004694:	4b92      	ldr	r3, [pc, #584]	@ (80048e0 <HAL_RCC_OscConfig+0x4c4>)
 8004696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004698:	f003 0302 	and.w	r3, r3, #2
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1e9      	bne.n	8004674 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0304 	and.w	r3, r3, #4
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f000 80a6 	beq.w	80047fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046ae:	2300      	movs	r3, #0
 80046b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046b2:	4b8b      	ldr	r3, [pc, #556]	@ (80048e0 <HAL_RCC_OscConfig+0x4c4>)
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d10d      	bne.n	80046da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046be:	4b88      	ldr	r3, [pc, #544]	@ (80048e0 <HAL_RCC_OscConfig+0x4c4>)
 80046c0:	69db      	ldr	r3, [r3, #28]
 80046c2:	4a87      	ldr	r2, [pc, #540]	@ (80048e0 <HAL_RCC_OscConfig+0x4c4>)
 80046c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046c8:	61d3      	str	r3, [r2, #28]
 80046ca:	4b85      	ldr	r3, [pc, #532]	@ (80048e0 <HAL_RCC_OscConfig+0x4c4>)
 80046cc:	69db      	ldr	r3, [r3, #28]
 80046ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046d2:	60bb      	str	r3, [r7, #8]
 80046d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046d6:	2301      	movs	r3, #1
 80046d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046da:	4b82      	ldr	r3, [pc, #520]	@ (80048e4 <HAL_RCC_OscConfig+0x4c8>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d118      	bne.n	8004718 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046e6:	4b7f      	ldr	r3, [pc, #508]	@ (80048e4 <HAL_RCC_OscConfig+0x4c8>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a7e      	ldr	r2, [pc, #504]	@ (80048e4 <HAL_RCC_OscConfig+0x4c8>)
 80046ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046f2:	f7fd fd7b 	bl	80021ec <HAL_GetTick>
 80046f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046f8:	e008      	b.n	800470c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046fa:	f7fd fd77 	bl	80021ec <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	2b64      	cmp	r3, #100	@ 0x64
 8004706:	d901      	bls.n	800470c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e103      	b.n	8004914 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800470c:	4b75      	ldr	r3, [pc, #468]	@ (80048e4 <HAL_RCC_OscConfig+0x4c8>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004714:	2b00      	cmp	r3, #0
 8004716:	d0f0      	beq.n	80046fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	2b01      	cmp	r3, #1
 800471e:	d106      	bne.n	800472e <HAL_RCC_OscConfig+0x312>
 8004720:	4b6f      	ldr	r3, [pc, #444]	@ (80048e0 <HAL_RCC_OscConfig+0x4c4>)
 8004722:	6a1b      	ldr	r3, [r3, #32]
 8004724:	4a6e      	ldr	r2, [pc, #440]	@ (80048e0 <HAL_RCC_OscConfig+0x4c4>)
 8004726:	f043 0301 	orr.w	r3, r3, #1
 800472a:	6213      	str	r3, [r2, #32]
 800472c:	e02d      	b.n	800478a <HAL_RCC_OscConfig+0x36e>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10c      	bne.n	8004750 <HAL_RCC_OscConfig+0x334>
 8004736:	4b6a      	ldr	r3, [pc, #424]	@ (80048e0 <HAL_RCC_OscConfig+0x4c4>)
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	4a69      	ldr	r2, [pc, #420]	@ (80048e0 <HAL_RCC_OscConfig+0x4c4>)
 800473c:	f023 0301 	bic.w	r3, r3, #1
 8004740:	6213      	str	r3, [r2, #32]
 8004742:	4b67      	ldr	r3, [pc, #412]	@ (80048e0 <HAL_RCC_OscConfig+0x4c4>)
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	4a66      	ldr	r2, [pc, #408]	@ (80048e0 <HAL_RCC_OscConfig+0x4c4>)
 8004748:	f023 0304 	bic.w	r3, r3, #4
 800474c:	6213      	str	r3, [r2, #32]
 800474e:	e01c      	b.n	800478a <HAL_RCC_OscConfig+0x36e>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	2b05      	cmp	r3, #5
 8004756:	d10c      	bne.n	8004772 <HAL_RCC_OscConfig+0x356>
 8004758:	4b61      	ldr	r3, [pc, #388]	@ (80048e0 <HAL_RCC_OscConfig+0x4c4>)
 800475a:	6a1b      	ldr	r3, [r3, #32]
 800475c:	4a60      	ldr	r2, [pc, #384]	@ (80048e0 <HAL_RCC_OscConfig+0x4c4>)
 800475e:	f043 0304 	orr.w	r3, r3, #4
 8004762:	6213      	str	r3, [r2, #32]
 8004764:	4b5e      	ldr	r3, [pc, #376]	@ (80048e0 <HAL_RCC_OscConfig+0x4c4>)
 8004766:	6a1b      	ldr	r3, [r3, #32]
 8004768:	4a5d      	ldr	r2, [pc, #372]	@ (80048e0 <HAL_RCC_OscConfig+0x4c4>)
 800476a:	f043 0301 	orr.w	r3, r3, #1
 800476e:	6213      	str	r3, [r2, #32]
 8004770:	e00b      	b.n	800478a <HAL_RCC_OscConfig+0x36e>
 8004772:	4b5b      	ldr	r3, [pc, #364]	@ (80048e0 <HAL_RCC_OscConfig+0x4c4>)
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	4a5a      	ldr	r2, [pc, #360]	@ (80048e0 <HAL_RCC_OscConfig+0x4c4>)
 8004778:	f023 0301 	bic.w	r3, r3, #1
 800477c:	6213      	str	r3, [r2, #32]
 800477e:	4b58      	ldr	r3, [pc, #352]	@ (80048e0 <HAL_RCC_OscConfig+0x4c4>)
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	4a57      	ldr	r2, [pc, #348]	@ (80048e0 <HAL_RCC_OscConfig+0x4c4>)
 8004784:	f023 0304 	bic.w	r3, r3, #4
 8004788:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d015      	beq.n	80047be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004792:	f7fd fd2b 	bl	80021ec <HAL_GetTick>
 8004796:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004798:	e00a      	b.n	80047b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800479a:	f7fd fd27 	bl	80021ec <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d901      	bls.n	80047b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e0b1      	b.n	8004914 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047b0:	4b4b      	ldr	r3, [pc, #300]	@ (80048e0 <HAL_RCC_OscConfig+0x4c4>)
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	f003 0302 	and.w	r3, r3, #2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d0ee      	beq.n	800479a <HAL_RCC_OscConfig+0x37e>
 80047bc:	e014      	b.n	80047e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047be:	f7fd fd15 	bl	80021ec <HAL_GetTick>
 80047c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047c4:	e00a      	b.n	80047dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047c6:	f7fd fd11 	bl	80021ec <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d901      	bls.n	80047dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e09b      	b.n	8004914 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047dc:	4b40      	ldr	r3, [pc, #256]	@ (80048e0 <HAL_RCC_OscConfig+0x4c4>)
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1ee      	bne.n	80047c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80047e8:	7dfb      	ldrb	r3, [r7, #23]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d105      	bne.n	80047fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047ee:	4b3c      	ldr	r3, [pc, #240]	@ (80048e0 <HAL_RCC_OscConfig+0x4c4>)
 80047f0:	69db      	ldr	r3, [r3, #28]
 80047f2:	4a3b      	ldr	r2, [pc, #236]	@ (80048e0 <HAL_RCC_OscConfig+0x4c4>)
 80047f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	69db      	ldr	r3, [r3, #28]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	f000 8087 	beq.w	8004912 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004804:	4b36      	ldr	r3, [pc, #216]	@ (80048e0 <HAL_RCC_OscConfig+0x4c4>)
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f003 030c 	and.w	r3, r3, #12
 800480c:	2b08      	cmp	r3, #8
 800480e:	d061      	beq.n	80048d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	69db      	ldr	r3, [r3, #28]
 8004814:	2b02      	cmp	r3, #2
 8004816:	d146      	bne.n	80048a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004818:	4b33      	ldr	r3, [pc, #204]	@ (80048e8 <HAL_RCC_OscConfig+0x4cc>)
 800481a:	2200      	movs	r2, #0
 800481c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800481e:	f7fd fce5 	bl	80021ec <HAL_GetTick>
 8004822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004824:	e008      	b.n	8004838 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004826:	f7fd fce1 	bl	80021ec <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	2b02      	cmp	r3, #2
 8004832:	d901      	bls.n	8004838 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e06d      	b.n	8004914 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004838:	4b29      	ldr	r3, [pc, #164]	@ (80048e0 <HAL_RCC_OscConfig+0x4c4>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1f0      	bne.n	8004826 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a1b      	ldr	r3, [r3, #32]
 8004848:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800484c:	d108      	bne.n	8004860 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800484e:	4b24      	ldr	r3, [pc, #144]	@ (80048e0 <HAL_RCC_OscConfig+0x4c4>)
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	4921      	ldr	r1, [pc, #132]	@ (80048e0 <HAL_RCC_OscConfig+0x4c4>)
 800485c:	4313      	orrs	r3, r2
 800485e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004860:	4b1f      	ldr	r3, [pc, #124]	@ (80048e0 <HAL_RCC_OscConfig+0x4c4>)
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a19      	ldr	r1, [r3, #32]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004870:	430b      	orrs	r3, r1
 8004872:	491b      	ldr	r1, [pc, #108]	@ (80048e0 <HAL_RCC_OscConfig+0x4c4>)
 8004874:	4313      	orrs	r3, r2
 8004876:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004878:	4b1b      	ldr	r3, [pc, #108]	@ (80048e8 <HAL_RCC_OscConfig+0x4cc>)
 800487a:	2201      	movs	r2, #1
 800487c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800487e:	f7fd fcb5 	bl	80021ec <HAL_GetTick>
 8004882:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004884:	e008      	b.n	8004898 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004886:	f7fd fcb1 	bl	80021ec <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	2b02      	cmp	r3, #2
 8004892:	d901      	bls.n	8004898 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e03d      	b.n	8004914 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004898:	4b11      	ldr	r3, [pc, #68]	@ (80048e0 <HAL_RCC_OscConfig+0x4c4>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d0f0      	beq.n	8004886 <HAL_RCC_OscConfig+0x46a>
 80048a4:	e035      	b.n	8004912 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048a6:	4b10      	ldr	r3, [pc, #64]	@ (80048e8 <HAL_RCC_OscConfig+0x4cc>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ac:	f7fd fc9e 	bl	80021ec <HAL_GetTick>
 80048b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048b2:	e008      	b.n	80048c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048b4:	f7fd fc9a 	bl	80021ec <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e026      	b.n	8004914 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048c6:	4b06      	ldr	r3, [pc, #24]	@ (80048e0 <HAL_RCC_OscConfig+0x4c4>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1f0      	bne.n	80048b4 <HAL_RCC_OscConfig+0x498>
 80048d2:	e01e      	b.n	8004912 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	69db      	ldr	r3, [r3, #28]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d107      	bne.n	80048ec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e019      	b.n	8004914 <HAL_RCC_OscConfig+0x4f8>
 80048e0:	40021000 	.word	0x40021000
 80048e4:	40007000 	.word	0x40007000
 80048e8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80048ec:	4b0b      	ldr	r3, [pc, #44]	@ (800491c <HAL_RCC_OscConfig+0x500>)
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a1b      	ldr	r3, [r3, #32]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d106      	bne.n	800490e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800490a:	429a      	cmp	r2, r3
 800490c:	d001      	beq.n	8004912 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e000      	b.n	8004914 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3718      	adds	r7, #24
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	40021000 	.word	0x40021000

08004920 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d101      	bne.n	8004934 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e0d0      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004934:	4b6a      	ldr	r3, [pc, #424]	@ (8004ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0307 	and.w	r3, r3, #7
 800493c:	683a      	ldr	r2, [r7, #0]
 800493e:	429a      	cmp	r2, r3
 8004940:	d910      	bls.n	8004964 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004942:	4b67      	ldr	r3, [pc, #412]	@ (8004ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f023 0207 	bic.w	r2, r3, #7
 800494a:	4965      	ldr	r1, [pc, #404]	@ (8004ae0 <HAL_RCC_ClockConfig+0x1c0>)
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	4313      	orrs	r3, r2
 8004950:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004952:	4b63      	ldr	r3, [pc, #396]	@ (8004ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0307 	and.w	r3, r3, #7
 800495a:	683a      	ldr	r2, [r7, #0]
 800495c:	429a      	cmp	r2, r3
 800495e:	d001      	beq.n	8004964 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e0b8      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0302 	and.w	r3, r3, #2
 800496c:	2b00      	cmp	r3, #0
 800496e:	d020      	beq.n	80049b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0304 	and.w	r3, r3, #4
 8004978:	2b00      	cmp	r3, #0
 800497a:	d005      	beq.n	8004988 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800497c:	4b59      	ldr	r3, [pc, #356]	@ (8004ae4 <HAL_RCC_ClockConfig+0x1c4>)
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	4a58      	ldr	r2, [pc, #352]	@ (8004ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8004982:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004986:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0308 	and.w	r3, r3, #8
 8004990:	2b00      	cmp	r3, #0
 8004992:	d005      	beq.n	80049a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004994:	4b53      	ldr	r3, [pc, #332]	@ (8004ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	4a52      	ldr	r2, [pc, #328]	@ (8004ae4 <HAL_RCC_ClockConfig+0x1c4>)
 800499a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800499e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049a0:	4b50      	ldr	r3, [pc, #320]	@ (8004ae4 <HAL_RCC_ClockConfig+0x1c4>)
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	494d      	ldr	r1, [pc, #308]	@ (8004ae4 <HAL_RCC_ClockConfig+0x1c4>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d040      	beq.n	8004a40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d107      	bne.n	80049d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049c6:	4b47      	ldr	r3, [pc, #284]	@ (8004ae4 <HAL_RCC_ClockConfig+0x1c4>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d115      	bne.n	80049fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e07f      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d107      	bne.n	80049ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049de:	4b41      	ldr	r3, [pc, #260]	@ (8004ae4 <HAL_RCC_ClockConfig+0x1c4>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d109      	bne.n	80049fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e073      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ee:	4b3d      	ldr	r3, [pc, #244]	@ (8004ae4 <HAL_RCC_ClockConfig+0x1c4>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e06b      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049fe:	4b39      	ldr	r3, [pc, #228]	@ (8004ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f023 0203 	bic.w	r2, r3, #3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	4936      	ldr	r1, [pc, #216]	@ (8004ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a10:	f7fd fbec 	bl	80021ec <HAL_GetTick>
 8004a14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a16:	e00a      	b.n	8004a2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a18:	f7fd fbe8 	bl	80021ec <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e053      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a2e:	4b2d      	ldr	r3, [pc, #180]	@ (8004ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f003 020c 	and.w	r2, r3, #12
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d1eb      	bne.n	8004a18 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a40:	4b27      	ldr	r3, [pc, #156]	@ (8004ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0307 	and.w	r3, r3, #7
 8004a48:	683a      	ldr	r2, [r7, #0]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d210      	bcs.n	8004a70 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a4e:	4b24      	ldr	r3, [pc, #144]	@ (8004ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f023 0207 	bic.w	r2, r3, #7
 8004a56:	4922      	ldr	r1, [pc, #136]	@ (8004ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a5e:	4b20      	ldr	r3, [pc, #128]	@ (8004ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0307 	and.w	r3, r3, #7
 8004a66:	683a      	ldr	r2, [r7, #0]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d001      	beq.n	8004a70 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e032      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0304 	and.w	r3, r3, #4
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d008      	beq.n	8004a8e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a7c:	4b19      	ldr	r3, [pc, #100]	@ (8004ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	4916      	ldr	r1, [pc, #88]	@ (8004ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0308 	and.w	r3, r3, #8
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d009      	beq.n	8004aae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a9a:	4b12      	ldr	r3, [pc, #72]	@ (8004ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	00db      	lsls	r3, r3, #3
 8004aa8:	490e      	ldr	r1, [pc, #56]	@ (8004ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004aae:	f000 f821 	bl	8004af4 <HAL_RCC_GetSysClockFreq>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8004ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	091b      	lsrs	r3, r3, #4
 8004aba:	f003 030f 	and.w	r3, r3, #15
 8004abe:	490a      	ldr	r1, [pc, #40]	@ (8004ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ac0:	5ccb      	ldrb	r3, [r1, r3]
 8004ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ac6:	4a09      	ldr	r2, [pc, #36]	@ (8004aec <HAL_RCC_ClockConfig+0x1cc>)
 8004ac8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004aca:	4b09      	ldr	r3, [pc, #36]	@ (8004af0 <HAL_RCC_ClockConfig+0x1d0>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7fd fb4a 	bl	8002168 <HAL_InitTick>

  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	40022000 	.word	0x40022000
 8004ae4:	40021000 	.word	0x40021000
 8004ae8:	08006c24 	.word	0x08006c24
 8004aec:	20000004 	.word	0x20000004
 8004af0:	20000008 	.word	0x20000008

08004af4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b087      	sub	sp, #28
 8004af8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004afa:	2300      	movs	r3, #0
 8004afc:	60fb      	str	r3, [r7, #12]
 8004afe:	2300      	movs	r3, #0
 8004b00:	60bb      	str	r3, [r7, #8]
 8004b02:	2300      	movs	r3, #0
 8004b04:	617b      	str	r3, [r7, #20]
 8004b06:	2300      	movs	r3, #0
 8004b08:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004b0e:	4b1e      	ldr	r3, [pc, #120]	@ (8004b88 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f003 030c 	and.w	r3, r3, #12
 8004b1a:	2b04      	cmp	r3, #4
 8004b1c:	d002      	beq.n	8004b24 <HAL_RCC_GetSysClockFreq+0x30>
 8004b1e:	2b08      	cmp	r3, #8
 8004b20:	d003      	beq.n	8004b2a <HAL_RCC_GetSysClockFreq+0x36>
 8004b22:	e027      	b.n	8004b74 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b24:	4b19      	ldr	r3, [pc, #100]	@ (8004b8c <HAL_RCC_GetSysClockFreq+0x98>)
 8004b26:	613b      	str	r3, [r7, #16]
      break;
 8004b28:	e027      	b.n	8004b7a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	0c9b      	lsrs	r3, r3, #18
 8004b2e:	f003 030f 	and.w	r3, r3, #15
 8004b32:	4a17      	ldr	r2, [pc, #92]	@ (8004b90 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004b34:	5cd3      	ldrb	r3, [r2, r3]
 8004b36:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d010      	beq.n	8004b64 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b42:	4b11      	ldr	r3, [pc, #68]	@ (8004b88 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	0c5b      	lsrs	r3, r3, #17
 8004b48:	f003 0301 	and.w	r3, r3, #1
 8004b4c:	4a11      	ldr	r2, [pc, #68]	@ (8004b94 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004b4e:	5cd3      	ldrb	r3, [r2, r3]
 8004b50:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a0d      	ldr	r2, [pc, #52]	@ (8004b8c <HAL_RCC_GetSysClockFreq+0x98>)
 8004b56:	fb03 f202 	mul.w	r2, r3, r2
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b60:	617b      	str	r3, [r7, #20]
 8004b62:	e004      	b.n	8004b6e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a0c      	ldr	r2, [pc, #48]	@ (8004b98 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004b68:	fb02 f303 	mul.w	r3, r2, r3
 8004b6c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	613b      	str	r3, [r7, #16]
      break;
 8004b72:	e002      	b.n	8004b7a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b74:	4b05      	ldr	r3, [pc, #20]	@ (8004b8c <HAL_RCC_GetSysClockFreq+0x98>)
 8004b76:	613b      	str	r3, [r7, #16]
      break;
 8004b78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b7a:	693b      	ldr	r3, [r7, #16]
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	371c      	adds	r7, #28
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bc80      	pop	{r7}
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	40021000 	.word	0x40021000
 8004b8c:	007a1200 	.word	0x007a1200
 8004b90:	08006c3c 	.word	0x08006c3c
 8004b94:	08006c4c 	.word	0x08006c4c
 8004b98:	003d0900 	.word	0x003d0900

08004b9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ba0:	4b02      	ldr	r3, [pc, #8]	@ (8004bac <HAL_RCC_GetHCLKFreq+0x10>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bc80      	pop	{r7}
 8004baa:	4770      	bx	lr
 8004bac:	20000004 	.word	0x20000004

08004bb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004bb4:	f7ff fff2 	bl	8004b9c <HAL_RCC_GetHCLKFreq>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	4b05      	ldr	r3, [pc, #20]	@ (8004bd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	0a1b      	lsrs	r3, r3, #8
 8004bc0:	f003 0307 	and.w	r3, r3, #7
 8004bc4:	4903      	ldr	r1, [pc, #12]	@ (8004bd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bc6:	5ccb      	ldrb	r3, [r1, r3]
 8004bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	40021000 	.word	0x40021000
 8004bd4:	08006c34 	.word	0x08006c34

08004bd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004bdc:	f7ff ffde 	bl	8004b9c <HAL_RCC_GetHCLKFreq>
 8004be0:	4602      	mov	r2, r0
 8004be2:	4b05      	ldr	r3, [pc, #20]	@ (8004bf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	0adb      	lsrs	r3, r3, #11
 8004be8:	f003 0307 	and.w	r3, r3, #7
 8004bec:	4903      	ldr	r1, [pc, #12]	@ (8004bfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bee:	5ccb      	ldrb	r3, [r1, r3]
 8004bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	40021000 	.word	0x40021000
 8004bfc:	08006c34 	.word	0x08006c34

08004c00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004c08:	4b0a      	ldr	r3, [pc, #40]	@ (8004c34 <RCC_Delay+0x34>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a0a      	ldr	r2, [pc, #40]	@ (8004c38 <RCC_Delay+0x38>)
 8004c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c12:	0a5b      	lsrs	r3, r3, #9
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	fb02 f303 	mul.w	r3, r2, r3
 8004c1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004c1c:	bf00      	nop
  }
  while (Delay --);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	1e5a      	subs	r2, r3, #1
 8004c22:	60fa      	str	r2, [r7, #12]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d1f9      	bne.n	8004c1c <RCC_Delay+0x1c>
}
 8004c28:	bf00      	nop
 8004c2a:	bf00      	nop
 8004c2c:	3714      	adds	r7, #20
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bc80      	pop	{r7}
 8004c32:	4770      	bx	lr
 8004c34:	20000004 	.word	0x20000004
 8004c38:	10624dd3 	.word	0x10624dd3

08004c3c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b086      	sub	sp, #24
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004c44:	2300      	movs	r3, #0
 8004c46:	613b      	str	r3, [r7, #16]
 8004c48:	2300      	movs	r3, #0
 8004c4a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0301 	and.w	r3, r3, #1
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d07d      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c5c:	4b4f      	ldr	r3, [pc, #316]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c5e:	69db      	ldr	r3, [r3, #28]
 8004c60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d10d      	bne.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c68:	4b4c      	ldr	r3, [pc, #304]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c6a:	69db      	ldr	r3, [r3, #28]
 8004c6c:	4a4b      	ldr	r2, [pc, #300]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c72:	61d3      	str	r3, [r2, #28]
 8004c74:	4b49      	ldr	r3, [pc, #292]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c76:	69db      	ldr	r3, [r3, #28]
 8004c78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c7c:	60bb      	str	r3, [r7, #8]
 8004c7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c80:	2301      	movs	r3, #1
 8004c82:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c84:	4b46      	ldr	r3, [pc, #280]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d118      	bne.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c90:	4b43      	ldr	r3, [pc, #268]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a42      	ldr	r2, [pc, #264]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c9c:	f7fd faa6 	bl	80021ec <HAL_GetTick>
 8004ca0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ca2:	e008      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ca4:	f7fd faa2 	bl	80021ec <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b64      	cmp	r3, #100	@ 0x64
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e06d      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cb6:	4b3a      	ldr	r3, [pc, #232]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d0f0      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004cc2:	4b36      	ldr	r3, [pc, #216]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
 8004cc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d02e      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d027      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ce0:	4b2e      	ldr	r3, [pc, #184]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ce2:	6a1b      	ldr	r3, [r3, #32]
 8004ce4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ce8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cea:	4b2e      	ldr	r3, [pc, #184]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004cec:	2201      	movs	r2, #1
 8004cee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cf0:	4b2c      	ldr	r3, [pc, #176]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004cf6:	4a29      	ldr	r2, [pc, #164]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d014      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d06:	f7fd fa71 	bl	80021ec <HAL_GetTick>
 8004d0a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d0c:	e00a      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d0e:	f7fd fa6d 	bl	80021ec <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d901      	bls.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e036      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d24:	4b1d      	ldr	r3, [pc, #116]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d26:	6a1b      	ldr	r3, [r3, #32]
 8004d28:	f003 0302 	and.w	r3, r3, #2
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d0ee      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d30:	4b1a      	ldr	r3, [pc, #104]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d32:	6a1b      	ldr	r3, [r3, #32]
 8004d34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	4917      	ldr	r1, [pc, #92]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d42:	7dfb      	ldrb	r3, [r7, #23]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d105      	bne.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d48:	4b14      	ldr	r3, [pc, #80]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d4a:	69db      	ldr	r3, [r3, #28]
 8004d4c:	4a13      	ldr	r2, [pc, #76]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d52:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0302 	and.w	r3, r3, #2
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d008      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d60:	4b0e      	ldr	r3, [pc, #56]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	490b      	ldr	r1, [pc, #44]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0310 	and.w	r3, r3, #16
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d008      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d7e:	4b07      	ldr	r3, [pc, #28]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	4904      	ldr	r1, [pc, #16]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3718      	adds	r7, #24
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	40021000 	.word	0x40021000
 8004da0:	40007000 	.word	0x40007000
 8004da4:	42420440 	.word	0x42420440

08004da8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b088      	sub	sp, #32
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004db0:	2300      	movs	r3, #0
 8004db2:	617b      	str	r3, [r7, #20]
 8004db4:	2300      	movs	r3, #0
 8004db6:	61fb      	str	r3, [r7, #28]
 8004db8:	2300      	movs	r3, #0
 8004dba:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	60fb      	str	r3, [r7, #12]
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2b10      	cmp	r3, #16
 8004dc8:	d00a      	beq.n	8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2b10      	cmp	r3, #16
 8004dce:	f200 808a 	bhi.w	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d045      	beq.n	8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d075      	beq.n	8004eca <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004dde:	e082      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004de0:	4b46      	ldr	r3, [pc, #280]	@ (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004de6:	4b45      	ldr	r3, [pc, #276]	@ (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d07b      	beq.n	8004eea <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	0c9b      	lsrs	r3, r3, #18
 8004df6:	f003 030f 	and.w	r3, r3, #15
 8004dfa:	4a41      	ldr	r2, [pc, #260]	@ (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004dfc:	5cd3      	ldrb	r3, [r2, r3]
 8004dfe:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d015      	beq.n	8004e36 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004e0a:	4b3c      	ldr	r3, [pc, #240]	@ (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	0c5b      	lsrs	r3, r3, #17
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	4a3b      	ldr	r2, [pc, #236]	@ (8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004e16:	5cd3      	ldrb	r3, [r2, r3]
 8004e18:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d00d      	beq.n	8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004e24:	4a38      	ldr	r2, [pc, #224]	@ (8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	fb02 f303 	mul.w	r3, r2, r3
 8004e32:	61fb      	str	r3, [r7, #28]
 8004e34:	e004      	b.n	8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	4a34      	ldr	r2, [pc, #208]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004e3a:	fb02 f303 	mul.w	r3, r2, r3
 8004e3e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004e40:	4b2e      	ldr	r3, [pc, #184]	@ (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e4c:	d102      	bne.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	61bb      	str	r3, [r7, #24]
      break;
 8004e52:	e04a      	b.n	8004eea <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	005b      	lsls	r3, r3, #1
 8004e58:	4a2d      	ldr	r2, [pc, #180]	@ (8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e5e:	085b      	lsrs	r3, r3, #1
 8004e60:	61bb      	str	r3, [r7, #24]
      break;
 8004e62:	e042      	b.n	8004eea <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004e64:	4b25      	ldr	r3, [pc, #148]	@ (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004e66:	6a1b      	ldr	r3, [r3, #32]
 8004e68:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e74:	d108      	bne.n	8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f003 0302 	and.w	r3, r3, #2
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d003      	beq.n	8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004e80:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e84:	61bb      	str	r3, [r7, #24]
 8004e86:	e01f      	b.n	8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e92:	d109      	bne.n	8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004e94:	4b19      	ldr	r3, [pc, #100]	@ (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e98:	f003 0302 	and.w	r3, r3, #2
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d003      	beq.n	8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004ea0:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004ea4:	61bb      	str	r3, [r7, #24]
 8004ea6:	e00f      	b.n	8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004eb2:	d11c      	bne.n	8004eee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004eb4:	4b11      	ldr	r3, [pc, #68]	@ (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d016      	beq.n	8004eee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004ec0:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8004ec4:	61bb      	str	r3, [r7, #24]
      break;
 8004ec6:	e012      	b.n	8004eee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004ec8:	e011      	b.n	8004eee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004eca:	f7ff fe85 	bl	8004bd8 <HAL_RCC_GetPCLK2Freq>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	0b9b      	lsrs	r3, r3, #14
 8004ed6:	f003 0303 	and.w	r3, r3, #3
 8004eda:	3301      	adds	r3, #1
 8004edc:	005b      	lsls	r3, r3, #1
 8004ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee2:	61bb      	str	r3, [r7, #24]
      break;
 8004ee4:	e004      	b.n	8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004ee6:	bf00      	nop
 8004ee8:	e002      	b.n	8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004eea:	bf00      	nop
 8004eec:	e000      	b.n	8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004eee:	bf00      	nop
    }
  }
  return (frequency);
 8004ef0:	69bb      	ldr	r3, [r7, #24]
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3720      	adds	r7, #32
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	40021000 	.word	0x40021000
 8004f00:	08006c50 	.word	0x08006c50
 8004f04:	08006c60 	.word	0x08006c60
 8004f08:	007a1200 	.word	0x007a1200
 8004f0c:	003d0900 	.word	0x003d0900
 8004f10:	aaaaaaab 	.word	0xaaaaaaab

08004f14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e076      	b.n	8005014 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d108      	bne.n	8004f40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f36:	d009      	beq.n	8004f4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	61da      	str	r2, [r3, #28]
 8004f3e:	e005      	b.n	8004f4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d106      	bne.n	8004f6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f7fc ff82 	bl	8001e70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2202      	movs	r2, #2
 8004f70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f82:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004f94:	431a      	orrs	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f9e:	431a      	orrs	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	f003 0302 	and.w	r3, r3, #2
 8004fa8:	431a      	orrs	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	f003 0301 	and.w	r3, r3, #1
 8004fb2:	431a      	orrs	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fbc:	431a      	orrs	r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	69db      	ldr	r3, [r3, #28]
 8004fc2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004fc6:	431a      	orrs	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a1b      	ldr	r3, [r3, #32]
 8004fcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fd0:	ea42 0103 	orr.w	r1, r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	0c1a      	lsrs	r2, r3, #16
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f002 0204 	and.w	r2, r2, #4
 8004ff2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	69da      	ldr	r2, [r3, #28]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005002:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	3708      	adds	r7, #8
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b088      	sub	sp, #32
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	603b      	str	r3, [r7, #0]
 8005028:	4613      	mov	r3, r2
 800502a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800502c:	f7fd f8de 	bl	80021ec <HAL_GetTick>
 8005030:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005032:	88fb      	ldrh	r3, [r7, #6]
 8005034:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800503c:	b2db      	uxtb	r3, r3
 800503e:	2b01      	cmp	r3, #1
 8005040:	d001      	beq.n	8005046 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005042:	2302      	movs	r3, #2
 8005044:	e12a      	b.n	800529c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d002      	beq.n	8005052 <HAL_SPI_Transmit+0x36>
 800504c:	88fb      	ldrh	r3, [r7, #6]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d101      	bne.n	8005056 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e122      	b.n	800529c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800505c:	2b01      	cmp	r3, #1
 800505e:	d101      	bne.n	8005064 <HAL_SPI_Transmit+0x48>
 8005060:	2302      	movs	r3, #2
 8005062:	e11b      	b.n	800529c <HAL_SPI_Transmit+0x280>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2203      	movs	r2, #3
 8005070:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	68ba      	ldr	r2, [r7, #8]
 800507e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	88fa      	ldrh	r2, [r7, #6]
 8005084:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	88fa      	ldrh	r2, [r7, #6]
 800508a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050b2:	d10f      	bne.n	80050d4 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050c2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80050d2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050de:	2b40      	cmp	r3, #64	@ 0x40
 80050e0:	d007      	beq.n	80050f2 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80050f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050fa:	d152      	bne.n	80051a2 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d002      	beq.n	800510a <HAL_SPI_Transmit+0xee>
 8005104:	8b7b      	ldrh	r3, [r7, #26]
 8005106:	2b01      	cmp	r3, #1
 8005108:	d145      	bne.n	8005196 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800510e:	881a      	ldrh	r2, [r3, #0]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800511a:	1c9a      	adds	r2, r3, #2
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005124:	b29b      	uxth	r3, r3
 8005126:	3b01      	subs	r3, #1
 8005128:	b29a      	uxth	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800512e:	e032      	b.n	8005196 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f003 0302 	and.w	r3, r3, #2
 800513a:	2b02      	cmp	r3, #2
 800513c:	d112      	bne.n	8005164 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005142:	881a      	ldrh	r2, [r3, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800514e:	1c9a      	adds	r2, r3, #2
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005158:	b29b      	uxth	r3, r3
 800515a:	3b01      	subs	r3, #1
 800515c:	b29a      	uxth	r2, r3
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005162:	e018      	b.n	8005196 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005164:	f7fd f842 	bl	80021ec <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	683a      	ldr	r2, [r7, #0]
 8005170:	429a      	cmp	r2, r3
 8005172:	d803      	bhi.n	800517c <HAL_SPI_Transmit+0x160>
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800517a:	d102      	bne.n	8005182 <HAL_SPI_Transmit+0x166>
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d109      	bne.n	8005196 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2201      	movs	r2, #1
 8005186:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e082      	b.n	800529c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800519a:	b29b      	uxth	r3, r3
 800519c:	2b00      	cmp	r3, #0
 800519e:	d1c7      	bne.n	8005130 <HAL_SPI_Transmit+0x114>
 80051a0:	e053      	b.n	800524a <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d002      	beq.n	80051b0 <HAL_SPI_Transmit+0x194>
 80051aa:	8b7b      	ldrh	r3, [r7, #26]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d147      	bne.n	8005240 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	330c      	adds	r3, #12
 80051ba:	7812      	ldrb	r2, [r2, #0]
 80051bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051c2:	1c5a      	adds	r2, r3, #1
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	3b01      	subs	r3, #1
 80051d0:	b29a      	uxth	r2, r3
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80051d6:	e033      	b.n	8005240 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d113      	bne.n	800520e <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	330c      	adds	r3, #12
 80051f0:	7812      	ldrb	r2, [r2, #0]
 80051f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051f8:	1c5a      	adds	r2, r3, #1
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005202:	b29b      	uxth	r3, r3
 8005204:	3b01      	subs	r3, #1
 8005206:	b29a      	uxth	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800520c:	e018      	b.n	8005240 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800520e:	f7fc ffed 	bl	80021ec <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	683a      	ldr	r2, [r7, #0]
 800521a:	429a      	cmp	r2, r3
 800521c:	d803      	bhi.n	8005226 <HAL_SPI_Transmit+0x20a>
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005224:	d102      	bne.n	800522c <HAL_SPI_Transmit+0x210>
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d109      	bne.n	8005240 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e02d      	b.n	800529c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005244:	b29b      	uxth	r3, r3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1c6      	bne.n	80051d8 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800524a:	69fa      	ldr	r2, [r7, #28]
 800524c:	6839      	ldr	r1, [r7, #0]
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f000 fbc4 	bl	80059dc <SPI_EndRxTxTransaction>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d002      	beq.n	8005260 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2220      	movs	r2, #32
 800525e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d10a      	bne.n	800527e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005268:	2300      	movs	r3, #0
 800526a:	617b      	str	r3, [r7, #20]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	617b      	str	r3, [r7, #20]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	617b      	str	r3, [r7, #20]
 800527c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2201      	movs	r2, #1
 8005282:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005292:	2b00      	cmp	r3, #0
 8005294:	d001      	beq.n	800529a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e000      	b.n	800529c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800529a:	2300      	movs	r3, #0
  }
}
 800529c:	4618      	mov	r0, r3
 800529e:	3720      	adds	r7, #32
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b088      	sub	sp, #32
 80052a8:	af02      	add	r7, sp, #8
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	603b      	str	r3, [r7, #0]
 80052b0:	4613      	mov	r3, r2
 80052b2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d001      	beq.n	80052c4 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80052c0:	2302      	movs	r3, #2
 80052c2:	e104      	b.n	80054ce <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052cc:	d112      	bne.n	80052f4 <HAL_SPI_Receive+0x50>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10e      	bne.n	80052f4 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2204      	movs	r2, #4
 80052da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80052de:	88fa      	ldrh	r2, [r7, #6]
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	9300      	str	r3, [sp, #0]
 80052e4:	4613      	mov	r3, r2
 80052e6:	68ba      	ldr	r2, [r7, #8]
 80052e8:	68b9      	ldr	r1, [r7, #8]
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	f000 f8f3 	bl	80054d6 <HAL_SPI_TransmitReceive>
 80052f0:	4603      	mov	r3, r0
 80052f2:	e0ec      	b.n	80054ce <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052f4:	f7fc ff7a 	bl	80021ec <HAL_GetTick>
 80052f8:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d002      	beq.n	8005306 <HAL_SPI_Receive+0x62>
 8005300:	88fb      	ldrh	r3, [r7, #6]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d101      	bne.n	800530a <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e0e1      	b.n	80054ce <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005310:	2b01      	cmp	r3, #1
 8005312:	d101      	bne.n	8005318 <HAL_SPI_Receive+0x74>
 8005314:	2302      	movs	r3, #2
 8005316:	e0da      	b.n	80054ce <HAL_SPI_Receive+0x22a>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2204      	movs	r2, #4
 8005324:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	68ba      	ldr	r2, [r7, #8]
 8005332:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	88fa      	ldrh	r2, [r7, #6]
 8005338:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	88fa      	ldrh	r2, [r7, #6]
 800533e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2200      	movs	r2, #0
 8005344:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2200      	movs	r2, #0
 800535c:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005366:	d10f      	bne.n	8005388 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005376:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005386:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005392:	2b40      	cmp	r3, #64	@ 0x40
 8005394:	d007      	beq.n	80053a6 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80053a4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d170      	bne.n	8005490 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80053ae:	e035      	b.n	800541c <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d115      	bne.n	80053ea <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f103 020c 	add.w	r2, r3, #12
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ca:	7812      	ldrb	r2, [r2, #0]
 80053cc:	b2d2      	uxtb	r2, r2
 80053ce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053d4:	1c5a      	adds	r2, r3, #1
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053de:	b29b      	uxth	r3, r3
 80053e0:	3b01      	subs	r3, #1
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80053e8:	e018      	b.n	800541c <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053ea:	f7fc feff 	bl	80021ec <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d803      	bhi.n	8005402 <HAL_SPI_Receive+0x15e>
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005400:	d102      	bne.n	8005408 <HAL_SPI_Receive+0x164>
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d109      	bne.n	800541c <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e058      	b.n	80054ce <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005420:	b29b      	uxth	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1c4      	bne.n	80053b0 <HAL_SPI_Receive+0x10c>
 8005426:	e038      	b.n	800549a <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b01      	cmp	r3, #1
 8005434:	d113      	bne.n	800545e <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68da      	ldr	r2, [r3, #12]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005440:	b292      	uxth	r2, r2
 8005442:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005448:	1c9a      	adds	r2, r3, #2
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005452:	b29b      	uxth	r3, r3
 8005454:	3b01      	subs	r3, #1
 8005456:	b29a      	uxth	r2, r3
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800545c:	e018      	b.n	8005490 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800545e:	f7fc fec5 	bl	80021ec <HAL_GetTick>
 8005462:	4602      	mov	r2, r0
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	683a      	ldr	r2, [r7, #0]
 800546a:	429a      	cmp	r2, r3
 800546c:	d803      	bhi.n	8005476 <HAL_SPI_Receive+0x1d2>
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005474:	d102      	bne.n	800547c <HAL_SPI_Receive+0x1d8>
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d109      	bne.n	8005490 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e01e      	b.n	80054ce <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005494:	b29b      	uxth	r3, r3
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1c6      	bne.n	8005428 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800549a:	697a      	ldr	r2, [r7, #20]
 800549c:	6839      	ldr	r1, [r7, #0]
 800549e:	68f8      	ldr	r0, [r7, #12]
 80054a0:	f000 fa4a 	bl	8005938 <SPI_EndRxTransaction>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d002      	beq.n	80054b0 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2220      	movs	r2, #32
 80054ae:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d001      	beq.n	80054cc <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e000      	b.n	80054ce <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80054cc:	2300      	movs	r3, #0
  }
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3718      	adds	r7, #24
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b08a      	sub	sp, #40	@ 0x28
 80054da:	af00      	add	r7, sp, #0
 80054dc:	60f8      	str	r0, [r7, #12]
 80054de:	60b9      	str	r1, [r7, #8]
 80054e0:	607a      	str	r2, [r7, #4]
 80054e2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80054e4:	2301      	movs	r3, #1
 80054e6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054e8:	f7fc fe80 	bl	80021ec <HAL_GetTick>
 80054ec:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80054f4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80054fc:	887b      	ldrh	r3, [r7, #2]
 80054fe:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005500:	7ffb      	ldrb	r3, [r7, #31]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d00c      	beq.n	8005520 <HAL_SPI_TransmitReceive+0x4a>
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800550c:	d106      	bne.n	800551c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d102      	bne.n	800551c <HAL_SPI_TransmitReceive+0x46>
 8005516:	7ffb      	ldrb	r3, [r7, #31]
 8005518:	2b04      	cmp	r3, #4
 800551a:	d001      	beq.n	8005520 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800551c:	2302      	movs	r3, #2
 800551e:	e17f      	b.n	8005820 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d005      	beq.n	8005532 <HAL_SPI_TransmitReceive+0x5c>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d002      	beq.n	8005532 <HAL_SPI_TransmitReceive+0x5c>
 800552c:	887b      	ldrh	r3, [r7, #2]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d101      	bne.n	8005536 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e174      	b.n	8005820 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800553c:	2b01      	cmp	r3, #1
 800553e:	d101      	bne.n	8005544 <HAL_SPI_TransmitReceive+0x6e>
 8005540:	2302      	movs	r3, #2
 8005542:	e16d      	b.n	8005820 <HAL_SPI_TransmitReceive+0x34a>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005552:	b2db      	uxtb	r3, r3
 8005554:	2b04      	cmp	r3, #4
 8005556:	d003      	beq.n	8005560 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2205      	movs	r2, #5
 800555c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	887a      	ldrh	r2, [r7, #2]
 8005570:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	887a      	ldrh	r2, [r7, #2]
 8005576:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	68ba      	ldr	r2, [r7, #8]
 800557c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	887a      	ldrh	r2, [r7, #2]
 8005582:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	887a      	ldrh	r2, [r7, #2]
 8005588:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2200      	movs	r2, #0
 8005594:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055a0:	2b40      	cmp	r3, #64	@ 0x40
 80055a2:	d007      	beq.n	80055b4 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80055b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055bc:	d17e      	bne.n	80056bc <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d002      	beq.n	80055cc <HAL_SPI_TransmitReceive+0xf6>
 80055c6:	8afb      	ldrh	r3, [r7, #22]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d16c      	bne.n	80056a6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055d0:	881a      	ldrh	r2, [r3, #0]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055dc:	1c9a      	adds	r2, r3, #2
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	3b01      	subs	r3, #1
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055f0:	e059      	b.n	80056a6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f003 0302 	and.w	r3, r3, #2
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d11b      	bne.n	8005638 <HAL_SPI_TransmitReceive+0x162>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005604:	b29b      	uxth	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d016      	beq.n	8005638 <HAL_SPI_TransmitReceive+0x162>
 800560a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560c:	2b01      	cmp	r3, #1
 800560e:	d113      	bne.n	8005638 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005614:	881a      	ldrh	r2, [r3, #0]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005620:	1c9a      	adds	r2, r3, #2
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800562a:	b29b      	uxth	r3, r3
 800562c:	3b01      	subs	r3, #1
 800562e:	b29a      	uxth	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005634:	2300      	movs	r3, #0
 8005636:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	f003 0301 	and.w	r3, r3, #1
 8005642:	2b01      	cmp	r3, #1
 8005644:	d119      	bne.n	800567a <HAL_SPI_TransmitReceive+0x1a4>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800564a:	b29b      	uxth	r3, r3
 800564c:	2b00      	cmp	r3, #0
 800564e:	d014      	beq.n	800567a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68da      	ldr	r2, [r3, #12]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800565a:	b292      	uxth	r2, r2
 800565c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005662:	1c9a      	adds	r2, r3, #2
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800566c:	b29b      	uxth	r3, r3
 800566e:	3b01      	subs	r3, #1
 8005670:	b29a      	uxth	r2, r3
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005676:	2301      	movs	r3, #1
 8005678:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800567a:	f7fc fdb7 	bl	80021ec <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	6a3b      	ldr	r3, [r7, #32]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005686:	429a      	cmp	r2, r3
 8005688:	d80d      	bhi.n	80056a6 <HAL_SPI_TransmitReceive+0x1d0>
 800568a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800568c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005690:	d009      	beq.n	80056a6 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2201      	movs	r2, #1
 8005696:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e0bc      	b.n	8005820 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d1a0      	bne.n	80055f2 <HAL_SPI_TransmitReceive+0x11c>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d19b      	bne.n	80055f2 <HAL_SPI_TransmitReceive+0x11c>
 80056ba:	e082      	b.n	80057c2 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d002      	beq.n	80056ca <HAL_SPI_TransmitReceive+0x1f4>
 80056c4:	8afb      	ldrh	r3, [r7, #22]
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d171      	bne.n	80057ae <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	330c      	adds	r3, #12
 80056d4:	7812      	ldrb	r2, [r2, #0]
 80056d6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056dc:	1c5a      	adds	r2, r3, #1
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	3b01      	subs	r3, #1
 80056ea:	b29a      	uxth	r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056f0:	e05d      	b.n	80057ae <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	f003 0302 	and.w	r3, r3, #2
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d11c      	bne.n	800573a <HAL_SPI_TransmitReceive+0x264>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005704:	b29b      	uxth	r3, r3
 8005706:	2b00      	cmp	r3, #0
 8005708:	d017      	beq.n	800573a <HAL_SPI_TransmitReceive+0x264>
 800570a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800570c:	2b01      	cmp	r3, #1
 800570e:	d114      	bne.n	800573a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	330c      	adds	r3, #12
 800571a:	7812      	ldrb	r2, [r2, #0]
 800571c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005722:	1c5a      	adds	r2, r3, #1
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800572c:	b29b      	uxth	r3, r3
 800572e:	3b01      	subs	r3, #1
 8005730:	b29a      	uxth	r2, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005736:	2300      	movs	r3, #0
 8005738:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f003 0301 	and.w	r3, r3, #1
 8005744:	2b01      	cmp	r3, #1
 8005746:	d119      	bne.n	800577c <HAL_SPI_TransmitReceive+0x2a6>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800574c:	b29b      	uxth	r3, r3
 800574e:	2b00      	cmp	r3, #0
 8005750:	d014      	beq.n	800577c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68da      	ldr	r2, [r3, #12]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800575c:	b2d2      	uxtb	r2, r2
 800575e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005764:	1c5a      	adds	r2, r3, #1
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800576e:	b29b      	uxth	r3, r3
 8005770:	3b01      	subs	r3, #1
 8005772:	b29a      	uxth	r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005778:	2301      	movs	r3, #1
 800577a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800577c:	f7fc fd36 	bl	80021ec <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	6a3b      	ldr	r3, [r7, #32]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005788:	429a      	cmp	r2, r3
 800578a:	d803      	bhi.n	8005794 <HAL_SPI_TransmitReceive+0x2be>
 800578c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800578e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005792:	d102      	bne.n	800579a <HAL_SPI_TransmitReceive+0x2c4>
 8005794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005796:	2b00      	cmp	r3, #0
 8005798:	d109      	bne.n	80057ae <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2201      	movs	r2, #1
 800579e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e038      	b.n	8005820 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d19c      	bne.n	80056f2 <HAL_SPI_TransmitReceive+0x21c>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057bc:	b29b      	uxth	r3, r3
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d197      	bne.n	80056f2 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057c2:	6a3a      	ldr	r2, [r7, #32]
 80057c4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80057c6:	68f8      	ldr	r0, [r7, #12]
 80057c8:	f000 f908 	bl	80059dc <SPI_EndRxTxTransaction>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d008      	beq.n	80057e4 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2220      	movs	r2, #32
 80057d6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e01d      	b.n	8005820 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d10a      	bne.n	8005802 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057ec:	2300      	movs	r3, #0
 80057ee:	613b      	str	r3, [r7, #16]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	613b      	str	r3, [r7, #16]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	613b      	str	r3, [r7, #16]
 8005800:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005816:	2b00      	cmp	r3, #0
 8005818:	d001      	beq.n	800581e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e000      	b.n	8005820 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800581e:	2300      	movs	r3, #0
  }
}
 8005820:	4618      	mov	r0, r3
 8005822:	3728      	adds	r7, #40	@ 0x28
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b088      	sub	sp, #32
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	603b      	str	r3, [r7, #0]
 8005834:	4613      	mov	r3, r2
 8005836:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005838:	f7fc fcd8 	bl	80021ec <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005840:	1a9b      	subs	r3, r3, r2
 8005842:	683a      	ldr	r2, [r7, #0]
 8005844:	4413      	add	r3, r2
 8005846:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005848:	f7fc fcd0 	bl	80021ec <HAL_GetTick>
 800584c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800584e:	4b39      	ldr	r3, [pc, #228]	@ (8005934 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	015b      	lsls	r3, r3, #5
 8005854:	0d1b      	lsrs	r3, r3, #20
 8005856:	69fa      	ldr	r2, [r7, #28]
 8005858:	fb02 f303 	mul.w	r3, r2, r3
 800585c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800585e:	e054      	b.n	800590a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005866:	d050      	beq.n	800590a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005868:	f7fc fcc0 	bl	80021ec <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	69fa      	ldr	r2, [r7, #28]
 8005874:	429a      	cmp	r2, r3
 8005876:	d902      	bls.n	800587e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d13d      	bne.n	80058fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	685a      	ldr	r2, [r3, #4]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800588c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005896:	d111      	bne.n	80058bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058a0:	d004      	beq.n	80058ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058aa:	d107      	bne.n	80058bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058c4:	d10f      	bne.n	80058e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80058d4:	601a      	str	r2, [r3, #0]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80058e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e017      	b.n	800592a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d101      	bne.n	8005904 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005900:	2300      	movs	r3, #0
 8005902:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	3b01      	subs	r3, #1
 8005908:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	689a      	ldr	r2, [r3, #8]
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	4013      	ands	r3, r2
 8005914:	68ba      	ldr	r2, [r7, #8]
 8005916:	429a      	cmp	r2, r3
 8005918:	bf0c      	ite	eq
 800591a:	2301      	moveq	r3, #1
 800591c:	2300      	movne	r3, #0
 800591e:	b2db      	uxtb	r3, r3
 8005920:	461a      	mov	r2, r3
 8005922:	79fb      	ldrb	r3, [r7, #7]
 8005924:	429a      	cmp	r2, r3
 8005926:	d19b      	bne.n	8005860 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3720      	adds	r7, #32
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	20000004 	.word	0x20000004

08005938 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af02      	add	r7, sp, #8
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800594c:	d111      	bne.n	8005972 <SPI_EndRxTransaction+0x3a>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005956:	d004      	beq.n	8005962 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005960:	d107      	bne.n	8005972 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005970:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800597a:	d117      	bne.n	80059ac <SPI_EndRxTransaction+0x74>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005984:	d112      	bne.n	80059ac <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	9300      	str	r3, [sp, #0]
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	2200      	movs	r2, #0
 800598e:	2101      	movs	r1, #1
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	f7ff ff49 	bl	8005828 <SPI_WaitFlagStateUntilTimeout>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d01a      	beq.n	80059d2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059a0:	f043 0220 	orr.w	r2, r3, #32
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e013      	b.n	80059d4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	9300      	str	r3, [sp, #0]
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	2200      	movs	r2, #0
 80059b4:	2180      	movs	r1, #128	@ 0x80
 80059b6:	68f8      	ldr	r0, [r7, #12]
 80059b8:	f7ff ff36 	bl	8005828 <SPI_WaitFlagStateUntilTimeout>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d007      	beq.n	80059d2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059c6:	f043 0220 	orr.w	r2, r3, #32
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e000      	b.n	80059d4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3710      	adds	r7, #16
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b086      	sub	sp, #24
 80059e0:	af02      	add	r7, sp, #8
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	9300      	str	r3, [sp, #0]
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	2201      	movs	r2, #1
 80059f0:	2102      	movs	r1, #2
 80059f2:	68f8      	ldr	r0, [r7, #12]
 80059f4:	f7ff ff18 	bl	8005828 <SPI_WaitFlagStateUntilTimeout>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d007      	beq.n	8005a0e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a02:	f043 0220 	orr.w	r2, r3, #32
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e013      	b.n	8005a36 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	9300      	str	r3, [sp, #0]
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	2200      	movs	r2, #0
 8005a16:	2180      	movs	r1, #128	@ 0x80
 8005a18:	68f8      	ldr	r0, [r7, #12]
 8005a1a:	f7ff ff05 	bl	8005828 <SPI_WaitFlagStateUntilTimeout>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d007      	beq.n	8005a34 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a28:	f043 0220 	orr.w	r2, r3, #32
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e000      	b.n	8005a36 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b082      	sub	sp, #8
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d101      	bne.n	8005a50 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e042      	b.n	8005ad6 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d106      	bne.n	8005a6a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f7fc fa5d 	bl	8001f24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2224      	movs	r2, #36	@ 0x24
 8005a6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68da      	ldr	r2, [r3, #12]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a80:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f972 	bl	8005d6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	691a      	ldr	r2, [r3, #16]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a96:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	695a      	ldr	r2, [r3, #20]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005aa6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68da      	ldr	r2, [r3, #12]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005ab6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2220      	movs	r2, #32
 8005ac2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2220      	movs	r2, #32
 8005aca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3708      	adds	r7, #8
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}

08005ade <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	b08a      	sub	sp, #40	@ 0x28
 8005ae2:	af02      	add	r7, sp, #8
 8005ae4:	60f8      	str	r0, [r7, #12]
 8005ae6:	60b9      	str	r1, [r7, #8]
 8005ae8:	603b      	str	r3, [r7, #0]
 8005aea:	4613      	mov	r3, r2
 8005aec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005aee:	2300      	movs	r3, #0
 8005af0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	2b20      	cmp	r3, #32
 8005afc:	d175      	bne.n	8005bea <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d002      	beq.n	8005b0a <HAL_UART_Transmit+0x2c>
 8005b04:	88fb      	ldrh	r3, [r7, #6]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d101      	bne.n	8005b0e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e06e      	b.n	8005bec <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2221      	movs	r2, #33	@ 0x21
 8005b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b1c:	f7fc fb66 	bl	80021ec <HAL_GetTick>
 8005b20:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	88fa      	ldrh	r2, [r7, #6]
 8005b26:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	88fa      	ldrh	r2, [r7, #6]
 8005b2c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b36:	d108      	bne.n	8005b4a <HAL_UART_Transmit+0x6c>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d104      	bne.n	8005b4a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005b40:	2300      	movs	r3, #0
 8005b42:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	61bb      	str	r3, [r7, #24]
 8005b48:	e003      	b.n	8005b52 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b52:	e02e      	b.n	8005bb2 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	9300      	str	r3, [sp, #0]
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	2180      	movs	r1, #128	@ 0x80
 8005b5e:	68f8      	ldr	r0, [r7, #12]
 8005b60:	f000 f848 	bl	8005bf4 <UART_WaitOnFlagUntilTimeout>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d005      	beq.n	8005b76 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2220      	movs	r2, #32
 8005b6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e03a      	b.n	8005bec <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d10b      	bne.n	8005b94 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	881b      	ldrh	r3, [r3, #0]
 8005b80:	461a      	mov	r2, r3
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b8a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	3302      	adds	r3, #2
 8005b90:	61bb      	str	r3, [r7, #24]
 8005b92:	e007      	b.n	8005ba4 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	781a      	ldrb	r2, [r3, #0]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	3b01      	subs	r3, #1
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1cb      	bne.n	8005b54 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	9300      	str	r3, [sp, #0]
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	2140      	movs	r1, #64	@ 0x40
 8005bc6:	68f8      	ldr	r0, [r7, #12]
 8005bc8:	f000 f814 	bl	8005bf4 <UART_WaitOnFlagUntilTimeout>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d005      	beq.n	8005bde <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2220      	movs	r2, #32
 8005bd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e006      	b.n	8005bec <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2220      	movs	r2, #32
 8005be2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005be6:	2300      	movs	r3, #0
 8005be8:	e000      	b.n	8005bec <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005bea:	2302      	movs	r3, #2
  }
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3720      	adds	r7, #32
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b086      	sub	sp, #24
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	603b      	str	r3, [r7, #0]
 8005c00:	4613      	mov	r3, r2
 8005c02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c04:	e03b      	b.n	8005c7e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c06:	6a3b      	ldr	r3, [r7, #32]
 8005c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0c:	d037      	beq.n	8005c7e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c0e:	f7fc faed 	bl	80021ec <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	6a3a      	ldr	r2, [r7, #32]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d302      	bcc.n	8005c24 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c1e:	6a3b      	ldr	r3, [r7, #32]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d101      	bne.n	8005c28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e03a      	b.n	8005c9e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	f003 0304 	and.w	r3, r3, #4
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d023      	beq.n	8005c7e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	2b80      	cmp	r3, #128	@ 0x80
 8005c3a:	d020      	beq.n	8005c7e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	2b40      	cmp	r3, #64	@ 0x40
 8005c40:	d01d      	beq.n	8005c7e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0308 	and.w	r3, r3, #8
 8005c4c:	2b08      	cmp	r3, #8
 8005c4e:	d116      	bne.n	8005c7e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005c50:	2300      	movs	r3, #0
 8005c52:	617b      	str	r3, [r7, #20]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	617b      	str	r3, [r7, #20]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	617b      	str	r3, [r7, #20]
 8005c64:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f000 f81d 	bl	8005ca6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2208      	movs	r2, #8
 8005c70:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e00f      	b.n	8005c9e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	4013      	ands	r3, r2
 8005c88:	68ba      	ldr	r2, [r7, #8]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	bf0c      	ite	eq
 8005c8e:	2301      	moveq	r3, #1
 8005c90:	2300      	movne	r3, #0
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	461a      	mov	r2, r3
 8005c96:	79fb      	ldrb	r3, [r7, #7]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d0b4      	beq.n	8005c06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3718      	adds	r7, #24
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	b095      	sub	sp, #84	@ 0x54
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	330c      	adds	r3, #12
 8005cb4:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cb8:	e853 3f00 	ldrex	r3, [r3]
 8005cbc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cc0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005cc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	330c      	adds	r3, #12
 8005ccc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005cce:	643a      	str	r2, [r7, #64]	@ 0x40
 8005cd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005cd4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005cd6:	e841 2300 	strex	r3, r2, [r1]
 8005cda:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1e5      	bne.n	8005cae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	3314      	adds	r3, #20
 8005ce8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cea:	6a3b      	ldr	r3, [r7, #32]
 8005cec:	e853 3f00 	ldrex	r3, [r3]
 8005cf0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	f023 0301 	bic.w	r3, r3, #1
 8005cf8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	3314      	adds	r3, #20
 8005d00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d04:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d0a:	e841 2300 	strex	r3, r2, [r1]
 8005d0e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1e5      	bne.n	8005ce2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d119      	bne.n	8005d52 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	330c      	adds	r3, #12
 8005d24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	e853 3f00 	ldrex	r3, [r3]
 8005d2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	f023 0310 	bic.w	r3, r3, #16
 8005d34:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	330c      	adds	r3, #12
 8005d3c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d3e:	61ba      	str	r2, [r7, #24]
 8005d40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d42:	6979      	ldr	r1, [r7, #20]
 8005d44:	69ba      	ldr	r2, [r7, #24]
 8005d46:	e841 2300 	strex	r3, r2, [r1]
 8005d4a:	613b      	str	r3, [r7, #16]
   return(result);
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1e5      	bne.n	8005d1e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2220      	movs	r2, #32
 8005d56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005d60:	bf00      	nop
 8005d62:	3754      	adds	r7, #84	@ 0x54
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bc80      	pop	{r7}
 8005d68:	4770      	bx	lr
	...

08005d6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b084      	sub	sp, #16
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	68da      	ldr	r2, [r3, #12]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	430a      	orrs	r2, r1
 8005d88:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	689a      	ldr	r2, [r3, #8]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	431a      	orrs	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	695b      	ldr	r3, [r3, #20]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005da6:	f023 030c 	bic.w	r3, r3, #12
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	6812      	ldr	r2, [r2, #0]
 8005dae:	68b9      	ldr	r1, [r7, #8]
 8005db0:	430b      	orrs	r3, r1
 8005db2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	699a      	ldr	r2, [r3, #24]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	430a      	orrs	r2, r1
 8005dc8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a2c      	ldr	r2, [pc, #176]	@ (8005e80 <UART_SetConfig+0x114>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d103      	bne.n	8005ddc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005dd4:	f7fe ff00 	bl	8004bd8 <HAL_RCC_GetPCLK2Freq>
 8005dd8:	60f8      	str	r0, [r7, #12]
 8005dda:	e002      	b.n	8005de2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005ddc:	f7fe fee8 	bl	8004bb0 <HAL_RCC_GetPCLK1Freq>
 8005de0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	4613      	mov	r3, r2
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	4413      	add	r3, r2
 8005dea:	009a      	lsls	r2, r3, #2
 8005dec:	441a      	add	r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005df8:	4a22      	ldr	r2, [pc, #136]	@ (8005e84 <UART_SetConfig+0x118>)
 8005dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8005dfe:	095b      	lsrs	r3, r3, #5
 8005e00:	0119      	lsls	r1, r3, #4
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	4613      	mov	r3, r2
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	4413      	add	r3, r2
 8005e0a:	009a      	lsls	r2, r3, #2
 8005e0c:	441a      	add	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e18:	4b1a      	ldr	r3, [pc, #104]	@ (8005e84 <UART_SetConfig+0x118>)
 8005e1a:	fba3 0302 	umull	r0, r3, r3, r2
 8005e1e:	095b      	lsrs	r3, r3, #5
 8005e20:	2064      	movs	r0, #100	@ 0x64
 8005e22:	fb00 f303 	mul.w	r3, r0, r3
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	011b      	lsls	r3, r3, #4
 8005e2a:	3332      	adds	r3, #50	@ 0x32
 8005e2c:	4a15      	ldr	r2, [pc, #84]	@ (8005e84 <UART_SetConfig+0x118>)
 8005e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e32:	095b      	lsrs	r3, r3, #5
 8005e34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e38:	4419      	add	r1, r3
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	4413      	add	r3, r2
 8005e42:	009a      	lsls	r2, r3, #2
 8005e44:	441a      	add	r2, r3
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e50:	4b0c      	ldr	r3, [pc, #48]	@ (8005e84 <UART_SetConfig+0x118>)
 8005e52:	fba3 0302 	umull	r0, r3, r3, r2
 8005e56:	095b      	lsrs	r3, r3, #5
 8005e58:	2064      	movs	r0, #100	@ 0x64
 8005e5a:	fb00 f303 	mul.w	r3, r0, r3
 8005e5e:	1ad3      	subs	r3, r2, r3
 8005e60:	011b      	lsls	r3, r3, #4
 8005e62:	3332      	adds	r3, #50	@ 0x32
 8005e64:	4a07      	ldr	r2, [pc, #28]	@ (8005e84 <UART_SetConfig+0x118>)
 8005e66:	fba2 2303 	umull	r2, r3, r2, r3
 8005e6a:	095b      	lsrs	r3, r3, #5
 8005e6c:	f003 020f 	and.w	r2, r3, #15
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	440a      	add	r2, r1
 8005e76:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005e78:	bf00      	nop
 8005e7a:	3710      	adds	r7, #16
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	40013800 	.word	0x40013800
 8005e84:	51eb851f 	.word	0x51eb851f

08005e88 <siprintf>:
 8005e88:	b40e      	push	{r1, r2, r3}
 8005e8a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005e8e:	b510      	push	{r4, lr}
 8005e90:	2400      	movs	r4, #0
 8005e92:	b09d      	sub	sp, #116	@ 0x74
 8005e94:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005e96:	9002      	str	r0, [sp, #8]
 8005e98:	9006      	str	r0, [sp, #24]
 8005e9a:	9107      	str	r1, [sp, #28]
 8005e9c:	9104      	str	r1, [sp, #16]
 8005e9e:	4809      	ldr	r0, [pc, #36]	@ (8005ec4 <siprintf+0x3c>)
 8005ea0:	4909      	ldr	r1, [pc, #36]	@ (8005ec8 <siprintf+0x40>)
 8005ea2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ea6:	9105      	str	r1, [sp, #20]
 8005ea8:	6800      	ldr	r0, [r0, #0]
 8005eaa:	a902      	add	r1, sp, #8
 8005eac:	9301      	str	r3, [sp, #4]
 8005eae:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005eb0:	f000 f9b8 	bl	8006224 <_svfiprintf_r>
 8005eb4:	9b02      	ldr	r3, [sp, #8]
 8005eb6:	701c      	strb	r4, [r3, #0]
 8005eb8:	b01d      	add	sp, #116	@ 0x74
 8005eba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ebe:	b003      	add	sp, #12
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	20000010 	.word	0x20000010
 8005ec8:	ffff0208 	.word	0xffff0208

08005ecc <memset>:
 8005ecc:	4603      	mov	r3, r0
 8005ece:	4402      	add	r2, r0
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d100      	bne.n	8005ed6 <memset+0xa>
 8005ed4:	4770      	bx	lr
 8005ed6:	f803 1b01 	strb.w	r1, [r3], #1
 8005eda:	e7f9      	b.n	8005ed0 <memset+0x4>

08005edc <strncmp>:
 8005edc:	b510      	push	{r4, lr}
 8005ede:	b16a      	cbz	r2, 8005efc <strncmp+0x20>
 8005ee0:	3901      	subs	r1, #1
 8005ee2:	1884      	adds	r4, r0, r2
 8005ee4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ee8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d103      	bne.n	8005ef8 <strncmp+0x1c>
 8005ef0:	42a0      	cmp	r0, r4
 8005ef2:	d001      	beq.n	8005ef8 <strncmp+0x1c>
 8005ef4:	2a00      	cmp	r2, #0
 8005ef6:	d1f5      	bne.n	8005ee4 <strncmp+0x8>
 8005ef8:	1ad0      	subs	r0, r2, r3
 8005efa:	bd10      	pop	{r4, pc}
 8005efc:	4610      	mov	r0, r2
 8005efe:	e7fc      	b.n	8005efa <strncmp+0x1e>

08005f00 <strncpy>:
 8005f00:	4603      	mov	r3, r0
 8005f02:	b510      	push	{r4, lr}
 8005f04:	3901      	subs	r1, #1
 8005f06:	b132      	cbz	r2, 8005f16 <strncpy+0x16>
 8005f08:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005f0c:	3a01      	subs	r2, #1
 8005f0e:	f803 4b01 	strb.w	r4, [r3], #1
 8005f12:	2c00      	cmp	r4, #0
 8005f14:	d1f7      	bne.n	8005f06 <strncpy+0x6>
 8005f16:	2100      	movs	r1, #0
 8005f18:	441a      	add	r2, r3
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d100      	bne.n	8005f20 <strncpy+0x20>
 8005f1e:	bd10      	pop	{r4, pc}
 8005f20:	f803 1b01 	strb.w	r1, [r3], #1
 8005f24:	e7f9      	b.n	8005f1a <strncpy+0x1a>
	...

08005f28 <__errno>:
 8005f28:	4b01      	ldr	r3, [pc, #4]	@ (8005f30 <__errno+0x8>)
 8005f2a:	6818      	ldr	r0, [r3, #0]
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	20000010 	.word	0x20000010

08005f34 <__libc_init_array>:
 8005f34:	b570      	push	{r4, r5, r6, lr}
 8005f36:	2600      	movs	r6, #0
 8005f38:	4d0c      	ldr	r5, [pc, #48]	@ (8005f6c <__libc_init_array+0x38>)
 8005f3a:	4c0d      	ldr	r4, [pc, #52]	@ (8005f70 <__libc_init_array+0x3c>)
 8005f3c:	1b64      	subs	r4, r4, r5
 8005f3e:	10a4      	asrs	r4, r4, #2
 8005f40:	42a6      	cmp	r6, r4
 8005f42:	d109      	bne.n	8005f58 <__libc_init_array+0x24>
 8005f44:	f000 fc76 	bl	8006834 <_init>
 8005f48:	2600      	movs	r6, #0
 8005f4a:	4d0a      	ldr	r5, [pc, #40]	@ (8005f74 <__libc_init_array+0x40>)
 8005f4c:	4c0a      	ldr	r4, [pc, #40]	@ (8005f78 <__libc_init_array+0x44>)
 8005f4e:	1b64      	subs	r4, r4, r5
 8005f50:	10a4      	asrs	r4, r4, #2
 8005f52:	42a6      	cmp	r6, r4
 8005f54:	d105      	bne.n	8005f62 <__libc_init_array+0x2e>
 8005f56:	bd70      	pop	{r4, r5, r6, pc}
 8005f58:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f5c:	4798      	blx	r3
 8005f5e:	3601      	adds	r6, #1
 8005f60:	e7ee      	b.n	8005f40 <__libc_init_array+0xc>
 8005f62:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f66:	4798      	blx	r3
 8005f68:	3601      	adds	r6, #1
 8005f6a:	e7f2      	b.n	8005f52 <__libc_init_array+0x1e>
 8005f6c:	08006ca0 	.word	0x08006ca0
 8005f70:	08006ca0 	.word	0x08006ca0
 8005f74:	08006ca0 	.word	0x08006ca0
 8005f78:	08006ca4 	.word	0x08006ca4

08005f7c <__retarget_lock_acquire_recursive>:
 8005f7c:	4770      	bx	lr

08005f7e <__retarget_lock_release_recursive>:
 8005f7e:	4770      	bx	lr

08005f80 <_free_r>:
 8005f80:	b538      	push	{r3, r4, r5, lr}
 8005f82:	4605      	mov	r5, r0
 8005f84:	2900      	cmp	r1, #0
 8005f86:	d040      	beq.n	800600a <_free_r+0x8a>
 8005f88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f8c:	1f0c      	subs	r4, r1, #4
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	bfb8      	it	lt
 8005f92:	18e4      	addlt	r4, r4, r3
 8005f94:	f000 f8de 	bl	8006154 <__malloc_lock>
 8005f98:	4a1c      	ldr	r2, [pc, #112]	@ (800600c <_free_r+0x8c>)
 8005f9a:	6813      	ldr	r3, [r2, #0]
 8005f9c:	b933      	cbnz	r3, 8005fac <_free_r+0x2c>
 8005f9e:	6063      	str	r3, [r4, #4]
 8005fa0:	6014      	str	r4, [r2, #0]
 8005fa2:	4628      	mov	r0, r5
 8005fa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fa8:	f000 b8da 	b.w	8006160 <__malloc_unlock>
 8005fac:	42a3      	cmp	r3, r4
 8005fae:	d908      	bls.n	8005fc2 <_free_r+0x42>
 8005fb0:	6820      	ldr	r0, [r4, #0]
 8005fb2:	1821      	adds	r1, r4, r0
 8005fb4:	428b      	cmp	r3, r1
 8005fb6:	bf01      	itttt	eq
 8005fb8:	6819      	ldreq	r1, [r3, #0]
 8005fba:	685b      	ldreq	r3, [r3, #4]
 8005fbc:	1809      	addeq	r1, r1, r0
 8005fbe:	6021      	streq	r1, [r4, #0]
 8005fc0:	e7ed      	b.n	8005f9e <_free_r+0x1e>
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	b10b      	cbz	r3, 8005fcc <_free_r+0x4c>
 8005fc8:	42a3      	cmp	r3, r4
 8005fca:	d9fa      	bls.n	8005fc2 <_free_r+0x42>
 8005fcc:	6811      	ldr	r1, [r2, #0]
 8005fce:	1850      	adds	r0, r2, r1
 8005fd0:	42a0      	cmp	r0, r4
 8005fd2:	d10b      	bne.n	8005fec <_free_r+0x6c>
 8005fd4:	6820      	ldr	r0, [r4, #0]
 8005fd6:	4401      	add	r1, r0
 8005fd8:	1850      	adds	r0, r2, r1
 8005fda:	4283      	cmp	r3, r0
 8005fdc:	6011      	str	r1, [r2, #0]
 8005fde:	d1e0      	bne.n	8005fa2 <_free_r+0x22>
 8005fe0:	6818      	ldr	r0, [r3, #0]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	4408      	add	r0, r1
 8005fe6:	6010      	str	r0, [r2, #0]
 8005fe8:	6053      	str	r3, [r2, #4]
 8005fea:	e7da      	b.n	8005fa2 <_free_r+0x22>
 8005fec:	d902      	bls.n	8005ff4 <_free_r+0x74>
 8005fee:	230c      	movs	r3, #12
 8005ff0:	602b      	str	r3, [r5, #0]
 8005ff2:	e7d6      	b.n	8005fa2 <_free_r+0x22>
 8005ff4:	6820      	ldr	r0, [r4, #0]
 8005ff6:	1821      	adds	r1, r4, r0
 8005ff8:	428b      	cmp	r3, r1
 8005ffa:	bf01      	itttt	eq
 8005ffc:	6819      	ldreq	r1, [r3, #0]
 8005ffe:	685b      	ldreq	r3, [r3, #4]
 8006000:	1809      	addeq	r1, r1, r0
 8006002:	6021      	streq	r1, [r4, #0]
 8006004:	6063      	str	r3, [r4, #4]
 8006006:	6054      	str	r4, [r2, #4]
 8006008:	e7cb      	b.n	8005fa2 <_free_r+0x22>
 800600a:	bd38      	pop	{r3, r4, r5, pc}
 800600c:	200003a4 	.word	0x200003a4

08006010 <sbrk_aligned>:
 8006010:	b570      	push	{r4, r5, r6, lr}
 8006012:	4e0f      	ldr	r6, [pc, #60]	@ (8006050 <sbrk_aligned+0x40>)
 8006014:	460c      	mov	r4, r1
 8006016:	6831      	ldr	r1, [r6, #0]
 8006018:	4605      	mov	r5, r0
 800601a:	b911      	cbnz	r1, 8006022 <sbrk_aligned+0x12>
 800601c:	f000 fba8 	bl	8006770 <_sbrk_r>
 8006020:	6030      	str	r0, [r6, #0]
 8006022:	4621      	mov	r1, r4
 8006024:	4628      	mov	r0, r5
 8006026:	f000 fba3 	bl	8006770 <_sbrk_r>
 800602a:	1c43      	adds	r3, r0, #1
 800602c:	d103      	bne.n	8006036 <sbrk_aligned+0x26>
 800602e:	f04f 34ff 	mov.w	r4, #4294967295
 8006032:	4620      	mov	r0, r4
 8006034:	bd70      	pop	{r4, r5, r6, pc}
 8006036:	1cc4      	adds	r4, r0, #3
 8006038:	f024 0403 	bic.w	r4, r4, #3
 800603c:	42a0      	cmp	r0, r4
 800603e:	d0f8      	beq.n	8006032 <sbrk_aligned+0x22>
 8006040:	1a21      	subs	r1, r4, r0
 8006042:	4628      	mov	r0, r5
 8006044:	f000 fb94 	bl	8006770 <_sbrk_r>
 8006048:	3001      	adds	r0, #1
 800604a:	d1f2      	bne.n	8006032 <sbrk_aligned+0x22>
 800604c:	e7ef      	b.n	800602e <sbrk_aligned+0x1e>
 800604e:	bf00      	nop
 8006050:	200003a0 	.word	0x200003a0

08006054 <_malloc_r>:
 8006054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006058:	1ccd      	adds	r5, r1, #3
 800605a:	f025 0503 	bic.w	r5, r5, #3
 800605e:	3508      	adds	r5, #8
 8006060:	2d0c      	cmp	r5, #12
 8006062:	bf38      	it	cc
 8006064:	250c      	movcc	r5, #12
 8006066:	2d00      	cmp	r5, #0
 8006068:	4606      	mov	r6, r0
 800606a:	db01      	blt.n	8006070 <_malloc_r+0x1c>
 800606c:	42a9      	cmp	r1, r5
 800606e:	d904      	bls.n	800607a <_malloc_r+0x26>
 8006070:	230c      	movs	r3, #12
 8006072:	6033      	str	r3, [r6, #0]
 8006074:	2000      	movs	r0, #0
 8006076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800607a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006150 <_malloc_r+0xfc>
 800607e:	f000 f869 	bl	8006154 <__malloc_lock>
 8006082:	f8d8 3000 	ldr.w	r3, [r8]
 8006086:	461c      	mov	r4, r3
 8006088:	bb44      	cbnz	r4, 80060dc <_malloc_r+0x88>
 800608a:	4629      	mov	r1, r5
 800608c:	4630      	mov	r0, r6
 800608e:	f7ff ffbf 	bl	8006010 <sbrk_aligned>
 8006092:	1c43      	adds	r3, r0, #1
 8006094:	4604      	mov	r4, r0
 8006096:	d158      	bne.n	800614a <_malloc_r+0xf6>
 8006098:	f8d8 4000 	ldr.w	r4, [r8]
 800609c:	4627      	mov	r7, r4
 800609e:	2f00      	cmp	r7, #0
 80060a0:	d143      	bne.n	800612a <_malloc_r+0xd6>
 80060a2:	2c00      	cmp	r4, #0
 80060a4:	d04b      	beq.n	800613e <_malloc_r+0xea>
 80060a6:	6823      	ldr	r3, [r4, #0]
 80060a8:	4639      	mov	r1, r7
 80060aa:	4630      	mov	r0, r6
 80060ac:	eb04 0903 	add.w	r9, r4, r3
 80060b0:	f000 fb5e 	bl	8006770 <_sbrk_r>
 80060b4:	4581      	cmp	r9, r0
 80060b6:	d142      	bne.n	800613e <_malloc_r+0xea>
 80060b8:	6821      	ldr	r1, [r4, #0]
 80060ba:	4630      	mov	r0, r6
 80060bc:	1a6d      	subs	r5, r5, r1
 80060be:	4629      	mov	r1, r5
 80060c0:	f7ff ffa6 	bl	8006010 <sbrk_aligned>
 80060c4:	3001      	adds	r0, #1
 80060c6:	d03a      	beq.n	800613e <_malloc_r+0xea>
 80060c8:	6823      	ldr	r3, [r4, #0]
 80060ca:	442b      	add	r3, r5
 80060cc:	6023      	str	r3, [r4, #0]
 80060ce:	f8d8 3000 	ldr.w	r3, [r8]
 80060d2:	685a      	ldr	r2, [r3, #4]
 80060d4:	bb62      	cbnz	r2, 8006130 <_malloc_r+0xdc>
 80060d6:	f8c8 7000 	str.w	r7, [r8]
 80060da:	e00f      	b.n	80060fc <_malloc_r+0xa8>
 80060dc:	6822      	ldr	r2, [r4, #0]
 80060de:	1b52      	subs	r2, r2, r5
 80060e0:	d420      	bmi.n	8006124 <_malloc_r+0xd0>
 80060e2:	2a0b      	cmp	r2, #11
 80060e4:	d917      	bls.n	8006116 <_malloc_r+0xc2>
 80060e6:	1961      	adds	r1, r4, r5
 80060e8:	42a3      	cmp	r3, r4
 80060ea:	6025      	str	r5, [r4, #0]
 80060ec:	bf18      	it	ne
 80060ee:	6059      	strne	r1, [r3, #4]
 80060f0:	6863      	ldr	r3, [r4, #4]
 80060f2:	bf08      	it	eq
 80060f4:	f8c8 1000 	streq.w	r1, [r8]
 80060f8:	5162      	str	r2, [r4, r5]
 80060fa:	604b      	str	r3, [r1, #4]
 80060fc:	4630      	mov	r0, r6
 80060fe:	f000 f82f 	bl	8006160 <__malloc_unlock>
 8006102:	f104 000b 	add.w	r0, r4, #11
 8006106:	1d23      	adds	r3, r4, #4
 8006108:	f020 0007 	bic.w	r0, r0, #7
 800610c:	1ac2      	subs	r2, r0, r3
 800610e:	bf1c      	itt	ne
 8006110:	1a1b      	subne	r3, r3, r0
 8006112:	50a3      	strne	r3, [r4, r2]
 8006114:	e7af      	b.n	8006076 <_malloc_r+0x22>
 8006116:	6862      	ldr	r2, [r4, #4]
 8006118:	42a3      	cmp	r3, r4
 800611a:	bf0c      	ite	eq
 800611c:	f8c8 2000 	streq.w	r2, [r8]
 8006120:	605a      	strne	r2, [r3, #4]
 8006122:	e7eb      	b.n	80060fc <_malloc_r+0xa8>
 8006124:	4623      	mov	r3, r4
 8006126:	6864      	ldr	r4, [r4, #4]
 8006128:	e7ae      	b.n	8006088 <_malloc_r+0x34>
 800612a:	463c      	mov	r4, r7
 800612c:	687f      	ldr	r7, [r7, #4]
 800612e:	e7b6      	b.n	800609e <_malloc_r+0x4a>
 8006130:	461a      	mov	r2, r3
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	42a3      	cmp	r3, r4
 8006136:	d1fb      	bne.n	8006130 <_malloc_r+0xdc>
 8006138:	2300      	movs	r3, #0
 800613a:	6053      	str	r3, [r2, #4]
 800613c:	e7de      	b.n	80060fc <_malloc_r+0xa8>
 800613e:	230c      	movs	r3, #12
 8006140:	4630      	mov	r0, r6
 8006142:	6033      	str	r3, [r6, #0]
 8006144:	f000 f80c 	bl	8006160 <__malloc_unlock>
 8006148:	e794      	b.n	8006074 <_malloc_r+0x20>
 800614a:	6005      	str	r5, [r0, #0]
 800614c:	e7d6      	b.n	80060fc <_malloc_r+0xa8>
 800614e:	bf00      	nop
 8006150:	200003a4 	.word	0x200003a4

08006154 <__malloc_lock>:
 8006154:	4801      	ldr	r0, [pc, #4]	@ (800615c <__malloc_lock+0x8>)
 8006156:	f7ff bf11 	b.w	8005f7c <__retarget_lock_acquire_recursive>
 800615a:	bf00      	nop
 800615c:	2000039c 	.word	0x2000039c

08006160 <__malloc_unlock>:
 8006160:	4801      	ldr	r0, [pc, #4]	@ (8006168 <__malloc_unlock+0x8>)
 8006162:	f7ff bf0c 	b.w	8005f7e <__retarget_lock_release_recursive>
 8006166:	bf00      	nop
 8006168:	2000039c 	.word	0x2000039c

0800616c <__ssputs_r>:
 800616c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006170:	461f      	mov	r7, r3
 8006172:	688e      	ldr	r6, [r1, #8]
 8006174:	4682      	mov	sl, r0
 8006176:	42be      	cmp	r6, r7
 8006178:	460c      	mov	r4, r1
 800617a:	4690      	mov	r8, r2
 800617c:	680b      	ldr	r3, [r1, #0]
 800617e:	d82d      	bhi.n	80061dc <__ssputs_r+0x70>
 8006180:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006184:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006188:	d026      	beq.n	80061d8 <__ssputs_r+0x6c>
 800618a:	6965      	ldr	r5, [r4, #20]
 800618c:	6909      	ldr	r1, [r1, #16]
 800618e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006192:	eba3 0901 	sub.w	r9, r3, r1
 8006196:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800619a:	1c7b      	adds	r3, r7, #1
 800619c:	444b      	add	r3, r9
 800619e:	106d      	asrs	r5, r5, #1
 80061a0:	429d      	cmp	r5, r3
 80061a2:	bf38      	it	cc
 80061a4:	461d      	movcc	r5, r3
 80061a6:	0553      	lsls	r3, r2, #21
 80061a8:	d527      	bpl.n	80061fa <__ssputs_r+0x8e>
 80061aa:	4629      	mov	r1, r5
 80061ac:	f7ff ff52 	bl	8006054 <_malloc_r>
 80061b0:	4606      	mov	r6, r0
 80061b2:	b360      	cbz	r0, 800620e <__ssputs_r+0xa2>
 80061b4:	464a      	mov	r2, r9
 80061b6:	6921      	ldr	r1, [r4, #16]
 80061b8:	f000 faf8 	bl	80067ac <memcpy>
 80061bc:	89a3      	ldrh	r3, [r4, #12]
 80061be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80061c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061c6:	81a3      	strh	r3, [r4, #12]
 80061c8:	6126      	str	r6, [r4, #16]
 80061ca:	444e      	add	r6, r9
 80061cc:	6026      	str	r6, [r4, #0]
 80061ce:	463e      	mov	r6, r7
 80061d0:	6165      	str	r5, [r4, #20]
 80061d2:	eba5 0509 	sub.w	r5, r5, r9
 80061d6:	60a5      	str	r5, [r4, #8]
 80061d8:	42be      	cmp	r6, r7
 80061da:	d900      	bls.n	80061de <__ssputs_r+0x72>
 80061dc:	463e      	mov	r6, r7
 80061de:	4632      	mov	r2, r6
 80061e0:	4641      	mov	r1, r8
 80061e2:	6820      	ldr	r0, [r4, #0]
 80061e4:	f000 faaa 	bl	800673c <memmove>
 80061e8:	2000      	movs	r0, #0
 80061ea:	68a3      	ldr	r3, [r4, #8]
 80061ec:	1b9b      	subs	r3, r3, r6
 80061ee:	60a3      	str	r3, [r4, #8]
 80061f0:	6823      	ldr	r3, [r4, #0]
 80061f2:	4433      	add	r3, r6
 80061f4:	6023      	str	r3, [r4, #0]
 80061f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061fa:	462a      	mov	r2, r5
 80061fc:	f000 fae4 	bl	80067c8 <_realloc_r>
 8006200:	4606      	mov	r6, r0
 8006202:	2800      	cmp	r0, #0
 8006204:	d1e0      	bne.n	80061c8 <__ssputs_r+0x5c>
 8006206:	4650      	mov	r0, sl
 8006208:	6921      	ldr	r1, [r4, #16]
 800620a:	f7ff feb9 	bl	8005f80 <_free_r>
 800620e:	230c      	movs	r3, #12
 8006210:	f8ca 3000 	str.w	r3, [sl]
 8006214:	89a3      	ldrh	r3, [r4, #12]
 8006216:	f04f 30ff 	mov.w	r0, #4294967295
 800621a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800621e:	81a3      	strh	r3, [r4, #12]
 8006220:	e7e9      	b.n	80061f6 <__ssputs_r+0x8a>
	...

08006224 <_svfiprintf_r>:
 8006224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006228:	4698      	mov	r8, r3
 800622a:	898b      	ldrh	r3, [r1, #12]
 800622c:	4607      	mov	r7, r0
 800622e:	061b      	lsls	r3, r3, #24
 8006230:	460d      	mov	r5, r1
 8006232:	4614      	mov	r4, r2
 8006234:	b09d      	sub	sp, #116	@ 0x74
 8006236:	d510      	bpl.n	800625a <_svfiprintf_r+0x36>
 8006238:	690b      	ldr	r3, [r1, #16]
 800623a:	b973      	cbnz	r3, 800625a <_svfiprintf_r+0x36>
 800623c:	2140      	movs	r1, #64	@ 0x40
 800623e:	f7ff ff09 	bl	8006054 <_malloc_r>
 8006242:	6028      	str	r0, [r5, #0]
 8006244:	6128      	str	r0, [r5, #16]
 8006246:	b930      	cbnz	r0, 8006256 <_svfiprintf_r+0x32>
 8006248:	230c      	movs	r3, #12
 800624a:	603b      	str	r3, [r7, #0]
 800624c:	f04f 30ff 	mov.w	r0, #4294967295
 8006250:	b01d      	add	sp, #116	@ 0x74
 8006252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006256:	2340      	movs	r3, #64	@ 0x40
 8006258:	616b      	str	r3, [r5, #20]
 800625a:	2300      	movs	r3, #0
 800625c:	9309      	str	r3, [sp, #36]	@ 0x24
 800625e:	2320      	movs	r3, #32
 8006260:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006264:	2330      	movs	r3, #48	@ 0x30
 8006266:	f04f 0901 	mov.w	r9, #1
 800626a:	f8cd 800c 	str.w	r8, [sp, #12]
 800626e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006408 <_svfiprintf_r+0x1e4>
 8006272:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006276:	4623      	mov	r3, r4
 8006278:	469a      	mov	sl, r3
 800627a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800627e:	b10a      	cbz	r2, 8006284 <_svfiprintf_r+0x60>
 8006280:	2a25      	cmp	r2, #37	@ 0x25
 8006282:	d1f9      	bne.n	8006278 <_svfiprintf_r+0x54>
 8006284:	ebba 0b04 	subs.w	fp, sl, r4
 8006288:	d00b      	beq.n	80062a2 <_svfiprintf_r+0x7e>
 800628a:	465b      	mov	r3, fp
 800628c:	4622      	mov	r2, r4
 800628e:	4629      	mov	r1, r5
 8006290:	4638      	mov	r0, r7
 8006292:	f7ff ff6b 	bl	800616c <__ssputs_r>
 8006296:	3001      	adds	r0, #1
 8006298:	f000 80a7 	beq.w	80063ea <_svfiprintf_r+0x1c6>
 800629c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800629e:	445a      	add	r2, fp
 80062a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80062a2:	f89a 3000 	ldrb.w	r3, [sl]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	f000 809f 	beq.w	80063ea <_svfiprintf_r+0x1c6>
 80062ac:	2300      	movs	r3, #0
 80062ae:	f04f 32ff 	mov.w	r2, #4294967295
 80062b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062b6:	f10a 0a01 	add.w	sl, sl, #1
 80062ba:	9304      	str	r3, [sp, #16]
 80062bc:	9307      	str	r3, [sp, #28]
 80062be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80062c2:	931a      	str	r3, [sp, #104]	@ 0x68
 80062c4:	4654      	mov	r4, sl
 80062c6:	2205      	movs	r2, #5
 80062c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062cc:	484e      	ldr	r0, [pc, #312]	@ (8006408 <_svfiprintf_r+0x1e4>)
 80062ce:	f000 fa5f 	bl	8006790 <memchr>
 80062d2:	9a04      	ldr	r2, [sp, #16]
 80062d4:	b9d8      	cbnz	r0, 800630e <_svfiprintf_r+0xea>
 80062d6:	06d0      	lsls	r0, r2, #27
 80062d8:	bf44      	itt	mi
 80062da:	2320      	movmi	r3, #32
 80062dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80062e0:	0711      	lsls	r1, r2, #28
 80062e2:	bf44      	itt	mi
 80062e4:	232b      	movmi	r3, #43	@ 0x2b
 80062e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80062ea:	f89a 3000 	ldrb.w	r3, [sl]
 80062ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80062f0:	d015      	beq.n	800631e <_svfiprintf_r+0xfa>
 80062f2:	4654      	mov	r4, sl
 80062f4:	2000      	movs	r0, #0
 80062f6:	f04f 0c0a 	mov.w	ip, #10
 80062fa:	9a07      	ldr	r2, [sp, #28]
 80062fc:	4621      	mov	r1, r4
 80062fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006302:	3b30      	subs	r3, #48	@ 0x30
 8006304:	2b09      	cmp	r3, #9
 8006306:	d94b      	bls.n	80063a0 <_svfiprintf_r+0x17c>
 8006308:	b1b0      	cbz	r0, 8006338 <_svfiprintf_r+0x114>
 800630a:	9207      	str	r2, [sp, #28]
 800630c:	e014      	b.n	8006338 <_svfiprintf_r+0x114>
 800630e:	eba0 0308 	sub.w	r3, r0, r8
 8006312:	fa09 f303 	lsl.w	r3, r9, r3
 8006316:	4313      	orrs	r3, r2
 8006318:	46a2      	mov	sl, r4
 800631a:	9304      	str	r3, [sp, #16]
 800631c:	e7d2      	b.n	80062c4 <_svfiprintf_r+0xa0>
 800631e:	9b03      	ldr	r3, [sp, #12]
 8006320:	1d19      	adds	r1, r3, #4
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	9103      	str	r1, [sp, #12]
 8006326:	2b00      	cmp	r3, #0
 8006328:	bfbb      	ittet	lt
 800632a:	425b      	neglt	r3, r3
 800632c:	f042 0202 	orrlt.w	r2, r2, #2
 8006330:	9307      	strge	r3, [sp, #28]
 8006332:	9307      	strlt	r3, [sp, #28]
 8006334:	bfb8      	it	lt
 8006336:	9204      	strlt	r2, [sp, #16]
 8006338:	7823      	ldrb	r3, [r4, #0]
 800633a:	2b2e      	cmp	r3, #46	@ 0x2e
 800633c:	d10a      	bne.n	8006354 <_svfiprintf_r+0x130>
 800633e:	7863      	ldrb	r3, [r4, #1]
 8006340:	2b2a      	cmp	r3, #42	@ 0x2a
 8006342:	d132      	bne.n	80063aa <_svfiprintf_r+0x186>
 8006344:	9b03      	ldr	r3, [sp, #12]
 8006346:	3402      	adds	r4, #2
 8006348:	1d1a      	adds	r2, r3, #4
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	9203      	str	r2, [sp, #12]
 800634e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006352:	9305      	str	r3, [sp, #20]
 8006354:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800640c <_svfiprintf_r+0x1e8>
 8006358:	2203      	movs	r2, #3
 800635a:	4650      	mov	r0, sl
 800635c:	7821      	ldrb	r1, [r4, #0]
 800635e:	f000 fa17 	bl	8006790 <memchr>
 8006362:	b138      	cbz	r0, 8006374 <_svfiprintf_r+0x150>
 8006364:	2240      	movs	r2, #64	@ 0x40
 8006366:	9b04      	ldr	r3, [sp, #16]
 8006368:	eba0 000a 	sub.w	r0, r0, sl
 800636c:	4082      	lsls	r2, r0
 800636e:	4313      	orrs	r3, r2
 8006370:	3401      	adds	r4, #1
 8006372:	9304      	str	r3, [sp, #16]
 8006374:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006378:	2206      	movs	r2, #6
 800637a:	4825      	ldr	r0, [pc, #148]	@ (8006410 <_svfiprintf_r+0x1ec>)
 800637c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006380:	f000 fa06 	bl	8006790 <memchr>
 8006384:	2800      	cmp	r0, #0
 8006386:	d036      	beq.n	80063f6 <_svfiprintf_r+0x1d2>
 8006388:	4b22      	ldr	r3, [pc, #136]	@ (8006414 <_svfiprintf_r+0x1f0>)
 800638a:	bb1b      	cbnz	r3, 80063d4 <_svfiprintf_r+0x1b0>
 800638c:	9b03      	ldr	r3, [sp, #12]
 800638e:	3307      	adds	r3, #7
 8006390:	f023 0307 	bic.w	r3, r3, #7
 8006394:	3308      	adds	r3, #8
 8006396:	9303      	str	r3, [sp, #12]
 8006398:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800639a:	4433      	add	r3, r6
 800639c:	9309      	str	r3, [sp, #36]	@ 0x24
 800639e:	e76a      	b.n	8006276 <_svfiprintf_r+0x52>
 80063a0:	460c      	mov	r4, r1
 80063a2:	2001      	movs	r0, #1
 80063a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80063a8:	e7a8      	b.n	80062fc <_svfiprintf_r+0xd8>
 80063aa:	2300      	movs	r3, #0
 80063ac:	f04f 0c0a 	mov.w	ip, #10
 80063b0:	4619      	mov	r1, r3
 80063b2:	3401      	adds	r4, #1
 80063b4:	9305      	str	r3, [sp, #20]
 80063b6:	4620      	mov	r0, r4
 80063b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063bc:	3a30      	subs	r2, #48	@ 0x30
 80063be:	2a09      	cmp	r2, #9
 80063c0:	d903      	bls.n	80063ca <_svfiprintf_r+0x1a6>
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d0c6      	beq.n	8006354 <_svfiprintf_r+0x130>
 80063c6:	9105      	str	r1, [sp, #20]
 80063c8:	e7c4      	b.n	8006354 <_svfiprintf_r+0x130>
 80063ca:	4604      	mov	r4, r0
 80063cc:	2301      	movs	r3, #1
 80063ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80063d2:	e7f0      	b.n	80063b6 <_svfiprintf_r+0x192>
 80063d4:	ab03      	add	r3, sp, #12
 80063d6:	9300      	str	r3, [sp, #0]
 80063d8:	462a      	mov	r2, r5
 80063da:	4638      	mov	r0, r7
 80063dc:	4b0e      	ldr	r3, [pc, #56]	@ (8006418 <_svfiprintf_r+0x1f4>)
 80063de:	a904      	add	r1, sp, #16
 80063e0:	f3af 8000 	nop.w
 80063e4:	1c42      	adds	r2, r0, #1
 80063e6:	4606      	mov	r6, r0
 80063e8:	d1d6      	bne.n	8006398 <_svfiprintf_r+0x174>
 80063ea:	89ab      	ldrh	r3, [r5, #12]
 80063ec:	065b      	lsls	r3, r3, #25
 80063ee:	f53f af2d 	bmi.w	800624c <_svfiprintf_r+0x28>
 80063f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80063f4:	e72c      	b.n	8006250 <_svfiprintf_r+0x2c>
 80063f6:	ab03      	add	r3, sp, #12
 80063f8:	9300      	str	r3, [sp, #0]
 80063fa:	462a      	mov	r2, r5
 80063fc:	4638      	mov	r0, r7
 80063fe:	4b06      	ldr	r3, [pc, #24]	@ (8006418 <_svfiprintf_r+0x1f4>)
 8006400:	a904      	add	r1, sp, #16
 8006402:	f000 f87d 	bl	8006500 <_printf_i>
 8006406:	e7ed      	b.n	80063e4 <_svfiprintf_r+0x1c0>
 8006408:	08006c62 	.word	0x08006c62
 800640c:	08006c68 	.word	0x08006c68
 8006410:	08006c6c 	.word	0x08006c6c
 8006414:	00000000 	.word	0x00000000
 8006418:	0800616d 	.word	0x0800616d

0800641c <_printf_common>:
 800641c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006420:	4616      	mov	r6, r2
 8006422:	4698      	mov	r8, r3
 8006424:	688a      	ldr	r2, [r1, #8]
 8006426:	690b      	ldr	r3, [r1, #16]
 8006428:	4607      	mov	r7, r0
 800642a:	4293      	cmp	r3, r2
 800642c:	bfb8      	it	lt
 800642e:	4613      	movlt	r3, r2
 8006430:	6033      	str	r3, [r6, #0]
 8006432:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006436:	460c      	mov	r4, r1
 8006438:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800643c:	b10a      	cbz	r2, 8006442 <_printf_common+0x26>
 800643e:	3301      	adds	r3, #1
 8006440:	6033      	str	r3, [r6, #0]
 8006442:	6823      	ldr	r3, [r4, #0]
 8006444:	0699      	lsls	r1, r3, #26
 8006446:	bf42      	ittt	mi
 8006448:	6833      	ldrmi	r3, [r6, #0]
 800644a:	3302      	addmi	r3, #2
 800644c:	6033      	strmi	r3, [r6, #0]
 800644e:	6825      	ldr	r5, [r4, #0]
 8006450:	f015 0506 	ands.w	r5, r5, #6
 8006454:	d106      	bne.n	8006464 <_printf_common+0x48>
 8006456:	f104 0a19 	add.w	sl, r4, #25
 800645a:	68e3      	ldr	r3, [r4, #12]
 800645c:	6832      	ldr	r2, [r6, #0]
 800645e:	1a9b      	subs	r3, r3, r2
 8006460:	42ab      	cmp	r3, r5
 8006462:	dc2b      	bgt.n	80064bc <_printf_common+0xa0>
 8006464:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006468:	6822      	ldr	r2, [r4, #0]
 800646a:	3b00      	subs	r3, #0
 800646c:	bf18      	it	ne
 800646e:	2301      	movne	r3, #1
 8006470:	0692      	lsls	r2, r2, #26
 8006472:	d430      	bmi.n	80064d6 <_printf_common+0xba>
 8006474:	4641      	mov	r1, r8
 8006476:	4638      	mov	r0, r7
 8006478:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800647c:	47c8      	blx	r9
 800647e:	3001      	adds	r0, #1
 8006480:	d023      	beq.n	80064ca <_printf_common+0xae>
 8006482:	6823      	ldr	r3, [r4, #0]
 8006484:	6922      	ldr	r2, [r4, #16]
 8006486:	f003 0306 	and.w	r3, r3, #6
 800648a:	2b04      	cmp	r3, #4
 800648c:	bf14      	ite	ne
 800648e:	2500      	movne	r5, #0
 8006490:	6833      	ldreq	r3, [r6, #0]
 8006492:	f04f 0600 	mov.w	r6, #0
 8006496:	bf08      	it	eq
 8006498:	68e5      	ldreq	r5, [r4, #12]
 800649a:	f104 041a 	add.w	r4, r4, #26
 800649e:	bf08      	it	eq
 80064a0:	1aed      	subeq	r5, r5, r3
 80064a2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80064a6:	bf08      	it	eq
 80064a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064ac:	4293      	cmp	r3, r2
 80064ae:	bfc4      	itt	gt
 80064b0:	1a9b      	subgt	r3, r3, r2
 80064b2:	18ed      	addgt	r5, r5, r3
 80064b4:	42b5      	cmp	r5, r6
 80064b6:	d11a      	bne.n	80064ee <_printf_common+0xd2>
 80064b8:	2000      	movs	r0, #0
 80064ba:	e008      	b.n	80064ce <_printf_common+0xb2>
 80064bc:	2301      	movs	r3, #1
 80064be:	4652      	mov	r2, sl
 80064c0:	4641      	mov	r1, r8
 80064c2:	4638      	mov	r0, r7
 80064c4:	47c8      	blx	r9
 80064c6:	3001      	adds	r0, #1
 80064c8:	d103      	bne.n	80064d2 <_printf_common+0xb6>
 80064ca:	f04f 30ff 	mov.w	r0, #4294967295
 80064ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064d2:	3501      	adds	r5, #1
 80064d4:	e7c1      	b.n	800645a <_printf_common+0x3e>
 80064d6:	2030      	movs	r0, #48	@ 0x30
 80064d8:	18e1      	adds	r1, r4, r3
 80064da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80064de:	1c5a      	adds	r2, r3, #1
 80064e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80064e4:	4422      	add	r2, r4
 80064e6:	3302      	adds	r3, #2
 80064e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80064ec:	e7c2      	b.n	8006474 <_printf_common+0x58>
 80064ee:	2301      	movs	r3, #1
 80064f0:	4622      	mov	r2, r4
 80064f2:	4641      	mov	r1, r8
 80064f4:	4638      	mov	r0, r7
 80064f6:	47c8      	blx	r9
 80064f8:	3001      	adds	r0, #1
 80064fa:	d0e6      	beq.n	80064ca <_printf_common+0xae>
 80064fc:	3601      	adds	r6, #1
 80064fe:	e7d9      	b.n	80064b4 <_printf_common+0x98>

08006500 <_printf_i>:
 8006500:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006504:	7e0f      	ldrb	r7, [r1, #24]
 8006506:	4691      	mov	r9, r2
 8006508:	2f78      	cmp	r7, #120	@ 0x78
 800650a:	4680      	mov	r8, r0
 800650c:	460c      	mov	r4, r1
 800650e:	469a      	mov	sl, r3
 8006510:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006512:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006516:	d807      	bhi.n	8006528 <_printf_i+0x28>
 8006518:	2f62      	cmp	r7, #98	@ 0x62
 800651a:	d80a      	bhi.n	8006532 <_printf_i+0x32>
 800651c:	2f00      	cmp	r7, #0
 800651e:	f000 80d1 	beq.w	80066c4 <_printf_i+0x1c4>
 8006522:	2f58      	cmp	r7, #88	@ 0x58
 8006524:	f000 80b8 	beq.w	8006698 <_printf_i+0x198>
 8006528:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800652c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006530:	e03a      	b.n	80065a8 <_printf_i+0xa8>
 8006532:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006536:	2b15      	cmp	r3, #21
 8006538:	d8f6      	bhi.n	8006528 <_printf_i+0x28>
 800653a:	a101      	add	r1, pc, #4	@ (adr r1, 8006540 <_printf_i+0x40>)
 800653c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006540:	08006599 	.word	0x08006599
 8006544:	080065ad 	.word	0x080065ad
 8006548:	08006529 	.word	0x08006529
 800654c:	08006529 	.word	0x08006529
 8006550:	08006529 	.word	0x08006529
 8006554:	08006529 	.word	0x08006529
 8006558:	080065ad 	.word	0x080065ad
 800655c:	08006529 	.word	0x08006529
 8006560:	08006529 	.word	0x08006529
 8006564:	08006529 	.word	0x08006529
 8006568:	08006529 	.word	0x08006529
 800656c:	080066ab 	.word	0x080066ab
 8006570:	080065d7 	.word	0x080065d7
 8006574:	08006665 	.word	0x08006665
 8006578:	08006529 	.word	0x08006529
 800657c:	08006529 	.word	0x08006529
 8006580:	080066cd 	.word	0x080066cd
 8006584:	08006529 	.word	0x08006529
 8006588:	080065d7 	.word	0x080065d7
 800658c:	08006529 	.word	0x08006529
 8006590:	08006529 	.word	0x08006529
 8006594:	0800666d 	.word	0x0800666d
 8006598:	6833      	ldr	r3, [r6, #0]
 800659a:	1d1a      	adds	r2, r3, #4
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	6032      	str	r2, [r6, #0]
 80065a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80065a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80065a8:	2301      	movs	r3, #1
 80065aa:	e09c      	b.n	80066e6 <_printf_i+0x1e6>
 80065ac:	6833      	ldr	r3, [r6, #0]
 80065ae:	6820      	ldr	r0, [r4, #0]
 80065b0:	1d19      	adds	r1, r3, #4
 80065b2:	6031      	str	r1, [r6, #0]
 80065b4:	0606      	lsls	r6, r0, #24
 80065b6:	d501      	bpl.n	80065bc <_printf_i+0xbc>
 80065b8:	681d      	ldr	r5, [r3, #0]
 80065ba:	e003      	b.n	80065c4 <_printf_i+0xc4>
 80065bc:	0645      	lsls	r5, r0, #25
 80065be:	d5fb      	bpl.n	80065b8 <_printf_i+0xb8>
 80065c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80065c4:	2d00      	cmp	r5, #0
 80065c6:	da03      	bge.n	80065d0 <_printf_i+0xd0>
 80065c8:	232d      	movs	r3, #45	@ 0x2d
 80065ca:	426d      	negs	r5, r5
 80065cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065d0:	230a      	movs	r3, #10
 80065d2:	4858      	ldr	r0, [pc, #352]	@ (8006734 <_printf_i+0x234>)
 80065d4:	e011      	b.n	80065fa <_printf_i+0xfa>
 80065d6:	6821      	ldr	r1, [r4, #0]
 80065d8:	6833      	ldr	r3, [r6, #0]
 80065da:	0608      	lsls	r0, r1, #24
 80065dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80065e0:	d402      	bmi.n	80065e8 <_printf_i+0xe8>
 80065e2:	0649      	lsls	r1, r1, #25
 80065e4:	bf48      	it	mi
 80065e6:	b2ad      	uxthmi	r5, r5
 80065e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80065ea:	6033      	str	r3, [r6, #0]
 80065ec:	bf14      	ite	ne
 80065ee:	230a      	movne	r3, #10
 80065f0:	2308      	moveq	r3, #8
 80065f2:	4850      	ldr	r0, [pc, #320]	@ (8006734 <_printf_i+0x234>)
 80065f4:	2100      	movs	r1, #0
 80065f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80065fa:	6866      	ldr	r6, [r4, #4]
 80065fc:	2e00      	cmp	r6, #0
 80065fe:	60a6      	str	r6, [r4, #8]
 8006600:	db05      	blt.n	800660e <_printf_i+0x10e>
 8006602:	6821      	ldr	r1, [r4, #0]
 8006604:	432e      	orrs	r6, r5
 8006606:	f021 0104 	bic.w	r1, r1, #4
 800660a:	6021      	str	r1, [r4, #0]
 800660c:	d04b      	beq.n	80066a6 <_printf_i+0x1a6>
 800660e:	4616      	mov	r6, r2
 8006610:	fbb5 f1f3 	udiv	r1, r5, r3
 8006614:	fb03 5711 	mls	r7, r3, r1, r5
 8006618:	5dc7      	ldrb	r7, [r0, r7]
 800661a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800661e:	462f      	mov	r7, r5
 8006620:	42bb      	cmp	r3, r7
 8006622:	460d      	mov	r5, r1
 8006624:	d9f4      	bls.n	8006610 <_printf_i+0x110>
 8006626:	2b08      	cmp	r3, #8
 8006628:	d10b      	bne.n	8006642 <_printf_i+0x142>
 800662a:	6823      	ldr	r3, [r4, #0]
 800662c:	07df      	lsls	r7, r3, #31
 800662e:	d508      	bpl.n	8006642 <_printf_i+0x142>
 8006630:	6923      	ldr	r3, [r4, #16]
 8006632:	6861      	ldr	r1, [r4, #4]
 8006634:	4299      	cmp	r1, r3
 8006636:	bfde      	ittt	le
 8006638:	2330      	movle	r3, #48	@ 0x30
 800663a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800663e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006642:	1b92      	subs	r2, r2, r6
 8006644:	6122      	str	r2, [r4, #16]
 8006646:	464b      	mov	r3, r9
 8006648:	4621      	mov	r1, r4
 800664a:	4640      	mov	r0, r8
 800664c:	f8cd a000 	str.w	sl, [sp]
 8006650:	aa03      	add	r2, sp, #12
 8006652:	f7ff fee3 	bl	800641c <_printf_common>
 8006656:	3001      	adds	r0, #1
 8006658:	d14a      	bne.n	80066f0 <_printf_i+0x1f0>
 800665a:	f04f 30ff 	mov.w	r0, #4294967295
 800665e:	b004      	add	sp, #16
 8006660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006664:	6823      	ldr	r3, [r4, #0]
 8006666:	f043 0320 	orr.w	r3, r3, #32
 800666a:	6023      	str	r3, [r4, #0]
 800666c:	2778      	movs	r7, #120	@ 0x78
 800666e:	4832      	ldr	r0, [pc, #200]	@ (8006738 <_printf_i+0x238>)
 8006670:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006674:	6823      	ldr	r3, [r4, #0]
 8006676:	6831      	ldr	r1, [r6, #0]
 8006678:	061f      	lsls	r7, r3, #24
 800667a:	f851 5b04 	ldr.w	r5, [r1], #4
 800667e:	d402      	bmi.n	8006686 <_printf_i+0x186>
 8006680:	065f      	lsls	r7, r3, #25
 8006682:	bf48      	it	mi
 8006684:	b2ad      	uxthmi	r5, r5
 8006686:	6031      	str	r1, [r6, #0]
 8006688:	07d9      	lsls	r1, r3, #31
 800668a:	bf44      	itt	mi
 800668c:	f043 0320 	orrmi.w	r3, r3, #32
 8006690:	6023      	strmi	r3, [r4, #0]
 8006692:	b11d      	cbz	r5, 800669c <_printf_i+0x19c>
 8006694:	2310      	movs	r3, #16
 8006696:	e7ad      	b.n	80065f4 <_printf_i+0xf4>
 8006698:	4826      	ldr	r0, [pc, #152]	@ (8006734 <_printf_i+0x234>)
 800669a:	e7e9      	b.n	8006670 <_printf_i+0x170>
 800669c:	6823      	ldr	r3, [r4, #0]
 800669e:	f023 0320 	bic.w	r3, r3, #32
 80066a2:	6023      	str	r3, [r4, #0]
 80066a4:	e7f6      	b.n	8006694 <_printf_i+0x194>
 80066a6:	4616      	mov	r6, r2
 80066a8:	e7bd      	b.n	8006626 <_printf_i+0x126>
 80066aa:	6833      	ldr	r3, [r6, #0]
 80066ac:	6825      	ldr	r5, [r4, #0]
 80066ae:	1d18      	adds	r0, r3, #4
 80066b0:	6961      	ldr	r1, [r4, #20]
 80066b2:	6030      	str	r0, [r6, #0]
 80066b4:	062e      	lsls	r6, r5, #24
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	d501      	bpl.n	80066be <_printf_i+0x1be>
 80066ba:	6019      	str	r1, [r3, #0]
 80066bc:	e002      	b.n	80066c4 <_printf_i+0x1c4>
 80066be:	0668      	lsls	r0, r5, #25
 80066c0:	d5fb      	bpl.n	80066ba <_printf_i+0x1ba>
 80066c2:	8019      	strh	r1, [r3, #0]
 80066c4:	2300      	movs	r3, #0
 80066c6:	4616      	mov	r6, r2
 80066c8:	6123      	str	r3, [r4, #16]
 80066ca:	e7bc      	b.n	8006646 <_printf_i+0x146>
 80066cc:	6833      	ldr	r3, [r6, #0]
 80066ce:	2100      	movs	r1, #0
 80066d0:	1d1a      	adds	r2, r3, #4
 80066d2:	6032      	str	r2, [r6, #0]
 80066d4:	681e      	ldr	r6, [r3, #0]
 80066d6:	6862      	ldr	r2, [r4, #4]
 80066d8:	4630      	mov	r0, r6
 80066da:	f000 f859 	bl	8006790 <memchr>
 80066de:	b108      	cbz	r0, 80066e4 <_printf_i+0x1e4>
 80066e0:	1b80      	subs	r0, r0, r6
 80066e2:	6060      	str	r0, [r4, #4]
 80066e4:	6863      	ldr	r3, [r4, #4]
 80066e6:	6123      	str	r3, [r4, #16]
 80066e8:	2300      	movs	r3, #0
 80066ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066ee:	e7aa      	b.n	8006646 <_printf_i+0x146>
 80066f0:	4632      	mov	r2, r6
 80066f2:	4649      	mov	r1, r9
 80066f4:	4640      	mov	r0, r8
 80066f6:	6923      	ldr	r3, [r4, #16]
 80066f8:	47d0      	blx	sl
 80066fa:	3001      	adds	r0, #1
 80066fc:	d0ad      	beq.n	800665a <_printf_i+0x15a>
 80066fe:	6823      	ldr	r3, [r4, #0]
 8006700:	079b      	lsls	r3, r3, #30
 8006702:	d413      	bmi.n	800672c <_printf_i+0x22c>
 8006704:	68e0      	ldr	r0, [r4, #12]
 8006706:	9b03      	ldr	r3, [sp, #12]
 8006708:	4298      	cmp	r0, r3
 800670a:	bfb8      	it	lt
 800670c:	4618      	movlt	r0, r3
 800670e:	e7a6      	b.n	800665e <_printf_i+0x15e>
 8006710:	2301      	movs	r3, #1
 8006712:	4632      	mov	r2, r6
 8006714:	4649      	mov	r1, r9
 8006716:	4640      	mov	r0, r8
 8006718:	47d0      	blx	sl
 800671a:	3001      	adds	r0, #1
 800671c:	d09d      	beq.n	800665a <_printf_i+0x15a>
 800671e:	3501      	adds	r5, #1
 8006720:	68e3      	ldr	r3, [r4, #12]
 8006722:	9903      	ldr	r1, [sp, #12]
 8006724:	1a5b      	subs	r3, r3, r1
 8006726:	42ab      	cmp	r3, r5
 8006728:	dcf2      	bgt.n	8006710 <_printf_i+0x210>
 800672a:	e7eb      	b.n	8006704 <_printf_i+0x204>
 800672c:	2500      	movs	r5, #0
 800672e:	f104 0619 	add.w	r6, r4, #25
 8006732:	e7f5      	b.n	8006720 <_printf_i+0x220>
 8006734:	08006c73 	.word	0x08006c73
 8006738:	08006c84 	.word	0x08006c84

0800673c <memmove>:
 800673c:	4288      	cmp	r0, r1
 800673e:	b510      	push	{r4, lr}
 8006740:	eb01 0402 	add.w	r4, r1, r2
 8006744:	d902      	bls.n	800674c <memmove+0x10>
 8006746:	4284      	cmp	r4, r0
 8006748:	4623      	mov	r3, r4
 800674a:	d807      	bhi.n	800675c <memmove+0x20>
 800674c:	1e43      	subs	r3, r0, #1
 800674e:	42a1      	cmp	r1, r4
 8006750:	d008      	beq.n	8006764 <memmove+0x28>
 8006752:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006756:	f803 2f01 	strb.w	r2, [r3, #1]!
 800675a:	e7f8      	b.n	800674e <memmove+0x12>
 800675c:	4601      	mov	r1, r0
 800675e:	4402      	add	r2, r0
 8006760:	428a      	cmp	r2, r1
 8006762:	d100      	bne.n	8006766 <memmove+0x2a>
 8006764:	bd10      	pop	{r4, pc}
 8006766:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800676a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800676e:	e7f7      	b.n	8006760 <memmove+0x24>

08006770 <_sbrk_r>:
 8006770:	b538      	push	{r3, r4, r5, lr}
 8006772:	2300      	movs	r3, #0
 8006774:	4d05      	ldr	r5, [pc, #20]	@ (800678c <_sbrk_r+0x1c>)
 8006776:	4604      	mov	r4, r0
 8006778:	4608      	mov	r0, r1
 800677a:	602b      	str	r3, [r5, #0]
 800677c:	f7fb fc4a 	bl	8002014 <_sbrk>
 8006780:	1c43      	adds	r3, r0, #1
 8006782:	d102      	bne.n	800678a <_sbrk_r+0x1a>
 8006784:	682b      	ldr	r3, [r5, #0]
 8006786:	b103      	cbz	r3, 800678a <_sbrk_r+0x1a>
 8006788:	6023      	str	r3, [r4, #0]
 800678a:	bd38      	pop	{r3, r4, r5, pc}
 800678c:	20000398 	.word	0x20000398

08006790 <memchr>:
 8006790:	4603      	mov	r3, r0
 8006792:	b510      	push	{r4, lr}
 8006794:	b2c9      	uxtb	r1, r1
 8006796:	4402      	add	r2, r0
 8006798:	4293      	cmp	r3, r2
 800679a:	4618      	mov	r0, r3
 800679c:	d101      	bne.n	80067a2 <memchr+0x12>
 800679e:	2000      	movs	r0, #0
 80067a0:	e003      	b.n	80067aa <memchr+0x1a>
 80067a2:	7804      	ldrb	r4, [r0, #0]
 80067a4:	3301      	adds	r3, #1
 80067a6:	428c      	cmp	r4, r1
 80067a8:	d1f6      	bne.n	8006798 <memchr+0x8>
 80067aa:	bd10      	pop	{r4, pc}

080067ac <memcpy>:
 80067ac:	440a      	add	r2, r1
 80067ae:	4291      	cmp	r1, r2
 80067b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80067b4:	d100      	bne.n	80067b8 <memcpy+0xc>
 80067b6:	4770      	bx	lr
 80067b8:	b510      	push	{r4, lr}
 80067ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067be:	4291      	cmp	r1, r2
 80067c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067c4:	d1f9      	bne.n	80067ba <memcpy+0xe>
 80067c6:	bd10      	pop	{r4, pc}

080067c8 <_realloc_r>:
 80067c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067cc:	4607      	mov	r7, r0
 80067ce:	4614      	mov	r4, r2
 80067d0:	460d      	mov	r5, r1
 80067d2:	b921      	cbnz	r1, 80067de <_realloc_r+0x16>
 80067d4:	4611      	mov	r1, r2
 80067d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067da:	f7ff bc3b 	b.w	8006054 <_malloc_r>
 80067de:	b92a      	cbnz	r2, 80067ec <_realloc_r+0x24>
 80067e0:	f7ff fbce 	bl	8005f80 <_free_r>
 80067e4:	4625      	mov	r5, r4
 80067e6:	4628      	mov	r0, r5
 80067e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067ec:	f000 f81a 	bl	8006824 <_malloc_usable_size_r>
 80067f0:	4284      	cmp	r4, r0
 80067f2:	4606      	mov	r6, r0
 80067f4:	d802      	bhi.n	80067fc <_realloc_r+0x34>
 80067f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80067fa:	d8f4      	bhi.n	80067e6 <_realloc_r+0x1e>
 80067fc:	4621      	mov	r1, r4
 80067fe:	4638      	mov	r0, r7
 8006800:	f7ff fc28 	bl	8006054 <_malloc_r>
 8006804:	4680      	mov	r8, r0
 8006806:	b908      	cbnz	r0, 800680c <_realloc_r+0x44>
 8006808:	4645      	mov	r5, r8
 800680a:	e7ec      	b.n	80067e6 <_realloc_r+0x1e>
 800680c:	42b4      	cmp	r4, r6
 800680e:	4622      	mov	r2, r4
 8006810:	4629      	mov	r1, r5
 8006812:	bf28      	it	cs
 8006814:	4632      	movcs	r2, r6
 8006816:	f7ff ffc9 	bl	80067ac <memcpy>
 800681a:	4629      	mov	r1, r5
 800681c:	4638      	mov	r0, r7
 800681e:	f7ff fbaf 	bl	8005f80 <_free_r>
 8006822:	e7f1      	b.n	8006808 <_realloc_r+0x40>

08006824 <_malloc_usable_size_r>:
 8006824:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006828:	1f18      	subs	r0, r3, #4
 800682a:	2b00      	cmp	r3, #0
 800682c:	bfbc      	itt	lt
 800682e:	580b      	ldrlt	r3, [r1, r0]
 8006830:	18c0      	addlt	r0, r0, r3
 8006832:	4770      	bx	lr

08006834 <_init>:
 8006834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006836:	bf00      	nop
 8006838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800683a:	bc08      	pop	{r3}
 800683c:	469e      	mov	lr, r3
 800683e:	4770      	bx	lr

08006840 <_fini>:
 8006840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006842:	bf00      	nop
 8006844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006846:	bc08      	pop	{r3}
 8006848:	469e      	mov	lr, r3
 800684a:	4770      	bx	lr
